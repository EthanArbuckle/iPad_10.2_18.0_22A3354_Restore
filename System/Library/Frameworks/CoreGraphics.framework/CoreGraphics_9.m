uint64_t PIXELCONSTANT_13369(float *a1, int a2, float *a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5;
  if (v5 >= a4)
  {
    v6 = a4;
    if (v4 > a4)
      v6 = *a1;
  }
  v7 = a1[3];
  v8 = v6 * a1[2];
  if (a3)
    v9 = a2;
  else
    v9 = 0;
  if (v9 == 1)
  {
    if (*a3 >= v4)
      v4 = *a3;
    if (*a3 > v5)
      v4 = a1[1];
    v10 = (float)(v7 + (float)(v4 * v8));
    v11 = v10;
    v12 = v10;
  }
  else
  {
    if (v9 == 4)
    {
      v19 = a3[4];
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      if (v19 < v4)
        v23 = *a1;
      else
        v23 = a3[4];
      if (v19 <= v5)
        v24 = v23;
      else
        v24 = a1[1];
      if (v20 < v4)
        v25 = *a1;
      else
        v25 = *a3;
      if (v20 <= v5)
        v26 = v25;
      else
        v26 = a1[1];
      if (v21 < v4)
        v27 = *a1;
      else
        v27 = a3[1];
      if (v21 <= v5)
        v28 = v27;
      else
        v28 = a1[1];
      if (v22 < v4)
        v29 = *a1;
      else
        v29 = a3[2];
      if (v22 <= v5)
        v30 = v29;
      else
        v30 = a1[1];
      v31 = (float)(v5 - v26) - v24;
      v32 = (float)(v5 - v28) - v24;
      v33 = (float)(v5 - v30) - v24;
      v34 = v7 + (float)(v31 * v8);
      if (v31 < v4)
        v34 = *a1;
      v35 = v7 + (float)(v32 * v8);
      if (v32 < v4)
        v35 = *a1;
      if (v33 >= v4)
        v4 = v7 + (float)(v33 * v8);
      v10 = v34;
      v11 = v35;
      goto LABEL_63;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (v9 == 3)
    {
      v13 = a3[1];
      v14 = a3[2];
      if (*a3 < v4)
        v15 = *a1;
      else
        v15 = *a3;
      if (*a3 <= v5)
        v16 = v15;
      else
        v16 = a1[1];
      if (v13 < v4)
        v17 = *a1;
      else
        v17 = a3[1];
      if (v13 <= v5)
        v18 = v17;
      else
        v18 = a1[1];
      if (v14 >= v4)
        v4 = a3[2];
      if (v14 > v5)
        v4 = a1[1];
      v10 = (float)(v7 + (float)(v16 * v8));
      v11 = (float)(v7 + (float)(v18 * v8));
      v4 = v7 + (float)(v4 * v8);
LABEL_63:
      v12 = v4;
    }
  }
  return (v10 << 16) | ((float)(v7 + v8) << 24) | (v11 << 8) | v12;
}

unsigned int *DMplusDAM(unsigned int *result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;

  v6 = (unsigned __int16)(BYTE1(a4) * (_WORD)a6) + (unsigned __int16)(BYTE1(a2) * (_WORD)a3);
  v7 = (((BYTE1(a4) | (a5 << 16)) * a6) >> 16) + ((((a2 >> 8) & 0xFF00FF) * a3) >> 16);
  if (v6 >= 0xFE79)
    v6 = 65145;
  if (v7 >= 0xFE79)
    v7 = 65145;
  v8 = (a2 & 0xFF00FF) * a3;
  v9 = (unsigned __int16)(a4 * (_WORD)a6) + (unsigned __int16)v8;
  v10 = (((a4 & 0xFF00FFu) * a6) >> 16) + HIWORD(v8);
  if (v9 >= 0xFE79)
    v11 = 65145;
  else
    v11 = v9;
  if (v10 >= 0xFE79)
    v12 = 65145;
  else
    v12 = v10;
  *result = (((((v6 | (v7 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v6 | (v7 << 16)) + 8388736) & 0xFF00FF00 | ((((((v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF;
  return result;
}

void RGBA32_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  int *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  unsigned __int16 *v28;
  int v29;
  unsigned __int16 *v30;
  int v31;
  float v32;
  float v33;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v10 = a1 + 368;
  if (v9)
    v11 = 15;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v32 = *(float *)(a1 + 336);
  v33 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(int **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v33 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v32);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    v25 = vcvtms_s32_f32(v15 + v21);
    if (v21 < 0.0)
      v22 = v25;
    v26 = ceilf(v21 - v15);
    if (v21 <= v15)
      v27 = v23;
    else
      v27 = v26;
    v28 = (unsigned __int16 *)(v16 + 2 * (int)(4 * v22));
    v29 = 255 - (int)v24;
    v30 = (unsigned __int16 *)(v16 + 8 * (int)v27);
    v31 = *(unsigned __int8 *)(v10 + v19);
    *v17++ = ((int)v24 * v30[2] + (v31 << 8) + v29 * v28[2]) & 0xFF0000 | ((_WORD)v31
                                                                         + (unsigned __int16)(((int)v24 * v30[1]
                                                                                             + v29
                                                                                             * v28[1]) >> 8)) & 0xFF00 | ((unsigned __int16)(v31 + (((int)v24 * *v30 + v29 * *v28) >> 8)) >> 8) | (((unsigned __int16)(v31 + (((int)v24 * v30[3] + v29 * v28[3]) >> 8)) >> 8) << 24);
    v19 = ((_DWORD)v19 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t RGBA32_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  char *v27;
  __int16 v31;
  int v32;
  int v33;
  __int16 v34;
  __int16 v35;
  _WORD *v36;
  __int16 v37;
  char v38;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(_WORD **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 4 * *(_DWORD *)(result + 48);
  if (v10)
    v25 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v25 = 0;
  v27 = *(char **)(result + 144);
  v26 = *(int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v36 = (_WORD *)(v23
                    + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                    + 8 * (int)(float)(v20 * (float)(v8 - v18)));
      v31 = v36[1];
      v32 = *(unsigned __int8 *)(v9 + v25);
      v33 = (unsigned __int16)v36[2];
      v34 = v36[3];
      v35 = v32 + *v36;
      goto LABEL_21;
    }
    if (v22)
    {
      v31 = v22[1];
      v32 = *(unsigned __int8 *)(v9 + v25);
      v33 = (unsigned __int16)v22[2];
      v34 = v22[3];
      v35 = v32 + *v22;
LABEL_21:
      v37 = v32 + v31;
      result = (v32 + v33) >> 8;
      *v26 = v37 & 0xFF00 | HIBYTE(v35) | (((unsigned __int16)(v32 + v33) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v32 + v34) >> 8) << 24);
      v38 = -1;
      goto LABEL_22;
    }
    v38 = 0;
LABEL_22:
    v25 = ((_DWORD)v25 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v26;
    *v27++ = v38;
    --a4;
  }
  while (a4);
  return result;
}

void RGBA32_mark_image_RGB24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t i;
  char *v33;
  int v34;
  char *v35;
  char v36;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  vImage_Buffer v43;
  vImage_Buffer v44;

  v8 = a4;
  v38 = a2;
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v40 = v12;
  v41 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v42) = *(_DWORD *)(a1 + 108);
    HIDWORD(v42) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v42, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_28;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v42 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertRGB888toRGBA8888", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertRGB888toRGBA8888", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * v8) + 3 * (v17 + v38);
    v21 = *(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17);
    v22 = v19 * (uint64_t)v8;
    v23 = v12 - 1;
    v24 = v20 + (int)v23 * v22;
    v25 = v21 + v23 * v10;
    v26 = (char *)(v10 < 0 ? v25 : v21);
    v27 = v10 >= 0 ? v10 : -v10;
    v28 = v10 >= 0 ? v22 : -(int)v22;
    v29 = (char *)(v10 < 0 ? v24 : v20);
    if ((v28 & 0x80000000) != 0)
    {
      v30 = (char *)malloc_type_malloc((int)v27 * v12, 0x405B1530uLL);
      v31 = v30;
      if (v12 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          if (v11 >= 1)
          {
            v33 = &v30[i * v27];
            v34 = v11;
            v35 = &v29[i * (int)v28];
            do
            {
              v36 = v35[2];
              *(_WORD *)v33 = *(_WORD *)v35;
              v33[2] = v36;
              v33[3] = -1;
              v35 += 3;
              v33 += 4;
              --v34;
            }
            while (v34);
          }
        }
      }
      CGBlt_copyBytes(4 * v11, v12, v30, v26, v27, v27);
      free(v31);
      v8 = a4;
      if (!v16)
        return;
    }
    else
    {
      v44.data = v29;
      v44.height = v12;
      v44.width = v11;
      v44.rowBytes = v28;
      v43.data = v26;
      v43.height = v12;
      v43.width = v11;
      v43.rowBytes = v27;
      vImageConvert_RGB888toRGBA8888(&v44, 0, 0xFFu, &v43, 0, 0);
      if (!v16)
        return;
    }
LABEL_28:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v42 + 1, &v42, &v41, &v40))
      break;
    v18 = v42;
    v17 = HIDWORD(v42);
    v12 = v40;
    v11 = v41;
    if (v41 < 0)
      goto LABEL_4;
  }
  free(v16);
}

void RGBA32_mark_image_RGB48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t i;
  char *v31;
  int v32;
  char *v33;
  char v34;
  char v35;
  int v36;
  void *v39;
  int v40;
  int v41;
  uint64_t v42;

  v36 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v40 = v12;
  v41 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v42) = *(_DWORD *)(a1 + 108);
    HIDWORD(v42) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v42, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v42 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertRGB16toRGBA8888", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertRGB16toRGBA8888", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    v39 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v36);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0x3B357573uLL);
    }
    if (v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        if (v11 >= 1)
        {
          v31 = &v28[i * v26];
          v32 = v11;
          v33 = (char *)(v20 + i * (int)v22);
          do
          {
            v34 = v33[2];
            v35 = v33[4];
            *v31 = *v33;
            v31[1] = v34;
            v31[2] = v35;
            v31[3] = -1;
            v33 += 6;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v39;
    if (!v39)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v42 + 1, &v42, &v41, &v40))
    {
      free(v16);
      return;
    }
    v18 = v42;
    v17 = HIDWORD(v42);
    v12 = v40;
    v11 = v41;
    if (v41 < 0)
      goto LABEL_4;
  }
}

void RGBA32_mark_image_rgb48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char v36;
  char v37;
  int v38;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;

  v38 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v42 = v12;
  v43 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v44) = *(_DWORD *)(a1 + 108);
    HIDWORD(v44) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v44, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v44 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertrgb16toRGBA8888", 1030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertrgb16toRGBA8888", 1030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    v41 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v38);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0xF2FD8E3FuLL);
    }
    if (v12 >= 1)
    {
      v30 = 0;
      v31 = (char *)(v20 + 5);
      do
      {
        if (v11 >= 1)
        {
          v32 = &v28[v30 * v26];
          v33 = v11;
          v34 = v31;
          do
          {
            v35 = *(v34 - 4);
            v36 = *(v34 - 2);
            v37 = *v34;
            v34 += 6;
            *v32 = v35;
            v32[1] = v36;
            v32[2] = v37;
            v32[3] = -1;
            v32 += 4;
            --v33;
          }
          while (v33);
        }
        ++v30;
        v31 += (int)v22;
      }
      while (v30 != v12);
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v41;
    if (!v41)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v44 + 1, &v44, &v43, &v42))
    {
      free(v16);
      return;
    }
    v18 = v44;
    v17 = HIDWORD(v44);
    v12 = v42;
    v11 = v43;
    if (v43 < 0)
      goto LABEL_4;
  }
}

void RGBA32_mark_image_RGBA64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int v28;
  uint32x4_t *v29;
  __int32 *v30;
  unsigned int v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int v35;
  uint32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  BOOL v42;
  int v43;
  __int32 v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  char *v50;
  int v51;
  int v52;
  char *v53;
  uint64_t i;
  char *v55;
  int v56;
  char *v57;
  char v58;
  char v59;
  char v60;
  int v62;
  int v63;
  void *v67;
  int v68;
  int v69;
  uint64_t v70;

  v8 = a5;
  v63 = a2;
  v62 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v68 = v10;
  v69 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v70) = *(_DWORD *)(a1 + 108);
    HIDWORD(v70) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v70, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v70 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v62 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v67 = v14;
    if (v63 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = -16777216;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FFLL;
        v25.i64[1] = 0xFF000000FFLL;
        v26.i64[0] = 0xFF000000FF000000;
        v26.i64[1] = 0xFF000000FF000000;
        v27.i64[0] = 0x1000100010001;
        v27.i64[1] = 0x1000100010001;
        do
        {
          v28 = v9;
          v29 = (uint32x4_t *)v21;
          v30 = (__int32 *)v18;
          v31 = v9;
          if (v9 >= 4)
          {
            do
            {
              v32.i32[0] = v30[1];
              v32.i32[1] = v30[3];
              v32.i32[2] = v30[5];
              v32.i32[3] = v30[7];
              v33 = (int8x16_t)vshlq_n_s32(v32, 8uLL);
              v34 = (int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x18uLL);
              v35 = vaddvq_s32(v34);
              if (v35)
              {
                v36.i32[0] = *v30;
                v36.i32[1] = v30[2];
                v36.i32[2] = v30[4];
                v36.i32[3] = v30[6];
                v37 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshrq_n_u32(v36, 8uLL) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), vandq_s8((int8x16_t)v36, v25)), vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v32, 0x10uLL) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), vandq_s8(v33, v26)));
                if (v35 != 1020)
                {
                  v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v25);
                  v39.i16[0] = v29->u8[0];
                  v39.i16[1] = BYTE2(v29->u32[0]);
                  v39.i16[2] = BYTE4(v29->i64[0]);
                  v39.i16[3] = BYTE6(v29->i64[0]);
                  v39.i16[4] = v29->i64[1];
                  v39.i16[5] = BYTE2(v29->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned __int128 *)v29);
                  v39.i16[7] = BYTE14(*(unsigned __int128 *)v29);
                  v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v29, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  v41 = vmulq_s32(v39, v38);
                  v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v27), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v27), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v29 = vorrq_s8((int8x16_t)v37, v24);
              }
              v28 = v31 - 4;
              v30 += 8;
              ++v29;
              v42 = v31 > 7;
              v31 -= 4;
            }
            while (v42);
          }
          if (v28 >= 1)
          {
            v43 = v28 + 1;
            do
            {
              v44 = v30[1];
              if (BYTE2(v44))
              {
                v45 = (*v30 >> 8) & 0xFF00 | *v30 | (v30[1] << 16) & 0xFFFFFF | (BYTE2(v30[1]) << 24);
                if (BYTE2(v44) != 255)
                  v45 += ((((v29->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                          + 65537
                          + ((((v29->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFFu)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v29->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v29->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v29->i32[0] = v45 | v23;
              }
              v29 = (uint32x4_t *)((char *)v29 + 4);
              --v43;
              v30 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v62;
          v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      v46 = 0;
      if (v20)
        v46 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertRGBA16toRGBA8888", 568, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertRGBA16toRGBA8888", 568, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v10);
      v47 = v10 - 1;
      if (v62 < 0)
      {
        v18 += (int)v47 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v48 = -v62;
        v21 += v47 * v62;
      }
      else
      {
        v48 = v62;
      }
      v49 = v18 + (int)((v22 * v47) & ((int)v22 >> 31));
      v50 = v21;
      if (v49 <= (unint64_t)&v21[v10 * (uint64_t)v48])
      {
        v51 = (int)v22 >= 0 ? v22 : -(int)v22;
        v50 = v21;
        if (v49 + v10 * (uint64_t)v51 >= (unint64_t)v21)
        {
          v52 = v48;
          v53 = (char *)malloc_type_malloc(v10 * (uint64_t)v48, 0x1951E260uLL);
          v48 = v52;
          v50 = v53;
        }
      }
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          if (v9 >= 1)
          {
            v55 = &v50[i * v48];
            v56 = v9;
            v57 = (char *)(v18 + i * (int)v22);
            do
            {
              v58 = v57[2];
              v59 = v57[4];
              v60 = v57[6];
              if (!v46)
                v60 = -1;
              *v55 = *v57;
              v55[1] = v58;
              v55[2] = v59;
              v55[3] = v60;
              v57 += 8;
              v55 += 4;
              --v56;
            }
            while (v56);
          }
        }
      }
      v8 = a5;
      if (v50 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v50, v21, v48, v48);
        free(v50);
      }
    }
    v14 = v67;
    if (!v67)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v70 + 1, &v70, &v69, &v68))
    {
      free(v14);
      return;
    }
    v16 = v70;
    v15 = HIDWORD(v70);
    v10 = v68;
    v9 = v69;
  }
}

void RGBA32_mark_image_rgba64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int v30;
  uint32x4_t *v31;
  __int32 *v32;
  unsigned int v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  uint32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  BOOL v43;
  int v44;
  unsigned __int32 v45;
  unsigned __int32 v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  char v61;
  char v62;
  char v63;
  int v65;
  int v66;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;

  v8 = a5;
  v66 = a2;
  v65 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v71 = v10;
  v72 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v73) = *(_DWORD *)(a1 + 108);
    HIDWORD(v73) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v73, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v73 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v65 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v70 = v14;
    if (v66 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = -16777216;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF0000FF00;
        v25.i64[1] = 0xFF0000FF00;
        v26.i64[0] = 0xFF00000000FFLL;
        v26.i64[1] = 0xFF00000000FFLL;
        v27.i64[0] = 0xFF000000FF000000;
        v27.i64[1] = 0xFF000000FF000000;
        v28.i64[0] = 0xFF000000FFLL;
        v28.i64[1] = 0xFF000000FFLL;
        v29.i64[0] = 0x1000100010001;
        v29.i64[1] = 0x1000100010001;
        do
        {
          v30 = v9;
          v31 = (uint32x4_t *)v21;
          v32 = (__int32 *)v18;
          v33 = v9;
          if (v9 >= 4)
          {
            do
            {
              v34.i32[0] = v32[1];
              v34.i32[1] = v32[3];
              v34.i32[2] = v32[5];
              v34.i32[3] = v32[7];
              v35 = (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x18uLL);
              v36 = vaddvq_s32(v35);
              if (v36)
              {
                v37.i32[0] = *v32;
                v37.i32[1] = v32[2];
                v37.i32[2] = v32[4];
                v37.i32[3] = v32[6];
                v38 = (int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_185004F20), v25), vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_185004F30), v26)), vorrq_s8(vandq_s8((int8x16_t)v34, v27), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 8uLL) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL))));
                if (v36 != 1020)
                {
                  v39 = (int32x4_t)veorq_s8((int8x16_t)v35, v28);
                  v40.i16[0] = v31->u8[0];
                  v40.i16[1] = BYTE2(v31->u32[0]);
                  v40.i16[2] = BYTE4(v31->i64[0]);
                  v40.i16[3] = BYTE6(v31->i64[0]);
                  v40.i16[4] = v31->i64[1];
                  v40.i16[5] = BYTE2(v31->i64[1]);
                  v40.i16[6] = BYTE12(*(unsigned __int128 *)v31);
                  v40.i16[7] = BYTE14(*(unsigned __int128 *)v31);
                  v41 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v31, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v39);
                  v42 = vmulq_s32(v40, v39);
                  v38 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v42, v29), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v42, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v38, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v41, v29), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v31 = vorrq_s8((int8x16_t)v38, v24);
              }
              v30 = v33 - 4;
              v32 += 8;
              ++v31;
              v43 = v33 > 7;
              v33 -= 4;
            }
            while (v43);
          }
          if (v30 >= 1)
          {
            v44 = v30 + 1;
            do
            {
              v45 = v32[1];
              v46 = HIBYTE(v45);
              if (HIBYTE(v45))
              {
                v47 = HIWORD(*v32) & 0xFF00 | BYTE1(*v32) | v45 & 0xFF000000 | (BYTE1(v45) << 16);
                if (v46 != 255)
                  v47 += ((((v31->i32[0] & 0xFF00FF) * (v46 ^ 0xFF)
                          + 65537
                          + ((((v31->i32[0] & 0xFF00FF) * (v46 ^ 0xFF)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v31->i32[0] >> 8) & 0xFF00FF) * (v46 ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v31->i32[0] >> 8) & 0xFF00FF) * (v46 ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v31->i32[0] = v47 | v23;
              }
              v31 = (uint32x4_t *)((char *)v31 + 4);
              --v44;
              v32 += 2;
            }
            while (v44 > 1);
          }
          v18 += v22;
          v21 += v65;
          v43 = v10-- <= 1;
        }
        while (!v43);
      }
    }
    else
    {
      v48 = 0;
      if (v20)
        v48 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertrgba16toRGBA8888", 1089, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertrgba16toRGBA8888", 1089, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v10);
      v49 = v10 - 1;
      if (v65 < 0)
      {
        v18 += (int)v49 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v50 = -v65;
        v21 += v49 * v65;
      }
      else
      {
        v50 = v65;
      }
      v51 = v18 + (int)((v22 * v49) & ((int)v22 >> 31));
      v52 = v21;
      if (v51 <= (unint64_t)&v21[v10 * (uint64_t)v50])
      {
        v53 = (int)v22 >= 0 ? v22 : -(int)v22;
        v52 = v21;
        if (v51 + v10 * (uint64_t)v53 >= (unint64_t)v21)
        {
          v54 = v50;
          v55 = (char *)malloc_type_malloc(v10 * (uint64_t)v50, 0xEADC93A4uLL);
          v50 = v54;
          v52 = v55;
        }
      }
      if (v10 >= 1)
      {
        v56 = 0;
        v57 = (char *)(v18 + 3);
        do
        {
          if (v9 >= 1)
          {
            v58 = &v52[v56 * v50];
            v59 = v57;
            v60 = v9;
            do
            {
              v61 = *v59;
              v62 = v59[2];
              v63 = v59[4];
              if (!v48)
                v63 = -1;
              *v58 = *(v59 - 2);
              v58[1] = v61;
              v58[2] = v62;
              v58[3] = v63;
              v58 += 4;
              v59 += 8;
              --v60;
            }
            while (v60);
          }
          ++v56;
          v57 += (int)v22;
        }
        while (v56 != v10);
      }
      v8 = a5;
      if (v52 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v52, v21, v50, v50);
        free(v52);
      }
    }
    v14 = v70;
    if (!v70)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v73 + 1, &v73, &v72, &v71))
    {
      free(v14);
      return;
    }
    v16 = v73;
    v15 = HIDWORD(v73);
    v10 = v71;
    v9 = v72;
  }
}

_QWORD *PDFDestinationSetGetDestination(uint64_t *a1, void *key)
{
  _QWORD *Value;
  const __CFDictionary *Mutable;
  uint64_t v6;

  Value = 0;
  if (a1 && key)
  {
    Mutable = (const __CFDictionary *)a1[1];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], &destCallbacks);
      a1[1] = (uint64_t)Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, key);
    if (!Value)
    {
      v6 = *a1;
      Value = malloc_type_calloc(1uLL, 0x28uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (Value)
      {
        *Value = v6;
        Value[1] = PDFXRefTableAddObject(*(_QWORD **)(v6 + 464));
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], key, Value);
    }
  }
  return Value;
}

void destRelease(int a1, void *a2)
{
  free(a2);
}

_BYTE *emitDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *result;
  uint64_t v34;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      PDFDocumentBeginObject(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), a3, a4, a5, a6, a7, a8);
      PDFDocumentPrintf(*(_QWORD *)a2, (uint64_t)"[ ", v9, v10, v11, v12, v13, v14, v34);
      PDFDocumentPrintReference(*(_QWORD *)a2, (uint64_t)"%R", *(_QWORD *)(a2 + 16), v15, v16, v17, v18, v19);
      PDFDocumentPrintf(*(_QWORD *)a2, (uint64_t)" /XYZ %f %f 0 ]", v20, v21, v22, v23, v24, v25, *(_QWORD *)(a2 + 24));
      return PDFDocumentEndObject(*(_QWORD *)a2, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return result;
}

double *create_agars()
{
  double *result;

  agar_HelveticaLTMM = (uint64_t)agar_create("HelveticaLTMM");
  result = agar_create("TimesLTMM");
  agar_TimesLTMM = (uint64_t)result;
  return result;
}

void CGPDFFontMutatorRelease(char *a1)
{
  uint64_t i;
  uint64_t v3;
  char *v4;
  uint64_t j;
  const void *v6;

  if (a1)
  {
    for (i = 544; i != 2592; i += 8)
      free(*(void **)&a1[i]);
    v3 = 0;
    v4 = a1 + 2592;
    do
    {
      for (j = 0; j != 128; j += 8)
      {
        v6 = *(const void **)&v4[j];
        if (v6)
          CFRelease(v6);
      }
      ++v3;
      v4 += 128;
    }
    while (v3 != 16);
    free(a1);
  }
}

double *agar_create(char *a1)
{
  double *v2;
  CGFont *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  _BOOL4 range;
  CGFont *v7;
  double stemv;
  double v9;

  v2 = (double *)malloc_type_calloc(1uLL, 0x48uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v2)
    return v2;
  v3 = CGFontCreateWithName(a1);
  *((_QWORD *)v2 + 8) = v3;
  if (!v3)
  {
LABEL_17:
    free(v2);
    return 0;
  }
  v4 = CGFontCopyVariationAxes(v3);
  if (!v4)
    goto LABEL_14;
  v5 = v4;
  if (!get_range((_QWORD *)v2 + 4, v4, CFSTR("Weight")))
  {
    CFRelease(v5);
    goto LABEL_14;
  }
  range = get_range((_QWORD *)v2 + 6, v5, CFSTR("Width"));
  CFRelease(v5);
  v7 = (CGFont *)*((_QWORD *)v2 + 8);
  if (!range)
    goto LABEL_15;
  *v2 = (double)(int)get_stemv(v7, v2[4], v2[6]);
  v2[1] = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[5], v2[6]);
  v2[2] = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[4], v2[7]);
  stemv = (double)(int)get_stemv(*((CGFont **)v2 + 8), v2[5], v2[7]);
  v2[3] = stemv;
  if (*v2 == v2[1])
  {
    v9 = v2[2];
    if (v9 == stemv && *v2 == v9)
    {
      pdf_error("FAILED to create agar for %s.", a1);
LABEL_14:
      v7 = (CGFont *)*((_QWORD *)v2 + 8);
LABEL_15:
      if (v7)
        CFRelease(v7);
      goto LABEL_17;
    }
  }
  return v2;
}

BOOL get_range(_QWORD *a1, CFArrayRef theArray, const void *a3)
{
  CFIndex Count;
  unint64_t v7;
  CFIndex v8;
  BOOL v9;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  uint64_t v13;

  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v7 = Count;
    v8 = 0;
    v9 = 1;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("kCGFontVariationAxisName"));
      if (CFEqual(Value, a3))
        break;
      v9 = ++v8 < v7;
      if (v7 == v8)
        return 0;
    }
    v13 = 0;
    CGCFDictionaryGetFloat(ValueAtIndex, CFSTR("kCGFontVariationAxisMinValue"), &v13);
    *a1 = v13;
    CGCFDictionaryGetFloat(ValueAtIndex, CFSTR("kCGFontVariationAxisMaxValue"), &v13);
    a1[1] = v13;
  }
  else
  {
    return 0;
  }
  return v9;
}

CGFontRef get_stemv(CGFont *a1, double a2, double a3)
{
  CGFontRef result;
  CGFontRef v4;
  _BOOL4 Descriptor;
  _OWORD v6[4];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  result = create_font_variant(a1, a2, a3);
  if (result)
  {
    v4 = result;
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    memset(v6, 0, sizeof(v6));
    Descriptor = CGFontGetDescriptor(result, (uint64_t)v6);
    CFRelease(v4);
    if (Descriptor)
      return (CGFontRef)(int)*(double *)&v7;
    else
      return 0;
  }
  return result;
}

CGFontRef create_font_variant(CGFont *a1, double a2, double a3)
{
  __CFDictionary *Mutable;
  CGFontRef CopyWithVariations;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CGCFDictionarySetFloat(Mutable, CFSTR("Weight"), a2);
  CGCFDictionarySetFloat(Mutable, CFSTR("Width"), a3);
  CopyWithVariations = CGFontCreateCopyWithVariations(a1, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return CopyWithVariations;
}

void CGPDFFontMutatorGetMutation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  void ***v7;
  uint64_t v8;
  double *v9;
  double **v10;
  void ***Advances;
  double HorizontalAdvance;
  int v13;
  uint64_t v14;
  int advance;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v49;
  double v50;
  double v51;
  double v52;
  int v54;
  int v55;
  uint64_t v56;
  CGFontRef font_variant;
  CGFontRef *v58;
  long double v59;
  double v60;
  double v61;
  char v62;
  long double v63;
  double v64;
  int v65;
  double v66;
  double v67;
  double v68;
  int v69;
  double **v70;

  v5 = a2;
  v6 = *(unsigned __int16 *)(a1 + 2 * a2 + 32);
  v7 = *(void ****)a1;
  if (*(_QWORD *)a1)
    v7 = (void ***)v7[4];
  pdf_log("Mutating glyph %hu (code %d) in %s.\n", v6, a2, (const char *)v7);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4640));
  v8 = a1 + 8 * v5;
  v9 = *(double **)(v8 + 544);
  if (!v9)
  {
    v10 = (double **)(v8 + 544);
    Advances = CGPDFFontGetAdvances(*(void ****)a1);
    HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance((uint64_t)Advances, v5);
    v9 = (double *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (!v9)
    {
LABEL_68:
      *v10 = v9;
      goto LABEL_69;
    }
    v70 = v10;
    v13 = (int)HorizontalAdvance;
    v14 = *(_QWORD *)(a1 + 24);
    advance = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 32), *(double *)(v14 + 48));
    v16 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 40), *(double *)(v14 + 48));
    v17 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 32), *(double *)(v14 + 56));
    v18 = get_advance(*(CGFont **)(v14 + 64), v6, *(double *)(v14 + 40), *(double *)(v14 + 56));
    if (!(int)HorizontalAdvance)
    {
      *(_OWORD *)(v9 + 1) = xmmword_185004990;
      v33 = 0.0;
      v34 = 0.0;
      v10 = v70;
LABEL_65:
      v54 = vcvtmd_s64_f64(v33 * 15.0 + 0.5);
      v55 = vcvtmd_s64_f64(v34 * 15.0 + 0.5);
      v56 = a1 + ((uint64_t)v54 << 7) + 8 * v55;
      font_variant = *(CGFontRef *)(v56 + 2592);
      if (!font_variant)
      {
        v58 = (CGFontRef *)(v56 + 2592);
        font_variant = create_font_variant(*(CGFont **)(v14 + 64), *(double *)(v14 + 32) + (double)v54 / 15.0 * (*(double *)(v14 + 40) - *(double *)(v14 + 32)), *(double *)(v14 + 48) + (double)v55 / 15.0 * (*(double *)(v14 + 56) - *(double *)(v14 + 48)));
        *v58 = font_variant;
      }
      *(_QWORD *)v9 = font_variant;
      goto LABEL_68;
    }
    v19 = (double)*(int *)(a1 + 8);
    v20 = (double)v13;
    v21 = v19 - *(double *)v14;
    v22 = -v21;
    v23 = *(double *)(v14 + 16) - *(double *)v14;
    v24 = *(double *)(v14 + 8) - *(double *)v14;
    v25 = *(double *)(v14 + 24) - *(double *)v14 - v24 - v23;
    v26 = (double)advance;
    v27 = (double)v13 - (double)advance;
    v28 = (double)(v17 - advance);
    v29 = (double)(v16 - advance);
    v30 = (double)(v18 - advance) - v29 - v28;
    if (v25 == 0.0)
    {
      if (v23 == 0.0)
      {
        v31 = v21 / v24;
        v32 = (v27 * v24 + v22 * v29) / (v30 * v21 + v24 * v28);
      }
      else
      {
        v31 = (v27 * v23 + v22 * v28) / (v30 * v21 + v29 * v23);
        v32 = v21 / v23;
      }
      v33 = v31;
      v34 = v32;
    }
    else if (v25 * v22 == v23 * v24)
    {
      v33 = -v23 / v25;
      v34 = (v27 * v25 + v29 * v23) / (v25 * v28 - v30 * v23);
      v31 = (v27 * v25 + v24 * v28) / (v25 * v29 - v30 * v24);
      v32 = -v24 / v25;
    }
    else
    {
      v43 = -v25;
      if (v30 * -v27 != v29 * v28)
      {
        v49 = v29 * v43 + v30 * v24;
        v50 = v24 * v28 - v29 * v23 + v30 * v22 + v25 * v27;
        v51 = v27 * v23 + v28 * v22;
        if (v49 == 0.0)
        {
          v31 = -v51 / v50;
          v33 = v31;
          v10 = v70;
        }
        else
        {
          v64 = v51 * (v49 * -4.0) + v50 * v50;
          v10 = v70;
          if (v64 < 0.0)
          {
            v69 = v16;
            v65 = v18;
            pdf_error("No solutions possible.\n");
            v18 = v65;
            v16 = v69;
            v31 = -1.0;
            v33 = -1.0;
            v32 = -1.0;
            v34 = -1.0;
            goto LABEL_15;
          }
          v66 = sqrt(v64);
          v67 = v49 + v49;
          v33 = (v66 - v50) / (v49 + v49);
          v31 = (-v50 - v66) / v67;
        }
        v68 = v23 + v25 * v31;
        if (v68 == 0.0)
        {
          v34 = -(v29 * v33 - v27) / (v28 + v30 * v33);
          v32 = -(v29 * v31 - v27) / (v28 + v30 * v31);
        }
        else
        {
          v34 = -(v22 + v24 * v33) / (v23 + v25 * v33);
          v32 = -(v22 + v24 * v31) / v68;
        }
LABEL_15:
        v35 = v33 < 0.0 || v33 > 1.0;
        if (!v35 && ((v36 = 1.0, v34 >= 0.0) ? (v37 = v34 > 1.0) : (v37 = 1), !v37)
          || (v31 >= 0.0 ? (v38 = v31 > 1.0) : (v38 = 1),
              !v38 && (v32 >= 0.0 ? (v39 = v32 > 1.0) : (v39 = 1), v33 = v31, v34 = v32, v36 = 1.0, !v39)))
        {
LABEL_59:
          v52 = (v20
               - (v34 * ((1.0 - v33) * (double)v17)
                + v33 * (double)v18 * v34
                + v33 * (double)v16 * (1.0 - v34)
                + (1.0 - v33) * v26 * (1.0 - v34)))
              * 0.5;
          if (fabs(v52) < 0.001 || v52 < 0.0)
            v52 = 0.0;
          v9[1] = v36;
          v9[2] = v52;
          goto LABEL_65;
        }
        v40 = *(double *)(v14 + 24);
        if (v40 >= v19)
        {
          v45 = *(double *)(v14 + 16);
          if (v45 > v19)
          {
            v33 = 0.0;
            if (v26 >= v20)
            {
              v34 = 0.0;
            }
            else
            {
              v34 = 1.0;
              if (v16 != advance && (double)v16 > v20)
                v34 = v27 / v29;
            }
            goto LABEL_57;
          }
          v33 = (v19 - v45) / (v40 - v45);
          v46 = v26 + v33 * v28;
          v34 = 0.0;
          if (v46 < v20)
          {
            v47 = (double)v16 + v33 * (double)(v18 - v16);
            v34 = 1.0;
            if (v47 > v20 && v46 != v47)
            {
              v41 = v20 - v46;
              v42 = v47 - v46;
              goto LABEL_52;
            }
          }
        }
        else
        {
          if ((double)v17 >= v20)
          {
            v34 = 0.0;
            v33 = 1.0;
            goto LABEL_57;
          }
          v33 = 1.0;
          if (v18 != v17 && (double)v18 > v20)
          {
            v41 = v20 - (double)v17;
            v42 = (double)(v18 - v17);
LABEL_52:
            v34 = v41 / v42;
            goto LABEL_57;
          }
          v34 = 1.0;
        }
LABEL_57:
        v36 = 1.0;
        if (v20 / (v33 * v29 + v30 * v33 * v34 + v28 * v34 + v26) <= 1.0)
          v36 = v20 / (v33 * v29 + v30 * v33 * v34 + v28 * v34 + v26);
        goto LABEL_59;
      }
      v33 = -v28 / v30;
      v44 = v30 * v21;
      v34 = (v30 * v21 + v24 * v28) / (v28 * v43 + v30 * v23);
      v31 = (v44 + v29 * v23) / (v29 * v43 + v30 * v24);
      v32 = -v29 / v30;
    }
    v10 = v70;
    goto LABEL_15;
  }
LABEL_69:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4640));
  v59 = *(double *)(a1 + 16);
  v60 = v9[1];
  v61 = v9[2];
  *(double *)(a3 + 56) = *v9;
  *(_WORD *)a3 = v6;
  if (v60 == 1.0 && v59 == 0.0 && v61 == 0.0)
  {
    v62 = 1;
  }
  else
  {
    v63 = tan(v59);
    v62 = 0;
    *(double *)(a3 + 8) = v60;
    *(_QWORD *)(a3 + 16) = 0;
    *(long double *)(a3 + 24) = v60 * v63;
    *(_QWORD *)(a3 + 32) = 0x3FF0000000000000;
    *(double *)(a3 + 40) = v60 * v61 / 1000.0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  *(_BYTE *)(a3 + 2) = v62;
}

uint64_t get_advance(CGFont *a1, __int16 a2, double a3, double a4)
{
  CGFontRef font_variant;
  _QWORD v6[6];
  double v7[2];
  __int16 v8;

  v8 = a2;
  v7[0] = 0.0;
  v7[1] = 0.0;
  font_variant = create_font_variant(a1, a3, a4);
  v6[0] = 0x408F400000000000;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0x408F400000000000;
  v6[4] = 0;
  v6[5] = 0;
  CGFontGetGlyphAdvancesForStyle(font_variant, (uint64_t)v6, 13, (uint64_t)&v8, 1, (uint64_t)v7);
  if (font_variant)
    CFRelease(font_variant);
  return (int)v7[0];
}

void PDFFont::~PDFFont(PDFFont *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E1628BE8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void `anonymous namespace'::make_unique<CIDFontType2,FontSet const&,CGFont *&,int &>(uint64_t *a1, uint64_t a2, const void **a3, int *a4)
{
  uint64_t v8;
  const void *v9;
  int v10;
  void **v11;
  uint64_t v12;
  _WORD *v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;

  v8 = operator new();
  v9 = *a3;
  v10 = *a4;
  *(_QWORD *)v8 = off_1E1628BE8;
  *(_QWORD *)(v8 + 8) = a2;
  if (v9)
    CFRetain(v9);
  *(_QWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)v8 = &off_1E1627EC8;
  *(_QWORD *)(v8 + 64) = 0;
  v11 = (void **)(v8 + 64);
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  PDFFont::get_embedded_font_name((std::string *)(v8 + 88), v8);
  v12 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)a2 + 464));
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 112) = v12;
  *(_QWORD *)(v8 + 120) = v8 + 128;
  v13 = malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *v13 = 0;
  *(_QWORD *)(v8 + 144) = v13;
  std::string::basic_string[abi:se180100]<0>((char **)__p, "G");
  PDFFont::get_next_subset_name((uint64_t)&v16, *(_QWORD *)(v8 + 8), (uint64_t)__p);
  if (*(char *)(v8 + 87) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v16;
  *(_QWORD *)(v8 + 80) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  *a1 = v8;
}

void sub_184CF6BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  char *v14;
  void **v15;
  _QWORD **v16;
  void **v17;

  if (a14 < 0)
    operator delete(__p);
  std::__tree<unsigned long>::destroy(*v16);
  if (v14[111] < 0)
    operator delete(*v15);
  if (v14[87] < 0)
    operator delete(*v17);
  PDFFont::~PDFFont((PDFFont *)v14);
  MEMORY[0x186DC23C4]();
  _Unwind_Resume(a1);
}

uint64_t PDFFont::get_next_subset_name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t **v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t **v14;
  _QWORD *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[11];
  char v23;
  uint64_t v24;
  std::string v25;
  int v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:se180100]((uint64_t)v21);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = a3;
  else
    v6 = *(_QWORD *)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v22, v6, v7);
  v8 = (uint64_t **)(a2 + 16);
  v9 = *(_QWORD **)(a2 + 16);
  if (!v9)
    goto LABEL_14;
  v10 = (uint64_t **)(a2 + 16);
  do
  {
    v11 = std::less<std::string>::operator()[abi:se180100](v9 + 4, (_QWORD *)a3);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = (uint64_t **)v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<std::string>::operator()[abi:se180100]((_QWORD *)a3, v10 + 4))
  {
LABEL_14:
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v25 = *(std::string *)a3;
    v26 = 1;
    v13 = *v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v13;
          v15 = v13 + 4;
          if (!std::less<std::string>::operator()[abi:se180100](&v25, v13 + 4))
            break;
          v13 = *v14;
          v8 = v14;
          if (!*v14)
            goto LABEL_25;
        }
        if (!std::less<std::string>::operator()[abi:se180100](v15, &v25))
          break;
        v8 = v14 + 1;
        v13 = v14[1];
        if (!v13)
          goto LABEL_25;
      }
      v10 = (uint64_t **)*v8;
      if (*v8)
        goto LABEL_31;
    }
    else
    {
      v14 = (uint64_t **)(a2 + 16);
    }
LABEL_25:
    v10 = (uint64_t **)operator new(0x40uLL);
    v16 = (std::string *)(v10 + 4);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v16, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
      v10[6] = (uint64_t *)v25.__r_.__value_.__r.__words[2];
    }
    *((_DWORD *)v10 + 14) = v26;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t *)v14;
    *v8 = (uint64_t *)v10;
    v17 = **(_QWORD **)(a2 + 8);
    v18 = (uint64_t *)v10;
    if (v17)
    {
      *(_QWORD *)(a2 + 8) = v17;
      v18 = *v8;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 16), v18);
    ++*(_QWORD *)(a2 + 24);
LABEL_31:
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  ++*((_DWORD *)v10 + 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v22[0] = v19;
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186DC2388](&v24);
}

void sub_184CF6E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v32;

  operator delete(v29);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  a10 = *MEMORY[0x1E0DE4F50];
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a10 + *(_QWORD *)(a10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a12 = v32;
  a13 = MEMORY[0x1E0DE4FB8] + 16;
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x186DC2388](&a29);
  _Unwind_Resume(a1);
}

void PDFFont::get_embedded_font_name(std::string *this, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v10;
  unsigned int v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type size;
  std::string::size_type v18;
  uint64_t v19;
  std::string *v20;
  std::string *p_str;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  unint64_t v26;
  std::string __str;
  std::string v28;
  std::string v29;
  std::string __p;
  std::string __b;
  char v32;

  v4 = **(_QWORD **)(a2 + 8);
  if (v4 && (v5 = *(_DWORD *)(v4 + 320), *(_DWORD *)(v4 + 320) = v5 + 1, v5))
  {
    v6 = 5;
    v7 = v5;
    do
    {
      v8 = v7;
      v7 /= 0x1Au;
      __b.__r_.__value_.__s.__data_[v6] = v8 - 26 * v7 + 65;
      v10 = v6-- != 0;
    }
    while (v8 >= 0x1A && v10);
    v11 = v6 + 1;
    if (v8 >= 0x1A)
      pdf_error("More font prefixes (%d) than digits for the tag", v5);
    if ((v6 & 0x80000000) != 0)
      goto LABEL_15;
  }
  else
  {
    v11 = 6;
  }
  memset(&__b, 65, v11);
LABEL_15:
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 6;
  LODWORD(v28.__r_.__value_.__l.__data_) = __b.__r_.__value_.__l.__data_;
  WORD2(v28.__r_.__value_.__r.__words[0]) = WORD2(__b.__r_.__value_.__r.__words[0]);
  v28.__r_.__value_.__s.__data_[6] = 0;
  v12 = std::string::append(&v28, "+", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14)
    v15 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v14 + 16) + 144))(*(_QWORD *)(v14 + 112));
  else
    v15 = 0;
  std::string::basic_string[abi:se180100]<0>(&__p.__r_.__value_.__l.__data_, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  while (1)
  {
    v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    size = __str.__r_.__value_.__l.__size_;
    v18 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    if (v18 < 8)
      break;
    v19 = 0;
    v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    do
    {
      if (p_str->__r_.__value_.__s.__data_[v19] - 91 < 0xFFFFFFE6)
        goto LABEL_38;
      ++v19;
    }
    while (v19 != 6);
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (__str.__r_.__value_.__l.__size_ < 6)
      {
LABEL_59:
        __break(1u);
        return;
      }
    }
    else
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 5u)
        goto LABEL_59;
      v20 = &__str;
    }
    if (v20->__r_.__value_.__s.__data_[6] != 43)
      break;
    std::string::basic_string(&__b, &__str, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = __b;
  }
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    size = __str.__r_.__value_.__l.__size_;
  }
  if ((v16 & 0x80u) == 0)
    v22 = &__str;
  else
    v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v16 & 0x80u) == 0)
    v23 = v16;
  else
    v23 = size;
  v24 = std::string::append(&v29, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  this->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v26 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v26 & 0x80u) != 0)
    v26 = this->__r_.__value_.__l.__size_;
  if (v26 >= 0x3F)
  {
    std::string::basic_string(&__b, this, 0, 0x3EuLL, (std::allocator<char> *)&__p);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    *this = __b;
  }
}

void sub_184CF721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

CFTypeRef PDFFont::create_embedded_font(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  const void *Property;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) != 1)
  {
    v10 = a1[2];
    if (v10)
    {
      v11 = atomic_load((unint64_t *)(v10 + 88));
      if (v11)
      {
        Property = CGPropertiesGetProperty(v11, CFSTR("com.apple.CoreGraphics.CGPDFFontData"));
        if (Property)
          return CFRetain(Property);
      }
    }
  }
  v14 = a1[2];
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (!v14)
    return 0;
  if (*((char *)a2 + 23) >= 0)
    v16 = a2;
  else
    v16 = (uint64_t *)*a2;
  return (CFTypeRef)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 16) + 344))(*(_QWORD *)(v14 + 112), v15, v16, a3, a4, a5);
}

void PDFFontAddGlyphsToLayout(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v8;
  void *__p;
  char *v10;
  char *v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  if (a4)
  {
    if (a4 < 0)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    __p = std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(a4);
    v11 = (char *)__p + 2 * v8;
    memmove(__p, a3, 2 * a4);
    v10 = (char *)__p + 2 * a4;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, a2, &__p);
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_184CF7434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *region_check(_QWORD *cf)
{
  _QWORD *v1;
  CFTypeID v2;
  _DWORD *v3;

  if (cf)
  {
    v1 = cf;
    if (!cf[2])
      return 0;
    v2 = CFGetTypeID(cf);
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    if (v2 == __kCGRegionTypeID && (v3 = (_DWORD *)v1[2]) != 0 && *v3 == 0x80000000)
      return (_QWORD *)(v3[1] > 0);
    else
      return 0;
  }
  return cf;
}

void __CGRegionDeallocate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 24) && v2 != 0 && v2 != &the_empty_shape)
    free(v2);
}

CFStringRef __CGRegionCopyFormattingDescription(_QWORD *a1, const __CFDictionary *a2)
{
  int v4;
  int v5;
  double BoundingBox;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const __CFAllocator *v13;
  __CFString *Mutable;
  __CFString *v15;
  double v16;
  const __CFAllocator *v17;
  unint64_t v19;
  CGFloat y;
  CGFloat v21;
  double v22;
  char *v23;
  double width;
  double v25;
  double height;
  _BOOL4 v27;
  double v28;
  double v29;
  double v30;
  CGRect rect;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v4 = CGSGetRegionRectCount(a1);
  if (!v4)
  {
    v17 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v17, a2, CFSTR("#<CGRegion %p empty>"), a1);
  }
  v5 = v4;
  memset(&rect, 0, sizeof(rect));
  BoundingBox = CGRegionGetBoundingBox((uint64_t)a1);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v13, 0);
  v15 = Mutable;
  if (v10 < 0.0 || v12 < 0.0)
  {
    v32.origin.x = BoundingBox;
    v32.origin.y = v8;
    v32.size.width = v10;
    v32.size.height = v12;
    v19 = (unint64_t)CGRectStandardize(v32);
    v33.origin.x = BoundingBox;
    v33.origin.y = v8;
    v33.size.width = v10;
    v33.size.height = v12;
    v34 = CGRectStandardize(v33);
    y = v34.origin.y;
    v34.origin.x = BoundingBox;
    v34.origin.y = v8;
    v34.size.width = v10;
    v34.size.height = v12;
    v35 = CGRectStandardize(v34);
    v21 = v35.origin.x + v35.size.width;
    v35.origin.x = BoundingBox;
    v35.origin.y = v8;
    v35.size.width = v10;
    v35.size.height = v12;
    v36 = CGRectStandardize(v35);
    CFStringAppendFormat(v15, a2, CFSTR("#<CGSRegion %p [%g %g %g %g]"), a1, v19, *(_QWORD *)&y, *(_QWORD *)&v21, v36.origin.y + v36.size.height);
    if (v5 == 1)
      goto LABEL_32;
    v37.origin.x = BoundingBox;
    v37.origin.y = v8;
    v37.size.width = v10;
    v37.size.height = v12;
    v38 = CGRectStandardize(v37);
    v16 = v38.origin.y;
    goto LABEL_9;
  }
  CFStringAppendFormat(Mutable, a2, CFSTR("#<CGSRegion %p [%g %g %g %g]"), a1, *(_QWORD *)&BoundingBox, *(_QWORD *)&v8, BoundingBox + v10, v8 + v12);
  v16 = v8;
  if (v5 != 1)
  {
LABEL_9:
    v22 = v16 + -1.0;
    v23 = CGRegionEnumeratorCreate((char *)a1);
    while (1)
    {
      if (!CGRegionEnumeratorGetNextRect((uint64_t)v23, &rect.origin.x))
      {
        free(v23);
        CFStringAppend(v15, CFSTR("\n"));
        CFStringAppendFormat(v15, a2, CFSTR("\t%6g []\n"), *(_QWORD *)&v16);
        goto LABEL_32;
      }
      v25 = rect.origin.y;
      width = rect.size.width;
      height = rect.size.height;
      v27 = rect.size.height < 0.0 || rect.size.width < 0.0;
      if (v27)
      {
        v39 = CGRectStandardize(rect);
        if (v39.origin.y == v22)
          goto LABEL_30;
        CFStringAppend(v15, CFSTR("\n"));
        v40.origin.x = rect.origin.x;
        v40.origin.y = v25;
        v40.size.width = width;
        v40.size.height = height;
        v41 = CGRectStandardize(v40);
        v28 = v41.origin.y;
      }
      else
      {
        if (rect.origin.y == v22)
          goto LABEL_30;
        CFStringAppend(v15, CFSTR("\n"));
        v28 = v25;
      }
      if (v10 >= 0.0 && v16 >= 0.0)
        break;
      v42.origin.x = BoundingBox;
      v42.origin.y = v8;
      v42.size.width = v10;
      v42.size.height = v16;
      v41 = CGRectStandardize(v42);
      if (v28 > v29)
      {
        v43.origin.x = BoundingBox;
        v43.origin.y = v8;
        v43.size.width = v10;
        v43.size.height = v16;
        v41 = CGRectStandardize(v43);
        v16 = v30;
LABEL_25:
        CFStringAppendFormat(v15, a2, CFSTR("\t%6g []\n"), v41.origin.x, v41.origin.y, v41.size.width, *(_QWORD *)&v16);
      }
LABEL_26:
      if (v27)
      {
        v44.origin.x = rect.origin.x;
        v44.origin.y = v25;
        v44.size.width = width;
        v44.size.height = height;
        v45 = CGRectStandardize(v44);
        CFStringAppendFormat(v15, a2, CFSTR("\t%6g "), v45.origin.x, *(_QWORD *)&v45.origin.y);
        v46.origin.x = rect.origin.x;
        v46.origin.y = v25;
        v46.size.width = width;
        v46.size.height = height;
        v47 = CGRectStandardize(v46);
        v22 = v47.origin.y;
      }
      else
      {
        CFStringAppendFormat(v15, a2, CFSTR("\t%6g "), v41.origin.x, *(_QWORD *)&v25);
        v22 = v25;
      }
      v16 = v25 + height;
LABEL_30:
      CFStringAppendFormat(v15, a2, CFSTR("[%g %g] "), *(_QWORD *)&rect.origin.x, rect.origin.x + width);
    }
    if (v28 <= v16)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_32:
  CFStringAppend(v15, CFSTR(">"));
  return v15;
}

CFStringRef __CGRegionCopyDebugDescription(_QWORD *a1)
{
  return __CGRegionCopyFormattingDescription(a1, 0);
}

double CGRegionGetBoundingBox(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  signed int v10;
  uint64_t v11;

  if (!a1)
    return INFINITY;
  v11 = 0;
  v10 = 0;
  v9 = 0;
  shape_bounds(*(_QWORD *)(a1 + 16), (int *)&v11 + 1, &v11, &v10, &v9);
  result = (double)SHIDWORD(v11);
  v5 = (double)v10 - (double)SHIDWORD(v11);
  if (v5 < 0.0)
  {
    v7 = (double)v10 - (double)SHIDWORD(v11);
    _CGHandleAssert("CGRegionGetBoundingBox", 533, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "width >= 0", "width (%f) must be positive", v1, v2, v3, SLOBYTE(v7));
  }
  if (v5 > 4294967300.0)
    _CGHandleAssert("CGRegionGetBoundingBox", 534, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "width <= UINT_MAX", "width (%f) too big", v1, v2, v3, SLOBYTE(v5));
  v6 = (double)v9 - (double)(int)v11;
  if (v6 < 0.0)
  {
    v8 = (double)v9 - (double)(int)v11;
    _CGHandleAssert("CGRegionGetBoundingBox", 535, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "height >= 0", "height (%f) must be positive", v1, v2, v3, SLOBYTE(v8));
  }
  if (v6 > 4294967300.0)
    _CGHandleAssert("CGRegionGetBoundingBox", 536, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "height <= UINT_MAX", "height (%f) too big", v1, v2, v3, SLOBYTE(v5));
  return result;
}

uint64_t CGRegionGetTypeID()
{
  if (CGRegionGetTypeID_initOnce != -1)
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
  return __kCGRegionTypeID;
}

_QWORD *region_create_with_shape(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  if (!a1 || a1 == &the_empty_shape)
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    result = (_QWORD *)CGTypeCreateInstance(__kCGRegionTypeID, 16, a3, a4, a5, a6, a7, a8);
    result[2] = a1;
  }
  return result;
}

void *CGRegionCreateEmptyRegion()
{
  if (CGRegionGetTypeID_initOnce != -1)
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
  return &__kCGRegionEmptyRegion;
}

_QWORD *region_create_with_bounds(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  _QWORD *result;
  int v13;
  int v14;

  if (a1 >= (int)a3 || (v8 = a4, a2 >= (int)a4))
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    v10 = a3;
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    result = (_QWORD *)CGTypeCreateInstance(__kCGRegionTypeID, 52, a3, a4, a5, a6, a7, a8);
    if (v8 >= 2147483646)
      v13 = 2147483646;
    else
      v13 = v8;
    if (a2 == 0x80000000 || a2 == -2147483647)
      v14 = -2147483647;
    else
      v14 = a2;
    result[3] = 0x280000000;
    *((_DWORD *)result + 8) = v14;
    *((_DWORD *)result + 9) = 4;
    *((_DWORD *)result + 10) = a1;
    *((_DWORD *)result + 11) = v10;
    *((_DWORD *)result + 12) = v13;
    *(_QWORD *)((char *)result + 52) = 0x7FFFFFFF00000002;
    result[2] = result + 3;
  }
  return result;
}

BOOL rect_to_bounds(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, double a5, double a6, double a7, double a8)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  BOOL v25;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v27 = CGRectStandardize(*(CGRect *)&a5);
  x = v27.origin.x;
  y = v27.origin.y;
  width = v27.size.width;
  height = v27.size.height;
  if (v27.size.width < 0.0 || v27.size.height < 0.0)
  {
    v28 = CGRectStandardize(v27);
    if (v28.size.width < 0.0078125)
      goto LABEL_9;
    v29.origin.x = x;
    v29.origin.y = y;
    v29.size.width = width;
    v29.size.height = height;
    v27 = CGRectStandardize(v29);
  }
  else if (v27.size.width < 0.0078125)
  {
    goto LABEL_9;
  }
  if (v27.size.height >= 0.0078125)
  {
    v30.origin.x = x;
    v30.origin.y = y;
    v30.size.width = width;
    v30.size.height = height;
    v31 = CGRectInset(v30, 0.00390625, 0.00390625);
    x = v31.origin.x;
    y = v31.origin.y;
    width = v31.size.width;
    height = v31.size.height;
  }
LABEL_9:
  v32.origin.x = x;
  v32.origin.y = y;
  v32.size.width = width;
  v32.size.height = height;
  v33 = CGRectIntegral(v32);
  v16 = v33.origin.x;
  v17 = v33.origin.y;
  v18 = v33.size.width;
  v19 = v33.size.height;
  if (v33.size.width < 0.0 || v33.size.height < 0.0)
  {
    *(_QWORD *)&v22 = (unint64_t)CGRectStandardize(v33);
    v34.origin.x = v16;
    v34.origin.y = v17;
    v34.size.width = v18;
    v34.size.height = v19;
    v35 = CGRectStandardize(v34);
    v20 = v35.origin.x + v35.size.width;
    v35.origin.x = v16;
    v35.origin.y = v17;
    v35.size.width = v18;
    v35.size.height = v19;
    v36 = CGRectStandardize(v35);
    v21 = v36.origin.y;
    v36.origin.x = v16;
    v36.origin.y = v17;
    v36.size.width = v18;
    v36.size.height = v19;
    v37 = CGRectStandardize(v36);
    v17 = v37.origin.y;
    v19 = v37.size.height;
  }
  else
  {
    v20 = v33.origin.x + v33.size.width;
    v21 = v33.origin.y;
    v22 = v33.origin.x;
  }
  v23 = v17 + v19;
  v24 = v22 < -2147483650.0;
  if (v22 > 2147483650.0)
    v24 = 1;
  if (v20 < -2147483650.0)
    v24 = 1;
  if (v20 > 2147483650.0)
    v24 = 1;
  if (v21 < -2147483650.0)
    v24 = 1;
  if (v21 > 2147483650.0)
    v24 = 1;
  if (v23 < -2147483650.0)
    v24 = 1;
  v25 = v24 || v23 > 2147483650.0;
  if (v25)
  {
    *a4 = 0;
    *a2 = 0;
    *a3 = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = (int)v22;
    *a3 = (int)v20;
    *a2 = (int)v21;
    *a4 = (int)v23;
  }
  return !v25;
}

_QWORD *CGRegionCreateWithRect(double a1, double a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  if (a1 == INFINITY || a2 == INFINITY)
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    return &__kCGRegionEmptyRegion;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
    if (rect_to_bounds(&v13, (_DWORD *)&v11 + 1, &v12, &v11, a1, a2, a3, a4))
      return region_create_with_bounds(v13, SHIDWORD(v11), v12, v11, v7, v8, v9, v10);
    else
      return 0;
  }
}

_QWORD *CGRegionCreateWithRects(double *a1, uint64_t a2)
{
  uint64_t v2;
  double *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 && (v2 = a2) != 0)
  {
    if (a2 == 1)
    {
      return CGRegionCreateWithRect(*a1, a1[1], a1[2], a1[3]);
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v4 = a1 + 2;
      v5 = (int *)&the_empty_shape;
      do
      {
        if ((rect_to_bounds_16910((signed int *)&v16 + 1, (signed int *)&v15 + 1, (signed int *)&v16, (signed int *)&v15, *(v4 - 2), *(v4 - 1), *v4, v4[1]) & 0x80000000) == 0)
        {
          v13 = shape_union_with_bounds(v5, SHIDWORD(v16), SHIDWORD(v15), v16, v15);
          if (v5 && v5 != (int *)&the_empty_shape)
            free(v5);
          v5 = v13;
        }
        v4 += 4;
        --v2;
      }
      while (v2);
      if (v5)
        v14 = v5;
      else
        v14 = (int *)&the_empty_shape;
      return region_create_with_shape(v14, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    return &__kCGRegionEmptyRegion;
  }
}

_QWORD *CGRegionCreateWithBoundsBlock(uint64_t a1)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  v2 = (int *)&the_empty_shape;
LABEL_2:
  v3 = v2;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1 + 16))(&v13, a1);
    if ((_DWORD)v13)
      return region_create_with_shape(v2, v4, v5, v6, v7, v8, v9, v10);
    if (SHIDWORD(v13) < v15 && v14 < v16)
    {
      v2 = shape_union_with_bounds(v2, SHIDWORD(v13), v14, v15, v16);
      if (v3)
      {
        if (v3 != (int *)&the_empty_shape)
          free(v3);
      }
      goto LABEL_2;
    }
  }
}

const __CFData *CGRegionCreateWithData(const __CFData *result)
{
  const __CFData *v1;
  UInt8 *BytePtr;
  CFIndex Length;

  if (result)
  {
    v1 = result;
    BytePtr = (UInt8 *)CFDataGetBytePtr(result);
    Length = CFDataGetLength(v1);
    return (const __CFData *)CGRegionCreateWithBytes(BytePtr, Length);
  }
  return result;
}

_QWORD *CGRegionCreateWithBytes(_DWORD *a1, unint64_t a2)
{
  _BOOL8 v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = shape_data_valid(a1, a2);
  if (!v4)
    return 0;
  v5 = shape_alloc_data(v4, (uint64_t)a1, a2);
  return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
}

CFTypeRef CGRegionCreateCopy(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

_QWORD *CGRegionCreateWithOffset(_QWORD *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double v10;
  double v11;
  BOOL v12;
  unsigned int v13;
  __int32 v14;
  int32x2_t *v16;
  int32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    return 0;
  v10 = floor(a2 + 0.00390625);
  if (v10 < -2147483650.0)
    return 0;
  v11 = floor(a3 + 0.00390625);
  v12 = v10 > 2147483650.0 || v11 < -2147483650.0;
  if (v12 || v11 > 2147483650.0)
    return 0;
  v13 = (int)v10;
  v14 = (int)v11;
  if (!((int)v10 | (int)v11))
    return CFRetain(a1);
  v16 = (int32x2_t *)a1[2];
  if (v16 == (int32x2_t *)(a1 + 3))
    return region_create_with_bounds(v16[2].i32[0] + v13, v16[1].i32[0] + v14, v16[2].i32[1] + v13, (v16[3].i32[0] + v14), a7, a8, a9, a10);
  v17 = shape_offset((uint64_t)a1, v16, v13, v14);
  return region_create_with_shape(v17, v18, v19, v20, v21, v22, v23, v24);
}

_QWORD *CGRegionCreateWithInset(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double v10;
  double v11;
  BOOL v12;
  int v13;
  int v14;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1)
    return 0;
  v10 = floor(a2 + 0.00390625);
  if (v10 < -2147483650.0)
    return 0;
  v11 = floor(a3 + 0.00390625);
  v12 = v10 > 2147483650.0 || v11 < -2147483650.0;
  if (v12 || v11 > 2147483650.0)
    return 0;
  v13 = (int)v10;
  v14 = (int)v11;
  if (!((int)v10 | (int)v11))
    return CFRetain((CFTypeRef)a1);
  v16 = *(_DWORD **)(a1 + 16);
  if (v16 == (_DWORD *)(a1 + 24))
  {
    v17 = v16[6];
    a1 = (v16[4] + v13);
    v18 = (v16[5] - v13);
    if ((int)a1 < (int)v18 && v16[2] + v14 < v17 - v14)
      return region_create_with_bounds(a1, v16[2] + v14, v18, (v17 - v14), a7, a8, a9, a10);
  }
  shape_inset(a1, (uint64_t)v16, v13, v14);
  return region_create_with_shape(v20, v21, v22, v23, v24, v25, v26, v27);
}

_QWORD *CGRegionCreateIntersectionWithRect(_QWORD *cf, double a2, double a3, double a4, double a5)
{
  _QWORD *v6;
  _BOOL8 v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (cf)
  {
    if (a2 == INFINITY || a3 == INFINITY)
    {
      if (CGRegionGetTypeID_initOnce != -1)
        dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
      return &__kCGRegionEmptyRegion;
    }
    else
    {
      v6 = cf;
      if (a2 == -8.98846567e307 && a3 == -8.98846567e307 && a4 == 1.79769313e308 && a5 == 1.79769313e308)
      {
        return CFRetain(cf);
      }
      else
      {
        v19 = 0;
        v20 = 0;
        v10 = rect_to_bounds((_DWORD *)&v20 + 1, &v20, (_DWORD *)&v19 + 1, &v19, a2, a3, a4, a5);
        if (v10)
        {
          v11 = shape_intersect_with_bounds(v10, (int *)v6[2], SHIDWORD(v20), v20, SHIDWORD(v19), v19);
          return region_create_with_shape(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return cf;
}

_QWORD *CGRegionCreateIntersectionWithRegion(_QWORD *a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1 || !cf)
    return 0;
  v9 = a1[2];
  if ((_UNKNOWN *)v9 == &the_empty_shape || *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF)
    return CFRetain(a1);
  v10 = cf[2];
  if ((_UNKNOWN *)v10 == &the_empty_shape || *(_DWORD *)(v10 + 4 * *(int *)(v10 + 4)) == 0x7FFFFFFF)
  {
    a1 = cf;
    return CFRetain(a1);
  }
  if ((_QWORD *)v9 == a1 + 3 && (_QWORD *)v10 == cf + 3)
  {
    v12 = *(_DWORD *)(v9 + 20);
    v13 = *(_DWORD *)(v9 + 24);
    v14 = *(_DWORD *)(v10 + 20);
    v15 = *(_DWORD *)(v10 + 24);
    if (*(_DWORD *)(v9 + 16) <= *(_DWORD *)(v10 + 16))
      v16 = *(_DWORD *)(v10 + 16);
    else
      v16 = *(_DWORD *)(v9 + 16);
    if (*(_DWORD *)(v9 + 8) <= *(_DWORD *)(v10 + 8))
      v17 = *(_DWORD *)(v10 + 8);
    else
      v17 = *(_DWORD *)(v9 + 8);
    if ((int)v12 >= (int)v14)
      v18 = v14;
    else
      v18 = v12;
    if ((int)v13 >= (int)v15)
      v19 = v15;
    else
      v19 = v13;
    return region_create_with_bounds(v16, v17, v18, v19, a5, a6, a7, a8);
  }
  else
  {
    v20 = shape_intersect((uint64_t)a1, (int *)v9, (int *)v10);
    return region_create_with_shape(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

_QWORD *CGRegionCreateUnionWithRect(int **cf, double a2, double a3, double a4, double a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
    return CGRegionCreateWithRect(a2, a3, a4, a5);
  if (a2 == INFINITY || a3 == INFINITY)
    return CFRetain(cf);
  v17 = 0;
  v18 = 0;
  if (!rect_to_bounds((_DWORD *)&v18 + 1, &v18, (_DWORD *)&v17 + 1, &v17, a2, a3, a4, a5))
    return 0;
  v9 = shape_union_with_bounds(cf[2], SHIDWORD(v18), v18, SHIDWORD(v17), v17);
  return region_create_with_shape(v9, v10, v11, v12, v13, v14, v15, v16);
}

_QWORD *CGRegionCreateUnionWithRegion(_QWORD *a1, _QWORD *cf)
{
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    if (!cf)
      return CFRetain(a1);
    v3 = (int *)a1[2];
    if (v3 != (int *)&the_empty_shape && v3[v3[1]] != 0x7FFFFFFF)
    {
      v4 = (int *)cf[2];
      if (v4 != (int *)&the_empty_shape && v4[v4[1]] != 0x7FFFFFFF)
      {
        v5 = shape_union((uint64_t)a1, v3, v4);
        return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      return CFRetain(a1);
    }
LABEL_9:
    a1 = cf;
    return CFRetain(a1);
  }
  if (cf)
    goto LABEL_9;
  return 0;
}

int **CGRegionCreateDifferenceWithRegion(int **result, uint64_t a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    if (!a2)
      return (int **)CFRetain(result);
    v2 = *(int **)(a2 + 16);
    if (v2 == (int *)&the_empty_shape || v2[v2[1]] == 0x7FFFFFFF)
    {
      return (int **)CFRetain(result);
    }
    else
    {
      v3 = shape_difference((uint64_t)result, result[2], v2);
      return (int **)region_create_with_shape(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return result;
}

_QWORD *CGRegionCreateXORWithRegion(_QWORD *a1, _QWORD *cf)
{
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    if (!cf)
      return CFRetain(a1);
    v3 = (int *)a1[2];
    if (v3 != (int *)&the_empty_shape && v3[v3[1]] != 0x7FFFFFFF)
    {
      v4 = (int *)cf[2];
      if (v4 != (int *)&the_empty_shape && v4[v4[1]] != 0x7FFFFFFF)
      {
        v5 = shape_xor((uint64_t)a1, v3, v4);
        return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      return CFRetain(a1);
    }
LABEL_9:
    a1 = cf;
    return CFRetain(a1);
  }
  if (cf)
    goto LABEL_9;
  return 0;
}

_QWORD *CGRegionCreateBySimplifyingRegion(_QWORD *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t v10;
  int *v12;
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t i;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  _OWORD v29[7];
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 0;
  v9 = (int *)cf[2];
  if (v9 == (int *)&the_empty_shape || v9[v9[1]] == 0x7FFFFFFF || !v9)
    return CFRetain(cf);
  v10 = v9[1];
  if (*v9 != 0x80000000 || (int)v10 < 1)
  {
    v12 = 0;
  }
  else
  {
    if (v9[v10] == 0x7FFFFFFF)
      return CFRetain(cf);
    v14 = a2;
    v28[1] = 0;
    v26 = 0;
    v27 = 0;
    v15 = shape_bounds((uint64_t)v9, (int *)&v27, (_DWORD *)&v27 + 1, (signed int *)&v26 + 1, &v26);
    if ((int)v15 >= 9)
    {
      if ((v14 & 1) == 0)
      {
        *(_QWORD *)&v30[0] = 0x280000000;
        *((_QWORD *)&v30[0] + 1) = HIDWORD(v27) | 0x400000000;
        *(_QWORD *)&v30[1] = __PAIR64__(HIDWORD(v26), v27);
        DWORD2(v30[1]) = v26;
        *(_QWORD *)((char *)&v30[1] + 12) = 0x7FFFFFFF00000002;
        v9 = shape_difference(v15, (int *)v30, v9);
      }
      v28[0] = 8;
      v28[2] = v30;
      v28[3] = v29;
      memset(v30, 0, sizeof(v30));
      memset(v29, 0, sizeof(v29));
      v16 = &v9[v9[1]];
      for (i = *v16; (_DWORD)i != 0x7FFFFFFF; i = *v16)
      {
        v18 = v16[1];
        v19 = (unsigned int *)&v16[v18];
        if (*v19 == 0x7FFFFFFF)
          break;
        HIDWORD(v27) = i;
        v20 = *v19;
        LODWORD(v26) = *v19;
        if ((_DWORD)v18 != 2)
        {
          v21 = (unsigned int *)(v16 + 2);
          do
          {
            v22 = *v21;
            v23 = v21[1];
            v21 += 2;
            shape_accum_add((unsigned int *)v28, v22, i, v23, v20);
          }
          while (v21 != v19);
          LODWORD(v18) = v16[1];
        }
        v16 += (int)v18;
      }
      if ((v14 & 1) != 0)
      {
        v9 = shape_accum_shape((int *)v28);
      }
      else
      {
        if (v9 && v9 != (int *)&the_empty_shape)
          free(v9);
        v24 = shape_accum_shape((int *)v28);
        v25 = shape_bounds((uint64_t)v24, (int *)&v27, (_DWORD *)&v27 + 1, (signed int *)&v26 + 1, &v26);
        *(_QWORD *)&v30[0] = 0x280000000;
        *((_QWORD *)&v30[0] + 1) = HIDWORD(v27) | 0x400000000;
        *(_QWORD *)&v30[1] = __PAIR64__(HIDWORD(v26), v27);
        DWORD2(v30[1]) = v26;
        *(_QWORD *)((char *)&v30[1] + 12) = 0x7FFFFFFF00000002;
        v9 = shape_difference(v25, (int *)v30, v24);
        if (v24 && v24 != (int *)&the_empty_shape)
          free(v24);
      }
    }
    v12 = v9;
    v9 = (int *)cf[2];
  }
  if (v12 != v9)
    return region_create_with_shape(v12, a2, a3, a4, a5, a6, a7, a8);
  return CFRetain(cf);
}

uint64_t *CGRegionCreateByTransformingRegion(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _DWORD *v17;
  float v18;
  float v19;
  int v20;
  int *v21;
  _BOOL4 v22;
  int *v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  int *v63;

  if (!result)
    return result;
  v8 = (int *)result[2];
  if (v8 == (int *)&the_empty_shape || v8[v8[1]] == 0x7FFFFFFF)
    return (uint64_t *)CFRetain(result);
  v9 = a3;
  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  v13 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v15 = *(double *)(a2 + 32);
  v14 = *(double *)(a2 + 40);
  if (*(double *)a2 == 1.0 && v11 == 0.0 && v13 == 0.0 && v12 == 1.0)
  {
    if (v15 != 0.0 || v14 != 0.0)
    {
      v18 = v15;
      v19 = v14;
      return CGRegionCreateWithOffset(result, v18, v19, a2, a3, a4, a5, a6, a7, a8);
    }
    return (uint64_t *)CFRetain(result);
  }
  if (floor(v10) == v10
    && v10 > 0.0
    && v12 < 0.0
    && v11 == 0.0
    && v13 == 0.0
    && floor(v12) == v12
    && floor(v15) == v15
    && floor(v14) == v14)
  {
    v17 = shape_reverse_y(result[2], (int)v10, (int)v12, (int)v15, (int)v14);
    return region_create_with_shape(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = 0;
  v21 = v8 + 2;
  v22 = v13 == 0.0 && v11 == 0.0;
  v23 = (int *)&the_empty_shape;
  while (v8)
  {
    if (!v20)
    {
      while (1)
      {
        v8 = v21;
        v25 = v21[1];
        v21 += v25;
        v24 = *v21;
        if (*v21 == 0x7FFFFFFF)
          goto LABEL_99;
        v20 = v25 - 2;
        if ((_DWORD)v25 != 2)
          goto LABEL_34;
      }
    }
    v24 = *v21;
LABEL_34:
    v26 = &v21[-v20];
    v28 = *v26;
    v27 = v26[1];
    v29 = *v8;
    v30 = (double)v28;
    if (v22)
    {
      v31 = v15 + v10 * v30;
      v32 = v15 + v10 * (double)v27;
      if (v31 <= v32)
        v33 = v15 + v10 * v30;
      else
        v33 = v15 + v10 * (double)v27;
      if (v31 <= v32)
        v31 = v15 + v10 * (double)v27;
      v34 = v14 + v12 * (double)v29;
      v35 = v14 + v12 * (double)v24;
      if (v34 > v35)
        v36 = v14 + v12 * (double)v24;
      else
        v36 = v14 + v12 * (double)v29;
      if (v34 <= v35)
        v34 = v14 + v12 * (double)v24;
      goto LABEL_88;
    }
    v37 = v27 - v28;
    v38 = (double)v37;
    v39 = (double)(v24 - v29);
    v40 = v15 + v13 * (double)v29 + v10 * v30;
    v41 = v14 + v12 * (double)v29 + v11 * v30;
    v42 = v40 + v10 * (double)v37;
    v43 = v41 + v11 * (double)v37;
    if (v42 > v40)
      v44 = v40 + v10 * (double)v37;
    else
      v44 = v40;
    if (v42 >= v40)
      v45 = v40;
    else
      v45 = v40 + v10 * (double)v37;
    if (v42 >= v40)
      v40 = v44;
    if (v43 > v41)
      v46 = v41 + v11 * (double)v37;
    else
      v46 = v41;
    if (v43 >= v41)
      v47 = v41;
    else
      v47 = v41 + v11 * (double)v37;
    if (v43 >= v41)
      v48 = v46;
    else
      v48 = v41;
    v49 = v42 + v13 * v39;
    v50 = v43 + v12 * v39;
    if (v49 > v40)
      v51 = v49;
    else
      v51 = v40;
    if (v49 >= v45)
      v33 = v45;
    else
      v33 = v49;
    if (v49 >= v45)
      v52 = v51;
    else
      v52 = v40;
    if (v50 > v48)
      v53 = v50;
    else
      v53 = v48;
    if (v50 >= v47)
      v36 = v47;
    else
      v36 = v50;
    if (v50 < v47)
      v53 = v48;
    v31 = v49 + -v10 * v38;
    if (v31 >= v33)
    {
      if (v31 > v52)
        goto LABEL_84;
    }
    else
    {
      v33 = v31;
    }
    v31 = v52;
LABEL_84:
    v34 = v50 + -v11 * v38;
    if (v34 < v36)
    {
      v36 = v34;
LABEL_87:
      v34 = v53;
      goto LABEL_88;
    }
    if (v34 <= v53)
      goto LABEL_87;
LABEL_88:
    v54 = ceil(v33 + -0.00390625);
    v55 = floor(v31 + 0.00390625);
    v56 = ceil(v36 + -0.00390625);
    v57 = floor(v34 + 0.00390625);
    v58 = floor(v33 + 0.00390625);
    v59 = ceil(v31 + -0.00390625);
    v60 = floor(v36 + 0.00390625);
    v61 = ceil(v34 + -0.00390625);
    if (v9 != 1)
    {
      v58 = v54;
      v59 = v55;
      v60 = v56;
      v61 = v57;
    }
    a3 = (int)v60;
    a4 = (int)v59;
    a2 = (int)v58;
    a5 = (int)v61;
    if ((int)a2 < (int)a4 && (int)a3 < (int)a5)
    {
      v63 = shape_union_with_bounds(v23, a2, a3, a4, a5);
      if (v23)
      {
        if (v23 != (int *)&the_empty_shape)
          free(v23);
      }
    }
    else
    {
      v63 = v23;
    }
    v20 -= 2;
    v23 = v63;
    if (!v63)
      break;
  }
LABEL_99:
  v17 = v23;
  return region_create_with_shape(v17, a2, a3, a4, a5, a6, a7, a8);
}

BOOL CGRegionIsEmpty(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 1;
  v1 = *(_QWORD *)(a1 + 16);
  return (_UNKNOWN *)v1 == &the_empty_shape || *(_DWORD *)(v1 + 4 * *(int *)(v1 + 4)) == 0x7FFFFFFF;
}

_QWORD *CGRegionCreateByScalingRegion(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  _QWORD *v22;
  char *v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int32x2_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0.0)
    _CGHandleAssert("CGRegionCreateByScalingRegion", 479, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "scale > 0", "scale %f must be positive", a7, a8, a9, SLOBYTE(a2));
  if (!a1)
    return 0;
  v9 = a1[2];
  if ((_UNKNOWN *)v9 == &the_empty_shape)
    return CFRetain(a1);
  if (a2 == 1.0 || *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF)
    return CFRetain(a1);
  v12 = vcvtd_n_s64_f64(a2, 8uLL);
  v13 = shape_length(a1[2]);
  if (v13 == 5)
  {
    v21 = vshr_n_s32(vmla_s32((int32x2_t)0x100000001, *(int32x2_t *)(v9 + 8), vdup_n_s32(v12)), 8uLL);
    if (vorr_s8((int8x8_t)vdup_lane_s32(v21, 1), (int8x8_t)v21).u32[0])
    {
      v31 = v21;
      v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
      *v22 = 0x480000000;
      v22[1] = v31;
      *((_DWORD *)v22 + 4) = 0x7FFFFFFF;
    }
    else
    {
      v22 = &the_empty_shape;
    }
  }
  else
  {
    v23 = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
    v24 = v23;
    *(_DWORD *)v23 = 0;
    *(_OWORD *)(v23 + 4) = xmmword_185004E30;
    *(int32x2_t *)(v23 + 20) = vdup_n_s32(0x7FFFFFFEu);
    *((_QWORD *)v23 + 5) = 0;
    *((_QWORD *)v23 + 6) = 0;
    *((_QWORD *)v23 + 4) = 0;
    if (*(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) != 0x7FFFFFFF)
    {
      *((_DWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 4) = v9;
      *((_QWORD *)v23 + 5) = v9 + 8;
    }
    v32 = 0;
    v33 = 0;
    v22 = &the_empty_shape;
    while (1)
    {
      v25 = shape_enum_next((uint64_t)v24, (_DWORD *)&v33 + 1, &v33, (_DWORD *)&v32 + 1, &v32);
      if (!(_DWORD)v25)
        break;
      v26 = (int)(HIDWORD(v33) * v12 + 1) >> 8;
      v27 = (int)(v33 * v12 + 1) >> 8;
      v33 = __PAIR64__(v26, v27);
      v28 = (int)(HIDWORD(v32) * v12 + 255) >> 8;
      v29 = (int)(v32 * v12 + 255) >> 8;
      v32 = __PAIR64__(v28, v29);
      if (v22 == (_QWORD *)&the_empty_shape)
      {
        v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
        *v22 = 0x280000000;
        *((_DWORD *)v22 + 2) = v27;
        *((_DWORD *)v22 + 3) = 4;
        *((_DWORD *)v22 + 4) = v26;
        *((_DWORD *)v22 + 5) = v28;
        *((_DWORD *)v22 + 6) = v29;
        *(_QWORD *)((char *)v22 + 28) = 0x7FFFFFFF00000002;
      }
      else
      {
        v34 = 0x280000000;
        v35 = v27;
        v36 = 4;
        v37 = v26;
        v38 = v28;
        v39 = v29;
        v40 = 0x7FFFFFFF00000002;
        v30 = shape_union(v25, (int *)v22, (int *)&v34);
        if (v22)
          free(v22);
        v22 = v30;
      }
    }
    free(v24);
  }
  return region_create_with_shape(v22, v14, v15, v16, v17, v18, v19, v20);
}

CFTypeRef CGRegionRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGRegionRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGRegionEqualToRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  _BOOL4 v25;

  if (!a1)
  {
    if (!a2)
      return 1;
    v7 = *(_QWORD *)(a2 + 16);
LABEL_13:
    if ((_UNKNOWN *)v7 != &the_empty_shape)
      return *(_DWORD *)(v7 + 4 * *(int *)(v7 + 4)) == 0x7FFFFFFF;
    return 1;
  }
  if (!a2)
  {
    v7 = *(_QWORD *)(a1 + 16);
    goto LABEL_13;
  }
  if (a1 == a2)
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v2 == v3)
    return 1;
  if ((_UNKNOWN *)v2 != &the_empty_shape)
  {
    v4 = *(int *)(v2 + 4);
    v5 = *(_DWORD *)(v2 + 4 * v4);
    if (v5 != 0x7FFFFFFF)
    {
      v6 = *(int *)(v3 + 4);
      goto LABEL_17;
    }
  }
  if ((_UNKNOWN *)v3 == &the_empty_shape)
    return 1;
  v6 = *(int *)(v3 + 4);
  if (*(_DWORD *)(v3 + 4 * v6) == 0x7FFFFFFF)
    return 1;
  v4 = *(int *)(v2 + 4);
  v5 = *(_DWORD *)(v2 + 4 * v4);
LABEL_17:
  v9 = (_DWORD *)(v2 + 4 * v4);
  v10 = (int *)(v3 + 4 * v6);
  while (2)
  {
    if (v5 == 0x7FFFFFFF)
    {
      v13 = *v10;
      v14 = 1;
LABEL_34:
      if (v13 != 0x7FFFFFFF)
        goto LABEL_39;
LABEL_37:
      v25 = 1;
      return v14 ^ v25 ^ 1u;
    }
    v11 = (int)v9[1];
    v12 = &v9[v11];
    v13 = *v10;
    v14 = *v12 == 0x7FFFFFFF;
    if (*v12 == 0x7FFFFFFF)
      goto LABEL_34;
    if (v13 == 0x7FFFFFFF)
    {
      v14 = 0;
      goto LABEL_37;
    }
    v15 = v10[1];
    v16 = &v10[v15];
    if (*v16 == 0x7FFFFFFF)
    {
      v14 = 0;
LABEL_39:
      v25 = v10[v10[1]] == 0x7FFFFFFF;
      return v14 ^ v25 ^ 1u;
    }
    result = 0;
    if (v5 == v13 && *v12 == *v16)
    {
      v5 = *v12;
      v17 = v9 + 3;
      v18 = 4 * v11 - 8;
      v19 = v10 + 3;
      v20 = 4 * v15 - 8;
      while (v18 && v20)
      {
        if (*(v17 - 1) == *(v19 - 1))
        {
          v22 = *v17;
          v17 += 2;
          v21 = v22;
          v23 = *v19;
          v19 += 2;
          v18 -= 8;
          v20 -= 8;
          if (v21 == v23)
            continue;
        }
        return 0;
      }
      result = 0;
      v24 = (v18 == 0) ^ (v20 == 0);
      v10 = v16;
      v9 = v12;
      if ((v24 & 1) == 0)
        continue;
    }
    return result;
  }
}

uint64_t CGRegionIsValid(_QWORD *a1)
{
  if (a1)
    return (uint64_t)region_check(a1);
  else
    return 1;
}

BOOL CGRegionContainsPoint(_BOOL8 result, double a2, double a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;

  if (result)
  {
    v3 = result;
    v4 = vcvtmd_s64_f64(a2);
    v5 = vcvtmd_s64_f64(a3);
    v6 = *(_DWORD **)(result + 16);
    if (v6 == (_DWORD *)(v3 + 24))
      return v6[5] > v4 && v6[6] > v5 && v6[4] <= v4 && v6[2] <= v5;
    else
      return shape_contains_point((uint64_t)v6, v4, v5) != 0;
  }
  return result;
}

BOOL CGRegionContainsRect(_BOOL8 result, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v5 = result;
    v7 = 0;
    v8 = 0;
    v6 = rect_to_bounds((_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7, a2, a3, a4, a5);
    result = 0;
    if (v6)
      return shape_contains_bounds(*(_QWORD *)(v5 + 16), SHIDWORD(v8), v8, SHIDWORD(v7), v7) != 0;
  }
  return result;
}

uint64_t CGRegionContainsRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  _DWORD *v9;
  BOOL v10;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  signed int *v27;
  signed int *v28;
  signed int v29;
  _DWORD *v30;
  _DWORD *v31;
  signed int v32;
  char vars0;

  if (!a1 || !a2)
    _CGHandleAssert("assert_check_region", 46, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "r != NULL", "NULL region", a6, a7, a8, vars0);
  v8 = *(_DWORD **)(a1 + 16);
  v9 = *(_DWORD **)(a2 + 16);
  if (v8)
    v10 = v8 == (_DWORD *)&the_empty_shape;
  else
    v10 = 1;
  v11 = v10 || v9 == (_DWORD *)&the_empty_shape;
  if (v11 || *v8 != 0x80000000)
    return 0;
  result = 0;
  if (v9)
  {
    v13 = v8[1];
    if ((int)v13 >= 1)
    {
      if (*v9 == 0x80000000)
      {
        v14 = v9[1];
        if ((int)v14 >= 1 && v8[v13] != 0x7FFFFFFF && v9[v14] != 0x7FFFFFFF)
        {
          if (v8 == v9)
            return 1;
          v17 = v9[2];
          v15 = v9 + 2;
          v16 = v17;
          v18 = v8 + 2;
          if (v17 == 0x7FFFFFFF)
            return *v18 != 0x7FFFFFFF;
LABEL_22:
          v19 = *v18;
          if (*v18 == 0x7FFFFFFF)
            return *v18 != 0x7FFFFFFF;
          v20 = (int)v15[1];
          if ((_DWORD)v20 == 2)
          {
            v21 = v15[2];
            v20 = 2;
            goto LABEL_25;
          }
          v22 = &v15[v20];
          v24 = *v22;
          v23 = (unint64_t)(v22 - 1);
          v21 = v24;
          while (1)
          {
            v25 = v18[1];
            if ((_DWORD)v25 == 2)
            {
              v19 = v18[2];
              v25 = 2;
            }
            else
            {
              if (v16 < v19)
                return 0;
              v26 = &v18[v25];
              v19 = *v26;
              if (v16 < *v26)
              {
                v27 = v18 + 2;
                v28 = v26 - 1;
                v29 = 0x80000000;
                v30 = v15;
                while (1)
                {
                  v31 = v30 + 2;
                  if ((unint64_t)(v30 + 2) >= v23)
                    break;
                  v32 = v30[2];
                  if (v27 < v28)
                  {
                    while (v32 >= *v27)
                    {
                      v29 = v27[1];
                      if (v32 <= v29)
                      {
                        if (v30[3] > v29)
                          return 0;
                        goto LABEL_40;
                      }
                      v27 += 2;
                      if (v27 >= v28)
                        goto LABEL_40;
                    }
                    return 0;
                  }
LABEL_40:
                  v30 += 2;
                  if (v27 >= v28)
                  {
                    result = 0;
                    v30 = v31;
                    if (v32 > v29)
                      return result;
                  }
                }
                v16 = *v26;
                if (v21 > v19)
                  goto LABEL_44;
                if (v21 == v19)
                  v18 += v25;
LABEL_25:
                v15 += v20;
                v16 = v21;
                if (v21 == 0x7FFFFFFF)
                  return *v18 != 0x7FFFFFFF;
                goto LABEL_22;
              }
            }
LABEL_44:
            v18 += v25;
            if (v19 == 0x7FFFFFFF)
              goto LABEL_25;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t CGRegionIsRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (!a1)
    _CGHandleAssert("assert_check_region", 46, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegion.c", "r != NULL", "NULL region", a6, a7, a8, v15);
  v9 = *(_QWORD *)(a1 + 16);
  if ((_UNKNOWN *)v9 == &the_empty_shape || *(_DWORD *)(v9 + 4 * *(int *)(v9 + 4)) == 0x7FFFFFFF)
  {
    v10 = 1;
    if (!a2)
      return v10;
  }
  else
  {
    if (*(_DWORD *)(v9 + 12) != 4 || *(_DWORD *)(v9 + 28) != 2)
      return 0;
    v10 = *(_DWORD *)(v9 + 32) == 0x7FFFFFFF;
    if (!a2)
      return v10;
  }
  if (v10)
  {
    *(double *)a2 = CGRegionGetBoundingBox(a1);
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    return 1;
  }
  return v10;
}

BOOL CGRegionIntersectsRect(_BOOL8 result, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if ((_UNKNOWN *)v5 == &the_empty_shape || *(_DWORD *)(v5 + 4 * *(int *)(v5 + 4)) == 0x7FFFFFFF)
      return 0;
    if (a2 == INFINITY || a3 == INFINITY)
    {
      return 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v7 = rect_to_bounds((_DWORD *)&v12 + 1, &v12, (_DWORD *)&v11 + 1, &v11, a2, a3, a4, a5);
      v8 = v7;
      result = 0;
      if (v8)
      {
        result = 0;
        v9 = v12;
        v10 = v11;
        if ((int)v11 >= 2147483646)
          v10 = 2147483646;
        if ((_DWORD)v12 == 0x80000000 || (_DWORD)v12 == -2147483647)
          v9 = -2147483647;
        if (SHIDWORD(v12) < SHIDWORD(v11) && v9 < v10)
        {
          v13 = 0x280000000;
          v14 = v9;
          v15 = 4;
          v16 = HIDWORD(v12);
          v17 = HIDWORD(v11);
          v18 = v10;
          v19 = 0x7FFFFFFF00000002;
          return shape_intersects_shape((signed int *)v5, (signed int *)&v13) != 0;
        }
      }
    }
  }
  return result;
}

BOOL CGRegionIntersectsRegion(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return shape_intersects_shape(*(signed int **)(a1 + 16), *(signed int **)(a2 + 16)) != 0;
  }
  return result;
}

CFDataRef CGRegionCopyData(_QWORD *a1)
{
  UInt8 *v2;
  int v3;
  uint64_t v4;

  if (region_check(a1)
    && (v2 = (UInt8 *)a1[2], (v3 = shape_length((uint64_t)v2)) != 0)
    && (v4 = 4 * v3, shape_data_valid(v2, v4)))
  {
    return CFDataCreate(0, v2, v4);
  }
  else
  {
    return 0;
  }
}

unint64_t CGRegionGetDataLength(_QWORD *a1)
{
  _DWORD *v2;
  int v3;
  unint64_t v4;

  if (!region_check(a1))
    return 0;
  v2 = (_DWORD *)a1[2];
  v3 = shape_length((uint64_t)v2);
  if (!v3)
    return 0;
  v4 = 4 * v3;
  if (shape_data_valid(v2, v4))
    return v4;
  else
    return 0;
}

_DWORD *CGRegionGetDataBytePtr(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  if (!region_check(a1))
    return 0;
  v2 = (_DWORD *)a1[2];
  v3 = shape_length((uint64_t)v2);
  if (!v3)
    return 0;
  if (shape_data_valid(v2, 4 * v3))
    return v2;
  return 0;
}

uint64_t rgba64_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 64);
  v75 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  v73 = *(_DWORD *)(result + 188);
  v13 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
        v25 = v74;
        v26 = v75;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v8;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_34;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v25 = v74;
        v26 = v75;
        v23 = v73 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v7 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_34;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v25 = v74;
      v26 = v75;
      v23 = v73 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v25)
      break;
    v27 = *(_QWORD *)(result + 192);
    v28 = v25 - *(_QWORD *)(result + 200);
    v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v73;
      v30 = v28 + 0x1000000;
      v31 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v26)
  {
    v31 = ((unint64_t)a2 >> 26) & 0x3C;
    v30 = a2;
    goto LABEL_26;
  }
  v32 = *(_QWORD *)(result + 192);
  v33 = *(_QWORD *)(result + 200) + v26;
  v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1)
    goto LABEL_34;
  if (v34 < v32)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v73;
  v30 = v33 - 0x1000000;
  v31 = 28;
LABEL_26:
  if (v23 < 0x400000)
    goto LABEL_34;
  v35 = v4 + SHIDWORD(v24) * (uint64_t)v5;
  v36 = 3 * (v30 >> 32);
  v37 = v35 + v36;
  v38 = *(unsigned __int8 **)(result + 32);
  if (v13 >= v35 + v36)
    v39 = (unsigned __int8 *)(v35 + v36);
  else
    v39 = (unsigned __int8 *)v13;
  if (v39 < v38)
    v39 = *(unsigned __int8 **)(result + 32);
  v40 = (v39[1] << 16) | (*v39 << 24) | (v39[2] << 8) | 0xFF;
  if (!v6)
    goto LABEL_66;
  v41 = *(_DWORD *)(v6 + (v31 | v22));
LABEL_37:
  v42 = v41 & 0xF;
  v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      v59 = (unsigned __int8 *)(v37 + SBYTE1(v41) * (uint64_t)v5);
      if (v13 < (unint64_t)v59)
        v59 = (unsigned __int8 *)v13;
      if (v59 < v38)
        v59 = v38;
      v60 = interpolate_8888_19472[v43];
      v61 = v43 + 1;
      v58 = v40 - ((v60 & v40) >> v61);
      v62 = (((v59[1] << 16) | (*v59 << 24) | (v59[2] << 8) | 0xFF) & v60) >> v61;
LABEL_65:
      v40 = v58 + v62;
      break;
    case 2:
      v63 = (unsigned __int8 *)(v37 + 3 * SBYTE2(v41));
      if (v13 < (unint64_t)v63)
        v63 = (unsigned __int8 *)v13;
      if (v63 < v38)
        v63 = v38;
      v54 = (v63[1] << 16) | (*v63 << 24) | (v63[2] << 8) | 0xFF;
      v64 = (v41 >> 28) & 3;
      v56 = interpolate_8888_19472[v64];
      v57 = v64 + 1;
      v58 = v40 - ((v56 & v40) >> v57);
LABEL_64:
      v62 = (v54 & v56) >> v57;
      goto LABEL_65;
    case 3:
      v44 = 3 * SBYTE2(v41);
      v45 = (unsigned __int8 *)(v37 + v44);
      if (v13 < v37 + v44)
        v45 = (unsigned __int8 *)v13;
      if (v45 < v38)
        v45 = v38;
      v46 = (v45[1] << 16) | (*v45 << 24) | (v45[2] << 8) | 0xFF;
      v47 = v37 + SBYTE1(v41) * (uint64_t)v5;
      if (v13 >= v47)
        v48 = (unsigned __int8 *)(v37 + SBYTE1(v41) * (uint64_t)v5);
      else
        v48 = (unsigned __int8 *)v13;
      if (v48 < v38)
        v48 = v38;
      v49 = (v48[1] << 16) | (*v48 << 24) | (v48[2] << 8) | 0xFF;
      v50 = (unsigned __int8 *)(v47 + v44);
      if (v13 < (unint64_t)v50)
        v50 = (unsigned __int8 *)v13;
      if (v50 < v38)
        v50 = v38;
      v51 = interpolate_8888_19472[v43];
      v52 = v43 + 1;
      v53 = v40 - ((v51 & v40) >> v52) + ((v49 & v51) >> v52);
      v54 = v46 - ((v51 & v46) >> v52) + ((((v50[1] << 16) | (*v50 << 24) | (v50[2] << 8) | 0xFF) & v51) >> v52);
      v55 = (v41 >> 28) & 3;
      v56 = interpolate_8888_19472[v55];
      v57 = v55 + 1;
      v58 = v53 - ((v53 & v56) >> v57);
      goto LABEL_64;
  }
LABEL_66:
  v65 = 0;
  v66 = 0;
  a3 += v10;
  v67 = v8 - a3;
  a2 += v9;
  v68 = v75 - a2;
  while (1)
  {
    HIDWORD(v69) = HIBYTE(v40);
    LODWORD(v69) = v40;
    *(_QWORD *)(v11 + 8 + 8 * v66) = ((unint64_t)(v40 | (v40 << 8)) << 48) | ((unint64_t)(BYTE1(v40) | (BYTE1(v40) << 8)) << 32) | v40 & 0xFF0000 | (BYTE2(v40) << 24) | (unint64_t)(v69 >> 24);
    *(_BYTE *)(v12 + 1 + v66) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v67 | v68 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v12 += v66 + 1;
      v11 = v11 - v65 + 8;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    v71 = 3 * (a2 >> 32);
    v37 = v70 + v71;
    v38 = *(unsigned __int8 **)(result + 32);
    if (v13 >= v70 + v71)
      v72 = (unsigned __int8 *)(v70 + v71);
    else
      v72 = (unsigned __int8 *)v13;
    if (v72 < v38)
      v72 = *(unsigned __int8 **)(result + 32);
    v40 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      v41 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        v12 += v66 + 1;
        v11 = v11 - v65 + 8;
        a4 += ~(_DWORD)v66;
        v23 = -1;
        goto LABEL_37;
      }
    }
    ++v66;
    v65 -= 8;
    a3 += v10;
    v67 -= v10;
    a2 += v9;
    v68 -= v9;
    v23 = -1;
  }
}

uint64_t rgba64_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  char v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v73 = *(_QWORD *)(result + 80);
  v76 = *(_QWORD *)(result + 72);
  v77 = *(_QWORD *)(result + 88);
  v6 = *(_QWORD *)(result + 112);
  v7 = *(_QWORD *)(result + 120);
  v8 = *(_QWORD *)(result + 152) - 8;
  v9 = *(_QWORD *)(result + 144) - 1;
  v11 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 40);
  v74 = *(_DWORD *)(result + 188);
  v12 = v11 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v75 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v76)
    {
      if ((uint64_t)a3 <= v77)
      {
        v21 = (a3 >> 22) & 0x3C0;
        v22 = 0x3FFFFFFF;
        HIDWORD(v23) = HIDWORD(a3);
        v24 = v75;
      }
      else
      {
        v17 = *(_QWORD *)(result + 216);
        v18 = *(_QWORD *)(result + 224) + v77;
        v19 = v18 - a3 + (v17 >> 1);
        if (v19 < 1)
          goto LABEL_34;
        if (v19 >= v17)
          LODWORD(v20) = 0x3FFFFFFF;
        else
          v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
        v24 = v75;
        v22 = v74 | v20;
        v23 = v18 - 0x1000000;
        v21 = 448;
      }
    }
    else
    {
      v13 = *(_QWORD *)(result + 216);
      v14 = v76 - *(_QWORD *)(result + 224);
      v15 = a3 - v14 + (v13 >> 1);
      if (v15 < 1)
        goto LABEL_34;
      if (v15 >= v13)
        LODWORD(v16) = 0x3FFFFFFF;
      else
        v16 = (unint64_t)(*(_QWORD *)(result + 232) * v15) >> 32;
      v24 = v75;
      v22 = v74 | v16;
      v23 = v14 + 0x1000000;
      v21 = 512;
    }
    if (a2 >= v24)
      break;
    v25 = *(_QWORD *)(result + 192);
    v26 = v24 - *(_QWORD *)(result + 200);
    v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25)
        v22 = ((v22 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v74;
      v28 = v26 + 0x1000000;
      v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v6;
    a3 += v7;
    v8 += 8;
    *(_BYTE *)++v9 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v73)
  {
    v29 = ((unint64_t)a2 >> 26) & 0x3C;
    v28 = a2;
    goto LABEL_26;
  }
  v30 = *(_QWORD *)(result + 192);
  v31 = *(_QWORD *)(result + 200) + v73;
  v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1)
    goto LABEL_34;
  if (v32 < v30)
    v22 = ((v22 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v74;
  v28 = v31 - 0x1000000;
  v29 = 28;
LABEL_26:
  if (v22 < 0x400000)
    goto LABEL_34;
  v33 = v11 + SHIDWORD(v23) * (uint64_t)v4;
  v34 = v28 >> 32;
  v35 = v33 + 4 * v34;
  v36 = *(unsigned int **)(result + 32);
  if (v12 >= v35)
    v37 = (unsigned int *)(v33 + 4 * v34);
  else
    v37 = (unsigned int *)v12;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = bswap32(*v37);
  if (!v5)
  {
    v40 = v73;
    goto LABEL_67;
  }
  v39 = *(_DWORD *)(v5 + (v29 | v21));
LABEL_38:
  v41 = v39 & 0xF;
  v42 = HIBYTE(v39) & 3;
  v40 = v73;
  switch(v41)
  {
    case 1:
      v58 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v12 < (unint64_t)v58)
        v58 = (unsigned int *)v12;
      if (v58 < v36)
        v58 = v36;
      v59 = interpolate_8888_19472[v42];
      v60 = v42 + 1;
      v57 = v38 - ((v59 & v38) >> v60);
      v61 = (bswap32(*v58) & v59) >> v60;
LABEL_66:
      v38 = v57 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v12 < (unint64_t)v62)
        v62 = (unsigned int *)v12;
      if (v62 < v36)
        v62 = v36;
      v53 = bswap32(*v62);
      v63 = (v39 >> 28) & 3;
      v55 = interpolate_8888_19472[v63];
      v56 = v63 + 1;
      v57 = v38 - ((v55 & v38) >> v56);
LABEL_65:
      v61 = (v53 & v55) >> v56;
      goto LABEL_66;
    case 3:
      v43 = (unint64_t)HIWORD(v39) << 56;
      v44 = (unsigned int *)(v35 + (v43 >> 54));
      if (v12 < (unint64_t)v44)
        v44 = (unsigned int *)v12;
      if (v44 < v36)
        v44 = v36;
      v45 = bswap32(*v44);
      v46 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v12 >= v46)
        v47 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v12;
      if (v47 < v36)
        v47 = v36;
      v48 = bswap32(*v47);
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v12 < (unint64_t)v49)
        v49 = (unsigned int *)v12;
      if (v49 < v36)
        v49 = v36;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v38 - ((v50 & v38) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      v54 = (v39 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_65;
  }
LABEL_67:
  v64 = 0;
  v65 = 0;
  a3 += v7;
  v66 = v77 - a3;
  a2 += v6;
  v67 = v40 - a2;
  while (1)
  {
    HIDWORD(v69) = HIBYTE(v38);
    LODWORD(v69) = v38;
    v68 = (v69 >> 24);
    v70 = (unint64_t)(v38 | (v38 << 8)) << 48;
    if (!v10)
      v70 = 0xFFFF000000000000;
    *(_QWORD *)(v8 + 8 + 8 * v64) = v70 | ((unint64_t)(BYTE1(v38) | (BYTE1(v38) << 8)) << 32) | v38 & 0xFF0000 | (BYTE2(v38) << 24) | v68;
    *(_BYTE *)(v9 + 1 + v64) = v22 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v76) | (a2 - v75)) & 0x8000000000000000) != 0)
    {
      v8 = v8 - v65 + 8;
      v9 += v64 + 1;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v71 = v11 + SHIDWORD(a3) * (uint64_t)v4;
    v35 = v71 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(result + 32);
    if (v12 >= v35)
      v72 = (unsigned int *)(v71 + 4 * (a2 >> 32));
    else
      v72 = (unsigned int *)v12;
    if (v72 < v36)
      v72 = *(unsigned int **)(result + 32);
    v38 = bswap32(*v72);
    if (v5)
    {
      v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        v8 = v8 - v65 + 8;
        v9 += v64 + 1;
        a4 += ~(_DWORD)v64;
        v22 = -1;
        goto LABEL_38;
      }
    }
    v65 -= 8;
    ++v64;
    a3 += v7;
    v66 -= v7;
    a2 += v6;
    v67 -= v6;
    v22 = -1;
  }
}

uint64_t rgba64_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v75 = *(_QWORD *)(result + 80);
  v78 = *(_QWORD *)(result + 72);
  v79 = *(_QWORD *)(result + 88);
  v6 = *(_QWORD *)(result + 112);
  v7 = *(_QWORD *)(result + 120);
  v8 = *(_QWORD *)(result + 152) - 8;
  v9 = *(_QWORD *)(result + 144) - 1;
  v11 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 40);
  v76 = *(_DWORD *)(result + 188);
  v12 = v11 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v77 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v78)
    {
      if ((uint64_t)a3 <= v79)
      {
        v21 = (a3 >> 22) & 0x3C0;
        v22 = 0x3FFFFFFF;
        HIDWORD(v23) = HIDWORD(a3);
        v24 = v77;
      }
      else
      {
        v17 = *(_QWORD *)(result + 216);
        v18 = *(_QWORD *)(result + 224) + v79;
        v19 = v18 - a3 + (v17 >> 1);
        if (v19 < 1)
          goto LABEL_34;
        if (v19 >= v17)
          LODWORD(v20) = 0x3FFFFFFF;
        else
          v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
        v24 = v77;
        v22 = v76 | v20;
        v23 = v18 - 0x1000000;
        v21 = 448;
      }
    }
    else
    {
      v13 = *(_QWORD *)(result + 216);
      v14 = v78 - *(_QWORD *)(result + 224);
      v15 = a3 - v14 + (v13 >> 1);
      if (v15 < 1)
        goto LABEL_34;
      if (v15 >= v13)
        LODWORD(v16) = 0x3FFFFFFF;
      else
        v16 = (unint64_t)(*(_QWORD *)(result + 232) * v15) >> 32;
      v24 = v77;
      v22 = v76 | v16;
      v23 = v14 + 0x1000000;
      v21 = 512;
    }
    if (a2 >= v24)
      break;
    v25 = *(_QWORD *)(result + 192);
    v26 = v24 - *(_QWORD *)(result + 200);
    v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25)
        v22 = ((v22 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v76;
      v28 = v26 + 0x1000000;
      v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v6;
    a3 += v7;
    v8 += 8;
    *(_BYTE *)++v9 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v75)
  {
    v29 = ((unint64_t)a2 >> 26) & 0x3C;
    v28 = a2;
    goto LABEL_26;
  }
  v30 = *(_QWORD *)(result + 192);
  v31 = *(_QWORD *)(result + 200) + v75;
  v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1)
    goto LABEL_34;
  if (v32 < v30)
    v22 = ((v22 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v76;
  v28 = v31 - 0x1000000;
  v29 = 28;
LABEL_26:
  if (v22 < 0x400000)
    goto LABEL_34;
  v33 = v11 + SHIDWORD(v23) * (uint64_t)v4;
  v34 = v28 >> 32;
  v35 = v33 + 4 * v34;
  v36 = *(unsigned int **)(result + 32);
  if (v12 >= v35)
    v37 = (unsigned int *)(v33 + 4 * v34);
  else
    v37 = (unsigned int *)v12;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = *v37;
  if (!v5)
  {
    v40 = v75;
    goto LABEL_67;
  }
  v39 = *(_DWORD *)(v5 + (v29 | v21));
LABEL_38:
  v41 = v39 & 0xF;
  v42 = HIBYTE(v39) & 3;
  v40 = v75;
  switch(v41)
  {
    case 1:
      v59 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v12 < (unint64_t)v59)
        v59 = (unsigned int *)v12;
      if (v59 < v36)
        v59 = v36;
      v60 = interpolate_8888_19472[v42];
      v61 = v42 + 1;
      v57 = v38 - ((v60 & v38) >> v61);
      v62 = (v60 & *v59) >> v61;
LABEL_66:
      v38 = v57 + v62;
      break;
    case 2:
      v63 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v12 < (unint64_t)v63)
        v63 = (unsigned int *)v12;
      if (v63 < v36)
        v63 = v36;
      v64 = (v39 >> 28) & 3;
      v65 = interpolate_8888_19472[v64];
      v56 = v64 + 1;
      v57 = v38 - ((v65 & v38) >> v56);
      v58 = v65 & *v63;
LABEL_65:
      v62 = v58 >> v56;
      goto LABEL_66;
    case 3:
      v43 = (unint64_t)HIWORD(v39) << 56;
      v44 = (unsigned int *)(v35 + (v43 >> 54));
      if (v12 < (unint64_t)v44)
        v44 = (unsigned int *)v12;
      if (v44 < v36)
        v44 = v36;
      v45 = *v44;
      v46 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v12 >= v46)
        v47 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v12;
      if (v47 < v36)
        v47 = v36;
      v48 = *v47;
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v12 < (unint64_t)v49)
        v49 = (unsigned int *)v12;
      if (v49 < v36)
        v49 = v36;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v38 - ((v50 & v38) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      v54 = (v39 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      v58 = v53 & v55;
      goto LABEL_65;
  }
LABEL_67:
  v66 = 0;
  v67 = 0;
  a3 += v7;
  v68 = v79 - a3;
  a2 += v6;
  v69 = v40 - a2;
  while (1)
  {
    HIDWORD(v71) = HIBYTE(v38);
    LODWORD(v71) = v38;
    v70 = (v71 >> 24);
    v72 = (unint64_t)(v38 | (v38 << 8)) << 48;
    if (!v10)
      v72 = 0xFFFF000000000000;
    *(_QWORD *)(v8 + 8 + 8 * v66) = v72 | ((unint64_t)(BYTE1(v38) | (BYTE1(v38) << 8)) << 32) | v38 & 0xFF0000 | (BYTE2(v38) << 24) | v70;
    *(_BYTE *)(v9 + 1 + v66) = v22 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v68 | v69 | (a3 - v78) | (a2 - v77)) & 0x8000000000000000) != 0)
    {
      v8 = v8 - v67 + 8;
      v9 += v66 + 1;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v73 = v11 + SHIDWORD(a3) * (uint64_t)v4;
    v35 = v73 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(result + 32);
    if (v12 >= v35)
      v74 = (unsigned int *)(v73 + 4 * (a2 >> 32));
    else
      v74 = (unsigned int *)v12;
    if (v74 < v36)
      v74 = *(unsigned int **)(result + 32);
    v38 = *v74;
    if (v5)
    {
      v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        v8 = v8 - v67 + 8;
        v9 += v66 + 1;
        a4 += ~(_DWORD)v66;
        v22 = -1;
        goto LABEL_38;
      }
    }
    v67 -= 8;
    ++v66;
    a3 += v7;
    v68 -= v7;
    a2 += v6;
    v69 -= v6;
    v22 = -1;
  }
}

uint64_t rgba64_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  int v51;
  char v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 64);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v71 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v70 = *(_DWORD *)(result + 188);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = -16777216;
  v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v8;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_37;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v25 = v70 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v7 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_37;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v25 = v70 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v6)
      break;
    v27 = *(_QWORD *)(result + 192);
    v28 = v6 - *(_QWORD *)(result + 200);
    v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v70;
      v30 = v28 + 0x1000000;
      v31 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v71)
  {
    v31 = ((unint64_t)a2 >> 26) & 0x3C;
    v30 = a2;
    goto LABEL_29;
  }
  v32 = *(_QWORD *)(result + 192);
  v33 = *(_QWORD *)(result + 200) + v71;
  v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1)
    goto LABEL_37;
  if (v34 < v32)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v70;
  v30 = v33 - 0x1000000;
  v31 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_37;
  v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
  v36 = v30 >> 32;
  v37 = v35 + 4 * v36;
  v38 = *(unsigned int **)(result + 32);
  if (v15 >= v37)
    v39 = (unsigned int *)(v35 + 4 * v36);
  else
    v39 = (unsigned int *)v15;
  if (v39 < v38)
    v39 = *(unsigned int **)(result + 32);
  v40 = bswap32(*v39);
  if (!v5)
    goto LABEL_69;
  v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
  v42 = v41 & 0xF;
  v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      v57 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      if (v15 < (unint64_t)v57)
        v57 = (unsigned int *)v15;
      if (v57 < v38)
        v57 = v38;
      v58 = interpolate_8888_19472[v43];
      v59 = v43 + 1;
      v60 = v40 - ((v58 & v40) >> v59);
      v61 = (bswap32(*v57) & v58) >> v59;
LABEL_68:
      v40 = v60 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
      if (v15 < (unint64_t)v62)
        v62 = (unsigned int *)v15;
      if (v62 < v38)
        v62 = v38;
      v53 = bswap32(*v62);
      v54 = (v41 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v55 & v40;
LABEL_67:
      v63 = v54 + 1;
      v60 = v40 - (v56 >> v63);
      v61 = (v53 & v55) >> v63;
      goto LABEL_68;
    case 3:
      v44 = (unint64_t)HIWORD(v41) << 56;
      v45 = (unsigned int *)(v37 + (v44 >> 54));
      if (v15 < (unint64_t)v45)
        v45 = (unsigned int *)v15;
      if (v45 < v38)
        v45 = v38;
      v46 = bswap32(*v45);
      v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
      if (v15 >= v47)
        v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      else
        v48 = (unsigned int *)v15;
      if (v48 < v38)
        v48 = v38;
      v49 = bswap32(*v48);
      v50 = (unsigned int *)(v47 + (v44 >> 54));
      if (v15 < (unint64_t)v50)
        v50 = (unsigned int *)v15;
      if (v50 < v38)
        v50 = v38;
      v51 = interpolate_8888_19472[v43];
      v52 = v43 + 1;
      v40 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
      v53 = v46 - ((v51 & v46) >> v52) + ((bswap32(*v50) & v51) >> v52);
      v54 = (v41 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v40 & v55;
      goto LABEL_67;
  }
LABEL_69:
  v64 = 0;
  a2 += v9;
  v65 = v71 - a2;
  v66 = (unsigned int *)(v11 + 12);
  a3 += v10;
  v67 = v8 - a3;
  while (1)
  {
    *(v66 - 1) = ((v40 | v14) << 8) & 0xFF0000 | ((v40 | v14) >> 8 << 24) | ((v40 | v14) >> 8) & 0xFF00 | ((v40 | v14) >> 16);
    *v66 = (v40 | v14) & 0xFF000000 | ((v40 | v14) >> 8) & 0xFF0000 | v40 | (v40 << 8);
    *(_BYTE *)(v12 + 1 + v64) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v67 | v65 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) != 0)
    {
      v11 = (uint64_t)(v66 - 1);
      v12 += v64 + 1;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v68 = v13 + SHIDWORD(a3) * (uint64_t)v4;
    v37 = v68 + 4 * (a2 >> 32);
    v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37)
      v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    else
      v69 = (unsigned int *)v15;
    if (v69 < v38)
      v69 = *(unsigned int **)(result + 32);
    v40 = bswap32(*v69);
    if (v5)
    {
      v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        v11 = (uint64_t)(v66 - 1);
        v12 += v64 + 1;
        a4 += ~(_DWORD)v64;
        v25 = -1;
        goto LABEL_40;
      }
    }
    v65 -= v9;
    v66 += 2;
    ++v64;
    a3 += v10;
    v67 -= v10;
    a2 += v9;
    v25 = -1;
  }
}

uint64_t rgba64_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  uint64_t v74;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 64);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v73 = *(_DWORD *)(result + 188);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = -16777216;
  v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v8;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_37;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v25 = v73 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v7 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_37;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v25 = v73 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v6)
      break;
    v27 = *(_QWORD *)(result + 192);
    v28 = v6 - *(_QWORD *)(result + 200);
    v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v73;
      v30 = v28 + 0x1000000;
      v31 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 8;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v31 = ((unint64_t)a2 >> 26) & 0x3C;
    v30 = a2;
    goto LABEL_29;
  }
  v32 = *(_QWORD *)(result + 192);
  v33 = *(_QWORD *)(result + 200) + v74;
  v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1)
    goto LABEL_37;
  if (v34 < v32)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v73;
  v30 = v33 - 0x1000000;
  v31 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_37;
  v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
  v36 = v30 >> 32;
  v37 = v35 + 4 * v36;
  v38 = *(unsigned int **)(result + 32);
  if (v15 >= v37)
    v39 = (unsigned int *)(v35 + 4 * v36);
  else
    v39 = (unsigned int *)v15;
  if (v39 < v38)
    v39 = *(unsigned int **)(result + 32);
  v40 = *v39;
  if (!v5)
    goto LABEL_69;
  v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
  v42 = v41 & 0xF;
  v43 = HIBYTE(v41) & 3;
  switch(v42)
  {
    case 1:
      v60 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      if (v15 < (unint64_t)v60)
        v60 = (unsigned int *)v15;
      if (v60 < v38)
        v60 = v38;
      v61 = interpolate_8888_19472[v43];
      v62 = v43 + 1;
      v58 = v40 - ((v61 & v40) >> v62);
      v63 = (v61 & *v60) >> v62;
LABEL_68:
      v40 = v58 + v63;
      break;
    case 2:
      v64 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
      if (v15 < (unint64_t)v64)
        v64 = (unsigned int *)v15;
      if (v64 < v38)
        v64 = v38;
      v65 = (v41 >> 28) & 3;
      v66 = interpolate_8888_19472[v65];
      v57 = v65 + 1;
      v58 = v40 - ((v66 & v40) >> v57);
      v59 = v66 & *v64;
LABEL_67:
      v63 = v59 >> v57;
      goto LABEL_68;
    case 3:
      v44 = (unint64_t)HIWORD(v41) << 56;
      v45 = (unsigned int *)(v37 + (v44 >> 54));
      if (v15 < (unint64_t)v45)
        v45 = (unsigned int *)v15;
      if (v45 < v38)
        v45 = v38;
      v46 = *v45;
      v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
      if (v15 >= v47)
        v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
      else
        v48 = (unsigned int *)v15;
      if (v48 < v38)
        v48 = v38;
      v49 = *v48;
      v50 = (unsigned int *)(v47 + (v44 >> 54));
      if (v15 < (unint64_t)v50)
        v50 = (unsigned int *)v15;
      if (v50 < v38)
        v50 = v38;
      v51 = interpolate_8888_19472[v43];
      v52 = v43 + 1;
      v53 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
      v54 = v46 - ((v51 & v46) >> v52) + ((v51 & *v50) >> v52);
      v55 = (v41 >> 28) & 3;
      v56 = interpolate_8888_19472[v55];
      v57 = v55 + 1;
      v58 = v53 - ((v53 & v56) >> v57);
      v59 = v54 & v56;
      goto LABEL_67;
  }
LABEL_69:
  v67 = 0;
  a2 += v9;
  v68 = v74 - a2;
  v69 = (unsigned int *)(v11 + 12);
  a3 += v10;
  v70 = v8 - a3;
  while (1)
  {
    *(v69 - 1) = ((v40 | v14) << 8) & 0xFF0000 | ((v40 | v14) >> 8 << 24) | ((v40 | v14) >> 8) & 0xFF00 | ((v40 | v14) >> 16);
    *v69 = (v40 | v14) & 0xFF000000 | ((v40 | v14) >> 8) & 0xFF0000 | v40 | (v40 << 8);
    *(_BYTE *)(v12 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v67)
      return result;
    if (((v70 | v68 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) != 0)
    {
      v11 = (uint64_t)(v69 - 1);
      v12 += v67 + 1;
      a4 += ~(_DWORD)v67;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v71 = v13 + SHIDWORD(a3) * (uint64_t)v4;
    v37 = v71 + 4 * (a2 >> 32);
    v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37)
      v72 = (unsigned int *)(v71 + 4 * (a2 >> 32));
    else
      v72 = (unsigned int *)v15;
    if (v72 < v38)
      v72 = *(unsigned int **)(result + 32);
    v40 = *v72;
    if (v5)
    {
      v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        v11 = (uint64_t)(v69 - 1);
        v12 += v67 + 1;
        a4 += ~(_DWORD)v67;
        v25 = -1;
        goto LABEL_40;
      }
    }
    v68 -= v9;
    v69 += 2;
    ++v67;
    a3 += v10;
    v70 -= v10;
    a2 += v9;
    v25 = -1;
  }
}

uint64_t rgba64_sample_W16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  unsigned __int16 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v93 = *(_QWORD *)(result + 80);
  v91 = *(_QWORD *)(result + 88);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v13 = 0;
  else
    v13 = -65536;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(unsigned int *)(result + 256);
  v16 = v5 + (v14 * v7) + 2 * (v15 - 1);
  v89 = *(_DWORD *)(result + 188);
  v17 = v4 + (v14 * v6) + 2 * v15 - 2;
  v90 = *(_QWORD *)(result + 64);
  v92 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v92)
      {
        if (a3 <= v91)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v90;
          v30 = v93;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v91;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_43;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v90;
          v30 = v93;
          v27 = v89 | v25;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v92 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_43;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v90;
        v30 = v93;
        v27 = v89 | v21;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v29 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v89;
        v34 = v32 + 0x1000000;
        v35 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v30)
    {
      v35 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_29;
    }
    v36 = *(_QWORD *)(result + 192);
    v37 = *(_QWORD *)(result + 200) + v30;
    v38 = v37 - a2 + (v36 >> 1);
    if (v38 < 1)
      goto LABEL_43;
    if (v38 < v36)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v38) >> 32) >> 15)) | v89;
    v34 = v37 - 0x1000000;
    v35 = 28;
LABEL_29:
    if (v27 < 0x400000)
      goto LABEL_43;
    v39 = v28 >> 32;
    v40 = (v34 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v4 + (int)v39 * (uint64_t)v6 + v40;
    v42 = *(unsigned __int16 **)(result + 32);
    if (v17 >= v41)
      v43 = (unsigned __int16 *)(v4 + (int)v39 * (uint64_t)v6 + v40);
    else
      v43 = (unsigned __int16 *)v17;
    if (v43 < v42)
      v43 = *(unsigned __int16 **)(result + 32);
    v44 = bswap32(*v43) >> 16;
    if (v5)
    {
      v45 = v5 + (int)v39 * (uint64_t)v7 + v40;
      v46 = *(unsigned __int16 **)(result + 40);
      if (v16 >= v45)
        v47 = (unsigned __int16 *)v45;
      else
        v47 = (unsigned __int16 *)v16;
      if (v47 >= v46)
        v46 = v47;
      v44 |= bswap32(*v46) & 0xFFFF0000;
      if (!v8)
        goto LABEL_103;
    }
    else
    {
      v45 = 0;
      if (!v8)
        goto LABEL_103;
    }
    v48 = *(_DWORD *)(v8 + (v35 | v26));
LABEL_48:
    v49 = v48 & 0xF;
    v50 = HIBYTE(v48) & 3;
    switch(v49)
    {
      case 1:
        v70 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 < (unint64_t)v70)
          v70 = (unsigned __int16 *)v17;
        if (v70 < v42)
          v70 = v42;
        v71 = bswap32(*v70) >> 16;
        if (v5)
        {
          v72 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          if (v16 < (unint64_t)v72)
            v72 = (unsigned __int16 *)v16;
          if ((unint64_t)v72 < *(_QWORD *)(result + 40))
            v72 = *(unsigned __int16 **)(result + 40);
          v71 |= bswap32(*v72) & 0xFFFF0000;
        }
        v73 = interpolate_1616[v50];
        v68 = v44 - ((v73 & v44) >> (v50 + 1));
        v69 = (v73 & v71) >> (v50 + 1);
        goto LABEL_91;
      case 2:
        v74 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v74)
          v74 = (unsigned __int16 *)v17;
        if (v74 < v42)
          v74 = v42;
        v75 = bswap32(*v74) >> 16;
        if (v5)
        {
          v76 = (unsigned __int16 *)(v45 + 2 * SBYTE2(v48));
          if (v16 < (unint64_t)v76)
            v76 = (unsigned __int16 *)v16;
          if ((unint64_t)v76 < *(_QWORD *)(result + 40))
            v76 = *(unsigned __int16 **)(result + 40);
          v75 |= bswap32(*v76) & 0xFFFF0000;
        }
        v44 = v44
            - ((interpolate_1616[(v48 >> 28) & 3] & v44) >> (((v48 >> 28) & 3) + 1))
            + ((interpolate_1616[(v48 >> 28) & 3] & v75) >> (((v48 >> 28) & 3) + 1));
        break;
      case 3:
        v51 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v51)
          v51 = (unsigned __int16 *)v17;
        if (v51 < v42)
          v51 = v42;
        v52 = bswap32(*v51) >> 16;
        v53 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 >= (unint64_t)v53)
          v54 = v53;
        else
          v54 = (unsigned __int16 *)v17;
        if (v54 < v42)
          v54 = v42;
        v88 = bswap32(*v54) >> 16;
        v55 = &v53[SBYTE2(v48)];
        if (v17 < (unint64_t)v55)
          v55 = (unsigned __int16 *)v17;
        if (v55 < v42)
          v55 = v42;
        v56 = bswap32(*v55) >> 16;
        if (v5)
        {
          v87 = 2 * SBYTE2(v48);
          v57 = (unsigned __int16 *)(v45 + v87);
          v58 = *(_QWORD *)(result + 40);
          if (v16 < v45 + v87)
            v57 = (unsigned __int16 *)v16;
          if ((unint64_t)v57 < v58)
            v57 = *(unsigned __int16 **)(result + 40);
          v52 |= bswap32(*v57) & 0xFFFF0000;
          v59 = v45 + SBYTE1(v48) * (uint64_t)v7;
          if (v16 >= v59)
            v60 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          else
            v60 = (unsigned __int16 *)v16;
          if ((unint64_t)v60 < v58)
            v60 = *(unsigned __int16 **)(result + 40);
          v88 |= bswap32(*v60) & 0xFFFF0000;
          v61 = (unsigned __int16 *)(v59 + v87);
          if (v16 < v59 + v87)
            v61 = (unsigned __int16 *)v16;
          if ((unint64_t)v61 < v58)
            v61 = *(unsigned __int16 **)(result + 40);
          v56 |= bswap32(*v61) & 0xFFFF0000;
        }
        v62 = interpolate_1616[v50];
        v63 = v50 + 1;
        v64 = v44 - ((v62 & v44) >> v63) + ((v62 & v88) >> v63);
        v65 = v52 - ((v62 & v52) >> v63) + ((v62 & v56) >> v63);
        v66 = (v48 >> 28) & 3;
        v67 = interpolate_1616[v66];
        LOBYTE(v66) = v66 + 1;
        v68 = v64 - ((v64 & v67) >> v66);
        v69 = (v65 & v67) >> v66;
LABEL_91:
        v44 = v68 + v69;
        break;
    }
LABEL_103:
    *(_DWORD *)(v11 + 8) = 65537 * (unsigned __int16)v44;
    *(_DWORD *)(v11 + 12) = v44 | v13;
    *(_BYTE *)(v12 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v77 = 0;
    v78 = (unsigned int *)(v11 + 20);
    a2 += v9;
    v79 = v93 - a2;
    a3 += v10;
    v80 = v91 - a3;
    while (((v80 | v79 | (a3 - v92) | (a2 - v90)) & 0x8000000000000000) == 0)
    {
      v81 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      v82 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v41 = v81 + v82;
      v42 = *(unsigned __int16 **)(result + 32);
      if (v17 >= v81 + v82)
        v83 = (unsigned __int16 *)(v81 + v82);
      else
        v83 = (unsigned __int16 *)v17;
      if (v83 < v42)
        v83 = *(unsigned __int16 **)(result + 32);
      v44 = bswap32(*v83) >> 16;
      if (v5)
      {
        v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v82;
        v84 = *(unsigned __int16 **)(result + 40);
        if (v16 >= v45)
          v85 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v82);
        else
          v85 = (unsigned __int16 *)v16;
        if (v85 >= v84)
          v84 = v85;
        v44 |= bswap32(*v84) & 0xFFFF0000;
      }
      if (v8)
      {
        v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v48 & 0xF) != 0)
        {
          v12 += v77 + 1;
          v11 = (uint64_t)(v78 - 3);
          a4 += ~(_DWORD)v77;
          v27 = -1;
          goto LABEL_48;
        }
      }
      *(v78 - 1) = 65537 * (unsigned __int16)v44;
      *v78 = v44 | v13;
      v86 = v12 + v77++;
      v78 += 2;
      *(_BYTE *)(v86 + 2) = -1;
      a2 += v9;
      v79 -= v9;
      a3 += v10;
      v80 -= v10;
      if (a4 - 1 == (_DWORD)v77)
        return result;
    }
    v12 += v77 + 1;
    v11 = (uint64_t)(v78 - 3);
    a4 += ~(_DWORD)v77;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_w16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  unsigned __int16 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v93 = *(_QWORD *)(result + 80);
  v91 = *(_QWORD *)(result + 88);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v13 = 0;
  else
    v13 = -65536;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(unsigned int *)(result + 256);
  v16 = v5 + (v14 * v7) + 2 * (v15 - 1);
  v89 = *(_DWORD *)(result + 188);
  v17 = v4 + (v14 * v6) + 2 * v15 - 2;
  v90 = *(_QWORD *)(result + 64);
  v92 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v92)
      {
        if (a3 <= v91)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v90;
          v30 = v93;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v91;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_43;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v90;
          v30 = v93;
          v27 = v89 | v25;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v92 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_43;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v90;
        v30 = v93;
        v27 = v89 | v21;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v29 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v89;
        v34 = v32 + 0x1000000;
        v35 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v30)
    {
      v35 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_29;
    }
    v36 = *(_QWORD *)(result + 192);
    v37 = *(_QWORD *)(result + 200) + v30;
    v38 = v37 - a2 + (v36 >> 1);
    if (v38 < 1)
      goto LABEL_43;
    if (v38 < v36)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v38) >> 32) >> 15)) | v89;
    v34 = v37 - 0x1000000;
    v35 = 28;
LABEL_29:
    if (v27 < 0x400000)
      goto LABEL_43;
    v39 = v28 >> 32;
    v40 = (v34 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v4 + (int)v39 * (uint64_t)v6 + v40;
    v42 = *(unsigned __int16 **)(result + 32);
    if (v17 >= v41)
      v43 = (unsigned __int16 *)(v4 + (int)v39 * (uint64_t)v6 + v40);
    else
      v43 = (unsigned __int16 *)v17;
    if (v43 < v42)
      v43 = *(unsigned __int16 **)(result + 32);
    v44 = *v43;
    if (v5)
    {
      v45 = v5 + (int)v39 * (uint64_t)v7 + v40;
      v46 = *(unsigned __int16 **)(result + 40);
      if (v16 >= v45)
        v47 = (unsigned __int16 *)v45;
      else
        v47 = (unsigned __int16 *)v16;
      if (v47 >= v46)
        v46 = v47;
      v44 |= *v46 << 16;
      if (!v8)
        goto LABEL_103;
    }
    else
    {
      v45 = 0;
      if (!v8)
        goto LABEL_103;
    }
    v48 = *(_DWORD *)(v8 + (v35 | v26));
LABEL_48:
    v49 = v48 & 0xF;
    v50 = HIBYTE(v48) & 3;
    switch(v49)
    {
      case 1:
        v70 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 < (unint64_t)v70)
          v70 = (unsigned __int16 *)v17;
        if (v70 < v42)
          v70 = v42;
        v71 = *v70;
        if (v5)
        {
          v72 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          if (v16 < (unint64_t)v72)
            v72 = (unsigned __int16 *)v16;
          if ((unint64_t)v72 < *(_QWORD *)(result + 40))
            v72 = *(unsigned __int16 **)(result + 40);
          v71 |= *v72 << 16;
        }
        v73 = interpolate_1616[v50];
        v68 = v44 - ((v73 & v44) >> (v50 + 1));
        v69 = (v73 & v71) >> (v50 + 1);
        goto LABEL_91;
      case 2:
        v74 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v74)
          v74 = (unsigned __int16 *)v17;
        if (v74 < v42)
          v74 = v42;
        v75 = *v74;
        if (v5)
        {
          v76 = (unsigned __int16 *)(v45 + 2 * SBYTE2(v48));
          if (v16 < (unint64_t)v76)
            v76 = (unsigned __int16 *)v16;
          if ((unint64_t)v76 < *(_QWORD *)(result + 40))
            v76 = *(unsigned __int16 **)(result + 40);
          v75 |= *v76 << 16;
        }
        v44 = v44
            - ((interpolate_1616[(v48 >> 28) & 3] & v44) >> (((v48 >> 28) & 3) + 1))
            + ((interpolate_1616[(v48 >> 28) & 3] & v75) >> (((v48 >> 28) & 3) + 1));
        break;
      case 3:
        v51 = (unsigned __int16 *)(v41 + 2 * SBYTE2(v48));
        if (v17 < (unint64_t)v51)
          v51 = (unsigned __int16 *)v17;
        if (v51 < v42)
          v51 = v42;
        v52 = *v51;
        v53 = (unsigned __int16 *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 >= (unint64_t)v53)
          v54 = v53;
        else
          v54 = (unsigned __int16 *)v17;
        if (v54 < v42)
          v54 = v42;
        v88 = *v54;
        v55 = &v53[SBYTE2(v48)];
        if (v17 < (unint64_t)v55)
          v55 = (unsigned __int16 *)v17;
        if (v55 < v42)
          v55 = v42;
        v56 = *v55;
        if (v5)
        {
          v87 = 2 * SBYTE2(v48);
          v57 = (unsigned __int16 *)(v45 + v87);
          v58 = *(_QWORD *)(result + 40);
          if (v16 < v45 + v87)
            v57 = (unsigned __int16 *)v16;
          if ((unint64_t)v57 < v58)
            v57 = *(unsigned __int16 **)(result + 40);
          v52 |= *v57 << 16;
          v59 = v45 + SBYTE1(v48) * (uint64_t)v7;
          if (v16 >= v59)
            v60 = (unsigned __int16 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          else
            v60 = (unsigned __int16 *)v16;
          if ((unint64_t)v60 < v58)
            v60 = *(unsigned __int16 **)(result + 40);
          v88 |= *v60 << 16;
          v61 = (unsigned __int16 *)(v59 + v87);
          if (v16 < v59 + v87)
            v61 = (unsigned __int16 *)v16;
          if ((unint64_t)v61 < v58)
            v61 = *(unsigned __int16 **)(result + 40);
          v56 |= *v61 << 16;
        }
        v62 = interpolate_1616[v50];
        v63 = v50 + 1;
        v64 = v44 - ((v62 & v44) >> v63) + ((v62 & v88) >> v63);
        v65 = v52 - ((v62 & v52) >> v63) + ((v62 & v56) >> v63);
        v66 = (v48 >> 28) & 3;
        v67 = interpolate_1616[v66];
        LOBYTE(v66) = v66 + 1;
        v68 = v64 - ((v64 & v67) >> v66);
        v69 = (v65 & v67) >> v66;
LABEL_91:
        v44 = v68 + v69;
        break;
    }
LABEL_103:
    *(_DWORD *)(v11 + 8) = 65537 * (unsigned __int16)v44;
    *(_DWORD *)(v11 + 12) = v44 | v13;
    *(_BYTE *)(v12 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v77 = 0;
    v78 = (unsigned int *)(v11 + 20);
    a2 += v9;
    v79 = v93 - a2;
    a3 += v10;
    v80 = v91 - a3;
    while (((v80 | v79 | (a3 - v92) | (a2 - v90)) & 0x8000000000000000) == 0)
    {
      v81 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      v82 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v41 = v81 + v82;
      v42 = *(unsigned __int16 **)(result + 32);
      if (v17 >= v81 + v82)
        v83 = (unsigned __int16 *)(v81 + v82);
      else
        v83 = (unsigned __int16 *)v17;
      if (v83 < v42)
        v83 = *(unsigned __int16 **)(result + 32);
      v44 = *v83;
      if (v5)
      {
        v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v82;
        v84 = *(unsigned __int16 **)(result + 40);
        if (v16 >= v45)
          v85 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v82);
        else
          v85 = (unsigned __int16 *)v16;
        if (v85 >= v84)
          v84 = v85;
        v44 |= *v84 << 16;
      }
      if (v8)
      {
        v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v48 & 0xF) != 0)
        {
          v12 += v77 + 1;
          v11 = (uint64_t)(v78 - 3);
          a4 += ~(_DWORD)v77;
          v27 = -1;
          goto LABEL_48;
        }
      }
      *(v78 - 1) = 65537 * (unsigned __int16)v44;
      *v78 = v44 | v13;
      v86 = v12 + v77++;
      v78 += 2;
      *(_BYTE *)(v86 + 2) = -1;
      a2 += v9;
      v79 -= v9;
      a3 += v10;
      v80 -= v10;
      if (a4 - 1 == (_DWORD)v77)
        return result;
    }
    v12 += v77 + 1;
    v11 = (uint64_t)(v78 - 3);
    a4 += ~(_DWORD)v77;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_RGB48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 64);
  v8 = *(_QWORD *)(result + 72);
  v67 = *(_QWORD *)(result + 88);
  v68 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  v66 = *(_DWORD *)(result + 188);
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v8)
      {
        if ((uint64_t)a3 <= v67)
        {
          v22 = (a3 >> 22) & 0x3C0;
          v23 = 0x3FFFFFFF;
          HIDWORD(v24) = HIDWORD(a3);
        }
        else
        {
          v18 = *(_QWORD *)(result + 216);
          v19 = *(_QWORD *)(result + 224) + v67;
          v20 = v19 - a3 + (v18 >> 1);
          if (v20 < 1)
            goto LABEL_34;
          if (v20 >= v18)
            LODWORD(v21) = 0x3FFFFFFF;
          else
            v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
          v23 = v66 | v21;
          v24 = v19 - 0x1000000;
          v22 = 448;
        }
      }
      else
      {
        v14 = *(_QWORD *)(result + 216);
        v15 = v8 - *(_QWORD *)(result + 224);
        v16 = a3 - v15 + (v14 >> 1);
        if (v16 < 1)
          goto LABEL_34;
        if (v16 >= v14)
          LODWORD(v17) = 0x3FFFFFFF;
        else
          v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
        v23 = v66 | v17;
        v24 = v15 + 0x1000000;
        v22 = 512;
      }
      if (a2 >= v7)
        break;
      v25 = *(_QWORD *)(result + 192);
      v26 = v7 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 >= 1)
      {
        if (v27 < v25)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v66;
        v28 = v26 + 0x1000000;
        v29 = 32;
        goto LABEL_26;
      }
LABEL_34:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 8;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v68)
    {
      v29 = ((unint64_t)a2 >> 26) & 0x3C;
      v28 = a2;
      goto LABEL_26;
    }
    v30 = *(_QWORD *)(result + 192);
    v31 = *(_QWORD *)(result + 200) + v68;
    v32 = v31 - a2 + (v30 >> 1);
    if (v32 < 1)
      goto LABEL_34;
    if (v32 < v30)
      v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v66;
    v28 = v31 - 0x1000000;
    v29 = 28;
LABEL_26:
    if (v23 < 0x400000)
      goto LABEL_34;
    v33 = v28 >> 32;
    v34 = v4 + SHIDWORD(v24) * (uint64_t)v5;
    v35 = v34 + 6 * (int)v33;
    v36 = *(unsigned __int16 **)(result + 32);
    if (v13 >= v35)
      v37 = (unsigned __int16 *)(v34 + 6 * (int)v33);
    else
      v37 = (unsigned __int16 *)v13;
    if (v37 < v36)
      v37 = *(unsigned __int16 **)(result + 32);
    v38 = (bswap32(*v37) >> 16) | ((unint64_t)(bswap32(v37[1]) >> 16) << 16) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | 0xFFFF000000000000;
    if (!v6)
      goto LABEL_65;
    v39 = *(_DWORD *)(v6 + (v29 | v22));
LABEL_37:
    v40 = v39 & 0xF;
    v41 = HIBYTE(v39) & 3;
    switch(v40)
    {
      case 1:
        v56 = (unsigned __int16 *)(v35 + SBYTE1(v39) * (uint64_t)v5);
        if (v13 < (unint64_t)v56)
          v56 = (unsigned __int16 *)v13;
        if (v56 < v36)
          v56 = v36;
        v57 = interpolate_16161616_19469[v41];
        v54 = v38 - ((v57 & v38) >> (v41 + 1));
        v55 = (((bswap32(*v56) >> 16) | ((unint64_t)(bswap32(v56[1]) >> 16) << 16) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | 0xFFFF000000000000) & v57) >> (v41 + 1);
        goto LABEL_59;
      case 2:
        v58 = (unsigned __int16 *)(v35 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v58)
          v58 = (unsigned __int16 *)v13;
        if (v58 < v36)
          v58 = v36;
        v59 = (v39 >> 28) & 3;
        v38 = v38
            - ((interpolate_16161616_19469[v59] & v38) >> (v59 + 1))
            + ((((bswap32(*v58) >> 16) | ((unint64_t)(bswap32(v58[1]) >> 16) << 16) | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | 0xFFFF000000000000) & interpolate_16161616_19469[v59]) >> (v59 + 1));
        break;
      case 3:
        v42 = (unsigned __int16 *)(v35 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v42)
          v42 = (unsigned __int16 *)v13;
        if (v42 < v36)
          v42 = v36;
        v43 = (bswap32(*v42) >> 16) | ((unint64_t)(bswap32(v42[1]) >> 16) << 16) | ((unint64_t)(bswap32(v42[2]) >> 16) << 32) | 0xFFFF000000000000;
        v44 = v35 + SBYTE1(v39) * (uint64_t)v5;
        if (v13 >= v44)
          v45 = (unsigned __int16 *)(v35 + SBYTE1(v39) * (uint64_t)v5);
        else
          v45 = (unsigned __int16 *)v13;
        if (v45 < v36)
          v45 = v36;
        v46 = (bswap32(*v45) >> 16) | ((unint64_t)(bswap32(v45[1]) >> 16) << 16) | ((unint64_t)(bswap32(v45[2]) >> 16) << 32) | 0xFFFF000000000000;
        v47 = (unsigned __int16 *)(v44 + 6 * SBYTE2(v39));
        if (v13 < (unint64_t)v47)
          v47 = (unsigned __int16 *)v13;
        if (v47 < v36)
          v47 = v36;
        v48 = interpolate_16161616_19469[v41];
        v49 = v41 + 1;
        v50 = v38 - ((v48 & v38) >> v49) + ((v46 & v48) >> v49);
        v51 = v43
            - ((v48 & v43) >> v49)
            + ((((bswap32(*v47) >> 16) | ((unint64_t)(bswap32(v47[1]) >> 16) << 16) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | 0xFFFF000000000000) & v48) >> v49);
        v52 = (v39 >> 28) & 3;
        v53 = interpolate_16161616_19469[v52];
        LOBYTE(v52) = v52 + 1;
        v54 = v50 - ((v50 & v53) >> v52);
        v55 = (v51 & v53) >> v52;
LABEL_59:
        v38 = v54 + v55;
        break;
    }
LABEL_65:
    *(_QWORD *)(v11 + 8) = v38;
    *(_BYTE *)(v12 + 1) = v23 >> 22;
    if (a4 == 1)
      break;
    v60 = 0;
    a2 += v9;
    v61 = v68 - a2;
    a3 += v10;
    v62 = v67 - a3;
    v63 = -8;
    while (((v62 | v61 | (a3 - v8) | (a2 - v7)) & 0x8000000000000000) == 0)
    {
      v64 = v4 + SHIDWORD(a3) * (uint64_t)v5;
      v35 = v64 + 6 * SHIDWORD(a2);
      v36 = *(unsigned __int16 **)(result + 32);
      if (v13 >= v35)
        v65 = (unsigned __int16 *)(v64 + 6 * SHIDWORD(a2));
      else
        v65 = (unsigned __int16 *)v13;
      if (v65 < v36)
        v65 = *(unsigned __int16 **)(result + 32);
      v38 = (bswap32(*v65) >> 16) | ((unint64_t)(bswap32(v65[1]) >> 16) << 16) | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | 0xFFFF000000000000;
      if (v6)
      {
        v39 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v39 & 0xF) != 0)
        {
          v12 += v60 + 1;
          v11 -= v63;
          a4 += ~(_DWORD)v60;
          v23 = -1;
          goto LABEL_37;
        }
      }
      *(_QWORD *)(v11 + 8 * v60 + 16) = v38;
      *(_BYTE *)(v12 + v60++ + 2) = -1;
      v63 -= 8;
      a2 += v9;
      v61 -= v9;
      a3 += v10;
      v62 -= v10;
      if (a4 - 1 == (_DWORD)v60)
        return result;
    }
    v12 += v60 + 1;
    v11 -= v63;
    a4 += ~(_DWORD)v60;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_rgb48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  int v65;
  uint64_t v66;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 64);
  v8 = *(_QWORD *)(result + 72);
  v9 = *(_QWORD *)(result + 88);
  v66 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 8;
  v13 = *(_QWORD *)(result + 144) - 1;
  v14 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  v65 = *(_DWORD *)(result + 188);
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v8)
      {
        if ((uint64_t)a3 <= v9)
        {
          v23 = (a3 >> 22) & 0x3C0;
          v24 = 0x3FFFFFFF;
          HIDWORD(v25) = HIDWORD(a3);
        }
        else
        {
          v19 = *(_QWORD *)(result + 216);
          v20 = *(_QWORD *)(result + 224) + v9;
          v21 = v20 - a3 + (v19 >> 1);
          if (v21 < 1)
            goto LABEL_34;
          if (v21 >= v19)
            LODWORD(v22) = 0x3FFFFFFF;
          else
            v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
          v24 = v65 | v22;
          v25 = v20 - 0x1000000;
          v23 = 448;
        }
      }
      else
      {
        v15 = *(_QWORD *)(result + 216);
        v16 = v8 - *(_QWORD *)(result + 224);
        v17 = a3 - v16 + (v15 >> 1);
        if (v17 < 1)
          goto LABEL_34;
        if (v17 >= v15)
          LODWORD(v18) = 0x3FFFFFFF;
        else
          v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
        v24 = v65 | v18;
        v25 = v16 + 0x1000000;
        v23 = 512;
      }
      if (a2 >= v7)
        break;
      v26 = *(_QWORD *)(result + 192);
      v27 = v7 - *(_QWORD *)(result + 200);
      v28 = a2 - v27 + (v26 >> 1);
      if (v28 >= 1)
      {
        if (v28 < v26)
          v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v65;
        v29 = v27 + 0x1000000;
        v30 = 32;
        goto LABEL_26;
      }
LABEL_34:
      --a4;
      a2 += v10;
      a3 += v11;
      v12 += 8;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v66)
    {
      v30 = ((unint64_t)a2 >> 26) & 0x3C;
      v29 = a2;
      goto LABEL_26;
    }
    v31 = *(_QWORD *)(result + 192);
    v32 = *(_QWORD *)(result + 200) + v66;
    v33 = v32 - a2 + (v31 >> 1);
    if (v33 < 1)
      goto LABEL_34;
    if (v33 < v31)
      v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v65;
    v29 = v32 - 0x1000000;
    v30 = 28;
LABEL_26:
    if (v24 < 0x400000)
      goto LABEL_34;
    v34 = v29 >> 32;
    v35 = v4 + SHIDWORD(v25) * (uint64_t)v5;
    v36 = v35 + 6 * (int)v34;
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v38 = (unsigned int *)(v35 + 6 * (int)v34);
    else
      v38 = (unsigned int *)v14;
    if (v38 < v37)
      v38 = *(unsigned int **)(result + 32);
    v39 = *v38 | ((unint64_t)*((unsigned __int16 *)v38 + 2) << 32) | 0xFFFF000000000000;
    if (!v6)
      goto LABEL_66;
    v40 = *(_DWORD *)(v6 + (v30 | v23));
LABEL_37:
    v41 = v40 & 0xF;
    v42 = HIBYTE(v40) & 3;
    switch(v41)
    {
      case 1:
        v57 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        if (v14 < (unint64_t)v57)
          v57 = (unsigned int *)v14;
        if (v57 < v37)
          v57 = v37;
        v52 = *v57 | ((unint64_t)*((unsigned __int16 *)v57 + 2) << 32) | 0xFFFF000000000000;
LABEL_64:
        v54 = interpolate_16161616_19469[v42];
        v55 = v42 + 1;
        v56 = v39 - ((v54 & v39) >> v55);
LABEL_65:
        v39 = v56 + ((v52 & v54) >> v55);
        break;
      case 2:
        v58 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v58)
          v58 = (unsigned int *)v14;
        if (v58 < v37)
          v58 = v37;
        v52 = *v58 | ((unint64_t)*((unsigned __int16 *)v58 + 2) << 32) | 0xFFFF000000000000;
        v42 = (v40 >> 28) & 3;
        goto LABEL_64;
      case 3:
        v43 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v43)
          v43 = (unsigned int *)v14;
        if (v43 < v37)
          v43 = v37;
        v44 = *v43 | ((unint64_t)*((unsigned __int16 *)v43 + 2) << 32) | 0xFFFF000000000000;
        v45 = v36 + SBYTE1(v40) * (uint64_t)v5;
        if (v14 >= v45)
          v46 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        else
          v46 = (unsigned int *)v14;
        if (v46 < v37)
          v46 = v37;
        v47 = *v46 | ((unint64_t)*((unsigned __int16 *)v46 + 2) << 32) | 0xFFFF000000000000;
        v48 = (unsigned int *)(v45 + 6 * SBYTE2(v40));
        if (v14 < (unint64_t)v48)
          v48 = (unsigned int *)v14;
        if (v48 < v37)
          v48 = v37;
        v49 = interpolate_16161616_19469[v42];
        v50 = v42 + 1;
        v51 = v39 - ((v49 & v39) >> v50) + ((v47 & v49) >> v50);
        v52 = v44
            - ((v49 & v44) >> v50)
            + (((*v48 | ((unint64_t)*((unsigned __int16 *)v48 + 2) << 32) | 0xFFFF000000000000) & v49) >> v50);
        v53 = (v40 >> 28) & 3;
        v54 = interpolate_16161616_19469[v53];
        v55 = v53 + 1;
        v56 = v51 - ((v51 & v54) >> v55);
        goto LABEL_65;
    }
LABEL_66:
    *(_QWORD *)(v12 + 8) = v39;
    *(_BYTE *)(v13 + 1) = v24 >> 22;
    if (a4 == 1)
      break;
    v59 = 0;
    a2 += v10;
    v60 = v66 - a2;
    a3 += v11;
    v61 = v9 - a3;
    v62 = -8;
    while (((v61 | v60 | (a3 - v8) | (a2 - v7)) & 0x8000000000000000) == 0)
    {
      v63 = v4 + SHIDWORD(a3) * (uint64_t)v5;
      v36 = v63 + 6 * SHIDWORD(a2);
      v37 = *(unsigned int **)(result + 32);
      if (v14 >= v36)
        v64 = (unsigned int *)(v63 + 6 * SHIDWORD(a2));
      else
        v64 = (unsigned int *)v14;
      if (v64 < v37)
        v64 = *(unsigned int **)(result + 32);
      v39 = *v64 | ((unint64_t)*((unsigned __int16 *)v64 + 2) << 32) | 0xFFFF000000000000;
      if (v6)
      {
        v40 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v40 & 0xF) != 0)
        {
          v13 += v59 + 1;
          v12 -= v62;
          a4 += ~(_DWORD)v59;
          v24 = -1;
          goto LABEL_37;
        }
      }
      *(_QWORD *)(v12 + 8 * v59 + 16) = v39;
      *(_BYTE *)(v13 + v59++ + 2) = -1;
      v62 -= 8;
      a2 += v10;
      v60 -= v10;
      a3 += v11;
      v61 -= v11;
      if (a4 - 1 == (_DWORD)v59)
        return result;
    }
    v13 += v59 + 1;
    v12 -= v62;
    a4 += ~(_DWORD)v59;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_RGBA64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int16 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned __int16 *v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v101 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v101 = v5 % v6;
  }
  else
  {
    v101 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v100 = v11;
  }
  else
  {
    v100 = 0;
  }
  v99 = *(_QWORD *)(result + 80);
  v96 = *(_QWORD *)(result + 64);
  v97 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(result + 152) - 8;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = 0xFFFF000000000000;
  v95 = *(_DWORD *)(result + 188);
  v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  v102 = -*(_QWORD *)(result + 64);
  v98 = *(_QWORD *)(result + 72);
  while (1)
  {
    if (a3 >= v98)
    {
      if (a3 <= v97)
      {
        v25 = 0;
        v26 = ((unint64_t)a3 >> 22) & 0x3C0;
        v27 = 0x3FFFFFFF;
        v28 = a3;
        v19 = a4;
        v29 = v96;
        v30 = v99;
      }
      else
      {
        v21 = *(_QWORD *)(result + 216);
        v22 = *(_QWORD *)(result + 224) + v97;
        v23 = v22 - a3 + (v21 >> 1);
        v19 = a4;
        if (v23 < 1)
          goto LABEL_54;
        if (v23 >= v21)
          LODWORD(v24) = 0x3FFFFFFF;
        else
          v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
        v29 = v96;
        v30 = v99;
        v27 = v95 | v24;
        v28 = v22 - 0x1000000;
        v25 = a3 - v28;
        v26 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v98 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      v19 = a4;
      if (v18 < 1)
        goto LABEL_54;
      if (v18 >= v16)
        LODWORD(v20) = 0x3FFFFFFF;
      else
        v20 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v29 = v96;
      v30 = v99;
      v27 = v95 | v20;
      v28 = v17 + 0x1000000;
      v25 = a3 - v28;
      v26 = 512;
    }
    if (a2 >= v29)
      break;
    v31 = *(_QWORD *)(result + 192);
    v32 = v29 - *(_QWORD *)(result + 200);
    v33 = a2 - v32 + (v31 >> 1);
    if (v33 >= 1)
    {
      if (v33 < v31)
        v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v95;
      v34 = v32 + 0x1000000;
      v35 = a2 - (v32 + 0x1000000);
      v36 = 32;
      goto LABEL_38;
    }
LABEL_54:
    v51 = v19 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 8;
    *(_BYTE *)++v13 = 0;
LABEL_55:
    a4 = v51;
    if (!v51)
      return result;
  }
  if (a2 <= v30)
  {
    v35 = 0;
    v36 = ((unint64_t)a2 >> 26) & 0x3C;
    v34 = a2;
    goto LABEL_38;
  }
  v37 = *(_QWORD *)(result + 192);
  v38 = *(_QWORD *)(result + 200) + v30;
  v39 = v38 - a2 + (v37 >> 1);
  if (v39 < 1)
    goto LABEL_54;
  if (v39 < v37)
    v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v39) >> 32) >> 15)) | v95;
  v34 = v38 - 0x1000000;
  v35 = a2 - (v38 - 0x1000000);
  v36 = 28;
LABEL_38:
  if (v27 < 0x400000)
    goto LABEL_54;
  if (v6)
  {
    v40 = (v7 & ((v28 % v7) >> 63)) + v28 % v7;
    v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
    if (v40 >= v7)
      v42 = v7;
    else
      v42 = 0;
    v28 = v40 - v42;
    if (v41 >= v6)
      v43 = v6;
    else
      v43 = 0;
    v34 = v41 - v43;
    v25 += v28;
    v35 += v34;
  }
  v44 = v9 + SHIDWORD(v28) * (uint64_t)v4;
  v45 = v34 >> 32;
  v46 = v44 + 8 * v45;
  v47 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v46)
    v48 = (unsigned __int16 *)(v44 + 8 * v45);
  else
    v48 = (unsigned __int16 *)v15;
  if (v48 < v47)
    v48 = *(unsigned __int16 **)(result + 32);
  v49 = ((unint64_t)(bswap32(v48[2]) >> 16) << 32) | ((unint64_t)(bswap32(v48[3]) >> 16) << 48) | bswap32(v48[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v48) >> 16);
  if (v8)
  {
    v50 = *(_DWORD *)(v8 + (v36 | v26));
LABEL_58:
    v52 = v50 & 0xF;
    v53 = HIBYTE(v50) & 3;
    switch(v52)
    {
      case 1:
        LODWORD(v72) = SBYTE1(v50);
        if (v6)
        {
          v73 = v25 + ((uint64_t)SBYTE1(v50) << 32);
          v74 = v7 & (v73 >> 63);
          if (v74 + v73 >= v7)
            v75 = v7;
          else
            v75 = 0;
          v72 = (v74 + ((uint64_t)SBYTE1(v50) << 32) - v75) >> 32;
        }
        v76 = (unsigned __int16 *)(v46 + (int)v72 * (uint64_t)v4);
        if (v15 < (unint64_t)v76)
          v76 = (unsigned __int16 *)v15;
        if (v76 < v47)
          v76 = v47;
        v49 = v49
            - ((interpolate_16161616_19469[v53] & v49) >> (v53 + 1))
            + (((((unint64_t)(bswap32(v76[2]) >> 16) << 32) | ((unint64_t)(bswap32(v76[3]) >> 16) << 48) | bswap32(v76[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v76) >> 16)) & interpolate_16161616_19469[v53]) >> (v53 + 1));
        break;
      case 2:
        v77 = SBYTE2(v50);
        if (v6)
        {
          v78 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          v79 = v6 & (v78 >> 63);
          if (v79 + v78 >= v6)
            v80 = v6;
          else
            v80 = 0;
          v77 = (v79 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v80) >> 32;
        }
        v81 = (unsigned __int16 *)(v46 + 8 * v77);
        if (v15 < (unint64_t)v81)
          v81 = (unsigned __int16 *)v15;
        if (v81 < v47)
          v81 = v47;
        v82 = (v50 >> 28) & 3;
        v49 = v49
            - ((interpolate_16161616_19469[v82] & v49) >> (v82 + 1))
            + (((((unint64_t)(bswap32(v81[2]) >> 16) << 32) | ((unint64_t)(bswap32(v81[3]) >> 16) << 48) | bswap32(v81[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v81) >> 16)) & interpolate_16161616_19469[v82]) >> (v82 + 1));
        break;
      case 3:
        v94 = v27;
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (v6)
        {
          v56 = (unint64_t)HIWORD(v50) << 56;
          v57 = v25 + ((uint64_t)SBYTE1(v50) << 32);
          v58 = v35 + (v56 >> 24);
          v59 = v7 & (v57 >> 63);
          v60 = v6 & (v58 >> 63);
          v61 = v60 + v58;
          if (v59 + v57 >= v7)
            v62 = v7;
          else
            v62 = 0;
          if (v61 >= v6)
            v63 = v6;
          else
            v63 = 0;
          v54 = (v59 + ((uint64_t)((unint64_t)(v50 >> 8) << 56) >> 24) - v62) >> 32;
          v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        v64 = (unsigned __int16 *)(v46 + 8 * v55);
        if (v15 < (unint64_t)v64)
          v64 = (unsigned __int16 *)v15;
        if (v64 < v47)
          v64 = v47;
        v65 = ((unint64_t)(bswap32(v64[2]) >> 16) << 32) | ((unint64_t)(bswap32(v64[3]) >> 16) << 48) | bswap32(v64[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v64) >> 16);
        v66 = (unsigned __int16 *)(v46 + (int)v54 * (uint64_t)v4);
        if (v15 >= (unint64_t)v66)
          v67 = v66;
        else
          v67 = (unsigned __int16 *)v15;
        if (v67 < v47)
          v67 = v47;
        v68 = ((unint64_t)(bswap32(v67[2]) >> 16) << 32) | ((unint64_t)(bswap32(v67[3]) >> 16) << 48) | bswap32(v67[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v67) >> 16);
        v69 = &v66[4 * v55];
        if (v15 < (unint64_t)v69)
          v69 = (unsigned __int16 *)v15;
        if (v69 < v47)
          v69 = v47;
        v70 = interpolate_16161616_19469[v53];
        v71 = v49 - ((v70 & v49) >> (v53 + 1)) + ((v68 & v70) >> (v53 + 1));
        v49 = v71
            - ((v71 & interpolate_16161616_19469[(v50 >> 28) & 3]) >> (((v50 >> 28) & 3) + 1))
            + (((v65
               - ((v70 & v65) >> (v53 + 1))
               + (((((unint64_t)(bswap32(v69[2]) >> 16) << 32) | ((unint64_t)(bswap32(v69[3]) >> 16) << 48) | bswap32(v69[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v69) >> 16)) & v70) >> (v53 + 1))) & interpolate_16161616_19469[(v50 >> 28) & 3]) >> (((v50 >> 28) & 3) + 1));
        v27 = v94;
        break;
    }
  }
  *(_QWORD *)(v12 + 8) = v49 | v14;
  *(_BYTE *)(v13 + 1) = v27 >> 22;
  if (v19 != 1)
  {
    v83 = 0;
    a2 += v5;
    v84 = v99 - a2;
    a3 += v10;
    v85 = v97 - a3;
    v86 = -8;
    while (((v85 | v84 | (a3 - v98) | (v102 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v87 = (v7 & ((v25 + v100) >> 63)) + v25 + v100;
        v88 = (v6 & ((v35 + v101) >> 63)) + v35 + v101;
        if (v87 >= v7)
          v89 = v7;
        else
          v89 = 0;
        v25 = v87 - v89;
        if (v88 >= v6)
          v90 = v6;
        else
          v90 = 0;
        v35 = v88 - v90;
        v91 = HIDWORD(v25);
        v92 = v88 - v90;
      }
      else
      {
        v91 = HIDWORD(a3);
        v92 = a2;
      }
      v46 = v9 + v91 * (uint64_t)v4 + 8 * (v92 >> 32);
      v47 = *(unsigned __int16 **)(result + 32);
      if (v15 >= v46)
        v93 = (unsigned __int16 *)v46;
      else
        v93 = (unsigned __int16 *)v15;
      if (v93 < v47)
        v93 = *(unsigned __int16 **)(result + 32);
      v49 = ((unint64_t)(bswap32(v93[2]) >> 16) << 32) | ((unint64_t)(bswap32(v93[3]) >> 16) << 48) | bswap32(v93[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v93) >> 16);
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v83 + 1;
          v12 -= v86;
          v19 += ~(_DWORD)v83;
          v27 = -1;
          goto LABEL_58;
        }
      }
      *(_QWORD *)(v12 + 8 * v83 + 16) = v49 | v14;
      *(_BYTE *)(v13 + v83++ + 2) = -1;
      v86 -= 8;
      a2 += v5;
      v84 -= v5;
      a3 += v10;
      v85 -= v10;
      if (v19 - 1 == (_DWORD)v83)
        return result;
    }
    v13 += v83 + 1;
    v12 -= v86;
    v51 = ~(_DWORD)v83 + v19;
    goto LABEL_55;
  }
  return result;
}

uint64_t rgba64_sample_rgba64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v109 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v109 = v5 % v6;
  }
  else
  {
    v109 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v108 = v11;
  }
  else
  {
    v108 = 0;
  }
  v104 = *(_QWORD *)(result + 80);
  v105 = *(_QWORD *)(result + 64);
  v106 = *(_QWORD *)(result + 88);
  v107 = *(_QWORD *)(result + 72);
  v12 = *(_QWORD *)(result + 152) - 8;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = 0xFFFF000000000000;
  v103 = *(_DWORD *)(result + 188);
  v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  v16 = -*(_QWORD *)(result + 64);
  v17 = -*(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v107)
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v107 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_55;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v28 = v103 | v21;
        v29 = v19 + 0x1000000;
        v26 = a3 - (v19 + 0x1000000);
        v27 = 512;
        goto LABEL_25;
      }
      if (a3 <= v106)
      {
        v26 = 0;
        v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        v28 = 0x3FFFFFFF;
        v29 = a3;
LABEL_25:
        v30 = v105;
        goto LABEL_28;
      }
      v22 = *(_QWORD *)(result + 216);
      v23 = *(_QWORD *)(result + 224) + v106;
      v24 = v23 - a3 + (v22 >> 1);
      if (v24 < 1)
        goto LABEL_55;
      if (v24 >= v22)
        LODWORD(v25) = 0x3FFFFFFF;
      else
        v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
      v30 = v105;
      v28 = v103 | v25;
      v29 = v23 - 0x1000000;
      v26 = a3 - (v23 - 0x1000000);
      v27 = 448;
LABEL_28:
      if (a2 >= v30)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v30 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v103;
        v34 = v32 + 0x1000000;
        v35 = a2 - (v32 + 0x1000000);
        v36 = 32;
        goto LABEL_39;
      }
LABEL_55:
      --a4;
      a2 += v5;
      a3 += v10;
      v12 += 8;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v104)
    {
      v35 = 0;
      v36 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_39;
    }
    v37 = *(_QWORD *)(result + 192);
    v38 = *(_QWORD *)(result + 200) + v104;
    v39 = v38 - a2 + (v37 >> 1);
    if (v39 < 1)
      goto LABEL_55;
    if (v39 < v37)
      v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v39) >> 32) >> 15)) | v103;
    v34 = v38 - 0x1000000;
    v35 = a2 - (v38 - 0x1000000);
    v36 = 28;
LABEL_39:
    if (v28 < 0x400000)
      goto LABEL_55;
    if (v6)
    {
      v40 = (v7 & ((v29 % v7) >> 63)) + v29 % v7;
      v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
      if (v40 >= v7)
        v42 = v7;
      else
        v42 = 0;
      v29 = v40 - v42;
      if (v41 >= v6)
        v43 = v6;
      else
        v43 = 0;
      v34 = v41 - v43;
      v26 += v29;
      v35 += v34;
    }
    v44 = v9 + SHIDWORD(v29) * (uint64_t)v4;
    v45 = v34 >> 32;
    v46 = v44 + 8 * v45;
    v47 = *(unint64_t **)(result + 32);
    if (v15 >= v46)
      v48 = (unint64_t *)(v44 + 8 * v45);
    else
      v48 = (unint64_t *)v15;
    if (v48 < v47)
      v48 = *(unint64_t **)(result + 32);
    v49 = *v48;
    if (!v8)
      goto LABEL_104;
    v50 = *(_DWORD *)(v8 + (v36 | v27));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v77) = SBYTE1(v50);
        if (v6)
        {
          v78 = v52 << 56;
          v79 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v80 = v7 & (v79 >> 63);
          if (v80 + v79 >= v7)
            v81 = v7;
          else
            v81 = 0;
          v77 = (v80 + (v78 >> 24) - v81) >> 32;
        }
        v82 = (unint64_t *)(v46 + (int)v77 * (uint64_t)v4);
        if (v15 < (unint64_t)v82)
          v82 = (unint64_t *)v15;
        if (v82 < v47)
          v82 = v47;
        v83 = interpolate_16161616_19469[v53];
        v84 = v53 + 1;
        v75 = v49 - ((v83 & v49) >> v84);
        v76 = (v83 & *v82) >> v84;
        goto LABEL_93;
      case 2:
        v85 = SBYTE2(v50);
        if (v6)
        {
          v86 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          v87 = v6 & (v86 >> 63);
          if (v87 + v86 >= v6)
            v88 = v6;
          else
            v88 = 0;
          v85 = (v87 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v88) >> 32;
        }
        v89 = (unint64_t *)(v46 + 8 * v85);
        if (v15 < (unint64_t)v89)
          v89 = (unint64_t *)v15;
        if (v89 < v47)
          v89 = v47;
        v49 = v49
            - ((interpolate_16161616_19469[(v50 >> 28) & 3] & v49) >> (((v50 >> 28) & 3) + 1))
            + ((interpolate_16161616_19469[(v50 >> 28) & 3] & *v89) >> (((v50 >> 28) & 3) + 1));
        break;
      case 3:
        v102 = HIBYTE(v50) & 3;
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (v6)
        {
          v101 = v52 << 56;
          v56 = (unint64_t)HIWORD(v50) << 56;
          v57 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v58 = v35 + (v56 >> 24);
          v59 = v7 & (v57 >> 63);
          v60 = v6 & (v58 >> 63);
          v61 = v60 + v58;
          if (v59 + v57 >= v7)
            v62 = v7;
          else
            v62 = 0;
          if (v61 >= v6)
            v63 = v6;
          else
            v63 = 0;
          v54 = (v59 + (v101 >> 24) - v62) >> 32;
          v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        v64 = (unint64_t *)(v46 + 8 * v55);
        if (v15 < (unint64_t)v64)
          v64 = (unint64_t *)v15;
        if (v64 < v47)
          v64 = v47;
        v65 = *v64;
        v66 = v46 + (int)v54 * (uint64_t)v4;
        if (v15 >= v66)
          v67 = (unint64_t *)(v46 + (int)v54 * (uint64_t)v4);
        else
          v67 = (unint64_t *)v15;
        if (v67 < v47)
          v67 = v47;
        v68 = *v67;
        v69 = (unint64_t *)(v66 + 8 * v55);
        if (v15 < (unint64_t)v69)
          v69 = (unint64_t *)v15;
        if (v69 < v47)
          v69 = v47;
        v70 = interpolate_16161616_19469[v102];
        v71 = v49 - ((v70 & v49) >> (v102 + 1)) + ((v70 & v68) >> (v102 + 1));
        v72 = v65 - ((v70 & v65) >> (v102 + 1)) + ((v70 & *v69) >> (v102 + 1));
        v73 = (v50 >> 28) & 3;
        v74 = interpolate_16161616_19469[v73];
        LOBYTE(v73) = v73 + 1;
        v75 = v71 - ((v71 & v74) >> v73);
        v76 = (v72 & v74) >> v73;
LABEL_93:
        v49 = v75 + v76;
        break;
    }
LABEL_104:
    *(_QWORD *)(v12 + 8) = v49 | v14;
    *(_BYTE *)(v13 + 1) = v28 >> 22;
    if (a4 == 1)
      break;
    v90 = 0;
    a2 += v5;
    v91 = v104 - a2;
    a3 += v10;
    v92 = v106 - a3;
    v93 = -8;
    while (((v92 | v91 | (v17 + a3) | (v16 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v94 = (v7 & ((v26 + v108) >> 63)) + v26 + v108;
        v95 = (v6 & ((v35 + v109) >> 63)) + v35 + v109;
        if (v94 >= v7)
          v96 = v7;
        else
          v96 = 0;
        v97 = v94 - v96;
        if (v95 >= v6)
          v98 = v6;
        else
          v98 = 0;
        v99 = v95 - v98;
        v35 = v99;
        v26 = v97;
      }
      else
      {
        v99 = a2;
        HIDWORD(v97) = HIDWORD(a3);
      }
      v46 = v9 + SHIDWORD(v97) * (uint64_t)v4 + 8 * (v99 >> 32);
      v47 = *(unint64_t **)(result + 32);
      if (v15 >= v46)
        v100 = (unint64_t *)v46;
      else
        v100 = (unint64_t *)v15;
      if (v100 < v47)
        v100 = *(unint64_t **)(result + 32);
      v49 = *v100;
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v90 + 1;
          v12 -= v93;
          a4 += ~(_DWORD)v90;
          v28 = -1;
          goto LABEL_58;
        }
      }
      *(_QWORD *)(v12 + 8 * v90 + 16) = v49 | v14;
      *(_BYTE *)(v13 + v90++ + 2) = -1;
      v93 -= 8;
      a2 += v5;
      v91 -= v5;
      a3 += v10;
      v92 -= v10;
      if (a4 - 1 == (_DWORD)v90)
        return result;
    }
    v13 += v90 + 1;
    v12 -= v93;
    a4 += ~(_DWORD)v90;
  }
  while (a4);
  return result;
}

uint64_t rgba64_sample_CMYK64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int64_t v50;
  unsigned __int16 *v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  int v69;
  unsigned __int16 *v70;
  unint64_t v71;
  unsigned int v72;
  unsigned __int16 *v73;
  char *v74;
  char v75;
  int64_t v76;
  unsigned __int16 *v77;
  unint64_t v78;
  unsigned int v79;
  unsigned __int16 *v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v100 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v102 = *(_QWORD *)(result + 88);
  v103 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v98 = *(_DWORD *)(result + 188);
  v14 = v5 + (v12 * v7) + 2 * (v13 - 1);
  v15 = v4 + (v12 * v6) + 8 * v13 - 16;
  v101 = *(_QWORD *)(result + 72);
  v99 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v101)
    {
      if (a3 <= v102)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v99;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v102;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_39;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v99;
        v25 = v98 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v101 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_39;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v99;
      v25 = v98 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v98;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v11 += 8;
    *(_BYTE *)++v103 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v100)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_26;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v100;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_39;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v98;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_26:
  if (v25 < 0x400000)
    goto LABEL_39;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  v39 = v38 + 8 * v37;
  v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39)
    v41 = (unsigned __int16 *)(v38 + 8 * v37);
  else
    v41 = (unsigned __int16 *)v15;
  if (v41 < v40)
    v41 = *(unsigned __int16 **)(result + 32);
  if (v5)
  {
    v42 = v5 + (int)v36 * (uint64_t)v7 + 2 * v37;
    v43 = *(unsigned __int16 **)(result + 40);
    if (v14 >= v42)
      v44 = (unsigned __int16 *)v42;
    else
      v44 = (unsigned __int16 *)v14;
    if (v44 >= v43)
      v43 = v44;
    v45 = bswap32(*v43) >> 16;
  }
  else
  {
    v42 = 0;
    v45 = 0xFFFF;
  }
  v46 = ((unint64_t)(bswap32(v41[2]) >> 16) << 32) | ((unint64_t)(bswap32(v41[3]) >> 16) << 48) | bswap32(v41[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v41) >> 16);
  if (!v8)
    goto LABEL_100;
  v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
  v48 = v47 & 0xF;
  v49 = HIBYTE(v47) & 3;
  switch(v48)
  {
    case 1:
      v70 = (unsigned __int16 *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v70)
        v70 = (unsigned __int16 *)v15;
      if (v70 < v40)
        v70 = v40;
      v71 = ((unint64_t)(bswap32(v70[2]) >> 16) << 32) | ((unint64_t)(bswap32(v70[3]) >> 16) << 48) | bswap32(v70[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v70) >> 16);
      LOWORD(v72) = -1;
      if (v5)
      {
        v73 = (unsigned __int16 *)(v42 + SBYTE1(v47) * (uint64_t)v7);
        if (v14 < (unint64_t)v73)
          v73 = (unsigned __int16 *)v14;
        if ((unint64_t)v73 < *(_QWORD *)(result + 40))
          v73 = *(unsigned __int16 **)(result + 40);
        v72 = bswap32(*v73) >> 16;
      }
      v74 = (char *)&interpolate_cmyk64 + 16 * v49;
      v75 = v49 + 1;
      v46 = v46 - ((*(_QWORD *)v74 & v46) >> v75) + ((*(_QWORD *)v74 & v71) >> v75);
      v69 = v45
          - ((unsigned __int16)(*((_WORD *)v74 + 4) & v45) >> v75)
          + ((unsigned __int16)(*((_WORD *)v74 + 4) & v72) >> v75);
      goto LABEL_99;
    case 2:
      v76 = (unint64_t)HIWORD(v47) << 56;
      v77 = (unsigned __int16 *)(v39 + (v76 >> 53));
      if (v15 < (unint64_t)v77)
        v77 = (unsigned __int16 *)v15;
      if (v77 < v40)
        v77 = v40;
      v78 = ((unint64_t)(bswap32(v77[2]) >> 16) << 32) | ((unint64_t)(bswap32(v77[3]) >> 16) << 48) | bswap32(v77[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v77) >> 16);
      LOWORD(v79) = -1;
      if (v5)
      {
        v80 = (unsigned __int16 *)(v42 + (v76 >> 55));
        if (v14 < (unint64_t)v80)
          v80 = (unsigned __int16 *)v14;
        if ((unint64_t)v80 < *(_QWORD *)(result + 40))
          v80 = *(unsigned __int16 **)(result + 40);
        v79 = bswap32(*v80) >> 16;
      }
      v81 = (v47 >> 28) & 3;
      v82 = (char *)&interpolate_cmyk64 + 16 * v81;
      LOBYTE(v81) = v81 + 1;
      v46 = v46 - ((*(_QWORD *)v82 & v46) >> v81) + ((*(_QWORD *)v82 & v78) >> v81);
      v69 = v45 - ((*((_WORD *)v82 + 4) & v45) >> v81) + ((*((_WORD *)v82 + 4) & v79) >> v81);
LABEL_99:
      v45 = (unsigned __int16)v69;
      break;
    case 3:
      v96 = HIBYTE(v47) & 3;
      v50 = (unint64_t)HIWORD(v47) << 56;
      v51 = (unsigned __int16 *)(v39 + (v50 >> 53));
      if (v15 < (unint64_t)v51)
        v51 = (unsigned __int16 *)v15;
      if (v51 < v40)
        v51 = v40;
      v97 = ((unint64_t)(bswap32(v51[2]) >> 16) << 32) | ((unint64_t)(bswap32(v51[3]) >> 16) << 48) | bswap32(v51[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v51) >> 16);
      v52 = v39 + SBYTE1(v47) * (uint64_t)v6;
      if (v15 >= v52)
        v53 = (unsigned __int16 *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      else
        v53 = (unsigned __int16 *)v15;
      if (v53 < v40)
        v53 = v40;
      v95 = ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | ((unint64_t)(bswap32(v53[3]) >> 16) << 48) | bswap32(v53[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v53) >> 16);
      v54 = (unsigned __int16 *)(v52 + (v50 >> 53));
      if (v15 < (unint64_t)v54)
        v54 = (unsigned __int16 *)v15;
      if (v54 < v40)
        v54 = v40;
      v94 = ((unint64_t)(bswap32(v54[2]) >> 16) << 32) | ((unint64_t)(bswap32(v54[3]) >> 16) << 48) | bswap32(v54[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v54) >> 16);
      v55 = 0xFFFF;
      v56 = 0xFFFF;
      v57 = 0xFFFF;
      if (v5)
      {
        v58 = (unsigned __int16 *)(v42 + (v50 >> 55));
        v59 = *(_QWORD *)(result + 40);
        if (v14 < (unint64_t)v58)
          v58 = (unsigned __int16 *)v14;
        if ((unint64_t)v58 < v59)
          v58 = *(unsigned __int16 **)(result + 40);
        v55 = bswap32(*v58) >> 16;
        v60 = v42 + SBYTE1(v47) * (uint64_t)v7;
        if (v14 >= v60)
          v61 = (unsigned __int16 *)(v42 + SBYTE1(v47) * (uint64_t)v7);
        else
          v61 = (unsigned __int16 *)v14;
        if ((unint64_t)v61 < v59)
          v61 = *(unsigned __int16 **)(result + 40);
        v56 = bswap32(*v61) >> 16;
        v62 = (unsigned __int16 *)(v60 + (v50 >> 55));
        if (v14 < (unint64_t)v62)
          v62 = (unsigned __int16 *)v14;
        if ((unint64_t)v62 < v59)
          v62 = *(unsigned __int16 **)(result + 40);
        v57 = bswap32(*v62) >> 16;
      }
      v63 = (char *)&interpolate_cmyk64 + 16 * v49;
      v64 = *(_QWORD *)v63;
      v65 = v46 - ((*(_QWORD *)v63 & v46) >> (v49 + 1));
      LODWORD(v63) = *((unsigned __int16 *)v63 + 4);
      v66 = v45 - ((v63 & v45) >> (v49 + 1)) + ((v63 & v56) >> (v49 + 1));
      v67 = (v47 >> 28) & 3;
      v68 = (char *)&interpolate_cmyk64 + 16 * v67;
      LOBYTE(v67) = v67 + 1;
      v46 = v65
          + ((v64 & v95) >> (v96 + 1))
          - (((v65 + ((v64 & v95) >> (v96 + 1))) & *(_QWORD *)v68) >> v67)
          + (((v97 - ((v64 & v97) >> (v96 + 1)) + ((v64 & v94) >> (v96 + 1))) & *(_QWORD *)v68) >> v67);
      v69 = v66
          - ((v66 & *((_WORD *)v68 + 4)) >> v67)
          + (((v55 - ((v63 & v55) >> (v96 + 1)) + ((v63 & v57) >> (v96 + 1))) & *((unsigned __int16 *)v68 + 4)) >> v67);
      goto LABEL_99;
  }
LABEL_100:
  v83 = 0;
  a2 += v10;
  v84 = v100 - a2;
  v85 = (unsigned int *)(v11 + 12);
  a3 += v9;
  v86 = v102 - a3;
  while (1)
  {
    v87 = v45 - (HIWORD(v46) + (unsigned __int16)v46);
    v88 = v45 - (HIWORD(v46) + WORD1(v46));
    v89 = v45 - (HIWORD(v46) + WORD2(v46));
    *(v85 - 1) = v87 & ~(v87 >> 31) | ((v88 & ~(v88 >> 31)) << 16);
    *v85 = v89 & ~(v89 >> 31) | (v45 << 16);
    *(_BYTE *)(v103 + 1 + v83) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v83)
      return result;
    if ((v86 | v84 | (a3 - v101) | (a2 - v99)) < 0)
    {
      v103 += v83 + 1;
      v11 = (uint64_t)(v85 - 1);
      a4 += ~(_DWORD)v83;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39)
      v90 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    else
      v90 = v15;
    if (v90 >= (unint64_t)v40)
      v91 = (unsigned __int16 *)v90;
    else
      v91 = *(unsigned __int16 **)(result + 32);
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      v92 = *(unsigned __int16 **)(result + 40);
      if (v14 >= v42)
        v93 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      else
        v93 = v14;
      if (v93 >= (unint64_t)v92)
        v92 = (unsigned __int16 *)v93;
      v45 = bswap32(*v92) >> 16;
    }
    else
    {
      v45 = 0xFFFF;
    }
    v46 = ((unint64_t)(bswap32(v91[2]) >> 16) << 32) | ((unint64_t)(bswap32(v91[3]) >> 16) << 48) | bswap32(v91[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v91) >> 16);
    if (v8)
    {
      v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v103 += v83 + 1;
        v11 = (uint64_t)(v85 - 1);
        a4 += ~(_DWORD)v83;
        v25 = -1;
        goto LABEL_45;
      }
    }
    ++v83;
    v84 -= v10;
    v85 += 2;
    a3 += v9;
    v86 -= v9;
    a2 += v10;
    v25 = -1;
  }
}

uint64_t rgba64_sample_cmyk64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  int v57;
  int v58;
  int v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  char *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  char *v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  __int16 v79;
  __int16 *v80;
  char *v81;
  char v82;
  int64_t v83;
  unint64_t *v84;
  unint64_t v85;
  __int16 v86;
  __int16 *v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t *v98;
  unsigned __int16 *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v105 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v107 = *(_QWORD *)(result + 88);
  v108 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v103 = *(_DWORD *)(result + 188);
  v14 = v5 + (v12 * v7) + 2 * (v13 - 1);
  v15 = v4 + (v12 * v6) + 8 * v13 - 16;
  v106 = *(_QWORD *)(result + 72);
  v104 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v106)
    {
      if (a3 <= v107)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v104;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v107;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_39;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v104;
        v25 = v103 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v106 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_39;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v104;
      v25 = v103 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v103;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v11 += 8;
    *(_BYTE *)++v108 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v105)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_26;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v105;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_39;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v103;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_26:
  if (v25 < 0x400000)
    goto LABEL_39;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  v39 = v38 + 8 * v37;
  v40 = *(unint64_t **)(result + 32);
  if (v15 >= v39)
    v41 = (unint64_t *)(v38 + 8 * v37);
  else
    v41 = (unint64_t *)v15;
  if (v41 < v40)
    v41 = *(unint64_t **)(result + 32);
  if (v5)
  {
    v42 = v5 + (int)v36 * (uint64_t)v7 + 2 * v37;
    v43 = *(unsigned __int16 **)(result + 40);
    if (v14 >= v42)
      v44 = (unsigned __int16 *)v42;
    else
      v44 = (unsigned __int16 *)v14;
    if (v44 >= v43)
      v43 = v44;
    v45 = *v43;
  }
  else
  {
    v42 = 0;
    v45 = 0xFFFF;
  }
  v46 = v105;
  v47 = *v41;
  if (!v8)
    goto LABEL_101;
  v48 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
  v49 = v48 & 0xF;
  v50 = HIBYTE(v48) & 3;
  switch(v49)
  {
    case 1:
      v77 = (unint64_t *)(v39 + SBYTE1(v48) * (uint64_t)v6);
      if (v15 < (unint64_t)v77)
        v77 = (unint64_t *)v15;
      if (v77 < v40)
        v77 = v40;
      v78 = *v77;
      v79 = -1;
      if (v5)
      {
        v80 = (__int16 *)(v42 + SBYTE1(v48) * (uint64_t)v7);
        if (v14 < (unint64_t)v80)
          v80 = (__int16 *)v14;
        if ((unint64_t)v80 < *(_QWORD *)(result + 40))
          v80 = *(__int16 **)(result + 40);
        v79 = *v80;
      }
      v81 = (char *)&interpolate_cmyk64 + 16 * v50;
      v82 = v50 + 1;
      v47 = v47 - ((*(_QWORD *)v81 & v47) >> v82) + ((*(_QWORD *)v81 & v78) >> v82);
      v76 = v45
          - ((unsigned __int16)(*((_WORD *)v81 + 4) & v45) >> v82)
          + ((unsigned __int16)(*((_WORD *)v81 + 4) & v79) >> v82);
      goto LABEL_99;
    case 2:
      v83 = (unint64_t)HIWORD(v48) << 56;
      v84 = (unint64_t *)(v39 + (v83 >> 53));
      if (v15 < (unint64_t)v84)
        v84 = (unint64_t *)v15;
      if (v84 < v40)
        v84 = v40;
      v85 = *v84;
      v86 = -1;
      if (v5)
      {
        v87 = (__int16 *)(v42 + (v83 >> 55));
        if (v14 < (unint64_t)v87)
          v87 = (__int16 *)v14;
        if ((unint64_t)v87 < *(_QWORD *)(result + 40))
          v87 = *(__int16 **)(result + 40);
        v86 = *v87;
      }
      v88 = (v48 >> 28) & 3;
      v89 = (char *)&interpolate_cmyk64 + 16 * v88;
      LOBYTE(v88) = v88 + 1;
      v47 = v47 - ((*(_QWORD *)v89 & v47) >> v88) + ((*(_QWORD *)v89 & v85) >> v88);
      v76 = v45
          - ((unsigned __int16)(*((_WORD *)v89 + 4) & v45) >> v88)
          + ((unsigned __int16)(*((_WORD *)v89 + 4) & v86) >> v88);
LABEL_99:
      v45 = (unsigned __int16)v76;
      break;
    case 3:
      v51 = (unint64_t)HIWORD(v48) << 56;
      v52 = (unint64_t *)(v39 + (v51 >> 53));
      if (v15 < (unint64_t)v52)
        v52 = (unint64_t *)v15;
      if (v52 < v40)
        v52 = v40;
      v53 = *v52;
      v54 = v39 + SBYTE1(v48) * (uint64_t)v6;
      if (v15 >= v54)
        v55 = (unint64_t *)(v39 + SBYTE1(v48) * (uint64_t)v6);
      else
        v55 = (unint64_t *)v15;
      if (v55 < v40)
        v55 = v40;
      v102 = *v55;
      v56 = (unint64_t *)(v54 + (v51 >> 53));
      if (v15 < (unint64_t)v56)
        v56 = (unint64_t *)v15;
      if (v56 < v40)
        v56 = v40;
      v101 = *v56;
      v57 = 0xFFFF;
      v58 = 0xFFFF;
      v59 = 0xFFFF;
      if (v5)
      {
        v60 = (unsigned __int16 *)(v42 + (v51 >> 55));
        v61 = *(_QWORD *)(result + 40);
        if (v14 < (unint64_t)v60)
          v60 = (unsigned __int16 *)v14;
        if ((unint64_t)v60 < v61)
          v60 = *(unsigned __int16 **)(result + 40);
        v57 = *v60;
        v62 = v42 + SBYTE1(v48) * (uint64_t)v7;
        if (v14 >= v62)
          v63 = (unsigned __int16 *)(v42 + SBYTE1(v48) * (uint64_t)v7);
        else
          v63 = (unsigned __int16 *)v14;
        if ((unint64_t)v63 < v61)
          v63 = *(unsigned __int16 **)(result + 40);
        v58 = *v63;
        v64 = (unsigned __int16 *)(v62 + (v51 >> 55));
        if (v14 < (unint64_t)v64)
          v64 = (unsigned __int16 *)v14;
        if ((unint64_t)v64 < v61)
          v64 = *(unsigned __int16 **)(result + 40);
        v59 = *v64;
      }
      v65 = (char *)&interpolate_cmyk64 + 16 * v50;
      v66 = *(_QWORD *)v65;
      v67 = v50 + 1;
      v68 = v47 - ((*(_QWORD *)v65 & v47) >> v67);
      LODWORD(v65) = *((unsigned __int16 *)v65 + 4);
      v69 = v53 - ((v66 & v53) >> v67);
      v70 = v57 - ((v65 & v57) >> v67);
      v71 = v68 + ((v66 & v102) >> v67);
      v72 = v45 - ((v65 & v45) >> v67) + ((v65 & v58) >> v67);
      v73 = v69 + ((v66 & v101) >> v67);
      v74 = v70 + ((v65 & v59) >> v67);
      LODWORD(v65) = (v48 >> 28) & 3;
      v75 = (char *)&interpolate_cmyk64 + 16 * v65;
      LOBYTE(v65) = (_BYTE)v65 + 1;
      v47 = v71 - ((v71 & *(_QWORD *)v75) >> (char)v65) + ((v73 & *(_QWORD *)v75) >> (char)v65);
      v76 = v72
          - ((unsigned __int16)(v72 & *((_WORD *)v75 + 4)) >> (char)v65)
          + ((unsigned __int16)(v74 & *((_WORD *)v75 + 4)) >> (char)v65);
      goto LABEL_99;
  }
  v46 = v105;
LABEL_101:
  v90 = 0;
  a2 += v10;
  v91 = v46 - a2;
  v92 = (int *)(v11 + 12);
  a3 += v9;
  v93 = v107 - a3;
  while (1)
  {
    v94 = v45 - (HIWORD(v47) + (unsigned __int16)v47);
    v95 = v45 - (HIWORD(v47) + WORD1(v47));
    v96 = v45 - (HIWORD(v47) + WORD2(v47));
    *(v92 - 1) = v94 & ~(v94 >> 31) | ((v95 & ~(v95 >> 31)) << 16);
    *v92 = v96 & ~(v96 >> 31) | (v45 << 16);
    *(_BYTE *)(v108 + 1 + v90) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v90)
      return result;
    if ((v93 | v91 | (a3 - v106) | (a2 - v104)) < 0)
    {
      v11 = (uint64_t)(v92 - 1);
      v108 += v90 + 1;
      a4 += ~(_DWORD)v90;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    v40 = *(unint64_t **)(result + 32);
    if (v15 >= v39)
      v97 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 8 * (a2 >> 32);
    else
      v97 = v15;
    if (v97 >= (unint64_t)v40)
      v98 = (unint64_t *)v97;
    else
      v98 = *(unint64_t **)(result + 32);
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      v99 = *(unsigned __int16 **)(result + 40);
      if (v14 >= v42)
        v100 = v5 + SHIDWORD(a3) * (uint64_t)v7 + 2 * (a2 >> 32);
      else
        v100 = v14;
      if (v100 >= (unint64_t)v99)
        v99 = (unsigned __int16 *)v100;
      v45 = *v99;
    }
    else
    {
      v45 = 0xFFFF;
    }
    v47 = *v98;
    if (v8)
    {
      v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v48 & 0xF) != 0)
      {
        v11 = (uint64_t)(v92 - 1);
        v108 += v90 + 1;
        a4 += ~(_DWORD)v90;
        v25 = -1;
        goto LABEL_45;
      }
    }
    v91 -= v10;
    v92 += 2;
    ++v90;
    a3 += v9;
    v93 -= v9;
    a2 += v10;
    v25 = -1;
  }
}

unint64_t *rgba64_sample_RGBF(unint64_t *result, int64_t a2, int64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t *v36;
  int8x8_t *v37;
  float32x2_t v38;
  float v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int8x8_t *v44;
  int8x8_t *v45;
  float v46;
  int8x8_t *v47;
  float32x2_t v48;
  int8x8_t *v49;
  float v50;
  _DWORD *v51;
  int8x8_t *v52;
  uint64_t v53;
  int v54;
  int64_t v55;
  int64_t v56;
  int8x8_t *v57;
  int v58;
  int v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;

  v12 = result[22];
  v60 = result[10];
  v63 = result[11];
  v68 = result[15];
  v69 = result[14];
  v13 = (unint64_t *)(result[19] - 8);
  v64 = result[18] - 1;
  v65 = result[4];
  v66 = *((_DWORD *)result + 6);
  v70 = result;
  v59 = *((_DWORD *)result + 47);
  v67 = v65
      + ((*((_DWORD *)result + 65) - 1) * v66)
      + 4 * (3 * *((_DWORD *)result + 64))
      - 16;
  v61 = result[8];
  v62 = result[9];
  while (1)
  {
    if (a3 >= v62)
    {
      if (a3 <= v63)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v17 = a4;
        v18 = v61;
      }
      else
      {
        v20 = v70[27];
        v21 = v70[28] + v63;
        v22 = v21 - a3 + (v20 >> 1);
        v17 = a4;
        v18 = v61;
        if (v22 < 1)
          goto LABEL_33;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (v70[29] * v22) >> 32;
        v25 = v59 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v14 = v70[27];
      v15 = v62 - v70[28];
      v16 = a3 - v15 + (v14 >> 1);
      v17 = a4;
      v18 = v61;
      if (v16 < 1)
        goto LABEL_33;
      if (v16 >= v14)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (v70[29] * v16) >> 32;
      v25 = v59 | v19;
      v26 = v15 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v18)
    {
      if (a2 <= v60)
      {
        v31 = ((unint64_t)a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        v32 = v70[24];
        v33 = v70[25] + v60;
        v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1)
          goto LABEL_33;
        if (v34 < v32)
          v25 = ((v25 >> 15) * (((v70[26] * v34) >> 32) >> 15)) | v59;
        v30 = v33 - 0x1000000;
        v31 = 28;
      }
    }
    else
    {
      v27 = v70[24];
      v28 = v18 - v70[25];
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_33;
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((v70[26] * v29) >> 32) >> 15)) | v59;
      v30 = v28 + 0x1000000;
      v31 = 32;
    }
    if (v25 >= 0x400000)
      break;
LABEL_33:
    v41 = v17 - 1;
    a2 += v69;
    a3 += v68;
    ++v13;
    *(_BYTE *)++v64 = 0;
LABEL_34:
    a4 = v41;
    if (!v41)
      return result;
  }
  v35 = v65 + SHIDWORD(v26) * (uint64_t)v66 + 12 * SHIDWORD(v30);
  v36 = (int8x8_t *)v70[4];
  v37 = (int8x8_t *)v67;
  if (v67 >= v35)
    v37 = (int8x8_t *)v35;
  if (v37 < v36)
    v37 = (int8x8_t *)v70[4];
  v38 = (float32x2_t)vrev32_s8(*v37);
  v39 = COERCE_FLOAT(bswap32(v37[1].u32[0]));
  if (!v12)
    goto LABEL_36;
  v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  v42 = v40 & 0xF;
  v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    v49 = (int8x8_t *)(v35 + SBYTE1(v40) * (uint64_t)v66);
    if (v67 < (unint64_t)v49)
      v49 = (int8x8_t *)v67;
    if (v49 >= v36)
      v36 = v49;
    v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    v51 = &interpolate_rgbaf_19467[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    v52 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
    if (v67 < (unint64_t)v52)
      v52 = (int8x8_t *)v67;
    if (v52 >= v36)
      v36 = v52;
    v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    v51 = &interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v51[3];
    v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a8);
    v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v50 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  v44 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
  if (v67 >= (unint64_t)v44)
    v45 = v44;
  else
    v45 = (int8x8_t *)v67;
  if (v45 < v36)
    v45 = v36;
  v46 = COERCE_FLOAT(bswap32(v45[1].u32[0]));
  v47 = (int8x8_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v66);
  if (v67 < (unint64_t)v47)
    v47 = (int8x8_t *)v67;
  if (v47 >= v36)
    v36 = v47;
  LODWORD(a9) = interpolate_rgbaf_19467[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3) + 3];
  v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v46 - (float)(v46 * *(float *)&a9))
                      + (float)(COERCE_FLOAT(bswap32(v36[1].u32[0])) * *(float *)&a9))
              * *(float *)&a10);
  a8 = COERCE_DOUBLE(vrev32_s8(*v45));
  v48 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *(float32x2_t *)&a8, *(float *)&a9);
  v38 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8, *(float32x2_t *)&a9, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  v53 = 0;
  ++v13;
  v58 = v17;
  v54 = v17 - 1;
  a3 += v68;
  v55 = v63 - a3;
  a2 += v69;
  v56 = v60 - a2;
  while (1)
  {
    result = RGBAF_13487(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(_BYTE *)(v64 + 1 + v53) = v25 >> 22;
    if (v54 == (_DWORD)v53)
      return result;
    if (((v55 | v56 | (a3 - v62) | (a2 - v61)) & 0x8000000000000000) != 0)
    {
      v64 += v53 + 1;
      v41 = ~(_DWORD)v53 + v58;
      goto LABEL_34;
    }
    v35 = v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2);
    v36 = (int8x8_t *)v70[4];
    v57 = (int8x8_t *)v67;
    if (v67 >= v35)
      v57 = (int8x8_t *)(v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2));
    if (v57 < v36)
      v57 = (int8x8_t *)v70[4];
    v38 = (float32x2_t)vrev32_s8(*v57);
    v39 = COERCE_FLOAT(bswap32(v57[1].u32[0]));
    if (v12)
    {
      v40 = *(_DWORD *)(v12 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v64 += v53 + 1;
        v17 = ~(_DWORD)v53 + v58;
        v25 = -1;
        goto LABEL_38;
      }
    }
    ++v53;
    ++v13;
    a3 += v68;
    v55 -= v68;
    a2 += v69;
    v56 -= v69;
    LODWORD(a8) = 1.0;
    v25 = -1;
  }
}

unint64_t *rgba64_sample_RGBf(unint64_t *result, int64_t a2, int64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t v38;
  float v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  float32x2_t *v44;
  float32x2_t *v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t *v48;
  float v49;
  _DWORD *v50;
  float32x2_t *v51;
  uint64_t v52;
  int v53;
  int64_t v54;
  int64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;

  v12 = result[22];
  v59 = result[10];
  v62 = result[11];
  v67 = result[15];
  v68 = result[14];
  v13 = (unint64_t *)(result[19] - 8);
  v63 = result[18] - 1;
  v64 = result[4];
  v65 = *((_DWORD *)result + 6);
  v69 = result;
  v58 = *((_DWORD *)result + 47);
  v66 = v64
      + ((*((_DWORD *)result + 65) - 1) * v65)
      + 4 * (3 * *((_DWORD *)result + 64))
      - 16;
  v60 = result[8];
  v61 = result[9];
  while (1)
  {
    if (a3 >= v61)
    {
      if (a3 <= v62)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v17 = a4;
        v18 = v60;
      }
      else
      {
        v20 = v69[27];
        v21 = v69[28] + v62;
        v22 = v21 - a3 + (v20 >> 1);
        v17 = a4;
        v18 = v60;
        if (v22 < 1)
          goto LABEL_33;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (v69[29] * v22) >> 32;
        v25 = v58 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v14 = v69[27];
      v15 = v61 - v69[28];
      v16 = a3 - v15 + (v14 >> 1);
      v17 = a4;
      v18 = v60;
      if (v16 < 1)
        goto LABEL_33;
      if (v16 >= v14)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (v69[29] * v16) >> 32;
      v25 = v58 | v19;
      v26 = v15 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v18)
    {
      if (a2 <= v59)
      {
        v31 = ((unint64_t)a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        v32 = v69[24];
        v33 = v69[25] + v59;
        v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1)
          goto LABEL_33;
        if (v34 < v32)
          v25 = ((v25 >> 15) * (((v69[26] * v34) >> 32) >> 15)) | v58;
        v30 = v33 - 0x1000000;
        v31 = 28;
      }
    }
    else
    {
      v27 = v69[24];
      v28 = v18 - v69[25];
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_33;
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((v69[26] * v29) >> 32) >> 15)) | v58;
      v30 = v28 + 0x1000000;
      v31 = 32;
    }
    if (v25 >= 0x400000)
      break;
LABEL_33:
    v41 = v17 - 1;
    a2 += v68;
    a3 += v67;
    ++v13;
    *(_BYTE *)++v63 = 0;
LABEL_34:
    a4 = v41;
    if (!v41)
      return result;
  }
  v35 = v64 + SHIDWORD(v26) * (uint64_t)v65 + 12 * SHIDWORD(v30);
  v36 = (float32x2_t *)v69[4];
  v37 = (float32x2_t *)v66;
  if (v66 >= v35)
    v37 = (float32x2_t *)v35;
  if (v37 < v36)
    v37 = (float32x2_t *)v69[4];
  v38 = *v37;
  v39 = v37[1].f32[0];
  if (!v12)
    goto LABEL_36;
  v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  v42 = v40 & 0xF;
  v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    v48 = (float32x2_t *)(v35 + SBYTE1(v40) * (uint64_t)v65);
    if (v66 < (unint64_t)v48)
      v48 = (float32x2_t *)v66;
    if (v48 >= v36)
      v36 = v48;
    v49 = v36[1].f32[0];
    v50 = &interpolate_rgbaf_19467[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    v51 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
    if (v66 < (unint64_t)v51)
      v51 = (float32x2_t *)v66;
    if (v51 >= v36)
      v36 = v51;
    v49 = v36[1].f32[0];
    v50 = &interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v50[3];
    v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), *v36, *(float *)&a8);
    v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v49 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  v44 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
  if (v66 >= (unint64_t)v44)
    v45 = v44;
  else
    v45 = (float32x2_t *)v66;
  if (v45 < v36)
    v45 = v36;
  v46 = (float32x2_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v65);
  if (v66 < (unint64_t)v46)
    v46 = (float32x2_t *)v66;
  if (v46 >= v36)
    v36 = v46;
  LODWORD(a9) = interpolate_rgbaf_19467[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3) + 3];
  v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v45[1].f32[0] - (float)(v45[1].f32[0] * *(float *)&a9))
                      + (float)(v36[1].f32[0] * *(float *)&a9))
              * *(float *)&a10);
  v47 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *v45, *(float *)&a9);
  v38 = vmla_n_f32(vmls_lane_f32(v47, v47, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*v45, *v45, *(float32x2_t *)&a9, 0), *v36, *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  v52 = 0;
  ++v13;
  v57 = v17;
  v53 = v17 - 1;
  a3 += v67;
  v54 = v62 - a3;
  a2 += v68;
  v55 = v59 - a2;
  while (1)
  {
    result = RGBAF_13487(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(_BYTE *)(v63 + 1 + v52) = v25 >> 22;
    if (v53 == (_DWORD)v52)
      return result;
    if (((v54 | v55 | (a3 - v61) | (a2 - v60)) & 0x8000000000000000) != 0)
    {
      v63 += v52 + 1;
      v41 = ~(_DWORD)v52 + v57;
      goto LABEL_34;
    }
    v35 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    v36 = (float32x2_t *)v69[4];
    v56 = v66;
    if (v66 >= v35)
      v56 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    if (v56 < (unint64_t)v36)
      v56 = v69[4];
    v38 = *(float32x2_t *)v56;
    v39 = *(float *)(v56 + 8);
    if (v12)
    {
      v40 = *(_DWORD *)(v12 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v63 += v52 + 1;
        v17 = ~(_DWORD)v52 + v57;
        v25 = -1;
        goto LABEL_38;
      }
    }
    ++v52;
    ++v13;
    a3 += v67;
    v54 -= v67;
    a2 += v68;
    v55 -= v68;
    LODWORD(a8) = 1.0;
    v25 = -1;
  }
}

unint64_t *rgba64_sample_RGBAF(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int8x8_t *v40;
  int8x8_t *v41;
  float v42;
  int v43;
  float32x2_t v44;
  float v45;
  unsigned int v46;
  int v47;
  int v48;
  int8x8_t *v49;
  float32x2_t v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  float32x2_t v55;
  float v56;
  float32x2_t v57;
  int8x8_t *v58;
  float32x2_t v59;
  float v60;
  float v61;
  _DWORD *v62;
  int8x8_t *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int8x8_t *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v15 = *(_QWORD *)(a1 + 176);
  v71 = *(_QWORD *)(a1 + 80);
  v74 = *(unint64_t **)(a1 + 88);
  v81 = *(_QWORD *)(a1 + 112);
  v80 = *(_QWORD *)(a1 + 120);
  v70 = *(_DWORD *)(a1 + 188);
  v16 = (unint64_t *)(*(_QWORD *)(a1 + 152) - 8);
  v75 = *(_QWORD *)(a1 + 144) - 1;
  v79 = *(_QWORD *)(a1 + 40);
  v76 = *(_QWORD *)(a1 + 32);
  v77 = *(_DWORD *)(a1 + 24);
  v78 = v76 + ((*(_DWORD *)(a1 + 260) - 1) * v77) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  v72 = *(_QWORD *)(a1 + 72);
  v73 = *(_QWORD *)(a1 + 64);
  while (1)
  {
    if (a3 >= v72)
    {
      result = v74;
      if (a3 <= (uint64_t)v74)
      {
        v28 = ((unint64_t)a3 >> 22) & 0x3C0;
        v29 = 0x3FFFFFFF;
        HIDWORD(v30) = HIDWORD(a3);
        v20 = a4;
        v22 = v73;
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 216);
        v25 = (char *)v74 + *(_QWORD *)(a1 + 224);
        v26 = (uint64_t)&v25[(v24 >> 1) - a3];
        v20 = a4;
        v22 = v73;
        if (v26 < 1)
          goto LABEL_33;
        if (v26 >= v24)
          LODWORD(v27) = 0x3FFFFFFF;
        else
          v27 = (unint64_t)(*(_QWORD *)(a1 + 232) * v26) >> 32;
        v29 = v70 | v27;
        v30 = v25 - 0x1000000;
        v28 = 448;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216);
      v18 = v72 - *(_QWORD *)(a1 + 224);
      v19 = a3 - v18 + (v17 >> 1);
      v20 = a4;
      v22 = v73;
      result = v74;
      if (v19 < 1)
        goto LABEL_33;
      if (v19 >= v17)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(a1 + 232) * v19) >> 32;
      v29 = v70 | v23;
      v30 = (char *)(v18 + 0x1000000);
      v28 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v71)
      {
        v35 = ((unint64_t)a2 >> 26) & 0x3C;
        v34 = a2;
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 192);
        v37 = *(_QWORD *)(a1 + 200) + v71;
        v38 = v37 - a2 + (v36 >> 1);
        if (v38 < 1)
          goto LABEL_33;
        if (v38 < v36)
          v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v38) >> 32) >> 15)) | v70;
        v34 = v37 - 0x1000000;
        v35 = 28;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 192);
      v32 = v22 - *(_QWORD *)(a1 + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 < 1)
        goto LABEL_33;
      if (v33 < v31)
        v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v33) >> 32) >> 15)) | v70;
      v34 = v32 + 0x1000000;
      v35 = 32;
    }
    if (v29 >= 0x400000)
      break;
LABEL_33:
    v43 = v20 - 1;
    a2 += v81;
    a3 += v80;
    ++v16;
    *(_BYTE *)++v75 = 0;
LABEL_34:
    a4 = v43;
    if (!v43)
      return result;
  }
  v39 = v76 + SHIDWORD(v30) * (uint64_t)v77 + 16 * (v34 >> 32);
  v40 = *(int8x8_t **)(a1 + 32);
  v41 = (int8x8_t *)v78;
  if (v78 >= v39)
    v41 = (int8x8_t *)v39;
  if (v41 < v40)
    v41 = *(int8x8_t **)(a1 + 32);
  if (v79)
    v42 = COERCE_FLOAT(bswap32(v41[1].u32[1]));
  else
    v42 = 1.0;
  v44 = (float32x2_t)vrev32_s8(*v41);
  v45 = COERCE_FLOAT(bswap32(v41[1].u32[0]));
  if (v15)
  {
    v46 = *(_DWORD *)(v15 + (v35 | v28));
LABEL_40:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v58 = (int8x8_t *)(v39 + SBYTE1(v46) * (uint64_t)v77);
      if (v78 < (unint64_t)v58)
        v58 = (int8x8_t *)v78;
      if (v58 >= v40)
        v40 = v58;
      v59 = (float32x2_t)vrev32_s8(*v40);
      v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      v61 = 1.0;
      if (v79)
        v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      v62 = &interpolate_rgbaf_19467[4 * v48];
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
          if (v78 < (unint64_t)v49)
            v49 = (int8x8_t *)v78;
          if (v49 < v40)
            v49 = v40;
          v50 = (float32x2_t)vrev32_s8(*v49);
          v51 = COERCE_FLOAT(bswap32(v49[1].u32[0]));
          v52 = 1.0;
          v53 = 1.0;
          if (v79)
            v53 = COERCE_FLOAT(bswap32(v49[1].u32[1]));
          v54 = v39 + SBYTE1(v46) * (uint64_t)v77 + 16 * SBYTE2(v46);
          if (v78 < v54)
            v54 = v78;
          if (v54 >= (unint64_t)v40)
            v40 = (int8x8_t *)v54;
          v55 = (float32x2_t)vrev32_s8(*v40);
          v56 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
          if (v79)
            v52 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
          v11.i32[0] = interpolate_rgbaf_19467[4 * v48 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v46 >> 28) & 3) + 3];
          v45 = (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                      - (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
          v57 = vmla_n_f32(vmls_lane_f32(v44, v44, v11, 0), v50, v11.f32[0]);
          v44 = vmla_n_f32(vmls_lane_f32(v57, v57, v12, 0), vmla_n_f32(vmls_lane_f32(v50, v50, v11, 0), v55, v11.f32[0]), v12.f32[0]);
          v42 = (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                      - (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v52 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_71;
      }
      v63 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
      if (v78 < (unint64_t)v63)
        v63 = (int8x8_t *)v78;
      if (v63 >= v40)
        v40 = v63;
      v59 = (float32x2_t)vrev32_s8(*v40);
      v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      v61 = 1.0;
      if (v79)
        v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      v62 = &interpolate_rgbaf_19467[4 * ((v46 >> 28) & 3)];
    }
    LODWORD(a11) = v62[3];
    v44 = vmla_n_f32(vmls_lane_f32(v44, v44, *(float32x2_t *)&a11, 0), v59, *(float *)&a11);
    v45 = (float)(v45 - (float)(v45 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
    v42 = (float)(v42 - (float)(v42 * *(float *)&a11)) + (float)(v61 * *(float *)&a11);
  }
LABEL_71:
  v64 = 0;
  ++v16;
  v69 = v20;
  v65 = v20 - 1;
  a3 += v80;
  v66 = (unint64_t)result - a3;
  a2 += v81;
  v67 = v71 - a2;
  while (1)
  {
    result = RGBAF_13487(v16, v44.f32[0], v44.f32[1], v45, v42);
    *(_BYTE *)(v75 + 1 + v64) = v29 >> 22;
    if (v65 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v72) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v75 += v64 + 1;
      v43 = ~(_DWORD)v64 + v69;
      goto LABEL_34;
    }
    v39 = v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32);
    v40 = *(int8x8_t **)(a1 + 32);
    v68 = (int8x8_t *)v78;
    if (v78 >= v39)
      v68 = (int8x8_t *)(v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32));
    if (v68 < v40)
      v68 = *(int8x8_t **)(a1 + 32);
    if (v79)
      v42 = COERCE_FLOAT(bswap32(v68[1].u32[1]));
    else
      v42 = 1.0;
    v44 = (float32x2_t)vrev32_s8(*v68);
    v45 = COERCE_FLOAT(bswap32(v68[1].u32[0]));
    if (v15)
    {
      v46 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        result = v74;
        v75 += v64 + 1;
        v20 = ~(_DWORD)v64 + v69;
        v29 = -1;
        goto LABEL_40;
      }
    }
    ++v16;
    ++v64;
    a3 += v80;
    v66 -= v80;
    a2 += v81;
    v67 -= v81;
    v29 = -1;
  }
}

unint64_t *rgba64_sample_RGBAf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t *result;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float v43;
  int v44;
  float32x2_t v45;
  float v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  float32x2_t v53;
  float v54;
  float32x2_t *v55;
  float v56;
  float32x2_t *v57;
  float32x2_t v58;
  float v59;
  float v60;
  _DWORD *v61;
  float32x2_t *v62;
  float32x2_t *v63;
  float32x2_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v15 = *(_QWORD *)(a1 + 176);
  v72 = *(_QWORD *)(a1 + 80);
  v75 = *(unint64_t **)(a1 + 88);
  v82 = *(_QWORD *)(a1 + 112);
  v81 = *(_QWORD *)(a1 + 120);
  v71 = *(_DWORD *)(a1 + 188);
  v16 = (unint64_t *)(*(_QWORD *)(a1 + 152) - 8);
  v76 = *(_QWORD *)(a1 + 144) - 1;
  v79 = *(_DWORD *)(a1 + 24);
  v80 = *(_QWORD *)(a1 + 40);
  v77 = *(_QWORD *)(a1 + 32);
  v17 = v77 + ((*(_DWORD *)(a1 + 260) - 1) * v79) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  v73 = *(_QWORD *)(a1 + 64);
  v74 = *(_QWORD *)(a1 + 72);
  v78 = v17;
  while (1)
  {
    if (a3 >= v74)
    {
      result = v75;
      if (a3 <= (uint64_t)v75)
      {
        v29 = ((unint64_t)a3 >> 22) & 0x3C0;
        v30 = 0x3FFFFFFF;
        HIDWORD(v31) = HIDWORD(a3);
        v21 = a4;
        v22 = v73;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 216);
        v26 = (char *)v75 + *(_QWORD *)(a1 + 224);
        v27 = (uint64_t)&v26[(v25 >> 1) - a3];
        v21 = a4;
        v22 = v73;
        if (v27 < 1)
          goto LABEL_34;
        if (v27 >= v25)
          LODWORD(v28) = 0x3FFFFFFF;
        else
          v28 = (unint64_t)(*(_QWORD *)(a1 + 232) * v27) >> 32;
        v30 = v71 | v28;
        v31 = v26 - 0x1000000;
        v29 = 448;
      }
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 216);
      v19 = v74 - *(_QWORD *)(a1 + 224);
      v20 = a3 - v19 + (v18 >> 1);
      v21 = a4;
      v22 = v73;
      result = v75;
      if (v20 < 1)
        goto LABEL_34;
      if (v20 >= v18)
        LODWORD(v24) = 0x3FFFFFFF;
      else
        v24 = (unint64_t)(*(_QWORD *)(a1 + 232) * v20) >> 32;
      v30 = v71 | v24;
      v31 = (char *)(v19 + 0x1000000);
      v29 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v72)
      {
        v36 = ((unint64_t)a2 >> 26) & 0x3C;
        v35 = a2;
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 192);
        v38 = *(_QWORD *)(a1 + 200) + v72;
        v39 = v38 - a2 + (v37 >> 1);
        if (v39 < 1)
          goto LABEL_34;
        if (v39 < v37)
          v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v39) >> 32) >> 15)) | v71;
        v35 = v38 - 0x1000000;
        v36 = 28;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 192);
      v33 = v22 - *(_QWORD *)(a1 + 200);
      v34 = a2 - v33 + (v32 >> 1);
      if (v34 < 1)
        goto LABEL_34;
      if (v34 < v32)
        v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v34) >> 32) >> 15)) | v71;
      v35 = v33 + 0x1000000;
      v36 = 32;
    }
    if (v30 >= 0x400000)
      break;
LABEL_34:
    v44 = v21 - 1;
    a2 += v82;
    a3 += v81;
    ++v16;
    *(_BYTE *)++v76 = 0;
LABEL_35:
    a4 = v44;
    if (!v44)
      return result;
  }
  v40 = v77 + SHIDWORD(v31) * (uint64_t)v79 + 16 * (v35 >> 32);
  v41 = *(float32x2_t **)(a1 + 32);
  if (v17 >= v40)
    v42 = (float32x2_t *)v40;
  else
    v42 = (float32x2_t *)v17;
  if (v42 < v41)
    v42 = *(float32x2_t **)(a1 + 32);
  if (v80)
    v43 = v42[1].f32[1];
  else
    v43 = 1.0;
  v45 = *v42;
  v46 = v42[1].f32[0];
  if (v15)
  {
    v47 = *(_DWORD *)(v15 + (v36 | v29));
LABEL_41:
    v48 = v47 & 0xF;
    v49 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      v57 = (float32x2_t *)(v40 + SBYTE1(v47) * (uint64_t)v79);
      if (v17 < (unint64_t)v57)
        v57 = (float32x2_t *)v17;
      if (v57 >= v41)
        v41 = v57;
      v58 = *v41;
      v59 = v41[1].f32[0];
      v60 = 1.0;
      if (v80)
        v60 = v41[1].f32[1];
      v61 = &interpolate_rgbaf_19467[4 * v49];
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          v50 = SBYTE1(v47) * (uint64_t)v79;
          v51 = 16 * SBYTE2(v47);
          v52 = (float32x2_t *)(v40 + v51);
          if (v17 < v40 + v51)
            v52 = (float32x2_t *)v17;
          if (v52 < v41)
            v52 = v41;
          v53 = *v52;
          if (v80)
          {
            v54 = v52[1].f32[1];
            v55 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v55)
              v55 = (float32x2_t *)v17;
            if (v55 >= v41)
              v41 = v55;
            v56 = v41[1].f32[1];
          }
          else
          {
            v63 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v63)
              v63 = (float32x2_t *)v17;
            if (v63 >= v41)
              v41 = v63;
            v54 = 1.0;
            v56 = 1.0;
          }
          v11.i32[0] = interpolate_rgbaf_19467[4 * v49 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v47 >> 28) & 3) + 3];
          v46 = (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                      - (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v52[1].f32[0] - (float)(v52[1].f32[0] * v11.f32[0]))
                              + (float)(v41[1].f32[0] * v11.f32[0]))
                      * v12.f32[0]);
          v64 = vmla_n_f32(vmls_lane_f32(v45, v45, v11, 0), v53, v11.f32[0]);
          v45 = vmla_n_f32(vmls_lane_f32(v64, v64, v12, 0), vmla_n_f32(vmls_lane_f32(v53, v53, v11, 0), *v41, v11.f32[0]), v12.f32[0]);
          v43 = (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                      - (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v54 - (float)(v54 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_75;
      }
      v62 = (float32x2_t *)(v40 + ((uint64_t)((unint64_t)HIWORD(v47) << 56) >> 52));
      if (v17 < (unint64_t)v62)
        v62 = (float32x2_t *)v17;
      if (v62 >= v41)
        v41 = v62;
      v58 = *v41;
      v59 = v41[1].f32[0];
      v60 = 1.0;
      if (v80)
        v60 = v41[1].f32[1];
      v61 = &interpolate_rgbaf_19467[4 * ((v47 >> 28) & 3)];
    }
    LODWORD(a11) = v61[3];
    v45 = vmla_n_f32(vmls_lane_f32(v45, v45, *(float32x2_t *)&a11, 0), v58, *(float *)&a11);
    v46 = (float)(v46 - (float)(v46 * *(float *)&a11)) + (float)(v59 * *(float *)&a11);
    v43 = (float)(v43 - (float)(v43 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
  }
LABEL_75:
  v65 = 0;
  ++v16;
  v70 = v21;
  v66 = v21 - 1;
  a3 += v81;
  v67 = (unint64_t)result - a3;
  a2 += v82;
  v68 = v72 - a2;
  while (1)
  {
    result = RGBAF_13487(v16, v45.f32[0], v45.f32[1], v46, v43);
    *(_BYTE *)(v76 + 1 + v65) = v30 >> 22;
    v17 = v78;
    if (v66 == (_DWORD)v65)
      return result;
    if (((v67 | v68 | (a3 - v74) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v76 += v65 + 1;
      v44 = ~(_DWORD)v65 + v70;
      goto LABEL_35;
    }
    v40 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    v41 = *(float32x2_t **)(a1 + 32);
    if (v78 >= v40)
      v69 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    else
      v69 = v78;
    if (v69 < (unint64_t)v41)
      v69 = *(_QWORD *)(a1 + 32);
    if (v80)
      v43 = *(float *)(v69 + 12);
    else
      v43 = 1.0;
    v45 = *(float32x2_t *)v69;
    v46 = *(float *)(v69 + 8);
    if (v15)
    {
      v47 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        result = v75;
        v76 += v65 + 1;
        v21 = ~(_DWORD)v65 + v70;
        v30 = -1;
        goto LABEL_41;
      }
    }
    ++v16;
    ++v65;
    a3 += v81;
    v67 -= v81;
    a2 += v82;
    v68 -= v82;
    v30 = -1;
  }
}

unint64_t *RGBAF_13487(unint64_t *result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;

  if (a5 <= 0.0)
  {
    v8 = 0;
  }
  else
  {
    LODWORD(v5) = (int)(float)((float)(a5 * 65535.0) + 0.5);
    if (a5 <= 1.0)
      v5 = v5;
    else
      v5 = 0xFFFFLL;
    LOWORD(v6) = v5;
    if (a5 > 1.0)
      a5 = 1.0;
    LOWORD(v7) = v5;
    if (a2 <= a5)
    {
      if (a2 >= 0.0)
        v7 = (int)(float)((float)(a2 * 65535.0) + 0.5);
      else
        LOWORD(v7) = 0;
    }
    v9 = v5;
    if (a3 <= a5)
    {
      if (a3 >= 0.0)
        v9 = (int)(float)((float)(a3 * 65535.0) + 0.5);
      else
        v9 = 0;
    }
    if (a4 <= a5)
    {
      if (a4 >= 0.0)
        v6 = (int)(float)((float)(a4 * 65535.0) + 0.5);
      else
        LOWORD(v6) = 0;
    }
    v8 = (v5 << 48) | ((unint64_t)(unsigned __int16)v6 << 32) | (v9 << 16) | (unsigned __int16)v7;
  }
  *result = v8;
  return result;
}

_DWORD *rgba64_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unint64_t v8;
  char *v9;

  v8 = PIXELCONSTANT_13511(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F40;
    a2[6] = 0;
    *((_QWORD *)a2 + 6) = v8;
    *((_QWORD *)a2 + 2) = 1;
    if (v8 <= 0xFFFEFFFFFFFFFFFFLL)
      v9 = (char *)(a2 + 12);
    else
      v9 = 0;
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v9;
  }
  return a2;
}

uint64_t rgba64_mark(uint64_t a1, __n128 a2)
{
  unsigned int **v2;
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  unsigned int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint16x4_t *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint32x2_t v21;
  unint64_t v22;
  unint64_t v23;
  uint16x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint16x4_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  uint16x4_t *v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int v79;
  int v80;
  unint64_t v81;
  int32x2_t v82;
  uint32x2_t v83;
  uint32x2_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int8x8_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int v90;
  int v91;
  unint64_t v92;
  int32x2_t v93;
  uint32x2_t v94;
  uint32x2_t v95;
  int32x2_t v96;
  int32x2_t v97;
  int8x8_t v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int32x2_t v104;
  int v105;
  int v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  int32x2_t v110;
  uint32x2_t v111;
  uint32x2_t v112;
  int32x2_t v113;
  int32x2_t v114;
  uint32x2_t v115;
  int32x2_t v116;
  int v117;
  int v118;
  int32x2_t v119;
  int32x2_t v120;
  int32x2_t v121;
  int32x2_t v122;
  uint32x2_t v123;
  uint32x2_t v124;
  int32x2_t v125;
  int32x2_t v126;
  uint32x2_t v127;
  int v128;
  unint64_t *v129;
  unint64_t v130;
  int v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int64x2_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  int v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint16x4_t *v229;
  uint64_t v230;
  char *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  int32x2_t v250;
  __int32 v251;
  int32x2_t v252;
  uint32x2_t v253;
  int32x2_t v254;
  int32x2_t v255;
  uint32x2_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  int32x2_t v268;
  __int32 v269;
  int32x2_t v270;
  uint32x2_t v271;
  int32x2_t v272;
  int32x2_t v273;
  uint32x2_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  unint64_t v294;
  unint64_t v295;
  unsigned __int16 v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  int32x2_t v308;
  int32x2_t v309;
  int32x2_t v310;
  int32x2_t v311;
  int32x2_t v312;
  uint32x2_t v313;
  uint32x2_t v314;
  uint32x2_t v315;
  int32x2_t v316;
  int8x8_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  int32x2_t v328;
  int32x2_t v329;
  int32x2_t v330;
  int32x2_t v331;
  int32x2_t v332;
  uint32x2_t v333;
  uint32x2_t v334;
  uint32x2_t v335;
  int32x2_t v336;
  int8x8_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  int v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int8x16_t v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int64x2_t v378;
  int64x2_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  int v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  unsigned int v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  unsigned int v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  unsigned int v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  int v440;
  unsigned int v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  unsigned int v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  int v468;
  unsigned int v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  int v482;
  unsigned int v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  int v496;
  unsigned int v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  int v510;
  unsigned int v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  int v524;
  unsigned int v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  int v538;
  unsigned int v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int v552;
  unsigned int v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  int v566;
  unsigned int v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  int v580;
  unsigned int v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  unsigned int v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint8x8_t v607;
  int v608;
  uint64_t v609;
  int v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  int v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  char *v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  int v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  int v649;
  uint64_t v650;
  int v651;
  int v652;
  int v653;
  int v654;
  unint64_t v655;
  unsigned int v656;
  int v657;
  int v658;
  unint64_t v659;
  unint64_t v660;
  uint16x4_t *v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666[4];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  _DWORD v676[1024];
  uint64_t v677;

  v2 = (unsigned int **)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v3;
  v677 = *MEMORY[0x1E0C80C00];
  v6 = *v2;
  if (*(_DWORD *)(v3 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1)
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_10_12448);
    v7 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)v5;
  v9 = *(_QWORD *)(v5 + 96);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  v13 = *(unsigned int *)(v5 + 4);
  v14 = v13 - 1;
  if ((int)v13 < 1)
    return 0;
  v15 = *(_DWORD *)(v5 + 8);
  if (v15 < 1)
    return 0;
  v16 = *(uint16x4_t **)(v5 + 136);
  if ((v8 & 0xFF0000) == 0x50000 || !v16)
  {
    v643 = v5;
    v651 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
    if (BYTE1(v8) == 1)
    {
      if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
      {
        rgba16_template_image_mark_method(*v6, v5, v11);
        return 1;
      }
    }
    else if (BYTE1(v8) == 4)
    {
      v676[0] = *(_DWORD *)(v5 + 4);
      v666[0] = v15;
      v18 = *(int *)(v5 + 28);
      v19 = *(_QWORD *)(v5 + 40);
      v20 = (int *)v5;
      v21 = **(uint32x2_t **)(v5 + 88);
      v22 = HIWORD(*(_QWORD *)&v21);
      v652 = v18;
      v23 = v18 >> 3;
      v24 = (uint16x4_t *)(v19 + 8 * (v20[3] + (v18 >> 3) * v20[4]));
      v659 = v18 >> 3;
      v661 = v24;
      if (v16)
      {
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, 1, 1, 1, v20[26], v20[27], v13, v15);
        v26 = v25;
        if (v25)
          goto LABEL_317;
        return 1;
      }
      v664 = 0;
LABEL_58:
      v64 = v23 - (int)v13;
      v23 = v13;
      switch(v651)
      {
        case 0:
          v65 = v666[0];
          v66 = 8 * v13;
          goto LABEL_321;
        case 1:
          v67 = *(_QWORD *)(v643 + 88);
          if (v67)
          {
            CGSFillDRAM64(v24, v652 & 0xFFFFFFF8, 8 * v13, v666[0], v67, 8, 8, 1, 0, 0);
          }
          else
          {
            v66 = 8 * v13;
            v65 = v666[0];
LABEL_321:
            CGBlt_fillBytes(v66, v65, 0, (char *)v24, v652 & 0xFFFFFFF8);
          }
          goto LABEL_149;
        case 2:
          v68 = v13 >> 2;
          v658 = v13 & 3;
          v69 = v666[0];
          v656 = v68 + 1;
          do
          {
            v70 = v23;
            if ((int)v23 >= 4)
            {
              v71 = v656;
              do
              {
                rgba64_DplusDM(v24, *(_QWORD *)&v21, (unint64_t)*v24, (unsigned __int16)~v21.i16[3]);
                rgba64_DplusDM(v24 + 1, *(_QWORD *)&v21, *(_QWORD *)&v24[1], (unsigned __int16)~v21.i16[3]);
                rgba64_DplusDM(v24 + 2, *(_QWORD *)&v21, *(_QWORD *)&v24[2], (unsigned __int16)~v21.i16[3]);
                v73 = (unint64_t)v24[3];
                v72 = v24 + 3;
                rgba64_DplusDM(v72, *(_QWORD *)&v21, v73, (unsigned __int16)~v21.i16[3]);
                v24 = v72 + 1;
                --v71;
              }
              while (v71 > 1);
              v70 = v658;
            }
            if (v70 < 1)
            {
              v75 = (unint64_t *)v24;
            }
            else
            {
              v74 = v70 + 1;
              v75 = (unint64_t *)v24;
              do
              {
                v76 = *v75++;
                rgba64_DplusDM(v24, *(_QWORD *)&v21, v76, (unsigned __int16)~v21.i16[3]);
                --v74;
                v24 = (uint16x4_t *)v75;
              }
              while (v74 > 1);
            }
            v24 = (uint16x4_t *)&v75[v64];
            --v69;
          }
          while (v69);
          goto LABEL_148;
        case 3:
          v77.i32[0] = vshr_n_u32(v21, 0x10uLL).u32[0];
          v77.i32[1] = v21.u16[2];
          v78.i32[0] = v21.u16[0];
          v79 = v666[0];
          v23 = v659;
          do
          {
            v80 = v13;
            do
            {
              v81 = HIWORD(*(unint64_t *)v24);
              if ((_DWORD)v81 == 0xFFFF)
              {
                *v24 = (uint16x4_t)v21;
              }
              else if ((_DWORD)v81)
              {
                v82 = vdup_n_s32(v81 ^ 0xFFFF);
                v83 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v77, v82);
                v78.i32[1] = HIWORD(*(_QWORD *)&v21);
                v84 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v78, v82);
                v85 = vsub_s32((int32x2_t)__PAIR64__(v21.u32[1], v77.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v83, v83, 0x10uLL), 0x10uLL));
                v86 = vsub_s32((int32x2_t)__PAIR64__(v22, v21.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v84, v84, 0x10uLL), 0x10uLL));
                v87 = (int8x8_t)vshl_n_s32(v86, 0x10uLL);
                v86.i16[1] = 0;
                v86.i32[1] = v87.i32[1];
                v87.i32[0] = vshl_n_s32(v85, 0x10uLL).u32[0];
                v87.i32[1] = v85.u16[2];
                *v24 = (uint16x4_t)vorr_s8(v87, (int8x8_t)v86);
              }
              else
              {
                *v24 = 0;
              }
              ++v24;
              --v80;
            }
            while (v80);
            v24 += v64;
            --v79;
          }
          while (v79);
          goto LABEL_314;
        case 4:
          v88.i32[0] = vshr_n_u32(v21, 0x10uLL).u32[0];
          v88.i32[1] = v21.u16[2];
          v89.i32[0] = v21.u16[0];
          v90 = v666[0];
          v23 = v659;
          do
          {
            v91 = v13;
            do
            {
              v92 = HIWORD(*(unint64_t *)v24);
              if ((_DWORD)v92)
              {
                if (v92 != 0xFFFF)
                {
                  v93 = vdup_n_s32(v92);
                  v94 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v88, v93);
                  v89.i32[1] = HIWORD(*(_QWORD *)&v21);
                  v95 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v89, v93);
                  v96 = vsub_s32((int32x2_t)__PAIR64__(v21.u32[1], v88.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v94, v94, 0x10uLL), 0x10uLL));
                  v97 = vsub_s32((int32x2_t)__PAIR64__(v22, v21.u32[0]), (int32x2_t)vshr_n_u32(vsra_n_u32(v95, v95, 0x10uLL), 0x10uLL));
                  v98 = (int8x8_t)vshl_n_s32(v97, 0x10uLL);
                  v97.i16[1] = 0;
                  v97.i32[1] = v98.i32[1];
                  v98.i32[0] = vshl_n_s32(v96, 0x10uLL).u32[0];
                  v98.i32[1] = v96.u16[2];
                  *v24 = (uint16x4_t)vorr_s8(v98, (int8x8_t)v97);
                }
                else
                {
                  *v24 = 0;
                }
              }
              else
              {
                *v24 = (uint16x4_t)v21;
              }
              ++v24;
              --v91;
            }
            while (v91);
            v24 += v64;
            --v90;
          }
          while (v90);
          goto LABEL_314;
        case 5:
          v99 = v666[0];
          do
          {
            v100 = (unint64_t *)v24;
            do
            {
              v101 = *v100++;
              rgba64_DMplusDM(v24, *(_QWORD *)&v21, HIWORD(v101), v101, (unsigned __int16)~v21.i16[3]);
              v24 = (uint16x4_t *)v100;
              LODWORD(v13) = v13 - 1;
            }
            while ((_DWORD)v13);
            v24 = (uint16x4_t *)&v100[v64];
            --v99;
            LODWORD(v13) = v23;
          }
          while (v99);
          goto LABEL_148;
        case 6:
          v102 = v666[0];
          while (1)
          {
            v103 = HIWORD(*(unint64_t *)v24);
            if ((_WORD)v103 != 0xFFFF)
            {
              if ((unsigned __int16)~(_WORD)v103 == 0xFFFF)
                *v24 = (uint16x4_t)v21;
              else
                rgba64_DplusDM(v24, (uint64_t)*v24, *(_QWORD *)&v21, (unsigned __int16)~(_WORD)v103);
            }
            ++v24;
            LODWORD(v13) = v13 - 1;
            if (!(_DWORD)v13)
            {
              v24 += v64;
              --v102;
              LODWORD(v13) = v23;
              if (!v102)
                break;
            }
          }
          goto LABEL_148;
        case 7:
          v104 = vdup_n_s32((unsigned __int16)~v21.i16[3]);
          v105 = v666[0];
          v23 = v659;
          do
          {
            v106 = v13;
            do
            {
              v107 = (int32x2_t)*v24;
              v108.i32[0] = vshl_u32((uint32x2_t)*v24, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v109.i32[0] = v108.i32[0];
              v109.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v24);
              v110.i32[0] = v24->u16[0];
              v110.i32[1] = HIWORD(*(unint64_t *)v24);
              v111 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v109, v104);
              v112 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v110, v104);
              v108.i32[1] = HIDWORD(*(unint64_t *)v24);
              v107.i32[1] = v110.i32[1];
              v113 = vsub_s32(v107, (int32x2_t)vshr_n_u32(vsra_n_u32(v112, v112, 0x10uLL), 0x10uLL));
              v114 = vshl_n_s32(v113, 0x10uLL);
              v113.i16[1] = 0;
              v115 = (uint32x2_t)vsub_s32(v108, (int32x2_t)vshr_n_u32(vsra_n_u32(v111, v111, 0x10uLL), 0x10uLL));
              v113.i32[1] = v114.i32[1];
              v110.i32[0] = vshl_u32(v115, (uint32x2_t)0xFFFF00000010).u32[0];
              v110.i32[1] = v115.u16[2];
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)v110, (int8x8_t)v113);
              --v106;
            }
            while (v106);
            v24 += v64;
            --v105;
          }
          while (v105);
          goto LABEL_314;
        case 8:
          v116 = vdup_n_s32(v22);
          v117 = v666[0];
          v23 = v659;
          do
          {
            v118 = v13;
            do
            {
              v119 = (int32x2_t)*v24;
              v120.i32[0] = vshl_u32((uint32x2_t)*v24, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v121.i32[0] = v120.i32[0];
              v121.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v24);
              v122.i32[0] = v24->u16[0];
              v122.i32[1] = HIWORD(*(unint64_t *)v24);
              v123 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v121, v116);
              v124 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v122, v116);
              v120.i32[1] = HIDWORD(*(unint64_t *)v24);
              v119.i32[1] = v122.i32[1];
              v125 = vsub_s32(v119, (int32x2_t)vshr_n_u32(vsra_n_u32(v124, v124, 0x10uLL), 0x10uLL));
              v126 = vshl_n_s32(v125, 0x10uLL);
              v125.i16[1] = 0;
              v127 = (uint32x2_t)vsub_s32(v120, (int32x2_t)vshr_n_u32(vsra_n_u32(v123, v123, 0x10uLL), 0x10uLL));
              v125.i32[1] = v126.i32[1];
              v122.i32[0] = vshl_u32(v127, (uint32x2_t)0xFFFF00000010).u32[0];
              v122.i32[1] = v127.u16[2];
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)v122, (int8x8_t)v125);
              --v118;
            }
            while (v118);
            v24 += v64;
            --v117;
          }
          while (v117);
          goto LABEL_314;
        case 9:
          v128 = v666[0];
          do
          {
            v129 = (unint64_t *)v24;
            do
            {
              v130 = *v129++;
              rgba64_DMplusDM(v24, *(_QWORD *)&v21, HIWORD(v130) ^ 0xFFFF, v130, HIWORD(*(_QWORD *)&v21));
              v24 = (uint16x4_t *)v129;
              LODWORD(v13) = v13 - 1;
            }
            while ((_DWORD)v13);
            v24 = (uint16x4_t *)&v129[v64];
            --v128;
            LODWORD(v13) = v23;
          }
          while (v128);
          goto LABEL_148;
        case 10:
          v131 = v666[0];
          do
          {
            v132 = (unint64_t *)v24;
            do
            {
              v133 = *v132++;
              rgba64_DMplusDM(v24, *(_QWORD *)&v21, HIWORD(v133) ^ 0xFFFF, v133, (unsigned __int16)~v21.i16[3]);
              v24 = (uint16x4_t *)v132;
              LODWORD(v13) = v13 - 1;
            }
            while ((_DWORD)v13);
            v24 = (uint16x4_t *)&v132[v64];
            --v131;
            LODWORD(v13) = v23;
          }
          while (v131);
          goto LABEL_148;
        case 11:
          v134 = v22 - v21.u16[1];
          if (v22 < v21.u16[1])
            v134 = 0;
          *(uint32x2_t *)v135.i8 = v21;
          v135.i64[1] = HIDWORD(*(_QWORD *)&v21);
          v136.i64[0] = 0xFFFFLL;
          v136.i64[1] = 0xFFFFLL;
          v137 = (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v22), (uint64x2_t)vandq_s8(v135, v136));
          v138 = v666[0];
          v23 = v659;
          do
          {
            v139 = v13;
            do
            {
              v140 = HIWORD(*(unint64_t *)v24);
              v141 = *(unint64_t *)v24 >> 16;
              if (!v10)
                v140 = 0xFFFFLL;
              v142 = v140 >= (unsigned __int16)v141;
              v143 = v140 - (unsigned __int16)v141;
              if (!v142)
                v143 = 0;
              v144 = v134 + v143;
              v145 = v22 + v140;
              if (v144 >= 0xFFFF)
                v144 = 0xFFFFLL;
              if (v145 >= 0xFFFF)
                v145 = 0xFFFFLL;
              v142 = v145 >= v144;
              v146 = v145 - v144;
              if (!v142)
                v146 = 0;
              *(uint16x4_t *)v147.i8 = *v24;
              v147.i64[1] = HIDWORD(*(unint64_t *)v24);
              v148 = (int8x16_t)vaddq_s64(v137, (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v140), (uint64x2_t)vandq_s8(v147, v136)));
              v149 = vdupq_n_s64(v145);
              v150 = (int64x2_t)vqsubq_u64((uint64x2_t)v149, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v136, (uint64x2_t)v148), v148, v136));
              v149.i64[0] = v146;
              *v24++ = (uint16x4_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v149), 0x10uLL), (int8x8_t)vmovn_s64(v150));
              --v139;
            }
            while (v139);
            v24 += v64;
            --v138;
          }
          while (v138);
          goto LABEL_314;
        case 12:
          v151 = v666[0];
          do
          {
            v152 = (unint64_t *)v24;
            do
            {
              v153 = *v152++;
              rgba64_DpluslD(v24, v153, *(_QWORD *)&v21);
              v24 = (uint16x4_t *)v152;
              LODWORD(v13) = v13 - 1;
            }
            while ((_DWORD)v13);
            v24 = (uint16x4_t *)&v152[v64];
            --v151;
            LODWORD(v13) = v23;
          }
          while (v151);
LABEL_148:
          v666[0] = 0;
LABEL_149:
          v23 = v659;
          goto LABEL_315;
        case 13:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v154 = v666[0];
          while (1)
          {
            v155 = v13;
            do
            {
              v156 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v157) = 0xFFFF;
LABEL_157:
                v158 = PDAmultiplyPDA_13494(v156, v157, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_158;
              }
              v157 = HIWORD(v156);
              v158 = (unint64_t)v21;
              if (HIWORD(v156))
                goto LABEL_157;
LABEL_158:
              *v24++ = (uint16x4_t)v158;
              --v155;
            }
            while (v155);
            v24 += v64;
            if (!--v154)
              goto LABEL_314;
          }
        case 14:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v159 = v666[0];
          while (1)
          {
            v160 = v13;
            do
            {
              v161 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v162) = 0xFFFF;
LABEL_168:
                v163 = PDAscreenPDA_13495(v161, v162, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_169;
              }
              v162 = HIWORD(v161);
              v163 = (unint64_t)v21;
              if (HIWORD(v161))
                goto LABEL_168;
LABEL_169:
              *v24++ = (uint16x4_t)v163;
              --v160;
            }
            while (v160);
            v24 += v64;
            if (!--v159)
              goto LABEL_314;
          }
        case 15:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v164 = v666[0];
          while (1)
          {
            v165 = v13;
            do
            {
              v166 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v167) = 0xFFFF;
LABEL_179:
                v168 = PDAoverlayPDA_13496(v166, v167, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_180;
              }
              v167 = HIWORD(v166);
              v168 = (unint64_t)v21;
              if (HIWORD(v166))
                goto LABEL_179;
LABEL_180:
              *v24++ = (uint16x4_t)v168;
              --v165;
            }
            while (v165);
            v24 += v64;
            if (!--v164)
              goto LABEL_314;
          }
        case 16:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v169 = v666[0];
          while (1)
          {
            v170 = v13;
            do
            {
              v171 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v172) = 0xFFFF;
LABEL_190:
                v173 = PDAdarkenPDA_13498(v171, v172, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_191;
              }
              v172 = HIWORD(v171);
              v173 = (unint64_t)v21;
              if (HIWORD(v171))
                goto LABEL_190;
LABEL_191:
              *v24++ = (uint16x4_t)v173;
              --v170;
            }
            while (v170);
            v24 += v64;
            if (!--v169)
              goto LABEL_314;
          }
        case 17:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v174 = v666[0];
          while (1)
          {
            v175 = v13;
            do
            {
              v176 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v177) = 0xFFFF;
LABEL_201:
                v178 = PDAlightenPDA_13497(v176, v177, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_202;
              }
              v177 = HIWORD(v176);
              v178 = (unint64_t)v21;
              if (HIWORD(v176))
                goto LABEL_201;
LABEL_202:
              *v24++ = (uint16x4_t)v178;
              --v175;
            }
            while (v175);
            v24 += v64;
            if (!--v174)
              goto LABEL_314;
          }
        case 18:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v179 = v666[0];
          while (1)
          {
            v180 = v13;
            do
            {
              v181 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v182) = 0xFFFF;
LABEL_212:
                v183 = PDAcolordodgePDA_13499(v181, v182, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_213;
              }
              v182 = HIWORD(v181);
              v183 = (unint64_t)v21;
              if (HIWORD(v181))
                goto LABEL_212;
LABEL_213:
              *v24++ = (uint16x4_t)v183;
              --v180;
            }
            while (v180);
            v24 += v64;
            if (!--v179)
              goto LABEL_314;
          }
        case 19:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v184 = v666[0];
          while (1)
          {
            v185 = v13;
            do
            {
              v186 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v187) = 0xFFFF;
LABEL_223:
                v188 = PDAcolorburnPDA_13500(v186, v187, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_224;
              }
              v187 = HIWORD(v186);
              v188 = (unint64_t)v21;
              if (HIWORD(v186))
                goto LABEL_223;
LABEL_224:
              *v24++ = (uint16x4_t)v188;
              --v185;
            }
            while (v185);
            v24 += v64;
            if (!--v184)
              goto LABEL_314;
          }
        case 20:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v189 = v666[0];
          while (1)
          {
            v190 = v13;
            do
            {
              v191 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v192) = 0xFFFF;
LABEL_234:
                v193 = PDAsoftlightPDA_13502(v191, v192, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_235;
              }
              v192 = HIWORD(v191);
              v193 = (unint64_t)v21;
              if (HIWORD(v191))
                goto LABEL_234;
LABEL_235:
              *v24++ = (uint16x4_t)v193;
              --v190;
            }
            while (v190);
            v24 += v64;
            if (!--v189)
              goto LABEL_314;
          }
        case 21:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v194 = v666[0];
          while (1)
          {
            v195 = v13;
            do
            {
              v196 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v197) = 0xFFFF;
LABEL_245:
                v198 = PDAhardlightPDA_13501(v196, v197, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_246;
              }
              v197 = HIWORD(v196);
              v198 = (unint64_t)v21;
              if (HIWORD(v196))
                goto LABEL_245;
LABEL_246:
              *v24++ = (uint16x4_t)v198;
              --v195;
            }
            while (v195);
            v24 += v64;
            if (!--v194)
              goto LABEL_314;
          }
        case 22:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v199 = v666[0];
          while (1)
          {
            v200 = v13;
            do
            {
              v201 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v202) = 0xFFFF;
LABEL_256:
                v203 = PDAdifferencePDA_13503(v201, v202, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_257;
              }
              v202 = HIWORD(v201);
              v203 = (unint64_t)v21;
              if (HIWORD(v201))
                goto LABEL_256;
LABEL_257:
              *v24++ = (uint16x4_t)v203;
              --v200;
            }
            while (v200);
            v24 += v64;
            if (!--v199)
              goto LABEL_314;
          }
        case 23:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v204 = v666[0];
          while (1)
          {
            v205 = v13;
            do
            {
              v206 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v207) = 0xFFFF;
LABEL_267:
                v208 = PDAexclusionPDA_13504(v206, v207, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_268;
              }
              v207 = HIWORD(v206);
              v208 = (unint64_t)v21;
              if (HIWORD(v206))
                goto LABEL_267;
LABEL_268:
              *v24++ = (uint16x4_t)v208;
              --v205;
            }
            while (v205);
            v24 += v64;
            if (!--v204)
              goto LABEL_314;
          }
        case 24:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v209 = v666[0];
          while (1)
          {
            v210 = v13;
            do
            {
              v211 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v212) = 0xFFFF;
LABEL_278:
                v213 = PDAhuePDA_13505(v211, v212, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_279;
              }
              v212 = HIWORD(v211);
              v213 = (unint64_t)v21;
              if (HIWORD(v211))
                goto LABEL_278;
LABEL_279:
              *v24++ = (uint16x4_t)v213;
              --v210;
            }
            while (v210);
            v24 += v64;
            if (!--v209)
              goto LABEL_314;
          }
        case 25:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v214 = v666[0];
          while (1)
          {
            v215 = v13;
            do
            {
              v216 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v217) = 0xFFFF;
LABEL_289:
                v218 = PDAsaturationPDA_13506(v216, v217, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
                goto LABEL_290;
              }
              v217 = HIWORD(v216);
              v218 = (unint64_t)v21;
              if (HIWORD(v216))
                goto LABEL_289;
LABEL_290:
              *v24++ = (uint16x4_t)v218;
              --v215;
            }
            while (v215);
            v24 += v64;
            if (!--v214)
              goto LABEL_314;
          }
        case 26:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v219 = v666[0];
          while (1)
          {
            v220 = v13;
            do
            {
              v221 = (unint64_t)*v24;
              if (!v10)
              {
                LODWORD(v222) = 0xFFFF;
LABEL_300:
                v223 = PDAluminosityPDA_13507(*(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21), v221, v222);
                goto LABEL_301;
              }
              v222 = HIWORD(v221);
              v223 = (unint64_t)v21;
              if (HIWORD(v221))
                goto LABEL_300;
LABEL_301:
              *v24++ = (uint16x4_t)v223;
              --v220;
            }
            while (v220);
            v24 += v64;
            if (!--v219)
              goto LABEL_314;
          }
        case 27:
          v23 = v659;
          if (!(_DWORD)v22)
            goto LABEL_315;
          v224 = v666[0];
          break;
        default:
          goto LABEL_315;
      }
LABEL_306:
      v225 = v13;
      while (1)
      {
        v226 = (unint64_t)*v24;
        if (v10)
        {
          v227 = HIWORD(v226);
          v228 = (unint64_t)v21;
          if (!HIWORD(v226))
            goto LABEL_312;
        }
        else
        {
          LODWORD(v227) = 0xFFFF;
        }
        v228 = PDAluminosityPDA_13507(v226, v227, *(_QWORD *)&v21, HIWORD(*(_QWORD *)&v21));
LABEL_312:
        *v24++ = (uint16x4_t)v228;
        if (!--v225)
        {
          v24 += v64;
          if (!--v224)
          {
LABEL_314:
            v666[0] = 0;
LABEL_315:
            v24 = v661;
            v26 = v664;
            if (!v664)
              return 1;
            v665 = 0;
LABEL_317:
            if (!shape_enum_clip_next(v26, (int *)&v665 + 1, &v665, v676, v666))
            {
              v55 = (void *)v26;
              goto LABEL_993;
            }
            v664 = v26;
            v24 += v23 * (int)v665 + SHIDWORD(v665);
            v13 = v676[0];
            goto LABEL_58;
          }
          goto LABEL_306;
        }
      }
    }
    v676[0] = *(_DWORD *)(v5 + 4);
    v666[0] = v15;
    v34 = *(_QWORD *)(v5 + 40);
    v35 = *(_QWORD *)(v5 + 88);
    v37 = *(int *)(v5 + 12);
    v36 = *(int *)(v5 + 16);
    v38 = (_DWORD *)v5;
    v39 = (unint64_t)*(int *)(v5 + 28) >> 3;
    v40 = v34 + 8 * (v37 + v39 * v36);
    v41 = v38[14];
    v42 = v38[15];
    v43 = v8 & 0xFF00;
    v44 = (int)v38[19];
    if (v43 != 256)
    {
      v45 = v38[16];
      v649 = v38[17];
      v660 = v35 + 8 * (v44 >> 3) * v649;
      v48 = v9 != 0;
      if (v16)
      {
        v662 = v44 >> 3;
        v663 = v35;
        v641 = v38[15];
        v642 = v38[14];
        v47 = 1;
        v49 = v35;
LABEL_54:
        v644 = v47;
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, v47, v39, 1, v38[26], v38[27], v13, v15);
        v63 = v62;
        if (!v62)
          return 1;
        while (2)
        {
          if (!shape_enum_clip_next(v63, (int *)&v665 + 1, &v665, v676, v666))
          {
            v55 = (void *)v63;
LABEL_993:
            free(v55);
            return 1;
          }
          v650 = v63;
          if (v660)
          {
            v59 = (uint16x4_t *)(v40 + 8 * v39 * (int)v665 + 8 * SHIDWORD(v665));
            v635 = v35 + 8 * v662 * (((int)v665 + *(_DWORD *)(v643 + 60)) % v649);
            v58 = v635 + 8 * ((HIDWORD(v665) + *(_DWORD *)(v643 + 56)) % (int)v45);
            v49 = v635 + 8 * (int)v45;
            v663 = v58;
            v657 = v676[0];
            v636 = v676[0];
            v641 = ((int)v665 + *(_DWORD *)(v643 + 60)) % v649;
            v642 = (HIDWORD(v665) + *(_DWORD *)(v643 + 56)) % (int)v45;
          }
          else
          {
            v657 = v676[0];
            v636 = v676[0] * v644;
            v59 = (uint16x4_t *)(v40 + 8 * v39 * (int)v665 + 8 * HIDWORD(v665) * v644);
            v58 = v35 + 8 * (int)v665 * (int)v45 + 8 * HIDWORD(v665) * v644;
            v662 = (int)v45 - v676[0] * v644;
          }
          v655 = v39 - v636;
LABEL_322:
          switch(v11)
          {
            case 0:
              v229 = &v59[-v657 + 1];
              v230 = v655 + v657;
              if (v644 < 0)
                v230 = v655 - v657;
              else
                v229 = v59;
              v231 = (char *)&v229[(v230 * (v666[0] - 1)) & (v230 >> 63)];
              if (v230 < 0)
                v230 = -v230;
              CGBlt_fillBytes(8 * v657, v666[0], 0, v231, 8 * v230);
              goto LABEL_985;
            case 1:
              v232 = *(unsigned __int8 *)(v643 + 1);
              if (v232 == 2)
              {
                if (v657 < 4
                  || (8 * v45) > 0x40
                  || (v4.i32[0] = 8 * v45, v607 = (uint8x8_t)vcnt_s8(v4),
                                           v607.i16[0] = vaddlv_u8(v607),
                                           v607.i32[0] > 1u))
                {
LABEL_938:
                  v608 = v666[0];
                  v609 = 8 * v644;
                  if (v10 == 0 || v48)
                  {
                    do
                    {
                      v610 = v657;
                      do
                      {
                        *v59 = *(uint16x4_t *)v58;
                        v611 = v58 + 8 * v644;
                        if (v611 >= v49)
                          v612 = -(uint64_t)(int)v45;
                        else
                          v612 = 0;
                        v58 = v611 + 8 * v612;
                        v59 = (uint16x4_t *)((char *)v59 + v609);
                        --v610;
                      }
                      while (v610);
                      v59 += v655;
                      v613 = v663;
                      v614 = v663 + 8 * v662;
                      if (v614 >= v660)
                        v615 = -(uint64_t)(v662 * v649);
                      else
                        v615 = 0;
                      v616 = v614 + 8 * v615;
                      v617 = v49 + 8 * v615 + 8 * v662;
                      if (v660)
                      {
                        v49 = v617;
                        v613 = v616;
                      }
                      v663 = v613;
                      if (v660)
                        v58 = v616;
                      else
                        v58 += 8 * v662;
                      --v608;
                    }
                    while (v608);
                  }
                  else
                  {
                    do
                    {
                      v618 = v657;
                      do
                      {
                        *v59 = (uint16x4_t)(*(_QWORD *)v58 | 0xFFFF000000000000);
                        v619 = v58 + 8 * v644;
                        if (v619 >= v49)
                          v620 = -(uint64_t)(int)v45;
                        else
                          v620 = 0;
                        v58 = v619 + 8 * v620;
                        v59 = (uint16x4_t *)((char *)v59 + v609);
                        --v618;
                      }
                      while (v618);
                      v59 += v655;
                      v621 = v663;
                      v622 = v663 + 8 * v662;
                      if (v622 >= v660)
                        v623 = -(uint64_t)(v662 * v649);
                      else
                        v623 = 0;
                      v624 = v622 + 8 * v623;
                      v625 = v49 + 8 * v623 + 8 * v662;
                      if (v660)
                      {
                        v49 = v625;
                        v621 = v624;
                      }
                      v663 = v621;
                      if (v660)
                        v58 = v624;
                      else
                        v58 += 8 * v662;
                      --v608;
                    }
                    while (v608);
                  }
                  goto LABEL_984;
                }
                CGSFillDRAM64(v59, 8 * (v657 + v655), 8 * v657, v666[0], v35, 8 * v662, 8 * v45, v649, 8 * v642, v641);
              }
              else
              {
                if (v232 != 1)
                  goto LABEL_938;
                if (v10 != 0 && !v48)
                {
                  v626 = v666[0];
                  do
                  {
                    v627 = v657;
                    do
                    {
                      *v59 = (uint16x4_t)(*(_QWORD *)v58 | 0xFFFF000000000000);
                      v628 = v58 + 8 * v644;
                      if (v628 >= v49)
                        v629 = -(uint64_t)(int)v45;
                      else
                        v629 = 0;
                      v58 = v628 + 8 * v629;
                      v59 += v644;
                      --v627;
                    }
                    while (v627);
                    v59 += v655;
                    v630 = v663;
                    v631 = v663 + 8 * v662;
                    if (v631 >= v660)
                      v632 = -(uint64_t)(v662 * v649);
                    else
                      v632 = 0;
                    v633 = v631 + 8 * v632;
                    v634 = v49 + 8 * v632 + 8 * v662;
                    if (v660)
                    {
                      v49 = v634;
                      v630 = v633;
                    }
                    v663 = v630;
                    if (v660)
                      v58 = v633;
                    else
                      v58 += 8 * v662;
                    --v626;
                  }
                  while (v626);
                  goto LABEL_984;
                }
                if (v644 < 0)
                {
                  v233 = v662 - v657;
                  v58 -= 8 * (v657 - 1);
                  v234 = v655 - v657;
                  v59 += -v657 + 1;
                }
                else
                {
                  v233 = v662 + v657;
                  v234 = v655 + v657;
                }
                v637 = v666[0] - 1;
                v638 = (char *)(v58 + 8 * ((v233 * v637) & (v233 >> 63)));
                if (v233 >= 0)
                  v639 = v233;
                else
                  v639 = -v233;
                if (v234 >= 0)
                  LODWORD(v640) = v234;
                else
                  v640 = -v234;
                v662 = v639;
                CGBlt_copyBytes(8 * v657, v666[0], v638, (char *)&v59[(v234 * v637) & (v234 >> 63)], 8 * v639, 8 * v640);
              }
LABEL_985:
              v63 = v650;
              if (!v650)
                return 1;
              v665 = 0;
              continue;
            case 2:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v235 = v666[0];
              do
              {
                v653 = v235;
                v236 = v657;
                do
                {
                  v237 = *(_QWORD *)v58;
                  v238 = HIWORD(*(_QWORD *)v58);
                  if ((_DWORD)v238)
                  {
                    if ((_DWORD)v238 == 0xFFFF)
                      *v59 = (uint16x4_t)v237;
                    else
                      rgba64_DplusDM(v59, v237, (unint64_t)*v59, v238 ^ 0xFFFF);
                  }
                  v239 = v58 + 8 * v644;
                  if (v239 >= v49)
                    v240 = -(uint64_t)(int)v45;
                  else
                    v240 = 0;
                  v58 = v239 + 8 * v240;
                  v59 += v644;
                  --v236;
                }
                while (v236);
                v59 += v655;
                v241 = v663;
                v242 = v663 + 8 * v662;
                v243 = -(uint64_t)(v662 * v649);
                if (v242 < v660)
                  v243 = 0;
                v244 = v242 + 8 * v243;
                v245 = v49 + 8 * v243 + 8 * v662;
                if (v660)
                {
                  v49 = v245;
                  v241 = v244;
                }
                v663 = v241;
                if (v660)
                  v58 = v244;
                else
                  v58 += 8 * v662;
                v235 = v653 - 1;
              }
              while (v653 != 1);
              goto LABEL_933;
            case 3:
              v246 = v666[0];
              do
              {
                v247 = v657;
                do
                {
                  v248 = HIWORD(*(unint64_t *)v59);
                  if ((_DWORD)v248 == 0xFFFF)
                  {
                    v249 = *(_QWORD *)v58 & 0xFFFF000000000000;
                    if (!v48)
                      v249 = 0xFFFF000000000000;
                    *v59 = (uint16x4_t)(v249 & 0xFFFF000000000000 | *(_QWORD *)v58 & 0xFFFFFFFFFFFFLL);
                  }
                  else if ((_DWORD)v248)
                  {
                    v250 = *(int32x2_t *)v58;
                    if (v48)
                      v251 = HIWORD(*(_QWORD *)v58);
                    else
                      v251 = 0xFFFF;
                    v252 = vdup_n_s32(v248 ^ 0xFFFF);
                    v253 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8((int8x8_t)v250, (int8x8_t)0xFFFF0000FFFFLL), v252);
                    v254 = vsub_s32(v250, (int32x2_t)vshr_n_u32(vsra_n_u32(v253, v253, 0x10uLL), 0x10uLL));
                    v255.i32[0] = HIWORD(v250.i32[0]);
                    v255.i32[1] = v251;
                    v256 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v255, v252);
                    *v59 = (uint16x4_t)vsli_n_s32(v254, vsub_s32(v255, (int32x2_t)vshr_n_u32(vsra_n_u32(v256, v256, 0x10uLL), 0x10uLL)), 0x10uLL);
                  }
                  else
                  {
                    *v59 = 0;
                  }
                  v257 = v58 + 8 * v644;
                  if (v257 >= v49)
                    v258 = -(uint64_t)(int)v45;
                  else
                    v258 = 0;
                  v58 = v257 + 8 * v258;
                  v59 += v644;
                  --v247;
                }
                while (v247);
                v59 += v655;
                v259 = v663;
                v260 = v663 + 8 * v662;
                if (v260 >= v660)
                  v261 = -(uint64_t)(v662 * v649);
                else
                  v261 = 0;
                v262 = v260 + 8 * v261;
                v263 = v49 + 8 * v261 + 8 * v662;
                if (v660)
                {
                  v49 = v263;
                  v259 = v262;
                }
                v663 = v259;
                if (v660)
                  v58 = v262;
                else
                  v58 += 8 * v662;
                --v246;
              }
              while (v246);
              goto LABEL_984;
            case 4:
              v264 = v666[0];
              do
              {
                v265 = v657;
                do
                {
                  v266 = HIWORD(*(unint64_t *)v59);
                  if ((_DWORD)v266)
                  {
                    if (v266 != 0xFFFF)
                    {
                      v268 = *(int32x2_t *)v58;
                      if (v48)
                        v269 = HIWORD(*(_QWORD *)v58);
                      else
                        v269 = 0xFFFF;
                      v270 = vdup_n_s32(v266);
                      v271 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8((int8x8_t)v268, (int8x8_t)0xFFFF0000FFFFLL), v270);
                      v272 = vsub_s32(v268, (int32x2_t)vshr_n_u32(vsra_n_u32(v271, v271, 0x10uLL), 0x10uLL));
                      v273.i32[0] = HIWORD(v268.i32[0]);
                      v273.i32[1] = v269;
                      v274 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v273, v270);
                      *v59 = (uint16x4_t)vsli_n_s32(v272, vsub_s32(v273, (int32x2_t)vshr_n_u32(vsra_n_u32(v274, v274, 0x10uLL), 0x10uLL)), 0x10uLL);
                    }
                    else
                    {
                      *v59 = 0;
                    }
                  }
                  else
                  {
                    v267 = *(_QWORD *)v58 & 0xFFFF000000000000;
                    if (!v48)
                      v267 = 0xFFFF000000000000;
                    *v59 = (uint16x4_t)(v267 & 0xFFFF000000000000 | *(_QWORD *)v58 & 0xFFFFFFFFFFFFLL);
                  }
                  v275 = v58 + 8 * v644;
                  if (v275 >= v49)
                    v276 = -(uint64_t)(int)v45;
                  else
                    v276 = 0;
                  v58 = v275 + 8 * v276;
                  v59 += v644;
                  --v265;
                }
                while (v265);
                v59 += v655;
                v277 = v663;
                v278 = v663 + 8 * v662;
                if (v278 >= v660)
                  v279 = -(uint64_t)(v662 * v649);
                else
                  v279 = 0;
                v280 = v278 + 8 * v279;
                v281 = v49 + 8 * v279 + 8 * v662;
                if (v660)
                {
                  v49 = v281;
                  v277 = v280;
                }
                v663 = v277;
                if (v660)
                  v58 = v280;
                else
                  v58 += 8 * v662;
                --v264;
              }
              while (v264);
              goto LABEL_984;
            case 5:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v282 = v666[0];
              do
              {
                v283 = v657;
                do
                {
                  rgba64_DMplusDM(v59, *(_QWORD *)v58, HIWORD(*(unint64_t *)v59), (unint64_t)*v59, HIWORD(*(_QWORD *)v58) ^ 0xFFFF);
                  v284 = v58 + 8 * v644;
                  if (v284 >= v49)
                    v285 = -(uint64_t)(int)v45;
                  else
                    v285 = 0;
                  v58 = v284 + 8 * v285;
                  v59 += v644;
                  --v283;
                }
                while (v283);
                v286 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v287 = v663;
                v288 = v663 + 8 * v662;
                if (v288 < v660)
                  v286 = 0;
                v289 = v288 + 8 * v286;
                v290 = v49 + 8 * v286 + 8 * v662;
                if (v660)
                {
                  v49 = v290;
                  v287 = v289;
                }
                v663 = v287;
                if (v660)
                  v58 = v289;
                else
                  v58 += 8 * v662;
                --v282;
              }
              while (v282);
              goto LABEL_933;
            case 6:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v291 = -(uint64_t)(int)v45;
              v292 = v666[0];
              do
              {
                v654 = v292;
                v293 = v657;
                do
                {
                  v294 = HIWORD(*(unint64_t *)v59);
                  if ((_WORD)v294 != 0xFFFF)
                  {
                    if ((unsigned __int16)~(_WORD)v294 == 0xFFFF)
                    {
                      v295 = *(_QWORD *)v58 & 0xFFFF000000000000;
                      if (!v48)
                        v295 = 0xFFFF000000000000;
                      *v59 = (uint16x4_t)(v295 & 0xFFFF000000000000 | *(_QWORD *)v58 & 0xFFFFFFFFFFFFLL);
                    }
                    else
                    {
                      v296 = ~(_WORD)v294;
                      v297 = HIWORD(*(_QWORD *)v58);
                      if (!v48)
                        LOWORD(v297) = -1;
                      rgba64_DplusDAM(v59, (uint64_t)*v59, *(_QWORD *)v58, (unsigned __int16)v297, v296);
                    }
                  }
                  v298 = v58 + 8 * v644;
                  if (v298 >= v49)
                    v299 = v291;
                  else
                    v299 = 0;
                  v58 = v298 + 8 * v299;
                  v59 += v644;
                  --v293;
                }
                while (v293);
                v59 += v655;
                v300 = v663;
                v301 = v663 + 8 * v662;
                v302 = -(uint64_t)(v662 * v649);
                if (v301 < v660)
                  v302 = 0;
                v303 = v301 + 8 * v302;
                v304 = v49 + 8 * v302 + 8 * v662;
                if (v660)
                {
                  v49 = v304;
                  v300 = v303;
                }
                v663 = v300;
                if (v660)
                  v58 = v303;
                else
                  v58 += 8 * v662;
                v292 = v654 - 1;
              }
              while (v654 != 1);
              goto LABEL_933;
            case 7:
              v305 = v666[0];
              do
              {
                v306 = v657;
                do
                {
                  v307 = HIWORD(*(_QWORD *)v58);
                  if ((_DWORD)v307 != 0xFFFF)
                  {
                    if ((_DWORD)v307)
                    {
                      v308 = (int32x2_t)*v59;
                      v309.i32[0] = vshl_u32((uint32x2_t)*v59, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                      v310.i32[0] = v309.i32[0];
                      v310.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v59);
                      v311 = vdup_n_s32(v307 ^ 0xFFFF);
                      v312.i32[0] = v59->u16[0];
                      v312.i32[1] = HIWORD(*(unint64_t *)v59);
                      v313 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v310, v311);
                      v314 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v312, v311);
                      v309.i32[1] = HIDWORD(*(unint64_t *)v59);
                      v315 = (uint32x2_t)vsub_s32(v309, (int32x2_t)vshr_n_u32(vsra_n_u32(v313, v313, 0x10uLL), 0x10uLL));
                      v308.i32[1] = v312.i32[1];
                      v316 = vsub_s32(v308, (int32x2_t)vshr_n_u32(vsra_n_u32(v314, v314, 0x10uLL), 0x10uLL));
                      v317 = (int8x8_t)vshl_n_s32(v316, 0x10uLL);
                      v316.i16[1] = 0;
                      v316.i32[1] = v317.i32[1];
                      v317.i32[0] = vshl_u32(v315, (uint32x2_t)0xFFFF00000010).u32[0];
                      v317.i32[1] = v315.u16[2];
                      *v59 = (uint16x4_t)vorr_s8(v317, (int8x8_t)v316);
                    }
                    else
                    {
                      *v59 = 0;
                    }
                  }
                  v318 = v58 + 8 * v644;
                  if (v318 >= v49)
                    v319 = -(uint64_t)(int)v45;
                  else
                    v319 = 0;
                  v58 = v318 + 8 * v319;
                  v59 += v644;
                  --v306;
                }
                while (v306);
                v59 += v655;
                v320 = v663;
                v321 = v663 + 8 * v662;
                if (v321 >= v660)
                  v322 = -(uint64_t)(v662 * v649);
                else
                  v322 = 0;
                v323 = v321 + 8 * v322;
                v324 = v49 + 8 * v322 + 8 * v662;
                if (v660)
                {
                  v49 = v324;
                  v320 = v323;
                }
                v663 = v320;
                if (v660)
                  v58 = v323;
                else
                  v58 += 8 * v662;
                --v305;
              }
              while (v305);
              goto LABEL_984;
            case 8:
              v325 = v666[0];
              do
              {
                v326 = v657;
                do
                {
                  v327 = HIWORD(*(_QWORD *)v58);
                  if ((_DWORD)v327)
                  {
                    if (v327 != 0xFFFF)
                    {
                      v328 = (int32x2_t)*v59;
                      v329.i32[0] = vshl_u32((uint32x2_t)*v59, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                      v330.i32[0] = v329.i32[0];
                      v330.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v59);
                      v331 = vdup_n_s32(v327);
                      v332.i32[0] = v59->u16[0];
                      v332.i32[1] = HIWORD(*(unint64_t *)v59);
                      v333 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v330, v331);
                      v334 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v332, v331);
                      v329.i32[1] = HIDWORD(*(unint64_t *)v59);
                      v335 = (uint32x2_t)vsub_s32(v329, (int32x2_t)vshr_n_u32(vsra_n_u32(v333, v333, 0x10uLL), 0x10uLL));
                      v328.i32[1] = v332.i32[1];
                      v336 = vsub_s32(v328, (int32x2_t)vshr_n_u32(vsra_n_u32(v334, v334, 0x10uLL), 0x10uLL));
                      v337 = (int8x8_t)vshl_n_s32(v336, 0x10uLL);
                      v336.i16[1] = 0;
                      v336.i32[1] = v337.i32[1];
                      v337.i32[0] = vshl_u32(v335, (uint32x2_t)0xFFFF00000010).u32[0];
                      v337.i32[1] = v335.u16[2];
                      *v59 = (uint16x4_t)vorr_s8(v337, (int8x8_t)v336);
                    }
                    else
                    {
                      *v59 = 0;
                    }
                  }
                  v338 = v58 + 8 * v644;
                  if (v338 >= v49)
                    v339 = -(uint64_t)(int)v45;
                  else
                    v339 = 0;
                  v58 = v338 + 8 * v339;
                  v59 += v644;
                  --v326;
                }
                while (v326);
                v59 += v655;
                v340 = v663;
                v341 = v663 + 8 * v662;
                if (v341 >= v660)
                  v342 = -(uint64_t)(v662 * v649);
                else
                  v342 = 0;
                v343 = v341 + 8 * v342;
                v344 = v49 + 8 * v342 + 8 * v662;
                if (v660)
                {
                  v49 = v344;
                  v340 = v343;
                }
                v663 = v340;
                if (v660)
                  v58 = v343;
                else
                  v58 += 8 * v662;
                --v325;
              }
              while (v325);
              goto LABEL_984;
            case 9:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v345 = v666[0];
              do
              {
                v346 = v657;
                do
                {
                  rgba64_DMplusDM(v59, *(_QWORD *)v58, HIWORD(*(unint64_t *)v59) ^ 0xFFFF, (unint64_t)*v59, HIWORD(*(_QWORD *)v58));
                  v347 = v58 + 8 * v644;
                  if (v347 >= v49)
                    v348 = -(uint64_t)(int)v45;
                  else
                    v348 = 0;
                  v58 = v347 + 8 * v348;
                  v59 += v644;
                  --v346;
                }
                while (v346);
                v349 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v350 = v663;
                v351 = v663 + 8 * v662;
                if (v351 < v660)
                  v349 = 0;
                v352 = v351 + 8 * v349;
                v353 = v49 + 8 * v349 + 8 * v662;
                if (v660)
                {
                  v49 = v353;
                  v350 = v352;
                }
                v663 = v350;
                if (v660)
                  v58 = v352;
                else
                  v58 += 8 * v662;
                --v345;
              }
              while (v345);
              goto LABEL_933;
            case 10:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v354 = v666[0];
              do
              {
                v355 = v657;
                do
                {
                  rgba64_DMplusDM(v59, *(_QWORD *)v58, HIWORD(*(unint64_t *)v59) ^ 0xFFFF, (unint64_t)*v59, HIWORD(*(_QWORD *)v58) ^ 0xFFFF);
                  v356 = v58 + 8 * v644;
                  if (v356 >= v49)
                    v357 = -(uint64_t)(int)v45;
                  else
                    v357 = 0;
                  v58 = v356 + 8 * v357;
                  v59 += v644;
                  --v355;
                }
                while (v355);
                v358 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v359 = v663;
                v360 = v663 + 8 * v662;
                if (v360 < v660)
                  v358 = 0;
                v361 = v360 + 8 * v358;
                v362 = v49 + 8 * v358 + 8 * v662;
                if (v660)
                {
                  v49 = v362;
                  v359 = v361;
                }
                v663 = v359;
                if (v660)
                  v58 = v361;
                else
                  v58 += 8 * v662;
                --v354;
              }
              while (v354);
              goto LABEL_933;
            case 11:
              v363 = v666[0];
              v364.i64[0] = 0xFFFFLL;
              v364.i64[1] = 0xFFFFLL;
              do
              {
                v365 = v657;
                do
                {
                  v366 = HIWORD(*(unint64_t *)v59);
                  v367 = *(_QWORD *)v58;
                  v368 = HIWORD(*(_QWORD *)v58);
                  v369 = *(unint64_t *)v59 >> 16;
                  if (!v10)
                    v366 = 0xFFFFLL;
                  if (!v48)
                    v368 = 0xFFFFLL;
                  v142 = v366 >= (unsigned __int16)v369;
                  v370 = v366 - (unsigned __int16)v369;
                  if (!v142)
                    v370 = 0;
                  v371 = v368 - WORD1(v367);
                  if (v368 < WORD1(v367))
                    v371 = 0;
                  v372 = v371 + v370;
                  v373 = v368 + v366;
                  if (v372 >= 0xFFFF)
                    v372 = 0xFFFFLL;
                  if (v373 >= 0xFFFF)
                    v373 = 0xFFFFLL;
                  v142 = v373 >= v372;
                  v374 = v373 - v372;
                  if (!v142)
                    v374 = 0;
                  *(uint16x4_t *)v375.i8 = *v59;
                  v375.i64[1] = HIDWORD(*(unint64_t *)v59);
                  v376.i64[0] = *(_QWORD *)v58;
                  v376.i64[1] = HIDWORD(v367);
                  v377 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v368), (uint64x2_t)vandq_s8(v376, v364)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v366), (uint64x2_t)vandq_s8(v375, v364)));
                  v378 = vdupq_n_s64(v373);
                  v379 = (int64x2_t)vqsubq_u64((uint64x2_t)v378, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v364, (uint64x2_t)v377), v377, v364));
                  v378.i64[0] = v374;
                  *v59 = (uint16x4_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v378), 0x10uLL), (int8x8_t)vmovn_s64(v379));
                  v380 = v58 + 8 * v644;
                  if (v380 >= v49)
                    v381 = -(uint64_t)(int)v45;
                  else
                    v381 = 0;
                  v58 = v380 + 8 * v381;
                  v59 += v644;
                  --v365;
                }
                while (v365);
                v59 += v655;
                v382 = v663;
                v383 = v663 + 8 * v662;
                if (v383 >= v660)
                  v384 = -(uint64_t)(v662 * v649);
                else
                  v384 = 0;
                v385 = v383 + 8 * v384;
                v386 = v49 + 8 * v384 + 8 * v662;
                if (v660)
                {
                  v49 = v386;
                  v382 = v385;
                }
                v663 = v382;
                if (v660)
                  v58 = v385;
                else
                  v58 += 8 * v662;
                --v363;
              }
              while (v363);
LABEL_984:
              v666[0] = 0;
              goto LABEL_985;
            case 12:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v387 = v666[0];
              do
              {
                v388 = v657;
                do
                {
                  v389 = HIWORD(*(_QWORD *)v58);
                  if (!v48)
                    LOWORD(v389) = -1;
                  rgba64_DpluslDA(v59, (unint64_t)*v59, *(_QWORD *)v58, (unsigned __int16)v389);
                  v390 = v58 + 8 * v644;
                  if (v390 >= v49)
                    v391 = -(uint64_t)(int)v45;
                  else
                    v391 = 0;
                  v58 = v390 + 8 * v391;
                  v59 += v644;
                  --v388;
                }
                while (v388);
                v392 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v393 = v663;
                v394 = v663 + 8 * v662;
                if (v394 < v660)
                  v392 = 0;
                v395 = v394 + 8 * v392;
                v396 = v49 + 8 * v392 + 8 * v662;
                if (v660)
                {
                  v49 = v396;
                  v393 = v395;
                }
                v663 = v393;
                if (v660)
                  v58 = v395;
                else
                  v58 += 8 * v662;
                --v387;
              }
              while (v387);
              goto LABEL_933;
            case 13:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v397 = v666[0];
              while (1)
              {
                v398 = v657;
                do
                {
                  if (!v48)
                  {
                    v399 = 0xFFFF;
LABEL_566:
                    v400 = (unint64_t)*v59;
                    if (v10)
                    {
                      v401 = HIWORD(v400);
                      v402 = *(_QWORD *)v58;
                      if (!HIWORD(v400))
                      {
                        v403 = v402 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v399 << 48);
LABEL_571:
                        *v59 = (uint16x4_t)v403;
                        goto LABEL_572;
                      }
                    }
                    else
                    {
                      v402 = *(_QWORD *)v58;
                      LODWORD(v401) = 0xFFFF;
                    }
                    v403 = PDAmultiplyPDA_13494(v400, v401, v402, v399);
                    goto LABEL_571;
                  }
                  v399 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_566;
LABEL_572:
                  v404 = v58 + 8 * v644;
                  if (v404 >= v49)
                    v405 = -(uint64_t)(int)v45;
                  else
                    v405 = 0;
                  v58 = v404 + 8 * v405;
                  v59 += v644;
                  --v398;
                }
                while (v398);
                v406 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v407 = v663;
                v408 = v663 + 8 * v662;
                if (v408 < v660)
                  v406 = 0;
                v409 = v408 + 8 * v406;
                v410 = v49 + 8 * v406 + 8 * v662;
                if (v660)
                {
                  v49 = v410;
                  v407 = v409;
                }
                v663 = v407;
                if (v660)
                  v58 = v409;
                else
                  v58 += 8 * v662;
                if (!--v397)
                  goto LABEL_933;
              }
            case 14:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v411 = v666[0];
              while (1)
              {
                v412 = v657;
                do
                {
                  if (!v48)
                  {
                    v413 = 0xFFFF;
LABEL_591:
                    v414 = (unint64_t)*v59;
                    if (v10)
                    {
                      v415 = HIWORD(v414);
                      v416 = *(_QWORD *)v58;
                      if (!HIWORD(v414))
                      {
                        v417 = v416 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v413 << 48);
LABEL_596:
                        *v59 = (uint16x4_t)v417;
                        goto LABEL_597;
                      }
                    }
                    else
                    {
                      v416 = *(_QWORD *)v58;
                      LODWORD(v415) = 0xFFFF;
                    }
                    v417 = PDAscreenPDA_13495(v414, v415, v416, v413);
                    goto LABEL_596;
                  }
                  v413 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_591;
LABEL_597:
                  v418 = v58 + 8 * v644;
                  if (v418 >= v49)
                    v419 = -(uint64_t)(int)v45;
                  else
                    v419 = 0;
                  v58 = v418 + 8 * v419;
                  v59 += v644;
                  --v412;
                }
                while (v412);
                v420 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v421 = v663;
                v422 = v663 + 8 * v662;
                if (v422 < v660)
                  v420 = 0;
                v423 = v422 + 8 * v420;
                v424 = v49 + 8 * v420 + 8 * v662;
                if (v660)
                {
                  v49 = v424;
                  v421 = v423;
                }
                v663 = v421;
                if (v660)
                  v58 = v423;
                else
                  v58 += 8 * v662;
                if (!--v411)
                  goto LABEL_933;
              }
            case 15:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v425 = v666[0];
              while (1)
              {
                v426 = v657;
                do
                {
                  if (!v48)
                  {
                    v427 = 0xFFFF;
LABEL_616:
                    v428 = (unint64_t)*v59;
                    if (v10)
                    {
                      v429 = HIWORD(v428);
                      v430 = *(_QWORD *)v58;
                      if (!HIWORD(v428))
                      {
                        v431 = v430 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v427 << 48);
LABEL_621:
                        *v59 = (uint16x4_t)v431;
                        goto LABEL_622;
                      }
                    }
                    else
                    {
                      v430 = *(_QWORD *)v58;
                      LODWORD(v429) = 0xFFFF;
                    }
                    v431 = PDAoverlayPDA_13496(v428, v429, v430, v427);
                    goto LABEL_621;
                  }
                  v427 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_616;
LABEL_622:
                  v432 = v58 + 8 * v644;
                  if (v432 >= v49)
                    v433 = -(uint64_t)(int)v45;
                  else
                    v433 = 0;
                  v58 = v432 + 8 * v433;
                  v59 += v644;
                  --v426;
                }
                while (v426);
                v434 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v435 = v663;
                v436 = v663 + 8 * v662;
                if (v436 < v660)
                  v434 = 0;
                v437 = v436 + 8 * v434;
                v438 = v49 + 8 * v434 + 8 * v662;
                if (v660)
                {
                  v49 = v438;
                  v435 = v437;
                }
                v663 = v435;
                if (v660)
                  v58 = v437;
                else
                  v58 += 8 * v662;
                if (!--v425)
                  goto LABEL_933;
              }
            case 16:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v439 = v666[0];
              while (1)
              {
                v440 = v657;
                do
                {
                  if (!v48)
                  {
                    v441 = 0xFFFF;
LABEL_641:
                    v442 = (unint64_t)*v59;
                    if (v10)
                    {
                      v443 = HIWORD(v442);
                      v444 = *(_QWORD *)v58;
                      if (!HIWORD(v442))
                      {
                        v445 = v444 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v441 << 48);
LABEL_646:
                        *v59 = (uint16x4_t)v445;
                        goto LABEL_647;
                      }
                    }
                    else
                    {
                      v444 = *(_QWORD *)v58;
                      LODWORD(v443) = 0xFFFF;
                    }
                    v445 = PDAdarkenPDA_13498(v442, v443, v444, v441);
                    goto LABEL_646;
                  }
                  v441 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_641;
LABEL_647:
                  v446 = v58 + 8 * v644;
                  if (v446 >= v49)
                    v447 = -(uint64_t)(int)v45;
                  else
                    v447 = 0;
                  v58 = v446 + 8 * v447;
                  v59 += v644;
                  --v440;
                }
                while (v440);
                v448 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v449 = v663;
                v450 = v663 + 8 * v662;
                if (v450 < v660)
                  v448 = 0;
                v451 = v450 + 8 * v448;
                v452 = v49 + 8 * v448 + 8 * v662;
                if (v660)
                {
                  v49 = v452;
                  v449 = v451;
                }
                v663 = v449;
                if (v660)
                  v58 = v451;
                else
                  v58 += 8 * v662;
                if (!--v439)
                  goto LABEL_933;
              }
            case 17:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v453 = v666[0];
              while (1)
              {
                v454 = v657;
                do
                {
                  if (!v48)
                  {
                    v455 = 0xFFFF;
LABEL_666:
                    v456 = (unint64_t)*v59;
                    if (v10)
                    {
                      v457 = HIWORD(v456);
                      v458 = *(_QWORD *)v58;
                      if (!HIWORD(v456))
                      {
                        v459 = v458 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v455 << 48);
LABEL_671:
                        *v59 = (uint16x4_t)v459;
                        goto LABEL_672;
                      }
                    }
                    else
                    {
                      v458 = *(_QWORD *)v58;
                      LODWORD(v457) = 0xFFFF;
                    }
                    v459 = PDAlightenPDA_13497(v456, v457, v458, v455);
                    goto LABEL_671;
                  }
                  v455 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_666;
LABEL_672:
                  v460 = v58 + 8 * v644;
                  if (v460 >= v49)
                    v461 = -(uint64_t)(int)v45;
                  else
                    v461 = 0;
                  v58 = v460 + 8 * v461;
                  v59 += v644;
                  --v454;
                }
                while (v454);
                v462 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v463 = v663;
                v464 = v663 + 8 * v662;
                if (v464 < v660)
                  v462 = 0;
                v465 = v464 + 8 * v462;
                v466 = v49 + 8 * v462 + 8 * v662;
                if (v660)
                {
                  v49 = v466;
                  v463 = v465;
                }
                v663 = v463;
                if (v660)
                  v58 = v465;
                else
                  v58 += 8 * v662;
                if (!--v453)
                  goto LABEL_933;
              }
            case 18:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v467 = v666[0];
              while (1)
              {
                v468 = v657;
                do
                {
                  if (!v48)
                  {
                    v469 = 0xFFFF;
LABEL_691:
                    v470 = (unint64_t)*v59;
                    if (v10)
                    {
                      v471 = HIWORD(v470);
                      v472 = *(_QWORD *)v58;
                      if (!HIWORD(v470))
                      {
                        v473 = v472 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v469 << 48);
LABEL_696:
                        *v59 = (uint16x4_t)v473;
                        goto LABEL_697;
                      }
                    }
                    else
                    {
                      v472 = *(_QWORD *)v58;
                      LODWORD(v471) = 0xFFFF;
                    }
                    v473 = PDAcolordodgePDA_13499(v470, v471, v472, v469);
                    goto LABEL_696;
                  }
                  v469 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_691;
LABEL_697:
                  v474 = v58 + 8 * v644;
                  if (v474 >= v49)
                    v475 = -(uint64_t)(int)v45;
                  else
                    v475 = 0;
                  v58 = v474 + 8 * v475;
                  v59 += v644;
                  --v468;
                }
                while (v468);
                v476 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v477 = v663;
                v478 = v663 + 8 * v662;
                if (v478 < v660)
                  v476 = 0;
                v479 = v478 + 8 * v476;
                v480 = v49 + 8 * v476 + 8 * v662;
                if (v660)
                {
                  v49 = v480;
                  v477 = v479;
                }
                v663 = v477;
                if (v660)
                  v58 = v479;
                else
                  v58 += 8 * v662;
                if (!--v467)
                  goto LABEL_933;
              }
            case 19:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v481 = v666[0];
              while (1)
              {
                v482 = v657;
                do
                {
                  if (!v48)
                  {
                    v483 = 0xFFFF;
LABEL_716:
                    v484 = (unint64_t)*v59;
                    if (v10)
                    {
                      v485 = HIWORD(v484);
                      v486 = *(_QWORD *)v58;
                      if (!HIWORD(v484))
                      {
                        v487 = v486 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v483 << 48);
LABEL_721:
                        *v59 = (uint16x4_t)v487;
                        goto LABEL_722;
                      }
                    }
                    else
                    {
                      v486 = *(_QWORD *)v58;
                      LODWORD(v485) = 0xFFFF;
                    }
                    v487 = PDAcolorburnPDA_13500(v484, v485, v486, v483);
                    goto LABEL_721;
                  }
                  v483 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_716;
LABEL_722:
                  v488 = v58 + 8 * v644;
                  if (v488 >= v49)
                    v489 = -(uint64_t)(int)v45;
                  else
                    v489 = 0;
                  v58 = v488 + 8 * v489;
                  v59 += v644;
                  --v482;
                }
                while (v482);
                v490 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v491 = v663;
                v492 = v663 + 8 * v662;
                if (v492 < v660)
                  v490 = 0;
                v493 = v492 + 8 * v490;
                v494 = v49 + 8 * v490 + 8 * v662;
                if (v660)
                {
                  v49 = v494;
                  v491 = v493;
                }
                v663 = v491;
                if (v660)
                  v58 = v493;
                else
                  v58 += 8 * v662;
                if (!--v481)
                  goto LABEL_933;
              }
            case 20:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v495 = v666[0];
              while (1)
              {
                v496 = v657;
                do
                {
                  if (!v48)
                  {
                    v497 = 0xFFFF;
LABEL_741:
                    v498 = (unint64_t)*v59;
                    if (v10)
                    {
                      v499 = HIWORD(v498);
                      v500 = *(_QWORD *)v58;
                      if (!HIWORD(v498))
                      {
                        v501 = v500 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v497 << 48);
LABEL_746:
                        *v59 = (uint16x4_t)v501;
                        goto LABEL_747;
                      }
                    }
                    else
                    {
                      v500 = *(_QWORD *)v58;
                      LODWORD(v499) = 0xFFFF;
                    }
                    v501 = PDAsoftlightPDA_13502(v498, v499, v500, v497);
                    goto LABEL_746;
                  }
                  v497 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_741;
LABEL_747:
                  v502 = v58 + 8 * v644;
                  if (v502 >= v49)
                    v503 = -(uint64_t)(int)v45;
                  else
                    v503 = 0;
                  v58 = v502 + 8 * v503;
                  v59 += v644;
                  --v496;
                }
                while (v496);
                v504 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v505 = v663;
                v506 = v663 + 8 * v662;
                if (v506 < v660)
                  v504 = 0;
                v507 = v506 + 8 * v504;
                v508 = v49 + 8 * v504 + 8 * v662;
                if (v660)
                {
                  v49 = v508;
                  v505 = v507;
                }
                v663 = v505;
                if (v660)
                  v58 = v507;
                else
                  v58 += 8 * v662;
                if (!--v495)
                  goto LABEL_933;
              }
            case 21:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v509 = v666[0];
              while (1)
              {
                v510 = v657;
                do
                {
                  if (!v48)
                  {
                    v511 = 0xFFFF;
LABEL_766:
                    v512 = (unint64_t)*v59;
                    if (v10)
                    {
                      v513 = HIWORD(v512);
                      v514 = *(_QWORD *)v58;
                      if (!HIWORD(v512))
                      {
                        v515 = v514 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v511 << 48);
LABEL_771:
                        *v59 = (uint16x4_t)v515;
                        goto LABEL_772;
                      }
                    }
                    else
                    {
                      v514 = *(_QWORD *)v58;
                      LODWORD(v513) = 0xFFFF;
                    }
                    v515 = PDAhardlightPDA_13501(v512, v513, v514, v511);
                    goto LABEL_771;
                  }
                  v511 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_766;
LABEL_772:
                  v516 = v58 + 8 * v644;
                  if (v516 >= v49)
                    v517 = -(uint64_t)(int)v45;
                  else
                    v517 = 0;
                  v58 = v516 + 8 * v517;
                  v59 += v644;
                  --v510;
                }
                while (v510);
                v518 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v519 = v663;
                v520 = v663 + 8 * v662;
                if (v520 < v660)
                  v518 = 0;
                v521 = v520 + 8 * v518;
                v522 = v49 + 8 * v518 + 8 * v662;
                if (v660)
                {
                  v49 = v522;
                  v519 = v521;
                }
                v663 = v519;
                if (v660)
                  v58 = v521;
                else
                  v58 += 8 * v662;
                if (!--v509)
                  goto LABEL_933;
              }
            case 22:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v523 = v666[0];
              while (1)
              {
                v524 = v657;
                do
                {
                  if (!v48)
                  {
                    v525 = 0xFFFF;
LABEL_791:
                    v526 = (unint64_t)*v59;
                    if (v10)
                    {
                      v527 = HIWORD(v526);
                      v528 = *(_QWORD *)v58;
                      if (!HIWORD(v526))
                      {
                        v529 = v528 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v525 << 48);
LABEL_796:
                        *v59 = (uint16x4_t)v529;
                        goto LABEL_797;
                      }
                    }
                    else
                    {
                      v528 = *(_QWORD *)v58;
                      LODWORD(v527) = 0xFFFF;
                    }
                    v529 = PDAdifferencePDA_13503(v526, v527, v528, v525);
                    goto LABEL_796;
                  }
                  v525 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_791;
LABEL_797:
                  v530 = v58 + 8 * v644;
                  if (v530 >= v49)
                    v531 = -(uint64_t)(int)v45;
                  else
                    v531 = 0;
                  v58 = v530 + 8 * v531;
                  v59 += v644;
                  --v524;
                }
                while (v524);
                v532 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v533 = v663;
                v534 = v663 + 8 * v662;
                if (v534 < v660)
                  v532 = 0;
                v535 = v534 + 8 * v532;
                v536 = v49 + 8 * v532 + 8 * v662;
                if (v660)
                {
                  v49 = v536;
                  v533 = v535;
                }
                v663 = v533;
                if (v660)
                  v58 = v535;
                else
                  v58 += 8 * v662;
                if (!--v523)
                  goto LABEL_933;
              }
            case 23:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v537 = v666[0];
              while (1)
              {
                v538 = v657;
                do
                {
                  if (!v48)
                  {
                    v539 = 0xFFFF;
LABEL_816:
                    v540 = (unint64_t)*v59;
                    if (v10)
                    {
                      v541 = HIWORD(v540);
                      v542 = *(_QWORD *)v58;
                      if (!HIWORD(v540))
                      {
                        v543 = v542 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v539 << 48);
LABEL_821:
                        *v59 = (uint16x4_t)v543;
                        goto LABEL_822;
                      }
                    }
                    else
                    {
                      v542 = *(_QWORD *)v58;
                      LODWORD(v541) = 0xFFFF;
                    }
                    v543 = PDAexclusionPDA_13504(v540, v541, v542, v539);
                    goto LABEL_821;
                  }
                  v539 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_816;
LABEL_822:
                  v544 = v58 + 8 * v644;
                  if (v544 >= v49)
                    v545 = -(uint64_t)(int)v45;
                  else
                    v545 = 0;
                  v58 = v544 + 8 * v545;
                  v59 += v644;
                  --v538;
                }
                while (v538);
                v546 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v547 = v663;
                v548 = v663 + 8 * v662;
                if (v548 < v660)
                  v546 = 0;
                v549 = v548 + 8 * v546;
                v550 = v49 + 8 * v546 + 8 * v662;
                if (v660)
                {
                  v49 = v550;
                  v547 = v549;
                }
                v663 = v547;
                if (v660)
                  v58 = v549;
                else
                  v58 += 8 * v662;
                if (!--v537)
                  goto LABEL_933;
              }
            case 24:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v551 = v666[0];
              while (1)
              {
                v552 = v657;
                do
                {
                  if (!v48)
                  {
                    v553 = 0xFFFF;
LABEL_841:
                    v554 = (unint64_t)*v59;
                    if (v10)
                    {
                      v555 = HIWORD(v554);
                      v556 = *(_QWORD *)v58;
                      if (!HIWORD(v554))
                      {
                        v557 = v556 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v553 << 48);
LABEL_846:
                        *v59 = (uint16x4_t)v557;
                        goto LABEL_847;
                      }
                    }
                    else
                    {
                      v556 = *(_QWORD *)v58;
                      LODWORD(v555) = 0xFFFF;
                    }
                    v557 = PDAhuePDA_13505(v554, v555, v556, v553);
                    goto LABEL_846;
                  }
                  v553 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_841;
LABEL_847:
                  v558 = v58 + 8 * v644;
                  if (v558 >= v49)
                    v559 = -(uint64_t)(int)v45;
                  else
                    v559 = 0;
                  v58 = v558 + 8 * v559;
                  v59 += v644;
                  --v552;
                }
                while (v552);
                v560 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v561 = v663;
                v562 = v663 + 8 * v662;
                if (v562 < v660)
                  v560 = 0;
                v563 = v562 + 8 * v560;
                v564 = v49 + 8 * v560 + 8 * v662;
                if (v660)
                {
                  v49 = v564;
                  v561 = v563;
                }
                v663 = v561;
                if (v660)
                  v58 = v563;
                else
                  v58 += 8 * v662;
                if (!--v551)
                  goto LABEL_933;
              }
            case 25:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v565 = v666[0];
              while (1)
              {
                v566 = v657;
                do
                {
                  if (!v48)
                  {
                    v567 = 0xFFFF;
LABEL_866:
                    v568 = (unint64_t)*v59;
                    if (v10)
                    {
                      v569 = HIWORD(v568);
                      v570 = *(_QWORD *)v58;
                      if (!HIWORD(v568))
                      {
                        v571 = v570 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v567 << 48);
LABEL_871:
                        *v59 = (uint16x4_t)v571;
                        goto LABEL_872;
                      }
                    }
                    else
                    {
                      v570 = *(_QWORD *)v58;
                      LODWORD(v569) = 0xFFFF;
                    }
                    v571 = PDAsaturationPDA_13506(v568, v569, v570, v567);
                    goto LABEL_871;
                  }
                  v567 = *(unsigned __int16 *)(v58 + 6);
                  if (*(_WORD *)(v58 + 6))
                    goto LABEL_866;
LABEL_872:
                  v572 = v58 + 8 * v644;
                  if (v572 >= v49)
                    v573 = -(uint64_t)(int)v45;
                  else
                    v573 = 0;
                  v58 = v572 + 8 * v573;
                  v59 += v644;
                  --v566;
                }
                while (v566);
                v574 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v575 = v663;
                v576 = v663 + 8 * v662;
                if (v576 < v660)
                  v574 = 0;
                v577 = v576 + 8 * v574;
                v578 = v49 + 8 * v574 + 8 * v662;
                if (v660)
                {
                  v49 = v578;
                  v575 = v577;
                }
                v663 = v575;
                if (v660)
                  v58 = v577;
                else
                  v58 += 8 * v662;
                if (!--v565)
                  goto LABEL_933;
              }
            case 26:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v579 = v666[0];
              while (1)
              {
                v580 = v657;
                do
                {
                  if (v48)
                  {
                    v581 = *(unsigned __int16 *)(v58 + 6);
                    if (!*(_WORD *)(v58 + 6))
                      goto LABEL_896;
                    if (!v10)
                    {
LABEL_893:
                      v584 = *(_QWORD *)v58;
                      v582 = (uint64_t)*v59;
                      LODWORD(v583) = 0xFFFF;
LABEL_894:
                      v585 = PDAluminosityPDA_13507(v584, v581, v582, v583);
                      goto LABEL_895;
                    }
                  }
                  else
                  {
                    v581 = 0xFFFF;
                    if (!v10)
                      goto LABEL_893;
                  }
                  v582 = (uint64_t)*v59;
                  v583 = HIWORD(*(unint64_t *)v59);
                  v584 = *(_QWORD *)v58;
                  if ((_DWORD)v583)
                    goto LABEL_894;
                  v585 = v584 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v581 << 48);
LABEL_895:
                  *v59 = (uint16x4_t)v585;
LABEL_896:
                  v586 = v58 + 8 * v644;
                  if (v586 >= v49)
                    v587 = -(uint64_t)(int)v45;
                  else
                    v587 = 0;
                  v58 = v586 + 8 * v587;
                  v59 += v644;
                  --v580;
                }
                while (v580);
                v588 = -(uint64_t)(v662 * v649);
                v59 += v655;
                v589 = v663;
                v590 = v663 + 8 * v662;
                if (v590 < v660)
                  v588 = 0;
                v591 = v590 + 8 * v588;
                v592 = v49 + 8 * v588 + 8 * v662;
                if (v660)
                {
                  v49 = v592;
                  v589 = v591;
                }
                v663 = v589;
                if (v660)
                  v58 = v591;
                else
                  v58 += 8 * v662;
                if (!--v579)
                  goto LABEL_933;
              }
            case 27:
              v646 = v35;
              v647 = v39;
              v648 = v40;
              v645 = v45;
              v593 = v666[0];
              break;
            default:
              goto LABEL_985;
          }
          break;
        }
LABEL_910:
        v594 = v657;
        while (1)
        {
          if (v48)
          {
            v595 = *(unsigned __int16 *)(v58 + 6);
            if (!*(_WORD *)(v58 + 6))
              goto LABEL_921;
          }
          else
          {
            v595 = 0xFFFF;
          }
          v596 = (unint64_t)*v59;
          if (!v10)
            break;
          v597 = HIWORD(v596);
          v598 = *(_QWORD *)v58;
          if (HIWORD(v596))
            goto LABEL_919;
          v599 = v598 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v595 << 48);
LABEL_920:
          *v59 = (uint16x4_t)v599;
LABEL_921:
          v600 = v58 + 8 * v644;
          if (v600 >= v49)
            v601 = -(uint64_t)(int)v45;
          else
            v601 = 0;
          v58 = v600 + 8 * v601;
          v59 += v644;
          if (!--v594)
          {
            v602 = -(uint64_t)(v662 * v649);
            v59 += v655;
            v603 = v663;
            v604 = v663 + 8 * v662;
            if (v604 < v660)
              v602 = 0;
            v605 = v604 + 8 * v602;
            v606 = v49 + 8 * v602 + 8 * v662;
            if (v660)
            {
              v49 = v606;
              v603 = v605;
            }
            v663 = v603;
            if (v660)
              v58 = v605;
            else
              v58 += 8 * v662;
            if (!--v593)
            {
LABEL_933:
              v666[0] = 0;
              v11 = v651;
              v39 = v647;
              v40 = v648;
              v45 = v645;
              v35 = v646;
              goto LABEL_985;
            }
            goto LABEL_910;
          }
        }
        v598 = *(_QWORD *)v58;
        LODWORD(v597) = 0xFFFF;
LABEL_919:
        v599 = PDAluminosityPDA_13507(v596, v597, v598, v595);
        goto LABEL_920;
      }
      v655 = v39 - v13;
      v657 = v13;
      if (v35)
      {
        v650 = 0;
        v56 = v41 % (int)v45;
        v57 = v35 + 8 * (v44 >> 3) * (v42 % v649);
        v58 = v57 + 8 * v56;
        v49 = v57 + 8 * (int)v45;
        v644 = 1;
        v662 = v44 >> 3;
        v663 = v58;
        v59 = (uint16x4_t *)v40;
        v641 = v42 % v649;
        v642 = v56;
        goto LABEL_322;
      }
      v641 = v38[15];
      v642 = v38[14];
      v60 = v44 >> 3;
      v49 = 0;
      v644 = 1;
      v61 = v13;
LABEL_57:
      v650 = 0;
      v663 = 0;
      v660 = 0;
      v662 = v60 - v61;
      v58 = v35;
      v59 = (uint16x4_t *)v40;
      goto LABEL_322;
    }
    v45 = v44 >> 3;
    v35 += 8 * (v41 + (v44 >> 3) * v42);
    if (v44 >> 3 == v39)
    {
      if ((uint64_t)(v40 - v35) >= 1)
      {
        if (v13 >= (v40 - v35) >> 3)
        {
          v40 += 8 * v14;
          v47 = -1;
          v45 = v39;
          v35 += 8 * v14;
          goto LABEL_52;
        }
        v46 = v39 * (v15 - 1);
        if (v40 <= v35 + 8 * v46 + 8 * v14)
        {
          v40 += 8 * v46;
          v45 = -(uint64_t)v39;
          v47 = 1;
          v35 += 8 * v46;
          v39 = -(uint64_t)v39;
          goto LABEL_52;
        }
      }
      v47 = 1;
      v45 = v39;
    }
    else
    {
      v47 = 1;
    }
LABEL_52:
    v641 = v38[15];
    v642 = v38[14];
    v48 = v9 != 0;
    if (v16)
    {
      v649 = 0;
      v662 = v45;
      v663 = 0;
      v660 = 0;
      v49 = -1;
      goto LABEL_54;
    }
    v649 = 0;
    v644 = v47;
    v61 = v47 * (int)v13;
    v655 = v39 - v61;
    v657 = v13;
    v49 = -1;
    v60 = v45;
    goto LABEL_57;
  }
  v17 = *(_DWORD *)(v5 + 128);
  if ((v17 | 8) == 8)
  {
    if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
    {
      rgba64_mark_constmask(v5, v11);
    }
    else if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
    {
      rgba16_template_image_mask_method(*v6, (int *)v5, v11);
    }
    else
    {
      rgba64_mark_pixelmask(v5, v11);
    }
    return 1;
  }
  v27 = *(_DWORD *)(v5 + 112);
  v28 = *(_DWORD *)(v5 + 116);
  v29 = v5;
  v30 = (v27 + 15) & 0xFFFFFFF0;
  v31 = v30 * v28;
  if ((int)v31 <= 4096)
  {
    v33 = v676;
LABEL_40:
    CGSConvertBitsToMask(v16, *(_DWORD *)(v29 + 124), v33, v30, v27, v28, v17);
    v50 = *(_OWORD *)(v29 + 112);
    v672 = *(_OWORD *)(v29 + 96);
    v673 = v50;
    v51 = *(_OWORD *)(v29 + 144);
    v674 = *(_OWORD *)(v29 + 128);
    v675 = v51;
    v52 = *(_OWORD *)(v29 + 48);
    v668 = *(_OWORD *)(v29 + 32);
    v669 = v52;
    v53 = *(_OWORD *)(v29 + 80);
    v670 = *(_OWORD *)(v29 + 64);
    v671 = v53;
    v54 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v666 = *(_OWORD *)v29;
    v667 = v54;
    HIDWORD(v673) = (v27 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v674 + 1) = v33;
    if (BYTE1(v666[0]) << 8 == 1024)
      rgba64_mark_constmask((uint64_t)v666, v11);
    else
      rgba64_mark_pixelmask((uint64_t)v666, v11);
    if (v33 != (_BYTE *)v676)
    {
      v55 = v33;
      goto LABEL_993;
    }
    return 1;
  }
  v32 = malloc_type_malloc(v31, 0x8303D2FuLL);
  if (v32)
  {
    v33 = v32;
    v16 = *(uint16x4_t **)(v29 + 136);
    v17 = *(_DWORD *)(v29 + 128);
    goto LABEL_40;
  }
  return 1;
}

uint64_t rgba64_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  void (*v25)(uint64_t, int *, int, int, int, int);
  uint64_t v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[64];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v46, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v29, (uint64_t)v46) < 1)
    return 0xFFFFFFFFLL;
  v18 = 269497256;
  v19 = *(_DWORD *)a3;
  *((_QWORD *)&v29 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v19 == 269497256)
  {
    if (!(_QWORD)v40 && (~DWORD1(v30) & 0xC3) == 0)
    {
      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
      if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
      {
        if ((BYTE4(v30) & 4) != 0)
        {
          v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
          *((_QWORD *)a2 + 8) = v17.n128_u64[0];
        }
        rgba64_mark((uint64_t)a1, v17);
        return 1;
      }
    }
    *(_QWORD *)&v29 = rgba64_sample_rgba64;
    goto LABEL_36;
  }
  v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
  if (!v20)
    return 0xFFFFFFFFLL;
  if (v20 > 0xB)
  {
    if (v20 > 0x13)
      goto LABEL_27;
    if (v20 - 14 < 4)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      goto LABEL_28;
    }
    if ((v20 == 13 || v20 == 12) && (v22 = *((_QWORD *)a2 + 12)) == 0)
    {
      v21 = 0;
    }
    else
    {
LABEL_27:
      LODWORD(v22) = 255;
      v21 = 1;
    }
  }
  else
  {
    v21 = 0;
    LODWORD(v22) = 0;
    switch(v20)
    {
      case 2u:
        if (*((_QWORD *)a2 + 12))
          goto LABEL_27;
        v21 = 0;
        LODWORD(v22) = 16;
        break;
      case 5u:
        v21 = 0;
        LODWORD(v22) = 24;
        break;
      case 6u:
        break;
      case 7u:
        v21 = 0;
        LODWORD(v22) = 32;
        break;
      case 8u:
        v21 = 0;
        LODWORD(v22) = 8;
        break;
      case 9u:
        v21 = 0;
        LODWORD(v22) = 40;
        break;
      default:
        goto LABEL_27;
    }
  }
LABEL_28:
  *(_QWORD *)&v29 = *(_QWORD *)&RGB16_image_sample[2 * v20 + 2];
  if (!(_QWORD)v29)
  {
    if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 8)
    {
      *(_QWORD *)&v29 = *(_QWORD *)&RGB8_image_sample[2 * v20 + 2];
      if ((_QWORD)v29)
      {
        v18 = 134755224;
        v23 = 4;
LABEL_34:
        LODWORD(v30) = v23;
        goto LABEL_35;
      }
    }
    *(_QWORD *)&v29 = *(_QWORD *)&RGBF_image_sample[2 * v20 + 2];
    if ((_QWORD)v29)
    {
      v18 = 538981289;
      v23 = 16;
      goto LABEL_34;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_35:
  DWORD2(v29) = v18;
  if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (BYTE4(v30) & 7) == 3 && (a2[2] == 5 || !a2[2]))
  {
    if (v20 <= 0xB)
    {
      HIDWORD(v24) = v22;
      LODWORD(v24) = v22;
      switch((v24 >> 3))
      {
        case 0u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_RGB32;
          goto LABEL_67;
        case 1u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_RGB32;
          break;
        case 2u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_W8;
          goto LABEL_67;
        case 3u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_RGB24;
          goto LABEL_67;
        case 4u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_rgb32;
          goto LABEL_67;
        case 5u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_rgb32;
          break;
        default:
          goto LABEL_36;
      }
      v26 = (uint64_t)a2;
      v27 = v8;
      v28 = 8;
LABEL_68:
      rgba64_image_mark_image(v26, (uint64_t)&v29, v27, v28, (void (*)(_QWORD, _QWORD))v25);
      return 1;
    }
    if (v20 <= 0x13)
    {
      switch(v20)
      {
        case 0xCu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_W16;
          break;
        case 0xDu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_w16;
          break;
        case 0xEu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_RGB48;
          break;
        case 0xFu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_rgb48;
          break;
        case 0x10u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_RGBA64;
          break;
        case 0x11u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = rgba64_image_mark_rgba64;
          break;
        default:
          goto LABEL_36;
      }
LABEL_67:
      v26 = (uint64_t)a2;
      v27 = v8;
      v28 = 0;
      goto LABEL_68;
    }
  }
LABEL_36:
  rgba64_image_mark((uint64_t)a2, (uint64_t)&v29, v8, v17);
  return 1;
}

uint64_t rgba64_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = rgba64_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = rgba64_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = rgba64_shade_axial_RGB;
    }
    else
    {
      v14 = rgba64_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 3, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 3, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgba64_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void rgba64_shade_radial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  float v27;
  float v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v43;
  BOOL v44;
  int v45;
  float v46;
  _QWORD *v47;
  float v48;
  float v49;
  float v50;
  int *v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v57;
  float v58;
  float v59;
  int v60;
  int v61;
  uint64_t v63;
  int v64;
  int v65;
  int *v66;
  int *v67;
  char v68;
  int v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int v73;
  int v74;
  int v75;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(a1 + 284);
  v6 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v7 = v6 * (float)a2;
  v8 = v6 * (float)a3;
  v9 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v8) + (float)(v4 * v7));
  v10 = *(float *)(a1 + 300) + (float)((float)(v8 * *(float *)(a1 + 292)) + (float)(v5 * v7));
  v12 = *(float **)(a1 + 400);
  v13 = *(float *)(a1 + 336);
  v14 = *(float *)(a1 + 344);
  v15 = *(float *)(a1 + 304);
  v16 = *(float *)(a1 + 308);
  v17 = *(_DWORD *)(a1 + 324);
  v18 = v12[2];
  v19 = v12[4];
  v20 = v12[5];
  v21 = v12[7];
  v24 = a1 + 144;
  v22 = *(_BYTE **)(a1 + 144);
  v23 = *(_QWORD *)(v24 + 8);
  v25 = *(_DWORD **)(a1 + 376);
  v26 = *(_QWORD *)(a1 + 360);
  if (v18 != 0.0 || v21 != 0.0 || v5 != 0.0)
  {
    v30 = *(_DWORD *)(a1 + 320);
    v31 = v12[3];
    v32 = v12[8];
    v33 = -v12[6];
    v34 = v16 - v15;
    while (1)
    {
      v35 = v33 + (float)((float)(v9 + v9) * v18);
      v36 = (float)((float)(v10 * v10) + (float)(v9 * v9)) - v21;
      if (v20 == 0.0)
      {
        v43 = v36 / v35;
      }
      else
      {
        v37 = (float)((float)(v20 * -4.0) * v36) + (float)(v35 * v35);
        if (v37 < 0.0)
          goto LABEL_39;
        v38 = sqrtf(v37);
        v39 = v32 * (float)(v35 - v38);
        v40 = v35 + v38;
        v41 = v32 * v40;
        v42 = (float)(v32 * v40) <= v39;
        if ((float)(v32 * v40) <= v39)
          v43 = v32 * v40;
        else
          v43 = v39;
        if (v42)
          v41 = v39;
        if (v41 < 0.0)
        {
          v44 = v41 < v31;
LABEL_25:
          v45 = v30;
          if (v44)
            goto LABEL_39;
LABEL_26:
          if ((v45 & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_39;
        }
        if (v41 <= 1.0)
        {
          v46 = v15 + (float)(v41 * v34);
          goto LABEL_37;
        }
        if ((v17 & 0x80000000) == 0)
        {
          v45 = v17;
          if (v41 <= v19)
          {
LABEL_38:
            v47 = (_QWORD *)(v26 + 8 * v45);
LABEL_40:
            *(_QWORD *)v23 = *v47;
            LOBYTE(v47) = -1;
            goto LABEL_41;
          }
        }
      }
      if (v43 < 0.0)
      {
        v44 = v43 < v31;
        goto LABEL_25;
      }
      if (v43 > 1.0)
      {
        v45 = v17;
        if (v43 > v19)
          goto LABEL_39;
        goto LABEL_26;
      }
      v46 = v15 + (float)(v43 * v34);
LABEL_37:
      v45 = (int)(float)(v14 * (float)(v46 - v13));
      if ((v45 & 0x80000000) == 0)
        goto LABEL_38;
LABEL_39:
      v47 = v25;
      if (v25)
        goto LABEL_40;
LABEL_41:
      v9 = v4 + v9;
      v10 = v5 + v10;
      v23 += 8;
      *v22++ = (_BYTE)v47;
      if (!--a4)
        return;
    }
  }
  v27 = v10 * v10;
  v28 = -v20;
  if (v27 <= (float)-v20)
  {
    v48 = fabsf(v12[8]);
    v49 = v20 * -4.0;
    v50 = v16 - v15;
    v51 = (int *)(v26 + 8 * v17);
    v52 = a4 + 2;
    while (1)
    {
      v53 = v27 + (float)(v9 * v9);
      v54 = v4 + v9;
      v55 = v27 + (float)(v54 * v54);
      if (v53 > v28 && v55 > v28)
      {
        if (v17 < 0)
        {
          if (!v25)
          {
            v68 = 0;
            LOBYTE(v67) = 0;
            goto LABEL_65;
          }
          v64 = *v25;
          *(_DWORD *)v23 = *v25;
          v65 = v25[1];
        }
        else
        {
          v64 = *v51;
          *(_DWORD *)v23 = *v51;
          v65 = v51[1];
        }
        *(_DWORD *)(v23 + 4) = v65;
        goto LABEL_63;
      }
      v57 = sqrtf(v49 * v55);
      v58 = v48 * sqrtf(v49 * v53);
      v59 = v48 * v57;
      v60 = (int)(float)(v14 * (float)((float)(v15 + (float)(v58 * v50)) - v13));
      v61 = (int)(float)(v14 * (float)((float)(v15 + (float)((float)(v48 * v57) * v50)) - v13));
      if (v58 <= 1.0 && v59 <= 1.0)
      {
        v66 = (int *)(v26 + 8 * v61);
        v64 = *v66;
        v65 = v66[1];
        *(_QWORD *)v23 = *(_QWORD *)(v26 + 8 * v60);
LABEL_63:
        LOBYTE(v67) = -1;
        goto LABEL_64;
      }
      if (v58 <= 1.0)
      {
        if ((v60 & 0x80000000) == 0)
        {
          v63 = 4 * v60;
LABEL_69:
          v67 = (int *)(v26 + 2 * v63);
LABEL_71:
          v69 = *v67;
          LODWORD(v67) = v67[1];
          *(_DWORD *)v23 = v69;
          *(_DWORD *)(v23 + 4) = (_DWORD)v67;
          LOBYTE(v67) = -1;
          goto LABEL_72;
        }
      }
      else if (v58 <= v19)
      {
        v63 = 4 * v17;
        if ((v17 & 0x80000000) == 0)
          goto LABEL_69;
      }
      v67 = v25;
      if (v25)
        goto LABEL_71;
LABEL_72:
      if (v59 <= 1.0)
      {
        if (v61 < 0)
          goto LABEL_79;
        v70 = 4 * v61;
      }
      else if (v59 > v19 || (v70 = 4 * v17, v17 < 0))
      {
LABEL_79:
        if (!v25)
        {
          v68 = 0;
          goto LABEL_65;
        }
        v64 = *v25;
        v65 = v25[1];
        goto LABEL_64;
      }
      v71 = (int *)(v26 + 2 * v70);
      v64 = *v71;
      v65 = v71[1];
LABEL_64:
      *(_DWORD *)(v23 + 8) = v64;
      *(_DWORD *)(v23 + 12) = v65;
      v68 = -1;
LABEL_65:
      v9 = v4 + v54;
      v23 += 16;
      *v22 = (_BYTE)v67;
      v22[1] = v68;
      v22 += 2;
      v52 -= 2;
      if (v52 <= 2)
        return;
    }
  }
  if (v25 || (v17 & 0x80000000) == 0)
  {
    if (v17 >= 0)
      v72 = (int *)(v26 + 8 * v17);
    else
      v72 = *(int **)(a1 + 376);
    v73 = *v72;
    v74 = v72[1];
    v75 = a4 + 4;
    do
    {
      *(_DWORD *)v23 = v73;
      *(_DWORD *)(v23 + 4) = v74;
      *(_DWORD *)(v23 + 8) = v73;
      *(_DWORD *)(v23 + 12) = v74;
      *(_DWORD *)(v23 + 16) = v73;
      *(_DWORD *)(v23 + 20) = v74;
      v75 -= 4;
      *(_DWORD *)(v23 + 24) = v73;
      *(_DWORD *)(v23 + 28) = v74;
      v23 += 32;
      *(_DWORD *)v22 = -1;
      v22 += 4;
    }
    while (v75 > 4);
  }
  else
  {
    if (a4 >= 4)
      v29 = 4;
    else
      v29 = a4;
    bzero(v22, ((a4 - v29 + 3) & 0xFFFFFFFC) + 4);
  }
}

void rgba64_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  uint64_t v13;
  unsigned int *v14;
  _BYTE *v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  float v20;
  unsigned int v21;
  BOOL v22;
  float v23;
  int v24;
  float v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  float v31;
  float v32;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(float *)(a1 + 284);
  v10 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v9 * v6));
  v31 = *(float *)(a1 + 336);
  v32 = *(float *)(a1 + 304);
  v12 = *(float *)(a1 + 344);
  v13 = *(_QWORD *)(a1 + 360);
  v15 = *(_BYTE **)(a1 + 144);
  v14 = *(unsigned int **)(a1 + 152);
  v16 = *(float *)(a1 + 308) - v32;
  do
  {
    v17 = v12 * (float)((float)(v32 + (float)((float)((float)(atan2f(v10, v8) * 0.15915) + 0.5) * v16)) - v31);
    v18 = vcvtms_s32_f32(v17);
    v19 = ceilf(v17);
    v20 = v17 - (float)(int)floorf(v17);
    v21 = vcvtms_s32_f32(v12 + v17);
    if (v17 < 0.0)
      v18 = v21;
    v22 = v17 <= v12;
    v23 = ceilf(v17 - v12);
    if (v22)
      v23 = v19;
    v24 = (int)v23;
    v25 = (float)(v20 * 255.0) + 0.5;
    v26 = (unsigned __int16 *)(v13 + 2 * (int)(4 * v18));
    v27 = *v26;
    v28 = v26[1];
    v29 = (unsigned __int16 *)(v13 + 8 * v24);
    v30 = 255 - (int)v25;
    LODWORD(v26) = (((int)v25 * v29[3] + v30 * v26[3]) << 8) & 0xFFFF0000 | (unsigned __int16)(((int)v25 * v29[2]
                                                                                              + v30
                                                                                              * v26[2]) >> 8);
    *v14 = (((int)v25 * v29[1] + v30 * v28) << 8) & 0xFFFF0000 | (unsigned __int16)(((int)v25 * *v29
                                                                                   + v30 * v27) >> 8);
    v14[1] = v26;
    v14 += 2;
    v8 = v4 + v8;
    v10 = v9 + v10;
    *v15++ = -1;
    --a4;
  }
  while (a4);
}

float rgba64_shade_custom_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _BYTE *v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  _QWORD *v29;

  result = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(result * v6));
  v9 = *(float *)(a1 + 284);
  v10 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v9 * v6));
  v11 = *(float *)(a1 + 304);
  v12 = *(float *)(a1 + 308);
  v13 = *(float *)(a1 + 312);
  v14 = *(float *)(a1 + 316);
  v15 = *(float *)(a1 + 336);
  v16 = *(float *)(a1 + 348);
  v17 = *(float *)(a1 + 344);
  v18 = *(float *)(a1 + 356);
  v19 = *(_QWORD **)(a1 + 376);
  v20 = *(_QWORD *)(a1 + 360);
  v21 = 4 * *(_DWORD *)(a1 + 48);
  v23 = *(_BYTE **)(a1 + 144);
  v22 = *(_QWORD **)(a1 + 152);
  do
  {
    if (v8 < v11 || v10 < v13)
    {
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v25 = v8 == v12;
      v26 = v8 < v12;
    }
    if (v26 || v25)
    {
      v27 = v10 == v14;
      v28 = v10 < v14;
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    if (v28 || v27)
    {
      v29 = (_QWORD *)(v20
                     + 2 * v21 * (int)(float)(v18 * (float)(v10 - v16))
                     + 8 * (int)(float)(v17 * (float)(v8 - v15)));
LABEL_15:
      *v22 = *v29;
      LOBYTE(v29) = -1;
      goto LABEL_16;
    }
    v29 = v19;
    if (v19)
      goto LABEL_15;
LABEL_16:
    v8 = result + v8;
    v10 = v9 + v10;
    ++v22;
    *v23++ = (_BYTE)v29;
    --a4;
  }
  while (a4);
  return result;
}

void rgba64_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v4 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v7 = *(float *)(a1 + 336);
  v8 = *(float *)(a1 + 344);
  v9 = *(float *)(a1 + 304);
  v10 = *(float *)(a1 + 308);
  v11 = *(_DWORD *)(a1 + 320);
  v12 = *(_DWORD *)(a1 + 324);
  v15 = a1 + 144;
  v13 = *(_DWORD **)(a1 + 144);
  v14 = *(_QWORD *)(v15 + 8);
  v16 = *(_QWORD **)(a1 + 376);
  v17 = *(_QWORD *)(a1 + 360);
  if (v4 != 0.0)
  {
    while (1)
    {
      v19 = v11;
      if (v5 >= v9)
      {
        v19 = v12;
        if (v5 <= v10)
          v19 = (int)(float)(v8 * (float)(v5 - v7));
      }
      if ((v19 & 0x80000000) == 0)
        break;
      v20 = v16;
      if (v16)
        goto LABEL_17;
LABEL_18:
      v5 = v4 + v5;
      v14 += 8;
      *(_BYTE *)v13 = (_BYTE)v20;
      v13 = (_DWORD *)((char *)v13 + 1);
      if (!--a4)
        return;
    }
    v20 = (_QWORD *)(v17 + 8 * v19);
LABEL_17:
    *(_QWORD *)v14 = *v20;
    LOBYTE(v20) = -1;
    goto LABEL_18;
  }
  if (v5 >= v9)
  {
    v11 = v12;
    if (v5 <= v10)
      v11 = (int)(float)(v8 * (float)(v5 - v7));
  }
  if ((v11 & 0x80000000) == 0 || v16)
  {
    v21 = (int *)(v17 + 8 * v11);
    if (v11 < 0)
      v22 = (int *)v16;
    else
      v22 = v21;
    v23 = *v22;
    v24 = v22[1];
    v25 = a4 + 4;
    do
    {
      *(_DWORD *)v14 = v23;
      *(_DWORD *)(v14 + 4) = v24;
      *(_DWORD *)(v14 + 8) = v23;
      *(_DWORD *)(v14 + 12) = v24;
      *(_DWORD *)(v14 + 16) = v23;
      *(_DWORD *)(v14 + 20) = v24;
      v25 -= 4;
      *(_DWORD *)(v14 + 24) = v23;
      *(_DWORD *)(v14 + 28) = v24;
      v14 += 32;
      *v13++ = -1;
    }
    while (v25 > 4);
  }
  else
  {
    if (a4 >= 4)
      v18 = 4;
    else
      v18 = a4;
    bzero(v13, ((a4 - v18 + 3) & 0xFFFFFFFC) + 4);
  }
}

void rgba64_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint32x2_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  int v44;
  int32x2_t v45;
  int32x2_t v46;
  void *v47;
  void (*v48)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint32x2_t *v49;
  _BYTE *v50;
  unsigned int v51;
  int v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  float v66;
  int v67;
  float v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int32 v76;
  unint64_t v77;
  int8x8_t v78;
  int32x2_t v79;
  uint32x2_t v80;
  int8x8_t v81;
  uint64x2_t v82;
  int8x16_t v83;
  uint64_t v84;
  float *v85;
  float v86;
  float v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  float v92;
  int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  uint32x2_t v109;
  uint32x2_t v110;
  uint32x2_t v111;
  int32x2_t v112;
  int8x8_t v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  unsigned int v117;
  uint32x2_t *v118;
  uint32x2_t *v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  uint32x2_t *v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  int32x2_t v137;
  int32x2_t v138;
  int32x2_t v139;
  int32x2_t v140;
  int32x2_t v141;
  uint32x2_t v142;
  uint32x2_t v143;
  uint32x2_t v144;
  int32x2_t v145;
  int8x8_t v146;
  int v147;
  unsigned int v148;
  int v149;
  int v150;
  int32x2_t v151;
  int32x2_t v152;
  int32x2_t v153;
  int32x2_t v154;
  int32x2_t v155;
  uint32x2_t v156;
  uint32x2_t v157;
  uint32x2_t v158;
  int32x2_t v159;
  int8x8_t v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int16 v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  unsigned __int8 *v173;
  int v174;
  unint64_t v175;
  int32x2_t v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  int32x2_t v180;
  uint32x2_t v181;
  uint32x2_t v182;
  uint32x2_t v183;
  int32x2_t v184;
  int8x8_t v185;
  int v186;
  int v187;
  int32x2_t v188;
  int32x2_t v189;
  int32x2_t v190;
  int32x2_t v191;
  int32x2_t v192;
  uint32x2_t v193;
  uint32x2_t v194;
  uint32x2_t v195;
  int32x2_t v196;
  int8x8_t v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  int32x2_t v202;
  int32x2_t v203;
  int32x2_t v204;
  int32x2_t v205;
  int32x2_t v206;
  uint32x2_t v207;
  uint32x2_t v208;
  uint32x2_t v209;
  int32x2_t v210;
  int8x8_t v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned __int16 v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned __int16 v220;
  unsigned int v221;
  unint64_t v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned __int16 v228;
  unint64_t v229;
  int v230;
  unsigned __int8 *v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned __int16 v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64x2_t v241;
  unint64_t v242;
  int64x2_t v243;
  int8x16_t v244;
  unint64_t v245;
  BOOL v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int v256;
  int v257;
  unint64_t v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  int v271;
  unint64_t v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  int v278;
  int v279;
  unint64_t v280;
  unint64_t v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  int v302;
  int v303;
  unint64_t v304;
  unint64_t v305;
  int v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  unint64_t v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  unint64_t v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  int v342;
  int v343;
  unint64_t v344;
  unint64_t v345;
  int v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  int v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  int v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  int v358;
  int v359;
  unint64_t v360;
  unint64_t v361;
  int v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  int v366;
  int v367;
  unint64_t v368;
  unint64_t v369;
  int v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unsigned __int8 *v374;
  int v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  int v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  int v384;
  uint32x2_t *v385;
  int v386;
  unsigned __int8 *v387;
  int v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  int v393;
  unint64_t v394;
  int v395;
  int v396;
  int v397;
  int v398;
  unint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  int v410;
  _QWORD *v411;
  int v412;
  void *v413;
  uint64x2_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;

  v409 = a3;
  v419 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v404 = (int)v4;
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(float *)(a2 + 184);
  v414.i64[0] = *(_QWORD *)(a1 + 136);
  v416 = *(_QWORD *)(a2 + 96);
  v417 = *(_QWORD *)(a2 + 104);
  v418 = v6;
  v10 = *(int *)(a1 + 24);
  v9 = *(int *)(a1 + 28);
  v11 = *(int *)(a1 + 16);
  v12 = *(int *)(a1 + 20);
  v13 = *(int *)(a1 + 12);
  v415 = *(_DWORD *)(a1 + 8);
  v408 = a1;
  v411 = (_QWORD *)a2;
  v14 = *(int *)(a2 + 16);
  v15 = (v14 + 10) * v5;
  if (v15 > 65439)
  {
    v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    v17 = v18;
    v20 = v18;
    v21 = v411;
    v22 = v408;
    if (!v18)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v17 = (char *)&v399 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    v20 = 0;
    v21 = v411;
    v22 = v408;
  }
  v401 = v20;
  v410 = (int)(float)((float)(v8 * 65535.0) + 0.5);
  v400 = v7 + (v10 - 1) * v9 + 8 * v12;
  v23 = v9 >> 3;
  v24 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = v24 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v14)
    v26 = 8 * v5;
  else
    v26 = 0;
  v27 = v25 + v26;
  v21[18] = v24;
  v21[19] = v25 + v26;
  v21[20] = v25;
  v28 = (uint32x2_t *)(v7 + 8 * (v13 + v23 * v11));
  v29 = v404;
  v399 = v9 >> 3;
  v407 = v23 - v404;
  v30 = *(int *)(v22 + 104);
  v31 = *(_DWORD *)(v22 + 108);
  v32 = *(unsigned __int8 *)(v22 + 2);
  if (v32 == 6 || v32 == 1)
  {
    v33 = v416;
    v34 = v417;
    if (!v414.i64[0])
      goto LABEL_475;
    v35 = 0;
    v36 = 0;
    v37 = *(int *)(v408 + 124);
    v38 = (unsigned __int8 *)(v414.i64[0] + v30 + (int)v37 * (uint64_t)v31);
    v29 = v404;
    v406 = v37 - v404;
    v39 = v409;
    v40 = v411;
  }
  else
  {
    v34 = v417;
    if (v414.i64[0])
    {
      shape_enum_clip_alloc((uint64_t)v18, v19, (int *)v414.i64[0], 1, 1, 1, v30, v31, v4, v415);
      v40 = v411;
      if (!v41)
        goto LABEL_475;
      v36 = 0;
      v42 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
      if (!(_DWORD)v14)
        v42 = 8 * v5;
      v406 = -v404;
      v38 = (unsigned __int8 *)(v27 + v42 + 16);
      v39 = v409;
      v33 = v416;
      v35 = v41;
      while (1)
      {
LABEL_478:
        while (1)
        {
          v397 = *((_DWORD *)v38 - 4);
          v398 = v397 - v36;
          if (v397 <= v36)
            break;
          v415 -= v398;
          if (v415 < 1)
            goto LABEL_473;
          v33 += v40[16] * v398;
          v34 += v40[17] * v398;
          v28 += v399 * v398;
          v36 = v397;
        }
        if (v36 < *((_DWORD *)v38 - 3) + v397)
          break;
        if (!shape_enum_clip_scan((uint64_t)v35, (_DWORD *)v38 - 4))
          goto LABEL_473;
      }
      v29 = v404;
    }
    else
    {
      v38 = 0;
      v35 = 0;
      v406 = 0;
      v36 = 0;
      v39 = v409;
      v40 = v411;
      v33 = v416;
    }
  }
  v43 = v35;
  v44 = v410 ^ 0xFFFF;
  v45 = vdup_n_s32(v410 ^ 0xFFFFu);
  v403 = (v4 - 1) + 1;
  v402 = -v29;
  v405 = v400 - 8;
  v46 = vdup_n_s32(0x101u);
  v414 = (uint64x2_t)xmmword_185004F50;
  v47 = v43;
  while (2)
  {
    v412 = v36;
    v413 = v47;
    v48 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v40;
    v416 = v33;
    v417 = v34;
    v48(v40, v33, v34, v4);
    v49 = (uint32x2_t *)v40[20];
    v50 = (_BYTE *)v40[18];
    v51 = *((_DWORD *)v40 + 2);
    if (v51 == *((_DWORD *)v40 + 3))
    {
      if (v410 != 0xFFFF)
      {
        v52 = v4;
        v53 = (_BYTE *)v40[18];
        do
        {
          if (*v53)
          {
            v54 = v49->u16[0] * v44 + 0x8000;
            v55 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v44 + 0x8000;
            *v49 = (uint32x2_t)(((HIWORD(*(unint64_t *)v49)
                                - ((HIWORD(*(unint64_t *)v49) * v44
                                  + 0x8000
                                  + ((HIWORD(*(unint64_t *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49) - ((v55 + HIWORD(v55)) >> 16)) << 32) | ((HIWORD(v49->u32[0]) - ((HIWORD(v49->u32[0]) * v44 + 0x8000 + ((HIWORD(v49->u32[0]) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(_QWORD *)v49 - ((v54 + HIWORD(v54)) >> 16)));
          }
          ++v53;
          ++v49;
          --v52;
        }
        while (v52);
        v49 += v402;
        v50 += v403 + v402;
      }
    }
    else
    {
      v56 = v40[19];
      v57 = HIWORD(v51) & 0x3F;
      if (v57 == 16)
      {
        if (v410 == 0xFFFF)
        {
          v95 = 0;
          do
          {
            if (v50[v95])
              v49[v95] = *(uint32x2_t *)(v56 + 8 * v95);
            ++v95;
          }
          while ((_DWORD)v4 != (_DWORD)v95);
        }
        else
        {
          v73 = 0;
          do
          {
            if (v50[v73])
            {
              v74 = *(_QWORD *)(v56 + 8 * v73);
              v49[v73] = (uint32x2_t)(((HIWORD(v74)
                                      - ((HIWORD(v74) * v44 + 0x8000 + ((HIWORD(v74) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v74) - ((WORD2(v74) * v44 + 0x8000 + ((WORD2(v74) * v44 + 0x8000) >> 16)) >> 16)) << 32) | ((WORD1(v74) - ((WORD1(v74) * v44 + 0x8000 + ((WORD1(v74) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v74 - (((unsigned __int16)v74 * v44 + 0x8000 + (((unsigned __int16)v74 * v44 + 0x8000) >> 16)) >> 16)));
            }
            ++v73;
          }
          while ((_DWORD)v4 != (_DWORD)v73);
        }
      }
      else if (v57 == 32)
      {
        if (v410 == 0xFFFF)
        {
          v84 = 0;
          v85 = (float *)(v56 + 8);
          do
          {
            if (v50[v84])
            {
              v86 = v85[1];
              if (v86 <= 0.0)
              {
                v91 = 0;
              }
              else
              {
                v87 = *(v85 - 2);
                LODWORD(v88) = (int)(float)((float)(v86 * 65535.0) + 0.5);
                if (v86 <= 1.0)
                  v88 = v88;
                else
                  v88 = 0xFFFFLL;
                LOWORD(v89) = v88;
                if (v86 > 1.0)
                  v86 = 1.0;
                LOWORD(v90) = v88;
                if (v87 <= v86)
                {
                  if (v87 >= 0.0)
                    v90 = (int)(float)((float)(v87 * 65535.0) + 0.5);
                  else
                    LOWORD(v90) = 0;
                }
                v92 = *(v85 - 1);
                v93 = v88;
                if (v92 <= v86)
                {
                  if (v92 >= 0.0)
                    v93 = (int)(float)((float)(v92 * 65535.0) + 0.5);
                  else
                    v93 = 0;
                }
                v94 = *v85;
                if (*v85 <= v86)
                {
                  if (v94 >= 0.0)
                    v89 = (int)(float)((float)(v94 * 65535.0) + 0.5);
                  else
                    LOWORD(v89) = 0;
                }
                v91 = (v88 << 48) | ((unint64_t)(unsigned __int16)v89 << 32) | (v93 << 16) | (unsigned __int16)v90;
              }
              v49[v84] = (uint32x2_t)v91;
            }
            v85 += 4;
            ++v84;
          }
          while ((_DWORD)v4 != (_DWORD)v84);
        }
        else
        {
          v58 = 0;
          v59 = (float *)(v56 + 8);
          do
          {
            if (v50[v58])
            {
              v60 = v59[1];
              if (v60 <= 0.0)
              {
                v65 = 0;
              }
              else
              {
                v61 = *(v59 - 2);
                v62 = (int)(float)((float)(v60 * 65535.0) + 0.5);
                if (v60 > 1.0)
                  v62 = 0xFFFF;
                v63 = v62;
                if (v60 > 1.0)
                  v60 = 1.0;
                v64 = v62;
                if (v61 <= v60)
                {
                  if (v61 >= 0.0)
                    v64 = (int)(float)((float)(v61 * 65535.0) + 0.5);
                  else
                    v64 = 0;
                }
                v66 = *(v59 - 1);
                v67 = v62;
                if (v66 <= v60)
                {
                  if (v66 >= 0.0)
                    v67 = (int)(float)((float)(v66 * 65535.0) + 0.5);
                  else
                    v67 = 0;
                }
                v68 = *v59;
                if (*v59 <= v60)
                {
                  if (v68 >= 0.0)
                    v63 = (int)(float)((float)(v68 * 65535.0) + 0.5);
                  else
                    v63 = 0;
                }
                v69 = v64 * v44;
                v70 = v67 * v44;
                v71 = v63 * v44;
                v72 = v62 * v44;
                if ((v64 * v44) >= 0xFFFE8000)
                  v69 = -98304;
                if (v70 >= 0xFFFE8000)
                  v70 = -98304;
                if (v71 >= 0xFFFE8000)
                  v71 = -98304;
                if (v72 >= 0xFFFE8000)
                  v72 = -98304;
                v65 = ((unint64_t)(v62 - ((v72 + 0x8000 + ((v72 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(v63 - ((v71 + 0x8000 + ((v71 + 0x8000) >> 16)) >> 16)) << 32) | ((v67 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v64 - ((v69 + 0x8000 + ((v69 + 0x8000) >> 16)) >> 16));
              }
              v49[v58] = (uint32x2_t)v65;
            }
            v59 += 4;
            ++v58;
          }
          while ((_DWORD)v4 != (_DWORD)v58);
        }
      }
      else if (v410 == 0xFFFF)
      {
        v96 = 0;
        do
        {
          if (v50[v96])
          {
            v97 = *(unsigned int *)(v56 + 4 * v96);
            v98 = *(_DWORD *)(v56 + 4 * v96);
            v49[v96] = (uint32x2_t)(((unint64_t)(v98 | (v98 << 8)) << 48) | ((unint64_t)(BYTE1(v97) | (BYTE1(v97) << 8)) << 32) | v97 & 0xFF0000 | (BYTE2(v97) << 24) | (v97 >> 24) | (v97 >> 24 << 8));
          }
          ++v96;
        }
        while ((_DWORD)v4 != (_DWORD)v96);
      }
      else
      {
        v75 = 0;
        do
        {
          if (v50[v75])
          {
            v76 = *(_DWORD *)(v56 + 4 * v75);
            HIDWORD(v77) = HIBYTE(v76);
            LODWORD(v77) = v76;
            v78.i32[0] = v76 >> 8;
            v78.i32[1] = v76;
            v79 = vmul_s32((int32x2_t)vand_s8(v78, (int8x8_t)0xFF000000FFLL), v46);
            v80 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v79, v45);
            v81 = vand_s8((int8x8_t)vsub_s32(v79, (int32x2_t)vshr_n_u32(vsra_n_u32(v80, v80, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v82.i64[0] = v81.u32[0];
            v82.i64[1] = v81.u32[1];
            v83 = (int8x16_t)vshlq_u64(v82, v414);
            v49[v75] = (uint32x2_t)(vorrq_s8(v83, (int8x16_t)vdupq_laneq_s64((int64x2_t)v83, 1)).u64[0] | (((BYTE2(v76) | (BYTE2(v76) << 8)) - (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000 + (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)((v77 >> 24) - (((v77 >> 24) * v44 + 0x8000 + (((v77 >> 24) * v44 + 0x8000) >> 16)) >> 16)));
          }
          ++v75;
        }
        while ((_DWORD)v4 != (_DWORD)v75);
      }
    }
    switch(v39)
    {
      case 0:
        v99 = v4;
        v100 = v38;
        v101 = v416;
        v102 = v417;
        do
        {
          v103 = *v50;
          if (*v50)
          {
            if (v38)
              v103 = ((unsigned __int16)(*v100 * (_WORD)v103 + ((*v100 * v103) >> 8) + 1) >> 8);
            if (v103)
            {
              if (v103 == 255)
              {
                *v28 = 0;
              }
              else
              {
                v104 = (int32x2_t)*v28;
                v105.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v106.i32[0] = v105.i32[0];
                v106.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                v107 = vdup_n_s32(v103 | (v103 << 8));
                v108.i32[0] = v28->u16[0];
                v108.i32[1] = HIWORD(*(unint64_t *)v28);
                v109 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v106, v107);
                v110 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v108, v107);
                v105.i32[1] = HIDWORD(*(unint64_t *)v28);
                v111 = (uint32x2_t)vsub_s32(v105, (int32x2_t)vshr_n_u32(vsra_n_u32(v109, v109, 0x10uLL), 0x10uLL));
                v104.i32[1] = v108.i32[1];
                v112 = vsub_s32(v104, (int32x2_t)vshr_n_u32(vsra_n_u32(v110, v110, 0x10uLL), 0x10uLL));
                v113 = (int8x8_t)vshl_n_s32(v112, 0x10uLL);
                v112.i16[1] = 0;
                v112.i32[1] = v113.i32[1];
                v113.i32[0] = vshl_u32(v111, (uint32x2_t)0xFFFF00000010).u32[0];
                v113.i32[1] = v111.u16[2];
                *v28 = (uint32x2_t)vorr_s8(v113, (int8x8_t)v112);
              }
            }
          }
          ++v50;
          v100 += v38 != 0;
          ++v28;
          --v99;
        }
        while (v99);
        v38 = &v100[v406];
        v28 += v407;
        goto LABEL_430;
      case 1:
        v114 = *v50;
        if (v38)
        {
          v115 = v50 + 1;
          v116 = v4;
          do
          {
            if (v114)
            {
              v117 = *v38 * v114 + ((*v38 * v114) >> 8) + 1;
              v118 = (uint32x2_t *)v405;
              if (v405 >= (unint64_t)v28)
                v118 = v28;
              if ((unint64_t)v118 >= *(_QWORD *)(v408 + 40))
                v119 = v118;
              else
                v119 = *(uint32x2_t **)(v408 + 40);
              if (BYTE1(v117))
              {
                if (BYTE1(v117) == 255)
                  *v119 = *v49;
                else
                  rgba64_DMplusDM(v119, (unint64_t)*v49, (unsigned __int16)(257 * (v117 >> 8)), (unint64_t)*v119, (unsigned __int16)~(257 * (v117 >> 8)));
              }
            }
            else
            {
              v119 = v28;
            }
            v120 = *v115++;
            v114 = v120;
            ++v49;
            ++v38;
            v28 = v119 + 1;
            --v116;
          }
          while (v116);
          v38 += v406;
          v102 = v417;
        }
        else
        {
          v383 = v50 + 1;
          v384 = v4;
          v102 = v417;
          do
          {
            v385 = (uint32x2_t *)v405;
            if (v405 >= (unint64_t)v28)
              v385 = v28;
            if ((unint64_t)v385 >= *(_QWORD *)(v408 + 40))
              v119 = v385;
            else
              v119 = *(uint32x2_t **)(v408 + 40);
            if (v114)
            {
              if (v114 == 255)
                *v119 = *v49;
              else
                rgba64_DMplusDM(v119, (unint64_t)*v49, v114 | (v114 << 8), (unint64_t)*v119, (v114 | (v114 << 8)) ^ 0xFFFF);
            }
            v386 = *v383++;
            v114 = v386;
            ++v49;
            v28 = v119 + 1;
            --v384;
          }
          while (v384);
          v38 = 0;
        }
        v28 = &v119[v407 + 1];
        v40 = v411;
        v101 = v416;
        goto LABEL_430;
      case 2:
        v121 = *v50;
        if (v38)
        {
          v122 = v50 + 1;
          v123 = v4;
          while (1)
          {
            v124 = v28;
            if (!v121)
              goto LABEL_145;
            v125 = *v38 * v121 + ((*v38 * v121) >> 8) + 1;
            if (!BYTE1(v125))
              goto LABEL_145;
            if (BYTE1(v125) == 255)
            {
              v126 = (uint64_t)*v49;
              v127 = HIWORD(*(unint64_t *)v49);
              if ((_DWORD)v127)
              {
                if ((_DWORD)v127 != 0xFFFF)
                {
                  v131 = (unint64_t)*v28;
                  v132 = v127 ^ 0xFFFF;
                  goto LABEL_144;
                }
                *v28 = (uint32x2_t)v126;
              }
            }
            else
            {
              v129 = HIWORD(*(unint64_t *)v49);
              v130 = (257 * (v125 >> 8)) ^ 0xFFFF;
              if ((_WORD)v129 != (v130 * (_DWORD)v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16)
              {
                v128 = (unint64_t)*v49;
                v126 = ((unint64_t)(v129
                                         - ((v130 * (_DWORD)v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v128) - ((WORD2(v128) * v130 + 0x8000 + ((WORD2(v128) * v130 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v128 - (((unsigned __int16)v128 * v130 + 0x8000 + (((unsigned __int16)v128 * v130 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v128) - ((WORD1(v128) * v130 + 0x8000 + ((WORD1(v128) * v130 + 0x8000) >> 16)) >> 16)) << 16);
                v131 = (unint64_t)*v28;
                v132 = (unsigned __int16)~(v129
                                         - ((v130 * (_DWORD)v129 + 0x8000 + ((v130 * v129 + 0x8000) >> 16)) >> 16));
LABEL_144:
                rgba64_DplusDM((uint16x4_t *)v28, v126, v131, v132);
              }
            }
LABEL_145:
            v133 = *v122++;
            v121 = v133;
            ++v49;
            ++v38;
            ++v28;
            if (!--v123)
            {
              v38 += v406;
LABEL_471:
              v28 = &v124[v407 + 1];
              goto LABEL_428;
            }
          }
        }
        v387 = v50 + 1;
        v388 = v4;
        while (1)
        {
          if (v121)
          {
            if (v121 == 255)
            {
              v389 = (uint64_t)*v49;
              v390 = HIWORD(*(unint64_t *)v49);
              if ((_DWORD)v390)
              {
                if ((_DWORD)v390 != 0xFFFF)
                {
                  v394 = (unint64_t)*v28;
                  v395 = v390 ^ 0xFFFF;
                  goto LABEL_468;
                }
                *v28 = (uint32x2_t)v389;
              }
            }
            else
            {
              v392 = HIWORD(*(unint64_t *)v49);
              v393 = (257 * v121) ^ 0xFFFF;
              if ((_WORD)v392 != (v393 * (_DWORD)v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16)
              {
                v391 = (unint64_t)*v49;
                v389 = ((unint64_t)(v392
                                         - ((v393 * (_DWORD)v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v391) - ((WORD2(v391) * v393 + 0x8000 + ((WORD2(v391) * v393 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v391 - (((unsigned __int16)v391 * v393 + 0x8000 + (((unsigned __int16)v391 * v393 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v391) - ((WORD1(v391) * v393 + 0x8000 + ((WORD1(v391) * v393 + 0x8000) >> 16)) >> 16)) << 16);
                v394 = (unint64_t)*v28;
                v395 = (unsigned __int16)~(v392
                                         - ((v393 * (_DWORD)v392 + 0x8000 + ((v393 * v392 + 0x8000) >> 16)) >> 16));
LABEL_468:
                rgba64_DplusDM((uint16x4_t *)v28, v389, v394, v395);
              }
            }
          }
          v396 = *v387++;
          v121 = v396;
          ++v49;
          ++v28;
          if (!--v388)
          {
            v38 = 0;
            v124 = v28 - 1;
            goto LABEL_471;
          }
        }
      case 3:
        v134 = v4;
        v135 = v38;
        do
        {
          v136 = *v50;
          if (*v50)
          {
            if (v38)
              v136 = ((unsigned __int16)(*v135 * (_WORD)v136 + ((*v135 * v136) >> 8) + 1) >> 8);
            if (v136)
            {
              if (v136 == 255)
              {
                v137 = (int32x2_t)*v49;
                v138.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v139.i32[0] = v138.i32[0];
                v139.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                v140 = vdup_n_s32(v28->u16[3] ^ 0xFFFFu);
                v141.i32[0] = v49->u16[0];
                v141.i32[1] = HIWORD(*(unint64_t *)v49);
                v142 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v139, v140);
                v143 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v141, v140);
                v138.i32[1] = HIDWORD(*(unint64_t *)v49);
                v144 = (uint32x2_t)vsub_s32(v138, (int32x2_t)vshr_n_u32(vsra_n_u32(v142, v142, 0x10uLL), 0x10uLL));
                v137.i32[1] = v141.i32[1];
                v145 = vsub_s32(v137, (int32x2_t)vshr_n_u32(vsra_n_u32(v143, v143, 0x10uLL), 0x10uLL));
                v146 = (int8x8_t)vshl_n_s32(v145, 0x10uLL);
                v145.i16[1] = 0;
                v145.i32[1] = v146.i32[1];
                v146.i32[0] = vshl_u32(v144, (uint32x2_t)0xFFFF00000010).u32[0];
                v146.i32[1] = v144.u16[2];
                *v28 = (uint32x2_t)vorr_s8(v146, (int8x8_t)v145);
              }
              else
              {
                v147 = v136 | (v136 << 8);
                v148 = HIWORD(*(unint64_t *)v28) * v147 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v49, (v148 + HIWORD(v148)) >> 16, (unint64_t)*v28, v147 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v135 += v38 != 0;
          ++v28;
          --v134;
        }
        while (v134);
        goto LABEL_166;
      case 4:
        v149 = v4;
        v135 = v38;
        do
        {
          v150 = *v50;
          if (*v50)
          {
            if (v38)
              v150 = ((unsigned __int16)(*v135 * (_WORD)v150 + ((*v135 * v150) >> 8) + 1) >> 8);
            if (v150)
            {
              if (v150 == 255)
              {
                v151 = (int32x2_t)*v49;
                v152.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v153.i32[0] = v152.i32[0];
                v153.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                v154 = vdup_n_s32(v28->u16[3]);
                v155.i32[0] = v49->u16[0];
                v155.i32[1] = HIWORD(*(unint64_t *)v49);
                v156 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v153, v154);
                v157 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v155, v154);
                v152.i32[1] = HIDWORD(*(unint64_t *)v49);
                v158 = (uint32x2_t)vsub_s32(v152, (int32x2_t)vshr_n_u32(vsra_n_u32(v156, v156, 0x10uLL), 0x10uLL));
                v151.i32[1] = v155.i32[1];
                v159 = vsub_s32(v151, (int32x2_t)vshr_n_u32(vsra_n_u32(v157, v157, 0x10uLL), 0x10uLL));
                v160 = (int8x8_t)vshl_n_s32(v159, 0x10uLL);
                v159.i16[1] = 0;
                v159.i32[1] = v160.i32[1];
                v160.i32[0] = vshl_u32(v158, (uint32x2_t)0xFFFF00000010).u32[0];
                v160.i32[1] = v158.u16[2];
                *v28 = (uint32x2_t)vorr_s8(v160, (int8x8_t)v159);
              }
              else
              {
                v161 = v150 | (v150 << 8);
                v162 = (HIWORD(*(unint64_t *)v28) ^ 0xFFFF) * v161 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v49, (v162 + HIWORD(v162)) >> 16, (unint64_t)*v28, v161 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v135 += v38 != 0;
          ++v28;
          --v149;
        }
        while (v149);
LABEL_166:
        v38 = &v135[v406];
        goto LABEL_427;
      case 5:
        v163 = v4;
        v164 = v38;
        do
        {
          v165 = *v50;
          if (*v50)
          {
            if (!v38
              || (v165 = ((unsigned __int16)(*v164 * (_WORD)v165
                                                            + ((*v164 * v165) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v166 = (v165 | (v165 << 8)) ^ 0xFFFF;
              v167 = v49->u16[0] * v166 + 0x8000;
              v168 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v166 + 0x8000;
              v169 = *(_QWORD *)v49 - ((v167 + HIWORD(v167)) >> 16);
              v170 = HIWORD(v49->u32[0])
                   - ((HIWORD(v49->u32[0]) * v166 + 0x8000 + ((HIWORD(v49->u32[0]) * v166 + 0x8000) >> 16)) >> 16);
              v171 = HIWORD(*(unint64_t *)v49)
                   - ((v166 * HIWORD(*(unint64_t *)v49)
                     + 0x8000
                     + ((v166 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v171 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v168 + HIWORD(v168)) >> 16)) << 32) | v169 | ((unsigned __int16)v170 << 16), HIWORD(*(unint64_t *)v28), (unint64_t)*v28, (unsigned __int16)~(_WORD)v171);
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v163;
        }
        while (v163);
        goto LABEL_426;
      case 6:
        v172 = v4;
        v173 = v38;
        do
        {
          v174 = *v50;
          if (*v50)
          {
            if (!v38
              || (v174 = ((unsigned __int16)(*v173 * (_WORD)v174
                                                            + ((*v173 * v174) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v175 = HIWORD(*(unint64_t *)v28);
              if ((_WORD)v175 != 0xFFFF)
              {
                if ((unsigned __int16)~(_WORD)v175 == 0xFFFF)
                {
                  v176 = (int32x2_t)*v49;
                  v177.i32[0] = vshl_u32(*v49, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                  v178.i32[0] = v177.i32[0];
                  v178.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v49);
                  v179 = vdup_n_s32((v174 | (v174 << 8)) ^ 0xFFFFu);
                  v180.i32[0] = v49->u16[0];
                  v180.i32[1] = HIWORD(*(unint64_t *)v49);
                  v181 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v178, v179);
                  v182 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v180, v179);
                  v177.i32[1] = HIDWORD(*(unint64_t *)v49);
                  v183 = (uint32x2_t)vsub_s32(v177, (int32x2_t)vshr_n_u32(vsra_n_u32(v181, v181, 0x10uLL), 0x10uLL));
                  v176.i32[1] = v180.i32[1];
                  v184 = vsub_s32(v176, (int32x2_t)vshr_n_u32(vsra_n_u32(v182, v182, 0x10uLL), 0x10uLL));
                  v185 = (int8x8_t)vshl_n_s32(v184, 0x10uLL);
                  v184.i16[1] = 0;
                  v184.i32[1] = v185.i32[1];
                  v185.i32[0] = vshl_u32(v183, (uint32x2_t)0xFFFF00000010).u32[0];
                  v185.i32[1] = v183.u16[2];
                  *v28 = (uint32x2_t)vorr_s8(v185, (int8x8_t)v184);
                }
                else
                {
                  rgba64_DplusDM((uint16x4_t *)v28, (uint64_t)*v28, (unint64_t)*v49, (257 * v174 * (unsigned __int16)~(_WORD)v175+ 0x8000+ ((257 * v174 * (unsigned __int16)~(_WORD)v175 + 0x8000) >> 16)) >> 16);
                }
              }
            }
          }
          ++v50;
          ++v49;
          v173 += v38 != 0;
          ++v28;
          --v172;
        }
        while (v172);
        v38 = &v173[v406];
        v28 += v407;
        v39 = v409;
        goto LABEL_429;
      case 7:
        v186 = v4;
        v164 = v38;
        do
        {
          v187 = *v50;
          if (*v50)
          {
            if (v38)
              v187 = ((unsigned __int16)(*v164 * (_WORD)v187 + ((*v164 * v187) >> 8) + 1) >> 8);
            if (v187)
            {
              if (v187 == 255)
              {
                v188 = (int32x2_t)*v28;
                v189.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v190.i32[0] = v189.i32[0];
                v190.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                v191 = vdup_n_s32(v49->u16[3] ^ 0xFFFFu);
                v192.i32[0] = v28->u16[0];
                v192.i32[1] = HIWORD(*(unint64_t *)v28);
                v193 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v190, v191);
                v194 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v192, v191);
                v189.i32[1] = HIDWORD(*(unint64_t *)v28);
                v195 = (uint32x2_t)vsub_s32(v189, (int32x2_t)vshr_n_u32(vsra_n_u32(v193, v193, 0x10uLL), 0x10uLL));
                v188.i32[1] = v192.i32[1];
                v196 = vsub_s32(v188, (int32x2_t)vshr_n_u32(vsra_n_u32(v194, v194, 0x10uLL), 0x10uLL));
                v197 = (int8x8_t)vshl_n_s32(v196, 0x10uLL);
                v196.i16[1] = 0;
                v196.i32[1] = v197.i32[1];
                v197.i32[0] = vshl_u32(v195, (uint32x2_t)0xFFFF00000010).u32[0];
                v197.i32[1] = v195.u16[2];
                *v28 = (uint32x2_t)vorr_s8(v197, (int8x8_t)v196);
              }
              else
              {
                v198 = v187 | (v187 << 8);
                v199 = v49->u16[3] * v198 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v28, (v199 + HIWORD(v199)) >> 16, (unint64_t)*v28, v198 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v186;
        }
        while (v186);
        goto LABEL_426;
      case 8:
        v200 = v4;
        v164 = v38;
        do
        {
          v201 = *v50;
          if (*v50)
          {
            if (v38)
              v201 = ((unsigned __int16)(*v164 * (_WORD)v201 + ((*v164 * v201) >> 8) + 1) >> 8);
            if (v201)
            {
              if (v201 == 255)
              {
                v202 = (int32x2_t)*v28;
                v203.i32[0] = vshl_u32(*v28, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
                v204.i32[0] = v203.i32[0];
                v204.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v28);
                v205 = vdup_n_s32(v49->u16[3]);
                v206.i32[0] = v28->u16[0];
                v206.i32[1] = HIWORD(*(unint64_t *)v28);
                v207 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v204, v205);
                v208 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v206, v205);
                v203.i32[1] = HIDWORD(*(unint64_t *)v28);
                v209 = (uint32x2_t)vsub_s32(v203, (int32x2_t)vshr_n_u32(vsra_n_u32(v207, v207, 0x10uLL), 0x10uLL));
                v202.i32[1] = v206.i32[1];
                v210 = vsub_s32(v202, (int32x2_t)vshr_n_u32(vsra_n_u32(v208, v208, 0x10uLL), 0x10uLL));
                v211 = (int8x8_t)vshl_n_s32(v210, 0x10uLL);
                v210.i16[1] = 0;
                v210.i32[1] = v211.i32[1];
                v211.i32[0] = vshl_u32(v209, (uint32x2_t)0xFFFF00000010).u32[0];
                v211.i32[1] = v209.u16[2];
                *v28 = (uint32x2_t)vorr_s8(v211, (int8x8_t)v210);
              }
              else
              {
                v212 = v201 | (v201 << 8);
                v213 = (v49->u16[3] ^ 0xFFFF) * v212 + 0x8000;
                rgba64_DMplusDM(v28, (unint64_t)*v28, (v213 + HIWORD(v213)) >> 16, (unint64_t)*v28, v212 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v200;
        }
        while (v200);
        goto LABEL_426;
      case 9:
        v214 = v4;
        v164 = v38;
        do
        {
          v215 = *v50;
          if (*v50)
          {
            if (!v38
              || (v215 = ((unsigned __int16)(*v164 * (_WORD)v215
                                                            + ((*v164 * v215) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v216 = ~(v215 | ((_WORD)v215 << 8));
              v217 = v216;
              v218 = v49->u16[0] * v216 + 0x8000;
              v219 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v216 + 0x8000;
              v220 = *(_QWORD *)v49 - ((v218 + HIWORD(v218)) >> 16);
              v221 = HIWORD(v49->u32[0])
                   - ((HIWORD(v49->u32[0]) * v217 + 0x8000 + ((HIWORD(v49->u32[0]) * v217 + 0x8000) >> 16)) >> 16);
              v222 = HIWORD(*(unint64_t *)v49)
                   - ((HIWORD(*(unint64_t *)v49) * v217
                     + 0x8000
                     + ((HIWORD(*(unint64_t *)v49) * v217 + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v222 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v219 + HIWORD(v219)) >> 16)) << 32) | v220 | ((unsigned __int16)v221 << 16), HIWORD(*(unint64_t *)v28) ^ 0xFFFF, (unint64_t)*v28, (unsigned __int16)(v222 + v216));
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v214;
        }
        while (v214);
        goto LABEL_426;
      case 10:
        v223 = v4;
        v164 = v38;
        do
        {
          v224 = *v50;
          if (*v50)
          {
            if (!v38
              || (v224 = ((unsigned __int16)(*v164 * (_WORD)v224
                                                            + ((*v164 * v224) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v225 = (v224 | (v224 << 8)) ^ 0xFFFF;
              v226 = v49->u16[0] * v225 + 0x8000;
              v227 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v225 + 0x8000;
              v228 = *(_QWORD *)v49 - ((v226 + HIWORD(v226)) >> 16);
              LOWORD(v226) = HIWORD(v49->u32[0])
                           - ((HIWORD(v49->u32[0]) * v225
                             + 0x8000
                             + ((HIWORD(v49->u32[0]) * v225 + 0x8000) >> 16)) >> 16);
              v229 = HIWORD(*(unint64_t *)v49)
                   - ((v225 * HIWORD(*(unint64_t *)v49)
                     + 0x8000
                     + ((v225 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16);
              rgba64_DMplusDM(v28, (v229 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)- ((v227 + HIWORD(v227)) >> 16)) << 32) | v228 | ((unsigned __int16)v226 << 16), HIWORD(*(unint64_t *)v28) ^ 0xFFFF, (unint64_t)*v28, (unsigned __int16)~(_WORD)v229);
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v223;
        }
        while (v223);
        goto LABEL_426;
      case 11:
        v230 = v4;
        v231 = v38;
        do
        {
          v232 = *v50;
          if (*v50)
          {
            if (!v38
              || (v232 = ((unsigned __int16)(*v231 * (_WORD)v232
                                                            + ((*v231 * v232) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v233 = (v232 | (v232 << 8)) ^ 0xFFFF;
              v234 = v49->u16[0] * v233 + 0x8000;
              v235 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v233 + 0x8000;
              v236 = *(_QWORD *)v49 - ((v234 + HIWORD(v234)) >> 16);
              LOWORD(v234) = HIWORD(v49->u32[0])
                           - ((HIWORD(v49->u32[0]) * v233
                             + 0x8000
                             + ((HIWORD(v49->u32[0]) * v233 + 0x8000) >> 16)) >> 16);
              v237 = (unsigned __int16)(HIWORD(*(unint64_t *)v49)
                                      - ((v233 * HIWORD(*(unint64_t *)v49)
                                        + 0x8000
                                        + ((v233 * HIWORD(*(unint64_t *)v49) + 0x8000) >> 16)) >> 16));
              v238 = (v237 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49)
                                                                        - ((v235 + HIWORD(v235)) >> 16)) << 32);
              v239 = v236 | ((unsigned __int16)v234 << 16);
              v240 = *(unint64_t *)v28 >> 16;
              v241 = (uint64x2_t)vdupq_n_s64(v238);
              if (v418)
                v242 = HIWORD(*(unint64_t *)v28);
              else
                v242 = 0xFFFFLL;
              v243 = vdupq_n_s64(0x20uLL);
              v243.i64[0] = v239;
              v244 = (int8x16_t)vshlq_u64(v241, (uint64x2_t)vnegq_s64(v243));
              v244.i64[0] = v239;
              v245 = v242 - (unsigned __int16)v240;
              if (v242 < (unsigned __int16)v240)
                v245 = 0;
              v246 = v237 >= v239 >> 16;
              v247 = v237 - (v239 >> 16);
              if (!v246)
                v247 = 0;
              v248 = v247 + v245;
              v249 = v242 + v237;
              if (v248 >= 0xFFFF)
                v248 = 0xFFFFLL;
              if (v249 >= 0xFFFF)
                v249 = 0xFFFFLL;
              v246 = v249 >= v248;
              v250 = v249 - v248;
              if (!v246)
                v250 = 0;
              v252.i64[0] = 0xFFFFLL;
              v252.i64[1] = 0xFFFFLL;
              v251.i64[1] = HIDWORD(*(unint64_t *)v28);
              *(uint32x2_t *)v251.i8 = *v28;
              v253 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v237), (uint64x2_t)vandq_s8(v244, v252)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v242), (uint64x2_t)vandq_s8(v251, v252)));
              v254 = vdupq_n_s64(v249);
              v255 = (int64x2_t)vqsubq_u64((uint64x2_t)v254, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v252, (uint64x2_t)v253), v253, v252));
              v254.i64[0] = v250;
              *v28 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v254), 0x10uLL), (int8x8_t)vmovn_s64(v255));
            }
          }
          ++v50;
          ++v49;
          v231 += v38 != 0;
          ++v28;
          --v230;
        }
        while (v230);
        v38 = &v231[v406];
        v28 += v407;
        goto LABEL_429;
      case 12:
        v256 = v4;
        v164 = v38;
        do
        {
          v257 = *v50;
          if (*v50)
          {
            if (!v38
              || (v257 = ((unsigned __int16)(*v164 * (_WORD)v257
                                                            + ((*v164 * v257) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v258 = HIWORD(*(unint64_t *)v49);
              v259 = (v257 | (v257 << 8)) ^ 0xFFFF;
              v260 = v49->u16[0] * v259 + 0x8000;
              v261 = (unsigned __int16)WORD2(*(unint64_t *)v49) * v259 + 0x8000;
              rgba64_DpluslD(v28, (unint64_t)*v28, ((unint64_t)(v258- ((v259 * (_DWORD)v258 + 0x8000 + ((v259 * v258 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v49) - ((v261 + HIWORD(v261)) >> 16)) << 32) | ((HIWORD(v49->u32[0]) - ((HIWORD(v49->u32[0]) * v259 + 0x8000 + ((HIWORD(v49->u32[0]) * v259 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(_QWORD *)v49 - ((v260 + HIWORD(v260)) >> 16)));
            }
          }
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          --v256;
        }
        while (v256);
        goto LABEL_426;
      case 13:
        v262 = v4;
        v164 = v38;
        while (1)
        {
          v263 = *v50;
          if (!*v50)
            goto LABEL_256;
          if (v38)
          {
            v263 = ((unsigned __int16)(*v164 * (_WORD)v263 + ((*v164 * v263) >> 8) + 1) >> 8);
            if (!v263)
              goto LABEL_256;
          }
          v265 = HIWORD(*(unint64_t *)v49);
          v266 = (v263 | (v263 << 8)) ^ 0xFFFF;
          if ((_WORD)v265 == (v266 * (_DWORD)v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16)
            goto LABEL_256;
          v264 = (unint64_t)*v49;
          v267 = ((unint64_t)(v265
                                   - ((v266 * (_DWORD)v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v264) - ((WORD2(v264) * v266 + 0x8000 + ((WORD2(v264) * v266 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v266 + 0x8000 + ((v49->u16[0] * v266 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v264) - ((WORD1(v264) * v266 + 0x8000 + ((WORD1(v264) * v266 + 0x8000) >> 16)) >> 16)) << 16);
          v268 = (unint64_t)*v28;
          if (v418)
          {
            v269 = HIWORD(v268);
            if (!HIWORD(v268))
              goto LABEL_255;
          }
          else
          {
            LODWORD(v269) = 0xFFFF;
          }
          v267 = PDAmultiplyPDA_13494(v268, v269, v267, (unsigned __int16)(v265- ((v266 * (_DWORD)v265 + 0x8000 + ((v266 * v265 + 0x8000) >> 16)) >> 16)));
LABEL_255:
          *v28 = (uint32x2_t)v267;
LABEL_256:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v262)
            goto LABEL_426;
        }
      case 14:
        v270 = v4;
        v164 = v38;
        while (1)
        {
          v271 = *v50;
          if (!*v50)
            goto LABEL_269;
          if (v38)
          {
            v271 = ((unsigned __int16)(*v164 * (_WORD)v271 + ((*v164 * v271) >> 8) + 1) >> 8);
            if (!v271)
              goto LABEL_269;
          }
          v273 = HIWORD(*(unint64_t *)v49);
          v274 = (v271 | (v271 << 8)) ^ 0xFFFF;
          if ((_WORD)v273 == (v274 * (_DWORD)v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16)
            goto LABEL_269;
          v272 = (unint64_t)*v49;
          v275 = ((unint64_t)(v273
                                   - ((v274 * (_DWORD)v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v272) - ((WORD2(v272) * v274 + 0x8000 + ((WORD2(v272) * v274 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v274 + 0x8000 + ((v49->u16[0] * v274 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v272) - ((WORD1(v272) * v274 + 0x8000 + ((WORD1(v272) * v274 + 0x8000) >> 16)) >> 16)) << 16);
          v276 = (unint64_t)*v28;
          if (v418)
          {
            v277 = HIWORD(v276);
            if (!HIWORD(v276))
              goto LABEL_268;
          }
          else
          {
            LODWORD(v277) = 0xFFFF;
          }
          v275 = PDAscreenPDA_13495(v276, v277, v275, (unsigned __int16)(v273- ((v274 * (_DWORD)v273 + 0x8000 + ((v274 * v273 + 0x8000) >> 16)) >> 16)));
LABEL_268:
          *v28 = (uint32x2_t)v275;
LABEL_269:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v270)
            goto LABEL_426;
        }
      case 15:
        v278 = v4;
        v164 = v38;
        while (1)
        {
          v279 = *v50;
          if (!*v50)
            goto LABEL_282;
          if (v38)
          {
            v279 = ((unsigned __int16)(*v164 * (_WORD)v279 + ((*v164 * v279) >> 8) + 1) >> 8);
            if (!v279)
              goto LABEL_282;
          }
          v281 = HIWORD(*(unint64_t *)v49);
          v282 = (v279 | (v279 << 8)) ^ 0xFFFF;
          if ((_WORD)v281 == (v282 * (_DWORD)v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16)
            goto LABEL_282;
          v280 = (unint64_t)*v49;
          v283 = ((unint64_t)(v281
                                   - ((v282 * (_DWORD)v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v280) - ((WORD2(v280) * v282 + 0x8000 + ((WORD2(v280) * v282 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v282 + 0x8000 + ((v49->u16[0] * v282 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v280) - ((WORD1(v280) * v282 + 0x8000 + ((WORD1(v280) * v282 + 0x8000) >> 16)) >> 16)) << 16);
          v284 = (unint64_t)*v28;
          if (v418)
          {
            v285 = HIWORD(v284);
            if (!HIWORD(v284))
              goto LABEL_281;
          }
          else
          {
            LODWORD(v285) = 0xFFFF;
          }
          v283 = PDAoverlayPDA_13496(v284, v285, v283, (unsigned __int16)(v281- ((v282 * (_DWORD)v281 + 0x8000 + ((v282 * v281 + 0x8000) >> 16)) >> 16)));
LABEL_281:
          *v28 = (uint32x2_t)v283;
LABEL_282:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v278)
            goto LABEL_426;
        }
      case 16:
        v286 = v4;
        v164 = v38;
        while (1)
        {
          v287 = *v50;
          if (!*v50)
            goto LABEL_295;
          if (v38)
          {
            v287 = ((unsigned __int16)(*v164 * (_WORD)v287 + ((*v164 * v287) >> 8) + 1) >> 8);
            if (!v287)
              goto LABEL_295;
          }
          v289 = HIWORD(*(unint64_t *)v49);
          v290 = (v287 | (v287 << 8)) ^ 0xFFFF;
          if ((_WORD)v289 == (v290 * (_DWORD)v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16)
            goto LABEL_295;
          v288 = (unint64_t)*v49;
          v291 = ((unint64_t)(v289
                                   - ((v290 * (_DWORD)v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v288) - ((WORD2(v288) * v290 + 0x8000 + ((WORD2(v288) * v290 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v290 + 0x8000 + ((v49->u16[0] * v290 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v288) - ((WORD1(v288) * v290 + 0x8000 + ((WORD1(v288) * v290 + 0x8000) >> 16)) >> 16)) << 16);
          v292 = (unint64_t)*v28;
          if (v418)
          {
            v293 = HIWORD(v292);
            if (!HIWORD(v292))
              goto LABEL_294;
          }
          else
          {
            LODWORD(v293) = 0xFFFF;
          }
          v291 = PDAdarkenPDA_13498(v292, v293, v291, (unsigned __int16)(v289- ((v290 * (_DWORD)v289 + 0x8000 + ((v290 * v289 + 0x8000) >> 16)) >> 16)));
LABEL_294:
          *v28 = (uint32x2_t)v291;
LABEL_295:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v286)
            goto LABEL_426;
        }
      case 17:
        v294 = v4;
        v164 = v38;
        while (1)
        {
          v295 = *v50;
          if (!*v50)
            goto LABEL_308;
          if (v38)
          {
            v295 = ((unsigned __int16)(*v164 * (_WORD)v295 + ((*v164 * v295) >> 8) + 1) >> 8);
            if (!v295)
              goto LABEL_308;
          }
          v297 = HIWORD(*(unint64_t *)v49);
          v298 = (v295 | (v295 << 8)) ^ 0xFFFF;
          if ((_WORD)v297 == (v298 * (_DWORD)v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16)
            goto LABEL_308;
          v296 = (unint64_t)*v49;
          v299 = ((unint64_t)(v297
                                   - ((v298 * (_DWORD)v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v296) - ((WORD2(v296) * v298 + 0x8000 + ((WORD2(v296) * v298 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v298 + 0x8000 + ((v49->u16[0] * v298 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v296) - ((WORD1(v296) * v298 + 0x8000 + ((WORD1(v296) * v298 + 0x8000) >> 16)) >> 16)) << 16);
          v300 = (unint64_t)*v28;
          if (v418)
          {
            v301 = HIWORD(v300);
            if (!HIWORD(v300))
              goto LABEL_307;
          }
          else
          {
            LODWORD(v301) = 0xFFFF;
          }
          v299 = PDAlightenPDA_13497(v300, v301, v299, (unsigned __int16)(v297- ((v298 * (_DWORD)v297 + 0x8000 + ((v298 * v297 + 0x8000) >> 16)) >> 16)));
LABEL_307:
          *v28 = (uint32x2_t)v299;
LABEL_308:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v294)
            goto LABEL_426;
        }
      case 18:
        v302 = v4;
        v164 = v38;
        while (1)
        {
          v303 = *v50;
          if (!*v50)
            goto LABEL_321;
          if (v38)
          {
            v303 = ((unsigned __int16)(*v164 * (_WORD)v303 + ((*v164 * v303) >> 8) + 1) >> 8);
            if (!v303)
              goto LABEL_321;
          }
          v305 = HIWORD(*(unint64_t *)v49);
          v306 = (v303 | (v303 << 8)) ^ 0xFFFF;
          if ((_WORD)v305 == (v306 * (_DWORD)v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)
            goto LABEL_321;
          v304 = (unint64_t)*v49;
          v307 = ((unint64_t)(v305
                                   - ((v306 * (_DWORD)v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v304) - ((WORD2(v304) * v306 + 0x8000 + ((WORD2(v304) * v306 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v306 + 0x8000 + ((v49->u16[0] * v306 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v304) - ((WORD1(v304) * v306 + 0x8000 + ((WORD1(v304) * v306 + 0x8000) >> 16)) >> 16)) << 16);
          v308 = (unint64_t)*v28;
          if (v418)
          {
            v309 = HIWORD(v308);
            if (!HIWORD(v308))
              goto LABEL_320;
          }
          else
          {
            LODWORD(v309) = 0xFFFF;
          }
          v307 = PDAcolordodgePDA_13499(v308, v309, v307, (unsigned __int16)(v305- ((v306 * (_DWORD)v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)));
LABEL_320:
          *v28 = (uint32x2_t)v307;
LABEL_321:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v302)
            goto LABEL_426;
        }
      case 19:
        v310 = v4;
        v164 = v38;
        while (1)
        {
          v311 = *v50;
          if (!*v50)
            goto LABEL_334;
          if (v38)
          {
            v311 = ((unsigned __int16)(*v164 * (_WORD)v311 + ((*v164 * v311) >> 8) + 1) >> 8);
            if (!v311)
              goto LABEL_334;
          }
          v313 = HIWORD(*(unint64_t *)v49);
          v314 = (v311 | (v311 << 8)) ^ 0xFFFF;
          if ((_WORD)v313 == (v314 * (_DWORD)v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16)
            goto LABEL_334;
          v312 = (unint64_t)*v49;
          v315 = ((unint64_t)(v313
                                   - ((v314 * (_DWORD)v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v312) - ((WORD2(v312) * v314 + 0x8000 + ((WORD2(v312) * v314 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v314 + 0x8000 + ((v49->u16[0] * v314 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v312) - ((WORD1(v312) * v314 + 0x8000 + ((WORD1(v312) * v314 + 0x8000) >> 16)) >> 16)) << 16);
          v316 = (unint64_t)*v28;
          if (v418)
          {
            v317 = HIWORD(v316);
            if (!HIWORD(v316))
              goto LABEL_333;
          }
          else
          {
            LODWORD(v317) = 0xFFFF;
          }
          v315 = PDAcolorburnPDA_13500(v316, v317, v315, (unsigned __int16)(v313- ((v314 * (_DWORD)v313 + 0x8000 + ((v314 * v313 + 0x8000) >> 16)) >> 16)));
LABEL_333:
          *v28 = (uint32x2_t)v315;
LABEL_334:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v310)
            goto LABEL_426;
        }
      case 20:
        v318 = v4;
        v164 = v38;
        while (1)
        {
          v319 = *v50;
          if (!*v50)
            goto LABEL_347;
          if (v38)
          {
            v319 = ((unsigned __int16)(*v164 * (_WORD)v319 + ((*v164 * v319) >> 8) + 1) >> 8);
            if (!v319)
              goto LABEL_347;
          }
          v321 = HIWORD(*(unint64_t *)v49);
          v322 = (v319 | (v319 << 8)) ^ 0xFFFF;
          if ((_WORD)v321 == (v322 * (_DWORD)v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16)
            goto LABEL_347;
          v320 = (unint64_t)*v49;
          v323 = ((unint64_t)(v321
                                   - ((v322 * (_DWORD)v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v320) - ((WORD2(v320) * v322 + 0x8000 + ((WORD2(v320) * v322 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v322 + 0x8000 + ((v49->u16[0] * v322 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v320) - ((WORD1(v320) * v322 + 0x8000 + ((WORD1(v320) * v322 + 0x8000) >> 16)) >> 16)) << 16);
          v324 = (unint64_t)*v28;
          if (v418)
          {
            v325 = HIWORD(v324);
            if (!HIWORD(v324))
              goto LABEL_346;
          }
          else
          {
            LODWORD(v325) = 0xFFFF;
          }
          v323 = PDAsoftlightPDA_13502(v324, v325, v323, (unsigned __int16)(v321- ((v322 * (_DWORD)v321 + 0x8000 + ((v322 * v321 + 0x8000) >> 16)) >> 16)));
LABEL_346:
          *v28 = (uint32x2_t)v323;
LABEL_347:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v318)
            goto LABEL_426;
        }
      case 21:
        v326 = v4;
        v164 = v38;
        while (1)
        {
          v327 = *v50;
          if (!*v50)
            goto LABEL_360;
          if (v38)
          {
            v327 = ((unsigned __int16)(*v164 * (_WORD)v327 + ((*v164 * v327) >> 8) + 1) >> 8);
            if (!v327)
              goto LABEL_360;
          }
          v329 = HIWORD(*(unint64_t *)v49);
          v330 = (v327 | (v327 << 8)) ^ 0xFFFF;
          if ((_WORD)v329 == (v330 * (_DWORD)v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16)
            goto LABEL_360;
          v328 = (unint64_t)*v49;
          v331 = ((unint64_t)(v329
                                   - ((v330 * (_DWORD)v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v328) - ((WORD2(v328) * v330 + 0x8000 + ((WORD2(v328) * v330 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v330 + 0x8000 + ((v49->u16[0] * v330 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v328) - ((WORD1(v328) * v330 + 0x8000 + ((WORD1(v328) * v330 + 0x8000) >> 16)) >> 16)) << 16);
          v332 = (unint64_t)*v28;
          if (v418)
          {
            v333 = HIWORD(v332);
            if (!HIWORD(v332))
              goto LABEL_359;
          }
          else
          {
            LODWORD(v333) = 0xFFFF;
          }
          v331 = PDAhardlightPDA_13501(v332, v333, v331, (unsigned __int16)(v329- ((v330 * (_DWORD)v329 + 0x8000 + ((v330 * v329 + 0x8000) >> 16)) >> 16)));
LABEL_359:
          *v28 = (uint32x2_t)v331;
LABEL_360:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v326)
            goto LABEL_426;
        }
      case 22:
        v334 = v4;
        v164 = v38;
        while (1)
        {
          v335 = *v50;
          if (!*v50)
            goto LABEL_373;
          if (v38)
          {
            v335 = ((unsigned __int16)(*v164 * (_WORD)v335 + ((*v164 * v335) >> 8) + 1) >> 8);
            if (!v335)
              goto LABEL_373;
          }
          v337 = HIWORD(*(unint64_t *)v49);
          v338 = (v335 | (v335 << 8)) ^ 0xFFFF;
          if ((_WORD)v337 == (v338 * (_DWORD)v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16)
            goto LABEL_373;
          v336 = (unint64_t)*v49;
          v339 = ((unint64_t)(v337
                                   - ((v338 * (_DWORD)v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v336) - ((WORD2(v336) * v338 + 0x8000 + ((WORD2(v336) * v338 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v338 + 0x8000 + ((v49->u16[0] * v338 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v336) - ((WORD1(v336) * v338 + 0x8000 + ((WORD1(v336) * v338 + 0x8000) >> 16)) >> 16)) << 16);
          v340 = (unint64_t)*v28;
          if (v418)
          {
            v341 = HIWORD(v340);
            if (!HIWORD(v340))
              goto LABEL_372;
          }
          else
          {
            LODWORD(v341) = 0xFFFF;
          }
          v339 = PDAdifferencePDA_13503(v340, v341, v339, (unsigned __int16)(v337- ((v338 * (_DWORD)v337 + 0x8000 + ((v338 * v337 + 0x8000) >> 16)) >> 16)));
LABEL_372:
          *v28 = (uint32x2_t)v339;
LABEL_373:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v334)
            goto LABEL_426;
        }
      case 23:
        v342 = v4;
        v164 = v38;
        while (1)
        {
          v343 = *v50;
          if (!*v50)
            goto LABEL_386;
          if (v38)
          {
            v343 = ((unsigned __int16)(*v164 * (_WORD)v343 + ((*v164 * v343) >> 8) + 1) >> 8);
            if (!v343)
              goto LABEL_386;
          }
          v345 = HIWORD(*(unint64_t *)v49);
          v346 = (v343 | (v343 << 8)) ^ 0xFFFF;
          if ((_WORD)v345 == (v346 * (_DWORD)v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16)
            goto LABEL_386;
          v344 = (unint64_t)*v49;
          v347 = ((unint64_t)(v345
                                   - ((v346 * (_DWORD)v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v344) - ((WORD2(v344) * v346 + 0x8000 + ((WORD2(v344) * v346 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v346 + 0x8000 + ((v49->u16[0] * v346 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v344) - ((WORD1(v344) * v346 + 0x8000 + ((WORD1(v344) * v346 + 0x8000) >> 16)) >> 16)) << 16);
          v348 = (unint64_t)*v28;
          if (v418)
          {
            v349 = HIWORD(v348);
            if (!HIWORD(v348))
              goto LABEL_385;
          }
          else
          {
            LODWORD(v349) = 0xFFFF;
          }
          v347 = PDAexclusionPDA_13504(v348, v349, v347, (unsigned __int16)(v345- ((v346 * (_DWORD)v345 + 0x8000 + ((v346 * v345 + 0x8000) >> 16)) >> 16)));
LABEL_385:
          *v28 = (uint32x2_t)v347;
LABEL_386:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v342)
            goto LABEL_426;
        }
      case 24:
        v350 = v4;
        v164 = v38;
        while (1)
        {
          v351 = *v50;
          if (!*v50)
            goto LABEL_399;
          if (v38)
          {
            v351 = ((unsigned __int16)(*v164 * (_WORD)v351 + ((*v164 * v351) >> 8) + 1) >> 8);
            if (!v351)
              goto LABEL_399;
          }
          v353 = HIWORD(*(unint64_t *)v49);
          v354 = (v351 | (v351 << 8)) ^ 0xFFFF;
          if ((_WORD)v353 == (v354 * (_DWORD)v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16)
            goto LABEL_399;
          v352 = (unint64_t)*v49;
          v355 = ((unint64_t)(v353
                                   - ((v354 * (_DWORD)v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v352) - ((WORD2(v352) * v354 + 0x8000 + ((WORD2(v352) * v354 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v354 + 0x8000 + ((v49->u16[0] * v354 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v352) - ((WORD1(v352) * v354 + 0x8000 + ((WORD1(v352) * v354 + 0x8000) >> 16)) >> 16)) << 16);
          v356 = (unint64_t)*v28;
          if (v418)
          {
            v357 = HIWORD(v356);
            if (!HIWORD(v356))
              goto LABEL_398;
          }
          else
          {
            LODWORD(v357) = 0xFFFF;
          }
          v355 = PDAhuePDA_13505(v356, v357, v355, (unsigned __int16)(v353- ((v354 * (_DWORD)v353 + 0x8000 + ((v354 * v353 + 0x8000) >> 16)) >> 16)));
LABEL_398:
          *v28 = (uint32x2_t)v355;
LABEL_399:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v350)
            goto LABEL_426;
        }
      case 25:
        v358 = v4;
        v164 = v38;
        while (1)
        {
          v359 = *v50;
          if (!*v50)
            goto LABEL_412;
          if (v38)
          {
            v359 = ((unsigned __int16)(*v164 * (_WORD)v359 + ((*v164 * v359) >> 8) + 1) >> 8);
            if (!v359)
              goto LABEL_412;
          }
          v361 = HIWORD(*(unint64_t *)v49);
          v362 = (v359 | (v359 << 8)) ^ 0xFFFF;
          if ((_WORD)v361 == (v362 * (_DWORD)v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)
            goto LABEL_412;
          v360 = (unint64_t)*v49;
          v363 = ((unint64_t)(v361
                                   - ((v362 * (_DWORD)v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v360) - ((WORD2(v360) * v362 + 0x8000 + ((WORD2(v360) * v362 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v362 + 0x8000 + ((v49->u16[0] * v362 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v360) - ((WORD1(v360) * v362 + 0x8000 + ((WORD1(v360) * v362 + 0x8000) >> 16)) >> 16)) << 16);
          v364 = (unint64_t)*v28;
          if (v418)
          {
            v365 = HIWORD(v364);
            if (!HIWORD(v364))
              goto LABEL_411;
          }
          else
          {
            LODWORD(v365) = 0xFFFF;
          }
          v363 = PDAsaturationPDA_13506(v364, v365, v363, (unsigned __int16)(v361- ((v362 * (_DWORD)v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)));
LABEL_411:
          *v28 = (uint32x2_t)v363;
LABEL_412:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v358)
            goto LABEL_426;
        }
      case 26:
        v366 = v4;
        v164 = v38;
        while (1)
        {
          v367 = *v50;
          if (!*v50)
            goto LABEL_425;
          if (v38)
          {
            v367 = ((unsigned __int16)(*v164 * (_WORD)v367 + ((*v164 * v367) >> 8) + 1) >> 8);
            if (!v367)
              goto LABEL_425;
          }
          v369 = HIWORD(*(unint64_t *)v49);
          v370 = (v367 | (v367 << 8)) ^ 0xFFFF;
          if ((_WORD)v369 == (v370 * (_DWORD)v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16)
            goto LABEL_425;
          v368 = (unint64_t)*v49;
          v371 = ((unint64_t)(v369
                                   - ((v370 * (_DWORD)v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v368) - ((WORD2(v368) * v370 + 0x8000 + ((WORD2(v368) * v370 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v370 + 0x8000 + ((v49->u16[0] * v370 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v368) - ((WORD1(v368) * v370 + 0x8000 + ((WORD1(v368) * v370 + 0x8000) >> 16)) >> 16)) << 16);
          v372 = (unint64_t)*v28;
          if (v418)
          {
            v373 = HIWORD(v372);
            if (!HIWORD(v372))
              goto LABEL_424;
          }
          else
          {
            LODWORD(v373) = 0xFFFF;
          }
          v371 = PDAluminosityPDA_13507(v371, (unsigned __int16)(v369- ((v370 * (_DWORD)v369 + 0x8000 + ((v370 * v369 + 0x8000) >> 16)) >> 16)), v372, v373);
LABEL_424:
          *v28 = (uint32x2_t)v371;
LABEL_425:
          ++v50;
          ++v49;
          v164 += v38 != 0;
          ++v28;
          if (!--v366)
          {
LABEL_426:
            v38 = &v164[v406];
            goto LABEL_427;
          }
        }
      case 27:
        v374 = v38;
        v375 = v4;
        break;
      default:
        goto LABEL_429;
    }
    do
    {
      v376 = *v50;
      if (*v50)
      {
        if (!v38
          || (v376 = ((unsigned __int16)(*v374 * (_WORD)v376 + ((*v374 * v376) >> 8) + 1) >> 8)) != 0)
        {
          v378 = HIWORD(*(unint64_t *)v49);
          v379 = (v376 | (v376 << 8)) ^ 0xFFFF;
          if ((_WORD)v378 != (v379 * (_DWORD)v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)
          {
            v377 = (unint64_t)*v49;
            v380 = ((unint64_t)(v378
                                     - ((v379 * (_DWORD)v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v377) - ((WORD2(v377) * v379 + 0x8000 + ((WORD2(v377) * v379 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v49->u16[0] * v379 + 0x8000 + ((v49->u16[0] * v379 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v377) - ((WORD1(v377) * v379 + 0x8000 + ((WORD1(v377) * v379 + 0x8000) >> 16)) >> 16)) << 16);
            v381 = (unint64_t)*v28;
            if (v418)
            {
              v382 = HIWORD(v381);
              if (!HIWORD(v381))
                goto LABEL_443;
            }
            else
            {
              LODWORD(v382) = 0xFFFF;
            }
            v380 = PDAluminosityPDA_13507(v381, v382, v380, (unsigned __int16)(v378- ((v379 * (_DWORD)v378 + 0x8000 + ((v379 * v378 + 0x8000) >> 16)) >> 16)));
LABEL_443:
            *v28 = (uint32x2_t)v380;
          }
        }
      }
      ++v50;
      ++v49;
      v374 += v38 != 0;
      ++v28;
      --v375;
    }
    while (v375);
    v38 = &v374[v406];
LABEL_427:
    v28 += v407;
    v39 = v409;
LABEL_428:
    v40 = v411;
LABEL_429:
    v101 = v416;
    v102 = v417;
LABEL_430:
    if (v415 != 1)
    {
      --v415;
      v47 = 0;
      v36 = v412 + 1;
      v33 = v40[16] + v101;
      v34 = v40[17] + v102;
      if (v413)
      {
        v35 = v413;
        goto LABEL_478;
      }
      continue;
    }
    break;
  }
  v35 = v413;
LABEL_473:
  if (v35)
    free(v35);
LABEL_475:
  if (v401)
    free(v401);
}

_DWORD *rgba64_DMplusDM(_DWORD *result, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a5;
  v6 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a5;
  v7 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a5;
  v8 = HIWORD(a2) * a3 + HIWORD(a4) * a5;
  if (v5 >= 0xFFFE8000)
    v5 = 4294868992;
  if (v6 >= 0xFFFE8000)
    v6 = 4294868992;
  if (v7 >= 0xFFFE8000)
    v7 = 4294868992;
  if (v8 >= 0xFFFE8000)
    v8 = 4294868992;
  *result = (((v6 + 0x8000) >> 16) + v6 + 0x8000) & 0xFFFF0000 | ((((v5 + 0x8000) >> 16)
                                                                 + (_DWORD)v5
                                                                 + 0x8000) >> 16);
  result[1] = (((v8 + 0x8000) >> 16) + v8 + 0x8000) & 0xFFFF0000 | ((((v7 + 0x8000) >> 16)
                                                                   + (_DWORD)v7
                                                                   + 0x8000) >> 16);
  return result;
}

uint16x4_t rgba64_DplusDM(uint16x4_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint16x4_t result;

  result = vqadd_u16((uint16x4_t)a2, (uint16x4_t)(((HIWORD(a3) * a4 + 0x8000 + ((HIWORD(a3) * a4 + 0x8000) >> 16)) >> 16 << 48) | ((unint64_t)((WORD2(a3) * a4 + 0x8000 + ((WORD2(a3) * a4 + 0x8000) >> 16)) >> 16) << 32) | (WORD1(a3) * a4 + 0x8000 + ((WORD1(a3) * a4 + 0x8000) >> 16)) & 0xFFFF0000 | (unint64_t)(((unsigned __int16)a3 * a4 + 0x8000 + (((unsigned __int16)a3 * a4 + 0x8000) >> 16)) >> 16)));
  *a1 = result;
  return result;
}

_DWORD *rgba64_DpluslD(_DWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  v4 = WORD1(a3) + (unint64_t)WORD1(a2);
  v5 = WORD2(a3) + (unint64_t)WORD2(a2);
  v6 = HIWORD(a3) + HIWORD(a2);
  if (v3 >= 0xFFFF)
    LODWORD(v3) = 0xFFFF;
  if (v4 >= 0xFFFF)
    LODWORD(v4) = 0xFFFF;
  if (v5 >= 0xFFFF)
    LODWORD(v5) = 0xFFFF;
  if (v6 >= 0xFFFF)
    LODWORD(v6) = 0xFFFF;
  *result = v3 | ((_DWORD)v4 << 16);
  result[1] = v5 | ((_DWORD)v6 << 16);
  return result;
}

unint64_t PDAmultiplyPDA_13494(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = ((a4 ^ 0xFFFF) + WORD2(a3)) * (unint64_t)WORD2(a1);
  v5 = ((a4 ^ 0xFFFF) + WORD1(a3)) * (unint64_t)WORD1(a1);
  v6 = ((a4 ^ 0xFFFF) + (unsigned __int16)a3) * (unint64_t)(unsigned __int16)a1;
  if (a2 != 0xFFFF)
  {
    v5 += WORD1(a3) * (unint64_t)(a2 ^ 0xFFFF);
    v4 += WORD2(a3) * (unint64_t)(a2 ^ 0xFFFF);
    v6 += (unsigned __int16)a3 * (unint64_t)(a2 ^ 0xFFFF);
  }
  v7 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v6 <= 0xFFFE8000)
    v8 = v6 + 0x8000;
  else
    v8 = 4294868992;
  v9 = ((v8 >> 16) + v8) >> 16;
  if (v5 <= 0xFFFE8000)
    v10 = v5 + 0x8000;
  else
    v10 = 4294868992;
  v11 = (v10 >> 16) + v10;
  if (v7 <= 4294868992)
    v12 = v7 + 0x8000;
  else
    v12 = 4294868992;
  v13 = (unint64_t)((v12 >> 16) + v12) >> 16;
  v14 = (65537 * v4 + 2147516416u) & 0xFFFF00000000;
  v15 = v4 > 0xFFFE8000;
  v16 = 0xFFFF00000000;
  if (!v15)
    v16 = v14;
  return v16 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v13 << 48) | v11 & 0xFFFF0000 | v9;
}

unint64_t PDAscreenPDA_13495(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = (unsigned __int16)a3 * (unint64_t)((unsigned __int16)a1 ^ 0xFFFFu)
     - (unsigned __int16)a1
     + ((unint64_t)(unsigned __int16)a1 << 16);
  v5 = WORD1(a3) * (unint64_t)(WORD1(a1) ^ 0xFFFFu) - WORD1(a1) + ((unint64_t)WORD1(a1) << 16);
  v6 = WORD2(a3) * (unint64_t)(WORD2(a1) ^ 0xFFFFu) - WORD2(a1) + ((unint64_t)WORD2(a1) << 16);
  v7 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v4 <= 0xFFFE8000)
    v8 = v4 + 0x8000;
  else
    v8 = 4294868992;
  v9 = ((v8 >> 16) + v8) >> 16;
  if (v5 <= 0xFFFE8000)
    v10 = v5 + 0x8000;
  else
    v10 = 4294868992;
  v11 = (v10 >> 16) + v10;
  if (v7 <= 4294868992)
    v12 = v7 + 0x8000;
  else
    v12 = 4294868992;
  v13 = (unint64_t)((v12 >> 16) + v12) >> 16;
  v14 = (65537 * v6 + 2147516416u) & 0xFFFF00000000;
  v15 = v6 > 0xFFFE8000;
  v16 = 0xFFFF00000000;
  if (!v15)
    v16 = v14;
  return v11 & 0xFFFF0000 | v16 & 0xFFFFFFFFFFFFLL | v9 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v13 << 48);
}

unint64_t PDAoverlayPDA_13496(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = WORD1(a1);
  v5 = WORD2(a1);
  v6 = (unsigned __int16)a3;
  v7 = WORD1(a3);
  v8 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v6 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v9 = a2;
  else
    v9 = (unsigned __int16)a1;
  v10 = 2 * v9 * (unint64_t)v6;
  if (v7 >= a4)
    v11 = a4;
  else
    v11 = v7;
  if (v4 >= a2)
    v12 = a2;
  else
    v12 = v4;
  if (v8 >= a4)
    v13 = a4;
  else
    v13 = v8;
  if (v5 >= a2)
    v5 = a2;
  v14 = a4 * (unint64_t)a2;
  v15 = ((unint64_t)a2 + 1) >> 1;
  if (v9 >= v15)
    v16 = (a4 + 0xFFFF) * (unint64_t)v9 + v6 * (unint64_t)(a2 + 0xFFFF) - (v14 + v10);
  else
    v16 = v6 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v9 + v10;
  v17 = 2 * v12 * (unint64_t)v11;
  if (v12 >= v15)
    v18 = (a4 + 0xFFFF) * (unint64_t)v12 + v11 * (unint64_t)(a2 + 0xFFFF) - (v14 + v17);
  else
    v18 = v11 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v12 + v17;
  v19 = 2 * v5 * (unint64_t)v13;
  if (v5 >= v15)
    v20 = (a4 + 0xFFFF) * (unint64_t)v5 + v13 * (unint64_t)(a2 + 0xFFFF) - (v14 + v19);
  else
    v20 = v13 * (unint64_t)(a2 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v5 + v19;
  v21 = 0xFFFF * (a4 + (unint64_t)a2) - v14;
  v22 = v16 + 0x8000;
  if (v16 > 4294868992)
    v22 = 4294868992;
  v23 = ((v22 >> 16) + v22) >> 16;
  v24 = v18 + 0x8000;
  if (v18 > 4294868992)
    v24 = 4294868992;
  v25 = (v24 >> 16) + v24;
  if (v21 <= 4294868992)
    v26 = v21 + 0x8000;
  else
    v26 = 4294868992;
  v27 = (v26 >> 16) + v26;
  v28 = 0xFFFF00000000;
  if (v20 <= 4294868992)
    v28 = (65537 * v20 + 2147516416) & 0xFFFF00000000;
  return (v23 | (v27 << 32)) & 0xFFFF00000000FFFFLL | v25 & 0xFFFF0000 | (unint64_t)v28;
}

unint64_t PDAlightenPDA_13497(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (unsigned __int16)a1;
  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v7 = (unsigned __int16)a3;
  v8 = WORD1(a3);
  v9 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v4 = a2;
  v10 = v4 * (unint64_t)a4;
  if (v7 * (unint64_t)a2 > v10)
    v10 = v7 * (unint64_t)a2;
  if (WORD1(a3) >= (unint64_t)a4)
    v8 = a4;
  if (WORD1(a1) >= (unint64_t)a2)
    v5 = a2;
  v11 = v5 * (unint64_t)a4;
  if (v8 * (unint64_t)a2 > v11)
    v11 = v8 * (unint64_t)a2;
  if (WORD2(a3) >= (unint64_t)a4)
    v9 = a4;
  if (WORD2(a1) >= (unint64_t)a2)
    v6 = a2;
  v12 = v6 * (unint64_t)a4;
  if (v9 * (unint64_t)a2 > v12)
    v12 = v9 * (unint64_t)a2;
  v13 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  v14 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v5;
  v15 = v12 + (a4 ^ 0xFFFF) * (unint64_t)v6;
  if (a4 == 0xFFFF)
  {
    v14 = v11;
    v15 = v12;
    v13 = v10;
  }
  v16 = v13 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  v17 = v14 + v8 * (unint64_t)(a2 ^ 0xFFFF);
  v18 = v15 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 != 0xFFFF)
  {
    v14 = v17;
    v15 = v18;
    v13 = v16;
  }
  v19 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  v20 = v13 + 0x8000;
  if (v13 > 0xFFFE8000)
    v20 = 4294868992;
  v21 = ((v20 >> 16) + v20) >> 16;
  v22 = v14 + 0x8000;
  if (v14 > 0xFFFE8000)
    v22 = 4294868992;
  v23 = (v22 >> 16) + v22;
  if (v19 <= 4294868992)
    v24 = v19 + 0x8000;
  else
    v24 = 4294868992;
  v25 = (unint64_t)((v24 >> 16) + v24) >> 16;
  v26 = (65537 * v15 + 2147516416u) & 0xFFFF00000000;
  if (v15 > 0xFFFE8000)
    v26 = 0xFFFF00000000;
  return v26 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v25 << 48) | v23 & 0xFFFF0000 | v21;
}

unint64_t PDAdarkenPDA_13498(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (unsigned __int16)a1;
  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v7 = (unsigned __int16)a3;
  v8 = WORD1(a3);
  v9 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v4 = a2;
  v10 = v4 * (unint64_t)a4;
  if (v7 * (unint64_t)a2 < v10)
    v10 = v7 * (unint64_t)a2;
  if (WORD1(a3) >= (unint64_t)a4)
    v8 = a4;
  if (WORD1(a1) >= (unint64_t)a2)
    v5 = a2;
  v11 = v5 * (unint64_t)a4;
  if (v8 * (unint64_t)a2 < v11)
    v11 = v8 * (unint64_t)a2;
  if (WORD2(a3) >= (unint64_t)a4)
    v9 = a4;
  if (WORD2(a1) >= (unint64_t)a2)
    v6 = a2;
  v12 = v6 * (unint64_t)a4;
  if (v9 * (unint64_t)a2 < v12)
    v12 = v9 * (unint64_t)a2;
  v13 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  v14 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v5;
  v15 = v12 + (a4 ^ 0xFFFF) * (unint64_t)v6;
  if (a4 == 0xFFFF)
  {
    v14 = v11;
    v15 = v12;
    v13 = v10;
  }
  v16 = v13 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  v17 = v14 + v8 * (unint64_t)(a2 ^ 0xFFFF);
  v18 = v15 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 != 0xFFFF)
  {
    v14 = v17;
    v15 = v18;
    v13 = v16;
  }
  v19 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  v20 = v13 + 0x8000;
  if (v13 > 0xFFFE8000)
    v20 = 4294868992;
  v21 = ((v20 >> 16) + v20) >> 16;
  v22 = v14 + 0x8000;
  if (v14 > 0xFFFE8000)
    v22 = 4294868992;
  v23 = (v22 >> 16) + v22;
  if (v19 <= 4294868992)
    v24 = v19 + 0x8000;
  else
    v24 = 4294868992;
  v25 = (unint64_t)((v24 >> 16) + v24) >> 16;
  v26 = (65537 * v15 + 2147516416u) & 0xFFFF00000000;
  if (v15 > 0xFFFE8000)
    v26 = 0xFFFF00000000;
  return v26 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v25 << 48) | v23 & 0xFFFF0000 | v21;
}

unint64_t PDAcolordodgePDA_13499(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v4 = WORD1(a1);
  v5 = 4294836225;
  v6 = WORD1(a3);
  v7 = a4 * a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v8 = a2;
  else
    v8 = (unsigned __int16)a1;
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v9 = a4;
  else
    v9 = (unsigned __int16)a3;
  if (v8)
  {
    v10 = 4294836225;
    if ((unsigned __int16)a3 < (unint64_t)a4)
      v10 = (uint64_t)(v7 * (unint64_t)v8) / (a4 - v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = WORD2(a1);
  v12 = WORD2(a3);
  if (v4 >= a2)
    v13 = a2;
  else
    v13 = v4;
  if (v6 >= a4)
    v14 = a4;
  else
    v14 = v6;
  if (v13)
  {
    v15 = 4294836225;
    if (v6 < a4)
      v15 = (uint64_t)(v7 * (unint64_t)v13) / (uint64_t)(a4 - v14);
  }
  else
  {
    v15 = 0;
  }
  if (v11 >= a2)
    v16 = a2;
  else
    v16 = v11;
  if (v12 >= a4)
    v17 = a4;
  else
    v17 = v12;
  if (v16)
  {
    if (v12 < a4)
      v5 = (uint64_t)(v7 * (unint64_t)v16) / (uint64_t)(a4 - v17);
  }
  else
  {
    v5 = 0;
  }
  v18 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v8;
  v19 = v15 + (a4 ^ 0xFFFF) * (unint64_t)v13;
  if (a4 == 0xFFFF)
    v19 = v15;
  else
    v5 += (a4 ^ 0xFFFF) * (unint64_t)v16;
  if (a4 == 0xFFFF)
    v18 = v10;
  v20 = v18 + v9 * (unint64_t)(a2 ^ 0xFFFF);
  v21 = v19 + v14 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
    v21 = v19;
  else
    v5 += v17 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
    v20 = v18;
  v22 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v20 >= v22)
    v23 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  else
    v23 = v20;
  if (v21 >= v22)
    v24 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  else
    v24 = v21;
  if (v5 >= v22)
    v5 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v24 <= 4294868992)
    v25 = v24 + 0x8000;
  else
    v25 = 4294868992;
  v26 = (v25 >> 16) + v25;
  if (v23 <= 4294868992)
    v27 = v23 + 0x8000;
  else
    v27 = 4294868992;
  v28 = ((v27 >> 16) + v27) >> 16;
  if (v22 <= 4294868992)
    v29 = v22 + 0x8000;
  else
    v29 = 4294868992;
  v30 = (unint64_t)((v29 >> 16) + v29) >> 16;
  v31 = (65537 * v5 + 2147516416) & 0xFFFF00000000;
  v32 = v5 <= 4294868992;
  v33 = 0xFFFF00000000;
  if (v32)
    v33 = v31;
  return v33 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v30 << 48) | v26 & 0xFFFF0000 | v28;
}

unint64_t PDAcolorburnPDA_13500(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = (unsigned __int16)a1;
  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v7 = a2;
  v8 = WORD2(a3);
  v9 = a4;
  v10 = a4 * (unint64_t)a2;
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v11 = a4;
  else
    v11 = (unsigned __int16)a3;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v12 = a2;
  else
    v12 = (unsigned __int16)a1;
  if (WORD1(a3) >= (unint64_t)a4)
    v13 = a4;
  else
    v13 = WORD1(a3);
  if (v5 >= a2)
    v14 = a2;
  else
    v14 = v5;
  if (v8 >= a4)
    v15 = a4;
  else
    v15 = v8;
  if (v6 >= a2)
    v16 = a2;
  else
    v16 = v6;
  v17 = a4 == 0xFFFF;
  v18 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v12;
  v19 = v10 + (a4 ^ 0xFFFF) * (unint64_t)v14;
  if (v17)
  {
    v19 = v10;
    v20 = v10;
  }
  else
  {
    v20 = v10 + (v9 ^ 0xFFFF) * (unint64_t)v16;
  }
  if (v17)
    v18 = v10;
  v21 = v19 + v13 * (unint64_t)(a2 ^ 0xFFFF);
  v22 = v20 + v15 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
  {
    v21 = v19;
    v22 = v20;
  }
  else
  {
    v18 += v11 * (unint64_t)(a2 ^ 0xFFFF);
  }
  if (v4 < a2)
  {
    if (v11)
    {
      v23 = (uint64_t)(v9 * (unint64_t)v9 * (a2 - v12)) / v11;
      v18 = (v18 - v23) & ~((uint64_t)(v18 - v23) >> 63);
    }
    else
    {
      v18 = 0;
    }
  }
  if (v5 < v7)
  {
    if (v13)
    {
      v24 = (uint64_t)(v9 * (unint64_t)v9 * (v7 - v14)) / v13;
      v21 = (v21 - v24) & ~((uint64_t)(v21 - v24) >> 63);
    }
    else
    {
      v21 = 0;
    }
  }
  if (v6 < v7)
  {
    if (v15)
    {
      v25 = (uint64_t)(v9 * (unint64_t)v9 * (v7 - v16)) / v15;
      v22 = (v22 - v25) & ~((uint64_t)(v22 - v25) >> 63);
    }
    else
    {
      v22 = 0;
    }
  }
  v26 = 0xFFFF * (v9 + v7) - v10;
  v27 = v18 + 0x8000;
  if (v18 > 0xFFFE8000)
    v27 = 4294868992;
  v28 = ((v27 >> 16) + v27) >> 16;
  v29 = v21 + 0x8000;
  if (v21 > 0xFFFE8000)
    v29 = 4294868992;
  v30 = (v29 >> 16) + v29;
  if (v26 <= 4294868992)
    v31 = v26 + 0x8000;
  else
    v31 = 4294868992;
  v32 = (v31 >> 16) + v31;
  v33 = 0xFFFF00000000;
  if (v22 <= 0xFFFE8000)
    v33 = (65537 * v22 + 2147516416u) & 0xFFFF00000000;
  return (v28 | (v32 << 32)) & 0xFFFF00000000FFFFLL | v30 & 0xFFFF0000 | (unint64_t)v33;
}

unint64_t PDAhardlightPDA_13501(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;

  v4 = WORD2(a1);
  v5 = a2;
  v6 = a4;
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  else
    v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v8 = a2;
  else
    v8 = (unsigned __int16)a1;
  v9 = 2 * v8 * (unint64_t)v7;
  if (WORD1(a3) >= (unint64_t)a4)
    v10 = a4;
  else
    v10 = WORD1(a3);
  if (WORD1(a1) >= (unint64_t)a2)
    v11 = a2;
  else
    v11 = WORD1(a1);
  v12 = 2 * v11 * (unint64_t)v10;
  if (WORD2(a3) >= (unint64_t)a4)
    v13 = a4;
  else
    v13 = WORD2(a3);
  if (WORD2(a1) >= (unint64_t)a2)
    v4 = a2;
  v14 = 2 * v4 * (unint64_t)v13;
  v15 = a4 * (unint64_t)a2;
  v16 = ((unint64_t)a4 + 1) >> 1;
  v17 = a4 ^ 0xFFFF;
  v18 = v7 * (unint64_t)(v5 ^ 0xFFFF) + (a4 ^ 0xFFFF) * (unint64_t)v8 + v9;
  v19 = (v6 + 0xFFFF) * (unint64_t)v8
      + v7 * (unint64_t)(v5 + 0xFFFF)
      - (v15
       + v9);
  if (v7 > (unint64_t)(v6 + 1) >> 1)
    v20 = v19;
  else
    v20 = v18;
  if (v10 <= v16)
    v21 = v10 * (unint64_t)(v5 ^ 0xFFFF) + v17 * (unint64_t)v11 + v12;
  else
    v21 = (v6 + 0xFFFF) * (unint64_t)v11
        + v10 * (unint64_t)(v5 + 0xFFFF)
        - (v15
         + v12);
  v22 = v13 * (unint64_t)(v5 ^ 0xFFFF)
      + (v6 ^ 0xFFFF) * (unint64_t)v4
      + v14;
  v23 = (v6 + 0xFFFF) * (unint64_t)v4
      + v13 * (unint64_t)(v5 + 0xFFFF)
      - (v15
       + v14);
  if (v13 > v16)
    v24 = v23;
  else
    v24 = v22;
  v25 = 0xFFFF * (v6 + v5) - v15;
  v26 = v20 + 0x8000;
  if (v20 > 4294868992)
    v26 = 4294868992;
  v27 = ((v26 >> 16) + v26) >> 16;
  v28 = v21 + 0x8000;
  if (v21 > 4294868992)
    v28 = 4294868992;
  v29 = (v28 >> 16) + v28;
  if (v25 <= 4294868992)
    v30 = v25 + 0x8000;
  else
    v30 = 4294868992;
  v31 = (v30 >> 16) + v30;
  v32 = (65537 * v24 + 2147516416) & 0xFFFF00000000;
  v33 = v24 <= 4294868992;
  v34 = 0xFFFF00000000;
  if (v33)
    v34 = v32;
  return (v27 | (v31 << 32)) & 0xFFFF00000000FFFFLL | v29 & 0xFFFF0000 | (unint64_t)v34;
}

unint64_t PDAsoftlightPDA_13502(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = (unsigned __int16)a1;
  v5 = (unsigned __int16)a3;
  v6 = WORD1(a3);
  v7 = WORD2(a3);
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v5 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v4 = a2;
  if (a2)
  {
    v8 = WORD2(a1);
    v9 = WORD1(a1);
    v10 = 2 * v4 * (unint64_t)v5 - (uint64_t)(v4 * (unint64_t)v4 * (2 * v5 - a4)) / a2;
    v11 = v10 & ~(v10 >> 63);
    if (WORD1(a3) >= (unint64_t)a4)
      v6 = a4;
    if (WORD1(a1) >= (unint64_t)a2)
      v9 = a2;
    v12 = 2 * v9 * (unint64_t)v6 - (uint64_t)(v9 * (unint64_t)v9 * (2 * v6 - a4)) / a2;
    v13 = v12 & ~(v12 >> 63);
    if (WORD2(a3) >= (unint64_t)a4)
      v7 = a4;
    if (WORD2(a1) >= (unint64_t)a2)
      v8 = a2;
    v14 = 2 * v8 * (unint64_t)v7 - (uint64_t)(v8 * (unint64_t)v8 * (2 * v7 - a4)) / a2;
    v15 = v14 & ~(v14 >> 63);
  }
  else
  {
    v8 = 0;
    v13 = 0;
    v11 = 0;
    v9 = 0;
    v15 = 0;
    if (WORD1(a3) >= (unint64_t)a4)
      LODWORD(v6) = a4;
    if (WORD2(a3) >= (unint64_t)a4)
      LODWORD(v7) = a4;
  }
  v16 = v11 + (a4 ^ 0xFFFF) * (unint64_t)v4;
  v17 = v13 + v9 * (unint64_t)(a4 ^ 0xFFFF);
  v18 = v15 + v8 * (unint64_t)(a4 ^ 0xFFFF);
  if (a4 == 0xFFFF)
  {
    v17 = v13;
    v19 = v15;
  }
  else
  {
    v19 = v18;
  }
  if (a4 == 0xFFFF)
    v16 = v11;
  v20 = v16 + v5 * (unint64_t)(a2 ^ 0xFFFF);
  v21 = v17 + v6 * (unint64_t)(a2 ^ 0xFFFF);
  v22 = v19 + v7 * (unint64_t)(a2 ^ 0xFFFF);
  if (a2 == 0xFFFF)
  {
    v21 = v17;
    v22 = v19;
    v20 = v16;
  }
  v23 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  v24 = v20 + 0x8000;
  if (v20 > 0xFFFE8000)
    v24 = 4294868992;
  v25 = ((v24 >> 16) + v24) >> 16;
  v26 = v21 + 0x8000;
  if (v21 > 0xFFFE8000)
    v26 = 4294868992;
  v27 = (v26 >> 16) + v26;
  if (v23 <= 4294868992)
    v28 = v23 + 0x8000;
  else
    v28 = 4294868992;
  v29 = (unint64_t)((v28 >> 16) + v28) >> 16;
  v30 = 0xFFFF00000000;
  if (v22 <= 0xFFFE8000)
    v30 = (65537 * v22 + 2147516416u) & 0xFFFF00000000;
  return v30 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v29 << 48) | v27 & 0xFFFF0000 | v25;
}

unint64_t PDAdifferencePDA_13503(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v4 = (unsigned __int16)a1;
  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v4 = a2;
  v8 = v4 * (unint64_t)a4 - v7 * (unint64_t)a2;
  v9 = 0xFFFF * (v7 + v4) - v7 * (unint64_t)a2 - v4 * (unint64_t)a4;
  if (v8 >= 0)
    v10 = v8;
  else
    v10 = -v8;
  v11 = v9 + v10;
  if (WORD1(a3) >= (unint64_t)a4)
    v12 = a4;
  else
    v12 = WORD1(a3);
  if (WORD1(a1) >= (unint64_t)a2)
    v5 = a2;
  v13 = v5 * (unint64_t)a4 - v12 * (unint64_t)a2;
  v14 = 0xFFFF * (v12 + v5) - v12 * (unint64_t)a2 - v5 * (unint64_t)a4;
  if (v13 >= 0)
    v15 = v13;
  else
    v15 = -v13;
  v16 = v14 + v15;
  if (WORD2(a3) >= (unint64_t)a4)
    v17 = a4;
  else
    v17 = WORD2(a3);
  if (WORD2(a1) >= (unint64_t)a2)
    v6 = a2;
  v18 = v6 * (unint64_t)a4 - v17 * (unint64_t)a2;
  v19 = 0xFFFF * (v17 + v6) - v17 * (unint64_t)a2 - v6 * (unint64_t)a4;
  if (v18 >= 0)
    v20 = v18;
  else
    v20 = -v18;
  v21 = v19 + v20;
  v22 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v11 <= 4294868992)
    v23 = v11 + 0x8000;
  else
    v23 = 4294868992;
  v24 = ((v23 >> 16) + v23) >> 16;
  if (v16 <= 4294868992)
    v25 = v16 + 0x8000;
  else
    v25 = 4294868992;
  v26 = (v25 >> 16) + v25;
  if (v22 <= 4294868992)
    v27 = v22 + 0x8000;
  else
    v27 = 4294868992;
  v28 = (unint64_t)((v27 >> 16) + v27) >> 16;
  v29 = (65537 * v21 + 2147516416) & 0xFFFF00000000;
  v30 = v21 <= 4294868992;
  v31 = 0xFFFF00000000;
  if (v30)
    v31 = v29;
  return v31 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v28 << 48) | v26 & 0xFFFF0000 | v24;
}

unint64_t PDAexclusionPDA_13504(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = (unsigned __int16)a1;
  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v4 = a2;
  v8 = 0xFFFF * (v7 + v4) - 2 * v4 * (unint64_t)v7;
  if (WORD1(a3) >= (unint64_t)a4)
    v9 = a4;
  else
    v9 = WORD1(a3);
  if (WORD1(a1) >= (unint64_t)a2)
    v5 = a2;
  v10 = 0xFFFF * (v9 + v5) - 2 * v5 * (unint64_t)v9;
  if (WORD2(a3) >= (unint64_t)a4)
    v11 = a4;
  else
    v11 = WORD2(a3);
  if (WORD2(a1) >= (unint64_t)a2)
    v6 = a2;
  v12 = 0xFFFF * (v11 + v6) - 2 * v6 * (unint64_t)v11;
  v13 = 0xFFFF * (a4 + (unint64_t)a2) - a4 * (unint64_t)a2;
  if (v8 <= 4294868992)
    v14 = v8 + 0x8000;
  else
    v14 = 4294868992;
  v15 = ((v14 >> 16) + v14) >> 16;
  if (v10 <= 4294868992)
    v16 = v10 + 0x8000;
  else
    v16 = 4294868992;
  v17 = (v16 >> 16) + v16;
  if (v13 <= 4294868992)
    v18 = v13 + 0x8000;
  else
    v18 = 4294868992;
  v19 = (unint64_t)((v18 >> 16) + v18) >> 16;
  v20 = (65537 * v12 + 2147516416) & 0xFFFF00000000;
  v21 = v12 <= 4294868992;
  v22 = 0xFFFF00000000;
  if (v21)
    v22 = v20;
  return v22 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v19 << 48) | v17 & 0xFFFF0000 | v15;
}

unint64_t PDAhuePDA_13505(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;

  v5 = WORD1(a1);
  v6 = WORD2(a1);
  v49 = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v8 = a4;
  else
    v8 = (unsigned __int16)a3;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v9 = a2;
  else
    v9 = (unsigned __int16)a1;
  if (WORD1(a3) >= (unint64_t)a4)
    v10 = a4;
  else
    v10 = WORD1(a3);
  if (v5 >= a2)
    v11 = a2;
  else
    v11 = v5;
  if (WORD2(a3) >= (unint64_t)a4)
    v12 = a4;
  else
    v12 = WORD2(a3);
  if (v6 >= a2)
    v13 = a2;
  else
    v13 = v6;
  if (a4 == 0xFFFF)
  {
    v16 = 0;
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v14 = (a4 ^ 0xFFFF) * (unint64_t)v9;
    v9 = (v9 * (unint64_t)a4 + 0x8000 + ((v9 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v15 = (a4 ^ 0xFFFF) * (unint64_t)v11;
    v11 = (v11 * (unint64_t)a4
         + 0x8000
         + ((v11 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v16 = (a4 ^ 0xFFFF) * (unint64_t)v13;
    v13 = (v13 * (unint64_t)a4
         + 0x8000
         + ((v13 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v14 += v8 * (unint64_t)(a2 ^ 0xFFFF);
    v8 = (v8 * (unint64_t)a2 + 0x8000 + ((v8 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v15 += v10 * (unint64_t)(a2 ^ 0xFFFF);
    v10 = (v10 * (unint64_t)a2
         + 0x8000
         + ((v10 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v16 += v12 * (unint64_t)(a2 ^ 0xFFFF);
    v12 = (v12 * (unint64_t)a2
         + 0x8000
         + ((v12 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  v46 = v8;
  v47 = v10;
  v48 = v12;
  v17 = v8 >= v10;
  v18 = v8 < v10;
  v19 = v17;
  if (v12 >= *(&v46 + v19))
  {
    v20 = v19;
    if (v12 <= *(&v46 + v18))
      v19 = 2;
    else
      v19 = v18;
    if (v12 > *(&v46 + v18))
      v18 = 2;
  }
  else
  {
    v20 = 2;
  }
  v21 = *(&v46 + v18);
  v22 = *(&v46 + v20);
  v23 = v21 <= v22;
  v24 = v21 - v22;
  if (v23)
  {
    *(&v46 + v18) = 0;
    *(&v46 + v19) = 0;
  }
  else
  {
    if (v9 >= v11)
      v25 = v11;
    else
      v25 = v9;
    if (v9 <= v11)
      v26 = v11;
    else
      v26 = v9;
    if (v13 <= v26)
      v27 = v26;
    else
      v27 = v13;
    if (v13 >= v25)
      v26 = v27;
    else
      v25 = v13;
    v28 = v26 - v25;
    *(&v46 + v18) = v28;
    *(&v46 + v19) = ((*(&v46 + v19) - *(&v46 + v20)) * ((uint64_t)(v28 << 16) / v24) + 0x8000) >> 16;
  }
  *(&v46 + v20) = 0;
  v29 = 77 * (v9 - v46) + 151 * (v11 - v47) + 28 * (v13 - v48);
  v30 = v46 + ((v29 + 128) >> 8);
  v31 = v47 + ((v29 + 128) >> 8);
  v32 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  v33 = v48 + ((v29 + 128) >> 8);
  if (v29 != (char)v29)
  {
    if (v46 >= v47)
      v34 = v47 + ((v29 + 128) >> 8);
    else
      v34 = v46 + ((v29 + 128) >> 8);
    if (v46 >= v47)
      v35 = v46 + ((v29 + 128) >> 8);
    else
      v35 = v47 + ((v29 + 128) >> 8);
    if (v33 <= v35)
      v36 = v35;
    else
      v36 = v48 + ((v29 + 128) >> 8);
    if (v33 >= v34)
      v37 = v34;
    else
      v37 = v48 + ((v29 + 128) >> 8);
    if (v33 >= v34)
      v35 = v36;
    if (v35 > v32 || v37 < 0)
    {
      v38 = (77 * v30 + 151 * v31 + 28 * v33 + 128) >> 8;
      if (v29 > -129)
      {
        v39 = v35 - v38;
        if (v35 == v38)
          goto LABEL_72;
        v40 = v32 - v38;
      }
      else
      {
        v39 = v38 - v37;
        if (v38 == v37)
          goto LABEL_72;
        v40 = (77 * v30 + 151 * v31 + 28 * v33 + 128) >> 8;
      }
      v41 = (v40 << 16) / v39;
      v30 = v38 + ((v41 * (v30 - v38) + 0x8000) >> 16);
      v31 = v38 + ((v41 * (v31 - v38) + 0x8000) >> 16);
      v33 = v38 + ((v41 * (v33 - v38) + 0x8000) >> 16);
    }
  }
LABEL_72:
  if (v16 <= 0xFFFE8000)
    v42 = v16 + 0x8000;
  else
    v42 = 4294868992;
  if (v15 <= 0xFFFE8000)
    v43 = v15 + 0x8000;
  else
    v43 = 4294868992;
  if (v14 <= 0xFFFE8000)
    v44 = v14 + 0x8000;
  else
    v44 = 4294868992;
  return ((unint64_t)(a4 + a2 - v32) << 48) | ((unint64_t)(unsigned __int16)(v33 + (((v42 >> 16) + v42) >> 16)) << 32) | ((v43 >> 16) + (_DWORD)v43 + ((_DWORD)v31 << 16)) & 0xFFFF0000 | (unsigned __int16)(v30 + (((v44 >> 16) + v44) >> 16));
}

unint64_t PDAsaturationPDA_13506(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;

  v5 = WORD2(a1);
  v46 = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)a3 >= (unint64_t)a4)
    v7 = a4;
  else
    v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v8 = a2;
  else
    v8 = (unsigned __int16)a1;
  if (WORD1(a3) >= (unint64_t)a4)
    v9 = a4;
  else
    v9 = WORD1(a3);
  if (WORD1(a1) >= (unint64_t)a2)
    v10 = a2;
  else
    v10 = WORD1(a1);
  if (WORD2(a3) >= (unint64_t)a4)
    v11 = a4;
  else
    v11 = WORD2(a3);
  if (v5 >= a2)
    v12 = a2;
  else
    v12 = v5;
  if (a4 == 0xFFFF)
  {
    v15 = 0;
    v14 = 0;
    v13 = 0;
  }
  else
  {
    v13 = (a4 ^ 0xFFFF) * (unint64_t)v8;
    v8 = (v8 * (unint64_t)a4 + 0x8000 + ((v8 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v14 = (a4 ^ 0xFFFF) * (unint64_t)v10;
    v10 = (v10 * (unint64_t)a4
         + 0x8000
         + ((v10 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v15 = (a4 ^ 0xFFFF) * (unint64_t)v12;
    v12 = (v12 * (unint64_t)a4
         + 0x8000
         + ((v12 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v13 += v7 * (unint64_t)(a2 ^ 0xFFFF);
    v7 = (v7 * (unint64_t)a2 + 0x8000 + ((v7 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v14 += v9 * (unint64_t)(a2 ^ 0xFFFF);
    v9 = (v9 * (unint64_t)a2 + 0x8000 + ((v9 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v15 += v11 * (unint64_t)(a2 ^ 0xFFFF);
    v11 = (v11 * (unint64_t)a2
         + 0x8000
         + ((v11 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  v43 = v8;
  v44 = v10;
  v45 = v12;
  v16 = v8 < v10;
  v17 = v8 >= v10;
  if (v12 >= *(&v43 + v17))
  {
    v18 = v8 >= v10;
    if (v12 <= *(&v43 + v16))
      v17 = 2;
    else
      v17 = v8 < v10;
    if (v12 > *(&v43 + v16))
      v16 = 2;
  }
  else
  {
    v18 = 2;
  }
  v19 = *(&v43 + v16);
  v20 = *(&v43 + v18);
  v21 = __OFSUB__(v19, v20);
  v22 = v19 - v20;
  if ((v22 < 0) ^ v21 | (v22 == 0))
  {
    *(&v43 + v16) = 0;
    *(&v43 + v17) = 0;
  }
  else
  {
    if (v7 >= v9)
      v23 = v9;
    else
      v23 = v7;
    if (v7 <= v9)
      v7 = v9;
    if (v11 <= v7)
      v24 = v7;
    else
      v24 = v11;
    if (v11 >= v23)
    {
      v11 = v23;
      v7 = v24;
    }
    v25 = v7 - v11;
    *(&v43 + v16) = v25;
    *(&v43 + v17) = ((*(&v43 + v17) - *(&v43 + v18)) * ((uint64_t)(v25 << 16) / v22) + 0x8000) >> 16;
  }
  *(&v43 + v18) = 0;
  v26 = 77 * (v8 - v43) + 151 * (v10 - v44) + 28 * (v12 - v45);
  v27 = v43 + ((v26 + 128) >> 8);
  v28 = v44 + ((v26 + 128) >> 8);
  v29 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  v30 = v45 + ((v26 + 128) >> 8);
  if (v26 != (char)v26)
  {
    if (v43 >= v44)
      v31 = v44 + ((v26 + 128) >> 8);
    else
      v31 = v43 + ((v26 + 128) >> 8);
    if (v43 >= v44)
      v32 = v43 + ((v26 + 128) >> 8);
    else
      v32 = v44 + ((v26 + 128) >> 8);
    if (v30 <= v32)
      v33 = v32;
    else
      v33 = v45 + ((v26 + 128) >> 8);
    if (v30 >= v31)
      v34 = v31;
    else
      v34 = v45 + ((v26 + 128) >> 8);
    if (v30 >= v31)
      v32 = v33;
    if (v32 > v29 || v34 < 0)
    {
      v35 = (77 * v27 + 151 * v28 + 28 * v30 + 128) >> 8;
      if (v26 > -129)
      {
        v36 = v32 - v35;
        if (v32 == v35)
          goto LABEL_67;
        v37 = v29 - v35;
      }
      else
      {
        v36 = v35 - v34;
        if (v35 == v34)
          goto LABEL_67;
        v37 = (77 * v27 + 151 * v28 + 28 * v30 + 128) >> 8;
      }
      v38 = (v37 << 16) / v36;
      v27 = v35 + ((v38 * (v27 - v35) + 0x8000) >> 16);
      v28 = v35 + ((v38 * (v28 - v35) + 0x8000) >> 16);
      v30 = v35 + ((v38 * (v30 - v35) + 0x8000) >> 16);
    }
  }
LABEL_67:
  if (v15 <= 0xFFFE8000)
    v39 = v15 + 0x8000;
  else
    v39 = 4294868992;
  if (v14 <= 0xFFFE8000)
    v40 = v14 + 0x8000;
  else
    v40 = 4294868992;
  if (v13 <= 0xFFFE8000)
    v41 = v13 + 0x8000;
  else
    v41 = 4294868992;
  return ((unint64_t)(a4 + a2 - v29) << 48) | ((unint64_t)(unsigned __int16)(v30 + (((v39 >> 16) + v39) >> 16)) << 32) | ((v40 >> 16) + (_DWORD)v40 + ((_DWORD)v28 << 16)) & 0xFFFF0000 | (unsigned __int16)(v27 + (((v41 >> 16) + v41) >> 16));
}

unint64_t PDAluminosityPDA_13507(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  BOOL v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;

  if ((unsigned __int16)a3 >= (unint64_t)a4)
    LODWORD(v6) = a4;
  else
    LODWORD(v6) = (unsigned __int16)a3;
  if ((unsigned __int16)a1 >= (unint64_t)a2)
    v7 = a2;
  else
    v7 = (unsigned __int16)a1;
  if (WORD1(a3) >= (unint64_t)a4)
    LODWORD(v8) = a4;
  else
    LODWORD(v8) = WORD1(a3);
  if (WORD1(a1) >= (unint64_t)a2)
    v9 = a2;
  else
    v9 = WORD1(a1);
  if (WORD2(a3) >= (unint64_t)a4)
    LODWORD(v10) = a4;
  else
    LODWORD(v10) = WORD2(a3);
  if (WORD2(a1) >= (unint64_t)a2)
    v11 = a2;
  else
    v11 = WORD2(a1);
  if (a4 == 0xFFFF)
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = (a4 ^ 0xFFFF) * (unint64_t)v7;
    v7 = (v7 * (unint64_t)a4 + 0x8000 + ((v7 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v13 = (a4 ^ 0xFFFF) * (unint64_t)v9;
    v9 = (v9 * (unint64_t)a4 + 0x8000 + ((v9 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
    v14 = (a4 ^ 0xFFFF) * (unint64_t)v11;
    v11 = (v11 * (unint64_t)a4
         + 0x8000
         + ((v11 * (unint64_t)a4 + 0x8000) >> 16)) >> 16;
  }
  if (a2 != 0xFFFF)
  {
    v12 += v6 * (unint64_t)(a2 ^ 0xFFFF);
    v6 = (v6 * (unint64_t)a2 + 0x8000 + ((v6 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v13 += v8 * (unint64_t)(a2 ^ 0xFFFF);
    v8 = (v8 * (unint64_t)a2 + 0x8000 + ((v8 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
    v14 += v10 * (unint64_t)(a2 ^ 0xFFFF);
    v10 = (v10 * (unint64_t)a2
         + 0x8000
         + ((v10 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  }
  v15 = 28 * ((int)v10 - (int)v11) + 151 * ((int)v8 - (int)v9) + 77 * ((int)v6 - (int)v7);
  v16 = v7 + ((v15 + 128) >> 8);
  v17 = v9 + ((v15 + 128) >> 8);
  v18 = (a4 * (unint64_t)a2 + 0x8000 + ((a4 * (unint64_t)a2 + 0x8000) >> 16)) >> 16;
  v19 = v11 + ((v15 + 128) >> 8);
  if (v15 != (char)v15)
  {
    v20 = v7 >= v9;
    if (v7 >= v9)
      v21 = v9 + ((v15 + 128) >> 8);
    else
      v21 = v7 + ((v15 + 128) >> 8);
    if (v20)
      v22 = v16;
    else
      v22 = v9 + ((v15 + 128) >> 8);
    if (v19 <= v22)
      v23 = v22;
    else
      v23 = v19;
    if (v19 >= v21)
      v24 = v21;
    else
      v24 = v19;
    if (v19 >= v21)
      v22 = v23;
    if (v22 > v18 || v24 < 0)
    {
      v25 = (77 * v16 + 151 * v17 + 28 * v19 + 128) >> 8;
      if (v15 > -129)
      {
        v26 = v22 - v25;
        if (v22 == v25)
          goto LABEL_47;
        v27 = v18 - v25;
      }
      else
      {
        v26 = v25 - v24;
        if (!v26)
          goto LABEL_47;
        v27 = (77 * v16 + 151 * v17 + 28 * v19 + 128) >> 8;
      }
      v28 = (v27 << 16) / v26;
      v16 = v25 + ((v28 * (v16 - v25) + 0x8000) >> 16);
      v17 = v25 + ((v28 * (v17 - v25) + 0x8000) >> 16);
      v19 = v25 + ((v28 * (v19 - v25) + 0x8000) >> 16);
    }
  }
LABEL_47:
  v29 = a4 + a2 - v18;
  v30 = v14 + 0x8000;
  if (v14 > 0xFFFE8000)
    v30 = 4294868992;
  v31 = v19 + (((v30 >> 16) + v30) >> 16);
  if (v13 <= 0xFFFE8000)
    v32 = v13 + 0x8000;
  else
    v32 = 4294868992;
  v33 = (v32 >> 16) + v32;
  if (v12 <= 0xFFFE8000)
    v34 = v12 + 0x8000;
  else
    v34 = 4294868992;
  return (v29 << 48) | ((unint64_t)(unsigned __int16)v31 << 32) | (v33 + ((_DWORD)v17 << 16)) & 0xFFFF0000 | (unsigned __int16)(v16 + (((v34 >> 16) + v34) >> 16));
}

void rgba64_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  char v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;

  v6 = *((unsigned __int16 *)a2 + 4);
  v108 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v107 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v104 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v104 * a4;
  v12 = *(unsigned __int8 **)(a1 + 32);
  v13 = &v12[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v105 = v10;
  v106 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v14 = a3;
    v102 = *((_QWORD *)a2 + 11);
    v101 = *((_QWORD *)a2 + 13);
    v100 = ~(-1 << v10);
    v99 = v10 - 4;
    v98 = -v9;
    v15 = v13 - 4;
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(255 - ((255 * v16 + 0x8000 + ((255 * v16 + 0x8000) >> 16)) >> 16)) << 48;
    v96 = v8 + 16 * v14 + 8;
    v97 = a5;
    v18 = BLEND8_19499;
    v114 = v6 ^ 0xFFFF;
    v113 = *((unsigned __int16 *)a2 + 4);
    while (1)
    {
      v111 = a6;
      if (((v101 - v11) | (v11 - v102)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v100) >> v99) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v98 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v109 = v11;
      v22 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      if (v108 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v96;
        v24 = v97;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int8 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = *v28;
          v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v40 = (unsigned __int8 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v40 = v15;
            if (v40 < v12)
              v40 = v12;
            v41 = v18[v21];
            v29 -= (v41 & v29) >> v21;
            v39 = (v41 & *v40) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v29 = v29;
          v42 = (0x100010001 * (v29 | (v29 << 8))) | 0xFFFF000000000000;
          v43 = (unsigned __int16)(v29 - ((v29 * v16 + 0x8000 + ((v29 * v16 + 0x8000) >> 16)) >> 16));
          v44 = ((unint64_t)v43 << 16) | (v43 << 32) | v17 | v43;
          if (v6 == 0xFFFF)
            v44 = v42;
          *v7++ = (uint16x4_t)v44;
          if (!--v24)
            goto LABEL_84;
        }
        v31 = (unsigned __int8 *)(v27 + (v26 >> 4));
        if (v15 < v31)
          v31 = v15;
        if (v31 < v12)
          v31 = v12;
        v32 = *v31;
        if (v21)
        {
          v33 = (unsigned __int8 *)(v27 + v20);
          if (v15 >= v33)
            v34 = v33;
          else
            v34 = v15;
          if (v34 < v12)
            v34 = v12;
          v35 = *v34;
          v36 = &v33[v26 >> 4];
          if (v15 < v36)
            v36 = v15;
          if (v36 < v12)
            v36 = v12;
          v37 = v18[v21];
          v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          v32 = v32 - ((v37 & v32) >> v21) + ((v37 & *v36) >> v21);
        }
        v38 = v18[*v23 & 0xF];
        v29 -= (v38 & v29) >> v30;
        v39 = (v38 & v32) >> v30;
LABEL_40:
        LOBYTE(v29) = v29 + v39;
        goto LABEL_41;
      }
LABEL_84:
      v9 = v106;
      v7 += v107;
      LOBYTE(v10) = v105;
      v11 = v109 + v104;
      a6 = v111 - 1;
      if (v111 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_84;
    v45 = (uint64_t *)v96;
    v46 = v97;
    while (1)
    {
      v47 = *(v45 - 1);
      v48 = *v45;
      v49 = v22 + v47;
      if ((unint64_t)v15 >= v22 + v47)
        v50 = (unsigned __int8 *)(v22 + v47);
      else
        v50 = v15;
      if (v50 < v12)
        v50 = v12;
      v51 = *v50;
      v52 = v48 & 0xF;
      if ((v48 & 0xF) != 0)
        break;
      if (v21)
      {
        v62 = (unsigned __int8 *)(v49 + v20);
        if ((unint64_t)v15 < v49 + v20)
          v62 = v15;
        if (v62 < v12)
          v62 = v12;
        v63 = v18[v21];
        v51 -= (v63 & v51) >> v21;
        v61 = (v63 & *v62) >> v21;
        goto LABEL_75;
      }
LABEL_76:
      v51 = v51;
      v64 = (0x100010001 * (v51 | (v51 << 8))) | 0xFFFF000000000000;
      v65 = (unsigned __int16)(v51 - ((v51 * v16 + 0x8000 + ((v51 * v16 + 0x8000) >> 16)) >> 16));
      v66 = ((unint64_t)v65 << 16) | (v65 << 32) | v17 | v65;
      if (v6 == 0xFFFF)
        v67 = v64;
      else
        v67 = v66;
      v68 = HIWORD(v67);
      if (HIWORD(v67))
      {
        if ((_DWORD)v68 == 0xFFFF)
        {
          *v7 = (uint16x4_t)v67;
        }
        else
        {
          v69 = v17;
          v70 = v18;
          v71 = v22;
          v72 = v20;
          rgba64_DplusDM(v7, v67, (unint64_t)*v7, v68 ^ 0xFFFF);
          v20 = v72;
          v22 = v71;
          v18 = v70;
          v17 = v69;
          v6 = v113;
          v16 = v114;
        }
      }
      v45 += 2;
      ++v7;
      if (!--v46)
        goto LABEL_84;
    }
    v53 = (unsigned __int8 *)(v49 + (v48 >> 4));
    if (v15 < v53)
      v53 = v15;
    if (v53 < v12)
      v53 = v12;
    v54 = *v53;
    if (v21)
    {
      v55 = (unsigned __int8 *)(v49 + v20);
      if (v15 >= v55)
        v56 = v55;
      else
        v56 = v15;
      if (v56 < v12)
        v56 = v12;
      v57 = *v56;
      v58 = &v55[v48 >> 4];
      if (v15 < v58)
        v58 = v15;
      if (v58 < v12)
        v58 = v12;
      v59 = v18[v21];
      v51 = v51 - ((v59 & v51) >> v21) + ((v59 & v57) >> v21);
      v54 = v54 - ((v59 & v54) >> v21) + ((v59 & *v58) >> v21);
    }
    v60 = v18[*v45 & 0xF];
    v51 -= (v60 & v51) >> v52;
    v61 = (v60 & v54) >> v52;
LABEL_75:
    LOBYTE(v51) = v51 + v61;
    goto LABEL_76;
  }
  v73 = v13 - 4;
  v74 = v6 ^ 0xFFFF;
  v75 = (unint64_t)(255 - ((255 * v74 + 0x8000 + ((255 * v74 + 0x8000) >> 16)) >> 16)) << 48;
  v115 = a5;
  v116 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v76 = *(unsigned __int8 **)(a1 + 32);
    v77 = &v76[(v11 >> v10) * v9];
    v112 = a6;
    v110 = v11;
    if (v108 == 1)
    {
      if (a5 >= 1)
      {
        v79 = v115;
        v78 = v116;
        do
        {
          v80 = *v78;
          v78 += 2;
          v81 = &v77[v80];
          if (v73 < &v77[v80])
            v81 = v73;
          if (v81 < v76)
            v81 = v76;
          v82 = *v81;
          v83 = (0x100010001 * (v82 | (v82 << 8))) | 0xFFFF000000000000;
          v84 = (unsigned __int16)(v82 - ((v82 * v74 + 0x8000 + ((v82 * v74 + 0x8000) >> 16)) >> 16));
          v85 = ((unint64_t)v84 << 16) | (v84 << 32) | v75 | v84;
          if (v6 == 0xFFFF)
            v85 = v83;
          *v7++ = (uint16x4_t)v85;
          --v79;
        }
        while (v79);
      }
    }
    else
    {
      v87 = v115;
      v86 = v116;
      if (a5 >= 1)
      {
        do
        {
          v88 = *v86;
          v86 += 2;
          v89 = &v77[v88];
          if (v73 < &v77[v88])
            v89 = v73;
          if ((unint64_t)v89 < *(_QWORD *)(a1 + 32))
            v89 = *(unsigned __int8 **)(a1 + 32);
          v90 = *v89;
          v91 = (0x100010001 * (v90 | (v90 << 8))) | 0xFFFF000000000000;
          v92 = (unsigned __int16)(v90 - ((v90 * v74 + 0x8000 + ((v90 * v74 + 0x8000) >> 16)) >> 16));
          v93 = ((unint64_t)v92 << 16) | (v92 << 32) | v75 | v92;
          if (v6 == 0xFFFF)
            v94 = v91;
          else
            v94 = v93;
          v95 = HIWORD(v94);
          if (HIWORD(v94))
          {
            if ((_DWORD)v95 == 0xFFFF)
              *v7 = (uint16x4_t)v94;
            else
              rgba64_DplusDM(v7, v94, (unint64_t)*v7, v95 ^ 0xFFFF);
          }
          ++v7;
          --v87;
        }
        while (v87);
      }
    }
    v9 = v106;
    v7 += v107;
    LOBYTE(v10) = v105;
    v11 = v110 + v104;
    a6 = v112 - 1;
  }
  while (v112 != 1);
}

void rgba64_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(_QWORD, _QWORD))
{
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  void *v54;
  void *v55;
  int v56;
  int v57;
  void (*v58)(_QWORD, _QWORD);
  char *v59;
  _QWORD *v60;
  _DWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int v71;
  _QWORD v72[3];

  v72[1] = *MEMORY[0x1E0C80C00];
  v8.n128_u32[1] = 0;
  v8.n128_u64[1] = 0;
  v62 = 0u;
  v63 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v61[0] = a3;
  v61[1] = a4;
  v8.n128_f32[0] = (float)(*(float *)(a2 + 184) * 65535.0) + 0.5;
  LOWORD(v62) = (int)v8.n128_f32[0];
  v9 = (unint64_t)*(int *)(a1 + 28) >> 3;
  *(_QWORD *)&v63 = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 20);
  v12 = HIBYTE(v11);
  v13 = BYTE2(v11);
  if (v10)
  {
    v14 = *(int *)(a2 + 24);
    v15 = (uint64_t *)(a2 + 104);
    v16 = (uint64_t *)(a2 + 72);
    v17 = (uint64_t *)(a2 + 88);
    v18 = v12;
  }
  else
  {
    v14 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v15 = (uint64_t *)(a2 + 96);
    v16 = (uint64_t *)(a2 + 64);
    v17 = (uint64_t *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 112);
    v18 = v13;
  }
  v19 = *v17;
  v20 = *v16;
  v21 = *v15;
  v22 = v18;
  *((_QWORD *)&v64 + 1) = v18;
  *((_QWORD *)&v63 + 1) = v21;
  *((_QWORD *)&v68 + 1) = v14;
  *((_QWORD *)&v67 + 1) = v19;
  *((_QWORD *)&v66 + 1) = v20;
  *((_QWORD *)&v65 + 1) = v10;
  v23 = *(_QWORD *)(a2 + 128);
  if (v23)
  {
    v24 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v25 = (uint64_t *)(a2 + 96);
    v26 = (uint64_t *)(a2 + 64);
    v27 = (uint64_t *)(a2 + 80);
    v12 = v13;
  }
  else
  {
    v24 = *(int *)(a2 + 24);
    v25 = (uint64_t *)(a2 + 104);
    v26 = (uint64_t *)(a2 + 72);
    v27 = (uint64_t *)(a2 + 88);
    v23 = *(_QWORD *)(a2 + 136);
  }
  v60 = &v58;
  v28 = *v27;
  v29 = *v26;
  v30 = *v25;
  *(_QWORD *)&v65 = v12;
  *(_QWORD *)&v64 = v30;
  *(_QWORD *)&v69 = v24;
  *(_QWORD *)&v68 = v28;
  *(_QWORD *)&v67 = v29;
  *(_QWORD *)&v66 = v23;
  v31 = *(int *)(a1 + 4);
  v32 = MEMORY[0x1E0C80A78](v20, v8);
  v59 = (char *)&v58 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL)
    v37 = (uint64_t *)((char *)&v58 - v34 - 15);
  else
    v37 = 0;
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    v58 = a5;
    v38 = v32;
    v39 = v36;
    v40 = (char *)malloc_type_malloc(16 * v31, 0x1B1F656EuLL);
    v36 = v39;
    v37 = (uint64_t *)v40;
    v32 = v38;
    a5 = v58;
  }
  *((_QWORD *)&v69 + 1) = v37;
  if (v37)
  {
    v41 = v31;
    if (*(_QWORD *)(a2 + 176))
    {
      if ((int)v31 >= 1)
      {
        v42 = v37 + 1;
        v43 = -v32;
        v44 = v36 - v21;
        do
        {
          if (((v43 + v21) | v44) < 0)
          {
            v47 = 0;
            v48 = 0;
          }
          else
          {
            v45 = ((v21 & (unint64_t)~(-1 << v22)) >> (v22 - 4)) & 0xF;
            v46 = weights_19497[v45];
            if (v45 - 7 >= 9)
              v47 = -(uint64_t)v14;
            else
              v47 = v14;
            v48 = v46 & 0xF;
          }
          v32 = v14 * (v21 >> v22);
          *(v42 - 1) = v32;
          *v42 = v48 | (16 * v47);
          v42 += 2;
          v21 += v10;
          v44 -= v10;
          --v41;
        }
        while (v41);
      }
    }
    else if ((int)v31 >= 1)
    {
      v49 = v37 + 1;
      do
      {
        *(v49 - 1) = v14 * (v21 >> v22);
        *v49 = 0;
        v49 += 2;
        v21 += v10;
        --v41;
      }
      while (v41);
    }
    v50 = *(_DWORD *)(a1 + 4);
    v51 = *(_DWORD *)(a1 + 8);
    v70 = v51;
    v71 = v50;
    v52 = *(int **)(a1 + 136);
    if (v52)
    {
      v53 = *(_DWORD *)(a1 + 104);
      LODWORD(v72[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v72[0]) = v53;
      shape_enum_clip_alloc(v32, v33, v52, 1, 1, 1, v53, v72[0], v50, v51);
      v55 = v54;
      if (v54)
        goto LABEL_31;
    }
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v72[0] = 0;
    while (1)
    {
      *((_QWORD *)&v62 + 1) = *(_QWORD *)(a1 + 40)
                            + 8 * v9 * (*(int *)(a1 + 16) + (uint64_t)v57)
                            + 8 * (v56 + *(_DWORD *)(a1 + 12));
      a5(a2, v61);
      if (!v55)
        break;
LABEL_31:
      if (!shape_enum_clip_next((uint64_t)v55, (int *)v72 + 1, v72, &v71, &v70))
      {
        free(v55);
        break;
      }
      v57 = v72[0];
      v56 = HIDWORD(v72[0]);
      v9 = v63;
    }
    if (v37 != (uint64_t *)v59)
      free(v37);
  }
}

void rgba64_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;

  v6 = *((unsigned __int16 *)a2 + 4);
  v121 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v120 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v117 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v117 * a4;
  v12 = *(unsigned __int8 **)(a1 + 32);
  v13 = &v12[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v14 = 0x8000;
  v122 = a5;
  v118 = v10;
  v119 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v15 = a3;
    v116 = *((_QWORD *)a2 + 11);
    v115 = *((_QWORD *)a2 + 13);
    v114 = ~(-1 << v10);
    v113 = v10 - 4;
    v16 = v13 - 3;
    v17 = v6 ^ 0xFFFFu;
    v18 = (unint64_t)(~(0xFFFF * (_DWORD)v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    v111 = a5;
    v112 = -v9;
    v110 = v8 + 16 * v15 + 8;
    v19 = BLEND8_19499;
    v128 = *((unsigned __int16 *)a2 + 4);
    v127 = v18;
    while (1)
    {
      if (((v115 - v11) | (v11 - v116)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v11 & (unint64_t)v114) >> v113) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v112 : v9;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      v125 = a6;
      v123 = v11;
      if (v121 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v110;
        v25 = v111;
        while (1)
        {
          v26 = *(v24 - 1);
          v27 = *v24;
          v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26)
            v29 = (unsigned __int8 *)(v23 + v26);
          else
            v29 = v16;
          if (v29 < v12)
            v29 = v12;
          v30 = (*v29 << 24) | (v29[1] << 16) | (v29[2] << 8);
          v31 = v27 & 0xF;
          if ((v27 & 0xF) != 0)
            break;
          if ((_DWORD)v22)
          {
            v42 = (unsigned __int8 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21)
              v42 = v16;
            if (v42 < v12)
              v42 = v12;
            v43 = v19[v22];
            v40 = v30 - ((v43 & v30) >> v22);
            v41 = (((*v42 << 24) | (v42[1] << 16) | (v42[2] << 8)) & v43) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          v24 += 2;
          LODWORD(v44) = HIBYTE(v30) | (HIBYTE(v30) << 8);
          v45 = BYTE1(v30) | (BYTE1(v30) << 8);
          v46 = v30 & 0xFF0000 | (BYTE2(v30) << 24) | (unint64_t)(v45 << 32);
          v47 = (((BYTE2(v30) | (BYTE2(v30) << 8))
                - (((_DWORD)v14
                  + (BYTE2(v30) | (BYTE2(v30) << 8)) * (_DWORD)v17
                  + ((v14 + (BYTE2(v30) | (BYTE2(v30) << 8)) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v45 - (((_DWORD)v14 + (_DWORD)v45 * (_DWORD)v17 + ((v14 + v45 * v17) >> 16)) >> 16)) << 32);
          if (v6 == 0xFFFF)
            v44 = v44;
          else
            v44 = (unsigned __int16)(v44
                                   - (((_DWORD)v14 + (_DWORD)v44 * (_DWORD)v17 + ((v14 + v44 * v17) >> 16)) >> 16));
          if (v6 == 0xFFFF)
          {
            v47 = v46;
            v48 = 0xFFFF000000000000;
          }
          else
          {
            v48 = v18;
          }
          *v7++ = (uint16x4_t)(v47 | v44 | v48);
          if (!--v25)
            goto LABEL_91;
        }
        v32 = (unsigned __int8 *)(v28 + (v27 >> 4));
        if (v16 < v32)
          v32 = v16;
        if (v32 < v12)
          v32 = v12;
        v33 = (*v32 << 24) | (v32[1] << 16) | (v32[2] << 8);
        if ((_DWORD)v22)
        {
          v34 = (unsigned __int8 *)(v28 + v21);
          if (v16 >= v34)
            v35 = v34;
          else
            v35 = v16;
          if (v35 < v12)
            v35 = v12;
          v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
          v37 = &v34[v27 >> 4];
          if (v16 < v37)
            v37 = v16;
          if (v37 < v12)
            v37 = v12;
          v38 = v19[v22];
          v30 = v30 - ((v38 & v30) >> v22) + ((v38 & v36) >> v22);
          v33 = v33 - ((v38 & v33) >> v22) + ((((*v37 << 24) | (v37[1] << 16) | (v37[2] << 8)) & v38) >> v22);
        }
        v39 = v19[*v24 & 0xF];
        v40 = v30 - ((v39 & v30) >> v31);
        v41 = (v39 & v33) >> v31;
LABEL_40:
        v30 = v40 + v41;
        goto LABEL_41;
      }
LABEL_91:
      v9 = v119;
      v7 += v120;
      LOBYTE(v10) = v118;
      v11 = v123 + v117;
      a6 = v125 - 1;
      a5 = v122;
      if (v125 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_91;
    v131 = v22;
    v49 = (uint64_t *)v110;
    v50 = v111;
    v129 = v21;
    while (1)
    {
      v51 = *(v49 - 1);
      v52 = *v49;
      v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51)
        v54 = (unsigned __int8 *)(v23 + v51);
      else
        v54 = v16;
      if (v54 < v12)
        v54 = v12;
      v55 = (*v54 << 24) | (v54[1] << 16) | (v54[2] << 8);
      v56 = v52 & 0xF;
      if ((v52 & 0xF) != 0)
        break;
      if ((_DWORD)v22)
      {
        v67 = (unsigned __int8 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21)
          v67 = v16;
        if (v67 < v12)
          v67 = v12;
        v68 = v19[v131];
        v65 = v55 - ((v68 & v55) >> v22);
        v66 = (((*v67 << 24) | (v67[1] << 16) | (v67[2] << 8)) & v68) >> v22;
        goto LABEL_79;
      }
LABEL_80:
      LODWORD(v69) = HIBYTE(v55) | (HIBYTE(v55) << 8);
      v70 = BYTE1(v55) | (BYTE1(v55) << 8);
      v71 = v55 & 0xFF0000 | (BYTE2(v55) << 24) | (unint64_t)(v70 << 32);
      v72 = (((BYTE2(v55) | (BYTE2(v55) << 8))
            - (((_DWORD)v14
              + (BYTE2(v55) | (BYTE2(v55) << 8)) * (_DWORD)v17
              + ((v14 + (BYTE2(v55) | (BYTE2(v55) << 8)) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v70 - (((_DWORD)v14 + (_DWORD)v70 * (_DWORD)v17 + ((v14 + v70 * v17) >> 16)) >> 16)) << 32);
      if (v6 == 0xFFFF)
        v69 = v69;
      else
        v69 = (unsigned __int16)(v69
                               - (((_DWORD)v14 + (_DWORD)v69 * (_DWORD)v17 + ((v14 + v69 * v17) >> 16)) >> 16));
      if (v6 == 0xFFFF)
      {
        v72 = v71;
        v73 = 0xFFFF000000000000;
      }
      else
      {
        v73 = v18;
      }
      if (HIWORD(v73))
      {
        v74 = v72 | v69 | v73;
        if (HIWORD(v73) == 0xFFFF)
        {
          *v7 = (uint16x4_t)v74;
        }
        else
        {
          v75 = v19;
          v76 = v22;
          v77 = v14;
          v78 = v17;
          rgba64_DplusDM(v7, v74, (unint64_t)*v7, HIWORD(v74) ^ 0xFFFF);
          v17 = v78;
          v14 = v77;
          v22 = v76;
          v19 = v75;
          v21 = v129;
          v18 = v127;
          v6 = v128;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v50)
        goto LABEL_91;
    }
    v57 = (unsigned __int8 *)(v53 + (v52 >> 4));
    if (v16 < v57)
      v57 = v16;
    if (v57 < v12)
      v57 = v12;
    v58 = (*v57 << 24) | (v57[1] << 16) | (v57[2] << 8);
    if ((_DWORD)v22)
    {
      v59 = (unsigned __int8 *)(v53 + v21);
      if (v16 >= v59)
        v60 = v59;
      else
        v60 = v16;
      if (v60 < v12)
        v60 = v12;
      v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      v62 = &v59[v52 >> 4];
      if (v16 < v62)
        v62 = v16;
      if (v62 < v12)
        v62 = v12;
      v63 = v19[v131];
      v55 = v55 - ((v63 & v55) >> v22) + ((v63 & v61) >> v22);
      v58 = v58 - ((v63 & v58) >> v22) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v22);
    }
    v64 = v19[*v49 & 0xF];
    v65 = v55 - ((v64 & v55) >> v56);
    v66 = (v64 & v58) >> v56;
LABEL_79:
    v55 = v65 + v66;
    goto LABEL_80;
  }
  v79 = v13 - 3;
  v80 = v6 ^ 0xFFFF;
  v130 = a5;
  v132 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v81 = *(unsigned __int8 **)(a1 + 32);
    v82 = &v81[(v11 >> v10) * v9];
    v126 = a6;
    v124 = v11;
    if (v121 == 1)
    {
      if (a5 >= 1)
      {
        v84 = v130;
        v83 = v132;
        do
        {
          v85 = *v83;
          v83 += 2;
          v86 = &v82[v85];
          if (v79 < &v82[v85])
            v86 = v79;
          if (v86 < v81)
            v86 = v81;
          v87 = *v86;
          v88 = v86[1];
          v89 = v86[2] | (v86[2] << 8);
          v90 = v89 << 32;
          v91 = (v87 << 8) | v87;
          v92 = v91 | (v88 << 16) | (v88 << 24);
          v93 = (((v88 | (v88 << 8))
                - (((v88 | (v88 << 8)) * v80 + 0x8000 + (((v88 | (v88 << 8)) * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v89 - (((_DWORD)v89 * v80 + 0x8000 + ((v89 * v80 + 0x8000) >> 16)) >> 16)) << 32);
          LODWORD(v94) = (unsigned __int16)(v91
                                          - ((v91 * v80 + 0x8000 + ((v91 * v80 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF)
            v94 = v92;
          else
            v94 = v94;
          if (v6 == 0xFFFF)
          {
            v93 = v90;
            v95 = 0xFFFF000000000000;
          }
          else
          {
            v95 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
          }
          *v7++ = (uint16x4_t)(v93 | v94 | v95);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      v97 = v130;
      v96 = v132;
      if (a5 >= 1)
      {
        do
        {
          v98 = *v96;
          v96 += 2;
          v99 = &v82[v98];
          if (v79 < &v82[v98])
            v99 = v79;
          if ((unint64_t)v99 < *(_QWORD *)(a1 + 32))
            v99 = *(unsigned __int8 **)(a1 + 32);
          v100 = *v99;
          v101 = v99[1];
          v102 = v99[2] | (v99[2] << 8);
          v103 = v102 << 32;
          v104 = (v100 << 8) | v100;
          v105 = v104 | (v101 << 16) | (v101 << 24);
          v106 = (((v101 | (v101 << 8))
                 - (((v101 | (v101 << 8)) * v80 + 0x8000 + (((v101 | (v101 << 8)) * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v102 - (((_DWORD)v102 * v80 + 0x8000 + ((v102 * v80 + 0x8000) >> 16)) >> 16)) << 32);
          LODWORD(v107) = (unsigned __int16)(v104
                                           - ((v104 * v80 + 0x8000 + ((v104 * v80 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF)
            v107 = v105;
          else
            v107 = v107;
          if (v6 == 0xFFFF)
          {
            v106 = v103;
            v108 = 0xFFFF000000000000;
          }
          else
          {
            v108 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
          }
          if (HIWORD(v108))
          {
            v109 = v106 | v107 | v108;
            if (HIWORD(v108) == 0xFFFF)
              *v7 = (uint16x4_t)v109;
            else
              rgba64_DplusDM(v7, v109, (unint64_t)*v7, HIWORD(v109) ^ 0xFFFF);
          }
          ++v7;
          --v97;
        }
        while (v97);
      }
    }
    v9 = v119;
    v7 += v120;
    LOBYTE(v10) = v118;
    v11 = v124 + v117;
    a6 = v126 - 1;
    a5 = v122;
  }
  while (v126 != 1);
}

void rgba64_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint16x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  char v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64x2_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  char v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t v52;
  int32x2_t v53;
  uint32x2_t v54;
  int8x8_t v55;
  uint64x2_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  int8x8_t v82;
  int32x2_t v83;
  uint32x2_t v84;
  int8x8_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned int *v95;
  char v96;
  int v97;
  int32x2_t v98;
  int32x2_t v99;
  uint64x2_t v100;
  unsigned int *v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  int8x8_t v112;
  int32x2_t v113;
  uint32x2_t v114;
  int8x8_t v115;
  uint64x2_t v116;
  int8x16_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  int8x8_t v127;
  int32x2_t v128;
  uint32x2_t v129;
  int8x8_t v130;
  uint64x2_t v131;
  int8x16_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  char v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t *v155;
  int v156;
  int v157;
  uint64_t v158;

  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = a2[1];
  v147 = *a2;
  v8 = *(unsigned int **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v146 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v143 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v143 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v156 = a2[1];
  v157 = *((unsigned __int16 *)a2 + 4);
  v144 = v13;
  v145 = v12;
  if (*(_QWORD *)(a1 + 176))
  {
    v16 = a3;
    v141 = *((_QWORD *)a2 + 11);
    v140 = *((_QWORD *)a2 + 13);
    v139 = ~(-1 << v13);
    v138 = v13 - 4;
    v17 = (unsigned int *)(v15 - 4);
    v18 = 32 - v7;
    v19 = v6 ^ 0xFFFFu;
    v20 = vdup_n_s32(v19);
    v136 = v11 + 16 * v16 + 8;
    v137 = -v12;
    v135 = a5;
    v21 = vdup_n_s32(0x101u);
    v22 = (uint64x2_t)xmmword_185004F60;
    v23 = BLEND8_19499;
    v153 = *(unsigned int **)(a1 + 32);
    v152 = 32 - v7;
    while (1)
    {
      if (((v140 - v14) | (v14 - v141)) < 0)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v24 = ((v14 & (unint64_t)v139) >> v138) & 0xF;
        v25 = (unint64_t)(v24 - 7) >= 9 ? v137 : v12;
        v26 = weights_19497[v24] & 0xF;
      }
      v27 = *(_QWORD *)(a1 + 32) + (v14 >> v13) * v12;
      v150 = a6;
      v148 = v14;
      if (v147 != 1)
        break;
      if (a5 >= 1)
      {
        v29 = v135;
        v28 = (uint64_t *)v136;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned int *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v8)
            v33 = v8;
          v34 = bswap32(*v33);
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if ((_DWORD)v26)
          {
            v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25)
              v46 = v17;
            if (v46 < v8)
              v46 = v8;
            v47 = v23[v26];
            v44 = v34 - ((v47 & v34) >> v26);
            v45 = (bswap32(*v46) & v47) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            v57 = (int8x16_t)vshlq_u64(v56, v22);
            v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * (_DWORD)v19
                                                                                          + 0x8000
                                                                                          + (((BYTE2(v48) | (BYTE2(v48) << 8)) * v19 + 0x8000) >> 16)) >> 16)) << 16);
            v49 = (unsigned __int16)(v49
                                   - ((v49 * (_DWORD)v19 + 0x8000 + ((v49 * v19 + 0x8000) >> 16)) >> 16));
          }
          v28 += 2;
          *v10++ = (uint16x4_t)(v51 | v49);
          if (!--v29)
            goto LABEL_88;
        }
        v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v8)
          v36 = v8;
        v37 = bswap32(*v36);
        if ((_DWORD)v26)
        {
          v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          v40 = bswap32(*v39);
          v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41)
            v41 = v17;
          if (v41 < v8)
            v41 = v8;
          v42 = v23[v26];
          v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          v37 = v37 - ((v42 & v37) >> v26) + ((bswap32(*v41) & v42) >> v26);
        }
        v43 = v23[*v28 & 0xF];
        v44 = v34 - ((v43 & v34) >> v35);
        v45 = (v43 & v37) >> v35;
LABEL_43:
        v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      v12 = v145;
      v10 += v146;
      LOBYTE(v13) = v144;
      v14 = v148 + v143;
      a6 = v150 - 1;
      if (v150 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_88;
    v158 = v26;
    v58 = v135;
    v59 = (uint64_t *)v136;
    while (1)
    {
      v60 = *(v59 - 1);
      v61 = *v59;
      v62 = v27 + v60;
      if ((unint64_t)v17 >= v27 + v60)
        v63 = (unsigned int *)(v27 + v60);
      else
        v63 = v17;
      if (v63 < v8)
        v63 = v8;
      v64 = bswap32(*v63);
      v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
        break;
      if ((_DWORD)v26)
      {
        v76 = (unsigned int *)(v62 + v25);
        if ((unint64_t)v17 < v62 + v25)
          v76 = v17;
        if (v76 < v8)
          v76 = v8;
        v77 = v23[v158];
        v74 = v64 - ((v77 & v64) >> v26);
        v75 = (bswap32(*v76) & v77) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      v78 = (v64 << v7) | (v64 >> v18);
      HIDWORD(v80) = HIBYTE(v78);
      LODWORD(v80) = v78;
      v79 = v80 >> 24;
      if (v6 == 0xFFFF)
      {
        v81 = ((unint64_t)(BYTE1(v78) | (BYTE1(v78) << 8)) << 32) | ((unint64_t)((v78 | v9) | ((v78 | v9) << 8)) << 48) | v78 & 0xFF0000 | (BYTE2(v78) << 24);
      }
      else
      {
        v82.i32[0] = v78 | v9;
        v82.i32[1] = v78 >> 8;
        v83 = vmul_s32((int32x2_t)vand_s8(v82, (int8x8_t)0xFF000000FFLL), v21);
        v84 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v83, v20);
        v85 = vand_s8((int8x8_t)vsub_s32(v83, (int32x2_t)vshr_n_u32(vsra_n_u32(v84, v84, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v86.i64[0] = v85.u32[0];
        v86.i64[1] = v85.u32[1];
        v87 = (int8x16_t)vshlq_u64(v86, v22);
        v81 = vorrq_s8(v87, (int8x16_t)vdupq_laneq_s64((int64x2_t)v87, 1)).u64[0] | (((BYTE2(v78) | (BYTE2(v78) << 8))
                                                                                    - (((BYTE2(v78) | (BYTE2(v78) << 8))
                                                                                      * (_DWORD)v19
                                                                                      + 0x8000
                                                                                      + (((BYTE2(v78) | (BYTE2(v78) << 8)) * v19 + 0x8000) >> 16)) >> 16)) << 16);
        v79 = (unsigned __int16)(v79 - ((v79 * (_DWORD)v19 + 0x8000 + ((v79 * v19 + 0x8000) >> 16)) >> 16));
      }
      v88 = HIWORD(v81);
      if (HIWORD(v81))
      {
        v89 = v81 | v79;
        if ((_DWORD)v88 == 0xFFFF)
        {
          *v10 = (uint16x4_t)v89;
        }
        else
        {
          v90 = v9;
          v91 = v19;
          v92 = v26;
          v93 = v25;
          v94 = v23;
          rgba64_DplusDM(v10, v89, (unint64_t)*v10, v88 ^ 0xFFFF);
          v23 = v94;
          v25 = v93;
          v26 = v92;
          v22 = (uint64x2_t)xmmword_185004F60;
          v19 = v91;
          v9 = v90;
          v18 = v152;
          v8 = v153;
          LOBYTE(v7) = v156;
          v6 = v157;
        }
      }
      v59 += 2;
      ++v10;
      if (!--v58)
        goto LABEL_88;
    }
    v66 = (unsigned int *)(v62 + (v61 >> 4));
    if (v17 < v66)
      v66 = v17;
    if (v66 < v8)
      v66 = v8;
    v67 = bswap32(*v66);
    if ((_DWORD)v26)
    {
      v68 = (unsigned int *)(v62 + v25);
      if (v17 >= v68)
        v69 = v68;
      else
        v69 = v17;
      if (v69 < v8)
        v69 = v8;
      v70 = bswap32(*v69);
      v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
      if (v17 < v71)
        v71 = v17;
      if (v71 < v8)
        v71 = v8;
      v72 = v23[v158];
      v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
      v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
    }
    v73 = v23[*v59 & 0xF];
    v74 = v64 - ((v73 & v64) >> v65);
    v75 = (v73 & v67) >> v65;
LABEL_79:
    v64 = v74 + v75;
    goto LABEL_80;
  }
  v95 = (unsigned int *)(v15 - 4);
  v96 = 32 - v7;
  v97 = v6 ^ 0xFFFF;
  v98 = vdup_n_s32(v6 ^ 0xFFFFu);
  v99 = vdup_n_s32(0x101u);
  v154 = a5;
  v155 = (uint64_t *)(v11 + 16 * a3);
  v100 = (uint64x2_t)xmmword_185004F60;
  do
  {
    v101 = *(unsigned int **)(a1 + 32);
    v102 = (char *)v101 + (v14 >> v13) * v12;
    v151 = a6;
    v149 = v14;
    if (v147 == 1)
    {
      if (a5 >= 1)
      {
        v104 = v154;
        v103 = v155;
        do
        {
          v105 = *v103;
          v103 += 2;
          v106 = (unsigned int *)&v102[v105];
          if (v95 < (unsigned int *)&v102[v105])
            v106 = v95;
          if (v106 < v101)
            v106 = v101;
          v107 = bswap32(*v106);
          v108 = (v107 << v7) | (v107 >> v96);
          HIDWORD(v110) = HIBYTE(v108);
          LODWORD(v110) = v108;
          v109 = v110 >> 24;
          if (v6 == 0xFFFF)
          {
            v111 = ((unint64_t)(BYTE1(v108) | (BYTE1(v108) << 8)) << 32) | ((unint64_t)((v108 | v9) | ((v108 | v9) << 8)) << 48) | v108 & 0xFF0000 | (BYTE2(v108) << 24);
          }
          else
          {
            v112.i32[0] = v108 | v9;
            v112.i32[1] = v108 >> 8;
            v113 = vmul_s32((int32x2_t)vand_s8(v112, (int8x8_t)0xFF000000FFLL), v99);
            v114 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v113, v98);
            v115 = vand_s8((int8x8_t)vsub_s32(v113, (int32x2_t)vshr_n_u32(vsra_n_u32(v114, v114, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v116.i64[0] = v115.u32[0];
            v116.i64[1] = v115.u32[1];
            v117 = (int8x16_t)vshlq_u64(v116, v100);
            v111 = vorrq_s8(v117, (int8x16_t)vdupq_laneq_s64((int64x2_t)v117, 1)).u64[0] | (((BYTE2(v108) | (BYTE2(v108) << 8))
                                                                                           - (((BYTE2(v108) | (BYTE2(v108) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v108) | (BYTE2(v108) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            v109 = (unsigned __int16)(v109 - ((v109 * v97 + 0x8000 + ((v109 * v97 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)(v111 | v109);
          --v104;
        }
        while (v104);
      }
    }
    else
    {
      v119 = v154;
      v118 = v155;
      if (a5 >= 1)
      {
        do
        {
          v120 = *v118;
          v118 += 2;
          v121 = (unsigned int *)&v102[v120];
          if (v95 < (unsigned int *)&v102[v120])
            v121 = v95;
          if ((unint64_t)v121 < *(_QWORD *)(a1 + 32))
            v121 = *(unsigned int **)(a1 + 32);
          v122 = bswap32(*v121);
          v123 = (v122 << v7) | (v122 >> v96);
          HIDWORD(v125) = HIBYTE(v123);
          LODWORD(v125) = v123;
          v124 = v125 >> 24;
          if (v6 == 0xFFFF)
          {
            v126 = ((unint64_t)(BYTE1(v123) | (BYTE1(v123) << 8)) << 32) | ((unint64_t)((v123 | v9) | ((v123 | v9) << 8)) << 48) | v123 & 0xFF0000 | (BYTE2(v123) << 24);
          }
          else
          {
            v127.i32[0] = v123 | v9;
            v127.i32[1] = v123 >> 8;
            v128 = vmul_s32((int32x2_t)vand_s8(v127, (int8x8_t)0xFF000000FFLL), v99);
            v129 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v128, v98);
            v130 = vand_s8((int8x8_t)vsub_s32(v128, (int32x2_t)vshr_n_u32(vsra_n_u32(v129, v129, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v131.i64[0] = v130.u32[0];
            v131.i64[1] = v130.u32[1];
            v132 = (int8x16_t)vshlq_u64(v131, v100);
            v126 = vorrq_s8(v132, (int8x16_t)vdupq_laneq_s64((int64x2_t)v132, 1)).u64[0] | (((BYTE2(v123) | (BYTE2(v123) << 8))
                                                                                           - (((BYTE2(v123) | (BYTE2(v123) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v123) | (BYTE2(v123) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            v124 = (unsigned __int16)(v124 - ((v124 * v97 + 0x8000 + ((v124 * v97 + 0x8000) >> 16)) >> 16));
          }
          v133 = HIWORD(v126);
          if (HIWORD(v126))
          {
            v134 = v126 | v124;
            if ((_DWORD)v133 == 0xFFFF)
            {
              *v10 = (uint16x4_t)v134;
            }
            else
            {
              rgba64_DplusDM(v10, v134, (unint64_t)*v10, v133 ^ 0xFFFF);
              v100 = (uint64x2_t)xmmword_185004F60;
              LOBYTE(v7) = v156;
              v6 = v157;
            }
          }
          ++v10;
          --v119;
        }
        while (v119);
      }
    }
    v12 = v145;
    v10 += v146;
    LOBYTE(v13) = v144;
    v14 = v149 + v143;
    a6 = v151 - 1;
  }
  while (v151 != 1);
}

void rgba64_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  uint16x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  char v19;
  uint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  uint64x2_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  char v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  int8x8_t v53;
  int32x2_t v54;
  uint32x2_t v55;
  int8x8_t v56;
  uint64x2_t v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  char v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int8x8_t v83;
  int32x2_t v84;
  uint32x2_t v85;
  int8x8_t v86;
  uint64x2_t v87;
  int8x16_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  char *v95;
  char v96;
  int v97;
  int32x2_t v98;
  int32x2_t v99;
  uint64x2_t v100;
  char *v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  int8x8_t v111;
  int32x2_t v112;
  uint32x2_t v113;
  int8x8_t v114;
  uint64x2_t v115;
  int8x16_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  int8x8_t v125;
  int32x2_t v126;
  uint32x2_t v127;
  int8x8_t v128;
  uint64x2_t v129;
  int8x16_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  char v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t *v154;
  int v155;
  int v156;
  uint64_t v157;

  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = a2[1];
  v145 = *a2;
  v8 = *(unsigned int **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v144 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v141 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v141 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v16 = 0x8000;
  v156 = *((unsigned __int16 *)a2 + 4);
  v155 = a2[1];
  v142 = v13;
  v143 = v12;
  if (*(_QWORD *)(a1 + 176))
  {
    v17 = a3;
    v139 = *((_QWORD *)a2 + 11);
    v138 = *((_QWORD *)a2 + 13);
    v137 = ~(-1 << v13);
    v136 = v13 - 4;
    v18 = (unsigned int *)(v15 - 4);
    v19 = 32 - v7;
    v20 = v6 ^ 0xFFFFu;
    v21 = vdup_n_s32(v20);
    v134 = v11 + 16 * v17 + 8;
    v135 = -v12;
    v133 = a5;
    v22 = vdup_n_s32(0x101u);
    v23 = (uint64x2_t)xmmword_185004F60;
    v24 = BLEND8_19499;
    v150 = 32 - v7;
    v151 = v9;
    while (1)
    {
      if (((v138 - v14) | (v14 - v139)) < 0)
      {
        v27 = 0;
        v26 = 0;
      }
      else
      {
        v25 = ((v14 & (unint64_t)v137) >> v136) & 0xF;
        v26 = (unint64_t)(v25 - 7) >= 9 ? v135 : v12;
        v27 = weights_19497[v25] & 0xF;
      }
      v28 = *(_QWORD *)(a1 + 32) + (v14 >> v13) * v12;
      v148 = a6;
      v146 = v14;
      if (v145 != 1)
        break;
      if (a5 >= 1)
      {
        v30 = v133;
        v29 = (uint64_t *)v134;
        while (1)
        {
          v31 = *(v29 - 1);
          v32 = *v29;
          v33 = v28 + v31;
          if ((unint64_t)v18 >= v28 + v31)
            v34 = (unsigned int *)(v28 + v31);
          else
            v34 = v18;
          if (v34 < v8)
            v34 = v8;
          v35 = *v34;
          v36 = v32 & 0xF;
          if ((v32 & 0xF) != 0)
            break;
          if (v27)
          {
            v47 = (unsigned int *)(v33 + v26);
            if ((unint64_t)v18 < v33 + v26)
              v47 = v18;
            if (v47 < v8)
              v47 = v8;
            v48 = v24[v27];
            v45 = v35 - ((v48 & v35) >> v27);
            v46 = (v48 & *v47) >> v27;
            goto LABEL_43;
          }
LABEL_44:
          v49 = (v35 << v7) | (v35 >> v19);
          HIDWORD(v51) = HIBYTE(v49);
          LODWORD(v51) = v49;
          v50 = v51 >> 24;
          if (v6 == 0xFFFF)
          {
            v52 = ((unint64_t)(BYTE1(v49) | (BYTE1(v49) << 8)) << 32) | ((unint64_t)((v49 | v9) | ((v49 | v9) << 8)) << 48) | v49 & 0xFF0000 | (BYTE2(v49) << 24);
          }
          else
          {
            v53.i32[0] = v49 | v9;
            v53.i32[1] = v49 >> 8;
            v54 = vmul_s32((int32x2_t)vand_s8(v53, (int8x8_t)0xFF000000FFLL), v22);
            v55 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v54, v21);
            v56 = vand_s8((int8x8_t)vsub_s32(v54, (int32x2_t)vshr_n_u32(vsra_n_u32(v55, v55, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v57.i64[0] = v56.u32[0];
            v57.i64[1] = v56.u32[1];
            v58 = (int8x16_t)vshlq_u64(v57, v23);
            v52 = vorrq_s8(v58, (int8x16_t)vdupq_laneq_s64((int64x2_t)v58, 1)).u64[0] | (((BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                        - (((_DWORD)v16
                                                                                          + (BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                          * (_DWORD)v20
                                                                                          + ((v16
                                                                                            + (BYTE2(v49) | (BYTE2(v49) << 8))
                                                                                            * (_DWORD)v20) >> 16)) >> 16)) << 16);
            v50 = (unsigned __int16)(v50
                                   - (((_DWORD)v16 + v50 * (_DWORD)v20 + ((v16 + v50 * (_DWORD)v20) >> 16)) >> 16));
          }
          v29 += 2;
          *v10++ = (uint16x4_t)(v52 | v50);
          if (!--v30)
            goto LABEL_88;
        }
        v37 = (unsigned int *)(v33 + (v32 >> 4));
        if (v18 < v37)
          v37 = v18;
        if (v37 < v8)
          v37 = v8;
        v38 = *v37;
        if (v27)
        {
          v39 = (unsigned int *)(v33 + v26);
          if (v18 >= v39)
            v40 = v39;
          else
            v40 = v18;
          if (v40 < v8)
            v40 = v8;
          v41 = *v40;
          v42 = (unsigned int *)((char *)v39 + (v32 >> 4));
          if (v18 < v42)
            v42 = v18;
          if (v42 < v8)
            v42 = v8;
          v43 = v24[v27];
          v35 = v35 - ((v43 & v35) >> v27) + ((v43 & v41) >> v27);
          v38 = v38 - ((v43 & v38) >> v27) + ((v43 & *v42) >> v27);
        }
        v44 = v24[*v29 & 0xF];
        v45 = v35 - ((v44 & v35) >> v36);
        v46 = (v44 & v38) >> v36;
LABEL_43:
        v35 = v45 + v46;
        goto LABEL_44;
      }
LABEL_88:
      v12 = v143;
      v10 += v144;
      LOBYTE(v13) = v142;
      v14 = v146 + v141;
      a6 = v148 - 1;
      if (v148 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_88;
    v157 = v27;
    v59 = v133;
    v60 = (uint64_t *)v134;
    v153 = v27;
    while (1)
    {
      v61 = *(v60 - 1);
      v62 = *v60;
      v63 = v28 + v61;
      if ((unint64_t)v18 >= v28 + v61)
        v64 = (unsigned int *)(v28 + v61);
      else
        v64 = v18;
      if (v64 < v8)
        v64 = v8;
      v65 = *v64;
      v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0)
        break;
      if (v27)
      {
        v77 = (unsigned int *)(v63 + v26);
        if ((unint64_t)v18 < v63 + v26)
          v77 = v18;
        if (v77 < v8)
          v77 = v8;
        v78 = v24[v157];
        v75 = v65 - ((v78 & v65) >> v27);
        v76 = (v78 & *v77) >> v27;
        goto LABEL_79;
      }
LABEL_80:
      v79 = (v65 << v7) | (v65 >> v19);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v22);
        v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v21);
        v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        v88 = (int8x16_t)vshlq_u64(v87, v23);
        v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - (((_DWORD)v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * (_DWORD)v20
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * (_DWORD)v20) >> 16)) >> 16)) << 16);
        v80 = (unsigned __int16)(v80
                               - (((_DWORD)v16 + v80 * (_DWORD)v20 + ((v16 + v80 * (_DWORD)v20) >> 16)) >> 16));
      }
      v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        v90 = v82 | v80;
        if ((_DWORD)v89 == 0xFFFF)
        {
          *v10 = (uint16x4_t)v90;
        }
        else
        {
          v91 = v16;
          v92 = v20;
          v93 = v26;
          v94 = v24;
          rgba64_DplusDM(v10, v90, (unint64_t)*v10, v89 ^ 0xFFFF);
          v24 = v94;
          v26 = v93;
          v23 = (uint64x2_t)xmmword_185004F60;
          v20 = v92;
          v16 = v91;
          v27 = v153;
          v19 = v150;
          v9 = v151;
          LOBYTE(v7) = v155;
          v6 = v156;
        }
      }
      v60 += 2;
      ++v10;
      if (!--v59)
        goto LABEL_88;
    }
    v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v18 < v67)
      v67 = v18;
    if (v67 < v8)
      v67 = v8;
    v68 = *v67;
    if (v27)
    {
      v69 = (unsigned int *)(v63 + v26);
      if (v18 >= v69)
        v70 = v69;
      else
        v70 = v18;
      if (v70 < v8)
        v70 = v8;
      v71 = *v70;
      v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v18 < v72)
        v72 = v18;
      if (v72 < v8)
        v72 = v8;
      v73 = v24[v157];
      v65 = v65 - ((v73 & v65) >> v27) + ((v73 & v71) >> v27);
      v68 = v68 - ((v73 & v68) >> v27) + ((v73 & *v72) >> v27);
    }
    v74 = v24[*v60 & 0xF];
    v75 = v65 - ((v74 & v65) >> v66);
    v76 = (v74 & v68) >> v66;
LABEL_79:
    v65 = v75 + v76;
    goto LABEL_80;
  }
  v154 = (uint64_t *)(v11 + 16 * a3);
  v95 = v15 - 4;
  v96 = 32 - v7;
  v97 = v6 ^ 0xFFFF;
  v98 = vdup_n_s32(v6 ^ 0xFFFFu);
  v99 = vdup_n_s32(0x101u);
  v152 = a5;
  v100 = (uint64x2_t)xmmword_185004F60;
  do
  {
    v101 = *(char **)(a1 + 32);
    v102 = &v101[(v14 >> v13) * v12];
    v149 = a6;
    v147 = v14;
    if (v145 == 1)
    {
      if (a5 >= 1)
      {
        v103 = v154;
        v104 = v152;
        do
        {
          v105 = *v103;
          v103 += 2;
          v106 = &v102[v105];
          if (v95 < &v102[v105])
            v106 = v95;
          if (v106 < v101)
            v106 = v101;
          v107 = (*(_DWORD *)v106 << v7) | (*(_DWORD *)v106 >> v96);
          HIDWORD(v109) = HIBYTE(v107);
          LODWORD(v109) = v107;
          v108 = v109 >> 24;
          if (v6 == 0xFFFF)
          {
            v110 = ((unint64_t)(BYTE1(v107) | (BYTE1(v107) << 8)) << 32) | ((unint64_t)((v107 | v9) | ((v107 | v9) << 8)) << 48) | v107 & 0xFF0000 | (BYTE2(v107) << 24);
          }
          else
          {
            v111.i32[0] = v107 | v9;
            v111.i32[1] = v107 >> 8;
            v112 = vmul_s32((int32x2_t)vand_s8(v111, (int8x8_t)0xFF000000FFLL), v99);
            v113 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v112, v98);
            v114 = vand_s8((int8x8_t)vsub_s32(v112, (int32x2_t)vshr_n_u32(vsra_n_u32(v113, v113, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            v116 = (int8x16_t)vshlq_u64(v115, v100);
            v110 = vorrq_s8(v116, (int8x16_t)vdupq_laneq_s64((int64x2_t)v116, 1)).u64[0] | (((BYTE2(v107) | (BYTE2(v107) << 8))
                                                                                           - (((BYTE2(v107) | (BYTE2(v107) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v107) | (BYTE2(v107) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            v108 = (unsigned __int16)(v108 - ((v108 * v97 + 0x8000 + ((v108 * v97 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)(v110 | v108);
          --v104;
        }
        while (v104);
      }
    }
    else
    {
      v117 = v154;
      v118 = v152;
      if (a5 >= 1)
      {
        do
        {
          v119 = *v117;
          v117 += 2;
          v120 = &v102[v119];
          if (v95 < &v102[v119])
            v120 = v95;
          if ((unint64_t)v120 < *(_QWORD *)(a1 + 32))
            v120 = *(char **)(a1 + 32);
          v121 = (*(_DWORD *)v120 << v7) | (*(_DWORD *)v120 >> v96);
          HIDWORD(v123) = HIBYTE(v121);
          LODWORD(v123) = v121;
          v122 = v123 >> 24;
          if (v6 == 0xFFFF)
          {
            v124 = ((unint64_t)(BYTE1(v121) | (BYTE1(v121) << 8)) << 32) | ((unint64_t)((v121 | v9) | ((v121 | v9) << 8)) << 48) | v121 & 0xFF0000 | (BYTE2(v121) << 24);
          }
          else
          {
            v125.i32[0] = v121 | v9;
            v125.i32[1] = v121 >> 8;
            v126 = vmul_s32((int32x2_t)vand_s8(v125, (int8x8_t)0xFF000000FFLL), v99);
            v127 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v126, v98);
            v128 = vand_s8((int8x8_t)vsub_s32(v126, (int32x2_t)vshr_n_u32(vsra_n_u32(v127, v127, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v129.i64[0] = v128.u32[0];
            v129.i64[1] = v128.u32[1];
            v130 = (int8x16_t)vshlq_u64(v129, v100);
            v124 = vorrq_s8(v130, (int8x16_t)vdupq_laneq_s64((int64x2_t)v130, 1)).u64[0] | (((BYTE2(v121) | (BYTE2(v121) << 8))
                                                                                           - (((BYTE2(v121) | (BYTE2(v121) << 8))
                                                                                             * v97
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v121) | (BYTE2(v121) << 8)) * v97 + 0x8000) >> 16)) >> 16)) << 16);
            v122 = (unsigned __int16)(v122 - ((v122 * v97 + 0x8000 + ((v122 * v97 + 0x8000) >> 16)) >> 16));
          }
          v131 = HIWORD(v124);
          if (HIWORD(v124))
          {
            v132 = v124 | v122;
            if ((_DWORD)v131 == 0xFFFF)
            {
              *v10 = (uint16x4_t)v132;
            }
            else
            {
              rgba64_DplusDM(v10, v132, (unint64_t)*v10, v131 ^ 0xFFFF);
              v100 = (uint64x2_t)xmmword_185004F60;
              LOBYTE(v7) = v155;
              v6 = v156;
            }
          }
          ++v10;
          --v118;
        }
        while (v118);
      }
    }
    v12 = v143;
    v10 += v144;
    LOBYTE(v13) = v142;
    v14 = v147 + v141;
    a6 = v149 - 1;
  }
  while (v149 != 1);
}

void rgba64_image_mark_W16(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  int v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;

  v6 = *((unsigned __int16 *)a2 + 4);
  v117 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v116 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v113 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v113 * a4;
  v12 = *(unsigned __int16 **)(a1 + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v114 = v10;
  v115 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v14 = a3;
    v111 = *((_QWORD *)a2 + 11);
    v110 = *((_QWORD *)a2 + 13);
    v109 = ~(-1 << v10);
    v108 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 4);
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v106 = a5;
    v107 = -v9;
    v105 = v8 + 16 * v14 + 8;
    v18 = BLEND16_19498;
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v107 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      v120 = a6;
      v118 = v11;
      if (v117 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v105;
        v24 = v106;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int16 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = bswap32(*v28) >> 16;
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v42 = v15;
            if (v42 < v12)
              v42 = v12;
            v43 = v18[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = (v43 & (unint64_t)(bswap32(*v42) >> 16)) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000)
            v45 = -98304;
          v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if ((_DWORD)v6 == 0xFFFF)
            v47 = v44;
          *v7++ = (uint16x4_t)v47;
          if (!--v24)
            goto LABEL_88;
        }
        v31 = v26 >> 4;
        v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v12)
          v32 = v12;
        v33 = bswap32(*v32) >> 16;
        if (v21)
        {
          v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v12)
            v35 = v12;
          v36 = bswap32(*v35) >> 16;
          v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37)
            v37 = v15;
          if (v37 < v12)
            v37 = v12;
          v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((v38 & (unint64_t)(bswap32(*v37) >> 16)) >> v21);
        }
        v39 = v18[v30];
        v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      v9 = v115;
      v7 += v116;
      LOBYTE(v10) = v114;
      v11 = v118 + v113;
      a6 = v120 - 1;
      if (v120 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_88;
    v125 = v21;
    v49 = (uint64_t *)v105;
    v48 = v106;
    v123 = v21;
    v122 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
    while (1)
    {
      v50 = *(v49 - 1);
      v51 = *v49;
      v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50)
        v53 = (unsigned __int16 *)(v22 + v50);
      else
        v53 = v15;
      if (v53 < v12)
        v53 = v12;
      v54 = bswap32(*v53) >> 16;
      v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0)
        break;
      if (v21)
      {
        v67 = (unsigned __int16 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20)
          v67 = v15;
        if (v67 < v12)
          v67 = v12;
        v68 = v18[v125];
        v65 = v54 - ((v68 & v54) >> v125);
        v66 = (v68 & (unint64_t)(bswap32(*v67) >> 16)) >> v125;
        goto LABEL_77;
      }
LABEL_78:
      v69 = (0x100010001 * (unsigned __int16)v54) | 0xFFFF000000000000;
      v70 = (v54 | 0xFFFF0000) * v16;
      if (v70 >= 0xFFFE8000)
        v70 = -98304;
      v71 = (unsigned __int16)(v54 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16));
      v72 = ((unint64_t)v71 << 16) | (v71 << 32) | v17 | v71;
      if ((_DWORD)v6 == 0xFFFF)
        v73 = v69;
      else
        v73 = v72;
      v74 = HIWORD(v73);
      if (HIWORD(v73))
      {
        if ((_DWORD)v74 == 0xFFFF)
        {
          *v7 = (uint16x4_t)v73;
        }
        else
        {
          v75 = v6;
          v76 = v17;
          v77 = v20;
          v78 = v18;
          rgba64_DplusDM(v7, v73, (unint64_t)*v7, v74 ^ 0xFFFF);
          v18 = v78;
          v20 = v77;
          v21 = v123;
          v17 = v76;
          v6 = v75;
          v22 = v122;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v48)
        goto LABEL_88;
    }
    v56 = v51 >> 4;
    v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v15 < v57)
      v57 = v15;
    if (v57 < v12)
      v57 = v12;
    v58 = bswap32(*v57) >> 16;
    if (v21)
    {
      v59 = (unsigned __int16 *)(v52 + v20);
      if (v15 >= v59)
        v60 = v59;
      else
        v60 = v15;
      if (v60 < v12)
        v60 = v12;
      v61 = bswap32(*v60) >> 16;
      v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v15 < v62)
        v62 = v15;
      if (v62 < v12)
        v62 = v12;
      v63 = v18[v125];
      LODWORD(v54) = v54 - ((v63 & v54) >> v125) + ((v63 & v61) >> v125);
      LODWORD(v58) = v58 - ((v63 & v58) >> v125) + ((v63 & (unint64_t)(bswap32(*v62) >> 16)) >> v125);
    }
    v64 = v18[v55];
    v65 = v54 - ((unint64_t)(v64 & v54) >> v55);
    v66 = (unint64_t)(v64 & v58) >> v55;
LABEL_77:
    LOWORD(v54) = v65 + v66;
    goto LABEL_78;
  }
  v79 = v13 - 4;
  v80 = v6 ^ 0xFFFF;
  v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  v124 = a5;
  v126 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v82 = *(char **)(a1 + 32);
    v83 = &v82[(v11 >> v10) * v9];
    v121 = a6;
    v119 = v11;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        v85 = v124;
        v84 = v126;
        do
        {
          v86 = *v84;
          v84 += 2;
          v87 = &v83[v86];
          if (v79 < &v83[v86])
            v87 = v79;
          if (v87 < v82)
            v87 = v82;
          v88 = bswap32(*(unsigned __int16 *)v87) >> 16;
          v89 = (v88 | 0xFFFF0000) * v80;
          if (v89 >= 0xFFFE8000)
            v89 = -98304;
          v90 = 0x100010001 * v88;
          v91 = (unsigned __int16)(v88 - ((v89 + 0x8000 + ((v89 + 0x8000) >> 16)) >> 16));
          v92 = v90 | 0xFFFF000000000000;
          v93 = ((unint64_t)v91 << 16) | (v91 << 32) | v81 | v91;
          if ((_DWORD)v6 == 0xFFFF)
            v93 = v92;
          *v7++ = (uint16x4_t)v93;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      v95 = v124;
      v94 = v126;
      if (a5 >= 1)
      {
        do
        {
          v96 = *v94;
          v94 += 2;
          v97 = &v83[v96];
          if (v79 < &v83[v96])
            v97 = v79;
          if ((unint64_t)v97 < *(_QWORD *)(a1 + 32))
            v97 = *(char **)(a1 + 32);
          v98 = bswap32(*(unsigned __int16 *)v97) >> 16;
          v99 = (0x100010001 * v98) | 0xFFFF000000000000;
          v100 = (v98 | 0xFFFF0000) * v80;
          if (v100 >= 0xFFFE8000)
            v100 = -98304;
          v101 = (unsigned __int16)(v98 - ((v100 + 0x8000 + ((v100 + 0x8000) >> 16)) >> 16));
          v102 = ((unint64_t)v101 << 16) | (v101 << 32) | v81 | v101;
          if ((_DWORD)v6 == 0xFFFF)
            v103 = v99;
          else
            v103 = v102;
          v104 = HIWORD(v103);
          if (HIWORD(v103))
          {
            if ((_DWORD)v104 == 0xFFFF)
              *v7 = (uint16x4_t)v103;
            else
              rgba64_DplusDM(v7, v103, (unint64_t)*v7, v104 ^ 0xFFFF);
          }
          ++v7;
          --v95;
        }
        while (v95);
      }
    }
    v9 = v115;
    v7 += v116;
    LOBYTE(v10) = v114;
    v11 = v119 + v113;
    a6 = v121 - 1;
  }
  while (v121 != 1);
}

void rgba64_image_mark_w16(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  int v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;

  v6 = *((unsigned __int16 *)a2 + 4);
  v117 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v116 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v113 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v113 * a4;
  v12 = *(unsigned __int16 **)(a1 + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v114 = v10;
  v115 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v14 = a3;
    v111 = *((_QWORD *)a2 + 11);
    v110 = *((_QWORD *)a2 + 13);
    v109 = ~(-1 << v10);
    v108 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 4);
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v106 = a5;
    v107 = -v9;
    v105 = v8 + 16 * v14 + 8;
    v18 = BLEND16_19498;
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v107 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      v120 = a6;
      v118 = v11;
      if (v117 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v105;
        v24 = v106;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int16 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = *v28;
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v42 = v15;
            if (v42 < v12)
              v42 = v12;
            v43 = v18[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = (unint64_t)(unsigned __int16)(v43 & *v42) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000)
            v45 = -98304;
          v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if ((_DWORD)v6 == 0xFFFF)
            v47 = v44;
          *v7++ = (uint16x4_t)v47;
          if (!--v24)
            goto LABEL_88;
        }
        v31 = v26 >> 4;
        v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v12)
          v32 = v12;
        v33 = *v32;
        if (v21)
        {
          v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v12)
            v35 = v12;
          v36 = *v35;
          v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37)
            v37 = v15;
          if (v37 < v12)
            v37 = v12;
          v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((unint64_t)(unsigned __int16)(v38 & *v37) >> v21);
        }
        v39 = v18[v30];
        v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      v9 = v115;
      v7 += v116;
      LOBYTE(v10) = v114;
      v11 = v118 + v113;
      a6 = v120 - 1;
      if (v120 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_88;
    v125 = v21;
    v49 = (uint64_t *)v105;
    v48 = v106;
    v123 = v21;
    v122 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
    while (1)
    {
      v50 = *(v49 - 1);
      v51 = *v49;
      v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50)
        v53 = (unsigned __int16 *)(v22 + v50);
      else
        v53 = v15;
      if (v53 < v12)
        v53 = v12;
      v54 = *v53;
      v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0)
        break;
      if (v21)
      {
        v67 = (unsigned __int16 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20)
          v67 = v15;
        if (v67 < v12)
          v67 = v12;
        v68 = v18[v125];
        v65 = v54 - ((v68 & v54) >> v125);
        v66 = (unint64_t)(unsigned __int16)(v68 & *v67) >> v125;
        goto LABEL_77;
      }
LABEL_78:
      v69 = (0x100010001 * (unsigned __int16)v54) | 0xFFFF000000000000;
      v70 = (v54 | 0xFFFF0000) * v16;
      if (v70 >= 0xFFFE8000)
        v70 = -98304;
      v71 = (unsigned __int16)(v54 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16));
      v72 = ((unint64_t)v71 << 16) | (v71 << 32) | v17 | v71;
      if ((_DWORD)v6 == 0xFFFF)
        v73 = v69;
      else
        v73 = v72;
      v74 = HIWORD(v73);
      if (HIWORD(v73))
      {
        if ((_DWORD)v74 == 0xFFFF)
        {
          *v7 = (uint16x4_t)v73;
        }
        else
        {
          v75 = v6;
          v76 = v17;
          v77 = v20;
          v78 = v18;
          rgba64_DplusDM(v7, v73, (unint64_t)*v7, v74 ^ 0xFFFF);
          v18 = v78;
          v20 = v77;
          v21 = v123;
          v17 = v76;
          v6 = v75;
          v22 = v122;
        }
      }
      v49 += 2;
      ++v7;
      if (!--v48)
        goto LABEL_88;
    }
    v56 = v51 >> 4;
    v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v15 < v57)
      v57 = v15;
    if (v57 < v12)
      v57 = v12;
    v58 = *v57;
    if (v21)
    {
      v59 = (unsigned __int16 *)(v52 + v20);
      if (v15 >= v59)
        v60 = v59;
      else
        v60 = v15;
      if (v60 < v12)
        v60 = v12;
      v61 = *v60;
      v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v15 < v62)
        v62 = v15;
      if (v62 < v12)
        v62 = v12;
      v63 = v18[v125];
      LODWORD(v54) = v54 - ((v63 & v54) >> v125) + ((v63 & v61) >> v125);
      LODWORD(v58) = v58 - ((v63 & v58) >> v125) + ((unint64_t)(unsigned __int16)(v63 & *v62) >> v125);
    }
    v64 = v18[v55];
    v65 = v54 - ((unint64_t)(v64 & v54) >> v55);
    v66 = (unint64_t)(v64 & v58) >> v55;
LABEL_77:
    LOWORD(v54) = v65 + v66;
    goto LABEL_78;
  }
  v79 = v13 - 4;
  v80 = v6 ^ 0xFFFF;
  v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  v124 = a5;
  v126 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v82 = *(char **)(a1 + 32);
    v83 = &v82[(v11 >> v10) * v9];
    v121 = a6;
    v119 = v11;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        v85 = v124;
        v84 = v126;
        do
        {
          v86 = *v84;
          v84 += 2;
          v87 = &v83[v86];
          if (v79 < &v83[v86])
            v87 = v79;
          if (v87 < v82)
            v87 = v82;
          v88 = *(unsigned __int16 *)v87;
          v89 = (v88 | 0xFFFF0000) * v80;
          if (v89 >= 0xFFFE8000)
            v89 = -98304;
          v90 = 0x100010001 * v88;
          v91 = (unsigned __int16)(v88 - ((v89 + 0x8000 + ((v89 + 0x8000) >> 16)) >> 16));
          v92 = v90 | 0xFFFF000000000000;
          v93 = ((unint64_t)v91 << 16) | (v91 << 32) | v81 | v91;
          if ((_DWORD)v6 == 0xFFFF)
            v93 = v92;
          *v7++ = (uint16x4_t)v93;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      v95 = v124;
      v94 = v126;
      if (a5 >= 1)
      {
        do
        {
          v96 = *v94;
          v94 += 2;
          v97 = &v83[v96];
          if (v79 < &v83[v96])
            v97 = v79;
          if ((unint64_t)v97 < *(_QWORD *)(a1 + 32))
            v97 = *(char **)(a1 + 32);
          v98 = *(unsigned __int16 *)v97;
          v99 = (0x100010001 * v98) | 0xFFFF000000000000;
          v100 = (v98 | 0xFFFF0000) * v80;
          if (v100 >= 0xFFFE8000)
            v100 = -98304;
          v101 = (unsigned __int16)(v98 - ((v100 + 0x8000 + ((v100 + 0x8000) >> 16)) >> 16));
          v102 = ((unint64_t)v101 << 16) | (v101 << 32) | v81 | v101;
          if ((_DWORD)v6 == 0xFFFF)
            v103 = v99;
          else
            v103 = v102;
          v104 = HIWORD(v103);
          if (HIWORD(v103))
          {
            if ((_DWORD)v104 == 0xFFFF)
              *v7 = (uint16x4_t)v103;
            else
              rgba64_DplusDM(v7, v103, (unint64_t)*v7, v104 ^ 0xFFFF);
          }
          ++v7;
          --v95;
        }
        while (v95);
      }
    }
    v9 = v115;
    v7 += v116;
    LOBYTE(v10) = v114;
    v11 = v119 + v113;
    a6 = v121 - 1;
  }
  while (v121 != 1);
}

void rgba64_image_mark_RGB48(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned __int16 *v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t *v121;

  v6 = *((unsigned __int16 *)a2 + 4);
  v112 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v111 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v108 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v108 * a4;
  v12 = *(unsigned __int16 **)(a1 + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v14 = 0x8000;
  v119 = v6;
  v109 = v10;
  v110 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v15 = a3;
    v106 = *((_QWORD *)a2 + 11);
    v105 = *((_QWORD *)a2 + 13);
    v104 = ~(-1 << v10);
    v103 = v10 - 4;
    v16 = (unsigned __int16 *)(v13 - 6);
    v17 = v6 ^ 0xFFFFu;
    v18 = (unint64_t)(~(0xFFFF * (_DWORD)v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    v101 = a5;
    v102 = -v9;
    v100 = v8 + 16 * v15 + 8;
    v19 = BLEND16_19498;
    v116 = *(unsigned __int16 **)(a1 + 32);
    while (1)
    {
      if (((v105 - v11) | (v11 - v106)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v11 & (unint64_t)v104) >> v103) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v102 : v9;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      v114 = a6;
      v113 = v11;
      if (v112 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v100;
        v25 = v101;
        while (1)
        {
          v26 = *(v24 - 1);
          v27 = *v24;
          v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26)
            v29 = (unsigned __int16 *)(v23 + v26);
          else
            v29 = v16;
          if (v29 < v12)
            v29 = v12;
          v30 = bswap32(v29[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v29[2]) >> 16) << 32) | (bswap32(*v29) >> 16);
          v31 = *v24 & 0xF;
          if ((v27 & 0xF) != 0)
            break;
          if (v22)
          {
            v43 = (unsigned __int16 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21)
              v43 = v16;
            if (v43 < v12)
              v43 = v12;
            v44 = v19[v22];
            v41 = v30 - ((v44 & v30) >> v22);
            v42 = ((bswap32(v43[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v43[2]) >> 16) << 32) | (bswap32(*v43) >> 16)) & v44) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF)
            v45 = v30 | 0xFFFF000000000000;
          else
            v45 = ((WORD1(v30)
                  - (((_DWORD)v14 + WORD1(v30) * (_DWORD)v17 + ((v14 + WORD1(v30) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v30) - (((_DWORD)v14 + WORD2(v30) * (_DWORD)v17 + ((v14 + WORD2(v30) * (_DWORD)v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v30 - (((_DWORD)v14 + (unsigned __int16)v30 * (_DWORD)v17 + ((v14 + (unsigned __int16)v30 * (_DWORD)v17) >> 16)) >> 16)) | v18;
          v24 += 2;
          *v7++ = (uint16x4_t)v45;
          if (!--v25)
            goto LABEL_85;
        }
        v32 = v27 >> 4;
        v33 = (unsigned __int16 *)(v28 + (v27 >> 4));
        if (v16 < v33)
          v33 = v16;
        if (v33 < v12)
          v33 = v12;
        v34 = bswap32(v33[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v33[2]) >> 16) << 32) | (bswap32(*v33) >> 16);
        if (v22)
        {
          v35 = (unsigned __int16 *)(v28 + v21);
          if (v16 >= v35)
            v36 = v35;
          else
            v36 = v16;
          if (v36 < v12)
            v36 = v12;
          v37 = bswap32(v36[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v36[2]) >> 16) << 32) | (bswap32(*v36) >> 16);
          v38 = (unsigned __int16 *)((char *)v35 + v32);
          if (v16 < v38)
            v38 = v16;
          if (v38 < v12)
            v38 = v12;
          v39 = v19[v22];
          v30 = v30 - ((v39 & v30) >> v22) + ((v37 & v39) >> v22);
          v34 = v34
              - ((v39 & v34) >> v22)
              + (((bswap32(v38[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | (bswap32(*v38) >> 16)) & v39) >> v22);
        }
        v40 = v19[v31];
        v41 = v30 - ((v40 & v30) >> v31);
        v42 = (v40 & v34) >> v31;
LABEL_40:
        v30 = v41 + v42;
        goto LABEL_41;
      }
LABEL_85:
      v9 = v110;
      v7 += v111;
      LOBYTE(v10) = v109;
      v11 = v113 + v108;
      a6 = v114 - 1;
      if (v114 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_85;
    v120 = v22;
    v47 = (uint64_t *)v100;
    v46 = v101;
    v117 = v22;
    while (1)
    {
      v48 = *(v47 - 1);
      v49 = *v47;
      v50 = v23 + v48;
      if ((unint64_t)v16 >= v23 + v48)
        v51 = (unsigned __int16 *)(v23 + v48);
      else
        v51 = v16;
      if (v51 < v12)
        v51 = v12;
      v52 = bswap32(v51[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v51[2]) >> 16) << 32) | (bswap32(*v51) >> 16);
      v53 = *v47 & 0xF;
      if ((v49 & 0xF) != 0)
        break;
      if (v22)
      {
        v65 = (unsigned __int16 *)(v50 + v21);
        if ((unint64_t)v16 < v50 + v21)
          v65 = v16;
        if (v65 < v12)
          v65 = v12;
        v66 = v19[v120];
        v63 = v52 - ((v66 & v52) >> v120);
        v64 = ((bswap32(v65[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | (bswap32(*v65) >> 16)) & v66) >> v120;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF)
        v67 = v52 | 0xFFFF000000000000;
      else
        v67 = ((WORD1(v52)
              - (((_DWORD)v14 + WORD1(v52) * (_DWORD)v17 + ((v14 + WORD1(v52) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v52) - (((_DWORD)v14 + WORD2(v52) * (_DWORD)v17 + ((v14 + WORD2(v52) * (_DWORD)v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v52 - (((_DWORD)v14 + (unsigned __int16)v52 * (_DWORD)v17 + ((v14 + (unsigned __int16)v52 * (_DWORD)v17) >> 16)) >> 16)) | v18;
      v68 = HIWORD(v67);
      if (HIWORD(v67))
      {
        if ((_DWORD)v68 == 0xFFFF)
        {
          *v7 = (uint16x4_t)v67;
        }
        else
        {
          v69 = v18;
          v70 = v23;
          v71 = v19;
          v72 = v14;
          v73 = v17;
          v74 = v21;
          rgba64_DplusDM(v7, v67, (unint64_t)*v7, v68 ^ 0xFFFF);
          v21 = v74;
          v17 = v73;
          v14 = v72;
          v19 = v71;
          v23 = v70;
          v12 = v116;
          v18 = v69;
          v22 = v117;
          v6 = v119;
        }
      }
      v47 += 2;
      ++v7;
      if (!--v46)
        goto LABEL_85;
    }
    v54 = v49 >> 4;
    v55 = (unsigned __int16 *)(v50 + (v49 >> 4));
    if (v16 < v55)
      v55 = v16;
    if (v55 < v12)
      v55 = v12;
    v56 = bswap32(v55[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (bswap32(*v55) >> 16);
    if (v22)
    {
      v57 = (unsigned __int16 *)(v50 + v21);
      if (v16 >= v57)
        v58 = v57;
      else
        v58 = v16;
      if (v58 < v12)
        v58 = v12;
      v59 = bswap32(v58[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | (bswap32(*v58) >> 16);
      v60 = (unsigned __int16 *)((char *)v57 + v54);
      if (v16 < v60)
        v60 = v16;
      if (v60 < v12)
        v60 = v12;
      v61 = v19[v120];
      v52 = v52 - ((v61 & v52) >> v120) + ((v59 & v61) >> v120);
      v56 = v56
          - ((v61 & v56) >> v120)
          + (((bswap32(v60[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | (bswap32(*v60) >> 16)) & v61) >> v120);
    }
    v62 = v19[v53];
    v63 = v52 - ((v62 & v52) >> v53);
    v64 = (v62 & v56) >> v53;
LABEL_76:
    v52 = v63 + v64;
    goto LABEL_77;
  }
  v121 = (uint64_t *)(v8 + 16 * a3);
  v75 = v13 - 6;
  v76 = v6 ^ 0xFFFF;
  v77 = (unint64_t)(~(0xFFFF * v76 + 0x8000 + ((0xFFFF * v76 + 0x8000) >> 16)) >> 16) << 48;
  v118 = a5;
  do
  {
    v78 = *(char **)(a1 + 32);
    v79 = &v78[(v11 >> v10) * v9];
    v115 = a6;
    if (v112 == 1)
    {
      if (a5 >= 1)
      {
        v80 = v121;
        v81 = v118;
        do
        {
          v82 = *v80;
          v80 += 2;
          v83 = &v79[v82];
          if (v75 < &v79[v82])
            v83 = v75;
          if (v83 < v78)
            v83 = v78;
          v84 = bswap32(*(unsigned __int16 *)v83) >> 16;
          v85 = bswap32(*((unsigned __int16 *)v83 + 1)) >> 16;
          v86 = bswap32(*((unsigned __int16 *)v83 + 2)) >> 16;
          v87 = v84 | (v86 << 32) | (v85 << 16) | 0xFFFF000000000000;
          v88 = ((v85 - (((_DWORD)v85 * v76 + 0x8000 + ((v85 * v76 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v86 - (((_DWORD)v86 * v76 + 0x8000 + ((v86 * v76 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v84 - (((_DWORD)v84 * v76 + 0x8000 + ((v84 * v76 + 0x8000) >> 16)) >> 16)) | v77;
          if (v6 == 0xFFFF)
            v88 = v87;
          *v7++ = (uint16x4_t)v88;
          --v81;
        }
        while (v81);
      }
    }
    else
    {
      v89 = v121;
      v90 = v118;
      if (a5 >= 1)
      {
        do
        {
          v91 = *v89;
          v89 += 2;
          v92 = &v79[v91];
          if (v75 < &v79[v91])
            v92 = v75;
          if ((unint64_t)v92 < *(_QWORD *)(a1 + 32))
            v92 = *(char **)(a1 + 32);
          v93 = bswap32(*(unsigned __int16 *)v92) >> 16;
          v94 = bswap32(*((unsigned __int16 *)v92 + 1)) >> 16;
          v95 = bswap32(*((unsigned __int16 *)v92 + 2)) >> 16;
          v96 = v93 | (v95 << 32) | (v94 << 16) | 0xFFFF000000000000;
          v97 = ((v94 - (((_DWORD)v94 * v76 + 0x8000 + ((v94 * v76 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v95 - (((_DWORD)v95 * v76 + 0x8000 + ((v95 * v76 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v93 - (((_DWORD)v93 * v76 + 0x8000 + ((v93 * v76 + 0x8000) >> 16)) >> 16)) | v77;
          if (v6 == 0xFFFF)
            v98 = v96;
          else
            v98 = v97;
          v99 = HIWORD(v98);
          if (HIWORD(v98))
          {
            if ((_DWORD)v99 == 0xFFFF)
            {
              *v7 = (uint16x4_t)v98;
            }
            else
            {
              rgba64_DplusDM(v7, v98, (unint64_t)*v7, v99 ^ 0xFFFF);
              v6 = v119;
            }
          }
          ++v7;
          --v90;
        }
        while (v90);
      }
    }
    v9 = v110;
    v7 += v111;
    LOBYTE(v10) = v109;
    v11 += v108;
    a6 = v115 - 1;
  }
  while (v115 != 1);
}

void rgba64_image_mark_rgb48(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  uint16x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned __int16 *v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;

  v6 = *((unsigned __int16 *)a2 + 4);
  v109 = *a2;
  v7 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v108 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v105 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v105 * a4;
  v12 = *(unsigned __int16 **)(a1 + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v14 = 0x8000;
  v115 = v6;
  v106 = v10;
  v107 = v9;
  if (*(_QWORD *)(a1 + 176))
  {
    v103 = *((_QWORD *)a2 + 11);
    v102 = *((_QWORD *)a2 + 13);
    v101 = ~(-1 << v10);
    v100 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 6);
    v16 = v6 ^ 0xFFFFu;
    v17 = (unint64_t)(~(0xFFFF * (_DWORD)v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v98 = a5;
    v99 = -v9;
    v97 = v8 + 16 * a3 + 8;
    v113 = v12;
    while (1)
    {
      if (((v102 - v11) | (v11 - v103)) < 0)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v18 = ((v11 & (unint64_t)v101) >> v100) & 0xF;
        v19 = (unint64_t)(v18 - 7) >= 9 ? v99 : v9;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = *(_QWORD *)(a1 + 32) + (v11 >> v10) * v9;
      v111 = a6;
      v110 = v11;
      if (v109 != 1)
        break;
      if (a5 >= 1)
      {
        v22 = (uint64_t *)v97;
        v23 = v98;
        while (1)
        {
          v24 = *(v22 - 1);
          v25 = *v22;
          v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24)
            v27 = (unsigned __int16 *)(v21 + v24);
          else
            v27 = v15;
          if (v27 < v12)
            v27 = v12;
          v28 = *v27 | ((unint64_t)*(unsigned int *)(v27 + 1) << 16);
          v29 = *v22 & 0xF;
          if ((v25 & 0xF) != 0)
            break;
          if (v20)
          {
            v41 = (unsigned __int16 *)(v26 + v19);
            if ((unint64_t)v15 < v26 + v19)
              v41 = v15;
            if (v41 < v12)
              v41 = v12;
            v42 = BLEND16_19498[v20];
            v39 = v28 - ((v42 & v28) >> v20);
            v40 = ((*v41 | ((unint64_t)*(unsigned int *)(v41 + 1) << 16)) & v42) >> v20;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF)
            v43 = v28 | 0xFFFF000000000000;
          else
            v43 = ((WORD1(v28)
                  - (((_DWORD)v14 + WORD1(v28) * (_DWORD)v16 + ((v14 + WORD1(v28) * (_DWORD)v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v28) - (((_DWORD)v14 + WORD2(v28) * (_DWORD)v16 + ((v14 + WORD2(v28) * (_DWORD)v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v28 - (((_DWORD)v14 + (unsigned __int16)v28 * (_DWORD)v16 + ((v14 + (unsigned __int16)v28 * (_DWORD)v16) >> 16)) >> 16)) | v17;
          v22 += 2;
          *v7++ = (uint16x4_t)v43;
          if (!--v23)
            goto LABEL_85;
        }
        v30 = v25 >> 4;
        v31 = (unsigned __int16 *)(v26 + (v25 >> 4));
        if (v15 < v31)
          v31 = v15;
        if (v31 < v12)
          v31 = v12;
        v32 = *v31 | ((unint64_t)*(unsigned int *)(v31 + 1) << 16);
        if (v20)
        {
          v33 = (unsigned __int16 *)(v26 + v19);
          if (v15 >= v33)
            v34 = v33;
          else
            v34 = v15;
          if (v34 < v12)
            v34 = v12;
          v35 = *v34 | ((unint64_t)*(unsigned int *)(v34 + 1) << 16);
          v36 = (unsigned __int16 *)((char *)v33 + v30);
          if (v15 < v36)
            v36 = v15;
          if (v36 < v12)
            v36 = v12;
          v37 = BLEND16_19498[v20];
          v28 = v28 - ((v37 & v28) >> v20) + ((v35 & v37) >> v20);
          v32 = v32
              - ((v37 & v32) >> v20)
              + (((*v36 | ((unint64_t)*(unsigned int *)(v36 + 1) << 16)) & v37) >> v20);
        }
        v38 = BLEND16_19498[v29];
        v39 = v28 - ((v38 & v28) >> v29);
        v40 = (v38 & v32) >> v29;
LABEL_40:
        v28 = v39 + v40;
        goto LABEL_41;
      }
LABEL_85:
      v9 = v107;
      v7 += v108;
      LOBYTE(v10) = v106;
      v11 = v110 + v105;
      a6 = v111 - 1;
      if (v111 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_85;
    v45 = (uint64_t *)v97;
    v44 = v98;
    while (1)
    {
      v46 = *(v45 - 1);
      v47 = *v45;
      v48 = v21 + v46;
      if ((unint64_t)v15 >= v21 + v46)
        v49 = (unsigned __int16 *)(v21 + v46);
      else
        v49 = v15;
      if (v49 < v12)
        v49 = v12;
      v50 = *v49 | ((unint64_t)*(unsigned int *)(v49 + 1) << 16);
      v51 = *v45 & 0xF;
      if ((v47 & 0xF) != 0)
        break;
      if (v20)
      {
        v63 = (unsigned __int16 *)(v48 + v19);
        if ((unint64_t)v15 < v48 + v19)
          v63 = v15;
        if (v63 < v12)
          v63 = v12;
        v64 = BLEND16_19498[v20];
        v61 = v50 - ((v64 & v50) >> v20);
        v62 = ((*v63 | ((unint64_t)*(unsigned int *)(v63 + 1) << 16)) & v64) >> v20;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF)
        v65 = v50 | 0xFFFF000000000000;
      else
        v65 = ((WORD1(v50)
              - (((_DWORD)v14 + WORD1(v50) * (_DWORD)v16 + ((v14 + WORD1(v50) * (_DWORD)v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v50) - (((_DWORD)v14 + WORD2(v50) * (_DWORD)v16 + ((v14 + WORD2(v50) * (_DWORD)v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v50 - (((_DWORD)v14 + (unsigned __int16)v50 * (_DWORD)v16 + ((v14 + (unsigned __int16)v50 * (_DWORD)v16) >> 16)) >> 16)) | v17;
      v66 = HIWORD(v65);
      if (HIWORD(v65))
      {
        if ((_DWORD)v66 == 0xFFFF)
        {
          *v7 = (uint16x4_t)v65;
        }
        else
        {
          v67 = v17;
          v68 = v19;
          v69 = v14;
          v70 = v16;
          rgba64_DplusDM(v7, v65, (unint64_t)*v7, v66 ^ 0xFFFF);
          v16 = v70;
          v14 = v69;
          v19 = v68;
          v17 = v67;
          v12 = v113;
          v6 = v115;
        }
      }
      v45 += 2;
      ++v7;
      if (!--v44)
        goto LABEL_85;
    }
    v52 = v47 >> 4;
    v53 = (unsigned __int16 *)(v48 + (v47 >> 4));
    if (v15 < v53)
      v53 = v15;
    if (v53 < v12)
      v53 = v12;
    v54 = *v53 | ((unint64_t)*(unsigned int *)(v53 + 1) << 16);
    if (v20)
    {
      v55 = (unsigned __int16 *)(v48 + v19);
      if (v15 >= v55)
        v56 = v55;
      else
        v56 = v15;
      if (v56 < v12)
        v56 = v12;
      v57 = *v56 | ((unint64_t)*(unsigned int *)(v56 + 1) << 16);
      v58 = (unsigned __int16 *)((char *)v55 + v52);
      if (v15 < v58)
        v58 = v15;
      if (v58 < v12)
        v58 = v12;
      v59 = BLEND16_19498[v20];
      v50 = v50 - ((v59 & v50) >> v20) + ((v57 & v59) >> v20);
      v54 = v54 - ((v59 & v54) >> v20) + (((*v58 | ((unint64_t)*(unsigned int *)(v58 + 1) << 16)) & v59) >> v20);
    }
    v60 = BLEND16_19498[v51];
    v61 = v50 - ((v60 & v50) >> v51);
    v62 = (v60 & v54) >> v51;
LABEL_76:
    v50 = v61 + v62;
    goto LABEL_77;
  }
  v116 = (uint64_t *)(v8 + 16 * a3);
  v71 = v13 - 6;
  v72 = v6 ^ 0xFFFF;
  v73 = (unint64_t)(~(0xFFFF * v72 + 0x8000 + ((0xFFFF * v72 + 0x8000) >> 16)) >> 16) << 48;
  v114 = a5;
  do
  {
    v74 = *(char **)(a1 + 32);
    v75 = &v74[(v11 >> v10) * v9];
    v112 = a6;
    if (v109 == 1)
    {
      v76 = v11;
      if (a5 >= 1)
      {
        v77 = v116;
        v78 = v114;
        do
        {
          v79 = *v77;
          v77 += 2;
          v80 = &v75[v79];
          if (v71 < &v75[v79])
            v80 = v71;
          if (v80 < v74)
            v80 = v74;
          v81 = *(unsigned __int16 *)v80;
          v82 = *((unsigned __int16 *)v80 + 1);
          v83 = *((unsigned __int16 *)v80 + 2);
          v84 = v81 | (v82 << 16) | (v83 << 32) | 0xFFFF000000000000;
          v85 = ((v82 - (((_DWORD)v82 * v72 + 0x8000 + ((v82 * v72 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v83 - (((_DWORD)v83 * v72 + 0x8000 + ((v83 * v72 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v81 - (((_DWORD)v81 * v72 + 0x8000 + ((v81 * v72 + 0x8000) >> 16)) >> 16)) | v73;
          if (v6 == 0xFFFF)
            v85 = v84;
          *v7++ = (uint16x4_t)v85;
          --v78;
        }
        while (v78);
      }
    }
    else
    {
      v76 = v11;
      v86 = v116;
      v87 = v114;
      if (a5 >= 1)
      {
        do
        {
          v88 = *v86;
          v86 += 2;
          v89 = &v75[v88];
          if (v71 < &v75[v88])
            v89 = v71;
          if ((unint64_t)v89 < *(_QWORD *)(a1 + 32))
            v89 = *(char **)(a1 + 32);
          v90 = *(unsigned __int16 *)v89;
          v91 = *((unsigned __int16 *)v89 + 1);
          v92 = *((unsigned __int16 *)v89 + 2);
          v93 = v90 | (v91 << 16) | (v92 << 32) | 0xFFFF000000000000;
          v94 = ((v91 - (((_DWORD)v91 * v72 + 0x8000 + ((v91 * v72 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v92 - (((_DWORD)v92 * v72 + 0x8000 + ((v92 * v72 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v90 - (((_DWORD)v90 * v72 + 0x8000 + ((v90 * v72 + 0x8000) >> 16)) >> 16)) | v73;
          if (v6 == 0xFFFF)
            v95 = v93;
          else
            v95 = v94;
          v96 = HIWORD(v95);
          if (HIWORD(v95))
          {
            if ((_DWORD)v96 == 0xFFFF)
            {
              *v7 = (uint16x4_t)v95;
            }
            else
            {
              rgba64_DplusDM(v7, v95, (unint64_t)*v7, v96 ^ 0xFFFF);
              v6 = v115;
            }
          }
          ++v7;
          --v87;
        }
        while (v87);
      }
    }
    v9 = v107;
    v7 += v108;
    LOBYTE(v10) = v106;
    v11 = v76 + v105;
    a6 = v112 - 1;
  }
  while (v112 != 1);
}

void rgba64_image_mark_RGBA64(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint16x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  int v78;
  int32x2_t v79;
  uint64x2_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 *v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  int32x2_t v95;
  uint32x2_t v96;
  int8x8_t v97;
  uint64x2_t v98;
  int8x16_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  int32x2_t v110;
  uint32x2_t v111;
  int8x8_t v112;
  uint64x2_t v113;
  int8x16_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned __int16 *v131;
  unsigned __int16 *v132;
  uint64_t *v133;
  int v134;
  uint64_t v135;

  v7 = *((unsigned __int16 *)a2 + 4);
  v128 = *a2;
  v8 = *(unsigned __int16 **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v9 = 0;
  else
    v9 = 0xFFFFLL;
  v10 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v127 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v124 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v124 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v134 = *((unsigned __int16 *)a2 + 4);
  v125 = v13;
  v126 = v12;
  if (*(_QWORD *)(a1 + 176))
  {
    v16 = a3;
    v120 = ~(-1 << v13);
    v121 = *((_QWORD *)a2 + 13);
    v122 = *((_QWORD *)a2 + 11);
    v119 = v13 - 4;
    v17 = (unsigned __int16 *)(v15 - 8);
    v18 = v9 << 48;
    v19 = v7 ^ 0xFFFFu;
    v117 = a5;
    v118 = -v12;
    v116 = v11 + 16 * v16 + 8;
    v131 = *(unsigned __int16 **)(a1 + 32);
    v132 = (unsigned __int16 *)(v15 - 8);
    while (1)
    {
      if (((v121 - v14) | (v14 - v122)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v14 & (unint64_t)v120) >> v119) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v118 : v12;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(a1 + 32) + (v14 >> v13) * v12;
      v24 = 0x8000;
      v130 = a6;
      v129 = v14;
      if (v128 != 1)
        break;
      if (a5 >= 1)
      {
        v25 = (uint64_t *)v116;
        v26 = v117;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27)
            v30 = (unsigned __int16 *)(v23 + v27);
          else
            v30 = v17;
          if (v30 < v8)
            v30 = v8;
          v31 = ((unint64_t)(bswap32(v30[3]) >> 16) << 48) | ((unint64_t)(bswap32(v30[2]) >> 16) << 32) | bswap32(v30[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v30) >> 16);
          v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if ((_DWORD)v22)
          {
            v44 = (unsigned __int16 *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21)
              v44 = v17;
            if (v44 < v8)
              v44 = v8;
            v45 = BLEND16_19498[v22];
            v42 = v31 - ((v45 & v31) >> v22);
            v43 = ((((unint64_t)(bswap32(v44[3]) >> 16) << 48) | ((unint64_t)(bswap32(v44[2]) >> 16) << 32) | bswap32(v44[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v44) >> 16)) & v45) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            v47 = HIWORD(v46);
            v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * (_DWORD)v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (((_DWORD)v47 * (_DWORD)v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * (_DWORD)v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * (_DWORD)v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          *v10++ = (uint16x4_t)v46;
          if (!--v26)
            goto LABEL_86;
        }
        v33 = v28 >> 4;
        v34 = (unsigned __int16 *)(v29 + (v28 >> 4));
        if (v17 < v34)
          v34 = v17;
        if (v34 < v8)
          v34 = v8;
        v35 = ((unint64_t)(bswap32(v34[3]) >> 16) << 48) | ((unint64_t)(bswap32(v34[2]) >> 16) << 32) | bswap32(v34[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v34) >> 16);
        if ((_DWORD)v22)
        {
          v36 = (unsigned __int16 *)(v29 + v21);
          if (v17 >= v36)
            v37 = v36;
          else
            v37 = v17;
          if (v37 < v8)
            v37 = v8;
          v38 = ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
          v39 = (unsigned __int16 *)((char *)v36 + v33);
          if (v17 < v39)
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          v40 = BLEND16_19498[v22];
          v31 = v31 - ((v40 & v31) >> v22) + ((v38 & v40) >> v22);
          v35 = v35
              - ((v40 & v35) >> v22)
              + (((((unint64_t)(bswap32(v39[3]) >> 16) << 48) | ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | bswap32(v39[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v39) >> 16)) & v40) >> v22);
        }
        v41 = BLEND16_19498[v32];
        v42 = v31 - ((v41 & v31) >> v32);
        v43 = (v41 & v35) >> v32;
LABEL_43:
        v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      v12 = v126;
      v10 += v127;
      LOBYTE(v13) = v125;
      v14 = v129 + v124;
      a6 = v130 - 1;
      if (v130 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_86;
    v135 = v22;
    v49 = (uint64_t *)v116;
    v48 = v117;
    while (1)
    {
      v50 = *(v49 - 1);
      v51 = *v49;
      v52 = v23 + v50;
      if ((unint64_t)v17 >= v23 + v50)
        v53 = (unsigned __int16 *)(v23 + v50);
      else
        v53 = v17;
      if (v53 < v8)
        v53 = v8;
      v54 = ((unint64_t)(bswap32(v53[3]) >> 16) << 48) | ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | bswap32(v53[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v53) >> 16);
      v55 = *v49 & 0xF;
      if ((v51 & 0xF) != 0)
        break;
      if ((_DWORD)v22)
      {
        v67 = (unsigned __int16 *)(v52 + v21);
        if ((unint64_t)v17 < v52 + v21)
          v67 = v17;
        if (v67 < v8)
          v67 = v8;
        v68 = BLEND16_19498[v135];
        v65 = v54 - ((v68 & v54) >> v135);
        v66 = ((((unint64_t)(bswap32(v67[3]) >> 16) << 48) | ((unint64_t)(bswap32(v67[2]) >> 16) << 32) | bswap32(v67[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v67) >> 16)) & v68) >> v135;
        goto LABEL_78;
      }
LABEL_79:
      v69 = v54 | v18;
      if (v7 != 0xFFFF)
        v69 = ((unint64_t)(unsigned __int16)(WORD2(v54)
                                                  - (((_DWORD)v24
                                                    + WORD2(v54) * (_DWORD)v19
                                                    + ((v24 + WORD2(v54) * (_DWORD)v19) >> 16)) >> 16)) << 32) | ((HIWORD(v69) - ((v24 + HIWORD(v69) * v19 + ((v24 + HIWORD(v69) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v54) - (((_DWORD)v24 + WORD1(v54) * (_DWORD)v19 + ((v24 + WORD1(v54) * (_DWORD)v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v54 - (((_DWORD)v24 + (unsigned __int16)v54 * (_DWORD)v19 + ((v24 + (unsigned __int16)v54 * (_DWORD)v19) >> 16)) >> 16));
      v70 = HIWORD(v69);
      if (HIWORD(v69))
      {
        if ((_DWORD)v70 == 0xFFFF)
        {
          *v10 = (uint16x4_t)v69;
        }
        else
        {
          v71 = v23;
          v72 = v18;
          v73 = v24;
          v74 = v22;
          v75 = v19;
          rgba64_DplusDM(v10, v69, (unint64_t)*v10, v70 ^ 0xFFFF);
          v19 = v75;
          v22 = v74;
          v24 = v73;
          v18 = v72;
          v23 = v71;
          v8 = v131;
          v17 = v132;
          v7 = v134;
        }
      }
      v49 += 2;
      ++v10;
      if (!--v48)
        goto LABEL_86;
    }
    v56 = v51 >> 4;
    v57 = (unsigned __int16 *)(v52 + (v51 >> 4));
    if (v17 < v57)
      v57 = v17;
    if (v57 < v8)
      v57 = v8;
    v58 = ((unint64_t)(bswap32(v57[3]) >> 16) << 48) | ((unint64_t)(bswap32(v57[2]) >> 16) << 32) | bswap32(v57[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v57) >> 16);
    if ((_DWORD)v22)
    {
      v59 = (unsigned __int16 *)(v52 + v21);
      if (v17 >= v59)
        v60 = v59;
      else
        v60 = v17;
      if (v60 < v8)
        v60 = v8;
      v61 = ((unint64_t)(bswap32(v60[3]) >> 16) << 48) | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | bswap32(v60[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v60) >> 16);
      v62 = (unsigned __int16 *)((char *)v59 + v56);
      if (v17 < v62)
        v62 = v17;
      if (v62 < v8)
        v62 = v8;
      v63 = BLEND16_19498[v135];
      v54 = v54 - ((v63 & v54) >> v135) + ((v61 & v63) >> v135);
      v58 = v58
          - ((v63 & v58) >> v135)
          + (((((unint64_t)(bswap32(v62[3]) >> 16) << 48) | ((unint64_t)(bswap32(v62[2]) >> 16) << 32) | bswap32(v62[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v62) >> 16)) & v63) >> v135);
    }
    v64 = BLEND16_19498[v55];
    v65 = v54 - ((v64 & v54) >> v55);
    v66 = (v64 & v58) >> v55;
LABEL_78:
    v54 = v65 + v66;
    goto LABEL_79;
  }
  v133 = (uint64_t *)(v11 + 16 * a3);
  v76 = (unsigned __int16 *)(v15 - 8);
  v77 = v9 << 48;
  v78 = v7 ^ 0xFFFF;
  v79 = vdup_n_s32(v7 ^ 0xFFFFu);
  v80 = (uint64x2_t)xmmword_185004F60;
  v81 = a5;
  do
  {
    v82 = v14;
    v83 = *(unsigned __int16 **)(a1 + 32);
    v84 = (char *)v83 + (v14 >> v13) * v12;
    if (v128 == 1)
    {
      if (a5 >= 1)
      {
        v85 = v133;
        v86 = v81;
        do
        {
          v87 = *v85;
          v85 += 2;
          v88 = (unsigned __int16 *)&v84[v87];
          if (v76 < (unsigned __int16 *)&v84[v87])
            v88 = v76;
          if (v88 >= v83)
            v89 = v88;
          else
            v89 = v83;
          v90 = bswap32(v89[3]) >> 16;
          v91 = bswap32(*v89) >> 16;
          v92 = bswap32(v89[1]) >> 16;
          v93 = bswap32(v89[2]) >> 16;
          v94 = (v92 << 16) | (unint64_t)(v90 << 48) | (v93 << 32) | v77 | v91;
          if (v7 != 0xFFFF)
          {
            v95.i32[0] = HIWORD(v94);
            v95.i32[1] = v93;
            v96 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v95, v79);
            v97 = vand_s8((int8x8_t)vsub_s32(v95, (int32x2_t)vshr_n_u32(vsra_n_u32(v96, v96, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v98.i64[0] = v97.u32[0];
            v98.i64[1] = v97.u32[1];
            v99 = (int8x16_t)vshlq_u64(v98, v80);
            v94 = vorrq_s8(v99, (int8x16_t)vdupq_laneq_s64((int64x2_t)v99, 1)).u64[0] | ((v92
                                                                                        - ((v92 * v78
                                                                                          + 0x8000
                                                                                          + ((v92 * v78 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v91 - (((_DWORD)v91 * v78 + 0x8000 + ((v91 * v78 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)v94;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      v100 = v133;
      v101 = v81;
      if (a5 >= 1)
      {
        do
        {
          v102 = *v100;
          v100 += 2;
          v103 = (unsigned __int16 *)&v84[v102];
          v104 = *(unsigned __int16 **)(a1 + 32);
          if (v76 < (unsigned __int16 *)&v84[v102])
            v103 = v76;
          if (v103 >= v104)
            v104 = v103;
          v105 = bswap32(v104[3]) >> 16;
          v106 = bswap32(*v104) >> 16;
          v107 = bswap32(v104[1]) >> 16;
          v108 = bswap32(v104[2]) >> 16;
          v109 = (v107 << 16) | (unint64_t)(v105 << 48) | (v108 << 32) | v77 | v106;
          if (v7 != 0xFFFF)
          {
            v110.i32[0] = HIWORD(v109);
            v110.i32[1] = v108;
            v111 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v110, v79);
            v112 = vand_s8((int8x8_t)vsub_s32(v110, (int32x2_t)vshr_n_u32(vsra_n_u32(v111, v111, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            v114 = (int8x16_t)vshlq_u64(v113, v80);
            v109 = vorrq_s8(v114, (int8x16_t)vdupq_laneq_s64((int64x2_t)v114, 1)).u64[0] | ((v107
                                                                                           - ((v107 * v78
                                                                                             + 0x8000
                                                                                             + ((v107 * v78 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v106 - (((_DWORD)v106 * v78 + 0x8000 + ((v106 * v78 + 0x8000) >> 16)) >> 16));
          }
          v115 = HIWORD(v109);
          if (HIWORD(v109))
          {
            if ((_DWORD)v115 == 0xFFFF)
            {
              *v10 = (uint16x4_t)v109;
            }
            else
            {
              rgba64_DplusDM(v10, v109, (unint64_t)*v10, v115 ^ 0xFFFF);
              v80 = (uint64x2_t)xmmword_185004F60;
              v7 = v134;
            }
          }
          ++v10;
          --v101;
        }
        while (v101);
      }
    }
    v12 = v126;
    v10 += v127;
    LOBYTE(v13) = v125;
    v14 = v82 + v124;
    --a6;
  }
  while (a6);
}

void rgba64_image_mark_rgba64(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  char *v8;
  uint64_t v9;
  uint16x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;

  v7 = *((unsigned __int16 *)a2 + 4);
  v107 = *a2;
  v8 = *(char **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v9 = 0;
  else
    v9 = 0xFFFFLL;
  v10 = (uint16x4_t *)*((_QWORD *)a2 + 2);
  v106 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v103 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v103 * a4;
  v15 = &v8[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
          + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v113 = *((unsigned __int16 *)a2 + 4);
  v104 = v13;
  v105 = v12;
  if (*(_QWORD *)(a1 + 176))
  {
    v99 = ~(-1 << v13);
    v100 = *((_QWORD *)a2 + 13);
    v101 = *((_QWORD *)a2 + 11);
    v98 = v13 - 4;
    v16 = v15 - 8;
    v17 = v9 << 48;
    v18 = v7 ^ 0xFFFFu;
    v96 = a5;
    v97 = -v12;
    v95 = v11 + 16 * a3 + 8;
    v19 = BLEND16_19498;
    while (1)
    {
      if (((v100 - v14) | (v14 - v101)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v14 & (unint64_t)v99) >> v98) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v97 : v12;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(a1 + 32) + (v14 >> v13) * v12;
      v24 = 0x8000;
      v109 = a6;
      v108 = v14;
      if (v107 != 1)
        break;
      if (a5 >= 1)
      {
        v25 = (uint64_t *)v95;
        v26 = v96;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v16 >= v23 + v27)
            v30 = (char *)(v23 + v27);
          else
            v30 = v16;
          if (v30 < v8)
            v30 = v8;
          v31 = *(_QWORD *)v30;
          v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if (v22)
          {
            v44 = (char *)(v29 + v21);
            if ((unint64_t)v16 < v29 + v21)
              v44 = v16;
            if (v44 < v8)
              v44 = v8;
            v45 = v19[v22];
            v42 = v31 - ((v45 & v31) >> v22);
            v43 = (v45 & *(_QWORD *)v44) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          v46 = v31 | v17;
          if (v7 != 0xFFFF)
          {
            v47 = HIWORD(v46);
            v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * (_DWORD)v18
                                                        + 0x8000
                                                        + ((WORD2(v31) * v18 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (((_DWORD)v47 * (_DWORD)v18 + 0x8000 + ((v47 * v18 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * (_DWORD)v18 + 0x8000 + ((WORD1(v31) * v18 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * (_DWORD)v18 + 0x8000 + (((unsigned __int16)v31 * v18 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          *v10++ = (uint16x4_t)v46;
          if (!--v26)
            goto LABEL_86;
        }
        v33 = v28 >> 4;
        v34 = (char *)(v29 + (v28 >> 4));
        if (v16 < v34)
          v34 = v16;
        if (v34 < v8)
          v34 = v8;
        v35 = *(_QWORD *)v34;
        if (v22)
        {
          v36 = (char *)(v29 + v21);
          if (v16 >= v36)
            v37 = v36;
          else
            v37 = v16;
          if (v37 < v8)
            v37 = v8;
          v38 = *(_QWORD *)v37;
          v39 = &v36[v33];
          if (v16 < v39)
            v39 = v16;
          if (v39 < v8)
            v39 = v8;
          v40 = v19[v22];
          v31 = v31 - ((v40 & v31) >> v22) + ((v40 & v38) >> v22);
          v35 = v35 - ((v40 & v35) >> v22) + ((v40 & *(_QWORD *)v39) >> v22);
        }
        v41 = v19[v32];
        v42 = v31 - ((v41 & v31) >> v32);
        v43 = (v41 & v35) >> v32;
LABEL_43:
        v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      v12 = v105;
      v10 += v106;
      LOBYTE(v13) = v104;
      v14 = v108 + v103;
      a6 = v109 - 1;
      if (v109 == 1)
        return;
    }
    if (a5 < 1)
      goto LABEL_86;
    v114 = v22;
    v48 = (uint64_t *)v95;
    v49 = v96;
    v111 = *(_QWORD *)(a1 + 32) + (v14 >> v13) * v12;
    v110 = v22;
    while (1)
    {
      v50 = *(v48 - 1);
      v51 = *v48;
      v52 = v23 + v50;
      if ((unint64_t)v16 >= v23 + v50)
        v53 = (char *)(v23 + v50);
      else
        v53 = v16;
      if (v53 < v8)
        v53 = v8;
      v54 = *(_QWORD *)v53;
      v55 = *v48 & 0xF;
      if ((v51 & 0xF) != 0)
        break;
      if (v22)
      {
        v67 = (char *)(v52 + v21);
        if ((unint64_t)v16 < v52 + v21)
          v67 = v16;
        if (v67 < v8)
          v67 = v8;
        v68 = v19[v114];
        v65 = v54 - ((v68 & v54) >> v114);
        v66 = (v68 & *(_QWORD *)v67) >> v114;
        goto LABEL_78;
      }
LABEL_79:
      v69 = v54 | v17;
      if (v7 != 0xFFFF)
        v69 = ((unint64_t)(unsigned __int16)(WORD2(v54)
                                                  - (((_DWORD)v24
                                                    + WORD2(v54) * (_DWORD)v18
                                                    + ((v24 + WORD2(v54) * (_DWORD)v18) >> 16)) >> 16)) << 32) | ((HIWORD(v69) - ((v24 + HIWORD(v69) * v18 + ((v24 + HIWORD(v69) * v18) >> 16)) >> 16)) << 48) | ((WORD1(v54) - (((_DWORD)v24 + WORD1(v54) * (_DWORD)v18 + ((v24 + WORD1(v54) * (_DWORD)v18) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v54 - (((_DWORD)v24 + (unsigned __int16)v54 * (_DWORD)v18 + ((v24 + (unsigned __int16)v54 * (_DWORD)v18) >> 16)) >> 16));
      v70 = HIWORD(v69);
      if (HIWORD(v69))
      {
        if ((_DWORD)v70 == 0xFFFF)
        {
          *v10 = (uint16x4_t)v69;
        }
        else
        {
          v71 = v19;
          v72 = v24;
          v73 = v18;
          rgba64_DplusDM(v10, v69, (unint64_t)*v10, v70 ^ 0xFFFF);
          v18 = v73;
          v24 = v72;
          v19 = v71;
          v22 = v110;
          v23 = v111;
          v7 = v113;
        }
      }
      v48 += 2;
      ++v10;
      if (!--v49)
        goto LABEL_86;
    }
    v56 = v51 >> 4;
    v57 = (char *)(v52 + (v51 >> 4));
    if (v16 < v57)
      v57 = v16;
    if (v57 < v8)
      v57 = v8;
    v58 = *(_QWORD *)v57;
    if (v22)
    {
      v59 = (char *)(v52 + v21);
      if (v16 >= v59)
        v60 = v59;
      else
        v60 = v16;
      if (v60 < v8)
        v60 = v8;
      v61 = *(_QWORD *)v60;
      v62 = &v59[v56];
      if (v16 < v62)
        v62 = v16;
      if (v62 < v8)
        v62 = v8;
      v63 = v19[v114];
      v54 = v54 - ((v63 & v54) >> v114) + ((v63 & v61) >> v114);
      v58 = v58 - ((v63 & v58) >> v114) + ((v63 & *(_QWORD *)v62) >> v114);
    }
    v64 = v19[v55];
    v65 = v54 - ((v64 & v54) >> v55);
    v66 = (v64 & v58) >> v55;
LABEL_78:
    v54 = v65 + v66;
    goto LABEL_79;
  }
  v115 = (uint64_t *)(v11 + 16 * a3);
  v74 = v15 - 8;
  v75 = v9 << 48;
  v76 = v7 ^ 0xFFFF;
  v112 = a5;
  do
  {
    v78 = *(char **)(a1 + 32);
    v79 = &v78[(v14 >> v13) * v12];
    v80 = v14;
    if (v107 == 1)
    {
      if (a5 >= 1)
      {
        v81 = v115;
        v82 = v112;
        do
        {
          v83 = *v81;
          v81 += 2;
          v84 = &v79[v83];
          if (v74 < &v79[v83])
            v84 = v74;
          if (v84 < v78)
            v84 = v78;
          v85 = *(_QWORD *)v84;
          v86 = v85 | v75;
          if (v7 != 0xFFFF)
          {
            v87 = HIWORD(v86);
            v86 = ((unint64_t)(unsigned __int16)(WORD2(v85)
                                                      - ((WORD2(v85) * v76
                                                        + 0x8000
                                                        + ((WORD2(v85) * v76 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v87 - (((_DWORD)v87 * v76 + 0x8000 + ((v87 * v76 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v85) - ((WORD1(v85) * v76 + 0x8000 + ((WORD1(v85) * v76 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v85 - (((unsigned __int16)v85 * v76 + 0x8000 + (((unsigned __int16)v85 * v76 + 0x8000) >> 16)) >> 16));
          }
          *v10++ = (uint16x4_t)v86;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      v88 = v115;
      v89 = v112;
      if (a5 >= 1)
      {
        do
        {
          v90 = *v88;
          v88 += 2;
          v91 = &v79[v90];
          if (v74 < &v79[v90])
            v91 = v74;
          if ((unint64_t)v91 < *(_QWORD *)(a1 + 32))
            v91 = *(char **)(a1 + 32);
          v92 = *(_QWORD *)v91;
          v93 = v92 | v75;
          if (v7 != 0xFFFF)
            v93 = ((unint64_t)(unsigned __int16)(WORD2(v92)
                                                      - ((WORD2(v92) * v76
                                                        + 0x8000
                                                        + ((WORD2(v92) * v76 + 0x8000) >> 16)) >> 16)) << 32) | ((HIWORD(v93) - ((HIWORD(v93) * v76 + 0x8000 + ((HIWORD(v93) * v76 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v92) - ((WORD1(v92) * v76 + 0x8000 + ((WORD1(v92) * v76 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v92 - (((unsigned __int16)v92 * v76 + 0x8000 + (((unsigned __int16)v92 * v76 + 0x8000) >> 16)) >> 16));
          v94 = HIWORD(v93);
          if (HIWORD(v93))
          {
            if ((_DWORD)v94 == 0xFFFF)
            {
              *v10 = (uint16x4_t)v93;
            }
            else
            {
              rgba64_DplusDM(v10, v93, (unint64_t)*v10, v94 ^ 0xFFFF);
              v7 = v113;
            }
          }
          ++v10;
          --v89;
        }
        while (v89);
      }
    }
    v12 = v105;
    v10 += v106;
    LOBYTE(v13) = v104;
    v14 = v80 + v103;
    --a6;
  }
  while (a6);
}

void rgba16_template_image_mark_method(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t (*v3)(int, int, int, int, int, int, int, int, uint64_t);
  uint64_t (*v4)(int, int, int, int, int, int, int, int, uint64_t);
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  int v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _BOOL4 v97;
  _BOOL4 v98;
  uint64_t (*v99)(int, int, int, int, int, int, int, int, uint64_t);
  uint64_t (*v100)(int, int, int, int, int, int, int, int, uint64_t);
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  int v108;

  if ((a1 & 0x30) == 0x20)
  {
    if ((a3 & 0x80000000) != 0)
      return;
    if (a3 > 0x17)
      v3 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba16_t>;
    else
      v3 = VEC::MethodList<_rgba16_t>::shapeMethods[a3];
    v99 = v3;
    v5 = *(_DWORD *)(a2 + 4);
    v6 = *(_DWORD *)(a2 + 8);
    v7 = v5;
    v107 = v6;
    v108 = v5;
    v8 = *(int *)(a2 + 28);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 96);
    v105 = v12;
    v13 = *(int **)(a2 + 136);
    v14 = *(unsigned __int8 *)(a2 + 1) << 8;
    v15 = v8 >> 3;
    v97 = v10 != 0;
    v16 = v9 + 8 * (*(int *)(a2 + 12) + (v8 >> 3) * *(int *)(a2 + 16));
    v106 = v16;
    v17 = *(_DWORD *)(a2 + 104);
    v18 = *(_DWORD *)(a2 + 108);
    v19 = *(int *)(a2 + 56);
    v20 = *(int *)(a2 + 60);
    v21 = *(int *)(a2 + 76);
    if (v14 != 256)
    {
      v101 = *(unsigned int *)(a2 + 64);
      v47 = v21 >> 3;
      v48 = (v21 >> 3) * *(int *)(a2 + 68);
      v85 = *(_DWORD *)(a2 + 68);
      v104 = v12;
      v49 = v12 + 8 * v48;
      v50 = v11 != 0;
      if (v13)
      {
        v25 = 1;
        v23 = v12;
LABEL_40:
        shape_enum_clip_alloc(a1, a2, v13, v25, v15, 1, v17, v18, v5, v6);
        v60 = v59;
        if (!v59)
          return;
        while (shape_enum_clip_next((uint64_t)v60, (int *)&v103 + 1, &v103, &v108, &v107))
        {
          v89 = v23;
          v91 = v16;
          v87 = v60;
          if (v49)
          {
            v71 = v16 + 8 * v15 * (int)v103 + 8 * SHIDWORD(v103);
            v5 = v108;
            v72 = v23 + 8 * v47 * (((int)v103 + *(_DWORD *)(a2 + 60)) % v85);
            v23 = v72 + 8 * ((HIDWORD(v103) + *(_DWORD *)(a2 + 56)) % (int)v101);
            v56 = v72 + 8 * (int)v101;
            v104 = v56;
            LODWORD(v7) = v108;
            v12 = v23;
          }
          else
          {
            v5 = v108;
            LODWORD(v7) = v108 * v25;
            v71 = v16 + 8 * v15 * (int)v103 + 8 * HIDWORD(v103) * (int)v25;
            v23 += 8 * (int)v103 * (int)v101 + 8 * HIDWORD(v103) * (int)v25;
            v47 = (int)v101 - v108 * (int)v25;
            v56 = v104;
          }
          v106 = v71;
          v105 = v23;
          v7 = (int)v7;
          v6 = v107;
LABEL_52:
          v95 = v15;
          v62 = v15 - v7;
          v63 = v5 & ~(v5 >> 31);
          if ((unint64_t)(v56 - v23) >> 3 >= v63)
            v64 = v63;
          else
            v64 = (unint64_t)(v56 - v23) >> 3;
          v65 = v63 - v64;
          if (v6 >= 1)
            v66 = 1;
          else
            v66 = v6;
          v93 = v66;
          v67 = v6 + 1;
          do
          {
            v99((int)&v105, (int)&v106, (int)&v104, v101, v25, v50, v97, v65, v64);
            v106 += 8 * v62;
            if (v49)
            {
              v68 = v12 + 8 * v47;
              if (v68 >= v49)
                v69 = -(uint64_t)(v47 * v85);
              else
                v69 = 0;
              v70 = v68 + 8 * v69;
              v104 += 8 * v69 + 8 * v47;
              v12 = v70;
            }
            else
            {
              v70 = v105 + 8 * v47;
            }
            v105 = v70;
            --v67;
          }
          while (v67 > 1);
          v107 = v93 - 1;
          v15 = v95;
          v23 = v89;
          v16 = v91;
          v60 = v87;
          if (!v87)
            return;
          v103 = 0;
        }
LABEL_94:
        free(v60);
        return;
      }
      v91 = v16;
      if (v12)
      {
        v87 = 0;
        v89 = v12;
        v55 = v12 + 8 * v47 * ((int)v20 % v85);
        v23 = v55 + 8 * ((int)v19 % (int)v101);
        v56 = v55 + 8 * (int)v101;
        v104 = v56;
        v105 = v23;
        v25 = 1;
        v12 = v23;
        goto LABEL_52;
      }
      v56 = 0;
      v23 = 0;
      v25 = 1;
LABEL_43:
      v49 = 0;
      v87 = 0;
      v89 = v23;
      v12 = 0;
      v47 -= v7;
      goto LABEL_52;
    }
    v22 = v21 >> 3;
    v23 = v12 + 8 * (v19 + v22 * v20);
    v104 = -1;
    v105 = v23;
    v101 = v22;
    if (v22 != v15)
    {
      v25 = 1;
LABEL_38:
      v50 = v11 != 0;
      if (v13)
      {
        v49 = 0;
        v12 = 0;
        v85 = 0;
        v47 = v101;
        goto LABEL_40;
      }
      v91 = v16;
      v85 = 0;
      v7 = (int)v25 * v5;
      v56 = -1;
      v47 = v101;
      goto LABEL_43;
    }
    if ((uint64_t)(v16 - v23) >= 1)
    {
      if (v5 >= (uint64_t)((v16 - v23) >> 3))
      {
        v16 += 8 * (v5 - 1);
        v106 = v16;
        v23 += 8 * (v5 - 1);
        v105 = v23;
        v25 = 0xFFFFFFFFLL;
        goto LABEL_37;
      }
      v24 = v15 * (v6 - 1);
      if (v16 <= v23 + 8 * v24 + 8 * (v5 - 1))
      {
        v16 += 8 * v24;
        v106 = v16;
        v15 = -(uint64_t)v15;
        v105 = v23 + 8 * v24;
        v25 = 1;
        v23 = v105;
        goto LABEL_37;
      }
    }
    v25 = 1;
LABEL_37:
    v101 = v15;
    goto LABEL_38;
  }
  if ((a3 & 0x80000000) != 0)
    return;
  if (a3 > 0x17)
    v4 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_RGBA16_t>;
  else
    v4 = VEC::MethodList<_RGBA16_t>::shapeMethods[a3];
  v100 = v4;
  v26 = *(_DWORD *)(a2 + 4);
  v27 = *(_DWORD *)(a2 + 8);
  v28 = v26;
  v107 = v27;
  v108 = v26;
  v29 = *(int *)(a2 + 28);
  v30 = *(_QWORD *)(a2 + 40);
  v31 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v105 = v33;
  v34 = *(int **)(a2 + 136);
  v35 = *(unsigned __int8 *)(a2 + 1) << 8;
  v36 = v29 >> 3;
  v98 = v31 != 0;
  v37 = v30 + 8 * (*(int *)(a2 + 12) + (v29 >> 3) * *(int *)(a2 + 16));
  v106 = v37;
  v38 = *(_DWORD *)(a2 + 104);
  v39 = *(_DWORD *)(a2 + 108);
  v40 = *(int *)(a2 + 56);
  v41 = *(int *)(a2 + 60);
  v42 = *(int *)(a2 + 76);
  if (v35 != 256)
  {
    v102 = *(unsigned int *)(a2 + 64);
    v51 = v42 >> 3;
    v52 = (v42 >> 3) * *(int *)(a2 + 68);
    v86 = *(_DWORD *)(a2 + 68);
    v104 = v33;
    v53 = v33 + 8 * v52;
    v54 = v32 != 0;
    if (v34)
    {
      v46 = 1;
      v44 = v33;
      goto LABEL_48;
    }
    v92 = v37;
    if (v33)
    {
      v88 = 0;
      v90 = v33;
      v57 = v33 + 8 * v51 * ((int)v41 % v86);
      v44 = v57 + 8 * ((int)v40 % (int)v102);
      v58 = v57 + 8 * (int)v102;
      v104 = v58;
      v105 = v44;
      v46 = 1;
      v33 = v44;
      goto LABEL_73;
    }
    v58 = 0;
    v44 = 0;
    v46 = 1;
LABEL_51:
    v53 = 0;
    v88 = 0;
    v90 = v44;
    v33 = 0;
    v51 -= v28;
    goto LABEL_73;
  }
  v43 = v42 >> 3;
  v44 = v33 + 8 * (v40 + v43 * v41);
  v104 = -1;
  v105 = v44;
  v102 = v43;
  if (v43 != v36)
  {
    v46 = 1;
    goto LABEL_46;
  }
  if ((uint64_t)(v37 - v44) >= 1)
  {
    if (v26 >= (uint64_t)((v37 - v44) >> 3))
    {
      v37 += 8 * (v26 - 1);
      v106 = v37;
      v44 += 8 * (v26 - 1);
      v105 = v44;
      v46 = 0xFFFFFFFFLL;
      goto LABEL_45;
    }
    v45 = v36 * (v27 - 1);
    if (v37 <= v44 + 8 * v45 + 8 * (v26 - 1))
    {
      v37 += 8 * v45;
      v106 = v37;
      v36 = -(uint64_t)v36;
      v105 = v44 + 8 * v45;
      v46 = 1;
      v44 = v105;
      goto LABEL_45;
    }
  }
  v46 = 1;
LABEL_45:
  v102 = v36;
LABEL_46:
  v54 = v32 != 0;
  if (!v34)
  {
    v92 = v37;
    v86 = 0;
    v28 = (int)v46 * v26;
    v58 = -1;
    v51 = v102;
    goto LABEL_51;
  }
  v53 = 0;
  v33 = 0;
  v86 = 0;
  v51 = v102;
LABEL_48:
  shape_enum_clip_alloc(a1, a2, v34, v46, v36, 1, v38, v39, v26, v27);
  v60 = v61;
  if (v61)
  {
    while (shape_enum_clip_next((uint64_t)v60, (int *)&v103 + 1, &v103, &v108, &v107))
    {
      v90 = v44;
      v92 = v37;
      v88 = v60;
      if (v53)
      {
        v82 = v37 + 8 * v36 * (int)v103 + 8 * SHIDWORD(v103);
        v26 = v108;
        v83 = v44 + 8 * v51 * (((int)v103 + *(_DWORD *)(a2 + 60)) % v86);
        v44 = v83 + 8 * ((HIDWORD(v103) + *(_DWORD *)(a2 + 56)) % (int)v102);
        v58 = v83 + 8 * (int)v102;
        v104 = v58;
        LODWORD(v28) = v108;
        v33 = v44;
      }
      else
      {
        v26 = v108;
        LODWORD(v28) = v108 * v46;
        v82 = v37 + 8 * v36 * (int)v103 + 8 * HIDWORD(v103) * (int)v46;
        v44 += 8 * (int)v103 * (int)v102 + 8 * HIDWORD(v103) * (int)v46;
        v51 = (int)v102 - v108 * (int)v46;
        v58 = v104;
      }
      v106 = v82;
      v105 = v44;
      v28 = (int)v28;
      v27 = v107;
LABEL_73:
      v96 = v36;
      v73 = v36 - v28;
      v74 = v26 & ~(v26 >> 31);
      if ((unint64_t)(v58 - v44) >> 3 >= v74)
        v75 = v74;
      else
        v75 = (unint64_t)(v58 - v44) >> 3;
      v76 = v74 - v75;
      if (v27 >= 1)
        v77 = 1;
      else
        v77 = v27;
      v94 = v77;
      v78 = v27 + 1;
      do
      {
        v100((int)&v105, (int)&v106, (int)&v104, v102, v46, v54, v98, v76, v75);
        v106 += 8 * v73;
        if (v53)
        {
          v79 = v33 + 8 * v51;
          if (v79 >= v53)
            v80 = -(uint64_t)(v51 * v86);
          else
            v80 = 0;
          v81 = v79 + 8 * v80;
          v104 += 8 * v80 + 8 * v51;
          v33 = v81;
        }
        else
        {
          v81 = v105 + 8 * v51;
        }
        v105 = v81;
        --v78;
      }
      while (v78 > 1);
      v107 = v94 - 1;
      v36 = v96;
      v44 = v90;
      v37 = v92;
      v60 = v88;
      if (!v88)
        return;
      v103 = 0;
    }
    goto LABEL_94;
  }
}

uint16x4_t rgba64_DplusDAM(uint16x4_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint16x4_t result;

  result = vqadd_u16((uint16x4_t)a2, (uint16x4_t)(((unint64_t)((WORD2(a3) * a5 + 0x8000 + ((WORD2(a3) * a5 + 0x8000) >> 16)) >> 16) << 32) | ((unint64_t)((a5 * a4 + 0x8000 + ((a5 * a4 + 0x8000) >> 16)) >> 16) << 48) | (WORD1(a3) * a5 + 0x8000 + ((WORD1(a3) * a5 + 0x8000) >> 16)) & 0xFFFF0000 | (unint64_t)(((unsigned __int16)a3 * a5 + 0x8000 + (((unsigned __int16)a3 * a5 + 0x8000) >> 16)) >> 16)));
  *a1 = result;
  return result;
}

_DWORD *rgba64_DpluslDA(_DWORD *result, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  v5 = WORD1(a3) + (unint64_t)WORD1(a2);
  v6 = WORD2(a3) + (unint64_t)WORD2(a2);
  v7 = HIWORD(a2) + a4;
  if (v4 >= 0xFFFF)
    LODWORD(v4) = 0xFFFF;
  if (v5 >= 0xFFFF)
    LODWORD(v5) = 0xFFFF;
  if (v6 >= 0xFFFF)
    LODWORD(v6) = 0xFFFF;
  if (v7 >= 0xFFFF)
    LODWORD(v7) = 0xFFFF;
  *result = v4 | ((_DWORD)v5 << 16);
  result[1] = v6 | ((_DWORD)v7 << 16);
  return result;
}

void rgba64_mark_constmask(uint64_t a1, int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  uint32x2_t v28;
  uint32x2_t v29;
  uint32x2_t v30;
  uint32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x2_t v38;
  int8x16_t v39;
  int8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  uint32x2_t v55;
  uint32x2_t v56;
  uint32x2_t v57;
  int32x2_t v58;
  int8x8_t v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int32x2_t v150;
  int v151;
  int v152;
  int32x2_t v153;
  int32x2_t v154;
  int32x2_t v155;
  uint32x2_t v156;
  uint32x2_t v157;
  int32x2_t v158;
  int32x2_t v159;
  int32x2_t v160;
  int32x2_t v161;
  int32x2_t v162;
  uint32x2_t v163;
  uint32x2_t v164;
  int32x2_t v165;
  int8x8_t v166;
  int32x2_t v167;
  int v168;
  int v169;
  int32x2_t v170;
  int32x2_t v171;
  int32x2_t v172;
  uint32x2_t v173;
  uint32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  uint32x2_t v180;
  uint32x2_t v181;
  int32x2_t v182;
  int8x8_t v183;
  int8x16_t v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int64x2_t v199;
  int64x2_t v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  uint16x4_t *v205;
  uint16x4_t *v206;
  uint16x4_t *v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint16x4_t *v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;

  v5 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 48);
  v222 = *(int *)(a1 + 28);
  v225 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = **(_QWORD **)(a1 + 88);
  pthread_mutex_lock(&rgba64_cacheColorLock);
  v9 = (_QWORD *)rgba64_cacheColor;
  if (!rgba64_cacheColor || *(_QWORD *)(rgba64_cacheColor + 16) != v8)
  {
    v11 = 0;
    while (1)
    {
      if (!v9)
        goto LABEL_9;
      v12 = (char *)v9;
      v13 = v11;
      if (v9[2] == v8)
        break;
      v9 = (_QWORD *)*v9;
      v11 = v12;
      if (!*(_QWORD *)v12)
      {
        if (rgba64_cacheColorCount > 6)
        {
          *(_QWORD *)v13 = 0;
        }
        else
        {
LABEL_9:
          v14 = (char *)rgba64_cacheColorBase;
          if (rgba64_cacheColorBase)
          {
            v15 = rgba64_cacheColorCount;
          }
          else
          {
            v14 = (char *)malloc_type_calloc(1uLL, 0x38A8uLL, 0x10200402493A768uLL);
            v15 = 0;
            rgba64_cacheColorBase = (uint64_t)v14;
          }
          v12 = &v14[24 * v15];
          *((_QWORD *)v12 + 1) = &v14[2048 * (unint64_t)v15 + 168];
          rgba64_cacheColorCount = v15 + 1;
        }
        v16 = 0;
        *(_QWORD *)v12 = rgba64_cacheColor;
        rgba64_cacheColor = (uint64_t)v12;
        *((_QWORD *)v12 + 2) = v8;
        v18 = *((_QWORD *)v12 + 1);
        v10 = v12 + 8;
        v17 = v18;
        v19 = vdup_n_s32((unsigned __int16)v8);
        v20 = vdup_n_s32(WORD1(v8));
        v21 = vdup_n_s32(WORD2(v8));
        v22 = vdup_n_s32(HIWORD(v8));
        v23 = vdup_n_s32(v8);
        v24 = (int32x2_t)0x100000000;
        v25 = vdup_n_s32(HIDWORD(v8));
        v26 = vdup_n_s32(0x101u);
        do
        {
          v27 = (int32x2_t)veor_s8((int8x8_t)vmul_s32(v24, v26), (int8x8_t)0xFFFF0000FFFFLL);
          v28 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v19);
          v29 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v20);
          v30 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v21);
          v31 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v27, v22);
          v32 = (int32x2_t)vshr_n_u32(vsra_n_u32(v28, v28, 0x10uLL), 0x10uLL);
          v33 = (int32x2_t)vshr_n_u32(vsra_n_u32(v29, v29, 0x10uLL), 0x10uLL);
          v34 = (int32x2_t)vshr_n_u32(vsra_n_u32(v30, v30, 0x10uLL), 0x10uLL);
          v35 = vsub_s32(v22, (int32x2_t)vshr_n_u32(vsra_n_u32(v31, v31, 0x10uLL), 0x10uLL));
          v36.i64[0] = v35.u32[0];
          v36.i64[1] = v35.u32[1];
          v37 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v36, 0x30uLL), (int8x16_t)vshll_n_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v25, v34), (int8x8_t)0xFFFF0000FFFFLL), 0x20uLL));
          v38 = vshl_n_s32(vsub_s32(v20, v33), 0x10uLL);
          v36.i64[0] = v38.u32[0];
          v36.i64[1] = v38.u32[1];
          v39 = v36;
          v40 = vand_s8((int8x8_t)vsub_s32(v23, v32), (int8x8_t)0xFFFF0000FFFFLL);
          v36.i64[0] = v40.u32[0];
          v36.i64[1] = v40.u32[1];
          *(int8x16_t *)(v17 + v16) = vorrq_s8(v37, vorrq_s8(v39, v36));
          v24 = vadd_s32(v24, (int32x2_t)0x200000002);
          v16 += 16;
        }
        while (v16 != 2048);
        pthread_mutex_unlock(&rgba64_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v11)
    {
      *(_QWORD *)v11 = *v9;
      *v9 = rgba64_cacheColor;
      rgba64_cacheColor = (uint64_t)v9;
    }
  }
  pthread_mutex_unlock(&rgba64_cacheColorLock);
  v10 = v9 + 1;
LABEL_20:
  if (!v7)
    return;
  v41 = *v10;
  v42 = *(_QWORD *)(*v10 + 2040);
  v43 = v225 + 8 * (*(int *)(a1 + 12) + (v222 >> 3) * *(int *)(a1 + 16));
  v44 = *(int *)(a1 + 124);
  v45 = v7 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v44;
  v46 = v44 - v5;
  v47 = (v222 >> 3) - v5;
  switch(a2)
  {
    case 0:
      do
      {
        v48 = v5;
        do
        {
          v49 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            if (v49 == 255)
            {
              *(_QWORD *)v43 = 0;
            }
            else
            {
              v50 = *(int32x2_t *)v43;
              v51.i32[0] = vshl_u32(*(uint32x2_t *)v43, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v52.i32[0] = v51.i32[0];
              v52.i32[1] = (unsigned __int16)WORD2(*(_QWORD *)v43);
              v53 = vdup_n_s32((v49 ^ 0xFF | ((v49 ^ 0xFF) << 8)) ^ 0xFFFFu);
              v54.i32[0] = (unsigned __int16)*(_QWORD *)v43;
              v54.i32[1] = HIWORD(*(_QWORD *)v43);
              v55 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v52, v53);
              v56 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v54, v53);
              v51.i32[1] = HIDWORD(*(_QWORD *)v43);
              v57 = (uint32x2_t)vsub_s32(v51, (int32x2_t)vshr_n_u32(vsra_n_u32(v55, v55, 0x10uLL), 0x10uLL));
              v50.i32[1] = v54.i32[1];
              v58 = vsub_s32(v50, (int32x2_t)vshr_n_u32(vsra_n_u32(v56, v56, 0x10uLL), 0x10uLL));
              v59 = (int8x8_t)vshl_n_s32(v58, 0x10uLL);
              v58.i16[1] = 0;
              v58.i32[1] = v59.i32[1];
              v59.i32[0] = vshl_u32(v57, (uint32x2_t)0xFFFF00000010).u32[0];
              v59.i32[1] = v57.u16[2];
              *(int8x8_t *)v43 = vorr_s8(v59, (int8x8_t)v58);
            }
          }
          ++v45;
          v43 += 8;
          --v48;
        }
        while (v48);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 1:
      v126 = 0xFFFFFFFFLL;
      v127 = v45 & 3;
      if ((v45 & 3) != 0)
      {
        v5 += v127;
        v126 = (-1 << (8 * v127));
        v128 = v45 & 3;
        v45 &= 0xFFFFFFFFFFFFFFFCLL;
        v43 -= 8 * v128;
      }
      if ((((_BYTE)v5 + (_BYTE)v45) & 3) != 0)
      {
        v129 = 4 - (((_BYTE)v5 + (_BYTE)v45) & 3);
        v127 += v129;
        v130 = 0xFFFFFFFF >> (8 * v129);
        if (v5 >= 4)
          v131 = v130;
        else
          v131 = 0;
        if (v5 >= 4)
          v130 = -1;
        v126 = v130 & v126;
      }
      else
      {
        v131 = 0;
      }
      v226 = v46 - v127;
      v223 = v5 >> 2;
      v220 = v47 - v127;
      do
      {
        v201 = v126;
        v202 = *(_DWORD *)v45 & v126;
        v203 = v223;
        v204 = v131;
        if (!v202)
          goto LABEL_337;
LABEL_319:
        if (v202 == -1)
        {
          *(_QWORD *)v43 = v42;
          *(_QWORD *)(v43 + 8) = v42;
          *(_QWORD *)(v43 + 16) = v42;
          *(_QWORD *)(v43 + 24) = v42;
          goto LABEL_337;
        }
        while (1)
        {
          if ((_BYTE)v202)
          {
            if (v202 == 255)
              *(_QWORD *)v43 = v42;
            else
              rgba64_DplusDM((uint16x4_t *)v43, *(_QWORD *)(v41 + 8 * v202), *(_QWORD *)v43, (v202 | (v202 << 8)) ^ 0xFFFF);
          }
          if (BYTE1(v202))
          {
            v205 = (uint16x4_t *)(v43 + 8);
            if (BYTE1(v202) == 255)
              *v205 = (uint16x4_t)v42;
            else
              rgba64_DplusDM(v205, *(_QWORD *)(v41 + 8 * BYTE1(v202)), (unint64_t)*v205, (BYTE1(v202) | (BYTE1(v202) << 8)) ^ 0xFFFF);
          }
          if (BYTE2(v202))
          {
            v206 = (uint16x4_t *)(v43 + 16);
            if (BYTE2(v202) == 255)
              *v206 = (uint16x4_t)v42;
            else
              rgba64_DplusDM(v206, *(_QWORD *)(v41 + 8 * BYTE2(v202)), (unint64_t)*v206, (BYTE2(v202) | (BYTE2(v202) << 8)) ^ 0xFFFF);
          }
          v207 = (uint16x4_t *)(v43 + 24);
          v208 = HIBYTE(v202);
          if (HIBYTE(v202) == 255)
          {
            *v207 = (uint16x4_t)v42;
          }
          else if (v208)
          {
            rgba64_DplusDM(v207, *(_QWORD *)(v41 + 8 * v208), (unint64_t)*v207, (__PAIR64__(v208, v202) >> 24) ^ 0xFFFF);
          }
LABEL_337:
          while (1)
          {
            v209 = v203;
            v43 += 32;
            --v203;
            v45 += 4;
            if (v209 < 2)
              break;
            v202 = *(_DWORD *)v45;
            if (*(_DWORD *)v45)
              goto LABEL_319;
          }
          if (!v204)
            break;
          v204 = 0;
          v202 = *(_DWORD *)v45 & v131;
        }
        v45 += v226;
        v43 += 8 * v220;
        --v4;
        v126 = v201;
      }
      while (v4);
      return;
    case 2:
      v132 = -1;
      v133 = v45 & 3;
      if ((v45 & 3) != 0)
      {
        v5 += v133;
        v132 = -1 << (8 * v133);
        v134 = v45 & 3;
        v45 &= 0xFFFFFFFFFFFFFFFCLL;
        v43 -= 8 * v134;
      }
      v135 = v47;
      if ((((_BYTE)v5 + (_BYTE)v45) & 3) != 0)
      {
        v136 = 4 - (((_BYTE)v5 + (_BYTE)v45) & 3);
        v133 += v136;
        v137 = 0xFFFFFFFF >> (8 * v136);
        if (v5 >= 4)
          v138 = v137;
        else
          v138 = 0;
        if (v5 >= 4)
          v137 = -1;
        v132 &= v137;
      }
      else
      {
        v138 = 0;
      }
      v224 = v46 - v133;
      v221 = v5 >> 2;
      v210 = (unsigned __int16)~HIWORD(v42);
      v219 = v135 - v133;
      v227 = v132;
      while (1)
      {
        v211 = *(_DWORD *)v45 & v132;
        v212 = v221;
        v213 = v138;
        if (!v211)
          goto LABEL_358;
LABEL_347:
        if (v211 == -1)
          break;
        while (1)
        {
          if ((_BYTE)v211)
            rgba64_DplusDM((uint16x4_t *)v43, *(_QWORD *)(v41 + 8 * v211), *(_QWORD *)v43, HIWORD(*(_QWORD *)(v41 + 8 * v211)) ^ 0xFFFF);
          if ((v211 & 0xFF00) != 0)
            rgba64_DplusDM((uint16x4_t *)(v43 + 8), *(_QWORD *)(v41 + 8 * BYTE1(v211)), *(_QWORD *)(v43 + 8), HIWORD(*(_QWORD *)(v41 + 8 * BYTE1(v211))) ^ 0xFFFF);
          if ((v211 & 0xFF0000) != 0)
            rgba64_DplusDM((uint16x4_t *)(v43 + 16), *(_QWORD *)(v41 + 8 * BYTE2(v211)), *(_QWORD *)(v43 + 16), HIWORD(*(_QWORD *)(v41 + 8 * BYTE2(v211))) ^ 0xFFFF);
          if (HIBYTE(v211))
          {
            v216 = *(_QWORD *)(v41 + 8 * HIBYTE(v211));
            v214 = (uint16x4_t *)(v43 + 24);
            v215 = *(_QWORD *)(v43 + 24);
            v217 = HIWORD(v216) ^ 0xFFFF;
            goto LABEL_357;
          }
LABEL_358:
          while (1)
          {
            v218 = v212;
            v43 += 32;
            --v212;
            v45 += 4;
            if (v218 < 2)
              break;
            v211 = *(_DWORD *)v45;
            if (*(_DWORD *)v45)
              goto LABEL_347;
          }
          if (!v213)
            break;
          v213 = 0;
          v211 = *(_DWORD *)v45 & v138;
        }
        v45 += v224;
        v43 += 8 * v219;
        --v4;
        v132 = v227;
        if (!v4)
          return;
      }
      rgba64_DplusDM((uint16x4_t *)v43, v42, *(_QWORD *)v43, v210);
      rgba64_DplusDM((uint16x4_t *)(v43 + 8), v42, *(_QWORD *)(v43 + 8), v210);
      rgba64_DplusDM((uint16x4_t *)(v43 + 16), v42, *(_QWORD *)(v43 + 16), v210);
      v214 = (uint16x4_t *)(v43 + 24);
      v215 = *(_QWORD *)(v43 + 24);
      v216 = v42;
      v217 = (unsigned __int16)~HIWORD(v42);
LABEL_357:
      rgba64_DplusDM(v214, v216, v215, v217);
      goto LABEL_358;
    case 3:
      do
      {
        v139 = v5;
        do
        {
          v140 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            if (v140 == 255)
            {
              *(_QWORD *)v43 = *(_QWORD *)(v41 + ((*(_QWORD *)v43 >> 53) & 0x7F8));
            }
            else
            {
              v141 = v140 | (v140 << 8);
              v142 = HIWORD(*(_QWORD *)v43) * v141 + 0x8000;
              rgba64_DplusDM((uint16x4_t *)v43, *(_QWORD *)(v41 + 8 * ((v142 + HIWORD(v142)) >> 24)), *(_QWORD *)v43, v141 ^ 0xFFFF);
            }
          }
          ++v45;
          v43 += 8;
          --v139;
        }
        while (v139);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 4:
      do
      {
        v143 = v5;
        do
        {
          v144 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            if (v144 == 255)
            {
              *(_QWORD *)v43 = *(_QWORD *)(v41 + ((~*(_QWORD *)v43 >> 53) & 0x7F8));
            }
            else
            {
              v145 = v144 | (v144 << 8);
              v146 = (HIWORD(*(_QWORD *)v43) ^ 0xFFFF) * v145 + 0x8000;
              rgba64_DplusDM((uint16x4_t *)v43, *(_QWORD *)(v41 + 8 * ((v146 + HIWORD(v146)) >> 24)), *(_QWORD *)v43, v145 ^ 0xFFFF);
            }
          }
          ++v45;
          v43 += 8;
          --v143;
        }
        while (v143);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 5:
      do
      {
        v60 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v61 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            rgba64_DMplusDM((_DWORD *)v43, v61, HIWORD(*(_QWORD *)v43), *(_QWORD *)v43, HIWORD(v61) ^ 0xFFFF);
          }
          ++v45;
          v43 += 8;
          --v60;
        }
        while (v60);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 6:
      do
      {
        v147 = v5;
        do
        {
          v148 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            v149 = HIWORD(*(_QWORD *)v43);
            if ((_WORD)v149 != 0xFFFF)
            {
              if ((unsigned __int16)~(_WORD)v149 == 0xFFFF)
                *(_QWORD *)v43 = *(_QWORD *)(v41 + 8 * v148);
              else
                rgba64_DplusDM((uint16x4_t *)v43, *(_QWORD *)v43, *(_QWORD *)(v41 + 8 * v148), (unsigned __int16)~(_WORD)v149);
            }
          }
          ++v45;
          v43 += 8;
          --v147;
        }
        while (v147);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 7:
      v150 = vdup_n_s32(HIWORD(v42) ^ 0xFFFF);
      do
      {
        v151 = v5;
        do
        {
          v152 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            v153 = *(int32x2_t *)v43;
            v154.i32[0] = vshr_n_u32(*(uint32x2_t *)v43, 0x10uLL).u32[0];
            v154.i32[1] = (unsigned __int16)WORD2(*(_QWORD *)v43);
            if (v152 == 255)
            {
              v155.i32[0] = (unsigned __int16)*(_QWORD *)v43;
              v155.i32[1] = HIWORD(*(_QWORD *)v43);
              v156 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v154, v150);
              v157 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v155, v150);
              v158 = (int32x2_t)vshr_n_u32(vsra_n_u32(v156, v156, 0x10uLL), 0x10uLL);
              v159 = (int32x2_t)vshr_n_u32(vsra_n_u32(v157, v157, 0x10uLL), 0x10uLL);
              v154.i32[1] = HIDWORD(*(_QWORD *)v43);
              v160 = vsub_s32(v154, v158);
            }
            else
            {
              v161 = vdup_n_s32((unsigned __int16)((v152 | ((_WORD)v152 << 8))
                                                 - (((v152 | (v152 << 8)) * HIWORD(v42)
                                                   + 0x8000
                                                   + (((v152 | (v152 << 8)) * HIWORD(v42) + 0x8000) >> 16)) >> 16)));
              v162.i32[0] = (unsigned __int16)*(_QWORD *)v43;
              v162.i32[1] = HIWORD(*(_QWORD *)v43);
              v163 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v154, v161);
              v164 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v162, v161);
              v159 = (int32x2_t)vshr_n_u32(vsra_n_u32(v164, v164, 0x10uLL), 0x10uLL);
              v154.i32[1] = HIDWORD(*(_QWORD *)v43);
              v160 = vsub_s32(v154, (int32x2_t)vshr_n_u32(vsra_n_u32(v163, v163, 0x10uLL), 0x10uLL));
            }
            v153.i32[1] = HIWORD(*(_QWORD *)v43);
            v165 = vsub_s32(v153, v159);
            v166.i32[0] = v165.u16[0];
            v166.i32[1] = vshl_n_s32(v165, 0x10uLL).i32[1];
            v165.i32[0] = vshl_n_s32(v160, 0x10uLL).u32[0];
            v165.i32[1] = v160.u16[2];
            *(int8x8_t *)v43 = vorr_s8((int8x8_t)v165, v166);
          }
          ++v45;
          v43 += 8;
          --v151;
        }
        while (v151);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 8:
      v167 = vdup_n_s32(HIWORD(v42));
      do
      {
        v168 = v5;
        do
        {
          v169 = *(unsigned __int8 *)v45;
          if (*(_BYTE *)v45)
          {
            v170 = *(int32x2_t *)v43;
            v171.i32[0] = vshr_n_u32(*(uint32x2_t *)v43, 0x10uLL).u32[0];
            v171.i32[1] = (unsigned __int16)WORD2(*(_QWORD *)v43);
            if (v169 == 255)
            {
              v172.i32[0] = (unsigned __int16)*(_QWORD *)v43;
              v172.i32[1] = HIWORD(*(_QWORD *)v43);
              v173 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v171, v167);
              v174 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v172, v167);
              v175 = (int32x2_t)vshr_n_u32(vsra_n_u32(v173, v173, 0x10uLL), 0x10uLL);
              v176 = (int32x2_t)vshr_n_u32(vsra_n_u32(v174, v174, 0x10uLL), 0x10uLL);
              v171.i32[1] = HIDWORD(*(_QWORD *)v43);
              v177 = vsub_s32(v171, v175);
            }
            else
            {
              v178 = vdup_n_s32((257 * HIWORD(v42) * v169
                               + 0x8000
                               + ((257 * HIWORD(v42) * v169 + 0x8000) >> 16)) >> 16);
              v179.i32[0] = (unsigned __int16)*(_QWORD *)v43;
              v179.i32[1] = HIWORD(*(_QWORD *)v43);
              v180 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v171, v178);
              v181 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v179, v178);
              v176 = (int32x2_t)vshr_n_u32(vsra_n_u32(v181, v181, 0x10uLL), 0x10uLL);
              v171.i32[1] = HIDWORD(*(_QWORD *)v43);
              v177 = vsub_s32(v171, (int32x2_t)vshr_n_u32(vsra_n_u32(v180, v180, 0x10uLL), 0x10uLL));
            }
            v170.i32[1] = HIWORD(*(_QWORD *)v43);
            v182 = vsub_s32(v170, v176);
            v183.i32[0] = v182.u16[0];
            v183.i32[1] = vshl_n_s32(v182, 0x10uLL).i32[1];
            v182.i32[0] = vshl_n_s32(v177, 0x10uLL).u32[0];
            v182.i32[1] = v177.u16[2];
            *(int8x8_t *)v43 = vorr_s8((int8x8_t)v182, v183);
          }
          ++v45;
          v43 += 8;
          --v168;
        }
        while (v168);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 9:
      do
      {
        v62 = v5;
        do
        {
          if (*(_BYTE *)v45)
            rgba64_DMplusDM((_DWORD *)v43, *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45), HIWORD(*(_QWORD *)v43) ^ 0xFFFF, *(_QWORD *)v43, (unsigned __int16)(HIWORD(*(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45))+ ~(*(unsigned __int8 *)v45 | (*(unsigned __int8 *)v45 << 8))));
          ++v45;
          v43 += 8;
          --v62;
        }
        while (v62);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 10:
      do
      {
        v63 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v64 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            rgba64_DMplusDM((_DWORD *)v43, v64, HIWORD(*(_QWORD *)v43) ^ 0xFFFF, *(_QWORD *)v43, HIWORD(v64) ^ 0xFFFF);
          }
          ++v45;
          v43 += 8;
          --v63;
        }
        while (v63);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 11:
      v184.i64[0] = 0xFFFFLL;
      v184.i64[1] = 0xFFFFLL;
      do
      {
        v185 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v186 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            v187 = HIWORD(*(_QWORD *)v43);
            v188 = HIWORD(v186);
            v189 = *(_QWORD *)v43 >> 16;
            if (!v6)
              v187 = 0xFFFFLL;
            v190 = v187 >= (unsigned __int16)v189;
            v191 = v187 - (unsigned __int16)v189;
            if (!v190)
              v191 = 0;
            v192 = v188 - WORD1(v186);
            if (v188 < WORD1(v186))
              v192 = 0;
            v193 = v192 + v191;
            v194 = v187 + HIWORD(v186);
            if (v193 >= 0xFFFF)
              v193 = 0xFFFFLL;
            if (v194 >= 0xFFFF)
              v194 = 0xFFFFLL;
            v190 = v194 >= v193;
            v195 = v194 - v193;
            if (!v190)
              v195 = 0;
            v196.i64[0] = *(_QWORD *)v43;
            v196.i64[1] = HIDWORD(*(_QWORD *)v43);
            v197.i64[0] = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            v197.i64[1] = HIDWORD(v186);
            v198 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v188), (uint64x2_t)vandq_s8(v197, v184)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v187), (uint64x2_t)vandq_s8(v196, v184)));
            v199 = vdupq_n_s64(v194);
            v200 = (int64x2_t)vqsubq_u64((uint64x2_t)v199, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v184, (uint64x2_t)v198), v198, v184));
            v199.i64[0] = v195;
            *(int8x8_t *)v43 = vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v199), 0x10uLL), (int8x8_t)vmovn_s64(v200));
          }
          ++v45;
          v43 += 8;
          --v185;
        }
        while (v185);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 12:
      do
      {
        v65 = v5;
        do
        {
          if (*(_BYTE *)v45)
            rgba64_DpluslD((_DWORD *)v43, *(_QWORD *)v43, *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45));
          ++v45;
          v43 += 8;
          --v65;
        }
        while (v65);
        v45 += v46;
        v43 += 8 * v47;
        --v4;
      }
      while (v4);
      return;
    case 13:
      while (1)
      {
        v66 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v67 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v67))
            {
              v68 = *(_QWORD *)v43;
              if (v6)
              {
                v69 = HIWORD(v68);
                if (!HIWORD(v68))
                  goto LABEL_62;
              }
              else
              {
                LODWORD(v69) = 0xFFFF;
              }
              v67 = PDAmultiplyPDA_13494(v68, v69, v67, HIWORD(v67));
LABEL_62:
              *(_QWORD *)v43 = v67;
            }
          }
          ++v45;
          v43 += 8;
          --v66;
        }
        while (v66);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 14:
      while (1)
      {
        v70 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v71 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v71))
            {
              v72 = *(_QWORD *)v43;
              if (v6)
              {
                v73 = HIWORD(v72);
                if (!HIWORD(v72))
                  goto LABEL_74;
              }
              else
              {
                LODWORD(v73) = 0xFFFF;
              }
              v71 = PDAscreenPDA_13495(v72, v73, v71, HIWORD(v71));
LABEL_74:
              *(_QWORD *)v43 = v71;
            }
          }
          ++v45;
          v43 += 8;
          --v70;
        }
        while (v70);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 15:
      while (1)
      {
        v74 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v75 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v75))
            {
              v76 = *(_QWORD *)v43;
              if (v6)
              {
                v77 = HIWORD(v76);
                if (!HIWORD(v76))
                  goto LABEL_86;
              }
              else
              {
                LODWORD(v77) = 0xFFFF;
              }
              v75 = PDAoverlayPDA_13496(v76, v77, v75, HIWORD(v75));
LABEL_86:
              *(_QWORD *)v43 = v75;
            }
          }
          ++v45;
          v43 += 8;
          --v74;
        }
        while (v74);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 16:
      while (1)
      {
        v78 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v79 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v79))
            {
              v80 = *(_QWORD *)v43;
              if (v6)
              {
                v81 = HIWORD(v80);
                if (!HIWORD(v80))
                  goto LABEL_98;
              }
              else
              {
                LODWORD(v81) = 0xFFFF;
              }
              v79 = PDAdarkenPDA_13498(v80, v81, v79, HIWORD(v79));
LABEL_98:
              *(_QWORD *)v43 = v79;
            }
          }
          ++v45;
          v43 += 8;
          --v78;
        }
        while (v78);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 17:
      while (1)
      {
        v82 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v83 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v83))
            {
              v84 = *(_QWORD *)v43;
              if (v6)
              {
                v85 = HIWORD(v84);
                if (!HIWORD(v84))
                  goto LABEL_110;
              }
              else
              {
                LODWORD(v85) = 0xFFFF;
              }
              v83 = PDAlightenPDA_13497(v84, v85, v83, HIWORD(v83));
LABEL_110:
              *(_QWORD *)v43 = v83;
            }
          }
          ++v45;
          v43 += 8;
          --v82;
        }
        while (v82);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 18:
      while (1)
      {
        v86 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v87 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v87))
            {
              v88 = *(_QWORD *)v43;
              if (v6)
              {
                v89 = HIWORD(v88);
                if (!HIWORD(v88))
                  goto LABEL_122;
              }
              else
              {
                LODWORD(v89) = 0xFFFF;
              }
              v87 = PDAcolordodgePDA_13499(v88, v89, v87, HIWORD(v87));
LABEL_122:
              *(_QWORD *)v43 = v87;
            }
          }
          ++v45;
          v43 += 8;
          --v86;
        }
        while (v86);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 19:
      while (1)
      {
        v90 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v91 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v91))
            {
              v92 = *(_QWORD *)v43;
              if (v6)
              {
                v93 = HIWORD(v92);
                if (!HIWORD(v92))
                  goto LABEL_134;
              }
              else
              {
                LODWORD(v93) = 0xFFFF;
              }
              v91 = PDAcolorburnPDA_13500(v92, v93, v91, HIWORD(v91));
LABEL_134:
              *(_QWORD *)v43 = v91;
            }
          }
          ++v45;
          v43 += 8;
          --v90;
        }
        while (v90);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 20:
      while (1)
      {
        v94 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v95 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v95))
            {
              v96 = *(_QWORD *)v43;
              if (v6)
              {
                v97 = HIWORD(v96);
                if (!HIWORD(v96))
                  goto LABEL_146;
              }
              else
              {
                LODWORD(v97) = 0xFFFF;
              }
              v95 = PDAsoftlightPDA_13502(v96, v97, v95, HIWORD(v95));
LABEL_146:
              *(_QWORD *)v43 = v95;
            }
          }
          ++v45;
          v43 += 8;
          --v94;
        }
        while (v94);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 21:
      while (1)
      {
        v98 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v99 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v99))
            {
              v100 = *(_QWORD *)v43;
              if (v6)
              {
                v101 = HIWORD(v100);
                if (!HIWORD(v100))
                  goto LABEL_158;
              }
              else
              {
                LODWORD(v101) = 0xFFFF;
              }
              v99 = PDAhardlightPDA_13501(v100, v101, v99, HIWORD(v99));
LABEL_158:
              *(_QWORD *)v43 = v99;
            }
          }
          ++v45;
          v43 += 8;
          --v98;
        }
        while (v98);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 22:
      while (1)
      {
        v102 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v103 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v103))
            {
              v104 = *(_QWORD *)v43;
              if (v6)
              {
                v105 = HIWORD(v104);
                if (!HIWORD(v104))
                  goto LABEL_170;
              }
              else
              {
                LODWORD(v105) = 0xFFFF;
              }
              v103 = PDAdifferencePDA_13503(v104, v105, v103, HIWORD(v103));
LABEL_170:
              *(_QWORD *)v43 = v103;
            }
          }
          ++v45;
          v43 += 8;
          --v102;
        }
        while (v102);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 23:
      while (1)
      {
        v106 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v107 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v107))
            {
              v108 = *(_QWORD *)v43;
              if (v6)
              {
                v109 = HIWORD(v108);
                if (!HIWORD(v108))
                  goto LABEL_182;
              }
              else
              {
                LODWORD(v109) = 0xFFFF;
              }
              v107 = PDAexclusionPDA_13504(v108, v109, v107, HIWORD(v107));
LABEL_182:
              *(_QWORD *)v43 = v107;
            }
          }
          ++v45;
          v43 += 8;
          --v106;
        }
        while (v106);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 24:
      while (1)
      {
        v110 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v111 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v111))
            {
              v112 = *(_QWORD *)v43;
              if (v6)
              {
                v113 = HIWORD(v112);
                if (!HIWORD(v112))
                  goto LABEL_194;
              }
              else
              {
                LODWORD(v113) = 0xFFFF;
              }
              v111 = PDAhuePDA_13505(v112, v113, v111, HIWORD(v111));
LABEL_194:
              *(_QWORD *)v43 = v111;
            }
          }
          ++v45;
          v43 += 8;
          --v110;
        }
        while (v110);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 25:
      while (1)
      {
        v114 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v115 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v115))
            {
              v116 = *(_QWORD *)v43;
              if (v6)
              {
                v117 = HIWORD(v116);
                if (!HIWORD(v116))
                  goto LABEL_206;
              }
              else
              {
                LODWORD(v117) = 0xFFFF;
              }
              v115 = PDAsaturationPDA_13506(v116, v117, v115, HIWORD(v115));
LABEL_206:
              *(_QWORD *)v43 = v115;
            }
          }
          ++v45;
          v43 += 8;
          --v114;
        }
        while (v114);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 26:
      while (1)
      {
        v118 = v5;
        do
        {
          if (*(_BYTE *)v45)
          {
            v119 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
            if (HIWORD(v119))
            {
              v120 = *(_QWORD *)v43;
              if (v6)
              {
                v121 = HIWORD(v120);
                if (!HIWORD(v120))
                  goto LABEL_218;
              }
              else
              {
                LODWORD(v121) = 0xFFFF;
              }
              v119 = PDAluminosityPDA_13507(v119, HIWORD(v119), v120, v121);
LABEL_218:
              *(_QWORD *)v43 = v119;
            }
          }
          ++v45;
          v43 += 8;
          --v118;
        }
        while (v118);
        v45 += v46;
        v43 += 8 * v47;
        if (!--v4)
          return;
      }
    case 27:
      goto LABEL_222;
    default:
      return;
  }
  do
  {
LABEL_222:
    v122 = v5;
    do
    {
      if (*(_BYTE *)v45)
      {
        v123 = *(_QWORD *)(v41 + 8 * *(unsigned __int8 *)v45);
        if (HIWORD(v123))
        {
          v124 = *(_QWORD *)v43;
          if (v6)
          {
            v125 = HIWORD(v124);
            if (!HIWORD(v124))
              goto LABEL_230;
          }
          else
          {
            LODWORD(v125) = 0xFFFF;
          }
          v123 = PDAluminosityPDA_13507(v124, v125, v123, HIWORD(v123));
LABEL_230:
          *(_QWORD *)v43 = v123;
        }
      }
      ++v45;
      v43 += 8;
      --v122;
    }
    while (v122);
    v45 += v46;
    v43 += 8 * v47;
    --v4;
  }
  while (v4);
}

uint64_t rgba16_template_image_mask_method(uint64_t result, int *a2, unsigned int a3)
{
  uint64_t *(*v3)(uint64_t *, uint16x4_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t *(*v4)(uint64_t *, int8x16_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v5;
  uint64_t v6;
  int v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *(*v67)(uint64_t *, uint16x4_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t *(*v68)(uint64_t *, int8x16_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  if ((result & 0x30) == 0x20)
  {
    if ((a3 & 0x80000000) != 0)
      return result;
    v3 = a3 > 0x17
       ? VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba16_t>
       : (uint64_t *(*)(uint64_t *, uint16x4_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t))VEC::MethodList<_rgba16_t>::maskMethods[a3];
    v67 = v3;
    v5 = *((_QWORD *)a2 + 11);
    v6 = *((_QWORD *)a2 + 17);
    v7 = *a2;
    v8 = a2[1];
    result = a2[3];
    v9 = a2[2];
    v10 = (unint64_t)a2[7] >> 3;
    v11 = *((_QWORD *)a2 + 5) + 8 * (result + v10 * a2[4]);
    v71 = v5;
    v72 = v11;
    if (!v6)
      return result;
    v12 = a2[31];
    v13 = v6 + a2[26] + a2[27] * (uint64_t)(int)v12;
    v69 = v13;
    v14 = a2[14];
    v15 = a2[15];
    v16 = v7 & 0xFF00;
    v17 = a2[19];
    if (v16 != 256)
    {
      v18 = a2[16];
      v39 = a2[17];
      v40 = v17 >> 3;
      v41 = v5 + 8 * (v17 >> 3) * v39;
      v70 = v5;
      v21 = 1;
      v19 = v5;
      v42 = v5;
      goto LABEL_33;
    }
    v18 = v17 >> 3;
    v19 = v5 + 8 * (v14 + (v17 >> 3) * v15);
    v70 = -1;
    v71 = v19;
    if (v18 != v10)
    {
      v21 = 1;
LABEL_32:
      LODWORD(v39) = 0;
      v42 = 0;
      v41 = 0;
      v40 = v18;
LABEL_33:
      if (v41)
      {
        v47 = v19 + 8 * v40 * ((int)v15 % (int)v39);
        v70 = v47 + 8 * (int)v18;
        v71 = v47 + 8 * ((int)v14 % (int)v18);
        v42 = v71;
      }
      else
      {
        v40 -= (int)v8 * (uint64_t)(int)v21;
      }
      v48 = v12 - (int)v8 * (uint64_t)(int)v21;
      v49 = v10 - (int)v8 * (uint64_t)(int)v21;
      v65 = -(uint64_t)(v40 * (int)v39);
      v50 = v9 + 1;
      do
      {
        v51 = v18;
        v52 = v21;
        result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v67)(&v71, &v72, &v70, &v69);
        v69 += v48;
        v72 += 8 * v49;
        if (v41)
        {
          v53 = v42 + 8 * v40;
          v54 = v65;
          if (v53 < v41)
            v54 = 0;
          v55 = v53 + 8 * v54;
          v70 += 8 * v54 + 8 * v40;
          v42 = v55;
        }
        else
        {
          v55 = v71 + 8 * v40;
        }
        v21 = v52;
        v18 = v51;
        v71 = v55;
        --v50;
      }
      while (v50 > 1);
      return result;
    }
    if ((uint64_t)(v11 - v19) >= 1)
    {
      if (v8 >= (uint64_t)((v11 - v19) >> 3))
      {
        v19 += 8 * (v8 - 1);
        v71 = v19;
        v72 = v11 + 8 * (v8 - 1);
        v69 = v13 + v8 - 1;
        v21 = 0xFFFFFFFFLL;
        goto LABEL_31;
      }
      v20 = v10 * (v9 - 1);
      if (v11 <= v19 + 8 * v20 + 8 * ((int)v8 - 1))
      {
        v71 = v19 + 8 * v20;
        v72 = v11 + 8 * v20;
        v10 = -(uint64_t)v10;
        v69 = v13 + v12 * (v9 - 1);
        v12 = -v12;
        v21 = 1;
        v19 = v71;
        goto LABEL_31;
      }
    }
    v21 = 1;
LABEL_31:
    v18 = v10;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
    return result;
  v4 = a3 > 0x17
     ? VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_RGBA16_t>
     : (uint64_t *(*)(uint64_t *, int8x16_t **, unint64_t *, char **, int, int, double, double, int8x8_t, double, double, double, uint32x4_t, uint64_t, uint64_t, uint64_t, unint64_t))VEC::MethodList<_RGBA16_t>::maskMethods[a3];
  v68 = v4;
  v22 = *((_QWORD *)a2 + 11);
  v23 = *((_QWORD *)a2 + 17);
  v24 = *a2;
  v25 = a2[1];
  result = a2[3];
  v26 = a2[2];
  v27 = (unint64_t)a2[7] >> 3;
  v28 = *((_QWORD *)a2 + 5) + 8 * (result + v27 * a2[4]);
  v71 = v22;
  v72 = v28;
  if (!v23)
    return result;
  v29 = a2[31];
  v30 = v23 + a2[26] + a2[27] * (uint64_t)(int)v29;
  v69 = v30;
  v31 = a2[14];
  v32 = a2[15];
  v33 = v24 & 0xFF00;
  v34 = a2[19];
  if (v33 != 256)
  {
    v35 = a2[16];
    v43 = a2[17];
    v44 = v34 >> 3;
    v45 = v22 + 8 * (v34 >> 3) * v43;
    v70 = v22;
    v38 = 1;
    v36 = v22;
    v46 = v22;
    goto LABEL_47;
  }
  v35 = v34 >> 3;
  v36 = v22 + 8 * (v31 + (v34 >> 3) * v32);
  v70 = -1;
  v71 = v36;
  if (v35 == v27)
  {
    if ((uint64_t)(v28 - v36) >= 1)
    {
      if (v25 >= (uint64_t)((v28 - v36) >> 3))
      {
        v36 += 8 * (v25 - 1);
        v71 = v36;
        v72 = v28 + 8 * (v25 - 1);
        v69 = v30 + v25 - 1;
        v38 = 0xFFFFFFFFLL;
        goto LABEL_45;
      }
      v37 = v27 * (v26 - 1);
      if (v28 <= v36 + 8 * v37 + 8 * ((int)v25 - 1))
      {
        v71 = v36 + 8 * v37;
        v72 = v28 + 8 * v37;
        v27 = -(uint64_t)v27;
        v69 = v30 + v29 * (v26 - 1);
        v29 = -v29;
        v38 = 1;
        v36 = v71;
        goto LABEL_45;
      }
    }
    v38 = 1;
LABEL_45:
    v35 = v27;
    goto LABEL_46;
  }
  v38 = 1;
LABEL_46:
  LODWORD(v43) = 0;
  v46 = 0;
  v45 = 0;
  v44 = v35;
LABEL_47:
  if (v45)
  {
    v56 = v36 + 8 * v44 * ((int)v32 % (int)v43);
    v70 = v56 + 8 * (int)v35;
    v71 = v56 + 8 * ((int)v31 % (int)v35);
    v46 = v71;
  }
  else
  {
    v44 -= (int)v25 * (uint64_t)(int)v38;
  }
  v57 = v29 - (int)v25 * (uint64_t)(int)v38;
  v58 = v27 - (int)v25 * (uint64_t)(int)v38;
  v66 = -(uint64_t)(v44 * (int)v43);
  v59 = v26 + 1;
  do
  {
    v60 = v35;
    v61 = v38;
    result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v68)(&v71, &v72, &v70, &v69);
    v69 += v57;
    v72 += 8 * v58;
    if (v45)
    {
      v62 = v46 + 8 * v44;
      v63 = v66;
      if (v62 < v45)
        v63 = 0;
      v64 = v62 + 8 * v63;
      v70 += 8 * v63 + 8 * v44;
      v46 = v64;
    }
    else
    {
      v64 = v71 + 8 * v44;
    }
    v38 = v61;
    v35 = v60;
    v71 = v64;
    --v59;
  }
  while (v59 > 1);
  return result;
}

void rgba64_mark_pixelmask(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint32x2_t *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint32x2_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  uint32x2_t v33;
  uint32x2_t v34;
  uint32x2_t v35;
  int32x2_t v36;
  int8x8_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint32x2_t *v47;
  uint32x2_t *v48;
  uint64_t v49;
  uint32x2_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint32x2_t *v56;
  uint32x2_t *v57;
  uint64_t v58;
  uint32x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint32x2_t *v76;
  uint32x2_t *v77;
  uint64_t v78;
  uint32x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  int32x2_t v87;
  int32x2_t v88;
  uint32x2_t v89;
  int32x2_t v90;
  int32x2_t v91;
  uint32x2_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint32x2_t *v97;
  uint32x2_t *v98;
  uint64_t v99;
  uint32x2_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  int32x2_t v108;
  int32x2_t v109;
  uint32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  uint32x2_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  uint32x2_t *v120;
  uint32x2_t *v121;
  uint64_t v122;
  uint32x2_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned __int16 v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint32x2_t *v138;
  uint32x2_t *v139;
  uint64_t v140;
  uint32x2_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  int32x2_t v149;
  int v150;
  __int32 v151;
  int32x2_t v152;
  uint32x2_t v153;
  int32x2_t v154;
  int32x2_t v155;
  uint32x2_t v156;
  unsigned __int16 v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint32x2_t *v161;
  uint32x2_t *v162;
  uint64_t v163;
  uint32x2_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int32x2_t v172;
  int32x2_t v173;
  int32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  uint32x2_t v177;
  uint32x2_t v178;
  uint32x2_t v179;
  int32x2_t v180;
  int8x8_t v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  uint64_t v185;
  uint32x2_t *v186;
  uint32x2_t *v187;
  uint64_t v188;
  uint32x2_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  unsigned int v195;
  int32x2_t v196;
  int32x2_t v197;
  int32x2_t v198;
  int32x2_t v199;
  int32x2_t v200;
  uint32x2_t v201;
  uint32x2_t v202;
  uint32x2_t v203;
  int32x2_t v204;
  int8x8_t v205;
  unint64_t v206;
  uint64_t v207;
  uint32x2_t *v208;
  uint32x2_t *v209;
  uint64_t v210;
  uint32x2_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  unsigned __int16 v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned __int16 v222;
  unsigned int v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint32x2_t *v227;
  uint32x2_t *v228;
  uint64_t v229;
  uint32x2_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned __int16 v240;
  unsigned int v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint32x2_t *v245;
  uint32x2_t *v246;
  uint64_t v247;
  uint32x2_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int64x2_t v252;
  int8x16_t v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unint64_t v258;
  unint64_t v259;
  uint32x2_t v260;
  unint64_t v261;
  int64x2_t v262;
  int8x16_t v263;
  unint64_t v264;
  unint64_t v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int64x2_t v273;
  int64x2_t v274;
  unint64_t v275;
  uint64_t v276;
  uint32x2_t *v277;
  uint32x2_t *v278;
  uint64_t v279;
  uint32x2_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint32x2_t *v293;
  uint32x2_t *v294;
  uint64_t v295;
  uint32x2_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  unint64_t v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint32x2_t *v310;
  uint32x2_t *v311;
  uint64_t v312;
  uint32x2_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint32x2_t *v327;
  uint32x2_t *v328;
  uint64_t v329;
  uint32x2_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  int v336;
  unint64_t v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint32x2_t *v344;
  uint32x2_t *v345;
  uint64_t v346;
  uint32x2_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  unint64_t v354;
  int v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint32x2_t *v361;
  uint32x2_t *v362;
  uint64_t v363;
  uint32x2_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  unint64_t v371;
  int v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint32x2_t *v378;
  uint32x2_t *v379;
  uint64_t v380;
  uint32x2_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  int v387;
  unint64_t v388;
  int v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint32x2_t *v395;
  uint32x2_t *v396;
  uint64_t v397;
  uint32x2_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int v404;
  unint64_t v405;
  int v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint32x2_t *v412;
  uint32x2_t *v413;
  uint64_t v414;
  uint32x2_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  unint64_t v422;
  int v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint32x2_t *v429;
  uint32x2_t *v430;
  uint64_t v431;
  uint32x2_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  unint64_t v439;
  int v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint32x2_t *v446;
  uint32x2_t *v447;
  uint64_t v448;
  uint32x2_t *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  int v455;
  unint64_t v456;
  int v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint32x2_t *v463;
  uint32x2_t *v464;
  uint64_t v465;
  uint32x2_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  int v472;
  unint64_t v473;
  int v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint32x2_t *v480;
  uint32x2_t *v481;
  uint64_t v482;
  uint32x2_t *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  int v489;
  unint64_t v490;
  int v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint32x2_t *v497;
  uint32x2_t *v498;
  uint64_t v499;
  uint32x2_t *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  int v506;
  unint64_t v507;
  int v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint32x2_t *v514;
  uint32x2_t *v515;
  uint64_t v516;
  uint32x2_t *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  int v523;
  unint64_t v524;
  int v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint32x2_t *v531;
  uint32x2_t *v532;
  uint64_t v533;
  uint32x2_t *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  unint64_t v541;
  int v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint32x2_t *v548;
  uint32x2_t *v549;
  uint64_t v550;
  uint32x2_t *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  int v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  int v578;
  int v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  uint32x2_t *v600;

  v2 = *(_QWORD *)(a1 + 136);
  if (!v2)
    return;
  v3 = *(_DWORD *)(a1 + 8);
  v576 = *(_DWORD *)(a1 + 4);
  v4 = v576;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = (unint64_t)*(int *)(a1 + 28) >> 3;
  v9 = (uint32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * (*(int *)(a1 + 12) + v8 * *(int *)(a1 + 16)));
  v10 = *(int *)(a1 + 124);
  v11 = (_BYTE *)(v2 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v10);
  v12 = *(int *)(a1 + 56);
  v13 = *(int *)(a1 + 60);
  v14 = *(int *)(a1 + 76);
  if (*(unsigned __int8 *)(a1 + 1) << 8 == 256)
  {
    v15 = v14 >> 3;
    v16 = (uint32x2_t *)(v6 + 8 * (v12 + v15 * v13));
    if (v15 != v8)
    {
      v18 = 1;
LABEL_14:
      v19 = 0;
      v4 = v18 * v576;
      v21 = v7 != 0;
      v574 = v8 - v4;
      v575 = v10 - v4;
      v23 = -1;
      v20 = v15;
      goto LABEL_15;
    }
    if ((char *)v9 - (char *)v16 >= 1)
    {
      if (v576 >= (uint64_t)((unint64_t)((char *)v9 - (char *)v16) >> 3))
      {
        v9 += v576 - 1;
        v16 += v576 - 1;
        v11 += v576 - 1;
        v18 = -1;
        goto LABEL_13;
      }
      v17 = v3 - 1;
      if (v9 <= &v16[v8 * v17 - 1 + v576])
      {
        v9 += v8 * v17;
        v15 = -(uint64_t)v8;
        v11 += v10 * v17;
        v10 = -v10;
        v18 = 1;
        v16 += v8 * v17;
        v8 = -(uint64_t)v8;
        goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_13:
    v15 = (unint64_t)*(int *)(a1 + 28) >> 3;
    goto LABEL_14;
  }
  v20 = *(_DWORD *)(a1 + 64);
  v19 = *(_DWORD *)(a1 + 68);
  v15 = v14 >> 3;
  v21 = v7 != 0;
  v575 = v10 - v576;
  v574 = v8 - v576;
  if (v6)
  {
    v572 = 0;
    v571 = v6 + 8 * v15 * v19;
    v573 = v15;
    v22 = v6 + 8 * v15 * ((int)v13 % v19);
    v16 = (uint32x2_t *)(v22 + 8 * ((int)v12 % v20));
    v23 = v22 + 8 * v20;
    v18 = 1;
    v600 = v16;
    goto LABEL_16;
  }
  v16 = 0;
  v23 = 0;
  v18 = 1;
LABEL_15:
  v571 = 0;
  v600 = 0;
  v573 = v15 - v4;
  v572 = 1;
LABEL_16:
  switch(a2)
  {
    case 0:
      v24 = v18;
      v25 = 8 * v18;
      do
      {
        v26 = v576;
        do
        {
          v27 = *v11;
          if (*v11)
          {
            if (v27 == 255)
            {
              *v9 = 0;
            }
            else
            {
              v28 = (int32x2_t)*v9;
              v29.i32[0] = vshl_u32(*v9, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v30.i32[0] = v29.i32[0];
              v30.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v9);
              v31 = vdup_n_s32(v27 | (v27 << 8));
              v32.i32[0] = v9->u16[0];
              v32.i32[1] = HIWORD(*(unint64_t *)v9);
              v33 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v30, v31);
              v34 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v32, v31);
              v29.i32[1] = HIDWORD(*(unint64_t *)v9);
              v35 = (uint32x2_t)vsub_s32(v29, (int32x2_t)vshr_n_u32(vsra_n_u32(v33, v33, 0x10uLL), 0x10uLL));
              v28.i32[1] = v32.i32[1];
              v36 = vsub_s32(v28, (int32x2_t)vshr_n_u32(vsra_n_u32(v34, v34, 0x10uLL), 0x10uLL));
              v37 = (int8x8_t)vshl_n_s32(v36, 0x10uLL);
              v36.i16[1] = 0;
              v36.i32[1] = v37.i32[1];
              v37.i32[0] = vshl_u32(v35, (uint32x2_t)0xFFFF00000010).u32[0];
              v37.i32[1] = v35.u16[2];
              *v9 = (uint32x2_t)vorr_s8(v37, (int8x8_t)v36);
            }
          }
          v11 += v24;
          v9 = (uint32x2_t *)((char *)v9 + v25);
          --v26;
        }
        while (v26);
        v11 += v575;
        v9 += v574;
        --v3;
      }
      while (v3);
      return;
    case 1:
      if (v5)
        v38 = v21;
      else
        v38 = 1;
      v39 = v18;
      v40 = -(uint64_t)v20;
      v41 = -(v573 * v19);
      v42 = 8 * v18;
      if ((v38 & 1) != 0)
      {
        do
        {
          v43 = v576;
          do
          {
            v44 = *v11;
            if (*v11)
            {
              if (v44 == 255)
                *v9 = *v16;
              else
                rgba64_DMplusDM(v9, (unint64_t)*v16, v44 | (v44 << 8), (unint64_t)*v9, (v44 | (v44 << 8)) ^ 0xFFFF);
            }
            v11 += v39;
            v45 = (unint64_t)&v16[v39];
            if (v45 >= v23)
              v46 = v40;
            else
              v46 = 0;
            v16 = (uint32x2_t *)(v45 + 8 * v46);
            v9 = (uint32x2_t *)((char *)v9 + v42);
            --v43;
          }
          while (v43);
          v11 += v575;
          v9 += v574;
          v47 = v600;
          v48 = &v600[v573];
          if ((unint64_t)v48 >= v571)
            v49 = v41;
          else
            v49 = 0;
          v50 = &v48[v49];
          v51 = v23 + 8 * v49 + 8 * v573;
          if (!v572)
          {
            v23 = v51;
            v47 = v50;
          }
          v600 = v47;
          if (v572)
            v16 += v573;
          else
            v16 = v50;
          --v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v52 = v576;
          do
          {
            v53 = *v11;
            if (*v11)
            {
              if (v53 == 255)
                *v9 = (uint32x2_t)(*(_QWORD *)v16 | 0xFFFF000000000000);
              else
                rgba64_DMplusDAM(v9, (unint64_t)*v9, (v53 | (v53 << 8)) ^ 0xFFFF, (uint64_t)*v16, 0xFFFFu, v53 | (v53 << 8));
            }
            v11 += v39;
            v54 = (unint64_t)&v16[v39];
            if (v54 >= v23)
              v55 = v40;
            else
              v55 = 0;
            v16 = (uint32x2_t *)(v54 + 8 * v55);
            v9 = (uint32x2_t *)((char *)v9 + v42);
            --v52;
          }
          while (v52);
          v11 += v575;
          v9 += v574;
          v56 = v600;
          v57 = &v600[v573];
          if ((unint64_t)v57 >= v571)
            v58 = v41;
          else
            v58 = 0;
          v59 = &v57[v58];
          v60 = v23 + 8 * v58 + 8 * v573;
          if (!v572)
          {
            v23 = v60;
            v56 = v59;
          }
          v600 = v56;
          if (v572)
            v16 += v573;
          else
            v16 = v59;
          --v3;
        }
        while (v3);
      }
      return;
    case 2:
      v61 = v18;
      v62 = -(uint64_t)v20;
      v577 = -(v573 * v19);
      v63 = 8 * v18;
      while (1)
      {
        v64 = v3;
        v65 = v576;
        do
        {
          v66 = *v11;
          if (!*v11)
            goto LABEL_80;
          if (v66 == 255)
          {
            v67 = (uint64_t)*v16;
            v68 = HIWORD(*(unint64_t *)v16);
            if (!(_DWORD)v68)
              goto LABEL_80;
            if ((_DWORD)v68 == 0xFFFF)
            {
              *v9 = (uint32x2_t)v67;
              goto LABEL_80;
            }
            v72 = (unint64_t)*v9;
            v73 = v68 ^ 0xFFFF;
          }
          else
          {
            v70 = HIWORD(*(unint64_t *)v16);
            v71 = (v66 | (v66 << 8)) ^ 0xFFFF;
            if ((_WORD)v70 == (v71 * (_DWORD)v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16)
              goto LABEL_80;
            v69 = (unint64_t)*v16;
            v67 = ((unint64_t)(v70
                                    - ((v71 * (_DWORD)v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v69) - ((WORD2(v69) * v71 + 0x8000 + ((WORD2(v69) * v71 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v69 - (((unsigned __int16)v69 * v71 + 0x8000 + (((unsigned __int16)v69 * v71 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v69) - ((WORD1(v69) * v71 + 0x8000 + ((WORD1(v69) * v71 + 0x8000) >> 16)) >> 16)) << 16);
            v72 = (unint64_t)*v9;
            v73 = (unsigned __int16)~(v70
                                    - ((v71 * (_DWORD)v70 + 0x8000 + ((v71 * v70 + 0x8000) >> 16)) >> 16));
          }
          rgba64_DplusDM((uint16x4_t *)v9, v67, v72, v73);
LABEL_80:
          v11 += v61;
          v74 = (unint64_t)&v16[v61];
          if (v74 >= v23)
            v75 = v62;
          else
            v75 = 0;
          v16 = (uint32x2_t *)(v74 + 8 * v75);
          v9 = (uint32x2_t *)((char *)v9 + v63);
          --v65;
        }
        while (v65);
        v11 += v575;
        v9 += v574;
        v76 = v600;
        v77 = &v600[v573];
        v78 = v577;
        if ((unint64_t)v77 < v571)
          v78 = 0;
        v79 = &v77[v78];
        v80 = v23 + 8 * v78 + 8 * v573;
        if (!v572)
        {
          v23 = v80;
          v76 = v79;
        }
        v600 = v76;
        if (v572)
          v16 += v573;
        else
          v16 = v79;
        v3 = v64 - 1;
        if (v64 == 1)
          return;
      }
    case 3:
      v81 = v18;
      v82 = -(uint64_t)v20;
      v553 = -(v573 * v19);
      v83 = 8 * v18;
      do
      {
        v578 = v3;
        v84 = v576;
        do
        {
          v85 = *v11;
          if (*v11)
          {
            if (v85 == 255)
            {
              v86 = HIWORD(*(unint64_t *)v16);
              v87 = (int32x2_t)*v16;
              if (!v21)
                LODWORD(v86) = 0xFFFF;
              v88 = vdup_n_s32(v9->u16[3] ^ 0xFFFFu);
              v89 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8((int8x8_t)v87, (int8x8_t)0xFFFF0000FFFFLL), v88);
              v90 = vsub_s32(v87, (int32x2_t)vshr_n_u32(vsra_n_u32(v89, v89, 0x10uLL), 0x10uLL));
              v91.i32[0] = HIWORD(v87.i32[0]);
              v91.i32[1] = v86;
              v92 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v91, v88);
              *v9 = (uint32x2_t)vsli_n_s32(v90, vsub_s32(v91, (int32x2_t)vshr_n_u32(vsra_n_u32(v92, v92, 0x10uLL), 0x10uLL)), 0x10uLL);
            }
            else
            {
              v93 = v85 | (v85 << 8);
              v94 = HIWORD(*(unint64_t *)v16);
              if (!v21)
                LOWORD(v94) = -1;
              rgba64_DMplusDAM(v9, (unint64_t)*v9, v93 ^ 0xFFFF, (uint64_t)*v16, (unsigned __int16)v94, (HIWORD(*(unint64_t *)v9) * v93+ 0x8000+ ((HIWORD(*(unint64_t *)v9) * v93 + 0x8000) >> 16)) >> 16);
            }
          }
          v11 += v81;
          v95 = (unint64_t)&v16[v81];
          if (v95 >= v23)
            v96 = v82;
          else
            v96 = 0;
          v16 = (uint32x2_t *)(v95 + 8 * v96);
          v9 = (uint32x2_t *)((char *)v9 + v83);
          --v84;
        }
        while (v84);
        v11 += v575;
        v9 += v574;
        v97 = v600;
        v98 = &v600[v573];
        v99 = v553;
        if ((unint64_t)v98 < v571)
          v99 = 0;
        v100 = &v98[v99];
        v101 = v23 + 8 * v99 + 8 * v573;
        if (!v572)
        {
          v23 = v101;
          v97 = v100;
        }
        v600 = v97;
        if (v572)
          v16 += v573;
        else
          v16 = v100;
        v3 = v578 - 1;
      }
      while (v578 != 1);
      return;
    case 4:
      v102 = v18;
      v103 = -(uint64_t)v20;
      v554 = -(v573 * v19);
      v104 = 8 * v18;
      do
      {
        v579 = v3;
        v105 = v576;
        do
        {
          v106 = *v11;
          if (*v11)
          {
            if (v106 == 255)
            {
              v107 = HIWORD(*(unint64_t *)v16);
              v108 = (int32x2_t)*v16;
              if (!v21)
                LODWORD(v107) = 0xFFFF;
              v109 = vdup_n_s32(v9->u16[3]);
              v110 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8((int8x8_t)v108, (int8x8_t)0xFFFF0000FFFFLL), v109);
              v111 = vsub_s32(v108, (int32x2_t)vshr_n_u32(vsra_n_u32(v110, v110, 0x10uLL), 0x10uLL));
              v112.i32[0] = HIWORD(v108.i32[0]);
              v112.i32[1] = v107;
              v113 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v112, v109);
              *v9 = (uint32x2_t)vsli_n_s32(v111, vsub_s32(v112, (int32x2_t)vshr_n_u32(vsra_n_u32(v113, v113, 0x10uLL), 0x10uLL)), 0x10uLL);
            }
            else
            {
              v114 = v106 | (v106 << 8);
              v115 = (unint64_t)*v9;
              v116 = HIWORD(*(unint64_t *)v16);
              if (!v21)
                LOWORD(v116) = -1;
              v117 = (HIWORD(v115) ^ 0xFFFF) * v114 + 0x8000;
              rgba64_DMplusDAM(v9, v115, v114 ^ 0xFFFF, (uint64_t)*v16, (unsigned __int16)v116, (v117 + HIWORD(v117)) >> 16);
            }
          }
          v11 += v102;
          v118 = (unint64_t)&v16[v102];
          if (v118 >= v23)
            v119 = v103;
          else
            v119 = 0;
          v16 = (uint32x2_t *)(v118 + 8 * v119);
          v9 = (uint32x2_t *)((char *)v9 + v104);
          --v105;
        }
        while (v105);
        v11 += v575;
        v9 += v574;
        v120 = v600;
        v121 = &v600[v573];
        v122 = v554;
        if ((unint64_t)v121 < v571)
          v122 = 0;
        v123 = &v121[v122];
        v124 = v23 + 8 * v122 + 8 * v573;
        if (!v572)
        {
          v23 = v124;
          v120 = v123;
        }
        v600 = v120;
        if (v572)
          v16 += v573;
        else
          v16 = v123;
        v3 = v579 - 1;
      }
      while (v579 != 1);
      return;
    case 5:
      v125 = v18;
      v126 = -(uint64_t)v20;
      v580 = -(v573 * v19);
      v127 = 8 * v18;
      do
      {
        v128 = v3;
        v129 = v576;
        do
        {
          if (*v11)
          {
            v130 = (*v11 | (*v11 << 8)) ^ 0xFFFF;
            v131 = v16->u16[0] * v130 + 0x8000;
            v132 = (unsigned __int16)WORD2(*(unint64_t *)v16) * v130 + 0x8000;
            v133 = *(_QWORD *)v16 - ((v131 + HIWORD(v131)) >> 16);
            v134 = HIWORD(v16->u32[0])
                 - ((HIWORD(v16->u32[0]) * v130 + 0x8000 + ((HIWORD(v16->u32[0]) * v130 + 0x8000) >> 16)) >> 16);
            v135 = HIWORD(*(unint64_t *)v16)
                 - ((v130 * HIWORD(*(unint64_t *)v16)
                   + 0x8000
                   + ((v130 * HIWORD(*(unint64_t *)v16) + 0x8000) >> 16)) >> 16);
            rgba64_DMplusDM(v9, (v135 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v16)- ((v132 + HIWORD(v132)) >> 16)) << 32) | v133 | ((unsigned __int16)v134 << 16), HIWORD(*(unint64_t *)v9), (unint64_t)*v9, (unsigned __int16)~(_WORD)v135);
          }
          v11 += v125;
          v136 = (unint64_t)&v16[v125];
          if (v136 >= v23)
            v137 = v126;
          else
            v137 = 0;
          v16 = (uint32x2_t *)(v136 + 8 * v137);
          v9 = (uint32x2_t *)((char *)v9 + v127);
          --v129;
        }
        while (v129);
        v11 += v575;
        v9 += v574;
        v138 = v600;
        v139 = &v600[v573];
        v140 = v580;
        if ((unint64_t)v139 < v571)
          v140 = 0;
        v141 = &v139[v140];
        v142 = v23 + 8 * v140 + 8 * v573;
        if (!v572)
        {
          v23 = v142;
          v138 = v141;
        }
        v600 = v138;
        if (v572)
          v16 += v573;
        else
          v16 = v141;
        v3 = v128 - 1;
      }
      while (v128 != 1);
      return;
    case 6:
      v143 = v18;
      v144 = -(uint64_t)v20;
      v555 = -(v573 * v19);
      v145 = 8 * v18;
      do
      {
        v581 = v3;
        v146 = v576;
        do
        {
          v147 = *v11;
          if (*v11)
          {
            v148 = HIWORD(*(unint64_t *)v9);
            if ((_WORD)v148 != 0xFFFF)
            {
              if ((unsigned __int16)~(_WORD)v148 == 0xFFFF)
              {
                v149 = (int32x2_t)*v16;
                v150 = v147 | (v147 << 8);
                if (v21)
                  v151 = HIWORD(*(unint64_t *)v16);
                else
                  v151 = 0xFFFF;
                v152 = vdup_n_s32(v150 ^ 0xFFFFu);
                v153 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, (int32x2_t)vand_s8((int8x8_t)v149, (int8x8_t)0xFFFF0000FFFFLL), v152);
                v154 = vsub_s32(v149, (int32x2_t)vshr_n_u32(vsra_n_u32(v153, v153, 0x10uLL), 0x10uLL));
                v155.i32[0] = HIWORD(v149.i32[0]);
                v155.i32[1] = v151;
                v156 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v155, v152);
                *v9 = (uint32x2_t)vsli_n_s32(v154, vsub_s32(v155, (int32x2_t)vshr_n_u32(vsra_n_u32(v156, v156, 0x10uLL), 0x10uLL)), 0x10uLL);
              }
              else
              {
                v157 = ~(_WORD)v148;
                v158 = HIWORD(*(unint64_t *)v16);
                if (!v21)
                  LOWORD(v158) = -1;
                rgba64_DplusDAM((uint16x4_t *)v9, (uint64_t)*v9, (uint64_t)*v16, (unsigned __int16)v158, (257 * v147 * v157 + 0x8000 + ((257 * v147 * v157 + 0x8000) >> 16)) >> 16);
              }
            }
          }
          v11 += v143;
          v159 = (unint64_t)&v16[v143];
          if (v159 >= v23)
            v160 = v144;
          else
            v160 = 0;
          v16 = (uint32x2_t *)(v159 + 8 * v160);
          v9 = (uint32x2_t *)((char *)v9 + v145);
          --v146;
        }
        while (v146);
        v11 += v575;
        v9 += v574;
        v161 = v600;
        v162 = &v600[v573];
        v163 = v555;
        if ((unint64_t)v162 < v571)
          v163 = 0;
        v164 = &v162[v163];
        v165 = v23 + 8 * v163 + 8 * v573;
        if (!v572)
        {
          v23 = v165;
          v161 = v164;
        }
        v600 = v161;
        if (v572)
          v16 += v573;
        else
          v16 = v164;
        v3 = v581 - 1;
      }
      while (v581 != 1);
      return;
    case 7:
      v166 = v18;
      v167 = -(uint64_t)v20;
      v168 = -(v573 * v19);
      v169 = 8 * v18;
      do
      {
        v170 = v576;
        do
        {
          v171 = *v11;
          if (*v11)
          {
            if (v171 == 255)
            {
              v172 = (int32x2_t)*v9;
              v173.i32[0] = vshl_u32(*v9, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
              v174.i32[0] = v173.i32[0];
              v174.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v9);
              v175 = vdup_n_s32(v16->u16[3] ^ 0xFFFFu);
              v176.i32[0] = v9->u16[0];
              v176.i32[1] = HIWORD(*(unint64_t *)v9);
              v177 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v174, v175);
              v178 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v176, v175);
              v173.i32[1] = HIDWORD(*(unint64_t *)v9);
              v179 = (uint32x2_t)vsub_s32(v173, (int32x2_t)vshr_n_u32(vsra_n_u32(v177, v177, 0x10uLL), 0x10uLL));
              v172.i32[1] = v176.i32[1];
              v180 = vsub_s32(v172, (int32x2_t)vshr_n_u32(vsra_n_u32(v178, v178, 0x10uLL), 0x10uLL));
              v181 = (int8x8_t)vshl_n_s32(v180, 0x10uLL);
              v180.i16[1] = 0;
              v180.i32[1] = v181.i32[1];
              v181.i32[0] = vshl_u32(v179, (uint32x2_t)0xFFFF00000010).u32[0];
              v181.i32[1] = v179.u16[2];
              *v9 = (uint32x2_t)vorr_s8(v181, (int8x8_t)v180);
            }
            else
            {
              v182 = v171 | (v171 << 8);
              v183 = v16->u16[3] * v182 + 0x8000;
              rgba64_DMplusDM(v9, (unint64_t)*v9, (v183 + HIWORD(v183)) >> 16, (unint64_t)*v9, v182 ^ 0xFFFF);
            }
          }
          v11 += v166;
          v184 = (unint64_t)&v16[v166];
          if (v184 >= v23)
            v185 = v167;
          else
            v185 = 0;
          v16 = (uint32x2_t *)(v184 + 8 * v185);
          v9 = (uint32x2_t *)((char *)v9 + v169);
          --v170;
        }
        while (v170);
        v11 += v575;
        v9 += v574;
        v186 = v600;
        v187 = &v600[v573];
        if ((unint64_t)v187 >= v571)
          v188 = v168;
        else
          v188 = 0;
        v189 = &v187[v188];
        v190 = v23 + 8 * v188 + 8 * v573;
        if (!v572)
        {
          v23 = v190;
          v186 = v189;
        }
        v600 = v186;
        if (v572)
          v16 += v573;
        else
          v16 = v189;
        --v3;
      }
      while (v3);
      return;
    case 8:
      v191 = -(uint64_t)v20;
      v192 = -(v573 * v19);
      do
      {
        v193 = v576;
        do
        {
          v194 = *v11;
          if (*v11)
          {
            if (v194 == 255)
              v195 = v16->u16[3];
            else
              v195 = (257 * v194 * v16->u16[3] + 0x8000 + ((257 * v194 * v16->u16[3] + 0x8000) >> 16)) >> 16;
            v196 = (int32x2_t)*v9;
            v197.i32[0] = vshl_u32(*v9, (uint32x2_t)0xFFFF0001FFFFFFF0).u32[0];
            v198.i32[0] = v197.i32[0];
            v198.i32[1] = (unsigned __int16)WORD2(*(unint64_t *)v9);
            v199 = vdup_n_s32(v195);
            v200.i32[0] = v9->u16[0];
            v200.i32[1] = HIWORD(*(unint64_t *)v9);
            v201 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v198, v199);
            v202 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v200, v199);
            v197.i32[1] = HIDWORD(*(unint64_t *)v9);
            v203 = (uint32x2_t)vsub_s32(v197, (int32x2_t)vshr_n_u32(vsra_n_u32(v201, v201, 0x10uLL), 0x10uLL));
            v196.i32[1] = v200.i32[1];
            v204 = vsub_s32(v196, (int32x2_t)vshr_n_u32(vsra_n_u32(v202, v202, 0x10uLL), 0x10uLL));
            v205 = (int8x8_t)vshl_n_s32(v204, 0x10uLL);
            v204.i16[1] = 0;
            v204.i32[1] = v205.i32[1];
            v205.i32[0] = vshl_u32(v203, (uint32x2_t)0xFFFF00000010).u32[0];
            v205.i32[1] = v203.u16[2];
            *v9 = (uint32x2_t)vorr_s8(v205, (int8x8_t)v204);
          }
          v11 += v18;
          v206 = (unint64_t)&v16[v18];
          if (v206 >= v23)
            v207 = v191;
          else
            v207 = 0;
          v16 = (uint32x2_t *)(v206 + 8 * v207);
          v9 += v18;
          --v193;
        }
        while (v193);
        v11 += v575;
        v9 += v574;
        v208 = v600;
        v209 = &v600[v573];
        if ((unint64_t)v209 >= v571)
          v210 = v192;
        else
          v210 = 0;
        v211 = &v209[v210];
        v212 = v23 + 8 * v210 + 8 * v573;
        if (!v572)
        {
          v23 = v212;
          v208 = v211;
        }
        v600 = v208;
        if (v572)
          v16 += v573;
        else
          v16 = v211;
        --v3;
      }
      while (v3);
      return;
    case 9:
      v213 = v18;
      v214 = -(uint64_t)v20;
      v582 = -(v573 * v19);
      v215 = 8 * v18;
      do
      {
        v216 = v3;
        v217 = v576;
        do
        {
          if (*v11)
          {
            v218 = ~(*v11 | (*v11 << 8));
            v219 = v218;
            v220 = v16->u16[0] * v218 + 0x8000;
            v221 = (unsigned __int16)WORD2(*(unint64_t *)v16) * v218 + 0x8000;
            v222 = *(_QWORD *)v16 - ((v220 + HIWORD(v220)) >> 16);
            v223 = HIWORD(v16->u32[0])
                 - ((HIWORD(v16->u32[0]) * v219 + 0x8000 + ((HIWORD(v16->u32[0]) * v219 + 0x8000) >> 16)) >> 16);
            v224 = HIWORD(*(unint64_t *)v16)
                 - ((HIWORD(*(unint64_t *)v16) * v219
                   + 0x8000
                   + ((HIWORD(*(unint64_t *)v16) * v219 + 0x8000) >> 16)) >> 16);
            rgba64_DMplusDM(v9, (v224 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v16)- ((v221 + HIWORD(v221)) >> 16)) << 32) | v222 | ((unsigned __int16)v223 << 16), HIWORD(*(unint64_t *)v9) ^ 0xFFFF, (unint64_t)*v9, (unsigned __int16)(v224 + v218));
          }
          v11 += v213;
          v225 = (unint64_t)&v16[v213];
          if (v225 >= v23)
            v226 = v214;
          else
            v226 = 0;
          v16 = (uint32x2_t *)(v225 + 8 * v226);
          v9 = (uint32x2_t *)((char *)v9 + v215);
          --v217;
        }
        while (v217);
        v11 += v575;
        v9 += v574;
        v227 = v600;
        v228 = &v600[v573];
        v229 = v582;
        if ((unint64_t)v228 < v571)
          v229 = 0;
        v230 = &v228[v229];
        v231 = v23 + 8 * v229 + 8 * v573;
        if (!v572)
        {
          v23 = v231;
          v227 = v230;
        }
        v600 = v227;
        if (v572)
          v16 += v573;
        else
          v16 = v230;
        v3 = v216 - 1;
      }
      while (v216 != 1);
      return;
    case 10:
      v232 = v18;
      v233 = -(uint64_t)v20;
      v583 = -(v573 * v19);
      v234 = 8 * v18;
      do
      {
        v235 = v3;
        v236 = v576;
        do
        {
          if (*v11)
          {
            v237 = (*v11 | (*v11 << 8)) ^ 0xFFFF;
            v238 = v16->u16[0] * v237 + 0x8000;
            v239 = (unsigned __int16)WORD2(*(unint64_t *)v16) * v237 + 0x8000;
            v240 = *(_QWORD *)v16 - ((v238 + HIWORD(v238)) >> 16);
            v241 = HIWORD(v16->u32[0])
                 - ((HIWORD(v16->u32[0]) * v237 + 0x8000 + ((HIWORD(v16->u32[0]) * v237 + 0x8000) >> 16)) >> 16);
            v242 = HIWORD(*(unint64_t *)v16)
                 - ((v237 * HIWORD(*(unint64_t *)v16)
                   + 0x8000
                   + ((v237 * HIWORD(*(unint64_t *)v16) + 0x8000) >> 16)) >> 16);
            rgba64_DMplusDM(v9, (v242 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v16)- ((v239 + HIWORD(v239)) >> 16)) << 32) | v240 | ((unsigned __int16)v241 << 16), HIWORD(*(unint64_t *)v9) ^ 0xFFFF, (unint64_t)*v9, (unsigned __int16)~(_WORD)v242);
          }
          v11 += v232;
          v243 = (unint64_t)&v16[v232];
          if (v243 >= v23)
            v244 = v233;
          else
            v244 = 0;
          v16 = (uint32x2_t *)(v243 + 8 * v244);
          v9 = (uint32x2_t *)((char *)v9 + v234);
          --v236;
        }
        while (v236);
        v11 += v575;
        v9 += v574;
        v245 = v600;
        v246 = &v600[v573];
        v247 = v583;
        if ((unint64_t)v246 < v571)
          v247 = 0;
        v248 = &v246[v247];
        v249 = v23 + 8 * v247 + 8 * v573;
        if (!v572)
        {
          v23 = v249;
          v245 = v248;
        }
        v600 = v245;
        if (v572)
          v16 += v573;
        else
          v16 = v248;
        v3 = v235 - 1;
      }
      while (v235 != 1);
      return;
    case 11:
      v250 = -(uint64_t)v20;
      v251 = -(v573 * v19);
      v252 = vdupq_n_s64(0x20uLL);
      v253.i64[0] = 0xFFFFLL;
      v253.i64[1] = 0xFFFFLL;
      do
      {
        v254 = v576;
        do
        {
          if (*v11)
          {
            v255 = *v11 | (*v11 << 8);
            v256 = v16->u16[0] * (v255 ^ 0xFFFF) + 0x8000;
            v257 = (unsigned __int16)WORD2(*(unint64_t *)v16) * (v255 ^ 0xFFFF) + 0x8000;
            v258 = (unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v16) - ((v257 + HIWORD(v257)) >> 16)) << 32;
            v259 = (unsigned __int16)(*(_QWORD *)v16 - ((v256 + HIWORD(v256)) >> 16)) | ((unsigned __int16)(HIWORD(v16->u32[0]) - ((HIWORD(v16->u32[0]) * (v255 ^ 0xFFFF) + 0x8000 + ((HIWORD(v16->u32[0]) * (v255 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
            v260 = *v9;
            v261 = HIWORD(*(unint64_t *)v9);
            if (v21)
              LOWORD(v255) = HIWORD(*(unint64_t *)v16)
                           - ((HIWORD(*(unint64_t *)v16) * (v255 ^ 0xFFFF)
                             + 0x8000
                             + ((HIWORD(*(unint64_t *)v16) * (v255 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
            if (!v5)
              v261 = 0xFFFFLL;
            v262.i64[1] = v252.i64[1];
            v262.i64[0] = v259;
            v263 = (int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v258), (uint64x2_t)vnegq_s64(v262));
            v263.i64[0] = v259;
            v264 = (unsigned __int16)v255;
            v265 = v261 - v260.u16[1];
            if (v261 < v260.u16[1])
              v265 = 0;
            v266 = (unsigned __int16)v255 >= v259 >> 16;
            v267 = (unsigned __int16)v255 - (v259 >> 16);
            if (!v266)
              v267 = 0;
            v268 = v267 + v265;
            v269 = v261 + (unsigned __int16)v255;
            if (v268 >= 0xFFFF)
              v268 = 0xFFFFLL;
            if (v269 >= 0xFFFF)
              v269 = 0xFFFFLL;
            v266 = v269 >= v268;
            v270 = v269 - v268;
            if (!v266)
              v270 = 0;
            *(uint32x2_t *)v271.i8 = *v9;
            v271.i64[1] = HIDWORD(*(_QWORD *)&v260);
            v272 = (int8x16_t)vaddq_s64((int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v264), (uint64x2_t)vandq_s8(v263, v253)), (int64x2_t)vqsubq_u64((uint64x2_t)vdupq_n_s64(v261), (uint64x2_t)vandq_s8(v271, v253)));
            v273 = vdupq_n_s64(v269);
            v274 = (int64x2_t)vqsubq_u64((uint64x2_t)v273, (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v253, (uint64x2_t)v272), v272, v253));
            v273.i64[0] = v270;
            *v9 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(vmovn_s64(v273), 0x10uLL), (int8x8_t)vmovn_s64(v274));
          }
          v11 += v18;
          v275 = (unint64_t)&v16[v18];
          if (v275 >= v23)
            v276 = v250;
          else
            v276 = 0;
          v16 = (uint32x2_t *)(v275 + 8 * v276);
          v9 += v18;
          --v254;
        }
        while (v254);
        v11 += v575;
        v9 += v574;
        v277 = v600;
        v278 = &v600[v573];
        if ((unint64_t)v278 >= v571)
          v279 = v251;
        else
          v279 = 0;
        v280 = &v278[v279];
        v281 = v23 + 8 * v279 + 8 * v573;
        if (!v572)
        {
          v23 = v281;
          v277 = v280;
        }
        v600 = v277;
        if (v572)
          v16 += v573;
        else
          v16 = v280;
        --v3;
      }
      while (v3);
      return;
    case 12:
      v282 = v18;
      v283 = -(uint64_t)v20;
      v584 = -(v573 * v19);
      v284 = 8 * v18;
      do
      {
        v285 = v3;
        v286 = v576;
        do
        {
          if (*v11)
          {
            v287 = *v11 | (*v11 << 8);
            v288 = v16->u16[0] * (v287 ^ 0xFFFF) + 0x8000;
            v289 = (unsigned __int16)WORD2(*(unint64_t *)v16) * (v287 ^ 0xFFFF) + 0x8000;
            v290 = ((HIWORD(*(unint64_t *)v16)
                   - ((HIWORD(*(unint64_t *)v16) * (v287 ^ 0xFFFF)
                     + 0x8000
                     + ((HIWORD(*(unint64_t *)v16) * (v287 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(unint64_t *)v16) - ((v289 + HIWORD(v289)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v16 - ((v288 + HIWORD(v288)) >> 16)) | ((unsigned __int16)(HIWORD(v16->u32[0]) - ((HIWORD(v16->u32[0]) * (v287 ^ 0xFFFF) + 0x8000 + ((HIWORD(v16->u32[0]) * (v287 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
            if (v21)
              LOWORD(v287) = HIWORD(*(unint64_t *)v16)
                           - ((HIWORD(*(unint64_t *)v16) * (v287 ^ 0xFFFF)
                             + 0x8000
                             + ((HIWORD(*(unint64_t *)v16) * (v287 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
            rgba64_DpluslDA(v9, (unint64_t)*v9, v290, (unsigned __int16)v287);
          }
          v11 += v282;
          v291 = (unint64_t)&v16[v282];
          if (v291 >= v23)
            v292 = v283;
          else
            v292 = 0;
          v16 = (uint32x2_t *)(v291 + 8 * v292);
          v9 = (uint32x2_t *)((char *)v9 + v284);
          --v286;
        }
        while (v286);
        v11 += v575;
        v9 += v574;
        v293 = v600;
        v294 = &v600[v573];
        v295 = v584;
        if ((unint64_t)v294 < v571)
          v295 = 0;
        v296 = &v294[v295];
        v297 = v23 + 8 * v295 + 8 * v573;
        if (!v572)
        {
          v23 = v297;
          v293 = v296;
        }
        v600 = v293;
        if (v572)
          v16 += v573;
        else
          v16 = v296;
        v3 = v285 - 1;
      }
      while (v285 != 1);
      return;
    case 13:
      v298 = v18;
      v299 = -(uint64_t)v20;
      v556 = -(v573 * v19);
      v300 = 8 * v18;
      while (1)
      {
        v585 = v3;
        v301 = v576;
        do
        {
          if (!*v11)
            goto LABEL_319;
          v302 = *v11 | (*v11 << 8);
          v304 = v302 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v304
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v304 + 0x8000) >> 16)) >> 16)
              goto LABEL_319;
            LOWORD(v302) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v304
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v304 + 0x8000) >> 16)) >> 16);
          }
          v303 = (unint64_t)*v16;
          v305 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v306) = 0xFFFF;
LABEL_317:
            v307 = PDAmultiplyPDA_13494(v305, v306, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v304+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v304 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v303) - ((WORD2(v303) * v304 + 0x8000 + ((WORD2(v303) * v304 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v303 - (((unsigned __int16)v303 * v304 + 0x8000 + (((unsigned __int16)v303 * v304 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v303) - ((WORD1(v303) * v304 + 0x8000 + ((WORD1(v303) * v304 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v302);
            goto LABEL_318;
          }
          v306 = HIWORD(v305);
          if (HIWORD(v305))
            goto LABEL_317;
          v307 = ((unint64_t)(unsigned __int16)(WORD2(v303)
                                                     - ((WORD2(v303) * v304
                                                       + 0x8000
                                                       + ((WORD2(v303) * v304 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v303 - (((unsigned __int16)v303 * v304 + 0x8000 + (((unsigned __int16)v303 * v304 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v303) - ((WORD1(v303) * v304 + 0x8000 + ((WORD1(v303) * v304 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v302 << 48);
LABEL_318:
          *v9 = (uint32x2_t)v307;
LABEL_319:
          v11 += v298;
          v308 = (unint64_t)&v16[v298];
          if (v308 >= v23)
            v309 = v299;
          else
            v309 = 0;
          v16 = (uint32x2_t *)(v308 + 8 * v309);
          v9 = (uint32x2_t *)((char *)v9 + v300);
          --v301;
        }
        while (v301);
        v11 += v575;
        v9 += v574;
        v310 = v600;
        v311 = &v600[v573];
        v312 = v556;
        if ((unint64_t)v311 < v571)
          v312 = 0;
        v313 = &v311[v312];
        v314 = v23 + 8 * v312 + 8 * v573;
        if (!v572)
        {
          v23 = v314;
          v310 = v313;
        }
        v600 = v310;
        if (v572)
          v16 += v573;
        else
          v16 = v313;
        v3 = v585 - 1;
        if (v585 == 1)
          return;
      }
    case 14:
      v315 = v18;
      v316 = -(uint64_t)v20;
      v557 = -(v573 * v19);
      v317 = 8 * v18;
      while (1)
      {
        v586 = v3;
        v318 = v576;
        do
        {
          if (!*v11)
            goto LABEL_344;
          v319 = *v11 | (*v11 << 8);
          v321 = v319 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v321
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v321 + 0x8000) >> 16)) >> 16)
              goto LABEL_344;
            LOWORD(v319) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v321
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v321 + 0x8000) >> 16)) >> 16);
          }
          v320 = (unint64_t)*v16;
          v322 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v323) = 0xFFFF;
LABEL_342:
            v324 = PDAscreenPDA_13495(v322, v323, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v321+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v321 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v320) - ((WORD2(v320) * v321 + 0x8000 + ((WORD2(v320) * v321 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v320 - (((unsigned __int16)v320 * v321 + 0x8000 + (((unsigned __int16)v320 * v321 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v320) - ((WORD1(v320) * v321 + 0x8000 + ((WORD1(v320) * v321 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v319);
            goto LABEL_343;
          }
          v323 = HIWORD(v322);
          if (HIWORD(v322))
            goto LABEL_342;
          v324 = ((unint64_t)(unsigned __int16)(WORD2(v320)
                                                     - ((WORD2(v320) * v321
                                                       + 0x8000
                                                       + ((WORD2(v320) * v321 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v320 - (((unsigned __int16)v320 * v321 + 0x8000 + (((unsigned __int16)v320 * v321 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v320) - ((WORD1(v320) * v321 + 0x8000 + ((WORD1(v320) * v321 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v319 << 48);
LABEL_343:
          *v9 = (uint32x2_t)v324;
LABEL_344:
          v11 += v315;
          v325 = (unint64_t)&v16[v315];
          if (v325 >= v23)
            v326 = v316;
          else
            v326 = 0;
          v16 = (uint32x2_t *)(v325 + 8 * v326);
          v9 = (uint32x2_t *)((char *)v9 + v317);
          --v318;
        }
        while (v318);
        v11 += v575;
        v9 += v574;
        v327 = v600;
        v328 = &v600[v573];
        v329 = v557;
        if ((unint64_t)v328 < v571)
          v329 = 0;
        v330 = &v328[v329];
        v331 = v23 + 8 * v329 + 8 * v573;
        if (!v572)
        {
          v23 = v331;
          v327 = v330;
        }
        v600 = v327;
        if (v572)
          v16 += v573;
        else
          v16 = v330;
        v3 = v586 - 1;
        if (v586 == 1)
          return;
      }
    case 15:
      v332 = v18;
      v333 = -(uint64_t)v20;
      v558 = -(v573 * v19);
      v334 = 8 * v18;
      while (1)
      {
        v587 = v3;
        v335 = v576;
        do
        {
          if (!*v11)
            goto LABEL_369;
          v336 = *v11 | (*v11 << 8);
          v338 = v336 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v338
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v338 + 0x8000) >> 16)) >> 16)
              goto LABEL_369;
            LOWORD(v336) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v338
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v338 + 0x8000) >> 16)) >> 16);
          }
          v337 = (unint64_t)*v16;
          v339 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v340) = 0xFFFF;
LABEL_367:
            v341 = PDAoverlayPDA_13496(v339, v340, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v338+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v338 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v337) - ((WORD2(v337) * v338 + 0x8000 + ((WORD2(v337) * v338 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v337 - (((unsigned __int16)v337 * v338 + 0x8000 + (((unsigned __int16)v337 * v338 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v337) - ((WORD1(v337) * v338 + 0x8000 + ((WORD1(v337) * v338 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v336);
            goto LABEL_368;
          }
          v340 = HIWORD(v339);
          if (HIWORD(v339))
            goto LABEL_367;
          v341 = ((unint64_t)(unsigned __int16)(WORD2(v337)
                                                     - ((WORD2(v337) * v338
                                                       + 0x8000
                                                       + ((WORD2(v337) * v338 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v337 - (((unsigned __int16)v337 * v338 + 0x8000 + (((unsigned __int16)v337 * v338 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v337) - ((WORD1(v337) * v338 + 0x8000 + ((WORD1(v337) * v338 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v336 << 48);
LABEL_368:
          *v9 = (uint32x2_t)v341;
LABEL_369:
          v11 += v332;
          v342 = (unint64_t)&v16[v332];
          if (v342 >= v23)
            v343 = v333;
          else
            v343 = 0;
          v16 = (uint32x2_t *)(v342 + 8 * v343);
          v9 = (uint32x2_t *)((char *)v9 + v334);
          --v335;
        }
        while (v335);
        v11 += v575;
        v9 += v574;
        v344 = v600;
        v345 = &v600[v573];
        v346 = v558;
        if ((unint64_t)v345 < v571)
          v346 = 0;
        v347 = &v345[v346];
        v348 = v23 + 8 * v346 + 8 * v573;
        if (!v572)
        {
          v23 = v348;
          v344 = v347;
        }
        v600 = v344;
        if (v572)
          v16 += v573;
        else
          v16 = v347;
        v3 = v587 - 1;
        if (v587 == 1)
          return;
      }
    case 16:
      v349 = v18;
      v350 = -(uint64_t)v20;
      v559 = -(v573 * v19);
      v351 = 8 * v18;
      while (1)
      {
        v588 = v3;
        v352 = v576;
        do
        {
          if (!*v11)
            goto LABEL_394;
          v353 = *v11 | (*v11 << 8);
          v355 = v353 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v355
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v355 + 0x8000) >> 16)) >> 16)
              goto LABEL_394;
            LOWORD(v353) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v355
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v355 + 0x8000) >> 16)) >> 16);
          }
          v354 = (unint64_t)*v16;
          v356 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v357) = 0xFFFF;
LABEL_392:
            v358 = PDAdarkenPDA_13498(v356, v357, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v355+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v355 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v354) - ((WORD2(v354) * v355 + 0x8000 + ((WORD2(v354) * v355 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v354 - (((unsigned __int16)v354 * v355 + 0x8000 + (((unsigned __int16)v354 * v355 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v354) - ((WORD1(v354) * v355 + 0x8000 + ((WORD1(v354) * v355 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v353);
            goto LABEL_393;
          }
          v357 = HIWORD(v356);
          if (HIWORD(v356))
            goto LABEL_392;
          v358 = ((unint64_t)(unsigned __int16)(WORD2(v354)
                                                     - ((WORD2(v354) * v355
                                                       + 0x8000
                                                       + ((WORD2(v354) * v355 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v354 - (((unsigned __int16)v354 * v355 + 0x8000 + (((unsigned __int16)v354 * v355 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v354) - ((WORD1(v354) * v355 + 0x8000 + ((WORD1(v354) * v355 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v353 << 48);
LABEL_393:
          *v9 = (uint32x2_t)v358;
LABEL_394:
          v11 += v349;
          v359 = (unint64_t)&v16[v349];
          if (v359 >= v23)
            v360 = v350;
          else
            v360 = 0;
          v16 = (uint32x2_t *)(v359 + 8 * v360);
          v9 = (uint32x2_t *)((char *)v9 + v351);
          --v352;
        }
        while (v352);
        v11 += v575;
        v9 += v574;
        v361 = v600;
        v362 = &v600[v573];
        v363 = v559;
        if ((unint64_t)v362 < v571)
          v363 = 0;
        v364 = &v362[v363];
        v365 = v23 + 8 * v363 + 8 * v573;
        if (!v572)
        {
          v23 = v365;
          v361 = v364;
        }
        v600 = v361;
        if (v572)
          v16 += v573;
        else
          v16 = v364;
        v3 = v588 - 1;
        if (v588 == 1)
          return;
      }
    case 17:
      v366 = v18;
      v367 = -(uint64_t)v20;
      v560 = -(v573 * v19);
      v368 = 8 * v18;
      while (1)
      {
        v589 = v3;
        v369 = v576;
        do
        {
          if (!*v11)
            goto LABEL_419;
          v370 = *v11 | (*v11 << 8);
          v372 = v370 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v372
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v372 + 0x8000) >> 16)) >> 16)
              goto LABEL_419;
            LOWORD(v370) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v372
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v372 + 0x8000) >> 16)) >> 16);
          }
          v371 = (unint64_t)*v16;
          v373 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v374) = 0xFFFF;
LABEL_417:
            v375 = PDAlightenPDA_13497(v373, v374, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v372+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v372 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v371) - ((WORD2(v371) * v372 + 0x8000 + ((WORD2(v371) * v372 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v371 - (((unsigned __int16)v371 * v372 + 0x8000 + (((unsigned __int16)v371 * v372 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v371) - ((WORD1(v371) * v372 + 0x8000 + ((WORD1(v371) * v372 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v370);
            goto LABEL_418;
          }
          v374 = HIWORD(v373);
          if (HIWORD(v373))
            goto LABEL_417;
          v375 = ((unint64_t)(unsigned __int16)(WORD2(v371)
                                                     - ((WORD2(v371) * v372
                                                       + 0x8000
                                                       + ((WORD2(v371) * v372 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v371 - (((unsigned __int16)v371 * v372 + 0x8000 + (((unsigned __int16)v371 * v372 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v371) - ((WORD1(v371) * v372 + 0x8000 + ((WORD1(v371) * v372 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v370 << 48);
LABEL_418:
          *v9 = (uint32x2_t)v375;
LABEL_419:
          v11 += v366;
          v376 = (unint64_t)&v16[v366];
          if (v376 >= v23)
            v377 = v367;
          else
            v377 = 0;
          v16 = (uint32x2_t *)(v376 + 8 * v377);
          v9 = (uint32x2_t *)((char *)v9 + v368);
          --v369;
        }
        while (v369);
        v11 += v575;
        v9 += v574;
        v378 = v600;
        v379 = &v600[v573];
        v380 = v560;
        if ((unint64_t)v379 < v571)
          v380 = 0;
        v381 = &v379[v380];
        v382 = v23 + 8 * v380 + 8 * v573;
        if (!v572)
        {
          v23 = v382;
          v378 = v381;
        }
        v600 = v378;
        if (v572)
          v16 += v573;
        else
          v16 = v381;
        v3 = v589 - 1;
        if (v589 == 1)
          return;
      }
    case 18:
      v383 = v18;
      v384 = -(uint64_t)v20;
      v561 = -(v573 * v19);
      v385 = 8 * v18;
      while (1)
      {
        v590 = v3;
        v386 = v576;
        do
        {
          if (!*v11)
            goto LABEL_444;
          v387 = *v11 | (*v11 << 8);
          v389 = v387 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v389
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v389 + 0x8000) >> 16)) >> 16)
              goto LABEL_444;
            LOWORD(v387) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v389
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v389 + 0x8000) >> 16)) >> 16);
          }
          v388 = (unint64_t)*v16;
          v390 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v391) = 0xFFFF;
LABEL_442:
            v392 = PDAcolordodgePDA_13499(v390, v391, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v389+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v389 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v388) - ((WORD2(v388) * v389 + 0x8000 + ((WORD2(v388) * v389 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v388 - (((unsigned __int16)v388 * v389 + 0x8000 + (((unsigned __int16)v388 * v389 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v388) - ((WORD1(v388) * v389 + 0x8000 + ((WORD1(v388) * v389 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v387);
            goto LABEL_443;
          }
          v391 = HIWORD(v390);
          if (HIWORD(v390))
            goto LABEL_442;
          v392 = ((unint64_t)(unsigned __int16)(WORD2(v388)
                                                     - ((WORD2(v388) * v389
                                                       + 0x8000
                                                       + ((WORD2(v388) * v389 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v388 - (((unsigned __int16)v388 * v389 + 0x8000 + (((unsigned __int16)v388 * v389 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v388) - ((WORD1(v388) * v389 + 0x8000 + ((WORD1(v388) * v389 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v387 << 48);
LABEL_443:
          *v9 = (uint32x2_t)v392;
LABEL_444:
          v11 += v383;
          v393 = (unint64_t)&v16[v383];
          if (v393 >= v23)
            v394 = v384;
          else
            v394 = 0;
          v16 = (uint32x2_t *)(v393 + 8 * v394);
          v9 = (uint32x2_t *)((char *)v9 + v385);
          --v386;
        }
        while (v386);
        v11 += v575;
        v9 += v574;
        v395 = v600;
        v396 = &v600[v573];
        v397 = v561;
        if ((unint64_t)v396 < v571)
          v397 = 0;
        v398 = &v396[v397];
        v399 = v23 + 8 * v397 + 8 * v573;
        if (!v572)
        {
          v23 = v399;
          v395 = v398;
        }
        v600 = v395;
        if (v572)
          v16 += v573;
        else
          v16 = v398;
        v3 = v590 - 1;
        if (v590 == 1)
          return;
      }
    case 19:
      v400 = v18;
      v401 = -(uint64_t)v20;
      v562 = -(v573 * v19);
      v402 = 8 * v18;
      while (1)
      {
        v591 = v3;
        v403 = v576;
        do
        {
          if (!*v11)
            goto LABEL_469;
          v404 = *v11 | (*v11 << 8);
          v406 = v404 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v406
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v406 + 0x8000) >> 16)) >> 16)
              goto LABEL_469;
            LOWORD(v404) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v406
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v406 + 0x8000) >> 16)) >> 16);
          }
          v405 = (unint64_t)*v16;
          v407 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v408) = 0xFFFF;
LABEL_467:
            v409 = PDAcolorburnPDA_13500(v407, v408, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v406+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v406 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v405) - ((WORD2(v405) * v406 + 0x8000 + ((WORD2(v405) * v406 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v405 - (((unsigned __int16)v405 * v406 + 0x8000 + (((unsigned __int16)v405 * v406 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v405) - ((WORD1(v405) * v406 + 0x8000 + ((WORD1(v405) * v406 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v404);
            goto LABEL_468;
          }
          v408 = HIWORD(v407);
          if (HIWORD(v407))
            goto LABEL_467;
          v409 = ((unint64_t)(unsigned __int16)(WORD2(v405)
                                                     - ((WORD2(v405) * v406
                                                       + 0x8000
                                                       + ((WORD2(v405) * v406 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v405 - (((unsigned __int16)v405 * v406 + 0x8000 + (((unsigned __int16)v405 * v406 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v405) - ((WORD1(v405) * v406 + 0x8000 + ((WORD1(v405) * v406 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v404 << 48);
LABEL_468:
          *v9 = (uint32x2_t)v409;
LABEL_469:
          v11 += v400;
          v410 = (unint64_t)&v16[v400];
          if (v410 >= v23)
            v411 = v401;
          else
            v411 = 0;
          v16 = (uint32x2_t *)(v410 + 8 * v411);
          v9 = (uint32x2_t *)((char *)v9 + v402);
          --v403;
        }
        while (v403);
        v11 += v575;
        v9 += v574;
        v412 = v600;
        v413 = &v600[v573];
        v414 = v562;
        if ((unint64_t)v413 < v571)
          v414 = 0;
        v415 = &v413[v414];
        v416 = v23 + 8 * v414 + 8 * v573;
        if (!v572)
        {
          v23 = v416;
          v412 = v415;
        }
        v600 = v412;
        if (v572)
          v16 += v573;
        else
          v16 = v415;
        v3 = v591 - 1;
        if (v591 == 1)
          return;
      }
    case 20:
      v417 = v18;
      v418 = -(uint64_t)v20;
      v563 = -(v573 * v19);
      v419 = 8 * v18;
      while (1)
      {
        v592 = v3;
        v420 = v576;
        do
        {
          if (!*v11)
            goto LABEL_494;
          v421 = *v11 | (*v11 << 8);
          v423 = v421 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v423
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v423 + 0x8000) >> 16)) >> 16)
              goto LABEL_494;
            LOWORD(v421) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v423
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v423 + 0x8000) >> 16)) >> 16);
          }
          v422 = (unint64_t)*v16;
          v424 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v425) = 0xFFFF;
LABEL_492:
            v426 = PDAsoftlightPDA_13502(v424, v425, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v423+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v423 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v422) - ((WORD2(v422) * v423 + 0x8000 + ((WORD2(v422) * v423 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v422 - (((unsigned __int16)v422 * v423 + 0x8000 + (((unsigned __int16)v422 * v423 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v422) - ((WORD1(v422) * v423 + 0x8000 + ((WORD1(v422) * v423 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v421);
            goto LABEL_493;
          }
          v425 = HIWORD(v424);
          if (HIWORD(v424))
            goto LABEL_492;
          v426 = ((unint64_t)(unsigned __int16)(WORD2(v422)
                                                     - ((WORD2(v422) * v423
                                                       + 0x8000
                                                       + ((WORD2(v422) * v423 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v422 - (((unsigned __int16)v422 * v423 + 0x8000 + (((unsigned __int16)v422 * v423 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v422) - ((WORD1(v422) * v423 + 0x8000 + ((WORD1(v422) * v423 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v421 << 48);
LABEL_493:
          *v9 = (uint32x2_t)v426;
LABEL_494:
          v11 += v417;
          v427 = (unint64_t)&v16[v417];
          if (v427 >= v23)
            v428 = v418;
          else
            v428 = 0;
          v16 = (uint32x2_t *)(v427 + 8 * v428);
          v9 = (uint32x2_t *)((char *)v9 + v419);
          --v420;
        }
        while (v420);
        v11 += v575;
        v9 += v574;
        v429 = v600;
        v430 = &v600[v573];
        v431 = v563;
        if ((unint64_t)v430 < v571)
          v431 = 0;
        v432 = &v430[v431];
        v433 = v23 + 8 * v431 + 8 * v573;
        if (!v572)
        {
          v23 = v433;
          v429 = v432;
        }
        v600 = v429;
        if (v572)
          v16 += v573;
        else
          v16 = v432;
        v3 = v592 - 1;
        if (v592 == 1)
          return;
      }
    case 21:
      v434 = v18;
      v435 = -(uint64_t)v20;
      v564 = -(v573 * v19);
      v436 = 8 * v18;
      while (1)
      {
        v593 = v3;
        v437 = v576;
        do
        {
          if (!*v11)
            goto LABEL_519;
          v438 = *v11 | (*v11 << 8);
          v440 = v438 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v440
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v440 + 0x8000) >> 16)) >> 16)
              goto LABEL_519;
            LOWORD(v438) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v440
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v440 + 0x8000) >> 16)) >> 16);
          }
          v439 = (unint64_t)*v16;
          v441 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v442) = 0xFFFF;
LABEL_517:
            v443 = PDAhardlightPDA_13501(v441, v442, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v440+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v440 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v439) - ((WORD2(v439) * v440 + 0x8000 + ((WORD2(v439) * v440 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v439 - (((unsigned __int16)v439 * v440 + 0x8000 + (((unsigned __int16)v439 * v440 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v439) - ((WORD1(v439) * v440 + 0x8000 + ((WORD1(v439) * v440 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v438);
            goto LABEL_518;
          }
          v442 = HIWORD(v441);
          if (HIWORD(v441))
            goto LABEL_517;
          v443 = ((unint64_t)(unsigned __int16)(WORD2(v439)
                                                     - ((WORD2(v439) * v440
                                                       + 0x8000
                                                       + ((WORD2(v439) * v440 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v439 - (((unsigned __int16)v439 * v440 + 0x8000 + (((unsigned __int16)v439 * v440 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v439) - ((WORD1(v439) * v440 + 0x8000 + ((WORD1(v439) * v440 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v438 << 48);
LABEL_518:
          *v9 = (uint32x2_t)v443;
LABEL_519:
          v11 += v434;
          v444 = (unint64_t)&v16[v434];
          if (v444 >= v23)
            v445 = v435;
          else
            v445 = 0;
          v16 = (uint32x2_t *)(v444 + 8 * v445);
          v9 = (uint32x2_t *)((char *)v9 + v436);
          --v437;
        }
        while (v437);
        v11 += v575;
        v9 += v574;
        v446 = v600;
        v447 = &v600[v573];
        v448 = v564;
        if ((unint64_t)v447 < v571)
          v448 = 0;
        v449 = &v447[v448];
        v450 = v23 + 8 * v448 + 8 * v573;
        if (!v572)
        {
          v23 = v450;
          v446 = v449;
        }
        v600 = v446;
        if (v572)
          v16 += v573;
        else
          v16 = v449;
        v3 = v593 - 1;
        if (v593 == 1)
          return;
      }
    case 22:
      v451 = v18;
      v452 = -(uint64_t)v20;
      v565 = -(v573 * v19);
      v453 = 8 * v18;
      while (1)
      {
        v594 = v3;
        v454 = v576;
        do
        {
          if (!*v11)
            goto LABEL_544;
          v455 = *v11 | (*v11 << 8);
          v457 = v455 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v457
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v457 + 0x8000) >> 16)) >> 16)
              goto LABEL_544;
            LOWORD(v455) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v457
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v457 + 0x8000) >> 16)) >> 16);
          }
          v456 = (unint64_t)*v16;
          v458 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v459) = 0xFFFF;
LABEL_542:
            v460 = PDAdifferencePDA_13503(v458, v459, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v457+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v457 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v456) - ((WORD2(v456) * v457 + 0x8000 + ((WORD2(v456) * v457 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v456 - (((unsigned __int16)v456 * v457 + 0x8000 + (((unsigned __int16)v456 * v457 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v456) - ((WORD1(v456) * v457 + 0x8000 + ((WORD1(v456) * v457 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v455);
            goto LABEL_543;
          }
          v459 = HIWORD(v458);
          if (HIWORD(v458))
            goto LABEL_542;
          v460 = ((unint64_t)(unsigned __int16)(WORD2(v456)
                                                     - ((WORD2(v456) * v457
                                                       + 0x8000
                                                       + ((WORD2(v456) * v457 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v456 - (((unsigned __int16)v456 * v457 + 0x8000 + (((unsigned __int16)v456 * v457 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v456) - ((WORD1(v456) * v457 + 0x8000 + ((WORD1(v456) * v457 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v455 << 48);
LABEL_543:
          *v9 = (uint32x2_t)v460;
LABEL_544:
          v11 += v451;
          v461 = (unint64_t)&v16[v451];
          if (v461 >= v23)
            v462 = v452;
          else
            v462 = 0;
          v16 = (uint32x2_t *)(v461 + 8 * v462);
          v9 = (uint32x2_t *)((char *)v9 + v453);
          --v454;
        }
        while (v454);
        v11 += v575;
        v9 += v574;
        v463 = v600;
        v464 = &v600[v573];
        v465 = v565;
        if ((unint64_t)v464 < v571)
          v465 = 0;
        v466 = &v464[v465];
        v467 = v23 + 8 * v465 + 8 * v573;
        if (!v572)
        {
          v23 = v467;
          v463 = v466;
        }
        v600 = v463;
        if (v572)
          v16 += v573;
        else
          v16 = v466;
        v3 = v594 - 1;
        if (v594 == 1)
          return;
      }
    case 23:
      v468 = v18;
      v469 = -(uint64_t)v20;
      v566 = -(v573 * v19);
      v470 = 8 * v18;
      while (1)
      {
        v595 = v3;
        v471 = v576;
        do
        {
          if (!*v11)
            goto LABEL_569;
          v472 = *v11 | (*v11 << 8);
          v474 = v472 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v474
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v474 + 0x8000) >> 16)) >> 16)
              goto LABEL_569;
            LOWORD(v472) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v474
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v474 + 0x8000) >> 16)) >> 16);
          }
          v473 = (unint64_t)*v16;
          v475 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v476) = 0xFFFF;
LABEL_567:
            v477 = PDAexclusionPDA_13504(v475, v476, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v474+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v474 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v473) - ((WORD2(v473) * v474 + 0x8000 + ((WORD2(v473) * v474 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v473 - (((unsigned __int16)v473 * v474 + 0x8000 + (((unsigned __int16)v473 * v474 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v473) - ((WORD1(v473) * v474 + 0x8000 + ((WORD1(v473) * v474 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v472);
            goto LABEL_568;
          }
          v476 = HIWORD(v475);
          if (HIWORD(v475))
            goto LABEL_567;
          v477 = ((unint64_t)(unsigned __int16)(WORD2(v473)
                                                     - ((WORD2(v473) * v474
                                                       + 0x8000
                                                       + ((WORD2(v473) * v474 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v473 - (((unsigned __int16)v473 * v474 + 0x8000 + (((unsigned __int16)v473 * v474 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v473) - ((WORD1(v473) * v474 + 0x8000 + ((WORD1(v473) * v474 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v472 << 48);
LABEL_568:
          *v9 = (uint32x2_t)v477;
LABEL_569:
          v11 += v468;
          v478 = (unint64_t)&v16[v468];
          if (v478 >= v23)
            v479 = v469;
          else
            v479 = 0;
          v16 = (uint32x2_t *)(v478 + 8 * v479);
          v9 = (uint32x2_t *)((char *)v9 + v470);
          --v471;
        }
        while (v471);
        v11 += v575;
        v9 += v574;
        v480 = v600;
        v481 = &v600[v573];
        v482 = v566;
        if ((unint64_t)v481 < v571)
          v482 = 0;
        v483 = &v481[v482];
        v484 = v23 + 8 * v482 + 8 * v573;
        if (!v572)
        {
          v23 = v484;
          v480 = v483;
        }
        v600 = v480;
        if (v572)
          v16 += v573;
        else
          v16 = v483;
        v3 = v595 - 1;
        if (v595 == 1)
          return;
      }
    case 24:
      v485 = v18;
      v486 = -(uint64_t)v20;
      v567 = -(v573 * v19);
      v487 = 8 * v18;
      while (1)
      {
        v596 = v3;
        v488 = v576;
        do
        {
          if (!*v11)
            goto LABEL_594;
          v489 = *v11 | (*v11 << 8);
          v491 = v489 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v491
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v491 + 0x8000) >> 16)) >> 16)
              goto LABEL_594;
            LOWORD(v489) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v491
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v491 + 0x8000) >> 16)) >> 16);
          }
          v490 = (unint64_t)*v16;
          v492 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v493) = 0xFFFF;
LABEL_592:
            v494 = PDAhuePDA_13505(v492, v493, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v491+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v491 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v490) - ((WORD2(v490) * v491 + 0x8000 + ((WORD2(v490) * v491 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v490 - (((unsigned __int16)v490 * v491 + 0x8000 + (((unsigned __int16)v490 * v491 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v490) - ((WORD1(v490) * v491 + 0x8000 + ((WORD1(v490) * v491 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v489);
            goto LABEL_593;
          }
          v493 = HIWORD(v492);
          if (HIWORD(v492))
            goto LABEL_592;
          v494 = ((unint64_t)(unsigned __int16)(WORD2(v490)
                                                     - ((WORD2(v490) * v491
                                                       + 0x8000
                                                       + ((WORD2(v490) * v491 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v490 - (((unsigned __int16)v490 * v491 + 0x8000 + (((unsigned __int16)v490 * v491 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v490) - ((WORD1(v490) * v491 + 0x8000 + ((WORD1(v490) * v491 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v489 << 48);
LABEL_593:
          *v9 = (uint32x2_t)v494;
LABEL_594:
          v11 += v485;
          v495 = (unint64_t)&v16[v485];
          if (v495 >= v23)
            v496 = v486;
          else
            v496 = 0;
          v16 = (uint32x2_t *)(v495 + 8 * v496);
          v9 = (uint32x2_t *)((char *)v9 + v487);
          --v488;
        }
        while (v488);
        v11 += v575;
        v9 += v574;
        v497 = v600;
        v498 = &v600[v573];
        v499 = v567;
        if ((unint64_t)v498 < v571)
          v499 = 0;
        v500 = &v498[v499];
        v501 = v23 + 8 * v499 + 8 * v573;
        if (!v572)
        {
          v23 = v501;
          v497 = v500;
        }
        v600 = v497;
        if (v572)
          v16 += v573;
        else
          v16 = v500;
        v3 = v596 - 1;
        if (v596 == 1)
          return;
      }
    case 25:
      v502 = v18;
      v503 = -(uint64_t)v20;
      v568 = -(v573 * v19);
      v504 = 8 * v18;
      while (1)
      {
        v597 = v3;
        v505 = v576;
        do
        {
          if (!*v11)
            goto LABEL_619;
          v506 = *v11 | (*v11 << 8);
          v508 = v506 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v508
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v508 + 0x8000) >> 16)) >> 16)
              goto LABEL_619;
            LOWORD(v506) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v508
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v508 + 0x8000) >> 16)) >> 16);
          }
          v507 = (unint64_t)*v16;
          v509 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v510) = 0xFFFF;
LABEL_617:
            v511 = PDAsaturationPDA_13506(v509, v510, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v508+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v508 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v507) - ((WORD2(v507) * v508 + 0x8000 + ((WORD2(v507) * v508 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v507 - (((unsigned __int16)v507 * v508 + 0x8000 + (((unsigned __int16)v507 * v508 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v507) - ((WORD1(v507) * v508 + 0x8000 + ((WORD1(v507) * v508 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v506);
            goto LABEL_618;
          }
          v510 = HIWORD(v509);
          if (HIWORD(v509))
            goto LABEL_617;
          v511 = ((unint64_t)(unsigned __int16)(WORD2(v507)
                                                     - ((WORD2(v507) * v508
                                                       + 0x8000
                                                       + ((WORD2(v507) * v508 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v507 - (((unsigned __int16)v507 * v508 + 0x8000 + (((unsigned __int16)v507 * v508 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v507) - ((WORD1(v507) * v508 + 0x8000 + ((WORD1(v507) * v508 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v506 << 48);
LABEL_618:
          *v9 = (uint32x2_t)v511;
LABEL_619:
          v11 += v502;
          v512 = (unint64_t)&v16[v502];
          if (v512 >= v23)
            v513 = v503;
          else
            v513 = 0;
          v16 = (uint32x2_t *)(v512 + 8 * v513);
          v9 = (uint32x2_t *)((char *)v9 + v504);
          --v505;
        }
        while (v505);
        v11 += v575;
        v9 += v574;
        v514 = v600;
        v515 = &v600[v573];
        v516 = v568;
        if ((unint64_t)v515 < v571)
          v516 = 0;
        v517 = &v515[v516];
        v518 = v23 + 8 * v516 + 8 * v573;
        if (!v572)
        {
          v23 = v518;
          v514 = v517;
        }
        v600 = v514;
        if (v572)
          v16 += v573;
        else
          v16 = v517;
        v3 = v597 - 1;
        if (v597 == 1)
          return;
      }
    case 26:
      v519 = v18;
      v520 = -(uint64_t)v20;
      v569 = -(v573 * v19);
      v521 = 8 * v18;
      while (1)
      {
        v598 = v3;
        v522 = v576;
        do
        {
          if (!*v11)
            goto LABEL_644;
          v523 = *v11 | (*v11 << 8);
          v525 = v523 ^ 0xFFFF;
          if (v21)
          {
            if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v525
                                                    + 0x8000
                                                    + ((HIWORD(*(unint64_t *)v16) * v525 + 0x8000) >> 16)) >> 16)
              goto LABEL_644;
            LOWORD(v523) = HIWORD(*(unint64_t *)v16)
                         - ((HIWORD(*(unint64_t *)v16) * v525
                           + 0x8000
                           + ((HIWORD(*(unint64_t *)v16) * v525 + 0x8000) >> 16)) >> 16);
          }
          v524 = (unint64_t)*v16;
          v526 = (unint64_t)*v9;
          if (!v5)
          {
            LODWORD(v527) = 0xFFFF;
LABEL_642:
            v528 = PDAluminosityPDA_13507(((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v525+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v525 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v524) - ((WORD2(v524) * v525 + 0x8000 + ((WORD2(v524) * v525 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v524 - (((unsigned __int16)v524 * v525 + 0x8000 + (((unsigned __int16)v524 * v525 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v524) - ((WORD1(v524) * v525 + 0x8000 + ((WORD1(v524) * v525 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v523, v526, v527);
            goto LABEL_643;
          }
          v527 = HIWORD(v526);
          if (HIWORD(v526))
            goto LABEL_642;
          v528 = ((unint64_t)(unsigned __int16)(WORD2(v524)
                                                     - ((WORD2(v524) * v525
                                                       + 0x8000
                                                       + ((WORD2(v524) * v525 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v524 - (((unsigned __int16)v524 * v525 + 0x8000 + (((unsigned __int16)v524 * v525 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v524) - ((WORD1(v524) * v525 + 0x8000 + ((WORD1(v524) * v525 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v523 << 48);
LABEL_643:
          *v9 = (uint32x2_t)v528;
LABEL_644:
          v11 += v519;
          v529 = (unint64_t)&v16[v519];
          if (v529 >= v23)
            v530 = v520;
          else
            v530 = 0;
          v16 = (uint32x2_t *)(v529 + 8 * v530);
          v9 = (uint32x2_t *)((char *)v9 + v521);
          --v522;
        }
        while (v522);
        v11 += v575;
        v9 += v574;
        v531 = v600;
        v532 = &v600[v573];
        v533 = v569;
        if ((unint64_t)v532 < v571)
          v533 = 0;
        v534 = &v532[v533];
        v535 = v23 + 8 * v533 + 8 * v573;
        if (!v572)
        {
          v23 = v535;
          v531 = v534;
        }
        v600 = v531;
        if (v572)
          v16 += v573;
        else
          v16 = v534;
        v3 = v598 - 1;
        if (v598 == 1)
          return;
      }
    case 27:
      v536 = v18;
      v537 = -(uint64_t)v20;
      v570 = -(v573 * v19);
      v538 = 8 * v18;
      break;
    default:
      return;
  }
  do
  {
    v599 = v3;
    v539 = v576;
    do
    {
      if (!*v11)
        goto LABEL_669;
      v540 = *v11 | (*v11 << 8);
      v542 = v540 ^ 0xFFFF;
      if (v21)
      {
        if (HIWORD(*(unint64_t *)v16) == (HIWORD(*(unint64_t *)v16) * v542
                                                + 0x8000
                                                + ((HIWORD(*(unint64_t *)v16) * v542 + 0x8000) >> 16)) >> 16)
          goto LABEL_669;
        LOWORD(v540) = HIWORD(*(unint64_t *)v16)
                     - ((HIWORD(*(unint64_t *)v16) * v542
                       + 0x8000
                       + ((HIWORD(*(unint64_t *)v16) * v542 + 0x8000) >> 16)) >> 16);
      }
      v541 = (unint64_t)*v16;
      v543 = (unint64_t)*v9;
      if (!v5)
      {
        LODWORD(v544) = 0xFFFF;
LABEL_667:
        v545 = PDAluminosityPDA_13507(v543, v544, ((HIWORD(*(unint64_t *)v16)- ((HIWORD(*(unint64_t *)v16) * v542+ 0x8000+ ((HIWORD(*(unint64_t *)v16) * v542 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v541) - ((WORD2(v541) * v542 + 0x8000 + ((WORD2(v541) * v542 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v541 - (((unsigned __int16)v541 * v542 + 0x8000 + (((unsigned __int16)v541 * v542 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v541) - ((WORD1(v541) * v542 + 0x8000 + ((WORD1(v541) * v542 + 0x8000) >> 16)) >> 16)) << 16), (unsigned __int16)v540);
        goto LABEL_668;
      }
      v544 = HIWORD(v543);
      if (HIWORD(v543))
        goto LABEL_667;
      v545 = ((unint64_t)(unsigned __int16)(WORD2(v541)
                                                 - ((WORD2(v541) * v542
                                                   + 0x8000
                                                   + ((WORD2(v541) * v542 + 0x8000) >> 16)) >> 16)) << 32) & 0xFFFFFFFFFFFFLL | (unsigned __int16)(v541 - (((unsigned __int16)v541 * v542 + 0x8000 + (((unsigned __int16)v541 * v542 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v541) - ((WORD1(v541) * v542 + 0x8000 + ((WORD1(v541) * v542 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)v540 << 48);
LABEL_668:
      *v9 = (uint32x2_t)v545;
LABEL_669:
      v11 += v536;
      v546 = (unint64_t)&v16[v536];
      if (v546 >= v23)
        v547 = v537;
      else
        v547 = 0;
      v16 = (uint32x2_t *)(v546 + 8 * v547);
      v9 = (uint32x2_t *)((char *)v9 + v538);
      --v539;
    }
    while (v539);
    v11 += v575;
    v9 += v574;
    v548 = v600;
    v549 = &v600[v573];
    v550 = v570;
    if ((unint64_t)v549 < v571)
      v550 = 0;
    v551 = &v549[v550];
    v552 = v23 + 8 * v550 + 8 * v573;
    if (!v572)
    {
      v23 = v552;
      v548 = v551;
    }
    v600 = v548;
    if (v572)
      v16 += v573;
    else
      v16 = v551;
    v3 = v599 - 1;
  }
  while (v599 != 1);
}

_DWORD *rgba64_DMplusDAM(_DWORD *result, unint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a6;
  v7 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a6;
  v8 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a6;
  v9 = HIWORD(a2) * a3 + a6 * (unint64_t)a5;
  if (v6 >= 0xFFFE8000)
    v6 = 4294868992;
  if (v7 >= 0xFFFE8000)
    v7 = 4294868992;
  if (v8 >= 0xFFFE8000)
    v8 = 4294868992;
  if (v9 >= 0xFFFE8000)
    v9 = 4294868992;
  *result = (((v7 + 0x8000) >> 16) + v7 + 0x8000) & 0xFFFF0000 | ((((v6 + 0x8000) >> 16)
                                                                 + (_DWORD)v6
                                                                 + 0x8000) >> 16);
  result[1] = (((v9 + 0x8000) >> 16) + v9 + 0x8000) & 0xFFFF0000 | ((((v8 + 0x8000) >> 16)
                                                                   + (_DWORD)v8
                                                                   + 0x8000) >> 16);
  return result;
}

unint64_t PIXELCONSTANT_13511(float *a1, int a2, float *a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5;
  if (v5 >= a4)
  {
    v6 = a4;
    if (v4 > a4)
      v6 = *a1;
  }
  v7 = a1[3];
  v8 = v6 * a1[2];
  if (a3)
    v9 = a2;
  else
    v9 = 0;
  if (v9 == 1)
  {
    if (*a3 >= v4)
      v4 = *a3;
    if (*a3 > v5)
      v4 = a1[1];
    v10 = (int)(float)(v7 + (float)(v4 * v8));
    v11 = v10;
    LOWORD(v12) = v10;
  }
  else
  {
    if (v9 == 4)
    {
      v19 = a3[4];
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      if (v19 < v4)
        v23 = *a1;
      else
        v23 = a3[4];
      if (v19 <= v5)
        v24 = v23;
      else
        v24 = a1[1];
      if (v20 < v4)
        v25 = *a1;
      else
        v25 = *a3;
      if (v20 <= v5)
        v26 = v25;
      else
        v26 = a1[1];
      if (v21 < v4)
        v27 = *a1;
      else
        v27 = a3[1];
      if (v21 <= v5)
        v28 = v27;
      else
        v28 = a1[1];
      if (v22 < v4)
        v29 = *a1;
      else
        v29 = a3[2];
      if (v22 <= v5)
        v30 = v29;
      else
        v30 = a1[1];
      v31 = (float)(v5 - v26) - v24;
      v32 = (float)(v5 - v28) - v24;
      v33 = (float)(v5 - v30) - v24;
      v34 = v7 + (float)(v31 * v8);
      if (v31 < v4)
        v34 = *a1;
      v35 = v7 + (float)(v32 * v8);
      if (v32 < v4)
        v35 = *a1;
      if (v33 >= v4)
        v4 = v7 + (float)(v33 * v8);
      v10 = (int)v34;
      v11 = (int)v35;
      goto LABEL_63;
    }
    LOWORD(v10) = 0;
    v11 = 0;
    LOWORD(v12) = 0;
    if (v9 == 3)
    {
      v13 = a3[1];
      v14 = a3[2];
      if (*a3 < v4)
        v15 = *a1;
      else
        v15 = *a3;
      if (*a3 <= v5)
        v16 = v15;
      else
        v16 = a1[1];
      if (v13 < v4)
        v17 = *a1;
      else
        v17 = a3[1];
      if (v13 <= v5)
        v18 = v17;
      else
        v18 = a1[1];
      if (v14 >= v4)
        v4 = a3[2];
      if (v14 > v5)
        v4 = a1[1];
      v10 = (int)(float)(v7 + (float)(v16 * v8));
      v11 = (int)(float)(v7 + (float)(v18 * v8));
      v4 = v7 + (float)(v4 * v8);
LABEL_63:
      v12 = (int)v4;
    }
  }
  return ((unint64_t)(int)(float)(v7 + v8) << 48) | ((unint64_t)(unsigned __int16)v12 << 32) | (v11 << 16) | (unint64_t)(unsigned __int16)v10;
}

_DWORD *RGBA64_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unint64_t v8;
  unsigned int v9;
  char *v10;

  v8 = PIXELCONSTANT_13511(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F40;
    a2[6] = 0;
    *((_QWORD *)a2 + 2) = 1;
    v9 = bswap32(v8);
    *((_WORD *)a2 + 24) = HIWORD(v9);
    if (HIWORD(v8) == 0xFFFF)
      v10 = 0;
    else
      v10 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v10;
    *((_WORD *)a2 + 25) = v9;
    *((_WORD *)a2 + 26) = bswap32(HIDWORD(v8)) >> 16;
    *((_WORD *)a2 + 27) = __rev16(HIWORD(v8));
  }
  return a2;
}

uint64_t RGBA64_mark(uint64_t a1, __n128 a2)
{
  unsigned int **v2;
  uint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  unsigned int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint16x4_t *v16;
  int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unsigned __int16 v27;
  int v28;
  int v29;
  unsigned int v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned __int16 v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int16 v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned __int16 v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int16 v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned __int16 v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned __int16 v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  unsigned __int16 *v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int32x4_t v140;
  int32x4_t v141;
  uint32x4_t v142;
  unsigned __int16 *v143;
  uint64_t v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  uint64_t v147;
  unsigned __int16 *v148;
  uint64_t v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  int32x4_t v154;
  int32x4_t v155;
  uint32x4_t v156;
  unsigned __int16 *v157;
  uint64_t v158;
  unsigned __int16 *v159;
  unsigned __int16 *v160;
  uint64_t v161;
  unsigned __int16 *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int16 *v168;
  uint64_t v169;
  unsigned __int16 *v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int16 *v179;
  uint64_t v180;
  unsigned __int16 *v181;
  unsigned __int16 *v182;
  uint64_t v183;
  unsigned __int16 *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int16 v190;
  uint64_t v191;
  unint64_t v192;
  unsigned __int16 v193;
  unsigned __int16 *v194;
  uint64_t v195;
  unsigned __int16 *v196;
  unsigned __int16 *v197;
  uint64_t v198;
  unsigned __int16 *v199;
  uint64_t v200;
  int v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int16 v206;
  unsigned __int16 *v207;
  uint64_t v208;
  unsigned __int16 *v209;
  unsigned __int16 *v210;
  uint64_t v211;
  unsigned __int16 *v212;
  uint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unsigned __int16 v219;
  unint64_t v220;
  unsigned int v221;
  unsigned __int16 *v222;
  uint64_t v223;
  unsigned __int16 *v224;
  unsigned __int16 *v225;
  uint64_t v226;
  unsigned __int16 *v227;
  uint64_t v228;
  int v229;
  int v230;
  unint64_t v231;
  uint64_t v232;
  unsigned int v233;
  unsigned __int16 v234;
  unint64_t v235;
  unsigned int v236;
  unsigned __int16 *v237;
  uint64_t v238;
  unsigned __int16 *v239;
  unsigned __int16 *v240;
  uint64_t v241;
  unsigned __int16 *v242;
  uint64_t v243;
  int v244;
  int v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned __int16 v249;
  unint64_t v250;
  unsigned int v251;
  unsigned __int16 *v252;
  uint64_t v253;
  unsigned __int16 *v254;
  unsigned __int16 *v255;
  uint64_t v256;
  unsigned __int16 *v257;
  uint64_t v258;
  int v259;
  int v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned __int16 v264;
  unint64_t v265;
  unsigned int v266;
  unsigned __int16 *v267;
  uint64_t v268;
  unsigned __int16 *v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unsigned __int16 *v272;
  uint64_t v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned __int16 v279;
  unint64_t v280;
  unsigned int v281;
  unsigned __int16 *v282;
  uint64_t v283;
  unsigned __int16 *v284;
  unsigned __int16 *v285;
  uint64_t v286;
  unsigned __int16 *v287;
  uint64_t v288;
  int v289;
  int v290;
  unint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unsigned __int16 v294;
  unint64_t v295;
  unsigned int v296;
  unsigned __int16 *v297;
  uint64_t v298;
  unsigned __int16 *v299;
  unsigned __int16 *v300;
  uint64_t v301;
  unsigned __int16 *v302;
  uint64_t v303;
  int v304;
  int v305;
  unint64_t v306;
  uint64_t v307;
  unsigned int v308;
  unsigned __int16 v309;
  unint64_t v310;
  unsigned int v311;
  unsigned __int16 *v312;
  uint64_t v313;
  unsigned __int16 *v314;
  unsigned __int16 *v315;
  uint64_t v316;
  unsigned __int16 *v317;
  uint64_t v318;
  int v319;
  int v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  unsigned __int16 v324;
  unint64_t v325;
  unsigned int v326;
  unsigned __int16 *v327;
  uint64_t v328;
  unsigned __int16 *v329;
  unsigned __int16 *v330;
  uint64_t v331;
  unsigned __int16 *v332;
  uint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  unsigned int v338;
  unsigned __int16 v339;
  unint64_t v340;
  unsigned int v341;
  unsigned __int16 *v342;
  uint64_t v343;
  unsigned __int16 *v344;
  unsigned __int16 *v345;
  uint64_t v346;
  unsigned __int16 *v347;
  uint64_t v348;
  int v349;
  int v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unsigned __int16 v354;
  unint64_t v355;
  unsigned int v356;
  unsigned __int16 *v357;
  uint64_t v358;
  unsigned __int16 *v359;
  unsigned __int16 *v360;
  uint64_t v361;
  unsigned __int16 *v362;
  uint64_t v363;
  int v364;
  int v365;
  unint64_t v366;
  uint64_t v367;
  unsigned int v368;
  unsigned __int16 v369;
  unint64_t v370;
  unsigned int v371;
  unsigned __int16 *v372;
  uint64_t v373;
  unsigned __int16 *v374;
  unsigned __int16 *v375;
  uint64_t v376;
  unsigned __int16 *v377;
  uint64_t v378;
  int v379;
  int v380;
  unint64_t v381;
  uint64_t v382;
  unsigned int v383;
  unsigned __int16 v384;
  unint64_t v385;
  unsigned int v386;
  unsigned __int16 *v387;
  uint64_t v388;
  unsigned __int16 *v389;
  unsigned __int16 *v390;
  uint64_t v391;
  unsigned __int16 *v392;
  uint64_t v393;
  int v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  unsigned int v398;
  unsigned __int16 v399;
  unint64_t v400;
  unsigned int v401;
  unsigned __int16 *v402;
  uint64_t v403;
  unsigned __int16 *v404;
  unsigned __int16 *v405;
  uint64_t v406;
  unsigned __int16 *v407;
  uint64_t v408;
  int v409;
  int v410;
  unint64_t v411;
  uint64_t v412;
  unsigned int v413;
  unsigned __int16 v414;
  unint64_t v415;
  unsigned int v416;
  unsigned __int16 *v417;
  uint64_t v418;
  unsigned __int16 *v419;
  unsigned __int16 *v420;
  uint64_t v421;
  unsigned __int16 *v422;
  uint64_t v423;
  int v424;
  int v425;
  unint64_t v426;
  uint64_t v427;
  unsigned int v428;
  unsigned __int16 v429;
  unint64_t v430;
  unsigned int v431;
  unsigned __int16 *v432;
  uint64_t v433;
  unsigned __int16 *v434;
  unsigned __int16 *v435;
  uint64_t v436;
  unsigned __int16 *v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  uint8x8_t v441;
  int v442;
  uint64_t v443;
  int v444;
  unsigned __int16 *v445;
  uint64_t v446;
  unsigned __int16 *v447;
  unsigned __int16 *v448;
  uint64_t v449;
  unsigned __int16 *v450;
  uint64_t v451;
  int v452;
  unsigned __int16 v453;
  unsigned __int16 *v454;
  uint64_t v455;
  unsigned __int16 *v456;
  unsigned __int16 *v457;
  uint64_t v458;
  unsigned __int16 *v459;
  uint64_t v460;
  int v461;
  int v462;
  unsigned __int16 v463;
  unsigned __int16 *v464;
  uint64_t v465;
  unsigned __int16 *v466;
  unsigned __int16 *v467;
  uint64_t v468;
  unsigned __int16 *v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  int v476;
  uint64_t v477;
  unsigned int v478;
  _WORD *v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  int32x4_t v483;
  int32x4_t v484;
  int v485;
  int v486;
  unsigned int v487;
  int32x4_t v488;
  uint32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int v492;
  int v493;
  unsigned int v494;
  int32x4_t v495;
  uint32x4_t v496;
  int v497;
  int v498;
  uint64_t v499;
  int v500;
  unsigned int v501;
  int32x4_t v502;
  int v503;
  int v504;
  unsigned int v505;
  int32x4_t v506;
  int32x4_t v507;
  uint32x4_t v508;
  int32x4_t v509;
  int v510;
  int v511;
  unsigned int v512;
  int32x4_t v513;
  int32x4_t v514;
  uint32x4_t v515;
  int v516;
  int v517;
  uint64_t v518;
  int v519;
  int v520;
  uint64_t v521;
  int v522;
  int v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int16 v526;
  int v527;
  int v528;
  int v529;
  int v530;
  uint64_t v531;
  unsigned int v532;
  unsigned __int16 v533;
  unint64_t v534;
  unsigned int v535;
  int v536;
  int v537;
  uint64_t v538;
  unsigned int v539;
  unsigned __int16 v540;
  unint64_t v541;
  unsigned int v542;
  int v543;
  int v544;
  uint64_t v545;
  unsigned int v546;
  unsigned __int16 v547;
  unint64_t v548;
  unsigned int v549;
  int v550;
  int v551;
  uint64_t v552;
  unsigned int v553;
  unsigned __int16 v554;
  unint64_t v555;
  unsigned int v556;
  int v557;
  int v558;
  uint64_t v559;
  unsigned int v560;
  unsigned __int16 v561;
  unint64_t v562;
  unsigned int v563;
  int v564;
  int v565;
  uint64_t v566;
  unsigned int v567;
  unsigned __int16 v568;
  unint64_t v569;
  unsigned int v570;
  int v571;
  int v572;
  uint64_t v573;
  unsigned int v574;
  unsigned __int16 v575;
  unint64_t v576;
  unsigned int v577;
  int v578;
  int v579;
  uint64_t v580;
  unsigned int v581;
  unsigned __int16 v582;
  unint64_t v583;
  unsigned int v584;
  int v585;
  int v586;
  uint64_t v587;
  unsigned int v588;
  unsigned __int16 v589;
  unint64_t v590;
  unsigned int v591;
  int v592;
  int v593;
  uint64_t v594;
  unsigned int v595;
  unsigned __int16 v596;
  unint64_t v597;
  unsigned int v598;
  int v599;
  int v600;
  uint64_t v601;
  unsigned int v602;
  unsigned __int16 v603;
  unint64_t v604;
  unsigned int v605;
  int v606;
  int v607;
  uint64_t v608;
  unsigned int v609;
  unsigned __int16 v610;
  unint64_t v611;
  unsigned int v612;
  int v613;
  int v614;
  uint64_t v615;
  unsigned int v616;
  unsigned __int16 v617;
  unint64_t v618;
  unsigned int v619;
  int v620;
  int v621;
  uint64_t v622;
  unsigned int v623;
  unsigned __int16 v624;
  unint64_t v625;
  unsigned int v626;
  int v627;
  int v628;
  uint64_t v629;
  unsigned int v630;
  unsigned __int16 v631;
  unint64_t v632;
  unsigned int v633;
  int v634;
  int v635;
  unint64_t v636;
  unint64_t v637;
  int32x2_t v638;
  int v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unint64_t v644;
  unsigned __int16 *v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  unsigned int v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  int v659;
  int v660;
  unsigned __int16 v661;
  unint64_t v662;
  unsigned int v663;
  unsigned __int16 *v664;
  uint64_t v665;
  int v666[4];
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  _DWORD v676[1024];
  uint64_t v677;

  v2 = (unsigned int **)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v3;
  v677 = *MEMORY[0x1E0C80C00];
  v6 = *v2;
  if (*(_DWORD *)(v3 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1)
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_10_12448);
    v7 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)v5;
  v9 = *(_QWORD *)(v5 + 96);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  v13 = *(unsigned int *)(v5 + 4);
  v14 = v13 - 1;
  if ((int)v13 < 1)
    return 0;
  v15 = *(_DWORD *)(v5 + 8);
  if (v15 < 1)
    return 0;
  v16 = *(uint16x4_t **)(v5 + 136);
  v636 = v5;
  if ((v8 & 0xFF0000) != 0x50000 && v16)
  {
    v17 = *(_DWORD *)(v5 + 128);
    if ((v17 | 8) == 8)
    {
      if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
      {
        RGBA64_mark_constmask(v5, v11);
      }
      else if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
      {
        rgba16_template_image_mask_method(*v6, (int *)v5, v11);
      }
      else
      {
        RGBA64_mark_pixelmask(v5, v11);
      }
    }
    else
    {
      v28 = *(_DWORD *)(v5 + 112);
      v29 = *(_DWORD *)(v5 + 116);
      v30 = (v28 + 15) & 0xFFFFFFF0;
      v31 = v30 * v29;
      if ((int)v31 <= 4096)
      {
        v33 = v676;
      }
      else
      {
        v32 = malloc_type_malloc(v31, 0x8303D2FuLL);
        if (!v32)
          return 1;
        v33 = v32;
        v16 = *(uint16x4_t **)(v5 + 136);
        v17 = *(_DWORD *)(v5 + 128);
      }
      CGSConvertBitsToMask(v16, *(_DWORD *)(v5 + 124), v33, v30, v28, v29, v17);
      v47 = *(_OWORD *)(v5 + 112);
      v672 = *(_OWORD *)(v5 + 96);
      v673 = v47;
      v48 = *(_OWORD *)(v5 + 144);
      v674 = *(_OWORD *)(v5 + 128);
      v675 = v48;
      v49 = *(_OWORD *)(v5 + 48);
      v668 = *(_OWORD *)(v5 + 32);
      v669 = v49;
      v50 = *(_OWORD *)(v5 + 80);
      v670 = *(_OWORD *)(v5 + 64);
      v671 = v50;
      v51 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)v666 = *(_OWORD *)v5;
      v667 = v51;
      HIDWORD(v673) = (v28 + 15) & 0xFFFFFFF0;
      *((_QWORD *)&v674 + 1) = v33;
      if (BYTE1(v666[0]) << 8 == 1024)
        RGBA64_mark_constmask((uint64_t)v666, v11);
      else
        RGBA64_mark_pixelmask((unint64_t)v666, v11);
      if (v33 != (_BYTE *)v676)
      {
        v52 = v33;
        goto LABEL_983;
      }
    }
    return 1;
  }
  v649 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *(_DWORD *)v5 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if (BYTE1(v8) == 1)
  {
    if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
    {
      rgba16_template_image_mark_method(*v6, v5, v11);
      return 1;
    }
LABEL_30:
    v676[0] = *(_DWORD *)(v5 + 4);
    v666[0] = v15;
    v34 = *(_QWORD *)(v5 + 88);
    v35 = (unint64_t)*(int *)(v5 + 28) >> 3;
    v36 = *(_QWORD *)(v5 + 40) + 8 * (*(int *)(v5 + 12) + v35 * *(int *)(v5 + 16));
    v37 = *(_DWORD *)(v5 + 104);
    v38 = *(_DWORD *)(v5 + 108);
    v39 = *(_DWORD *)(v5 + 56);
    v40 = *(_DWORD *)(v5 + 60);
    v41 = v8 & 0xFF00;
    v42 = *(int *)(v5 + 76);
    if (v41 != 256)
    {
      LODWORD(v647) = *(_DWORD *)(v5 + 64);
      v639 = *(_DWORD *)(v5 + 68);
      v657 = v34 + 8 * (v42 >> 3) * v639;
      v45 = v9 != 0;
      if (v16)
      {
        v662 = v42 >> 3;
        v664 = *(unsigned __int16 **)(v5 + 88);
        v634 = *(_DWORD *)(v5 + 60);
        v635 = *(_DWORD *)(v5 + 56);
        v44 = 1;
        v46 = v34;
LABEL_55:
        shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, v44, v35, 1, v37, v38, v13, v15);
        v60 = v59;
        if (!v59)
          return 1;
        while (2)
        {
          if (!shape_enum_clip_next(v60, (int *)&v665 + 1, &v665, v676, v666))
          {
            v52 = (void *)v60;
            goto LABEL_983;
          }
          v646 = v60;
          if (v657)
          {
            v56 = (unsigned __int16 *)(v36 + 8 * v35 * (int)v665 + 8 * SHIDWORD(v665));
            v439 = v34 + 8 * v662 * (((int)v665 + *(_DWORD *)(v636 + 60)) % v639);
            v55 = (unsigned __int16 *)(v439 + 8 * ((HIDWORD(v665) + *(_DWORD *)(v636 + 56)) % (int)v647));
            v46 = v439 + 8 * (int)v647;
            v664 = v55;
            v659 = v676[0];
            v440 = v676[0];
            v634 = ((int)v665 + *(_DWORD *)(v636 + 60)) % v639;
            v635 = (HIDWORD(v665) + *(_DWORD *)(v636 + 56)) % (int)v647;
          }
          else
          {
            v659 = v676[0];
            v440 = v676[0] * v44;
            v56 = (unsigned __int16 *)(v36 + 8 * v35 * (int)v665 + 8 * HIDWORD(v665) * (int)v44);
            v55 = (unsigned __int16 *)(v34 + 8 * (int)v665 * (int)v647 + 8 * HIDWORD(v665) * (int)v44);
            v662 = (int)v647 - v676[0] * (int)v44;
          }
          v656 = v35 - v440;
LABEL_59:
          switch(v11)
          {
            case 0:
              v61 = &v56[-4 * v659 + 4];
              v62 = v656 + v659;
              if ((int)v44 < 0)
                v62 = v656 - v659;
              else
                v61 = v56;
              v63 = (char *)&v61[4 * ((v62 * (v666[0] - 1)) & (v62 >> 63))];
              if (v62 < 0)
                v62 = -v62;
              CGBlt_fillBytes(8 * v659, v666[0], 0, v63, 8 * v62);
              goto LABEL_663;
            case 1:
              v64 = *(unsigned __int8 *)(v636 + 1);
              if (v64 == 2)
              {
                if (v659 < 4
                  || (8 * v647) > 0x40
                  || (v4.i32[0] = 8 * v647,
                      v441 = (uint8x8_t)vcnt_s8(v4),
                      v441.i16[0] = vaddlv_u8(v441),
                      v441.i32[0] > 1u))
                {
LABEL_675:
                  v442 = v666[0];
                  v443 = 8 * (int)v44;
                  if (v10 == 0 || v45)
                  {
                    do
                    {
                      v444 = v659;
                      do
                      {
                        *(_QWORD *)v56 = *(_QWORD *)v55;
                        v445 = &v55[4 * (int)v44];
                        if ((unint64_t)v445 >= v46)
                          v446 = -(uint64_t)(int)v647;
                        else
                          v446 = 0;
                        v55 = &v445[4 * v446];
                        v56 = (unsigned __int16 *)((char *)v56 + v443);
                        --v444;
                      }
                      while (v444);
                      v56 += 4 * v656;
                      v447 = v664;
                      v448 = &v664[4 * v662];
                      if ((unint64_t)v448 >= v657)
                        v449 = -(uint64_t)(v662 * v639);
                      else
                        v449 = 0;
                      v450 = &v448[4 * v449];
                      v451 = v46 + 8 * v449 + 8 * v662;
                      if (v657)
                      {
                        v46 = v451;
                        v447 = v450;
                      }
                      v664 = v447;
                      if (v657)
                        v55 = v450;
                      else
                        v55 += 4 * v662;
                      --v442;
                    }
                    while (v442);
                  }
                  else
                  {
                    do
                    {
                      v452 = v659;
                      do
                      {
                        v453 = v55[2];
                        *(_DWORD *)v56 = *(_DWORD *)v55;
                        v56[2] = v453;
                        v56[3] = -1;
                        v454 = &v55[4 * (int)v44];
                        if ((unint64_t)v454 >= v46)
                          v455 = -(uint64_t)(int)v647;
                        else
                          v455 = 0;
                        v55 = &v454[4 * v455];
                        v56 = (unsigned __int16 *)((char *)v56 + v443);
                        --v452;
                      }
                      while (v452);
                      v56 += 4 * v656;
                      v456 = v664;
                      v457 = &v664[4 * v662];
                      if ((unint64_t)v457 >= v657)
                        v458 = -(uint64_t)(v662 * v639);
                      else
                        v458 = 0;
                      v459 = &v457[4 * v458];
                      v460 = v46 + 8 * v458 + 8 * v662;
                      if (v657)
                      {
                        v46 = v460;
                        v456 = v459;
                      }
                      v664 = v456;
                      if (v657)
                        v55 = v459;
                      else
                        v55 += 4 * v662;
                      --v442;
                    }
                    while (v442);
                  }
                  goto LABEL_721;
                }
                CGSFillDRAM64(v56, 8 * (v659 + v656), 8 * v659, v666[0], v34, 8 * v662, 8 * v647, v639, 8 * v635, v634);
              }
              else
              {
                if (v64 != 1)
                  goto LABEL_675;
                if (v10 != 0 && !v45)
                {
                  v461 = v666[0];
                  do
                  {
                    v462 = v659;
                    do
                    {
                      v463 = v55[2];
                      *(_DWORD *)v56 = *(_DWORD *)v55;
                      v56[2] = v463;
                      v56[3] = -1;
                      v464 = &v55[4 * (int)v44];
                      if ((unint64_t)v464 >= v46)
                        v465 = -(uint64_t)(int)v647;
                      else
                        v465 = 0;
                      v55 = &v464[4 * v465];
                      v56 += 4 * (int)v44;
                      --v462;
                    }
                    while (v462);
                    v56 += 4 * v656;
                    v466 = v664;
                    v467 = &v664[4 * v662];
                    if ((unint64_t)v467 >= v657)
                      v468 = -(uint64_t)(v662 * v639);
                    else
                      v468 = 0;
                    v469 = &v467[4 * v468];
                    v470 = v46 + 8 * v468 + 8 * v662;
                    if (v657)
                    {
                      v46 = v470;
                      v466 = v469;
                    }
                    v664 = v466;
                    if (v657)
                      v55 = v469;
                    else
                      v55 += 4 * v662;
                    --v461;
                  }
                  while (v461);
                  goto LABEL_721;
                }
                if ((v44 & 0x80000000) != 0)
                {
                  v65 = v662 - v659;
                  v55 += -4 * v659 + 4;
                  v66 = v656 - v659;
                  v56 += -4 * v659 + 4;
                }
                else
                {
                  v65 = v662 + v659;
                  v66 = v656 + v659;
                }
                v471 = v666[0] - 1;
                v472 = (char *)&v55[4 * ((v65 * v471) & (v65 >> 63))];
                if (v65 >= 0)
                  v473 = v65;
                else
                  v473 = -v65;
                if (v66 >= 0)
                  LODWORD(v474) = v66;
                else
                  v474 = -v66;
                v662 = v473;
                CGBlt_copyBytes(8 * v659, v666[0], v472, (char *)&v56[4 * ((v66 * v471) & (v66 >> 63))], 8 * v473, 8 * v474);
              }
LABEL_663:
              v60 = v646;
              if (!v646)
                return 1;
              v665 = 0;
              continue;
            case 2:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v67 = v666[0];
              do
              {
                v650 = v67;
                v68 = v659;
                do
                {
                  v69 = bswap32(v55[3]) >> 16;
                  if ((_DWORD)v69)
                  {
                    if ((_DWORD)v69 == 0xFFFF)
                      *(_QWORD *)v56 = *(_QWORD *)v55;
                    else
                      RGBA64_DplusDM(v56, (v69 << 48) | ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v69 ^ 0xFFFF);
                  }
                  v70 = &v55[4 * (int)v44];
                  if ((unint64_t)v70 >= v46)
                    v71 = -(uint64_t)(int)v647;
                  else
                    v71 = 0;
                  v55 = &v70[4 * v71];
                  v56 += 4 * (int)v44;
                  --v68;
                }
                while (v68);
                v56 += 4 * v656;
                v72 = v664;
                v73 = &v664[4 * v662];
                v74 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v73 < v657)
                  v74 = 0;
                v75 = &v73[4 * v74];
                v76 = v46 + 8 * v74 + 8 * v662;
                if (v657)
                {
                  v46 = v76;
                  v72 = v75;
                }
                v664 = v72;
                if (v657)
                  v55 = v75;
                else
                  v55 += 4 * v662;
                v67 = v650 - 1;
              }
              while (v650 != 1);
              goto LABEL_662;
            case 3:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v77 = v666[0];
              do
              {
                v651 = v77;
                v78 = v659;
                do
                {
                  v79 = bswap32(v56[3]) >> 16;
                  if (v79 == 0xFFFF)
                  {
                    v80 = v55[2];
                    v81 = bswap32(v55[3]) >> 16;
                    if (!v45)
                      v81 = -1;
                    *(_DWORD *)v56 = *(_DWORD *)v55;
                    v56[2] = v80;
                    v56[3] = bswap32(v81) >> 16;
                  }
                  else if (v79)
                  {
                    v82 = bswap32(v55[3]) >> 16;
                    v83 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v82 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                    if (v45)
                      v84 = v82;
                    else
                      v84 = -1;
                    RGBA64_DAM(v56, v83, v84, v79);
                  }
                  else
                  {
                    *(_QWORD *)v56 = 0;
                  }
                  v85 = &v55[4 * (int)v44];
                  if ((unint64_t)v85 >= v46)
                    v86 = -(uint64_t)(int)v647;
                  else
                    v86 = 0;
                  v55 = &v85[4 * v86];
                  v56 += 4 * (int)v44;
                  --v78;
                }
                while (v78);
                v56 += 4 * v656;
                v87 = v664;
                v88 = &v664[4 * v662];
                v89 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v88 < v657)
                  v89 = 0;
                v90 = &v88[4 * v89];
                v91 = v46 + 8 * v89 + 8 * v662;
                if (v657)
                {
                  v46 = v91;
                  v87 = v90;
                }
                v664 = v87;
                if (v657)
                  v55 = v90;
                else
                  v55 += 4 * v662;
                v77 = v651 - 1;
              }
              while (v651 != 1);
              goto LABEL_662;
            case 4:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v92 = v666[0];
              do
              {
                v652 = v92;
                v93 = v659;
                do
                {
                  v94 = bswap32(~v56[3]) >> 16;
                  if (v94 == 0xFFFF)
                  {
                    v95 = v55[2];
                    v96 = bswap32(v55[3]) >> 16;
                    if (!v45)
                      v96 = -1;
                    *(_DWORD *)v56 = *(_DWORD *)v55;
                    v56[2] = v95;
                    v56[3] = bswap32(v96) >> 16;
                  }
                  else if (v94)
                  {
                    v97 = bswap32(v55[3]) >> 16;
                    v98 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v97 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                    if (v45)
                      v99 = v97;
                    else
                      v99 = -1;
                    RGBA64_DAM(v56, v98, v99, v94);
                  }
                  else
                  {
                    *(_QWORD *)v56 = 0;
                  }
                  v100 = &v55[4 * (int)v44];
                  if ((unint64_t)v100 >= v46)
                    v101 = -(uint64_t)(int)v647;
                  else
                    v101 = 0;
                  v55 = &v100[4 * v101];
                  v56 += 4 * (int)v44;
                  --v93;
                }
                while (v93);
                v56 += 4 * v656;
                v102 = v664;
                v103 = &v664[4 * v662];
                v104 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v103 < v657)
                  v104 = 0;
                v105 = &v103[4 * v104];
                v106 = v46 + 8 * v104 + 8 * v662;
                if (v657)
                {
                  v46 = v106;
                  v102 = v105;
                }
                v664 = v102;
                if (v657)
                  v55 = v105;
                else
                  v55 += 4 * v662;
                v92 = v652 - 1;
              }
              while (v652 != 1);
              goto LABEL_662;
            case 5:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v107 = v666[0];
              do
              {
                v108 = v659;
                do
                {
                  v109 = bswap32(v55[3]) >> 16;
                  v110 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v109 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v110, (v110 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v109 ^ 0xFFFF);
                  v111 = &v55[4 * (int)v44];
                  if ((unint64_t)v111 >= v46)
                    v112 = -(uint64_t)(int)v647;
                  else
                    v112 = 0;
                  v55 = &v111[4 * v112];
                  v56 += 4 * (int)v44;
                  --v108;
                }
                while (v108);
                v56 += 4 * v656;
                v113 = v664;
                v114 = &v664[4 * v662];
                v115 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v114 < v657)
                  v115 = 0;
                v116 = &v114[4 * v115];
                v117 = v46 + 8 * v115 + 8 * v662;
                if (v657)
                {
                  v46 = v117;
                  v113 = v116;
                }
                v664 = v113;
                if (v657)
                  v55 = v116;
                else
                  v55 += 4 * v662;
                --v107;
              }
              while (v107);
              goto LABEL_662;
            case 6:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v118 = v666[0];
              do
              {
                v653 = v118;
                v119 = v659;
                do
                {
                  v120 = bswap32(v56[3]);
                  if (HIWORD(v120) != 0xFFFF)
                  {
                    if ((unsigned __int16)~HIWORD(v120) == 0xFFFF)
                    {
                      v121 = v55[2];
                      v122 = bswap32(v55[3]) >> 16;
                      if (!v45)
                        v122 = -1;
                      *(_DWORD *)v56 = *(_DWORD *)v55;
                      v56[2] = v121;
                      v56[3] = bswap32(v122) >> 16;
                    }
                    else
                    {
                      v123 = HIWORD(v120);
                      v124 = ~HIWORD(v120);
                      v125 = (v123 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                      v126 = bswap32(v55[3]) >> 16;
                      v127 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v126 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                      if (v45)
                        v128 = v126;
                      else
                        v128 = -1;
                      RGBA64_DplusDAM(v56, v125, v127, v128, (unsigned __int16)v124);
                    }
                  }
                  v129 = &v55[4 * (int)v44];
                  if ((unint64_t)v129 >= v46)
                    v130 = -(uint64_t)(int)v647;
                  else
                    v130 = 0;
                  v55 = &v129[4 * v130];
                  v56 += 4 * (int)v44;
                  --v119;
                }
                while (v119);
                v56 += 4 * v656;
                v131 = v664;
                v132 = &v664[4 * v662];
                v133 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v132 < v657)
                  v133 = 0;
                v134 = &v132[4 * v133];
                v135 = v46 + 8 * v133 + 8 * v662;
                if (v657)
                {
                  v46 = v135;
                  v131 = v134;
                }
                v664 = v131;
                if (v657)
                  v55 = v134;
                else
                  v55 += 4 * v662;
                v118 = v653 - 1;
              }
              while (v653 != 1);
              goto LABEL_662;
            case 7:
              v136 = v666[0];
              do
              {
                v137 = v659;
                do
                {
                  v138 = bswap32(v55[3]) >> 16;
                  if (v138 != 0xFFFF)
                  {
                    if (v138)
                    {
                      v139 = bswap32(v56[1] | (*v56 << 16));
                      v140.i32[0] = (unsigned __int16)v139;
                      v140.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v139), 0x10uLL).i32[1];
                      v140.i64[1] = __PAIR64__(bswap32(v56[3]) >> 16, bswap32(v56[2]) >> 16);
                      v141.i64[0] = 0x800000008000;
                      v141.i64[1] = 0x800000008000;
                      v142 = (uint32x4_t)vmlaq_s32(v141, v140, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v138)));
                      v140.i32[0] = v139;
                      *(int8x8_t *)v56 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v140, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v142, v142, 0x10uLL), 0x10uLL))));
                    }
                    else
                    {
                      *(_QWORD *)v56 = 0;
                    }
                  }
                  v143 = &v55[4 * (int)v44];
                  if ((unint64_t)v143 >= v46)
                    v144 = -(uint64_t)(int)v647;
                  else
                    v144 = 0;
                  v55 = &v143[4 * v144];
                  v56 += 4 * (int)v44;
                  --v137;
                }
                while (v137);
                v56 += 4 * v656;
                v145 = v664;
                v146 = &v664[4 * v662];
                if ((unint64_t)v146 >= v657)
                  v147 = -(uint64_t)(v662 * v639);
                else
                  v147 = 0;
                v148 = &v146[4 * v147];
                v149 = v46 + 8 * v147 + 8 * v662;
                if (v657)
                {
                  v46 = v149;
                  v145 = v148;
                }
                v664 = v145;
                if (v657)
                  v55 = v148;
                else
                  v55 += 4 * v662;
                --v136;
              }
              while (v136);
              goto LABEL_721;
            case 8:
              v150 = v666[0];
              do
              {
                v151 = v659;
                do
                {
                  v152 = bswap32(~v55[3]) >> 16;
                  if (v152 != 0xFFFF)
                  {
                    if (v152)
                    {
                      v153 = bswap32(v56[1] | (*v56 << 16));
                      v154.i32[0] = (unsigned __int16)v153;
                      v154.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v153), 0x10uLL).i32[1];
                      v154.i64[1] = __PAIR64__(bswap32(v56[3]) >> 16, bswap32(v56[2]) >> 16);
                      v155.i64[0] = 0x800000008000;
                      v155.i64[1] = 0x800000008000;
                      v156 = (uint32x4_t)vmlaq_s32(v155, v154, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v152)));
                      v154.i32[0] = v153;
                      *(int8x8_t *)v56 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v154, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v156, v156, 0x10uLL), 0x10uLL))));
                    }
                    else
                    {
                      *(_QWORD *)v56 = 0;
                    }
                  }
                  v157 = &v55[4 * (int)v44];
                  if ((unint64_t)v157 >= v46)
                    v158 = -(uint64_t)(int)v647;
                  else
                    v158 = 0;
                  v55 = &v157[4 * v158];
                  v56 += 4 * (int)v44;
                  --v151;
                }
                while (v151);
                v56 += 4 * v656;
                v159 = v664;
                v160 = &v664[4 * v662];
                if ((unint64_t)v160 >= v657)
                  v161 = -(uint64_t)(v662 * v639);
                else
                  v161 = 0;
                v162 = &v160[4 * v161];
                v163 = v46 + 8 * v161 + 8 * v662;
                if (v657)
                {
                  v46 = v163;
                  v159 = v162;
                }
                v664 = v159;
                if (v657)
                  v55 = v162;
                else
                  v55 += 4 * v662;
                --v150;
              }
              while (v150);
LABEL_721:
              v666[0] = 0;
              goto LABEL_663;
            case 9:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v164 = v666[0];
              do
              {
                v165 = v659;
                do
                {
                  v166 = bswap32(v55[3]) >> 16;
                  v167 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v166 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v167 ^ 0xFFFF, (v167 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v166);
                  v168 = &v55[4 * (int)v44];
                  if ((unint64_t)v168 >= v46)
                    v169 = -(uint64_t)(int)v647;
                  else
                    v169 = 0;
                  v55 = &v168[4 * v169];
                  v56 += 4 * (int)v44;
                  --v165;
                }
                while (v165);
                v56 += 4 * v656;
                v170 = v664;
                v171 = &v664[4 * v662];
                v172 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v171 < v657)
                  v172 = 0;
                v173 = &v171[4 * v172];
                v174 = v46 + 8 * v172 + 8 * v662;
                if (v657)
                {
                  v46 = v174;
                  v170 = v173;
                }
                v664 = v170;
                if (v657)
                  v55 = v173;
                else
                  v55 += 4 * v662;
                --v164;
              }
              while (v164);
              goto LABEL_662;
            case 10:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v175 = v666[0];
              do
              {
                v176 = v659;
                do
                {
                  v177 = bswap32(v55[3]) >> 16;
                  v178 = bswap32(v56[3]) >> 16;
                  RGBA64_DMplusDM(v56, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v177 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v178 ^ 0xFFFF, (v178 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16), v177 ^ 0xFFFF);
                  v179 = &v55[4 * (int)v44];
                  if ((unint64_t)v179 >= v46)
                    v180 = -(uint64_t)(int)v647;
                  else
                    v180 = 0;
                  v55 = &v179[4 * v180];
                  v56 += 4 * (int)v44;
                  --v176;
                }
                while (v176);
                v56 += 4 * v656;
                v181 = v664;
                v182 = &v664[4 * v662];
                v183 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v182 < v657)
                  v183 = 0;
                v184 = &v182[4 * v183];
                v185 = v46 + 8 * v183 + 8 * v662;
                if (v657)
                {
                  v46 = v185;
                  v181 = v184;
                }
                v664 = v181;
                if (v657)
                  v55 = v184;
                else
                  v55 += 4 * v662;
                --v175;
              }
              while (v175);
              goto LABEL_662;
            case 11:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v186 = v666[0];
              do
              {
                v187 = v659;
                do
                {
                  v188 = bswap32(v56[3]) >> 16;
                  v189 = ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | (v188 << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                  if (v10)
                    v190 = v188;
                  else
                    v190 = -1;
                  v191 = bswap32(v55[3]) >> 16;
                  v192 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v191 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                  if (v45)
                    v193 = v191;
                  else
                    v193 = -1;
                  RGBA64_DAplusdDA(v56, v189, v190, v192, v193);
                  v194 = &v55[4 * (int)v44];
                  if ((unint64_t)v194 >= v46)
                    v195 = -(uint64_t)(int)v647;
                  else
                    v195 = 0;
                  v55 = &v194[4 * v195];
                  v56 += 4 * (int)v44;
                  --v187;
                }
                while (v187);
                v56 += 4 * v656;
                v196 = v664;
                v197 = &v664[4 * v662];
                v198 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v197 < v657)
                  v198 = 0;
                v199 = &v197[4 * v198];
                v200 = v46 + 8 * v198 + 8 * v662;
                if (v657)
                {
                  v46 = v200;
                  v196 = v199;
                }
                v664 = v196;
                if (v657)
                  v55 = v199;
                else
                  v55 += 4 * v662;
                --v186;
              }
              while (v186);
              goto LABEL_662;
            case 12:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v201 = v666[0];
              do
              {
                v202 = v659;
                do
                {
                  v203 = ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
                  v204 = bswap32(v55[3]) >> 16;
                  v205 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (v204 << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
                  if (v45)
                    v206 = v204;
                  else
                    v206 = -1;
                  RGBA64_DpluslDA(v56, v203, v205, v206);
                  v207 = &v55[4 * (int)v44];
                  if ((unint64_t)v207 >= v46)
                    v208 = -(uint64_t)(int)v647;
                  else
                    v208 = 0;
                  v55 = &v207[4 * v208];
                  v56 += 4 * (int)v44;
                  --v202;
                }
                while (v202);
                v56 += 4 * v656;
                v209 = v664;
                v210 = &v664[4 * v662];
                v211 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v210 < v657)
                  v211 = 0;
                v212 = &v210[4 * v211];
                v213 = v46 + 8 * v211 + 8 * v662;
                if (v657)
                {
                  v46 = v213;
                  v209 = v212;
                }
                v664 = v209;
                if (v657)
                  v55 = v212;
                else
                  v55 += 4 * v662;
                --v201;
              }
              while (v201);
              goto LABEL_662;
            case 13:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v214 = v666[0];
              while (1)
              {
                v215 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_300;
                    LODWORD(v216) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v216) = 0xFFFF;
                  }
                  v217 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v218 = 0xFFFF;
LABEL_298:
                    v220 = PDAmultiplyPDA_13494((v217 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v218, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v216);
                    v216 = HIWORD(v220);
                    v221 = bswap32(v220);
                    *v56 = HIWORD(v221);
                    v56[1] = v221;
                    v56[2] = bswap32(HIDWORD(v220)) >> 16;
                    goto LABEL_299;
                  }
                  v218 = v217;
                  if (v56[3])
                    goto LABEL_298;
                  v219 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v219;
LABEL_299:
                  v56[3] = __rev16(v216);
LABEL_300:
                  v222 = &v55[4 * (int)v44];
                  if ((unint64_t)v222 >= v46)
                    v223 = -(uint64_t)(int)v647;
                  else
                    v223 = 0;
                  v55 = &v222[4 * v223];
                  v56 += 4 * (int)v44;
                  --v215;
                }
                while (v215);
                v56 += 4 * v656;
                v224 = v664;
                v225 = &v664[4 * v662];
                v226 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v225 < v657)
                  v226 = 0;
                v227 = &v225[4 * v226];
                v228 = v46 + 8 * v226 + 8 * v662;
                if (v657)
                {
                  v46 = v228;
                  v224 = v227;
                }
                v664 = v224;
                if (v657)
                  v55 = v227;
                else
                  v55 += 4 * v662;
                if (!--v214)
                  goto LABEL_662;
              }
            case 14:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v229 = v666[0];
              while (1)
              {
                v230 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_325;
                    LODWORD(v231) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v231) = 0xFFFF;
                  }
                  v232 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v233 = 0xFFFF;
LABEL_323:
                    v235 = PDAscreenPDA_13495((v232 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v233, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v231);
                    v231 = HIWORD(v235);
                    v236 = bswap32(v235);
                    *v56 = HIWORD(v236);
                    v56[1] = v236;
                    v56[2] = bswap32(HIDWORD(v235)) >> 16;
                    goto LABEL_324;
                  }
                  v233 = v232;
                  if (v56[3])
                    goto LABEL_323;
                  v234 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v234;
LABEL_324:
                  v56[3] = __rev16(v231);
LABEL_325:
                  v237 = &v55[4 * (int)v44];
                  if ((unint64_t)v237 >= v46)
                    v238 = -(uint64_t)(int)v647;
                  else
                    v238 = 0;
                  v55 = &v237[4 * v238];
                  v56 += 4 * (int)v44;
                  --v230;
                }
                while (v230);
                v56 += 4 * v656;
                v239 = v664;
                v240 = &v664[4 * v662];
                v241 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v240 < v657)
                  v241 = 0;
                v242 = &v240[4 * v241];
                v243 = v46 + 8 * v241 + 8 * v662;
                if (v657)
                {
                  v46 = v243;
                  v239 = v242;
                }
                v664 = v239;
                if (v657)
                  v55 = v242;
                else
                  v55 += 4 * v662;
                if (!--v229)
                  goto LABEL_662;
              }
            case 15:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v244 = v666[0];
              while (1)
              {
                v245 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_350;
                    LODWORD(v246) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v246) = 0xFFFF;
                  }
                  v247 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v248 = 0xFFFF;
LABEL_348:
                    v250 = PDAoverlayPDA_13496((v247 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v248, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v246);
                    v246 = HIWORD(v250);
                    v251 = bswap32(v250);
                    *v56 = HIWORD(v251);
                    v56[1] = v251;
                    v56[2] = bswap32(HIDWORD(v250)) >> 16;
                    goto LABEL_349;
                  }
                  v248 = v247;
                  if (v56[3])
                    goto LABEL_348;
                  v249 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v249;
LABEL_349:
                  v56[3] = __rev16(v246);
LABEL_350:
                  v252 = &v55[4 * (int)v44];
                  if ((unint64_t)v252 >= v46)
                    v253 = -(uint64_t)(int)v647;
                  else
                    v253 = 0;
                  v55 = &v252[4 * v253];
                  v56 += 4 * (int)v44;
                  --v245;
                }
                while (v245);
                v56 += 4 * v656;
                v254 = v664;
                v255 = &v664[4 * v662];
                v256 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v255 < v657)
                  v256 = 0;
                v257 = &v255[4 * v256];
                v258 = v46 + 8 * v256 + 8 * v662;
                if (v657)
                {
                  v46 = v258;
                  v254 = v257;
                }
                v664 = v254;
                if (v657)
                  v55 = v257;
                else
                  v55 += 4 * v662;
                if (!--v244)
                  goto LABEL_662;
              }
            case 16:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v259 = v666[0];
              while (1)
              {
                v260 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_375;
                    LODWORD(v261) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v261) = 0xFFFF;
                  }
                  v262 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v263 = 0xFFFF;
LABEL_373:
                    v265 = PDAdarkenPDA_13498((v262 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v263, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v261);
                    v261 = HIWORD(v265);
                    v266 = bswap32(v265);
                    *v56 = HIWORD(v266);
                    v56[1] = v266;
                    v56[2] = bswap32(HIDWORD(v265)) >> 16;
                    goto LABEL_374;
                  }
                  v263 = v262;
                  if (v56[3])
                    goto LABEL_373;
                  v264 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v264;
LABEL_374:
                  v56[3] = __rev16(v261);
LABEL_375:
                  v267 = &v55[4 * (int)v44];
                  if ((unint64_t)v267 >= v46)
                    v268 = -(uint64_t)(int)v647;
                  else
                    v268 = 0;
                  v55 = &v267[4 * v268];
                  v56 += 4 * (int)v44;
                  --v260;
                }
                while (v260);
                v56 += 4 * v656;
                v269 = v664;
                v270 = &v664[4 * v662];
                v271 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v270 < v657)
                  v271 = 0;
                v272 = &v270[4 * v271];
                v273 = v46 + 8 * v271 + 8 * v662;
                if (v657)
                {
                  v46 = v273;
                  v269 = v272;
                }
                v664 = v269;
                if (v657)
                  v55 = v272;
                else
                  v55 += 4 * v662;
                if (!--v259)
                  goto LABEL_662;
              }
            case 17:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v274 = v666[0];
              while (1)
              {
                v275 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_400;
                    LODWORD(v276) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v276) = 0xFFFF;
                  }
                  v277 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v278 = 0xFFFF;
LABEL_398:
                    v280 = PDAlightenPDA_13497((v277 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v278, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v276);
                    v276 = HIWORD(v280);
                    v281 = bswap32(v280);
                    *v56 = HIWORD(v281);
                    v56[1] = v281;
                    v56[2] = bswap32(HIDWORD(v280)) >> 16;
                    goto LABEL_399;
                  }
                  v278 = v277;
                  if (v56[3])
                    goto LABEL_398;
                  v279 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v279;
LABEL_399:
                  v56[3] = __rev16(v276);
LABEL_400:
                  v282 = &v55[4 * (int)v44];
                  if ((unint64_t)v282 >= v46)
                    v283 = -(uint64_t)(int)v647;
                  else
                    v283 = 0;
                  v55 = &v282[4 * v283];
                  v56 += 4 * (int)v44;
                  --v275;
                }
                while (v275);
                v56 += 4 * v656;
                v284 = v664;
                v285 = &v664[4 * v662];
                v286 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v285 < v657)
                  v286 = 0;
                v287 = &v285[4 * v286];
                v288 = v46 + 8 * v286 + 8 * v662;
                if (v657)
                {
                  v46 = v288;
                  v284 = v287;
                }
                v664 = v284;
                if (v657)
                  v55 = v287;
                else
                  v55 += 4 * v662;
                if (!--v274)
                  goto LABEL_662;
              }
            case 18:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v289 = v666[0];
              while (1)
              {
                v290 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_425;
                    LODWORD(v291) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v291) = 0xFFFF;
                  }
                  v292 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v293 = 0xFFFF;
LABEL_423:
                    v295 = PDAcolordodgePDA_13499((v292 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v293, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v291);
                    v291 = HIWORD(v295);
                    v296 = bswap32(v295);
                    *v56 = HIWORD(v296);
                    v56[1] = v296;
                    v56[2] = bswap32(HIDWORD(v295)) >> 16;
                    goto LABEL_424;
                  }
                  v293 = v292;
                  if (v56[3])
                    goto LABEL_423;
                  v294 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v294;
LABEL_424:
                  v56[3] = __rev16(v291);
LABEL_425:
                  v297 = &v55[4 * (int)v44];
                  if ((unint64_t)v297 >= v46)
                    v298 = -(uint64_t)(int)v647;
                  else
                    v298 = 0;
                  v55 = &v297[4 * v298];
                  v56 += 4 * (int)v44;
                  --v290;
                }
                while (v290);
                v56 += 4 * v656;
                v299 = v664;
                v300 = &v664[4 * v662];
                v301 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v300 < v657)
                  v301 = 0;
                v302 = &v300[4 * v301];
                v303 = v46 + 8 * v301 + 8 * v662;
                if (v657)
                {
                  v46 = v303;
                  v299 = v302;
                }
                v664 = v299;
                if (v657)
                  v55 = v302;
                else
                  v55 += 4 * v662;
                if (!--v289)
                  goto LABEL_662;
              }
            case 19:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v304 = v666[0];
              while (1)
              {
                v305 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_450;
                    LODWORD(v306) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v306) = 0xFFFF;
                  }
                  v307 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v308 = 0xFFFF;
LABEL_448:
                    v310 = PDAcolorburnPDA_13500((v307 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v308, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v306);
                    v306 = HIWORD(v310);
                    v311 = bswap32(v310);
                    *v56 = HIWORD(v311);
                    v56[1] = v311;
                    v56[2] = bswap32(HIDWORD(v310)) >> 16;
                    goto LABEL_449;
                  }
                  v308 = v307;
                  if (v56[3])
                    goto LABEL_448;
                  v309 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v309;
LABEL_449:
                  v56[3] = __rev16(v306);
LABEL_450:
                  v312 = &v55[4 * (int)v44];
                  if ((unint64_t)v312 >= v46)
                    v313 = -(uint64_t)(int)v647;
                  else
                    v313 = 0;
                  v55 = &v312[4 * v313];
                  v56 += 4 * (int)v44;
                  --v305;
                }
                while (v305);
                v56 += 4 * v656;
                v314 = v664;
                v315 = &v664[4 * v662];
                v316 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v315 < v657)
                  v316 = 0;
                v317 = &v315[4 * v316];
                v318 = v46 + 8 * v316 + 8 * v662;
                if (v657)
                {
                  v46 = v318;
                  v314 = v317;
                }
                v664 = v314;
                if (v657)
                  v55 = v317;
                else
                  v55 += 4 * v662;
                if (!--v304)
                  goto LABEL_662;
              }
            case 20:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v319 = v666[0];
              while (1)
              {
                v320 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_475;
                    LODWORD(v321) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v321) = 0xFFFF;
                  }
                  v322 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v323 = 0xFFFF;
LABEL_473:
                    v325 = PDAsoftlightPDA_13502((v322 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v323, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v321);
                    v321 = HIWORD(v325);
                    v326 = bswap32(v325);
                    *v56 = HIWORD(v326);
                    v56[1] = v326;
                    v56[2] = bswap32(HIDWORD(v325)) >> 16;
                    goto LABEL_474;
                  }
                  v323 = v322;
                  if (v56[3])
                    goto LABEL_473;
                  v324 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v324;
LABEL_474:
                  v56[3] = __rev16(v321);
LABEL_475:
                  v327 = &v55[4 * (int)v44];
                  if ((unint64_t)v327 >= v46)
                    v328 = -(uint64_t)(int)v647;
                  else
                    v328 = 0;
                  v55 = &v327[4 * v328];
                  v56 += 4 * (int)v44;
                  --v320;
                }
                while (v320);
                v56 += 4 * v656;
                v329 = v664;
                v330 = &v664[4 * v662];
                v331 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v330 < v657)
                  v331 = 0;
                v332 = &v330[4 * v331];
                v333 = v46 + 8 * v331 + 8 * v662;
                if (v657)
                {
                  v46 = v333;
                  v329 = v332;
                }
                v664 = v329;
                if (v657)
                  v55 = v332;
                else
                  v55 += 4 * v662;
                if (!--v319)
                  goto LABEL_662;
              }
            case 21:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v334 = v666[0];
              while (1)
              {
                v335 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_500;
                    LODWORD(v336) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v336) = 0xFFFF;
                  }
                  v337 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v338 = 0xFFFF;
LABEL_498:
                    v340 = PDAhardlightPDA_13501((v337 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v338, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v336);
                    v336 = HIWORD(v340);
                    v341 = bswap32(v340);
                    *v56 = HIWORD(v341);
                    v56[1] = v341;
                    v56[2] = bswap32(HIDWORD(v340)) >> 16;
                    goto LABEL_499;
                  }
                  v338 = v337;
                  if (v56[3])
                    goto LABEL_498;
                  v339 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v339;
LABEL_499:
                  v56[3] = __rev16(v336);
LABEL_500:
                  v342 = &v55[4 * (int)v44];
                  if ((unint64_t)v342 >= v46)
                    v343 = -(uint64_t)(int)v647;
                  else
                    v343 = 0;
                  v55 = &v342[4 * v343];
                  v56 += 4 * (int)v44;
                  --v335;
                }
                while (v335);
                v56 += 4 * v656;
                v344 = v664;
                v345 = &v664[4 * v662];
                v346 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v345 < v657)
                  v346 = 0;
                v347 = &v345[4 * v346];
                v348 = v46 + 8 * v346 + 8 * v662;
                if (v657)
                {
                  v46 = v348;
                  v344 = v347;
                }
                v664 = v344;
                if (v657)
                  v55 = v347;
                else
                  v55 += 4 * v662;
                if (!--v334)
                  goto LABEL_662;
              }
            case 22:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v349 = v666[0];
              while (1)
              {
                v350 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_525;
                    LODWORD(v351) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v351) = 0xFFFF;
                  }
                  v352 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v353 = 0xFFFF;
LABEL_523:
                    v355 = PDAdifferencePDA_13503((v352 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v353, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v351);
                    v351 = HIWORD(v355);
                    v356 = bswap32(v355);
                    *v56 = HIWORD(v356);
                    v56[1] = v356;
                    v56[2] = bswap32(HIDWORD(v355)) >> 16;
                    goto LABEL_524;
                  }
                  v353 = v352;
                  if (v56[3])
                    goto LABEL_523;
                  v354 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v354;
LABEL_524:
                  v56[3] = __rev16(v351);
LABEL_525:
                  v357 = &v55[4 * (int)v44];
                  if ((unint64_t)v357 >= v46)
                    v358 = -(uint64_t)(int)v647;
                  else
                    v358 = 0;
                  v55 = &v357[4 * v358];
                  v56 += 4 * (int)v44;
                  --v350;
                }
                while (v350);
                v56 += 4 * v656;
                v359 = v664;
                v360 = &v664[4 * v662];
                v361 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v360 < v657)
                  v361 = 0;
                v362 = &v360[4 * v361];
                v363 = v46 + 8 * v361 + 8 * v662;
                if (v657)
                {
                  v46 = v363;
                  v359 = v362;
                }
                v664 = v359;
                if (v657)
                  v55 = v362;
                else
                  v55 += 4 * v662;
                if (!--v349)
                  goto LABEL_662;
              }
            case 23:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v364 = v666[0];
              while (1)
              {
                v365 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_550;
                    LODWORD(v366) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v366) = 0xFFFF;
                  }
                  v367 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v368 = 0xFFFF;
LABEL_548:
                    v370 = PDAexclusionPDA_13504((v367 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v368, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v366);
                    v366 = HIWORD(v370);
                    v371 = bswap32(v370);
                    *v56 = HIWORD(v371);
                    v56[1] = v371;
                    v56[2] = bswap32(HIDWORD(v370)) >> 16;
                    goto LABEL_549;
                  }
                  v368 = v367;
                  if (v56[3])
                    goto LABEL_548;
                  v369 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v369;
LABEL_549:
                  v56[3] = __rev16(v366);
LABEL_550:
                  v372 = &v55[4 * (int)v44];
                  if ((unint64_t)v372 >= v46)
                    v373 = -(uint64_t)(int)v647;
                  else
                    v373 = 0;
                  v55 = &v372[4 * v373];
                  v56 += 4 * (int)v44;
                  --v365;
                }
                while (v365);
                v56 += 4 * v656;
                v374 = v664;
                v375 = &v664[4 * v662];
                v376 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v375 < v657)
                  v376 = 0;
                v377 = &v375[4 * v376];
                v378 = v46 + 8 * v376 + 8 * v662;
                if (v657)
                {
                  v46 = v378;
                  v374 = v377;
                }
                v664 = v374;
                if (v657)
                  v55 = v377;
                else
                  v55 += 4 * v662;
                if (!--v364)
                  goto LABEL_662;
              }
            case 24:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v379 = v666[0];
              while (1)
              {
                v380 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_575;
                    LODWORD(v381) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v381) = 0xFFFF;
                  }
                  v382 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v383 = 0xFFFF;
LABEL_573:
                    v385 = PDAhuePDA_13505((v382 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v383, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v381);
                    v381 = HIWORD(v385);
                    v386 = bswap32(v385);
                    *v56 = HIWORD(v386);
                    v56[1] = v386;
                    v56[2] = bswap32(HIDWORD(v385)) >> 16;
                    goto LABEL_574;
                  }
                  v383 = v382;
                  if (v56[3])
                    goto LABEL_573;
                  v384 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v384;
LABEL_574:
                  v56[3] = __rev16(v381);
LABEL_575:
                  v387 = &v55[4 * (int)v44];
                  if ((unint64_t)v387 >= v46)
                    v388 = -(uint64_t)(int)v647;
                  else
                    v388 = 0;
                  v55 = &v387[4 * v388];
                  v56 += 4 * (int)v44;
                  --v380;
                }
                while (v380);
                v56 += 4 * v656;
                v389 = v664;
                v390 = &v664[4 * v662];
                v391 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v390 < v657)
                  v391 = 0;
                v392 = &v390[4 * v391];
                v393 = v46 + 8 * v391 + 8 * v662;
                if (v657)
                {
                  v46 = v393;
                  v389 = v392;
                }
                v664 = v389;
                if (v657)
                  v55 = v392;
                else
                  v55 += 4 * v662;
                if (!--v379)
                  goto LABEL_662;
              }
            case 25:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v394 = v666[0];
              while (1)
              {
                v395 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_600;
                    LODWORD(v396) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v396) = 0xFFFF;
                  }
                  v397 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v398 = 0xFFFF;
LABEL_598:
                    v400 = PDAsaturationPDA_13506((v397 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v398, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v396);
                    v396 = HIWORD(v400);
                    v401 = bswap32(v400);
                    *v56 = HIWORD(v401);
                    v56[1] = v401;
                    v56[2] = bswap32(HIDWORD(v400)) >> 16;
                    goto LABEL_599;
                  }
                  v398 = v397;
                  if (v56[3])
                    goto LABEL_598;
                  v399 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v399;
LABEL_599:
                  v56[3] = __rev16(v396);
LABEL_600:
                  v402 = &v55[4 * (int)v44];
                  if ((unint64_t)v402 >= v46)
                    v403 = -(uint64_t)(int)v647;
                  else
                    v403 = 0;
                  v55 = &v402[4 * v403];
                  v56 += 4 * (int)v44;
                  --v395;
                }
                while (v395);
                v56 += 4 * v656;
                v404 = v664;
                v405 = &v664[4 * v662];
                v406 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v405 < v657)
                  v406 = 0;
                v407 = &v405[4 * v406];
                v408 = v46 + 8 * v406 + 8 * v662;
                if (v657)
                {
                  v46 = v408;
                  v404 = v407;
                }
                v664 = v404;
                if (v657)
                  v55 = v407;
                else
                  v55 += 4 * v662;
                if (!--v394)
                  goto LABEL_662;
              }
            case 26:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v409 = v666[0];
              while (1)
              {
                v410 = v659;
                do
                {
                  if (v45)
                  {
                    if (!v55[3])
                      goto LABEL_625;
                    LODWORD(v411) = __rev16(v55[3]);
                  }
                  else
                  {
                    LODWORD(v411) = 0xFFFF;
                  }
                  v412 = __rev16(v56[3]);
                  if (!v10)
                  {
                    v413 = 0xFFFF;
LABEL_623:
                    v415 = PDAluminosityPDA_13507(((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v411, (v412 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v413);
                    v411 = HIWORD(v415);
                    v416 = bswap32(v415);
                    *v56 = HIWORD(v416);
                    v56[1] = v416;
                    v56[2] = bswap32(HIDWORD(v415)) >> 16;
                    goto LABEL_624;
                  }
                  v413 = v412;
                  if (v56[3])
                    goto LABEL_623;
                  v414 = v55[2];
                  *(_DWORD *)v56 = *(_DWORD *)v55;
                  v56[2] = v414;
LABEL_624:
                  v56[3] = __rev16(v411);
LABEL_625:
                  v417 = &v55[4 * (int)v44];
                  if ((unint64_t)v417 >= v46)
                    v418 = -(uint64_t)(int)v647;
                  else
                    v418 = 0;
                  v55 = &v417[4 * v418];
                  v56 += 4 * (int)v44;
                  --v410;
                }
                while (v410);
                v56 += 4 * v656;
                v419 = v664;
                v420 = &v664[4 * v662];
                v421 = -(uint64_t)(v662 * v639);
                if ((unint64_t)v420 < v657)
                  v421 = 0;
                v422 = &v420[4 * v421];
                v423 = v46 + 8 * v421 + 8 * v662;
                if (v657)
                {
                  v46 = v423;
                  v419 = v422;
                }
                v664 = v419;
                if (v657)
                  v55 = v422;
                else
                  v55 += 4 * v662;
                if (!--v409)
                  goto LABEL_662;
              }
            case 27:
              v642 = v34;
              v643 = v35;
              v644 = v36;
              v641 = v44;
              v424 = v666[0];
              break;
            default:
              goto LABEL_663;
          }
          break;
        }
LABEL_639:
        v425 = v659;
        while (v45)
        {
          if (v55[3])
          {
            LODWORD(v426) = __rev16(v55[3]);
            goto LABEL_644;
          }
LABEL_650:
          v432 = &v55[4 * (int)v44];
          if ((unint64_t)v432 >= v46)
            v433 = -(uint64_t)(int)v647;
          else
            v433 = 0;
          v55 = &v432[4 * v433];
          v56 += 4 * (int)v44;
          if (!--v425)
          {
            v56 += 4 * v656;
            v434 = v664;
            v435 = &v664[4 * v662];
            v436 = -(uint64_t)(v662 * v639);
            if ((unint64_t)v435 < v657)
              v436 = 0;
            v437 = &v435[4 * v436];
            v438 = v46 + 8 * v436 + 8 * v662;
            if (v657)
            {
              v46 = v438;
              v434 = v437;
            }
            v664 = v434;
            if (v657)
              v55 = v437;
            else
              v55 += 4 * v662;
            if (!--v424)
            {
LABEL_662:
              v666[0] = 0;
              v11 = v649;
              v35 = v643;
              v36 = v644;
              v44 = v641;
              v34 = v642;
              goto LABEL_663;
            }
            goto LABEL_639;
          }
        }
        LODWORD(v426) = 0xFFFF;
LABEL_644:
        v427 = __rev16(v56[3]);
        if (v10)
        {
          v428 = v427;
          if (!v56[3])
          {
            v429 = v55[2];
            *(_DWORD *)v56 = *(_DWORD *)v55;
            v56[2] = v429;
LABEL_649:
            v56[3] = __rev16(v426);
            goto LABEL_650;
          }
        }
        else
        {
          v428 = 0xFFFF;
        }
        v430 = PDAluminosityPDA_13507((v427 << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (bswap32(*v56) >> 16), v428, ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16), v426);
        v426 = HIWORD(v430);
        v431 = bswap32(v430);
        *v56 = HIWORD(v431);
        v56[1] = v431;
        v56[2] = bswap32(HIDWORD(v430)) >> 16;
        goto LABEL_649;
      }
      v656 = v35 - v13;
      v659 = v13;
      if (v34)
      {
        v646 = 0;
        v53 = v39 % (int)v647;
        v54 = v34 + 8 * (v42 >> 3) * (v40 % v639);
        v55 = (unsigned __int16 *)(v54 + 8 * v53);
        v46 = v54 + 8 * (int)v647;
        v44 = 1;
        v662 = v42 >> 3;
        v664 = v55;
        v56 = (unsigned __int16 *)v36;
        v634 = v40 % v639;
        v635 = v53;
        goto LABEL_59;
      }
      v634 = *(_DWORD *)(v5 + 60);
      v635 = *(_DWORD *)(v5 + 56);
      v46 = 0;
      v57 = v42 >> 3;
      v44 = 1;
      v58 = v13;
LABEL_58:
      v646 = 0;
      v657 = 0;
      v662 = v57 - v58;
      v664 = 0;
      v55 = (unsigned __int16 *)v34;
      v56 = (unsigned __int16 *)v36;
      goto LABEL_59;
    }
    v34 += 8 * (v39 + (v42 >> 3) * v40);
    v647 = v42 >> 3;
    if (v42 >> 3 == v35)
    {
      if ((uint64_t)(v36 - v34) < 1)
        goto LABEL_35;
      if (v13 < (v36 - v34) >> 3)
      {
        v43 = v35 * (v15 - 1);
        if (v36 <= v34 + 8 * v43 + 8 * v14)
        {
          v36 += 8 * v43;
          v35 = -(uint64_t)v35;
          v44 = 1;
          v34 += 8 * v43;
          goto LABEL_52;
        }
LABEL_35:
        v44 = 1;
LABEL_52:
        v647 = v35;
        goto LABEL_53;
      }
      v36 += 8 * v14;
      v44 = 0xFFFFFFFFLL;
      v647 = v35;
      v34 += 8 * v14;
    }
    else
    {
      v44 = 1;
    }
LABEL_53:
    v634 = v40;
    v635 = v39;
    v45 = v9 != 0;
    if (v16)
    {
      v639 = 0;
      v657 = 0;
      v46 = -1;
      v662 = v647;
      v664 = 0;
      goto LABEL_55;
    }
    v639 = 0;
    v659 = v13;
    v58 = (int)v44 * (int)v13;
    v656 = v35 - v58;
    v46 = -1;
    v57 = v647;
    goto LABEL_58;
  }
  if (BYTE1(v8) != 4)
    goto LABEL_30;
  v676[0] = *(_DWORD *)(v5 + 4);
  v666[0] = v15;
  v18 = *(unsigned __int16 **)(v5 + 88);
  v655 = *v18;
  v663 = v18[1];
  v19 = v18[2];
  v20 = v18[3];
  v21 = __rev16(v20);
  v638 = (int32x2_t)(__PAIR64__(__rev16(v663), bswap32(v655)) >> 16);
  v640 = ((unint64_t)__rev16(v19) << 32) | (v21 << 48);
  v22 = v640 | *(_QWORD *)&v638;
  v23 = ~(bswap32(v20) >> 16);
  v637 = *(int *)(v5 + 28);
  v24 = v637 >> 3;
  v25 = (unsigned __int16 *)(*(_QWORD *)(v5 + 40) + 8 * (*(int *)(v5 + 12) + (v637 >> 3) * *(int *)(v5 + 16)));
  v645 = v25;
  v661 = v23;
  if (v16)
  {
    shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, 1, 1, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v13, v15);
    v13 = v26;
    v27 = v655;
    if (v26)
      goto LABEL_980;
    return 1;
  }
  v648 = 0;
  v27 = *v18;
  while (2)
  {
    v658 = v24 - (int)v13;
    switch(v649)
    {
      case 0:
        v475 = v666[0];
        v476 = 8 * v13;
        goto LABEL_986;
      case 1:
        v477 = *(_QWORD *)(v636 + 88);
        if (v477)
        {
          CGSFillDRAM64(v25, v637 & 0xFFFFFFF8, 8 * v13, v666[0], v477, 8, 8, 1, 0, 0);
        }
        else
        {
          v476 = 8 * v13;
          v475 = v666[0];
LABEL_986:
          CGBlt_fillBytes(v476, v475, 0, (char *)v25, v637 & 0xFFFFFFF8);
        }
        goto LABEL_978;
      case 2:
        v654 = v666[0];
        do
        {
          if ((int)v13 < 4)
          {
            v481 = v13;
          }
          else
          {
            v478 = (v13 >> 2) + 1;
            do
            {
              RGBA64_DplusDM(v25, v22, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
              RGBA64_DplusDM(v25 + 4, v22, ((unint64_t)(bswap32(v25[6]) >> 16) << 32) | ((unint64_t)(bswap32(v25[7]) >> 16) << 48) | bswap32(v25[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v25[4]) >> 16), v661);
              RGBA64_DplusDM(v25 + 8, v22, ((unint64_t)(bswap32(v25[10]) >> 16) << 32) | ((unint64_t)(bswap32(v25[11]) >> 16) << 48) | bswap32(v25[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v25[8]) >> 16), v661);
              v480 = v25[12];
              v479 = v25 + 12;
              LOWORD(v23) = v661;
              RGBA64_DplusDM(v479, v22, ((unint64_t)(bswap32((unsigned __int16)v479[2]) >> 16) << 32) | ((unint64_t)(bswap32((unsigned __int16)v479[3]) >> 16) << 48) | bswap32((unsigned __int16)v479[1]) & 0xFFFF0000 | (unint64_t)(bswap32(v480) >> 16), v661);
              v25 = v479 + 4;
              --v478;
            }
            while (v478 > 1);
            v481 = v13 & 3;
            v24 = v637 >> 3;
          }
          if (v481 >= 1)
          {
            v482 = v481 + 1;
            do
            {
              RGBA64_DplusDM(v25, v22, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), (unsigned __int16)v23);
              v25 += 4;
              --v482;
            }
            while (v482 > 1);
            v27 = v655;
          }
          v25 += 4 * v658;
          --v654;
        }
        while (v654);
        goto LABEL_788;
      case 3:
        v483.i32[0] = v638.u16[0];
        v483.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(v638, 0), 0x10uLL).i32[1];
        v483.i32[2] = WORD2(v640);
        v483.i32[3] = v21;
        v484 = v483;
        v484.i32[0] = v638.i32[0];
        v484.i32[2] = HIDWORD(v640);
        v485 = v666[0];
        do
        {
          v486 = v13;
          do
          {
            v487 = bswap32(v25[3]) >> 16;
            if (v487 == 0xFFFF)
            {
              *v25 = v27;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else if (v487)
            {
              v488.i64[0] = 0x800000008000;
              v488.i64[1] = 0x800000008000;
              v489 = (uint32x4_t)vmlaq_s32(v488, v483, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v487)));
              *(int8x8_t *)v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v484, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v489, v489, 0x10uLL), 0x10uLL))));
            }
            else
            {
              *(_QWORD *)v25 = 0;
            }
            v25 += 4;
            --v486;
          }
          while (v486);
          v25 += 4 * v658;
          --v485;
        }
        while (v485);
        goto LABEL_788;
      case 4:
        v490.i32[0] = v638.u16[0];
        v490.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(v638, 0), 0x10uLL).i32[1];
        v490.i32[2] = WORD2(v640);
        v490.i32[3] = v21;
        v491 = v490;
        v491.i32[0] = v638.i32[0];
        v491.i32[2] = HIDWORD(v640);
        v492 = v666[0];
        do
        {
          v493 = v13;
          do
          {
            v494 = bswap32(~v25[3]) >> 16;
            if (v494 == 0xFFFF)
            {
              *v25 = v27;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else if (v494)
            {
              v495.i64[0] = 0x800000008000;
              v495.i64[1] = 0x800000008000;
              v496 = (uint32x4_t)vmlaq_s32(v495, v490, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(~v494)));
              *(int8x8_t *)v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v491, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v496, v496, 0x10uLL), 0x10uLL))));
            }
            else
            {
              *(_QWORD *)v25 = 0;
            }
            v25 += 4;
            --v493;
          }
          while (v493);
          v25 += 4 * v658;
          --v492;
        }
        while (v492);
        goto LABEL_788;
      case 5:
        v497 = v666[0];
        do
        {
          v498 = v13;
          do
          {
            v499 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v499, (v499 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
            v25 += 4;
            --v498;
          }
          while (v498);
          v25 += 4 * v658;
          --v497;
        }
        while (v497);
        goto LABEL_798;
      case 6:
        v500 = v666[0];
        v660 = v13;
        while (1)
        {
          v501 = bswap32(v25[3]);
          if (HIWORD(v501) != 0xFFFF)
          {
            if ((unsigned __int16)~HIWORD(v501) == 0xFFFF)
            {
              *v25 = v655;
              v25[1] = v663;
              v25[2] = v19;
              v25[3] = v20;
            }
            else
            {
              RGBA64_DplusDM(v25, ((unint64_t)HIWORD(v501) << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v22, (unsigned __int16)~HIWORD(v501));
            }
          }
          v25 += 4;
          LODWORD(v13) = v13 - 1;
          if (!(_DWORD)v13)
          {
            LODWORD(v13) = v660;
            v25 += 4 * v658;
            if (!--v500)
              break;
          }
        }
        goto LABEL_798;
      case 7:
        v502 = vdupq_n_s32((unsigned __int16)v23);
        v503 = v666[0];
        do
        {
          v504 = v13;
          do
          {
            v505 = bswap32(v25[1] | (*v25 << 16));
            v506.i32[0] = (unsigned __int16)v505;
            v506.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v505), 0x10uLL).i32[1];
            v506.i64[1] = __PAIR64__(bswap32(v25[3]) >> 16, bswap32(v25[2]) >> 16);
            v507.i64[0] = 0x800000008000;
            v507.i64[1] = 0x800000008000;
            v508 = (uint32x4_t)vmlaq_s32(v507, v506, v502);
            v506.i32[0] = v505;
            *(int8x8_t *)v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v506, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v508, v508, 0x10uLL), 0x10uLL))));
            v25 += 4;
            --v504;
          }
          while (v504);
          v25 += 4 * v658;
          --v503;
        }
        while (v503);
        goto LABEL_788;
      case 8:
        v509 = vdupq_n_s32(v21);
        v510 = v666[0];
        do
        {
          v511 = v13;
          do
          {
            v512 = bswap32(v25[1] | (*v25 << 16));
            v513.i32[0] = (unsigned __int16)v512;
            v513.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v512), 0x10uLL).i32[1];
            v513.i64[1] = __PAIR64__(bswap32(v25[3]) >> 16, bswap32(v25[2]) >> 16);
            v514.i64[0] = 0x800000008000;
            v514.i64[1] = 0x800000008000;
            v515 = (uint32x4_t)vmlaq_s32(v514, v513, v509);
            v513.i32[0] = v512;
            *(int8x8_t *)v25 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v513, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v515, v515, 0x10uLL), 0x10uLL))));
            v25 += 4;
            --v511;
          }
          while (v511);
          v25 += 4 * v658;
          --v510;
        }
        while (v510);
LABEL_788:
        v666[0] = 0;
        goto LABEL_978;
      case 9:
        v516 = v666[0];
        do
        {
          v517 = v13;
          do
          {
            v518 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v518 ^ 0xFFFF, (v518 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v21);
            v25 += 4;
            --v517;
          }
          while (v517);
          v25 += 4 * v658;
          --v516;
        }
        while (v516);
        goto LABEL_811;
      case 10:
        v519 = v666[0];
        do
        {
          v520 = v13;
          do
          {
            v521 = bswap32(v25[3]) >> 16;
            RGBA64_DMplusDM(v25, v22, v521 ^ 0xFFFF, (v521 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v661);
            v25 += 4;
            --v520;
          }
          while (v520);
          v25 += 4 * v658;
          --v519;
        }
        while (v519);
LABEL_798:
        v666[0] = 0;
        v27 = v655;
        goto LABEL_977;
      case 11:
        v522 = v666[0];
        do
        {
          v523 = v13;
          do
          {
            v524 = bswap32(v25[3]) >> 16;
            v525 = ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | (v524 << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16);
            if (v10)
              v526 = v524;
            else
              v526 = -1;
            RGBA64_DAplusdDA(v25, v525, v526, v22, v21);
            v25 += 4;
            --v523;
          }
          while (v523);
          v25 += 4 * v658;
          --v522;
        }
        while (v522);
        goto LABEL_811;
      case 12:
        v527 = v666[0];
        do
        {
          v528 = v13;
          do
          {
            RGBA64_DpluslD(v25, ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | ((unint64_t)(bswap32(v25[3]) >> 16) << 48) | bswap32(v25[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v25) >> 16), v22);
            v25 += 4;
            --v528;
          }
          while (v528);
          v25 += 4 * v658;
          --v527;
        }
        while (v527);
LABEL_811:
        v666[0] = 0;
        v27 = v655;
        LOWORD(v23) = v661;
        goto LABEL_978;
      case 13:
        if (!v20)
          goto LABEL_978;
        v529 = v666[0];
        while (1)
        {
          v530 = v13;
          do
          {
            v531 = __rev16(v25[3]);
            if (v10)
            {
              v532 = v531;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v533 = v20;
                v25[2] = v19;
                goto LABEL_820;
              }
            }
            else
            {
              v532 = 0xFFFF;
            }
            v534 = PDAmultiplyPDA_13494((v531 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v532, v22, v21);
            v535 = bswap32(v534);
            *v25 = HIWORD(v535);
            v25[1] = v535;
            v25[2] = bswap32(HIDWORD(v534)) >> 16;
            v533 = __rev16(HIWORD(v534));
LABEL_820:
            v25[3] = v533;
            v25 += 4;
            --v530;
          }
          while (v530);
          v25 += 4 * v658;
          if (!--v529)
            goto LABEL_976;
        }
      case 14:
        if (!v20)
          goto LABEL_978;
        v536 = v666[0];
        while (1)
        {
          v537 = v13;
          do
          {
            v538 = __rev16(v25[3]);
            if (v10)
            {
              v539 = v538;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v540 = v20;
                v25[2] = v19;
                goto LABEL_831;
              }
            }
            else
            {
              v539 = 0xFFFF;
            }
            v541 = PDAscreenPDA_13495((v538 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v539, v22, v21);
            v542 = bswap32(v541);
            *v25 = HIWORD(v542);
            v25[1] = v542;
            v25[2] = bswap32(HIDWORD(v541)) >> 16;
            v540 = __rev16(HIWORD(v541));
LABEL_831:
            v25[3] = v540;
            v25 += 4;
            --v537;
          }
          while (v537);
          v25 += 4 * v658;
          if (!--v536)
            goto LABEL_976;
        }
      case 15:
        if (!v20)
          goto LABEL_978;
        v543 = v666[0];
        while (1)
        {
          v544 = v13;
          do
          {
            v545 = __rev16(v25[3]);
            if (v10)
            {
              v546 = v545;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v547 = v20;
                v25[2] = v19;
                goto LABEL_842;
              }
            }
            else
            {
              v546 = 0xFFFF;
            }
            v548 = PDAoverlayPDA_13496((v545 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v546, v22, v21);
            v549 = bswap32(v548);
            *v25 = HIWORD(v549);
            v25[1] = v549;
            v25[2] = bswap32(HIDWORD(v548)) >> 16;
            v547 = __rev16(HIWORD(v548));
LABEL_842:
            v25[3] = v547;
            v25 += 4;
            --v544;
          }
          while (v544);
          v25 += 4 * v658;
          if (!--v543)
            goto LABEL_976;
        }
      case 16:
        if (!v20)
          goto LABEL_978;
        v550 = v666[0];
        while (1)
        {
          v551 = v13;
          do
          {
            v552 = __rev16(v25[3]);
            if (v10)
            {
              v553 = v552;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v554 = v20;
                v25[2] = v19;
                goto LABEL_853;
              }
            }
            else
            {
              v553 = 0xFFFF;
            }
            v555 = PDAdarkenPDA_13498((v552 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v553, v22, v21);
            v556 = bswap32(v555);
            *v25 = HIWORD(v556);
            v25[1] = v556;
            v25[2] = bswap32(HIDWORD(v555)) >> 16;
            v554 = __rev16(HIWORD(v555));
LABEL_853:
            v25[3] = v554;
            v25 += 4;
            --v551;
          }
          while (v551);
          v25 += 4 * v658;
          if (!--v550)
            goto LABEL_976;
        }
      case 17:
        if (!v20)
          goto LABEL_978;
        v557 = v666[0];
        while (1)
        {
          v558 = v13;
          do
          {
            v559 = __rev16(v25[3]);
            if (v10)
            {
              v560 = v559;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v561 = v20;
                v25[2] = v19;
                goto LABEL_864;
              }
            }
            else
            {
              v560 = 0xFFFF;
            }
            v562 = PDAlightenPDA_13497((v559 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v560, v22, v21);
            v563 = bswap32(v562);
            *v25 = HIWORD(v563);
            v25[1] = v563;
            v25[2] = bswap32(HIDWORD(v562)) >> 16;
            v561 = __rev16(HIWORD(v562));
LABEL_864:
            v25[3] = v561;
            v25 += 4;
            --v558;
          }
          while (v558);
          v25 += 4 * v658;
          if (!--v557)
            goto LABEL_976;
        }
      case 18:
        if (!v20)
          goto LABEL_978;
        v564 = v666[0];
        while (1)
        {
          v565 = v13;
          do
          {
            v566 = __rev16(v25[3]);
            if (v10)
            {
              v567 = v566;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v568 = v20;
                v25[2] = v19;
                goto LABEL_875;
              }
            }
            else
            {
              v567 = 0xFFFF;
            }
            v569 = PDAcolordodgePDA_13499((v566 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v567, v22, v21);
            v570 = bswap32(v569);
            *v25 = HIWORD(v570);
            v25[1] = v570;
            v25[2] = bswap32(HIDWORD(v569)) >> 16;
            v568 = __rev16(HIWORD(v569));
LABEL_875:
            v25[3] = v568;
            v25 += 4;
            --v565;
          }
          while (v565);
          v25 += 4 * v658;
          if (!--v564)
            goto LABEL_976;
        }
      case 19:
        if (!v20)
          goto LABEL_978;
        v571 = v666[0];
        while (1)
        {
          v572 = v13;
          do
          {
            v573 = __rev16(v25[3]);
            if (v10)
            {
              v574 = v573;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v575 = v20;
                v25[2] = v19;
                goto LABEL_886;
              }
            }
            else
            {
              v574 = 0xFFFF;
            }
            v576 = PDAcolorburnPDA_13500((v573 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v574, v22, v21);
            v577 = bswap32(v576);
            *v25 = HIWORD(v577);
            v25[1] = v577;
            v25[2] = bswap32(HIDWORD(v576)) >> 16;
            v575 = __rev16(HIWORD(v576));
LABEL_886:
            v25[3] = v575;
            v25 += 4;
            --v572;
          }
          while (v572);
          v25 += 4 * v658;
          if (!--v571)
            goto LABEL_976;
        }
      case 20:
        if (!v20)
          goto LABEL_978;
        v578 = v666[0];
        while (1)
        {
          v579 = v13;
          do
          {
            v580 = __rev16(v25[3]);
            if (v10)
            {
              v581 = v580;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v582 = v20;
                v25[2] = v19;
                goto LABEL_897;
              }
            }
            else
            {
              v581 = 0xFFFF;
            }
            v583 = PDAsoftlightPDA_13502((v580 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v581, v22, v21);
            v584 = bswap32(v583);
            *v25 = HIWORD(v584);
            v25[1] = v584;
            v25[2] = bswap32(HIDWORD(v583)) >> 16;
            v582 = __rev16(HIWORD(v583));
LABEL_897:
            v25[3] = v582;
            v25 += 4;
            --v579;
          }
          while (v579);
          v25 += 4 * v658;
          if (!--v578)
            goto LABEL_976;
        }
      case 21:
        if (!v20)
          goto LABEL_978;
        v585 = v666[0];
        while (1)
        {
          v586 = v13;
          do
          {
            v587 = __rev16(v25[3]);
            if (v10)
            {
              v588 = v587;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v589 = v20;
                v25[2] = v19;
                goto LABEL_908;
              }
            }
            else
            {
              v588 = 0xFFFF;
            }
            v590 = PDAhardlightPDA_13501((v587 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v588, v22, v21);
            v591 = bswap32(v590);
            *v25 = HIWORD(v591);
            v25[1] = v591;
            v25[2] = bswap32(HIDWORD(v590)) >> 16;
            v589 = __rev16(HIWORD(v590));
LABEL_908:
            v25[3] = v589;
            v25 += 4;
            --v586;
          }
          while (v586);
          v25 += 4 * v658;
          if (!--v585)
            goto LABEL_976;
        }
      case 22:
        if (!v20)
          goto LABEL_978;
        v592 = v666[0];
        while (1)
        {
          v593 = v13;
          do
          {
            v594 = __rev16(v25[3]);
            if (v10)
            {
              v595 = v594;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v596 = v20;
                v25[2] = v19;
                goto LABEL_919;
              }
            }
            else
            {
              v595 = 0xFFFF;
            }
            v597 = PDAdifferencePDA_13503((v594 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v595, v22, v21);
            v598 = bswap32(v597);
            *v25 = HIWORD(v598);
            v25[1] = v598;
            v25[2] = bswap32(HIDWORD(v597)) >> 16;
            v596 = __rev16(HIWORD(v597));
LABEL_919:
            v25[3] = v596;
            v25 += 4;
            --v593;
          }
          while (v593);
          v25 += 4 * v658;
          if (!--v592)
            goto LABEL_976;
        }
      case 23:
        if (!v20)
          goto LABEL_978;
        v599 = v666[0];
        while (1)
        {
          v600 = v13;
          do
          {
            v601 = __rev16(v25[3]);
            if (v10)
            {
              v602 = v601;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v603 = v20;
                v25[2] = v19;
                goto LABEL_930;
              }
            }
            else
            {
              v602 = 0xFFFF;
            }
            v604 = PDAexclusionPDA_13504((v601 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v602, v22, v21);
            v605 = bswap32(v604);
            *v25 = HIWORD(v605);
            v25[1] = v605;
            v25[2] = bswap32(HIDWORD(v604)) >> 16;
            v603 = __rev16(HIWORD(v604));
LABEL_930:
            v25[3] = v603;
            v25 += 4;
            --v600;
          }
          while (v600);
          v25 += 4 * v658;
          if (!--v599)
            goto LABEL_976;
        }
      case 24:
        if (!v20)
          goto LABEL_978;
        v606 = v666[0];
        while (1)
        {
          v607 = v13;
          do
          {
            v608 = __rev16(v25[3]);
            if (v10)
            {
              v609 = v608;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v610 = v20;
                v25[2] = v19;
                goto LABEL_941;
              }
            }
            else
            {
              v609 = 0xFFFF;
            }
            v611 = PDAhuePDA_13505((v608 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v609, v22, v21);
            v612 = bswap32(v611);
            *v25 = HIWORD(v612);
            v25[1] = v612;
            v25[2] = bswap32(HIDWORD(v611)) >> 16;
            v610 = __rev16(HIWORD(v611));
LABEL_941:
            v25[3] = v610;
            v25 += 4;
            --v607;
          }
          while (v607);
          v25 += 4 * v658;
          if (!--v606)
            goto LABEL_976;
        }
      case 25:
        if (!v20)
          goto LABEL_978;
        v613 = v666[0];
        while (1)
        {
          v614 = v13;
          do
          {
            v615 = __rev16(v25[3]);
            if (v10)
            {
              v616 = v615;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v617 = v20;
                v25[2] = v19;
                goto LABEL_952;
              }
            }
            else
            {
              v616 = 0xFFFF;
            }
            v618 = PDAsaturationPDA_13506((v615 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v616, v22, v21);
            v619 = bswap32(v618);
            *v25 = HIWORD(v619);
            v25[1] = v619;
            v25[2] = bswap32(HIDWORD(v618)) >> 16;
            v617 = __rev16(HIWORD(v618));
LABEL_952:
            v25[3] = v617;
            v25 += 4;
            --v614;
          }
          while (v614);
          v25 += 4 * v658;
          if (!--v613)
            goto LABEL_976;
        }
      case 26:
        if (!v20)
          goto LABEL_978;
        v620 = v666[0];
        do
        {
          v621 = v13;
          do
          {
            v622 = __rev16(v25[3]);
            if (v10)
            {
              v623 = v622;
              if (!v25[3])
              {
                *v25 = v27;
                v25[1] = v663;
                v624 = v20;
                v25[2] = v19;
                goto LABEL_963;
              }
            }
            else
            {
              v623 = 0xFFFF;
            }
            v625 = PDAluminosityPDA_13507(v22, v21, (v622 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v623);
            v626 = bswap32(v625);
            *v25 = HIWORD(v626);
            v25[1] = v626;
            v25[2] = bswap32(HIDWORD(v625)) >> 16;
            v624 = __rev16(HIWORD(v625));
LABEL_963:
            v25[3] = v624;
            v25 += 4;
            --v621;
          }
          while (v621);
          v25 += 4 * v658;
          --v620;
        }
        while (v620);
LABEL_976:
        v666[0] = 0;
LABEL_977:
        LOWORD(v23) = v661;
        v24 = v637 >> 3;
LABEL_978:
        v25 = v645;
        v13 = v648;
        if (!v648)
          return 1;
        v665 = 0;
LABEL_980:
        if (shape_enum_clip_next(v13, (int *)&v665 + 1, &v665, v676, v666))
        {
          v648 = v13;
          v25 += 4 * v24 * (int)v665 + 4 * SHIDWORD(v665);
          LODWORD(v13) = v676[0];
          continue;
        }
        v52 = (void *)v13;
LABEL_983:
        free(v52);
        return 1;
      case 27:
        if (!v20)
          goto LABEL_978;
        v627 = v666[0];
        break;
      default:
        goto LABEL_978;
    }
    break;
  }
LABEL_968:
  v628 = v13;
  while (1)
  {
    v629 = __rev16(v25[3]);
    if (!v10)
      break;
    v630 = v629;
    if (v25[3])
      goto LABEL_973;
    *v25 = v27;
    v25[1] = v663;
    v631 = v20;
    v25[2] = v19;
LABEL_974:
    v25[3] = v631;
    v25 += 4;
    if (!--v628)
    {
      v25 += 4 * v658;
      if (!--v627)
        goto LABEL_976;
      goto LABEL_968;
    }
  }
  v630 = 0xFFFF;
LABEL_973:
  v632 = PDAluminosityPDA_13507((v629 << 48) | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | bswap32(v25[1]) & 0xFFFF0000 | (bswap32(*v25) >> 16), v630, v22, v21);
  v633 = bswap32(v632);
  *v25 = HIWORD(v633);
  v25[1] = v633;
  v25[2] = bswap32(HIDWORD(v632)) >> 16;
  v631 = __rev16(HIWORD(v632));
  goto LABEL_974;
}

uint64_t RGBA64_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[64];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v46, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v29, (uint64_t)v46) < 1)
    return 0xFFFFFFFFLL;
  v18 = *(_DWORD *)a3;
  *((_QWORD *)&v29 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 == 269497224)
  {
    if (!(_QWORD)v40 && (~DWORD1(v30) & 0xC3) == 0)
    {
      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
      if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
      {
        if ((BYTE4(v30) & 4) != 0)
        {
          v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
          *((_QWORD *)a2 + 8) = v17.n128_u64[0];
        }
        RGBA64_mark((uint64_t)a1, v17);
        return 1;
      }
    }
    *(_QWORD *)&v29 = rgba64_sample_RGBA64;
    goto LABEL_37;
  }
  v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
  if (!v19)
    return 0xFFFFFFFFLL;
  if (v19 > 0xB)
  {
    if (v19 > 0x13)
      goto LABEL_27;
    if (v19 - 14 < 4)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      goto LABEL_28;
    }
    if ((v19 == 13 || v19 == 12) && (v21 = *((_QWORD *)a2 + 12)) == 0)
    {
      v20 = 0;
    }
    else
    {
LABEL_27:
      LODWORD(v21) = 255;
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
    LODWORD(v21) = 0;
    switch(v19)
    {
      case 2u:
        if (*((_QWORD *)a2 + 12))
          goto LABEL_27;
        v20 = 0;
        LODWORD(v21) = 16;
        break;
      case 5u:
        v20 = 0;
        LODWORD(v21) = 24;
        break;
      case 6u:
        break;
      case 7u:
        v20 = 0;
        LODWORD(v21) = 32;
        break;
      case 8u:
        v20 = 0;
        LODWORD(v21) = 8;
        break;
      case 9u:
        v20 = 0;
        LODWORD(v21) = 40;
        break;
      default:
        goto LABEL_27;
    }
  }
LABEL_28:
  *(_QWORD *)&v29 = *(_QWORD *)&RGB16_image_sample[2 * v19 + 2];
  if (!(_QWORD)v29)
  {
    if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 8)
    {
      *(_QWORD *)&v29 = *(_QWORD *)&RGB8_image_sample[2 * v19 + 2];
      if ((_QWORD)v29)
      {
        v22 = 134755224;
        v23 = 4;
LABEL_35:
        LODWORD(v30) = v23;
        goto LABEL_36;
      }
    }
    *(_QWORD *)&v29 = *(_QWORD *)&RGBF_image_sample[2 * v19 + 2];
    if ((_QWORD)v29)
    {
      v22 = 538981289;
      v23 = 16;
      goto LABEL_35;
    }
    return 0xFFFFFFFFLL;
  }
  v22 = 269497256;
LABEL_36:
  DWORD2(v29) = v22;
  if ((v20 & 1) == 0 && (v8 - 1) <= 1 && (BYTE4(v30) & 7) == 3 && (a2[2] == 5 || !a2[2]))
  {
    if (v19 <= 0xB)
    {
      HIDWORD(v24) = v21;
      LODWORD(v24) = v21;
      switch((v24 >> 3))
      {
        case 0u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_RGB32;
          goto LABEL_68;
        case 1u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_RGB32;
          break;
        case 2u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_W8;
          goto LABEL_68;
        case 3u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_RGB24;
          goto LABEL_68;
        case 4u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_rgb32;
          goto LABEL_68;
        case 5u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_rgb32;
          break;
        default:
          goto LABEL_37;
      }
      v26 = (uint64_t)a2;
      v27 = v8;
      v28 = 8;
LABEL_69:
      rgba64_image_mark_image(v26, (uint64_t)&v29, v27, v28, (void (*)(_QWORD, _QWORD))v25);
      return 1;
    }
    if (v19 <= 0x13)
    {
      switch(v19)
      {
        case 0xCu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_W16;
          break;
        case 0xDu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_w16;
          break;
        case 0xEu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_RGB48;
          break;
        case 0xFu:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_rgb48;
          break;
        case 0x10u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_RGBA64;
          break;
        case 0x11u:
          DWORD2(v29) = *(_DWORD *)a3;
          v25 = RGBA64_image_mark_rgba64;
          break;
        default:
          goto LABEL_37;
      }
LABEL_68:
      v26 = (uint64_t)a2;
      v27 = v8;
      v28 = 0;
      goto LABEL_69;
    }
  }
LABEL_37:
  RGBA64_image_mark((uint64_t)a2, (uint64_t)&v29, v8, v17);
  return 1;
}

uint64_t RGBA64_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = rgba64_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = rgba64_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = rgba64_shade_axial_RGB;
    }
    else
    {
      v14 = rgba64_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 3, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 3, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  RGBA64_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void RGBA64_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  int v44;
  int32x2_t v45;
  int32x2_t v46;
  void *v47;
  void (*v48)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  int v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  float v66;
  int v67;
  float v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int32 v76;
  unint64_t v77;
  int8x8_t v78;
  int32x2_t v79;
  uint32x2_t v80;
  int8x8_t v81;
  uint64x2_t v82;
  int8x16_t v83;
  uint64_t v84;
  float *v85;
  float v86;
  float v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  float v92;
  int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int32x4_t v105;
  int32x4_t v106;
  uint32x4_t v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  unsigned int v111;
  unsigned __int16 *v112;
  unsigned __int16 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned __int8 *v119;
  int v120;
  unsigned __int16 *v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned __int8 *v133;
  int v134;
  int32x4_t v135;
  int32x4_t v136;
  uint32x4_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int32x4_t v141;
  int32x4_t v142;
  uint32x4_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  unsigned int v157;
  int32x4_t v158;
  int32x4_t v159;
  uint32x4_t v160;
  int v161;
  int v162;
  unsigned int v163;
  int32x4_t v164;
  int32x4_t v165;
  uint32x4_t v166;
  int v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  int32x4_t v173;
  int32x4_t v174;
  uint32x4_t v175;
  int v176;
  unsigned int v177;
  unint64_t v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned __int16 v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unsigned __int16 v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  int v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  unint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int v231;
  int v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  int v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  unsigned int v259;
  int v260;
  int v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  unint64_t v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  unint64_t v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  unint64_t v290;
  uint64_t v291;
  int v292;
  unint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  unsigned int v299;
  unint64_t v300;
  unsigned int v301;
  int v302;
  int v303;
  unint64_t v304;
  uint64_t v305;
  int v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  unint64_t v314;
  unsigned int v315;
  int v316;
  int v317;
  unint64_t v318;
  uint64_t v319;
  int v320;
  unint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int v327;
  unint64_t v328;
  unsigned int v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  unint64_t v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int v341;
  unint64_t v342;
  unsigned int v343;
  int v344;
  int v345;
  unint64_t v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int v355;
  unint64_t v356;
  unsigned int v357;
  int v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  int v362;
  unint64_t v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t v370;
  unsigned int v371;
  int v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  unsigned int v383;
  unint64_t v384;
  unsigned int v385;
  int v386;
  int v387;
  unint64_t v388;
  uint64_t v389;
  int v390;
  unint64_t v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  unsigned int v397;
  unint64_t v398;
  unsigned int v399;
  int v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  int v404;
  unint64_t v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  unsigned int v411;
  unint64_t v412;
  unsigned int v413;
  unsigned __int8 *v414;
  int v415;
  int v416;
  unint64_t v417;
  uint64_t v418;
  int v419;
  unint64_t v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int v426;
  unint64_t v427;
  unsigned int v428;
  unsigned __int8 *v429;
  int v430;
  unsigned __int16 *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  int v435;
  unsigned __int8 *v436;
  int v437;
  unint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unint64_t v441;
  uint64_t v442;
  int v443;
  unint64_t v444;
  unsigned int v445;
  int v446;
  int v447;
  int v448;
  unint64_t v449;
  uint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  int v460;
  _QWORD *v461;
  int v462;
  void *v463;
  uint64x2_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;

  v459 = a3;
  v469 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v454 = (int)v4;
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(float *)(a2 + 184);
  v464.i64[0] = *(_QWORD *)(a1 + 136);
  v466 = *(_QWORD *)(a2 + 96);
  v467 = *(_QWORD *)(a2 + 104);
  v468 = v6;
  v10 = *(int *)(a1 + 24);
  v9 = *(int *)(a1 + 28);
  v11 = *(int *)(a1 + 16);
  v12 = *(int *)(a1 + 20);
  v13 = *(int *)(a1 + 12);
  v465 = *(_DWORD *)(a1 + 8);
  v458 = a1;
  v461 = (_QWORD *)a2;
  v14 = *(int *)(a2 + 16);
  v15 = (v14 + 10) * v5;
  if (v15 > 65439)
  {
    v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    v17 = v18;
    v20 = v18;
    v21 = v461;
    v22 = v458;
    if (!v18)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v17 = (char *)&v449 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    v20 = 0;
    v21 = v461;
    v22 = v458;
  }
  v451 = v20;
  v460 = (int)(float)((float)(v8 * 65535.0) + 0.5);
  v450 = v7 + (v10 - 1) * v9 + 8 * v12;
  v23 = v9 >> 3;
  v24 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = v24 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v14)
    v26 = 8 * v5;
  else
    v26 = 0;
  v27 = v25 + v26;
  v21[18] = v24;
  v21[19] = v25 + v26;
  v21[20] = v25;
  v28 = (unsigned __int16 *)(v7 + 8 * (v13 + v23 * v11));
  v29 = v454;
  v449 = v9 >> 3;
  v457 = v23 - v454;
  v30 = *(int *)(v22 + 104);
  v31 = *(_DWORD *)(v22 + 108);
  v32 = *(unsigned __int8 *)(v22 + 2);
  if (v32 == 6 || v32 == 1)
  {
    v33 = v466;
    v34 = v467;
    if (!v464.i64[0])
      goto LABEL_465;
    v35 = 0;
    v36 = 0;
    v37 = *(int *)(v458 + 124);
    v38 = (unsigned __int8 *)(v464.i64[0] + v30 + (int)v37 * (uint64_t)v31);
    v29 = v454;
    v456 = v37 - v454;
    v39 = v459;
    v40 = v461;
  }
  else
  {
    v34 = v467;
    if (v464.i64[0])
    {
      shape_enum_clip_alloc((uint64_t)v18, v19, (int *)v464.i64[0], 1, 1, 1, v30, v31, v4, v465);
      v40 = v461;
      if (!v41)
        goto LABEL_465;
      v36 = 0;
      v42 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
      if (!(_DWORD)v14)
        v42 = 8 * v5;
      v456 = -v454;
      v38 = (unsigned __int8 *)(v27 + v42 + 16);
      v39 = v459;
      v33 = v466;
      v35 = v41;
      while (1)
      {
LABEL_468:
        while (1)
        {
          v447 = *((_DWORD *)v38 - 4);
          v448 = v447 - v36;
          if (v447 <= v36)
            break;
          v465 -= v448;
          if (v465 < 1)
            goto LABEL_463;
          v33 += v40[16] * v448;
          v34 += v40[17] * v448;
          v28 += 4 * v449 * v448;
          v36 = v447;
        }
        if (v36 < *((_DWORD *)v38 - 3) + v447)
          break;
        if (!shape_enum_clip_scan((uint64_t)v35, (_DWORD *)v38 - 4))
          goto LABEL_463;
      }
      v29 = v454;
    }
    else
    {
      v38 = 0;
      v35 = 0;
      v456 = 0;
      v36 = 0;
      v39 = v459;
      v40 = v461;
      v33 = v466;
    }
  }
  v43 = v35;
  v44 = v460 ^ 0xFFFF;
  v45 = vdup_n_s32(v460 ^ 0xFFFFu);
  v453 = (v4 - 1) + 1;
  v452 = -v29;
  v455 = v450 - 8;
  v46 = vdup_n_s32(0x101u);
  v464 = (uint64x2_t)xmmword_185004F50;
  v47 = v43;
  while (2)
  {
    v462 = v36;
    v463 = v47;
    v48 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v40;
    v466 = v33;
    v467 = v34;
    v48(v40, v33, v34, v4);
    v49 = v40[20];
    v50 = (_BYTE *)v40[18];
    v51 = *((_DWORD *)v40 + 2);
    if (v51 == *((_DWORD *)v40 + 3))
    {
      if (v460 != 0xFFFF)
      {
        v52 = v4;
        v53 = (_BYTE *)v40[18];
        do
        {
          if (*v53)
          {
            v54 = (unsigned __int16)*(_QWORD *)v49 * v44 + 0x8000;
            v55 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v44 + 0x8000;
            *(_QWORD *)v49 = ((HIWORD(*(_QWORD *)v49)
                             - ((HIWORD(*(_QWORD *)v49) * v44
                               + 0x8000
                               + ((HIWORD(*(_QWORD *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49) - ((v55 + HIWORD(v55)) >> 16)) << 32) | ((WORD1(*(_QWORD *)v49) - ((WORD1(*(_QWORD *)v49) * v44 + 0x8000 + ((WORD1(*(_QWORD *)v49) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(_QWORD *)v49 - ((v54 + HIWORD(v54)) >> 16));
          }
          ++v53;
          v49 += 8;
          --v52;
        }
        while (v52);
        v49 += 8 * v452;
        v50 += v453 + v452;
      }
    }
    else
    {
      v56 = v40[19];
      v57 = HIWORD(v51) & 0x3F;
      if (v57 == 16)
      {
        if (v460 == 0xFFFF)
        {
          v95 = 0;
          do
          {
            if (v50[v95])
              *(_QWORD *)(v49 + 8 * v95) = *(_QWORD *)(v56 + 8 * v95);
            ++v95;
          }
          while ((_DWORD)v4 != (_DWORD)v95);
        }
        else
        {
          v73 = 0;
          do
          {
            if (v50[v73])
            {
              v74 = *(_QWORD *)(v56 + 8 * v73);
              *(_QWORD *)(v49 + 8 * v73) = ((HIWORD(v74)
                                           - ((HIWORD(v74) * v44
                                             + 0x8000
                                             + ((HIWORD(v74) * v44 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v74) - ((WORD2(v74) * v44 + 0x8000 + ((WORD2(v74) * v44 + 0x8000) >> 16)) >> 16)) << 32) | ((WORD1(v74) - ((WORD1(v74) * v44 + 0x8000 + ((WORD1(v74) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v74 - (((unsigned __int16)v74 * v44 + 0x8000 + (((unsigned __int16)v74 * v44 + 0x8000) >> 16)) >> 16));
            }
            ++v73;
          }
          while ((_DWORD)v4 != (_DWORD)v73);
        }
      }
      else if (v57 == 32)
      {
        if (v460 == 0xFFFF)
        {
          v84 = 0;
          v85 = (float *)(v56 + 8);
          do
          {
            if (v50[v84])
            {
              v86 = v85[1];
              if (v86 <= 0.0)
              {
                v91 = 0;
              }
              else
              {
                v87 = *(v85 - 2);
                LODWORD(v88) = (int)(float)((float)(v86 * 65535.0) + 0.5);
                if (v86 <= 1.0)
                  v88 = v88;
                else
                  v88 = 0xFFFFLL;
                LOWORD(v89) = v88;
                if (v86 > 1.0)
                  v86 = 1.0;
                LOWORD(v90) = v88;
                if (v87 <= v86)
                {
                  if (v87 >= 0.0)
                    v90 = (int)(float)((float)(v87 * 65535.0) + 0.5);
                  else
                    LOWORD(v90) = 0;
                }
                v92 = *(v85 - 1);
                v93 = v88;
                if (v92 <= v86)
                {
                  if (v92 >= 0.0)
                    v93 = (int)(float)((float)(v92 * 65535.0) + 0.5);
                  else
                    v93 = 0;
                }
                v94 = *v85;
                if (*v85 <= v86)
                {
                  if (v94 >= 0.0)
                    v89 = (int)(float)((float)(v94 * 65535.0) + 0.5);
                  else
                    LOWORD(v89) = 0;
                }
                v91 = (v88 << 48) | ((unint64_t)(unsigned __int16)v89 << 32) | (v93 << 16) | (unsigned __int16)v90;
              }
              *(_QWORD *)(v49 + 8 * v84) = v91;
            }
            v85 += 4;
            ++v84;
          }
          while ((_DWORD)v4 != (_DWORD)v84);
        }
        else
        {
          v58 = 0;
          v59 = (float *)(v56 + 8);
          do
          {
            if (v50[v58])
            {
              v60 = v59[1];
              if (v60 <= 0.0)
              {
                v65 = 0;
              }
              else
              {
                v61 = *(v59 - 2);
                v62 = (int)(float)((float)(v60 * 65535.0) + 0.5);
                if (v60 > 1.0)
                  v62 = 0xFFFF;
                v63 = v62;
                if (v60 > 1.0)
                  v60 = 1.0;
                v64 = v62;
                if (v61 <= v60)
                {
                  if (v61 >= 0.0)
                    v64 = (int)(float)((float)(v61 * 65535.0) + 0.5);
                  else
                    v64 = 0;
                }
                v66 = *(v59 - 1);
                v67 = v62;
                if (v66 <= v60)
                {
                  if (v66 >= 0.0)
                    v67 = (int)(float)((float)(v66 * 65535.0) + 0.5);
                  else
                    v67 = 0;
                }
                v68 = *v59;
                if (*v59 <= v60)
                {
                  if (v68 >= 0.0)
                    v63 = (int)(float)((float)(v68 * 65535.0) + 0.5);
                  else
                    v63 = 0;
                }
                v69 = v64 * v44;
                v70 = v67 * v44;
                v71 = v63 * v44;
                v72 = v62 * v44;
                if ((v64 * v44) >= 0xFFFE8000)
                  v69 = -98304;
                if (v70 >= 0xFFFE8000)
                  v70 = -98304;
                if (v71 >= 0xFFFE8000)
                  v71 = -98304;
                if (v72 >= 0xFFFE8000)
                  v72 = -98304;
                v65 = ((unint64_t)(v62 - ((v72 + 0x8000 + ((v72 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(v63 - ((v71 + 0x8000 + ((v71 + 0x8000) >> 16)) >> 16)) << 32) | ((v67 - ((v70 + 0x8000 + ((v70 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v64 - ((v69 + 0x8000 + ((v69 + 0x8000) >> 16)) >> 16));
              }
              *(_QWORD *)(v49 + 8 * v58) = v65;
            }
            v59 += 4;
            ++v58;
          }
          while ((_DWORD)v4 != (_DWORD)v58);
        }
      }
      else if (v460 == 0xFFFF)
      {
        v96 = 0;
        do
        {
          if (v50[v96])
          {
            v97 = *(unsigned int *)(v56 + 4 * v96);
            v98 = *(_DWORD *)(v56 + 4 * v96);
            *(_QWORD *)(v49 + 8 * v96) = ((unint64_t)(v98 | (v98 << 8)) << 48) | ((unint64_t)(BYTE1(v97) | (BYTE1(v97) << 8)) << 32) | v97 & 0xFF0000 | (BYTE2(v97) << 24) | (v97 >> 24) | (v97 >> 24 << 8);
          }
          ++v96;
        }
        while ((_DWORD)v4 != (_DWORD)v96);
      }
      else
      {
        v75 = 0;
        do
        {
          if (v50[v75])
          {
            v76 = *(_DWORD *)(v56 + 4 * v75);
            HIDWORD(v77) = HIBYTE(v76);
            LODWORD(v77) = v76;
            v78.i32[0] = v76 >> 8;
            v78.i32[1] = v76;
            v79 = vmul_s32((int32x2_t)vand_s8(v78, (int8x8_t)0xFF000000FFLL), v46);
            v80 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v79, v45);
            v81 = vand_s8((int8x8_t)vsub_s32(v79, (int32x2_t)vshr_n_u32(vsra_n_u32(v80, v80, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v82.i64[0] = v81.u32[0];
            v82.i64[1] = v81.u32[1];
            v83 = (int8x16_t)vshlq_u64(v82, v464);
            *(_QWORD *)(v49 + 8 * v75) = vorrq_s8(v83, (int8x16_t)vdupq_laneq_s64((int64x2_t)v83, 1)).u64[0] | (((BYTE2(v76) | (BYTE2(v76) << 8)) - (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000 + (((BYTE2(v76) | (BYTE2(v76) << 8)) * v44 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)((v77 >> 24) - (((v77 >> 24) * v44 + 0x8000 + (((v77 >> 24) * v44 + 0x8000) >> 16)) >> 16));
          }
          ++v75;
        }
        while ((_DWORD)v4 != (_DWORD)v75);
      }
    }
    switch(v39)
    {
      case 0:
        v99 = v4;
        v100 = v38;
        v101 = v466;
        v102 = v467;
        do
        {
          v103 = *v50;
          if (*v50)
          {
            if (v38)
              v103 = ((unsigned __int16)(*v100 * (_WORD)v103 + ((*v100 * v103) >> 8) + 1) >> 8);
            if (v103)
            {
              if (v103 == 255)
              {
                *(_QWORD *)v28 = 0;
              }
              else
              {
                v104 = bswap32(v28[1] | (*v28 << 16));
                v105.i32[0] = (unsigned __int16)v104;
                v105.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v104), 0x10uLL).i32[1];
                v105.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v106.i64[0] = 0x800000008000;
                v106.i64[1] = 0x800000008000;
                v107 = (uint32x4_t)vmlaq_s32(v106, v105, vdupq_n_s32(v103 | (v103 << 8)));
                v105.i32[0] = v104;
                *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v105, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v107, v107, 0x10uLL), 0x10uLL))));
              }
            }
          }
          ++v50;
          v100 += v38 != 0;
          v28 += 4;
          --v99;
        }
        while (v99);
        v38 = &v100[v456];
        v28 += 4 * v457;
        goto LABEL_420;
      case 1:
        v108 = *v50;
        if (v38)
        {
          v109 = v50 + 1;
          v110 = v4;
          do
          {
            if (v108)
            {
              v111 = *v38 * v108 + ((*v38 * v108) >> 8) + 1;
              v112 = (unsigned __int16 *)v455;
              if (v455 >= (unint64_t)v28)
                v112 = v28;
              if ((unint64_t)v112 >= *(_QWORD *)(v458 + 40))
                v113 = v112;
              else
                v113 = *(unsigned __int16 **)(v458 + 40);
              if (BYTE1(v111))
              {
                if (BYTE1(v111) == 255)
                {
                  v114 = HIDWORD(*(_QWORD *)v49);
                  v115 = HIWORD(*(_QWORD *)v49);
                  v116 = bswap32(*(_QWORD *)v49);
                  *v113 = HIWORD(v116);
                  v113[1] = v116;
                  v113[2] = bswap32(v114) >> 16;
                  v113[3] = __rev16(v115);
                }
                else
                {
                  RGBA64_DMplusDM(v113, *(_QWORD *)v49, (unsigned __int16)(257 * (v111 >> 8)), ((unint64_t)(bswap32(v113[2]) >> 16) << 32) | ((unint64_t)(bswap32(v113[3]) >> 16) << 48) | bswap32(v113[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v113) >> 16), (unsigned __int16)~(257 * (v111 >> 8)));
                }
              }
            }
            else
            {
              v113 = v28;
            }
            v117 = *v109++;
            v108 = v117;
            v49 += 8;
            ++v38;
            v28 = v113 + 4;
            --v110;
          }
          while (v110);
          v38 += v456;
          v102 = v467;
        }
        else
        {
          v429 = v50 + 1;
          v430 = v4;
          v102 = v467;
          do
          {
            v431 = (unsigned __int16 *)v455;
            if (v455 >= (unint64_t)v28)
              v431 = v28;
            if ((unint64_t)v431 >= *(_QWORD *)(v458 + 40))
              v113 = v431;
            else
              v113 = *(unsigned __int16 **)(v458 + 40);
            if (v108)
            {
              if (v108 == 255)
              {
                v432 = HIDWORD(*(_QWORD *)v49);
                v433 = HIWORD(*(_QWORD *)v49);
                v434 = bswap32(*(_QWORD *)v49);
                *v113 = HIWORD(v434);
                v113[1] = v434;
                v113[2] = bswap32(v432) >> 16;
                v113[3] = __rev16(v433);
              }
              else
              {
                RGBA64_DMplusDM(v113, *(_QWORD *)v49, v108 | (v108 << 8), ((unint64_t)(bswap32(v113[2]) >> 16) << 32) | ((unint64_t)(bswap32(v113[3]) >> 16) << 48) | bswap32(v113[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v113) >> 16), (v108 | (v108 << 8)) ^ 0xFFFF);
              }
            }
            v435 = *v429++;
            v108 = v435;
            v49 += 8;
            v28 = v113 + 4;
            --v430;
          }
          while (v430);
          v38 = 0;
        }
        v28 = &v113[4 * v457 + 4];
        v40 = v461;
        v101 = v466;
        goto LABEL_420;
      case 2:
        v118 = *v50;
        if (v38)
        {
          v119 = v50 + 1;
          v120 = v4;
          while (1)
          {
            v121 = v28;
            if (!v118)
              goto LABEL_145;
            v122 = *v38 * v118 + ((*v38 * v118) >> 8) + 1;
            if (!BYTE1(v122))
              goto LABEL_145;
            if (BYTE1(v122) == 255)
            {
              v123 = *(_QWORD *)v49;
              v124 = HIWORD(*(_QWORD *)v49);
              if ((_DWORD)v124)
              {
                if ((_DWORD)v124 != 0xFFFF)
                {
                  v129 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                  v130 = v124 ^ 0xFFFF;
                  goto LABEL_144;
                }
                v125 = bswap32(v123);
                *v28 = HIWORD(v125);
                v28[1] = v125;
                v28[2] = bswap32(HIDWORD(v123)) >> 16;
                v28[3] = -1;
              }
            }
            else
            {
              v127 = HIWORD(*(_QWORD *)v49);
              v128 = (257 * (v122 >> 8)) ^ 0xFFFF;
              if ((_WORD)v127 != (v128 * (_DWORD)v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16)
              {
                v126 = *(_QWORD *)v49;
                v123 = ((unint64_t)(v127
                                         - ((v128 * (_DWORD)v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v126) - ((WORD2(v126) * v128 + 0x8000 + ((WORD2(v126) * v128 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v126 - (((unsigned __int16)v126 * v128 + 0x8000 + (((unsigned __int16)v126 * v128 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v126) - ((WORD1(v126) * v128 + 0x8000 + ((WORD1(v126) * v128 + 0x8000) >> 16)) >> 16)) << 16);
                v129 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                v130 = (unsigned __int16)~(v127
                                         - ((v128 * (_DWORD)v127 + 0x8000 + ((v128 * v127 + 0x8000) >> 16)) >> 16));
LABEL_144:
                RGBA64_DplusDM(v28, v123, v129, v130);
              }
            }
LABEL_145:
            v131 = *v119++;
            v118 = v131;
            v49 += 8;
            ++v38;
            v28 += 4;
            if (!--v120)
            {
              v38 += v456;
LABEL_461:
              v28 = &v121[4 * v457 + 4];
              goto LABEL_418;
            }
          }
        }
        v436 = v50 + 1;
        v437 = v4;
        while (1)
        {
          if (v118)
          {
            if (v118 == 255)
            {
              v438 = *(_QWORD *)v49;
              v439 = HIWORD(*(_QWORD *)v49);
              if ((_DWORD)v439)
              {
                if ((_DWORD)v439 != 0xFFFF)
                {
                  v444 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                  v445 = v439 ^ 0xFFFF;
                  goto LABEL_458;
                }
                v440 = bswap32(v438);
                *v28 = HIWORD(v440);
                v28[1] = v440;
                v28[2] = bswap32(HIDWORD(v438)) >> 16;
                v28[3] = -1;
              }
            }
            else
            {
              v442 = HIWORD(*(_QWORD *)v49);
              v443 = (257 * v118) ^ 0xFFFF;
              if ((_WORD)v442 != (v443 * (_DWORD)v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16)
              {
                v441 = *(_QWORD *)v49;
                v438 = ((unint64_t)(v442
                                         - ((v443 * (_DWORD)v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(WORD2(v441) - ((WORD2(v441) * v443 + 0x8000 + ((WORD2(v441) * v443 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v441 - (((unsigned __int16)v441 * v443 + 0x8000 + (((unsigned __int16)v441 * v443 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(WORD1(v441) - ((WORD1(v441) * v443 + 0x8000 + ((WORD1(v441) * v443 + 0x8000) >> 16)) >> 16)) << 16);
                v444 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                v445 = (unsigned __int16)~(v442
                                         - ((v443 * (_DWORD)v442 + 0x8000 + ((v443 * v442 + 0x8000) >> 16)) >> 16));
LABEL_458:
                RGBA64_DplusDM(v28, v438, v444, v445);
              }
            }
          }
          v446 = *v436++;
          v118 = v446;
          v49 += 8;
          v28 += 4;
          if (!--v437)
          {
            v38 = 0;
            v121 = v28 - 4;
            goto LABEL_461;
          }
        }
      case 3:
        v132 = v4;
        v133 = v38;
        do
        {
          v134 = *v50;
          if (*v50)
          {
            if (v38)
              v134 = ((unsigned __int16)(*v133 * (_WORD)v134 + ((*v133 * v134) >> 8) + 1) >> 8);
            if (v134)
            {
              if (v134 == 255)
              {
                v135.i64[0] = *(_QWORD *)v49;
                v135.i16[1] = 0;
                v135.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                v135.i32[2] = (unsigned __int16)WORD2(*(_QWORD *)v49);
                v135.i32[3] = HIWORD(*(_QWORD *)v49);
                v136.i64[0] = 0x800000008000;
                v136.i64[1] = 0x800000008000;
                v137 = (uint32x4_t)vmlaq_s32(v136, v135, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(~v28[3]) >> 16)));
                v135.i32[0] = *(_QWORD *)v49;
                v135.i32[2] = HIDWORD(*(_QWORD *)v49);
                *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v135, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v137, v137, 0x10uLL), 0x10uLL))));
              }
              else
              {
                v138 = bswap32(v28[3]) >> 16;
                RGBA64_DMplusDM(v28, *(_QWORD *)v49, ((_DWORD)v138 * (v134 | (v134 << 8))+ 0x8000+ ((v138 * (v134 | (v134 << 8)) + 0x8000) >> 16)) >> 16, (v138 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (v134 | (v134 << 8)) ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v132;
        }
        while (v132);
        goto LABEL_416;
      case 4:
        v139 = v4;
        v133 = v38;
        do
        {
          v140 = *v50;
          if (*v50)
          {
            if (v38)
              v140 = ((unsigned __int16)(*v133 * (_WORD)v140 + ((*v133 * v140) >> 8) + 1) >> 8);
            if (v140)
            {
              if (v140 == 255)
              {
                v141.i64[0] = *(_QWORD *)v49;
                v141.i16[1] = 0;
                v141.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                v141.i32[2] = (unsigned __int16)WORD2(*(_QWORD *)v49);
                v141.i32[3] = HIWORD(*(_QWORD *)v49);
                v142.i64[0] = 0x800000008000;
                v142.i64[1] = 0x800000008000;
                v143 = (uint32x4_t)vmlaq_s32(v142, v141, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(v28[3]) >> 16)));
                v141.i32[0] = *(_QWORD *)v49;
                v141.i32[2] = HIDWORD(*(_QWORD *)v49);
                *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v141, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v143, v143, 0x10uLL), 0x10uLL))));
              }
              else
              {
                v144 = bswap32(v28[3]) >> 16;
                RGBA64_DMplusDM(v28, *(_QWORD *)v49, ((v144 ^ 0xFFFF) * (v140 | (v140 << 8))+ 0x8000+ (((v144 ^ 0xFFFF) * (v140 | (v140 << 8)) + 0x8000) >> 16)) >> 16, (v144 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (v140 | (v140 << 8)) ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v139;
        }
        while (v139);
        goto LABEL_416;
      case 5:
        v145 = v4;
        v133 = v38;
        do
        {
          v146 = *v50;
          if (*v50)
          {
            if (!v38
              || (v146 = ((unsigned __int16)(*v133 * (_WORD)v146
                                                            + ((*v133 * v146) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v147 = WORD1(*(_QWORD *)v49);
              v148 = (v146 | (v146 << 8)) ^ 0xFFFF;
              v149 = (unsigned __int16)*(_QWORD *)v49 * v148 + 0x8000;
              v150 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v148 + 0x8000;
              v151 = v147 * v148 + 0x8000 + ((v147 * v148 + 0x8000) >> 16);
              v152 = HIWORD(*(_QWORD *)v49)
                   - ((v148 * HIWORD(*(_QWORD *)v49)
                     + 0x8000
                     + ((v148 * HIWORD(*(_QWORD *)v49) + 0x8000) >> 16)) >> 16);
              v153 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v152 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49)- ((v150 + HIWORD(v150)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v149 + HIWORD(v149)) >> 16)) | ((unsigned __int16)(v147 - HIWORD(v151)) << 16), v153, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v153 << 48) | (__PAIR64__(bswap32(v28[1]) >> 16, bswap32(*v28)) >> 16), (unsigned __int16)~(_WORD)v152);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v145;
        }
        while (v145);
        goto LABEL_416;
      case 6:
        v154 = v4;
        v155 = v38;
        do
        {
          v156 = *v50;
          if (*v50)
          {
            if (!v38
              || (v156 = ((unsigned __int16)(*v155 * (_WORD)v156
                                                            + ((*v155 * v156) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v157 = bswap32(v28[3]);
              if (HIWORD(v157) != 0xFFFF)
              {
                if ((unsigned __int16)~HIWORD(v157) == 0xFFFF)
                {
                  v158.i64[0] = *(_QWORD *)v49;
                  v158.i16[1] = 0;
                  v158.i32[1] = vshr_n_u32((uint32x2_t)vdup_lane_s32(*(int32x2_t *)v49, 0), 0x10uLL).i32[1];
                  v158.i32[2] = (unsigned __int16)WORD2(*(_QWORD *)v49);
                  v158.i32[3] = HIWORD(*(_QWORD *)v49);
                  v159.i64[0] = 0x800000008000;
                  v159.i64[1] = 0x800000008000;
                  v160 = (uint32x4_t)vmlaq_s32(v159, v158, vdupq_n_s32((v156 | (v156 << 8)) ^ 0xFFFFu));
                  v158.i32[0] = *(_QWORD *)v49;
                  v158.i32[2] = HIDWORD(*(_QWORD *)v49);
                  *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v158, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v160, v160, 0x10uLL), 0x10uLL))));
                }
                else
                {
                  RGBA64_DplusDM(v28, ((unint64_t)HIWORD(v157) << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), *(_QWORD *)v49, (257 * v156 * (unsigned __int16)~HIWORD(v157)+ 0x8000+ ((257 * v156 * (unsigned __int16)~HIWORD(v157) + 0x8000) >> 16)) >> 16);
                }
              }
            }
          }
          ++v50;
          v49 += 8;
          v155 += v38 != 0;
          v28 += 4;
          --v154;
        }
        while (v154);
        v38 = &v155[v456];
        v28 += 4 * v457;
        goto LABEL_418;
      case 7:
        v161 = v4;
        v133 = v38;
        do
        {
          v162 = *v50;
          if (*v50)
          {
            if (v38)
              v162 = ((unsigned __int16)(*v133 * (_WORD)v162 + ((*v133 * v162) >> 8) + 1) >> 8);
            if (v162)
            {
              if (v162 == 255)
              {
                v163 = bswap32(v28[1] | (*v28 << 16));
                v164.i32[0] = (unsigned __int16)v163;
                v164.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v163), 0x10uLL).i32[1];
                v164.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v165.i64[0] = 0x800000008000;
                v165.i64[1] = 0x800000008000;
                v166 = (uint32x4_t)vmlaq_s32(v165, v164, vdupq_n_s32(*(unsigned __int16 *)(v49 + 6) ^ 0xFFFFu));
                v164.i32[0] = v163;
                *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v164, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v166, v166, 0x10uLL), 0x10uLL))));
              }
              else
              {
                v167 = v162 | (v162 << 8);
                v168 = *(unsigned __int16 *)(v49 + 6) * v167 + 0x8000;
                v169 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                RGBA64_DMplusDM(v28, v169, (v168 + HIWORD(v168)) >> 16, v169, v167 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v161;
        }
        while (v161);
        goto LABEL_416;
      case 8:
        v170 = v4;
        v133 = v38;
        do
        {
          v171 = *v50;
          if (*v50)
          {
            if (v38)
              v171 = ((unsigned __int16)(*v133 * (_WORD)v171 + ((*v133 * v171) >> 8) + 1) >> 8);
            if (v171)
            {
              if (v171 == 255)
              {
                v172 = bswap32(v28[1] | (*v28 << 16));
                v173.i32[0] = (unsigned __int16)v172;
                v173.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v172), 0x10uLL).i32[1];
                v173.i64[1] = __PAIR64__(bswap32(v28[3]) >> 16, bswap32(v28[2]) >> 16);
                v174.i64[0] = 0x800000008000;
                v174.i64[1] = 0x800000008000;
                v175 = (uint32x4_t)vmlaq_s32(v174, v173, vdupq_n_s32(*(unsigned __int16 *)(v49 + 6)));
                v173.i32[0] = v172;
                *(int8x8_t *)v28 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v173, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v175, v175, 0x10uLL), 0x10uLL))));
              }
              else
              {
                v176 = v171 | (v171 << 8);
                v177 = (*(unsigned __int16 *)(v49 + 6) ^ 0xFFFF) * v176 + 0x8000;
                v178 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
                RGBA64_DMplusDM(v28, v178, (v177 + HIWORD(v177)) >> 16, v178, v176 ^ 0xFFFF);
              }
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v170;
        }
        while (v170);
        goto LABEL_416;
      case 9:
        v179 = v4;
        v133 = v38;
        do
        {
          v180 = *v50;
          if (*v50)
          {
            if (!v38
              || (v180 = ((unsigned __int16)(*v133 * (_WORD)v180
                                                            + ((*v133 * v180) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v181 = WORD1(*(_QWORD *)v49);
              v182 = ~(v180 | ((_WORD)v180 << 8));
              v183 = v182;
              v184 = (unsigned __int16)*(_QWORD *)v49 * v182 + 0x8000;
              v185 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v182 + 0x8000;
              v186 = v181 * v183 + 0x8000 + ((v181 * v183 + 0x8000) >> 16);
              v187 = HIWORD(*(_QWORD *)v49)
                   - ((HIWORD(*(_QWORD *)v49) * v183
                     + 0x8000
                     + ((HIWORD(*(_QWORD *)v49) * v183 + 0x8000) >> 16)) >> 16);
              v188 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v187 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49)- ((v185 + HIWORD(v185)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v184 + HIWORD(v184)) >> 16)) | ((unsigned __int16)(v181 - HIWORD(v186)) << 16), v188 ^ 0xFFFF, (v188 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (unsigned __int16)(v187 + v182));
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v179;
        }
        while (v179);
        goto LABEL_416;
      case 10:
        v189 = v4;
        v133 = v38;
        do
        {
          v190 = *v50;
          if (*v50)
          {
            if (!v38
              || (v190 = ((unsigned __int16)(*v133 * (_WORD)v190
                                                            + ((*v133 * v190) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v191 = WORD1(*(_QWORD *)v49);
              v192 = (v190 | (v190 << 8)) ^ 0xFFFF;
              v193 = (unsigned __int16)*(_QWORD *)v49 * v192 + 0x8000;
              v194 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v192 + 0x8000;
              v195 = v191 * v192 + 0x8000 + ((v191 * v192 + 0x8000) >> 16);
              v196 = HIWORD(*(_QWORD *)v49)
                   - ((v192 * HIWORD(*(_QWORD *)v49)
                     + 0x8000
                     + ((v192 * HIWORD(*(_QWORD *)v49) + 0x8000) >> 16)) >> 16);
              v197 = bswap32(v28[3]) >> 16;
              RGBA64_DMplusDM(v28, (v196 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49)- ((v194 + HIWORD(v194)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v193 + HIWORD(v193)) >> 16)) | ((unsigned __int16)(v191 - HIWORD(v195)) << 16), v197 ^ 0xFFFF, (v197 << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), (unsigned __int16)~(_WORD)v196);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v189;
        }
        while (v189);
        goto LABEL_416;
      case 11:
        v198 = v4;
        v133 = v38;
        do
        {
          v199 = *v50;
          if (*v50)
          {
            if (!v38
              || (v199 = ((unsigned __int16)(*v133 * (_WORD)v199
                                                            + ((*v133 * v199) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v200 = WORD1(*(_QWORD *)v49);
              v201 = (v199 | (v199 << 8)) ^ 0xFFFF;
              v202 = (unsigned __int16)*(_QWORD *)v49 * v201 + 0x8000;
              v203 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v201 + 0x8000;
              v204 = v200 * v201 + 0x8000 + ((v200 * v201 + 0x8000) >> 16);
              v205 = HIWORD(*(_QWORD *)v49)
                   - ((v201 * HIWORD(*(_QWORD *)v49)
                     + 0x8000
                     + ((v201 * HIWORD(*(_QWORD *)v49) + 0x8000) >> 16)) >> 16);
              v206 = (unsigned __int16)v205;
              v207 = (v205 << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49)
                                                                        - ((v203 + HIWORD(v203)) >> 16)) << 32) | (unsigned __int16)(*(_QWORD *)v49 - ((v202 + HIWORD(v202)) >> 16)) | ((unsigned __int16)(v200 - HIWORD(v204)) << 16);
              v208 = bswap32(v28[3]) >> 16;
              v209 = ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v208 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
              if (v468)
                v210 = v208;
              else
                v210 = -1;
              RGBA64_DAplusdDA(v28, v209, v210, v207, v206);
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v198;
        }
        while (v198);
        goto LABEL_416;
      case 12:
        v211 = v4;
        v133 = v38;
        do
        {
          v212 = *v50;
          if (*v50)
          {
            if (!v38
              || (v212 = ((unsigned __int16)(*v133 * (_WORD)v212
                                                            + ((*v133 * v212) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v213 = WORD1(*(_QWORD *)v49);
              v214 = HIWORD(*(_QWORD *)v49);
              v215 = (v212 | (v212 << 8)) ^ 0xFFFF;
              v216 = (unsigned __int16)*(_QWORD *)v49 * v215 + 0x8000;
              v217 = (unsigned __int16)WORD2(*(_QWORD *)v49) * v215 + 0x8000;
              RGBA64_DpluslD(v28, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), ((unint64_t)(v214- ((v215 * (_DWORD)v214 + 0x8000 + ((v215 * v214 + 0x8000) >> 16)) >> 16)) << 48) | ((unint64_t)(unsigned __int16)(HIDWORD(*(_QWORD *)v49) - ((v217 + HIWORD(v217)) >> 16)) << 32) | ((v213 - ((v213 * v215 + 0x8000 + ((v213 * v215 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(*(_QWORD *)v49 - ((v216 + HIWORD(v216)) >> 16)));
            }
          }
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v211;
        }
        while (v211);
        goto LABEL_416;
      case 13:
        v218 = v4;
        v133 = v38;
        while (1)
        {
          v219 = *v50;
          if (!*v50)
            goto LABEL_246;
          if (v38)
          {
            v219 = ((unsigned __int16)(*v133 * (_WORD)v219 + ((*v133 * v219) >> 8) + 1) >> 8);
            if (!v219)
              goto LABEL_246;
          }
          v220 = *(_QWORD *)v49;
          v221 = HIWORD(*(_QWORD *)v49);
          v222 = (v219 | (v219 << 8)) ^ 0xFFFF;
          v223 = v221
               - ((v222 * (_DWORD)v221 + 0x8000 + ((v222 * v221 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v221 == (v222 * (_DWORD)v221 + 0x8000 + ((v222 * v221 + 0x8000) >> 16)) >> 16)
            goto LABEL_246;
          v224 = WORD2(v220) * v222 + 0x8000 + ((WORD2(v220) * v222 + 0x8000) >> 16);
          v225 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v222
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v222 + 0x8000) >> 16)) >> 16);
          v226 = WORD1(v220)
               - ((WORD1(v220) * v222 + 0x8000 + ((WORD1(v220) * v222 + 0x8000) >> 16)) >> 16);
          v227 = HIDWORD(v220) - HIWORD(v224);
          v228 = __rev16(v28[3]);
          if (!v468)
            break;
          v229 = v228;
          if (v28[3])
            goto LABEL_244;
          *v28 = bswap32(v225) >> 16;
          v28[1] = bswap32(v226) >> 16;
          v28[2] = bswap32(v227) >> 16;
LABEL_245:
          v28[3] = bswap32(v223) >> 16;
LABEL_246:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v218)
            goto LABEL_416;
        }
        v229 = 0xFFFF;
LABEL_244:
        v230 = PDAmultiplyPDA_13494(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v228 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v229, (unsigned __int16)v225 | ((unsigned __int16)v226 << 16) | (v223 << 48) | ((unint64_t)(unsigned __int16)v227 << 32), (unsigned __int16)v223);
        v223 = HIWORD(v230);
        v231 = bswap32(v230);
        *v28 = HIWORD(v231);
        v28[1] = v231;
        v28[2] = bswap32(HIDWORD(v230)) >> 16;
        goto LABEL_245;
      case 14:
        v232 = v4;
        v133 = v38;
        while (1)
        {
          v233 = *v50;
          if (!*v50)
            goto LABEL_259;
          if (v38)
          {
            v233 = ((unsigned __int16)(*v133 * (_WORD)v233 + ((*v133 * v233) >> 8) + 1) >> 8);
            if (!v233)
              goto LABEL_259;
          }
          v234 = *(_QWORD *)v49;
          v235 = HIWORD(*(_QWORD *)v49);
          v236 = (v233 | (v233 << 8)) ^ 0xFFFF;
          v237 = v235
               - ((v236 * (_DWORD)v235 + 0x8000 + ((v236 * v235 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v235 == (v236 * (_DWORD)v235 + 0x8000 + ((v236 * v235 + 0x8000) >> 16)) >> 16)
            goto LABEL_259;
          v238 = WORD2(v234) * v236 + 0x8000 + ((WORD2(v234) * v236 + 0x8000) >> 16);
          v239 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v236
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v236 + 0x8000) >> 16)) >> 16);
          v240 = WORD1(v234)
               - ((WORD1(v234) * v236 + 0x8000 + ((WORD1(v234) * v236 + 0x8000) >> 16)) >> 16);
          v241 = HIDWORD(v234) - HIWORD(v238);
          v242 = __rev16(v28[3]);
          if (!v468)
            break;
          v243 = v242;
          if (v28[3])
            goto LABEL_257;
          *v28 = bswap32(v239) >> 16;
          v28[1] = bswap32(v240) >> 16;
          v28[2] = bswap32(v241) >> 16;
LABEL_258:
          v28[3] = bswap32(v237) >> 16;
LABEL_259:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v232)
            goto LABEL_416;
        }
        v243 = 0xFFFF;
LABEL_257:
        v244 = PDAscreenPDA_13495(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v242 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v243, (unsigned __int16)v239 | ((unsigned __int16)v240 << 16) | (v237 << 48) | ((unint64_t)(unsigned __int16)v241 << 32), (unsigned __int16)v237);
        v237 = HIWORD(v244);
        v245 = bswap32(v244);
        *v28 = HIWORD(v245);
        v28[1] = v245;
        v28[2] = bswap32(HIDWORD(v244)) >> 16;
        goto LABEL_258;
      case 15:
        v246 = v4;
        v133 = v38;
        while (1)
        {
          v247 = *v50;
          if (!*v50)
            goto LABEL_272;
          if (v38)
          {
            v247 = ((unsigned __int16)(*v133 * (_WORD)v247 + ((*v133 * v247) >> 8) + 1) >> 8);
            if (!v247)
              goto LABEL_272;
          }
          v248 = *(_QWORD *)v49;
          v249 = HIWORD(*(_QWORD *)v49);
          v250 = (v247 | (v247 << 8)) ^ 0xFFFF;
          v251 = v249
               - ((v250 * (_DWORD)v249 + 0x8000 + ((v250 * v249 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v249 == (v250 * (_DWORD)v249 + 0x8000 + ((v250 * v249 + 0x8000) >> 16)) >> 16)
            goto LABEL_272;
          v252 = WORD2(v248) * v250 + 0x8000 + ((WORD2(v248) * v250 + 0x8000) >> 16);
          v253 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v250
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v250 + 0x8000) >> 16)) >> 16);
          v254 = WORD1(v248)
               - ((WORD1(v248) * v250 + 0x8000 + ((WORD1(v248) * v250 + 0x8000) >> 16)) >> 16);
          v255 = HIDWORD(v248) - HIWORD(v252);
          v256 = __rev16(v28[3]);
          if (!v468)
            break;
          v257 = v256;
          if (v28[3])
            goto LABEL_270;
          *v28 = bswap32(v253) >> 16;
          v28[1] = bswap32(v254) >> 16;
          v28[2] = bswap32(v255) >> 16;
LABEL_271:
          v28[3] = bswap32(v251) >> 16;
LABEL_272:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v246)
            goto LABEL_416;
        }
        v257 = 0xFFFF;
LABEL_270:
        v258 = PDAoverlayPDA_13496(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v256 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v257, (unsigned __int16)v253 | ((unsigned __int16)v254 << 16) | (v251 << 48) | ((unint64_t)(unsigned __int16)v255 << 32), (unsigned __int16)v251);
        v251 = HIWORD(v258);
        v259 = bswap32(v258);
        *v28 = HIWORD(v259);
        v28[1] = v259;
        v28[2] = bswap32(HIDWORD(v258)) >> 16;
        goto LABEL_271;
      case 16:
        v260 = v4;
        v133 = v38;
        while (1)
        {
          v261 = *v50;
          if (!*v50)
            goto LABEL_285;
          if (v38)
          {
            v261 = ((unsigned __int16)(*v133 * (_WORD)v261 + ((*v133 * v261) >> 8) + 1) >> 8);
            if (!v261)
              goto LABEL_285;
          }
          v262 = *(_QWORD *)v49;
          v263 = HIWORD(*(_QWORD *)v49);
          v264 = (v261 | (v261 << 8)) ^ 0xFFFF;
          v265 = v263
               - ((v264 * (_DWORD)v263 + 0x8000 + ((v264 * v263 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v263 == (v264 * (_DWORD)v263 + 0x8000 + ((v264 * v263 + 0x8000) >> 16)) >> 16)
            goto LABEL_285;
          v266 = WORD2(v262) * v264 + 0x8000 + ((WORD2(v262) * v264 + 0x8000) >> 16);
          v267 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v264
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v264 + 0x8000) >> 16)) >> 16);
          v268 = WORD1(v262)
               - ((WORD1(v262) * v264 + 0x8000 + ((WORD1(v262) * v264 + 0x8000) >> 16)) >> 16);
          v269 = HIDWORD(v262) - HIWORD(v266);
          v270 = __rev16(v28[3]);
          if (!v468)
            break;
          v271 = v270;
          if (v28[3])
            goto LABEL_283;
          *v28 = bswap32(v267) >> 16;
          v28[1] = bswap32(v268) >> 16;
          v28[2] = bswap32(v269) >> 16;
LABEL_284:
          v28[3] = bswap32(v265) >> 16;
LABEL_285:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v260)
            goto LABEL_416;
        }
        v271 = 0xFFFF;
LABEL_283:
        v272 = PDAdarkenPDA_13498(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v270 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v271, (unsigned __int16)v267 | ((unsigned __int16)v268 << 16) | (v265 << 48) | ((unint64_t)(unsigned __int16)v269 << 32), (unsigned __int16)v265);
        v265 = HIWORD(v272);
        v273 = bswap32(v272);
        *v28 = HIWORD(v273);
        v28[1] = v273;
        v28[2] = bswap32(HIDWORD(v272)) >> 16;
        goto LABEL_284;
      case 17:
        v274 = v4;
        v133 = v38;
        while (1)
        {
          v275 = *v50;
          if (!*v50)
            goto LABEL_298;
          if (v38)
          {
            v275 = ((unsigned __int16)(*v133 * (_WORD)v275 + ((*v133 * v275) >> 8) + 1) >> 8);
            if (!v275)
              goto LABEL_298;
          }
          v276 = *(_QWORD *)v49;
          v277 = HIWORD(*(_QWORD *)v49);
          v278 = (v275 | (v275 << 8)) ^ 0xFFFF;
          v279 = v277
               - ((v278 * (_DWORD)v277 + 0x8000 + ((v278 * v277 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v277 == (v278 * (_DWORD)v277 + 0x8000 + ((v278 * v277 + 0x8000) >> 16)) >> 16)
            goto LABEL_298;
          v280 = WORD2(v276) * v278 + 0x8000 + ((WORD2(v276) * v278 + 0x8000) >> 16);
          v281 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v278
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v278 + 0x8000) >> 16)) >> 16);
          v282 = WORD1(v276)
               - ((WORD1(v276) * v278 + 0x8000 + ((WORD1(v276) * v278 + 0x8000) >> 16)) >> 16);
          v283 = HIDWORD(v276) - HIWORD(v280);
          v284 = __rev16(v28[3]);
          if (!v468)
            break;
          v285 = v284;
          if (v28[3])
            goto LABEL_296;
          *v28 = bswap32(v281) >> 16;
          v28[1] = bswap32(v282) >> 16;
          v28[2] = bswap32(v283) >> 16;
LABEL_297:
          v28[3] = bswap32(v279) >> 16;
LABEL_298:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v274)
            goto LABEL_416;
        }
        v285 = 0xFFFF;
LABEL_296:
        v286 = PDAlightenPDA_13497(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v284 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v285, (unsigned __int16)v281 | ((unsigned __int16)v282 << 16) | (v279 << 48) | ((unint64_t)(unsigned __int16)v283 << 32), (unsigned __int16)v279);
        v279 = HIWORD(v286);
        v287 = bswap32(v286);
        *v28 = HIWORD(v287);
        v28[1] = v287;
        v28[2] = bswap32(HIDWORD(v286)) >> 16;
        goto LABEL_297;
      case 18:
        v288 = v4;
        v133 = v38;
        while (1)
        {
          v289 = *v50;
          if (!*v50)
            goto LABEL_311;
          if (v38)
          {
            v289 = ((unsigned __int16)(*v133 * (_WORD)v289 + ((*v133 * v289) >> 8) + 1) >> 8);
            if (!v289)
              goto LABEL_311;
          }
          v290 = *(_QWORD *)v49;
          v291 = HIWORD(*(_QWORD *)v49);
          v292 = (v289 | (v289 << 8)) ^ 0xFFFF;
          v293 = v291
               - ((v292 * (_DWORD)v291 + 0x8000 + ((v292 * v291 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v291 == (v292 * (_DWORD)v291 + 0x8000 + ((v292 * v291 + 0x8000) >> 16)) >> 16)
            goto LABEL_311;
          v294 = WORD2(v290) * v292 + 0x8000 + ((WORD2(v290) * v292 + 0x8000) >> 16);
          v295 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v292
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v292 + 0x8000) >> 16)) >> 16);
          v296 = WORD1(v290)
               - ((WORD1(v290) * v292 + 0x8000 + ((WORD1(v290) * v292 + 0x8000) >> 16)) >> 16);
          v297 = HIDWORD(v290) - HIWORD(v294);
          v298 = __rev16(v28[3]);
          if (!v468)
            break;
          v299 = v298;
          if (v28[3])
            goto LABEL_309;
          *v28 = bswap32(v295) >> 16;
          v28[1] = bswap32(v296) >> 16;
          v28[2] = bswap32(v297) >> 16;
LABEL_310:
          v28[3] = bswap32(v293) >> 16;
LABEL_311:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v288)
            goto LABEL_416;
        }
        v299 = 0xFFFF;
LABEL_309:
        v300 = PDAcolordodgePDA_13499(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v298 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v299, (unsigned __int16)v295 | ((unsigned __int16)v296 << 16) | (v293 << 48) | ((unint64_t)(unsigned __int16)v297 << 32), (unsigned __int16)v293);
        v293 = HIWORD(v300);
        v301 = bswap32(v300);
        *v28 = HIWORD(v301);
        v28[1] = v301;
        v28[2] = bswap32(HIDWORD(v300)) >> 16;
        goto LABEL_310;
      case 19:
        v302 = v4;
        v133 = v38;
        while (1)
        {
          v303 = *v50;
          if (!*v50)
            goto LABEL_324;
          if (v38)
          {
            v303 = ((unsigned __int16)(*v133 * (_WORD)v303 + ((*v133 * v303) >> 8) + 1) >> 8);
            if (!v303)
              goto LABEL_324;
          }
          v304 = *(_QWORD *)v49;
          v305 = HIWORD(*(_QWORD *)v49);
          v306 = (v303 | (v303 << 8)) ^ 0xFFFF;
          v307 = v305
               - ((v306 * (_DWORD)v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v305 == (v306 * (_DWORD)v305 + 0x8000 + ((v306 * v305 + 0x8000) >> 16)) >> 16)
            goto LABEL_324;
          v308 = WORD2(v304) * v306 + 0x8000 + ((WORD2(v304) * v306 + 0x8000) >> 16);
          v309 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v306
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v306 + 0x8000) >> 16)) >> 16);
          v310 = WORD1(v304)
               - ((WORD1(v304) * v306 + 0x8000 + ((WORD1(v304) * v306 + 0x8000) >> 16)) >> 16);
          v311 = HIDWORD(v304) - HIWORD(v308);
          v312 = __rev16(v28[3]);
          if (!v468)
            break;
          v313 = v312;
          if (v28[3])
            goto LABEL_322;
          *v28 = bswap32(v309) >> 16;
          v28[1] = bswap32(v310) >> 16;
          v28[2] = bswap32(v311) >> 16;
LABEL_323:
          v28[3] = bswap32(v307) >> 16;
LABEL_324:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v302)
            goto LABEL_416;
        }
        v313 = 0xFFFF;
LABEL_322:
        v314 = PDAcolorburnPDA_13500(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v312 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v313, (unsigned __int16)v309 | ((unsigned __int16)v310 << 16) | (v307 << 48) | ((unint64_t)(unsigned __int16)v311 << 32), (unsigned __int16)v307);
        v307 = HIWORD(v314);
        v315 = bswap32(v314);
        *v28 = HIWORD(v315);
        v28[1] = v315;
        v28[2] = bswap32(HIDWORD(v314)) >> 16;
        goto LABEL_323;
      case 20:
        v316 = v4;
        v133 = v38;
        while (1)
        {
          v317 = *v50;
          if (!*v50)
            goto LABEL_337;
          if (v38)
          {
            v317 = ((unsigned __int16)(*v133 * (_WORD)v317 + ((*v133 * v317) >> 8) + 1) >> 8);
            if (!v317)
              goto LABEL_337;
          }
          v318 = *(_QWORD *)v49;
          v319 = HIWORD(*(_QWORD *)v49);
          v320 = (v317 | (v317 << 8)) ^ 0xFFFF;
          v321 = v319
               - ((v320 * (_DWORD)v319 + 0x8000 + ((v320 * v319 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v319 == (v320 * (_DWORD)v319 + 0x8000 + ((v320 * v319 + 0x8000) >> 16)) >> 16)
            goto LABEL_337;
          v322 = WORD2(v318) * v320 + 0x8000 + ((WORD2(v318) * v320 + 0x8000) >> 16);
          v323 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v320
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v320 + 0x8000) >> 16)) >> 16);
          v324 = WORD1(v318)
               - ((WORD1(v318) * v320 + 0x8000 + ((WORD1(v318) * v320 + 0x8000) >> 16)) >> 16);
          v325 = HIDWORD(v318) - HIWORD(v322);
          v326 = __rev16(v28[3]);
          if (!v468)
            break;
          v327 = v326;
          if (v28[3])
            goto LABEL_335;
          *v28 = bswap32(v323) >> 16;
          v28[1] = bswap32(v324) >> 16;
          v28[2] = bswap32(v325) >> 16;
LABEL_336:
          v28[3] = bswap32(v321) >> 16;
LABEL_337:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v316)
            goto LABEL_416;
        }
        v327 = 0xFFFF;
LABEL_335:
        v328 = PDAsoftlightPDA_13502(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v326 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v327, (unsigned __int16)v323 | ((unsigned __int16)v324 << 16) | (v321 << 48) | ((unint64_t)(unsigned __int16)v325 << 32), (unsigned __int16)v321);
        v321 = HIWORD(v328);
        v329 = bswap32(v328);
        *v28 = HIWORD(v329);
        v28[1] = v329;
        v28[2] = bswap32(HIDWORD(v328)) >> 16;
        goto LABEL_336;
      case 21:
        v330 = v4;
        v133 = v38;
        while (1)
        {
          v331 = *v50;
          if (!*v50)
            goto LABEL_350;
          if (v38)
          {
            v331 = ((unsigned __int16)(*v133 * (_WORD)v331 + ((*v133 * v331) >> 8) + 1) >> 8);
            if (!v331)
              goto LABEL_350;
          }
          v332 = *(_QWORD *)v49;
          v333 = HIWORD(*(_QWORD *)v49);
          v334 = (v331 | (v331 << 8)) ^ 0xFFFF;
          v335 = v333
               - ((v334 * (_DWORD)v333 + 0x8000 + ((v334 * v333 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v333 == (v334 * (_DWORD)v333 + 0x8000 + ((v334 * v333 + 0x8000) >> 16)) >> 16)
            goto LABEL_350;
          v336 = WORD2(v332) * v334 + 0x8000 + ((WORD2(v332) * v334 + 0x8000) >> 16);
          v337 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v334
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v334 + 0x8000) >> 16)) >> 16);
          v338 = WORD1(v332)
               - ((WORD1(v332) * v334 + 0x8000 + ((WORD1(v332) * v334 + 0x8000) >> 16)) >> 16);
          v339 = HIDWORD(v332) - HIWORD(v336);
          v340 = __rev16(v28[3]);
          if (!v468)
            break;
          v341 = v340;
          if (v28[3])
            goto LABEL_348;
          *v28 = bswap32(v337) >> 16;
          v28[1] = bswap32(v338) >> 16;
          v28[2] = bswap32(v339) >> 16;
LABEL_349:
          v28[3] = bswap32(v335) >> 16;
LABEL_350:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v330)
            goto LABEL_416;
        }
        v341 = 0xFFFF;
LABEL_348:
        v342 = PDAhardlightPDA_13501(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v340 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v341, (unsigned __int16)v337 | ((unsigned __int16)v338 << 16) | (v335 << 48) | ((unint64_t)(unsigned __int16)v339 << 32), (unsigned __int16)v335);
        v335 = HIWORD(v342);
        v343 = bswap32(v342);
        *v28 = HIWORD(v343);
        v28[1] = v343;
        v28[2] = bswap32(HIDWORD(v342)) >> 16;
        goto LABEL_349;
      case 22:
        v344 = v4;
        v133 = v38;
        while (1)
        {
          v345 = *v50;
          if (!*v50)
            goto LABEL_363;
          if (v38)
          {
            v345 = ((unsigned __int16)(*v133 * (_WORD)v345 + ((*v133 * v345) >> 8) + 1) >> 8);
            if (!v345)
              goto LABEL_363;
          }
          v346 = *(_QWORD *)v49;
          v347 = HIWORD(*(_QWORD *)v49);
          v348 = (v345 | (v345 << 8)) ^ 0xFFFF;
          v349 = v347
               - ((v348 * (_DWORD)v347 + 0x8000 + ((v348 * v347 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v347 == (v348 * (_DWORD)v347 + 0x8000 + ((v348 * v347 + 0x8000) >> 16)) >> 16)
            goto LABEL_363;
          v350 = WORD2(v346) * v348 + 0x8000 + ((WORD2(v346) * v348 + 0x8000) >> 16);
          v351 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v348
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v348 + 0x8000) >> 16)) >> 16);
          v352 = WORD1(v346)
               - ((WORD1(v346) * v348 + 0x8000 + ((WORD1(v346) * v348 + 0x8000) >> 16)) >> 16);
          v353 = HIDWORD(v346) - HIWORD(v350);
          v354 = __rev16(v28[3]);
          if (!v468)
            break;
          v355 = v354;
          if (v28[3])
            goto LABEL_361;
          *v28 = bswap32(v351) >> 16;
          v28[1] = bswap32(v352) >> 16;
          v28[2] = bswap32(v353) >> 16;
LABEL_362:
          v28[3] = bswap32(v349) >> 16;
LABEL_363:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v344)
            goto LABEL_416;
        }
        v355 = 0xFFFF;
LABEL_361:
        v356 = PDAdifferencePDA_13503(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v354 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v355, (unsigned __int16)v351 | ((unsigned __int16)v352 << 16) | (v349 << 48) | ((unint64_t)(unsigned __int16)v353 << 32), (unsigned __int16)v349);
        v349 = HIWORD(v356);
        v357 = bswap32(v356);
        *v28 = HIWORD(v357);
        v28[1] = v357;
        v28[2] = bswap32(HIDWORD(v356)) >> 16;
        goto LABEL_362;
      case 23:
        v358 = v4;
        v133 = v38;
        while (1)
        {
          v359 = *v50;
          if (!*v50)
            goto LABEL_376;
          if (v38)
          {
            v359 = ((unsigned __int16)(*v133 * (_WORD)v359 + ((*v133 * v359) >> 8) + 1) >> 8);
            if (!v359)
              goto LABEL_376;
          }
          v360 = *(_QWORD *)v49;
          v361 = HIWORD(*(_QWORD *)v49);
          v362 = (v359 | (v359 << 8)) ^ 0xFFFF;
          v363 = v361
               - ((v362 * (_DWORD)v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v361 == (v362 * (_DWORD)v361 + 0x8000 + ((v362 * v361 + 0x8000) >> 16)) >> 16)
            goto LABEL_376;
          v364 = WORD2(v360) * v362 + 0x8000 + ((WORD2(v360) * v362 + 0x8000) >> 16);
          v365 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v362
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v362 + 0x8000) >> 16)) >> 16);
          v366 = WORD1(v360)
               - ((WORD1(v360) * v362 + 0x8000 + ((WORD1(v360) * v362 + 0x8000) >> 16)) >> 16);
          v367 = HIDWORD(v360) - HIWORD(v364);
          v368 = __rev16(v28[3]);
          if (!v468)
            break;
          v369 = v368;
          if (v28[3])
            goto LABEL_374;
          *v28 = bswap32(v365) >> 16;
          v28[1] = bswap32(v366) >> 16;
          v28[2] = bswap32(v367) >> 16;
LABEL_375:
          v28[3] = bswap32(v363) >> 16;
LABEL_376:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v358)
            goto LABEL_416;
        }
        v369 = 0xFFFF;
LABEL_374:
        v370 = PDAexclusionPDA_13504(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v368 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v369, (unsigned __int16)v365 | ((unsigned __int16)v366 << 16) | (v363 << 48) | ((unint64_t)(unsigned __int16)v367 << 32), (unsigned __int16)v363);
        v363 = HIWORD(v370);
        v371 = bswap32(v370);
        *v28 = HIWORD(v371);
        v28[1] = v371;
        v28[2] = bswap32(HIDWORD(v370)) >> 16;
        goto LABEL_375;
      case 24:
        v372 = v4;
        v133 = v38;
        while (1)
        {
          v373 = *v50;
          if (!*v50)
            goto LABEL_389;
          if (v38)
          {
            v373 = ((unsigned __int16)(*v133 * (_WORD)v373 + ((*v133 * v373) >> 8) + 1) >> 8);
            if (!v373)
              goto LABEL_389;
          }
          v374 = *(_QWORD *)v49;
          v375 = HIWORD(*(_QWORD *)v49);
          v376 = (v373 | (v373 << 8)) ^ 0xFFFF;
          v377 = v375
               - ((v376 * (_DWORD)v375 + 0x8000 + ((v376 * v375 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v375 == (v376 * (_DWORD)v375 + 0x8000 + ((v376 * v375 + 0x8000) >> 16)) >> 16)
            goto LABEL_389;
          v378 = WORD2(v374) * v376 + 0x8000 + ((WORD2(v374) * v376 + 0x8000) >> 16);
          v379 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v376
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v376 + 0x8000) >> 16)) >> 16);
          v380 = WORD1(v374)
               - ((WORD1(v374) * v376 + 0x8000 + ((WORD1(v374) * v376 + 0x8000) >> 16)) >> 16);
          v381 = HIDWORD(v374) - HIWORD(v378);
          v382 = __rev16(v28[3]);
          if (!v468)
            break;
          v383 = v382;
          if (v28[3])
            goto LABEL_387;
          *v28 = bswap32(v379) >> 16;
          v28[1] = bswap32(v380) >> 16;
          v28[2] = bswap32(v381) >> 16;
LABEL_388:
          v28[3] = bswap32(v377) >> 16;
LABEL_389:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v372)
            goto LABEL_416;
        }
        v383 = 0xFFFF;
LABEL_387:
        v384 = PDAhuePDA_13505(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v382 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v383, (unsigned __int16)v379 | ((unsigned __int16)v380 << 16) | (v377 << 48) | ((unint64_t)(unsigned __int16)v381 << 32), (unsigned __int16)v377);
        v377 = HIWORD(v384);
        v385 = bswap32(v384);
        *v28 = HIWORD(v385);
        v28[1] = v385;
        v28[2] = bswap32(HIDWORD(v384)) >> 16;
        goto LABEL_388;
      case 25:
        v386 = v4;
        v133 = v38;
        while (1)
        {
          v387 = *v50;
          if (!*v50)
            goto LABEL_402;
          if (v38)
          {
            v387 = ((unsigned __int16)(*v133 * (_WORD)v387 + ((*v133 * v387) >> 8) + 1) >> 8);
            if (!v387)
              goto LABEL_402;
          }
          v388 = *(_QWORD *)v49;
          v389 = HIWORD(*(_QWORD *)v49);
          v390 = (v387 | (v387 << 8)) ^ 0xFFFF;
          v391 = v389
               - ((v390 * (_DWORD)v389 + 0x8000 + ((v390 * v389 + 0x8000) >> 16)) >> 16);
          if ((_WORD)v389 == (v390 * (_DWORD)v389 + 0x8000 + ((v390 * v389 + 0x8000) >> 16)) >> 16)
            goto LABEL_402;
          v392 = WORD2(v388) * v390 + 0x8000 + ((WORD2(v388) * v390 + 0x8000) >> 16);
          v393 = *(_QWORD *)v49
               - (((unsigned __int16)*(_QWORD *)v49 * v390
                 + 0x8000
                 + (((unsigned __int16)*(_QWORD *)v49 * v390 + 0x8000) >> 16)) >> 16);
          v394 = WORD1(v388)
               - ((WORD1(v388) * v390 + 0x8000 + ((WORD1(v388) * v390 + 0x8000) >> 16)) >> 16);
          v395 = HIDWORD(v388) - HIWORD(v392);
          v396 = __rev16(v28[3]);
          if (!v468)
            break;
          v397 = v396;
          if (v28[3])
            goto LABEL_400;
          *v28 = bswap32(v393) >> 16;
          v28[1] = bswap32(v394) >> 16;
          v28[2] = bswap32(v395) >> 16;
LABEL_401:
          v28[3] = bswap32(v391) >> 16;
LABEL_402:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          if (!--v386)
            goto LABEL_416;
        }
        v397 = 0xFFFF;
LABEL_400:
        v398 = PDAsaturationPDA_13506(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v396 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v397, (unsigned __int16)v393 | ((unsigned __int16)v394 << 16) | (v391 << 48) | ((unint64_t)(unsigned __int16)v395 << 32), (unsigned __int16)v391);
        v391 = HIWORD(v398);
        v399 = bswap32(v398);
        *v28 = HIWORD(v399);
        v28[1] = v399;
        v28[2] = bswap32(HIDWORD(v398)) >> 16;
        goto LABEL_401;
      case 26:
        v400 = v4;
        v133 = v38;
        do
        {
          v401 = *v50;
          if (*v50)
          {
            if (!v38
              || (v401 = ((unsigned __int16)(*v133 * (_WORD)v401
                                                            + ((*v133 * v401) >> 8)
                                                            + 1) >> 8)) != 0)
            {
              v402 = *(_QWORD *)v49;
              v403 = HIWORD(*(_QWORD *)v49);
              v404 = (v401 | (v401 << 8)) ^ 0xFFFF;
              v405 = v403
                   - ((v404 * (_DWORD)v403 + 0x8000 + ((v404 * v403 + 0x8000) >> 16)) >> 16);
              if ((_WORD)v403 != (v404 * (_DWORD)v403 + 0x8000 + ((v404 * v403 + 0x8000) >> 16)) >> 16)
              {
                v406 = WORD2(v402) * v404 + 0x8000 + ((WORD2(v402) * v404 + 0x8000) >> 16);
                v407 = *(_QWORD *)v49
                     - (((unsigned __int16)*(_QWORD *)v49 * v404
                       + 0x8000
                       + (((unsigned __int16)*(_QWORD *)v49 * v404 + 0x8000) >> 16)) >> 16);
                v408 = WORD1(v402)
                     - ((WORD1(v402) * v404 + 0x8000 + ((WORD1(v402) * v404 + 0x8000) >> 16)) >> 16);
                v409 = HIDWORD(v402) - HIWORD(v406);
                v410 = __rev16(v28[3]);
                if (v468)
                {
                  v411 = v410;
                  if (!v28[3])
                  {
                    *v28 = bswap32(v407) >> 16;
                    v28[1] = bswap32(v408) >> 16;
                    v28[2] = bswap32(v409) >> 16;
LABEL_414:
                    v28[3] = bswap32(v405) >> 16;
                    goto LABEL_415;
                  }
                }
                else
                {
                  v411 = 0xFFFF;
                }
                v412 = PDAluminosityPDA_13507((unsigned __int16)v407 | ((unsigned __int16)v408 << 16) | (v405 << 48) | ((unint64_t)(unsigned __int16)v409 << 32), (unsigned __int16)v405, ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v410 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v411);
                v405 = HIWORD(v412);
                v413 = bswap32(v412);
                *v28 = HIWORD(v413);
                v28[1] = v413;
                v28[2] = bswap32(HIDWORD(v412)) >> 16;
                goto LABEL_414;
              }
            }
          }
LABEL_415:
          ++v50;
          v49 += 8;
          v133 += v38 != 0;
          v28 += 4;
          --v400;
        }
        while (v400);
LABEL_416:
        v38 = &v133[v456];
LABEL_417:
        v28 += 4 * v457;
        v39 = v459;
LABEL_418:
        v40 = v461;
LABEL_419:
        v101 = v466;
        v102 = v467;
LABEL_420:
        if (v465 != 1)
        {
          --v465;
          v47 = 0;
          v36 = v462 + 1;
          v33 = v40[16] + v101;
          v34 = v40[17] + v102;
          if (v463)
          {
            v35 = v463;
            goto LABEL_468;
          }
          continue;
        }
        v35 = v463;
LABEL_463:
        if (v35)
          free(v35);
LABEL_465:
        if (v451)
          free(v451);
        return;
      case 27:
        v414 = v38;
        v415 = v4;
        break;
      default:
        goto LABEL_419;
    }
    break;
  }
  while (1)
  {
    v416 = *v50;
    if (!*v50)
      goto LABEL_434;
    if (v38)
    {
      v416 = ((unsigned __int16)(*v414 * (_WORD)v416 + ((*v414 * v416) >> 8) + 1) >> 8);
      if (!v416)
        goto LABEL_434;
    }
    v417 = *(_QWORD *)v49;
    v418 = HIWORD(*(_QWORD *)v49);
    v419 = (v416 | (v416 << 8)) ^ 0xFFFF;
    v420 = v418 - ((v419 * (_DWORD)v418 + 0x8000 + ((v419 * v418 + 0x8000) >> 16)) >> 16);
    if ((_WORD)v418 == (v419 * (_DWORD)v418 + 0x8000 + ((v419 * v418 + 0x8000) >> 16)) >> 16)
      goto LABEL_434;
    v421 = WORD2(v417) * v419 + 0x8000 + ((WORD2(v417) * v419 + 0x8000) >> 16);
    v422 = *(_QWORD *)v49
         - (((unsigned __int16)*(_QWORD *)v49 * v419
           + 0x8000
           + (((unsigned __int16)*(_QWORD *)v49 * v419 + 0x8000) >> 16)) >> 16);
    v423 = WORD1(v417) - ((WORD1(v417) * v419 + 0x8000 + ((WORD1(v417) * v419 + 0x8000) >> 16)) >> 16);
    v424 = HIDWORD(v417) - HIWORD(v421);
    v425 = __rev16(v28[3]);
    if (!v468)
      break;
    v426 = v425;
    if (v28[3])
      goto LABEL_432;
    *v28 = bswap32(v422) >> 16;
    v28[1] = bswap32(v423) >> 16;
    v28[2] = bswap32(v424) >> 16;
LABEL_433:
    v28[3] = bswap32(v420) >> 16;
LABEL_434:
    ++v50;
    v49 += 8;
    v414 += v38 != 0;
    v28 += 4;
    if (!--v415)
    {
      v38 = &v414[v456];
      goto LABEL_417;
    }
  }
  v426 = 0xFFFF;
LABEL_432:
  v427 = PDAluminosityPDA_13507(((unint64_t)(bswap32(v28[2]) >> 16) << 32) | (v425 << 48) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16), v426, (unsigned __int16)v422 | ((unsigned __int16)v423 << 16) | (v420 << 48) | ((unint64_t)(unsigned __int16)v424 << 32), (unsigned __int16)v420);
  v420 = HIWORD(v427);
  v428 = bswap32(v427);
  *v28 = HIWORD(v428);
  v28[1] = v428;
  v28[2] = bswap32(HIDWORD(v427)) >> 16;
  goto LABEL_433;
}

_WORD *RGBA64_DMplusDM(_WORD *result, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a5;
  v6 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a5;
  v7 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a5;
  v8 = HIWORD(a2) * a3 + HIWORD(a4) * a5;
  if (v5 >= 0xFFFE8000)
    v5 = 4294868992;
  if (v6 >= 0xFFFE8000)
    v6 = 4294868992;
  if (v7 >= 0xFFFE8000)
    v7 = 4294868992;
  if (v8 >= 0xFFFE8000)
    v8 = 4294868992;
  *result = bswap32(((v5 + 0x8000) >> 16) + v5 + 0x8000);
  result[1] = bswap32(((v6 + 0x8000) >> 16) + v6 + 0x8000);
  result[2] = bswap32(((v7 + 0x8000) >> 16) + v7 + 0x8000);
  result[3] = bswap32(((v8 + 0x8000) >> 16) + v8 + 0x8000);
  return result;
}

_WORD *RGBA64_DplusDM(_WORD *result, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4;

  v4 = HIWORD(a3) * a4 + 0x8000;
  *result = bswap32(a2+ (((((unsigned __int16)a3 * (unint64_t)a4 + 0x8000) >> 16)+ (unsigned __int16)a3 * a4+ 0x8000) >> 16)) >> 16;
  result[1] = bswap32(((((WORD1(a3) * (unint64_t)a4 + 0x8000) >> 16) + WORD1(a3) * a4 + 0x8000) >> 16)+ WORD1(a2)) >> 16;
  result[2] = bswap32(HIDWORD(a2)+ ((((WORD2(a3) * (unint64_t)a4 + 0x8000) >> 16) + WORD2(a3) * a4 + 0x8000) >> 16)) >> 16;
  result[3] = bswap32(HIWORD(a2) + (((v4 >> 16) + v4) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DAplusdDA(_WORD *result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v5 = a3 - (unint64_t)(unsigned __int16)a2;
  if (a3 < (unint64_t)(unsigned __int16)a2)
    v5 = 0;
  v6 = a3 - (unint64_t)WORD1(a2);
  if (a3 < (unint64_t)WORD1(a2))
    v6 = 0;
  v7 = a3 - (unint64_t)WORD2(a2);
  if (a3 < (unint64_t)WORD2(a2))
    v7 = 0;
  v8 = a5 - (unint64_t)(unsigned __int16)a4;
  if (a5 < (unint64_t)(unsigned __int16)a4)
    v8 = 0;
  v9 = a5 - (unint64_t)WORD1(a4);
  if (a5 < (unint64_t)WORD1(a4))
    v9 = 0;
  v10 = a5 - (unint64_t)WORD2(a4);
  if (a5 < (unint64_t)WORD2(a4))
    v10 = 0;
  v11 = v8 + v5;
  v12 = v9 + v6;
  v13 = v10 + v7;
  if (v8 + v5 >= 0xFFFF)
    v11 = 0xFFFFLL;
  if (v12 >= 0xFFFF)
    v12 = 0xFFFFLL;
  if (v13 >= 0xFFFF)
    v13 = 0xFFFFLL;
  v14 = (unsigned __int16)(a5 + a3);
  v15 = v14 >= v11;
  v16 = (unsigned __int16)(a5 + a3) - (_DWORD)v11;
  if (!v15)
    v16 = 0;
  v15 = v14 >= v12;
  v17 = v14 - v12;
  if (!v15)
    v17 = 0;
  v15 = v14 >= v13;
  v18 = v14 - v13;
  if (!v15)
    v18 = 0;
  *result = bswap32(v16) >> 16;
  result[1] = bswap32(v17) >> 16;
  result[2] = bswap32(v18) >> 16;
  result[3] = bswap32(a5 + a3) >> 16;
  return result;
}

_WORD *RGBA64_DpluslD(_WORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  v4 = WORD1(a3) + (unint64_t)WORD1(a2);
  v5 = WORD2(a3) + (unint64_t)WORD2(a2);
  v6 = HIWORD(a3) + HIWORD(a2);
  if (v3 >= 0xFFFF)
    LODWORD(v3) = 0xFFFF;
  if (v4 >= 0xFFFF)
    LODWORD(v4) = 0xFFFF;
  if (v5 >= 0xFFFF)
    LODWORD(v5) = 0xFFFF;
  if (v6 >= 0xFFFF)
    LODWORD(v6) = 0xFFFF;
  *result = bswap32(v3) >> 16;
  result[1] = bswap32(v4) >> 16;
  result[2] = bswap32(v5) >> 16;
  result[3] = bswap32(v6) >> 16;
  return result;
}

unint64_t RGBA64_image_mark_W8(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  char v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  unint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;

  v6 = *((unsigned __int16 *)a2 + 4);
  v116 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v115 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v112 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v112 * a4;
  v12 = *(unsigned __int8 **)(result + 32);
  v13 = &v12[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  v126 = result;
  v113 = v10;
  v114 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v14 = a3;
    v110 = *((_QWORD *)a2 + 11);
    v109 = *((_QWORD *)a2 + 13);
    v108 = ~(-1 << v10);
    v107 = v10 - 4;
    v106 = -v9;
    v15 = v13 - 4;
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(255 - ((255 * v16 + 0x8000 + ((255 * v16 + 0x8000) >> 16)) >> 16)) << 48;
    v104 = v8 + 16 * v14 + 8;
    v105 = a5;
    v18 = BLEND8_19499;
    v123 = *((unsigned __int16 *)a2 + 4);
    v121 = v6 ^ 0xFFFF;
    while (1)
    {
      v119 = a6;
      if (((v109 - v11) | (v11 - v110)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v108) >> v107) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v106 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v117 = v11;
      v22 = *(_QWORD *)(v126 + 32) + (v11 >> v10) * v9;
      if (v116 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v104;
        v24 = v105;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int8 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = *v28;
          v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if ((_DWORD)v21)
          {
            v40 = (unsigned __int8 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v40 = v15;
            if (v40 < v12)
              v40 = v12;
            v41 = v18[v21];
            v29 -= (v41 & v29) >> v21;
            v39 = (v41 & *v40) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v29 = v29;
          v42 = (0x100010001 * (v29 | (v29 << 8))) | 0xFFFF000000000000;
          v43 = (unsigned __int16)(v29 - ((v29 * v16 + 0x8000 + ((v29 * v16 + 0x8000) >> 16)) >> 16));
          v44 = ((unint64_t)v43 << 16) | (v43 << 32) | v17 | v43;
          if (v6 == 0xFFFF)
            v44 = v42;
          v45 = HIDWORD(v44);
          v46 = HIWORD(v44);
          v47 = bswap32(v44);
          *v7 = HIWORD(v47);
          v7[1] = v47;
          v7[2] = bswap32(v45) >> 16;
          v7[3] = __rev16(v46);
          v7 += 4;
          if (!--v24)
            goto LABEL_84;
        }
        v31 = (unsigned __int8 *)(v27 + (v26 >> 4));
        if (v15 < v31)
          v31 = v15;
        if (v31 < v12)
          v31 = v12;
        v32 = *v31;
        if ((_DWORD)v21)
        {
          v33 = (unsigned __int8 *)(v27 + v20);
          if (v15 >= v33)
            v34 = v33;
          else
            v34 = v15;
          if (v34 < v12)
            v34 = v12;
          v35 = *v34;
          v36 = &v33[v26 >> 4];
          if (v15 < v36)
            v36 = v15;
          if (v36 < v12)
            v36 = v12;
          v37 = v18[v21];
          result = (v37 & v32) >> v21;
          v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          v32 = v32 - result + ((v37 & *v36) >> v21);
        }
        v38 = v18[*v23 & 0xF];
        v29 -= (v38 & v29) >> v30;
        v39 = (v38 & v32) >> v30;
LABEL_40:
        LOBYTE(v29) = v29 + v39;
        goto LABEL_41;
      }
LABEL_84:
      v9 = v114;
      v7 += 4 * v115;
      LOBYTE(v10) = v113;
      v11 = v117 + v112;
      a6 = v119 - 1;
      if (v119 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_84;
    v124 = v21;
    v48 = (uint64_t *)v104;
    v49 = v105;
    while (1)
    {
      v50 = *(v48 - 1);
      v51 = *v48;
      v52 = v22 + v50;
      if ((unint64_t)v15 >= v22 + v50)
        v53 = (unsigned __int8 *)(v22 + v50);
      else
        v53 = v15;
      if (v53 < v12)
        v53 = v12;
      v54 = *v53;
      v55 = v51 & 0xF;
      if ((v51 & 0xF) != 0)
        break;
      if ((_DWORD)v21)
      {
        v65 = (unsigned __int8 *)(v52 + v20);
        if ((unint64_t)v15 < v52 + v20)
          v65 = v15;
        if (v65 < v12)
          v65 = v12;
        v66 = v18[v124];
        v54 -= (v66 & v54) >> v21;
        v64 = (v66 & *v65) >> v21;
        goto LABEL_75;
      }
LABEL_76:
      v54 = v54;
      v67 = (0x100010001 * (v54 | (v54 << 8))) | 0xFFFF000000000000;
      v68 = (unsigned __int16)(v54 - ((v54 * v16 + 0x8000 + ((v54 * v16 + 0x8000) >> 16)) >> 16));
      v69 = ((unint64_t)v68 << 16) | (v68 << 32) | v17 | v68;
      if (v6 == 0xFFFF)
        v70 = v67;
      else
        v70 = v69;
      v71 = HIWORD(v70);
      if (HIWORD(v70))
      {
        if ((_DWORD)v71 == 0xFFFF)
        {
          v72 = bswap32(v70);
          *v7 = HIWORD(v72);
          v7[1] = v72;
          v7[2] = bswap32(HIDWORD(v70)) >> 16;
          v7[3] = -1;
        }
        else
        {
          v73 = v17;
          v74 = v21;
          v75 = v18;
          v76 = v20;
          result = (unint64_t)RGBA64_DplusDM(v7, v70, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v71 ^ 0xFFFF);
          v20 = v76;
          v18 = v75;
          v21 = v74;
          v17 = v73;
          v16 = v121;
          v6 = v123;
        }
      }
      v48 += 2;
      v7 += 4;
      if (!--v49)
        goto LABEL_84;
    }
    v56 = (unsigned __int8 *)(v52 + (v51 >> 4));
    if (v15 < v56)
      v56 = v15;
    if (v56 < v12)
      v56 = v12;
    v57 = *v56;
    if ((_DWORD)v21)
    {
      v58 = (unsigned __int8 *)(v52 + v20);
      if (v15 >= v58)
        v59 = v58;
      else
        v59 = v15;
      if (v59 < v12)
        v59 = v12;
      v60 = *v59;
      v61 = &v58[v51 >> 4];
      if (v15 < v61)
        v61 = v15;
      if (v61 < v12)
        v61 = v12;
      v62 = v18[v124];
      v54 = v54 - ((v62 & v54) >> v21) + ((v62 & v60) >> v21);
      v57 = v57 - ((v62 & v57) >> v21) + ((v62 & *v61) >> v21);
    }
    v63 = v18[*v48 & 0xF];
    v54 -= (v63 & v54) >> v55;
    v64 = (v63 & v57) >> v55;
LABEL_75:
    LOBYTE(v54) = v54 + v64;
    goto LABEL_76;
  }
  v125 = (uint64_t *)(v8 + 16 * a3);
  v77 = v13 - 4;
  v78 = v6 ^ 0xFFFF;
  v79 = (unint64_t)(255 - ((255 * v78 + 0x8000 + ((255 * v78 + 0x8000) >> 16)) >> 16)) << 48;
  v122 = a5;
  do
  {
    v80 = *(unsigned __int8 **)(v126 + 32);
    v81 = &v80[(v11 >> v10) * v9];
    v120 = a6;
    v118 = v11;
    if (v116 == 1)
    {
      if (a5 >= 1)
      {
        v82 = v125;
        v83 = v122;
        do
        {
          v84 = *v82;
          v82 += 2;
          v85 = &v81[v84];
          if (v77 < &v81[v84])
            v85 = v77;
          if (v85 < v80)
            v85 = v80;
          v86 = *v85;
          v87 = (0x100010001 * (v86 | (v86 << 8))) | 0xFFFF000000000000;
          v88 = (unsigned __int16)(v86 - ((v86 * v78 + 0x8000 + ((v86 * v78 + 0x8000) >> 16)) >> 16));
          v89 = ((unint64_t)v88 << 16) | (v88 << 32) | v79 | v88;
          if (v6 == 0xFFFF)
            v89 = v87;
          v90 = HIDWORD(v89);
          v91 = HIWORD(v89);
          v92 = bswap32(v89);
          *v7 = HIWORD(v92);
          v7[1] = v92;
          v7[2] = bswap32(v90) >> 16;
          v7[3] = __rev16(v91);
          v7 += 4;
          --v83;
        }
        while (v83);
      }
    }
    else
    {
      v93 = v125;
      v94 = v122;
      if (a5 >= 1)
      {
        do
        {
          v95 = *v93;
          v93 += 2;
          v96 = &v81[v95];
          if (v77 < &v81[v95])
            v96 = v77;
          if ((unint64_t)v96 < *(_QWORD *)(v126 + 32))
            v96 = *(unsigned __int8 **)(v126 + 32);
          v97 = *v96;
          v98 = (0x100010001 * (v97 | (v97 << 8))) | 0xFFFF000000000000;
          v99 = (unsigned __int16)(v97 - ((v97 * v78 + 0x8000 + ((v97 * v78 + 0x8000) >> 16)) >> 16));
          v100 = ((unint64_t)v99 << 16) | (v99 << 32) | v79 | v99;
          if (v6 == 0xFFFF)
            v101 = v98;
          else
            v101 = v100;
          v102 = HIWORD(v101);
          if (HIWORD(v101))
          {
            if ((_DWORD)v102 == 0xFFFF)
            {
              v103 = bswap32(v101);
              *v7 = HIWORD(v103);
              v7[1] = v103;
              v7[2] = bswap32(HIDWORD(v101)) >> 16;
              v7[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v7, v101, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v102 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v94;
        }
        while (v94);
      }
    }
    v9 = v114;
    v7 += 4 * v115;
    LOBYTE(v10) = v113;
    v11 = v118 + v112;
    a6 = v120 - 1;
  }
  while (v120 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB24(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  _DWORD *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;

  v6 = *((unsigned __int16 *)a2 + 4);
  v130 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v129 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v126 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v126 * a4;
  v12 = *(unsigned __int8 **)(result + 32);
  v13 = &v12[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  v141 = result;
  v14 = 0x8000;
  v127 = v10;
  v128 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v15 = a3;
    v124 = *((_QWORD *)a2 + 11);
    v123 = *((_QWORD *)a2 + 13);
    v122 = ~(-1 << v10);
    v121 = v10 - 4;
    v16 = v13 - 3;
    v17 = v6 ^ 0xFFFFu;
    v18 = (unint64_t)(~(0xFFFF * (_DWORD)v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    v119 = a5;
    v120 = -v9;
    v118 = v8 + 16 * v15 + 8;
    v19 = BLEND8_19499;
    v136 = *(unsigned __int8 **)(result + 32);
    v135 = *((unsigned __int16 *)a2 + 4);
    while (1)
    {
      if (((v123 - v11) | (v11 - v124)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v11 & (unint64_t)v122) >> v121) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v120 : v9;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(v141 + 32) + (v11 >> v10) * v9;
      v133 = a6;
      v131 = v11;
      if (v130 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v118;
        v25 = v119;
        while (1)
        {
          v26 = *(v24 - 1);
          v27 = *v24;
          v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26)
            v29 = (unsigned __int8 *)(v23 + v26);
          else
            v29 = v16;
          if (v29 < v12)
            v29 = v12;
          v30 = (*v29 << 24) | (v29[1] << 16) | (v29[2] << 8);
          v31 = v27 & 0xF;
          if ((v27 & 0xF) != 0)
            break;
          if ((_DWORD)v22)
          {
            v42 = (unsigned __int8 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21)
              v42 = v16;
            if (v42 < v12)
              v42 = v12;
            v43 = v19[v22];
            v40 = v30 - ((v43 & v30) >> v22);
            v41 = (((*v42 << 24) | (v42[1] << 16) | (v42[2] << 8)) & v43) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          v24 += 2;
          v44 = HIBYTE(v30) | (HIBYTE(v30) << 8);
          v45 = BYTE1(v30) | (BYTE1(v30) << 8);
          v46 = v30 & 0xFF0000 | (BYTE2(v30) << 24) | (unint64_t)(v45 << 32);
          v47 = (((BYTE2(v30) | (BYTE2(v30) << 8))
                - (((_DWORD)v14
                  + (BYTE2(v30) | (BYTE2(v30) << 8)) * (_DWORD)v17
                  + ((v14 + (BYTE2(v30) | (BYTE2(v30) << 8)) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v45 - (((_DWORD)v14 + (_DWORD)v45 * (_DWORD)v17 + ((v14 + v45 * v17) >> 16)) >> 16)) << 32);
          if (v6 == 0xFFFF)
          {
            v47 = v46;
            v48 = 0xFFFF000000000000;
          }
          else
          {
            v44 = (unsigned __int16)(v44
                                   - (((_DWORD)v14 + v44 * (_DWORD)v17 + ((v14 + v44 * v17) >> 16)) >> 16));
            v48 = v18;
          }
          *v7 = bswap32(v47 | v44) >> 16;
          v7[1] = bswap32(v47);
          v7[2] = __rev16(HIDWORD(v47));
          v7[3] = __rev16(HIWORD(v48));
          v7 += 4;
          if (!--v25)
            goto LABEL_88;
        }
        v32 = (unsigned __int8 *)(v28 + (v27 >> 4));
        if (v16 < v32)
          v32 = v16;
        if (v32 < v12)
          v32 = v12;
        result = v32[1];
        v33 = (*v32 << 24) | ((_DWORD)result << 16) | (v32[2] << 8);
        if ((_DWORD)v22)
        {
          v34 = (unsigned __int8 *)(v28 + v21);
          if (v16 >= v34)
            v35 = v34;
          else
            v35 = v16;
          if (v35 < v12)
            v35 = v12;
          v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
          v37 = &v34[v27 >> 4];
          if (v16 < v37)
            v37 = v16;
          if (v37 < v12)
            v37 = v12;
          v38 = v19[v22];
          result = (v38 & v33) >> v22;
          v30 = v30 - ((v38 & v30) >> v22) + ((v38 & v36) >> v22);
          v33 = v33 - result + ((((*v37 << 24) | (v37[1] << 16) | (v37[2] << 8)) & v38) >> v22);
        }
        v39 = v19[*v24 & 0xF];
        v40 = v30 - ((v39 & v30) >> v31);
        v41 = (v39 & v33) >> v31;
LABEL_40:
        v30 = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      v9 = v128;
      v7 += 4 * v129;
      LOBYTE(v10) = v127;
      v11 = v131 + v126;
      a6 = v133 - 1;
      if (v133 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_88;
    v139 = v22;
    v49 = (uint64_t *)v118;
    v50 = v119;
    v137 = v21;
    while (1)
    {
      v51 = *(v49 - 1);
      v52 = *v49;
      v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51)
        v54 = (unsigned __int8 *)(v23 + v51);
      else
        v54 = v16;
      if (v54 < v12)
        v54 = v12;
      v55 = (*v54 << 24) | (v54[1] << 16) | (v54[2] << 8);
      v56 = v52 & 0xF;
      if ((v52 & 0xF) != 0)
        break;
      if ((_DWORD)v22)
      {
        v67 = (unsigned __int8 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21)
          v67 = v16;
        if (v67 < v12)
          v67 = v12;
        v68 = v19[v139];
        v65 = v55 - ((v68 & v55) >> v22);
        v66 = (((*v67 << 24) | (v67[1] << 16) | (v67[2] << 8)) & v68) >> v22;
        goto LABEL_76;
      }
LABEL_77:
      v69 = HIBYTE(v55) | (HIBYTE(v55) << 8);
      v70 = BYTE1(v55) | (BYTE1(v55) << 8);
      v71 = v55 & 0xFF0000 | (BYTE2(v55) << 24) | (unint64_t)(v70 << 32);
      v72 = (((BYTE2(v55) | (BYTE2(v55) << 8))
            - (((_DWORD)v14
              + (BYTE2(v55) | (BYTE2(v55) << 8)) * (_DWORD)v17
              + ((v14 + (BYTE2(v55) | (BYTE2(v55) << 8)) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v70 - (((_DWORD)v14 + (_DWORD)v70 * (_DWORD)v17 + ((v14 + v70 * v17) >> 16)) >> 16)) << 32);
      if (v6 == 0xFFFF)
        v73 = v69;
      else
        v73 = (unsigned __int16)(v69
                               - (((_DWORD)v14 + v69 * (_DWORD)v17 + ((v14 + v69 * (_DWORD)v17) >> 16)) >> 16));
      if (v6 == 0xFFFF)
      {
        v72 = v71;
        v74 = 0xFFFF000000000000;
      }
      else
      {
        v74 = v18;
      }
      if (HIWORD(v74))
      {
        v75 = v72 | v73;
        if (HIWORD(v74) == 0xFFFF)
        {
          v76 = bswap32(v75);
          *v7 = HIWORD(v76);
          v7[1] = v76;
          v7[2] = __rev16(HIDWORD(v72));
          v7[3] = -1;
        }
        else
        {
          v77 = v18;
          v78 = v19;
          v79 = v16;
          v80 = v23;
          v81 = v22;
          v82 = v14;
          v83 = v17;
          result = (unint64_t)RGBA64_DplusDM(v7, v75 | v74, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), ((v75 | v74) >> 48) ^ 0xFFFF);
          v17 = v83;
          v14 = v82;
          v22 = v81;
          v23 = v80;
          v16 = v79;
          v19 = v78;
          v21 = v137;
          v18 = v77;
          v6 = v135;
          v12 = v136;
        }
      }
      v49 += 2;
      v7 += 4;
      if (!--v50)
        goto LABEL_88;
    }
    v57 = (unsigned __int8 *)(v53 + (v52 >> 4));
    if (v16 < v57)
      v57 = v16;
    if (v57 < v12)
      v57 = v12;
    v58 = (*v57 << 24) | (v57[1] << 16) | (v57[2] << 8);
    if ((_DWORD)v22)
    {
      v59 = (unsigned __int8 *)(v53 + v21);
      if (v16 >= v59)
        v60 = v59;
      else
        v60 = v16;
      if (v60 < v12)
        v60 = v12;
      v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      v62 = &v59[v52 >> 4];
      if (v16 < v62)
        v62 = v16;
      if (v62 < v12)
        v62 = v12;
      v63 = v19[v139];
      v55 = v55 - ((v63 & v55) >> v22) + ((v63 & v61) >> v22);
      v58 = v58 - ((v63 & v58) >> v22) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v22);
    }
    v64 = v19[*v49 & 0xF];
    v65 = v55 - ((v64 & v55) >> v56);
    v66 = (v64 & v58) >> v56;
LABEL_76:
    v55 = v65 + v66;
    goto LABEL_77;
  }
  v84 = v13 - 3;
  v85 = v6 ^ 0xFFFF;
  v138 = a5;
  v140 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v86 = *(unsigned __int8 **)(v141 + 32);
    v87 = &v86[(v11 >> v10) * v9];
    v134 = a6;
    v132 = v11;
    if (v130 == 1)
    {
      if (a5 >= 1)
      {
        v89 = v138;
        v88 = v140;
        do
        {
          v90 = *v88;
          v88 += 2;
          v91 = &v87[v90];
          if (v84 < &v87[v90])
            v91 = v84;
          if (v91 < v86)
            v91 = v86;
          v92 = *v91;
          v93 = v91[1];
          v94 = v91[2] | (v91[2] << 8);
          v95 = v94 << 32;
          v96 = (v92 << 8) | v92;
          v97 = v96 | (v93 << 16) | (v93 << 24);
          result = (_DWORD)v94 * v85 + 0x8000 + ((v94 * v85 + 0x8000) >> 16);
          v98 = (((v93 | (v93 << 8))
                - (((v93 | (v93 << 8)) * v85 + 0x8000 + (((v93 | (v93 << 8)) * v85 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v94 - WORD1(result)) << 32);
          v99 = (unsigned __int16)(v96 - ((v96 * v85 + 0x8000 + ((v96 * v85 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF)
          {
            v99 = v97;
            v98 = v95;
            v100 = 0xFFFF000000000000;
          }
          else
          {
            v100 = (unint64_t)(~(0xFFFF * v85 + 0x8000 + ((0xFFFF * v85 + 0x8000) >> 16)) >> 16) << 48;
          }
          v101 = bswap32(v98 | v99);
          *v7 = HIWORD(v101);
          v7[1] = v101;
          v7[2] = __rev16(HIDWORD(v98));
          v7[3] = __rev16(HIWORD(v100));
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      v103 = v138;
      v102 = v140;
      if (a5 >= 1)
      {
        do
        {
          v104 = *v102;
          v102 += 2;
          v105 = &v87[v104];
          if (v84 < &v87[v104])
            v105 = v84;
          if ((unint64_t)v105 < *(_QWORD *)(v141 + 32))
            v105 = *(unsigned __int8 **)(v141 + 32);
          v106 = *v105;
          v107 = v105[1];
          v108 = v105[2] | (v105[2] << 8);
          v109 = v108 << 32;
          v110 = (v106 << 8) | v106;
          v111 = v110 | (v107 << 16) | (v107 << 24);
          v112 = (((v107 | (v107 << 8))
                 - (((v107 | (v107 << 8)) * v85 + 0x8000 + (((v107 | (v107 << 8)) * v85 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v108 - (((_DWORD)v108 * v85 + 0x8000 + ((v108 * v85 + 0x8000) >> 16)) >> 16)) << 32);
          v113 = (unsigned __int16)(v110 - ((v110 * v85 + 0x8000 + ((v110 * v85 + 0x8000) >> 16)) >> 16));
          if (v6 == 0xFFFF)
            v114 = v111;
          else
            v114 = v113;
          if (v6 == 0xFFFF)
          {
            v112 = v109;
            v115 = 0xFFFF000000000000;
          }
          else
          {
            v115 = (unint64_t)(~(0xFFFF * v85 + 0x8000 + ((0xFFFF * v85 + 0x8000) >> 16)) >> 16) << 48;
          }
          if (HIWORD(v115))
          {
            v116 = v112 | v114;
            if (HIWORD(v115) == 0xFFFF)
            {
              v117 = bswap32(v116);
              *v7 = HIWORD(v117);
              v7[1] = v117;
              v7[2] = __rev16(HIDWORD(v112));
              v7[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v7, v116 | v115, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), ((v116 | v115) >> 48) ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v103;
        }
        while (v103);
      }
    }
    v9 = v128;
    v7 += 4 * v129;
    LOBYTE(v10) = v127;
    v11 = v132 + v126;
    a6 = v134 - 1;
  }
  while (v134 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64x2_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  char v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t v52;
  int32x2_t v53;
  uint32x2_t v54;
  int8x8_t v55;
  uint64x2_t v56;
  int8x16_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  char v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int8x8_t v83;
  int32x2_t v84;
  uint32x2_t v85;
  int8x8_t v86;
  uint64x2_t v87;
  int8x16_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  char v100;
  int v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64x2_t v104;
  unsigned int *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t v117;
  int32x2_t v118;
  uint32x2_t v119;
  int8x8_t v120;
  uint64x2_t v121;
  int8x16_t v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unint64_t v131;
  unint64_t v132;
  int8x8_t v133;
  int32x2_t v134;
  uint32x2_t v135;
  int8x8_t v136;
  uint64x2_t v137;
  int8x16_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  unsigned int *v159;
  uint64_t v160;
  uint64_t *v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  unint64_t v166;

  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = a2[1];
  v154 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v153 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v150 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v150 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v166 = result;
  v16 = 0x8000;
  v164 = *((unsigned __int16 *)a2 + 4);
  v162 = v9;
  v163 = a2[1];
  v151 = v13;
  v152 = v12;
  if (*(_QWORD *)(result + 176))
  {
    v148 = *((_QWORD *)a2 + 11);
    v147 = *((_QWORD *)a2 + 13);
    v146 = ~(-1 << v13);
    v145 = v13 - 4;
    v17 = (unsigned int *)(v15 - 4);
    v18 = (32 - v7);
    v19 = v6 ^ 0xFFFF;
    v20 = vdup_n_s32(v6 ^ 0xFFFFu);
    v143 = v11 + 16 * a3 + 8;
    v144 = -v12;
    v142 = a5;
    v21 = vdup_n_s32(0x101u);
    v22 = (uint64x2_t)xmmword_185004F60;
    v23 = BLEND8_19499;
    v159 = *(unsigned int **)(result + 32);
    v158 = v6 ^ 0xFFFF;
    while (1)
    {
      if (((v147 - v14) | (v14 - v148)) < 0)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v24 = ((v14 & (unint64_t)v146) >> v145) & 0xF;
        v25 = (unint64_t)(v24 - 7) >= 9 ? v144 : v12;
        v26 = weights_19497[v24] & 0xF;
      }
      v27 = *(_QWORD *)(v166 + 32) + (v14 >> v13) * v12;
      v156 = a6;
      v155 = v14;
      if (v154 != 1)
        break;
      if (a5 >= 1)
      {
        v29 = v142;
        v28 = (uint64_t *)v143;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned int *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v8)
            v33 = v8;
          v34 = bswap32(*v33);
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if ((_DWORD)v26)
          {
            v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25)
              v46 = v17;
            if (v46 < v8)
              v46 = v8;
            v47 = v23[v26];
            v44 = v34 - ((v47 & v34) >> v26);
            v45 = (bswap32(*v46) & v47) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            v57 = (int8x16_t)vshlq_u64(v56, v22);
            v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - (((_DWORD)v16
                                                                                          + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * v19
                                                                                          + ((v16
                                                                                            + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                            * v19) >> 16)) >> 16)) << 16);
            v49 = (unsigned __int16)(v49 - (((_DWORD)v16 + v49 * v19 + ((v16 + v49 * v19) >> 16)) >> 16));
          }
          v28 += 2;
          v58 = bswap32(v51 | v49);
          *v10 = HIWORD(v58);
          v10[1] = v58;
          v10[2] = bswap32(HIDWORD(v51)) >> 16;
          v10[3] = __rev16(HIWORD(v51));
          v10 += 4;
          if (!--v29)
            goto LABEL_88;
        }
        v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v8)
          v36 = v8;
        v37 = bswap32(*v36);
        if ((_DWORD)v26)
        {
          v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          v40 = bswap32(*v39);
          v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41)
            v41 = v17;
          if (v41 < v8)
            v41 = v8;
          v42 = v23[v26];
          result = (v42 & v37) >> v26;
          v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          v37 = v37 - result + ((bswap32(*v41) & v42) >> v26);
        }
        v43 = v23[*v28 & 0xF];
        v44 = v34 - ((v43 & v34) >> v35);
        v45 = (v43 & v37) >> v35;
LABEL_43:
        v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      v12 = v152;
      v10 += 4 * v153;
      LOBYTE(v13) = v151;
      v14 = v155 + v150;
      a6 = v156 - 1;
      if (v156 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_88;
    v165 = v26;
    v60 = v142;
    v59 = (uint64_t *)v143;
    while (1)
    {
      v61 = *(v59 - 1);
      v62 = *v59;
      v63 = v27 + v61;
      if ((unint64_t)v17 >= v27 + v61)
        v64 = (unsigned int *)(v27 + v61);
      else
        v64 = v17;
      if (v64 < v8)
        v64 = v8;
      v65 = bswap32(*v64);
      v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0)
        break;
      if ((_DWORD)v26)
      {
        v77 = (unsigned int *)(v63 + v25);
        if ((unint64_t)v17 < v63 + v25)
          v77 = v17;
        if (v77 < v8)
          v77 = v8;
        v78 = v23[v165];
        v75 = v65 - ((v78 & v65) >> v26);
        v76 = (bswap32(*v77) & v78) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      v79 = (v65 << v7) | (v65 >> v18);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v21);
        v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v20);
        v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        v88 = (int8x16_t)vshlq_u64(v87, v22);
        v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - (((_DWORD)v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * v19
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * v19) >> 16)) >> 16)) << 16);
        v80 = (unsigned __int16)(v80 - (((_DWORD)v16 + v80 * v19 + ((v16 + v80 * v19) >> 16)) >> 16));
      }
      v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        v90 = v82 | v80;
        if ((_DWORD)v89 == 0xFFFF)
        {
          v91 = bswap32(v90);
          *v10 = HIWORD(v91);
          v10[1] = v91;
          v10[2] = bswap32(HIDWORD(v82)) >> 16;
          v10[3] = -1;
        }
        else
        {
          v92 = v16;
          v93 = v18;
          v94 = v23;
          v95 = v17;
          v96 = v27;
          v97 = v26;
          v98 = v25;
          result = (unint64_t)RGBA64_DplusDM(v10, v90, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v89 ^ 0xFFFF);
          v25 = v98;
          v26 = v97;
          v27 = v96;
          v17 = v95;
          v23 = v94;
          v18 = v93;
          v16 = v92;
          v19 = v158;
          v8 = v159;
          v22 = (uint64x2_t)xmmword_185004F60;
          v9 = v162;
          LOBYTE(v7) = v163;
          v6 = v164;
        }
      }
      v59 += 2;
      v10 += 4;
      if (!--v60)
        goto LABEL_88;
    }
    v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v17 < v67)
      v67 = v17;
    if (v67 < v8)
      v67 = v8;
    v68 = bswap32(*v67);
    if ((_DWORD)v26)
    {
      v69 = (unsigned int *)(v63 + v25);
      if (v17 >= v69)
        v70 = v69;
      else
        v70 = v17;
      if (v70 < v8)
        v70 = v8;
      v71 = bswap32(*v70);
      v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v17 < v72)
        v72 = v17;
      if (v72 < v8)
        v72 = v8;
      v73 = v23[v165];
      v65 = v65 - ((v73 & v65) >> v26) + ((v73 & v71) >> v26);
      v68 = v68 - ((v73 & v68) >> v26) + ((bswap32(*v72) & v73) >> v26);
    }
    v74 = v23[*v59 & 0xF];
    v75 = v65 - ((v74 & v65) >> v66);
    v76 = (v74 & v68) >> v66;
LABEL_79:
    v65 = v75 + v76;
    goto LABEL_80;
  }
  v99 = (unsigned int *)(v15 - 4);
  v100 = 32 - v7;
  v101 = v6 ^ 0xFFFF;
  v102 = vdup_n_s32(v6 ^ 0xFFFFu);
  v103 = vdup_n_s32(0x101u);
  v160 = a5;
  v161 = (uint64_t *)(v11 + 16 * a3);
  v104 = (uint64x2_t)xmmword_185004F60;
  do
  {
    v105 = *(unsigned int **)(v166 + 32);
    v106 = (char *)v105 + (v14 >> v13) * v12;
    v157 = a6;
    if (v154 == 1)
    {
      v107 = v14;
      if (a5 >= 1)
      {
        v109 = v160;
        v108 = v161;
        do
        {
          v110 = *v108;
          v108 += 2;
          v111 = (unsigned int *)&v106[v110];
          if (v99 < (unsigned int *)&v106[v110])
            v111 = v99;
          if (v111 < v105)
            v111 = v105;
          v112 = bswap32(*v111);
          v113 = (v112 << v7) | (v112 >> v100);
          HIDWORD(v115) = HIBYTE(v113);
          LODWORD(v115) = v113;
          v114 = v115 >> 24;
          if (v6 == 0xFFFF)
          {
            v116 = ((unint64_t)(BYTE1(v113) | (BYTE1(v113) << 8)) << 32) | ((unint64_t)((v113 | v9) | ((v113 | v9) << 8)) << 48) | v113 & 0xFF0000 | (BYTE2(v113) << 24);
          }
          else
          {
            v117.i32[0] = v113 | v9;
            v117.i32[1] = v113 >> 8;
            v118 = vmul_s32((int32x2_t)vand_s8(v117, (int8x8_t)0xFF000000FFLL), v103);
            v119 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v118, v102);
            v120 = vand_s8((int8x8_t)vsub_s32(v118, (int32x2_t)vshr_n_u32(vsra_n_u32(v119, v119, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v121.i64[0] = v120.u32[0];
            v121.i64[1] = v120.u32[1];
            v122 = (int8x16_t)vshlq_u64(v121, v104);
            v116 = vorrq_s8(v122, (int8x16_t)vdupq_laneq_s64((int64x2_t)v122, 1)).u64[0] | (((BYTE2(v113) | (BYTE2(v113) << 8))
                                                                                           - (((BYTE2(v113) | (BYTE2(v113) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v113) | (BYTE2(v113) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            v114 = (unsigned __int16)(v114
                                    - ((v114 * v101 + 0x8000 + ((v114 * v101 + 0x8000) >> 16)) >> 16));
          }
          v123 = bswap32(v116 | v114);
          *v10 = HIWORD(v123);
          v10[1] = v123;
          v10[2] = bswap32(HIDWORD(v116)) >> 16;
          v10[3] = __rev16(HIWORD(v116));
          v10 += 4;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      v107 = v14;
      v125 = v160;
      v124 = v161;
      if (a5 >= 1)
      {
        do
        {
          v126 = *v124;
          v124 += 2;
          v127 = (unsigned int *)&v106[v126];
          if (v99 < (unsigned int *)&v106[v126])
            v127 = v99;
          if ((unint64_t)v127 < *(_QWORD *)(v166 + 32))
            v127 = *(unsigned int **)(v166 + 32);
          v128 = bswap32(*v127);
          v129 = (v128 << v7) | (v128 >> v100);
          HIDWORD(v131) = HIBYTE(v129);
          LODWORD(v131) = v129;
          v130 = v131 >> 24;
          if (v6 == 0xFFFF)
          {
            v132 = ((unint64_t)(BYTE1(v129) | (BYTE1(v129) << 8)) << 32) | ((unint64_t)((v129 | v9) | ((v129 | v9) << 8)) << 48) | v129 & 0xFF0000 | (BYTE2(v129) << 24);
          }
          else
          {
            v133.i32[0] = v129 | v9;
            v133.i32[1] = v129 >> 8;
            v134 = vmul_s32((int32x2_t)vand_s8(v133, (int8x8_t)0xFF000000FFLL), v103);
            v135 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v134, v102);
            v136 = vand_s8((int8x8_t)vsub_s32(v134, (int32x2_t)vshr_n_u32(vsra_n_u32(v135, v135, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v137.i64[0] = v136.u32[0];
            v137.i64[1] = v136.u32[1];
            v138 = (int8x16_t)vshlq_u64(v137, v104);
            v132 = vorrq_s8(v138, (int8x16_t)vdupq_laneq_s64((int64x2_t)v138, 1)).u64[0] | (((BYTE2(v129) | (BYTE2(v129) << 8))
                                                                                           - (((BYTE2(v129) | (BYTE2(v129) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v129) | (BYTE2(v129) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            v130 = (unsigned __int16)(v130 - ((v130 * v101 + 0x8000 + ((v130 * v101 + 0x8000) >> 16)) >> 16));
          }
          v139 = HIWORD(v132);
          if (HIWORD(v132))
          {
            v140 = v132 | v130;
            if ((_DWORD)v139 == 0xFFFF)
            {
              v141 = bswap32(v140);
              *v10 = HIWORD(v141);
              v10[1] = v141;
              v10[2] = bswap32(HIDWORD(v132)) >> 16;
              v10[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v10, v140, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v139 ^ 0xFFFF);
              v104 = (uint64x2_t)xmmword_185004F60;
              v9 = v162;
              LOBYTE(v7) = v163;
              v6 = v164;
            }
          }
          v10 += 4;
          --v125;
        }
        while (v125);
      }
    }
    v12 = v152;
    v10 += 4 * v153;
    LOBYTE(v13) = v151;
    v14 = v107 + v150;
    a6 = v157 - 1;
  }
  while (v157 != 1);
  return result;
}

unint64_t RGBA64_image_mark_rgb32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64x2_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  char v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t v52;
  int32x2_t v53;
  uint32x2_t v54;
  int8x8_t v55;
  uint64x2_t v56;
  int8x16_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  char v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int8x8_t v83;
  int32x2_t v84;
  uint32x2_t v85;
  int8x8_t v86;
  uint64x2_t v87;
  int8x16_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  int v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64x2_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  int8x8_t v116;
  int32x2_t v117;
  uint32x2_t v118;
  int8x8_t v119;
  uint64x2_t v120;
  int8x16_t v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  int8x8_t v131;
  int32x2_t v132;
  uint32x2_t v133;
  int8x8_t v134;
  uint64x2_t v135;
  int8x16_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t *v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;

  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = a2[1];
  v152 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v151 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v148 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v148 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v164 = result;
  v16 = 0x8000;
  v162 = *((unsigned __int16 *)a2 + 4);
  v160 = v9;
  v161 = a2[1];
  v149 = v13;
  v150 = v12;
  if (*(_QWORD *)(result + 176))
  {
    v146 = *((_QWORD *)a2 + 11);
    v145 = *((_QWORD *)a2 + 13);
    v144 = ~(-1 << v13);
    v143 = v13 - 4;
    v17 = (unsigned int *)(v15 - 4);
    v18 = (32 - v7);
    v19 = v6 ^ 0xFFFF;
    v20 = vdup_n_s32(v6 ^ 0xFFFFu);
    v141 = v11 + 16 * a3 + 8;
    v142 = -v12;
    v140 = a5;
    v21 = vdup_n_s32(0x101u);
    v22 = (uint64x2_t)xmmword_185004F60;
    v23 = BLEND8_19499;
    v157 = *(unsigned int **)(result + 32);
    v156 = v6 ^ 0xFFFF;
    while (1)
    {
      if (((v145 - v14) | (v14 - v146)) < 0)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v24 = ((v14 & (unint64_t)v144) >> v143) & 0xF;
        v25 = (unint64_t)(v24 - 7) >= 9 ? v142 : v12;
        v26 = weights_19497[v24] & 0xF;
      }
      v27 = *(_QWORD *)(v164 + 32) + (v14 >> v13) * v12;
      v154 = a6;
      v153 = v14;
      if (v152 != 1)
        break;
      if (a5 >= 1)
      {
        v29 = v140;
        v28 = (uint64_t *)v141;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned int *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v8)
            v33 = v8;
          v34 = *v33;
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if ((_DWORD)v26)
          {
            v46 = (unsigned int *)(v32 + v25);
            if ((unint64_t)v17 < v32 + v25)
              v46 = v17;
            if (v46 < v8)
              v46 = v8;
            v47 = v23[v26];
            v44 = v34 - ((v47 & v34) >> v26);
            v45 = (v47 & *v46) >> v26;
            goto LABEL_43;
          }
LABEL_44:
          v48 = (v34 << v7) | (v34 >> v18);
          HIDWORD(v50) = HIBYTE(v48);
          LODWORD(v50) = v48;
          v49 = v50 >> 24;
          if (v6 == 0xFFFF)
          {
            v51 = ((unint64_t)(BYTE1(v48) | (BYTE1(v48) << 8)) << 32) | ((unint64_t)((v48 | v9) | ((v48 | v9) << 8)) << 48) | v48 & 0xFF0000 | (BYTE2(v48) << 24);
          }
          else
          {
            v52.i32[0] = v48 | v9;
            v52.i32[1] = v48 >> 8;
            v53 = vmul_s32((int32x2_t)vand_s8(v52, (int8x8_t)0xFF000000FFLL), v21);
            v54 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v53, v20);
            v55 = vand_s8((int8x8_t)vsub_s32(v53, (int32x2_t)vshr_n_u32(vsra_n_u32(v54, v54, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            v57 = (int8x16_t)vshlq_u64(v56, v22);
            v51 = vorrq_s8(v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1)).u64[0] | (((BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                        - (((_DWORD)v16
                                                                                          + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                          * v19
                                                                                          + ((v16
                                                                                            + (BYTE2(v48) | (BYTE2(v48) << 8))
                                                                                            * v19) >> 16)) >> 16)) << 16);
            v49 = (unsigned __int16)(v49 - (((_DWORD)v16 + v49 * v19 + ((v16 + v49 * v19) >> 16)) >> 16));
          }
          v28 += 2;
          v58 = bswap32(v51 | v49);
          *v10 = HIWORD(v58);
          v10[1] = v58;
          v10[2] = bswap32(HIDWORD(v51)) >> 16;
          v10[3] = __rev16(HIWORD(v51));
          v10 += 4;
          if (!--v29)
            goto LABEL_88;
        }
        v36 = (unsigned int *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v8)
          v36 = v8;
        v37 = *v36;
        if ((_DWORD)v26)
        {
          v38 = (unsigned int *)(v32 + v25);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          v40 = *v39;
          v41 = (unsigned int *)((char *)v38 + (v31 >> 4));
          if (v17 < v41)
            v41 = v17;
          if (v41 < v8)
            v41 = v8;
          v42 = v23[v26];
          result = (v42 & v37) >> v26;
          v34 = v34 - ((v42 & v34) >> v26) + ((v42 & v40) >> v26);
          v37 = v37 - result + ((v42 & *v41) >> v26);
        }
        v43 = v23[*v28 & 0xF];
        v44 = v34 - ((v43 & v34) >> v35);
        v45 = (v43 & v37) >> v35;
LABEL_43:
        v34 = v44 + v45;
        goto LABEL_44;
      }
LABEL_88:
      v12 = v150;
      v10 += 4 * v151;
      LOBYTE(v13) = v149;
      v14 = v153 + v148;
      a6 = v154 - 1;
      if (v154 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_88;
    v163 = v26;
    v60 = v140;
    v59 = (uint64_t *)v141;
    while (1)
    {
      v61 = *(v59 - 1);
      v62 = *v59;
      v63 = v27 + v61;
      if ((unint64_t)v17 >= v27 + v61)
        v64 = (unsigned int *)(v27 + v61);
      else
        v64 = v17;
      if (v64 < v8)
        v64 = v8;
      v65 = *v64;
      v66 = v62 & 0xF;
      if ((v62 & 0xF) != 0)
        break;
      if ((_DWORD)v26)
      {
        v77 = (unsigned int *)(v63 + v25);
        if ((unint64_t)v17 < v63 + v25)
          v77 = v17;
        if (v77 < v8)
          v77 = v8;
        v78 = v23[v163];
        v75 = v65 - ((v78 & v65) >> v26);
        v76 = (v78 & *v77) >> v26;
        goto LABEL_79;
      }
LABEL_80:
      v79 = (v65 << v7) | (v65 >> v18);
      HIDWORD(v81) = HIBYTE(v79);
      LODWORD(v81) = v79;
      v80 = v81 >> 24;
      if (v6 == 0xFFFF)
      {
        v82 = ((unint64_t)(BYTE1(v79) | (BYTE1(v79) << 8)) << 32) | ((unint64_t)((v79 | v9) | ((v79 | v9) << 8)) << 48) | v79 & 0xFF0000 | (BYTE2(v79) << 24);
      }
      else
      {
        v83.i32[0] = v79 | v9;
        v83.i32[1] = v79 >> 8;
        v84 = vmul_s32((int32x2_t)vand_s8(v83, (int8x8_t)0xFF000000FFLL), v21);
        v85 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v84, v20);
        v86 = vand_s8((int8x8_t)vsub_s32(v84, (int32x2_t)vshr_n_u32(vsra_n_u32(v85, v85, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
        v87.i64[0] = v86.u32[0];
        v87.i64[1] = v86.u32[1];
        v88 = (int8x16_t)vshlq_u64(v87, v22);
        v82 = vorrq_s8(v88, (int8x16_t)vdupq_laneq_s64((int64x2_t)v88, 1)).u64[0] | (((BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                    - (((_DWORD)v16
                                                                                      + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                      * v19
                                                                                      + ((v16
                                                                                        + (BYTE2(v79) | (BYTE2(v79) << 8))
                                                                                        * v19) >> 16)) >> 16)) << 16);
        v80 = (unsigned __int16)(v80 - (((_DWORD)v16 + v80 * v19 + ((v16 + v80 * v19) >> 16)) >> 16));
      }
      v89 = HIWORD(v82);
      if (HIWORD(v82))
      {
        v90 = v82 | v80;
        if ((_DWORD)v89 == 0xFFFF)
        {
          v91 = bswap32(v90);
          *v10 = HIWORD(v91);
          v10[1] = v91;
          v10[2] = bswap32(HIDWORD(v82)) >> 16;
          v10[3] = -1;
        }
        else
        {
          v92 = v18;
          v93 = v16;
          v94 = v23;
          v95 = v17;
          v96 = v27;
          v97 = v26;
          v98 = v25;
          result = (unint64_t)RGBA64_DplusDM(v10, v90, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v89 ^ 0xFFFF);
          v25 = v98;
          v26 = v97;
          v27 = v96;
          v17 = v95;
          v23 = v94;
          v16 = v93;
          v18 = v92;
          v19 = v156;
          v8 = v157;
          v22 = (uint64x2_t)xmmword_185004F60;
          v9 = v160;
          LOBYTE(v7) = v161;
          v6 = v162;
        }
      }
      v59 += 2;
      v10 += 4;
      if (!--v60)
        goto LABEL_88;
    }
    v67 = (unsigned int *)(v63 + (v62 >> 4));
    if (v17 < v67)
      v67 = v17;
    if (v67 < v8)
      v67 = v8;
    v68 = *v67;
    if ((_DWORD)v26)
    {
      v69 = (unsigned int *)(v63 + v25);
      if (v17 >= v69)
        v70 = v69;
      else
        v70 = v17;
      if (v70 < v8)
        v70 = v8;
      v71 = *v70;
      v72 = (unsigned int *)((char *)v69 + (v62 >> 4));
      if (v17 < v72)
        v72 = v17;
      if (v72 < v8)
        v72 = v8;
      v73 = v23[v163];
      v65 = v65 - ((v73 & v65) >> v26) + ((v73 & v71) >> v26);
      v68 = v68 - ((v73 & v68) >> v26) + ((v73 & *v72) >> v26);
    }
    v74 = v23[*v59 & 0xF];
    v75 = v65 - ((v74 & v65) >> v66);
    v76 = (v74 & v68) >> v66;
LABEL_79:
    v65 = v75 + v76;
    goto LABEL_80;
  }
  v99 = v15 - 4;
  v100 = 32 - v7;
  v101 = v6 ^ 0xFFFF;
  v102 = vdup_n_s32(v6 ^ 0xFFFFu);
  v103 = vdup_n_s32(0x101u);
  v158 = a5;
  v159 = (uint64_t *)(v11 + 16 * a3);
  v104 = (uint64x2_t)xmmword_185004F60;
  do
  {
    v105 = *(char **)(v164 + 32);
    v106 = &v105[(v14 >> v13) * v12];
    v155 = a6;
    if (v152 == 1)
    {
      v107 = v14;
      if (a5 >= 1)
      {
        v109 = v158;
        v108 = v159;
        do
        {
          v110 = *v108;
          v108 += 2;
          v111 = &v106[v110];
          if (v99 < &v106[v110])
            v111 = v99;
          if (v111 < v105)
            v111 = v105;
          v112 = (*(_DWORD *)v111 << v7) | (*(_DWORD *)v111 >> v100);
          HIDWORD(v114) = HIBYTE(v112);
          LODWORD(v114) = v112;
          v113 = v114 >> 24;
          if (v6 == 0xFFFF)
          {
            v115 = ((unint64_t)(BYTE1(v112) | (BYTE1(v112) << 8)) << 32) | ((unint64_t)((v112 | v9) | ((v112 | v9) << 8)) << 48) | v112 & 0xFF0000 | (BYTE2(v112) << 24);
          }
          else
          {
            v116.i32[0] = v112 | v9;
            v116.i32[1] = v112 >> 8;
            v117 = vmul_s32((int32x2_t)vand_s8(v116, (int8x8_t)0xFF000000FFLL), v103);
            v118 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v117, v102);
            v119 = vand_s8((int8x8_t)vsub_s32(v117, (int32x2_t)vshr_n_u32(vsra_n_u32(v118, v118, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v120.i64[0] = v119.u32[0];
            v120.i64[1] = v119.u32[1];
            v121 = (int8x16_t)vshlq_u64(v120, v104);
            v115 = vorrq_s8(v121, (int8x16_t)vdupq_laneq_s64((int64x2_t)v121, 1)).u64[0] | (((BYTE2(v112) | (BYTE2(v112) << 8))
                                                                                           - (((BYTE2(v112) | (BYTE2(v112) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v112) | (BYTE2(v112) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            v113 = (unsigned __int16)(v113
                                    - ((v113 * v101 + 0x8000 + ((v113 * v101 + 0x8000) >> 16)) >> 16));
          }
          v122 = bswap32(v115 | v113);
          *v10 = HIWORD(v122);
          v10[1] = v122;
          v10[2] = bswap32(HIDWORD(v115)) >> 16;
          v10[3] = __rev16(HIWORD(v115));
          v10 += 4;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      v107 = v14;
      v124 = v158;
      v123 = v159;
      if (a5 >= 1)
      {
        do
        {
          v125 = *v123;
          v123 += 2;
          v126 = &v106[v125];
          if (v99 < &v106[v125])
            v126 = v99;
          if ((unint64_t)v126 < *(_QWORD *)(v164 + 32))
            v126 = *(char **)(v164 + 32);
          v127 = (*(_DWORD *)v126 << v7) | (*(_DWORD *)v126 >> v100);
          HIDWORD(v129) = HIBYTE(v127);
          LODWORD(v129) = v127;
          v128 = v129 >> 24;
          if (v6 == 0xFFFF)
          {
            v130 = ((unint64_t)(BYTE1(v127) | (BYTE1(v127) << 8)) << 32) | ((unint64_t)((v127 | v9) | ((v127 | v9) << 8)) << 48) | v127 & 0xFF0000 | (BYTE2(v127) << 24);
          }
          else
          {
            v131.i32[0] = v127 | v9;
            v131.i32[1] = v127 >> 8;
            v132 = vmul_s32((int32x2_t)vand_s8(v131, (int8x8_t)0xFF000000FFLL), v103);
            v133 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v132, v102);
            v134 = vand_s8((int8x8_t)vsub_s32(v132, (int32x2_t)vshr_n_u32(vsra_n_u32(v133, v133, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v135.i64[0] = v134.u32[0];
            v135.i64[1] = v134.u32[1];
            v136 = (int8x16_t)vshlq_u64(v135, v104);
            v130 = vorrq_s8(v136, (int8x16_t)vdupq_laneq_s64((int64x2_t)v136, 1)).u64[0] | (((BYTE2(v127) | (BYTE2(v127) << 8))
                                                                                           - (((BYTE2(v127) | (BYTE2(v127) << 8))
                                                                                             * v101
                                                                                             + 0x8000
                                                                                             + (((BYTE2(v127) | (BYTE2(v127) << 8)) * v101 + 0x8000) >> 16)) >> 16)) << 16);
            v128 = (unsigned __int16)(v128 - ((v128 * v101 + 0x8000 + ((v128 * v101 + 0x8000) >> 16)) >> 16));
          }
          v137 = HIWORD(v130);
          if (HIWORD(v130))
          {
            v138 = v130 | v128;
            if ((_DWORD)v137 == 0xFFFF)
            {
              v139 = bswap32(v138);
              *v10 = HIWORD(v139);
              v10[1] = v139;
              v10[2] = bswap32(HIDWORD(v130)) >> 16;
              v10[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v10, v138, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v137 ^ 0xFFFF);
              v104 = (uint64x2_t)xmmword_185004F60;
              v9 = v160;
              LOBYTE(v7) = v161;
              v6 = v162;
            }
          }
          v10 += 4;
          --v124;
        }
        while (v124);
      }
    }
    v12 = v150;
    v10 += 4 * v151;
    LOBYTE(v13) = v149;
    v14 = v107 + v148;
    a6 = v155 - 1;
  }
  while (v155 != 1);
  return result;
}

_WORD *RGBA64_image_mark_W16(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  int v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  _WORD *v135;

  v6 = *((unsigned __int16 *)a2 + 4);
  v125 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v124 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v121 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v121 * a4;
  v12 = (unsigned __int16 *)*((_QWORD *)result + 4);
  v13 = (char *)v12
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  v135 = result;
  v122 = v10;
  v123 = v9;
  if (*((_QWORD *)result + 22))
  {
    v14 = a3;
    v119 = *((_QWORD *)a2 + 11);
    v118 = *((_QWORD *)a2 + 13);
    v117 = ~(-1 << v10);
    v116 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 4);
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v114 = a5;
    v115 = -v9;
    v113 = v8 + 16 * v14 + 8;
    v18 = BLEND16_19498;
    while (1)
    {
      if (((v118 - v11) | (v11 - v119)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v117) >> v116) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v115 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = *((_QWORD *)v135 + 4) + (v11 >> v10) * v9;
      v128 = a6;
      v126 = v11;
      if (v125 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v113;
        v24 = v114;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int16 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = bswap32(*v28) >> 16;
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if ((_DWORD)v21)
          {
            v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v42 = v15;
            if (v42 < v12)
              v42 = v12;
            v43 = v18[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = (v43 & (unint64_t)(bswap32(*v42) >> 16)) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000)
            v45 = -98304;
          v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if ((_DWORD)v6 == 0xFFFF)
            v47 = v44;
          v48 = HIDWORD(v47);
          v49 = HIWORD(v47);
          v50 = bswap32(v47);
          *v7 = HIWORD(v50);
          v7[1] = v50;
          v7[2] = bswap32(v48) >> 16;
          v7[3] = __rev16(v49);
          v7 += 4;
          if (!--v24)
            goto LABEL_88;
        }
        v31 = v26 >> 4;
        v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v12)
          v32 = v12;
        v33 = bswap32(*v32) >> 16;
        if ((_DWORD)v21)
        {
          v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v12)
            v35 = v12;
          v36 = bswap32(*v35) >> 16;
          v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37)
            v37 = v15;
          if (v37 < v12)
            v37 = v12;
          v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((v38 & (unint64_t)(bswap32(*v37) >> 16)) >> v21);
        }
        v39 = v18[v30];
        v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      v9 = v123;
      v7 += 4 * v124;
      LOBYTE(v10) = v122;
      v11 = v126 + v121;
      a6 = v128 - 1;
      if (v128 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_88;
    v133 = v21;
    v51 = (uint64_t *)v113;
    v52 = v114;
    v131 = v20;
    v130 = *((_QWORD *)v135 + 4) + (v11 >> v10) * v9;
    while (1)
    {
      v53 = *(v51 - 1);
      v54 = *v51;
      v55 = v22 + v53;
      if ((unint64_t)v15 >= v22 + v53)
        v56 = (unsigned __int16 *)(v22 + v53);
      else
        v56 = v15;
      if (v56 < v12)
        v56 = v12;
      v57 = bswap32(*v56) >> 16;
      v58 = *v51 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if ((_DWORD)v21)
      {
        v70 = (unsigned __int16 *)(v55 + v20);
        if ((unint64_t)v15 < v55 + v20)
          v70 = v15;
        if (v70 < v12)
          v70 = v12;
        v71 = v18[v133];
        v68 = v57 - ((v71 & v57) >> v133);
        v69 = (v71 & (unint64_t)(bswap32(*v70) >> 16)) >> v133;
        goto LABEL_77;
      }
LABEL_78:
      v72 = (0x100010001 * (unsigned __int16)v57) | 0xFFFF000000000000;
      v73 = (v57 | 0xFFFF0000) * v16;
      if (v73 >= 0xFFFE8000)
        v73 = -98304;
      v74 = (unsigned __int16)(v57 - ((v73 + 0x8000 + ((v73 + 0x8000) >> 16)) >> 16));
      v75 = ((unint64_t)v74 << 16) | (v74 << 32) | v17 | v74;
      if ((_DWORD)v6 == 0xFFFF)
        v76 = v72;
      else
        v76 = v75;
      v77 = HIWORD(v76);
      if (HIWORD(v76))
      {
        if ((_DWORD)v77 == 0xFFFF)
        {
          v78 = bswap32(v76);
          *v7 = HIWORD(v78);
          v7[1] = v78;
          v7[2] = bswap32(HIDWORD(v76)) >> 16;
          v7[3] = -1;
        }
        else
        {
          v79 = v6;
          v80 = v17;
          v81 = v21;
          v82 = v18;
          result = RGBA64_DplusDM(v7, v76, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v77 ^ 0xFFFF);
          v18 = v82;
          v21 = v81;
          v22 = v130;
          v17 = v80;
          v6 = v79;
          v20 = v131;
        }
      }
      v51 += 2;
      v7 += 4;
      if (!--v52)
        goto LABEL_88;
    }
    v59 = v54 >> 4;
    v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v15 < v60)
      v60 = v15;
    if (v60 < v12)
      v60 = v12;
    v61 = bswap32(*v60) >> 16;
    if ((_DWORD)v21)
    {
      v62 = (unsigned __int16 *)(v55 + v20);
      if (v15 >= v62)
        v63 = v62;
      else
        v63 = v15;
      if (v63 < v12)
        v63 = v12;
      v64 = bswap32(*v63) >> 16;
      v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v15 < v65)
        v65 = v15;
      if (v65 < v12)
        v65 = v12;
      v66 = v18[v133];
      LODWORD(v57) = v57 - ((v66 & v57) >> v133) + ((v66 & v64) >> v133);
      LODWORD(v61) = v61 - ((v66 & v61) >> v133) + ((v66 & (unint64_t)(bswap32(*v65) >> 16)) >> v133);
    }
    v67 = v18[v58];
    v68 = v57 - ((unint64_t)(v67 & v57) >> v58);
    v69 = (unint64_t)(v67 & v61) >> v58;
LABEL_77:
    LOWORD(v57) = v68 + v69;
    goto LABEL_78;
  }
  v83 = v13 - 4;
  v84 = v6 ^ 0xFFFF;
  v85 = (unint64_t)(~(0xFFFF * v84 + 0x8000 + ((0xFFFF * v84 + 0x8000) >> 16)) >> 16) << 48;
  v132 = a5;
  v134 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v86 = (char *)*((_QWORD *)v135 + 4);
    v87 = &v86[(v11 >> v10) * v9];
    v129 = a6;
    v127 = v11;
    if (v125 == 1)
    {
      if (a5 >= 1)
      {
        v89 = v132;
        v88 = v134;
        do
        {
          v90 = *v88;
          v88 += 2;
          v91 = &v87[v90];
          if (v83 < &v87[v90])
            v91 = v83;
          if (v91 < v86)
            v91 = v86;
          v92 = bswap32(*(unsigned __int16 *)v91) >> 16;
          v93 = (v92 | 0xFFFF0000) * v84;
          if (v93 >= 0xFFFE8000)
            v93 = -98304;
          v94 = 0x100010001 * v92;
          v95 = (unsigned __int16)(v92 - ((v93 + 0x8000 + ((v93 + 0x8000) >> 16)) >> 16));
          v96 = v94 | 0xFFFF000000000000;
          v97 = ((unint64_t)v95 << 16) | (v95 << 32) | v85 | v95;
          if ((_DWORD)v6 == 0xFFFF)
            v97 = v96;
          v98 = HIDWORD(v97);
          v99 = HIWORD(v97);
          v100 = bswap32(v97);
          v7[1] = v100;
          *v7 = HIWORD(v100);
          v7[2] = bswap32(v98) >> 16;
          v7[3] = __rev16(v99);
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      v102 = v132;
      v101 = v134;
      if (a5 >= 1)
      {
        do
        {
          v103 = *v101;
          v101 += 2;
          v104 = &v87[v103];
          if (v83 < &v87[v103])
            v104 = v83;
          if ((unint64_t)v104 < *((_QWORD *)v135 + 4))
            v104 = (char *)*((_QWORD *)v135 + 4);
          v105 = bswap32(*(unsigned __int16 *)v104) >> 16;
          v106 = (0x100010001 * v105) | 0xFFFF000000000000;
          v107 = (v105 | 0xFFFF0000) * v84;
          if (v107 >= 0xFFFE8000)
            v107 = -98304;
          v108 = (unsigned __int16)(v105 - ((v107 + 0x8000 + ((v107 + 0x8000) >> 16)) >> 16));
          v109 = ((unint64_t)v108 << 16) | (v108 << 32) | v85 | v108;
          if ((_DWORD)v6 == 0xFFFF)
            v110 = v106;
          else
            v110 = v109;
          v111 = HIWORD(v110);
          if (HIWORD(v110))
          {
            if ((_DWORD)v111 == 0xFFFF)
            {
              v112 = bswap32(v110);
              *v7 = HIWORD(v112);
              v7[1] = v112;
              v7[2] = bswap32(HIDWORD(v110)) >> 16;
              v7[3] = -1;
            }
            else
            {
              result = RGBA64_DplusDM(v7, v110, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v111 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v102;
        }
        while (v102);
      }
    }
    v9 = v123;
    v7 += 4 * v124;
    LOBYTE(v10) = v122;
    v11 = v127 + v121;
    a6 = v129 - 1;
  }
  while (v129 != 1);
  return result;
}

_WORD *RGBA64_image_mark_w16(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  int v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  _WORD *v135;

  v6 = *((unsigned __int16 *)a2 + 4);
  v125 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v124 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v121 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v121 * a4;
  v12 = (unsigned __int16 *)*((_QWORD *)result + 4);
  v13 = (char *)v12
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  v135 = result;
  v122 = v10;
  v123 = v9;
  if (*((_QWORD *)result + 22))
  {
    v14 = a3;
    v119 = *((_QWORD *)a2 + 11);
    v118 = *((_QWORD *)a2 + 13);
    v117 = ~(-1 << v10);
    v116 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 4);
    v16 = v6 ^ 0xFFFF;
    v17 = (unint64_t)(~(0xFFFF * v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v114 = a5;
    v115 = -v9;
    v113 = v8 + 16 * v14 + 8;
    v18 = BLEND16_19498;
    while (1)
    {
      if (((v118 - v11) | (v11 - v119)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v11 & (unint64_t)v117) >> v116) & 0xF;
        v20 = (unint64_t)(v19 - 7) >= 9 ? v115 : v9;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = *((_QWORD *)v135 + 4) + (v11 >> v10) * v9;
      v128 = a6;
      v126 = v11;
      if (v125 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v113;
        v24 = v114;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int16 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v12)
            v28 = v12;
          v29 = *v28;
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v42 = (unsigned __int16 *)(v27 + v20);
            if ((unint64_t)v15 < v27 + v20)
              v42 = v15;
            if (v42 < v12)
              v42 = v12;
            v43 = v18[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = (unint64_t)(unsigned __int16)(v43 & *v42) >> v21;
            goto LABEL_40;
          }
LABEL_41:
          v23 += 2;
          v44 = (0x100010001 * (unsigned __int16)v29) | 0xFFFF000000000000;
          v45 = (v29 | 0xFFFF0000) * v16;
          if (v45 >= 0xFFFE8000)
            v45 = -98304;
          v46 = (unsigned __int16)(v29 - ((v45 + 0x8000 + ((v45 + 0x8000) >> 16)) >> 16));
          v47 = ((unint64_t)v46 << 16) | (v46 << 32) | v17 | v46;
          if ((_DWORD)v6 == 0xFFFF)
            v47 = v44;
          v48 = HIDWORD(v47);
          v49 = HIWORD(v47);
          v50 = bswap32(v47);
          *v7 = HIWORD(v50);
          v7[1] = v50;
          v7[2] = bswap32(v48) >> 16;
          v7[3] = __rev16(v49);
          v7 += 4;
          if (!--v24)
            goto LABEL_88;
        }
        v31 = v26 >> 4;
        v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v12)
          v32 = v12;
        v33 = *v32;
        if (v21)
        {
          v34 = (unsigned __int16 *)(v27 + v20);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v12)
            v35 = v12;
          v36 = *v35;
          v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37)
            v37 = v15;
          if (v37 < v12)
            v37 = v12;
          v38 = v18[v21];
          LODWORD(v29) = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          LODWORD(v33) = v33 - ((v38 & v33) >> v21) + ((unint64_t)(unsigned __int16)(v38 & *v37) >> v21);
        }
        v39 = v18[v30];
        v40 = v29 - ((unint64_t)(v39 & v29) >> v30);
        v41 = (unint64_t)(v39 & v33) >> v30;
LABEL_40:
        LOWORD(v29) = v40 + v41;
        goto LABEL_41;
      }
LABEL_88:
      v9 = v123;
      v7 += 4 * v124;
      LOBYTE(v10) = v122;
      v11 = v126 + v121;
      a6 = v128 - 1;
      if (v128 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_88;
    v133 = v21;
    v52 = (uint64_t *)v113;
    v51 = v114;
    v131 = v21;
    v130 = *((_QWORD *)v135 + 4) + (v11 >> v10) * v9;
    while (1)
    {
      v53 = *(v52 - 1);
      v54 = *v52;
      v55 = v22 + v53;
      if ((unint64_t)v15 >= v22 + v53)
        v56 = (unsigned __int16 *)(v22 + v53);
      else
        v56 = v15;
      if (v56 < v12)
        v56 = v12;
      v57 = *v56;
      v58 = *v52 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if (v21)
      {
        v70 = (unsigned __int16 *)(v55 + v20);
        if ((unint64_t)v15 < v55 + v20)
          v70 = v15;
        if (v70 < v12)
          v70 = v12;
        v71 = v18[v133];
        v68 = v57 - ((v71 & v57) >> v133);
        v69 = (unint64_t)(unsigned __int16)(v71 & *v70) >> v133;
        goto LABEL_77;
      }
LABEL_78:
      v72 = (0x100010001 * (unsigned __int16)v57) | 0xFFFF000000000000;
      v73 = (v57 | 0xFFFF0000) * v16;
      if (v73 >= 0xFFFE8000)
        v73 = -98304;
      v74 = (unsigned __int16)(v57 - ((v73 + 0x8000 + ((v73 + 0x8000) >> 16)) >> 16));
      v75 = ((unint64_t)v74 << 16) | (v74 << 32) | v17 | v74;
      if ((_DWORD)v6 == 0xFFFF)
        v76 = v72;
      else
        v76 = v75;
      v77 = HIWORD(v76);
      if (HIWORD(v76))
      {
        if ((_DWORD)v77 == 0xFFFF)
        {
          v78 = bswap32(v76);
          *v7 = HIWORD(v78);
          v7[1] = v78;
          v7[2] = bswap32(HIDWORD(v76)) >> 16;
          v7[3] = -1;
        }
        else
        {
          v79 = v6;
          v80 = v17;
          v81 = v20;
          v82 = v18;
          result = RGBA64_DplusDM(v7, v76, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v77 ^ 0xFFFF);
          v18 = v82;
          v20 = v81;
          v21 = v131;
          v17 = v80;
          v6 = v79;
          v22 = v130;
        }
      }
      v52 += 2;
      v7 += 4;
      if (!--v51)
        goto LABEL_88;
    }
    v59 = v54 >> 4;
    v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v15 < v60)
      v60 = v15;
    if (v60 < v12)
      v60 = v12;
    v61 = *v60;
    if (v21)
    {
      v62 = (unsigned __int16 *)(v55 + v20);
      if (v15 >= v62)
        v63 = v62;
      else
        v63 = v15;
      if (v63 < v12)
        v63 = v12;
      v64 = *v63;
      v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v15 < v65)
        v65 = v15;
      if (v65 < v12)
        v65 = v12;
      v66 = v18[v133];
      LODWORD(v57) = v57 - ((v66 & v57) >> v133) + ((v66 & v64) >> v133);
      LODWORD(v61) = v61 - ((v66 & v61) >> v133) + ((unint64_t)(unsigned __int16)(v66 & *v65) >> v133);
    }
    v67 = v18[v58];
    v68 = v57 - ((unint64_t)(v67 & v57) >> v58);
    v69 = (unint64_t)(v67 & v61) >> v58;
LABEL_77:
    LOWORD(v57) = v68 + v69;
    goto LABEL_78;
  }
  v83 = v13 - 4;
  v84 = v6 ^ 0xFFFF;
  v85 = (unint64_t)(~(0xFFFF * v84 + 0x8000 + ((0xFFFF * v84 + 0x8000) >> 16)) >> 16) << 48;
  v132 = a5;
  v134 = (uint64_t *)(v8 + 16 * a3);
  do
  {
    v86 = (char *)*((_QWORD *)v135 + 4);
    v87 = &v86[(v11 >> v10) * v9];
    v129 = a6;
    v127 = v11;
    if (v125 == 1)
    {
      if (a5 >= 1)
      {
        v89 = v132;
        v88 = v134;
        do
        {
          v90 = *v88;
          v88 += 2;
          v91 = &v87[v90];
          if (v83 < &v87[v90])
            v91 = v83;
          if (v91 < v86)
            v91 = v86;
          v92 = *(unsigned __int16 *)v91;
          v93 = (v92 | 0xFFFF0000) * v84;
          if (v93 >= 0xFFFE8000)
            v93 = -98304;
          v94 = 0x100010001 * v92;
          v95 = (unsigned __int16)(v92 - ((v93 + 0x8000 + ((v93 + 0x8000) >> 16)) >> 16));
          v96 = v94 | 0xFFFF000000000000;
          v97 = ((unint64_t)v95 << 16) | (v95 << 32) | v85 | v95;
          if ((_DWORD)v6 == 0xFFFF)
            v97 = v96;
          v98 = HIDWORD(v97);
          v99 = HIWORD(v97);
          v100 = bswap32(v97);
          v7[1] = v100;
          *v7 = HIWORD(v100);
          v7[2] = bswap32(v98) >> 16;
          v7[3] = __rev16(v99);
          v7 += 4;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      v102 = v132;
      v101 = v134;
      if (a5 >= 1)
      {
        do
        {
          v103 = *v101;
          v101 += 2;
          v104 = &v87[v103];
          if (v83 < &v87[v103])
            v104 = v83;
          if ((unint64_t)v104 < *((_QWORD *)v135 + 4))
            v104 = (char *)*((_QWORD *)v135 + 4);
          v105 = *(unsigned __int16 *)v104;
          v106 = (0x100010001 * v105) | 0xFFFF000000000000;
          v107 = (v105 | 0xFFFF0000) * v84;
          if (v107 >= 0xFFFE8000)
            v107 = -98304;
          v108 = (unsigned __int16)(v105 - ((v107 + 0x8000 + ((v107 + 0x8000) >> 16)) >> 16));
          v109 = ((unint64_t)v108 << 16) | (v108 << 32) | v85 | v108;
          if ((_DWORD)v6 == 0xFFFF)
            v110 = v106;
          else
            v110 = v109;
          v111 = HIWORD(v110);
          if (HIWORD(v110))
          {
            if ((_DWORD)v111 == 0xFFFF)
            {
              v112 = bswap32(v110);
              *v7 = HIWORD(v112);
              v7[1] = v112;
              v7[2] = bswap32(HIDWORD(v110)) >> 16;
              v7[3] = -1;
            }
            else
            {
              result = RGBA64_DplusDM(v7, v110, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v111 ^ 0xFFFF);
            }
          }
          v7 += 4;
          --v102;
        }
        while (v102);
      }
    }
    v9 = v123;
    v7 += 4 * v124;
    LOBYTE(v10) = v122;
    v11 = v127 + v121;
    a6 = v129 - 1;
  }
  while (v129 != 1);
  return result;
}

unint64_t RGBA64_image_mark_RGB48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int16 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned __int16 *v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;

  v6 = *((unsigned __int16 *)a2 + 4);
  v120 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v119 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v116 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v116 * a4;
  v12 = *(unsigned __int16 **)(result + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v130 = result;
  v14 = 0x8000;
  v127 = v6;
  v117 = v10;
  v118 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v15 = a3;
    v114 = *((_QWORD *)a2 + 11);
    v113 = *((_QWORD *)a2 + 13);
    v112 = ~(-1 << v10);
    v111 = v10 - 4;
    v16 = (unsigned __int16 *)(v13 - 6);
    v17 = v6 ^ 0xFFFFu;
    v18 = (unint64_t)(~(0xFFFF * (_DWORD)v17 + 0x8000 + ((0xFFFF * v17 + 0x8000) >> 16)) >> 16) << 48;
    v109 = a5;
    v110 = -v9;
    v108 = v8 + 16 * v15 + 8;
    v19 = BLEND16_19498;
    v124 = (unsigned __int16 *)(v13 - 6);
    while (1)
    {
      if (((v113 - v11) | (v11 - v114)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v11 & (unint64_t)v112) >> v111) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v110 : v9;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(v130 + 32) + (v11 >> v10) * v9;
      v122 = a6;
      v121 = v11;
      if (v120 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v108;
        v25 = v109;
        while (1)
        {
          v26 = *(v24 - 1);
          v27 = *v24;
          v28 = v23 + v26;
          if ((unint64_t)v16 >= v23 + v26)
            v29 = (unsigned __int16 *)(v23 + v26);
          else
            v29 = v16;
          if (v29 < v12)
            v29 = v12;
          v30 = bswap32(v29[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v29[2]) >> 16) << 32) | (bswap32(*v29) >> 16);
          v31 = *v24 & 0xF;
          if ((v27 & 0xF) != 0)
            break;
          if (v22)
          {
            v43 = (unsigned __int16 *)(v28 + v21);
            if ((unint64_t)v16 < v28 + v21)
              v43 = v16;
            if (v43 < v12)
              v43 = v12;
            v44 = v19[v22];
            v41 = v30 - ((v44 & v30) >> v22);
            v42 = ((bswap32(v43[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v43[2]) >> 16) << 32) | (bswap32(*v43) >> 16)) & v44) >> v22;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF)
            v45 = v30 | 0xFFFF000000000000;
          else
            v45 = ((WORD1(v30)
                  - (((_DWORD)v14 + WORD1(v30) * (_DWORD)v17 + ((v14 + WORD1(v30) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v30) - (((_DWORD)v14 + WORD2(v30) * (_DWORD)v17 + ((v14 + WORD2(v30) * (_DWORD)v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v30 - (((_DWORD)v14 + (unsigned __int16)v30 * (_DWORD)v17 + ((v14 + (unsigned __int16)v30 * (_DWORD)v17) >> 16)) >> 16)) | v18;
          v24 += 2;
          v46 = HIDWORD(v45);
          v47 = HIWORD(v45);
          v48 = bswap32(v45);
          *v7 = HIWORD(v48);
          v7[1] = v48;
          v7[2] = bswap32(v46) >> 16;
          v7[3] = __rev16(v47);
          v7 += 4;
          if (!--v25)
            goto LABEL_85;
        }
        v32 = v27 >> 4;
        v33 = (unsigned __int16 *)(v28 + (v27 >> 4));
        if (v16 < v33)
          v33 = v16;
        if (v33 < v12)
          v33 = v12;
        v34 = bswap32(v33[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v33[2]) >> 16) << 32) | (bswap32(*v33) >> 16);
        if (v22)
        {
          v35 = (unsigned __int16 *)(v28 + v21);
          if (v16 >= v35)
            v36 = v35;
          else
            v36 = v16;
          if (v36 < v12)
            v36 = v12;
          result = bswap32(v36[1]) & 0xFFFF0000;
          v37 = result | ((unint64_t)(bswap32(v36[2]) >> 16) << 32) | (bswap32(*v36) >> 16);
          v38 = (unsigned __int16 *)((char *)v35 + v32);
          if (v16 < v38)
            v38 = v16;
          if (v38 < v12)
            v38 = v12;
          v39 = v19[v22];
          v30 = v30 - ((v39 & v30) >> v22) + ((v37 & v39) >> v22);
          v34 = v34
              - ((v39 & v34) >> v22)
              + (((bswap32(v38[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | (bswap32(*v38) >> 16)) & v39) >> v22);
        }
        v40 = v19[v31];
        v41 = v30 - ((v40 & v30) >> v31);
        v42 = (v40 & v34) >> v31;
LABEL_40:
        v30 = v41 + v42;
        goto LABEL_41;
      }
LABEL_85:
      v9 = v118;
      v7 += 4 * v119;
      LOBYTE(v10) = v117;
      v11 = v121 + v116;
      a6 = v122 - 1;
      if (v122 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v128 = v22;
    v49 = (uint64_t *)v108;
    v50 = v109;
    v125 = v22;
    while (1)
    {
      v51 = *(v49 - 1);
      v52 = *v49;
      v53 = v23 + v51;
      if ((unint64_t)v16 >= v23 + v51)
        v54 = (unsigned __int16 *)(v23 + v51);
      else
        v54 = v16;
      if (v54 < v12)
        v54 = v12;
      v55 = bswap32(v54[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v54[2]) >> 16) << 32) | (bswap32(*v54) >> 16);
      v56 = *v49 & 0xF;
      if ((v52 & 0xF) != 0)
        break;
      if (v22)
      {
        v68 = (unsigned __int16 *)(v53 + v21);
        if ((unint64_t)v16 < v53 + v21)
          v68 = v16;
        if (v68 < v12)
          v68 = v12;
        v69 = v19[v128];
        v66 = v55 - ((v69 & v55) >> v128);
        v67 = ((bswap32(v68[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v68[2]) >> 16) << 32) | (bswap32(*v68) >> 16)) & v69) >> v128;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF)
        v70 = v55 | 0xFFFF000000000000;
      else
        v70 = ((WORD1(v55)
              - (((_DWORD)v14 + WORD1(v55) * (_DWORD)v17 + ((v14 + WORD1(v55) * (_DWORD)v17) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v55) - (((_DWORD)v14 + WORD2(v55) * (_DWORD)v17 + ((v14 + WORD2(v55) * (_DWORD)v17) >> 16)) >> 16)) << 32) | (unsigned __int16)(v55 - (((_DWORD)v14 + (unsigned __int16)v55 * (_DWORD)v17 + ((v14 + (unsigned __int16)v55 * (_DWORD)v17) >> 16)) >> 16)) | v18;
      v71 = HIWORD(v70);
      if (HIWORD(v70))
      {
        if ((_DWORD)v71 == 0xFFFF)
        {
          v72 = bswap32(v70);
          *v7 = HIWORD(v72);
          v7[1] = v72;
          v7[2] = bswap32(HIDWORD(v70)) >> 16;
          v7[3] = -1;
        }
        else
        {
          v73 = v18;
          v74 = v19;
          v75 = v12;
          v76 = v14;
          v77 = v17;
          v78 = v21;
          result = (unint64_t)RGBA64_DplusDM(v7, v70, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v71 ^ 0xFFFF);
          v21 = v78;
          v17 = v77;
          v14 = v76;
          v12 = v75;
          v19 = v74;
          v16 = v124;
          v18 = v73;
          v22 = v125;
          v6 = v127;
        }
      }
      v49 += 2;
      v7 += 4;
      if (!--v50)
        goto LABEL_85;
    }
    v57 = v52 >> 4;
    v58 = (unsigned __int16 *)(v53 + (v52 >> 4));
    if (v16 < v58)
      v58 = v16;
    if (v58 < v12)
      v58 = v12;
    v59 = bswap32(v58[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | (bswap32(*v58) >> 16);
    if (v22)
    {
      v60 = (unsigned __int16 *)(v53 + v21);
      if (v16 >= v60)
        v61 = v60;
      else
        v61 = v16;
      if (v61 < v12)
        v61 = v12;
      v62 = bswap32(v61[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v61[2]) >> 16) << 32) | (bswap32(*v61) >> 16);
      v63 = (unsigned __int16 *)((char *)v60 + v57);
      if (v16 < v63)
        v63 = v16;
      if (v63 < v12)
        v63 = v12;
      v64 = v19[v128];
      v55 = v55 - ((v64 & v55) >> v128) + ((v62 & v64) >> v128);
      v59 = v59
          - ((v64 & v59) >> v128)
          + (((bswap32(v63[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v63[2]) >> 16) << 32) | (bswap32(*v63) >> 16)) & v64) >> v128);
    }
    v65 = v19[v56];
    v66 = v55 - ((v65 & v55) >> v56);
    v67 = (v65 & v59) >> v56;
LABEL_76:
    v55 = v66 + v67;
    goto LABEL_77;
  }
  v129 = (uint64_t *)(v8 + 16 * a3);
  v79 = v13 - 6;
  v80 = v6 ^ 0xFFFF;
  v81 = (unint64_t)(~(0xFFFF * v80 + 0x8000 + ((0xFFFF * v80 + 0x8000) >> 16)) >> 16) << 48;
  v126 = a5;
  do
  {
    v82 = *(char **)(v130 + 32);
    v83 = &v82[(v11 >> v10) * v9];
    v123 = a6;
    if (v120 == 1)
    {
      if (a5 >= 1)
      {
        v84 = v129;
        v85 = v126;
        do
        {
          v86 = *v84;
          v84 += 2;
          v87 = &v83[v86];
          if (v79 < &v83[v86])
            v87 = v79;
          if (v87 < v82)
            v87 = v82;
          v88 = bswap32(*(unsigned __int16 *)v87) >> 16;
          v89 = bswap32(*((unsigned __int16 *)v87 + 1)) >> 16;
          v90 = bswap32(*((unsigned __int16 *)v87 + 2)) >> 16;
          v91 = v88 | (v90 << 32) | (v89 << 16) | 0xFFFF000000000000;
          v92 = ((v89 - (((_DWORD)v89 * v80 + 0x8000 + ((v89 * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v90 - (((_DWORD)v90 * v80 + 0x8000 + ((v90 * v80 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v88 - (((_DWORD)v88 * v80 + 0x8000 + ((v88 * v80 + 0x8000) >> 16)) >> 16)) | v81;
          if (v6 == 0xFFFF)
            v92 = v91;
          v93 = HIDWORD(v92);
          v94 = HIWORD(v92);
          v95 = bswap32(v92);
          *v7 = HIWORD(v95);
          v7[1] = v95;
          v7[2] = bswap32(v93) >> 16;
          v7[3] = __rev16(v94);
          v7 += 4;
          --v85;
        }
        while (v85);
      }
    }
    else
    {
      v96 = v129;
      v97 = v126;
      if (a5 >= 1)
      {
        do
        {
          v98 = *v96;
          v96 += 2;
          v99 = &v83[v98];
          if (v79 < &v83[v98])
            v99 = v79;
          if ((unint64_t)v99 < *(_QWORD *)(v130 + 32))
            v99 = *(char **)(v130 + 32);
          v100 = bswap32(*(unsigned __int16 *)v99) >> 16;
          v101 = bswap32(*((unsigned __int16 *)v99 + 1)) >> 16;
          v102 = bswap32(*((unsigned __int16 *)v99 + 2)) >> 16;
          v103 = v100 | (v102 << 32) | (v101 << 16) | 0xFFFF000000000000;
          v104 = ((v101
                 - (((_DWORD)v101 * v80 + 0x8000 + ((v101 * v80 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v102 - (((_DWORD)v102 * v80 + 0x8000 + ((v102 * v80 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v100 - (((_DWORD)v100 * v80 + 0x8000 + ((v100 * v80 + 0x8000) >> 16)) >> 16)) | v81;
          if (v6 == 0xFFFF)
            v105 = v103;
          else
            v105 = v104;
          v106 = HIWORD(v105);
          if (HIWORD(v105))
          {
            if ((_DWORD)v106 == 0xFFFF)
            {
              v107 = bswap32(v105);
              *v7 = HIWORD(v107);
              v7[1] = v107;
              v7[2] = bswap32(HIDWORD(v105)) >> 16;
              v7[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v7, v105, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v106 ^ 0xFFFF);
              v6 = v127;
            }
          }
          v7 += 4;
          --v97;
        }
        while (v97);
      }
    }
    v9 = v118;
    v7 += 4 * v119;
    LOBYTE(v10) = v117;
    v11 += v116;
    a6 = v123 - 1;
  }
  while (v123 != 1);
  return result;
}

unint64_t RGBA64_image_mark_rgb48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  unsigned __int16 *v121;
  unsigned __int16 *v122;
  uint64_t v123;
  int v124;
  uint64_t *v125;
  unint64_t v126;

  v6 = *((unsigned __int16 *)a2 + 4);
  v117 = *a2;
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v116 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v113 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v113 * a4;
  v12 = *(unsigned __int16 **)(result + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v126 = result;
  v14 = 0x8000;
  v124 = v6;
  v114 = v10;
  v115 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v111 = *((_QWORD *)a2 + 11);
    v110 = *((_QWORD *)a2 + 13);
    v109 = ~(-1 << v10);
    v108 = v10 - 4;
    v15 = (unsigned __int16 *)(v13 - 6);
    v16 = v6 ^ 0xFFFFu;
    result = (unint64_t)(~(0xFFFF * (_DWORD)v16 + 0x8000 + ((0xFFFF * v16 + 0x8000) >> 16)) >> 16) << 48;
    v106 = a5;
    v107 = -v9;
    v105 = v8 + 16 * a3 + 8;
    v17 = BLEND16_19498;
    v122 = v12;
    v121 = (unsigned __int16 *)(v13 - 6);
    while (1)
    {
      if (((v110 - v11) | (v11 - v111)) < 0)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v18 = ((v11 & (unint64_t)v109) >> v108) & 0xF;
        v19 = (unint64_t)(v18 - 7) >= 9 ? v107 : v9;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = *(_QWORD *)(v126 + 32) + (v11 >> v10) * v9;
      v119 = a6;
      v118 = v11;
      if (v117 != 1)
        break;
      if (a5 >= 1)
      {
        v22 = (uint64_t *)v105;
        v23 = v106;
        while (1)
        {
          v24 = *(v22 - 1);
          v25 = *v22;
          v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24)
            v27 = (unsigned __int16 *)(v21 + v24);
          else
            v27 = v15;
          if (v27 < v12)
            v27 = v12;
          v28 = *v27 | ((unint64_t)*(unsigned int *)(v27 + 1) << 16);
          v29 = *v22 & 0xF;
          if ((v25 & 0xF) != 0)
            break;
          if (v20)
          {
            v41 = (unsigned __int16 *)(v26 + v19);
            if ((unint64_t)v15 < v26 + v19)
              v41 = v15;
            if (v41 < v12)
              v41 = v12;
            v42 = v17[v20];
            v39 = v28 - ((v42 & v28) >> v20);
            v40 = ((*v41 | ((unint64_t)*(unsigned int *)(v41 + 1) << 16)) & v42) >> v20;
            goto LABEL_40;
          }
LABEL_41:
          if (v6 == 0xFFFF)
            v43 = v28 | 0xFFFF000000000000;
          else
            v43 = ((WORD1(v28)
                  - (((_DWORD)v14 + WORD1(v28) * (_DWORD)v16 + ((v14 + WORD1(v28) * (_DWORD)v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v28) - (((_DWORD)v14 + WORD2(v28) * (_DWORD)v16 + ((v14 + WORD2(v28) * (_DWORD)v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v28 - (((_DWORD)v14 + (unsigned __int16)v28 * (_DWORD)v16 + ((v14 + (unsigned __int16)v28 * (_DWORD)v16) >> 16)) >> 16)) | result;
          v22 += 2;
          v44 = HIDWORD(v43);
          v45 = HIWORD(v43);
          v46 = bswap32(v43);
          *v7 = HIWORD(v46);
          v7[1] = v46;
          v7[2] = bswap32(v44) >> 16;
          v7[3] = __rev16(v45);
          v7 += 4;
          if (!--v23)
            goto LABEL_85;
        }
        v30 = v25 >> 4;
        v31 = (unsigned __int16 *)(v26 + (v25 >> 4));
        if (v15 < v31)
          v31 = v15;
        if (v31 < v12)
          v31 = v12;
        v32 = *v31 | ((unint64_t)*(unsigned int *)(v31 + 1) << 16);
        if (v20)
        {
          v33 = (unsigned __int16 *)(v26 + v19);
          if (v15 >= v33)
            v34 = v33;
          else
            v34 = v15;
          if (v34 < v12)
            v34 = v12;
          v35 = *v34 | ((unint64_t)*(unsigned int *)(v34 + 1) << 16);
          v36 = (unsigned __int16 *)((char *)v33 + v30);
          if (v15 < v36)
            v36 = v15;
          if (v36 < v12)
            v36 = v12;
          v37 = v17[v20];
          v28 = v28 - ((v37 & v28) >> v20) + ((v35 & v37) >> v20);
          v32 = v32
              - ((v37 & v32) >> v20)
              + (((*v36 | ((unint64_t)*(unsigned int *)(v36 + 1) << 16)) & v37) >> v20);
        }
        v38 = v17[v29];
        v39 = v28 - ((v38 & v28) >> v29);
        v40 = (v38 & v32) >> v29;
LABEL_40:
        v28 = v39 + v40;
        goto LABEL_41;
      }
LABEL_85:
      v9 = v115;
      v7 += 4 * v116;
      LOBYTE(v10) = v114;
      v11 = v118 + v113;
      a6 = v119 - 1;
      if (v119 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v47 = (uint64_t *)v105;
    v48 = v106;
    while (1)
    {
      v49 = *(v47 - 1);
      v50 = *v47;
      v51 = v21 + v49;
      if ((unint64_t)v15 >= v21 + v49)
        v52 = (unsigned __int16 *)(v21 + v49);
      else
        v52 = v15;
      if (v52 < v12)
        v52 = v12;
      v53 = *v52 | ((unint64_t)*(unsigned int *)(v52 + 1) << 16);
      v54 = *v47 & 0xF;
      if ((v50 & 0xF) != 0)
        break;
      if (v20)
      {
        v66 = (unsigned __int16 *)(v51 + v19);
        if ((unint64_t)v15 < v51 + v19)
          v66 = v15;
        if (v66 < v12)
          v66 = v12;
        v67 = v17[v20];
        v64 = v53 - ((v67 & v53) >> v20);
        v65 = ((*v66 | ((unint64_t)*(unsigned int *)(v66 + 1) << 16)) & v67) >> v20;
        goto LABEL_76;
      }
LABEL_77:
      if (v6 == 0xFFFF)
        v68 = v53 | 0xFFFF000000000000;
      else
        v68 = ((WORD1(v53)
              - (((_DWORD)v14 + WORD1(v53) * (_DWORD)v16 + ((v14 + WORD1(v53) * (_DWORD)v16) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(WORD2(v53) - (((_DWORD)v14 + WORD2(v53) * (_DWORD)v16 + ((v14 + WORD2(v53) * (_DWORD)v16) >> 16)) >> 16)) << 32) | (unsigned __int16)(v53 - (((_DWORD)v14 + (unsigned __int16)v53 * (_DWORD)v16 + ((v14 + (unsigned __int16)v53 * (_DWORD)v16) >> 16)) >> 16)) | result;
      v69 = HIWORD(v68);
      if (HIWORD(v68))
      {
        if ((_DWORD)v69 == 0xFFFF)
        {
          v70 = bswap32(v68);
          *v7 = HIWORD(v70);
          v7[1] = v70;
          v7[2] = bswap32(HIDWORD(v68)) >> 16;
          v7[3] = -1;
        }
        else
        {
          v71 = v17;
          v72 = result;
          v73 = v19;
          v74 = v14;
          v75 = v16;
          RGBA64_DplusDM(v7, v68, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v69 ^ 0xFFFF);
          v16 = v75;
          v14 = v74;
          v19 = v73;
          v17 = v71;
          v15 = v121;
          result = v72;
          v12 = v122;
          v6 = v124;
        }
      }
      v47 += 2;
      v7 += 4;
      if (!--v48)
        goto LABEL_85;
    }
    v55 = v50 >> 4;
    v56 = (unsigned __int16 *)(v51 + (v50 >> 4));
    if (v15 < v56)
      v56 = v15;
    if (v56 < v12)
      v56 = v12;
    v57 = *v56 | ((unint64_t)*(unsigned int *)(v56 + 1) << 16);
    if (v20)
    {
      v58 = (unsigned __int16 *)(v51 + v19);
      if (v15 >= v58)
        v59 = v58;
      else
        v59 = v15;
      if (v59 < v12)
        v59 = v12;
      v60 = *v59 | ((unint64_t)*(unsigned int *)(v59 + 1) << 16);
      v61 = (unsigned __int16 *)((char *)v58 + v55);
      if (v15 < v61)
        v61 = v15;
      if (v61 < v12)
        v61 = v12;
      v62 = v17[v20];
      v53 = v53 - ((v62 & v53) >> v20) + ((v60 & v62) >> v20);
      v57 = v57 - ((v62 & v57) >> v20) + (((*v61 | ((unint64_t)*(unsigned int *)(v61 + 1) << 16)) & v62) >> v20);
    }
    v63 = v17[v54];
    v64 = v53 - ((v63 & v53) >> v54);
    v65 = (v63 & v57) >> v54;
LABEL_76:
    v53 = v64 + v65;
    goto LABEL_77;
  }
  v125 = (uint64_t *)(v8 + 16 * a3);
  v76 = v13 - 6;
  v77 = v6 ^ 0xFFFF;
  v78 = (unint64_t)(~(0xFFFF * v77 + 0x8000 + ((0xFFFF * v77 + 0x8000) >> 16)) >> 16) << 48;
  v123 = a5;
  do
  {
    v79 = *(char **)(v126 + 32);
    v80 = &v79[(v11 >> v10) * v9];
    v120 = a6;
    if (v117 == 1)
    {
      if (a5 >= 1)
      {
        v81 = v125;
        v82 = v123;
        do
        {
          v83 = *v81;
          v81 += 2;
          v84 = &v80[v83];
          if (v76 < &v80[v83])
            v84 = v76;
          if (v84 < v79)
            v84 = v79;
          v85 = *(unsigned __int16 *)v84;
          v86 = *((unsigned __int16 *)v84 + 1);
          v87 = *((unsigned __int16 *)v84 + 2);
          v88 = v85 | (v86 << 16) | (v87 << 32) | 0xFFFF000000000000;
          v89 = ((v86 - (((_DWORD)v86 * v77 + 0x8000 + ((v86 * v77 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v87 - (((_DWORD)v87 * v77 + 0x8000 + ((v87 * v77 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v85 - (((_DWORD)v85 * v77 + 0x8000 + ((v85 * v77 + 0x8000) >> 16)) >> 16)) | v78;
          if (v6 == 0xFFFF)
            v89 = v88;
          v90 = HIDWORD(v89);
          v91 = HIWORD(v89);
          v92 = bswap32(v89);
          *v7 = HIWORD(v92);
          v7[1] = v92;
          v7[2] = bswap32(v90) >> 16;
          v7[3] = __rev16(v91);
          v7 += 4;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      v93 = v125;
      v94 = v123;
      if (a5 >= 1)
      {
        do
        {
          v95 = *v93;
          v93 += 2;
          v96 = &v80[v95];
          if (v76 < &v80[v95])
            v96 = v76;
          if ((unint64_t)v96 < *(_QWORD *)(v126 + 32))
            v96 = *(char **)(v126 + 32);
          v97 = *(unsigned __int16 *)v96;
          v98 = *((unsigned __int16 *)v96 + 1);
          v99 = *((unsigned __int16 *)v96 + 2);
          v100 = v97 | (v98 << 16) | (v99 << 32) | 0xFFFF000000000000;
          v101 = ((v98 - (((_DWORD)v98 * v77 + 0x8000 + ((v98 * v77 + 0x8000) >> 16)) >> 16)) << 16) | ((unint64_t)(unsigned __int16)(v99 - (((_DWORD)v99 * v77 + 0x8000 + ((v99 * v77 + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v97 - (((_DWORD)v97 * v77 + 0x8000 + ((v97 * v77 + 0x8000) >> 16)) >> 16)) | v78;
          if (v6 == 0xFFFF)
            v102 = v100;
          else
            v102 = v101;
          v103 = HIWORD(v102);
          if (HIWORD(v102))
          {
            if ((_DWORD)v103 == 0xFFFF)
            {
              v104 = bswap32(v102);
              *v7 = HIWORD(v104);
              v7[1] = v104;
              v7[2] = bswap32(HIDWORD(v102)) >> 16;
              v7[3] = -1;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v7, v102, ((unint64_t)(bswap32(v7[2]) >> 16) << 32) | ((unint64_t)(bswap32(v7[3]) >> 16) << 48) | bswap32(v7[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v7) >> 16), v103 ^ 0xFFFF);
              v6 = v124;
            }
          }
          v7 += 4;
          --v94;
        }
        while (v94);
      }
    }
    v9 = v115;
    v7 += 4 * v116;
    LOBYTE(v10) = v114;
    v11 += v113;
    a6 = v120 - 1;
  }
  while (v120 != 1);
  return result;
}

_WORD *RGBA64_image_mark_RGBA64(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int16 *v80;
  uint64_t v81;
  int v82;
  int32x2_t v83;
  uint64x2_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 *v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  int32x2_t v99;
  uint32x2_t v100;
  int8x8_t v101;
  uint64x2_t v102;
  int8x16_t v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  unsigned __int16 *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  int32x2_t v115;
  uint32x2_t v116;
  int8x8_t v117;
  uint64x2_t v118;
  int8x16_t v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  unsigned __int16 *v137;
  unsigned __int16 *v138;
  uint64_t *v139;
  int v140;
  uint64_t v141;
  _WORD *v142;

  v7 = *((unsigned __int16 *)a2 + 4);
  v134 = *a2;
  v8 = (unsigned __int16 *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 5))
    v9 = 0;
  else
    v9 = 0xFFFFLL;
  v10 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v133 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v130 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v130 * a4;
  v15 = (char *)v8
      + (*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
      + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3);
  v142 = result;
  v140 = *((unsigned __int16 *)a2 + 4);
  v131 = v13;
  v132 = v12;
  if (*((_QWORD *)result + 22))
  {
    v16 = a3;
    v126 = ~(-1 << v13);
    v127 = *((_QWORD *)a2 + 13);
    v128 = *((_QWORD *)a2 + 11);
    v125 = v13 - 4;
    v17 = (unsigned __int16 *)(v15 - 8);
    v18 = v9 << 48;
    v19 = v7 ^ 0xFFFFu;
    v123 = a5;
    v124 = -v12;
    v122 = v11 + 16 * v16 + 8;
    v137 = (unsigned __int16 *)*((_QWORD *)result + 4);
    v138 = (unsigned __int16 *)(v15 - 8);
    while (1)
    {
      if (((v127 - v14) | (v14 - v128)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v14 & (unint64_t)v126) >> v125) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v124 : v12;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *((_QWORD *)v142 + 4) + (v14 >> v13) * v12;
      v24 = 0x8000;
      v136 = a6;
      v135 = v14;
      if (v134 != 1)
        break;
      if (a5 >= 1)
      {
        v25 = (uint64_t *)v122;
        v26 = v123;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27)
            v30 = (unsigned __int16 *)(v23 + v27);
          else
            v30 = v17;
          if (v30 < v8)
            v30 = v8;
          v31 = ((unint64_t)(bswap32(v30[3]) >> 16) << 48) | ((unint64_t)(bswap32(v30[2]) >> 16) << 32) | bswap32(v30[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v30) >> 16);
          v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if ((_DWORD)v22)
          {
            v44 = (unsigned __int16 *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21)
              v44 = v17;
            if (v44 < v8)
              v44 = v8;
            v45 = BLEND16_19498[v22];
            v42 = v31 - ((v45 & v31) >> v22);
            v43 = ((((unint64_t)(bswap32(v44[3]) >> 16) << 48) | ((unint64_t)(bswap32(v44[2]) >> 16) << 32) | bswap32(v44[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v44) >> 16)) & v45) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            v47 = HIWORD(v46);
            result = (_WORD *)((_DWORD)v47 * (_DWORD)v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16));
            v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * (_DWORD)v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (result >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * (_DWORD)v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * (_DWORD)v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          v48 = HIDWORD(v46);
          v49 = HIWORD(v46);
          v50 = bswap32(v46);
          *v10 = HIWORD(v50);
          v10[1] = v50;
          v10[2] = bswap32(v48) >> 16;
          v10[3] = __rev16(v49);
          v10 += 4;
          if (!--v26)
            goto LABEL_86;
        }
        v33 = v28 >> 4;
        v34 = (unsigned __int16 *)(v29 + (v28 >> 4));
        if (v17 < v34)
          v34 = v17;
        if (v34 < v8)
          v34 = v8;
        result = (_WORD *)bswap32(v34[1]);
        v35 = ((unint64_t)(bswap32(v34[3]) >> 16) << 48) | ((unint64_t)(bswap32(v34[2]) >> 16) << 32) | result & 0xFFFF0000 | (unint64_t)(bswap32(*v34) >> 16);
        if ((_DWORD)v22)
        {
          v36 = (unsigned __int16 *)(v29 + v21);
          if (v17 >= v36)
            v37 = v36;
          else
            v37 = v17;
          if (v37 < v8)
            v37 = v8;
          v38 = ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
          v39 = (unsigned __int16 *)((char *)v36 + v33);
          if (v17 < v39)
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          result = (_WORD *)bswap32(v39[1]);
          v40 = BLEND16_19498[v22];
          v31 = v31 - ((v40 & v31) >> v22) + ((v38 & v40) >> v22);
          v35 = v35
              - ((v40 & v35) >> v22)
              + (((((unint64_t)(bswap32(v39[3]) >> 16) << 48) | ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | result & 0xFFFF0000 | (unint64_t)(bswap32(*v39) >> 16)) & v40) >> v22);
        }
        v41 = BLEND16_19498[v32];
        v42 = v31 - ((v41 & v31) >> v32);
        v43 = (v41 & v35) >> v32;
LABEL_43:
        v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      v12 = v132;
      v10 += 4 * v133;
      LOBYTE(v13) = v131;
      v14 = v135 + v130;
      a6 = v136 - 1;
      if (v136 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_86;
    v141 = v22;
    v52 = (uint64_t *)v122;
    v51 = v123;
    while (1)
    {
      v53 = *(v52 - 1);
      v54 = *v52;
      v55 = v23 + v53;
      if ((unint64_t)v17 >= v23 + v53)
        v56 = (unsigned __int16 *)(v23 + v53);
      else
        v56 = v17;
      if (v56 < v8)
        v56 = v8;
      v57 = ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
      v58 = *v52 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if ((_DWORD)v22)
      {
        v70 = (unsigned __int16 *)(v55 + v21);
        if ((unint64_t)v17 < v55 + v21)
          v70 = v17;
        if (v70 < v8)
          v70 = v8;
        v71 = BLEND16_19498[v141];
        v68 = v57 - ((v71 & v57) >> v141);
        v69 = ((((unint64_t)(bswap32(v70[3]) >> 16) << 48) | ((unint64_t)(bswap32(v70[2]) >> 16) << 32) | bswap32(v70[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v70) >> 16)) & v71) >> v141;
        goto LABEL_78;
      }
LABEL_79:
      v72 = v57 | v18;
      if (v7 != 0xFFFF)
        v72 = ((unint64_t)(unsigned __int16)(WORD2(v57)
                                                  - (((_DWORD)v24
                                                    + WORD2(v57) * (_DWORD)v19
                                                    + ((v24 + WORD2(v57) * (_DWORD)v19) >> 16)) >> 16)) << 32) | ((HIWORD(v72) - ((v24 + HIWORD(v72) * v19 + ((v24 + HIWORD(v72) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v57) - (((_DWORD)v24 + WORD1(v57) * (_DWORD)v19 + ((v24 + WORD1(v57) * (_DWORD)v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v57 - (((_DWORD)v24 + (unsigned __int16)v57 * (_DWORD)v19 + ((v24 + (unsigned __int16)v57 * (_DWORD)v19) >> 16)) >> 16));
      v73 = HIWORD(v72);
      if (HIWORD(v72))
      {
        if ((_DWORD)v73 == 0xFFFF)
        {
          v74 = bswap32(v72);
          *v10 = HIWORD(v74);
          v10[1] = v74;
          v10[2] = bswap32(HIDWORD(v72)) >> 16;
          v10[3] = -1;
        }
        else
        {
          v75 = v23;
          v76 = v18;
          v77 = v24;
          v78 = v22;
          v79 = v19;
          result = RGBA64_DplusDM(v10, v72, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v73 ^ 0xFFFF);
          v19 = v79;
          v22 = v78;
          v24 = v77;
          v18 = v76;
          v23 = v75;
          v8 = v137;
          v17 = v138;
          v7 = v140;
        }
      }
      v52 += 2;
      v10 += 4;
      if (!--v51)
        goto LABEL_86;
    }
    v59 = v54 >> 4;
    v60 = (unsigned __int16 *)(v55 + (v54 >> 4));
    if (v17 < v60)
      v60 = v17;
    if (v60 < v8)
      v60 = v8;
    v61 = ((unint64_t)(bswap32(v60[3]) >> 16) << 48) | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | bswap32(v60[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v60) >> 16);
    if ((_DWORD)v22)
    {
      v62 = (unsigned __int16 *)(v55 + v21);
      if (v17 >= v62)
        v63 = v62;
      else
        v63 = v17;
      if (v63 < v8)
        v63 = v8;
      v64 = ((unint64_t)(bswap32(v63[3]) >> 16) << 48) | ((unint64_t)(bswap32(v63[2]) >> 16) << 32) | bswap32(v63[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v63) >> 16);
      v65 = (unsigned __int16 *)((char *)v62 + v59);
      if (v17 < v65)
        v65 = v17;
      if (v65 < v8)
        v65 = v8;
      v66 = BLEND16_19498[v141];
      v57 = v57 - ((v66 & v57) >> v141) + ((v64 & v66) >> v141);
      v61 = v61
          - ((v66 & v61) >> v141)
          + (((((unint64_t)(bswap32(v65[3]) >> 16) << 48) | ((unint64_t)(bswap32(v65[2]) >> 16) << 32) | bswap32(v65[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v65) >> 16)) & v66) >> v141);
    }
    v67 = BLEND16_19498[v58];
    v68 = v57 - ((v67 & v57) >> v58);
    v69 = (v67 & v61) >> v58;
LABEL_78:
    v57 = v68 + v69;
    goto LABEL_79;
  }
  v139 = (uint64_t *)(v11 + 16 * a3);
  v80 = (unsigned __int16 *)(v15 - 8);
  v81 = v9 << 48;
  v82 = v7 ^ 0xFFFF;
  v83 = vdup_n_s32(v7 ^ 0xFFFFu);
  v84 = (uint64x2_t)xmmword_185004F60;
  v85 = a5;
  do
  {
    v86 = v14;
    v87 = (unsigned __int16 *)*((_QWORD *)v142 + 4);
    v88 = (char *)v87 + (v14 >> v13) * v12;
    if (v134 == 1)
    {
      if (a5 >= 1)
      {
        v89 = v139;
        v90 = v85;
        do
        {
          v91 = *v89;
          v89 += 2;
          v92 = (unsigned __int16 *)&v88[v91];
          if (v80 < (unsigned __int16 *)&v88[v91])
            v92 = v80;
          if (v92 >= v87)
            v93 = v92;
          else
            v93 = v87;
          v94 = bswap32(v93[3]) >> 16;
          v95 = bswap32(*v93) >> 16;
          v96 = bswap32(v93[1]) >> 16;
          v97 = bswap32(v93[2]) >> 16;
          v98 = (v96 << 16) | (unint64_t)(v94 << 48) | (v97 << 32) | v81 | v95;
          if (v7 != 0xFFFF)
          {
            v99.i32[0] = HIWORD(v98);
            v99.i32[1] = v97;
            v100 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v99, v83);
            v101 = vand_s8((int8x8_t)vsub_s32(v99, (int32x2_t)vshr_n_u32(vsra_n_u32(v100, v100, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v102.i64[0] = v101.u32[0];
            v102.i64[1] = v101.u32[1];
            v103 = (int8x16_t)vshlq_u64(v102, v84);
            v98 = vorrq_s8(v103, (int8x16_t)vdupq_laneq_s64((int64x2_t)v103, 1)).u64[0] | ((v96
                                                                                          - ((v96 * v82
                                                                                            + 0x8000
                                                                                            + ((v96 * v82 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v95 - (((_DWORD)v95 * v82 + 0x8000 + ((v95 * v82 + 0x8000) >> 16)) >> 16));
          }
          v104 = bswap32(v98);
          *v10 = HIWORD(v104);
          v10[1] = v104;
          v10[2] = bswap32(HIDWORD(v98)) >> 16;
          v10[3] = __rev16(HIWORD(v98));
          v10 += 4;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      v105 = v139;
      v106 = v85;
      if (a5 >= 1)
      {
        do
        {
          v107 = *v105;
          v105 += 2;
          v108 = (unsigned __int16 *)&v88[v107];
          v109 = (unsigned __int16 *)*((_QWORD *)v142 + 4);
          if (v80 < (unsigned __int16 *)&v88[v107])
            v108 = v80;
          if (v108 >= v109)
            v109 = v108;
          v110 = bswap32(v109[3]) >> 16;
          v111 = bswap32(*v109) >> 16;
          v112 = bswap32(v109[1]) >> 16;
          v113 = bswap32(v109[2]) >> 16;
          v114 = (v112 << 16) | (unint64_t)(v110 << 48) | (v113 << 32) | v81 | v111;
          if (v7 != 0xFFFF)
          {
            v115.i32[0] = HIWORD(v114);
            v115.i32[1] = v113;
            v116 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v115, v83);
            v117 = vand_s8((int8x8_t)vsub_s32(v115, (int32x2_t)vshr_n_u32(vsra_n_u32(v116, v116, 0x10uLL), 0x10uLL)), (int8x8_t)0xFFFF0000FFFFLL);
            v118.i64[0] = v117.u32[0];
            v118.i64[1] = v117.u32[1];
            v119 = (int8x16_t)vshlq_u64(v118, v84);
            v114 = vorrq_s8(v119, (int8x16_t)vdupq_laneq_s64((int64x2_t)v119, 1)).u64[0] | ((v112
                                                                                           - ((v112 * v82
                                                                                             + 0x8000
                                                                                             + ((v112 * v82 + 0x8000) >> 16)) >> 16)) << 16) | (unsigned __int16)(v111 - (((_DWORD)v111 * v82 + 0x8000 + ((v111 * v82 + 0x8000) >> 16)) >> 16));
          }
          v120 = HIWORD(v114);
          if (HIWORD(v114))
          {
            if ((_DWORD)v120 == 0xFFFF)
            {
              v121 = bswap32(v114);
              *v10 = HIWORD(v121);
              v10[1] = v121;
              v10[2] = bswap32(HIDWORD(v114)) >> 16;
              v10[3] = -1;
            }
            else
            {
              result = RGBA64_DplusDM(v10, v114, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v120 ^ 0xFFFF);
              v84 = (uint64x2_t)xmmword_185004F60;
              v7 = v140;
            }
          }
          v10 += 4;
          --v106;
        }
        while (v106);
      }
    }
    v12 = v132;
    v10 += 4 * v133;
    LOBYTE(v13) = v131;
    v14 = v86 + v130;
    --a6;
  }
  while (a6);
  return result;
}

_WORD *RGBA64_image_mark_rgba64(_WORD *result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  char *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t *v123;
  _WORD *v124;

  v7 = *((unsigned __int16 *)a2 + 4);
  v115 = *a2;
  v8 = (char *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 5))
    v9 = 0;
  else
    v9 = 0xFFFFLL;
  v10 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v114 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v111 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v111 * a4;
  v15 = &v8[(*((_DWORD *)result + 65) - 1) * *((_DWORD *)result + 6)
          + (((*((_DWORD *)result + 2) >> 22) * *((_DWORD *)result + 64)) >> 3)];
  v124 = result;
  v121 = *((unsigned __int16 *)a2 + 4);
  v112 = v13;
  v113 = v12;
  if (*((_QWORD *)result + 22))
  {
    v16 = a3;
    v107 = ~(-1 << v13);
    v108 = *((_QWORD *)a2 + 13);
    v109 = *((_QWORD *)a2 + 11);
    v106 = v13 - 4;
    v17 = v15 - 8;
    v18 = v9 << 48;
    v19 = v7 ^ 0xFFFFu;
    v104 = a5;
    v105 = -v12;
    v103 = v11 + 16 * v16 + 8;
    while (1)
    {
      if (((v108 - v14) | (v14 - v109)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v14 & (unint64_t)v107) >> v106) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v105 : v12;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *((_QWORD *)v124 + 4) + (v14 >> v13) * v12;
      v24 = 0x8000;
      v117 = a6;
      v116 = v14;
      if (v115 != 1)
        break;
      if (a5 >= 1)
      {
        v25 = (uint64_t *)v103;
        v26 = v104;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v17 >= v23 + v27)
            v30 = (char *)(v23 + v27);
          else
            v30 = v17;
          if (v30 < v8)
            v30 = v8;
          v31 = *(_QWORD *)v30;
          v32 = *v25 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if (v22)
          {
            v44 = (char *)(v29 + v21);
            if ((unint64_t)v17 < v29 + v21)
              v44 = v17;
            if (v44 < v8)
              v44 = v8;
            v45 = BLEND16_19498[v22];
            v42 = v31 - ((v45 & v31) >> v22);
            v43 = (v45 & *(_QWORD *)v44) >> v22;
            goto LABEL_43;
          }
LABEL_44:
          v46 = v31 | v18;
          if (v7 != 0xFFFF)
          {
            v47 = HIWORD(v46);
            result = (_WORD *)((_DWORD)v47 * (_DWORD)v19 + 0x8000 + ((v47 * v19 + 0x8000) >> 16));
            v46 = ((unint64_t)(unsigned __int16)(WORD2(v31)
                                                      - ((WORD2(v31) * (_DWORD)v19
                                                        + 0x8000
                                                        + ((WORD2(v31) * v19 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v47 - (result >> 16)) << 48) | ((WORD1(v31) - ((WORD1(v31) * (_DWORD)v19 + 0x8000 + ((WORD1(v31) * v19 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v31 - (((unsigned __int16)v31 * (_DWORD)v19 + 0x8000 + (((unsigned __int16)v31 * v19 + 0x8000) >> 16)) >> 16));
          }
          v25 += 2;
          v48 = HIDWORD(v46);
          v49 = HIWORD(v46);
          v50 = bswap32(v46);
          *v10 = HIWORD(v50);
          v10[1] = v50;
          v10[2] = bswap32(v48) >> 16;
          v10[3] = __rev16(v49);
          v10 += 4;
          if (!--v26)
            goto LABEL_86;
        }
        v33 = v28 >> 4;
        v34 = (char *)(v29 + (v28 >> 4));
        if (v17 < v34)
          v34 = v17;
        if (v34 < v8)
          v34 = v8;
        v35 = *(_QWORD *)v34;
        if (v22)
        {
          v36 = (char *)(v29 + v21);
          if (v17 >= v36)
            v37 = v36;
          else
            v37 = v17;
          if (v37 < v8)
            v37 = v8;
          v38 = *(_QWORD *)v37;
          v39 = &v36[v33];
          if (v17 < v39)
            v39 = v17;
          if (v39 < v8)
            v39 = v8;
          v40 = BLEND16_19498[v22];
          v31 = v31 - ((v40 & v31) >> v22) + ((v40 & v38) >> v22);
          v35 = v35 - ((v40 & v35) >> v22) + ((v40 & *(_QWORD *)v39) >> v22);
        }
        v41 = BLEND16_19498[v32];
        v42 = v31 - ((v41 & v31) >> v32);
        v43 = (v41 & v35) >> v32;
LABEL_43:
        v31 = v42 + v43;
        goto LABEL_44;
      }
LABEL_86:
      v12 = v113;
      v10 += 4 * v114;
      LOBYTE(v13) = v112;
      v14 = v116 + v111;
      a6 = v117 - 1;
      if (v117 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_86;
    v122 = v22;
    v51 = (uint64_t *)v103;
    v52 = v104;
    v119 = *((_QWORD *)v124 + 4) + (v14 >> v13) * v12;
    v118 = v22;
    while (1)
    {
      v53 = *(v51 - 1);
      v54 = *v51;
      v55 = v23 + v53;
      if ((unint64_t)v17 >= v23 + v53)
        v56 = (char *)(v23 + v53);
      else
        v56 = v17;
      if (v56 < v8)
        v56 = v8;
      v57 = *(_QWORD *)v56;
      v58 = *v51 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if (v22)
      {
        v70 = (char *)(v55 + v21);
        if ((unint64_t)v17 < v55 + v21)
          v70 = v17;
        if (v70 < v8)
          v70 = v8;
        v71 = BLEND16_19498[v122];
        v68 = v57 - ((v71 & v57) >> v122);
        v69 = (v71 & *(_QWORD *)v70) >> v122;
        goto LABEL_78;
      }
LABEL_79:
      v72 = v57 | v18;
      if (v7 != 0xFFFF)
        v72 = ((unint64_t)(unsigned __int16)(WORD2(v57)
                                                  - (((_DWORD)v24
                                                    + WORD2(v57) * (_DWORD)v19
                                                    + ((v24 + WORD2(v57) * (_DWORD)v19) >> 16)) >> 16)) << 32) | ((HIWORD(v72) - ((v24 + HIWORD(v72) * v19 + ((v24 + HIWORD(v72) * v19) >> 16)) >> 16)) << 48) | ((WORD1(v57) - (((_DWORD)v24 + WORD1(v57) * (_DWORD)v19 + ((v24 + WORD1(v57) * (_DWORD)v19) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v57 - (((_DWORD)v24 + (unsigned __int16)v57 * (_DWORD)v19 + ((v24 + (unsigned __int16)v57 * (_DWORD)v19) >> 16)) >> 16));
      v73 = HIWORD(v72);
      if (HIWORD(v72))
      {
        if ((_DWORD)v73 == 0xFFFF)
        {
          v74 = bswap32(v72);
          *v10 = HIWORD(v74);
          v10[1] = v74;
          v10[2] = bswap32(HIDWORD(v72)) >> 16;
          v10[3] = -1;
        }
        else
        {
          v75 = v18;
          v76 = v24;
          v77 = v19;
          result = RGBA64_DplusDM(v10, v72, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v73 ^ 0xFFFF);
          v19 = v77;
          v24 = v76;
          v18 = v75;
          v22 = v118;
          v23 = v119;
          v7 = v121;
        }
      }
      v51 += 2;
      v10 += 4;
      if (!--v52)
        goto LABEL_86;
    }
    v59 = v54 >> 4;
    v60 = (char *)(v55 + (v54 >> 4));
    if (v17 < v60)
      v60 = v17;
    if (v60 < v8)
      v60 = v8;
    v61 = *(_QWORD *)v60;
    if (v22)
    {
      v62 = (char *)(v55 + v21);
      if (v17 >= v62)
        v63 = v62;
      else
        v63 = v17;
      if (v63 < v8)
        v63 = v8;
      v64 = *(_QWORD *)v63;
      v65 = &v62[v59];
      if (v17 < v65)
        v65 = v17;
      if (v65 < v8)
        v65 = v8;
      v66 = BLEND16_19498[v122];
      v57 = v57 - ((v66 & v57) >> v122) + ((v66 & v64) >> v122);
      v61 = v61 - ((v66 & v61) >> v122) + ((v66 & *(_QWORD *)v65) >> v122);
    }
    v67 = BLEND16_19498[v58];
    v68 = v57 - ((v67 & v57) >> v58);
    v69 = (v67 & v61) >> v58;
LABEL_78:
    v57 = v68 + v69;
    goto LABEL_79;
  }
  v123 = (uint64_t *)(v11 + 16 * a3);
  v78 = v15 - 8;
  v79 = v9 << 48;
  v80 = v7 ^ 0xFFFF;
  v120 = a5;
  do
  {
    v82 = (char *)*((_QWORD *)v124 + 4);
    v83 = &v82[(v14 >> v13) * v12];
    v84 = v14;
    if (v115 == 1)
    {
      if (a5 >= 1)
      {
        v85 = v123;
        v86 = v120;
        do
        {
          v87 = *v85;
          v85 += 2;
          v88 = &v83[v87];
          if (v78 < &v83[v87])
            v88 = v78;
          if (v88 < v82)
            v88 = v82;
          v89 = *(_QWORD *)v88;
          v90 = v89 | v79;
          if (v7 != 0xFFFF)
          {
            v91 = HIWORD(v90);
            result = (_WORD *)(WORD1(v89) * v80 + 0x8000 + ((WORD1(v89) * v80 + 0x8000) >> 16));
            v90 = ((unint64_t)(unsigned __int16)(WORD2(v89)
                                                      - ((WORD2(v89) * v80
                                                        + 0x8000
                                                        + ((WORD2(v89) * v80 + 0x8000) >> 16)) >> 16)) << 32) | ((unint64_t)(v91 - (((_DWORD)v91 * v80 + 0x8000 + ((v91 * v80 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v89) - (result >> 16)) << 16) | (unint64_t)(unsigned __int16)(v89 - (((unsigned __int16)v89 * v80 + 0x8000 + (((unsigned __int16)v89 * v80 + 0x8000) >> 16)) >> 16));
          }
          v92 = HIDWORD(v90);
          v93 = HIWORD(v90);
          v94 = bswap32(v90);
          *v10 = HIWORD(v94);
          v10[1] = v94;
          v10[2] = bswap32(v92) >> 16;
          v10[3] = __rev16(v93);
          v10 += 4;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      v95 = v123;
      v96 = v120;
      if (a5 >= 1)
      {
        do
        {
          v97 = *v95;
          v95 += 2;
          v98 = &v83[v97];
          if (v78 < &v83[v97])
            v98 = v78;
          if ((unint64_t)v98 < *((_QWORD *)v124 + 4))
            v98 = (char *)*((_QWORD *)v124 + 4);
          v99 = *(_QWORD *)v98;
          v100 = v99 | v79;
          if (v7 != 0xFFFF)
            v100 = ((unint64_t)(unsigned __int16)(WORD2(v99)
                                                       - ((WORD2(v99) * v80
                                                         + 0x8000
                                                         + ((WORD2(v99) * v80 + 0x8000) >> 16)) >> 16)) << 32) | ((HIWORD(v100) - ((HIWORD(v100) * v80 + 0x8000 + ((HIWORD(v100) * v80 + 0x8000) >> 16)) >> 16)) << 48) | ((WORD1(v99) - ((WORD1(v99) * v80 + 0x8000 + ((WORD1(v99) * v80 + 0x8000) >> 16)) >> 16)) << 16) | (unint64_t)(unsigned __int16)(v99 - (((unsigned __int16)v99 * v80 + 0x8000 + (((unsigned __int16)v99 * v80 + 0x8000) >> 16)) >> 16));
          v101 = HIWORD(v100);
          if (HIWORD(v100))
          {
            if ((_DWORD)v101 == 0xFFFF)
            {
              v102 = bswap32(v100);
              *v10 = HIWORD(v102);
              v10[1] = v102;
              v10[2] = bswap32(HIDWORD(v100)) >> 16;
              v10[3] = -1;
            }
            else
            {
              result = RGBA64_DplusDM(v10, v100, ((unint64_t)(bswap32(v10[2]) >> 16) << 32) | ((unint64_t)(bswap32(v10[3]) >> 16) << 48) | bswap32(v10[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v10) >> 16), v101 ^ 0xFFFF);
              v7 = v121;
            }
          }
          v10 += 4;
          --v96;
        }
        while (v96);
      }
    }
    v12 = v113;
    v10 += 4 * v114;
    LOBYTE(v13) = v112;
    v14 = v84 + v111;
    --a6;
  }
  while (a6);
  return result;
}

_WORD *RGBA64_DplusDAM(_WORD *result, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  *result = bswap32(a2+ (((((unsigned __int16)a3 * (unint64_t)a5 + 0x8000) >> 16)+ (unsigned __int16)a3 * a5+ 0x8000) >> 16)) >> 16;
  result[1] = bswap32(((((WORD1(a3) * (unint64_t)a5 + 0x8000) >> 16) + WORD1(a3) * a5 + 0x8000) >> 16)+ WORD1(a2)) >> 16;
  result[2] = bswap32(HIDWORD(a2)+ ((((WORD2(a3) * (unint64_t)a5 + 0x8000) >> 16) + WORD2(a3) * a5 + 0x8000) >> 16)) >> 16;
  result[3] = bswap32(HIWORD(a2) + ((((a5 * (unint64_t)a4 + 0x8000) >> 16) + a5 * a4 + 0x8000) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DAM(_WORD *result, uint64_t a2, int a3, int a4)
{
  *result = bswap32(a2- (((unsigned __int16)a2 * (a4 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)a2 * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[1] = bswap32(WORD1(a2) - ((WORD1(a2) * (a4 ^ 0xFFFF) + 0x8000 + ((WORD1(a2) * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[2] = bswap32(HIDWORD(a2)- ((WORD2(a2) * (a4 ^ 0xFFFF) + 0x8000 + ((WORD2(a2) * (a4 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) >> 16;
  result[3] = bswap32(a3 - (((a4 ^ 0xFFFF) * a3 + 0x8000 + (((a4 ^ 0xFFFFu) * a3 + 0x8000) >> 16)) >> 16)) >> 16;
  return result;
}

_WORD *RGBA64_DpluslDA(_WORD *result, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (unsigned __int16)a3 + (unint64_t)(unsigned __int16)a2;
  v5 = WORD1(a3) + (unint64_t)WORD1(a2);
  v6 = WORD2(a3) + (unint64_t)WORD2(a2);
  v7 = HIWORD(a2) + a4;
  if (v4 >= 0xFFFF)
    LODWORD(v4) = 0xFFFF;
  if (v5 >= 0xFFFF)
    LODWORD(v5) = 0xFFFF;
  if (v6 >= 0xFFFF)
    LODWORD(v6) = 0xFFFF;
  if (v7 >= 0xFFFF)
    LODWORD(v7) = 0xFFFF;
  *result = bswap32(v4) >> 16;
  result[1] = bswap32(v5) >> 16;
  result[2] = bswap32(v6) >> 16;
  result[3] = bswap32(v7) >> 16;
  return result;
}

unint64_t RGBA64_mark_constmask(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t result;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  uint32x2_t v30;
  uint32x2_t v31;
  uint32x2_t v32;
  uint32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x2_t v40;
  int8x16_t v41;
  int8x8_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  uint32x4_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  int v186;
  unsigned int v187;
  BOOL v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  int32x4_t v210;
  int v211;
  int v212;
  unsigned int v213;
  int32x4_t v214;
  int32x4_t v215;
  uint32x4_t v216;
  int32x4_t v217;
  unsigned int v218;
  int32x4_t v219;
  int32x4_t v220;
  uint32x4_t v221;
  int32x4_t v222;
  int v223;
  int v224;
  unsigned int v225;
  __int16 v226;
  __int16 v227;
  int32x4_t v228;
  uint32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  unsigned int v232;
  __int16 v233;
  __int16 v234;
  int32x4_t v235;
  uint32x4_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned __int16 v240;
  unsigned int v241;
  unsigned __int16 v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  BOOL v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  _WORD *v254;
  unint64_t v255;
  unint64_t v256;
  unsigned int v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;

  v268 = *(_DWORD *)(a1 + 4);
  v271 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  v260 = *(int *)(a1 + 28);
  v262 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(unsigned __int16 **)(a1 + 88);
  v6 = bswap32(v5[3]) >> 16;
  v7 = ((unint64_t)(bswap32(v5[2]) >> 16) << 32) | (v6 << 48);
  v8 = (__PAIR64__(bswap32(v5[1]) >> 16, bswap32(*v5)) >> 16);
  v9 = v7 | v8;
  pthread_mutex_lock(&RGBA64_cacheColorLock);
  v10 = (_QWORD *)RGBA64_cacheColor;
  if (!RGBA64_cacheColor || *(_QWORD *)(RGBA64_cacheColor + 16) != v9)
  {
    v13 = 0;
    while (1)
    {
      if (!v10)
        goto LABEL_9;
      v14 = (char *)v10;
      v15 = v13;
      if (v10[2] == v9)
        break;
      v10 = (_QWORD *)*v10;
      v13 = v14;
      if (!*(_QWORD *)v14)
      {
        if (RGBA64_cacheColorCount > 6)
        {
          *(_QWORD *)v15 = 0;
        }
        else
        {
LABEL_9:
          v16 = (char *)RGBA64_cacheColorBase;
          if (RGBA64_cacheColorBase)
          {
            v17 = RGBA64_cacheColorCount;
          }
          else
          {
            v16 = (char *)malloc_type_calloc(1uLL, 0x38A8uLL, 0x10200402493A768uLL);
            v17 = 0;
            RGBA64_cacheColorBase = (uint64_t)v16;
          }
          v14 = &v16[24 * v17];
          *((_QWORD *)v14 + 1) = &v16[2048 * (unint64_t)v17 + 168];
          RGBA64_cacheColorCount = v17 + 1;
        }
        v18 = 0;
        *(_QWORD *)v14 = RGBA64_cacheColor;
        RGBA64_cacheColor = (uint64_t)v14;
        *((_QWORD *)v14 + 2) = v9;
        v20 = *((_QWORD *)v14 + 1);
        v12 = v14 + 8;
        v19 = v20;
        v21 = vdup_n_s32((unsigned __int16)v8);
        v22 = vdup_n_s32(WORD1(v8));
        v23 = vdup_n_s32(WORD2(v7));
        v24 = vdup_n_s32(v6);
        v25 = vdup_n_s32(v8);
        v26 = (int32x2_t)0x100000000;
        v27 = vdup_n_s32(HIDWORD(v7));
        v28 = vdup_n_s32(0x101u);
        do
        {
          v29 = (int32x2_t)veor_s8((int8x8_t)vmul_s32(v26, v28), (int8x8_t)0xFFFF0000FFFFLL);
          v30 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v21);
          v31 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v22);
          v32 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v23);
          v33 = (uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v29, v24);
          v34 = (int32x2_t)vshr_n_u32(vsra_n_u32(v30, v30, 0x10uLL), 0x10uLL);
          v35 = (int32x2_t)vshr_n_u32(vsra_n_u32(v31, v31, 0x10uLL), 0x10uLL);
          v36 = (int32x2_t)vshr_n_u32(vsra_n_u32(v32, v32, 0x10uLL), 0x10uLL);
          v37 = vsub_s32(v24, (int32x2_t)vshr_n_u32(vsra_n_u32(v33, v33, 0x10uLL), 0x10uLL));
          v38.i64[0] = v37.u32[0];
          v38.i64[1] = v37.u32[1];
          v39 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v38, 0x30uLL), (int8x16_t)vshll_n_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v27, v36), (int8x8_t)0xFFFF0000FFFFLL), 0x20uLL));
          v40 = vshl_n_s32(vsub_s32(v22, v35), 0x10uLL);
          v38.i64[0] = v40.u32[0];
          v38.i64[1] = v40.u32[1];
          v41 = v38;
          v42 = vand_s8((int8x8_t)vsub_s32(v25, v34), (int8x8_t)0xFFFF0000FFFFLL);
          v38.i64[0] = v42.u32[0];
          v38.i64[1] = v42.u32[1];
          *(int8x16_t *)(v19 + v18) = vorrq_s8(v39, vorrq_s8(v41, v38));
          v26 = vadd_s32(v26, (int32x2_t)0x200000002);
          v18 += 16;
        }
        while (v18 != 2048);
        result = pthread_mutex_unlock(&RGBA64_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v13)
    {
      *(_QWORD *)v13 = *v10;
      *v10 = RGBA64_cacheColor;
      RGBA64_cacheColor = (uint64_t)v10;
    }
  }
  result = pthread_mutex_unlock(&RGBA64_cacheColorLock);
  v12 = v10 + 1;
LABEL_20:
  v43 = v268;
  if (!v4)
    return result;
  v44 = *v12;
  v45 = *(_QWORD *)(*v12 + 2040);
  v46 = HIWORD(v45);
  v47 = (unsigned __int16 *)(v262 + 8 * (*(int *)(a1 + 12) + (v260 >> 3) * *(int *)(a1 + 16)));
  v48 = *(int *)(a1 + 124);
  v49 = v4 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v48;
  v50 = v48 - v268;
  v51 = (v260 >> 3) - v268;
  switch(a2)
  {
    case 0:
      do
      {
        v52 = v268;
        do
        {
          v53 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            if (v53 == 255)
            {
              *(_QWORD *)v47 = 0;
            }
            else
            {
              v54 = bswap32(v47[1] | (*v47 << 16));
              v55.i32[0] = (unsigned __int16)v54;
              v55.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v54), 0x10uLL).i32[1];
              v55.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v56.i64[0] = 0x800000008000;
              v56.i64[1] = 0x800000008000;
              v57 = (uint32x4_t)vmlaq_s32(v56, v55, vdupq_n_s32((v53 ^ 0xFF | ((v53 ^ 0xFF) << 8)) ^ 0xFFFFu));
              v55.i32[0] = v54;
              *(int8x8_t *)v47 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v55, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL))));
            }
          }
          ++v49;
          v47 += 4;
          --v52;
        }
        while (v52);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 1:
      v177 = -1;
      v178 = v49 & 3;
      if ((v49 & 3) != 0)
      {
        v43 = v178 + v268;
        v177 = -1 << (8 * v178);
        v179 = v49 & 3;
        v49 &= 0xFFFFFFFFFFFFFFFCLL;
        v47 -= 4 * v179;
      }
      if ((((_BYTE)v43 + (_BYTE)v49) & 3) != 0)
      {
        v180 = 4 - (((_BYTE)v43 + (_BYTE)v49) & 3);
        v178 += v180;
        v181 = 0xFFFFFFFF >> (8 * v180);
        if (v43 >= 4)
          v182 = v181;
        else
          v182 = 0;
        v269 = v182;
        if (v43 >= 4)
          v181 = -1;
        v177 &= v181;
      }
      else
      {
        v269 = 0;
      }
      v263 = v50 - v178;
      v261 = v43 >> 2;
      v237 = HIDWORD(v45);
      v238 = bswap32(v45);
      v239 = HIWORD(v238);
      v240 = v238;
      v241 = bswap32(v237) >> 16;
      v242 = __rev16(v46);
      v259 = v51 - v178;
      v266 = v177;
      do
      {
        v243 = *(_DWORD *)v49 & v177;
        v244 = v261;
        v245 = v269;
        if (!v243)
          goto LABEL_327;
LABEL_309:
        if (v243 == -1)
        {
          *v47 = v239;
          v47[1] = v240;
          v47[2] = v241;
          v47[3] = v242;
          v47[4] = v239;
          v47[5] = v240;
          v47[6] = v241;
          v47[7] = v242;
          v47[8] = v239;
          v47[9] = v240;
          v47[10] = v241;
          v47[11] = v242;
LABEL_324:
          v47[12] = v239;
          v47[13] = v240;
          v47[14] = v241;
          v47[15] = v242;
          goto LABEL_327;
        }
        while (1)
        {
          if ((_BYTE)v243)
          {
            if (v243 == 255)
            {
              *v47 = v239;
              v47[1] = v240;
              v47[2] = v241;
              v47[3] = v242;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v47, *(_QWORD *)(v44 + 8 * v243), ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (v243 | (v243 << 8)) ^ 0xFFFFu);
            }
          }
          if (BYTE1(v243))
          {
            if (BYTE1(v243) == 255)
            {
              v47[4] = v239;
              v47[5] = v240;
              v47[6] = v241;
              v47[7] = v242;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v47 + 4, *(_QWORD *)(v44 + 8 * BYTE1(v243)), ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), (BYTE1(v243) | (BYTE1(v243) << 8)) ^ 0xFFFFu);
            }
          }
          if (BYTE2(v243))
          {
            if (BYTE2(v243) == 255)
            {
              v47[8] = v239;
              v47[9] = v240;
              v47[10] = v241;
              v47[11] = v242;
            }
            else
            {
              result = (unint64_t)RGBA64_DplusDM(v47 + 8, *(_QWORD *)(v44 + 8 * BYTE2(v243)), ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), (BYTE2(v243) | (BYTE2(v243) << 8)) ^ 0xFFFFu);
            }
          }
          v246 = HIBYTE(v243);
          if (HIBYTE(v243) == 255)
            goto LABEL_324;
          if (v246)
            result = (unint64_t)RGBA64_DplusDM(v47 + 12, *(_QWORD *)(v44 + 8 * v246), ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16), (__PAIR64__(v246, v243) >> 24) ^ 0xFFFF);
LABEL_327:
          while (1)
          {
            v247 = v244;
            v47 += 16;
            --v244;
            v49 += 4;
            if (v247 < 2)
              break;
            v243 = *(_DWORD *)v49;
            if (*(_DWORD *)v49)
              goto LABEL_309;
          }
          if (!v245)
            break;
          v245 = 0;
          v243 = *(_DWORD *)v49 & v269;
        }
        v49 += v263;
        v47 += 4 * v259;
        v248 = v271-- == 1;
        v177 = v266;
      }
      while (!v248);
      return result;
    case 2:
      v183 = 0xFFFFFFFFLL;
      v184 = v49 & 3;
      if ((v49 & 3) != 0)
      {
        v43 = v184 + v268;
        v183 = (-1 << (8 * v184));
        v185 = v49 & 3;
        v49 &= 0xFFFFFFFFFFFFFFFCLL;
        v47 -= 4 * v185;
      }
      if ((((_BYTE)v43 + (_BYTE)v49) & 3) != 0)
      {
        v186 = 4 - (((_BYTE)v43 + (_BYTE)v49) & 3);
        v184 += v186;
        v187 = 0xFFFFFFFF >> (8 * v186);
        v188 = v43 < 4;
        v189 = v43;
        if (v43 >= 4)
          v190 = v187;
        else
          v190 = 0;
        if (!v188)
          v187 = -1;
        v183 = v187 & v183;
      }
      else
      {
        v189 = v43;
        v190 = 0;
      }
      v270 = v50 - v184;
      v267 = v189 >> 2;
      v249 = (unsigned __int16)~HIWORD(v45);
      v264 = v51 - v184;
      while (2)
      {
        v250 = v183;
        v251 = *(_DWORD *)v49 & v183;
        v252 = v267;
        v253 = v190;
        if (!v251)
          goto LABEL_349;
LABEL_338:
        if (v251 == -1)
        {
          RGBA64_DplusDM(v47, v45, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v249);
          RGBA64_DplusDM(v47 + 4, v45, ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), v249);
          RGBA64_DplusDM(v47 + 8, v45, ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), v249);
          v254 = v47 + 12;
          v255 = ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16);
          v256 = v45;
          v257 = (unsigned __int16)~HIWORD(v45);
LABEL_348:
          result = (unint64_t)RGBA64_DplusDM(v254, v256, v255, v257);
          goto LABEL_349;
        }
        while (1)
        {
          if ((_BYTE)v251)
            result = (unint64_t)RGBA64_DplusDM(v47, *(_QWORD *)(v44 + 8 * v251), ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(*(_QWORD *)(v44 + 8 * v251)) ^ 0xFFFF);
          if ((v251 & 0xFF00) != 0)
            result = (unint64_t)RGBA64_DplusDM(v47 + 4, *(_QWORD *)(v44 + 8 * BYTE1(v251)), ((unint64_t)(bswap32(v47[6]) >> 16) << 32) | ((unint64_t)(bswap32(v47[7]) >> 16) << 48) | bswap32(v47[5]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[4]) >> 16), HIWORD(*(_QWORD *)(v44 + 8 * BYTE1(v251))) ^ 0xFFFF);
          if ((v251 & 0xFF0000) != 0)
            result = (unint64_t)RGBA64_DplusDM(v47 + 8, *(_QWORD *)(v44 + 8 * BYTE2(v251)), ((unint64_t)(bswap32(v47[10]) >> 16) << 32) | ((unint64_t)(bswap32(v47[11]) >> 16) << 48) | bswap32(v47[9]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[8]) >> 16), HIWORD(*(_QWORD *)(v44 + 8 * BYTE2(v251))) ^ 0xFFFF);
          if (HIBYTE(v251))
          {
            v256 = *(_QWORD *)(v44 + 8 * HIBYTE(v251));
            v254 = v47 + 12;
            v255 = ((unint64_t)(bswap32(v47[14]) >> 16) << 32) | ((unint64_t)(bswap32(v47[15]) >> 16) << 48) | bswap32(v47[13]) & 0xFFFF0000 | (unint64_t)(bswap32(v47[12]) >> 16);
            v257 = HIWORD(v256) ^ 0xFFFF;
            goto LABEL_348;
          }
LABEL_349:
          while (1)
          {
            v258 = v252;
            v47 += 16;
            --v252;
            v49 += 4;
            if (v258 < 2)
              break;
            v251 = *(_DWORD *)v49;
            if (*(_DWORD *)v49)
              goto LABEL_338;
          }
          if (!v253)
            break;
          v253 = 0;
          v251 = *(_DWORD *)v49 & v190;
        }
        v49 += v270;
        v47 += 4 * v264;
        v248 = v271-- == 1;
        v183 = v250;
        if (!v248)
          continue;
        return result;
      }
    case 3:
      do
      {
        v191 = v268;
        do
        {
          v192 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            if (v192 == 255)
            {
              v193 = *(_QWORD *)(v44 + 8 * *((unsigned __int8 *)v47 + 6));
              v194 = HIDWORD(v193);
              v195 = HIWORD(v193);
              LODWORD(v193) = bswap32(v193);
              *v47 = WORD1(v193);
              v47[1] = v193;
              v47[2] = bswap32(v194) >> 16;
              v47[3] = __rev16(v195);
            }
            else
            {
              v196 = bswap32(v47[3]) >> 16;
              result = (unint64_t)RGBA64_DplusDM(v47, *(_QWORD *)(v44+ 8* (((_DWORD)v196 * (v192 | (v192 << 8))+ 0x8000+ ((v196 * (v192 | (v192 << 8)) + 0x8000) >> 16)) >> 24)), (v196 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (v192 | (v192 << 8)) ^ 0xFFFFu);
            }
          }
          ++v49;
          v47 += 4;
          --v191;
        }
        while (v191);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 4:
      do
      {
        v197 = v268;
        do
        {
          v198 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            if (v198 == 255)
            {
              v199 = *(_QWORD *)(v44 + 8 * ~*((_BYTE *)v47 + 6));
              v200 = HIDWORD(v199);
              v201 = HIWORD(v199);
              LODWORD(v199) = bswap32(v199);
              *v47 = WORD1(v199);
              v47[1] = v199;
              v47[2] = bswap32(v200) >> 16;
              v47[3] = __rev16(v201);
            }
            else
            {
              v202 = v198 | (v198 << 8);
              v203 = bswap32(v47[3]) >> 16;
              result = (unint64_t)RGBA64_DplusDM(v47, *(_QWORD *)(v44+ 8* (((v203 ^ 0xFFFF) * v202+ 0x8000+ (((v203 ^ 0xFFFF) * v202 + 0x8000) >> 16)) >> 24)), (v203 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v202 ^ 0xFFFFu);
            }
          }
          ++v49;
          v47 += 4;
          --v197;
        }
        while (v197);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 5:
      do
      {
        v58 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v59 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v60 = bswap32(v47[3]) >> 16;
            result = (unint64_t)RGBA64_DMplusDM(v47, v59, v60, (v60 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(v59) ^ 0xFFFF);
          }
          ++v49;
          v47 += 4;
          --v58;
        }
        while (v58);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 6:
      do
      {
        v204 = v268;
        do
        {
          v205 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            v206 = bswap32(v47[3]);
            if (HIWORD(v206) != 0xFFFF)
            {
              if ((unsigned __int16)~HIWORD(v206) == 0xFFFF)
              {
                v207 = *(_QWORD *)(v44 + 8 * v205);
                v208 = HIDWORD(v207);
                v209 = HIWORD(v207);
                LODWORD(v207) = bswap32(v207);
                *v47 = WORD1(v207);
                v47[1] = v207;
                v47[2] = bswap32(v208) >> 16;
                v47[3] = __rev16(v209);
              }
              else
              {
                result = (unint64_t)RGBA64_DplusDM(v47, ((unint64_t)HIWORD(v206) << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), *(_QWORD *)(v44 + 8 * v205), (unsigned __int16)~HIWORD(v206));
              }
            }
          }
          ++v49;
          v47 += 4;
          --v204;
        }
        while (v204);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 7:
      v210 = vdupq_n_s32(v46 ^ 0xFFFF);
      do
      {
        v211 = v268;
        do
        {
          v212 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            if (v212 == 255)
            {
              v213 = bswap32(v47[1] | (*v47 << 16));
              v214.i32[0] = (unsigned __int16)v213;
              v214.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v213), 0x10uLL).i32[1];
              v214.i32[2] = bswap32(v47[2]) >> 16;
              v214.i32[3] = bswap32(v47[3]) >> 16;
              v215.i64[0] = 0x800000008000;
              v215.i64[1] = 0x800000008000;
              v216 = (uint32x4_t)vmlaq_s32(v215, v214, v210);
              v214.i32[0] = v213;
              v217 = vsubq_s32(v214, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v216, v216, 0x10uLL), 0x10uLL));
            }
            else
            {
              v218 = bswap32(v47[1] | (*v47 << 16));
              v219.i32[0] = (unsigned __int16)v218;
              v219.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v218), 0x10uLL).i32[1];
              v219.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v220.i64[0] = 0x800000008000;
              v220.i64[1] = 0x800000008000;
              v221 = (uint32x4_t)vmlaq_s32(v220, v219, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16((v212 | (v212 << 8))- (((v212 | (v212 << 8)) * (_DWORD)v46+ 0x8000+ (((v212 | (v212 << 8)) * v46+ 0x8000) >> 16)) >> 16))));
              v219.i32[0] = v218;
              v217 = vsubq_s32(v219, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v221, v221, 0x10uLL), 0x10uLL));
            }
            *(int8x8_t *)v47 = vrev16_s8((int8x8_t)vmovn_s32(v217));
          }
          ++v49;
          v47 += 4;
          --v211;
        }
        while (v211);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 8:
      v222 = vdupq_n_s32(v46);
      do
      {
        v223 = v268;
        do
        {
          v224 = *(unsigned __int8 *)v49;
          if (*(_BYTE *)v49)
          {
            if (v224 == 255)
            {
              v225 = bswap32(v47[1] | (*v47 << 16));
              v226 = v225;
              v227 = 0;
              v231.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v225), 0x10uLL).i32[1];
              v231.i32[2] = bswap32(v47[2]) >> 16;
              v231.i32[3] = bswap32(v47[3]) >> 16;
              v228.i64[0] = 0x800000008000;
              v228.i64[1] = 0x800000008000;
              v229 = (uint32x4_t)vmlaq_s32(v228, v231, v222);
              v230 = (int32x4_t)vshrq_n_u32(vsraq_n_u32(v229, v229, 0x10uLL), 0x10uLL);
              v231.i32[0] = v225;
            }
            else
            {
              v232 = bswap32(v47[1] | (*v47 << 16));
              v233 = v232;
              v234 = 0;
              v231.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v232), 0x10uLL).i32[1];
              v231.i64[1] = __PAIR64__(bswap32(v47[3]) >> 16, bswap32(v47[2]) >> 16);
              v235.i64[0] = 0x800000008000;
              v235.i64[1] = 0x800000008000;
              v236 = (uint32x4_t)vmlaq_s32(v235, v231, vdupq_n_s32((257 * (_DWORD)v46 * v224+ 0x8000+ ((257 * v46 * v224 + 0x8000) >> 16)) >> 16));
              v230 = (int32x4_t)vshrq_n_u32(vsraq_n_u32(v236, v236, 0x10uLL), 0x10uLL);
              v231.i32[0] = v232;
            }
            *(int8x8_t *)v47 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v231, v230)));
          }
          ++v49;
          v47 += 4;
          --v223;
        }
        while (v223);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 9:
      do
      {
        v61 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v62 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v63 = bswap32(v47[3]) >> 16;
            result = (unint64_t)RGBA64_DMplusDM(v47, v62, v63 ^ 0xFFFF, (v63 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), (unsigned __int16)(HIWORD(v62)+ ~(*(unsigned __int8 *)v49 | (*(unsigned __int8 *)v49 << 8))));
          }
          ++v49;
          v47 += 4;
          --v61;
        }
        while (v61);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 10:
      do
      {
        v64 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v65 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v66 = bswap32(v47[3]) >> 16;
            result = (unint64_t)RGBA64_DMplusDM(v47, v65, v66 ^ 0xFFFF, (v66 << 48) | ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), HIWORD(v65) ^ 0xFFFF);
          }
          ++v49;
          v47 += 4;
          --v64;
        }
        while (v64);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 11:
      do
      {
        v67 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v69 = bswap32(v47[3]) >> 16;
            v70 = ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v69 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16);
            if (v3)
              v71 = v69;
            else
              v71 = -1;
            v68 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            result = (unint64_t)RGBA64_DAplusdDA(v47, v70, v71, v68, HIWORD(v68));
          }
          ++v49;
          v47 += 4;
          --v67;
        }
        while (v67);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 12:
      do
      {
        v72 = v268;
        do
        {
          if (*(_BYTE *)v49)
            result = (unint64_t)RGBA64_DpluslD(v47, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | ((unint64_t)(bswap32(v47[3]) >> 16) << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49));
          ++v49;
          v47 += 4;
          --v72;
        }
        while (v72);
        v49 += v50;
        v47 += 4 * v51;
        --v271;
      }
      while (v271);
      return result;
    case 13:
      while (1)
      {
        v73 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v74 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v75 = HIWORD(v74);
            if (HIWORD(v74))
            {
              v76 = __rev16(v47[3]);
              if (v3)
              {
                v77 = v76;
                if (!v47[3])
                {
                  v78 = bswap32(v74);
                  *v47 = HIWORD(v78);
                  v47[1] = v78;
                  v47[2] = bswap32(HIDWORD(v74)) >> 16;
LABEL_71:
                  v47[3] = __rev16(v75);
                  goto LABEL_72;
                }
              }
              else
              {
                v77 = 0xFFFF;
              }
              result = PDAmultiplyPDA_13494(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v76 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v77, v74, v75);
              v75 = HIWORD(result);
              v79 = bswap32(result);
              *v47 = HIWORD(v79);
              v47[1] = v79;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_71;
            }
          }
LABEL_72:
          ++v49;
          v47 += 4;
          --v73;
        }
        while (v73);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 14:
      while (1)
      {
        v80 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v81 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v82 = HIWORD(v81);
            if (HIWORD(v81))
            {
              v83 = __rev16(v47[3]);
              if (v3)
              {
                v84 = v83;
                if (!v47[3])
                {
                  v85 = bswap32(v81);
                  *v47 = HIWORD(v85);
                  v47[1] = v85;
                  v47[2] = bswap32(HIDWORD(v81)) >> 16;
LABEL_83:
                  v47[3] = __rev16(v82);
                  goto LABEL_84;
                }
              }
              else
              {
                v84 = 0xFFFF;
              }
              result = PDAscreenPDA_13495(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v83 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v84, v81, v82);
              v82 = HIWORD(result);
              v86 = bswap32(result);
              *v47 = HIWORD(v86);
              v47[1] = v86;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_83;
            }
          }
LABEL_84:
          ++v49;
          v47 += 4;
          --v80;
        }
        while (v80);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 15:
      while (1)
      {
        v87 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v88 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v89 = HIWORD(v88);
            if (HIWORD(v88))
            {
              v90 = __rev16(v47[3]);
              if (v3)
              {
                v91 = v90;
                if (!v47[3])
                {
                  v92 = bswap32(v88);
                  *v47 = HIWORD(v92);
                  v47[1] = v92;
                  v47[2] = bswap32(HIDWORD(v88)) >> 16;
LABEL_95:
                  v47[3] = __rev16(v89);
                  goto LABEL_96;
                }
              }
              else
              {
                v91 = 0xFFFF;
              }
              result = PDAoverlayPDA_13496(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v90 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v91, v88, v89);
              v89 = HIWORD(result);
              v93 = bswap32(result);
              *v47 = HIWORD(v93);
              v47[1] = v93;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_95;
            }
          }
LABEL_96:
          ++v49;
          v47 += 4;
          --v87;
        }
        while (v87);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 16:
      while (1)
      {
        v94 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v95 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v96 = HIWORD(v95);
            if (HIWORD(v95))
            {
              v97 = __rev16(v47[3]);
              if (v3)
              {
                v98 = v97;
                if (!v47[3])
                {
                  v99 = bswap32(v95);
                  *v47 = HIWORD(v99);
                  v47[1] = v99;
                  v47[2] = bswap32(HIDWORD(v95)) >> 16;
LABEL_107:
                  v47[3] = __rev16(v96);
                  goto LABEL_108;
                }
              }
              else
              {
                v98 = 0xFFFF;
              }
              result = PDAdarkenPDA_13498(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v97 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v98, v95, v96);
              v96 = HIWORD(result);
              v100 = bswap32(result);
              *v47 = HIWORD(v100);
              v47[1] = v100;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_107;
            }
          }
LABEL_108:
          ++v49;
          v47 += 4;
          --v94;
        }
        while (v94);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 17:
      while (1)
      {
        v101 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v102 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v103 = HIWORD(v102);
            if (HIWORD(v102))
            {
              v104 = __rev16(v47[3]);
              if (v3)
              {
                v105 = v104;
                if (!v47[3])
                {
                  v106 = bswap32(v102);
                  *v47 = HIWORD(v106);
                  v47[1] = v106;
                  v47[2] = bswap32(HIDWORD(v102)) >> 16;
LABEL_119:
                  v47[3] = __rev16(v103);
                  goto LABEL_120;
                }
              }
              else
              {
                v105 = 0xFFFF;
              }
              result = PDAlightenPDA_13497(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v104 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v105, v102, v103);
              v103 = HIWORD(result);
              v107 = bswap32(result);
              *v47 = HIWORD(v107);
              v47[1] = v107;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_119;
            }
          }
LABEL_120:
          ++v49;
          v47 += 4;
          --v101;
        }
        while (v101);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 18:
      while (1)
      {
        v108 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v109 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v110 = HIWORD(v109);
            if (HIWORD(v109))
            {
              v111 = __rev16(v47[3]);
              if (v3)
              {
                v112 = v111;
                if (!v47[3])
                {
                  v113 = bswap32(v109);
                  *v47 = HIWORD(v113);
                  v47[1] = v113;
                  v47[2] = bswap32(HIDWORD(v109)) >> 16;
LABEL_131:
                  v47[3] = __rev16(v110);
                  goto LABEL_132;
                }
              }
              else
              {
                v112 = 0xFFFF;
              }
              result = PDAcolordodgePDA_13499(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v111 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v112, v109, v110);
              v110 = HIWORD(result);
              v114 = bswap32(result);
              *v47 = HIWORD(v114);
              v47[1] = v114;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_131;
            }
          }
LABEL_132:
          ++v49;
          v47 += 4;
          --v108;
        }
        while (v108);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 19:
      while (1)
      {
        v115 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v116 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v117 = HIWORD(v116);
            if (HIWORD(v116))
            {
              v118 = __rev16(v47[3]);
              if (v3)
              {
                v119 = v118;
                if (!v47[3])
                {
                  v120 = bswap32(v116);
                  *v47 = HIWORD(v120);
                  v47[1] = v120;
                  v47[2] = bswap32(HIDWORD(v116)) >> 16;
LABEL_143:
                  v47[3] = __rev16(v117);
                  goto LABEL_144;
                }
              }
              else
              {
                v119 = 0xFFFF;
              }
              result = PDAcolorburnPDA_13500(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v118 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v119, v116, v117);
              v117 = HIWORD(result);
              v121 = bswap32(result);
              *v47 = HIWORD(v121);
              v47[1] = v121;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_143;
            }
          }
LABEL_144:
          ++v49;
          v47 += 4;
          --v115;
        }
        while (v115);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 20:
      while (1)
      {
        v122 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v123 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v124 = HIWORD(v123);
            if (HIWORD(v123))
            {
              v125 = __rev16(v47[3]);
              if (v3)
              {
                v126 = v125;
                if (!v47[3])
                {
                  v127 = bswap32(v123);
                  *v47 = HIWORD(v127);
                  v47[1] = v127;
                  v47[2] = bswap32(HIDWORD(v123)) >> 16;
LABEL_155:
                  v47[3] = __rev16(v124);
                  goto LABEL_156;
                }
              }
              else
              {
                v126 = 0xFFFF;
              }
              result = PDAsoftlightPDA_13502(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v125 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v126, v123, v124);
              v124 = HIWORD(result);
              v128 = bswap32(result);
              *v47 = HIWORD(v128);
              v47[1] = v128;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_155;
            }
          }
LABEL_156:
          ++v49;
          v47 += 4;
          --v122;
        }
        while (v122);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 21:
      while (1)
      {
        v129 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v130 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v131 = HIWORD(v130);
            if (HIWORD(v130))
            {
              v132 = __rev16(v47[3]);
              if (v3)
              {
                v133 = v132;
                if (!v47[3])
                {
                  v134 = bswap32(v130);
                  *v47 = HIWORD(v134);
                  v47[1] = v134;
                  v47[2] = bswap32(HIDWORD(v130)) >> 16;
LABEL_167:
                  v47[3] = __rev16(v131);
                  goto LABEL_168;
                }
              }
              else
              {
                v133 = 0xFFFF;
              }
              result = PDAhardlightPDA_13501(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v132 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v133, v130, v131);
              v131 = HIWORD(result);
              v135 = bswap32(result);
              *v47 = HIWORD(v135);
              v47[1] = v135;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_167;
            }
          }
LABEL_168:
          ++v49;
          v47 += 4;
          --v129;
        }
        while (v129);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 22:
      while (1)
      {
        v136 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v137 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v138 = HIWORD(v137);
            if (HIWORD(v137))
            {
              v139 = __rev16(v47[3]);
              if (v3)
              {
                v140 = v139;
                if (!v47[3])
                {
                  v141 = bswap32(v137);
                  *v47 = HIWORD(v141);
                  v47[1] = v141;
                  v47[2] = bswap32(HIDWORD(v137)) >> 16;
LABEL_179:
                  v47[3] = __rev16(v138);
                  goto LABEL_180;
                }
              }
              else
              {
                v140 = 0xFFFF;
              }
              result = PDAdifferencePDA_13503(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v139 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v140, v137, v138);
              v138 = HIWORD(result);
              v142 = bswap32(result);
              *v47 = HIWORD(v142);
              v47[1] = v142;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_179;
            }
          }
LABEL_180:
          ++v49;
          v47 += 4;
          --v136;
        }
        while (v136);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 23:
      while (1)
      {
        v143 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v144 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v145 = HIWORD(v144);
            if (HIWORD(v144))
            {
              v146 = __rev16(v47[3]);
              if (v3)
              {
                v147 = v146;
                if (!v47[3])
                {
                  v148 = bswap32(v144);
                  *v47 = HIWORD(v148);
                  v47[1] = v148;
                  v47[2] = bswap32(HIDWORD(v144)) >> 16;
LABEL_191:
                  v47[3] = __rev16(v145);
                  goto LABEL_192;
                }
              }
              else
              {
                v147 = 0xFFFF;
              }
              result = PDAexclusionPDA_13504(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v146 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v147, v144, v145);
              v145 = HIWORD(result);
              v149 = bswap32(result);
              *v47 = HIWORD(v149);
              v47[1] = v149;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_191;
            }
          }
LABEL_192:
          ++v49;
          v47 += 4;
          --v143;
        }
        while (v143);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 24:
      while (1)
      {
        v150 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v151 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v152 = HIWORD(v151);
            if (HIWORD(v151))
            {
              v153 = __rev16(v47[3]);
              if (v3)
              {
                v154 = v153;
                if (!v47[3])
                {
                  v155 = bswap32(v151);
                  *v47 = HIWORD(v155);
                  v47[1] = v155;
                  v47[2] = bswap32(HIDWORD(v151)) >> 16;
LABEL_203:
                  v47[3] = __rev16(v152);
                  goto LABEL_204;
                }
              }
              else
              {
                v154 = 0xFFFF;
              }
              result = PDAhuePDA_13505(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v153 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v154, v151, v152);
              v152 = HIWORD(result);
              v156 = bswap32(result);
              *v47 = HIWORD(v156);
              v47[1] = v156;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_203;
            }
          }
LABEL_204:
          ++v49;
          v47 += 4;
          --v150;
        }
        while (v150);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 25:
      while (1)
      {
        v157 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            v158 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v159 = HIWORD(v158);
            if (HIWORD(v158))
            {
              v160 = __rev16(v47[3]);
              if (v3)
              {
                v161 = v160;
                if (!v47[3])
                {
                  v162 = bswap32(v158);
                  *v47 = HIWORD(v162);
                  v47[1] = v162;
                  v47[2] = bswap32(HIDWORD(v158)) >> 16;
LABEL_215:
                  v47[3] = __rev16(v159);
                  goto LABEL_216;
                }
              }
              else
              {
                v161 = 0xFFFF;
              }
              result = PDAsaturationPDA_13506(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v160 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v161, v158, v159);
              v159 = HIWORD(result);
              v163 = bswap32(result);
              *v47 = HIWORD(v163);
              v47[1] = v163;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_215;
            }
          }
LABEL_216:
          ++v49;
          v47 += 4;
          --v157;
        }
        while (v157);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 26:
      while (1)
      {
        v164 = v268;
        do
        {
          if (*(_BYTE *)v49)
          {
            result = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
            v165 = HIWORD(result);
            if (HIWORD(result))
            {
              v166 = __rev16(v47[3]);
              if (v3)
              {
                v167 = v166;
                if (!v47[3])
                {
                  v168 = bswap32(result);
                  *v47 = HIWORD(v168);
                  v47[1] = v168;
                  v47[2] = bswap32(HIDWORD(result)) >> 16;
LABEL_227:
                  v47[3] = __rev16(v165);
                  goto LABEL_228;
                }
              }
              else
              {
                v167 = 0xFFFF;
              }
              result = PDAluminosityPDA_13507(result, v165, ((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v166 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v167);
              v165 = HIWORD(result);
              v169 = bswap32(result);
              *v47 = HIWORD(v169);
              v47[1] = v169;
              v47[2] = bswap32(HIDWORD(result)) >> 16;
              goto LABEL_227;
            }
          }
LABEL_228:
          ++v49;
          v47 += 4;
          --v164;
        }
        while (v164);
        v49 += v50;
        v47 += 4 * v51;
        if (!--v271)
          return result;
      }
    case 27:
      break;
    default:
      return result;
  }
LABEL_231:
  v170 = v268;
  while (1)
  {
    if (!*(_BYTE *)v49)
      goto LABEL_240;
    v171 = *(_QWORD *)(v44 + 8 * *(unsigned __int8 *)v49);
    v172 = HIWORD(v171);
    if (!HIWORD(v171))
      goto LABEL_240;
    v173 = __rev16(v47[3]);
    if (!v3)
      break;
    v174 = v173;
    if (v47[3])
      goto LABEL_238;
    v175 = bswap32(v171);
    *v47 = HIWORD(v175);
    v47[1] = v175;
    v47[2] = bswap32(HIDWORD(v171)) >> 16;
LABEL_239:
    v47[3] = __rev16(v172);
LABEL_240:
    ++v49;
    v47 += 4;
    if (!--v170)
    {
      v49 += v50;
      v47 += 4 * v51;
      if (!--v271)
        return result;
      goto LABEL_231;
    }
  }
  v174 = 0xFFFF;
LABEL_238:
  result = PDAluminosityPDA_13507(((unint64_t)(bswap32(v47[2]) >> 16) << 32) | (v173 << 48) | bswap32(v47[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v47) >> 16), v174, v171, v172);
  v172 = HIWORD(result);
  v176 = bswap32(result);
  *v47 = HIWORD(v176);
  v47[1] = v176;
  v47[2] = bswap32(HIDWORD(result)) >> 16;
  goto LABEL_239;
}

unint64_t RGBA64_mark_pixelmask(unint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int32x4_t v29;
  int32x4_t v30;
  uint32x4_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned __int16 *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int16 v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int16 v84;
  unsigned __int16 *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int16 v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int16 v106;
  unsigned __int16 *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  int32x4_t v121;
  int32x4_t v122;
  uint32x4_t v123;
  unsigned int v124;
  unint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned __int16 v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unsigned __int16 *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int16 v168;
  unsigned __int16 *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unsigned __int16 *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  unsigned int v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned __int16 *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned __int16 *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  unint64_t v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned __int16 *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  unint64_t v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned __int16 *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  unint64_t v299;
  unsigned int v300;
  int v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned __int16 *v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  unint64_t v324;
  unsigned int v325;
  int v326;
  uint64_t v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned __int16 *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int16 *v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  unsigned int v371;
  uint64_t v372;
  unint64_t v373;
  unsigned __int16 v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unsigned __int16 v380;
  unsigned __int16 *v381;
  uint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  int v391;
  unsigned int v392;
  int32x4_t v393;
  int32x4_t v394;
  uint32x4_t v395;
  int32x4_t v396;
  unsigned int v397;
  unsigned int v398;
  int32x4_t v399;
  int32x4_t v400;
  uint32x4_t v401;
  unsigned __int16 *v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unsigned __int16 *v424;
  uint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  unint64_t v435;
  unsigned int v436;
  int v437;
  uint64_t v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned __int16 *v449;
  uint64_t v450;
  char *v451;
  char *v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  unint64_t v460;
  unsigned int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned __int16 *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  unint64_t v485;
  unsigned int v486;
  int v487;
  uint64_t v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned __int16 *v499;
  uint64_t v500;
  char *v501;
  char *v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  unint64_t v510;
  unsigned int v511;
  int v512;
  uint64_t v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  uint64_t v520;
  unsigned int v521;
  unsigned int v522;
  unsigned int v523;
  unsigned __int16 *v524;
  uint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  unint64_t v535;
  unsigned int v536;
  int v537;
  uint64_t v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  uint64_t v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned __int16 *v549;
  uint64_t v550;
  char *v551;
  char *v552;
  uint64_t v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  unint64_t v560;
  unsigned int v561;
  int v562;
  uint64_t v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned __int16 *v574;
  uint64_t v575;
  char *v576;
  char *v577;
  uint64_t v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  unint64_t v585;
  unsigned int v586;
  int v587;
  uint64_t v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  uint64_t v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  unsigned __int16 *v599;
  uint64_t v600;
  char *v601;
  char *v602;
  uint64_t v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  unint64_t v610;
  unsigned int v611;
  int v612;
  uint64_t v613;
  unsigned int v614;
  unsigned int v615;
  unsigned int v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int v619;
  uint64_t v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  unsigned __int16 *v624;
  uint64_t v625;
  char *v626;
  char *v627;
  uint64_t v628;
  char *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  unsigned int v636;
  int v637;
  uint64_t v638;
  unsigned int v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int v642;
  unsigned int v643;
  unsigned int v644;
  uint64_t v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  unsigned __int16 *v649;
  uint64_t v650;
  char *v651;
  char *v652;
  uint64_t v653;
  char *v654;
  uint64_t v655;
  int v656;
  int v657;
  unsigned __int16 v658;
  unsigned __int16 *v659;
  uint64_t v660;
  char *v661;
  char *v662;
  uint64_t v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  int v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  int v688;
  char *v689;
  int v690;

  v2 = *(_QWORD *)(result + 136);
  if (v2)
  {
    v688 = *(_DWORD *)(result + 4);
    v3 = v688;
    v4 = *(_QWORD *)(result + 48);
    v5 = *(_QWORD *)(result + 88);
    v6 = *(_QWORD *)(result + 96);
    v7 = (unint64_t)*(int *)(result + 28) >> 3;
    v8 = (char *)(*(_QWORD *)(result + 40) + 8 * (*(int *)(result + 12) + v7 * *(int *)(result + 16)));
    v9 = *(int *)(result + 124);
    v10 = (_BYTE *)(v2 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v9);
    v11 = *(int *)(result + 56);
    v12 = *(int *)(result + 60);
    v13 = *(int *)(result + 76);
    v690 = *(_DWORD *)(result + 8);
    if (*(unsigned __int8 *)(result + 1) << 8 != 256)
    {
      v19 = *(_DWORD *)(result + 64);
      v18 = *(_DWORD *)(result + 68);
      v14 = v13 >> 3;
      v20 = v6 != 0;
      v687 = v9 - v688;
      v686 = v7 - v688;
      if (v5)
      {
        v684 = 0;
        v683 = v5 + 8 * v14 * v18;
        v685 = v14;
        v21 = v5 + 8 * v14 * ((int)v12 % v18);
        v15 = (char *)(v21 + 8 * ((int)v11 % v19));
        v22 = v21 + 8 * v19;
        v17 = 1;
        v689 = v15;
LABEL_16:
        switch(a2)
        {
          case 0:
            v23 = v17;
            v24 = 8 * v17;
            do
            {
              v25 = v688;
              v26 = v690;
              do
              {
                v27 = *v10;
                if (*v10)
                {
                  if (v27 == 255)
                  {
                    *(_QWORD *)v8 = 0;
                  }
                  else
                  {
                    v28 = bswap32(*((unsigned __int16 *)v8 + 1) | (*(unsigned __int16 *)v8 << 16));
                    v29.i32[0] = (unsigned __int16)v28;
                    v29.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v28), 0x10uLL).i32[1];
                    v29.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16, bswap32(*((unsigned __int16 *)v8 + 2)) >> 16);
                    v30.i64[0] = 0x800000008000;
                    v30.i64[1] = 0x800000008000;
                    v31 = (uint32x4_t)vmlaq_s32(v30, v29, vdupq_n_s32(v27 | (v27 << 8)));
                    v29.i32[0] = v28;
                    *(int8x8_t *)v8 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v29, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v31, v31, 0x10uLL), 0x10uLL))));
                  }
                }
                v10 += v23;
                v8 += v24;
                --v25;
              }
              while (v25);
              v10 += v687;
              v8 += 8 * v686;
              --v690;
            }
            while (v26 != 1);
            return result;
          case 1:
            if (v4)
              v32 = v20;
            else
              v32 = 1;
            v33 = v17;
            v34 = -(uint64_t)v19;
            v35 = -(v685 * v18);
            v36 = 8 * v17;
            if ((v32 & 1) != 0)
            {
              do
              {
                v37 = v688;
                do
                {
                  v38 = *v10;
                  if (*v10)
                  {
                    if (v38 == 255)
                      *(_QWORD *)v8 = *(_QWORD *)v15;
                    else
                      result = (unint64_t)RGBA64_DMplusDM(v8, ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16), v38 | (v38 << 8), ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), (v38 | (v38 << 8)) ^ 0xFFFFu);
                  }
                  v10 += v33;
                  v39 = (unsigned __int16 *)&v15[8 * v33];
                  if ((unint64_t)v39 >= v22)
                    v40 = v34;
                  else
                    v40 = 0;
                  v15 = (char *)&v39[4 * v40];
                  v8 += v36;
                  --v37;
                }
                while (v37);
                v10 += v687;
                v8 += 8 * v686;
                v41 = v689;
                v42 = &v689[8 * v685];
                if ((unint64_t)v42 >= v683)
                  v43 = v35;
                else
                  v43 = 0;
                v44 = &v42[8 * v43];
                v45 = v22 + 8 * v43 + 8 * v685;
                if (v684)
                {
                  v15 += 8 * v685;
                }
                else
                {
                  v22 = v45;
                  v41 = v44;
                  v15 = v44;
                }
                v46 = v690 == 1;
                v689 = v41;
                --v690;
              }
              while (!v46);
            }
            else
            {
              do
              {
                v656 = v688;
                do
                {
                  v657 = *v10;
                  if (*v10)
                  {
                    if (v657 == 255)
                    {
                      v658 = *((_WORD *)v15 + 2);
                      *(_DWORD *)v8 = *(_DWORD *)v15;
                      *((_WORD *)v8 + 2) = v658;
                      *((_WORD *)v8 + 3) = -1;
                    }
                    else
                    {
                      result = (unint64_t)RGBA64_DMplusDAM(v8, ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), (v657 | (v657 << 8)) ^ 0xFFFFu, ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16), 0xFFFFu, v657 | (v657 << 8));
                    }
                  }
                  v10 += v33;
                  v659 = (unsigned __int16 *)&v15[8 * v33];
                  if ((unint64_t)v659 >= v22)
                    v660 = v34;
                  else
                    v660 = 0;
                  v15 = (char *)&v659[4 * v660];
                  v8 += v36;
                  --v656;
                }
                while (v656);
                v10 += v687;
                v8 += 8 * v686;
                v661 = v689;
                v662 = &v689[8 * v685];
                if ((unint64_t)v662 >= v683)
                  v663 = v35;
                else
                  v663 = 0;
                v664 = &v662[8 * v663];
                v665 = v22 + 8 * v663 + 8 * v685;
                if (v684)
                {
                  v15 += 8 * v685;
                }
                else
                {
                  v22 = v665;
                  v661 = v664;
                  v15 = v664;
                }
                v46 = v690 == 1;
                v689 = v661;
                --v690;
              }
              while (!v46);
            }
            return result;
          case 2:
            v47 = v17;
            v48 = -(uint64_t)v19;
            v49 = -(v685 * v18);
            v50 = 8 * v17;
            while (1)
            {
              v51 = v688;
              do
              {
                v52 = *v10;
                if (!*v10)
                  goto LABEL_60;
                if (v52 == 255)
                {
                  v53 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                  if (!(_DWORD)v53)
                    goto LABEL_60;
                  if ((_DWORD)v53 == 0xFFFF)
                  {
                    *(_QWORD *)v8 = *(_QWORD *)v15;
                    goto LABEL_60;
                  }
                  v60 = (v53 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                  v61 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                  v62 = v53 ^ 0xFFFF;
                }
                else
                {
                  v54 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                  v55 = (v52 | (v52 << 8)) ^ 0xFFFF;
                  v56 = v54 - ((v55 * v54 + 0x8000 + ((v55 * v54 + 0x8000) >> 16)) >> 16);
                  if ((_WORD)v54 == (v55 * v54 + 0x8000 + ((v55 * v54 + 0x8000) >> 16)) >> 16)
                    goto LABEL_60;
                  v57 = bswap32(*((unsigned __int16 *)v15 + 2));
                  v58 = (v56 << 48) | ((unint64_t)(unsigned __int16)(HIWORD(v57)
                                                                          - ((v55 * HIWORD(v57)
                                                                            + 0x8000
                                                                            + ((v55 * HIWORD(v57) + 0x8000) >> 16)) >> 16)) << 32);
                  v59 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v60 = v58 | (unsigned __int16)(v59
                                               - (((unsigned __int16)v59 * v55
                                                 + 0x8000
                                                 + (((unsigned __int16)v59 * v55 + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v59) - ((HIWORD(v59) * v55 + 0x8000 + ((HIWORD(v59) * v55 + 0x8000) >> 16)) >> 16)) << 16);
                  v61 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                  v62 = (unsigned __int16)~(_WORD)v56;
                }
                result = (unint64_t)RGBA64_DplusDM(v8, v60, v61, v62);
LABEL_60:
                v10 += v47;
                v63 = (unsigned __int16 *)&v15[8 * v47];
                if ((unint64_t)v63 >= v22)
                  v64 = v48;
                else
                  v64 = 0;
                v15 = (char *)&v63[4 * v64];
                v8 += v50;
                --v51;
              }
              while (v51);
              v10 += v687;
              v8 += 8 * v686;
              v65 = v689;
              v66 = &v689[8 * v685];
              if ((unint64_t)v66 >= v683)
                v67 = v49;
              else
                v67 = 0;
              v68 = &v66[8 * v67];
              v69 = v22 + 8 * v67 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v69;
                v65 = v68;
                v15 = v68;
              }
              v46 = v690 == 1;
              v689 = v65;
              --v690;
              if (v46)
                return result;
            }
          case 3:
            v70 = v17;
            v71 = -(uint64_t)v19;
            v72 = -(v685 * v18);
            v73 = 8 * v17;
            do
            {
              v74 = v688;
              do
              {
                v75 = *v10;
                if (*v10)
                {
                  if (v75 == 255)
                  {
                    v76 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                    v77 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v76 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                    if (v20)
                      v78 = v76;
                    else
                      v78 = -1;
                    result = (unint64_t)RGBA64_DAM(v8, v77, v78, bswap32(*((unsigned __int16 *)v8 + 3)) >> 16);
                  }
                  else
                  {
                    v79 = v75 | (v75 << 8);
                    v80 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                    v81 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v80 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                    v82 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                    v83 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v82 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                    if (v20)
                      v84 = v82;
                    else
                      v84 = -1;
                    result = (unint64_t)RGBA64_DMplusDAM(v8, v81, v79 ^ 0xFFFFu, v83, v84, ((_DWORD)v80 * v79 + 0x8000 + ((v80 * v79 + 0x8000) >> 16)) >> 16);
                  }
                }
                v10 += v70;
                v85 = (unsigned __int16 *)&v15[8 * v70];
                if ((unint64_t)v85 >= v22)
                  v86 = v71;
                else
                  v86 = 0;
                v15 = (char *)&v85[4 * v86];
                v8 += v73;
                --v74;
              }
              while (v74);
              v10 += v687;
              v8 += 8 * v686;
              v87 = v689;
              v88 = &v689[8 * v685];
              if ((unint64_t)v88 >= v683)
                v89 = v72;
              else
                v89 = 0;
              v90 = &v88[8 * v89];
              v91 = v22 + 8 * v89 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v91;
                v87 = v90;
                v15 = v90;
              }
              v46 = v690 == 1;
              v689 = v87;
              --v690;
            }
            while (!v46);
            return result;
          case 4:
            v92 = v17;
            v93 = -(uint64_t)v19;
            v94 = -(v685 * v18);
            v95 = 8 * v17;
            do
            {
              v96 = v688;
              do
              {
                v97 = *v10;
                if (*v10)
                {
                  if (v97 == 255)
                  {
                    v98 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                    v99 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v98 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                    if (v20)
                      v100 = v98;
                    else
                      v100 = -1;
                    result = (unint64_t)RGBA64_DAM(v8, v99, v100, bswap32(~*((unsigned __int16 *)v8 + 3)) >> 16);
                  }
                  else
                  {
                    v101 = v97 | (v97 << 8);
                    v102 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                    v103 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v102 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                    v104 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                    v105 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v104 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                    if (v20)
                      v106 = v104;
                    else
                      v106 = -1;
                    result = (unint64_t)RGBA64_DMplusDAM(v8, v103, v101 ^ 0xFFFFu, v105, v106, ((v102 ^ 0xFFFF) * v101+ 0x8000+ (((v102 ^ 0xFFFF) * v101 + 0x8000) >> 16)) >> 16);
                  }
                }
                v10 += v92;
                v107 = (unsigned __int16 *)&v15[8 * v92];
                if ((unint64_t)v107 >= v22)
                  v108 = v93;
                else
                  v108 = 0;
                v15 = (char *)&v107[4 * v108];
                v8 += v95;
                --v96;
              }
              while (v96);
              v10 += v687;
              v8 += 8 * v686;
              v109 = v689;
              v110 = &v689[8 * v685];
              if ((unint64_t)v110 >= v683)
                v111 = v94;
              else
                v111 = 0;
              v112 = &v110[8 * v111];
              v113 = v22 + 8 * v111 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v113;
                v109 = v112;
                v15 = v112;
              }
              v46 = v690 == 1;
              v689 = v109;
              --v690;
            }
            while (!v46);
            return result;
          case 5:
            v345 = v17;
            v346 = -(uint64_t)v19;
            v347 = -(v685 * v18);
            v348 = 8 * v17;
            do
            {
              v349 = v688;
              do
              {
                if (*v10)
                {
                  v350 = bswap32(*((unsigned __int16 *)v15 + 3));
                  v351 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
                  v352 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v353 = (*v10 | (*v10 << 8)) ^ 0xFFFF;
                  v354 = (unsigned __int16)v352 * v353
                       + 0x8000
                       + (((unsigned __int16)v352 * v353 + 0x8000) >> 16);
                  v355 = HIWORD(v352) * v353 + 0x8000 + ((HIWORD(v352) * v353 + 0x8000) >> 16);
                  v356 = v353 * v351 + 0x8000 + ((v353 * v351 + 0x8000) >> 16);
                  v357 = HIWORD(v350)
                       - ((v353 * HIWORD(v350) + 0x8000 + ((v353 * HIWORD(v350) + 0x8000) >> 16)) >> 16);
                  v358 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                  result = (unint64_t)RGBA64_DMplusDM(v8, (v357 << 48) | ((unint64_t)(unsigned __int16)(v351 - HIWORD(v356)) << 32) | (unsigned __int16)(v352 - HIWORD(v354)) | ((unsigned __int16)(HIWORD(v352) - HIWORD(v355)) << 16), v358, (v358 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), (unsigned __int16)~(_WORD)v357);
                }
                v10 += v345;
                v359 = (unsigned __int16 *)&v15[8 * v345];
                if ((unint64_t)v359 >= v22)
                  v360 = v346;
                else
                  v360 = 0;
                v15 = (char *)&v359[4 * v360];
                v8 += v348;
                --v349;
              }
              while (v349);
              v10 += v687;
              v8 += 8 * v686;
              v361 = v689;
              v362 = &v689[8 * v685];
              if ((unint64_t)v362 >= v683)
                v363 = v347;
              else
                v363 = 0;
              v364 = &v362[8 * v363];
              v365 = v22 + 8 * v363 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v365;
                v361 = v364;
                v15 = v364;
              }
              v46 = v690 == 1;
              v689 = v361;
              --v690;
            }
            while (!v46);
            return result;
          case 6:
            v366 = v17;
            v367 = -(uint64_t)v19;
            v673 = -(v685 * v18);
            v368 = 8 * v17;
            do
            {
              v369 = v688;
              do
              {
                v370 = *v10;
                if (*v10)
                {
                  v371 = bswap32(*((unsigned __int16 *)v8 + 3));
                  if (HIWORD(v371) != 0xFFFF)
                  {
                    if ((unsigned __int16)~HIWORD(v371) == 0xFFFF)
                    {
                      v372 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                      v373 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v372 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                      if (v20)
                        v374 = v372;
                      else
                        v374 = -1;
                      result = (unint64_t)RGBA64_DAM(v8, v373, v374, v370 | (v370 << 8));
                    }
                    else
                    {
                      v375 = HIWORD(v371);
                      v376 = ~HIWORD(v371);
                      v377 = (v375 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                      v378 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                      v379 = ((unint64_t)(bswap32(*((unsigned __int16 *)v15 + 2)) >> 16) << 32) | (v378 << 48) | bswap32(*((unsigned __int16 *)v15 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v15) >> 16);
                      if (v20)
                        v380 = v378;
                      else
                        v380 = -1;
                      result = (unint64_t)RGBA64_DplusDAM(v8, v377, v379, v380, (257 * v370 * (unsigned __int16)v376+ 0x8000+ ((257 * v370 * (unsigned __int16)v376 + 0x8000) >> 16)) >> 16);
                    }
                  }
                }
                v10 += v366;
                v381 = (unsigned __int16 *)&v15[8 * v366];
                if ((unint64_t)v381 >= v22)
                  v382 = v367;
                else
                  v382 = 0;
                v15 = (char *)&v381[4 * v382];
                v8 += v368;
                --v369;
              }
              while (v369);
              v10 += v687;
              v8 += 8 * v686;
              v383 = v689;
              v384 = &v689[8 * v685];
              v385 = v673;
              if ((unint64_t)v384 < v683)
                v385 = 0;
              v386 = &v384[8 * v385];
              v387 = v22 + 8 * v385 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v387;
                v383 = v386;
                v15 = v386;
              }
              v46 = v690 == 1;
              v689 = v383;
              --v690;
            }
            while (!v46);
            return result;
          case 7:
            v114 = v17;
            v115 = -(uint64_t)v19;
            v116 = -(v685 * v18);
            v117 = 8 * v17;
            do
            {
              v118 = v688;
              do
              {
                v119 = *v10;
                if (*v10)
                {
                  if (v119 == 255)
                  {
                    v120 = bswap32(*((unsigned __int16 *)v8 + 1) | (*(unsigned __int16 *)v8 << 16));
                    v121.i32[0] = (unsigned __int16)v120;
                    v121.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v120), 0x10uLL).i32[1];
                    v121.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16, bswap32(*((unsigned __int16 *)v8 + 2)) >> 16);
                    v122.i64[0] = 0x800000008000;
                    v122.i64[1] = 0x800000008000;
                    v123 = (uint32x4_t)vmlaq_s32(v122, v121, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(~*((unsigned __int16 *)v15+ 3)) >> 16)));
                    v121.i32[0] = v120;
                    *(int8x8_t *)v8 = vrev16_s8((int8x8_t)vmovn_s32(vsubq_s32(v121, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v123, v123, 0x10uLL), 0x10uLL))));
                  }
                  else
                  {
                    v124 = bswap32(*((unsigned __int16 *)v15 + 3));
                    v125 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                    result = (unint64_t)RGBA64_DMplusDM(v8, v125, (HIWORD(v124) * (v119 | (v119 << 8))+ 0x8000+ ((HIWORD(v124) * (v119 | (v119 << 8)) + 0x8000) >> 16)) >> 16, v125, (v119 | (v119 << 8)) ^ 0xFFFFu);
                  }
                }
                v10 += v114;
                v126 = (unsigned __int16 *)&v15[8 * v114];
                if ((unint64_t)v126 >= v22)
                  v127 = v115;
                else
                  v127 = 0;
                v15 = (char *)&v126[4 * v127];
                v8 += v117;
                --v118;
              }
              while (v118);
              v10 += v687;
              v8 += 8 * v686;
              v128 = v689;
              v129 = &v689[8 * v685];
              if ((unint64_t)v129 >= v683)
                v130 = v116;
              else
                v130 = 0;
              v131 = &v129[8 * v130];
              v132 = v22 + 8 * v130 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v132;
                v128 = v131;
                v15 = v131;
              }
              v46 = v690 == 1;
              v689 = v128;
              --v690;
            }
            while (!v46);
            return result;
          case 8:
            v388 = -(uint64_t)v19;
            v389 = -(v685 * v18);
            do
            {
              v390 = v688;
              do
              {
                v391 = *v10;
                if (*v10)
                {
                  if (v391 == 255)
                  {
                    v392 = bswap32(*((unsigned __int16 *)v8 + 1) | (*(unsigned __int16 *)v8 << 16));
                    v393.i32[0] = (unsigned __int16)v392;
                    v393.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v392), 0x10uLL).i32[1];
                    v393.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16, bswap32(*((unsigned __int16 *)v8 + 2)) >> 16);
                    v394.i64[0] = 0x800000008000;
                    v394.i64[1] = 0x800000008000;
                    v395 = (uint32x4_t)vmlaq_s32(v394, v393, (int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(bswap32(*((unsigned __int16 *)v15+ 3)) >> 16)));
                    v393.i32[0] = v392;
                    v396 = vsubq_s32(v393, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v395, v395, 0x10uLL), 0x10uLL));
                  }
                  else
                  {
                    v397 = bswap32(*((unsigned __int16 *)v8 + 1) | (*(unsigned __int16 *)v8 << 16));
                    v398 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                    v399.i32[0] = (unsigned __int16)v397;
                    v399.i32[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(v397), 0x10uLL).i32[1];
                    v399.i64[1] = __PAIR64__(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16, bswap32(*((unsigned __int16 *)v8 + 2)) >> 16);
                    v400.i64[0] = 0x800000008000;
                    v400.i64[1] = 0x800000008000;
                    v401 = (uint32x4_t)vmlaq_s32(v400, v399, vdupq_n_s32((257 * v391 * v398 + 0x8000 + ((257 * v391 * v398 + 0x8000) >> 16)) >> 16));
                    v399.i32[0] = v397;
                    v396 = vsubq_s32(v399, (int32x4_t)vshrq_n_u32(vsraq_n_u32(v401, v401, 0x10uLL), 0x10uLL));
                  }
                  *(int8x8_t *)v8 = vrev16_s8((int8x8_t)vmovn_s32(v396));
                }
                v10 += v17;
                v402 = (unsigned __int16 *)&v15[8 * v17];
                if ((unint64_t)v402 >= v22)
                  v403 = v388;
                else
                  v403 = 0;
                v15 = (char *)&v402[4 * v403];
                v8 += 8 * v17;
                --v390;
              }
              while (v390);
              v10 += v687;
              v8 += 8 * v686;
              v404 = v689;
              v405 = &v689[8 * v685];
              if ((unint64_t)v405 >= v683)
                v406 = v389;
              else
                v406 = 0;
              v407 = &v405[8 * v406];
              v408 = v22 + 8 * v406 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v408;
                v404 = v407;
                v15 = v407;
              }
              result = (v690 - 1);
              v689 = v404;
              v690 = result;
            }
            while ((_DWORD)result);
            return result;
          case 9:
            v133 = v17;
            v134 = -(uint64_t)v19;
            v135 = -(v685 * v18);
            v136 = 8 * v17;
            do
            {
              v137 = v688;
              do
              {
                if (*v10)
                {
                  v138 = bswap32(*((unsigned __int16 *)v15 + 3));
                  v139 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
                  v140 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v141 = ~(*v10 | (*v10 << 8));
                  v142 = v141;
                  v143 = (unsigned __int16)v140 * v142
                       + 0x8000
                       + (((unsigned __int16)v140 * v142 + 0x8000) >> 16);
                  v144 = HIWORD(v140) * v142 + 0x8000 + ((HIWORD(v140) * v142 + 0x8000) >> 16);
                  v145 = v139 * v142 + 0x8000 + ((v139 * v142 + 0x8000) >> 16);
                  v146 = HIWORD(v138)
                       - ((HIWORD(v138) * v142 + 0x8000 + ((HIWORD(v138) * v142 + 0x8000) >> 16)) >> 16);
                  v147 = (v146 << 48) | ((unint64_t)(unsigned __int16)(v139 - HIWORD(v145)) << 32) | (unsigned __int16)(v140 - HIWORD(v143)) | ((unsigned __int16)(HIWORD(v140) - HIWORD(v144)) << 16);
                  v148 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                  result = (unint64_t)RGBA64_DMplusDM(v8, v147, v148 ^ 0xFFFF, (v148 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), (unsigned __int16)(v146 + v141));
                }
                v10 += v133;
                v149 = (unsigned __int16 *)&v15[8 * v133];
                if ((unint64_t)v149 >= v22)
                  v150 = v134;
                else
                  v150 = 0;
                v15 = (char *)&v149[4 * v150];
                v8 += v136;
                --v137;
              }
              while (v137);
              v10 += v687;
              v8 += 8 * v686;
              v151 = v689;
              v152 = &v689[8 * v685];
              if ((unint64_t)v152 >= v683)
                v153 = v135;
              else
                v153 = 0;
              v154 = &v152[8 * v153];
              v155 = v22 + 8 * v153 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v155;
                v151 = v154;
                v15 = v154;
              }
              v46 = v690 == 1;
              v689 = v151;
              --v690;
            }
            while (!v46);
            return result;
          case 10:
            v409 = v17;
            v410 = -(uint64_t)v19;
            v411 = -(v685 * v18);
            v412 = 8 * v17;
            do
            {
              v413 = v688;
              do
              {
                if (*v10)
                {
                  v414 = bswap32(*((unsigned __int16 *)v15 + 3));
                  v415 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
                  v416 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v417 = (*v10 | (*v10 << 8)) ^ 0xFFFF;
                  v418 = (unsigned __int16)v416 * v417
                       + 0x8000
                       + (((unsigned __int16)v416 * v417 + 0x8000) >> 16);
                  v419 = HIWORD(v416) * v417 + 0x8000 + ((HIWORD(v416) * v417 + 0x8000) >> 16);
                  v420 = v417 * v415 + 0x8000 + ((v417 * v415 + 0x8000) >> 16);
                  v421 = HIWORD(v414)
                       - ((v417 * HIWORD(v414) + 0x8000 + ((v417 * HIWORD(v414) + 0x8000) >> 16)) >> 16);
                  v422 = (v421 << 48) | ((unint64_t)(unsigned __int16)(v415 - HIWORD(v420)) << 32) | (unsigned __int16)(v416 - HIWORD(v418)) | ((unsigned __int16)(HIWORD(v416) - HIWORD(v419)) << 16);
                  v423 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                  result = (unint64_t)RGBA64_DMplusDM(v8, v422, v423 ^ 0xFFFF, (v423 << 48) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), (unsigned __int16)~(_WORD)v421);
                }
                v10 += v409;
                v424 = (unsigned __int16 *)&v15[8 * v409];
                if ((unint64_t)v424 >= v22)
                  v425 = v410;
                else
                  v425 = 0;
                v15 = (char *)&v424[4 * v425];
                v8 += v412;
                --v413;
              }
              while (v413);
              v10 += v687;
              v8 += 8 * v686;
              v426 = v689;
              v427 = &v689[8 * v685];
              if ((unint64_t)v427 >= v683)
                v428 = v411;
              else
                v428 = 0;
              v429 = &v427[8 * v428];
              v430 = v22 + 8 * v428 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v430;
                v426 = v429;
                v15 = v429;
              }
              v46 = v690 == 1;
              v689 = v426;
              --v690;
            }
            while (!v46);
            return result;
          case 11:
            v156 = v17;
            v157 = -(uint64_t)v19;
            v666 = -(v685 * v18);
            v158 = 8 * v17;
            do
            {
              v159 = v688;
              do
              {
                if (*v10)
                {
                  v160 = *v10 | (*v10 << 8);
                  v161 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                  v162 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
                  v163 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v164 = v161 - ((v161 * (v160 ^ 0xFFFF) + 0x8000 + ((v161 * (v160 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  v165 = (v164 << 48) | ((unint64_t)(unsigned __int16)(v162
                                                                            - ((v162 * (v160 ^ 0xFFFF)
                                                                              + 0x8000
                                                                              + ((v162 * (v160 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v163 - (((unsigned __int16)v163 * (v160 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)v163 * (v160 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v163) - ((HIWORD(v163) * (v160 ^ 0xFFFF) + 0x8000 + ((HIWORD(v163) * (v160 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  v166 = bswap32(*((unsigned __int16 *)v8 + 3)) >> 16;
                  v167 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v166 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                  if (v4)
                    v168 = v166;
                  else
                    v168 = -1;
                  if (v20)
                    LOWORD(v160) = v164;
                  result = (unint64_t)RGBA64_DAplusdDA(v8, v167, v168, v165, (unsigned __int16)v160);
                }
                v10 += v156;
                v169 = (unsigned __int16 *)&v15[8 * v156];
                if ((unint64_t)v169 >= v22)
                  v170 = v157;
                else
                  v170 = 0;
                v15 = (char *)&v169[4 * v170];
                v8 += v158;
                --v159;
              }
              while (v159);
              v10 += v687;
              v8 += 8 * v686;
              v171 = v689;
              v172 = &v689[8 * v685];
              v173 = v666;
              if ((unint64_t)v172 < v683)
                v173 = 0;
              v174 = &v172[8 * v173];
              v175 = v22 + 8 * v173 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v175;
                v171 = v174;
                v15 = v174;
              }
              v46 = v690 == 1;
              v689 = v171;
              --v690;
            }
            while (!v46);
            return result;
          case 12:
            v176 = v17;
            v177 = -(uint64_t)v19;
            v178 = -(v685 * v18);
            v179 = 8 * v17;
            do
            {
              v180 = v688;
              do
              {
                if (*v10)
                {
                  v181 = *v10 | (*v10 << 8);
                  v182 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                  v183 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
                  v184 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                  v185 = v182 - ((v182 * (v181 ^ 0xFFFF) + 0x8000 + ((v182 * (v181 ^ 0xFFFF) + 0x8000) >> 16)) >> 16);
                  v186 = (v185 << 48) | ((unint64_t)(unsigned __int16)(v183
                                                                            - ((v183 * (v181 ^ 0xFFFF)
                                                                              + 0x8000
                                                                              + ((v183 * (v181 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 32) | (unsigned __int16)(v184 - (((unsigned __int16)v184 * (v181 ^ 0xFFFF) + 0x8000 + (((unsigned __int16)v184 * (v181 ^ 0xFFFFu) + 0x8000) >> 16)) >> 16)) | ((unsigned __int16)(HIWORD(v184) - ((HIWORD(v184) * (v181 ^ 0xFFFF) + 0x8000 + ((HIWORD(v184) * (v181 ^ 0xFFFF) + 0x8000) >> 16)) >> 16)) << 16);
                  v187 = ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 3)) >> 16) << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16);
                  if (v20)
                    LOWORD(v181) = v185;
                  result = (unint64_t)RGBA64_DpluslDA(v8, v187, v186, (unsigned __int16)v181);
                }
                v10 += v176;
                v188 = (unsigned __int16 *)&v15[8 * v176];
                if ((unint64_t)v188 >= v22)
                  v189 = v177;
                else
                  v189 = 0;
                v15 = (char *)&v188[4 * v189];
                v8 += v179;
                --v180;
              }
              while (v180);
              v10 += v687;
              v8 += 8 * v686;
              v190 = v689;
              v191 = &v689[8 * v685];
              if ((unint64_t)v191 >= v683)
                v192 = v178;
              else
                v192 = 0;
              v193 = &v191[8 * v192];
              v194 = v22 + 8 * v192 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v194;
                v190 = v193;
                v15 = v193;
              }
              v46 = v690 == 1;
              v689 = v190;
              --v690;
            }
            while (!v46);
            return result;
          case 13:
            v431 = v17;
            v432 = -(uint64_t)v19;
            v674 = -(v685 * v18);
            v433 = 8 * v17;
            while (1)
            {
              v434 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_433;
                LODWORD(v435) = *v10 | (*v10 << 8);
                v436 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v437 = v435 ^ 0xFFFF;
                v438 = v436 - ((v436 * v437 + 0x8000 + ((v436 * v437 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v438)
                    goto LABEL_433;
                  LODWORD(v435) = v438;
                }
                v439 = bswap32(*((unsigned __int16 *)v15 + 2));
                v440 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v441 = HIWORD(v440);
                v442 = v440
                     - (((unsigned __int16)v440 * v437
                       + 0x8000
                       + (((unsigned __int16)v440 * v437 + 0x8000) >> 16)) >> 16);
                v443 = v441 - ((v441 * v437 + 0x8000 + ((v441 * v437 + 0x8000) >> 16)) >> 16);
                v444 = HIWORD(v439)
                     - ((HIWORD(v439) * v437 + 0x8000 + ((HIWORD(v439) * v437 + 0x8000) >> 16)) >> 16);
                v445 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v446 = 0xFFFF;
LABEL_431:
                  result = PDAmultiplyPDA_13494(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v445 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v446, (unsigned __int16)v442 | ((unsigned __int16)v443 << 16) | (unint64_t)(v438 << 48) | ((unint64_t)(unsigned __int16)v444 << 32), (unsigned __int16)v435);
                  v435 = HIWORD(result);
                  v448 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v448);
                  *((_WORD *)v8 + 1) = v448;
                  v447 = bswap32(HIDWORD(result));
                  goto LABEL_432;
                }
                v446 = v445;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_431;
                *(_WORD *)v8 = bswap32(v442) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v443) >> 16;
                v447 = bswap32(v444);
LABEL_432:
                *((_WORD *)v8 + 2) = HIWORD(v447);
                *((_WORD *)v8 + 3) = bswap32(v435) >> 16;
LABEL_433:
                v10 += v431;
                v449 = (unsigned __int16 *)&v15[8 * v431];
                if ((unint64_t)v449 >= v22)
                  v450 = v432;
                else
                  v450 = 0;
                v15 = (char *)&v449[4 * v450];
                v8 += v433;
                --v434;
              }
              while (v434);
              v10 += v687;
              v8 += 8 * v686;
              v451 = v689;
              v452 = &v689[8 * v685];
              v453 = v674;
              if ((unint64_t)v452 < v683)
                v453 = 0;
              v454 = &v452[8 * v453];
              v455 = v22 + 8 * v453 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v455;
                v451 = v454;
                v15 = v454;
              }
              v46 = v690 == 1;
              v689 = v451;
              --v690;
              if (v46)
                return result;
            }
          case 14:
            v195 = v17;
            v196 = -(uint64_t)v19;
            v667 = -(v685 * v18);
            v197 = 8 * v17;
            while (1)
            {
              v198 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_211;
                LODWORD(v199) = *v10 | (*v10 << 8);
                v200 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v201 = v199 ^ 0xFFFF;
                v202 = v200 - ((v200 * v201 + 0x8000 + ((v200 * v201 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v202)
                    goto LABEL_211;
                  LODWORD(v199) = v202;
                }
                v203 = bswap32(*((unsigned __int16 *)v15 + 2));
                v204 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v205 = HIWORD(v204);
                v206 = v204
                     - (((unsigned __int16)v204 * v201
                       + 0x8000
                       + (((unsigned __int16)v204 * v201 + 0x8000) >> 16)) >> 16);
                v207 = v205 - ((v205 * v201 + 0x8000 + ((v205 * v201 + 0x8000) >> 16)) >> 16);
                v208 = HIWORD(v203)
                     - ((HIWORD(v203) * v201 + 0x8000 + ((HIWORD(v203) * v201 + 0x8000) >> 16)) >> 16);
                v209 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v210 = 0xFFFF;
LABEL_209:
                  result = PDAscreenPDA_13495(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v209 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v210, (unsigned __int16)v206 | ((unsigned __int16)v207 << 16) | (unint64_t)(v202 << 48) | ((unint64_t)(unsigned __int16)v208 << 32), (unsigned __int16)v199);
                  v199 = HIWORD(result);
                  v212 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v212);
                  *((_WORD *)v8 + 1) = v212;
                  v211 = bswap32(HIDWORD(result));
                  goto LABEL_210;
                }
                v210 = v209;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_209;
                *(_WORD *)v8 = bswap32(v206) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v207) >> 16;
                v211 = bswap32(v208);
LABEL_210:
                *((_WORD *)v8 + 2) = HIWORD(v211);
                *((_WORD *)v8 + 3) = bswap32(v199) >> 16;
LABEL_211:
                v10 += v195;
                v213 = (unsigned __int16 *)&v15[8 * v195];
                if ((unint64_t)v213 >= v22)
                  v214 = v196;
                else
                  v214 = 0;
                v15 = (char *)&v213[4 * v214];
                v8 += v197;
                --v198;
              }
              while (v198);
              v10 += v687;
              v8 += 8 * v686;
              v215 = v689;
              v216 = &v689[8 * v685];
              v217 = v667;
              if ((unint64_t)v216 < v683)
                v217 = 0;
              v218 = &v216[8 * v217];
              v219 = v22 + 8 * v217 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v219;
                v215 = v218;
                v15 = v218;
              }
              v46 = v690 == 1;
              v689 = v215;
              --v690;
              if (v46)
                return result;
            }
          case 15:
            v220 = v17;
            v221 = -(uint64_t)v19;
            v668 = -(v685 * v18);
            v222 = 8 * v17;
            while (1)
            {
              v223 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_235;
                LODWORD(v224) = *v10 | (*v10 << 8);
                v225 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v226 = v224 ^ 0xFFFF;
                v227 = v225 - ((v225 * v226 + 0x8000 + ((v225 * v226 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v227)
                    goto LABEL_235;
                  LODWORD(v224) = v227;
                }
                v228 = bswap32(*((unsigned __int16 *)v15 + 2));
                v229 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v230 = HIWORD(v229);
                v231 = v229
                     - (((unsigned __int16)v229 * v226
                       + 0x8000
                       + (((unsigned __int16)v229 * v226 + 0x8000) >> 16)) >> 16);
                v232 = v230 - ((v230 * v226 + 0x8000 + ((v230 * v226 + 0x8000) >> 16)) >> 16);
                v233 = HIWORD(v228)
                     - ((HIWORD(v228) * v226 + 0x8000 + ((HIWORD(v228) * v226 + 0x8000) >> 16)) >> 16);
                v234 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v235 = 0xFFFF;
LABEL_233:
                  result = PDAoverlayPDA_13496(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v234 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v235, (unsigned __int16)v231 | ((unsigned __int16)v232 << 16) | (unint64_t)(v227 << 48) | ((unint64_t)(unsigned __int16)v233 << 32), (unsigned __int16)v224);
                  v224 = HIWORD(result);
                  v237 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v237);
                  *((_WORD *)v8 + 1) = v237;
                  v236 = bswap32(HIDWORD(result));
                  goto LABEL_234;
                }
                v235 = v234;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_233;
                *(_WORD *)v8 = bswap32(v231) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v232) >> 16;
                v236 = bswap32(v233);
LABEL_234:
                *((_WORD *)v8 + 2) = HIWORD(v236);
                *((_WORD *)v8 + 3) = bswap32(v224) >> 16;
LABEL_235:
                v10 += v220;
                v238 = (unsigned __int16 *)&v15[8 * v220];
                if ((unint64_t)v238 >= v22)
                  v239 = v221;
                else
                  v239 = 0;
                v15 = (char *)&v238[4 * v239];
                v8 += v222;
                --v223;
              }
              while (v223);
              v10 += v687;
              v8 += 8 * v686;
              v240 = v689;
              v241 = &v689[8 * v685];
              v242 = v668;
              if ((unint64_t)v241 < v683)
                v242 = 0;
              v243 = &v241[8 * v242];
              v244 = v22 + 8 * v242 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v244;
                v240 = v243;
                v15 = v243;
              }
              v46 = v690 == 1;
              v689 = v240;
              --v690;
              if (v46)
                return result;
            }
          case 16:
            v245 = v17;
            v246 = -(uint64_t)v19;
            v669 = -(v685 * v18);
            v247 = 8 * v17;
            while (1)
            {
              v248 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_259;
                LODWORD(v249) = *v10 | (*v10 << 8);
                v250 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v251 = v249 ^ 0xFFFF;
                v252 = v250 - ((v250 * v251 + 0x8000 + ((v250 * v251 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v252)
                    goto LABEL_259;
                  LODWORD(v249) = v252;
                }
                v253 = bswap32(*((unsigned __int16 *)v15 + 2));
                v254 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v255 = HIWORD(v254);
                v256 = v254
                     - (((unsigned __int16)v254 * v251
                       + 0x8000
                       + (((unsigned __int16)v254 * v251 + 0x8000) >> 16)) >> 16);
                v257 = v255 - ((v255 * v251 + 0x8000 + ((v255 * v251 + 0x8000) >> 16)) >> 16);
                v258 = HIWORD(v253)
                     - ((HIWORD(v253) * v251 + 0x8000 + ((HIWORD(v253) * v251 + 0x8000) >> 16)) >> 16);
                v259 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v260 = 0xFFFF;
LABEL_257:
                  result = PDAdarkenPDA_13498(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v259 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v260, (unsigned __int16)v256 | ((unsigned __int16)v257 << 16) | (unint64_t)(v252 << 48) | ((unint64_t)(unsigned __int16)v258 << 32), (unsigned __int16)v249);
                  v249 = HIWORD(result);
                  v262 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v262);
                  *((_WORD *)v8 + 1) = v262;
                  v261 = bswap32(HIDWORD(result));
                  goto LABEL_258;
                }
                v260 = v259;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_257;
                *(_WORD *)v8 = bswap32(v256) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v257) >> 16;
                v261 = bswap32(v258);
LABEL_258:
                *((_WORD *)v8 + 2) = HIWORD(v261);
                *((_WORD *)v8 + 3) = bswap32(v249) >> 16;
LABEL_259:
                v10 += v245;
                v263 = (unsigned __int16 *)&v15[8 * v245];
                if ((unint64_t)v263 >= v22)
                  v264 = v246;
                else
                  v264 = 0;
                v15 = (char *)&v263[4 * v264];
                v8 += v247;
                --v248;
              }
              while (v248);
              v10 += v687;
              v8 += 8 * v686;
              v265 = v689;
              v266 = &v689[8 * v685];
              v267 = v669;
              if ((unint64_t)v266 < v683)
                v267 = 0;
              v268 = &v266[8 * v267];
              v269 = v22 + 8 * v267 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v269;
                v265 = v268;
                v15 = v268;
              }
              v46 = v690 == 1;
              v689 = v265;
              --v690;
              if (v46)
                return result;
            }
          case 17:
            v456 = v17;
            v457 = -(uint64_t)v19;
            v675 = -(v685 * v18);
            v458 = 8 * v17;
            while (1)
            {
              v459 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_457;
                LODWORD(v460) = *v10 | (*v10 << 8);
                v461 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v462 = v460 ^ 0xFFFF;
                v463 = v461 - ((v461 * v462 + 0x8000 + ((v461 * v462 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v463)
                    goto LABEL_457;
                  LODWORD(v460) = v463;
                }
                v464 = bswap32(*((unsigned __int16 *)v15 + 2));
                v465 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v466 = HIWORD(v465);
                v467 = v465
                     - (((unsigned __int16)v465 * v462
                       + 0x8000
                       + (((unsigned __int16)v465 * v462 + 0x8000) >> 16)) >> 16);
                v468 = v466 - ((v466 * v462 + 0x8000 + ((v466 * v462 + 0x8000) >> 16)) >> 16);
                v469 = HIWORD(v464)
                     - ((HIWORD(v464) * v462 + 0x8000 + ((HIWORD(v464) * v462 + 0x8000) >> 16)) >> 16);
                v470 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v471 = 0xFFFF;
LABEL_455:
                  result = PDAlightenPDA_13497(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v470 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v471, (unsigned __int16)v467 | ((unsigned __int16)v468 << 16) | (unint64_t)(v463 << 48) | ((unint64_t)(unsigned __int16)v469 << 32), (unsigned __int16)v460);
                  v460 = HIWORD(result);
                  v473 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v473);
                  *((_WORD *)v8 + 1) = v473;
                  v472 = bswap32(HIDWORD(result));
                  goto LABEL_456;
                }
                v471 = v470;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_455;
                *(_WORD *)v8 = bswap32(v467) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v468) >> 16;
                v472 = bswap32(v469);
LABEL_456:
                *((_WORD *)v8 + 2) = HIWORD(v472);
                *((_WORD *)v8 + 3) = bswap32(v460) >> 16;
LABEL_457:
                v10 += v456;
                v474 = (unsigned __int16 *)&v15[8 * v456];
                if ((unint64_t)v474 >= v22)
                  v475 = v457;
                else
                  v475 = 0;
                v15 = (char *)&v474[4 * v475];
                v8 += v458;
                --v459;
              }
              while (v459);
              v10 += v687;
              v8 += 8 * v686;
              v476 = v689;
              v477 = &v689[8 * v685];
              v478 = v675;
              if ((unint64_t)v477 < v683)
                v478 = 0;
              v479 = &v477[8 * v478];
              v480 = v22 + 8 * v478 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v480;
                v476 = v479;
                v15 = v479;
              }
              v46 = v690 == 1;
              v689 = v476;
              --v690;
              if (v46)
                return result;
            }
          case 18:
            v481 = v17;
            v482 = -(uint64_t)v19;
            v676 = -(v685 * v18);
            v483 = 8 * v17;
            while (1)
            {
              v484 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_481;
                LODWORD(v485) = *v10 | (*v10 << 8);
                v486 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v487 = v485 ^ 0xFFFF;
                v488 = v486 - ((v486 * v487 + 0x8000 + ((v486 * v487 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v488)
                    goto LABEL_481;
                  LODWORD(v485) = v488;
                }
                v489 = bswap32(*((unsigned __int16 *)v15 + 2));
                v490 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v491 = HIWORD(v490);
                v492 = v490
                     - (((unsigned __int16)v490 * v487
                       + 0x8000
                       + (((unsigned __int16)v490 * v487 + 0x8000) >> 16)) >> 16);
                v493 = v491 - ((v491 * v487 + 0x8000 + ((v491 * v487 + 0x8000) >> 16)) >> 16);
                v494 = HIWORD(v489)
                     - ((HIWORD(v489) * v487 + 0x8000 + ((HIWORD(v489) * v487 + 0x8000) >> 16)) >> 16);
                v495 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v496 = 0xFFFF;
LABEL_479:
                  result = PDAcolordodgePDA_13499(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v495 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v496, (unsigned __int16)v492 | ((unsigned __int16)v493 << 16) | (unint64_t)(v488 << 48) | ((unint64_t)(unsigned __int16)v494 << 32), (unsigned __int16)v485);
                  v485 = HIWORD(result);
                  v498 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v498);
                  *((_WORD *)v8 + 1) = v498;
                  v497 = bswap32(HIDWORD(result));
                  goto LABEL_480;
                }
                v496 = v495;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_479;
                *(_WORD *)v8 = bswap32(v492) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v493) >> 16;
                v497 = bswap32(v494);
LABEL_480:
                *((_WORD *)v8 + 2) = HIWORD(v497);
                *((_WORD *)v8 + 3) = bswap32(v485) >> 16;
LABEL_481:
                v10 += v481;
                v499 = (unsigned __int16 *)&v15[8 * v481];
                if ((unint64_t)v499 >= v22)
                  v500 = v482;
                else
                  v500 = 0;
                v15 = (char *)&v499[4 * v500];
                v8 += v483;
                --v484;
              }
              while (v484);
              v10 += v687;
              v8 += 8 * v686;
              v501 = v689;
              v502 = &v689[8 * v685];
              v503 = v676;
              if ((unint64_t)v502 < v683)
                v503 = 0;
              v504 = &v502[8 * v503];
              v505 = v22 + 8 * v503 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v505;
                v501 = v504;
                v15 = v504;
              }
              v46 = v690 == 1;
              v689 = v501;
              --v690;
              if (v46)
                return result;
            }
          case 19:
            v506 = v17;
            v507 = -(uint64_t)v19;
            v677 = -(v685 * v18);
            v508 = 8 * v17;
            while (1)
            {
              v509 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_505;
                LODWORD(v510) = *v10 | (*v10 << 8);
                v511 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v512 = v510 ^ 0xFFFF;
                v513 = v511 - ((v511 * v512 + 0x8000 + ((v511 * v512 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v513)
                    goto LABEL_505;
                  LODWORD(v510) = v513;
                }
                v514 = bswap32(*((unsigned __int16 *)v15 + 2));
                v515 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v516 = HIWORD(v515);
                v517 = v515
                     - (((unsigned __int16)v515 * v512
                       + 0x8000
                       + (((unsigned __int16)v515 * v512 + 0x8000) >> 16)) >> 16);
                v518 = v516 - ((v516 * v512 + 0x8000 + ((v516 * v512 + 0x8000) >> 16)) >> 16);
                v519 = HIWORD(v514)
                     - ((HIWORD(v514) * v512 + 0x8000 + ((HIWORD(v514) * v512 + 0x8000) >> 16)) >> 16);
                v520 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v521 = 0xFFFF;
LABEL_503:
                  result = PDAcolorburnPDA_13500(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v520 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v521, (unsigned __int16)v517 | ((unsigned __int16)v518 << 16) | (unint64_t)(v513 << 48) | ((unint64_t)(unsigned __int16)v519 << 32), (unsigned __int16)v510);
                  v510 = HIWORD(result);
                  v523 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v523);
                  *((_WORD *)v8 + 1) = v523;
                  v522 = bswap32(HIDWORD(result));
                  goto LABEL_504;
                }
                v521 = v520;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_503;
                *(_WORD *)v8 = bswap32(v517) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v518) >> 16;
                v522 = bswap32(v519);
LABEL_504:
                *((_WORD *)v8 + 2) = HIWORD(v522);
                *((_WORD *)v8 + 3) = bswap32(v510) >> 16;
LABEL_505:
                v10 += v506;
                v524 = (unsigned __int16 *)&v15[8 * v506];
                if ((unint64_t)v524 >= v22)
                  v525 = v507;
                else
                  v525 = 0;
                v15 = (char *)&v524[4 * v525];
                v8 += v508;
                --v509;
              }
              while (v509);
              v10 += v687;
              v8 += 8 * v686;
              v526 = v689;
              v527 = &v689[8 * v685];
              v528 = v677;
              if ((unint64_t)v527 < v683)
                v528 = 0;
              v529 = &v527[8 * v528];
              v530 = v22 + 8 * v528 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v530;
                v526 = v529;
                v15 = v529;
              }
              v46 = v690 == 1;
              v689 = v526;
              --v690;
              if (v46)
                return result;
            }
          case 20:
            v531 = v17;
            v532 = -(uint64_t)v19;
            v678 = -(v685 * v18);
            v533 = 8 * v17;
            while (1)
            {
              v534 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_529;
                LODWORD(v535) = *v10 | (*v10 << 8);
                v536 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v537 = v535 ^ 0xFFFF;
                v538 = v536 - ((v536 * v537 + 0x8000 + ((v536 * v537 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v538)
                    goto LABEL_529;
                  LODWORD(v535) = v538;
                }
                v539 = bswap32(*((unsigned __int16 *)v15 + 2));
                v540 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v541 = HIWORD(v540);
                v542 = v540
                     - (((unsigned __int16)v540 * v537
                       + 0x8000
                       + (((unsigned __int16)v540 * v537 + 0x8000) >> 16)) >> 16);
                v543 = v541 - ((v541 * v537 + 0x8000 + ((v541 * v537 + 0x8000) >> 16)) >> 16);
                v544 = HIWORD(v539)
                     - ((HIWORD(v539) * v537 + 0x8000 + ((HIWORD(v539) * v537 + 0x8000) >> 16)) >> 16);
                v545 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v546 = 0xFFFF;
LABEL_527:
                  result = PDAsoftlightPDA_13502(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v545 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v546, (unsigned __int16)v542 | ((unsigned __int16)v543 << 16) | (unint64_t)(v538 << 48) | ((unint64_t)(unsigned __int16)v544 << 32), (unsigned __int16)v535);
                  v535 = HIWORD(result);
                  v548 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v548);
                  *((_WORD *)v8 + 1) = v548;
                  v547 = bswap32(HIDWORD(result));
                  goto LABEL_528;
                }
                v546 = v545;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_527;
                *(_WORD *)v8 = bswap32(v542) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v543) >> 16;
                v547 = bswap32(v544);
LABEL_528:
                *((_WORD *)v8 + 2) = HIWORD(v547);
                *((_WORD *)v8 + 3) = bswap32(v535) >> 16;
LABEL_529:
                v10 += v531;
                v549 = (unsigned __int16 *)&v15[8 * v531];
                if ((unint64_t)v549 >= v22)
                  v550 = v532;
                else
                  v550 = 0;
                v15 = (char *)&v549[4 * v550];
                v8 += v533;
                --v534;
              }
              while (v534);
              v10 += v687;
              v8 += 8 * v686;
              v551 = v689;
              v552 = &v689[8 * v685];
              v553 = v678;
              if ((unint64_t)v552 < v683)
                v553 = 0;
              v554 = &v552[8 * v553];
              v555 = v22 + 8 * v553 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v555;
                v551 = v554;
                v15 = v554;
              }
              v46 = v690 == 1;
              v689 = v551;
              --v690;
              if (v46)
                return result;
            }
          case 21:
            v556 = v17;
            v557 = -(uint64_t)v19;
            v679 = -(v685 * v18);
            v558 = 8 * v17;
            while (1)
            {
              v559 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_553;
                LODWORD(v560) = *v10 | (*v10 << 8);
                v561 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v562 = v560 ^ 0xFFFF;
                v563 = v561 - ((v561 * v562 + 0x8000 + ((v561 * v562 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v563)
                    goto LABEL_553;
                  LODWORD(v560) = v563;
                }
                v564 = bswap32(*((unsigned __int16 *)v15 + 2));
                v565 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v566 = HIWORD(v565);
                v567 = v565
                     - (((unsigned __int16)v565 * v562
                       + 0x8000
                       + (((unsigned __int16)v565 * v562 + 0x8000) >> 16)) >> 16);
                v568 = v566 - ((v566 * v562 + 0x8000 + ((v566 * v562 + 0x8000) >> 16)) >> 16);
                v569 = HIWORD(v564)
                     - ((HIWORD(v564) * v562 + 0x8000 + ((HIWORD(v564) * v562 + 0x8000) >> 16)) >> 16);
                v570 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v571 = 0xFFFF;
LABEL_551:
                  result = PDAhardlightPDA_13501(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v570 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v571, (unsigned __int16)v567 | ((unsigned __int16)v568 << 16) | (unint64_t)(v563 << 48) | ((unint64_t)(unsigned __int16)v569 << 32), (unsigned __int16)v560);
                  v560 = HIWORD(result);
                  v573 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v573);
                  *((_WORD *)v8 + 1) = v573;
                  v572 = bswap32(HIDWORD(result));
                  goto LABEL_552;
                }
                v571 = v570;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_551;
                *(_WORD *)v8 = bswap32(v567) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v568) >> 16;
                v572 = bswap32(v569);
LABEL_552:
                *((_WORD *)v8 + 2) = HIWORD(v572);
                *((_WORD *)v8 + 3) = bswap32(v560) >> 16;
LABEL_553:
                v10 += v556;
                v574 = (unsigned __int16 *)&v15[8 * v556];
                if ((unint64_t)v574 >= v22)
                  v575 = v557;
                else
                  v575 = 0;
                v15 = (char *)&v574[4 * v575];
                v8 += v558;
                --v559;
              }
              while (v559);
              v10 += v687;
              v8 += 8 * v686;
              v576 = v689;
              v577 = &v689[8 * v685];
              v578 = v679;
              if ((unint64_t)v577 < v683)
                v578 = 0;
              v579 = &v577[8 * v578];
              v580 = v22 + 8 * v578 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v580;
                v576 = v579;
                v15 = v579;
              }
              v46 = v690 == 1;
              v689 = v576;
              --v690;
              if (v46)
                return result;
            }
          case 22:
            v581 = v17;
            v582 = -(uint64_t)v19;
            v680 = -(v685 * v18);
            v583 = 8 * v17;
            while (1)
            {
              v584 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_577;
                LODWORD(v585) = *v10 | (*v10 << 8);
                v586 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v587 = v585 ^ 0xFFFF;
                v588 = v586 - ((v586 * v587 + 0x8000 + ((v586 * v587 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v588)
                    goto LABEL_577;
                  LODWORD(v585) = v588;
                }
                v589 = bswap32(*((unsigned __int16 *)v15 + 2));
                v590 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v591 = HIWORD(v590);
                v592 = v590
                     - (((unsigned __int16)v590 * v587
                       + 0x8000
                       + (((unsigned __int16)v590 * v587 + 0x8000) >> 16)) >> 16);
                v593 = v591 - ((v591 * v587 + 0x8000 + ((v591 * v587 + 0x8000) >> 16)) >> 16);
                v594 = HIWORD(v589)
                     - ((HIWORD(v589) * v587 + 0x8000 + ((HIWORD(v589) * v587 + 0x8000) >> 16)) >> 16);
                v595 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v596 = 0xFFFF;
LABEL_575:
                  result = PDAdifferencePDA_13503(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v595 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v596, (unsigned __int16)v592 | ((unsigned __int16)v593 << 16) | (unint64_t)(v588 << 48) | ((unint64_t)(unsigned __int16)v594 << 32), (unsigned __int16)v585);
                  v585 = HIWORD(result);
                  v598 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v598);
                  *((_WORD *)v8 + 1) = v598;
                  v597 = bswap32(HIDWORD(result));
                  goto LABEL_576;
                }
                v596 = v595;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_575;
                *(_WORD *)v8 = bswap32(v592) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v593) >> 16;
                v597 = bswap32(v594);
LABEL_576:
                *((_WORD *)v8 + 2) = HIWORD(v597);
                *((_WORD *)v8 + 3) = bswap32(v585) >> 16;
LABEL_577:
                v10 += v581;
                v599 = (unsigned __int16 *)&v15[8 * v581];
                if ((unint64_t)v599 >= v22)
                  v600 = v582;
                else
                  v600 = 0;
                v15 = (char *)&v599[4 * v600];
                v8 += v583;
                --v584;
              }
              while (v584);
              v10 += v687;
              v8 += 8 * v686;
              v601 = v689;
              v602 = &v689[8 * v685];
              v603 = v680;
              if ((unint64_t)v602 < v683)
                v603 = 0;
              v604 = &v602[8 * v603];
              v605 = v22 + 8 * v603 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v605;
                v601 = v604;
                v15 = v604;
              }
              v46 = v690 == 1;
              v689 = v601;
              --v690;
              if (v46)
                return result;
            }
          case 23:
            v606 = v17;
            v607 = -(uint64_t)v19;
            v681 = -(v685 * v18);
            v608 = 8 * v17;
            while (1)
            {
              v609 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_601;
                LODWORD(v610) = *v10 | (*v10 << 8);
                v611 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v612 = v610 ^ 0xFFFF;
                v613 = v611 - ((v611 * v612 + 0x8000 + ((v611 * v612 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v613)
                    goto LABEL_601;
                  LODWORD(v610) = v613;
                }
                v614 = bswap32(*((unsigned __int16 *)v15 + 2));
                v615 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v616 = HIWORD(v615);
                v617 = v615
                     - (((unsigned __int16)v615 * v612
                       + 0x8000
                       + (((unsigned __int16)v615 * v612 + 0x8000) >> 16)) >> 16);
                v618 = v616 - ((v616 * v612 + 0x8000 + ((v616 * v612 + 0x8000) >> 16)) >> 16);
                v619 = HIWORD(v614)
                     - ((HIWORD(v614) * v612 + 0x8000 + ((HIWORD(v614) * v612 + 0x8000) >> 16)) >> 16);
                v620 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v621 = 0xFFFF;
LABEL_599:
                  result = PDAexclusionPDA_13504(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v620 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v621, (unsigned __int16)v617 | ((unsigned __int16)v618 << 16) | (unint64_t)(v613 << 48) | ((unint64_t)(unsigned __int16)v619 << 32), (unsigned __int16)v610);
                  v610 = HIWORD(result);
                  v623 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v623);
                  *((_WORD *)v8 + 1) = v623;
                  v622 = bswap32(HIDWORD(result));
                  goto LABEL_600;
                }
                v621 = v620;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_599;
                *(_WORD *)v8 = bswap32(v617) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v618) >> 16;
                v622 = bswap32(v619);
LABEL_600:
                *((_WORD *)v8 + 2) = HIWORD(v622);
                *((_WORD *)v8 + 3) = bswap32(v610) >> 16;
LABEL_601:
                v10 += v606;
                v624 = (unsigned __int16 *)&v15[8 * v606];
                if ((unint64_t)v624 >= v22)
                  v625 = v607;
                else
                  v625 = 0;
                v15 = (char *)&v624[4 * v625];
                v8 += v608;
                --v609;
              }
              while (v609);
              v10 += v687;
              v8 += 8 * v686;
              v626 = v689;
              v627 = &v689[8 * v685];
              v628 = v681;
              if ((unint64_t)v627 < v683)
                v628 = 0;
              v629 = &v627[8 * v628];
              v630 = v22 + 8 * v628 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v630;
                v626 = v629;
                v15 = v629;
              }
              v46 = v690 == 1;
              v689 = v626;
              --v690;
              if (v46)
                return result;
            }
          case 24:
            v270 = v17;
            v271 = -(uint64_t)v19;
            v670 = -(v685 * v18);
            v272 = 8 * v17;
            while (1)
            {
              v273 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_283;
                LODWORD(v274) = *v10 | (*v10 << 8);
                v275 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v276 = v274 ^ 0xFFFF;
                v277 = v275 - ((v275 * v276 + 0x8000 + ((v275 * v276 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v277)
                    goto LABEL_283;
                  LODWORD(v274) = v277;
                }
                v278 = bswap32(*((unsigned __int16 *)v15 + 2));
                v279 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v280 = HIWORD(v279);
                v281 = v279
                     - (((unsigned __int16)v279 * v276
                       + 0x8000
                       + (((unsigned __int16)v279 * v276 + 0x8000) >> 16)) >> 16);
                v282 = v280 - ((v280 * v276 + 0x8000 + ((v280 * v276 + 0x8000) >> 16)) >> 16);
                v283 = HIWORD(v278)
                     - ((HIWORD(v278) * v276 + 0x8000 + ((HIWORD(v278) * v276 + 0x8000) >> 16)) >> 16);
                v284 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v285 = 0xFFFF;
LABEL_281:
                  result = PDAhuePDA_13505(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v284 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v285, (unsigned __int16)v281 | ((unsigned __int16)v282 << 16) | (unint64_t)(v277 << 48) | ((unint64_t)(unsigned __int16)v283 << 32), (unsigned __int16)v274);
                  v274 = HIWORD(result);
                  v287 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v287);
                  *((_WORD *)v8 + 1) = v287;
                  v286 = bswap32(HIDWORD(result));
                  goto LABEL_282;
                }
                v285 = v284;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_281;
                *(_WORD *)v8 = bswap32(v281) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v282) >> 16;
                v286 = bswap32(v283);
LABEL_282:
                *((_WORD *)v8 + 2) = HIWORD(v286);
                *((_WORD *)v8 + 3) = bswap32(v274) >> 16;
LABEL_283:
                v10 += v270;
                v288 = (unsigned __int16 *)&v15[8 * v270];
                if ((unint64_t)v288 >= v22)
                  v289 = v271;
                else
                  v289 = 0;
                v15 = (char *)&v288[4 * v289];
                v8 += v272;
                --v273;
              }
              while (v273);
              v10 += v687;
              v8 += 8 * v686;
              v290 = v689;
              v291 = &v689[8 * v685];
              v292 = v670;
              if ((unint64_t)v291 < v683)
                v292 = 0;
              v293 = &v291[8 * v292];
              v294 = v22 + 8 * v292 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v294;
                v290 = v293;
                v15 = v293;
              }
              v46 = v690 == 1;
              v689 = v290;
              --v690;
              if (v46)
                return result;
            }
          case 25:
            v295 = v17;
            v296 = -(uint64_t)v19;
            v671 = -(v685 * v18);
            v297 = 8 * v17;
            while (1)
            {
              v298 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_307;
                LODWORD(v299) = *v10 | (*v10 << 8);
                v300 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v301 = v299 ^ 0xFFFF;
                v302 = v300 - ((v300 * v301 + 0x8000 + ((v300 * v301 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v302)
                    goto LABEL_307;
                  LODWORD(v299) = v302;
                }
                v303 = bswap32(*((unsigned __int16 *)v15 + 2));
                v304 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v305 = HIWORD(v304);
                v306 = v304
                     - (((unsigned __int16)v304 * v301
                       + 0x8000
                       + (((unsigned __int16)v304 * v301 + 0x8000) >> 16)) >> 16);
                v307 = v305 - ((v305 * v301 + 0x8000 + ((v305 * v301 + 0x8000) >> 16)) >> 16);
                v308 = HIWORD(v303)
                     - ((HIWORD(v303) * v301 + 0x8000 + ((HIWORD(v303) * v301 + 0x8000) >> 16)) >> 16);
                v309 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v310 = 0xFFFF;
LABEL_305:
                  result = PDAsaturationPDA_13506(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v309 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v310, (unsigned __int16)v306 | ((unsigned __int16)v307 << 16) | (unint64_t)(v302 << 48) | ((unint64_t)(unsigned __int16)v308 << 32), (unsigned __int16)v299);
                  v299 = HIWORD(result);
                  v312 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v312);
                  *((_WORD *)v8 + 1) = v312;
                  v311 = bswap32(HIDWORD(result));
                  goto LABEL_306;
                }
                v310 = v309;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_305;
                *(_WORD *)v8 = bswap32(v306) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v307) >> 16;
                v311 = bswap32(v308);
LABEL_306:
                *((_WORD *)v8 + 2) = HIWORD(v311);
                *((_WORD *)v8 + 3) = bswap32(v299) >> 16;
LABEL_307:
                v10 += v295;
                v313 = (unsigned __int16 *)&v15[8 * v295];
                if ((unint64_t)v313 >= v22)
                  v314 = v296;
                else
                  v314 = 0;
                v15 = (char *)&v313[4 * v314];
                v8 += v297;
                --v298;
              }
              while (v298);
              v10 += v687;
              v8 += 8 * v686;
              v315 = v689;
              v316 = &v689[8 * v685];
              v317 = v671;
              if ((unint64_t)v316 < v683)
                v317 = 0;
              v318 = &v316[8 * v317];
              v319 = v22 + 8 * v317 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v319;
                v315 = v318;
                v15 = v318;
              }
              v46 = v690 == 1;
              v689 = v315;
              --v690;
              if (v46)
                return result;
            }
          case 26:
            v631 = v17;
            v632 = -(uint64_t)v19;
            v682 = -(v685 * v18);
            v633 = 8 * v17;
            while (1)
            {
              v634 = v688;
              do
              {
                if (!*v10)
                  goto LABEL_625;
                LODWORD(v635) = *v10 | (*v10 << 8);
                v636 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
                v637 = v635 ^ 0xFFFF;
                v638 = v636 - ((v636 * v637 + 0x8000 + ((v636 * v637 + 0x8000) >> 16)) >> 16);
                if (v20)
                {
                  if (!(_WORD)v638)
                    goto LABEL_625;
                  LODWORD(v635) = v638;
                }
                v639 = bswap32(*((unsigned __int16 *)v15 + 2));
                v640 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
                v641 = HIWORD(v640);
                v642 = v640
                     - (((unsigned __int16)v640 * v637
                       + 0x8000
                       + (((unsigned __int16)v640 * v637 + 0x8000) >> 16)) >> 16);
                v643 = v641 - ((v641 * v637 + 0x8000 + ((v641 * v637 + 0x8000) >> 16)) >> 16);
                v644 = HIWORD(v639)
                     - ((HIWORD(v639) * v637 + 0x8000 + ((HIWORD(v639) * v637 + 0x8000) >> 16)) >> 16);
                v645 = __rev16(*((unsigned __int16 *)v8 + 3));
                if (!v4)
                {
                  v646 = 0xFFFF;
LABEL_623:
                  result = PDAluminosityPDA_13507((unsigned __int16)v642 | ((unsigned __int16)v643 << 16) | (unint64_t)(v638 << 48) | ((unint64_t)(unsigned __int16)v644 << 32), (unsigned __int16)v635, ((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v645 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v646);
                  v635 = HIWORD(result);
                  v648 = bswap32(result);
                  *(_WORD *)v8 = HIWORD(v648);
                  *((_WORD *)v8 + 1) = v648;
                  v647 = bswap32(HIDWORD(result));
                  goto LABEL_624;
                }
                v646 = v645;
                if (*((_WORD *)v8 + 3))
                  goto LABEL_623;
                *(_WORD *)v8 = bswap32(v642) >> 16;
                *((_WORD *)v8 + 1) = bswap32(v643) >> 16;
                v647 = bswap32(v644);
LABEL_624:
                *((_WORD *)v8 + 2) = HIWORD(v647);
                *((_WORD *)v8 + 3) = bswap32(v635) >> 16;
LABEL_625:
                v10 += v631;
                v649 = (unsigned __int16 *)&v15[8 * v631];
                if ((unint64_t)v649 >= v22)
                  v650 = v632;
                else
                  v650 = 0;
                v15 = (char *)&v649[4 * v650];
                v8 += v633;
                --v634;
              }
              while (v634);
              v10 += v687;
              v8 += 8 * v686;
              v651 = v689;
              v652 = &v689[8 * v685];
              v653 = v682;
              if ((unint64_t)v652 < v683)
                v653 = 0;
              v654 = &v652[8 * v653];
              v655 = v22 + 8 * v653 + 8 * v685;
              if (v684)
              {
                v15 += 8 * v685;
              }
              else
              {
                v22 = v655;
                v651 = v654;
                v15 = v654;
              }
              v46 = v690 == 1;
              v689 = v651;
              --v690;
              if (v46)
                return result;
            }
          case 27:
            v320 = v17;
            v321 = -(uint64_t)v19;
            v672 = -(v685 * v18);
            v322 = 8 * v17;
            break;
          default:
            return result;
        }
LABEL_320:
        v323 = v688;
        while (1)
        {
          if (*v10)
          {
            LODWORD(v324) = *v10 | (*v10 << 8);
            v325 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
            v326 = v324 ^ 0xFFFF;
            v327 = v325 - ((v325 * v326 + 0x8000 + ((v325 * v326 + 0x8000) >> 16)) >> 16);
            if (!v20)
              goto LABEL_325;
            if ((_WORD)v327)
              break;
          }
LABEL_331:
          v10 += v320;
          v338 = (unsigned __int16 *)&v15[8 * v320];
          if ((unint64_t)v338 >= v22)
            v339 = v321;
          else
            v339 = 0;
          v15 = (char *)&v338[4 * v339];
          v8 += v322;
          if (!--v323)
          {
            v10 += v687;
            v8 += 8 * v686;
            v340 = v689;
            v341 = &v689[8 * v685];
            v342 = v672;
            if ((unint64_t)v341 < v683)
              v342 = 0;
            v343 = &v341[8 * v342];
            v344 = v22 + 8 * v342 + 8 * v685;
            if (v684)
            {
              v15 += 8 * v685;
            }
            else
            {
              v22 = v344;
              v340 = v343;
              v15 = v343;
            }
            v46 = v690 == 1;
            v689 = v340;
            --v690;
            if (v46)
              return result;
            goto LABEL_320;
          }
        }
        LODWORD(v324) = v327;
LABEL_325:
        v328 = bswap32(*((unsigned __int16 *)v15 + 2));
        v329 = bswap32(*((unsigned __int16 *)v15 + 1) | (*(unsigned __int16 *)v15 << 16));
        v330 = HIWORD(v329);
        v331 = v329
             - (((unsigned __int16)v329 * v326 + 0x8000 + (((unsigned __int16)v329 * v326 + 0x8000) >> 16)) >> 16);
        v332 = v330 - ((v330 * v326 + 0x8000 + ((v330 * v326 + 0x8000) >> 16)) >> 16);
        v333 = HIWORD(v328)
             - ((HIWORD(v328) * v326 + 0x8000 + ((HIWORD(v328) * v326 + 0x8000) >> 16)) >> 16);
        v334 = __rev16(*((unsigned __int16 *)v8 + 3));
        if (v4)
        {
          v335 = v334;
          if (!*((_WORD *)v8 + 3))
          {
            *(_WORD *)v8 = bswap32(v331) >> 16;
            *((_WORD *)v8 + 1) = bswap32(v332) >> 16;
            v336 = bswap32(v333);
LABEL_330:
            *((_WORD *)v8 + 2) = HIWORD(v336);
            *((_WORD *)v8 + 3) = bswap32(v324) >> 16;
            goto LABEL_331;
          }
        }
        else
        {
          v335 = 0xFFFF;
        }
        result = PDAluminosityPDA_13507(((unint64_t)(bswap32(*((unsigned __int16 *)v8 + 2)) >> 16) << 32) | (v334 << 48) | bswap32(*((unsigned __int16 *)v8 + 1)) & 0xFFFF0000 | (unint64_t)(bswap32(*(unsigned __int16 *)v8) >> 16), v335, (unsigned __int16)v331 | ((unsigned __int16)v332 << 16) | (unint64_t)(v327 << 48) | ((unint64_t)(unsigned __int16)v333 << 32), (unsigned __int16)v324);
        v324 = HIWORD(result);
        v337 = bswap32(result);
        *(_WORD *)v8 = HIWORD(v337);
        *((_WORD *)v8 + 1) = v337;
        v336 = bswap32(HIDWORD(result));
        goto LABEL_330;
      }
      v15 = 0;
      v22 = 0;
      v17 = 1;
LABEL_15:
      v683 = 0;
      v689 = 0;
      v685 = v14 - v3;
      v684 = 1;
      goto LABEL_16;
    }
    v14 = v13 >> 3;
    v15 = (char *)(v5 + 8 * (v11 + v14 * v12));
    if (v14 != v7)
    {
      v17 = 1;
LABEL_14:
      v18 = 0;
      v3 = v17 * v688;
      v20 = v6 != 0;
      v686 = v7 - v3;
      v687 = v9 - v3;
      v22 = -1;
      v19 = v14;
      goto LABEL_15;
    }
    if (v8 - v15 >= 1)
    {
      if (v688 >= (uint64_t)((unint64_t)(v8 - v15) >> 3))
      {
        v8 += 8 * v688 - 8;
        v15 += 8 * v688 - 8;
        v10 += v688 - 1;
        v17 = -1;
        goto LABEL_13;
      }
      v16 = *(int *)(result + 8) - 1;
      if (v8 <= &v15[8 * v7 * v16 - 8 + 8 * v688])
      {
        v8 += 8 * v7 * v16;
        v14 = -(uint64_t)v7;
        v10 += v9 * v16;
        v9 = -v9;
        v17 = 1;
        v15 += 8 * v7 * v16;
        v7 = -(uint64_t)v7;
        goto LABEL_14;
      }
    }
    v17 = 1;
LABEL_13:
    v14 = (unint64_t)*(int *)(result + 28) >> 3;
    goto LABEL_14;
  }
  return result;
}

_WORD *RGBA64_DMplusDAM(_WORD *result, unint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = (unsigned __int16)a2 * (unint64_t)a3 + (unsigned __int16)a4 * (unint64_t)a6;
  v7 = WORD1(a2) * (unint64_t)a3 + WORD1(a4) * (unint64_t)a6;
  v8 = WORD2(a2) * (unint64_t)a3 + WORD2(a4) * (unint64_t)a6;
  v9 = HIWORD(a2) * a3 + a6 * (unint64_t)a5;
  if (v6 >= 0xFFFE8000)
    v6 = 4294868992;
  if (v7 >= 0xFFFE8000)
    v7 = 4294868992;
  if (v8 >= 0xFFFE8000)
    v8 = 4294868992;
  if (v9 >= 0xFFFE8000)
    v9 = 4294868992;
  *result = bswap32(((v6 + 0x8000) >> 16) + v6 + 0x8000);
  result[1] = bswap32(((v7 + 0x8000) >> 16) + v7 + 0x8000);
  result[2] = bswap32(((v8 + 0x8000) >> 16) + v8 + 0x8000);
  result[3] = bswap32(((v9 + 0x8000) >> 16) + v9 + 0x8000);
  return result;
}

_DWORD *eStateRetain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void eStateRelease(uint64_t a1, void **a2)
{
  PDFEStateRelease(a2);
}

BOOL eStateEqual(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL8 result;
  BOOL v6;
  int v7;
  int v8;

  if (a1 == a2)
    return 1;
  v4 = *(_DWORD *)(a1 + 44);
  if (v4 != *(_DWORD *)(a2 + 44) || strcmp(*(const char **)(a1 + 56), *(const char **)(a2 + 56)))
    return 0;
  switch(v4)
  {
    case 0:
      v7 = *(unsigned __int8 *)(a1 + 48);
      v8 = *(unsigned __int8 *)(a2 + 48);
      goto LABEL_11;
    case 1:
      v7 = *(_DWORD *)(a1 + 48);
      v8 = *(_DWORD *)(a2 + 48);
LABEL_11:
      v6 = v7 == v8;
      goto LABEL_14;
    case 2:
      v6 = *(double *)(a1 + 48) == *(double *)(a2 + 48);
      goto LABEL_14;
    case 3:
      v6 = strcmp(*(const char **)(a1 + 48), *(const char **)(a2 + 48)) == 0;
      goto LABEL_14;
    case 4:
    case 6:
      v6 = *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
LABEL_14:
      result = v6;
      break;
    case 5:
      result = CGStyleEqualToStyle(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
      break;
    case 7:
      result = PDFClipMaskEqualToClipMask(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t eStateHash(uint64_t a1)
{
  unsigned int v1;
  _BYTE *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 44);
  v2 = *(_BYTE **)(a1 + 56);
  v3 = *v2;
  if (*v2)
  {
    v4 = v2 + 1;
    do
    {
      v1 = 257 * v1 + v3;
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return v1;
}

_BYTE *emitEStateDefinition(_BYTE *result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  double v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CGColorSpace *ColorSpace;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  const void **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const CGFloat *v123;
  CGColorSpaceRef v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  PDFDocumentPrivate *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t NumberOfComponents;
  const CGFloat *Components;
  uint64_t *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *value;

  if (!result[40])
  {
    v9 = result;
    v11 = *((_QWORD *)result + 1);
    v10 = *((_QWORD *)result + 2);
    if (!v10)
    {
      v10 = PDFXRefTableAddObject(*(_QWORD **)(v11 + 464));
      *((_QWORD *)v9 + 2) = v10;
    }
    PDFDocumentBeginObject(v11, v10, a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v171);
    PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Type /ExtGState", v18, v19, v20, v21, v22, v23, v172);
    switch(*((_DWORD *)v9 + 11))
    {
      case 0:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s %b", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        goto LABEL_73;
      case 1:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s %d", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        goto LABEL_73;
      case 2:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s %f", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        goto LABEL_73;
      case 3:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s /%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        goto LABEL_73;
      case 4:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        v36 = *((_QWORD *)v9 + 6);
        if (v36)
        {
          v37 = *((_QWORD *)v9 + 1);
          if (*(double (**)(uint64_t, double *, _QWORD *))(v36 + 72) == evaluate_identity)
          {
            v38 = "/Identity";
            goto LABEL_72;
          }
        }
        else
        {
          v37 = *((_QWORD *)v9 + 1);
        }
        v107 = *((_QWORD *)PDFDocumentAddFunction(v37, v36) + 6);
        v108 = *((_QWORD *)v9 + 1);
        goto LABEL_43;
      case 5:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        v39 = *((_QWORD *)v9 + 6);
        if (!v39)
          goto LABEL_40;
        v40 = *(double *)(v39 + 64);
        v41 = v40 * __sincos_stret((*(double *)(v39 + 48) + -180.0) * 3.14159265 / 180.0).__cosval;
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"<<", v42, v43, v44, v45, v46, v47, v173);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Type /Style", v48, v49, v50, v51, v52, v53, v174);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Subtype /Shadow", v54, v55, v56, v57, v58, v59, v175);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Offset [ %f %f ]", v60, v61, v62, v63, v64, v65, COERCE__INT64(v41));
        if (*(double *)(v39 + 72) != 0.0)
          PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Radius %f", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v39 + 72));
        v66 = *((_QWORD *)v9 + 6);
        if (!v66)
          goto LABEL_71;
        v67 = *(_QWORD *)(v66 + 24);
        if (!v67)
          goto LABEL_71;
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/ColorSpace", v30, v31, v32, v33, v34, v35, v173);
        if ((v67 & 0x8000000000000000) != 0)
          ColorSpace = CGTaggedColorGetColorSpace(v67, v68, v69, v70, v71, v72, v73, v74);
        else
          ColorSpace = *(CGColorSpace **)(v67 + 24);
        v137 = PDFDocumentResolveColorSpace(*((_QWORD *)v9 + 1), ColorSpace);
        v138 = PDFDocumentAddColorSpace(*((_QWORD *)v9 + 1), v137);
        PDFColorSpaceEmitReference(v138, v139, v140, v141, v142, v143, v144, v145);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Color [", v146, v147, v148, v149, v150, v151, v176);
        if ((v67 & 0x8000000000000000) != 0)
          NumberOfComponents = CGTaggedColorGetNumberOfComponents(v67, v152, v153, v154, v155, v156, v157, v158);
        else
          NumberOfComponents = *(_QWORD *)(v67 + 56);
        Components = CGColorGetComponents((CGColorRef)v67);
        if (NumberOfComponents)
        {
          v161 = (uint64_t *)Components;
          do
          {
            v162 = *v161++;
            PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"%f", v30, v31, v32, v33, v34, v35, v162);
            --NumberOfComponents;
          }
          while (NumberOfComponents);
        }
        v130 = *((_QWORD *)v9 + 1);
        v163 = "]";
        goto LABEL_70;
      case 6:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        v76 = (_QWORD *)*((_QWORD *)v9 + 6);
        if (v76)
        {
          v77 = v76[13];
          v78 = *((_QWORD *)v9 + 1);
          v79 = *(void **)(v78 + 360);
          if (v79 || (v79 = PDFFormSetCreate(*((_QWORD *)v9 + 1)), (*(_QWORD *)(v78 + 360) = v79) != 0))
          {
            if (!*((_QWORD *)v79 + 1))
              *((_QWORD *)v79 + 1) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callbacks_11326);
            value = 0;
            v86 = *(_QWORD *)v79;
            v87 = malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
            __CFSetLastAllocationEventName();
            if (v87)
            {
              *(_DWORD *)v87 = 1;
              v87[1] = v86;
              v87[2] = PDFContentStreamCreate(v86, 0);
              *((_DWORD *)v87 + 6) = 1;
              CFRetain(v76);
              v87[4] = v76;
              v87[8] = 0;
              v87[9] = 0;
              v87[10] = -1;
            }
            if (!CFSetGetValueIfPresent(*((CFSetRef *)v79 + 1), v87, (const void **)&value))
            {
              v95 = (*((_DWORD *)v79 + 6) + 1);
              *((_DWORD *)v79 + 6) = v95;
              if (*((_DWORD *)v87 + 6) == 1)
                v96 = "Sm";
              else
                v96 = "Fm";
              snprintf_l((char *)v87 + 40, 0x10uLL, 0, "%s%zu", v96, v95);
              CFSetAddValue(*((CFMutableSetRef *)v79 + 1), v87);
              value = v87;
            }
            PDFFormRelease(v87, v88, v89, v90, v91, v92, v93, v94);
            v97 = (const void **)*((_QWORD *)v79 + 2);
            if (!v97)
            {
              v97 = CGOrderedSetCreate();
              *((_QWORD *)v79 + 2) = v97;
            }
            CGOrderedSetAddValue((CFSetRef *)v97, value);
            v79 = value;
          }
          PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"<<", v80, v81, v82, v83, v84, v85, v173);
          v103 = *((_QWORD *)v79 + 2);
          if (v103)
            v104 = *(_QWORD *)(v103 + 8);
          else
            v104 = 0;
          PDFDocumentPrintReference(*((_QWORD *)v9 + 1), (uint64_t)"/G %R", v104, v98, v99, v100, v101, v102);
          v115 = *((_QWORD *)v9 + 1);
          if (v77)
          {
            PDFDocumentPrintf(v115, (uint64_t)"/S /Luminosity", v109, v110, v111, v112, v113, v114, v177);
            v123 = CGColorGetComponents((CGColorRef)v77);
            if ((v77 & 0x8000000000000000) != 0)
              v124 = CGTaggedColorGetColorSpace(v77, v116, v117, v118, v119, v120, v121, v122);
            else
              v124 = *(CGColorSpaceRef *)(v77 + 24);
            if (v124)
            {
              v126 = *(_QWORD *)(*((_QWORD *)v124 + 3) + 40);
              PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/BC [", v117, v118, v119, v120, v121, v122, v178);
              for (; v126; --v126)
              {
                v127 = *(_QWORD *)v123++;
                PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"%f", v109, v110, v111, v112, v113, v114, v127);
              }
            }
            else
            {
              PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/BC [", v117, v118, v119, v120, v121, v122, v178);
            }
            v115 = *((_QWORD *)v9 + 1);
            v125 = "]";
          }
          else
          {
            v125 = "/S /Alpha";
          }
          PDFDocumentPrintf(v115, (uint64_t)v125, v109, v110, v111, v112, v113, v114, v177);
          v128 = *((_QWORD *)v9 + 6);
          if (v128)
          {
            v129 = *(_QWORD *)(v128 + 112);
            if (v129)
            {
              v130 = *((_QWORD *)v9 + 1);
              if (*(double (**)(uint64_t, double *, _QWORD *))(v129 + 72) == evaluate_identity)
              {
                v163 = "/TR /Identity";
LABEL_70:
                PDFDocumentPrintf(v130, (uint64_t)v163, v30, v31, v32, v33, v34, v35, v173);
              }
              else
              {
                v131 = PDFDocumentAddFunction(v130, v129);
                PDFDocumentPrintReference(*((_QWORD *)v9 + 1), (uint64_t)"/TR %R", v131[6], v132, v133, v134, v135, v136);
              }
            }
          }
LABEL_71:
          v37 = *((_QWORD *)v9 + 1);
          v38 = ">>";
        }
        else
        {
LABEL_40:
          v37 = *((_QWORD *)v9 + 1);
          v38 = "/None";
        }
        goto LABEL_72;
      case 7:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 7));
        v105 = *((_QWORD *)v9 + 6);
        v106 = *((_QWORD *)v9 + 1);
        if (v105)
        {
          v107 = *(_QWORD *)(v105 + 16);
          if (!v107)
          {
            v107 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)(v105 + 8) + 464));
            *(_QWORD *)(v105 + 16) = v107;
          }
          v108 = v106;
LABEL_43:
          PDFDocumentPrintReference(v108, (uint64_t)"%R", v107, v31, v32, v33, v34, v35);
        }
        else
        {
          v38 = "/None";
          v37 = *((_QWORD *)v9 + 1);
LABEL_72:
          PDFDocumentPrintf(v37, (uint64_t)v38, v30, v31, v32, v33, v34, v35, v173);
        }
LABEL_73:
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)">>", v24, v25, v26, v27, v28, v29, v173);
        result = PDFDocumentEndObject(*((_QWORD *)v9 + 1), v164, v165, v166, v167, v168, v169, v170);
        v9[40] = 1;
        break;
      default:
        goto LABEL_73;
    }
  }
  *a2 = 1;
  return result;
}

char *aa_rectat(uint64_t a1, float a2, float a3, float a4, float a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  char *result;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  int v40;
  int v41;
  double v42;
  _DWORD v44[5];
  int v45;
  int v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(a1 + 168);
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  result = (char *)aa_close(a1);
  ++*(_DWORD *)(a1 + 180);
  if (v6 != 0.0)
  {
    v7 = v6 * v7;
    v8 = v6 * v8;
    v9 = v6 * v9;
    v10 = v6 * v10;
  }
  v12 = *(_DWORD *)(a1 + 176);
  if ((v12 & 0x30000) != 0)
  {
    v14 = *(double *)(a1 + 64);
    v13 = *(double *)(a1 + 72);
    v16 = *(double *)(a1 + 80);
    v15 = *(double *)(a1 + 88);
    v17 = fabs(v7);
    v18 = -1.0e15;
    if (v7 <= 0.0)
      v19 = -1.0e15;
    else
      v19 = 1.0e15;
    if (v17 >= 1.0e15)
      v7 = v19;
    v20 = fabs(v8);
    if (v8 <= 0.0)
      v21 = -1.0e15;
    else
      v21 = 1.0e15;
    if (v20 >= 1.0e15)
      v8 = v21;
    *(double *)(a1 + 48) = v7;
    *(double *)(a1 + 56) = v8;
    *(double *)(a1 + 32) = v7;
    *(double *)(a1 + 40) = v8;
    v22 = (v7 > v16) | (4 * (v7 < v14));
    v23 = (8 * (v8 < v13)) | (2 * (v8 > v15));
    if (v23)
      v24 = v22 == 0;
    else
      v24 = 1;
    if (v24)
      v25 = 0;
    else
      v25 = 16;
    v26 = v22 | v23 | v25;
    if (v26)
    {
      if (v7 <= v16)
        v27 = v7;
      else
        v27 = v16;
      if (v7 < v14)
        v7 = v14;
      else
        v7 = v27;
      if (v8 < v13)
      {
        v8 = v13;
      }
      else if (v8 > v15)
      {
        v8 = v15;
      }
    }
    *(_DWORD *)(a1 + 176) = v12 & 0xFFFF0000 | (v26 << 8) | v26;
    v29 = fabs(v9);
    if (v9 <= 0.0)
      v30 = -1.0e15;
    else
      v30 = 1.0e15;
    if (v29 >= 1.0e15)
      v9 = v30;
    v31 = fabs(v10);
    if (v10 > 0.0)
      v18 = 1.0e15;
    if (v31 >= 1.0e15)
      v10 = v18;
    v32 = (v9 > v16) | (4 * (v9 < v14));
    v33 = (8 * (v10 < v13)) | (2 * (v10 > v15));
    if (v33)
      v34 = v32 == 0;
    else
      v34 = 1;
    if (v34)
      v35 = 0;
    else
      v35 = 16;
    v36 = v32 | v33 | v35;
    if (v36)
    {
      if (v9 <= v16)
        v16 = v9;
      if (v9 < v14)
        v9 = v14;
      else
        v9 = v16;
      if (v10 < v13)
      {
        v10 = v13;
      }
      else if (v10 > v15)
      {
        v10 = v15;
      }
    }
    v28 = (v36 & v26 & 0xF) != 0;
  }
  else
  {
    v28 = 0;
    *(double *)(a1 + 48) = v7;
    *(double *)(a1 + 56) = v8;
    *(double *)(a1 + 32) = v7;
    *(double *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 176) = v12 & 0xFFFF0000;
  }
  v37 = *(double *)(a1 + 160);
  v38 = *(double *)(a1 + 128);
  v39 = *(double *)(a1 + 136);
  v40 = (int)(v37 + v38 * v7);
  v41 = (int)(v37 + v39 * v8);
  *(_DWORD *)(a1 + 16) = v40;
  *(_DWORD *)(a1 + 20) = v41;
  *(_DWORD *)(a1 + 24) = v40;
  *(_DWORD *)(a1 + 28) = v41;
  if (!v28)
  {
    v42 = v37 + v38 * v9;
    if (v40 != (int)v42 && v41 != (int)(v37 + v39 * v10))
    {
      v46 = v40;
      v47 = (int)(v37 + v39 * v8);
      v44[0] = (int)v42;
      v44[1] = v47;
      v44[4] = v40;
      v45 = (int)(v37 + v39 * v10);
      v44[2] = (int)v42;
      v44[3] = v45;
      return aa_add_edges((char *)a1, (uint64_t)v44, 4);
    }
  }
  return result;
}

uint64_t aa_distribute_clip_edges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;

  *(_QWORD *)(a1 + 216) = 0;
  v4 = (uint64_t *)(a1 + 216);
  v5 = *(_DWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 224) = 0;
  v6 = *(uint64_t **)(a1 + 192);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (v5 >> 20) & 3;
    v13 = v12 - 1;
    while (1)
    {
      v14 = *((_DWORD *)v6 + 3);
      if (v14)
        break;
      v17 = v8;
      v23 = v7;
LABEL_58:
      v6 = (uint64_t *)*v6;
      v7 = v23;
      v8 = v17;
      if (!v6)
        return v11;
    }
    v15 = 0;
    v16 = v6 + 3;
    while (1)
    {
      if (*((_WORD *)v16 + 22))
      {
        v17 = *((unsigned int *)v16 + 6);
        v18 = *((unsigned int *)v16 + 7);
        if ((int)a4 >= (int)v17 && (int)v18 >= (int)a3)
        {
          v20 = *((_DWORD *)v16 + 4);
          v21 = *((_DWORD *)v16 + 5);
          if (*((_BYTE *)v16 + 47) == 1)
          {
            if ((int)v18 > (int)a4)
            {
              v21 += (unint64_t)(*((int *)v16 + 9) * (uint64_t)((int)a4 - (int)v17)) >> 12;
              v18 = a4;
            }
            if ((int)a3 > (int)v17)
            {
              v20 += (unint64_t)(*((int *)v16 + 9) * (uint64_t)((int)a3 - (int)v17)) >> 12;
              v17 = a3;
            }
          }
          else
          {
            v17 = (int)v17 <= (int)a3 ? a3 : v17;
            v18 = (int)v18 >= (int)a4 ? a4 : v18;
          }
          if ((int)v17 < (int)v18)
          {
            if (v12)
            {
              v21 = v20;
              v22 = v17;
              v23 = v18;
            }
            else
            {
              v24 = (4095 - v18);
              v23 = (4095 - v17);
              v22 = v18;
              LODWORD(v18) = v17;
              v17 = v24;
            }
            *((_DWORD *)v16 + 10) = v21;
            if (!v9 || (int)v17 < (int)v7 || (v25 = v9, (v17 ^ v7) >= 0x1000))
            {
              if (!v10 || (int)v17 < (int)v8 || (v25 = v10, (v17 ^ v8) >= 0x1000))
                v25 = (_QWORD *)(a2 + 8 * (v22 >> 12));
            }
            v26 = (uint64_t *)*v25;
            if (*v25)
            {
              do
              {
                v27 = v26;
                v28 = *((_DWORD *)v26 + 5) - v22;
                if (v28)
                {
                  if (v28 * v13 > 0)
                    goto LABEL_45;
                }
                else if (!*((_DWORD *)v27 + 4))
                {
                  goto LABEL_45;
                }
                v26 = (uint64_t *)*v27;
                v25 = v27;
              }
              while (*v27);
              v10 = v27;
              v27 = 0;
            }
            else
            {
              v27 = 0;
LABEL_45:
              v10 = v25;
            }
            v16[6] = (uint64_t)v27;
            v16[7] = (uint64_t)v16;
            *((_DWORD *)v16 + 16) = 0;
            *((_DWORD *)v16 + 17) = v22;
            *v10 = v16 + 6;
            if (!v9 || (int)v23 < (int)v7 || (v23 ^ v7) >= 0x1000)
            {
              if ((int)v23 < (int)v17 || (v9 = v10, (v23 ^ v17) >= 0x1000))
                v9 = (_QWORD *)(a2 + 8 * ((int)v18 >> 12));
            }
            v29 = (uint64_t *)*v9;
            if (*v9)
            {
              do
              {
                v30 = *((_DWORD *)v29 + 5) - v18;
                if (!v30)
                  break;
                if (v30 * v13 > 0)
                  break;
                v9 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            v16[9] = (uint64_t)v29;
            v16[10] = (uint64_t)v16;
            *((_DWORD *)v16 + 22) = 1;
            *((_DWORD *)v16 + 23) = v18;
            v11 = (v11 + 1);
            *v9 = v16 + 9;
            goto LABEL_27;
          }
        }
        v16[9] = *v4;
        v16[6] = (uint64_t)(v16 + 9);
        *v4 = (uint64_t)(v16 + 6);
      }
      else
      {
        *v16 = *(_QWORD *)(a1 + 224);
        *(_QWORD *)(a1 + 224) = v16;
      }
      v17 = v8;
      v23 = v7;
LABEL_27:
      ++v15;
      v16 += 12;
      v7 = v23;
      v8 = v17;
      if (v15 == v14)
        goto LABEL_58;
    }
  }
  return 0;
}

_DWORD *patternRetain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void patternRelease(int a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PDFPatternRelease(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

__n128 patternKeyRetain(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  __n128 result;
  __n128 v5;
  __n128 v6;

  v3 = (__n128 *)malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
  v5 = a2[1];
  result = a2[2];
  v6 = *a2;
  v3[3].n128_u64[0] = a2[3].n128_u64[0];
  v3[1] = v5;
  v3[2] = result;
  *v3 = v6;
  return result;
}

void patternKeyRelease(int a1, void *a2)
{
  free(a2);
}

uint64_t patternKeyEqual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & (*(double *)(a1 + 48) == *(double *)(a2 + 48));
  else
    return 0;
}

unint64_t patternKeyHash(double *a1)
{
  return (unint64_t)((a1[5] + a1[6]) * 1000.0) + *(unsigned int *)a1;
}

void emitPatternDefinition(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  BOOL v148;
  unsigned int *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  _OWORD v184[2];

  if (!*(_BYTE *)(a1 + 96))
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(v10 + 20) != 1
      || ((v11 = *(_DWORD *)(*(_QWORD *)(v10 + 80) + 20), v12 = v11 > 4, v13 = (1 << v11) & 0x16, !v12)
        ? (v14 = v13 == 0)
        : (v14 = 1),
          v14))
    {
      PDFContentStreamBegin(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8, v169);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /Pattern", v18, v19, v20, v21, v22, v23, v170);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/PatternType 1", v24, v25, v26, v27, v28, v29, v171);
      v36 = 1;
      if (!*(_BYTE *)(v10 + 185))
        v36 = 2;
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/PaintType %d", v30, v31, v32, v33, v34, v35, v36);
      v43 = *(unsigned int *)(v10 + 152);
      if (v43 <= 2)
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)off_1E162FD70[v43], v37, v38, v39, v40, v41, v42, v172);
      v44 = *(_OWORD *)(v10 + 120);
      v184[0] = *(_OWORD *)(v10 + 104);
      v184[1] = v44;
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BBox %r", v37, v38, v39, v40, v41, v42, (uint64_t)v184);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 20) == 1)
      {
        v51 = *(_QWORD *)(a1 + 8);
        v52 = "/XStep 32767 /YStep 32767";
      }
      else
      {
        v53 = *(_QWORD *)(v10 + 144);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/XStep %f", v45, v46, v47, v48, v49, v50, *(_QWORD *)(v10 + 136));
        v51 = *(_QWORD *)(a1 + 8);
        v173 = v53;
        v52 = "/YStep %f";
      }
      PDFDocumentPrintf(v51, (uint64_t)v52, v45, v46, v47, v48, v49, v50, v173);
      v60 = *(double *)(v10 + 24);
      v61 = *(double *)(v10 + 32);
      v62 = *(double *)(v10 + 40);
      v63 = *(double *)(v10 + 48);
      v64 = *(double *)(v10 + 56);
      v65 = *(double *)(v10 + 64);
      v66 = *(double *)(a1 + 32);
      v67 = *(double *)(a1 + 40);
      v68 = *(double *)(a1 + 48);
      v69 = *(double *)(a1 + 56);
      v70 = *(double *)(a1 + 64);
      v71 = *(double *)(a1 + 72);
      v72 = v61 * v68 + v60 * v66;
      v73 = v61 * v69 + v60 * v67;
      v178 = v72;
      v179 = v73;
      v74 = v63 * v68 + v62 * v66;
      v75 = v63 * v69 + v62 * v67;
      v180 = v74;
      v181 = v75;
      v76 = v70 + v68 * v65 + v64 * v66;
      v77 = v69 * v65 + v64 * v67 + v71;
      v182 = v76;
      v183 = v77;
      if (v72 != 1.0 || v73 != 0.0 || (v74 == 0.0 ? (v78 = v75 == 1.0) : (v78 = 0), !v78 || v76 != 0.0 || v77 != 0.0))
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Matrix %m", v54, v55, v56, v57, v58, v59, (uint64_t)&v178);
      v79 = *(_QWORD *)(a1 + 16);
      if (v79)
        v80 = *(_QWORD *)(v79 + 112);
      else
        v80 = 0;
      PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/Resources %R", *(_QWORD *)(v80 + 16), v55, v56, v57, v58, v59);
      PDFContentStreamBeginData(*(uint64_t **)(a1 + 16), v81, v82, v83, v84, v85, v86, v87, v174);
      PDFDocumentPushContentStream(*(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
      CGPatternDrawInContextDelegate(v10, *(const void **)(*(_QWORD *)(a1 + 8) + 16), 0, 0, v88, v89, v90, v91);
      PDFDocumentPopContentStream(*(_QWORD *)(a1 + 8));
      PDFContentStreamEndData(*(_QWORD *)(a1 + 16), v92, v93, v94, v95, v96, v97, v98);
      PDFContentStreamEnd(*(CFDataRef **)(a1 + 16));
      PDFResourceSetEmit(v80, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
      if (v16)
        v17 = *(_QWORD *)(v16 + 8);
      else
        v17 = 0;
      PDFDocumentBeginObject(v15, v17, a3, a4, a5, a6, a7, a8);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"<<", v106, v107, v108, v109, v110, v111, v169);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /Pattern", v112, v113, v114, v115, v116, v117, v175);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/PatternType 2", v118, v119, v120, v121, v122, v123, v176);
      v130 = *(double *)(v10 + 24);
      v131 = *(double *)(v10 + 32);
      v132 = *(double *)(v10 + 40);
      v133 = *(double *)(v10 + 48);
      v134 = *(double *)(v10 + 56);
      v135 = *(double *)(v10 + 64);
      v136 = *(double *)(a1 + 32);
      v137 = *(double *)(a1 + 40);
      v138 = *(double *)(a1 + 48);
      v139 = *(double *)(a1 + 56);
      v140 = *(double *)(a1 + 64);
      v141 = *(double *)(a1 + 72);
      v142 = v131 * v138 + v130 * v136;
      v143 = v131 * v139 + v130 * v137;
      v178 = v142;
      v179 = v143;
      v144 = v133 * v138 + v132 * v136;
      v145 = v133 * v139 + v132 * v137;
      v180 = v144;
      v181 = v145;
      v146 = v140 + v138 * v135 + v134 * v136;
      v147 = v139 * v135 + v134 * v137 + v141;
      v182 = v146;
      v183 = v147;
      if (v142 != 1.0
        || v143 != 0.0
        || (v144 == 0.0 ? (v148 = v145 == 1.0) : (v148 = 0), !v148 || v146 != 0.0 || v147 != 0.0))
      {
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Matrix %m", v124, v125, v126, v127, v128, v129, (uint64_t)&v178);
      }
      if (*(_DWORD *)(v10 + 20) == 1)
        v149 = *(unsigned int **)(v10 + 80);
      else
        v149 = 0;
      v150 = PDFDocumentAddShading(*(_QWORD *)(a1 + 8), v149);
      PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/Shading %R", v150[3], v151, v152, v153, v154, v155);
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v156, v157, v158, v159, v160, v161, v177);
      PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v162, v163, v164, v165, v166, v167, v168);
    }
    *(_QWORD *)(a1 + 24) = 0;
    CFRelease((CFTypeRef)v10);
    *(_BYTE *)(a1 + 96) = 1;
  }
  *a2 = 1;
}

void process_path_element_13556(uint64_t a1, uint64_t a2)
{
  float64x2_t v3;
  const double *v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x16_t v7;
  double v8;
  float v9;
  float v10;
  float64x2_t v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  double v16;
  float v17;
  float v18;
  double *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  const double *v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  double v28;
  float64x2_t v29;
  int8x16_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  const double *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int8x16_t v48;
  double v49;
  float64x2_t v50;
  int8x16_t v51;
  double v52;
  float64x2_t v53;
  int8x16_t v54;
  double v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v3 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), *(double *)(*(_QWORD *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 16), **(double **)(a2 + 8)));
      v4 = (const double *)a1;
      v5 = vld1q_dup_f64(v4++);
      v6 = vld1q_dup_f64(v4);
      v7 = vbslq_s8((int8x16_t)vcgtq_f64(v5, v3), (int8x16_t)v5, vbslq_s8((int8x16_t)vcgtq_f64(v3, v6), (int8x16_t)v6, (int8x16_t)v3));
      v8 = *(double *)&v7.i64[1];
      if (*(_QWORD *)(a1 + 64))
        CGFontAutohintTransformApply();
      v9 = *(double *)v7.i64;
      v10 = v8;
      aa_moveto(*(_QWORD *)(a1 + 72), v9, v10);
      break;
    case 1:
      v11 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), *(double *)(*(_QWORD *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 16), **(double **)(a2 + 8)));
      v12 = (const double *)a1;
      v13 = vld1q_dup_f64(v12++);
      v14 = vld1q_dup_f64(v12);
      v15 = vbslq_s8((int8x16_t)vcgtq_f64(v13, v11), (int8x16_t)v13, vbslq_s8((int8x16_t)vcgtq_f64(v11, v14), (int8x16_t)v14, (int8x16_t)v11));
      v16 = *(double *)&v15.i64[1];
      if (*(_QWORD *)(a1 + 64))
        CGFontAutohintTransformApply();
      v17 = *(double *)v15.i64;
      v18 = v16;
      aa_lineto(*(_QWORD *)(a1 + 72), v17, v18);
      break;
    case 2:
      v19 = *(double **)(a2 + 8);
      v20 = *(float64x2_t *)(a1 + 16);
      v21 = *(float64x2_t *)(a1 + 32);
      v22 = *(float64x2_t *)(a1 + 48);
      v23 = vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v21, v19[1]), v20, *v19));
      v24 = (const double *)a1;
      v25 = vld1q_dup_f64(v24++);
      v26 = vld1q_dup_f64(v24);
      v27 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v23), (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f64(v23, v26), (int8x16_t)v26, (int8x16_t)v23));
      v28 = *(double *)&v27.i64[1];
      v29 = vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v21, v19[3]), v20, v19[2]));
      v30 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v29), (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f64(v29, v26), (int8x16_t)v26, (int8x16_t)v29));
      v31 = *(double *)&v30.i64[1];
      if (*(_QWORD *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        v69 = v32;
        v28 = v33;
        CGFontAutohintTransformApply();
        v27.i64[0] = v69;
        v30.i64[0] = v34;
        v31 = v35;
      }
      v36 = *(double *)v27.i64;
      v37 = v28;
      v38 = *(double *)v30.i64;
      v39 = v31;
      aa_quadto(*(_QWORD *)(a1 + 72), v36, v37, v38, v39);
      break;
    case 3:
      v40 = *(double **)(a2 + 8);
      v41 = *(float64x2_t *)(a1 + 16);
      v42 = *(float64x2_t *)(a1 + 32);
      v43 = *(float64x2_t *)(a1 + 48);
      v44 = (const double *)a1;
      v45 = vld1q_dup_f64(v44++);
      v46 = vaddq_f64(v43, vmlaq_n_f64(vmulq_n_f64(v42, v40[1]), v41, *v40));
      v47 = vld1q_dup_f64(v44);
      v48 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v46), (int8x16_t)v45, vbslq_s8((int8x16_t)vcgtq_f64(v46, v47), (int8x16_t)v47, (int8x16_t)v46));
      v49 = *(double *)&v48.i64[1];
      v50 = vaddq_f64(v43, vmlaq_n_f64(vmulq_n_f64(v42, v40[3]), v41, v40[2]));
      v51 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v50), (int8x16_t)v45, vbslq_s8((int8x16_t)vcgtq_f64(v50, v47), (int8x16_t)v47, (int8x16_t)v50));
      v52 = *(double *)&v51.i64[1];
      v53 = vaddq_f64(v43, vmlaq_n_f64(vmulq_n_f64(v42, v40[5]), v41, v40[4]));
      v54 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v53), (int8x16_t)v45, vbslq_s8((int8x16_t)vcgtq_f64(v53, v47), (int8x16_t)v47, (int8x16_t)v53));
      v55 = *(double *)&v54.i64[1];
      if (*(_QWORD *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        v68 = v56;
        v49 = v57;
        CGFontAutohintTransformApply();
        v70 = v58;
        v52 = v59;
        CGFontAutohintTransformApply();
        v48.i64[0] = v68;
        v51.i64[0] = v70;
        v54.i64[0] = v60;
        v55 = v61;
      }
      v62 = *(double *)v48.i64;
      v63 = v49;
      v64 = *(double *)v51.i64;
      v65 = v52;
      v66 = *(double *)v54.i64;
      v67 = v55;
      aa_cubeto(*(_QWORD *)(a1 + 72), v62, v63, v64, v65, v66, v67);
      break;
    case 4:
      aa_close(*(_QWORD *)(a1 + 72));
      break;
    default:
      abort();
  }
}

void CGGlyph8BitBitmapSaveAsImage(size_t a1, size_t a2, size_t a3, UInt8 *bytes, char *a5)
{
  const __CFData *v9;
  CGDataProvider *v10;
  CGColorSpace *v11;
  CGImageRef v12;
  CGFloat decode[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = CFDataCreate(0, bytes, a1 + (a2 - 1) * a3);
  v10 = CGDataProviderCreateWithCFData(v9);
  *(_OWORD *)decode = xmmword_185000460;
  v11 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  v12 = CGImageCreate(a1, a2, 8uLL, 8uLL, a3, v11, 0, v10, decode, 0, kCGRenderingIntentDefault);
  CGImageWriteToFile(v12, a5);
  if (v9)
    CFRelease(v9);
  CGDataProviderRelease(v10);
  if (v12)
    CFRelease(v12);
}

uint64_t aa_path_begin(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);
  uint64_t result;

  if (a3)
  {
    v3 = (uint64_t (*)(_QWORD, uint64_t, _QWORD))a3[2];
    if (v3)
      return v3(a3[1], a2, a3[6]);
  }
  return result;
}

void aa_path_iterate(uint64_t a1, int a2, double *a3)
{
  float64x2_t v4;
  const double *v5;
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t v8;
  double v9;
  float v10;
  float v11;
  float64x2_t v12;
  const double *v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  double v17;
  float v18;
  float v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  const double *v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  double v28;
  float64x2_t v29;
  int8x16_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  const double *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  double v48;
  float64x2_t v49;
  int8x16_t v50;
  double v51;
  float64x2_t v52;
  int8x16_t v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  switch(a2)
  {
    case 0:
      v4 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3[1]), *(float64x2_t *)(a1 + 16), *a3));
      v5 = (const double *)a1;
      v6 = vld1q_dup_f64(v5++);
      v7 = vld1q_dup_f64(v5);
      v8 = vbslq_s8((int8x16_t)vcgtq_f64(v6, v4), (int8x16_t)v6, vbslq_s8((int8x16_t)vcgtq_f64(v4, v7), (int8x16_t)v7, (int8x16_t)v4));
      v9 = *(double *)&v8.i64[1];
      if (*(_QWORD *)(a1 + 64))
        CGFontAutohintTransformApply();
      v10 = *(double *)v8.i64;
      v11 = v9;
      aa_moveto(*(_QWORD *)(a1 + 72), v10, v11);
      break;
    case 1:
      v12 = vaddq_f64(*(float64x2_t *)(a1 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), a3[1]), *(float64x2_t *)(a1 + 16), *a3));
      v13 = (const double *)a1;
      v14 = vld1q_dup_f64(v13++);
      v15 = vld1q_dup_f64(v13);
      v16 = vbslq_s8((int8x16_t)vcgtq_f64(v14, v12), (int8x16_t)v14, vbslq_s8((int8x16_t)vcgtq_f64(v12, v15), (int8x16_t)v15, (int8x16_t)v12));
      v17 = *(double *)&v16.i64[1];
      if (*(_QWORD *)(a1 + 64))
        CGFontAutohintTransformApply();
      v18 = *(double *)v16.i64;
      v19 = v17;
      aa_lineto(*(_QWORD *)(a1 + 72), v18, v19);
      break;
    case 2:
      v20 = *(float64x2_t *)(a1 + 16);
      v21 = *(float64x2_t *)(a1 + 32);
      v22 = *(float64x2_t *)(a1 + 48);
      v23 = vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v21, a3[1]), v20, *a3));
      v24 = (const double *)a1;
      v25 = vld1q_dup_f64(v24++);
      v26 = vld1q_dup_f64(v24);
      v27 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v23), (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f64(v23, v26), (int8x16_t)v26, (int8x16_t)v23));
      v28 = *(double *)&v27.i64[1];
      v29 = vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v21, a3[3]), v20, a3[2]));
      v30 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v29), (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f64(v29, v26), (int8x16_t)v26, (int8x16_t)v29));
      v31 = *(double *)&v30.i64[1];
      if (*(_QWORD *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        v68 = v32;
        v28 = v33;
        CGFontAutohintTransformApply();
        v27.i64[0] = v68;
        v30.i64[0] = v34;
        v31 = v35;
      }
      v36 = *(double *)v27.i64;
      v37 = v28;
      v38 = *(double *)v30.i64;
      v39 = v31;
      aa_quadto(*(_QWORD *)(a1 + 72), v36, v37, v38, v39);
      break;
    case 3:
      v40 = *(float64x2_t *)(a1 + 16);
      v41 = *(float64x2_t *)(a1 + 32);
      v42 = *(float64x2_t *)(a1 + 48);
      v43 = (const double *)a1;
      v44 = vld1q_dup_f64(v43++);
      v45 = vaddq_f64(v42, vmlaq_n_f64(vmulq_n_f64(v41, a3[1]), v40, *a3));
      v46 = vld1q_dup_f64(v43);
      v47 = vbslq_s8((int8x16_t)vcgtq_f64(v44, v45), (int8x16_t)v44, vbslq_s8((int8x16_t)vcgtq_f64(v45, v46), (int8x16_t)v46, (int8x16_t)v45));
      v48 = *(double *)&v47.i64[1];
      v49 = vaddq_f64(v42, vmlaq_n_f64(vmulq_n_f64(v41, a3[3]), v40, a3[2]));
      v50 = vbslq_s8((int8x16_t)vcgtq_f64(v44, v49), (int8x16_t)v44, vbslq_s8((int8x16_t)vcgtq_f64(v49, v46), (int8x16_t)v46, (int8x16_t)v49));
      v51 = *(double *)&v50.i64[1];
      v52 = vaddq_f64(v42, vmlaq_n_f64(vmulq_n_f64(v41, a3[5]), v40, a3[4]));
      v53 = vbslq_s8((int8x16_t)vcgtq_f64(v44, v52), (int8x16_t)v44, vbslq_s8((int8x16_t)vcgtq_f64(v52, v46), (int8x16_t)v46, (int8x16_t)v52));
      v54 = *(double *)&v53.i64[1];
      if (*(_QWORD *)(a1 + 64))
      {
        CGFontAutohintTransformApply();
        v67 = v55;
        v48 = v56;
        CGFontAutohintTransformApply();
        v69 = v57;
        v51 = v58;
        CGFontAutohintTransformApply();
        v47.i64[0] = v67;
        v50.i64[0] = v69;
        v53.i64[0] = v59;
        v54 = v60;
      }
      v61 = *(double *)v47.i64;
      v62 = v48;
      v63 = *(double *)v50.i64;
      v64 = v51;
      v65 = *(double *)v53.i64;
      v66 = v54;
      aa_cubeto(*(_QWORD *)(a1 + 72), v61, v62, v63, v64, v65, v66);
      break;
    case 4:
      aa_close(*(_QWORD *)(a1 + 72));
      break;
    default:
      abort();
  }
}

BOOL CGFontGetRegistryOrderingSupplement(_QWORD *a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  pthread_mutex_t *cid_info;
  pthread_mutex_t *v8;
  uint64_t v9;
  _BOOL8 v10;

  cid_info = get_cid_info(a1);
  if (!cid_info)
    return 0;
  v8 = cid_info;
  pthread_mutex_lock(cid_info);
  v9 = *(_QWORD *)v8[1].__opaque;
  if (a2)
    *a2 = v9;
  if (a3)
    *a3 = *(_QWORD *)&v8[1].__opaque[8];
  if (a4)
    *a4 = *(_DWORD *)&v8[1].__opaque[16];
  v10 = v9 != 0;
  pthread_mutex_unlock(v8);
  return v10;
}

pthread_mutex_t *get_cid_info(_QWORD *a1)
{
  unint64_t *v2;
  pthread_mutex_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
    return 0;
  v2 = a1 + 12;
  v3 = (pthread_mutex_t *)atomic_load(a1 + 12);
  if (!v3)
  {
    v12 = 0;
    v10 = 0;
    v11 = 0;
    v3 = (pthread_mutex_t *)malloc_type_calloc(1uLL, 0x70uLL, 0x1060040AA484A44uLL);
    pthread_mutex_init(v3, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, int *))(a1[2] + 200))(a1[14], &v11, &v10, &v12);
    v6 = v10;
    v5 = v11;
    v7 = v12;
    if (!v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
    }
    *(_QWORD *)v3[1].__opaque = v5;
    *(_QWORD *)&v3[1].__opaque[8] = v6;
    *(_DWORD *)&v3[1].__opaque[16] = v7;
    v3[1].__sig = (uint64_t)a1;
    *(_QWORD *)&v3[1].__opaque[24] = 0;
    *(_QWORD *)&v3[1].__opaque[32] = 0;
    while (1)
    {
      v8 = __ldaxr(v2);
      if (v8)
        break;
      if (!__stlxr((unint64_t)v3, v2))
        return v3;
    }
    __clrex();
    CGCIDInfoRelease((uint64_t)v3);
    return (pthread_mutex_t *)v8;
  }
  return v3;
}

pthread_mutex_t *CGFontGetCIDsForGlyphs(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  pthread_mutex_t *result;
  pthread_mutex_t *v8;
  __int16 *v9;
  unint64_t *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  unint64_t v15;

  result = get_cid_info(a1);
  if (result)
  {
    v8 = result;
    if (!a3 || (result = 0, a2) && a4)
    {
      v10 = (unint64_t *)&v8[1].__opaque[32];
      v9 = *(__int16 **)&v8[1].__opaque[32];
      if (v9)
        goto LABEL_21;
      if (*(_QWORD *)&v8[1].__opaque[24])
      {
        v11 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
        v12 = 0;
        *v11 = -1;
        do
        {
          v13 = *(unsigned __int16 **)&v8[1].__opaque[24];
          if (v13)
          {
            if (v13 == (unsigned __int16 *)-1)
            {
              v14 = v12;
            }
            else
            {
              v15 = atomic_load((unint64_t *)&v13[4 * (v12 >> 10) + 4]);
              if (v15)
                v14 = *(_WORD *)(v15 + 2 * (v12 & 0x3FF));
              else
                v14 = *v13;
            }
          }
          else
          {
            v14 = -1;
          }
          CGFontIndexMapAddIndex(v11, v14, v12++);
        }
        while (v12 != 0xFFFF);
        while (!__ldxr(v10))
        {
          if (!__stxr((unint64_t)v11, v10))
            goto LABEL_20;
        }
        __clrex();
        CGFontIndexMapRelease((char *)v11);
      }
LABEL_20:
      v9 = (__int16 *)*v10;
      if (*v10)
      {
LABEL_21:
        CGFontIndexMapGetValues(v9, a2, a3, a4);
        return (pthread_mutex_t *)(a3 != 0);
      }
      else
      {
        return (pthread_mutex_t *)(*(uint64_t (**)(_QWORD, unsigned __int16 *, uint64_t, _WORD *))(*(_QWORD *)(v8[1].__sig + 16) + 264))(*(_QWORD *)(v8[1].__sig + 112), a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t CGFontGetGlyphsForCIDs(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  pthread_mutex_t *cid_info;
  uint64_t v8;

  cid_info = get_cid_info(a1);
  if (!cid_info)
    return 0;
  if (a3)
  {
    v8 = 0;
    if (!a2 || !a4)
      return v8;
  }
  if (*(_QWORD *)&cid_info[1].__opaque[24])
  {
    CGFontIndexMapGetValues(*(__int16 **)&cid_info[1].__opaque[24], a2, a3, a4);
    return a3 != 0;
  }
  return (*(uint64_t (**)(_QWORD, unsigned __int16 *, uint64_t, _WORD *))(*(_QWORD *)(cid_info[1].__sig + 16)
                                                                                 + 256))(*(_QWORD *)(cid_info[1].__sig + 112), a2, a3, a4);
}

uint64_t validate_cmyk_bitmap_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v8 = *(_DWORD *)(a1 + 40);
  if ((v8 & 0x1F) != 0)
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 80);
  if (v11 == 32)
  {
    if ((v8 & 0x100) != 0)
    {
      v12 = 16;
      goto LABEL_10;
    }
LABEL_2:
    v9 = "Valid parameters for CMYK color space model are:\n"
         "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Little\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOrder32Big";
LABEL_3:
    unsupported(a1, (uint64_t)v9, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (v11 == 16)
  {
    v14 = *(_DWORD *)(a1 + 40) & 0x7000;
    if ((v8 & 0x100) != 0)
    {
      if (v14 != 4096)
      {
        v9 = "Valid parameters for CMYK color space model are:\n"
             "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Little\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Big\n"
             "required byte order flag is kCGBitmapByteOrder16Little";
        goto LABEL_3;
      }
      v12 = 8;
    }
    else
    {
      v12 = 8;
      if ((v8 & 0x7000) != 0 && v14 != 4096 && v14 != 12288)
      {
        v9 = "Valid parameters for CMYK color space model are:\n"
             "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
             "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Little\n"
             "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapBy"
             "teOrder32Big\n"
             "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder16Big, kCGBitmapByteOrder16Little";
        goto LABEL_3;
      }
    }
    goto LABEL_21;
  }
  if (v11 != 8)
    goto LABEL_2;
  v12 = 4;
LABEL_10:
  v13 = *(_DWORD *)(a1 + 40) & 0x7000;
  if ((v8 & 0x7000) != 0 && v13 != 0x2000 && v13 != 0x4000)
  {
    v9 = "Valid parameters for CMYK color space model are:\n"
         "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
         "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Little\n"
         "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOr"
         "der32Big\n"
         "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder32Big, kCGBitmapByteOrder32Little";
    goto LABEL_3;
  }
LABEL_21:
  if (*(_QWORD *)(a1 + 72) != 8 * v12 || (*(_QWORD *)(a1 + 88) & (v12 - 1)) != 0 || (v8 & 0xF0000) != 0)
    goto LABEL_2;
  return check_sizes((_QWORD *)a1, v11, a3, a4, a5, a6, a7, a8);
}

void unsupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  const char *v12;

  if (unsupported_predicate != -1)
    dispatch_once(&unsupported_predicate, &__block_literal_global_13618);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 40) - 1;
  else
    v10 = -1;
  if (unsupported_full_log)
  {
    if (v10 > 3)
      v11 = "NULL colorspace";
    else
      v11 = off_1E165F548[v10];
    v12 = "\n"
          "CGBitmapContextCreate: unsupported parameter combination:\n"
          " \t%s \n"
          "\t%zu bits/component, %s\n"
          " \t%zu bytes/row\n"
          "\t%s\n"
          "\t%s\n"
          "\t%s\n"
          "\t%s\n"
          "%s\n";
  }
  else
  {
    if (v10 > 3)
      v11 = "NULL colorspace";
    else
      v11 = off_1E165F548[v10];
    v12 = "\n"
          "CGBitmapContextCreate: unsupported parameter combination:\n"
          "\t%s | %zu bits/component, %s | %zu bytes/row.\n"
          "\t%s | %s | %s\n"
          "Set CGBITMAP_CONTEXT_LOG_ERRORS environmental variable to see more details.\n";
  }
  CGPostError((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8, (char)v11);
}

char *__unsupported_block_invoke()
{
  char *result;

  result = getenv("CGBITMAP_CONTEXT_LOG_ERRORS");
  unsupported_full_log = result != 0;
  return result;
}

uint64_t CGColorSpaceCreateDeviceN(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  void **v21;
  void *v22;
  uint64_t i;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t k;
  uint64_t v28;
  uint64_t j;
  CC_MD5_CTX *MD5;
  CC_MD5_CTX *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t m;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  const void *v58;
  __int128 v59;
  int data;
  unsigned __int8 md[24];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a1 > 0x10
    || !a1
    || !a2
    || !a3
    || !a4
    || a4[4] != a1
    || *(_QWORD *)(a3[3] + 40) != a4[6]
    || CGColorSpaceGetType(a3) - 7 < 3)
  {
    goto LABEL_72;
  }
  v13 = 0;
  do
  {
    if (!*(_QWORD *)(a2 + 8 * v13))
      goto LABEL_72;
    ++v13;
  }
  while (a1 != v13);
  v14 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x8D164248uLL);
  if (!v14)
  {
LABEL_72:
    v53 = CGColorSpaceCreateWithState(0, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_73;
  }
  v15 = (uint64_t)v14;
  *(_DWORD *)v14 = 1;
  v14[12] = *(_BYTE *)(a3[3] + 12);
  *((_DWORD *)v14 + 2) = 0;
  *((_WORD *)v14 + 7) = 0;
  *(_QWORD *)(v14 + 20) = 0x400000008;
  v16 = v14 + 20;
  *((_QWORD *)v14 + 5) = a1;
  v17 = v14 + 40;
  *((_QWORD *)v14 + 13) = color_space_state_create_deviceN_deviceN_vtable;
  *((_DWORD *)v14 + 7) = 4;
  *((_QWORD *)v14 + 9) = 0;
  *((_QWORD *)v14 + 10) = 0;
  v18 = malloc_type_malloc(8 * a1 + 8, 0x100004000313F17uLL);
  v19 = v18;
  if (v18)
  {
    memset_pattern16(v18, &unk_184F8E0A0, 8 * a1);
    v19[a1] = 0x3FF0000000000000;
  }
  *(_QWORD *)(v15 + 32) = v19;
  v20 = (void **)malloc_type_calloc(0x90uLL, 1uLL, 0xDAE0BFD8uLL);
  *(_QWORD *)(v15 + 88) = v20;
  if (!v20)
  {
LABEL_71:
    free((void *)v15);
    goto LABEL_72;
  }
  v21 = v20;
  v22 = malloc_type_malloc(8 * a1, 0x10040436913F5uLL);
  *v21 = v22;
  if (!v22)
  {
LABEL_70:
    free(*(void **)(v15 + 88));
    goto LABEL_71;
  }
  v58 = v16;
  for (i = 0; i != a1; ++i)
  {
    v24 = strlen(*(const char **)(a2 + 8 * i));
    *((_QWORD *)*v21 + i) = malloc_type_malloc(v24 + 1, 0x9B2D5ECBuLL);
    v25 = *v21;
    if (!*((_QWORD *)*v21 + i))
    {
      if (!i)
      {
LABEL_69:
        free(v25);
        goto LABEL_70;
      }
      for (j = 0; j != i; ++j)
        free(*((void **)*v21 + j));
LABEL_68:
      v25 = *v21;
      goto LABEL_69;
    }
    strcpy(*((char **)*v21 + i), *(const char **)(a2 + 8 * i));
  }
  CFRetain(a3);
  v21[1] = a3;
  CFRetain(a4);
  v21[2] = a4;
  if (!a5)
  {
    v21[3] = 0;
    goto LABEL_32;
  }
  v26 = malloc_type_malloc(8 * a1, 0x2004093837F09uLL);
  v21[3] = v26;
  if (!v26)
  {
    v56 = 0;
    do
      free(*((void **)*v21 + v56++));
    while (a1 != v56);
    goto LABEL_68;
  }
  for (k = 0; k != a1; ++k)
  {
    v28 = *(_QWORD *)(a5 + 8 * k);
    if (v28)
      CFRetain(*(CFTypeRef *)(a5 + 8 * k));
    *((_QWORD *)v21[3] + k) = v28;
  }
LABEL_32:
  memset(md, 0, 16);
  MD5 = CGDigesterCreateMD5();
  v31 = MD5;
  if (MD5)
  {
    CC_MD5_Update(MD5, v58, 4u);
    CC_MD5_Update(v31, v17, 8u);
  }
  v32 = *(_QWORD **)(v15 + 88);
  v33 = *(_QWORD *)(v15 + 40);
  if (v33)
  {
    for (m = 0; m < v33; ++m)
    {
      if (v31)
      {
        v35 = strlen(*(const char **)(*v32 + 8 * m));
        md5_update(v31, *(char **)(*v32 + 8 * m), v35);
        v33 = *v17;
      }
    }
  }
  v36 = v32[1];
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 24);
    if (v37)
      v38 = (const void *)(v37 + 56);
    else
      v38 = 0;
  }
  else
  {
    v38 = 0;
  }
  if (v31)
    CC_MD5_Update(v31, v38, 0x10u);
  if (v32[3])
  {
    v39 = *v17;
    if (*v17)
    {
      v40 = 0;
      do
      {
        v41 = *(_QWORD *)(v32[3] + 8 * v40);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 24);
          if (v42)
            v43 = (const void *)(v42 + 56);
          else
            v43 = 0;
        }
        else
        {
          v43 = 0;
        }
        if (v31)
        {
          CC_MD5_Update(v31, v43, 0x10u);
          v39 = *v17;
        }
        ++v40;
      }
      while (v40 < v39);
    }
  }
  v44 = v32[2];
  if (v44)
    LODWORD(v44) = *(_DWORD *)(v44 + 16);
  data = v44;
  if (v31)
  {
    CC_MD5_Update(v31, &data, 4u);
    CC_MD5_Final(md, v31);
    v45 = *(_OWORD *)md;
  }
  else
  {
    v45 = 0uLL;
  }
  v59 = v45;
  free(v31);
  *(_OWORD *)(v15 + 56) = v59;
  v53 = CGColorSpaceCreateWithState((unsigned int *)v15, v46, v47, v48, v49, v50, v51, v52);
  do
  {
    v54 = __ldxr((unsigned int *)v15);
    v55 = v54 - 1;
  }
  while (__stxr(v55, (unsigned int *)v15));
  if (!v55)
    color_space_state_dealloc(v15);
LABEL_73:
  if (v53)
    *(_QWORD *)(v53 + 24) = color_space_state_register(*(_BYTE **)(v53 + 24));
  return v53;
}

void deviceN_finalize(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;

  v2 = (void *)a1[4];
  if (v2)
    free(v2);
  v3 = a1[11];
  if (v3)
  {
    CGColorSpaceRelease(*(CGColorSpaceRef *)(v3 + 8));
    v4 = *(const void **)(v3 + 16);
    if (v4)
      CFRelease(v4);
    v5 = *(void **)(v3 + 24);
    if (v5)
    {
      if (a1[5])
      {
        v6 = 0;
        do
          CGColorSpaceRelease(*(CGColorSpaceRef *)(*(_QWORD *)(v3 + 24) + 8 * v6++));
        while (v6 < a1[5]);
        v5 = *(void **)(v3 + 24);
      }
      free(v5);
    }
    v7 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      if (a1[5])
      {
        v8 = 0;
        do
          free(*(void **)(*(_QWORD *)v3 + 8 * v8++));
        while (v8 < a1[5]);
        v7 = *(void **)v3;
      }
      free(v7);
    }
  }
}

uint64_t deviceN_get_descriptor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t CGColorSpaceGetTintTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v8 + 20) != 8)
    _CGHandleAssert("CGColorSpaceGetTintTransform", 226, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  return *(_QWORD *)(*(_QWORD *)(v8 + 88) + 16);
}

uint64_t CGColorSpaceGetColorants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v8 + 20) != 8)
    _CGHandleAssert("CGColorSpaceGetColorants", 233, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  return *(_QWORD *)(*(_QWORD *)(v8 + 88) + 24);
}

uint64_t CGColorSpaceGetNames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v8 + 20) != 8)
    _CGHandleAssert("CGColorSpaceGetNames", 240, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_DeviceN.c", "s->state->type == kCGColorSpaceDeviceN", "Colorspace must be DeviceN. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  return **(_QWORD **)(v8 + 88);
}

uint64_t compareByRotation(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;

  v2 = *(double *)(*(_QWORD *)a1 + 168);
  if (v2 > 350.0)
    v2 = v2 + -360.0;
  v3 = *(double *)(*(_QWORD *)a2 + 168);
  v4 = v3 + -360.0;
  if (v3 <= 350.0)
    v4 = *(double *)(*(_QWORD *)a2 + 168);
  if (v2 < v4)
    return 0xFFFFFFFFLL;
  else
    return v2 > v4;
}

BOOL splitRotationZonesCondition(uint64_t a1, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *(double *)(a1 + 168);
  v4 = v3 + -360.0;
  if (v3 <= 350.0)
    v4 = *(double *)(a1 + 168);
  v5 = *(double *)(a2 + 168);
  if (v5 > 350.0)
    v5 = v5 + -360.0;
  if (v4 - *a3 >= 10.0)
    __assert_rtn("splitRotationZonesCondition", "CPZoneMaker.m", 1123, "rotation1 - *minRotation < SAME_ROTATION_ZONE_RANGE");
  v6 = v5 - *a3;
  if (v6 > 10.0)
    *a3 = v5;
  return v6 > 10.0;
}

void findLineSegments(_QWORD *a1, unsigned int *a2, __n128 a3, double a4, double a5)
{
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  double v18;
  void *v20;
  CPZoneBorder *v21;
  double v22;
  double v23;
  _BOOL4 v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  CPZoneBorderNeighbor *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  double *v39;
  double v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double *v45;
  _BOOL4 v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  void *v67;
  int v68;
  uint64_t v69;
  int v70;
  __int128 v71;

  v7 = a1 + 2;
  v8 = *((_OWORD *)a1 + 1);
  v9 = a1 + 4;
  v10 = *((double *)a1 + 4);
  v11 = *((double *)a1 + 5);
  v12 = *a2;
  if ((v12 - 1) < 3)
  {
    v13 = *((_QWORD *)a2 + 1);
    v14 = dword_185005200[v12] - 1;
    v15 = a1[6];
    v16 = *((unsigned int *)a1 + 14);
    *((_DWORD *)a1 + 14) = v16 + 1;
    v8 = *(_OWORD *)(v13 + 16 * v14);
    *(_OWORD *)(v15 + 16 * v16) = v8;
LABEL_6:
    v18 = *((double *)&v8 + 1);
    a3.n128_f64[0] = vabdd_f64(*(double *)&v8, v10);
    a4 = vabdd_f64(*((double *)&v8 + 1), v11);
    a5 = 2.0;
    if (a3.n128_f64[0] > 2.0 || a4 > 2.0)
    {
      v71 = v8;
      v20 = (void *)objc_msgSend((id)*a1, "copy");
      objc_msgSend(v20, "makeLineFromVertex:toVertex:", v10, v11, *(double *)&v71, v18);
      v21 = -[CPZoneBorder initWithGraphicObject:]([CPZoneBorder alloc], "initWithGraphicObject:", v20);

      v8 = v71;
      if (v21)
      {
        v22 = *(double *)&v71 - v10;
        v23 = v18 - v11;
        v24 = -[CPZoneBorder isHorizontal](v21, "isHorizontal");
        if (v23 < 0.0)
          v25 = 4;
        else
          v25 = 0;
        if (v23 <= 0.0)
          v26 = v25;
        else
          v26 = 2;
        v27 = a1 + 9;
        if (v22 <= 0.0)
          v28 = v22 < 0.0;
        else
          v28 = 3;
        if (v24)
        {
          v27 = a1 + 8;
          v29 = v28;
        }
        else
        {
          v29 = v26;
        }
        -[CPZoneBorder addToArray:](v21, "addToArray:", *v27);
        v30 = objc_alloc_init(CPZoneBorderNeighbor);
        -[CPZoneBorderNeighbor setNeighborShape:](v30, "setNeighborShape:", *a1);
        -[CPZoneBorderNeighbor setShapeSide:](v30, "setShapeSide:", v29);
        -[CPZoneBorder addNeighbor:](v21, "addNeighbor:", v30);

        v8 = v71;
      }
    }
    *v9 = v8;
    goto LABEL_25;
  }
  if ((_DWORD)v12 == 4)
    goto LABEL_6;
  if ((_DWORD)v12)
    goto LABEL_26;
  v17 = (_OWORD *)*((_QWORD *)a2 + 1);
  *v7 = *v17;
  a3 = *(__n128 *)v17;
  *v9 = *v17;
LABEL_25:
  LODWORD(v12) = *a2;
LABEL_26:
  v31 = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v31;
  if ((v12 | 4) != 4 && v31 < *((_DWORD *)a1 + 3))
    return;
  v32 = objc_msgSend((id)a1[8], "count", a3.n128_f64[0], a4, a5, *(double *)&v8);
  v33 = objc_msgSend((id)a1[9], "count");
  v34 = *((_DWORD *)a1 + 14);
  if (v34)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = (double *)a1[6];
    v40 = *v39;
    v41 = v39[1];
    v42 = -1;
    do
    {
      v43 = v40;
      v44 = v41;
      if (v35 + 1 < v34)
        ++v35;
      else
        v35 = 0;
      v45 = &v39[2 * v35];
      v40 = *v45;
      v41 = v45[1];
      if (v43 == *v45 && v44 == v41)
      {
        v51 = v37;
      }
      else
      {
        v47 = v43 - v40 > 0.0;
        v48 = vabdd_f64(v43, v40);
        v49 = v44 - v41;
        v50 = vabdd_f64(v44, v41);
        LODWORD(v51) = 2 * v47;
        if (v49 > 0.0)
          v52 = 1;
        else
          v52 = 3;
        if (v48 <= v50)
          v51 = v52;
        else
          v51 = v51;
        if ((v36 & 1) != 0)
        {
          v53 = v51 - v37;
          if ((_DWORD)v51 - (_DWORD)v37 == -3)
            v54 = 1;
          else
            v54 = v51 - v37;
          if (v53 == 3)
            v55 = -1;
          else
            v55 = v54;
          v38 += v55;
        }
        v36 = 1;
      }
      ++v42;
      v37 = v51;
    }
    while (v34 != v42);
    if ((v38 & 0x80000000) == 0)
    {
      if (v38 <= 3)
      {
        v56 = *((unsigned int *)a1 + 20);
        if (v32 > v56)
        {
          v57 = v32 - v56;
          do
          {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a1[8], "objectAtIndex:", v56++), "neighborAtIndex:", 0), "setShapeSide:", 0);
            --v57;
          }
          while (v57);
        }
        v58 = *((unsigned int *)a1 + 21);
        if (v33 > v58)
        {
          v59 = v33 - v58;
          do
          {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a1[9], "objectAtIndex:", v58++), "neighborAtIndex:", 0), "setShapeSide:", 0);
            --v59;
          }
          while (v59);
        }
      }
      goto LABEL_80;
    }
    v60 = *((unsigned int *)a1 + 20);
    if (v32 > v60)
    {
      v61 = v32 - v60;
      while (1)
      {
        v62 = (void *)objc_msgSend((id)objc_msgSend((id)a1[8], "objectAtIndex:", v60), "neighborAtIndex:", 0);
        v63 = objc_msgSend(v62, "shapeSide");
        if (v63 == 3)
          break;
        if (v63 == 1)
        {
          v64 = 3;
LABEL_70:
          objc_msgSend(v62, "setShapeSide:", v64);
        }
        ++v60;
        if (!--v61)
          goto LABEL_72;
      }
      v64 = 1;
      goto LABEL_70;
    }
LABEL_72:
    v65 = *((unsigned int *)a1 + 21);
    if (v33 > v65)
    {
      v66 = v33 - v65;
      while (1)
      {
        v67 = (void *)objc_msgSend((id)objc_msgSend((id)a1[9], "objectAtIndex:", v65), "neighborAtIndex:", 0);
        v68 = objc_msgSend(v67, "shapeSide");
        if (v68 == 2)
          break;
        if (v68 == 4)
        {
          v69 = 2;
LABEL_78:
          objc_msgSend(v67, "setShapeSide:", v69);
        }
        ++v65;
        if (!--v66)
          goto LABEL_80;
      }
      v69 = 4;
      goto LABEL_78;
    }
  }
LABEL_80:
  if (*a2)
  {
    v70 = 0;
  }
  else
  {
    *(_OWORD *)a1[6] = *v7;
    v70 = 1;
  }
  *((_DWORD *)a1 + 14) = v70;
  *((_DWORD *)a1 + 20) = v32;
  *((_DWORD *)a1 + 21) = v33;
}

uint64_t cutBordersCrossingText(CGFloat *a1, void *a2)
{
  __double2 v4;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v28;
  uint64_t v29;
  const CGPath *v30;
  int v31;
  float64x2_t v32;
  __double2 v33;
  float64x2_t v34;
  float64x2_t v35;
  CGPoint v36;
  CGFloat v37;
  float64x2_t v38;
  CGPoint v39;
  CGFloat v40;
  CGPoint v41;
  CGFloat v42;
  double v43;
  double v44;
  double v45;
  int v46;
  int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double a;
  void *v59;
  void *v60;
  double b;
  double v62;
  double v63;
  double v64;
  void *v66;
  double v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  CGFloat v71;
  BOOL eoFillb;
  double eoFill;
  float64x2_t eoFilla;
  double height;
  double width;
  double y;
  CGFloat x;
  uint64_t v79;
  float64x2_t v80;
  CGFloat *v81;
  CGAffineTransform v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v4 = __sincos_stret(a1[21] * 0.0174532925);
  v5 = *a1;
  v6 = a1[1];
  v83.size.width = a1[2];
  v83.size.height = a1[3];
  v81 = a1;
  v82.a = v4.__cosval;
  v82.b = v4.__sinval;
  v82.c = -v4.__sinval;
  v82.d = v4.__cosval;
  v82.tx = 0.0;
  v82.ty = 0.0;
  v83.origin.x = v5;
  v83.origin.y = v6;
  v84 = CGRectApplyAffineTransform(v83, &v82);
  y = v84.origin.y;
  x = v84.origin.x;
  height = v84.size.height;
  width = v84.size.width;
  v7 = objc_msgSend(a2, "count");
  if (v7)
  {
    v85.size.height = height;
    v85.size.width = width;
    v85.origin.y = y;
    v85.origin.x = x;
    v86 = CGRectInset(v85, width * 0.1, height * 0.3);
    v8 = v86.origin.x;
    v9 = v86.origin.y;
    v10 = v86.size.width;
    v11 = v86.size.height;
    v66 = a2;
    v71 = v86.size.height;
    do
    {
      v12 = (v7 - 1);
      v13 = (void *)objc_msgSend(a2, "objectAtIndex:", v12, v66);
      objc_msgSend(v13, "bounds");
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v87.origin.x = v8;
      v87.origin.y = v9;
      v87.size.width = v10;
      v87.size.height = v11;
      v88.origin.x = v15;
      v88.origin.y = v17;
      v88.size.width = v19;
      v88.size.height = v21;
      if (CGRectIntersectsRect(v87, v88))
      {
        v22 = objc_msgSend((id)objc_msgSend(v13, "page"), "PDFContext");
        v23 = *((unsigned int *)v81 + 16);
        if ((_DWORD)v23)
        {
          v79 = v22;
          v24 = 0;
          while (1)
          {
            v25 = *(_QWORD *)(v79 + 2224);
            while (1)
            {
              v26 = *(unsigned int *)(v25 + 52 * v23 + 8);
              if ((_DWORD)v26 && v24 < v26)
                break;
              v24 = 0;
              v23 = *(unsigned int *)(v25 + 52 * v23);
              if (!(_DWORD)v23)
                goto LABEL_21;
            }
            v28 = *(_DWORD *)(v25 + 52 * v23 + 4 * v24 + 12);
            if (v28 >= *(_DWORD *)(v79 + 2152))
              break;
            v29 = *(_QWORD *)(v79 + 2112) + 216 * v28;
            v30 = *(const CGPath **)(v29 + 96);
            if (!v30)
              break;
            v31 = *(unsigned __int8 *)(v29 + 104);
            eoFillb = *(_BYTE *)(v29 + 104) == 0;
            v33 = __sincos_stret(v81[21] * 0.0174532925);
            v32.f64[0] = v33.__cosval;
            v34.f64[0] = -v33.__sinval;
            v34.f64[1] = v33.__cosval;
            v32.f64[1] = v33.__sinval;
            v67 = v81[1];
            v68 = v34;
            v69 = *v81;
            v70 = vmulq_n_f64(v34, v67);
            v80 = v32;
            v35 = vaddq_f64(vmlaq_n_f64(v70, v32, *v81), (float64x2_t)0);
            v32.f64[0] = v35.f64[1];
            a2 = v66;
            if (CGPathContainsPoint(v30, 0, *(CGPoint *)((char *)&v32 - 8), eoFillb))
            {
              eoFill = v69 + v81[2];
              v36 = (CGPoint)vaddq_f64(vmlaq_n_f64(v70, v80, eoFill), (float64x2_t)0);
              v37 = v36.y;
              if (CGPathContainsPoint(v30, 0, v36, v31 == 0))
              {
                v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&eoFill, 0);
                eoFilla = vmulq_n_f64(v68, v67 + v81[3]);
                v39 = (CGPoint)vaddq_f64(vmlaq_f64(eoFilla, v38, v80), (float64x2_t)0);
                v40 = v39.y;
                if (CGPathContainsPoint(v30, 0, v39, v31 == 0))
                {
                  ++v24;
                  v41 = (CGPoint)vaddq_f64(vmlaq_n_f64(eoFilla, v80, *v81), (float64x2_t)0);
                  v42 = v41.y;
                  if (CGPathContainsPoint(v30, 0, v41, v31 == 0))
                    continue;
                }
              }
            }
            goto LABEL_59;
          }
        }
LABEL_21:
        v43 = v10;
        v44 = v9;
        v45 = v8;
        v46 = objc_msgSend(v13, "isHorizontal");
        v47 = v46;
        v82.a = 0.0;
        v82.b = 0.0;
        if (v46)
          v48 = v15;
        else
          v48 = v17;
        if (v46)
          v49 = v19;
        else
          v49 = v21;
        v50 = x;
        if (!v46)
          v50 = y;
        v51 = width;
        if (!v46)
          v51 = height;
        v52 = CGIntervalExclusion((uint64_t)&v82, v48, v49, v50, v51);
        if (fabs(v52) == INFINITY)
        {
          objc_msgSend(v13, "removeFromArray");
        }
        else
        {
          if (v47)
            v54 = v52;
          else
            v54 = v15;
          if (v47)
            v55 = v17;
          else
            v55 = v52;
          if (v47)
            v56 = v53;
          else
            v56 = v19;
          if (v47)
            v57 = v21;
          else
            v57 = v53;
          objc_msgSend(v13, "setBounds:", v54, v55, v56, v57);
          a = v82.a;
          if (fabs(v82.a) != INFINITY)
          {
            v59 = (void *)objc_msgSend(v13, "copy");
            v60 = v59;
            b = v82.b;
            if (v47)
              v62 = a;
            else
              v62 = v15;
            if (v47)
              v63 = v17;
            else
              v63 = a;
            if (v47)
              v64 = v82.b;
            else
              v64 = v19;
            if (v47)
              b = v21;
            objc_msgSend(v59, "setBounds:", v62, v63, v64, b);
            objc_msgSend(v60, "addToArray:atIndex:", a2, v7);

          }
        }
        v8 = v45;
        v9 = v44;
        v10 = v43;
        v11 = v71;
      }
LABEL_59:
      --v7;
    }
    while (v12);
  }
  return 1;
}

uint64_t findZone(CGFloat *a1, void *a2, id *a3)
{
  id *v3;
  void *v4;
  CGFloat *v5;
  __double2 v6;
  CGFloat v7;
  CGFloat v8;
  double x;
  double y;
  double width;
  double height;
  uint64_t result;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  CGAffineTransform v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    v6 = __sincos_stret(a1[21] * 0.0174532925);
    v7 = *v5;
    v8 = v5[1];
    v20.size.width = v5[2];
    v20.size.height = v5[3];
    v19.a = v6.__cosval;
    v19.b = v6.__sinval;
    v19.c = -v6.__sinval;
    v19.d = v6.__cosval;
    v19.tx = 0.0;
    v19.ty = 0.0;
    v20.origin.x = v7;
    v20.origin.y = v8;
    v21 = CGRectApplyAffineTransform(v20, &v19);
    v22 = CGRectInset(v21, v21.size.width * 0.1, v21.size.height * 0.3);
    x = v22.origin.x;
    y = v22.origin.y;
    width = v22.size.width;
    height = v22.size.height;
    if (!*v3)
      break;
    result = objc_msgSend(*v3, "count");
    if (!(_DWORD)result)
      return result;
    v14 = result;
    v15 = 0;
    while (1)
    {
      v16 = (void *)objc_msgSend(*v3, "childAtIndex:", v15);
      result = objc_msgSend(v16, "canContain:", x, y, width, height);
      if ((result & 1) != 0)
        break;
      v15 = (v15 + 1);
      if (v14 == (_DWORD)v15)
        return result;
    }
LABEL_12:
    *v3 = v16;
    a1 = v5;
    a2 = v4;
    a3 = v3;
  }
  result = objc_msgSend(v4, "count");
  v17 = result;
  if ((_DWORD)result)
  {
    v18 = 0;
    while (1)
    {
      v16 = (void *)objc_msgSend(v4, "objectAtIndex:", v18);
      result = objc_msgSend(v16, "canContain:", x, y, width, height);
      if ((_DWORD)result)
        break;
      if (v17 == ++v18)
        return result;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t continueZone(int a1, CGFloat *a2, uint64_t a3)
{
  __double2 v6;
  CGFloat v7;
  CGFloat v8;
  double x;
  double y;
  double width;
  double height;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  CGAffineTransform v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v6 = __sincos_stret(a2[21] * 0.0174532925);
  v7 = *a2;
  v8 = a2[1];
  v19.size.width = a2[2];
  v19.size.height = a2[3];
  v18.a = v6.__cosval;
  v18.b = v6.__sinval;
  v18.c = -v6.__sinval;
  v18.d = v6.__cosval;
  v18.tx = 0.0;
  v18.ty = 0.0;
  v19.origin.x = v7;
  v19.origin.y = v8;
  v20 = CGRectApplyAffineTransform(v19, &v18);
  v21 = CGRectInset(v20, v20.size.width * 0.1, v20.size.height * 0.3);
  x = v21.origin.x;
  y = v21.origin.y;
  width = v21.size.width;
  height = v21.size.height;
  v13 = 0;
  if (objc_msgSend(*(id *)a3, "canContain:"))
  {
    v14 = objc_msgSend(*(id *)a3, "count");
    if (!v14)
      return 1;
    v15 = v14;
    v16 = 0;
    while (1)
    {
      v13 = (void *)objc_msgSend(*(id *)a3, "childAtIndex:", v16);
      if (objc_msgSend(v13, "canContain:", x, y, width, height))
        break;
      v16 = (v16 + 1);
      if (v15 == (_DWORD)v16)
        return 1;
    }
  }
  result = 0;
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = a1;
  return result;
}

uint64_t canBeMerged(void *a1)
{
  double v2;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && objc_msgSend(a1, "zoneGraphicType") == 2
    && (objc_msgSend(a1, "lineWidth"), v2 == 0.0))
  {
    return objc_msgSend(a1, "hasStroke") ^ 1;
  }
  else
  {
    return 0;
  }
}

UInt8 *read_string(__CFReadStream *a1)
{
  UInt8 *v2;
  size_t v3;
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  v2 = 0;
  if (CFReadStreamRead(a1, buffer, 4))
  {
    if (*(_DWORD *)buffer)
    {
      v3 = bswap32(*(unsigned int *)buffer);
      v2 = (UInt8 *)malloc_type_malloc(v3, 0x83DA52A5uLL);
      if (v2)
        CFReadStreamRead(a1, v2, v3);
    }
  }
  return v2;
}

void cmap_release(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      free(*(void **)(a1 + 8));
      free(*(void **)(a1 + 16));
      cmap_release(*(_QWORD *)(a1 + 32));
      cmap_csr_set_release(*(_QWORD *)(a1 + 48));
      free((void *)a1);
    }
  }
}

char *cmap_set_name(uint64_t a1, char *__s)
{
  void *v4;
  size_t v5;
  char *result;

  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    free(v4);
    *(_BYTE *)(a1 + 40) = 0;
  }
  v5 = strlen(__s);
  result = (char *)malloc_type_malloc(v5 + 1, 0x99634949uLL);
  *(_QWORD *)(a1 + 8) = result;
  if (result)
  {
    strcpy(result, __s);
    result = (char *)strcmp(__s, "Identity-H");
    if (!(_DWORD)result || (result = (char *)strcmp(__s, "Identity-V"), !(_DWORD)result))
      *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t cmap_set_ros(uint64_t a1, char *__s, const char *a3, int a4)
{
  void *v8;
  size_t v9;
  size_t v10;
  char *v11;

  v8 = *(void **)(a1 + 16);
  if (v8)
    free(v8);
  v9 = strlen(__s);
  v10 = v9 + strlen(a3) + 35;
  v11 = (char *)malloc_type_malloc(v10, 0x36FF4DB3uLL);
  *(_QWORD *)(a1 + 16) = v11;
  return snprintf_l(v11, v10, 0, "%s-%s-%u", __s, a3, a4);
}

void cmap_set_used_cmap(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  unsigned __int8 *ValueAtIndex;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unint64_t unichars;

  if (!*(_QWORD *)(a1 + 32))
  {
    if (a2 && *(_QWORD *)(a2 + 8))
    {
      do
        v4 = __ldxr((unsigned int *)a2);
      while (__stxr(v4 + 1, (unsigned int *)a2));
      *(_QWORD *)(a1 + 32) = a2;
      if (!*(_QWORD *)(a1 + 48))
      {
        v5 = cmap_csr_set_create();
        *(_QWORD *)(a1 + 48) = v5;
        if (v5)
        {
          v6 = *(_QWORD *)(a2 + 48);
          if (v6)
          {
            v7 = v5;
            Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 8));
            if (Count)
            {
              v9 = Count;
              for (i = 0; i != v9; ++i)
              {
                ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 8), i);
                cmap_csr_set_add_codespace_range((unsigned __int8 *)v7, *ValueAtIndex, *((_DWORD *)ValueAtIndex + 1), *((_DWORD *)ValueAtIndex + 2));
              }
            }
            v12 = *(_QWORD *)(v6 + 16);
            if (v12)
            {
              v13 = *(_QWORD *)(v7 + 16);
              if (v13)
                goto LABEL_14;
              v13 = operator new();
              *(_DWORD *)v13 = 0;
              *(_OWORD *)(v13 + 8) = 0u;
              *(_OWORD *)(v13 + 24) = 0u;
              *(_OWORD *)(v13 + 40) = 0u;
              *(_OWORD *)(v13 + 56) = 0u;
              *(_QWORD *)(v13 + 72) = 0;
              *(_DWORD *)(v13 + 80) = 1065353216;
              *(_QWORD *)(v7 + 16) = v13;
              v12 = *(_QWORD *)(v6 + 16);
              if (v12)
LABEL_14:
                v14 = 2 * *(_QWORD *)(v12 + 40);
              else
                v14 = 0;
              v15 = (unsigned __int16 *)malloc_type_malloc(v14, 0x1000040BDFB0063uLL);
              if (v15)
              {
                v21 = v15;
                if (*(_DWORD *)v12)
                {
                  v22 = 0;
                  do
                  {
                    unichars = cmap_bf_set_get_unichars(v12, (unsigned __int16)v22, (uint64_t)v21, v16, v17, v18, v19, v20);
                    cmap_bf_set_add_range(v13, v22, v22, unichars, v21);
                    ++v22;
                  }
                  while (v22 < *(_DWORD *)v12);
                }
                free(v21);
              }
            }
          }
        }
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
}

uint64_t cmap_add_cid_range(uint64_t result, unsigned __int8 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  if (result)
  {
    v8 = result;
    v9 = a2;
    result = check_dimension(a2, a3, a4);
    if ((_DWORD)result)
    {
      result = (uint64_t)find_csr(v8, v9, a3, a4);
      if (result)
      {
        v10 = result;
        v11 = *(_QWORD *)(result + 16);
        if (v11)
        {
LABEL_11:
          result = (uint64_t)add_range(v11, a3 | (unint64_t)(a4 << 32), a5);
          *(_BYTE *)(v11 + 32) = 1;
          return result;
        }
        v12 = *(unsigned __int8 *)result;
        if (v12 <= 4 && ((1 << v12) & 0x16) != 0)
        {
          result = (uint64_t)malloc_type_calloc(1uLL, 0x28uLL, 0x10200401AE633E8uLL);
          if (result)
          {
            v11 = result;
            *(_BYTE *)result = v12;
            *(_BYTE *)(result + 32) = 0;
            *(_QWORD *)(v10 + 16) = result;
            goto LABEL_11;
          }
        }
        *(_QWORD *)(v10 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t cmap_add_notdef_range(uint64_t result, unsigned __int8 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v14;

  if (result)
  {
    v8 = result;
    v9 = a2;
    result = check_dimension(a2, a3, a4);
    if ((_DWORD)result)
    {
      result = (uint64_t)find_csr(v8, v9, a3, a4);
      if (result)
      {
        v10 = result;
        v11 = *(_QWORD *)(result + 24);
        if (!v11)
        {
          v12 = *(unsigned __int8 *)result;
          if (v12 > 4 || ((1 << v12) & 0x16) == 0)
          {
            v11 = 0;
          }
          else
          {
            v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x10200401AE633E8uLL);
            v11 = (uint64_t)v14;
            if (v14)
            {
              *v14 = v12;
              v14[32] = 0;
            }
          }
          *(_QWORD *)(v10 + 24) = v11;
        }
        result = (uint64_t)add_range(v11, a3 | (unint64_t)(a4 << 32), a5);
        *(_BYTE *)(v11 + 32) = 1;
      }
    }
  }
  return result;
}

unint64_t cmap_convert(uint64_t a1, unsigned __int16 *a2, unint64_t a3, _WORD *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  CFArrayRef *v9;
  CFIndex Count;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  CFIndex v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64x2_t v23;
  char v24;
  char v25;
  int64x2_t v26;
  int32x2_t v27;
  uint64_t v28;
  unsigned int v29;
  int64x2_t v30;
  int32x2_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  CFIndex v37;
  uint64_t v38;
  unsigned __int8 *ValueAtIndex;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  int64x2_t v45;
  int32x2_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  int64x2_t v50;
  int32x2_t v51;
  uint64_t v52;
  unsigned int v53;
  int v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v59;
  unint64_t v60;
  char v61;
  int v62;
  unint64_t *v63;
  _WORD *v64;
  unsigned __int8 *v65;
  uint64x2_t v66;
  CFIndex v67;
  int64x2_t v68;
  CFArrayRef *v69;
  unint64_t v70;
  __int16 v71;
  uint64_t v72;
  int v73;
  _BYTE v74[16];

  v5 = a3;
  if (*(_BYTE *)(a1 + 40))
  {
    v7 = a3 >> 1;
    if (a3 >= 2)
    {
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = a3 >> 1;
      do
      {
        *a4++ = bswap32(*a2) >> 16;
        if (a5)
          *a5++ = 2;
        ++a2;
        --v8;
      }
      while (v8);
    }
    return v7;
  }
  if (!a3)
    return 0;
  v63 = a5;
  v64 = a4;
  v7 = 0;
  v9 = *(CFArrayRef **)(a1 + 48);
  v59 = *(_QWORD *)(a1 + 32);
  v71 = 0;
  v65 = (unsigned __int8 *)v9 + 1;
  v69 = v9;
  v70 = 0;
  v68 = vdupq_n_s64(2uLL);
  do
  {
    if (!v9)
    {
      v13 = v5;
      goto LABEL_57;
    }
    v73 = 0;
    v72 = 0;
    Count = CFArrayGetCount(v9[1]);
    v11 = *(unsigned __int8 *)v9;
    v67 = Count;
    if (!Count)
      goto LABEL_18;
    v12 = *v65 >= v5 ? v5 : *v65;
    if (v12 < v11)
      goto LABEL_18;
    v35 = 0;
    v36 = *(unsigned __int8 *)v9;
    v60 = v12;
    v61 = *(_BYTE *)v9;
    while (2)
    {
      v37 = 0;
      v38 = (v36 + 1) & 0x1FE;
      v62 = v35;
      v66 = (uint64x2_t)vdupq_n_s64((unint64_t)(v11 + v35) - 1);
      do
      {
        ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v9[1], v37);
        v40 = *ValueAtIndex;
        if (v36 == v40)
        {
          v41 = ValueAtIndex;
          if ((_BYTE)v36)
          {
            v42 = 0;
            v43 = *((_DWORD *)ValueAtIndex + 1);
            v44 = 8 * v36 - 8;
            v45 = (int64x2_t)xmmword_185004A00;
            do
            {
              v46 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v45));
              if ((v46.i8[0] & 1) != 0)
                v74[v42 + 4] = v43 >> v44;
              if ((v46.i8[4] & 1) != 0)
                v74[v42 + 5] = v43 >> (8 * (v36 + (v42 ^ 0xFE)));
              v42 += 2;
              v45 = vaddq_s64(v45, vdupq_n_s64(2uLL));
              v44 -= 16;
            }
            while (v38 != v42);
            v47 = 0;
            v48 = *((_DWORD *)ValueAtIndex + 2);
            v49 = 8 * v36 - 8;
            v50 = (int64x2_t)xmmword_185004A00;
            do
            {
              v51 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v50));
              if ((v51.i8[0] & 1) != 0)
                v74[v47] = v48 >> v49;
              if ((v51.i8[4] & 1) != 0)
                v74[v47 + 1] = v48 >> (8 * (v36 + (v47 ^ 0xFE)));
              v47 += 2;
              v50 = vaddq_s64(v50, vdupq_n_s64(2uLL));
              v49 -= 16;
            }
            while (v38 != v47);
          }
          v52 = 0;
          if (v36)
          {
            while (1)
            {
              v53 = *((unsigned __int8 *)a2 + v52);
              if (v53 < v74[v52 + 4] || v53 > v74[v52])
                break;
              if (v36 == ++v52)
                goto LABEL_86;
            }
          }
          if (v52 == v36)
          {
LABEL_86:
            v55 = 0;
            if ((_DWORD)v40)
            {
              v56 = 0;
              do
                v55 = *((unsigned __int8 *)a2 + v56++) | (v55 << 8);
              while (v36 != v56);
            }
            if (cmap_cid_set_find_matching_range(*((_QWORD *)ValueAtIndex + 2), v55, (uint64_t)&v72))
            {
              v57 = v55 + v73 - v72;
            }
            else
            {
              if (!cmap_cid_set_find_matching_range(*((_QWORD *)v41 + 3), v55, (uint64_t)&v72))
              {
                if (v59 && cmap_convert(v59, a2, *v41, &v71, &v70) == 1)
                {
LABEL_95:
                  v9 = v69;
                  if (v64)
                    *v64++ = v71;
                  else
                    v64 = 0;
                  v13 = v70;
                  if (v63)
                  {
                    *v63++ = v70;
                    v13 = v70;
                  }
                  else
                  {
                    v63 = 0;
                  }
                  ++v7;
                  goto LABEL_58;
                }
                v71 = v55;
LABEL_94:
                v70 = *v41;
                goto LABEL_95;
              }
              v57 = v73;
            }
            v71 = v57;
            goto LABEL_94;
          }
        }
        ++v37;
        v9 = v69;
      }
      while (v37 != v67);
      v35 = v62 + 1;
      LOBYTE(v11) = v61;
      if (v36++ != v60)
        continue;
      break;
    }
    LODWORD(v11) = *(unsigned __int8 *)v69;
LABEL_18:
    v13 = v5;
    if (v5 >= v11)
    {
      v14 = (unsigned __int8 *)CFArrayGetCount(v9[1]);
      if (v14)
      {
        v15 = v14;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        do
        {
          v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v69[1], v17);
          v19 = *v14;
          if (v5 < v19)
            goto LABEL_42;
          if (*v14)
          {
            v20 = 0;
            v21 = *((_DWORD *)v14 + 1);
            v22 = ((_WORD)v19 + 1) & 0x1FE;
            v23 = (uint64x2_t)vdupq_n_s64(v19 - 1);
            v24 = 8 * v19 - 8;
            v25 = v24;
            v26 = (int64x2_t)xmmword_185004A00;
            do
            {
              v27 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v26));
              if ((v27.i8[0] & 1) != 0)
                v74[v20 + 4] = v21 >> v25;
              if ((v27.i8[4] & 1) != 0)
                v74[v20 + 5] = v21 >> (8 * ((v20 ^ 0xFE) + v19));
              v20 += 2;
              v26 = vaddq_s64(v26, v68);
              v25 -= 16;
            }
            while (v22 != v20);
            v28 = 0;
            v29 = *((_DWORD *)v14 + 2);
            v30 = (int64x2_t)xmmword_185004A00;
            do
            {
              v31 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v30));
              if ((v31.i8[0] & 1) != 0)
                v74[v28] = v29 >> v24;
              if ((v31.i8[4] & 1) != 0)
                v74[v28 + 1] = v29 >> (8 * ((v28 ^ 0xFE) + v19));
              v28 += 2;
              v30 = vaddq_s64(v30, vdupq_n_s64(2uLL));
              v24 -= 16;
            }
            while (v22 != v28);
            v32 = 0;
            while (1)
            {
              v33 = *((unsigned __int8 *)a2 + v32);
              if (v33 < v74[v32 + 4] || v33 > v74[v32])
                break;
              if (v19 == ++v32)
              {
                v32 = v19;
                break;
              }
            }
          }
          else
          {
            v32 = 0;
          }
          if (v32 >= v16)
          {
            if (v32 == v16)
            {
              if (v18 && v19 >= *v18)
                v14 = v18;
            }
            else if (v32 > v16)
            {
              v16 = v32;
            }
          }
          else
          {
LABEL_42:
            v14 = v18;
          }
          ++v17;
          v18 = v14;
        }
        while ((unsigned __int8 *)v17 != v15);
      }
      v34 = v65;
      if (v14)
        v34 = v14;
      v13 = *v34;
      v9 = v69;
    }
LABEL_57:
    v70 = v13;
LABEL_58:
    a2 = (unsigned __int16 *)((char *)a2 + v13);
    v5 -= v13;
  }
  while (v5);
  return v7;
}

uint64_t CGPDFObjectStreamCreate(const void **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t cftype;
  CGPDFDictionary *v6;
  const void *v7;
  _QWORD *v9;
  const void *v10;
  int v11;
  char *value;
  uint64_t v13;
  CGPDFInteger v14;

  v2 = 0;
  if (a1 && a2)
  {
    if (CGPDFObjectStreamGetTypeID_onceToken != -1)
      dispatch_once(&CGPDFObjectStreamGetTypeID_onceToken, &__block_literal_global_13868);
    cftype = pdf_create_cftype();
    v2 = cftype;
    if (cftype)
    {
      v13 = 0;
      v14 = 0;
      value = 0;
      v11 = 0;
      *(_QWORD *)(cftype + 32) = a2;
      v6 = *(CGPDFDictionary **)(a2 + 48);
      if (CGPDFDictionaryGetName(v6, "Type", (const char **)&value))
      {
        if (!strcmp(value, "ObjStm"))
        {
          if (!CGPDFDictionaryGetInteger(v6, "N", &v14) || v14 < 0)
          {
          }
          else
          {
            *(_QWORD *)(v2 + 16) = v14;
            if (!CGPDFDictionaryGetOffset(v6, "First", &v13) || v13 < 0)
            {
            }
            else
            {
              *(_QWORD *)(v2 + 24) = v13;
              v9 = pdf_object_scanner_create_with_xref(a1, 1);
              *(_QWORD *)(v2 + 40) = v9;
              if (v9)
              {
                v10 = (const void *)CGPDFStreamCreateFilterChain(a2, &v11);
                if (v10)
                {
                  v7 = v10;
                  if (!v11)
                  {
                    pdf_object_scanner_set_source(*(uint64_t **)(v2 + 40), v10);
                    goto LABEL_11;
                  }
                  CFRelease(v7);
                }
              }
              else
              {
                pdf_error("internal error: failed to create object stream.");
              }
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
      v7 = (const void *)v2;
      v2 = 0;
LABEL_11:
      CFRelease(v7);
    }
  }
  return v2;
}

void CGPDFObjectStreamFinalize(uint64_t a1)
{
  if (a1)
    pdf_object_scanner_release(*(uint64_t **)(a1 + 40));
}

uint64_t CGPDFObjectStreamGetObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  result = 0;
  if (a1 && !(_WORD)a3)
  {
    CGPDFSourceSetPosition(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 0, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(a1 + 16))
      return 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(uint64_t **)(a1 + 40);
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
      if (pdf_object_scanner_read_object(v21, (uint64_t)&v38, v12, v13, v14, v15, v16, v17))
      {
        if (DWORD2(v38) == 12 || DWORD2(v38) == 3)
        {
          v19 = v40;
        }
        else if ((DWORD2(v38) - 5) <= 4)
        {
          pdf_object_release_compound_value((uint64_t)&v38);
        }
      }
      v29 = *(uint64_t **)(a1 + 40);
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
      if (pdf_object_scanner_read_object(v29, (uint64_t)&v38, v22, v23, v24, v25, v26, v27))
      {
        if (DWORD2(v38) == 12 || DWORD2(v38) == 3)
        {
          v18 = v40;
        }
        else if ((DWORD2(v38) - 5) <= 4)
        {
          pdf_object_release_compound_value((uint64_t)&v38);
        }
      }
      v31 = *(_QWORD *)(a1 + 16);
      if (a2 == v19)
        break;
      ++v20;
    }
    while (v20 < v31);
    if (v20 != v31)
    {
      CGPDFSourceSetPosition(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v18 + *(_QWORD *)(a1 + 24), v12, v13, v14, v15, v16, v17);
      return pdf_object_scanner_read_object(*(uint64_t **)(a1 + 40), a4, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGCFDataIncreaseLength(__CFData *a1, CFIndex a2)
{
  CFDataIncreaseLength(a1, a2);
  return 1;
}

void sub_184D2BBC8(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x184D2BBC0);
}

uint64_t CGCFDataCreateWithContentsOfFileAtURL(const __CFURL *a1)
{
  int v1;
  off_t st_size;
  void *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  stat v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  UInt8 buffer[1024];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    v1 = open((const char *)buffer, 0, 0);
    v34 = v1;
    if (v1 != -1)
    {
      v33 = &v34;
      if (fstat(v1, &v32) != -1)
      {
        st_size = v32.st_size;
        v38 = 0;
        v35 = 0;
        v36 = 5;
        v37 = 2147500032;
        if (!getattrlist((const char *)buffer, &v36, &v35, 8uLL, 0)
          && (WORD2(v35) & 0x1200) == 0x1000
          && ((v37 = 0, v38 = 0, v36 = 0x4000000000000005, getattrlist((const char *)buffer, &v36, &v35, 8uLL, 1u))
           || HIDWORD(v35) != 1))
        {
          v14 = mmap(0, st_size, 1, 16386, v34, 0);
          if (v14 != (void *)-1)
          {
            v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:deallocator:", v14, st_size, &__block_literal_global_13892);
            goto LABEL_15;
          }
          v23 = __error();
          strerror(*v23);
          CGPostError((uint64_t)"Failed to open file (%s): %s", v24, v25, v26, v27, v28, v29, v30, (char)buffer);
        }
        else
        {
          v3 = malloc_type_malloc(st_size, 0x2AF1E476uLL);
          if (v3)
          {
            if (read(v34, v3, st_size) == st_size)
            {
              v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:deallocator:", v3, st_size, &__block_literal_global_4_13894);
LABEL_15:
              v13 = v4;
LABEL_19:
              close(v34);
              return v13;
            }
            v15 = __error();
            strerror(*v15);
            CGPostError((uint64_t)"Failed to read contents of file (%s): %s", v16, v17, v18, v19, v20, v21, v22, (char)buffer);
          }
        }
      }
      v13 = 0;
      goto LABEL_19;
    }
    v5 = __error();
    strerror(*v5);
    CGPostError((uint64_t)"Failed to open file (%s): %s", v6, v7, v8, v9, v10, v11, v12, (char)buffer);
  }
  return 0;
}

void sub_184D2BE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int *a30)
{
  applesauce::raii::v1::detail::ScopeGuard<CGCFDataCreateWithContentsOfFileAtURL::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a30);
  _Unwind_Resume(a1);
}

int **applesauce::raii::v1::detail::ScopeGuard<CGCFDataCreateWithContentsOfFileAtURL::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(int **a1)
{
  close(**a1);
  return a1;
}

unsigned __int8 *CPPDFStyleListGetStyle(uint64_t a1)
{
  uint64_t **v2;
  unsigned __int8 *v3;
  _BYTE *v4;
  CGColor *v5;
  int v6;
  double v7;
  __int128 v8;
  __int128 v9;
  uint64_t *i;
  uint64_t *j;
  CGColor *v12;
  CGColorRef CopyWithAlpha;
  CGColorSpace *DeviceRGB;
  uint64_t *v15;
  CGColor *v16;
  CGColorRef v17;
  CGColorSpace *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  __int128 v22;
  __int128 v23;
  double v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CGFloat components[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t ***)(a1 + 40);
  v3 = *(unsigned __int8 **)(a1 + 2256);
  if (v3)
  {
    v4 = (char *)v2 + 9;
    if (*((_BYTE *)v2 + 9))
    {
      v5 = (CGColor *)v2[32];
      v6 = -4;
      while (1)
      {
        if (CGColorEqualToColor(*(CGColorRef *)v3, v5)
          && CGColorEqualToColor(*((CGColorRef *)v3 + 2), (CGColorRef)v2[34])
          && *((_DWORD *)v3 + 13) == *((_DWORD *)v2 + 77)
          && *((double *)v3 + 4) == *((double *)v2 + 36)
          && *((double *)v3 + 5) == *((double *)v2 + 37)
          && v3[48] == *((unsigned __int8 *)v2 + 304)
          && v3[49] == *((unsigned __int8 *)v2 + 305)
          && *((double *)v3 + 7) == *((double *)v2 + 39)
          && *((uint64_t **)v3 + 8) == v2[31])
        {
          v7 = *((double *)v2 + 27);
          v8 = *((_OWORD *)v2 + 2);
          *(_OWORD *)components = *((_OWORD *)v2 + 1);
          v30 = v8;
          v31 = *((_OWORD *)v2 + 3);
          v9 = *(_OWORD *)(v2 + 13);
          v26 = *(_OWORD *)(v2 + 11);
          v27 = v9;
          v28 = *(_OWORD *)(v2 + 15);
          if (fontSize(components, (double *)&v26, v7) == *((double *)v3 + 9)
            && *((uint64_t **)v3 + 10) == v2[47]
            && *((uint64_t **)v3 + 11) == v2[48])
          {
            break;
          }
        }
        if (v6)
        {
          v3 = (unsigned __int8 *)*((_QWORD *)v3 + 13);
          ++v6;
          if (v3)
            continue;
        }
        v3 = (unsigned __int8 *)malloc_type_malloc(0x70uLL, 0x10A00408C90C9C2uLL);
        *((_QWORD *)v3 + 13) = *(_QWORD *)(a1 + 2256);
        *(_QWORD *)(a1 + 2256) = v3;
        if (!*v4)
          goto LABEL_26;
        for (i = *v2; i; i = (uint64_t *)*i)
          *((_BYTE *)i + 9) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v3 = (unsigned __int8 *)malloc_type_malloc(0x70uLL, 0x10A00408C90C9C2uLL);
    *((_QWORD *)v3 + 13) = 0;
    *(_QWORD *)(a1 + 2256) = v3;
    v4 = (char *)v2 + 9;
    if (*((_BYTE *)v2 + 9))
    {
      for (j = *v2; j; j = (uint64_t *)*j)
        *((_BYTE *)j + 9) = 1;
LABEL_25:
      *v4 = 0;
    }
LABEL_26:
    v12 = (CGColor *)v2[32];
    if (v12)
    {
      CopyWithAlpha = CGColorCreateCopyWithAlpha(v12, *((CGFloat *)v2 + 42));
    }
    else
    {
      *(_OWORD *)components = xmmword_1850022A8;
      v30 = unk_1850022B8;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      CopyWithAlpha = CGColorCreate(DeviceRGB, components);
      CGColorSpaceRelease(DeviceRGB);
    }
    *(_QWORD *)v3 = CopyWithAlpha;
    v15 = v2[33];
    if (v15)
    {
      *((_QWORD *)v3 + 1) = v15;
      CFRetain(v15);
    }
    else
    {
      *((_QWORD *)v3 + 1) = CGColorSpaceCreateDeviceRGB();
    }
    v16 = (CGColor *)v2[34];
    if (v16)
    {
      v17 = CGColorCreateCopyWithAlpha(v16, *((CGFloat *)v2 + 43));
    }
    else
    {
      *(_OWORD *)components = xmmword_1850022A8;
      v30 = unk_1850022B8;
      v18 = CGColorSpaceCreateDeviceRGB();
      v17 = CGColorCreate(v18, components);
      CGColorSpaceRelease(v18);
    }
    *((_QWORD *)v3 + 2) = v17;
    v19 = v2[35];
    if (v19)
    {
      *((_QWORD *)v3 + 3) = v19;
      CFRetain(v19);
    }
    else
    {
      *((_QWORD *)v3 + 3) = CGColorSpaceCreateDeviceRGB();
    }
    *((_OWORD *)v3 + 2) = *((_OWORD *)v2 + 18);
    *((_WORD *)v3 + 24) = *((_WORD *)v2 + 152);
    *((_DWORD *)v3 + 13) = *((_DWORD *)v2 + 77);
    *((_QWORD *)v3 + 7) = v2[39];
    v20 = v2[31];
    *((_QWORD *)v3 + 8) = v20;
    if (v20)
    {
      v21 = *((double *)v2 + 27);
      v22 = *((_OWORD *)v2 + 2);
      *(_OWORD *)components = *((_OWORD *)v2 + 1);
      v30 = v22;
      v31 = *((_OWORD *)v2 + 3);
      v23 = *(_OWORD *)(v2 + 13);
      v26 = *(_OWORD *)(v2 + 11);
      v27 = v23;
      v28 = *(_OWORD *)(v2 + 15);
      v24 = fontSize(components, (double *)&v26, v21);
    }
    else
    {
      v24 = 0.0;
    }
    *((double *)v3 + 9) = v24;
    *((_OWORD *)v3 + 5) = *(_OWORD *)(v2 + 47);
    *((_QWORD *)v3 + 12) = 0;
  }
  return v3;
}

double fontSize(double *a1, double *a2, double a3)
{
  return fabs(sqrt(fabs((a2[1] * a1[2] + *a2 * *a1) * (a2[3] * a1[3] + a2[2] * a1[1])- (a2[1] * a1[3] + *a2 * a1[1]) * (a2[3] * a1[2] + a2[2] * *a1)))* a3);
}

void flate_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 114) = 0;
    *(_WORD *)(a1 + 112) = 0;
    CGPDFSourceRewind(*(_QWORD *)(a1 + 120), a2, a3, a4, a5, a6, a7, a8);
    if (inflateReset((z_streamp)a1))
    {
      if (*(_QWORD *)(a1 + 48))
        pdf_error("FlateDecode: rewind error: %s.");
      else
        pdf_error("FlateDecode: rewind error.");
      *(_BYTE *)(a1 + 113) = 1;
    }
  }
}

BOOL flate_has_error(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 113) != 0;
  return result;
}

uint64_t CGContextCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGContextCreateWithDelegateAndInfo(0, 0, 0, 0, 0, 0, a7, a8);
}

__CFString *context_copy_format_description(uint64_t a1)
{
  int v2;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  CFStringRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  unsigned int v27;
  size_t v28;
  unsigned int v29;
  size_t v30;
  size_t v31;
  CFStringRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  double HeadroomInfo;
  const char *v41;
  const char *v42;
  uint64_t v43;
  char __s[4];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 24);
  v3 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = Mutable;
  v6 = "kCGContextTypeUnknown";
  switch(v2)
  {
    case 0:
      goto LABEL_15;
    case 1:
      v6 = "kCGContextTypePDF";
      goto LABEL_15;
    case 2:
      v6 = "kCGContextTypePostScript";
      goto LABEL_15;
    case 3:
      v6 = "kCGContextTypeWindow";
      goto LABEL_15;
    case 4:
      CFStringAppendFormat(Mutable, 0, CFSTR("<CGContext %p> (%s)"), a1, "kCGContextTypeBitmap");
      if (*(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
      {
        v13 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 32);
      }
      else
      {
        handle_invalid_context((char)"CGBitmapContextGetColorSpace", a1, v7, v8, v9, v10, v11, v12);
        v13 = 0;
      }
      v32 = CFCopyDescription(v13);
      CFStringAppendFormat(v5, 0, CFSTR("\n\t<%@>"), v32);
      if (*(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      }
      else
      {
        handle_invalid_context((char)"CGBitmapContextGetWidth", a1, v33, v34, v35, v36, v37, v38);
        v20 = 0;
        if (*(_DWORD *)(a1 + 16) != 1129601108)
          goto LABEL_37;
      }
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        goto LABEL_38;
      }
LABEL_37:
      handle_invalid_context((char)"CGBitmapContextGetHeight", a1, v33, v34, v35, v36, v37, v38);
      v21 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108)
        goto LABEL_40;
LABEL_38:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
        goto LABEL_41;
      }
LABEL_40:
      handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", a1, v33, v34, v35, v36, v37, v38);
      v22 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108)
        goto LABEL_43;
LABEL_41:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
        goto LABEL_44;
      }
LABEL_43:
      handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", a1, v33, v34, v35, v36, v37, v38);
      v23 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108)
        goto LABEL_46;
LABEL_44:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
        goto LABEL_47;
      }
LABEL_46:
      handle_invalid_context((char)"CGBitmapContextGetBytesPerRow", a1, v33, v34, v35, v36, v37, v38);
      v24 = 0;
      if (*(_DWORD *)(a1 + 16) != 1129601108)
        goto LABEL_49;
LABEL_47:
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40);
        goto LABEL_50;
      }
LABEL_49:
      handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", a1, v33, v34, v35, v36, v37, v38);
      v25 = 0;
LABEL_50:
      if (!v13 || *(_DWORD *)(v13[3] + 24) != 1)
        goto LABEL_66;
      if (*(_DWORD *)(a1 + 16) == 1129601108)
      {
        v39 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 48);
        if (v39 != 0.0)
        {
          CFStringAppendFormat(v5, 0, CFSTR("\n\t\tEDR target headroom = %f"), v39, v43);
          goto LABEL_66;
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetEDRTargetHeadroom", a1, v33, v34, v35, v36, v37, v38);
      }
      CFStringAppendFormat(v5, 0, CFSTR("\n\t\tEDR target headroom not set"));
      if (CGOSAppleInternalBuild_predicate != -1)
        dispatch_once(&CGOSAppleInternalBuild_predicate, &__block_literal_global_16536);
      if (CGOSAppleInternalBuild_is_internal && !*(_BYTE *)(v13[3] + 13))
      {
        *(_DWORD *)__s = 0;
        HeadroomInfo = CGColorSpaceGetHeadroomInfo(v13, (int *)__s);
        v41 = "origin unknown";
        if (*(_DWORD *)__s == 2)
          v41 = "estimated";
        if (*(_DWORD *)__s == 1)
          v42 = "from color space";
        else
          v42 = v41;
        CFStringAppendFormat(v5, 0, CFSTR(" [INTERNAL INFO] %f (%s) will be used as target for PQ/HLG"), *(_QWORD *)&HeadroomInfo, v42);
      }
      goto LABEL_66;
    case 5:
      v6 = "kCGContextTypeGL";
      goto LABEL_15;
    case 6:
      v6 = "kCGContextTypeDisplayList";
      goto LABEL_15;
    case 7:
      v6 = "kCGContextTypeKSeparation";
      goto LABEL_15;
    case 8:
      v6 = "kCGContextTypeIOSurface";
      goto LABEL_15;
    case 9:
      v6 = "kCGContextTypeAutomatic";
      goto LABEL_15;
    case 11:
      v6 = "kCGContextTypeCoreAnimationAutomatic";
      goto LABEL_15;
    case 12:
      CFStringAppendFormat(Mutable, 0, CFSTR("<CGContext %p> (%s)"), a1, "kCGContextTypePDFSoftmask");
      v15 = *(_QWORD *)(a1 + 40);
      if (v15 && (v16 = *(uint64_t (**)(void))(v15 + 248)) != 0 && (v17 = v16()) != 0)
      {
        v18 = v17;
        v19 = CFCopyDescription(*(CFTypeRef *)(v17 + 32));
        CFStringAppendFormat(v5, 0, CFSTR("\n\t<%@>"), v19);
        v20 = *(_QWORD *)(v18 + 8);
        v21 = *(_QWORD *)(v18 + 16);
        v23 = *(_QWORD *)(v18 + 72);
        v22 = *(_QWORD *)(v18 + 80);
        v24 = *(_QWORD *)(v18 + 88);
        v25 = *(_DWORD *)(v18 + 40);
LABEL_66:
        v26 = "kCGImageAlphaNone";
        switch(v25 & 0x1F)
        {
          case 0u:
            goto LABEL_22;
          case 1u:
            v26 = "kCGImageAlphaPremultipliedLast";
            goto LABEL_22;
          case 2u:
            v26 = "kCGImageAlphaPremultipliedFirst";
            goto LABEL_22;
          case 3u:
            v26 = "kCGImageAlphaLast";
            goto LABEL_22;
          case 4u:
            v26 = "kCGImageAlphaFirst";
            goto LABEL_22;
          case 5u:
            v26 = "kCGImageAlphaNoneSkipLast";
            goto LABEL_22;
          case 6u:
            v26 = "kCGImageAlphaNoneSkipFirst";
            goto LABEL_22;
          case 7u:
            v26 = "kCGImageAlphaOnly";
            goto LABEL_22;
          default:
            break;
        }
      }
      else
      {
        v25 = 0;
        v24 = 0;
        v23 = 0;
        v22 = 0;
        v21 = 0;
        v20 = 0;
        v26 = "kCGImageAlphaNone";
LABEL_22:
        __sprintf_chk(__s, 0, 0x100uLL, "%s | ", v26);
      }
      v27 = (v25 >> 12) & 7;
      if (v27 <= 4)
      {
        v28 = strlen(__s);
        sprintf(&__s[v28], "%s ", off_1E165F6D8[v27]);
      }
      v29 = HIWORD(v25) & 0xF;
      if (v29 <= 4)
      {
        v30 = strlen(__s);
        sprintf(&__s[v30], "%s ", off_1E165F700[v29]);
      }
      if ((v25 & 0x100) != 0)
      {
        v31 = strlen(__s);
        sprintf(&__s[v31], "%s ", "| kCGBitmapFloatComponents");
      }
      CFStringAppendFormat(v5, 0, CFSTR("\n\t\twidth = %ld, height = %ld, bpc = %ld, bpp = %ld, row bytes = %ld \n\t\t%s"), v20, v21, v22, v23, v24, __s);
      return v5;
    default:
      v6 = "?? type";
LABEL_15:
      CFStringAppendFormat(Mutable, 0, CFSTR("<CGContext %p> (%s)"), a1, v6);
      return v5;
  }
}

CFTypeID CGContextGetTypeID(void)
{
  if (_block_invoke_once_13941 != -1)
    dispatch_once(&_block_invoke_once_13941, &__block_literal_global_4_13942);
  return CGContextGetTypeID_type_id;
}

uint64_t CGContextGetDelegateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_QWORD *)(a1 + 32);
  handle_invalid_context((char)"CGContextGetDelegateInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CG::DisplayList::patternResourceForPattern(CG::DisplayList *this, CGPattern *a2)
{
  const __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  _QWORD *isa;
  std::__shared_weak_count *info;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __CFString **p_info;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  CG::DisplayList *v29;
  const CGRect *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CG::DisplayList *v36;
  _DWORD *CGDisplayList;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *ContextDelegate;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  void *values[4];
  void *keys;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  ++*((_QWORD *)this + 83);
  v4 = (const __CFString *)((char *)this + 328);
  v5 = (__CFString *)*((_QWORD *)this + 41);
  v6 = (__CFString *)((char *)this + 328);
  if (!v5)
    goto LABEL_35;
  v6 = (__CFString *)((char *)this + 328);
  do
  {
    isa = v5[1].isa;
    info = (std::__shared_weak_count *)v5[1].info;
    if (info)
    {
      p_shared_owners = (unint64_t *)&info->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = isa[2];
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
        std::__shared_weak_count::__release_weak(info);
      }
    }
    else
    {
      v11 = isa[2];
    }
    p_info = (__CFString **)&v5->info;
    if (v11 >= (unint64_t)a2)
    {
      p_info = (__CFString **)v5;
      v6 = v5;
    }
    v5 = *p_info;
  }
  while (*p_info);
  if (v4 == v6)
    goto LABEL_35;
  v14 = v6[1].isa;
  v15 = (std::__shared_weak_count *)v6[1].info;
  v16 = (uint64_t *)&v6[1];
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v14[2] >= (unint64_t)a2)
  {
    v21 = v6[1].isa;
    v22 = (std::__shared_weak_count *)v6[1].info;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = v21[2] <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = v21[2] <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v26 = (unint64_t *)&v15->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v19)
    {
LABEL_35:
      v28 = operator new();
      *(_DWORD *)(v28 + 8) = 117440512;
      *(_QWORD *)v28 = &off_1E16293D0;
      *(_QWORD *)(v28 + 16) = 0;
      CG::DisplayListResourcePattern::setPattern((CG::DisplayListResourcePattern *)v28, a2);
      if (!*((_BYTE *)a2 + 186))
      {
        keys = CFSTR("trackShape");
        v51 = CFSTR("trackDrawing");
        v52 = CFSTR("trackColors");
        v53 = CFSTR("trackGlyphs");
        values[0] = *(void **)MEMORY[0x1E0C9AE40];
        values[1] = values[0];
        values[2] = values[0];
        values[3] = values[0];
        v29 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v36 = v29;
        if (v29)
        {
          CGDisplayList = (_DWORD *)CG::DisplayList::createCGDisplayList(v29, (const __CFDictionary *)&CGRectInfinite, v30, v31, v32, v33, v34, v35);
          v38 = CGDisplayList;
          if (CGDisplayList)
          {
            ContextDelegate = (const void *)CG::DisplayList::createContextDelegate(CGDisplayList);
            if (ContextDelegate)
            {
              CGPatternDrawInContextDelegate((uint64_t)a2, ContextDelegate, 0, 0, v39, v40, v41, v42);
              CFRelease(ContextDelegate);
            }
            *(_DWORD *)(v28 + 8) |= v38[20] & 0x3000;
            CFRelease(v38);
          }
          CFRelease(v36);
        }
      }
      v44 = (uint64_t *)operator new(0x30uLL);
      keys = v44;
      v51 = v4;
      LOBYTE(v52) = 0;
      std::shared_ptr<CG::DisplayListResourcePattern>::shared_ptr[abi:se180100]<CG::DisplayListResourcePattern,void>(v44 + 4, v28);
      v45 = (uint64_t **)((char *)this + 320);
      LOBYTE(v52) = 1;
      v46 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v45, v6, values, &v48, v44 + 4);
      v47 = *v46;
      if (!*v46)
      {
        std::__tree<unsigned long>::__insert_node_at(v45, (uint64_t)values[0], v46, v44);
        keys = 0;
        v47 = v44;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&keys);
      v16 = v47 + 4;
    }
  }
  else
  {
LABEL_34:
    if (!v19)
      goto LABEL_35;
  }
  return *v16;
}

void sub_184D2CF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayList::cfTypeResourceForCFType(CG::DisplayList *this, const void *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;

  if (!a2)
    return 0;
  ++*((_QWORD *)this + 88);
  v4 = (char *)this + 464;
  v5 = *((_QWORD *)this + 58);
  v6 = (char *)this + 464;
  if (!v5)
    goto LABEL_35;
  v6 = (char *)this + 464;
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (char *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = *((_QWORD *)v6 + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  v16 = (uint64_t *)(v6 + 32);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v21 = *((_QWORD *)v6 + 4);
    v22 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v26 = (unint64_t *)&v15->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v19)
    {
LABEL_35:
      v28 = operator new();
      *(_DWORD *)(v28 + 8) = 201326592;
      *(_QWORD *)v28 = &off_1E1629598;
      *(_QWORD *)(v28 + 16) = CFRetain(a2);
      v29 = (uint64_t *)operator new(0x30uLL);
      v35[0] = v29;
      v35[1] = v4;
      std::shared_ptr<CG::DisplayListResourceCFTypeRef>::shared_ptr[abi:se180100]<CG::DisplayListResourceCFTypeRef,void>(v29 + 4, v28);
      v30 = (uint64_t **)((char *)this + 456);
      v36 = 1;
      v31 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v30, v6, &v34, &v33, v29 + 4);
      v32 = *v31;
      if (!*v31)
      {
        std::__tree<unsigned long>::__insert_node_at(v30, v34, v31, v29);
        v35[0] = 0;
        v32 = v29;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v35);
      v16 = v32 + 4;
    }
  }
  return *v16;
}

void sub_184D2D238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (std::__shared_weak_count *)a3[1];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = v7[4];
        v13 = (std::__shared_weak_count *)v7[5];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = *(_QWORD *)(v8 + 16) < *(_QWORD *)(v12 + 16);
          do
            v17 = __ldaxr(v14);
          while (__stlxr(v17 - 1, v14));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          v16 = *(_QWORD *)(v8 + 16) < *(_QWORD *)(v12 + 16);
        }
        if (!v9)
          break;
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (v19)
          break;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v16)
          goto LABEL_18;
LABEL_21:
        v20 = v7[4];
        v21 = (std::__shared_weak_count *)v7[5];
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = *a3;
        v25 = (std::__shared_weak_count *)a3[1];
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = *(_QWORD *)(v20 + 16) < *(_QWORD *)(v24 + 16);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v28 = *(_QWORD *)(v20 + 16) < *(_QWORD *)(v24 + 16);
        }
        if (v21)
        {
          v30 = (unint64_t *)&v21->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (v28)
        {
          v5 = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_21;
LABEL_18:
      v4 = (_QWORD *)*v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_41;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

_QWORD *std::shared_ptr<CG::DisplayListResourceCFTypeRef>::shared_ptr[abi:se180100]<CG::DisplayListResourceCFTypeRef,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A0A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D2D558(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceCFTypeRef *,std::shared_ptr<CG::DisplayListResourceCFTypeRef>::__shared_ptr_default_delete<CG::DisplayListResourceCFTypeRef,CG::DisplayListResourceCFTypeRef>,std::allocator<CG::DisplayListResourceCFTypeRef>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG28DisplayListResourceCFTypeRefEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *CG::DisplayList::createCGDisplayList(uint64_t a1, __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t Instance;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  _QWORD *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint8x8_t v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  char v155;
  char isEqualTo;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  float v166;
  float v167;
  _BOOL8 v168;
  unint64_t v169;
  unint64_t v170;
  size_t v171;
  _QWORD *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t **v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t **v183;
  uint64_t **v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t **v192;
  uint64_t **v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t **v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t **v210;
  uint64_t **v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *result;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  CG::DisplayList *v237;
  __CFDictionary *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD v242[2];
  uint64_t v243;
  std::__shared_weak_count *v244;
  _QWORD *v245;
  _QWORD *v246;
  char v247;

  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1)
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_124_14047);
  Instance = CGTypeCreateInstance(CGDisplayListGetTypeID::display_list2_type_id, 824, a3, a4, a5, a6, a7, a8);
  v12 = Instance;
  if (!Instance)
    return (_QWORD *)v12;
  *(_QWORD *)(Instance + 16) = &off_1E1628F98;
  *(_QWORD *)(Instance + 24) = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  v237 = (CG::DisplayList *)(v12 + 16);
  v238 = a2;
  *(_QWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 56);
  v15 = *(_OWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v12 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v12 + 88) = v16;
  *(_OWORD *)(v12 + 72) = v15;
  *(_OWORD *)(v12 + 56) = v14;
  *(_QWORD *)(v12 + 120) = *(_QWORD *)(a1 + 120);
  v17 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v12 + 128) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (__n128 *)malloc_type_malloc(0x58uLL, 0xBDE48346uLL);
  *(_QWORD *)(v12 + 136) = v20;
  v24 = *(__n128 **)(a1 + 136);
  v25 = v24[1];
  *v20 = *v24;
  v26 = v24[2];
  v27 = v24[3];
  v28 = v24[4];
  v20[5].n128_u64[0] = v24[5].n128_u64[0];
  v20[3] = v27;
  v20[4] = v28;
  v20[1] = v25;
  v20[2] = v26;
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 144) = v12 + 152;
  v29 = *(_QWORD **)(a1 + 144);
  if (v29 != (_QWORD *)(a1 + 152))
  {
    v30 = (uint64_t **)(v12 + 144);
    do
    {
      v31 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(v30, (_QWORD *)(v12 + 152), &v243, v242, v29 + 4);
      if (!*v31)
      {
        v32 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 152);
        v32[4] = v29[4];
        v33 = v29[5];
        v32[5] = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at(v30, v243, v31, v32);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v36 = (_QWORD *)v29[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v29[2];
          v154 = *v37 == (_QWORD)v29;
          v29 = v37;
        }
        while (!v154);
      }
      v29 = v37;
    }
    while (v37 != (_QWORD *)(a1 + 152));
  }
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 168) = v12 + 176;
  *(_QWORD *)(v12 + 184) = 0;
  v38 = *(_QWORD **)(a1 + 168);
  if (v38 != (_QWORD *)(a1 + 176))
  {
    do
    {
      v39 = std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>((_QWORD *)(v12 + 168), (_QWORD *)(v12 + 176), &v243, (uint64_t)v242, (uint64_t)(v38 + 4), v21, v22, v23, v25);
      if (!*v39)
      {
        v40 = (uint64_t **)v39;
        v41 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 176);
        v41[4] = v38[4];
        v42 = v38[5];
        v41[5] = v42;
        if (v42)
        {
          v43 = (unint64_t *)(v42 + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 168), v243, v40, v41);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v45 = (_QWORD *)v38[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v38[2];
          v154 = *v46 == (_QWORD)v38;
          v38 = v46;
        }
        while (!v154);
      }
      v38 = v46;
    }
    while (v46 != (_QWORD *)(a1 + 176));
  }
  *(_QWORD *)(v12 + 200) = 0;
  *(_QWORD *)(v12 + 192) = v12 + 200;
  *(_QWORD *)(v12 + 208) = 0;
  v47 = *(_QWORD **)(a1 + 192);
  if (v47 != (_QWORD *)(a1 + 200))
  {
    do
    {
      v48 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 192), (_QWORD *)(v12 + 200), &v243, v242, v47 + 4);
      if (!*v48)
      {
        v49 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 200);
        v49[4] = v47[4];
        v50 = v47[5];
        v49[5] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 192), v243, v48, v49);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v53 = (_QWORD *)v47[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (_QWORD *)v47[2];
          v154 = *v54 == (_QWORD)v47;
          v47 = v54;
        }
        while (!v154);
      }
      v47 = v54;
    }
    while (v54 != (_QWORD *)(a1 + 200));
  }
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 216) = v12 + 224;
  *(_QWORD *)(v12 + 232) = 0;
  v55 = *(_QWORD **)(a1 + 216);
  if (v55 != (_QWORD *)(a1 + 224))
  {
    do
    {
      v56 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>((_QWORD *)(v12 + 216), (_QWORD *)(v12 + 224), &v243, v242, v55 + 4);
      if (!*v56)
      {
        v57 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 224);
        v57[4] = v55[4];
        v58 = v55[5];
        v57[5] = v58;
        if (v58)
        {
          v59 = (unint64_t *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 216), v243, v56, v57);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v61 = (_QWORD *)v55[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (_QWORD *)v55[2];
          v154 = *v62 == (_QWORD)v55;
          v55 = v62;
        }
        while (!v154);
      }
      v55 = v62;
    }
    while (v62 != (_QWORD *)(a1 + 224));
  }
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 240) = v12 + 248;
  *(_QWORD *)(v12 + 256) = 0;
  v63 = *(_QWORD **)(a1 + 240);
  if (v63 != (_QWORD *)(a1 + 248))
  {
    do
    {
      v64 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 240), (_QWORD *)(v12 + 248), &v243, v242, v63 + 4);
      if (!*v64)
      {
        v65 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 248);
        v65[4] = v63[4];
        v66 = v63[5];
        v65[5] = v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 240), v243, v64, v65);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v69 = (_QWORD *)v63[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v63[2];
          v154 = *v70 == (_QWORD)v63;
          v63 = v70;
        }
        while (!v154);
      }
      v63 = v70;
    }
    while (v70 != (_QWORD *)(a1 + 248));
  }
  *(_QWORD *)(v12 + 272) = 0;
  *(_QWORD *)(v12 + 280) = 0;
  *(_QWORD *)(v12 + 264) = v12 + 272;
  v71 = *(_QWORD **)(a1 + 264);
  if (v71 != (_QWORD *)(a1 + 272))
  {
    do
    {
      v72 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 264), (_QWORD *)(v12 + 272), &v243, v242, v71 + 4);
      if (!*v72)
      {
        v73 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 272);
        v73[4] = v71[4];
        v74 = v71[5];
        v73[5] = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 264), v243, v72, v73);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v77 = (_QWORD *)v71[1];
      if (v77)
      {
        do
        {
          v78 = v77;
          v77 = (_QWORD *)*v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          v78 = (_QWORD *)v71[2];
          v154 = *v78 == (_QWORD)v71;
          v71 = v78;
        }
        while (!v154);
      }
      v71 = v78;
    }
    while (v78 != (_QWORD *)(a1 + 272));
  }
  *(_QWORD *)(v12 + 296) = 0;
  *(_QWORD *)(v12 + 304) = 0;
  *(_QWORD *)(v12 + 288) = v12 + 296;
  v79 = *(_QWORD **)(a1 + 288);
  if (v79 != (_QWORD *)(a1 + 296))
  {
    do
    {
      v80 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 288), (_QWORD *)(v12 + 296), &v243, v242, v79 + 4);
      if (!*v80)
      {
        v81 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 296);
        v81[4] = v79[4];
        v82 = v79[5];
        v81[5] = v82;
        if (v82)
        {
          v83 = (unint64_t *)(v82 + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 288), v243, v80, v81);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v85 = (_QWORD *)v79[1];
      if (v85)
      {
        do
        {
          v86 = v85;
          v85 = (_QWORD *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (_QWORD *)v79[2];
          v154 = *v86 == (_QWORD)v79;
          v79 = v86;
        }
        while (!v154);
      }
      v79 = v86;
    }
    while (v86 != (_QWORD *)(a1 + 296));
  }
  *(_QWORD *)(v12 + 320) = 0;
  *(_QWORD *)(v12 + 328) = 0;
  *(_QWORD *)(v12 + 312) = v12 + 320;
  v87 = *(_QWORD **)(a1 + 312);
  if (v87 != (_QWORD *)(a1 + 320))
  {
    do
    {
      v88 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 312), (_QWORD *)(v12 + 320), &v243, v242, v87 + 4);
      if (!*v88)
      {
        v89 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 320);
        v89[4] = v87[4];
        v90 = v87[5];
        v89[5] = v90;
        if (v90)
        {
          v91 = (unint64_t *)(v90 + 8);
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 312), v243, v88, v89);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v93 = (_QWORD *)v87[1];
      if (v93)
      {
        do
        {
          v94 = v93;
          v93 = (_QWORD *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (_QWORD *)v87[2];
          v154 = *v94 == (_QWORD)v87;
          v87 = v94;
        }
        while (!v154);
      }
      v87 = v94;
    }
    while (v94 != (_QWORD *)(a1 + 320));
  }
  *(_QWORD *)(v12 + 344) = 0;
  *(_QWORD *)(v12 + 352) = 0;
  *(_QWORD *)(v12 + 336) = v12 + 344;
  v95 = *(_QWORD **)(a1 + 336);
  if (v95 != (_QWORD *)(a1 + 344))
  {
    do
    {
      v96 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 336), (_QWORD *)(v12 + 344), &v243, v242, v95 + 4);
      if (!*v96)
      {
        v97 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 344);
        v97[4] = v95[4];
        v98 = v95[5];
        v97[5] = v98;
        if (v98)
        {
          v99 = (unint64_t *)(v98 + 8);
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 336), v243, v96, v97);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v101 = (_QWORD *)v95[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          v101 = (_QWORD *)*v101;
        }
        while (v101);
      }
      else
      {
        do
        {
          v102 = (_QWORD *)v95[2];
          v154 = *v102 == (_QWORD)v95;
          v95 = v102;
        }
        while (!v154);
      }
      v95 = v102;
    }
    while (v102 != (_QWORD *)(a1 + 344));
  }
  *(_QWORD *)(v12 + 368) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  *(_QWORD *)(v12 + 360) = v12 + 368;
  v103 = *(_QWORD **)(a1 + 360);
  if (v103 != (_QWORD *)(a1 + 368))
  {
    do
    {
      v104 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 360), (_QWORD *)(v12 + 368), &v243, v242, v103 + 4);
      if (!*v104)
      {
        v105 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 368);
        v105[4] = v103[4];
        v106 = v103[5];
        v105[5] = v106;
        if (v106)
        {
          v107 = (unint64_t *)(v106 + 8);
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 360), v243, v104, v105);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v109 = (_QWORD *)v103[1];
      if (v109)
      {
        do
        {
          v110 = v109;
          v109 = (_QWORD *)*v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          v110 = (_QWORD *)v103[2];
          v154 = *v110 == (_QWORD)v103;
          v103 = v110;
        }
        while (!v154);
      }
      v103 = v110;
    }
    while (v110 != (_QWORD *)(a1 + 368));
  }
  *(_QWORD *)(v12 + 392) = 0;
  *(_QWORD *)(v12 + 400) = 0;
  *(_QWORD *)(v12 + 384) = v12 + 392;
  v111 = *(_QWORD **)(a1 + 384);
  if (v111 != (_QWORD *)(a1 + 392))
  {
    do
    {
      v112 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 384), (_QWORD *)(v12 + 392), &v243, v242, v111 + 4);
      if (!*v112)
      {
        v113 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 392);
        v113[4] = v111[4];
        v114 = v111[5];
        v113[5] = v114;
        if (v114)
        {
          v115 = (unint64_t *)(v114 + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 384), v243, v112, v113);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v117 = (_QWORD *)v111[1];
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = (_QWORD *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (_QWORD *)v111[2];
          v154 = *v118 == (_QWORD)v111;
          v111 = v118;
        }
        while (!v154);
      }
      v111 = v118;
    }
    while (v118 != (_QWORD *)(a1 + 392));
  }
  *(_QWORD *)(v12 + 416) = 0;
  *(_QWORD *)(v12 + 424) = 0;
  *(_QWORD *)(v12 + 408) = v12 + 416;
  v119 = *(_QWORD **)(a1 + 408);
  if (v119 != (_QWORD *)(a1 + 416))
  {
    do
    {
      v120 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 408), (_QWORD *)(v12 + 416), &v243, v242, v119 + 4);
      if (!*v120)
      {
        v121 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 416);
        v121[4] = v119[4];
        v122 = v119[5];
        v121[5] = v122;
        if (v122)
        {
          v123 = (unint64_t *)(v122 + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 408), v243, v120, v121);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v125 = (_QWORD *)v119[1];
      if (v125)
      {
        do
        {
          v126 = v125;
          v125 = (_QWORD *)*v125;
        }
        while (v125);
      }
      else
      {
        do
        {
          v126 = (_QWORD *)v119[2];
          v154 = *v126 == (_QWORD)v119;
          v119 = v126;
        }
        while (!v154);
      }
      v119 = v126;
    }
    while (v126 != (_QWORD *)(a1 + 416));
  }
  v240 = (_QWORD *)(v12 + 432);
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_DWORD *)(v12 + 464) = *(_DWORD *)(a1 + 464);
  v241 = v12;
  std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>(v12 + 432, *(_QWORD *)(a1 + 440));
  v239 = a1;
  v127 = *(_QWORD **)(a1 + 448);
  if (v127)
  {
    v128 = (_QWORD *)(v12 + 448);
    do
    {
      v129 = v127[2];
      v130 = (std::__shared_weak_count *)v127[3];
      v131 = v240;
      if (v130)
      {
        p_shared_owners = (unint64_t *)&v130->__shared_owners_;
        do
          v133 = __ldxr(p_shared_owners);
        while (__stxr(v133 + 1, p_shared_owners));
      }
      v134 = *(_QWORD *)(v129 + 16);
      if (v134)
      {
        v135 = XXH64_digest(*(_QWORD **)(v134 + 136));
        if (!v130)
          goto LABEL_167;
      }
      else
      {
        v135 = 0;
        if (!v130)
          goto LABEL_167;
      }
      v136 = (unint64_t *)&v130->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
LABEL_167:
      v138 = *(_QWORD *)(v12 + 440);
      if (!v138)
        goto LABEL_211;
      v139 = (uint8x8_t)vcnt_s8((int8x8_t)v138);
      v139.i16[0] = vaddlv_u8(v139);
      v140 = v139.u32[0];
      if (v139.u32[0] > 1uLL)
      {
        v8 = v135;
        if (v135 >= v138)
          v8 = v135 % v138;
      }
      else
      {
        v8 = (v138 - 1) & v135;
      }
      v141 = *(_QWORD **)(*v240 + 8 * v8);
      if (v141)
      {
        v142 = (_QWORD *)*v141;
        if (*v141)
        {
          while (1)
          {
            v143 = v142[1];
            if (v143 == v135)
              break;
            if (v140 > 1)
            {
              if (v143 >= v138)
                v143 %= v138;
            }
            else
            {
              v143 &= v138 - 1;
            }
            if (v143 != v8)
            {
LABEL_209:
              v12 = v241;
              v131 = v240;
              goto LABEL_211;
            }
LABEL_208:
            v142 = (_QWORD *)*v142;
            if (!v142)
              goto LABEL_209;
          }
          v144 = v142[2];
          v145 = (std::__shared_weak_count *)v142[3];
          v243 = v144;
          v244 = v145;
          if (v145)
          {
            v146 = (unint64_t *)&v145->__shared_owners_;
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
          v148 = v127[2];
          v149 = (std::__shared_weak_count *)v127[3];
          v242[0] = v148;
          v242[1] = v149;
          if (v149)
          {
            v150 = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldxr(v150);
            while (__stxr(v151 + 1, v150));
          }
          v152 = *(_QWORD *)(v144 + 16);
          v153 = *(_QWORD *)(v148 + 16);
          if (v152 == v153)
          {
            v155 = 1;
            if (!v149)
              goto LABEL_202;
          }
          else
          {
            if (v152)
              v154 = v153 == 0;
            else
              v154 = 1;
            if (!v154)
            {
              isEqualTo = CG::DisplayList::isEqualTo((CG::DisplayList *)(v152 + 16), (const CG::DisplayList *)(v153 + 16), 0);
              v155 = isEqualTo;
              if (v149)
                goto LABEL_198;
LABEL_202:
              v159 = v244;
              if (v244)
              {
                v160 = (unint64_t *)&v244->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              if ((v155 & 1) != 0)
                goto LABEL_236;
              goto LABEL_208;
            }
            v155 = 0;
            if (!v149)
              goto LABEL_202;
          }
LABEL_198:
          v157 = (unint64_t *)&v149->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
          goto LABEL_202;
        }
      }
      v12 = v241;
LABEL_211:
      v162 = operator new(0x20uLL);
      v245 = v162;
      v246 = v128;
      *v162 = 0;
      v162[1] = v135;
      v162[2] = v127[2];
      v163 = v127[3];
      v162[3] = v163;
      if (v163)
      {
        v164 = (unint64_t *)(v163 + 8);
        do
          v165 = __ldxr(v164);
        while (__stxr(v165 + 1, v164));
      }
      v247 = 1;
      v166 = (float)(unint64_t)(*(_QWORD *)(v12 + 456) + 1);
      v167 = *(float *)(v12 + 464);
      if (!v138 || (float)(v167 * (float)v138) < v166)
      {
        v168 = (v138 & (v138 - 1)) != 0;
        if (v138 < 3)
          v168 = 1;
        v169 = v168 | (2 * v138);
        v170 = vcvtps_u32_f32(v166 / v167);
        if (v169 <= v170)
          v171 = v170;
        else
          v171 = v169;
        std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>((uint64_t)v131, v171);
        v138 = *(_QWORD *)(v12 + 440);
        if ((v138 & (v138 - 1)) != 0)
        {
          if (v135 >= v138)
            v8 = v135 % v138;
          else
            v8 = v135;
        }
        else
        {
          v8 = (v138 - 1) & v135;
        }
      }
      v172 = *(_QWORD **)(*v131 + 8 * v8);
      if (v172)
      {
        *v162 = *v172;
      }
      else
      {
        *v162 = *v128;
        *v128 = v162;
        *(_QWORD *)(*v131 + 8 * v8) = v128;
        if (!*v162)
          goto LABEL_235;
        v173 = *(_QWORD *)(*v162 + 8);
        if ((v138 & (v138 - 1)) != 0)
        {
          if (v173 >= v138)
            v173 %= v138;
        }
        else
        {
          v173 &= v138 - 1;
        }
        v172 = (_QWORD *)(*v131 + 8 * v173);
      }
      *v172 = v162;
LABEL_235:
      v245 = 0;
      ++*(_QWORD *)(v12 + 456);
      std::unique_ptr<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
LABEL_236:
      v127 = (_QWORD *)*v127;
      v12 = v241;
    }
    while (v127);
  }
  *(_QWORD *)(v12 + 480) = 0;
  *(_QWORD *)(v12 + 488) = 0;
  *(_QWORD *)(v12 + 472) = v12 + 480;
  v174 = *(_QWORD **)(v239 + 472);
  if (v174 != (_QWORD *)(v239 + 480))
  {
    do
    {
      v175 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((_QWORD *)(v12 + 472), (_QWORD *)(v12 + 480), &v243, v242, v174 + 4);
      if (!*v175)
      {
        v176 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 480);
        v176[4] = v174[4];
        v177 = v174[5];
        v176[5] = v177;
        if (v177)
        {
          v178 = (unint64_t *)(v177 + 8);
          do
            v179 = __ldxr(v178);
          while (__stxr(v179 + 1, v178));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v12 + 472), v243, v175, v176);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v180 = (_QWORD *)v174[1];
      if (v180)
      {
        do
        {
          v181 = v180;
          v180 = (_QWORD *)*v180;
        }
        while (v180);
      }
      else
      {
        do
        {
          v181 = (_QWORD *)v174[2];
          v154 = *v181 == (_QWORD)v174;
          v174 = v181;
        }
        while (!v154);
      }
      v174 = v181;
    }
    while (v181 != (_QWORD *)(v239 + 480));
  }
  *(_QWORD *)(v12 + 504) = 0;
  *(_QWORD *)(v12 + 512) = 0;
  *(_QWORD *)(v12 + 496) = v12 + 504;
  v182 = *(_QWORD **)(v239 + 496);
  if (v182 != (_QWORD *)(v239 + 504))
  {
    v183 = (uint64_t **)(v241 + 496);
    do
    {
      v184 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(v183, (_QWORD *)(v12 + 504), &v243, v242, v182 + 4);
      if (!*v184)
      {
        v185 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v12 + 504);
        v185[4] = v182[4];
        v186 = v182[5];
        v185[5] = v186;
        if (v186)
        {
          v187 = (unint64_t *)(v186 + 8);
          do
            v188 = __ldxr(v187);
          while (__stxr(v188 + 1, v187));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at(v183, v243, v184, v185);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v189 = (_QWORD *)v182[1];
      if (v189)
      {
        do
        {
          v190 = v189;
          v189 = (_QWORD *)*v189;
        }
        while (v189);
      }
      else
      {
        do
        {
          v190 = (_QWORD *)v182[2];
          v154 = *v190 == (_QWORD)v182;
          v182 = v190;
        }
        while (!v154);
      }
      v182 = v190;
    }
    while (v190 != (_QWORD *)(v239 + 504));
  }
  *(_QWORD *)(v241 + 536) = 0;
  *(_QWORD *)(v241 + 528) = 0;
  *(_QWORD *)(v241 + 520) = v241 + 528;
  v191 = *(_QWORD **)(v239 + 520);
  if (v191 != (_QWORD *)(v239 + 528))
  {
    v192 = (uint64_t **)(v241 + 520);
    do
    {
      v193 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(v192, (_QWORD *)(v241 + 528), &v243, v242, v191 + 4);
      if (!*v193)
      {
        v194 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v241 + 528);
        v194[4] = v191[4];
        v195 = v191[5];
        v194[5] = v195;
        if (v195)
        {
          v196 = (unint64_t *)(v195 + 8);
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at(v192, v243, v193, v194);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v198 = (_QWORD *)v191[1];
      if (v198)
      {
        do
        {
          v199 = v198;
          v198 = (_QWORD *)*v198;
        }
        while (v198);
      }
      else
      {
        do
        {
          v199 = (_QWORD *)v191[2];
          v154 = *v199 == (_QWORD)v191;
          v191 = v199;
        }
        while (!v154);
      }
      v191 = v199;
    }
    while (v199 != (_QWORD *)(v239 + 528));
  }
  *(_QWORD *)(v241 + 560) = 0;
  *(_QWORD *)(v241 + 552) = 0;
  *(_QWORD *)(v241 + 544) = v241 + 552;
  v200 = *(_QWORD **)(v239 + 544);
  if (v200 != (_QWORD *)(v239 + 552))
  {
    v201 = (uint64_t **)(v241 + 544);
    do
    {
      v202 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>(v201, (_QWORD *)(v241 + 552), &v243, v242, v200 + 4);
      if (!*v202)
      {
        v203 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v241 + 552);
        v203[4] = v200[4];
        v204 = v200[5];
        v203[5] = v204;
        if (v204)
        {
          v205 = (unint64_t *)(v204 + 8);
          do
            v206 = __ldxr(v205);
          while (__stxr(v206 + 1, v205));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at(v201, v243, v202, v203);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v207 = (_QWORD *)v200[1];
      if (v207)
      {
        do
        {
          v208 = v207;
          v207 = (_QWORD *)*v207;
        }
        while (v207);
      }
      else
      {
        do
        {
          v208 = (_QWORD *)v200[2];
          v154 = *v208 == (_QWORD)v200;
          v200 = v208;
        }
        while (!v154);
      }
      v200 = v208;
    }
    while (v208 != (_QWORD *)(v239 + 552));
  }
  *(_QWORD *)(v241 + 584) = 0;
  *(_QWORD *)(v241 + 576) = 0;
  *(_QWORD *)(v241 + 568) = v241 + 576;
  v209 = *(_QWORD **)(v239 + 568);
  if (v209 != (_QWORD *)(v239 + 576))
  {
    v210 = (uint64_t **)(v241 + 568);
    do
    {
      v211 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(v210, (_QWORD *)(v241 + 576), &v243, v242, v209 + 4);
      if (!*v211)
      {
        v212 = (uint64_t *)operator new(0x30uLL);
        v246 = (_QWORD *)(v241 + 576);
        v212[4] = v209[4];
        v213 = v209[5];
        v212[5] = v213;
        if (v213)
        {
          v214 = (unint64_t *)(v213 + 8);
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
        }
        v247 = 1;
        std::__tree<unsigned long>::__insert_node_at(v210, v243, v211, v212);
        v245 = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v245);
      }
      v216 = (_QWORD *)v209[1];
      if (v216)
      {
        do
        {
          v217 = v216;
          v216 = (_QWORD *)*v216;
        }
        while (v216);
      }
      else
      {
        do
        {
          v217 = (_QWORD *)v209[2];
          v154 = *v217 == (_QWORD)v209;
          v209 = v217;
        }
        while (!v154);
      }
      v209 = v217;
    }
    while (v217 != (_QWORD *)(v239 + 576));
  }
  v218 = v241;
  *(_QWORD *)(v241 + 608) = 0;
  *(_OWORD *)(v241 + 592) = 0u;
  v219 = *(char **)(v239 + 592);
  v220 = *(char **)(v239 + 600);
  v245 = (_QWORD *)(v241 + 592);
  LOBYTE(v246) = 0;
  v221 = v220 - v219;
  if (v220 == v219)
  {
LABEL_310:
    v227 = *(_OWORD *)(v239 + 632);
    *(_OWORD *)(v218 + 616) = *(_OWORD *)(v239 + 616);
    *(_OWORD *)(v218 + 632) = v227;
    v228 = *(_OWORD *)(v239 + 648);
    v229 = *(_OWORD *)(v239 + 664);
    v230 = *(_OWORD *)(v239 + 696);
    *(_OWORD *)(v218 + 680) = *(_OWORD *)(v239 + 680);
    *(_OWORD *)(v218 + 696) = v230;
    *(_OWORD *)(v218 + 648) = v228;
    *(_OWORD *)(v218 + 664) = v229;
    v231 = *(_OWORD *)(v239 + 712);
    v232 = *(_OWORD *)(v239 + 728);
    v233 = *(_OWORD *)(v239 + 760);
    *(_OWORD *)(v218 + 744) = *(_OWORD *)(v239 + 744);
    *(_OWORD *)(v218 + 760) = v233;
    *(_OWORD *)(v218 + 712) = v231;
    *(_OWORD *)(v218 + 728) = v232;
    v234 = *(_OWORD *)(v239 + 776);
    v235 = *(_OWORD *)(v239 + 792);
    v236 = *(_OWORD *)(v239 + 824);
    *(_OWORD *)(v218 + 808) = *(_OWORD *)(v239 + 808);
    *(_OWORD *)(v218 + 824) = v236;
    *(_OWORD *)(v218 + 776) = v234;
    *(_OWORD *)(v218 + 792) = v235;
    *(_QWORD *)(v218 + 24) = v218;
    v12 = v218;
    if (v238)
      CG::DisplayList::setAuxInfo(v237, v238);
    return (_QWORD *)v12;
  }
  if (v221 < 0)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  result = std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v221 >> 4);
  *(_QWORD *)(v241 + 592) = result;
  *(_QWORD *)(v241 + 600) = result;
  *(_QWORD *)(v241 + 608) = &result[2 * v223];
  while (result)
  {
    *result = *(_QWORD *)v219;
    v224 = *((_QWORD *)v219 + 1);
    result[1] = v224;
    if (v224)
    {
      v225 = (unint64_t *)(v224 + 8);
      do
        v226 = __ldxr(v225);
      while (__stxr(v226 + 1, v225));
    }
    v219 += 16;
    result += 2;
    if (v219 == v220)
    {
      v218 = v241;
      *(_QWORD *)(v241 + 600) = result;
      goto LABEL_310;
    }
  }
  __break(1u);
  return result;
}

void sub_184D2EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD **a14, _QWORD **a15, _QWORD **a16, _QWORD **a17, _QWORD **a18, _QWORD **a19, _QWORD **a20,_QWORD **a21,_QWORD **a22,_QWORD **a23,_QWORD **a24,_QWORD **a25,uint64_t a26)
{
  std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::~__hash_table(a13);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a14);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a15);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a16);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a17);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a18);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a19);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a20);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a21);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a22);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a23);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a24);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a25);
  free(*(void **)(a26 + 136));
  std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](a9);
  applesauce::CF::ObjectRef<__CFDictionary const*>::~ObjectRef((const void **)(a10 + 16));
  _Unwind_Resume(a1);
}

void sub_184D2EC4C()
{
  JUMPOUT(0x184D2EB80);
}

void sub_184D2EC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD **a14)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a14);
  JUMPOUT(0x184D2EBA0);
}

void sub_184D2EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD **a15)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a15);
  JUMPOUT(0x184D2EBB0);
}

void sub_184D2EC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a16);
  JUMPOUT(0x184D2EBBCLL);
}

void sub_184D2EC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD **a17)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a17);
  JUMPOUT(0x184D2EBC8);
}

void sub_184D2ECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD **a18)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a18);
  JUMPOUT(0x184D2EBD4);
}

void sub_184D2ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD **a19)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a19);
  JUMPOUT(0x184D2EBE0);
}

void sub_184D2ECE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD **a20)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a20);
  JUMPOUT(0x184D2EBECLL);
}

void sub_184D2ECF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD **a21)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a21);
  JUMPOUT(0x184D2EBF8);
}

void sub_184D2ED10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD **a22)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a22);
  JUMPOUT(0x184D2EC04);
}

void sub_184D2ED28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD **a23)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a23);
  JUMPOUT(0x184D2EC10);
}

void sub_184D2ED40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD **a25)
{
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a25);
  JUMPOUT(0x184D2EC28);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>>::reset[abi:se180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t CG::DisplayList::isEqualTo(CG::DisplayList *this, const CG::DisplayList *a2, uint64_t a3)
{
  uint64_t result;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  result = CGRectEqualToRect(*(CGRect *)((char *)this + 24), *(CGRect *)((char *)a2 + 24));
  if ((_DWORD)result)
  {
    v7 = (char *)*((_QWORD *)this + 72);
    v8 = (char *)*((_QWORD *)this + 73);
    v9 = (char *)*((_QWORD *)a2 + 72);
    v10 = (char *)*((_QWORD *)a2 + 73);
    if (v8 - v7 == v10 - v9)
    {
      while (v7 != v8 && v9 != v10)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, *(_QWORD *)v9, a3);
        if (!(_DWORD)result)
          return result;
        v7 += 16;
        v9 += 16;
      }
      return v7 == v8 && v9 == v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::shared_ptr<CG::DisplayListResourceDisplayList>::shared_ptr[abi:se180100]<CG::DisplayListResourceDisplayList,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A118;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D2EEA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceDisplayList *,std::shared_ptr<CG::DisplayListResourceDisplayList>::__shared_ptr_default_delete<CG::DisplayListResourceDisplayList,CG::DisplayListResourceDisplayList>,std::allocator<CG::DisplayListResourceDisplayList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDisplayList *,std::shared_ptr<CG::DisplayListResourceDisplayList>::__shared_ptr_default_delete<CG::DisplayListResourceDisplayList,CG::DisplayListResourceDisplayList>,std::allocator<CG::DisplayListResourceDisplayList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG30DisplayListResourceDisplayListEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<__CFDictionary const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100]((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL CG::CompareEntryStatePattern::operator()(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  _BOOL8 result;
  double v8;
  double v9;
  double v10;
  double v11;
  _OWORD v12[3];
  _OWORD __s1[3];

  v4 = *(_OWORD *)(a1 + 24);
  __s1[0] = *(_OWORD *)(a1 + 8);
  __s1[1] = v4;
  __s1[2] = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a2 + 24);
  v12[0] = *(_OWORD *)(a2 + 8);
  v12[1] = v5;
  v12[2] = *(_OWORD *)(a2 + 40);
  v6 = memcmp(__s1, v12, 0x30uLL);
  result = 1;
  if ((v6 & 0x80000000) == 0)
  {
    if (v6)
      return 0;
    v8 = *(double *)(a1 + 56);
    v9 = *(double *)(a2 + 56);
    if (v8 >= v9)
    {
      if (v8 > v9)
        return 0;
      v10 = *(double *)(a1 + 64);
      v11 = *(double *)(a2 + 64);
      if (v10 >= v11 && (v10 > v11 || *(double *)(a1 + 72) >= *(double *)(a2 + 72)))
        return 0;
    }
  }
  return result;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (std::__shared_weak_count *)a3[1];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = v7[4];
        v13 = (std::__shared_weak_count *)v7[5];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = CG::CompareEntryStatePattern::operator()(v8, v12);
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          v16 = CG::CompareEntryStatePattern::operator()(v8, v12);
        }
        if (!v9)
          break;
        v19 = (unint64_t *)&v9->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (v20)
          break;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v16)
          goto LABEL_18;
LABEL_21:
        v21 = v7[4];
        v22 = (std::__shared_weak_count *)v7[5];
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *a3;
        v26 = (std::__shared_weak_count *)a3[1];
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = CG::CompareEntryStatePattern::operator()(v21, v25);
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        else
        {
          v29 = CG::CompareEntryStatePattern::operator()(v21, v25);
        }
        if (v22)
        {
          v32 = (unint64_t *)&v22->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v29)
        {
          v5 = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_21;
LABEL_18:
      v4 = (_QWORD *)*v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_41;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (std::__shared_weak_count *)a3[1];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = v7[4];
        v13 = (std::__shared_weak_count *)v7[5];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = *(_QWORD *)(v8 + 8) < *(_QWORD *)(v12 + 8);
          do
            v17 = __ldaxr(v14);
          while (__stlxr(v17 - 1, v14));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          v16 = *(_QWORD *)(v8 + 8) < *(_QWORD *)(v12 + 8);
        }
        if (!v9)
          break;
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (v19)
          break;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v16)
          goto LABEL_18;
LABEL_21:
        v20 = v7[4];
        v21 = (std::__shared_weak_count *)v7[5];
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = *a3;
        v25 = (std::__shared_weak_count *)a3[1];
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = *(_QWORD *)(v20 + 8) < *(_QWORD *)(v24 + 8);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v28 = *(_QWORD *)(v20 + 8) < *(_QWORD *)(v24 + 8);
        }
        if (v21)
        {
          v30 = (unint64_t *)&v21->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (v28)
        {
          v5 = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_21;
LABEL_18:
      v4 = (_QWORD *)*v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_41;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (std::__shared_weak_count *)a3[1];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = v7[4];
        v13 = (std::__shared_weak_count *)v7[5];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = CG::CompareEntryStateDrawing::operator()(v8, v12);
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          v16 = CG::CompareEntryStateDrawing::operator()(v8, v12);
        }
        if (!v9)
          break;
        v19 = (unint64_t *)&v9->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (v20)
          break;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v16)
          goto LABEL_18;
LABEL_21:
        v21 = v7[4];
        v22 = (std::__shared_weak_count *)v7[5];
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *a3;
        v26 = (std::__shared_weak_count *)a3[1];
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = CG::CompareEntryStateDrawing::operator()(v21, v25);
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        else
        {
          v29 = CG::CompareEntryStateDrawing::operator()(v21, v25);
        }
        if (v22)
        {
          v32 = (unint64_t *)&v22->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v29)
        {
          v5 = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_21;
LABEL_18:
      v4 = (_QWORD *)*v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_41;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_37;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = CGDashCompare(*(_QWORD *)(v11 + 16), *(_QWORD *)(v15 + 16));
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v12)
  {
    v22 = (unint64_t *)&v12->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v19 == -1)
  {
LABEL_37:
    if ((_QWORD *)*a1 == a2)
    {
      v38 = a2;
    }
    else
    {
      v37 = (_QWORD *)*a2;
      if (*a2)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)v37[1];
        }
        while (v37);
      }
      else
      {
        v41 = a2;
        do
        {
          v38 = (_QWORD *)v41[2];
          v42 = *v38 == (_QWORD)v41;
          v41 = v38;
        }
        while (v42);
      }
      v43 = v38[4];
      v44 = (std::__shared_weak_count *)v38[5];
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = *a5;
      v48 = (std::__shared_weak_count *)a5[1];
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v51 = CGDashCompare(*(_QWORD *)(v43 + 16), *(_QWORD *)(v47 + 16));
      if (v48)
      {
        v52 = (unint64_t *)&v48->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if (v44)
      {
        v54 = (unint64_t *)&v44->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (v51 != -1)
        return std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>((uint64_t)a1, a3, a5);
    }
    if (*a2)
    {
      *a3 = v38;
      return v38 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  v24 = a2[4];
  v25 = (std::__shared_weak_count *)a2[5];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *a5;
  v29 = (std::__shared_weak_count *)a5[1];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = CGDashCompare(*(_QWORD *)(v24 + 16), *(_QWORD *)(v28 + 16));
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v25)
  {
    v35 = (unint64_t *)&v25->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v32 == -1)
  {
    a4 = a2 + 1;
    v39 = (_QWORD *)a2[1];
    if (v39)
    {
      do
      {
        v40 = v39;
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
    else
    {
      v57 = a2;
      do
      {
        v40 = (_QWORD *)v57[2];
        v42 = *v40 == (_QWORD)v57;
        v57 = v40;
      }
      while (!v42);
    }
    if (v40 == v9)
      goto LABEL_95;
    v58 = *a5;
    v59 = (std::__shared_weak_count *)a5[1];
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = v40[4];
    v63 = (std::__shared_weak_count *)v40[5];
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = CGDashCompare(*(_QWORD *)(v58 + 16), *(_QWORD *)(v62 + 16));
    if (v63)
    {
      v67 = (unint64_t *)&v63->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v59)
    {
      v69 = (unint64_t *)&v59->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v66 == -1)
    {
LABEL_95:
      if (*a4)
      {
        *a3 = v40;
        return v40;
      }
      else
      {
        *a3 = a2;
      }
      return a4;
    }
    return std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      v7 = v4;
      v8 = *a3;
      v9 = (std::__shared_weak_count *)a3[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = v7[4];
      v13 = (std::__shared_weak_count *)v7[5];
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = CGDashCompare(*(_QWORD *)(v8 + 16), *(_QWORD *)(v12 + 16));
      if (!v13)
        goto LABEL_12;
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v9)
        {
LABEL_13:
          v19 = (unint64_t *)&v9->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_12:
        if (v9)
          goto LABEL_13;
      }
      if (v16 == -1)
      {
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_41;
      }
      else
      {
        v21 = v7[4];
        v22 = (std::__shared_weak_count *)v7[5];
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *a3;
        v26 = (std::__shared_weak_count *)a3[1];
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = CGDashCompare(*(_QWORD *)(v21 + 16), *(_QWORD *)(v25 + 16));
        if (!v26)
          goto LABEL_29;
        v30 = (unint64_t *)&v26->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if (v22)
          {
LABEL_30:
            v32 = (unint64_t *)&v22->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        else
        {
LABEL_29:
          if (v22)
            goto LABEL_30;
        }
        if (v29 != -1)
          goto LABEL_41;
        v5 = v7 + 1;
        v4 = (_QWORD *)v7[1];
        if (!v4)
          goto LABEL_41;
      }
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v13;

  v11 = (_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 8);
  if (v10)
  {
    do
    {
      while (1)
      {
        v13 = v10;
        if (CGColorCompare(*(_QWORD *)(*(_QWORD *)a3 + 16), *(_QWORD *)(v10[4] + 16), a3, a4, a5, a6, a7, a8, a9) != -1)
          break;
        v10 = (_QWORD *)*v13;
        v11 = v13;
        if (!*v13)
          goto LABEL_9;
      }
      if (CGColorCompare(*(_QWORD *)(v13[4] + 16), *(_QWORD *)(*(_QWORD *)a3 + 16), a3, a4, a5, a6, a7, a8, a9) != -1)
        break;
      v11 = v13 + 1;
      v10 = (_QWORD *)v13[1];
    }
    while (v10);
  }
  else
  {
    v13 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v13;
  return v11;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      v7 = v4;
      v8 = *a3;
      v9 = (std::__shared_weak_count *)a3[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = v7[4];
      v13 = (std::__shared_weak_count *)v7[5];
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_QWORD *)(v8 + 16);
      if (v16)
        v17 = *(_DWORD *)(v16 + 4);
      else
        v17 = 0;
      v18 = *(_QWORD *)(v12 + 16);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 4);
        if (!v13)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
        if (!v13)
          goto LABEL_18;
      }
      v20 = (unint64_t *)&v13->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
      {
LABEL_18:
        if (v9)
          goto LABEL_19;
        goto LABEL_24;
      }
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v9)
      {
LABEL_19:
        v22 = (unint64_t *)&v9->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_24:
      if (v17 >= v19)
      {
        v24 = v7[4];
        v25 = (std::__shared_weak_count *)v7[5];
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = *a3;
        v29 = (std::__shared_weak_count *)a3[1];
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = *(_QWORD *)(v24 + 16);
        if (v32)
          v33 = *(_DWORD *)(v32 + 4);
        else
          v33 = 0;
        v34 = *(_QWORD *)(v28 + 16);
        if (v34)
        {
          v35 = *(_DWORD *)(v34 + 4);
          if (!v29)
            goto LABEL_43;
        }
        else
        {
          v35 = 0;
          if (!v29)
            goto LABEL_43;
        }
        v36 = (unint64_t *)&v29->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (v37)
        {
LABEL_43:
          if (v25)
            goto LABEL_44;
          goto LABEL_49;
        }
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        if (v25)
        {
LABEL_44:
          v38 = (unint64_t *)&v25->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
LABEL_49:
        if (v33 >= v35)
          goto LABEL_53;
        v5 = v7 + 1;
        v4 = (_QWORD *)v7[1];
        if (!v4)
          goto LABEL_53;
      }
      else
      {
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_53;
      }
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_53:
  *a2 = v7;
  return v5;
}

__CFString *dl_DebugDesc(int32x4_t *a1)
{
  CGSize *p_size;
  const CGRect *v3;
  CGFloat *i64;
  CGFloat *p_height;
  uint64_t v6;
  CGFloat x;
  uint64_t v8;
  CGFloat width;
  __CFString *Mutable;
  double v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t j;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;

  p_size = &CGRectNull.size;
  v3 = (const CGRect *)&a1[5].u64[1];
  i64 = (CGFloat *)a1[6].i64;
  if (a1[37].i64[0] == a1[37].i64[1])
    i64 = &CGRectNull.origin.y;
  else
    p_size = (CGSize *)&a1[6].u64[1];
  if (a1[37].i64[0] == a1[37].i64[1])
  {
    v3 = &CGRectNull;
    p_height = &CGRectNull.size.height;
  }
  else
  {
    p_height = (CGFloat *)a1[7].i64;
  }
  v6 = *(_QWORD *)p_height;
  x = v3->origin.x;
  v8 = *(_QWORD *)i64;
  width = p_size->width;
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("CGDisplayList %p. Bounding box: (%g, %g)[%g x %g]."), a1, *(_QWORD *)&x, v8, *(_QWORD *)&width, v6);
  if (a1[37].i64[0] == a1[37].i64[1]
    || ((v11 = *(double *)&a1[5].i64[1], *(double *)a1[6].i64 != INFINITY) ? (v12 = v11 == INFINITY) : (v12 = 1), v12))
  {
    v13 = "yes";
  }
  else
  {
    v13 = "no";
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" Empty: %s."), v11, v13);
  CFStringAppendFormat(Mutable, 0, CFSTR(" Flags: 0x%08x."), a1[5].u32[0]);
  v14 = 0;
  v15 = 0;
  do
  {
    v15 += a1[39].i32[v14];
    v14 += 2;
  }
  while (v14 != 28);
  v16 = a1[10].i64[0];
  v17 = a1[11].i64[1];
  v18 = a1[13].i64[0];
  v19 = a1[14].i64[1];
  v20 = a1[16].i64[0];
  v21 = a1[17].i64[1];
  CFStringAppendFormat(Mutable, 0, CFSTR("\nResource count: %lu, %lu unique, (%lu bytes)."), v15, v17+ v16+ v18+ v19+ v20+ v21+ a1[19].i64[0]+ a1[20].i64[1]+ a1[22].i64[0]+ a1[23].i64[1]+ a1[25].i64[0]+ a1[26].i64[1]+ a1[28].i64[1]+ a1[30].i64[1], 56 * (v21 + v16)
  + 40 * (a1[19].i64[0] + v17)
  + 32 * (a1[20].i64[1] + v20 + a1[23].i64[1] + a1[25].i64[0])
  + 24 * (v19 + v18 + a1[22].i64[0] + a1[26].i64[1] + a1[28].i64[1] + a1[30].i64[1]));
  if (a1[39].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Clip: %lu, %lu unique."), a1[39].i64[0], a1[10].i64[0]);
  if (a1[39].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Color: %lu, %lu unique."), a1[39].i64[1], a1[11].i64[1]);
  if (a1[40].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" ColorSpace: %lu, %lu unique."), a1[40].i64[0], a1[13].i64[0]);
  if (a1[40].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Dash: %lu, %lu unique."), a1[40].i64[1], a1[14].i64[1]);
  if (a1[41].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Font: %lu, %lu unique."), a1[41].i64[0], a1[16].i64[0]);
  if (a1[41].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Image: %lu, %lu unique."), a1[41].i64[1], a1[17].i64[1]);
  if (a1[42].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Shading: %lu, %lu unique."), a1[42].i64[0], a1[19].i64[0]);
  if (a1[45].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Gradient: %lu, %lu unique."), a1[45].i64[1], a1[20].i64[1]);
  if (a1[42].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Pattern: %lu, %lu unique."), a1[42].i64[1], a1[22].i64[0]);
  if (a1[43].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Style: %lu, %lu unique."), a1[43].i64[0], a1[23].i64[1]);
  if (a1[43].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" SoftMask: %lu, %lu unique."), a1[43].i64[1], a1[25].i64[0]);
  if (a1[44].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Function: %lu, %lu unique."), a1[44].i64[0], a1[26].i64[1]);
  if (a1[44].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" DisplayList: %lu, %lu unique."), a1[44].i64[1], a1[28].i64[1]);
  if (a1[45].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" CFTypeRef: %lu, %lu unique."), a1[45].i64[0], a1[30].i64[1]);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nEntryState count: %lu, %lu unique, (%lu bytes)."), vaddvq_s32(vuzp1q_s32(a1[46], a1[47])), a1[33].i64[1] + a1[32].i64[0] + a1[35].i64[0] + a1[36].i64[1], 104 * a1[32].i64[0] + 16 * a1[33].i64[1] + 56 * a1[35].i64[0] + 80 * a1[36].i64[1]);
  if (a1[46].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Drawing: %lu, %lu unique."), a1[46].i64[0], a1[32].i64[0]);
  if (a1[46].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Fill: %lu, %lu unique."), a1[46].i64[1], a1[33].i64[1]);
  if (a1[47].i64[0])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Stroke: %lu, %lu unique."), a1[47].i64[0], a1[35].i64[0]);
  if (a1[47].i64[1])
    CFStringAppendFormat(Mutable, 0, CFSTR(" Pattern: %lu, %lu unique."), a1[47].i64[1], a1[36].i64[1]);
  v22 = (char *)a1[37].i64[1];
  v23 = (char *)a1[37].i64[0];
  v24 = (v22 - v23) >> 4;
  for (i = 0; v23 != v22; i += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26))
  {
    v26 = *(_QWORD *)v23;
    v23 += 16;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("\nDrawing operations %lu, (%lu bytes):\n"), v24, i);
  v27 = (_QWORD *)a1[37].i64[0];
  v28 = (_QWORD *)a1[37].i64[1];
  if (v27 != v28)
  {
    for (j = 0; ; ++j)
    {
      v30 = *(_DWORD *)(*v27 + 8);
      v31 = "Unknown";
      if (v30 <= 8u)
        v31 = off_1E165F9E8[v30];
      v32 = v30 >> 8;
      v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v27 + 16))(*v27);
      CFStringAppendFormat(Mutable, 0, CFSTR("    (%zu) %s, flags = 0x%08x, size = %zu.\n"), j, v31, v32, v33);
      if (j == 500)
        break;
      v27 += 2;
      if (v27 == v28)
        return Mutable;
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("... %lu more entries ...\n"), ((a1[37].i64[1] - a1[37].i64[0]) >> 4) - 500);
  }
  return Mutable;
}

_QWORD *std::shared_ptr<CG::DisplayListResourceFunction>::shared_ptr[abi:se180100]<CG::DisplayListResourceFunction,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629F90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFunction *,std::shared_ptr<CG::DisplayListResourceFunction>::__shared_ptr_default_delete<CG::DisplayListResourceFunction,CG::DisplayListResourceFunction>,std::allocator<CG::DisplayListResourceFunction>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceFunctionEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceSoftMask>::shared_ptr[abi:se180100]<CG::DisplayListResourceSoftMask,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A000;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D306F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceSoftMask *,std::shared_ptr<CG::DisplayListResourceSoftMask>::__shared_ptr_default_delete<CG::DisplayListResourceSoftMask,CG::DisplayListResourceSoftMask>,std::allocator<CG::DisplayListResourceSoftMask>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceSoftMask *,std::shared_ptr<CG::DisplayListResourceSoftMask>::__shared_ptr_default_delete<CG::DisplayListResourceSoftMask,CG::DisplayListResourceSoftMask>,std::allocator<CG::DisplayListResourceSoftMask>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceSoftMaskEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceStyle>::shared_ptr[abi:se180100]<CG::DisplayListResourceStyle,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629E78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D307C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceStyle *,std::shared_ptr<CG::DisplayListResourceStyle>::__shared_ptr_default_delete<CG::DisplayListResourceStyle,CG::DisplayListResourceStyle>,std::allocator<CG::DisplayListResourceStyle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceStyle *,std::shared_ptr<CG::DisplayListResourceStyle>::__shared_ptr_default_delete<CG::DisplayListResourceStyle,CG::DisplayListResourceStyle>,std::allocator<CG::DisplayListResourceStyle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceStyleEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourcePattern>::shared_ptr[abi:se180100]<CG::DisplayListResourcePattern,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629EE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D3089C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourcePattern *,std::shared_ptr<CG::DisplayListResourcePattern>::__shared_ptr_default_delete<CG::DisplayListResourcePattern,CG::DisplayListResourcePattern>,std::allocator<CG::DisplayListResourcePattern>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG26DisplayListResourcePatternEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceGradient>::shared_ptr[abi:se180100]<CG::DisplayListResourceGradient,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629FC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D3098C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceGradient *,std::shared_ptr<CG::DisplayListResourceGradient>::__shared_ptr_default_delete<CG::DisplayListResourceGradient,CG::DisplayListResourceGradient>,std::allocator<CG::DisplayListResourceGradient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceGradient *,std::shared_ptr<CG::DisplayListResourceGradient>::__shared_ptr_default_delete<CG::DisplayListResourceGradient,CG::DisplayListResourceGradient>,std::allocator<CG::DisplayListResourceGradient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG27DisplayListResourceGradientEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceShading>::shared_ptr[abi:se180100]<CG::DisplayListResourceShading,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629F20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceShading *,std::shared_ptr<CG::DisplayListResourceShading>::__shared_ptr_default_delete<CG::DisplayListResourceShading,CG::DisplayListResourceShading>,std::allocator<CG::DisplayListResourceShading>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceShading *,std::shared_ptr<CG::DisplayListResourceShading>::__shared_ptr_default_delete<CG::DisplayListResourceShading,CG::DisplayListResourceShading>,std::allocator<CG::DisplayListResourceShading>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG26DisplayListResourceShadingEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceImage>::shared_ptr[abi:se180100]<CG::DisplayListResourceImage,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629E40;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceImage *,std::shared_ptr<CG::DisplayListResourceImage>::__shared_ptr_default_delete<CG::DisplayListResourceImage,CG::DisplayListResourceImage>,std::allocator<CG::DisplayListResourceImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceImage *,std::shared_ptr<CG::DisplayListResourceImage>::__shared_ptr_default_delete<CG::DisplayListResourceImage,CG::DisplayListResourceImage>,std::allocator<CG::DisplayListResourceImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceImageEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceFont>::shared_ptr[abi:se180100]<CG::DisplayListResourceFont,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629DD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceFont *,std::shared_ptr<CG::DisplayListResourceFont>::__shared_ptr_default_delete<CG::DisplayListResourceFont,CG::DisplayListResourceFont>,std::allocator<CG::DisplayListResourceFont>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFont *,std::shared_ptr<CG::DisplayListResourceFont>::__shared_ptr_default_delete<CG::DisplayListResourceFont,CG::DisplayListResourceFont>,std::allocator<CG::DisplayListResourceFont>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceFontEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceDash>::shared_ptr[abi:se180100]<CG::DisplayListResourceDash,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629D98;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30CDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDash *,std::shared_ptr<CG::DisplayListResourceDash>::__shared_ptr_default_delete<CG::DisplayListResourceDash,CG::DisplayListResourceDash>,std::allocator<CG::DisplayListResourceDash>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceDashEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceColorSpace>::shared_ptr[abi:se180100]<CG::DisplayListResourceColorSpace,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A0E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceColorSpace *,std::shared_ptr<CG::DisplayListResourceColorSpace>::__shared_ptr_default_delete<CG::DisplayListResourceColorSpace,CG::DisplayListResourceColorSpace>,std::allocator<CG::DisplayListResourceColorSpace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColorSpace *,std::shared_ptr<CG::DisplayListResourceColorSpace>::__shared_ptr_default_delete<CG::DisplayListResourceColorSpace,CG::DisplayListResourceColorSpace>,std::allocator<CG::DisplayListResourceColorSpace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG29DisplayListResourceColorSpaceEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceColor>::shared_ptr[abi:se180100]<CG::DisplayListResourceColor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629E08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceColor *,std::shared_ptr<CG::DisplayListResourceColor>::__shared_ptr_default_delete<CG::DisplayListResourceColor,CG::DisplayListResourceColor>,std::allocator<CG::DisplayListResourceColor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColor *,std::shared_ptr<CG::DisplayListResourceColor>::__shared_ptr_default_delete<CG::DisplayListResourceColor,CG::DisplayListResourceColor>,std::allocator<CG::DisplayListResourceColor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG24DisplayListResourceColorEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListResourceClip>::shared_ptr[abi:se180100]<CG::DisplayListResourceClip,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629D60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D30F74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListResourceClip *,std::shared_ptr<CG::DisplayListResourceClip>::__shared_ptr_default_delete<CG::DisplayListResourceClip,CG::DisplayListResourceClip>,std::allocator<CG::DisplayListResourceClip>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceClip *,std::shared_ptr<CG::DisplayListResourceClip>::__shared_ptr_default_delete<CG::DisplayListResourceClip,CG::DisplayListResourceClip>,std::allocator<CG::DisplayListResourceClip>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN2CG23DisplayListResourceClipEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<CG::DisplayListShape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1629CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CG::DisplayListShape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1629CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t CGDisplayListGetTypeID()
{
  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1)
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_124_14047);
  return CGDisplayListGetTypeID::display_list2_type_id;
}

void std::__shared_ptr_pointer<CG::DisplayListShape  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

CG::DisplayListShape *std::__shared_ptr_pointer<CG::DisplayListShape  *>::__on_zero_shared(uint64_t a1)
{
  CG::DisplayListShape *result;

  result = *(CG::DisplayListShape **)(a1 + 24);
  if (result)
  {
    CG::DisplayListShape::~DisplayListShape(result);
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListShape  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN2CG16DisplayListShapeEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

const __CFURL *CG::DisplayList::serializeToURL(CG::DisplayList *this, CFURLRef anURL, const __CFDictionary *a3)
{
  const __CFString *String;
  char *v6;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  CFStringRef v10;
  CFStringRef v11;
  const __CFAllocator *v12;
  const __CFString *v13;
  const __CFURL *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  const __CFURL *v22;
  const __CFAllocator *v23;
  const __CFURL *v24;
  CFStringRef PathComponent;
  const __CFString *v26;
  const __CFURL *v27;
  const __CFURL *v28;
  size_t v29;
  char *v30;
  char *v31;
  xmlBuffer *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  const __CFURL *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[2];
  CFTypeRef v59;
  xmlBufferPtr buf;
  xmlTextWriterPtr v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD v65[2];
  UInt8 buffer[1028];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  String = CFURLCopyQueryString(anURL, &stru_1E1664C98);
  if (!String)
    goto LABEL_45;
  CFStringGetCString(String, (char *)buffer, 255, 0x8000100u);
  v6 = strstr((char *)buffer, "tmpRelative=");
  if (v6)
    v7 = strncmp(v6 + 12, "yes", 3uLL) == 0;
  else
    v7 = 0;
  v8 = strstr((char *)buffer, "addProcID=");
  if (!v8)
  {
    v9 = 0;
    if (!v7)
      goto LABEL_14;
LABEL_9:
    if (CGGetTempDirPath_predicate != -1)
      dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_113);
    v10 = CFURLCopyPath(anURL);
    v11 = v10;
    if (v10)
    {
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s/%@"), &CGGetTempDirPath_tempDirPath, v10);
      CFRelease(v11);
      v14 = CFURLCreateWithFileSystemPath(v12, v13, kCFURLPOSIXPathStyle, 1u);
      if (!v9)
        goto LABEL_44;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v9 = strncmp(v8 + 10, "yes", 3uLL) == 0;
  if (v7)
    goto LABEL_9;
LABEL_14:
  if (v9)
  {
    v14 = 0;
LABEL_16:
    if (CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::onceToken != -1)
      dispatch_once(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::onceToken, &__block_literal_global_14131);
    v15 = getpid();
    *(_DWORD *)buffer = v15;
    pthread_mutex_lock(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::dict_mutex);
    v16 = *(_QWORD *)(CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8);
    if (!v16)
      goto LABEL_28;
    v17 = CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8;
    do
    {
      v18 = *(_DWORD *)(v16 + 28);
      v19 = v18 < (int)v15;
      if (v18 >= (int)v15)
        v20 = (uint64_t *)v16;
      else
        v20 = (uint64_t *)(v16 + 8);
      if (!v19)
        v17 = v16;
      v16 = *v20;
    }
    while (*v20);
    if (v17 != CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap + 8
      && (int)v15 >= *(_DWORD *)(v17 + 28))
    {
      v21 = (*(_DWORD *)(v17 + 32) + 1);
    }
    else
    {
LABEL_28:
      v21 = 1;
    }
    *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::sPIDMap, v15, buffer)+ 8) = v21;
    pthread_mutex_unlock(&CG::DisplayList::serializeToURL(__CFURL const*,__CFDictionary const*)::dict_mutex);
    if (v14)
      v22 = v14;
    else
      v22 = anURL;
    v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v24 = CFURLCreateCopyDeletingPathExtension((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22);
    PathComponent = CFURLCopyLastPathComponent(v24);
    v26 = CFStringCreateWithFormat(v23, 0, CFSTR("%@_%d_%d"), PathComponent, v15, v21);
    v27 = CFURLCreateCopyDeletingLastPathComponent(v23, v22);
    v28 = CFURLCreateCopyAppendingPathComponent(v23, v27, v26, 1u);
    if (v14)
      CFRelease(v14);
    v14 = CFURLCreateCopyAppendingPathExtension(v23, v28, CFSTR("dlist"));
    if (v24)
      CFRelease(v24);
    if (PathComponent)
      CFRelease(PathComponent);
    if (v26)
      CFRelease(v26);
    if (v27)
      CFRelease(v27);
    if (v28)
      CFRelease(v28);
LABEL_44:
    if (v14)
      goto LABEL_46;
  }
LABEL_45:
  v14 = (const __CFURL *)CFRetain(anURL);
LABEL_46:
  if (!CFURLGetFileSystemRepresentation(v14, 0, buffer, 1024))
  {
    if (v14)
      CFRelease(v14);
    return 0;
  }
  v29 = strlen((const char *)buffer);
  if (v29 && buffer[v29 - 1] != 47)
    strlcat((char *)buffer, "/", 0x401uLL);
  v30 = strchr((char *)&buffer[1], 47);
  if (v30)
  {
    v31 = v30;
    while (1)
    {
      *v31 = 0;
      if (mkdir((const char *)buffer, 0x1FFu) == -1 && *__error() != 17)
        break;
      *v31 = 47;
      v31 = strchr(v31 + 1, 47);
      if (!v31)
        goto LABEL_55;
    }
    __error();
    CGPostError((uint64_t)"%s: Failed to create directory for path: %s, errno = %d", v50, v51, v52, v53, v54, v55, v56, (char)"CFURLRef CG::DisplayList::serializeToURL(CFURLRef, CFDictionaryRef)");
    if (v14)
      CFRelease(v14);
    return 0;
  }
LABEL_55:
  v58[0] = off_1E1629130;
  v58[1] = this;
  v59 = 0;
  if (v14)
    v59 = CFRetain(v14);
  v61 = 0;
  v58[0] = &off_1E1629380;
  v64[0] = 0;
  v64[1] = 0;
  v62 = 0;
  v63 = v64;
  v65[0] = 0;
  v65[1] = 0;
  v64[2] = v65;
  v32 = xmlBufferCreate();
  buf = v32;
  if (v32)
  {
    v61 = xmlNewTextWriterMemory(v32, 0);
    if (!v61)
    {
      CGPostError((uint64_t)"%s: xmlNewTextWriterMemory() returned NULL", v40, v41, v42, v43, v44, v45, v46, (char)"CG::DisplayListXMLSerializer::DisplayListXMLSerializer(const DisplayList *, CFURLRef)");
      xmlBufferFree(buf);
      buf = 0;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: xmlBufferCreate() returned NULL", v33, v34, v35, v36, v37, v38, v39, (char)"CG::DisplayListXMLSerializer::DisplayListXMLSerializer(const DisplayList *, CFURLRef)");
  }
  v47 = CG::DisplayListXMLSerializer::serialize((CG::DisplayListXMLSerializer *)v58);
  if (v14)
    v48 = v47;
  else
    v48 = 1;
  if (v47)
    v49 = v14;
  else
    v49 = 0;
  if ((v48 & 1) == 0)
  {
    CFRelease(v14);
    v49 = 0;
  }
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer((CG::DisplayListXMLSerializer *)v58);
  return v49;
}

void sub_184D31620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer((CG::DisplayListXMLSerializer *)va);
  _Unwind_Resume(a1);
}

void ___ZNK2CG11DisplayList22copyReferencedPatternsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), *(const void **)(a2 + 16));
}

uint64_t CG::DisplayList::enumeratePatternResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v11[5];
  char v12;

  v5 = result;
  v6 = *(_QWORD **)(result + 320);
  v7 = (_QWORD *)(result + 328);
  if (v6 != (_QWORD *)(result + 328))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v6[4]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList34enumeratePatternResourcesWithBlockEbU13block_pointerFvPKNS_26DisplayListResourcePatternEE_block_invoke;
    v11[3] = &unk_1E165F960;
    v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(_QWORD *)(v5 + 576), *(_QWORD *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList34enumeratePatternResourcesWithBlockEbU13block_pointerFvPKNS_26DisplayListResourcePatternEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumeratePatternResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t CG::DisplayList::enumerateDisplayListEntriesWithBlock(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v5 + 8) == 7)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v5 + 80);
        if (v6)
        {
          if (*(_QWORD *)(v6 + 16))
            result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
        }
      }
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

CGImageRef CG::DisplayList::createImage(CG::DisplayList *this)
{
  uint64_t v2;
  const CGRect *v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  const __CFString *v16;
  const __CFString *v17;
  CGColorSpaceRef v18;
  int v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  CGContextRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGContext *v31;
  CGImageRef Image;
  _QWORD v34[5];
  _QWORD v35[5];
  _QWORD v36[5];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  _QWORD v41[7];
  _QWORD v42[5];
  _QWORD v43[6];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;

  v56 = 0;
  v57 = &v56;
  v58 = 0x2000000000;
  v59 = 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = 0;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  v2 = MEMORY[0x1E0C809B0];
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 0x40000000;
  v43[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke;
  v43[3] = &unk_1E165F7B0;
  v43[4] = &v56;
  v43[5] = &v44;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 0x40000000;
  v42[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_2;
  v42[3] = &unk_1E165F7D8;
  v42[4] = v43;
  CG::DisplayList::enumerateColorSpaceResourcesWithBlock((uint64_t)this, 1, (uint64_t)v42);
  v41[0] = v2;
  v41[1] = 0x40000000;
  v41[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_3;
  v41[3] = &unk_1E165F848;
  v41[5] = &v52;
  v41[6] = &v48;
  v41[4] = v43;
  CG::DisplayList::enumeratePatternResourcesWithBlock((uint64_t)this, 1, (uint64_t)v41);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  v36[0] = v2;
  v36[1] = 0x40000000;
  v36[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_5;
  v36[3] = &unk_1E165F870;
  v36[4] = &v37;
  CG::DisplayList::enumerateImageResourcesWithBlock((uint64_t)this, 1, (uint64_t)v36);
  if (*((_QWORD *)this + 33))
  {
    v4 = v57;
  }
  else
  {
    if (*((_DWORD *)v45 + 6) <= 3u && !*((_BYTE *)v49 + 24))
    {
      v35[0] = v2;
      v35[1] = 0x40000000;
      v35[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_6;
      v35[3] = &unk_1E165F898;
      v35[4] = &v48;
      CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)this, 1, (uint64_t)v35);
      if (!*((_BYTE *)v49 + 24))
        *((_DWORD *)v45 + 6) = 1;
    }
    v4 = v57;
    if (*((_BYTE *)v57 + 24))
    {
      if (!*((_BYTE *)v53 + 24))
      {
        v34[0] = v2;
        v34[1] = 0x40000000;
        v34[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_7;
        v34[3] = &unk_1E165F8C0;
        v34[4] = &v52;
        CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)this, 1, (uint64_t)v34);
        v4 = v57;
        if (!*((_BYTE *)v53 + 24))
          *((_BYTE *)v57 + 24) = 0;
      }
    }
  }
  v5 = *((_DWORD *)v38 + 6);
  v6 = *((_DWORD *)v45 + 6);
  v7 = *((unsigned __int8 *)v4 + 24);
  v8 = CG::DisplayList::containsTransparentContent(this, v3);
  if (v8)
    v9 = 1;
  else
    v9 = 5;
  if (v6 == 1 && v5 == 1 && v7 == 0)
    v12 = v8;
  else
    v12 = v9;
  v13 = v5 - 2;
  if ((v5 - 2) >= 4)
  {
    v15 = 8;
    v14 = 16;
  }
  else
  {
    v14 = qword_184F8F598[v13];
    v15 = qword_184F8F5B8[v13];
  }
  v16 = CFSTR("kCGColorSpaceExtendedSRGB");
  if (!v7)
    v16 = CFSTR("kCGColorSpaceSRGB");
  if (v6 == 1)
    v17 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
  else
    v17 = v16;
  v18 = CGColorSpaceCreateWithName(v17);
  if (v18 && *(_BYTE *)(*((_QWORD *)v18 + 3) + 13))
  {
    v19 = 4352;
    v15 = v14;
  }
  else
  {
    v19 = 0;
  }
  v20 = vcvtpd_u64_f64(*((double *)this + 5));
  v21 = vcvtpd_u64_f64(*((double *)this + 6));
  if (v18 && (v22 = *(_QWORD *)(*((_QWORD *)v18 + 3) + 40)) != 0)
    v23 = v22 + 1;
  else
    v23 = 0;
  v24 = CGBitmapContextCreateWithData(0, v20, v21, v15, ((v15 >> 3) * v20 * v23 + 31) & 0xFFFFFFFFFFFFFFE0, v18, v19 | v12, 0, 0);
  if (v24)
  {
    v31 = v24;
    CGDisplayListDrawInContext(*((_QWORD *)this + 1), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    Image = CGBitmapContextCreateImage(v31);
    CFRelease(v31);
  }
  else
  {
    Image = 0;
  }
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v56, 8);
  return Image;
}

void sub_184D31BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 208), 8);
  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) |= *(_BYTE *)(*(_QWORD *)(a2 + 24) + 14);
    v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28);
    if (v2 <= 4)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) |= dword_184F8F5D8[v2];
  }
  return result;
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t CG::DisplayList::enumerateColorSpaceResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v11[5];
  char v12;

  v5 = result;
  v6 = *(_QWORD **)(result + 176);
  v7 = (_QWORD *)(result + 184);
  if (v6 != (_QWORD *)(result + 184))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v6[4]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList37enumerateColorSpaceResourcesWithBlockEbU13block_pointerFvPKNS_29DisplayListResourceColorSpaceEE_block_invoke;
    v11[3] = &unk_1E165F910;
    v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(_QWORD *)(v5 + 576), *(_QWORD *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

void ___ZN2CG11DisplayList11createImageEv_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CG::DisplayList *v4;
  const CGRect *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CG::DisplayList *v11;
  const void *CGDisplayList;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  void (*v23)(_QWORD, uint64_t);
  _QWORD v24[4];
  __int128 v25;
  uint64_t v26;
  void *values[4];
  void *keys[2];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v2 + 185))
  {
    *(_OWORD *)keys = xmmword_1E165F7F8;
    v29 = *(_OWORD *)off_1E165F808;
    values[0] = *(void **)MEMORY[0x1E0C9AE40];
    values[1] = values[0];
    values[2] = *(void **)MEMORY[0x1E0C9AE50];
    values[3] = values[0];
    v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v4)
    {
      v11 = v4;
      CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(v4, (const __CFDictionary *)&CGRectInfinite, v5, v6, v7, v8, v9, v10);
      if (CGDisplayList)
      {
        v20 = CGDisplayList;
        v21 = CGDisplayListContextCreate(CGDisplayList, v13, v14, v15, v16, v17, v18, v19);
        if (v21)
        {
          v22 = (const void *)v21;
          v23 = *(void (**)(_QWORD, uint64_t))(v2 + 168);
          if (v23)
            v23(*(_QWORD *)(v2 + 80), v21);
          CFRelease(v22);
        }
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 0x40000000;
        v24[2] = ___ZN2CG11DisplayList11createImageEv_block_invoke_4;
        v24[3] = &unk_1E165F820;
        v26 = *(_QWORD *)(a1 + 48);
        v25 = *(_OWORD *)(a1 + 32);
        CG::DisplayList::enumerateColorResourcesWithBlock((uint64_t)v20 + 16, 1, (uint64_t)v24);
        CFRelease(v20);
      }
      CFRelease(v11);
    }
  }
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = CGImageGetComponentType(*(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = CGPixelComponentMax(result, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v4, v5, v6, v7, v8, v9);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t CG::DisplayList::enumerateImageResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v11[5];
  char v12;

  v5 = result;
  v6 = *(_QWORD **)(result + 248);
  v7 = (_QWORD *)(result + 256);
  if (v6 != (_QWORD *)(result + 256))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v6[4]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList32enumerateImageResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceImageEE_block_invoke;
    v11[3] = &unk_1E165F938;
    v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(_QWORD *)(v5 + 576), *(_QWORD *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

uint64_t CG::DisplayList::enumerateColorResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v11[5];
  char v12;

  v5 = result;
  v6 = *(_QWORD **)(result + 152);
  v7 = (_QWORD *)(result + 160);
  if (v6 != (_QWORD *)(result + 160))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v6[4]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2CG11DisplayList32enumerateColorResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceColorEE_block_invoke;
    v11[3] = &unk_1E165F8E8;
    v12 = a2;
    v11[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(*(_QWORD *)(v5 + 576), *(_QWORD *)(v5 + 584), (uint64_t)v11);
  }
  return result;
}

CGColorSpaceRef ___ZN2CG11DisplayList11createImageEv_block_invoke_7(CGColorSpaceRef result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  CGColorSpaceRef v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = result;
    if ((v8 & 0x8000000000000000) != 0)
    {
      result = CGTaggedColorGetColorSpace(*(_QWORD *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (!result)
        return result;
    }
    else
    {
      result = *(CGColorSpaceRef *)(v8 + 24);
      if (!result)
        return result;
    }
    v10 = *((_QWORD *)result + 3);
    if (*(_DWORD *)(v10 + 24) == 1)
    {
      if (*(_BYTE *)(v10 + 14))
      {
        result = (CGColorSpaceRef)CGColorIsWideGamut(v8);
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v9 + 4) + 8) + 24) |= result;
      }
    }
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList32enumerateColorResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceColorEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateColorResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t ___ZNK2CG11DisplayList32enumerateImageResourcesWithBlockEbU13block_pointerFvPKNS_24DisplayListResourceImageEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateImageResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t ___ZN2CG11DisplayList11createImageEv_block_invoke_4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  CGColorSpaceRef ColorSpace;
  uint64_t v11;
  const CGFloat *Components;
  double v13;

  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(*(_QWORD *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (!ColorSpace)
        return (*(uint64_t (**)(void))(a1[4] + 16))();
    }
    else
    {
      ColorSpace = *(CGColorSpaceRef *)(v9 + 24);
      if (!ColorSpace)
        return (*(uint64_t (**)(void))(a1[4] + 16))();
    }
    v11 = *((_QWORD *)ColorSpace + 3);
    if (*(_BYTE *)(v11 + 14))
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) |= CGColorIsWideGamut(v9);
      v11 = *((_QWORD *)ColorSpace + 3);
    }
    if (*(_DWORD *)(v11 + 24) == 1)
    {
      Components = CGColorGetComponents((CGColorRef)v9);
      v13 = Components[1];
      if (*Components != v13 || v13 != Components[2])
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
  }
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t ___ZNK2CG11DisplayList37enumerateColorSpaceResourcesWithBlockEbU13block_pointerFvPKNS_29DisplayListResourceColorSpaceEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateColorSpaceResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t CGDisplayListCreate(CG::DisplayList *a1, uint64_t a2, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CG::DisplayList::createCGDisplayList(a1, (const __CFDictionary *)&CGRectInfinite, a3, a4, a5, a6, a7, a8);
}

_QWORD *CGDisplayListCreateCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CG::DisplayList::createCGDisplayList(a1, 0, a3, a4, a5, a6, a7, a8);
}

_QWORD *std::shared_ptr<CG::DisplayListEntry const>::shared_ptr[abi:se180100]<CG::DisplayListEntry const,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629CF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D32310(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListEntry const*,std::shared_ptr<CG::DisplayListEntry const>::__shared_ptr_default_delete<CG::DisplayListEntry const,CG::DisplayListEntry const>,std::allocator<CG::DisplayListEntry const>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntry const*,std::shared_ptr<CG::DisplayListEntry const>::__shared_ptr_default_delete<CG::DisplayListEntry const,CG::DisplayListEntry const>,std::allocator<CG::DisplayListEntry const>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG16DisplayListEntryEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListEntryStateDrawing const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateDrawing,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A038;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D323E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateDrawing *,std::shared_ptr<CG::DisplayListEntryStateDrawing const>::__shared_ptr_default_delete<CG::DisplayListEntryStateDrawing const,CG::DisplayListEntryStateDrawing>,std::allocator<CG::DisplayListEntryStateDrawing>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateDrawing *,std::shared_ptr<CG::DisplayListEntryStateDrawing const>::__shared_ptr_default_delete<CG::DisplayListEntryStateDrawing const,CG::DisplayListEntryStateDrawing>,std::allocator<CG::DisplayListEntryStateDrawing>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG28DisplayListEntryStateDrawingEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListEntryStateFill const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateFill,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629EB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D324B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateFill *,std::shared_ptr<CG::DisplayListEntryStateFill const>::__shared_ptr_default_delete<CG::DisplayListEntryStateFill const,CG::DisplayListEntryStateFill>,std::allocator<CG::DisplayListEntryStateFill>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateFill *,std::shared_ptr<CG::DisplayListEntryStateFill const>::__shared_ptr_default_delete<CG::DisplayListEntryStateFill const,CG::DisplayListEntryStateFill>,std::allocator<CG::DisplayListEntryStateFill>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG25DisplayListEntryStateFillEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListEntryStateStroke const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateStroke,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1629F58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D3258C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStateStroke *,std::shared_ptr<CG::DisplayListEntryStateStroke const>::__shared_ptr_default_delete<CG::DisplayListEntryStateStroke const,CG::DisplayListEntryStateStroke>,std::allocator<CG::DisplayListEntryStateStroke>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateStroke *,std::shared_ptr<CG::DisplayListEntryStateStroke const>::__shared_ptr_default_delete<CG::DisplayListEntryStateStroke const,CG::DisplayListEntryStateStroke>,std::allocator<CG::DisplayListEntryStateStroke>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG27DisplayListEntryStateStrokeEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CG::DisplayListEntryStatePattern const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStatePattern,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E162A070;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_184D32660(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CG::DisplayListEntryStatePattern *,std::shared_ptr<CG::DisplayListEntryStatePattern const>::__shared_ptr_default_delete<CG::DisplayListEntryStatePattern const,CG::DisplayListEntryStatePattern>,std::allocator<CG::DisplayListEntryStatePattern>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStatePattern *,std::shared_ptr<CG::DisplayListEntryStatePattern const>::__shared_ptr_default_delete<CG::DisplayListEntryStatePattern const,CG::DisplayListEntryStatePattern>,std::allocator<CG::DisplayListEntryStatePattern>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIKN2CG28DisplayListEntryStatePatternEE27__shared_ptr_default_deleteIS3_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t CG::DisplayList::enumerateAllResourcesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *i;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD v48[5];
  char v49;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD **)(result + 128);
  v7 = (_QWORD *)(result + 136);
  if (v6 != (_QWORD *)(result + 136))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v6[4]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  v11 = (_QWORD *)v5[19];
  if (v11 != v5 + 20)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v11[4]);
      v12 = (_QWORD *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v10 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v10);
      }
      v11 = v13;
    }
    while (v13 != v5 + 20);
  }
  v14 = (_QWORD *)v5[22];
  if (v14 != v5 + 23)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v14[4]);
      v15 = (_QWORD *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v14[2];
          v10 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v10);
      }
      v14 = v16;
    }
    while (v16 != v5 + 23);
  }
  v17 = (_QWORD *)v5[25];
  if (v17 != v5 + 26)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v17[4]);
      v18 = (_QWORD *)v17[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v17[2];
          v10 = *v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v10);
      }
      v17 = v19;
    }
    while (v19 != v5 + 26);
  }
  v20 = (_QWORD *)v5[28];
  if (v20 != v5 + 29)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v20[4]);
      v21 = (_QWORD *)v20[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v20[2];
          v10 = *v22 == (_QWORD)v20;
          v20 = v22;
        }
        while (!v10);
      }
      v20 = v22;
    }
    while (v22 != v5 + 29);
  }
  v23 = (_QWORD *)v5[31];
  if (v23 != v5 + 32)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v23[4]);
      v24 = (_QWORD *)v23[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v23[2];
          v10 = *v25 == (_QWORD)v23;
          v23 = v25;
        }
        while (!v10);
      }
      v23 = v25;
    }
    while (v25 != v5 + 32);
  }
  v26 = (_QWORD *)v5[34];
  if (v26 != v5 + 35)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v26[4]);
      v27 = (_QWORD *)v26[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v26[2];
          v10 = *v28 == (_QWORD)v26;
          v26 = v28;
        }
        while (!v10);
      }
      v26 = v28;
    }
    while (v28 != v5 + 35);
  }
  v29 = (_QWORD *)v5[37];
  if (v29 != v5 + 38)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v29[4]);
      v30 = (_QWORD *)v29[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v29[2];
          v10 = *v31 == (_QWORD)v29;
          v29 = v31;
        }
        while (!v10);
      }
      v29 = v31;
    }
    while (v31 != v5 + 38);
  }
  v32 = (_QWORD *)v5[40];
  if (v32 != v5 + 41)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v32[4]);
      v33 = (_QWORD *)v32[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v32[2];
          v10 = *v34 == (_QWORD)v32;
          v32 = v34;
        }
        while (!v10);
      }
      v32 = v34;
    }
    while (v34 != v5 + 41);
  }
  v35 = (_QWORD *)v5[43];
  if (v35 != v5 + 44)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v35[4]);
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v35[2];
          v10 = *v37 == (_QWORD)v35;
          v35 = v37;
        }
        while (!v10);
      }
      v35 = v37;
    }
    while (v37 != v5 + 44);
  }
  v38 = (_QWORD *)v5[46];
  if (v38 != v5 + 47)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v38[4]);
      v39 = (_QWORD *)v38[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v38[2];
          v10 = *v40 == (_QWORD)v38;
          v38 = v40;
        }
        while (!v10);
      }
      v38 = v40;
    }
    while (v40 != v5 + 47);
  }
  v41 = (_QWORD *)v5[49];
  if (v41 != v5 + 50)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v41[4]);
      v42 = (_QWORD *)v41[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v41[2];
          v10 = *v43 == (_QWORD)v41;
          v41 = v43;
        }
        while (!v10);
      }
      v41 = v43;
    }
    while (v43 != v5 + 50);
  }
  for (i = (_QWORD *)v5[54]; i; i = (_QWORD *)*i)
    result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, i[2]);
  v45 = (_QWORD *)v5[57];
  if (v45 != v5 + 58)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v45[4]);
      v46 = (_QWORD *)v45[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v45[2];
          v10 = *v47 == (_QWORD)v45;
          v45 = v47;
        }
        while (!v10);
      }
      v45 = v47;
    }
    while (v47 != v5 + 58);
  }
  if ((a2 & 1) != 0)
  {
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 0x40000000;
    v48[2] = ___ZNK2CG11DisplayList30enumerateAllResourcesWithBlockEbU13block_pointerFvPKNS_19DisplayListResourceEE_block_invoke;
    v48[3] = &unk_1E165F988;
    v49 = a2;
    v48[4] = a3;
    return CG::DisplayList::enumerateDisplayListEntriesWithBlock(v5[72], v5[73], (uint64_t)v48);
  }
  return result;
}

uint64_t ___ZNK2CG11DisplayList30enumerateAllResourcesWithBlockEbU13block_pointerFvPKNS_19DisplayListResourceEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CG::DisplayList::enumerateAllResourcesWithBlock(a3, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t CG::DisplayList::enumerateEntriesWithBlock(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v4 = result;
  if ((a2 & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 584);
    do
    {
      if (v6 == *(_QWORD *)(v4 + 576))
        break;
      v9 = 0;
      v7 = *(_QWORD *)(v6 - 16);
      v6 -= 16;
      result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, v7, &v9);
    }
    while (!v9);
  }
  else
  {
    for (i = *(_QWORD **)(result + 576); i != *(_QWORD **)(v4 + 584); i += 2)
    {
      v8 = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a3 + 16))(a3, *i, &v8);
      if (v8)
        break;
    }
  }
  return result;
}

double CGDisplayListReset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  if (a1)
  {
    *(_DWORD *)(a1 + 80) = 0;
    *(CGRect *)(a1 + 88) = CGRectNull;
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(CGRect *)(v2 + 16) = CGRectNull;
    *(_DWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 850045863;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_QWORD *)(v2 + 112) = 0;
    v3 = (_QWORD *)operator new();
    *v3 = &off_1E1629D28;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = v2;
    v4 = *(std::__shared_weak_count **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v2;
    *(_QWORD *)(a1 + 128) = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 152));
    *(_QWORD *)(a1 + 144) = a1 + 152;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 176));
    *(_QWORD *)(a1 + 168) = a1 + 176;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 200));
    *(_QWORD *)(a1 + 192) = a1 + 200;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 224));
    v7 = *(_QWORD **)(a1 + 248);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(v7);
    *(_QWORD *)(a1 + 240) = a1 + 248;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 272));
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 264) = a1 + 272;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 296));
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 288) = a1 + 296;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 320));
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 312) = a1 + 320;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 344));
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 336) = a1 + 344;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 368));
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = a1 + 368;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 392));
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = a1 + 392;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 416));
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 408) = a1 + 416;
    if (*(_QWORD *)(a1 + 456))
    {
      std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::__deallocate_node(*(_QWORD **)(a1 + 448));
      *(_QWORD *)(a1 + 448) = 0;
      v8 = *(_QWORD *)(a1 + 440);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 456) = 0;
    }
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 480));
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = a1 + 480;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 504));
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 496) = a1 + 504;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 528));
    *(_QWORD *)(a1 + 520) = a1 + 528;
    *(_QWORD *)(a1 + 536) = 0;
    *(_QWORD *)(a1 + 528) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 552));
    *(_QWORD *)(a1 + 544) = a1 + 552;
    *(_QWORD *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 552) = 0;
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(a1 + 576));
    *(_QWORD *)(a1 + 568) = a1 + 576;
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 576) = 0;
    v10 = *(_QWORD *)(a1 + 600);
    v11 = *(_QWORD *)(a1 + 592);
    while (v10 != v11)
      v10 = std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v10 - 16);
    *(_QWORD *)(a1 + 600) = v11;
    *(_DWORD *)(a1 + 616) = -1;
    v12 = *(_QWORD *)(a1 + 136);
    result = 0.0;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_QWORD *)(v12 + 80) = 0;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 8) = xmmword_185004FB0;
    *(_QWORD *)(v12 + 32) = 0x61C8864E7A143579;
    *(_QWORD *)(a1 + 832) = 0;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
  }
  return result;
}

void sub_184D32FD0(_Unwind_Exception *a1)
{
  CG::DisplayListShape *v1;

  CG::DisplayListShape::~DisplayListShape(v1);
  MEMORY[0x186DC23C4]();
  _Unwind_Resume(a1);
}

CFTypeRef CGDisplayListRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

double *CGDisplayListSetBoundingBox(double *result, double a2, double a3, double a4, double a5)
{
  if (result)
  {
    result[11] = a2;
    result[12] = a3;
    result[13] = a4;
    result[14] = a5;
  }
  return result;
}

CGFloat CGDisplayListGetBoundingBox(uint64_t a1)
{
  const CGRect *v1;

  v1 = &CGRectNull;
  if (a1 && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 600))
    v1 = (const CGRect *)(a1 + 88);
  return v1->origin.x;
}

const void *CGDisplayListContextDelegateCreate(const void *a1)
{
  if (a1)
    return (const void *)CG::DisplayList::createContextDelegate(a1);
  return a1;
}

uint64_t CGDisplayListContainsTransparentContent(uint64_t result, const CGRect *a2)
{
  if (result)
    return CG::DisplayList::containsTransparentContent((CG::DisplayList *)(result + 16), a2);
  return result;
}

const __CFURL *CGDisplayListSerializeToURL(uint64_t a1, const __CFURL *a2, const __CFDictionary *a3)
{
  if (a1 && a2)
    return CG::DisplayList::serializeToURL((CG::DisplayList *)(a1 + 16), a2, a3);
  else
    return 0;
}

uint64_t CGDisplayListCreateWithURL(const void *a1, uint64_t a2, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t CGDisplayList;
  _QWORD v11[5];
  _QWORD v12[3];
  _QWORD v13[2];

  if (!a1)
    return 0;
  CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, a3, a4, a5, a6, a7, a8);
  v11[0] = &off_1E1629430;
  v11[1] = CFRetain(a1);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v12;
  v12[0] = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[1] = 0;
  v12[2] = v13;
  if ((CG::DisplayListXMLDeserializer::deserializeTo((CG::DisplayListXMLDeserializer *)v11, (CG::DisplayList *)(CGDisplayList + 16)) & 1) == 0)
  {
    CFRelease((CFTypeRef)CGDisplayList);
    CGDisplayList = 0;
  }
  CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer((CG::DisplayListXMLDeserializer *)v11);
  return CGDisplayList;
}

void sub_184D3313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer((CG::DisplayListXMLDeserializer *)&a9);
  _Unwind_Resume(a1);
}

BOOL CGDisplayListDumpToFile(uint64_t a1, char *__s)
{
  _BOOL8 v2;
  size_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFURL *v13;
  const __CFURL *v14;
  const __CFURL *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const __CFAllocator *v23;
  const __CFURL *v24;
  CFStringRef v25;
  const __CFString *v26;
  const __CFString *v27;
  UInt8 buffer[1025];
  uint64_t v30;

  v2 = 0;
  v30 = *MEMORY[0x1E0C80C00];
  if (!a1 || !__s)
    return v2;
  v5 = strlen(__s);
  if (v5 < 3 || strncmp(__s, "*/", 2uLL))
  {
    v13 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__s, v5, 0);
    if (v13)
      goto LABEL_6;
LABEL_13:
    CGPostError((uint64_t)"SerializeDisplayList failed to create URL from path: %s", v6, (uint64_t)v7, v8, v9, v10, v11, v12, (char)__s);
    return 0;
  }
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v24 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__s + 1, v5 - 1, 0);
  if (!v24)
    goto LABEL_13;
  v25 = CFURLGetString(v24);
  v26 = CFStringCreateWithFormat(v23, 0, CFSTR("%@%@"), v25, CFSTR("?tmpRelative=yes&addProcID=yes"));
  if (!v26)
    goto LABEL_13;
  v27 = v26;
  v13 = CFURLCreateWithString(v23, v26, 0);
  CFRelease(v27);
  if (!v13)
    goto LABEL_13;
LABEL_6:
  v14 = CG::DisplayList::serializeToURL((CG::DisplayList *)(a1 + 16), v13, v7);
  v2 = v14 != 0;
  if (v14)
  {
    v15 = v14;
    CFURLGetFileSystemRepresentation(v14, 1u, buffer, 1024);
    CFRelease(v15);
    v22 = "succeeded";
  }
  else
  {
    CFURLGetFileSystemRepresentation(v13, 1u, buffer, 1024);
    v22 = "failed";
  }
  CGLog(1, (uint64_t)"SerializeDisplayList %s to: %s", v16, v17, v18, v19, v20, v21, (char)v22);
  CFRelease(v13);
  return v2;
}

uint64_t CGDisplayListGetAuxiliaryInfo(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

CFMutableArrayRef CGDisplayListCopyReferencedPatterns(uint64_t a1)
{
  uint64_t v1;
  CFMutableArrayRef Mutable;
  _QWORD v4[5];

  v1 = a1 + 16;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 352), MEMORY[0x1E0C9B378]);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CG11DisplayList22copyReferencedPatternsEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_91;
  v4[4] = Mutable;
  CG::DisplayList::enumeratePatternResourcesWithBlock(v1, 1, (uint64_t)v4);
  return Mutable;
}

uint64_t CGDisplayListContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_8:
    handle_invalid_context((char)"CGDisplayListContextCreateImage", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(uint64_t (**)(void))(v8 + 240);
    if (v9)
      return v9();
  }
  return 0;
}

uint64_t CGDisplayListGetNumberOfEntries(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 600) - *(_QWORD *)(result + 592)) >> 4;
  return result;
}

uint64_t CGDisplayListGetNumberOfEntriesOfType(uint64_t result, int a2)
{
  if (result)
    return *(_QWORD *)(result + 8 * a2 + 768);
  return result;
}

uint64_t CGDisplayListEnumerateEntriesWithOptions(uint64_t result, char a2, uint64_t a3)
{
  if (result)
    return CG::DisplayList::enumerateEntriesWithBlock(result + 16, a2, a3);
  return result;
}

uint64_t CGDisplayListIsEqualToDisplayList(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return CG::DisplayList::isEqualTo((CG::DisplayList *)(a1 + 16), (const CG::DisplayList *)(a2 + 16), 0);
  }
  return result;
}

uint64_t CGDisplayListIsEqualToDisplayListWithOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return CG::DisplayList::isEqualTo((CG::DisplayList *)(a1 + 16), (const CG::DisplayList *)(a2 + 16), a3);
  }
  return result;
}

unint64_t CGDisplayListGetHash(unint64_t result)
{
  if (result)
    return XXH64_digest(*(_QWORD **)(result + 136));
  return result;
}

CGColorSpaceRef create_CalGray(CGPDFArray *a1)
{
  __n128 v1;
  __n128 v2;
  _BOOL4 Number;
  double v4;
  CGPDFDictionaryRef value;
  CGPDFReal v7;
  CGFloat blackPoint[3];
  CGFloat whitePoint[4];

  whitePoint[3] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (!a1 || *((_QWORD *)a1 + 2) != 2)
  {
    return 0;
  }
  value = 0;
  v7 = 0.0;
  if (!CGPDFArrayGetDictionary(a1, 1uLL, &value))
  {
    return 0;
  }
  if ((get_array(value, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1) & 1) == 0)
  {
    return 0;
  }
  if ((get_array(value, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_14330, v2) & 1) == 0)
  {
    return 0;
  }
  Number = CGPDFDictionaryGetNumber(value, "Gamma", &v7);
  v4 = v7;
  if (!Number)
    v4 = 1.0;
  return CGColorSpaceCreateCalibratedGray(whitePoint, blackPoint, v4);
}

CGColorSpaceRef create_CalRGB(CGPDFArray *a1)
{
  __n128 v1;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  CGPDFDictionaryRef v6;
  CGFloat matrix[9];
  CGFloat gamma[3];
  CGFloat blackPoint[3];
  CGFloat whitePoint[4];

  whitePoint[3] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (a1 && *((_QWORD *)a1 + 2) == 2)
  {
    v6 = 0;
    if (CGPDFArrayGetDictionary(a1, 1uLL, &v6))
    {
      if ((get_array(v6, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1) & 1) != 0)
      {
        if ((get_array(v6, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_14330, v2) & 1) != 0)
        {
          if ((get_array(v6, "Gamma", gamma, (CGPDFArray *)3, (uint64_t *)&xmmword_185003338, v3) & 1) != 0)
          {
            if ((get_array(v6, "Matrix", matrix, (CGPDFArray *)9, color_space_state_create_calibrated_rgb_default_matrix, v4) & 1) != 0)return CGColorSpaceCreateCalibratedRGB(whitePoint, blackPoint, gamma, matrix);
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

CGColorSpaceRef create_Lab(CGPDFArray *a1)
{
  __n128 v1;
  __n128 v2;
  __n128 v3;
  CGPDFDictionaryRef v5;
  CGFloat range[4];
  CGFloat blackPoint[3];
  CGFloat whitePoint[4];

  whitePoint[3] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (a1 && *((_QWORD *)a1 + 2) == 2)
  {
    v5 = 0;
    if (CGPDFArrayGetDictionary(a1, 1uLL, &v5))
    {
      if ((get_array(v5, "WhitePoint", whitePoint, (CGPDFArray *)3, 0, v1) & 1) != 0)
      {
        if ((get_array(v5, "BlackPoint", blackPoint, (CGPDFArray *)3, default_black_point_14330, v2) & 1) != 0)
        {
          if ((get_array(v5, "Range", range, (CGPDFArray *)4, (uint64_t *)&xmmword_185003350, v3) & 1) != 0)
            return CGColorSpaceCreateLab(whitePoint, blackPoint, range);
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

uint64_t create_Separation(CGPDFArray *array)
{
  CGPDFObjectRef v2;
  int v3;
  uint64_t colorspace;
  CGColorSpace *v5;
  char *Function;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t DeviceN;
  CGPDFArray *v12;
  const char *v13;
  char *value;
  CGPDFObjectRef v15;
  CGPDFObjectRef v16;

  if (!array || *((_QWORD *)array + 2) != 4)
  {
    return 0;
  }
  value = 0;
  if (!CGPDFArrayGetName(array, 1uLL, (const char **)&value))
  {
    return 0;
  }
  v15 = 0;
  v16 = 0;
  if (!CGPDFArrayGetObject(array, 2uLL, &v15))
  {
    return 0;
  }
  v2 = v15;
  if (!v15)
  {
LABEL_18:
    return 0;
  }
  v3 = *((_DWORD *)v15 + 2);
  if (v3 != 7)
  {
    if (v3 == 5)
    {
      v16 = (CGPDFObjectRef)*((_QWORD *)v15 + 4);
      if (strcmp((const char *)v16, "Pattern"))
        goto LABEL_9;
      return 0;
    }
    goto LABEL_18;
  }
  v12 = (CGPDFArray *)*((_QWORD *)v15 + 4);
  if (!v12 || !*((_QWORD *)v12 + 2))
  {
    return 0;
  }
  if (!CGPDFArrayGetName(v12, 0, (const char **)&v16))
  {
    return 0;
  }
  v13 = (const char *)v16;
  if (!strcmp((const char *)v16, "Separation")
    || !strcmp(v13, "DeviceN")
    || !strcmp(v13, "Indexed")
    || !strcmp(v13, "Pattern"))
  {
    return 0;
  }
  v2 = v15;
LABEL_9:
  colorspace = cg_create_colorspace(v2);
  if (!colorspace)
  {
    return 0;
  }
  v5 = (CGColorSpace *)colorspace;
  v16 = 0;
  if (CGPDFArrayGetObject(array, 3uLL, &v16))
  {
    Function = CGPDFFunctionCreateFunction((char *)v16);
    DeviceN = CGColorSpaceCreateDeviceN(1uLL, (uint64_t)&value, v5, Function, 0, v7, v8, v9);
    if (Function)
      CFRelease(Function);
  }
  else
  {
    DeviceN = 0;
  }
  CGColorSpaceRelease(v5);
  return DeviceN;
}

uint64_t create_DeviceN(CGPDFArray *array)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  size_t v6;
  const char **v7;
  uint64_t colorspace;
  CGColorSpace *v9;
  char *Function;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t DeviceN;
  CGPDFDictionaryRef v17;
  CGPDFArrayRef value;
  CGPDFObjectRef v19;

  if (!array || (v2 = *((_QWORD *)array + 2), (unint64_t)(v2 - 6) <= 0xFFFFFFFFFFFFFFFDLL))
  {
    return 0;
  }
  value = 0;
  v19 = 0;
  if (!CGPDFArrayGetArray(array, 1uLL, &value) || !value || (v3 = *((_QWORD *)value + 2)) == 0)
  {
    return 0;
  }
  v4 = malloc_type_malloc(8 * v3, 0x50040EE9192B6uLL);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = (const char **)v4;
  do
  {
    if (!CGPDFArrayGetName(value, v6, v7))
    {
LABEL_27:
      free(v5);
      return 0;
    }
    ++v6;
    ++v7;
  }
  while (v3 != v6);
  if (!CGPDFArrayGetObject(array, 2uLL, &v19) || (colorspace = cg_create_colorspace(v19)) == 0)
  {
    goto LABEL_27;
  }
  v9 = (CGColorSpace *)colorspace;
  if (!CGPDFArrayGetObject(array, 3uLL, &v19))
  {
LABEL_30:
    CGColorSpaceRelease(v9);
    goto LABEL_27;
  }
  Function = CGPDFFunctionCreateFunction((char *)v19);
  v14 = Function;
  if (Function
    && (*((_QWORD *)Function + 4) != v3 || *(_QWORD *)(*((_QWORD *)v9 + 3) + 40) != *((_QWORD *)Function + 6)))
  {
    CFRelease(v14);
    goto LABEL_30;
  }
  v17 = 0;
  if (v2 == 5 && !CGPDFArrayGetDictionary(array, 4uLL, &v17))
  {
    CGColorSpaceRelease(v9);
    if (v14)
      CFRelease(v14);
    goto LABEL_27;
  }
  DeviceN = CGColorSpaceCreateDeviceN(v3, (uint64_t)v5, v9, v14, 0, v11, v12, v13);
  CGColorSpaceRelease(v9);
  if (v14)
    CFRelease(v14);
  free(v5);
  return DeviceN;
}

CGColorSpaceRef create_Indexed(CGPDFArrayRef array)
{
  uint64_t colorspace;
  CGColorSpace *v3;
  CGPDFInteger v4;
  const __CFData *v5;
  const __CFData *v6;
  CGColorSpaceRef Indexed;
  CGPDFStringRef v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t Length;
  uint64_t v15;
  CGPDFInteger v16;
  uint64_t v17;
  unint64_t v18;
  void *v20;
  void *v21;
  const UInt8 *v22;
  size_t v23;
  CGPDFInteger v24;
  CGPDFStringRef v25;
  const unsigned __int8 *v26;
  const unsigned __int8 *BytePtr;
  CGPDFInteger v28;
  CGPDFStringRef v29;
  CGPDFStreamRef stream;
  CGPDFObjectRef value;
  CGPDFDataFormat format;

  if (array && *((_QWORD *)array + 2) == 4)
  {
    stream = 0;
    value = 0;
    v28 = 0;
    v29 = 0;
    if (CGPDFArrayGetObject(array, 1uLL, &value))
    {
      colorspace = cg_create_colorspace(value);
      if (colorspace)
      {
        v3 = (CGColorSpace *)colorspace;
        if (CGPDFArrayGetInteger(array, 2uLL, &v28))
        {
          if (v28 < 0)
          {
          }
          else
          {
            if (CGPDFArrayGetStream(array, 3uLL, &stream))
            {
              v4 = v28;
              format = CGPDFDataFormatRaw;
              v5 = CGPDFStreamCopyData(stream, &format);
              if (v5)
              {
                v6 = v5;
                if (format)
                  goto LABEL_10;
                v12 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 40);
                v13 = v12 * (v4 + 1);
                Length = CFDataGetLength(v5);
                if ((v12 | (v4 + 1)) >> 32)
                {
                  v15 = v4 >> 63;
                  v16 = v4 + 1;
                  if (v4 == -1)
                    ++v15;
                  v17 = (__PAIR128__(v15, v16) * v12) >> 64;
                  v18 = v16 * v12;
                  if (v17 || v13 < v18)
                  {
LABEL_10:
                    Indexed = 0;
LABEL_11:
                    CFRelease(v6);
LABEL_47:
                    CGColorSpaceRelease(v3);
                    return Indexed;
                  }
                }
                if (Length >= v13)
                {
                  BytePtr = CFDataGetBytePtr(v6);
                  Indexed = CGColorSpaceCreateIndexed(v3, v4, BytePtr);
                  goto LABEL_11;
                }
                v20 = malloc_type_calloc(1uLL, v12 * (v4 + 1), 0x6614BB8AuLL);
                if (v20)
                {
                  v21 = v20;
                  v22 = CFDataGetBytePtr(v6);
                  v23 = CFDataGetLength(v6);
                  memmove(v21, v22, v23);
                  Indexed = CGColorSpaceCreateIndexed(v3, v4, (const unsigned __int8 *)v21);
                  free(v21);
                  goto LABEL_11;
                }
              }
              Indexed = 0;
              goto LABEL_47;
            }
            if (CGPDFArrayGetString(array, 3uLL, &v29))
            {
              v9 = v29;
              v10 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 40) + *(_QWORD *)(*((_QWORD *)v3 + 3) + 40) * v28;
              if (v29)
              {
                if (*((_QWORD *)v29 + 3))
                  decrypt_string((uint64_t)v29);
                v11 = *((_QWORD *)v9 + 9);
              }
              else
              {
                v11 = 0;
              }
              if (v11 >= v10)
              {
                v24 = v28;
                v25 = v29;
                if (v29)
                {
                  if (*((_QWORD *)v29 + 3))
                    decrypt_string((uint64_t)v29);
                  v26 = (const unsigned __int8 *)v25 + 80;
                }
                else
                {
                  v26 = 0;
                }
                Indexed = CGColorSpaceCreateIndexed(v3, v24, v26);
                goto LABEL_47;
              }
            }
            else
            {
            }
          }
        }
        else
        {
        }
        CGColorSpaceRelease(v3);
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

CGColorSpaceRef create_Pattern(CGPDFArray *a1)
{
  uint64_t v1;
  CGColorSpaceRef Pattern;
  CGColorSpace *colorspace;
  CGColorSpace *v5;
  CGPDFObjectRef value;

  if (!a1)
  {
LABEL_5:
    return 0;
  }
  v1 = *((_QWORD *)a1 + 2);
  if (v1 != 2)
  {
    if (v1 == 1)
      return CGColorSpaceCreatePattern(0);
    goto LABEL_5;
  }
  value = 0;
  CGPDFArrayGetObject(a1, 1uLL, &value);
  colorspace = (CGColorSpace *)cg_create_colorspace(value);
  if (colorspace)
  {
    v5 = colorspace;
    Pattern = CGColorSpaceCreatePattern(colorspace);
    CGColorSpaceRelease(v5);
    return Pattern;
  }
  return 0;
}

void cg_build_colorspace_destroy(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t compare_names_14355(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(*(_QWORD *)a1 + 32), *(const char **)(*(_QWORD *)a2 + 32));
}

void CGPDFDictionaryFinalize(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;

  CGPDFAssociationRelease(*(const void ***)(a1 + 48));
  v2 = *(_DWORD **)(a1 + 56);
  if (v2)
  {
    do
    {
      v3 = *(_DWORD **)v2;
      if ((v2[2] - 5) <= 4)
        pdf_object_release_compound_value((uint64_t)v2);
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 72));
  free(*(void **)(a1 + 64));
}

CFTypeRef CGPDFDictionaryRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGPDFDictionaryRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

size_t CGPDFDictionaryGetCount(size_t dict)
{
  if (dict)
    return *(_QWORD *)(dict + 16);
  return dict;
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  _BOOL4 Object;
  int v5;
  CGPDFObjectRef valuea;

  if (value)
    *value = 0;
  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 6;
      if (v5 == 6 && value != 0)
      {
        *value = (CGPDFStringRef)*((_QWORD *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  _BOOL4 Object;
  int v5;
  CGPDFObjectRef valuea;

  if (value)
    *value = 0;
  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 9;
      if (v5 == 9 && value != 0)
      {
        *value = (CGPDFStreamRef)*((_QWORD *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

double CGPDFDictionaryGetMatrix(CGPDFDictionary *a1, const char *a2, _OWORD *a3)
{
  _BOOL4 Numbers;
  double result;
  __int128 v6;
  _OWORD v7[2];
  double v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Numbers = CGPDFDictionaryGetNumbers(a1, a2, (uint64_t)v7, (CGPDFArray *)6);
  if (a3)
  {
    if (Numbers)
    {
      v6 = v7[1];
      *a3 = v7[0];
      a3[1] = v6;
      result = v8[0];
      a3[2] = *(_OWORD *)v8;
    }
  }
  return result;
}

BOOL CGPDFDictionaryGetBooleans(CGPDFDictionary *a1, const char *a2, uint64_t a3, CGPDFArray *a4)
{
  _BOOL4 v6;
  _BOOL8 result;
  CGPDFArrayRef v8;
  size_t v9;
  CGPDFArrayRef array;
  CGPDFBoolean value;

  value = 0;
  array = 0;
  v6 = CGPDFDictionaryGetArray(a1, a2, &array);
  result = 0;
  if (v6)
  {
    v8 = array;
    if (array)
      v8 = (CGPDFArrayRef)*((_QWORD *)array + 2);
    if (v8 == a4)
    {
      if (a4)
      {
        v9 = 0;
        do
        {
          result = CGPDFArrayGetBoolean(array, v9, &value);
          if (!result)
            break;
          *(_BYTE *)(a3 + v9++) = value;
        }
        while (a4 != (CGPDFArray *)v9);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CGPDFDictionaryGetIntegers(CGPDFDictionary *a1, const char *a2, uint64_t a3, CGPDFArray *a4)
{
  _BOOL8 result;
  CGPDFArrayRef v7;
  size_t v8;
  CGPDFArrayRef array;
  CGPDFInteger value;

  array = 0;
  value = 0;
  result = CGPDFDictionaryGetArray(a1, a2, &array);
  if (result)
  {
    v7 = array;
    if (array)
      v7 = (CGPDFArrayRef)*((_QWORD *)array + 2);
    if (v7 == a4)
    {
      if (a4)
      {
        v8 = 0;
        do
        {
          result = CGPDFArrayGetInteger(array, v8, &value);
          if (!result)
            break;
          *(_QWORD *)(a3 + 8 * v8++) = value;
        }
        while (a4 != (CGPDFArray *)v8);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDictionaryGetObjectReference(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

void CGPDFDictionaryApplyFunction(CGPDFDictionaryRef dict, CGPDFDictionaryApplierFunction function, void *info)
{
  uint64_t ****i;
  uint64_t *v6;
  uint64_t ***v7;

  if (dict)
  {
    if (function)
    {
      for (i = (uint64_t ****)*((_QWORD *)dict + 7); i; i = (uint64_t ****)**i)
      {
        if (*((_DWORD *)i + 2) == 5)
        {
          v6 = (uint64_t *)i[4];
          v7 = *i;
          if (*i)
          {
            if (*((_DWORD *)v7 + 2) == 10)
              pdf_xref_resolve(*((_QWORD *)dict + 3), (unint64_t)v7[2], (uint64_t)v7[3]);
          }
          ((void (*)(uint64_t *))function)(v6);
        }
      }
    }
  }
}

uint64_t CGPDFDictionaryApplyFunctionRaw(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD, uint64_t), uint64_t a3)
{
  _QWORD *i;

  if (result)
  {
    if (a2)
    {
      for (i = *(_QWORD **)(result + 56); i; i = *(_QWORD **)*i)
      {
        if (*((_DWORD *)i + 2) == 5)
          result = a2(i[4], *i, a3);
      }
    }
  }
  return result;
}

uint64_t CGPDFDictionarySetAssociation(uint64_t result, const void *a2, const char *a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  const void **v7;
  _QWORD *v8;
  uint64_t Object;

  if (result)
  {
    v5 = result;
    v6 = (pthread_mutex_t *)(result + 72);
    pthread_mutex_lock((pthread_mutex_t *)(result + 72));
    v7 = *(const void ***)(v5 + 48);
    if (v7)
    {
      *(_QWORD *)(v5 + 48) = 0;
      CGPDFAssociationRelease(v7);
    }
    v8 = CGPDFAssociationCreate(a2, (uint64_t)a3);
    *(_QWORD *)(v5 + 48) = v8;
    Object = CGPDFAssociationGetObject((uint64_t)v8, a3);
    pthread_mutex_unlock(v6);
    return Object;
  }
  return result;
}

const void *CGPDFDictionaryCopyAssociation(uint64_t a1, const char *a2)
{
  pthread_mutex_t *v4;
  const void *Object;
  const void *v6;

  if (!a1)
    return 0;
  v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  Object = (const void *)CGPDFAssociationGetObject(*(_QWORD *)(a1 + 48), a2);
  v6 = Object;
  if (Object)
    CFRetain(Object);
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t CGPDFDictionaryRemoveAssociation(uint64_t result)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  const void **v3;

  if (result)
  {
    v1 = result;
    v2 = (pthread_mutex_t *)(result + 72);
    pthread_mutex_lock((pthread_mutex_t *)(result + 72));
    v3 = *(const void ***)(v1 + 48);
    if (v3)
    {
      *(_QWORD *)(v1 + 48) = 0;
      CGPDFAssociationRelease(v3);
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

uint64_t CGPDFDictionaryPrint(uint64_t a1, FILE *a2)
{
  return CGPDFDictionaryPrintWithIndent(a1, a2, 0);
}

uint64_t CGPDFDictionaryPrintWithIndent(uint64_t result, FILE *a2, int a3)
{
  uint64_t v4;
  FILE *v5;
  uint64_t *i;

  if (result)
  {
    v4 = result;
    if (a2)
      v5 = a2;
    else
      v5 = (FILE *)*MEMORY[0x1E0C80C10];
    fwrite("<<\n", 3uLL, 1uLL, v5);
    for (i = *(uint64_t **)(v4 + 56); i; i = *(uint64_t **)*i)
    {
      fprintf(v5, "%*s", a3 + 2, "");
      CGPDFObjectPrintWithIndent((uint64_t)i, v5, 0);
      fputc(32, v5);
      CGPDFObjectPrintWithIndent(*i, v5, (a3 + 2));
      fputc(10, v5);
    }
    return fprintf(v5, "%*s>>", a3, "");
  }
  return result;
}

uint64_t CGColorConverterGetTypeID()
{
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  return kCGColorConverterRuntimeID;
}

CGColorConversionInfoRef CGColorConverterCreate(const __CFDictionary *a1, CGColorSpace *a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CGColorConversionInfoCreateFromListWithArguments(a1, a2, a3, a4, &a9);
}

CGColorConversionInfoRef CGColorConverterCreateSimple(CGColorSpaceRef a1, uint64_t a2)
{
  return CGColorConversionInfoCreateFromList(0, a1, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a2, 1, 0, 0);
}

void CGColorConverterRelease(const void *a1)
{
  CFTypeID v2;

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
    if (v2 == kCGColorConverterRuntimeID)
      CFRelease(a1);
  }
}

CFTypeRef CGColorConverterRetain(const void *a1)
{
  CFTypeID v2;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v2 == kCGColorConverterRuntimeID)
    return CFRetain(a1);
  else
    return 0;
}

uint64_t getMaxLevel(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;

  if (a1)
  {
    v4 = *(_DWORD *)(a2 + 8);
    if (*a4 < v4)
      *a4 = v4;
  }
  return 1;
}

BOOL isAtWidthMultiple(double *a1, double *a2)
{
  double v2;

  v2 = a2[1];
  return vabdd_f64(a1[2], v2) <= a2[3] && fabs(*a1 - *a2 - rint((*a1 - *a2) / v2) * v2) <= a2[2];
}

uint64_t sameStyle(uint64_t a1, uint64_t a2)
{
  return CPPDFStyleEqual(*(_QWORD *)a2, *(_QWORD *)(a1 + 160), *(_WORD *)(a2 + 8));
}

uint64_t maxInsertionOrder(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 68);
  if (v2 > *a2)
    *a2 = v2;
  return 1;
}

uint64_t CGBlitInternal::CGApplyGainMapHeadRoom<(CGBlitVariant)0>(uint64_t result, uint64_t *a2, double a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  double v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int v26;
  int8x16_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float16x4_t *v34;
  float16x4_t *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  float32x4_t v40;
  float16x8_t v41;
  unint64_t v43;
  float16x4_t *v44;
  unsigned __int8 *v45;
  float16x4_t *v46;
  unsigned int v47;
  unsigned int v48;
  float32x4_t v50;
  float16x8_t v51;
  unsigned int v52;
  float32x4_t v54;
  float16x4_t v55;

  v4 = *(_QWORD *)(result + 8);
  if (v4 >= 2 * a2[1])
    v4 = 2 * a2[1];
  if (v4 >= 2)
  {
    v5 = 0;
    v6.i32[1] = 1081073664;
    v7 = (a3 - a4) / 255.0;
    *(float *)&v7 = v7;
    v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0);
    v8.i32[3] = 0;
    *(float *)v6.i32 = a4;
    v9 = (float32x4_t)vdupq_lane_s32(v6, 0);
    v9.i32[3] = 1.0;
    v10 = *a2;
    v11 = *(_QWORD *)result;
    v13 = *(_QWORD *)(result + 16);
    v12 = *(_QWORD *)(result + 24);
    v14 = a2[3];
    if (v13 >= 2 * a2[2])
      v13 = 2 * a2[2];
    v15 = v13 >> 1;
    v16 = v13 - 1;
    v17 = 2;
    result = 16;
    do
    {
      v18 = 0;
      v19 = v5 | 1;
      v5 = v17;
      if (v19 >= v4)
        v20 = 0;
      else
        v20 = v12;
      v21 = v20 + v11;
      if (v13 >= 0x20)
      {
        v22 = 0;
        v23 = v10;
        v24 = 16;
        do
        {
          v18 = v24;
          v25 = vceqzq_s8(*(int8x16_t *)(v10 + v22));
          v26 = vminvq_u8((uint8x16_t)v25) & 0x80;
          if (a4 != 1.0 || v26 == 0)
          {
            v28 = vbicq_s8((int8x16_t)xmmword_185004FC0, v25);
            v29 = vaddv_s8((int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
            v28.i8[0] = vaddv_s8(*(int8x8_t *)v28.i8);
            v30 = v28.i32[0] & 0xFFFF00FF | (v29 << 8);
            v31 = __clz(__rbit32(v30));
            v32 = __clz(v30) - 16;
            if (16 - v32 > v31)
            {
              v33 = v31 + v32 - 16;
              v34 = (float16x4_t *)(v21 + 16 * (v22 + v31));
              v35 = (float16x4_t *)(v11 + 16 * (v22 + v31));
              v36 = (unsigned __int8 *)(v23 + v31);
              do
              {
                v38 = *v36++;
                v37 = v38;
                if (a4 != 1.0 || v37 != 0)
                {
                  v40 = vmlaq_n_f32(v9, v8, (float)v37);
                  v41 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v40, vcvtq_f32_f16(*v34))), vmulq_f32(v40, vcvt_hight_f32_f16(*(float16x8_t *)v34->i8)));
                  *(float16x8_t *)v35->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v40, vcvtq_f32_f16(*v35))), vmulq_f32(v40, vcvt_hight_f32_f16(*(float16x8_t *)v35->i8)));
                  *(float16x8_t *)v34->i8 = v41;
                }
                v34 += 2;
                v35 += 2;
              }
              while (!__CFADD__(v33++, 1));
            }
          }
          v24 = v18 + 16;
          v22 += 16;
          v23 += 16;
        }
        while (v18 + 16 <= v15);
      }
      v43 = v15 - v18;
      if (v15 > v18)
      {
        v44 = (float16x4_t *)(v21 + 16 * v18);
        v45 = (unsigned __int8 *)(v10 + v18);
        v46 = (float16x4_t *)(v11 + 16 * v18);
        do
        {
          v48 = *v45++;
          v47 = v48;
          if (a4 != 1.0 || v47 != 0)
          {
            v50 = vmlaq_n_f32(v9, v8, (float)v47);
            v51 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v50, vcvtq_f32_f16(*v44))), vmulq_f32(v50, vcvt_hight_f32_f16(*(float16x8_t *)v44->i8)));
            *(float16x8_t *)v46->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v50, vcvtq_f32_f16(*v46))), vmulq_f32(v50, vcvt_hight_f32_f16(*(float16x8_t *)v46->i8)));
            *(float16x8_t *)v44->i8 = v51;
          }
          v44 += 2;
          v46 += 2;
          --v43;
        }
        while (v43);
      }
      if ((v13 & 1) != 0)
      {
        v52 = *(unsigned __int8 *)(v10 + v16);
        if (a4 == 1.0 && v52 == 0)
          goto LABEL_42;
        v54 = vmlaq_n_f32(v9, v8, (float)v52);
        v55 = vcvt_f16_f32(vmulq_f32(v54, vcvtq_f32_f16(*(float16x4_t *)(v21 + 8 * v16))));
        *(float16x4_t *)(v11 + 8 * v16) = vcvt_f16_f32(vmulq_f32(v54, vcvtq_f32_f16(*(float16x4_t *)(v11 + 8 * v16))));
        *(float16x4_t *)(v21 + 8 * v16) = v55;
      }
      v11 += 2 * v12;
      v10 += v14;
LABEL_42:
      v17 = v5 + 2;
    }
    while (v5 + 2 <= v4);
  }
  return result;
}

uint64_t CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>(uint64_t a1, const void *a2, float *a3)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  int8x8_t v7;
  unsigned int v9;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int8x16_t v18;
  int8x16_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  __int128 v29;
  __int128 v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int8x16_t v45;
  _OWORD v46[2];
  int8x16_t v47;
  int8x16_t __dst;

  v3 = *(_DWORD *)(a1 + 320);
  v4 = v3 & 0x1F;
  if ((v3 & 0x1F) != 0)
    v5 = *(unsigned __int8 *)(a1 + 326) + 1;
  else
    v5 = *(unsigned __int8 *)(a1 + 326);
  if (!v5 || !*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 24))
    return 1;
  v7 = vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v5 > 4 || v7.u32[0] > 1uLL)
    return 0;
  v9 = *(unsigned __int8 *)(a1 + 324);
  if (v9 < 8)
    return 0;
  result = 0;
  if (v9 > 0x80)
    return result;
  v7.i32[0] = v9;
  if (vaddlv_u8((uint8x8_t)vcnt_s8(v7)) > 1u)
    return result;
  v12 = 0;
  v13 = 0;
  v14 = v3 & 0x7000;
  do
  {
    v15 = 1 << v12;
    if (a3[v12] >= INFINITY)
      v15 = 0;
    v13 |= v15;
    ++v12;
  }
  while (v5 != v12);
  if (v14 == 0x4000 || v14 == 12288)
    v14 = 0;
  if (!v13)
    return 1;
  v17 = *(unsigned __int8 *)(a1 + 325);
  v18 = (int8x16_t)xmmword_185004BD0;
  if (v4 <= 6 && ((1 << v4) & 0x54) != 0)
    v18 = (int8x16_t)xmmword_185004FD0;
  if (v17 == 16)
  {
    if ((v3 & 0x100) != 0)
      v20 = 2;
    else
      v20 = 1;
    if (v14 == 4096)
      goto LABEL_42;
    if (v14 == 0x2000)
    {
      v21.i64[0] = 0x404040404040404;
      v21.i64[1] = 0x404040404040404;
      v18 = veorq_s8(v18, v21);
      goto LABEL_42;
    }
    return 0;
  }
  if (v17 != 8)
    return 0;
  if (v14 == 4096)
  {
    v19.i64[0] = 0x404040404040404;
    v19.i64[1] = 0x404040404040404;
  }
  else
  {
    if (v14 != 0x2000)
      goto LABEL_41;
    v19.i64[0] = 0xC0C0C0C0C0C0C0CLL;
    v19.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  }
  v18 = veorq_s8(v18, v19);
LABEL_41:
  v20 = 0;
  result = 0;
  if ((v3 & 0x100) != 0)
    return result;
LABEL_42:
  v45 = v18;
  v47 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
  __dst = v47;
  memcpy(&__dst, a2, 4 * v5);
  memcpy(&v47, a3, 4 * v5);
  *(double *)&v29 = CGBlitInternal::cgsBufferIsConstantValue_internal::CalculateLimits(v20, v5, (float32x4_t)vqtbl1q_s8(__dst, v45), (float32x4_t)vqtbl1q_s8(v47, v45), *(double *)v45.i64, v28, v22, v23, v24, v25, v26, v27);
  v46[0] = v29;
  v46[1] = v30;
  v31 = CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>(CGBuf const*,float const*,float const*)::kRowFuncs[v20];
  if (*(_QWORD *)a1)
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  else
    v32 = 0;
  v34 = *(_QWORD *)(a1 + 32);
  v33 = *(_QWORD *)(a1 + 40);
  v35 = (*(_QWORD *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 324) + 7) >> 3;
  result = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(v32, v35, v46);
  if ((_DWORD)result)
  {
    v39 = v34 - 1;
    if (v34 == 1)
      return 1;
    if (!*(_QWORD *)a1)
      goto LABEL_63;
    v40 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if (!v40)
      goto LABEL_63;
    result = ((uint64_t (*)(unint64_t, unint64_t, _OWORD *))v31)(v40 + v33 * v39, v35, v46);
    if (!(_DWORD)result)
      return result;
    if (!*(_QWORD *)a1 || (v41 = *(_QWORD *)(*(_QWORD *)a1 + 32)) == 0)
LABEL_63:
      _CGHandleAssert("AdvancePtr", 22, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "where != NULL", "AdvancePtr called on NULL", v36, v37, v38, v45.i8[0]);
    if (v39 < 2)
      return 1;
    result = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(v33 + v41, v35, v46);
    if ((_DWORD)result)
    {
      v42 = 3;
      while (1)
      {
        if (-v33 == v41)
          goto LABEL_63;
        if (v34 == v42)
          break;
        v43 = ((uint64_t (*)(uint64_t, unint64_t, _OWORD *))v31)(2 * v33 + v41, v35, v46);
        v41 += v33;
        ++v42;
        if (!v43)
        {
          v44 = v42 - 2;
          return v44 >= v39;
        }
      }
      v44 = v34 - 1;
      return v44 >= v39;
    }
  }
  return result;
}

double CGBlitInternal::cgsBufferIsConstantValue_internal::CalculateLimits(unsigned int a1, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int16x8_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  LODWORD(a6) = dword_185005240[a1];
  v12 = (int8x16_t)vmulq_n_f32(vaddq_f32(a3, a4), *(float *)&a6);
  v13 = vmulq_n_f32(vsubq_f32(a3, a4), *(float *)&a6);
  if (a1 <= 1)
  {
    v14 = (int8x16_t)vrndmq_f32((float32x4_t)v12);
    v12 = (int8x16_t)vmaxnmq_f32(vminnmq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vrndpq_f32(v13), (float32x4_t)v14), (int8x16_t)vrndxq_f32(vmulq_n_f32(a3, *(float *)&a6)), v14), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0)), (float32x4_t)0);
  }
  if (a1 - 2 < 2)
  {
    v16 = 4;
  }
  else if (a1 == 1)
  {
    *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)vcvtq_u32_f32((float32x4_t)v12));
    v16 = 2;
  }
  else if (a1)
  {
    v16 = 0;
    v12 = 0uLL;
  }
  else
  {
    v15 = (int16x8_t)vcvtq_s32_f32((float32x4_t)v12);
    *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)v15);
    v12 = (int8x16_t)vmovn_s16(v15).u32[0];
    v16 = 1;
  }
  v17 = v16 * a2;
  if ((v17 & (v17 - 1)) != 0)
    _CGHandleAssert("CalculateLimits", 126, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "0 == (arithmeticSizeBytes & (arithmeticSizeBytes-1))", "arithmetic size (%lu) is not a power of two", a10, a11, a12, v17);
  *(_QWORD *)&result = vqtbl1q_s8(v12, vandq_s8(vdupq_n_s8((int)v17 - 1), (int8x16_t)xmmword_185004BD0)).u64[0];
  return result;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<unsigned char>(uint8x16_t *a1, unint64_t a2, uint8x16_t *a3, uint8x16_t a4, double a5, uint8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint64_t v20;
  unsigned __int32 v21;
  uint16x4_t v22;
  int8x8_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  unsigned int v26;
  int v28;
  int8x8_t v30;
  int8x8_t v31;
  uint32x2_t v32;
  int8x8_t v33;

  if (a2 >= 0x40)
  {
    v11 = *a3;
    a6 = a3[1];
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v17 = a1[2];
      v16 = a1[3];
      v18 = *a1;
      v19 = a1[1];
      a1 += 4;
      v13 = vorrq_s8(v13, vorrq_s8((int8x16_t)vcgtq_u8(a6, v19), (int8x16_t)vcgtq_u8(v19, v11)));
      v12 = vorrq_s8(v12, vorrq_s8((int8x16_t)vcgtq_u8(a6, v18), (int8x16_t)vcgtq_u8(v18, v11)));
      v14 = vorrq_s8(v14, vorrq_s8((int8x16_t)vcgtq_u8(a6, v17), (int8x16_t)vcgtq_u8(v17, v11)));
      v15 = vorrq_s8(v15, vorrq_s8((int8x16_t)vcgtq_u8(a6, v16), (int8x16_t)vcgtq_u8(v16, v11)));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v12, v14), vorrq_s8(v13, v15));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
  }
  if (!a2)
    return 1;
  if (a2 >= 0x20)
  {
    a6 = a1[1];
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8((int8x16_t)vcgtq_u8(*a1, *a3), (int8x16_t)vcgtq_u8(a3[1], *a1)), vorrq_s8((int8x16_t)vcgtq_u8(a6, *a3), (int8x16_t)vcgtq_u8(a3[1], a6)));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 32;
    if (!a2)
      return 1;
    a1 += 2;
  }
  if (a2 >= 0x10)
  {
    a6 = *a1;
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_u8(*a1, *a3), (int8x16_t)vcgtq_u8(a3[1], *a1));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 16;
    if (!a2)
      return 1;
    ++a1;
  }
  if (a2 >= 8)
  {
    a6.i64[0] = a1->i64[0];
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8), (int8x8_t)vcgt_u8(*(uint8x8_t *)a3[1].i8, *(uint8x8_t *)a1->i8));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 8;
    if (!a2)
      return 1;
    a1 = (uint8x16_t *)((char *)a1 + 8);
  }
  if (a2 < 4)
    goto LABEL_21;
  v20 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)a3->i8) & 0xFF00FF00FF00FFLL;
  v21 = a1->i32[0];
  a1 = (uint8x16_t *)((char *)a1 + 4);
  a6.i32[0] = v21;
  v22 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)a6.i8).u64[0];
  v23 = vorr_s8((int8x8_t)vcgt_u16(v22, (uint16x4_t)v20), (int8x8_t)vcgt_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)a3[1].i8, (int8x8_t)v20) & 0xFF00FF00FF00FFLL), v22));
  v23.i8[1] = v23.i8[2];
  v23.i8[2] = v23.i8[4];
  v23.i8[3] = v23.i8[6];
  v23.i8[0] = vmaxvq_u8((uint8x16_t)v23.u32[0]);
  if (v23.i32[0])
    return 0;
  a2 -= 4;
LABEL_21:
  if (!a2)
    return 1;
  if (a2 != 1)
  {
    v24 = *a3;
    v25 = a3[1];
    v30.i32[0] = a3->u8[0];
    v30.i32[1] = HIBYTE(a3->u16[0]);
    v31.i32[0] = v25.u8[0];
    v31.i32[1] = v25.u8[1];
    v32 = (uint32x2_t)vand_s8(v31, (int8x8_t)0xFF000000FFLL);
    v31.i32[0] = a1->u8[0];
    v31.i32[1] = a1->u8[1];
    v33 = vorr_s8((int8x8_t)vcgt_u32((uint32x2_t)v31, (uint32x2_t)vand_s8(v30, (int8x8_t)0xFF000000FFLL)), (int8x8_t)vcgt_u32(v32, (uint32x2_t)v31));
    v32.i8[0] = v33.i8[0];
    v32.i8[1] = v33.i8[4];
    v33.i8[0] = vmaxvq_u8((uint8x16_t)v32.u16[0]);
    if (v33.i32[0])
      return 0;
    if (a2 != 2)
    {
      if (a2 != 3)
        _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a9, a10, a11, a2 - 2);
      a1 = (uint8x16_t *)((char *)a1 + 2);
      goto LABEL_24;
    }
    return 1;
  }
  v24 = *a3;
  v25 = a3[1];
LABEL_24:
  v26 = a1->u8[0];
  v28 = v26 > v24.u8[0] || v26 < v25.u8[0];
  return vmaxvq_u8((uint8x16_t)(v28 << 31 >> 31)) == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<unsigned short>(uint16x8_t *a1, unint64_t a2, uint16x8_t *a3, uint8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint16x8_t v9;
  uint16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  int16x8_t v19;
  uint32x2_t v20;
  uint32x2_t v21;
  uint16x8_t v22;
  unsigned int v24;
  int v26;
  int v27;
  __int32 v28;
  unsigned __int32 v29;
  unsigned __int32 v30;

  if (a2 >= 0x40)
  {
    v9 = *a3;
    v10 = a3[1];
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    do
    {
      v16 = a1[2];
      v15 = a1[3];
      v17 = *a1;
      v18 = a1[1];
      a1 += 4;
      v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_u16(v18, v9)), (int8x16_t)vcgtq_u16(v10, v18));
      v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_u16(v17, v9)), (int8x16_t)vcgtq_u16(v10, v17));
      v13 = vorrq_s8(vorrq_s8(v13, (int8x16_t)vcgtq_u16(v16, v9)), (int8x16_t)vcgtq_u16(v10, v16));
      v14 = vorrq_s8(vorrq_s8(v14, (int8x16_t)vcgtq_u16(v15, v9)), (int8x16_t)vcgtq_u16(v10, v15));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v11, v13), vorrq_s8(v12, v14));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
  }
  if (!a2)
    return 1;
  if (a2 >= 0x20)
  {
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vorr_s8(vmovn_s16((int16x8_t)vcgtq_u16(*a1, *a3)), vmovn_s16((int16x8_t)vcgtq_u16(a3[1], *a1)))), 0xFuLL)), vorrq_s8((int8x16_t)vcgtq_u16(a1[1], *a3), (int8x16_t)vcgtq_u16(a3[1], a1[1])));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 32;
    if (!a2)
      return 1;
    a1 += 2;
  }
  if (a2 < 0x10)
    goto LABEL_14;
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_u16(*a1, *a3), (int8x16_t)vcgtq_u16(a3[1], *a1));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0])
    return 0;
  a2 -= 16;
  if (!a2)
    return 1;
  ++a1;
LABEL_14:
  if (a2 < 8)
    goto LABEL_18;
  *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_u16(*(uint16x4_t *)a3[1].i8, *(uint16x4_t *)a1->i8), (int8x8_t)vcgt_u16(*(uint16x4_t *)a1->i8, *(uint16x4_t *)a3->i8));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0])
    return 0;
  a2 -= 8;
  if (!a2)
    return 1;
  a1 = (uint16x8_t *)((char *)a1 + 8);
LABEL_18:
  if (a2 >= 4)
  {
    v19 = (int16x8_t)vzip1q_s8(*(int8x16_t *)a3, *(int8x16_t *)a3);
    v30 = vmovn_s16(v19).u32[0];
    v19.i32[0] = (unsigned __int16)v30;
    v19.i32[1] = HIWORD(v30);
    v29 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a3[1], (int8x16_t)v19)).u32[0];
    v20.i32[0] = (unsigned __int16)v29;
    v20.i32[1] = HIWORD(v29);
    v21.i32[0] = a1->u16[0];
    v21.i32[1] = a1->u16[1];
    *(int8x8_t *)v19.i8 = vorr_s8((int8x8_t)vcgt_u32(v20, v21), (int8x8_t)vcgt_u32(v21, *(uint32x2_t *)v19.i8));
    HIWORD(v28) = v19.i16[2];
    LOWORD(v28) = v19.i16[0];
    v19.i32[0] = v28;
    v22 = vmovl_u8(*(uint8x8_t *)v19.i8);
    v22.i8[1] = v22.i8[2];
    v22.i8[2] = v22.i8[4];
    v22.i8[3] = v22.i8[6];
    v22.i8[0] = vmaxvq_u8((uint8x16_t)v22.u32[0]);
    if (v22.i32[0])
      return 0;
    a1 = (uint16x8_t *)((char *)a1 + 4);
    a2 -= 4;
  }
  if (!a2)
    return 1;
  if (a2 != 2)
    _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a7, a8, a9, a2);
  v24 = a1->u16[0];
  v26 = v24 < (unsigned __int16)a3[1].i64[0] || v24 > (unsigned __int16)a3->i64[0];
  v27 = v26 << 31 >> 31;
  LOBYTE(v27) = vmaxvq_u8((uint8x16_t)(unsigned __int16)((__int16)((_WORD)v26 << 15) >> 15));
  return v27 == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<half>(float16x8_t *a1, unint64_t a2, float32x4_t *a3, uint8x16_t a4, double a5, int32x4_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  unsigned __int32 v45;
  float32x2_t v46;
  int v54;
  unsigned int v55;

  if (a2 >= 0x40)
  {
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = *a3;
    v14 = a3[1];
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    do
    {
      v21 = a1[2];
      v22 = a1[3];
      v23 = vcvt_hight_f32_f16(v22);
      v24 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
      v25 = vcvt_hight_f32_f16(v21);
      v26 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
      v28 = *a1;
      v27 = a1[1];
      a1 += 4;
      v29 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
      v30 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
      v31 = vcvt_hight_f32_f16(v27);
      v32 = vcvt_hight_f32_f16(v28);
      v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_f32(v32, v13)), (int8x16_t)vcgtq_f32(v14, v32));
      v16 = vorrq_s8(vorrq_s8(v16, (int8x16_t)vcgtq_f32(v31, v13)), (int8x16_t)vcgtq_f32(v14, v31));
      v15 = vorrq_s8(vorrq_s8(v15, (int8x16_t)vcgtq_f32(v30, v13)), (int8x16_t)vcgtq_f32(v14, v30));
      v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_f32(v29, v13)), (int8x16_t)vcgtq_f32(v14, v29));
      v17 = vorrq_s8(vorrq_s8(v17, (int8x16_t)vcgtq_f32(v26, v13)), (int8x16_t)vcgtq_f32(v14, v26));
      v18 = vorrq_s8(vorrq_s8(v18, (int8x16_t)vcgtq_f32(v25, v13)), (int8x16_t)vcgtq_f32(v14, v25));
      v19 = vorrq_s8(vorrq_s8(v19, (int8x16_t)vcgtq_f32(v24, v13)), (int8x16_t)vcgtq_f32(v14, v24));
      a2 -= 64;
      v20 = vorrq_s8(vorrq_s8(v20, (int8x16_t)vcgtq_f32(v23, v13)), (int8x16_t)vcgtq_f32(v14, v23));
    }
    while (a2 > 0x3F);
    a6 = (int32x4_t)vorrq_s8(vorrq_s8(v11, v17), vorrq_s8(v15, v19));
    a4 = (uint8x16_t)vorrq_s8((int8x16_t)a6, vorrq_s8(vorrq_s8(v12, v18), vorrq_s8(v16, v20)));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
  }
  if (!a2)
    return 1;
  if (a2 >= 0x20)
  {
    v33 = a3[1];
    v34 = a1[1];
    v35 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    v36 = vcvt_hight_f32_f16(v34);
    v37 = vcvtq_f32_f16(*(float16x4_t *)a1->i8);
    a6 = (int32x4_t)vcvt_hight_f32_f16(*a1);
    v38 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v37, *a3), (int16x8_t)vcgtq_f32((float32x4_t)a6, *a3)));
    *(int8x8_t *)a6.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v33, v37), (int16x8_t)vcgtq_f32(v33, (float32x4_t)a6)));
    v39 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v35, *a3), (int16x8_t)vcgtq_f32(v36, *a3))), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v33, v35), (int16x8_t)vcgtq_f32(v33, v36))));
    *(int8x8_t *)v33.f32 = vzip1_s8(v39, v39);
    *(int8x8_t *)a6.i8 = vorr_s8(v38, *(int8x8_t *)a6.i8);
    *(int8x8_t *)v36.f32 = vzip1_s8(*(int8x8_t *)a6.i8, v39);
    v40 = vzip2_s8(v39, v39);
    *(int8x8_t *)a6.i8 = vzip2_s8(*(int8x8_t *)a6.i8, v40);
    a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v33.f32), vorr_s8(*(int8x8_t *)a6.i8, v40))), 0x1FuLL));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 32;
    if (!a2)
      return 1;
    a1 += 2;
  }
  if (a2 < 0x10)
    goto LABEL_14;
  v41 = a3[1];
  v42 = vcvtq_f32_f16(*(float16x4_t *)a1->i8);
  v43 = vcvt_hight_f32_f16(*a1);
  v44 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v42, *a3), (int16x8_t)vcgtq_f32(v43, *a3));
  a6 = vcgtq_f32(v41, v43);
  *(int8x8_t *)v44.i8 = vmovn_s16((int16x8_t)vorrq_s8(v44, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v41, v42), (int16x8_t)a6)));
  a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v44.i8), vzip2_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v44.i8))), 0x1FuLL));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0])
    return 0;
  a2 -= 16;
  if (!a2)
    return 1;
  ++a1;
LABEL_14:
  if (a2 < 8)
    goto LABEL_18;
  a6 = (int32x4_t)vcvtq_f32_f16(*(float16x4_t *)a1->i8);
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_f32((float32x4_t)a6, *a3), (int8x16_t)vcgtq_f32(a3[1], (float32x4_t)a6));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0])
    return 0;
  a2 -= 8;
  if (!a2)
    return 1;
  a1 = (float16x8_t *)((char *)a1 + 8);
LABEL_18:
  if (a2 >= 4)
  {
    v45 = a1->i32[0];
    a1 = (float16x8_t *)((char *)a1 + 4);
    a6.i32[0] = v45;
    v46 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)a6.i8).u64[0];
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_f32(v46, *(float32x2_t *)a3->f32), (int8x8_t)vcgt_f32(*(float32x2_t *)a3[1].f32, v46));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 4;
  }
  if (!a2)
    return 1;
  if (a2 != 2)
    _CGHandleAssert("operator()", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == 2", "size = %lu", a9, a10, a11, a2);
  _H2 = a1->i16[0];
  __asm { FCVT            S2, H2 }
  v54 = COERCE_FLOAT(a3->i64[0]) < _S2;
  if (COERCE_FLOAT(a3[1].i64[0]) > _S2)
    v54 = 1;
  v55 = v54 << 31 >> 31;
  LOBYTE(v55) = vmaxvq_u8((uint8x16_t)v55);
  return v55 == 0;
}

BOOL CGBlitInternal::cgsBufferIsConstantValue_internal::TestLimitsRow<float>(float32x4_t *a1, unint64_t a2, float32x4_t *a3, uint8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x2_t v20;
  int v22;
  unsigned int v23;

  if (a2 >= 0x40)
  {
    v9 = *a3;
    v10 = a3[1];
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    do
    {
      v16 = a1[2];
      v15 = a1[3];
      v17 = *a1;
      v18 = a1[1];
      a1 += 4;
      v12 = vorrq_s8(vorrq_s8(v12, (int8x16_t)vcgtq_f32(v18, v9)), (int8x16_t)vcgtq_f32(v10, v18));
      v11 = vorrq_s8(vorrq_s8(v11, (int8x16_t)vcgtq_f32(v17, v9)), (int8x16_t)vcgtq_f32(v10, v17));
      v13 = vorrq_s8(vorrq_s8(v13, (int8x16_t)vcgtq_f32(v16, v9)), (int8x16_t)vcgtq_f32(v10, v16));
      v14 = vorrq_s8(vorrq_s8(v14, (int8x16_t)vcgtq_f32(v15, v9)), (int8x16_t)vcgtq_f32(v10, v15));
      a2 -= 64;
    }
    while (a2 > 0x3F);
    a4 = (uint8x16_t)vorrq_s8(vorrq_s8(v11, v13), vorrq_s8(v12, v14));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
  }
  if (!a2)
    return 1;
  if (a2 >= 0x20)
  {
    v19 = vmovn_s16((int16x8_t)vorrq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*a1, *a3), (int16x8_t)vcgtq_f32(a1[1], *a3)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(a3[1], *a1), (int16x8_t)vcgtq_f32(a3[1], a1[1]))));
    a4 = (uint8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v19, v19), vzip2_s8(v19, v19))), 0x1FuLL));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 32;
    if (!a2)
      return 1;
    a1 += 2;
  }
  if (a2 < 0x10)
    goto LABEL_14;
  a4 = (uint8x16_t)vorrq_s8((int8x16_t)vcgtq_f32(*a1, *a3), (int8x16_t)vcgtq_f32(a3[1], *a1));
  a4.i8[0] = vmaxvq_u8(a4);
  if (a4.i32[0])
    return 0;
  a2 -= 16;
  if (!a2)
    return 1;
  ++a1;
LABEL_14:
  if (a2 >= 8)
  {
    v20 = *(float32x2_t *)a1->f32;
    a1 = (float32x4_t *)((char *)a1 + 8);
    *(int8x8_t *)a4.i8 = vorr_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3[1].f32, v20), (int8x8_t)vcgt_f32(v20, *(float32x2_t *)a3->f32));
    a4.i8[0] = vmaxvq_u8(a4);
    if (a4.i32[0])
      return 0;
    a2 -= 8;
  }
  if (!a2)
    return 1;
  if (a2 != 4)
    _CGHandleAssert("operator()", 308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/Functions/CGBufferIsConstantValue.h", "size == vectorSize", "size %lu did not match vectorSize (%lu)", a7, a8, a9, a2);
  v22 = a1->f32[0] < COERCE_FLOAT(a3[1].i64[0]);
  if (a1->f32[0] > COERCE_FLOAT(a3->i64[0]))
    v22 = 1;
  v23 = v22 << 31 >> 31;
  LOBYTE(v23) = vmaxvq_u8((uint8x16_t)v23);
  return v23 == 0;
}

uint64_t (*CGApplyGainMapHeadRoom())(uint64_t result, uint64_t *a2, double a3, double a4)
{
  return CGBlitInternal::CGApplyGainMapHeadRoom<(CGBlitVariant)0>;
}

uint64_t (*CGBufIsConstantValue())(uint64_t a1, const void *a2, float *a3)
{
  return CGBlitInternal::CGBufIsConstantValue<(CGBlitVariant)0>;
}

uint64_t CGStyleCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return create_style_with_type(0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CGStyleCreateShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGStyleCreateShadowWithColor(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t CGStyleCreateFocusRing(uint64_t a1)
{
  CGColorSpace *DeviceRGB;
  CGColorSpace *v3;
  int v4;
  const CGFloat *v5;
  CGColorRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t FocusRingWithColor;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v3 = DeviceRGB;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      CGColorSpaceRelease(DeviceRGB);
      return 0;
    }
    v5 = (const CGFloat *)&unk_184F8F628;
  }
  else
  {
    v5 = (const CGFloat *)&CGStyleCreateFocusRing_focus_ring_color;
  }
  v6 = CGColorCreate(DeviceRGB, v5);
  FocusRingWithColor = CGStyleCreateFocusRingWithColor(a1, v6, v7, v8, v9, v10, v11, v12);
  CGColorSpaceRelease(v3);
  if (v6)
    CFRelease(v6);
  return FocusRingWithColor;
}

uint64_t CGStyleCreateFocusRingWithColor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  int v14;

  if (!a1)
    return 0;
  style_with_type = create_style_with_type(2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(style_with_type + 24) = a2;
  *(_DWORD *)(style_with_type + 32) = 0;
  v11 = *(_DWORD *)(a1 + 4);
  if (v11 > 1 || (*(_DWORD *)(style_with_type + 36) = v11, v12 = *(_DWORD *)(a1 + 8), v12 >= 3))
  {
    CFRelease((CFTypeRef)style_with_type);
    return 0;
  }
  *(_DWORD *)(style_with_type + 40) = v12;
  *(float64x2_t *)(style_with_type + 48) = vmaxnmq_f64(vminnmq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)xmmword_185004FE0), (float64x2_t)0);
  *(double *)(style_with_type + 64) = fmax(fmin(*(double *)(a1 + 32), 1.0), 0.0);
  v13 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(style_with_type + 88) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(style_with_type + 72) = v13;
  v14 = *(_DWORD *)(a1 + 72);
  if (v14 < -1)
    v14 = -1;
  *(_DWORD *)(style_with_type + 104) = v14;
  return style_with_type;
}

void CGStyleRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

double CGStyleCreateGaussianBlur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type;
  double result;

  style_with_type = create_style_with_type(3, a2, a3, a4, a5, a6, a7, a8);
  result = fmax(fmin(*(double *)(a1 + 8), 1.79769313e308), 0.0);
  *(double *)(style_with_type + 40) = result;
  return result;
}

__n128 CGStyleCreateColorMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  style_with_type = create_style_with_type(4, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_OWORD *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(style_with_type + 32) = *(_OWORD *)a1;
  *(_OWORD *)(style_with_type + 48) = v11;
  *(_OWORD *)(style_with_type + 64) = v10;
  v12 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(style_with_type + 112) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(style_with_type + 128) = v12;
  *(_OWORD *)(style_with_type + 80) = v14;
  *(_OWORD *)(style_with_type + 96) = v13;
  v16 = *(_OWORD *)(a1 + 128);
  result = *(__n128 *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(style_with_type + 192) = *(_QWORD *)(a1 + 160);
  *(_OWORD *)(style_with_type + 160) = v16;
  *(__n128 *)(style_with_type + 176) = result;
  *(_OWORD *)(style_with_type + 144) = v17;
  return result;
}

BOOL CGStyleEqualToStyle(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  double v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  double v11;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v5 = *(_DWORD *)(a1 + 20);
    if (v5 == *(_DWORD *)(a2 + 20))
    {
      result = CGColorEqualToColor(*(CGColorRef *)(a1 + 24), *(CGColorRef *)(a2 + 24));
      if (result)
      {
        switch(v5)
        {
          case 1:
            if (*(double *)(a1 + 40) != *(double *)(a2 + 40)
              || *(double *)(a1 + 48) != *(double *)(a2 + 48)
              || *(double *)(a1 + 56) != *(double *)(a2 + 56)
              || *(double *)(a1 + 64) != *(double *)(a2 + 64)
              || *(double *)(a1 + 72) != *(double *)(a2 + 72))
            {
              return 0;
            }
            v6 = *(double *)(a1 + 80);
            v7 = *(double *)(a2 + 80);
            goto LABEL_22;
          case 2:
            if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
              || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
              || *(double *)(a1 + 48) != *(double *)(a2 + 48)
              || *(double *)(a1 + 56) != *(double *)(a2 + 56)
              || *(double *)(a1 + 64) != *(double *)(a2 + 64))
            {
              return 0;
            }
            result = CGRectEqualToRect(*(CGRect *)(a1 + 72), *(CGRect *)(a2 + 72));
            if (!result)
              return result;
            v8 = *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
            goto LABEL_23;
          case 3:
            v6 = *(double *)(a1 + 40);
            v7 = *(double *)(a2 + 40);
LABEL_22:
            v8 = v6 == v7;
LABEL_23:
            result = v8;
            break;
          case 4:
            v9 = 40;
            do
            {
              v10 = *(double *)(a1 + v9);
              v11 = *(double *)(a2 + v9);
              result = v10 == v11;
              if (v10 != v11)
                break;
              v8 = v9 == 192;
              v9 += 8;
            }
            while (!v8);
            break;
          default:
            return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double CGStyleGetDrawBoundingBox(uint64_t a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v8;
  BOOL v9;
  double v11;
  double v12;
  CGRect v13;
  CGRect v14;

  v8 = a2;
  if (a1)
  {
    v9 = a2 == INFINITY || a3 == INFINITY;
    if (!v9 && a4 != 0.0 && a5 != 0.0)
    {
      if (a2 == -8.98846567e307 && a3 == -8.98846567e307 && a4 == 1.79769313e308 && a5 == 1.79769313e308)
      {
        return -8.98846567e307;
      }
      else
      {
        v11 = 0.0;
        v12 = 0.0;
        if (get_expansion(a1, &v11))
        {
          v13.origin.x = v8;
          v13.origin.y = a3;
          v13.size.width = a4;
          v13.size.height = a5;
          v14 = CGRectInset(v13, -v11, -v12);
          *(_QWORD *)&v8 = (unint64_t)CGRectIntegral(v14);
        }
      }
    }
  }
  return v8;
}

uint64_t CGStyleShouldUseCorrectShadowOffsets()
{
  return 1;
}

uint64_t CGStyleGetTypeID()
{
  if (kCGContextStyleContentEnd_block_invoke_once != -1)
    dispatch_once(&kCGContextStyleContentEnd_block_invoke_once, &__block_literal_global_18_14596);
  return CGStyleGetTypeID_style_type_id;
}

uint64_t CGStyleFilterContextDelegateCreate(uint64_t a1, uint64_t a2)
{
  if (CGStyleFilterContextDelegateCreate_once != -1)
    dispatch_once_f(&CGStyleFilterContextDelegateCreate_once, 0, (dispatch_function_t)load_style_filter_context_delegate_creator);
  if (creator_14634)
    return creator_14634(a1, a2);
  else
    return 0;
}

void load_style_filter_context_delegate_creator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char **i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = 0;
  for (i = (const char **)&links; strcmp("__CGStyleFilterContextDelegateCreate", *i); i += 2)
  {
    if (++v9 == 7)
    {
      CGPostError((uint64_t)"Failed to load style filter context delegate.", v11, v12, v13, v14, v15, v16, v17, a9);
      return;
    }
  }
  creator_14634 = (&links)[2 * v9 + 1];
}

_QWORD *PDFTextLayoutAddGlyphsWithPositions(_QWORD *result, const void *a2, uint64_t a3, unsigned __int16 *a4, _OWORD *a5, uint64_t a6, double a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a2 && a7 != 0.0)
  {
    v13 = result;
    v14 = result[10];
    if (v14
      && (v15 = *(_QWORD *)(v14 + 8), *(const void **)(v15 + 24) == a2)
      && *(double *)(v15 + 32) == a7
      && *(double *)(v15 + 40) == *(double *)a3
      && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v15 + 48), *(float64x2_t *)(a3 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v15 + 64), *(float64x2_t *)(a3 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(v15 + 80) == *(double *)(a3 + 40))
    {
      return block_append_glyphs((uint64_t *)v15, a4, a5, a6);
    }
    else
    {
      v16 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      *((double *)v16 + 4) = a7;
      CFRetain(a2);
      *((_QWORD *)v16 + 3) = a2;
      v18 = *(_OWORD *)(a3 + 16);
      v17 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)a3;
      *(_OWORD *)(v16 + 56) = v18;
      *(_OWORD *)(v16 + 72) = v17;
      block_append_glyphs((uint64_t *)v16, a4, a5, a6);
      v19 = v13[10];
      result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
      *result = v19;
      result[1] = v16;
      v13[10] = result;
    }
  }
  return result;
}

void *block_append_glyphs(uint64_t *a1, unsigned __int16 *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  void *result;
  __int16 v10;
  int v11;
  uint64_t v12;

  v4 = a4;
  v8 = *a1 + a4;
  a1[1] = (uint64_t)malloc_type_realloc((void *)a1[1], 2 * v8, 0x1000040BDFB0063uLL);
  result = malloc_type_realloc((void *)a1[2], 16 * v8, 0x1000040451B5BE8uLL);
  for (a1[2] = (uint64_t)result; v4; --v4)
  {
    v11 = *a2++;
    v10 = v11;
    if (v11 != 0xFFFF)
    {
      v12 = *a1;
      *(_WORD *)(a1[1] + 2 * *a1) = v10;
      *(_OWORD *)(a1[2] + 16 * v12) = *a3;
      ++*a1;
    }
    ++a3;
  }
  return result;
}

void layout_flush_block(_QWORD *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  double *v9;
  int *font_info;
  double v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v41;
  _QWORD v42[2];
  int advances;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2)
  {
    MEMORY[0x1E0C80A78](a1, a3);
    v8 = (double *)((char *)&v42[-1] - v5 - 7);
    if (v7 <= 0xFFFFFFFFFFFFFFELL)
      v9 = (double *)((char *)&v42[-1] - v5 - 7);
    else
      v9 = 0;
    if (v7 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000042)
      v9 = (double *)malloc_type_malloc(16 * v6, 0x78F6B614uLL);
    advances = 0;
    font_info = (int *)get_font_info(*(_QWORD **)(a2 + 24));
    if (font_info)
      v11 = (double)font_info[2];
    else
      v11 = 0.0;
    if (*(_QWORD *)a2 == 1)
    {
      v12 = 0;
      v13 = 1;
      v14 = 1;
LABEL_24:
      v24 = &v9[2 * v12];
      *((_BYTE *)v24 + 8) = 1;
      *v24 = 0.0;
      v25 = PDFDocumentAddFont(a1[1], *(_QWORD **)(a2 + 24));
      layout_begin_run(a1, (float64x2_t *)(a2 + 40), *(double **)(a2 + 16), *(double *)(a2 + 32));
      if ((v14 & 1) != 0 && (v13 & 1) != 0)
      {
        *(double *)(*(_QWORD *)(a1[9] + 8) + 64) = *v9 / 1000.0;
        v27 = *(_QWORD *)a2;
        v26 = *(const void **)(a2 + 8);
LABEL_69:
        PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, v26, v27);
LABEL_70:
        if (v9 != v8)
          free(v9);
        return;
      }
      if ((v14 & 1) == 0)
      {
        *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 64) = 0;
        v35 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_70;
        v36 = 0;
        v37 = 0;
        do
        {
          if (v36 >= v35 - 1 || LOBYTE(v9[2 * v36 + 1]) == 0)
          {
            ++v36;
          }
          else
          {
            PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, (const void *)(*(_QWORD *)(a2 + 8) + 2 * v37), v36 - v37 + 1);
            ++v36;
            layout_begin_run(a1, (float64x2_t *)(a2 + 40), (double *)(*(_QWORD *)(a2 + 16) + 16 * v36), *(double *)(a2 + 32));
            v35 = *(_QWORD *)a2;
            v37 = v36;
          }
        }
        while (v36 < v35);
        v27 = v36 - v37;
        if (v36 == v37)
          goto LABEL_70;
        goto LABEL_68;
      }
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)a2 - 1;
      if (*(_QWORD *)a2 == 1)
      {
        v32 = *v9;
LABEL_49:
        if (!a1)
        {
LABEL_54:
          if (!v28)
            goto LABEL_70;
          v39 = 0;
          v37 = 0;
          do
          {
            if (v39 >= v28 - 1 || LOBYTE(v9[2 * v39 + 1]) == 0)
            {
              ++v39;
            }
            else
            {
              PDFFontAddGlyphsToLayout(v25, (uint64_t)a1, (const void *)(*(_QWORD *)(a2 + 8) + 2 * v37), v39 - v37 + 1);
              if (a1)
              {
                v41 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 72);
                if (v41)
                  *(double *)(*(_QWORD *)(v41 + 8) + 8) = *(double *)(*(_QWORD *)(v41 + 8) + 8) - v9[2 * v39];
              }
              ++v39;
              v28 = *(_QWORD *)a2;
              v37 = v39;
            }
          }
          while (v39 < v28);
          v27 = v39 - v37;
          if (v39 == v37)
            goto LABEL_70;
LABEL_68:
          v26 = (const void *)(*(_QWORD *)(a2 + 8) + 2 * v37);
          goto LABEL_69;
        }
      }
      else
      {
        v30 = 1;
        v31 = *(_QWORD *)a2 - 1;
        while (LOBYTE(v9[v30]))
        {
          v30 += 2;
          if (!--v31)
          {
            v32 = *v9;
            v33 = v9;
            do
            {
              v34 = round(*v33 - v32);
              *v33 = v34;
              if (v34 == 0.0)
                *((_BYTE *)v33 + 8) = 0;
              v33 += 2;
              --v29;
            }
            while (v29);
            goto LABEL_49;
          }
        }
        v32 = 0.0;
        if (!a1)
          goto LABEL_54;
      }
      if (fabs(v32) > 0.00000596046448)
        *(double *)(*(_QWORD *)(a1[9] + 8) + 64) = v32 / 1000.0;
      goto LABEL_54;
    }
    v42[0] = v8;
    v42[1] = v42;
    v15 = 0;
    v16 = 0;
    v17 = 3;
    v14 = 1;
    v13 = 1;
    while (1)
    {
      v18 = (double *)(*(_QWORD *)(a2 + 16) + v15 * 8);
      v19 = *(double *)(a2 + 32);
      if (fabs((v18[3] - v18[1]) / v19 * 1000.0) <= 0.1)
      {
        v21 = (v18[2] - *v18) / v19;
        CGFontGetGlyphAdvances(*(CGFontRef *)(a2 + 24), (const CGGlyph *)(*(_QWORD *)(a2 + 8) + v17 - 3), 1uLL, &advances);
        v22 = round(-((double)(int)((double)(1000 * advances) / v11 + 0.5) - v21 * 1000.0) * 10.0) / 10.0;
        v23 = &v9[v15];
        if (fabs(v22) > 0.00000596046448)
        {
          *((_BYTE *)v23 + 8) = 1;
          v9[v15] = v22;
          if (v16)
            goto LABEL_20;
          goto LABEL_22;
        }
        *((_BYTE *)v23 + 8) = 0;
        v9[v15] = 0.0;
      }
      else
      {
        v14 = 0;
        v20 = &v9[v15];
        *((_BYTE *)v20 + 8) = 1;
        *v20 = 0.0;
      }
      v22 = 0.0;
      if (v16)
      {
LABEL_20:
        if (v22 != *v9)
          v13 = 0;
      }
LABEL_22:
      ++v16;
      v12 = *(_QWORD *)a2 - 1;
      v15 += 2;
      v17 += 2;
      if (v16 >= v12)
      {
        v8 = (double *)v42[0];
        goto LABEL_24;
      }
    }
  }
}

_QWORD *layout_begin_run(_QWORD *result, float64x2_t *a2, double *a3, double a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (result)
  {
    v6 = result;
    v7 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 8) = 0;
    if (a2)
    {
      *(float64x2_t *)(v7 + 8) = vmulq_n_f64(*a2, a4);
      v8 = v7 + 8;
      *(float64x2_t *)(v7 + 24) = vmulq_n_f64(a2[1], a4);
      *(float64x2_t *)(v7 + 40) = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], a3[1]), *a2, *a3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)v7 + 7) = v8;
    *((_QWORD *)v7 + 9) = 0;
    v9 = v6[9];
    result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *result = v9;
    result[1] = v7;
    v6[9] = result;
  }
  return result;
}

_QWORD *layout_append_data(_QWORD *result, char *__s2, int a3, const void *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;

  if (!result)
    return result;
  v9 = result;
  v10 = result[9];
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *(char **)v11;
      if (!*(_QWORD *)v11)
      {
LABEL_9:
        *(_QWORD *)v11 = __s2;
        v12 = __s2;
        goto LABEL_10;
      }
      if (!strcmp(*(const char **)v11, __s2))
        goto LABEL_10;
    }
  }
  else
  {
    v11 = 0;
  }
  layout_begin_run(v9, 0, 0, 0.0);
  v13 = *(_QWORD *)(v11 + 64);
  v11 = *(_QWORD *)(v9[9] + 8);
  *(_QWORD *)(v11 + 64) = v13;
  v12 = *(char **)v11;
  if (!*(_QWORD *)v11)
    goto LABEL_9;
LABEL_10:
  if (strcmp(v12, __s2))
    _CGHandleAssert("layout_append_data", 380, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ContentStreams/PDFTextLayout.c", "strcmp(run->font, font) == 0", "\"%s\" != \"%s\"", v14, v15, v16, (char)v12);
  v17 = *(_QWORD *)(v11 + 72);
  if (v17 && (v18 = *(_DWORD **)(v17 + 8), *((double *)v18 + 1) == 0.0) && *v18 == a3)
  {
    v19 = a3 == 2;
    v20 = malloc_type_realloc(v18, ((*((_QWORD *)v18 + 2) + a5) << (a3 == 2)) + 24, 0xD80653D1uLL);
    result = memcpy((char *)v20 + (v20[2] << v19) + 24, a4, a5 << v19);
    v20[2] += a5;
    *(_QWORD *)(*(_QWORD *)(v11 + 72) + 8) = v20;
  }
  else
  {
    v21 = a5 << (a3 == 2);
    v22 = malloc_type_calloc(1uLL, v21 + 24, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(_DWORD *)v22 = a3;
    v22[2] = a5;
    memcpy(v22 + 3, a4, v21);
    v23 = *(_QWORD *)(v11 + 72);
    result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *result = v23;
    result[1] = v22;
    *(_QWORD *)(v11 + 72) = result;
  }
  return result;
}

void emit_sequence(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;

  if (*(_DWORD *)a2 == 1)
  {
    v8 = "%A";
  }
  else
  {
    if (*(_DWORD *)a2 != 2)
      abort();
    v8 = "%G";
  }
  PDFWriterPrintf(a1, (uint64_t)v8, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a2 + 16));
}

uint64_t get_mask_table(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char vars0;

  if (get_mask_table_predicate != -1)
    dispatch_once(&get_mask_table_predicate, &__block_literal_global_14672);
  result = get_mask_table_deep_mask_table;
  if (!get_mask_table_deep_mask_table)
    _CGHandleAssert("get_mask_table", 78, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/deep-mask-copy.c", "deep_mask_table != NULL", "deep mask table allocation failed", a6, a7, a8, vars0);
  return result;
}

char *gamma_table_create(long double a1)
{
  char *v2;
  uint64_t v3;
  uint64x2_t v4;
  double v5;
  int32x2_t v6;
  uint64_t v7;
  uint64x2_t v8;
  _WORD *v9;
  double v10;
  double v11;
  int32x2_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int64x2_t v18;
  int64x2_t v19;
  uint64x2_t v20;
  uint64x2_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int64x2_t v24;
  int64x2_t v25;

  pthread_mutex_lock(&gamma_table_create_mutex);
  v2 = (char *)gamma_table_create_gamma_table;
  if (!gamma_table_create_gamma_table || *(double *)(gamma_table_create_gamma_table + 8) != a1)
  {
    v2 = (char *)malloc_type_malloc(0x1018uLL, 0x1000040D6031E3CuLL);
    v3 = 0;
    *(_DWORD *)v2 = 1;
    *((long double *)v2 + 1) = a1;
    v20 = (uint64x2_t)vdupq_n_s64(0x401uLL);
    v4 = (uint64x2_t)xmmword_185004A00;
    v18 = vdupq_n_s64(2uLL);
    do
    {
      v24 = (int64x2_t)v4;
      v22 = vmovn_s64((int64x2_t)vcgtq_u64(v20, v4)).u8[0];
      v5 = pow((double)(int)v3 * 0.0009765625, a1);
      v6 = vmin_s32((int32x2_t)__PAIR64__(vcvtd_n_s64_f64(pow((double)((int)v3 + 1) * 0.0009765625, a1), 0xAuLL), vcvtd_n_s64_f64(v5, 0xAuLL)), (int32x2_t)0x7F0000007FLL);
      if ((v22 & 1) != 0)
        *(_WORD *)&v2[2 * v3 + 16] = v6.i16[0];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&v24)).i32[1] & 1) != 0)
        *(_WORD *)&v2[2 * v3 + 18] = v6.i16[2];
      v3 += 2;
      v4 = (uint64x2_t)vaddq_s64(v24, v18);
    }
    while (v3 != 1026);
    v7 = 0;
    v8 = (uint64x2_t)xmmword_185004A00;
    v9 = v2 + 2068;
    v19 = vdupq_n_s64(2uLL);
    v21 = (uint64x2_t)vdupq_n_s64(0x401uLL);
    v10 = 1.0 / a1;
    do
    {
      v23 = vmovn_s64((int64x2_t)vcgtq_u64(v21, v8)).u8[0];
      v25 = (int64x2_t)v8;
      v11 = pow((double)(int)v7 * 0.0009765625, v10);
      v12 = vmin_s32((int32x2_t)__PAIR64__(vcvtd_n_s64_f64(pow((double)((int)v7 + 1) * 0.0009765625, v10), 0xAuLL), vcvtd_n_s64_f64(v11, 0xAuLL)), (int32x2_t)0x7F0000007FLL);
      if ((v23 & 1) != 0)
        *(v9 - 1) = v12.i16[0];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&v25)).i32[1] & 1) != 0)
        *v9 = v12.i16[2];
      v7 += 2;
      v8 = (uint64x2_t)vaddq_s64(v25, v19);
      v9 += 2;
    }
    while (v7 != 1026);
    v13 = (unsigned int *)gamma_table_create_gamma_table;
    if (gamma_table_create_gamma_table)
    {
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stxr(v15, v13));
      if (!v15)
        free(v13);
    }
    gamma_table_create_gamma_table = (uint64_t)v2;
  }
  do
    v16 = __ldxr((unsigned int *)v2);
  while (__stxr(v16 + 1, (unsigned int *)v2));
  pthread_mutex_unlock(&gamma_table_create_mutex);
  return v2;
}

int64x2_t __get_mask_table_block_invoke()
{
  _WORD *v0;
  uint64_t v1;
  int32x4_t v2;
  uint32x4_t v3;
  int32x4_t v4;
  unsigned __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int64x2_t result;
  unsigned int v14;
  uint64x2_t v15;
  int64x2_t v16;

  v0 = malloc_type_malloc(0x1004uLL, 0x10000401CB32089uLL);
  v1 = 0;
  get_mask_table_deep_mask_table = (uint64_t)v0;
  v2 = (int32x4_t)xmmword_185004DC0;
  v3 = (uint32x4_t)vdupq_n_s32(0x80808081);
  v4.i64[0] = 0x400000004;
  v4.i64[1] = 0x400000004;
  do
  {
    v5 = *(_OWORD *)&vshlq_n_s32(v2, 0xAuLL) | __PAIR128__(0x7F0000007FLL, 0x7F0000007FLL);
    *(int16x4_t *)&v0[v1] = vshrn_n_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)&v5, *(uint32x2_t *)v3.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v5, v3)), 7uLL);
    v2 = vaddq_s32(v2, v4);
    v1 += 4;
  }
  while (v1 != 256);
  v6 = 0;
  do
  {
    v7 = v6 + 1;
    v8 = (((v6 + 1) >> 1) + 0x40000) / ((int)v6 + 1);
    if (v8 >= 0x7FFF)
      LOWORD(v8) = 0x7FFF;
    v0[v6++ + 257] = v8;
  }
  while (v7 != 255);
  v9 = 0;
  do
  {
    v10 = v9 + 1;
    v11 = 0x100000u / ((int)v9 + 1);
    if (v11 >= 0x7FFF)
      LOWORD(v11) = 0x7FFF;
    v0[v9++ + 513] = v11;
  }
  while (v10 != 1024);
  v12 = 0;
  result = (int64x2_t)xmmword_185004A00;
  v14 = 767;
  v15 = (uint64x2_t)vdupq_n_s64(0x401uLL);
  v16 = vdupq_n_s64(2uLL);
  do
  {
    if ((vmovn_s64((int64x2_t)vcgtq_u64(v15, (uint64x2_t)result)).u8[0] & 1) != 0)
      LOBYTE(v0[v12 + 1537]) = (v14 - 255) >> 10;
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x401uLL), *(uint64x2_t *)&result)).i32[1] & 1) != 0)
      HIBYTE(v0[v12 + 1537]) = v14 >> 10;
    ++v12;
    result = vaddq_s64(result, v16);
    v14 += 510;
  }
  while (v12 != 513);
  return result;
}

void CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent()
{
  void *v0;

  v0 = (void *)MEMORY[0x186DC2BD4]();
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetNumberOfPages");
  objc_autoreleasePoolPop(v0);
}

void CGAnalyticsSendPDFDocumentGetCatalogEvent()
{
  void *v0;

  v0 = (void *)MEMORY[0x186DC2BD4]();
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetCatalog");
  objc_autoreleasePoolPop(v0);
}

void std::vector<std::pair<std::shared_ptr<PDFPageNode>,unsigned long>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *PDFPageTree::addNode(PDFPageTree *this, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t v37;
  void *v38;
  __int128 v39;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = a2 + 4;
  result = std::shared_ptr<PDFPageNode>::operator=[abi:se180100](this, a2[4], a2[5]);
  v10 = *result;
  if (!*result || (v11 = *(_QWORD *)(v10 + 16), v11 == 8))
  {
    v12 = operator new(0x70uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1E1629C80;
    v12[3] = PDFXRefTableAddObject(*(_QWORD **)(*a2 + 464));
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *(_QWORD *)&v39 = v12 + 3;
    *((_QWORD *)&v39 + 1) = v12;
    std::shared_ptr<PDFPageNode>::operator=[abi:se180100]((uint64_t)this, &v39);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (_QWORD *)a2[3];
    if (!v16)
    {
      v16 = (_QWORD *)operator new();
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      a2[3] = v16;
    }
    v17 = (_QWORD *)v16[1];
    v18 = v16[2];
    if ((unint64_t)v17 >= v18)
    {
      v23 = (_QWORD *)*v16;
      v24 = ((uint64_t)v17 - *v16) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v26 = v18 - (_QWORD)v23;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27 >> 60)
        std::__throw_bad_array_new_length[abi:se180100]();
      v28 = (char *)operator new(16 * v27);
      v29 = &v28[16 * v24];
      v30 = *(_OWORD *)this;
      *(_OWORD *)v29 = *(_OWORD *)this;
      if (*((_QWORD *)&v30 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        v23 = (_QWORD *)*v16;
      }
      v33 = (_QWORD *)v16[1];
      if (v33 == v23)
      {
        v36 = vdupq_n_s64((unint64_t)v33);
        v34 = &v28[16 * v24];
      }
      else
      {
        v34 = &v28[16 * v24];
        do
        {
          v35 = *((_OWORD *)v33 - 1);
          v33 -= 2;
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 16;
          *v33 = 0;
          v33[1] = 0;
        }
        while (v33 != v23);
        v36 = *(int64x2_t *)v16;
      }
      v22 = v29 + 16;
      *v16 = v34;
      v16[1] = v29 + 16;
      v16[2] = &v28[16 * v27];
      v37 = v36.i64[1];
      v38 = (void *)v36.i64[0];
      while ((void *)v37 != v38)
        v37 = std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v37 - 16);
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v17 = *(_QWORD *)this;
      v19 = *((_QWORD *)this + 1);
      v17[1] = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = v17 + 2;
    }
    v16[1] = v22;
    result = std::shared_ptr<PDFPageNode>::operator=[abi:se180100](v8, *(_QWORD *)this, *((_QWORD *)this + 1));
    v10 = *(_QWORD *)this;
    v11 = *(_QWORD *)(*(_QWORD *)this + 16);
  }
  *(_QWORD *)(v10 + 16) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 24) = a3;
  *(_QWORD *)(v10 + 8) += a4;
  return result;
}

void sub_184D38E90(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PDFPageNode>::operator=[abi:se180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<PDFPageNode>::operator=[abi:se180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<PDFPageNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1629C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PDFPageNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1629C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC23C4);
}

const void *PDFPageTree::getObjectNumberForPageNumber(CFDictionaryRef *this, const void *a2)
{
  const void *Value;

  if (!a2)
    return 0;
  Value = CFDictionaryGetValue(this[2], a2);
  if (!Value)
  {
    Value = (const void *)PDFXRefTableAddObject(*((_QWORD **)*this + 58));
    CFDictionarySetValue(this[2], a2, Value);
  }
  return Value;
}

void std::vector<std::pair<std::shared_ptr<PDFPageNode>,unsigned long>>::push_back[abi:se180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:se180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    v13 = &v11[8 * v10];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    v6 = v12 + 24;
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v15 - 24);
        v15 -= 24;
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v15 + 2);
      }
      while (v15 != v14);
      v15 = *a1;
      v17 = (uint64_t)a1[1];
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
      while ((char *)v17 != v15)
        v17 = std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v17 - 24);
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
    v6 = (char *)(v4 + 24);
  }
  a1[1] = v6;
}

unint64_t provider_for_destination_get_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*(_BYTE *)(a1 + 724))
    _CGHandleAssert("provider_for_destination_get_bytes", 619, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  return provider_for_destination_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

unint64_t provider_for_destination_skip_forward(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t BitsPerPixel;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE __dst[304];

  v4 = *(_QWORD *)a1;
  memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  memcpy(__dst, (const void *)(a1 + 360), sizeof(__dst));
  v20 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v13, v14, v15, v16, v17, v18, v19);
  if ((a2 & 0x8000000000000000) != 0)
    _CGHandleAssert("provider_for_destination_skip_forward", 632, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "count >= 0", "count = %lld", v21, v22, v23, a2);
  v24 = v20;
  v25 = byte_count_to_byte_count(v20, *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), *(_QWORD *)(a1 + 680), BitsPerPixel, *(_QWORD *)(a1 + 336), a2, v23);
  v26 = CGDataProviderSkipForwardInternal(v4, v25);
  v30 = v26;
  if (v26 < 0)
    _CGHandleAssert("provider_for_destination_skip_forward", 645, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "skipped >= 0", "skipped = %lld", v27, v28, v29, v26);
  if (v26 != v25)
    a2 = byte_count_to_byte_count(BitsPerPixel, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), v24, *(_QWORD *)(a1 + 664), v26, v29);
  *(_QWORD *)(a1 + 352) += v30;
  *(_QWORD *)(a1 + 680) += a2;
  return a2;
}

_QWORD *provider_for_destination_rewind(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD);
  char v11;

  v8 = *result;
  if (!*result)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v11);
  if ((*(_DWORD *)(v8 + 20) | 2) != 3)
    _CGHandleAssert("provider_for_destination_rewind", 678, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", a6, a7, a8, v11);
  v9 = result;
  v10 = *(uint64_t (**)(_QWORD))(v8 + 64);
  if (v10)
    result = (_QWORD *)v10(*(_QWORD *)(v8 + 24));
  *(_BYTE *)(v8 + 261) = 0;
  v9[85] = 0;
  v9[44] = 0;
  return result;
}

uint64_t provider_for_destination_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

uint64_t provider_for_destination_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

void CGPDFXRefTableRelease(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      do
      {
        xref_table_release(v2[1]);
        v2 = (_QWORD *)*v2;
      }
      while (v2);
      v3 = *(_QWORD **)(a1 + 8);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          free(v3);
          v3 = v4;
        }
        while (v4);
      }
    }
    pdf_object_scanner_release(*(uint64_t **)(a1 + 16));
    free((void *)a1);
  }
}

void xref_section_list_release(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  _QWORD *v4;

  if (a1)
  {
    v1 = a1;
    v2 = a1;
    do
    {
      v3 = (void **)v2[1];
      if (v3)
      {
        free(v3[2]);
        free(v3);
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    do
    {
      v4 = (_QWORD *)*v1;
      free(v1);
      v1 = v4;
    }
    while (v4);
  }
}

uint64_t read_integer_14824(uint64_t a1, unint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;

  v11 = *a3;
  if (*a3 == 48)
  {
    v12 = *(_QWORD *)(a1 + 120);
    do
    {
      if (!v12)
      {
        if (!CGPDFSourceRefill(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v14 = 0;
LABEL_18:
          v11 = -1;
LABEL_19:
          *a2 = v14;
          *a3 = v11;
          return 1;
        }
        v12 = *(_QWORD *)(a1 + 120);
      }
      --v12;
      v13 = *(unsigned __int8 **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v12;
      *(_QWORD *)(a1 + 128) = v13 + 1;
      v11 = *v13;
    }
    while (v11 == 48);
  }
  if (v11 - 48 > 9)
  {
    v14 = 0;
    goto LABEL_19;
  }
  v14 = 0;
  while (v14 <= 0xCCCCCCCCCCCCCCBLL)
  {
    v14 = 10 * v14 + v11 - 48;
    v15 = *(_QWORD *)(a1 + 120);
    if (!v15)
    {
      if (!CGPDFSourceRefill(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        goto LABEL_18;
      v15 = *(_QWORD *)(a1 + 120);
    }
    v16 = *(unsigned __int8 **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v15 - 1;
    *(_QWORD *)(a1 + 128) = v16 + 1;
    v11 = *v16;
    if (v11 - 48 >= 0xA)
      goto LABEL_19;
  }
  return 0;
}

void xref_table_release(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    xref_section_list_release(*(_QWORD **)(a1 + 40));
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    CGPDFXRefStreamRelease(*(_QWORD *)(a1 + 32));
    free((void *)a1);
  }
}

void *CGPDFXRefTableCreateByScanningObjects(const void **a1, const void *a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *UnresolvedObject;
  const void *v76;
  void *v77;
  CFTypeRef v78;
  char v80;
  uint64_t v81;
  uint64_t v82;
  CFTypeRef cf;
  _OWORD v84[2];
  int v85[2];

  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v4)
    return v4;
  *(_QWORD *)v4 = a1;
  v5 = pdf_object_scanner_create_with_xref(a1, 0);
  *((_QWORD *)v4 + 2) = v5;
  if (!v5)
    goto LABEL_70;
  v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6
    || (v7 = *((_QWORD *)v4 + 1),
        v8 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL),
        *v8 = v7,
        v8[1] = v6,
        *((_QWORD *)v4 + 1) = v8,
        v9 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL),
        __CFSetLastAllocationEventName(),
        !v9))
  {
LABEL_70:
    CGPDFXRefTableRelease((uint64_t)v4);
    return 0;
  }
  v10 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  *v10 = 0;
  v10[1] = v9;
  v6[5] = v10;
  v17 = *((_QWORD *)v4 + 2);
  if (v17)
    v18 = *(_QWORD **)(v17 + 8);
  else
    v18 = 0;
  CGPDFSourceSetPosition((uint64_t)v18, 0, v11, v12, v13, v14, v15, v16);
  v26 = 0;
  v27 = 0;
LABEL_9:
  v28 = v18[15];
  while (v28)
  {
LABEL_13:
    --v28;
    v29 = (unsigned __int8 *)v18[16];
    v30 = v29 + 1;
    v18[15] = v28;
    v18[16] = v29 + 1;
    v31 = *v29;
    if (v31 == 13 || v31 == 10)
    {
      do
      {
        if (!v28)
        {
          if (!CGPDFSourceRefill((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25))
            goto LABEL_45;
          v28 = v18[15];
          v30 = (unsigned __int8 *)v18[16];
        }
        v18[15] = --v28;
        v18[16] = v30 + 1;
        v19 = *v30;
        v33 = (_DWORD)v19 == 10 || (_DWORD)v19 == 13;
        ++v30;
      }
      while (v33);
      CGPDFSourceUngetc(v18, v19);
      v40 = v18[11];
      if (v18[18])
      {
        v41 = v18[24];
        v40 += v18[15];
      }
      else
      {
        v41 = v18[16];
      }
      v42 = v41 - v40;
      v43 = v18[14];
      *(_QWORD *)&v84[0] = 0;
      if (read_integer(v18, (unint64_t *)v84, v34, v35, v36, v37, v38, v39))
      {
        v44 = *(_QWORD *)&v84[0];
        if ((*(_QWORD *)&v84[0] & 0x8000000000000000) == 0)
        {
          *(_QWORD *)&v84[0] = 0;
          if (read_integer(v18, (unint64_t *)v84, v20, v21, v22, v23, v24, v25))
          {
            v81 = *(_QWORD *)&v84[0];
            if ((*(_QWORD *)&v84[0] & 0x8000000000000000) == 0)
            {
              CGPDFSourceSkipWhitespace(v18, v19, v20, v21, v22, v23, v24, v25);
              if (CGPDFSourceMatch((uint64_t)v18, (uint64_t)"obj", v45, v46, v47, v48, v49, v50)
                && (uint64_t)v44 <= 10000000)
              {
                if (v44 < v27)
                {
                  v51 = (_WORD *)v9[2];
                  goto LABEL_40;
                }
                do
                  v27 = 2 * v27 + 7;
                while (v44 >= v27);
                v52 = malloc_type_realloc(v9, 8 * v27 + 24, 0x5CC96690uLL);
                if (!v52)
                  goto LABEL_70;
                v9 = v52;
                *(_QWORD *)(v6[5] + 8) = v52;
                v51 = malloc_type_realloc(*((void **)v52 + 2), 2 * v27, 0x1000040BDFB0063uLL);
                if (!v51)
                  goto LABEL_70;
                v9[2] = v51;
LABEL_40:
                if (v26 <= v44)
                {
                  do
                  {
                    v51[v26] = 0;
                    v9[v26++ + 3] = 0;
                  }
                  while (v26 <= v44);
                  v26 = v44 + 1;
                }
                if (v81 >= (unsigned __int16)v51[v44])
                {
                  v51[v44] = v81;
                  v9[v44 + 3] = v42 + v43;
                }
              }
            }
          }
        }
      }
      goto LABEL_9;
    }
  }
  if (CGPDFSourceRefill((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25))
  {
    v28 = v18[15];
    goto LABEL_13;
  }
LABEL_45:
  v9[1] = v26;
  *v6 = v26;
  if (a2)
  {
    v6[2] = a2;
    CFRetain(a2);
    return v4;
  }
  v82 = 0;
  v53 = *((_QWORD *)v4 + 2);
  if (!v53)
  {
    v54 = 0;
    goto LABEL_52;
  }
  v54 = *(_QWORD **)(v53 + 8);
  if (!v54)
  {
LABEL_52:
    v55 = 0;
    goto LABEL_53;
  }
  v55 = v54[2];
  if (v55 == -1)
    _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", v23, v24, v25, v80);
LABEL_53:
  CGPDFSourceSetPosition((uint64_t)v54, v55, v20, v21, v22, v23, v24, v25);
  while (2)
  {
    if ((CGPDFSourceReverseSearch(v54, "trailer", " \n\r", " \n\r<", &v82) & 1) == 0)
    {
      v6[2] = 0;
LABEL_69:
      pdf_error("missing or invalid cross-reference trailer.");
      goto LABEL_70;
    }
    v62 = v82;
    *(_QWORD *)v85 = 0;
    memset(v84, 0, sizeof(v84));
    cf = 0;
    CGPDFSourceSetPosition(*(_QWORD *)(*((_QWORD *)v4 + 2) + 8), v82 + 7, v56, v57, v58, v59, v60, v61);
    if (!read_dictionary(*((uint64_t **)v4 + 2), &cf, v63, v64, v65, v66, v67, v68))
      goto LABEL_65;
    UnresolvedObject = CGPDFDictionaryGetUnresolvedObject((uint64_t)cf, "Root");
    if (!UnresolvedObject
      || *((_DWORD *)UnresolvedObject + 2) != 10
      || (CGPDFXRefTableGetObject((uint64_t)v4, *((_QWORD *)UnresolvedObject + 2), *((_QWORD *)UnresolvedObject + 3), (uint64_t)v84) & 1) == 0|| DWORD2(v84[0]) != 8)
    {
      v78 = cf;
      if (cf)
LABEL_64:
        CFRelease(v78);
LABEL_65:
      CGPDFSourceSetPosition((uint64_t)v54, v62, v69, v70, v71, v72, v73, v74);
      continue;
    }
    break;
  }
  v76 = *(const void **)v85;
  v77 = CGPDFDictionaryGetUnresolvedObject(*(uint64_t *)v85, "Pages");
  if (v76)
    CFRelease(v76);
  v78 = cf;
  if (!v77)
  {
    if (cf)
      goto LABEL_64;
    goto LABEL_65;
  }
  v6[2] = cf;
  if (!v78)
    goto LABEL_69;
  return v4;
}

CFStringRef cache_copy_format_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CGColorTransformCache %p>"), a1);
}

CFStringRef cache_copy_debug_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CGColorTransformCache %p>"), a1);
}

void CGGStateDeviceCopy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  device_state_release(*(unsigned int **)(a1 + 144));
  v4 = *(_QWORD *)(a2 + 144);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 4);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 20) |= 0x10u;
  *(_BYTE *)(a2 + 20) |= 0x10u;
}

double CGGStateGetFlatness(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 144) + 8);
}

double CGGStateGetSmoothness(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 144) + 16);
}

uint64_t CGGStateGetFillOverprint(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 144) + 24);
}

uint64_t CGGStateGetStrokeOverprint(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 144) + 25);
}

uint64_t CGGStateGetOverprintMode(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 144) + 28);
}

uint64_t CGGStateGetBlackGeneration(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32);
}

uint64_t CGGStateGetUndercolorRemoval(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 144) + 40);
}

uint64_t CGGStateGetTransferFunctions()
{
  return 0;
}

_QWORD *CGMetalContextCreate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!a1)
    return 0;
  if (metal_context_vtable_once != -1)
    dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
  v14 = metal_context_vtable_vtable;
  if (!metal_context_vtable_vtable)
    return 0;
  v15 = malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
  *v15 = a2;
  v15[1] = a3;
  v15[2] = CFRetain(a1);
  v15[3] = a4;
  v15[4] = a5;
  if (a6)
    CFRetain(a6);
  v15[5] = a6;
  *((_DWORD *)v15 + 12) = a7;
  v18 = (_QWORD *)CGContextCreateWithDelegateAndInfo(0, 10, 0, 0, (uint64_t)v15, (uint64_t)metal_context_finalize, v16, v17);
  v19 = (*(uint64_t (**)(_QWORD *, _QWORD))(v14 + 8))(v15, 0);
  v18[5] = v19;
  if (!v19)
  {
    CFRelease(v18);
    return 0;
  }
  return v18;
}

void metal_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const void *v9;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
      {
        v9 = *(const void **)(v8 + 16);
        if (v9)
          CFRelease(v9);
        CGColorSpaceRelease(*(CGColorSpaceRef *)(v8 + 40));
        free((void *)v8);
      }
    }
    else
    {
      handle_invalid_context((char)"metal_context_finalize", a1, a3, a4, a5, a6, a7, a8);
    }
  }
}

void *__metal_context_vtable_block_invoke()
{
  void *result;

  result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    result = dlsym(result, "CAMetalContextVTable");
    metal_context_vtable_vtable = (uint64_t)result;
  }
  return result;
}

void CGMetalContextSetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    (*(void (**)(_QWORD))(metal_context_vtable_vtable + 16))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextSetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGMetalContextGetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD))(metal_context_vtable_vtable + 24))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextGetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGMetalContextSetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    (*(void (**)(_QWORD))(metal_context_vtable_vtable + 48))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextSetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGMetalContextGetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD))(metal_context_vtable_vtable + 56))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextGetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGMetalContextGetWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return **(_QWORD **)(a1 + 32);
  handle_invalid_context((char)"CGMetalContextGetWidth", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetHeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  handle_invalid_context((char)"CGMetalContextGetHeight", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  handle_invalid_context((char)"CGMetalContextGetTexture", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitsPerComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  handle_invalid_context((char)"CGMetalContextGetBitsPerComponent", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitsPerPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  handle_invalid_context((char)"CGMetalContextGetBitsPerPixel", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  handle_invalid_context((char)"CGMetalContextGetColorSpace", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextGetBitmapInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
    return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
  handle_invalid_context((char)"CGMetalContextGetBitmapInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGMetalContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD))(metal_context_vtable_vtable + 32))(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextCreateImage", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGMetalContextCreateImageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 10)
  {
    if (metal_context_vtable_once != -1)
    {
      dispatch_once(&metal_context_vtable_once, &__block_literal_global_14915);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD))(metal_context_vtable_vtable + 40))(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
  }
  else
  {
    handle_invalid_context((char)"CGMetalContextCreateImageReference", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t CGPDFShadingCreateWithObject(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  CGPDFDictionary **v5;
  CGPDFDictionary *v6;
  CGColorSpaceRef colorspace;
  uint64_t v8;
  CGPDFArray *v9;
  CGFloat *v10;
  CGFloat *v11;
  BOOL Rect;
  uint64_t v13;
  uint64_t (*v14)();
  CGPDFBoolean v15;
  CGPDFObjectRef value;
  CGPDFInteger v17;

  if (result)
  {
    v1 = result;
    result = (uint64_t)CGPDFObjectCopyAssociation(result, "Shading");
    if (!result)
    {
      if (CGPDFShadingGetTypeID_onceToken != -1)
        dispatch_once(&CGPDFShadingGetTypeID_onceToken, &__block_literal_global_14923);
      result = pdf_create_cftype();
      if (result)
      {
        v2 = result;
        value = 0;
        v17 = 0;
        v15 = 0;
        v3 = *(_DWORD *)(v1 + 8);
        if (v3 == 9)
        {
          v4 = *(_QWORD *)(v1 + 32);
          if (!v4)
          {
            v6 = 0;
LABEL_12:
            *(_QWORD *)(v2 + 24) = v6;
            *(_QWORD *)(v2 + 32) = v4;
            if (CGPDFDictionaryGetObject(v6, "ColorSpace", &value))
            {
              colorspace = cg_create_colorspace((uint64_t)value);
              *(_QWORD *)(v2 + 40) = colorspace;
              if (colorspace)
              {
                if (CGColorSpaceGetType(colorspace) == 9)
                {
                }
                else
                {
                  *(_QWORD *)(v2 + 48) = 0;
                  v8 = *(_QWORD *)(v2 + 40);
                  if (v8)
                    v9 = *(CGPDFArray **)(*(_QWORD *)(v8 + 24) + 40);
                  else
                    v9 = 0;
                  v10 = (CGFloat *)malloc_type_malloc(8 * (_QWORD)v9 + 8, 0x100004000313F17uLL);
                  if (!v10)
                    goto LABEL_18;
                  v11 = v10;
                  if (CGPDFDictionaryGetNumbers(*(CGPDFDictionary **)(v2 + 24), "Background", (uint64_t)v10, v9))
                  {
                    v11[(_QWORD)v9] = 1.0;
                    *(_QWORD *)(v2 + 48) = CGColorCreate(*(CGColorSpaceRef *)(v2 + 40), v11);
                  }
                  free(v11);
                  Rect = CGPDFDictionaryGetRect(*(CGPDFDictionary **)(v2 + 24), "BBox", (double *)(v2 + 64));
                  *(_BYTE *)(v2 + 57) = Rect;
                  if (!Rect)
                    *(CGRect *)(v2 + 64) = CGRectInfinite;
                  *(_BYTE *)(v2 + 56) = 0;
                  if (!CGPDFDictionaryGetBoolean(*(CGPDFDictionaryRef *)(v2 + 24), "AntiAlias", &v15))
                    *(_BYTE *)(v2 + 56) = v15 != 0;
                  if (CGPDFDictionaryGetInteger(*(CGPDFDictionaryRef *)(v2 + 24), "ShadingType", &v17))
                  {
                    if ((unint64_t)(v17 - 8) > 0xFFFFFFFFFFFFFFF8)
                    {
                      v13 = *(_QWORD *)(v2 + 32);
                      if ((unint64_t)v17 > 3)
                      {
                        if (!v13)
                        {
                          pdf_error("invalid shading object: not a stream.");
                          goto LABEL_18;
                        }
                      }
                      else if (v13)
                      {
                        pdf_error("invalid shading object: not a dictionary.");
                        goto LABEL_18;
                      }
                      v14 = off_1E165FCA0[v17 - 1];
                      *(_DWORD *)(v2 + 16) = v17;
                      if ((((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v2, v2 + 96, v2 + 104) & 1) != 0)
                      {
                        *(_DWORD *)(v2 + 128) = 0;
                        return CGPDFObjectSetAssociation(v1, (const void *)v2, "Shading");
                      }
                      goto LABEL_18;
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
            else
            {
            }
LABEL_18:
            CFRelease((CFTypeRef)v2);
            return 0;
          }
          v5 = (CGPDFDictionary **)(v4 + 48);
        }
        else
        {
          if (v3 != 8)
          {
            pdf_error("invalid shading: not a dictionary or stream.");
            goto LABEL_18;
          }
          v4 = 0;
          v5 = (CGPDFDictionary **)(v1 + 32);
        }
        v6 = *v5;
        goto LABEL_12;
      }
    }
  }
  return result;
}

void CGPDFShadingFinalize(uint64_t a1)
{
  void (*v2)(uint64_t, _QWORD);
  const void *v3;
  const void *v4;

  v2 = *(void (**)(uint64_t, _QWORD))(a1 + 112);
  if (v2)
    v2(a1, *(_QWORD *)(a1 + 96));
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
  v4 = *(const void **)(a1 + 120);
  if (v4)
    CFRelease(v4);
}

uint64_t CGPDFShadingGetShading(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, _QWORD);

  result = *(_QWORD *)(a1 + 120);
  if (!result)
  {
    if (*(_QWORD *)(a1 + 104))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
      if (!*(_QWORD *)(a1 + 120))
      {
        v3 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 104);
        if (v3)
          *(_QWORD *)(a1 + 120) = v3(a1, *(_QWORD *)(a1 + 96));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
      return *(_QWORD *)(a1 + 120);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _CGDataProviderReleaseDataCallback(void *a1, const void *a2)
{
  if (a1)
    free(a1);
}

CGImageRef create_jpeg_copy(CGImageRef image, double a2)
{
  CGImageRef v2;
  CFStringRef UTType;
  __CFData *Mask;
  __CFData *MaskFromAlpha;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFData *Mutable;
  uint64_t v15;
  const void *v16;
  CFDictionaryRef v17;
  const __CFAllocator *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CGDataProvider *v21;
  CGImageRef v22;
  double valuePtr;
  void *values;
  void *keys;

  v2 = image;
  valuePtr = a2;
  if (!image)
    return v2;
  UTType = CGImageGetUTType(image);
  if (UTType && CFEqual(UTType, CFSTR("public.jpeg")))
    return 0;
  if ((*((_BYTE *)v2 + 39) & 4) == 0 && !*((_QWORD *)v2 + 22))
    goto LABEL_10;
  Mask = (__CFData *)CGImageGetMask(v2);
  if (Mask)
  {
    MaskFromAlpha = Mask;
    if ((is_image_alpha_opaque((uint64_t)Mask) & 1) == 0)
    {
      CFRetain(MaskFromAlpha);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if ((is_image_alpha_opaque((uint64_t)v2) & 1) != 0)
  {
LABEL_10:
    MaskFromAlpha = 0;
    goto LABEL_12;
  }
  MaskFromAlpha = CGImageCreateMaskFromAlpha((uint64_t)v2, v7, v8, v9, v10, v11, v12, v13);
LABEL_12:
  Mutable = CFDataCreateMutable(0, 0);
  if (create_jpeg_copy::predicate != -1)
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_14954);
  v15 = create_jpeg_copy::f(Mutable, CFSTR("public.jpeg"), 1, 0);
  if (!v15)
  {
    if (MaskFromAlpha)
      CFRelease(MaskFromAlpha);
    return 0;
  }
  v16 = (const void *)v15;
  v17 = 0;
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
    if (v19)
    {
      v20 = v19;
      values = v19;
      keys = CFSTR("kCGImageDestinationLossyCompressionQuality");
      v17 = CFDictionaryCreate(v18, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFRelease(v20);
    }
    else
    {
      v17 = 0;
    }
  }
  if (create_jpeg_copy::predicate != -1)
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_6_14956);
  create_jpeg_copy::f(v16, v2, v17);
  if (create_jpeg_copy::predicate != -1)
    dispatch_once(&create_jpeg_copy::predicate, &__block_literal_global_9_14957);
  create_jpeg_copy::f(v16);
  CFRelease(v16);
  if (v17)
    CFRelease(v17);
  v21 = CGDataProviderCreateWithCFData(Mutable);
  CFRelease(Mutable);
  v2 = CGImageCreateWithJPEGDataProvider2((uint64_t)v21, 0, 0, 0, 0);
  CGDataProviderRelease(v21);
  if (v2 && MaskFromAlpha)
  {
    v22 = CGImageCreateWithMaskAndMatte((uint64_t)v2, (uint64_t)MaskFromAlpha, 0);
    CFRelease(v2);
    v2 = v22;
LABEL_33:
    CFRelease(MaskFromAlpha);
    return v2;
  }
  if (MaskFromAlpha)
    goto LABEL_33;
  return v2;
}

uint64_t is_image_alpha_opaque(uint64_t a1)
{
  unsigned int *Mask;
  uint64_t IsConstantValue_0;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[320];
  int v20;
  unsigned __int8 v21;
  int v22;
  int __pattern4;
  float v24[1];
  int v25;
  _DWORD __b[1];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Mask = (unsigned int *)a1;
  if (*(_QWORD *)(a1 + 40) < 4uLL)
    return 0;
  if ((*(_BYTE *)(a1 + 39) & 4) == 0 && *(_QWORD *)(a1 + 176))
    Mask = (unsigned int *)CGImageGetMask((_QWORD *)a1);
  CGBuf::CGBuf((CGBuf *)v19, Mask);
  v3 = v21;
  if (v21 == 1)
  {
    v22 = 964689920;
    __pattern4 = 1065353216;
    memset_pattern4(__b, &__pattern4, 4uLL);
    memset_pattern4(v24, &v22, 4uLL);
    if ((v20 & 0x1F) != 0)
    {
      v27 = 0;
      v25 = 2139095040;
    }
  }
  else
  {
    v22 = 2139095040;
    __pattern4 = 0;
    if (v21 >= 0x10u)
      v9 = 16;
    else
      v9 = v21;
    memset_pattern4(__b, &__pattern4, 4 * v9);
    memset_pattern4(v24, &v22, 4 * v9);
    if (v3 <= 0xF && (v20 & 0x1F) != 0)
    {
      v10 = INFINITY;
      if ((v20 & 0x1Fu) < 5)
        v10 = 0.00024414;
      __b[v9] = 1065353216;
      v24[v9] = v10;
    }
  }
  IsConstantValue_0 = CGBufIsConstantValue_0((uint64_t)v19, (uint64_t)__b, (uint64_t)v24, v4, v5, v6, v7, v8);
  CGBuf::~CGBuf((CGBuf *)v19, v11, v12, v13, v14, v15, v16, v17);
  return IsConstantValue_0;
}

void sub_184D3AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  CGBuf::~CGBuf((CGBuf *)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void *__create_jpeg_copy_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationFinalize");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationFinalize");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationFinalize");
  create_jpeg_copy::f = result;
  return result;
}

void *__create_jpeg_copy_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  create_jpeg_copy::f = result;
  return result;
}

void *__create_jpeg_copy_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithData");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithData");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithData");
  create_jpeg_copy::f = result;
  return result;
}

uint64_t resample_word_v_3cpp_ap(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _WORD *v10;
  _WORD *v11;
  int32x2_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  __int16 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int32x2_t v26;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(result + 4);
    v9 = (__int16 *)(result + 8);
    v11 = *(_WORD **)a5;
    v10 = *(_WORD **)(a5 + 8);
    do
    {
      if (v8)
      {
        v12 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v14 = a6;
        v15 = 0x2000;
        v16 = v9;
        v17 = v8;
        do
        {
          v19 = *v16++;
          v18 = v19;
          v20 = *v14++;
          v12 = vmla_s32(v12, *(int32x2_t *)(v20 + 4 * v7), vdup_n_s32(v18));
          v15 += *(_DWORD *)(v20 + 4 * (v7 | 2)) * v18;
          v13 += *(_DWORD *)(v20 + 4 * (v7 | 3)) * v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        v12 = (int32x2_t)0x200000002000;
        v15 = 0x2000;
        v13 = 0x2000;
      }
      v21 = vshr_n_s32(v12, 0xEuLL);
      v22 = v15 >> 14;
      v23 = v13 >> 14;
      if (v22 >= 0xFFFF)
        v22 = 0xFFFF;
      v24 = v22 & ~(v22 >> 31);
      if (v23 >= 0xFFFF)
        v23 = 0xFFFF;
      v25 = v23 & ~(v23 >> 31);
      v26 = vmax_s32(vmin_s32(v21, (int32x2_t)0xFFFF0000FFFFLL), 0);
      result = v26.u32[0];
      if (v26.i32[0] > v25)
        v25 = v26.i32[0];
      if (v26.i32[1] > v25)
        v25 = v26.u32[1];
      if (v24 > v25)
        LOWORD(v25) = v24;
      v11[1] = v26.i16[2];
      *v11 = v26.i16[0];
      v11[2] = v24;
      v11 += 3;
      *v10++ = v25;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_ap(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __int16 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  const __int16 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;

  v6 = *a5 - 2;
  v7 = a5[1] - 2;
  v8 = *(_DWORD *)(a1 + 4);
  v9 = (const __int16 *)(a1 + 8);
  v10 = a3;
  v11 = a3 * a4;
  v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    result = 0;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    LODWORD(result) = 0;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v8)
      {
        v17 = a6;
        v18 = v9;
        v19 = v8;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v16.i32[0] >> 14;
      if (v16.i32[0] >> 14 >= 0xFFFF)
        v22 = 0xFFFF;
      v23 = v22 & ~(v22 >> 31);
      if (v16.i32[1] >> 14 >= 0xFFFF)
        v24 = 0xFFFF;
      else
        v24 = v16.i32[1] >> 14;
      if ((int)result <= v23)
        LODWORD(result) = v23;
      if ((v13 | 1) == v15)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        v25 = v15 + v10;
        v15 += v10;
        LODWORD(result) = 0;
      }
      else
      {
        v25 = v15;
        *(_WORD *)(v6 + 2) = v23;
        v6 += 2;
      }
      v26 = v24 & ~(v24 >> 31);
      if (result <= v26)
        v27 = v24 & ~(v24 >> 31);
      else
        v27 = result;
      if ((v13 | 2) == v25)
      {
        *(_WORD *)(v7 + 2) = v27;
        v7 += 2;
        v25 = v15 + v10;
        v15 += v10;
        v27 = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v26;
        v6 += 2;
      }
      v28 = v16.i32[2] >> 14;
      if (v16.i32[2] >> 14 >= 0xFFFF)
        v28 = 0xFFFF;
      v29 = v28 & ~(v28 >> 31);
      if (v16.i32[3] >> 14 >= 0xFFFF)
        v30 = 0xFFFF;
      else
        v30 = v16.i32[3] >> 14;
      if (v27 <= v29)
        v27 = v29;
      if ((v13 | 3) == v25)
      {
        *(_WORD *)(v7 + 2) = v27;
        v7 += 2;
        v25 = v15 + v10;
        v15 += v10;
        v27 = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v29;
        v6 += 2;
      }
      v31 = v30 & ~(v30 >> 31);
      if (v27 <= v31)
        result = v31;
      else
        result = v27;
      v13 += 4;
      if (v13 == v25)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        v15 += v10;
        result = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v31;
        v6 += 2;
      }
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    v13 = v13;
    do
    {
      v32 = 0x2000;
      if (v8)
      {
        v33 = a6;
        v34 = v9;
        v35 = v8;
        do
        {
          v37 = *v34++;
          v36 = v37;
          v38 = *v33++;
          v32 += *(_DWORD *)(v38 + 4 * v13) * v36;
          --v35;
        }
        while (v35);
      }
      v39 = v32 >> 14;
      if (v39 >= 0xFFFF)
        v39 = 0xFFFF;
      v40 = v39 & ~(v39 >> 31);
      if ((int)result <= v40)
        result = v40;
      else
        result = result;
      if (++v13 == v15)
      {
        *(_WORD *)(v7 + 2) = result;
        v7 += 2;
        v15 += v10;
        result = 0;
      }
      else
      {
        *(_WORD *)(v6 + 2) = v40;
        v6 += 2;
      }
    }
    while (v13 != v11);
  }
  return result;
}

int *resample_word_h_4cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  uint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  uint16x4_t *v22;
  unsigned __int16 *v23;
  int32x4_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint16x4_t v30;
  int32x4_t v31;
  int v32;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = 2 * a2 + 8;
    v12 = a8;
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        v14 = v9 + *a7 * (uint64_t)(int)v8;
        v15 = *(int32x4_t **)(a5 + 8 * v8);
        v16 = v10 + a7[1] * (uint64_t)(int)v8 + 2;
        v17 = a4;
        v18 = result;
        do
        {
          v19 = v18[1];
          if (v19)
          {
            v21 = (__int16 *)(v18 + 2);
            v20 = *v18;
            v22 = (uint16x4_t *)(v14 + 8 * v20);
            v23 = (unsigned __int16 *)(v16 + 2 * v20 - 2);
            v24.i64[0] = 0x200000002000;
            v24.i64[1] = 0x200000002000;
            v25 = 0x2000;
            do
            {
              v27 = *v21++;
              v26 = v27;
              v29 = *v23++;
              v28 = v29;
              v30 = *v22++;
              v24 = vmlaq_s32(v24, vmovl_s16(vdup_n_s16(v26)), (int32x4_t)vmovl_u16(v30));
              v25 += v28 * v26;
              --v19;
            }
            while (v19);
          }
          else
          {
            v24.i64[0] = 0x200000002000;
            v24.i64[1] = 0x200000002000;
            v25 = 0x2000;
          }
          v31 = vshrq_n_s32(v24, 0xEuLL);
          v32 = v25 >> 14;
          if (v25 >> 14 >= 0xFFFF)
            v32 = 0xFFFF;
          *v15 = vmaxq_s32(vminq_s32(v31, v13), (int32x4_t)0);
          v15[1].i32[0] = v32 & ~(v32 >> 31);
          v15 = (int32x4_t *)((char *)v15 + 20);
          v18 = (int *)((char *)v18 + v11);
          --v17;
        }
        while (v17);
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

_DWORD *resample_word_h_Ncpp_ap(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  __int16 *v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  __int16 *v27;
  int v28;
  int v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = a3 - 1;
    v11 = *a6;
    v12 = a6[1];
    v13 = 2 * a2 + 8;
    v14 = a8;
    v15 = 2 * a3 - 2;
    do
    {
      if (a4)
      {
        v16 = v11 + *a7 * (uint64_t)(int)v8;
        v17 = *(int **)(a5 + 8 * v8);
        v18 = v12 + a7[1] * (uint64_t)(int)v8 + 2;
        v19 = a4;
        v20 = result;
        do
        {
          v22 = *v20;
          v21 = v20[1];
          v23 = (__int16 *)(v20 + 2);
          if (v9 >= 2)
          {
            v24 = 0;
            do
            {
              v25 = 0x2000;
              if (v21)
              {
                v26 = (unsigned __int16 *)(v16 + 2 * v22 * v10);
                v27 = (__int16 *)(v20 + 2);
                v28 = v21;
                do
                {
                  v29 = *v27++;
                  v25 += *v26 * v29;
                  v26 = (unsigned __int16 *)((char *)v26 + v15);
                  --v28;
                }
                while (v28);
              }
              v30 = v25 >> 14;
              if (v30 >= 0xFFFF)
                v30 = 0xFFFF;
              *v17++ = v30 & ~(v30 >> 31);
              ++v24;
            }
            while (v24 != v10);
          }
          if (v21)
          {
            v31 = (unsigned __int16 *)(v18 + 2 * (v22 - 1));
            v32 = 0x2000;
            do
            {
              v34 = *v23++;
              v33 = v34;
              v35 = *v31++;
              v32 += v35 * v33;
              --v21;
            }
            while (v21);
          }
          else
          {
            v32 = 0x2000;
          }
          v36 = v32 >> 14;
          if (v32 >> 14 >= 0xFFFF)
            v36 = 0xFFFF;
          *v17++ = v36 & ~(v36 >> 31);
          v20 = (_DWORD *)((char *)v20 + v13);
          --v19;
        }
        while (v19);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_word_h_1cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  __int16 *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = 2 * a2 + 8;
    v12 = a8;
    while (!a4)
    {
LABEL_18:
      if (++v8 == v12)
        return result;
    }
    v13 = v9 + *a7 * (uint64_t)(int)v8;
    v14 = v10 + a7[1] * (uint64_t)(int)v8;
    v15 = *(int **)(a5 + 8 * v8);
    v16 = a4;
    v17 = result;
    while (1)
    {
      v19 = (uint64_t)(v17 + 2);
      v18 = *((__int16 *)v17 + 4);
      v20 = v17[1];
      v21 = 2 * *v17 - 2;
      v22 = v13 + v21;
      v23 = v14 + v21;
      if (v20 >= 2)
        break;
      v26 = 0x2000;
      v25 = 0x2000;
      if (v20)
        goto LABEL_11;
LABEL_13:
      v38 = v26 >> 14;
      v39 = v25 >> 14;
      if (v26 >> 14 >= 0xFFFF)
        v38 = 0xFFFF;
      v40 = v38 & ~(v38 >> 31);
      if (v39 >= 0xFFFF)
        v39 = 0xFFFF;
      *v15 = v40;
      v15[1] = v39 & ~(v39 >> 31);
      v15 += 2;
      v17 = (int *)((char *)v17 + v11);
      if (!--v16)
        goto LABEL_18;
    }
    v24 = 0;
    v25 = 0x2000;
    v26 = 0x2000;
    do
    {
      v27 = v20;
      v20 -= 2;
      v28 = v26 + v18 * *(unsigned __int16 *)(v22 + v24 + 2);
      v29 = v25 + v18 * *(unsigned __int16 *)(v23 + v24 + 2);
      v30 = SHIWORD(v17[v24 / 4 + 2]);
      v26 = v28 + v30 * *(unsigned __int16 *)(v22 + v24 + 4);
      v25 = v29 + *(unsigned __int16 *)(v23 + v24 + 4) * v30;
      v18 = SLOWORD(v17[v24 / 4 + 3]);
      v24 += 4;
    }
    while (v27 > 3);
    v23 += v24;
    v22 += v24;
    v19 = (uint64_t)&v17[v24 / 4 + 2];
    if (!v20)
      goto LABEL_13;
LABEL_11:
    v31 = (unsigned __int16 *)(v23 + 2);
    v32 = (unsigned __int16 *)(v22 + 2);
    v33 = (__int16 *)(v19 + 2);
    do
    {
      v35 = *v32++;
      v34 = v35;
      v36 = *v31++;
      v26 += v18 * v34;
      v25 += v18 * v36;
      v37 = *v33++;
      v18 = v37;
      --v20;
    }
    while (v20);
    goto LABEL_13;
  }
  return result;
}

uint64_t resample_word_v_Ncpp(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, int16x4_t **a5, uint64_t *a6)
{
  int16x4_t *v6;
  int v7;
  const __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t *v14;
  const __int16 *v15;
  int v16;
  uint64_t v17;
  int16x4_t v18;
  int v19;
  uint64_t *v20;
  const __int16 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3 * a4;
  v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    v12.i64[0] = 0xFFFF0000FFFFLL;
    v12.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v13.i64[0] = 0x200000002000;
      v13.i64[1] = 0x200000002000;
      if (v7)
      {
        v14 = a6;
        v15 = v8;
        v16 = v7;
        do
        {
          v17 = *v14++;
          result = 4 * v11;
          v18 = vld1_dup_s16(v15++);
          v13 = vmlaq_s32(v13, *(int32x4_t *)(v17 + 4 * v11), vmovl_s16(v18));
          --v16;
        }
        while (v16);
      }
      *v6++ = vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v13, 0xEuLL), v12), (int32x4_t)0));
      v11 += 4;
    }
    while (v11 < v10);
  }
  if ((int)v11 < (int)v9)
  {
    v11 = v11;
    do
    {
      v19 = 0x2000;
      if (v7)
      {
        v20 = a6;
        v21 = v8;
        v22 = v7;
        do
        {
          v23 = *v21++;
          result = v23;
          v24 = *v20++;
          v19 += *(_DWORD *)(v24 + 4 * v11) * result;
          --v22;
        }
        while (v22);
      }
      v25 = v19 >> 14;
      if (v25 >= 0xFFFF)
        v25 = 0xFFFF;
      v6->i16[0] = v25 & ~(unsigned __int16)(v25 >> 31);
      v6 = (int16x4_t *)((char *)v6 + 2);
      ++v11;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t *resample_word_v_3cpp_af(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _WORD **a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _WORD *v10;
  int32x2_t v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int32x2_t v24;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)result + 1);
    v9 = (__int16 *)(result + 1);
    v10 = *a5;
    do
    {
      if (v8)
      {
        v11 = (int32x2_t)0x200000002000;
        v12 = 0x2000;
        result = a6;
        v13 = 0x2000;
        v14 = v9;
        v15 = v8;
        do
        {
          v17 = *v14++;
          v16 = v17;
          v18 = *result++;
          v13 += *(_DWORD *)(v18 + 4 * v7) * v16;
          v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * (v7 | 1)), vdup_n_s32(v16));
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        v11 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v12 = 0x2000;
      }
      v19 = v13 >> 14;
      v20 = vshr_n_s32(v11, 0xEuLL);
      if (v19 >= 0xFFFF)
        v19 = 0xFFFF;
      v21 = v19 & ~(v19 >> 31);
      v22 = v12 >> 14;
      if (v22 >= 0xFFFF)
        v22 = 0xFFFF;
      v23 = v22 & ~(v22 >> 31);
      v24 = vmax_s32(vmin_s32(v20, (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v24.i32[0] > v21)
        v21 = v24.i32[0];
      if (v24.i32[1] > v21)
        v21 = v24.u32[1];
      if (v23 > v21)
        LOWORD(v21) = v23;
      *v10 = v21;
      v10[2] = v24.i16[2];
      v10[1] = v24.i16[0];
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_af(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  _WORD *v6;
  int v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  const __int16 *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;

  v6 = (_WORD *)(*a5 - 2);
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3;
  v10 = 2 - a3;
  v11 = a3 * a4;
  v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    v14 = 0;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = (int)v10;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        v17 = a6;
        v18 = v8;
        v19 = v7;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v16.i32[0] >> 14;
      v23 = v16.i32[1] >> 14;
      if (v16.i32[0] >> 14 >= 0xFFFF)
        v22 = 0xFFFF;
      v24 = v22 & ~(v22 >> 31);
      if (v23 >= 0xFFFF)
        v23 = 0xFFFF;
      if (v14 <= v24)
        v25 = v24;
      else
        v25 = v14;
      if ((v13 | 1) == v15)
      {
        v6[(int)v10] = v25;
        v26 = v15 + v9;
        v15 += v9;
        v25 = 0;
      }
      else
      {
        v26 = v15;
      }
      v27 = v23 & ~(v23 >> 31);
      v6[1] = v24;
      if (v25 <= v27)
        v28 = v23 & ~(v23 >> 31);
      else
        v28 = v25;
      if ((v13 | 2) == v26)
      {
        v6[(int)v10 + 1] = v28;
        v26 = v15 + v9;
        v15 += v9;
        v28 = 0;
      }
      v6[2] = v27;
      v29 = v16.i32[2] >> 14;
      v30 = v16.i32[3] >> 14;
      if (v16.i32[2] >> 14 >= 0xFFFF)
        v29 = 0xFFFF;
      v31 = v29 & ~(v29 >> 31);
      if (v30 >= 0xFFFF)
        v30 = 0xFFFF;
      if (v28 <= v31)
        v32 = v31;
      else
        v32 = v28;
      if ((v13 | 3) == v26)
      {
        v6[(int)v10 + 2] = v32;
        v26 = v15 + v9;
        v15 += v9;
        v32 = 0;
      }
      v33 = v30 & ~(v30 >> 31);
      v6[3] = v31;
      if (v32 <= v33)
        v14 = v30 & ~(v30 >> 31);
      else
        v14 = v32;
      v13 += 4;
      if (v13 == v26)
      {
        v6[(int)v10 + 3] = v14;
        v15 += v9;
        v14 = 0;
      }
      v6[4] = v33;
      v6 += 4;
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    v13 = v13;
    do
    {
      v34 = 0x2000;
      if (v7)
      {
        v35 = a6;
        v36 = v8;
        v37 = v7;
        do
        {
          v39 = *v36++;
          v38 = v39;
          v40 = *v35++;
          v34 += *(_DWORD *)(v40 + 4 * v13) * v38;
          --v37;
        }
        while (v37);
      }
      v41 = v34 >> 14;
      if (v41 >= 0xFFFF)
        v41 = 0xFFFF;
      result = v41 & ~(v41 >> 31);
      if (v14 <= (int)result)
        v14 = result;
      if (++v13 == v15)
      {
        v6[v10] = v14;
        v15 += v9;
        v14 = 0;
      }
      v6[1] = result;
      ++v6;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t *resample_word_v_3cpp_al(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _WORD **a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _WORD *v10;
  int32x2_t v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t v24;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)result + 1);
    v9 = (__int16 *)(result + 1);
    v10 = *a5;
    do
    {
      if (v8)
      {
        v11 = (int32x2_t)0x200000002000;
        v12 = 0x2000;
        result = a6;
        v13 = 0x2000;
        v14 = v9;
        v15 = v8;
        do
        {
          v17 = *v14++;
          v16 = v17;
          v18 = *result++;
          v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * v7), vdup_n_s32(v16));
          v13 += *(_DWORD *)(v18 + 4 * (v7 | 2)) * v16;
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        v11 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v12 = 0x2000;
      }
      v19 = vshr_n_s32(v11, 0xEuLL);
      v20 = v13 >> 14;
      v21 = v12 >> 14;
      if (v20 >= 0xFFFF)
        v20 = 0xFFFF;
      v22 = v20 & ~(v20 >> 31);
      if (v21 >= 0xFFFF)
        v21 = 0xFFFF;
      v23 = v21 & ~(v21 >> 31);
      v24 = vmax_s32(vmin_s32(v19, (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v24.i32[0] > v23)
        v23 = v24.i32[0];
      if (v24.i32[1] > v23)
        v23 = v24.u32[1];
      if (v22 > v23)
        LOWORD(v23) = v22;
      v10[1] = v24.i16[2];
      *v10 = v24.i16[0];
      v10[2] = v22;
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_word_v_Ncpp_al(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  int v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int32x4_t v14;
  int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int v27;
  BOOL v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  unsigned __int32 v32;
  BOOL v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  unsigned __int32 v37;
  BOOL v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned __int32 v43;
  BOOL v44;
  __int16 v45;
  int v46;
  uint16x4_t v47;
  int8x16_t v48;
  int v49;
  uint64_t *v50;
  const __int16 *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;

  v6 = *a5 - 2;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3;
  v10 = a3 * a4;
  v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    v13 = 0;
    v15 = a3;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        v17 = a6;
        v18 = v8;
        v19 = v7;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v12), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v12 | 1;
      v23 = v12 | 2;
      v24 = v12 | 3;
      v12 += 4;
      v25 = v6 + 8;
      v26 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v16, 0xEuLL), v14), (int32x4_t)0);
      v27 = v26.i32[0];
      if (v13 > v26.i32[0])
        v27 = v13;
      v28 = v22 == v15;
      v29 = v28;
      if (v22 == v15)
        v30 = v9;
      else
        v30 = 0;
      v31 = (v30 + v15);
      if (v28)
        v32 = 0;
      else
        v32 = v27;
      if (v32 <= v26.i32[1])
        result = v26.u32[1];
      else
        result = v32;
      v33 = v23 == v31;
      v34 = v23 == v31;
      if (v33)
        v35 = v9;
      else
        v35 = 0;
      v36 = (v35 + v31);
      if (v33)
        v37 = 0;
      else
        v37 = result;
      if (v37 <= v26.i32[2])
        v37 = v26.u32[2];
      v38 = v24 == v36;
      v39 = v24 == v36;
      if (v38)
        v40 = v9;
      else
        v40 = 0;
      v41 = (v40 + v36);
      v42 = v26.i32[3];
      if (v38)
        v43 = 0;
      else
        v43 = v37;
      if (v43 > v26.i32[3])
        v42 = v43;
      v44 = v12 == v41;
      v45 = v12 == v41;
      if (v12 == v41)
        v46 = v9;
      else
        v46 = 0;
      v15 = v46 + v41;
      v47.i16[0] = v29;
      v47.i16[1] = v34;
      v47.i16[2] = v39;
      if (v44)
        v13 = 0;
      else
        v13 = v42;
      v47.i16[3] = v45;
      v48.i64[0] = __PAIR64__(result, v27);
      v48.i64[1] = __PAIR64__(v42, v37);
      *(int16x4_t *)(v6 + 2) = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v47), 0x1FuLL)), v48, v26));
      v6 += 8;
    }
    while (v12 < v11);
    v6 = v25;
  }
  if ((int)v12 < (int)v10)
  {
    v12 = v12;
    do
    {
      v49 = 0x2000;
      if (v7)
      {
        v50 = a6;
        v51 = v8;
        v52 = v7;
        do
        {
          v54 = *v51++;
          v53 = v54;
          v55 = *v50++;
          v49 += *(_DWORD *)(v55 + 4 * v12) * v53;
          --v52;
        }
        while (v52);
      }
      v56 = v49 >> 14;
      if (v56 >= 0xFFFF)
        v56 = 0xFFFF;
      v57 = v56 & ~(v56 >> 31);
      if (v13 <= v57)
        result = v57;
      else
        result = v13;
      v58 = ++v12 == v15;
      if (v12 == v15)
        v59 = v9;
      else
        v59 = 0;
      v15 += v59;
      if (v58)
        v13 = 0;
      else
        v13 = result;
      if (v58)
        LOWORD(v57) = result;
      *(_WORD *)(v6 + 2) = v57;
      v6 += 2;
    }
    while (v12 != v10);
  }
  return result;
}

int *resample_word_h_4cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  uint64_t v12;
  int32x4_t *v13;
  int v14;
  int *v15;
  int v16;
  const __int16 *v17;
  uint16x4_t *v18;
  int32x4_t v19;
  uint16x4_t v20;
  int16x4_t v21;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = 2 * a2 + 8;
    v11.i64[0] = 0xFFFF0000FFFFLL;
    v11.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        v12 = v9 + *a7 * (uint64_t)(int)v8;
        v13 = *(int32x4_t **)(a5 + 8 * v8);
        v14 = a4;
        v15 = result;
        do
        {
          v16 = v15[1];
          if (v16)
          {
            v17 = (const __int16 *)(v15 + 2);
            v18 = (uint16x4_t *)(v12 + 8 * *v15);
            v19.i64[0] = 0x200000002000;
            v19.i64[1] = 0x200000002000;
            do
            {
              v20 = *v18++;
              v21 = vld1_dup_s16(v17++);
              v19 = vmlaq_s32(v19, vmovl_s16(v21), (int32x4_t)vmovl_u16(v20));
              --v16;
            }
            while (v16);
          }
          else
          {
            v19.i64[0] = 0x200000002000;
            v19.i64[1] = 0x200000002000;
          }
          *v13++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v19, 0xEuLL), v11), (int32x4_t)0);
          v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

_DWORD *resample_word_h_3cpp_ap(_DWORD *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  uint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  const __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  int32x4_t v23;
  uint16x4_t v24;
  int16x4_t v25;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = 2 * a2 + 8;
    v12 = a8;
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a4)
      {
        v14 = v9 + *a7 * (uint64_t)(int)v8;
        v15 = *(int32x4_t **)(a5 + 8 * v8);
        v16 = v10 + a7[1] * (uint64_t)(int)v8 + 2;
        v17 = a4;
        v18 = result;
        do
        {
          v19 = v18[1];
          if (v19)
          {
            v20 = (const __int16 *)(v18 + 2);
            v21 = v14 + 6 * *v18;
            v22 = (__int16 *)(v16 + 2 * (*v18 - 1));
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
            do
            {
              v24.i32[0] = *(_DWORD *)v21;
              v24.i16[2] = *(_WORD *)(v21 + 4);
              v24.i16[3] = *v22++;
              v25 = vld1_dup_s16(v20++);
              v23 = vmlaq_s32(v23, vmovl_s16(v25), (int32x4_t)vmovl_u16(v24));
              v21 += 6;
              --v19;
            }
            while (v19);
          }
          else
          {
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
          }
          *v15++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v23, 0xEuLL), v13), (int32x4_t)0);
          v18 = (_DWORD *)((char *)v18 + v11);
          --v17;
        }
        while (v17);
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

_DWORD *resample_word_h_Ncpp(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  unsigned __int16 *v20;
  __int16 *v21;
  int v22;
  int v23;
  int v24;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = *a6;
    v11 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        v12 = v10 + *a7 * (uint64_t)(int)v8;
        v13 = *(int **)(a5 + 8 * v8);
        v14 = a4;
        v15 = result;
        do
        {
          if ((_DWORD)v9)
          {
            v16 = 0;
            v17 = v15[1];
            v18 = (unsigned __int16 *)(v12 + 2 * *v15 * (int)v9);
            do
            {
              v19 = 0x2000;
              if (v17)
              {
                v20 = v18;
                v21 = (__int16 *)(v15 + 2);
                v22 = v17;
                do
                {
                  v23 = *v21++;
                  v19 += *v20 * v23;
                  v20 += v9;
                  --v22;
                }
                while (v22);
              }
              v24 = v19 >> 14;
              if (v24 >= 0xFFFF)
                v24 = 0xFFFF;
              *v13++ = v24 & ~(v24 >> 31);
              ++v16;
              ++v18;
            }
            while (v16 != v9);
          }
          v15 = (_DWORD *)((char *)v15 + v11);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_word_h_1cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int16 *v27;
  __int16 *v28;
  int v29;
  int v30;
  int v31;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = 2 * a2 + 8;
    v11 = a8;
    do
    {
      if (a4)
      {
        v12 = v9 + *a7 * (uint64_t)(int)v8;
        v13 = *(int **)(a5 + 8 * v8);
        v14 = a4;
        v15 = result;
        do
        {
          v16 = v15[1];
          v18 = v15 + 2;
          v17 = *((__int16 *)v15 + 4);
          v19 = v12 + 2 * *v15 - 2;
          v20 = 0x2000;
          if (v16 >= 4)
          {
            v21 = *((__int16 *)v15 + 4);
            v22 = v15[1];
            do
            {
              v24 = *(unsigned __int16 *)(v19 + 8);
              v19 += 8;
              v23 = v24;
              v16 = v22 - 4;
              v25 = *((__int16 *)v18 + 4);
              v18 += 2;
              v17 = v25;
              v20 += v21 * *(unsigned __int16 *)(v19 - 6)
                   + *(unsigned __int16 *)(v19 - 4) * *((__int16 *)v18 - 3)
                   + *(unsigned __int16 *)(v19 - 2) * *((__int16 *)v18 - 2)
                   + v23 * *((__int16 *)v18 - 1);
              v21 = v25;
              v26 = v22 > 7;
              v22 -= 4;
            }
            while (v26);
          }
          if (v16)
          {
            v27 = (unsigned __int16 *)(v19 + 2);
            v28 = (__int16 *)v18 + 1;
            do
            {
              v29 = *v27++;
              v20 += v17 * v29;
              v30 = *v28++;
              v17 = v30;
              --v16;
            }
            while (v16);
          }
          v31 = v20 >> 14;
          if (v20 >> 14 >= 0xFFFF)
            v31 = 0xFFFF;
          *v13++ = v31 & ~(v31 >> 31);
          v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

int *resample_word_h_3cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  __int16 *v17;
  unsigned __int16 *v18;
  int32x2_t v19;
  int v20;
  unsigned int v21;
  int32x2_t v22;
  int32x2_t v23;
  int v24;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = 2 * a2 + 8;
    v11 = a8;
    do
    {
      if (a4)
      {
        v12 = *(int32x2_t **)(a5 + 8 * v8);
        v13 = v9 + *a7 * (uint64_t)(int)v8 + 4;
        v14 = a4;
        v15 = result;
        do
        {
          v16 = v15[1];
          if (v16)
          {
            v17 = (__int16 *)(v15 + 2);
            v18 = (unsigned __int16 *)(v13 + 6 * *v15);
            v19 = (int32x2_t)0x200000002000;
            v20 = 0x2000;
            do
            {
              v21 = *v17++;
              v22.i32[0] = *(v18 - 2);
              v22.i32[1] = *(v18 - 1);
              v19 = vmla_s32(v19, vdup_n_s32(v21), v22);
              v20 += *v18 * v21;
              v18 += 3;
              --v16;
            }
            while (v16);
          }
          else
          {
            v19 = (int32x2_t)0x200000002000;
            v20 = 0x2000;
          }
          v23 = vshr_n_s32(v19, 0xEuLL);
          v24 = v20 >> 14;
          if (v20 >> 14 >= 0xFFFF)
            v24 = 0xFFFF;
          *v12 = vmax_s32(vmin_s32(v23, (int32x2_t)0xFFFF0000FFFFLL), 0);
          v12[1].i32[0] = v24 & ~(v24 >> 31);
          v12 = (int32x2_t *)((char *)v12 + 12);
          v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t handleDefaults()
{
  uint64_t result;

  get_BOOLean_property("CGPDFShouldAnnotate", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldAnnotate);
  get_BOOLean_property("CGPDFShouldCompress", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldCompress);
  get_BOOLean_property("CGPDFShouldUsePNGPredictors", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldUsePNGPredictors);
  get_integer_property("CGPDFSecurityHandlerKeyLength", (const void *(*)(const char *))copy_local_domain_value, &securityHandlerKeyLength);
  get_BOOLean_property("CGPDFContextShouldOutputAllImagesAsJPEG", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldOutputAllImagesAsJPEG);
  get_BOOLean_property("CGPDFOptimizeImagesForScreenDisplay", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&shouldOptimizeImagesForScreenDisplay);
  result = CGPreferencesGetCGFloat("CGPDFOptimizeImagesCompressionQuality", &optimizeImagesCompressionQuality);
  didHandleDefaults = 1;
  return result;
}

CGPDFOperatorTableRef CGPDFOperatorTableRetain(CGPDFOperatorTableRef table)
{
  if (table)
    CFRetain(table);
  return table;
}

void CGPDFOperatorTableRelease(CGPDFOperatorTableRef table)
{
  if (table)
    CFRelease(table);
}

uint64_t _CGExceptionDescription(int a1, const char *a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  size_t v13;
  const char *v14;
  size_t v15;
  size_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  char *__s;
  _QWORD v22[2];
  _QWORD v23[11];
  char v24;
  uint64_t v25;
  char v26;
  char v27[1024];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:se180100]((uint64_t)v22);
  v27[0] = 40;
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  v27[0] = 40;
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  v13 = strlen(a2);
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)a2, v13);
  v27[0] = 41;
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)" is ", 4);
  if ((a1 - 1) > 2)
    v14 = "Nil";
  else
    v14 = off_1E165FFD8[a1 - 1];
  v15 = strlen(v14);
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v14, v15);
  v27[0] = 41;
  std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  if (a5)
  {
    *(_QWORD *)v27 = &a9;
    __s = 0;
    vasprintf(&__s, a5, &a9);
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)" - ", 3);
    v26 = 34;
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)&v26, 1);
    v16 = strlen(__s);
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)__s, v16);
    v26 = 34;
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)&v26, 1);
    free(__s);
  }
  if (a3)
  {
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)" - ", 3);
    v17 = basename_r(a3, v27);
    v18 = strlen(v17);
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(v23, (uint64_t)" : ", 3);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v22[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v23[0] = v19;
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186DC2388](&v25);
}

void sub_184D3C3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

BOOL isSplitBySpacer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _BOOL8 v9;

  if (*(_BYTE *)(a3 + 40))
  {
    v4 = objc_msgSend(*(id *)(a3 + 48), "count");
    if (v4)
      *(_QWORD *)(a3 + 56) = objc_msgSend(*(id *)(a3 + 48), "objectAtIndex:", (v4 - 1));
    *(_BYTE *)(a3 + 40) = 0;
  }
  v5 = *(unsigned int *)(a3 + 16);
  v6 = *(_DWORD *)a3;
  if (v5 < *(_DWORD *)(a3 + 20)
    && (v7 = *(_QWORD *)(a3 + 8), v8 = (_DWORD *)(v7 + 72 * v5), v6 == *v8))
  {
    v9 = *(_BYTE *)(v7 + 72 * v5 + 64) != 0;
    if (*(_BYTE *)(v7 + 72 * v5 + 64))
    {
      recordPreviousInlineInfo(a3);
      *(_QWORD *)(a3 + 32) = v8;
      if (*(_QWORD *)(a3 + 24))
        *(_BYTE *)(a3 + 40) = 1;
    }
    else
    {
      if (*(_BYTE *)(v7 + 72 * v5 + 48) && !*(_QWORD *)(a3 + 72))
        *(_QWORD *)(a3 + 72) = v8;
      if (*(_QWORD *)(v7 + 72 * v5 + 56))
      {
        if (*(_QWORD *)(a3 + 104))
        {
          *(_QWORD *)(a3 + 104) = (v5 + 1) - *(_QWORD *)(a3 + 96);
        }
        else
        {
          *(_QWORD *)(a3 + 96) = v5;
          *(_QWORD *)(a3 + 104) = 1;
        }
      }
    }
    ++*(_DWORD *)(a3 + 16);
    v6 = *(_DWORD *)a3;
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)a3 = v6 + 1;
  return v9;
}

__n128 recordPreviousInlineInfo(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  uint64_t Count;
  CFIndex i;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    objc_msgSend(*(id *)(a1 + 56), "setLeftSpacerIndex:", *(unsigned int *)(v2 + 52));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    objc_msgSend(*(id *)(a1 + 56), "setRightSpacerIndex:", *(unsigned int *)(v3 + 52));
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 56), "setIsListItem:", 1);
    objc_msgSend(*(id *)(a1 + 56), "setListSpacerIndex:", *(unsigned int *)(*(_QWORD *)(a1 + 64) + 52));
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v4 = *(_QWORD *)(a1 + 88);
  if (v4 >= 1)
  {
    v5 = *(_DWORD **)(a1 + 24);
    if (v5)
      v6 = *v5 + 1;
    else
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 8) + 72 * *(_QWORD *)(a1 + 80);
    v8 = v7 + 72 * v4;
    do
    {
      v9 = *(const __CFArray **)(v7 + 56);
      if (v9)
      {
        if (*(_DWORD *)v7 >= v6)
          v10 = *(_DWORD *)v7 - v6 + 1;
        else
          v10 = 0;
        Count = CFArrayGetCount(v9);
        if (Count)
        {
          for (i = 0; i != Count; ++i)
            objc_msgSend(*(id *)(a1 + 56), "anchorChunk:atWordIndex:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 56), i), v10);
        }
      }
      v7 += 72;
    }
    while (v7 < v8);
  }
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void excludeSpacerFromBounds(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[4];
  double v21;
  uint64_t v22;

  if (a2)
  {
    v8 = *(double *)(a2 + 8);
    v9 = *(double *)(a2 + 24);
    v10 = (a6 + fabs(a4)) * 0.00000011920929 + 1.17549435e-38;
    v21 = 0.0;
    v22 = 0;
    v11 = CGIntervalExclusion((uint64_t)&v21, v8, v9, a4 - v10, a6 + v10 * 2.0);
    v13 = v12;
    if (fabs(v11) == INFINITY)
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(v14 + 170) = 0;
    }
    else
    {
      v15 = v21;
      if (fabs(v21) != INFINITY)
      {
        v16 = *(_DWORD *)(a1 + 8);
        v17 = *(_OWORD *)(a2 + 16);
        v20[0] = *(_OWORD *)a2;
        v20[1] = v17;
        v18 = *(_OWORD *)(a2 + 48);
        v20[2] = *(_OWORD *)(a2 + 32);
        v20[3] = v18;
        v19 = addSpacer(a1, v16, v20);
        if (v19)
        {
          *(double *)(v19 + 8) = v15;
          *(_QWORD *)(v19 + 24) = v22;
          *(_QWORD *)(a2 + 40) = v19;
        }
      }
      *(double *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 24) = v13;
      v14 = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(v14 + 169) = 1;
  }
}

uint64_t preferredSpacer(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unsigned int v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unsigned int v41;
  unsigned int v42;

  if (a1)
  {
    v2 = *(double *)(a1 + 16);
    v3 = *(double *)(a2 + 16);
    v4 = 0.0;
    v5 = 0.0;
    if (v2 != v3)
    {
      v5 = 1.0;
      if (v3 != 0.0)
      {
        v5 = -1.0;
        if (v2 != 0.0)
          v5 = (v2 - v3) / (v2 + v3);
      }
    }
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(double *)(a1 + 24);
    v9 = *(double *)(a2 + 24);
    if (v8 != v9)
    {
      v4 = 0.5;
      if (v9 != 0.0)
      {
        v4 = -0.5;
        if (v8 != 0.0)
          v4 = (v8 - v9) / (v8 + v9) * 0.5;
      }
    }
    v10 = v5 + v4;
    v11 = *(_DWORD *)(a1 + 32);
    v12 = *(_DWORD *)(a2 + 32);
    v13 = 0.0;
    v14 = 0.0;
    if ((double)v11 != (double)v12)
    {
      if (v12)
      {
        if (v11)
          v14 = ((double)v11 - (double)v12) / ((double)v11 + (double)v12);
        else
          v14 = -1.0;
      }
      else
      {
        v14 = 1.0;
      }
    }
    v15 = v10 + v14;
    v16 = *(double *)(v6 + 16);
    v17 = *(double *)(v7 + 16);
    if (v16 != v17)
    {
      v13 = 1.0;
      if (v17 != 0.0)
      {
        v13 = -1.0;
        if (v16 != 0.0)
          v13 = (v16 - v17) / (v16 + v17);
      }
    }
    v18 = *(_DWORD *)(v6 + 32);
    v19 = v15 + v13;
    v20 = *(double *)(v6 + 24);
    v21 = *(double *)(v7 + 24);
    v22 = 0.0;
    v23 = 0.0;
    if (v20 != v21)
    {
      v23 = 1.0;
      if (v21 != 0.0)
      {
        v23 = -1.0;
        if (v20 != 0.0)
          v23 = (v20 - v21) / (v20 + v21);
      }
    }
    v24 = v19 + v23 * 0.5;
    v25 = (*(_DWORD *)(v6 + 56) + *(_DWORD *)(v6 + 44)) * v18;
    v26 = (*(_DWORD *)(v7 + 56) + *(_DWORD *)(v7 + 44)) * v18;
    if ((double)v25 != (double)v26)
    {
      if (v26)
      {
        if (v25)
          v22 = ((double)v25 - (double)v26) / ((double)v25 + (double)v26);
        else
          v22 = -1.0;
      }
      else
      {
        v22 = 1.0;
      }
    }
    v27 = v24 + v22 * -2.0;
    v28 = *(_DWORD *)(v6 + 68) * v18;
    v29 = *(_DWORD *)(v7 + 68) * v18;
    v30 = 0.0;
    v31 = 0.0;
    if ((double)v28 != (double)v29)
    {
      v31 = 1.0;
      v32 = ((double)v28 - (double)v29) / ((double)v28 + (double)v29);
      if (!v28)
        v32 = -1.0;
      if (v29)
        v31 = v32;
    }
    v33 = v27 + v31 * 0.5;
    v34 = *(_DWORD *)(v6 + 80) * v18;
    v35 = *(_DWORD *)(v7 + 80) * v18;
    v36 = 1.0;
    v37 = -1.0;
    v38 = ((double)v34 - (double)v35) / ((double)v34 + (double)v35);
    if (!v34)
      v38 = -1.0;
    if (!v35)
      v38 = 1.0;
    if ((double)v34 == (double)v35)
      v39 = 0.0;
    else
      v39 = v38;
    v40 = v33 + v39;
    v41 = *(unsigned __int8 *)(v6 + 169);
    v42 = *(unsigned __int8 *)(v7 + 169);
    if (v41)
      v37 = ((double)v41 - (double)v42) / ((double)v41 + (double)v42);
    if (v42)
      v36 = v37;
    if ((double)v41 != (double)v42)
      v30 = v36;
    if (v40 + v30 >= 0.0)
      return a1;
  }
  return a2;
}

BOOL isConsistentWithNarrowWordsCommon(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v5 = a1[2];
  v6 = 0.0;
  if (fabs(a2) != INFINITY)
  {
    v6 = -a3;
    if (a3 >= 0.0)
      v6 = a3;
    v7 = -0.0;
    if (a3 < 0.0)
      v7 = a3;
    v8 = a2 + v7;
    v9 = v6 + v8;
    if (v8 <= v5)
    {
      if (v9 < v5)
        v6 = v5 - v8;
    }
    else
    {
      v6 = v9 - v5;
    }
  }
  v10 = a1[5] * 0.2;
  if (v6 - a3 <= v10)
    return 1;
  v11 = 0.0;
  if (fabs(a4) != INFINITY)
  {
    v12 = v5 + a1[4];
    v11 = -a5;
    if (a5 >= 0.0)
      v11 = a5;
    v13 = -0.0;
    if (a5 < 0.0)
      v13 = a5;
    v14 = a4 + v13;
    v15 = v11 + v14;
    if (v14 <= v12)
    {
      if (v15 < v12)
        v11 = v12 - v14;
    }
    else
    {
      v11 = v15 - v12;
    }
  }
  return v11 - a5 <= v10;
}

uint64_t canSeparateWordRight(uint64_t result, double a2)
{
  _DWORD *v2;
  double v3;
  unsigned int v4;
  double v5;

  if (result)
  {
    v2 = *(_DWORD **)(result + 48);
    LODWORD(a2) = v2[14];
    v3 = (double)*(unint64_t *)&a2;
    v4 = v2[10];
    v5 = (double)v4 * 0.5;
    if (v5 <= v3 && v2[20] + v4 >= v2[8])
    {
      LODWORD(v5) = v2[16];
      return (double)*(unint64_t *)&v5 * 0.2 > v3;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t addSpacer(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t v3;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 + 4);
  if (v3 >= *(_DWORD *)a1 || *(_DWORD *)(a1 + 8) < a2)
    return 0;
  v6 = (_OWORD *)(*(_QWORD *)(a1 + 16) + (v3 << 6));
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[3];
  v6[2] = a3[2];
  v6[3] = v9;
  *v6 = v7;
  v6[1] = v8;
  v10 = *(_DWORD *)(a1 + 8) - a2;
  v11 = a2;
  if (v10)
  {
    v12 = *(_QWORD *)(a1 + 24) + 8 * a2;
    memmove((void *)(v12 + 8), (const void *)v12, 8 * v10);
    a2 = *(_DWORD *)(a1 + 8);
  }
  v13 = *(unsigned int *)(a1 + 4);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v11) = *(_QWORD *)(a1 + 16) + (v13 << 6);
  *(_DWORD *)(a1 + 4) = v13 + 1;
  *(_DWORD *)(a1 + 8) = a2 + 1;
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v11);
}

uint64_t segmentTextLine(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _OWORD *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;
  double *v25;
  int v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  double **v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  int started;
  __int128 v43;
  uint64_t v44;
  double v45;
  __int128 v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;

  v6 = a3;
  v9 = (_OWORD *)(a5 + 48);
  if (!a3)
    goto LABEL_9;
  if (objc_msgSend(**(id **)(a5 + 8), "isMonospaced"))
  {
    objc_msgSend(**(id **)(a5 + 8), "monospaceWidth");
    if (wordsMakeJunctionMonospaced(a2, v6, v10))
      goto LABEL_9;
  }
  else if ((*(int *)(v6 + 8) > 1 || (*(_BYTE *)(a2 + 12) & 0xAA) != 0 || (*(_BYTE *)(v6 + 12) & 0x55) != 0)
         && *(double *)(a2 + 16) + *(double *)(a2 + 32) < *(double *)(v6 + 16))
  {
    goto LABEL_9;
  }
  *(CGRect *)(a5 + 48) = CGRectUnion(*(CGRect *)(a5 + 48), *(CGRect *)(v6 + 16));
  if (a1 + 2 == objc_msgSend(**(id **)(a5 + 8), "wordCount"))
  {
    while (1)
    {
      ++a1;
      a2 = v6;
      v6 = 0;
LABEL_9:
      v11 = *(double *)(a5 + 48);
      v12 = *(double *)(a5 + 56);
      v13 = *(double *)(a5 + 64);
      v14 = v11 + v13;
      v15 = v12 + *(double *)(a5 + 72);
      v16 = *(unsigned int *)(a5 + 32);
      v17 = *(_QWORD *)(a5 + 24);
      v18 = (_DWORD *)(v17 + 8);
      v19 = *(_DWORD *)(v17 + 8);
      if (v16 < v19)
        break;
      v23 = 0;
      v21 = v11 + v13;
      v20 = v11 + v13;
LABEL_31:
      if (!v6)
        goto LABEL_58;
      v27 = *(_OWORD *)(v6 + 32);
      *v9 = *(_OWORD *)(v6 + 16);
      v9[1] = v27;
      v28 = *(double *)(v6 + 16);
      v29 = *(double *)(a2 + 40) >= *(double *)(v6 + 40) ? v6 : a2;
      v30 = *(double *)(v29 + 40);
      v31 = *(_QWORD *)(v29 + 24);
      v32 = *(_QWORD *)(a5 + 8);
      v33 = *(_QWORD *)(v32 + 16);
      v34 = *(_DWORD *)(a5 + 16);
      v35 = v33 + 72 * v34;
      *(_DWORD *)v35 = a1;
      *(_QWORD *)(v35 + 16) = v31;
      *(double *)(v35 + 24) = v28 - v14;
      *(double *)(v35 + 32) = v30;
      *(_BYTE *)(v35 + 48) = 0;
      *(_DWORD *)(v35 + 52) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_BYTE *)(v35 + 64) = 0;
      *(double *)(v35 + 8) = v14;
      v36 = (double *)(v35 + 8);
      *(_DWORD *)(a5 + 16) = v34 + 1;
      if (v20 <= v14)
        goto LABEL_48;
      if (v21 < v28 && v23)
      {
        v37 = v33 + 72 * v34;
        *(_QWORD *)(v37 + 40) = v23;
        v38 = (double **)(v37 + 40);
        if (v20 <= v28)
        {
          v39 = (v16 + 1);
          v40 = v23;
          do
          {
            v16 = v39;
            if (!*((_BYTE *)v40 + 56))
            {
              v30 = v15 - v40[1];
              v40[3] = v30;
              ++*((_DWORD *)v40 + 8);
            }
            v41 = *(_QWORD *)(a5 + 24);
            if (v16 >= *(_DWORD *)(v41 + 8))
              break;
            v40 = *(double **)(*(_QWORD *)(v41 + 24) + 8 * v16);
            if (!*((_BYTE *)v40 + 56))
            {
              v30 = *v40;
              v20 = *v40 + v40[2];
              if (*v40 < v28)
              {
                v23 = mergeLinkage(v23, v40);
                *v38 = v23;
              }
            }
            v39 = v16 + 1;
          }
          while (v20 <= v28);
        }
      }
      else
      {
LABEL_48:
        started = startSpacersAtJunction(*(_QWORD *)(a5 + 24), v16, *(_DWORD *)a5, (id *)v32, 1, *v36, v36[1], v36[2], v36[3]);
        *(_QWORD *)(v33 + 72 * v34 + 40) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 24)
                                                       + 8 * v16);
        LODWORD(v16) = started + v16;
      }
      *(_QWORD *)(a5 + 40) = 0;
      if (a1 + 2 != objc_msgSend(**(id **)(a5 + 8), "wordCount", v30))
      {
LABEL_58:
        *(_DWORD *)(a5 + 32) = v16;
        return 1;
      }
      *(_DWORD *)(a5 + 32) = v16;
    }
    v20 = v11 + v13;
    v21 = v11 + v13;
    while (1)
    {
      v22 = *(_QWORD *)(v17 + 24) + 8 * v16;
      v23 = *(double **)v22;
      if (!*(_BYTE *)(*(_QWORD *)v22 + 56))
        break;
LABEL_20:
      v16 = (v16 + 1);
      v17 = *(_QWORD *)(a5 + 24);
      v18 = (_DWORD *)(v17 + 8);
      v19 = *(_DWORD *)(v17 + 8);
      if (v16 >= v19)
        goto LABEL_31;
    }
    v21 = *v23;
    v20 = *v23 + v23[2];
    if (v20 > v11)
    {
      if (v21 >= v14)
      {
        *(_QWORD *)(a5 + 40) = 0;
        goto LABEL_31;
      }
      if (v21 >= v11)
      {
        if (v20 > v14)
        {
          *v23 = v14;
          v45 = v15 - v23[1];
          v23[2] = v20 - v14;
          v23[3] = v45;
          goto LABEL_31;
        }
        v25 = *(double **)(a5 + 40);
        if (!v25 || (_DWORD)v16 != *(_DWORD *)(a5 + 32))
        {
          v23[3] = v12 - v23[1];
          *((_BYTE *)v23 + 56) = 1;
          *(_QWORD *)(a5 + 40) = 0;
          goto LABEL_20;
        }
        v25[5] = v23[5];
        v21 = *v25;
        *v18 = v19 - 1;
        if (v19 - 1 != (_DWORD)v16)
          memmove((void *)v22, (const void *)(v22 + 8), 8 * (v19 - 1 - v16));
        LODWORD(v16) = v16 - 1;
        --*((_DWORD *)v25 + 8);
        v26 = *((unsigned __int8 *)v25 + 56);
        *(_QWORD *)(a5 + 40) = 0;
        if (v26)
          goto LABEL_19;
        goto LABEL_18;
      }
      v24 = v23[1];
      v23[2] = v11 - v21;
      v23[3] = v15 - v24;
      if (v20 > v14)
      {
        ++*((_DWORD *)v23 + 8);
        v43 = *((_OWORD *)v23 + 3);
        v50 = *((_OWORD *)v23 + 2);
        v51 = v43;
        *(_QWORD *)(a5 + 40) = v23;
        v16 = (v16 + 1);
        *(double *)&v47 = v14;
        *((double *)&v47 + 1) = v24;
        v48 = v20 - v14;
        v49 = v15 - v24;
        v44 = addSpacer(v17, v16, &v47);
        v23 = *(double **)(a5 + 40);
        if (v44)
        {
          *((_QWORD *)v23 + 5) = v44;
          v21 = v14;
          v23 = (double *)v44;
        }
        else
        {
          *(_QWORD *)(a5 + 40) = 0;
          v21 = v14;
        }
        goto LABEL_31;
      }
      *(_QWORD *)(a5 + 40) = 0;
    }
    v25 = v23;
LABEL_18:
    ++*((_DWORD *)v25 + 8);
LABEL_19:
    v23 = v25;
    goto LABEL_20;
  }
  return 1;
}

BOOL wordsMakeJunctionMonospaced(uint64_t a1, uint64_t a2, double a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  if (a3 < 4.0)
  {
    if (v3 > 1 || (*(_BYTE *)(a1 + 12) & 0xAA) != 0 || (*(_BYTE *)(a2 + 12) & 0x55) != 0)
      return *(double *)(a1 + 16) + *(double *)(a1 + 32) < *(double *)(a2 + 16);
    return 0;
  }
  if (v3 < 2)
    return 0;
  return (uint64_t)rint((*(double *)(a2 + 16) - *(double *)(a1 + 16) - *(double *)(a1 + 32)) / a3) > 1;
}

double *mergeLinkage(double *a1, double *a2)
{
  unsigned int v2;
  double *v3;
  unsigned int v4;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double v14;
  uint64_t i;
  BOOL v17;

  v2 = 0;
  if (a1)
  {
    v3 = a1;
    do
    {
      ++v2;
      v3 = (double *)*((_QWORD *)v3 + 5);
    }
    while (v3);
  }
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v5 = (double *)*((_QWORD *)v5 + 5);
    }
    while (v5);
  }
  v6 = a1;
  if (v2 > v4)
  {
    do
    {
      v6 = (double *)*((_QWORD *)v6 + 5);
      --v2;
    }
    while (v2 > v4);
    v2 = v4;
  }
  v7 = a2;
  if (v4 > v2)
  {
    v7 = a2;
    do
    {
      v7 = (double *)*((_QWORD *)v7 + 5);
      --v4;
    }
    while (v4 > v2);
  }
  while (v6 != v7)
  {
    v6 = (double *)*((_QWORD *)v6 + 5);
    v7 = (double *)*((_QWORD *)v7 + 5);
  }
  if (v6 == a2)
    return a1;
  if (v6 == a1)
    return a2;
  v8 = *a1;
  if (*a1 <= *a2)
    v9 = a1;
  else
    v9 = a2;
  if (*a1 > *a2)
  {
    v10 = a1;
  }
  else
  {
    v8 = *a2;
    v10 = a2;
  }
  v11 = v9;
  while (1)
  {
    v12 = v11;
    v11 = (double *)*((_QWORD *)v11 + 5);
    if (v11 == v6 || v11 == 0)
      break;
    v14 = *v11;
    if (*v11 > v8)
    {
      *((_QWORD *)v12 + 5) = v10;
      for (i = *((_QWORD *)v10 + 5); (double *)i != v6 && i != 0; i = *(_QWORD *)(i + 40))
      {
        v8 = *(double *)i;
        if (*(double *)i > v14)
          break;
        v10 = (double *)i;
      }
      *((_QWORD *)v10 + 5) = v11;
      v17 = (double *)i == v6 || i == 0;
      v10 = (double *)i;
      if (v17)
        return v9;
    }
  }
  *((_QWORD *)v12 + 5) = v10;
  return v9;
}

uint64_t startSpacersAtJunction(uint64_t a1, uint64_t a2, int a3, id *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  double v10;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  __n128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  int started;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v50;
  double v51;
  double v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int16 v58;
  char v59;
  int v60;
  double *v61;

  v9 = a5;
  v10 = a6;
  v13 = a6 + a8;
  v14 = a7 + a9;
  v61 = 0;
  if (a5 >= 0xFB)
  {
    v25 = a7;
    v15 = 0;
    v37 = 0;
    v36 = v13 - a6;
    v35 = v14 - a7;
    goto LABEL_28;
  }
  v15 = 0;
  if (!a3)
  {
LABEL_23:
    objc_msgSend(*a4, "bounds");
    v25 = v34;
    v35 = v14 - v34;
    goto LABEL_24;
  }
  v16 = (a3 - 1);
  v17 = a4 - 3;
  while (1)
  {
    objc_msgSend(*v17, "bounds");
    v22 = v18.n128_f64[0] + v20;
    if (v13 > v18.n128_f64[0] && v10 < v22)
      break;
LABEL_21:
    v9 = (v9 + 1);
    v16 = (v16 - 1);
    v17 -= 3;
    if ((_DWORD)v16 == -1)
    {
      a4 = v17 + 3;
      goto LABEL_23;
    }
  }
  v24 = v18.n128_f64[0];
  v25 = v19 + v21;
  if (v10 < v18.n128_f64[0])
  {
    if (v13 > v22)
    {
      v18.n128_f64[0] = v18.n128_f64[0] + v20;
      started = startSpacersAtJunction(a1, a2, v18, v19, v13 - v22, v14 - v19);
      v27 = started;
      if ((_DWORD)v15 && started)
      {
        v28 = *(_QWORD *)(a1 + 24);
        v29 = *(_QWORD *)(v28 + 8 * (started + a2 - 1));
        *(_QWORD *)(v29 + 40) = mergeLinkage(*(double **)(v29 + 40), *(double **)(v28 + 8 * (started + a2)));
      }
      LODWORD(v15) = v27 + v15;
    }
    if (v14 < v25)
      v14 = v25;
    v18.n128_f64[0] = v10;
    v30 = passSpacersThroughJunctions(a1, a2, v18, v25, v13 - v10, v14 - v25, v16, (uint64_t)v17, v9, &v61);
    v31 = v30;
    if ((_DWORD)v15 && v30)
    {
      v32 = *(_QWORD *)(a1 + 24);
      v33 = *(_QWORD *)(v32 + 8 * (v30 + a2 - 1));
      *(_QWORD *)(v33 + 40) = mergeLinkage(*(double **)(v33 + 40), *(double **)(v32 + 8 * (v30 + a2)));
    }
    v15 = (v31 + v15);
    v13 = v24;
    goto LABEL_21;
  }
  if (v13 <= v22)
  {
    v39 = v13 - v10;
  }
  else
  {
    v39 = v13 - v22;
    v18.n128_f64[0] = v18.n128_f64[0] + v20;
    v40 = startSpacersAtJunction(a1, a2, v18, v19, v13 - v22, v14 - v19);
    v41 = v40;
    if ((_DWORD)v15 && v40)
    {
      v42 = *(_QWORD *)(a1 + 24);
      v43 = *(_QWORD *)(v42 + 8 * (v40 + a2 - 1));
      *(_QWORD *)(v43 + 40) = mergeLinkage(*(double **)(v43 + 40), *(double **)(v42 + 8 * (v40 + a2)));
    }
    v15 = (v41 + v15);
    v10 = v22;
  }
  if (v14 >= v25)
    v18.n128_f64[0] = v14;
  else
    v18.n128_f64[0] = v25;
  v35 = v18.n128_f64[0] - v25;
  v18.n128_f64[0] = v10;
  v44 = passSpacersThroughJunctions(a1, a2, v18, v25, v39, v35, v16, (uint64_t)v17, v9, &v61);
  v45 = v44;
  if ((_DWORD)v15 && v44)
  {
    v46 = *(_QWORD *)(a1 + 24);
    v47 = v44 + a2;
    v48 = *(_QWORD *)(v46 + 8 * (v44 + a2 - 1));
    *(_QWORD *)(v48 + 40) = mergeLinkage(*(double **)(v48 + 40), *(double **)(v46 + 8 * v47));
    return (v45 + v15);
  }
  if (v13 > v22 || v44 != 0)
    return (v45 + v15);
LABEL_24:
  v36 = v13 - v10;
  if ((_DWORD)v15)
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2);
  else
    v37 = 0;
LABEL_28:
  v59 = 0;
  v58 = 0;
  *(double *)&v50 = v10;
  *((double *)&v50 + 1) = v25;
  v51 = v36;
  v52 = v35;
  v53 = v9;
  v54 = 0;
  v55 = v37;
  v56 = 0;
  v57 = 0;
  v60 = 0;
  if (addSpacer(a1, a2, &v50))
  {
    if (v61)
      mergeLinkage(*(double **)(*(_QWORD *)(a1 + 24) + 8 * a2), v61);
    return (v15 + 1);
  }
  return v15;
}

uint64_t passSpacersThroughJunctions(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, double **a10)
{
  unsigned int v11;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t started;
  uint64_t v22;
  double *v23;
  double **v24;
  double *v25;

  v11 = a2;
  v13 = a3.n128_f64[0] + a5;
  v14 = a4 + a6;
  v15 = *(unsigned int *)(a8 + 8);
  v16 = 72 * v15;
  do
  {
    if (!v16)
      return 0;
    v17 = *(_QWORD *)(a8 + 16);
    v18 = *(double *)(v17 + v16 - 64);
    v19 = v18 + *(double *)(v17 + v16 - 48);
    if (v19 <= a3.n128_f64[0])
      return 0;
    v16 -= 72;
    --v15;
  }
  while (v18 >= v13);
  v20 = v17 + v16;
  if (v18 >= a3.n128_f64[0])
    a3.n128_f64[0] = v18;
  if (v19 <= v13)
    v13 = v19;
  started = startSpacersAtJunction(a1, a2, a3, *(double *)(v20 + 16), v13 - a3.n128_f64[0], v14 - *(double *)(v20 + 16));
  v22 = v17 + 72 * v15;
  v25 = *(double **)(v22 + 40);
  v24 = (double **)(v22 + 40);
  v23 = v25;
  if ((_DWORD)started)
  {
    v23 = mergeLinkage(v23, *(double **)(*(_QWORD *)(a1 + 24) + 8 * v11));
    *v24 = v23;
  }
  if (*a10)
    v23 = mergeLinkage(*a10, v23);
  *a10 = v23;
  return started;
}

uint64_t countJunctionsMonospaced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (wordsMakeJunctionMonospaced(a1, a2, *(double *)(a4 + 8)))
    ++**(_DWORD **)a4;
  return 1;
}

uint64_t countJunctions(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if ((*(int *)(a2 + 8) > 1 || (*(_BYTE *)(a1 + 12) & 0xAA) != 0 || (*(_BYTE *)(a2 + 12) & 0x55) != 0)
    && *(double *)(a1 + 16) + *(double *)(a1 + 32) < *(double *)(a2 + 16))
  {
    ++*a4;
  }
  return 1;
}

uint64_t compareSegmentationsBottomAscendingLeftDescending(id *a1, id *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  objc_msgSend(*a1, "bounds");
  v4 = v3;
  v6 = v5;
  objc_msgSend(*a2, "bounds");
  if (v6 < v8)
    return 0xFFFFFFFFLL;
  if (v6 > v8)
    return 1;
  if (v4 <= v7)
    return v4 < v7;
  else
    return 0xFFFFFFFFLL;
}

uint64_t PDFImageEmitData(uint64_t a1, CGImage *image)
{
  uint64_t v4;
  CGColorSpaceRef ColorSpace;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGBitmapInfo v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  CGColorSpaceRef v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CGBitmapInfo v71;
  char *DataProviderInternal;
  int v73;
  CGDataProvider *v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  size_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i;
  char *v102;
  uint64_t v104;
  int v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CGDataProvider *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  char *v127;
  void *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (image)
    v4 = *((_QWORD *)image + 5);
  else
    v4 = 0;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  v121 = 0u;
  v119 = v4;
  BYTE8(v124) = ((unsigned __int16)CGImageGetBitmapInfo(image) >> 8) & 1;
  if (image && (*((_BYTE *)image + 39) & 2) != 0)
  {
    v6 = 1;
    v120 = 1;
LABEL_11:
    v8 = *((_QWORD *)image + 7);
    v7 = *((_QWORD *)image + 8);
    *(_QWORD *)&v122 = v8;
    goto LABEL_13;
  }
  ColorSpace = CGImageGetColorSpace(image);
  if (ColorSpace)
    v6 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
  else
    v6 = 0;
  v120 = v6;
  if (image)
    goto LABEL_11;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)&v122 = 0;
LABEL_13:
  v9 = v7 - v8 * v6;
  v16 = CGImageGetBitmapInfo(image) & 0x1F;
  if (v16)
  {
    if (v16 == 6)
    {
      v121 = v9;
      if (image)
        goto LABEL_17;
      goto LABEL_19;
    }
    if (v16 != 5)
    {
      v121 = 0uLL;
      if (image)
        goto LABEL_17;
      goto LABEL_19;
    }
  }
  *(_QWORD *)&v121 = 0;
  *((_QWORD *)&v121 + 1) = v9;
  if (image)
  {
LABEL_17:
    v17 = *((_QWORD *)image + 9);
    goto LABEL_20;
  }
LABEL_19:
  v17 = 0;
LABEL_20:
  *((_QWORD *)&v122 + 1) = v17;
  if (v8 <= 8)
  {
    if (((1 << v8) & 0x116) != 0)
    {
      *(_QWORD *)&v123 = v8;
      v18 = v8;
      goto LABEL_30;
    }
    if (((1 << v8) & 0xE0) != 0)
    {
      v18 = 8;
LABEL_29:
      *(_QWORD *)&v123 = v18;
      goto LABEL_30;
    }
    if (v8 == 3)
    {
      v18 = 4;
      goto LABEL_29;
    }
  }
  if (v8 > 0x20)
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BitsPerComponent 1", v10, v11, v12, v13, v14, v15, v108);
    PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
    return PDFStreamEndData(*(_QWORD **)(a1 + 16));
  }
  *(_QWORD *)&v123 = 16;
  v104 = *(_QWORD *)(a1 + 8);
  v105 = *(_DWORD *)(v104 + 4);
  if (v105 <= 0)
  {
    *(_DWORD *)(v104 + 4) = 1;
    v106 = (_DWORD *)(v104 + 8);
  }
  else
  {
    if (v105 != 1)
      goto LABEL_81;
    v107 = *(_DWORD *)(v104 + 8);
    v106 = (_DWORD *)(v104 + 8);
    if (v107 > 4)
      goto LABEL_81;
  }
  *v106 = 5;
LABEL_81:
  v18 = 16;
LABEL_30:
  v19 = (v6 * v4 * v18 + 7) >> 3;
  *((_QWORD *)&v123 + 1) = v19;
  *(_QWORD *)&v124 = 0;
  *(_QWORD *)&v125 = 0;
  if (v8 >= v18)
  {
    v21 = 0;
    if (v8 > v18)
      *(_QWORD *)&v124 = v8 - v18;
  }
  else
  {
    v20 = ~(-1 << v8);
    v21 = (char *)malloc_type_malloc(2 * v20 + 2, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    v22 = 0;
    *(_QWORD *)&v125 = v21;
    v23 = v20 >> 1;
    do
    {
      if ((_DWORD)v8)
        v24 = v23 / v20;
      else
        LOWORD(v24) = 0;
      *(_WORD *)&v21[v22] = v24;
      v22 += 2;
      v23 += ~(-1 << v18);
    }
    while (2 * v20 + 2 != v22);
  }
  v25 = malloc_type_malloc(v17, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  *((_QWORD *)&v125 + 1) = v25;
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BitsPerComponent %d", v26, v27, v28, v29, v30, v31, v18);
  v32 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v32 + 73))
    goto LABEL_43;
  v33 = 0;
  if (v18 == 8 && *(_BYTE *)(v32 + 89))
  {
    v34 = CGImageGetColorSpace(image);
    if (CGColorSpaceGetType(v34) == 7)
    {
LABEL_43:
      v33 = 0;
      goto LABEL_45;
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/DecodeParms <<", v35, v36, v37, v38, v39, v40, v109);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Predictor 15", v41, v42, v43, v44, v45, v46, v110);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Colors %d", v47, v48, v49, v50, v51, v52, v6);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Columns %d", v53, v54, v55, v56, v57, v58, v4);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BitsPerComponent %d", v59, v60, v61, v62, v63, v64, 8);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v65, v66, v67, v68, v69, v70, v111);
    v33 = 1;
  }
LABEL_45:
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  v71 = CGImageGetBitmapInfo(image) & 0x7000;
  if (v71 == 0x2000)
  {
    DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
    v73 = 4;
  }
  else
  {
    if (v71 != 4096)
    {
      v74 = (CGDataProvider *)CGImageGetDataProviderInternal((char *)image, 0);
      CGDataProviderRetain(v74);
      goto LABEL_51;
    }
    DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
    v73 = 2;
  }
  v74 = CGDataProviderCreateWithSwappedProvider((CGDataProviderRef)DataProviderInternal, v73);
LABEL_51:
  v127 = 0;
  v128 = 0;
  v115 = CGAccessSessionCreate(v74);
  if (v33)
  {
    v112 = v74;
    v75 = v18 * v6 + 7;
    v76 = v19 + (v75 >> 3);
    v77 = (char *)malloc_type_calloc(1uLL, v76, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v127 = v77;
    v78 = malloc_type_calloc(1uLL, v76, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v128 = v78;
    if (image)
    {
      v84 = v115;
      v114 = *((_QWORD *)image + 6);
      if (v114)
      {
        v85 = 0;
        v118 = v75 >> 3;
        v113 = a1;
        do
        {
          v86 = &(&v127)[v85 & 1][v118];
          v117 = v85 + 1;
          v87 = &(&v127)[(v85 + 1) & 1][v118];
          unpackImageRow(v84, (uint64_t)&v119, v87, v79, v80, v81, v82, v83);
          v116 = *(_QWORD *)(a1 + 16);
          v88 = *((_QWORD *)&v123 + 1);
          v89 = malloc_type_malloc(*((size_t *)&v123 + 1), 0x5693A1CuLL);
          v90 = 0;
          v91 = 0;
          LOBYTE(a1) = 0;
          v92 = 0xFFFFFFFFLL;
          do
          {
            v93 = (*(uint64_t (**)(char *, char *, size_t, unint64_t, uint64_t, void *))&filters[v90 + 2])(v87, v86, v88, v118, v92, v89);
            if (v93 < v92)
            {
              v94 = v93;
              free(v91);
              LODWORD(a1) = filters[v90];
              if (!(_DWORD)v94)
              {
                v126 = filters[v90];
                a1 = v113;
                v84 = v115;
                v85 = v117;
                goto LABEL_64;
              }
              v91 = v89;
              v89 = malloc_type_malloc(v88, 0xA559D238uLL);
              v92 = v94;
            }
            v90 += 4;
          }
          while (v90 != 20);
          v126 = a1;
          if (v89 != v91)
            free(v89);
          v89 = v91;
          a1 = v113;
          v84 = v115;
          v85 = v117;
LABEL_64:
          CGDataConsumerPutBytes(*(_QWORD *)(v116 + 24), (uint64_t)&v126, 1);
          CGDataConsumerPutBytes(*(_QWORD *)(v116 + 24), (uint64_t)v89, v88);
          free(v89);
        }
        while (v85 != v114);
        v77 = v127;
        v78 = v128;
        v25 = (void *)*((_QWORD *)&v125 + 1);
        v21 = (char *)v125;
        v74 = v112;
      }
    }
    else
    {
      v84 = v115;
    }
    free(v78);
    v102 = v77;
  }
  else
  {
    v95 = (char *)malloc_type_calloc(1uLL, v19, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v127 = v95;
    v84 = v115;
    if (image)
    {
      for (i = *((_QWORD *)image + 6); i; --i)
      {
        unpackImageRow(v115, (uint64_t)&v119, v95, v96, v97, v98, v99, v100);
        CGDataConsumerPutBytes(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v95, v19);
      }
    }
    v102 = v95;
  }
  free(v102);
  CGAccessSessionRelease(v84);
  CGDataProviderRelease(v74);
  free(v25);
  free(v21);
  return PDFStreamEndData(*(_QWORD **)(a1 + 16));
}

void unpackImageRow(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t i;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  float v43;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t j;
  int v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unint64_t v69;
  int v70;
  unsigned __int8 *v71;
  unint64_t k;
  unint64_t m;
  unint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;

  if (!*(_QWORD *)(a2 + 16)
    && !*(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 48)
    && !*(_BYTE *)(a2 + 72))
  {
    v77 = *(_QWORD *)(a2 + 56);
    if (v77 > *(_QWORD *)(a2 + 40))
      _CGHandleAssert("unpackImageRow", 120, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/Images/PDFImageEmit.c", "info->dstBytesPerRow <= info->srcBytesPerRow", "dest bpr %lu  src bpr: %lu", a6, a7, a8, *(_QWORD *)(a2 + 56));
    CGAccessSessionGetBytes(a1, a3, v77, a4, a5, a6, a7, a8);
    v83 = *(_QWORD *)(a2 + 56);
    v84 = *(_QWORD *)(a2 + 40);
    if (v84 > v83)
      CGAccessSessionGetBytes(a1, *(char **)(a2 + 88), v84 - v83, v78, v79, v80, v81, v82);
    return;
  }
  CGAccessSessionGetBytes(a1, *(char **)(a2 + 88), *(_QWORD *)(a2 + 40), a4, a5, a6, a7, a8);
  v11 = *(unsigned __int8 **)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = (unsigned __int8 **)malloc_type_malloc(0x28uLL, 0x1050040F264A4C2uLL);
  *v13 = v11;
  v13[2] = &v11[v12];
  *((_DWORD *)v13 + 6) = 0;
  v13[4] = 0;
  v14 = malloc_type_malloc(0x28uLL, 0x1050040F264A4C2uLL);
  v14[1] = a3;
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = 0;
  v14[4] = 0;
  if (!*(_QWORD *)a2)
    goto LABEL_91;
  v15 = 0;
  do
  {
    v16 = *(_QWORD *)(a2 + 16);
    if (v16)
    {
      v17 = v16 - 24;
      if (v16 <= 0x18)
      {
        v24 = v13[4];
        v17 = *(_QWORD *)(a2 + 16);
      }
      else
      {
        v18 = (unint64_t)v13[4];
        if (v18 > 0x17)
        {
          v22 = (unint64_t)v13[4];
        }
        else
        {
          v19 = (unint64_t)v13[2];
          v20 = *((_DWORD *)v13 + 6);
          v21 = *v13;
          do
          {
            v20 <<= 8;
            *((_DWORD *)v13 + 6) = v20;
            if ((unint64_t)v21 < v19)
            {
              *v13 = v21 + 1;
              v20 |= *v21;
              *((_DWORD *)v13 + 6) = v20;
              ++v21;
            }
            v22 = v18 + 8;
            v13[4] = (unsigned __int8 *)(v18 + 8);
            _CF = v18 >= 0x10;
            v18 += 8;
          }
          while (!_CF);
        }
        v24 = (unsigned __int8 *)(v22 - 24);
        v13[4] = (unsigned __int8 *)(v22 - 24);
      }
      if ((unint64_t)v24 < v17)
      {
        v25 = (unint64_t)v13[2];
        v26 = *((_DWORD *)v13 + 6);
        v27 = *v13;
        do
        {
          v26 <<= 8;
          *((_DWORD *)v13 + 6) = v26;
          if ((unint64_t)v27 < v25)
          {
            *v13 = v27 + 1;
            v26 |= *v27;
            *((_DWORD *)v13 + 6) = v26;
            ++v27;
          }
          v24 += 8;
          v13[4] = v24;
        }
        while ((unint64_t)v24 < v17);
      }
      v13[4] = &v24[-v17];
    }
    v28 = *(_QWORD *)(a2 + 8);
    if (v28)
    {
      for (i = 0; i < v28; ++i)
      {
        v30 = *(_QWORD *)(a2 + 32);
        v31 = v30 - 24;
        if (v30 <= 0x18)
        {
          v37 = 0;
          v38 = (unint64_t)v13[4];
          v31 = *(_QWORD *)(a2 + 32);
        }
        else
        {
          v32 = (unint64_t)v13[4];
          if (v32 >= 0x18)
          {
            v34 = *((_DWORD *)v13 + 6);
          }
          else
          {
            v33 = (unint64_t)v13[2];
            v34 = *((_DWORD *)v13 + 6);
            v35 = (unint64_t)v13[4];
            v36 = *v13;
            do
            {
              v34 <<= 8;
              *((_DWORD *)v13 + 6) = v34;
              if ((unint64_t)v36 < v33)
              {
                *v13 = v36 + 1;
                v34 |= *v36;
                *((_DWORD *)v13 + 6) = v34;
                ++v36;
              }
              v32 = v35 + 8;
              v13[4] = (unsigned __int8 *)(v35 + 8);
              _CF = v35 >= 0x10;
              v35 += 8;
            }
            while (!_CF);
          }
          v38 = v32 - 24;
          v13[4] = (unsigned __int8 *)(v32 - 24);
          v37 = ((v34 >> (v32 - 24)) & 0xFFFFFF) << v31;
        }
        if (v38 >= v31)
        {
          v40 = *((_DWORD *)v13 + 6);
        }
        else
        {
          v39 = (unint64_t)v13[2];
          v40 = *((_DWORD *)v13 + 6);
          v41 = *v13;
          do
          {
            v40 <<= 8;
            *((_DWORD *)v13 + 6) = v40;
            if ((unint64_t)v41 < v39)
            {
              *v13 = v41 + 1;
              v40 |= *v41;
              *((_DWORD *)v13 + 6) = v40;
              ++v41;
            }
            v38 += 8;
            v13[4] = (unsigned __int8 *)v38;
          }
          while (v38 < v31);
        }
        v42 = (unsigned __int8 *)(v38 - v31);
        v13[4] = v42;
        LODWORD(v43) = (v40 >> (char)v42) & (0xFFFFFFFF >> -(char)v31) | v37;
        if (*(_BYTE *)(a2 + 72))
        {
          if (v30 == 16)
          {
            _H1 = LOWORD(v43);
            __asm { FCVT            S1, H1 }
            v45 = *(_QWORD *)(a2 + 48);
            if (_S1 < 0.0)
            {
LABEL_56:
              v47 = 0;
              LOWORD(v46) = 0;
              goto LABEL_59;
            }
            v46 = ~(-1 << v45);
            if (_S1 > 1.0)
            {
LABEL_50:
              v47 = v46 & 0x7FFF0000;
              goto LABEL_59;
            }
            goto LABEL_58;
          }
          if (v30 == 32)
          {
            _S1 = v43;
            v45 = *(_QWORD *)(a2 + 48);
            if (v43 < 0.0)
              goto LABEL_56;
            v46 = ~(-1 << v45);
            if (_S1 > 1.0)
              goto LABEL_50;
LABEL_58:
            v46 = (float)(_S1 * (float)v46);
            v47 = v46 & 0xFFFF0000;
            goto LABEL_59;
          }
        }
        v48 = *(_QWORD *)(a2 + 80);
        if (v48)
        {
          v49 = 0;
          LOWORD(v43) = *(_WORD *)(v48 + 2 * LODWORD(v43));
        }
        else
        {
          v49 = LODWORD(v43) & 0xFFFF0000;
        }
        v46 = (v49 | LOWORD(v43)) >> *(_DWORD *)(a2 + 64);
        v47 = v46 & 0xFFFF0000;
        v45 = *(_QWORD *)(a2 + 48);
LABEL_59:
        v54 = (unsigned __int16)v46 | v47;
        if (v45 >= 0x19)
        {
          v55 = v14[4];
          if (v55 >= 8)
          {
            do
            {
              v56 = v55 - 8;
              v14[4] = v56;
              LODWORD(v56) = *((_DWORD *)v14 + 6) >> v56;
              v57 = (_BYTE *)v14[1];
              v14[1] = v57 + 1;
              *v57 = v56;
              v55 = v14[4];
            }
            while (v55 > 7);
          }
          v45 -= 24;
          *((_DWORD *)v14 + 6) = (v54 >> v45) & 0xFFFFFF | (*((_DWORD *)v14 + 6) << 24);
          for (j = v55 | 0x18; j > 7; j = v14[4])
          {
LABEL_64:
            v14[4] = j - 8;
            v59 = *((_DWORD *)v14 + 6) >> (j - 8);
            v60 = (_BYTE *)v14[1];
            v14[1] = v60 + 1;
            *v60 = v59;
          }
          v28 = *(_QWORD *)(a2 + 8);
          goto LABEL_66;
        }
        j = v14[4];
        if (j >= 8)
          goto LABEL_64;
LABEL_66:
        *((_DWORD *)v14 + 6) = (0xFFFFFFFF >> -(char)v45) & v54 | (*((_DWORD *)v14 + 6) << v45);
        v14[4] = j + v45;
      }
    }
    v61 = *(_QWORD *)(a2 + 24);
    if (v61)
    {
      v62 = v61 - 24;
      if (v61 <= 0x18)
      {
        v68 = v13[4];
        v62 = *(_QWORD *)(a2 + 24);
      }
      else
      {
        v63 = (unint64_t)v13[4];
        if (v63 > 0x17)
        {
          v67 = (unint64_t)v13[4];
        }
        else
        {
          v64 = (unint64_t)v13[2];
          v65 = *((_DWORD *)v13 + 6);
          v66 = *v13;
          do
          {
            v65 <<= 8;
            *((_DWORD *)v13 + 6) = v65;
            if ((unint64_t)v66 < v64)
            {
              *v13 = v66 + 1;
              v65 |= *v66;
              *((_DWORD *)v13 + 6) = v65;
              ++v66;
            }
            v67 = v63 + 8;
            v13[4] = (unsigned __int8 *)(v63 + 8);
            _CF = v63 >= 0x10;
            v63 += 8;
          }
          while (!_CF);
        }
        v68 = (unsigned __int8 *)(v67 - 24);
        v13[4] = (unsigned __int8 *)(v67 - 24);
      }
      if ((unint64_t)v68 < v62)
      {
        v69 = (unint64_t)v13[2];
        v70 = *((_DWORD *)v13 + 6);
        v71 = *v13;
        do
        {
          v70 <<= 8;
          *((_DWORD *)v13 + 6) = v70;
          if ((unint64_t)v71 < v69)
          {
            *v13 = v71 + 1;
            v70 |= *v71;
            *((_DWORD *)v13 + 6) = v70;
            ++v71;
          }
          v68 += 8;
          v13[4] = v68;
        }
        while ((unint64_t)v68 < v62);
      }
      v13[4] = &v68[-v62];
    }
    ++v15;
  }
  while (v15 < *(_QWORD *)a2);
  for (k = v14[4]; k; v14[4] = k)
  {
    m = k;
    if (k >= 8)
    {
      for (m = k; m > 7; m = v14[4])
      {
        v74 = m - 8;
        v14[4] = v74;
        LODWORD(v74) = *((_DWORD *)v14 + 6) >> v74;
        v75 = (_BYTE *)v14[1];
        v14[1] = v75 + 1;
        *v75 = v74;
      }
    }
    v76 = -(int)k & 7;
    *((_DWORD *)v14 + 6) <<= v76;
    k = m + v76;
  }
LABEL_91:
  free(v14);
  free(v13);
}

unint64_t paeth_filter(unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v14;
  int v15;
  int v16;
  int v17;

  if (!a3)
    return 0;
  v6 = (_BYTE *)result;
  LODWORD(result) = 0;
  while (1)
  {
    v7 = v6[-a4];
    v8 = a2[-a4];
    v9 = *a2;
    v10 = v9 - v8;
    if (v9 - v8 < 0)
      v10 = v8 - v9;
    v11 = v7 - v8;
    if (v7 - v8 < 0)
      v11 = v8 - v7;
    v12 = v9 + v7 - v8 - v8;
    if (v12 < 0)
      v12 = v8 - (v9 + v7 - v8);
    if (v11 <= v12)
      LOBYTE(v8) = *a2;
    if (v10 > v12 || v10 > v11)
      LOBYTE(v7) = v8;
    v14 = *v6 - v7;
    v15 = (char)v14;
    *a6 = v14;
    v16 = v14;
    v17 = 256 - v14;
    if (v15 >= 0)
      v17 = v16;
    result = (v17 + result);
    if (result > a5)
      break;
    ++v6;
    ++a2;
    ++a6;
    if (!--a3)
      return result;
  }
  return a5;
}

unint64_t avg_filter(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _BYTE *v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;

  if (!a3)
    return 0;
  v6 = (_BYTE *)result;
  LODWORD(result) = 0;
  while (1)
  {
    v7 = *a2++;
    v8 = *v6 - ((v7 + v6[-a4]) >> 1);
    v9 = (char)v8;
    *a6 = v8;
    v10 = v8;
    v11 = 256 - v8;
    if (v9 >= 0)
      v11 = v10;
    result = (v11 + result);
    if (result > a5)
      break;
    ++v6;
    ++a6;
    if (!--a3)
      return result;
  }
  return a5;
}

unint64_t up_filter(unint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  char *v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  int v13;

  if (!a3)
    return 0;
  v6 = (char *)result;
  LODWORD(result) = 0;
  while (1)
  {
    v8 = *v6++;
    v7 = v8;
    v9 = *a2++;
    v10 = v7 - v9;
    v11 = (char)v10;
    *a6 = v10;
    v12 = v10;
    v13 = 256 - v10;
    if (v11 >= 0)
      v13 = v12;
    result = (v13 + result);
    if (result > a5)
      break;
    ++a6;
    if (!--a3)
      return result;
  }
  return a5;
}

unint64_t sub_filter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _BYTE *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v6 = (_BYTE *)result;
  LODWORD(result) = 0;
  while (1)
  {
    v7 = *v6 - v6[-a4];
    v8 = (char)v7;
    *a6 = v7;
    v9 = v7;
    v10 = 256 - v7;
    if (v8 >= 0)
      v10 = v9;
    result = (v10 + result);
    if (result > a5)
      break;
    ++v6;
    ++a6;
    if (!--a3)
      return result;
  }
  return a5;
}

unint64_t none_filter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;

  if (!a3)
    return 0;
  v6 = (unsigned __int8 *)result;
  LODWORD(result) = 0;
  while (1)
  {
    v8 = *v6++;
    v7 = v8;
    *a6 = v8;
    v9 = 256 - v8;
    if ((v8 & 0x80u) != 0)
      v7 = v9;
    result = (v7 + result);
    if (result > a5)
      break;
    ++a6;
    if (!--a3)
      return result;
  }
  return a5;
}

void CGContextSetShadow(CGContextRef c, CGSize offset, CGFloat blur)
{
  CGFloat height;
  CGFloat width;
  CGColorSpace *DeviceRGB;
  CGColor *v8;
  CGSize v9;

  height = offset.height;
  width = offset.width;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v8 = CGColorCreate(DeviceRGB, CGContextSetShadow_components);
  CGColorSpaceRelease(DeviceRGB);
  v9.width = width;
  v9.height = height;
  CGContextSetShadowWithColor(c, v9, blur, v8);
  if (v8)
    CFRelease(v8);
}

void CGContextSetFocusRingWithColor(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  const CGRect *v10;
  CGSize size;
  const void *FocusRingWithColor;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  _BYTE v22[48];

  v19 = 0u;
  memset(&v22[16], 0, 32);
  DWORD2(v19) = 2;
  v20 = 0x3FE999999999999ALL;
  v21 = a9;
  *(_OWORD *)v22 = 0x3FE0000000000000uLL;
  v10 = &CGRectZero;
  if (a3)
    v10 = (const CGRect *)a3;
  size = v10->size;
  *(CGPoint *)&v22[8] = v10->origin;
  *(CGSize *)&v22[24] = size;
  *(_DWORD *)&v22[40] = -1;
  FocusRingWithColor = (const void *)CGStyleCreateFocusRingWithColor((uint64_t)&v19, a2, a3, a4, a5, a6, a7, a8);
  CGContextSetStyle(a1, FocusRingWithColor, v13, v14, v15, v16, v17, v18);
  if (FocusRingWithColor)
    CFRelease(FocusRingWithColor);
}

void CGContextBeginPage(CGContextRef c, const CGRect *mediaBox)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  CGContextRef v10;
  __CFDictionary *Mutable;
  uint64_t v13;
  void (*v14)(void);

  if (!c)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextBeginPage", (uint64_t)v10, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v10 = c;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)c + 22);
  *((_DWORD *)c + 22) = v9 + 1;
  if (v9)
  {
    CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", (uint64_t)mediaBox, v2, v3, v4, v5, v6, v7, (char)"CGContextBeginPage");
  }
  else
  {
    if (*((_DWORD *)c + 6) == 1)
      CGContextResetTopGState(c, (uint64_t)mediaBox, v2, v3, v4, v5, v6, v7);
    if (mediaBox)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CGCFDictionarySetRect(Mutable, CFSTR("MediaBox"), mediaBox->origin.x, mediaBox->origin.y, mediaBox->size.width, mediaBox->size.height);
    }
    else
    {
      Mutable = 0;
    }
    v13 = *((_QWORD *)c + 5);
    if (v13)
    {
      v14 = *(void (**)(void))(v13 + 152);
      if (v14)
        v14();
    }
    if (Mutable)
      CFRelease(Mutable);
  }
}

void CGContextEndPage(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  CGContextRef v9;
  uint64_t v10;
  void (*v11)(void);

  if (!c)
  {
    v9 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextEndPage", (uint64_t)v9, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v9 = c;
    goto LABEL_8;
  }
  v8 = *((_DWORD *)c + 22) - 1;
  *((_DWORD *)c + 22) = v8;
  if (v8)
  {
    CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", v1, v2, v3, v4, v5, v6, v7, (char)"CGContextEndPage");
  }
  else
  {
    v10 = *((_QWORD *)c + 5);
    if (v10)
    {
      v11 = *(void (**)(void))(v10 + 160);
      if (v11)
        v11();
    }
  }
}

void CGContextSynchronize(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  CGContextRef v9;

  if (!c)
  {
    v9 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSynchronize", (uint64_t)v9, v1, v2, v3, v4, v5, v6);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v9 = c;
    goto LABEL_7;
  }
  v7 = *((_QWORD *)c + 5);
  if (v7)
  {
    v8 = *(void (**)(void))(v7 + 168);
    if (v8)
      v8();
  }
}

void CGContextWait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;

  if (!a1)
  {
    v10 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextWait", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(void (**)(void))(v8 + 168);
    if (v9)
      v9();
  }
}

void CGContextSetFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(_QWORD *)(a1 + 56) = a2;
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFlush", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextDrawDisplayList(uint64_t a1, CFTypeRef cf, __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *CGDisplayList;
  uint64_t v15;

  if (!a1)
  {
    v15 = 0;
LABEL_14:
    handle_invalid_context((char)"CGContextDrawDisplayList", v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v15 = a1;
    goto LABEL_14;
  }
  if (cf
    && *((_QWORD *)cf + 74) != *((_QWORD *)cf + 75)
    && *((double *)cf + 11) != INFINITY
    && *((double *)cf + 12) != INFINITY)
  {
    if (a3)
    {
      CGDisplayList = CG::DisplayList::createCGDisplayList((uint64_t)cf, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!CGDisplayList)
        return;
    }
    else
    {
      CGDisplayList = CFRetain(cf);
    }
    CGDisplayListDelegateDrawDisplayList(*(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 96), (uint64_t)CGDisplayList, v10, v11, v12, v13);
    if (CGDisplayList)
      CFRelease(CGDisplayList);
  }
}

double CGContextGetRenderingResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return fmax(*(double *)(*(_QWORD *)(a1 + 112) + 8), *(double *)(*(_QWORD *)(a1 + 112) + 16));
  handle_invalid_context((char)"CGContextGetRenderingResolution", a1, a3, a4, a5, a6, a7, a8);
  return 0.0;
}

void CGContextSetRenderingResolution(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v9 = *(_QWORD *)(a1 + 112);
    v10 = 72.0;
    v11 = 432.0;
    if (a2 <= 432.0)
      v11 = a2;
    v12 = 432.0;
    if (a2 <= 432.0)
      v12 = a2;
    v13 = a2 < 72.0;
    if (a2 >= 72.0)
      v14 = v11;
    else
      v14 = 72.0;
    if (!v13)
      v10 = v12;
    *(double *)(v9 + 8) = v14;
    *(double *)(v9 + 16) = v10;
  }
  else
  {
    handle_invalid_context((char)"CGContextSetRenderingResolution", a1, a4, a5, a6, a7, a8, a9);
  }
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(_BYTE *)(*((_QWORD *)c + 14) + 81) = allowsAntialiasing;
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsAntialiasing", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsAntialiasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 81) != 0;
  handle_invalid_context((char)"CGContextGetAllowsAntialiasing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

BOOL CGContextGetAllowsFontAntialiasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 83) != 0;
  handle_invalid_context((char)"CGContextGetAllowsFontAntialiasing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontAntialiasing(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 112) + 83) = a2;
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontAntialiasing", v8, a3, a4, a5, a6, a7, a8);
}

BOOL CGContextGetAllowsFontSmoothing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 84) != 0;
  handle_invalid_context((char)"CGContextGetAllowsFontSmoothing", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontSmoothing(CGContextRef c, BOOL allowsFontSmoothing)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(_BYTE *)(*((_QWORD *)c + 14) + 84) = allowsFontSmoothing;
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSmoothing", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsFontSubpixelPositioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 85) != 0;
  handle_invalid_context((char)"CGContextGetAllowsFontSubpixelPositioning", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(_BYTE *)(*((_QWORD *)c + 14) + 85) = allowsFontSubpixelPositioning;
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSubpixelPositioning", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

BOOL CGContextGetAllowsFontSubpixelQuantization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 86) != 0;
  handle_invalid_context((char)"CGContextGetAllowsFontSubpixelQuantization", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t CGContextGetAllowedFontRenderingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return CGRenderingStateGetAllowedFontRenderingStyle(*(unsigned __int8 **)(a1 + 112));
  handle_invalid_context((char)"CGContextGetAllowedFontRenderingStyle", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

void CGContextSetAllowsDithering(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 112) + 82) = a2;
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsDithering", v8, a3, a4, a5, a6, a7, a8);
}

BOOL CGContextGetAllowsDithering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(a1 + 112) + 82) != 0;
  handle_invalid_context((char)"CGContextGetAllowsDithering", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

void CGContextClipToTextClipping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateClipToTextClipping(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextClipToTextClipping", v8, a3, a4, a5, a6, a7, a8);
}

uint64_t CGContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextGetColorSpace", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(uint64_t (**)(void))(v8 + 264);
    if (v9)
      return v9();
  }
  return 0;
}

uint64_t CGContextCopyDeviceColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  _QWORD *Cache;

  if (!a1)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextCopyDeviceColorSpace", v10, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_8;
  }
  v8 = *(_QWORD **)(a1 + 40);
  if (v8)
  {
    v9 = (uint64_t (*)(void))v8[4];
    if (v9)
      v8 = (_QWORD *)v9();
    else
      v8 = 0;
  }
  Cache = CGColorTransformGetCache(v8);
  if (!Cache)
    return 0;
  v11 = Cache[2];
  if (v11)
    CFRetain((CFTypeRef)Cache[2]);
  return v11;
}

uint64_t CGContextColorIsExtendedRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextColorIsExtendedRGB", v11, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_10;
  }
  result = *(_QWORD *)(a1 + 40);
  if (!result)
    return result;
  v9 = *(uint64_t (**)(void))(result + 264);
  if (v9)
  {
    result = v9();
    if (!result)
      return result;
    v10 = *(_QWORD *)(result + 24);
    if (*(_DWORD *)(v10 + 24) == 1)
      return *(unsigned __int8 *)(v10 + 13) != 0;
  }
  return 0;
}

void CGContextBeginPage2(CGContext *c, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  CGContextRef v10;
  uint64_t v11;
  void (*v12)(void);

  if (!c)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextBeginPage2", (uint64_t)v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v10 = c;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)c + 22);
  *((_DWORD *)c + 22) = v9 + 1;
  if (v9)
  {
    CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextBeginPage2");
  }
  else
  {
    if (*((_DWORD *)c + 6) == 1)
      CGContextResetTopGState(c, a2, a3, a4, a5, a6, a7, a8);
    v11 = *((_QWORD *)c + 5);
    if (v11)
    {
      v12 = *(void (**)(void))(v11 + 152);
      if (v12)
        v12();
    }
  }
}

void CGContextEndPage2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);

  if (!a1)
  {
    v9 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextEndPage2", v9, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v9 = a1;
    goto LABEL_8;
  }
  v8 = *(_DWORD *)(a1 + 88) - 1;
  *(_DWORD *)(a1 + 88) = v8;
  if (v8)
  {
    CGPostError((uint64_t)"%s: Don't nest calls to this function -- the results will not be what you expect.", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextEndPage2");
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
    {
      v11 = *(void (**)(void))(v10 + 160);
      if (v11)
        v11();
    }
  }
}

CGFloat CGContextGetDefaultUserSpaceToDeviceSpaceTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, CGAffineTransform *a8@<X8>)
{
  uint64_t v9;
  void (*v10)(void);
  CGFloat result;
  uint64_t v12;

  if (!a1)
  {
    v12 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextGetDefaultUserSpaceToDeviceSpaceTransform", v12, a2, a3, a4, a5, a6, a7);
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v12 = a1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = *(void (**)(void))(v9 + 40);
    if (v10)
    {
      v10();
      return result;
    }
  }
LABEL_9:
  *a8 = CGAffineTransformIdentity;
  return CGAffineTransformIdentity.tx;
}

CGSize CGContextConvertSizeToDeviceSpace(CGContextRef c, CGSize size)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double height;
  double width;
  double v10;
  double v11;
  double v12;
  CGAffineTransform v13;
  CGSize result;

  height = size.height;
  width = size.width;
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v13, c);
    v10 = height * v13.c;
    height = height * v13.d + v13.b * width;
    width = v10 + v13.a * width;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertSizeToDeviceSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v11 = width;
  v12 = height;
  result.height = v12;
  result.width = v11;
  return result;
}

CGSize CGContextConvertSizeToUserSpace(CGContextRef c, CGSize size)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double height;
  double width;
  double v10;
  double v11;
  double v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGSize result;

  height = size.height;
  width = size.width;
  memset(&v15, 0, sizeof(v15));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v15, c);
    v13 = v15;
    CGAffineTransformInvert(&v14, &v13);
    v10 = height * v14.c;
    height = height * v14.d + v14.b * width;
    width = v10 + v14.a * width;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertSizeToUserSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v11 = width;
  v12 = height;
  result.height = v12;
  result.width = v11;
  return result;
}

CGRect CGContextConvertRectToDeviceSpace(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v12;
  double v13;
  double v14;
  double v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  CGRect v18;
  CGRect v19;
  CGRect result;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  memset(&v17, 0, sizeof(v17));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v17, c);
    v16 = v17;
    v18.origin.x = x;
    v18.origin.y = y;
    v18.size.width = width;
    v18.size.height = height;
    v19 = CGRectApplyAffineTransform(v18, &v16);
    x = v19.origin.x;
    y = v19.origin.y;
    width = v19.size.width;
    height = v19.size.height;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertRectToDeviceSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v12 = x;
  v13 = y;
  v14 = width;
  v15 = height;
  result.size.height = v15;
  result.size.width = v14;
  result.origin.y = v13;
  result.origin.x = v12;
  return result;
}

CGRect CGContextConvertRectToUserSpace(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double height;
  double width;
  double y;
  __n64 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGRect result;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  v11.n64_u64[0] = *(unint64_t *)&rect.origin.x;
  memset(&v20, 0, sizeof(v20));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v20, c);
    v19 = v20;
    v11.n64_u64[0] = CGRectApplyInverseAffineTransform(&v19.a, v11, y, width, height).n64_u64[0];
    y = v12;
    width = v13;
    height = v14;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertRectToUserSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v15 = v11.n64_f64[0];
  v16 = y;
  v17 = width;
  v18 = height;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

uint64_t CGContextGetIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(unsigned int *)(a1 + 20);
  handle_invalid_context((char)"CGContextGetIdentifier", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGContextDrawsWithCorrectShadowOffsets()
{
  return 1;
}

const void *CGContextValidate(const void *result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  int v11;

  if (result)
  {
    v3 = (uint64_t)result;
    v10 = CFGetTypeID(result);
    if (_block_invoke_once_13941 != -1)
      dispatch_once(&_block_invoke_once_13941, &__block_literal_global_4_13942);
    result = 0;
    if (v10 == CGContextGetTypeID_type_id)
    {
      if (!a2)
        return (const void *)1;
      if (*(_DWORD *)(v3 + 16) == 1129601108)
      {
        v11 = *(_DWORD *)(v3 + 24);
      }
      else
      {
        handle_invalid_context((char)"CGContextGetType", v3, v4, v5, v6, v7, v8, v9);
        v11 = 0;
      }
      if (v11 == a2)
        return (const void *)1;
    }
  }
  return result;
}

void CGContextSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  unint64_t *v5;
  _DWORD *v6;

  if (a1 && a2 && a3)
  {
    v5 = (unint64_t *)(a1 + 176);
    if (!*(_QWORD *)(a1 + 176))
    {
      v6 = CGPropertiesCreate();
      while (!__ldxr(v5))
      {
        if (!__stxr((unint64_t)v6, v5))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v6);
    }
LABEL_11:
    CGPropertiesSetProperty(*v5, a2, a3);
  }
}

const void *CGContextGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 176)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

const UInt8 *CGContextGetContentMD5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFData *Property;
  uint64_t v12;
  const void *v13;
  const __CFData *v14;
  const char *v15;
  uint64_t v16;
  const __CFData *v17;
  CC_MD5_CTX *v18;
  char *BytePtr;
  CFIndex Length;
  unsigned __int8 md[8];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v15 = "CGContextCopyData";
    v16 = 0;
LABEL_12:
    handle_invalid_context((char)v15, v16, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 176);
  if (v9)
  {
    Property = (const __CFData *)CGPropertiesGetProperty(v9, CFSTR("CGContextMD5"));
    if (Property)
      return CFDataGetBytePtr(Property);
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v15 = "CGContextCopyData";
LABEL_11:
    v16 = a1;
    goto LABEL_12;
  }
  v12 = *(_QWORD *)(a1 + 176);
  if (!v12)
  {
LABEL_16:
    if (*(_DWORD *)(a1 + 24) != 4)
      return 0;
    v14 = CGBitmapContextCopyData(a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_18;
  }
  v13 = CGPropertiesGetProperty(v12, CFSTR("CGContextData"));
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
      goto LABEL_16;
    v15 = "CGContextGetType";
    goto LABEL_11;
  }
  v14 = (const __CFData *)CFRetain(v13);
LABEL_18:
  v17 = v14;
  if (v14)
  {
    *(_QWORD *)md = 0;
    v22 = 0;
    v18 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v18);
    BytePtr = (char *)CFDataGetBytePtr(v17);
    Length = CFDataGetLength(v17);
    if (v18)
    {
      md5_update(v18, BytePtr, Length);
      CC_MD5_Final(md, v18);
    }
    free(v18);
    Property = CFDataCreate(0, md, 16);
    CGContextSetProperty(a1, CFSTR("CGContextMD5"), Property);
    if (Property)
    {
      CFRelease(Property);
      CFRelease(v17);
      return CFDataGetBytePtr(Property);
    }
    CFRelease(v17);
  }
  return 0;
}

uint64_t CGContextGetDelegateName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);

  if (*(_DWORD *)(a1 + 16) == 1129601108)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(uint64_t (**)(void))(v8 + 224);
      if (v9)
        return v9();
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextGetDelegateName", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t CGContextGetOwnerIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      return *(unsigned int *)(v8 + 280);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetOwnerIdentity", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

BOOL CGPDFShadingType1Init(CGPDFDictionary *a1, _QWORD *a2, _OWORD *a3)
{
  CGPDFDictionary *v5;
  char *v6;
  __int128 v7;
  char *ShadingFunction;
  _OWORD v10[3];
  uint64_t v11;

  v5 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = (CGPDFDictionary *)*((_QWORD *)a1 + 5);
  if (CGColorSpaceGetType(a1) == 7)
  {
  }
  else
  {
    v6 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *a2 = v6;
    *a3 = CGPDFShadingType1Init_type1_callbacks;
    if (v5)
      v5 = (CGPDFDictionary *)*((_QWORD *)v5 + 3);
    if (!CGPDFDictionaryGetNumbers(v5, "Domain", (uint64_t)v6, (CGPDFArray *)4))
    {
      *(_OWORD *)v6 = xmmword_185004A20;
      *((_OWORD *)v6 + 1) = xmmword_185004A20;
    }
    if (CGPDFDictionaryGetNumbers(v5, "Matrix", (uint64_t)v10, (CGPDFArray *)6))
    {
      v7 = v10[1];
      *((_OWORD *)v6 + 2) = v10[0];
      *((_OWORD *)v6 + 3) = v7;
      *((_OWORD *)v6 + 4) = v10[2];
    }
    else
    {
      *(CGAffineTransform *)(v6 + 32) = CGAffineTransformIdentity;
    }
    *(_QWORD *)&v10[0] = 0;
    if (CGPDFDictionaryGetObject(v5, "Function", (CGPDFObjectRef *)v10))
    {
      ShadingFunction = CGPDFShadingCreateShadingFunction(*(uint64_t *)&v10[0], 2uLL);
      *((_QWORD *)v6 + 10) = ShadingFunction;
      return ShadingFunction != 0;
    }
  }
  return 0;
}

uint64_t type1_create_shading(CGColor *a1, uint64_t a2)
{
  const CGRect *v3;
  _QWORD *v4;
  const CGRect *v5;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  double v9;
  double x;
  double v11;
  double width;
  const CGFloat *Components;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  _OWORD v23[3];
  _QWORD v24[4];

  if (a1)
  {
    v3 = (const CGRect *)a1;
    v4 = (_QWORD *)*((_QWORD *)a1 + 5);
    a1 = (CGColor *)*((_QWORD *)a1 + 6);
    v5 = v3 + 2;
    p_y = &v3[2].origin.y;
    p_size = &v3[2].size;
    p_height = &v3[2].size.height;
  }
  else
  {
    v4 = 0;
    v5 = &CGRectNull;
    p_height = &CGRectNull.size.height;
    p_y = &CGRectNull.origin.y;
    p_size = &CGRectNull.size;
  }
  v9 = *p_height;
  x = v5->origin.x;
  v11 = *p_y;
  width = p_size->width;
  v24[0] = *(_QWORD *)&v5->origin.x;
  *(double *)&v24[1] = v11;
  *(double *)&v24[2] = width;
  *(double *)&v24[3] = v9;
  Components = CGColorGetComponents(a1);
  if (v9 == 1.79769313e308 && width == 1.79769313e308 && v11 == -8.98846567e307 && x == -8.98846567e307)
    v19 = 0;
  else
    v19 = v24;
  v20 = *(_QWORD **)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 48);
  v23[0] = *(_OWORD *)(a2 + 32);
  v23[1] = v21;
  v23[2] = *(_OWORD *)(a2 + 64);
  return CGShadingCreateCustom(v4, (uint64_t)Components, (uint64_t)v19, a2, v23, v20, v14, v15);
}

void type1_release_info_15194(int a1, _QWORD *a2)
{
  const void *v3;

  if (a2)
  {
    v3 = (const void *)a2[10];
    if (v3)
      CFRelease(v3);
    free(a2);
  }
}

void PDFClipMaskRelease(unsigned int **a1)
{
  unint64_t v3;

  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      if (a1[4])
      {
        v3 = 0;
        do
          CGClipMaskRelease(a1[v3++ + 5]);
        while (v3 < (unint64_t)a1[4]);
      }
      free(a1);
    }
  }
}

BOOL PDFClipMaskEqualToClipMask(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 == *(_QWORD *)(a2 + 32))
    {
      if (v4)
      {
        v5 = v4 - 1;
        v6 = (uint64_t *)(a2 + 40);
        v7 = (uint64_t *)(a1 + 40);
        do
        {
          v9 = *v7++;
          v8 = v9;
          v10 = *v6++;
          result = CGClipMaskEqualToClipMask(v8, v10);
          v12 = v5-- != 0;
        }
        while (result && v12);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFData *CPPDFCreateImageFromRawData(uint64_t a1, const __CFData *a2, char a3, _BOOL4 a4)
{
  CGPDFDictionary *v4;
  __CFData *v8;
  _BOOL4 v9;
  char v10;
  uint64_t v11;
  CGFloat *decode;
  size_t i;
  char v14;
  CGColorSpace *DeviceCMYK;
  CGDataProviderRef v16;
  CGDataProvider *v17;
  CGPDFInteger v18;
  CFIndex Length;
  CGPDFInteger v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  CGColorSpace *v24;
  CGPDFInteger v25;
  uint64_t v26;
  CGPDFInteger v27;
  CGPDFInteger v28;
  BOOL v29;
  __CFData *v30;
  uint64_t v31;
  CGPDFReal v33;
  CGColorSpaceRef space;
  CGPDFBoolean v35[8];
  CGPDFBoolean v36;
  CGPDFObjectRef v37;
  CGPDFInteger v38;
  CGPDFInteger v39;
  CGPDFInteger value;

  if (!a1)
    return 0;
  v4 = *(CGPDFDictionary **)(a1 + 48);
  if (!v4)
    return 0;
  value = 0;
  if (!CGPDFDictionaryGetInteger(v4, "W", &value) && !CGPDFDictionaryGetInteger(v4, "Width", &value))
    return 0;
  v39 = 0;
  if (!CGPDFDictionaryGetInteger(v4, "H", &v39) && !CGPDFDictionaryGetInteger(v4, "Height", &v39))
    return 0;
  v38 = 0;
  if (!CGPDFDictionaryGetInteger(v4, "BPC", &v38) && !CGPDFDictionaryGetInteger(v4, "BitsPerComponent", &v38))
    v38 = 0;
  v37 = 0;
  if (!CGPDFDictionaryGetObject(v4, "CS", &v37) && !CGPDFDictionaryGetObject(v4, "ColorSpace", &v37))
    v37 = 0;
  if ((a3 & 1) == 0)
  {
    v35[0] = 0;
    a4 = (CGPDFDictionaryGetBoolean(v4, "IM", v35) || CGPDFDictionaryGetBoolean(v4, "ImageMask", v35)) && v35[0] != 0;
  }
  v36 = 0;
  if (!CGPDFDictionaryGetBoolean(v4, "I", &v36) && !CGPDFDictionaryGetBoolean(v4, "Interpolate", &v36))
    v36 = 0;
  *(_QWORD *)v35 = 0;
  v9 = CGPDFDictionaryGetArray(v4, "D", (CGPDFArrayRef *)v35)
    || CGPDFDictionaryGetArray(v4, "Decode", (CGPDFArrayRef *)v35);
  space = 0;
  if (v37)
    v10 = a4;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
    CreateColorSpaceFromInlineObject((uint64_t)v37, &space);
  if (!v9)
  {
    decode = 0;
    v11 = 0;
    goto LABEL_50;
  }
  if (*(_QWORD *)v35)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v35 + 16);
    if (v11)
    {
      decode = (CGFloat *)malloc_type_malloc(8 * v11, 0x100004000313F17uLL);
      for (i = 0; i != v11; ++i)
      {
        v33 = 0.0;
        CGPDFArrayGetNumber(*(CGPDFArrayRef *)v35, i, &v33);
        decode[i] = v33;
      }
      goto LABEL_39;
    }
  }
  else
  {
    v11 = 0;
  }
  decode = 0;
LABEL_39:
  if (space)
    v14 = 1;
  else
    v14 = a4;
  if ((v14 & 1) == 0)
  {
    switch(v11)
    {
      case 8:
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 6:
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 2:
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        goto LABEL_50;
    }
    space = DeviceCMYK;
  }
LABEL_50:
  v16 = CGDataProviderCreateWithCFData(a2);
  if (v16)
  {
    v17 = v16;
    if (a4)
    {
      v38 = 1;
      v18 = value;
      Length = CFDataGetLength(a2);
      v20 = v39 * value * v38;
      v22 = v20 + 7;
      v21 = v20 < -7;
      v23 = v20 + 14;
      if (!v21)
        v23 = v22;
      if (Length < v23 >> 3)
      {
        v8 = 0;
LABEL_70:
        CGDataProviderRelease(v17);
        goto LABEL_71;
      }
      v31 = v18 + 7;
      if (v18 < -7)
        v31 = v18 + 14;
      v30 = mask_create(value, v39, v38, v38, v31 >> 3, v17, 0, v36 != 0, 4);
    }
    else
    {
      v8 = 0;
      v24 = space;
      if (!space)
        goto LABEL_70;
      v25 = v38;
      if (v38 < 1)
        goto LABEL_70;
      v26 = *(_QWORD *)(*((_QWORD *)space + 3) + 40);
      v27 = value;
      v28 = CFDataGetLength(a2);
      v8 = 0;
      v29 = v11 == 2 * v26 || decode == 0;
      if (!v29 || value * v26 * v39 * v38 / 8 > v28)
        goto LABEL_70;
      v30 = CGImageCreate(value, v39, v38, v25 * v26, vcvtps_u32_f32((float)(unint64_t)(v25 * v26 * v27) * 0.125), v24, 0, v17, decode, v36 != 0, kCGRenderingIntentDefault);
    }
    v8 = v30;
    goto LABEL_70;
  }
  v8 = 0;
LABEL_71:
  if (space)
    CGColorSpaceRelease(space);
  free(decode);
  return v8;
}

uint64_t CPPDFCreateJPEGImageFromImageStream(uint64_t a1, CFDataRef theData, CGImage **a3, CFDataRef *a4)
{
  const UInt8 *BytePtr;
  int v9;
  CGPDFInteger v10;
  uint64_t result;
  const void *v12;
  CGPDFDictionary *v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  CGImage *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  CGColorSpace *ColorSpace;
  CGBitmapInfo BitmapInfo;
  char *DataProviderInternal;
  BOOL shouldInterpolate;
  CGColorRenderingIntent intent;
  CGImageRef v25;
  CFMutableDataRef v26;
  uint64_t v27;
  const void *v28;
  char v29;
  size_t v30;
  size_t v31;
  CGPDFInteger v32;
  CGPDFDictionaryRef value;

  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  if (__PAIR64__(BytePtr[1], *BytePtr) == 0xD8000000FFLL
    && BytePtr[2] == 255
    && BytePtr[3] == 238
    && !BytePtr[4]
    && BytePtr[5] == 14)
  {
    v9 = 0;
    v10 = BytePtr[17];
  }
  else
  {
    v10 = -1;
    v9 = 1;
    if (!a3 && a4)
    {
      *a4 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theData);
      return 1;
    }
  }
  if (CPPDFCreateJPEGImageFromImageStream_predicate != -1)
    dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate, &__block_literal_global_15239);
  result = CPPDFCreateJPEGImageFromImageStream_f(theData, 0);
  if (result)
  {
    v12 = (const void *)result;
    if (v9)
    {
      if (a1)
        v13 = *(CGPDFDictionary **)(a1 + 48);
      else
        v13 = 0;
      value = 0;
      if (CGPDFDictionaryGetDictionary(v13, "DecodeParms", &value))
      {
        v32 = 0;
        if (CGPDFDictionaryGetInteger(value, "ColorTransform", &v32))
          v10 = v32;
        else
          v10 = -1;
      }
      else
      {
        v10 = -1;
      }
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = Mutable;
    if ((v10 & 0x8000000000000000) == 0)
      CGCFDictionarySetInteger(Mutable, CFSTR("kCGImageSourceColorTransform"), v10);
    if (CPPDFCreateJPEGImageFromImageStream_predicate_20 != -1)
      dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_20, &__block_literal_global_22_15243);
    v16 = (CGImage *)CPPDFCreateJPEGImageFromImageStream_f_19(v12, 0, v15);
    CFRelease(v12);
    CFRelease(v15);
    if (v16)
    {
      if (CGImageGetDecode(v16))
      {
        v17 = *((_QWORD *)v16 + 7);
        v30 = *((_QWORD *)v16 + 6);
        v31 = *((_QWORD *)v16 + 5);
        v18 = *((_QWORD *)v16 + 8);
        v19 = *((_QWORD *)v16 + 9);
        ColorSpace = CGImageGetColorSpace(v16);
        BitmapInfo = CGImageGetBitmapInfo(v16);
        DataProviderInternal = CGImageGetDataProviderInternal((char *)v16, 0);
        shouldInterpolate = CGImageGetShouldInterpolate(v16);
        intent = CGImageGetRenderingIntent(v16);
        v25 = CGImageCreate(v31, v30, v17, v18, v19, ColorSpace, BitmapInfo, (CGDataProviderRef)DataProviderInternal, CPPDFCreateJPEGImageFromImageStream_decode, shouldInterpolate, intent);
        CFRelease(v16);
        v16 = v25;
      }
      v26 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (CPPDFCreateJPEGImageFromImageStream_predicate_25 != -1)
        dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_25, &__block_literal_global_27_15244);
      v27 = CPPDFCreateJPEGImageFromImageStream_f_24(v26, CFSTR("public.jpeg"), 1, 0);
      if (v27)
      {
        v28 = (const void *)v27;
        if (CPPDFCreateJPEGImageFromImageStream_predicate_32 != -1)
          dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_32, &__block_literal_global_34_15246);
        CPPDFCreateJPEGImageFromImageStream_f_31(v28, v16, 0);
        if (CPPDFCreateJPEGImageFromImageStream_predicate_37 != -1)
          dispatch_once(&CPPDFCreateJPEGImageFromImageStream_predicate_37, &__block_literal_global_39_15247);
        v29 = CPPDFCreateJPEGImageFromImageStream_f_36(v28);
        CFRelease(v28);
        if ((v29 & 1) != 0)
        {
          if (a3)
          {
            *a3 = v16;
          }
          else if (v16)
          {
            CFRelease(v16);
          }
          if (a4)
            *a4 = v26;
          else
            CFRelease(v26);
          return 1;
        }
      }
      if (v16)
        CFRelease(v16);
      CFRelease(v26);
    }
    return 0;
  }
  return result;
}

CGPDFStream *CPPDFCreateImageFromStream(CGPDFStream *result, char a2, _BOOL4 a3)
{
  uint64_t v5;
  CGPDFStream *v6;
  CFDictionaryRef v7;
  const void *v8;
  CGImage *v9;
  CGPDFDataFormat format;

  if (result)
  {
    v5 = (uint64_t)result;
    format = CGPDFDataFormatRaw;
    result = CGPDFStreamCopyData(result, &format);
    if (result)
    {
      v6 = result;
      v9 = 0;
      if (format)
      {
        if (format == CGPDFDataFormatJPEG2000)
        {
          v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kCGImageSourceTypeIdentifierHint, (const void **)&kUTTypeJPEG2000, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (CPPDFCreateImageFromStream_predicate != -1)
            dispatch_once(&CPPDFCreateImageFromStream_predicate, &__block_literal_global_42_15267);
          v8 = (const void *)CPPDFCreateImageFromStream_f(v6, v7);
          CFRelease(v7);
          if (v8)
          {
            if (CPPDFCreateImageFromStream_predicate_44 != -1)
              dispatch_once(&CPPDFCreateImageFromStream_predicate_44, &__block_literal_global_46_15268);
            v9 = (CGImage *)CPPDFCreateImageFromStream_f_43(v8, 0, 0);
            CFRelease(v8);
          }
        }
        else if (format == CGPDFDataFormatJPEGEncoded)
        {
          CPPDFCreateJPEGImageFromImageStream(v5, result, &v9, 0);
        }
      }
      else
      {
        v9 = CPPDFCreateImageFromRawData(v5, result, a2, a3);
      }
      CFRelease(v6);
      return v9;
    }
  }
  return result;
}

CGPDFStream *CPPDFCreateMaskingImageFromStream(CGPDFStream *result)
{
  CGPDFDictionary *v1;
  CGPDFStream *v2;
  _BOOL4 v3;
  CGPDFStreamRef value;

  if (result)
  {
    v1 = (CGPDFDictionary *)*((_QWORD *)result + 6);
    if (v1)
    {
      value = 0;
      if (CGPDFDictionaryGetStream(v1, "SMask", &value))
      {
        v2 = value;
        v3 = 0;
        return CPPDFCreateImageFromStream(v2, 1, v3);
      }
      if (CGPDFDictionaryGetStream(v1, "Mask", &value))
      {
        v2 = value;
        v3 = 1;
        return CPPDFCreateImageFromStream(v2, 1, v3);
      }
    }
    return 0;
  }
  return result;
}

_QWORD *CPPDFCreateMaskingColorsFromStream(uint64_t a1, _QWORD *a2)
{
  CGPDFDictionary *v2;
  _QWORD *v4;
  uint64_t v5;
  size_t i;
  uint64_t v8;
  CGPDFArrayRef value;

  if (!a1)
    return 0;
  v2 = *(CGPDFDictionary **)(a1 + 48);
  if (!v2)
    return 0;
  value = 0;
  v4 = 0;
  if (CGPDFDictionaryGetArray(v2, "Mask", &value))
  {
    if (value)
    {
      v5 = *((_QWORD *)value + 2);
      if (!a2)
        goto LABEL_7;
    }
    else
    {
      v5 = 0;
      if (!a2)
      {
LABEL_7:
        v4 = malloc_type_malloc(8 * v5, 0x100004000313F17uLL);
        if (v5)
        {
          for (i = 0; i != v5; ++i)
          {
            v8 = 0;
            CGPDFArrayGetNumber(value, i, (CGPDFReal *)&v8);
            v4[i] = v8;
          }
        }
        return v4;
      }
    }
    *a2 = v5;
    goto LABEL_7;
  }
  return v4;
}

uint64_t __get_cache_block_invoke_15282()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  cache_attributes_t attrs;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  get_cache_colorspace_cache = (uint64_t)malloc_type_calloc(1uLL, 0x48uLL, 0x1020040C6685353uLL);
  if (!get_cache_colorspace_cache)
    _CGHandleAssert("get_cache_block_invoke", 111, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpaceFromICCDataCache.c", "colorspace_cache != NULL", "colorspace cache missing", v0, v1, v2, v8);
  v10.__sig = 0;
  *(_QWORD *)v10.__opaque = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  pthread_mutex_init((pthread_mutex_t *)get_cache_colorspace_cache, &v10);
  pthread_mutexattr_destroy(&v10);
  attrs = *(cache_attributes_t *)byte_1E16602F8;
  v3 = cache_create("com.apple.CoreGraphics.colorspace_from_ICC_data_cache", &attrs, (cache_t **)(get_cache_colorspace_cache + 64));
  if (v3)
    _CGHandleAssert("get_cache_block_invoke", 133, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpaceFromICCDataCache.c", "cache_error == 0", "cache creation failed %d", v4, v5, v6, v3);
  return cache_set_count_hint();
}

void colorspace_from_ICC_data_data_key_release(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t colorsync_smart_null_15295()
{
  return 0;
}

const void *__CGPDFContextDelegateCreate(CGDataConsumerRef a1, _OWORD *a2, const __CFDictionary *a3)
{
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  __int128 v16;
  const __CFAllocator *v17;
  CFMutableDictionaryRef v18;
  __int128 v19;
  const void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const __CFBoolean *Value;
  const __CFBoolean *v29;
  CFTypeID v30;
  const __CFBoolean *v31;
  const __CFBoolean *v32;
  CFTypeID v33;
  uint64_t v34;
  CFMutableDictionaryRef v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  char v40;
  const void *v41;
  const void *v42;
  CFTypeID v43;
  char v44;
  int v45;
  char version;
  int Float;
  double v48;
  char v49;
  int v50;
  char v51;
  const void *v52;
  const void *v53;
  const __CFData *v54;
  const __CFData *v55;
  const __CFData *v56;
  const __CFBoolean *v57;
  const __CFBoolean *v58;
  char *v59;
  const __CFString *v60;
  const __CFString *v61;
  char *v62;
  const void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  FILE *TempFile;
  CGDataConsumerRef v68;
  _QWORD *v69;
  _QWORD *v70;
  CFTypeRef v71;
  PDFDocumentPrivate *default_rgb_color_space;
  PDFDocumentPrivate *v73;
  uint64_t (*v74)(PDFDocumentPrivate *);
  const void *v75;
  __CFDictionary *v76;
  __CFDictionary *v77;
  CFDictionaryRef v78;
  CFDictionaryRef v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const void *v105;
  _BYTE **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const __CFNumber *v113;
  const void *v114;
  const void *v115;
  int v116;
  const void *v117;
  const void *v118;
  int *v119;
  int v120;
  _DWORD *v121;
  int v122;
  int v123;
  int v124;
  const __CFNumber *v125;
  int32x4_t v126;
  int32x4_t v127;
  unsigned int v128;
  int8x16_t v129;
  const __CFNumber *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  const void *v144;
  const void *v145;
  int v146;
  unsigned int v147;
  const void *v148;
  const void *v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  int8x8_t v157;
  int v158;
  int v159;
  size_t v160;
  size_t v161;
  unint64_t v162;
  uint64_t v163;
  size_t v164;
  size_t v165;
  _QWORD *RC4;
  uint64_t v167;
  uint64_t i;
  _BYTE *v169;
  unsigned __int8 *v170;
  uint64_t v171;
  char v172;
  _QWORD *v173;
  __int128 v174;
  uint64_t ID;
  unsigned int v176;
  unint64_t v177;
  size_t v178;
  size_t v179;
  unint64_t v180;
  CC_MD5_CTX *v181;
  uint64_t j;
  uint64_t v183;
  unint64_t v184;
  CC_MD5_CTX *v185;
  const void *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t k;
  __int128 *p_valuePtr;
  char *v191;
  uint64_t v192;
  char v193;
  _QWORD *v194;
  BOOL v195;
  _BYTE *exception;
  std::logic_error *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::logic_error *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  CFTypeID v206;
  CFTypeID v207;
  int v208;
  const void *v209;
  const __CFAllocator *v210;
  int *v211;
  void *v212;
  const __CFData *theData;
  int theDataa;
  const __CFBoolean *BOOLean;
  int v216;
  void *values[2];
  __int128 v218;
  unsigned __int8 v219[16];
  _BYTE data[16];
  unsigned __int8 md[16];
  __int128 valuePtr;
  __int128 v223;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint64_t v225;
  CFRange v226;
  CFRange v227;
  CFRange v228;

  v225 = *MEMORY[0x1E0C80C00];
  v6 = (char *)malloc_type_calloc(1uLL, 0x270uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6)
    return 0;
  *(_QWORD *)v6 = 0x100000001;
  *((_DWORD *)v6 + 2) = 3;
  v6[72] = 0;
  v7 = (unsigned int *)malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v7)
    goto LABEL_8;
  *v7 = 1;
  *((_QWORD *)v7 + 1) = v6;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *((_QWORD *)v7 + 2) = Mutable;
  if (!Mutable)
    goto LABEL_7;
  v16 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 16);
  *(_OWORD *)&keyCallBacks.version = *MEMORY[0x1E0C9B390];
  *(_OWORD *)&keyCallBacks.release = v16;
  keyCallBacks.equal = 0;
  keyCallBacks.hash = 0;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &keyCallBacks, 0);
  *((_QWORD *)v7 + 3) = v18;
  if (!v18)
  {
LABEL_7:
    PDFMetaSetRelease(v7);
LABEL_8:
    *((_QWORD *)v6 + 5) = 0;
LABEL_9:
    PDFDocumentRelease((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  *((_QWORD *)v6 + 5) = v7;
  v6[256] = 0;
  *((_DWORD *)v6 + 80) = 1;
  if (a2)
  {
    v19 = a2[1];
    *((_OWORD *)v6 + 6) = *a2;
    *((_OWORD *)v6 + 7) = v19;
  }
  else
  {
    if (CGCFDictionaryGetRect(a3, CFSTR("MediaBox"), (UInt8 *)&keyCallBacks))
    {
      v22 = *(_OWORD *)&keyCallBacks.version;
      v23 = *(_OWORD *)&keyCallBacks.release;
    }
    else
    {
      v22 = defaultMediaBox;
      v23 = unk_184F7D158;
    }
    *((_OWORD *)v6 + 6) = v22;
    *((_OWORD *)v6 + 7) = v23;
  }
  *((CGRect *)v6 + 4) = CGRectNull;
  if (CGCFDictionaryGetRect(a3, CFSTR("CropBox"), (UInt8 *)&keyCallBacks))
  {
    v24 = *(_OWORD *)&keyCallBacks.release;
    *((_OWORD *)v6 + 8) = *(_OWORD *)&keyCallBacks.version;
    *((_OWORD *)v6 + 9) = v24;
  }
  *((CGRect *)v6 + 5) = CGRectNull;
  if (CGCFDictionaryGetRect(a3, CFSTR("BleedBox"), (UInt8 *)&keyCallBacks))
  {
    v25 = *(_OWORD *)&keyCallBacks.release;
    *((_OWORD *)v6 + 10) = *(_OWORD *)&keyCallBacks.version;
    *((_OWORD *)v6 + 11) = v25;
  }
  *((CGRect *)v6 + 6) = CGRectNull;
  if (CGCFDictionaryGetRect(a3, CFSTR("TrimBox"), (UInt8 *)&keyCallBacks))
  {
    v26 = *(_OWORD *)&keyCallBacks.release;
    *((_OWORD *)v6 + 12) = *(_OWORD *)&keyCallBacks.version;
    *((_OWORD *)v6 + 13) = v26;
  }
  *((CGRect *)v6 + 7) = CGRectNull;
  if (CGCFDictionaryGetRect(a3, CFSTR("ArtBox"), (UInt8 *)&keyCallBacks))
  {
    v27 = *(_OWORD *)&keyCallBacks.release;
    *((_OWORD *)v6 + 14) = *(_OWORD *)&keyCallBacks.version;
    *((_OWORD *)v6 + 15) = v27;
  }
  if (a3)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("CGPDFContextCreateLinearizedPDF"));
    if (Value)
    {
      v29 = Value;
      v30 = CFGetTypeID(Value);
      if (v30 == CFBooleanGetTypeID())
        v6[90] = CFBooleanGetValue(v29) != 0;
    }
    v31 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("CGPDFContextCreatePDFA"));
    if (v31)
    {
      v32 = v31;
      v33 = CFGetTypeID(v31);
      if (v33 == CFBooleanGetTypeID())
        v6[91] = CFBooleanGetValue(v32) != 0;
    }
  }
  v34 = operator new();
  *(_QWORD *)v34 = v6;
  *(_QWORD *)(v34 + 8) = 1;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)(v34 + 64) = 0u;
  v35 = CFDictionaryCreateMutable(v17, 0, 0, 0);
  *(_QWORD *)(v34 + 16) = v35;
  if (!v35)
  {
    exception = __cxa_allocate_exception(1uLL);
    *exception = 0;
    __cxa_throw(exception, MEMORY[0x1E0DE4EC0], 0);
  }
  v36 = (_QWORD *)operator new();
  *v36 = 0;
  v36[1] = 0;
  v36[2] = 0;
  *(_QWORD *)(v34 + 24) = v36;
  *((_QWORD *)v6 + 57) = v34;
  v37 = operator new();
  *(_QWORD *)v37 = v6;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  v38 = operator new(0x10uLL);
  *v38 = 0;
  v38[1] = 0;
  *(_QWORD *)(v37 + 16) = v38;
  *(_QWORD *)(v37 + 24) = v38 + 2;
  *(_QWORD *)(v37 + 32) = v38 + 2;
  v39 = didHandleDefaults;
  *((_QWORD *)v6 + 58) = v37;
  if (v39 == 1)
  {
    v6[89] = shouldUsePNGPredictors;
  }
  else
  {
    pthread_once(&once_15012, (void (*)(void))handleDefaults);
    v40 = didHandleDefaults;
    v6[89] = shouldUsePNGPredictors;
    if ((v40 & 1) == 0)
      pthread_once(&once_15012, (void (*)(void))handleDefaults);
  }
  v6[73] = shouldCompress;
  if (a3)
  {
    v41 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextShouldCompress"));
    if (v41)
    {
      v42 = v41;
      v43 = CFGetTypeID(v41);
      if (v43 == CFBooleanGetTypeID())
        v6[73] = v42 == (const void *)*MEMORY[0x1E0C9AE50];
    }
  }
  if ((didHandleDefaults & 1) == 0)
    pthread_once(&once_15012, (void (*)(void))handleDefaults);
  v44 = shouldOutputAllImagesAsJPEG;
  LOBYTE(keyCallBacks.version) = 0;
  v45 = CGCFDictionaryGetBoolean(a3, CFSTR("kCGPDFContextShouldOutputAllImagesAsJPEG"), (BOOL *)&keyCallBacks);
  version = keyCallBacks.version;
  if (!v45)
    version = v44;
  v6[74] = version;
  keyCallBacks.version = 0;
  Float = CGCFDictionaryGetFloat(a3, CFSTR("kCGPDFContextJPEGCompressionQuality"), &keyCallBacks);
  v48 = *(double *)&keyCallBacks.version;
  if (!Float)
    v48 = 0.9;
  *((double *)v6 + 10) = v48;
  if ((didHandleDefaults & 1) == 0)
    pthread_once(&once_15012, (void (*)(void))handleDefaults);
  v49 = shouldOptimizeImagesForScreenDisplay;
  LOBYTE(keyCallBacks.version) = 0;
  v50 = CGCFDictionaryGetBoolean(a3, CFSTR("kCGPDFContextShouldOptimizeImagesForScreenDisplay"), (BOOL *)&keyCallBacks);
  v51 = keyCallBacks.version;
  if (!v50)
    v51 = v49;
  v6[88] = v51;
  if (!a3)
    goto LABEL_77;
  v52 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionCipher"));
  v53 = v52;
  if (v52)
  {
    if (CFEqual(v52, CFSTR("kCGPDFContextEncryptionCipherNone")))
      goto LABEL_77;
  }
  v54 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionHashedOwnerPassword"));
  v55 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionHashedUserPassword"));
  v56 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionKey"));
  v57 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptMetadata"));
  v58 = v57;
  if (v54 || v55 || v56 || v57)
  {
    v59 = "Invalid combination of encyption options";
    if (v54 && v55 && v56 && v58)
    {
      if (CFDataGetLength(v54) == 32 && CFDataGetLength(v55) == 32 && CFDataGetLength(v56) == 16)
      {
        theData = v56;
        BOOLean = v58;
        v216 = 1;
        goto LABEL_73;
      }
      v59 = "Unexpected data size for encryption parameter(s)";
    }
    pdf_error(v59);
  }
  v60 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextOwnerPassword"));
  if (!v60 || !get_password(v60, (UInt8 *)values))
    goto LABEL_77;
  v61 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextUserPassword"));
  if (!v61)
    v61 = &stru_1E1664C98;
  if (!get_password(v61, (UInt8 *)&keyCallBacks))
  {
LABEL_77:
    v62 = 0;
    goto LABEL_78;
  }
  theData = v56;
  BOOLean = v58;
  v216 = 0;
LABEL_73:
  v62 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v62)
    goto LABEL_78;
  *(_QWORD *)v62 = v6;
  *((_QWORD *)v62 + 2) = CFRetain(a3);
  v63 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionCipher"));
  if (!v63)
    goto LABEL_109;
  v64 = v63;
  if (!CFEqual(v63, CFSTR("kCGPDFContextEncryptionCipherAESv2")))
  {
    if (CFEqual(v64, CFSTR("kCGPDFContextEncryptionCipherAESv3")))
    {
      v65 = 256;
      goto LABEL_120;
    }
LABEL_109:
    *(_QWORD *)&valuePtr = 0;
    v113 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionKeyLength"));
    if (v113)
    {
      if (CFNumberGetValue(v113, kCFNumberIntType, &valuePtr))
      {
        v65 = valuePtr;
        if ((_QWORD)valuePtr)
        {
LABEL_117:
          if ((unint64_t)(v65 - 40) > 0x58 || (v65 & 7) != 0)
          {
            pdf_error("invalid encryption key length: %zu.", v65);
            v65 = 40;
          }
          goto LABEL_120;
        }
      }
      else
      {
        *(_QWORD *)&valuePtr = 0;
      }
    }
    if ((didHandleDefaults & 1) == 0)
      pthread_once(&once_15012, (void (*)(void))handleDefaults);
    v65 = securityHandlerKeyLength;
    *(_QWORD *)&valuePtr = securityHandlerKeyLength;
    goto LABEL_117;
  }
  v65 = 128;
LABEL_120:
  *((_QWORD *)v62 + 16) = v65;
  v114 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionCipher"));
  if (!v114)
    goto LABEL_125;
  v115 = v114;
  if (CFEqual(v114, CFSTR("kCGPDFContextEncryptionCipherAESv2")))
  {
    v116 = 4;
    goto LABEL_126;
  }
  if (CFEqual(v115, CFSTR("kCGPDFContextEncryptionCipherAESv3")))
    v116 = 5;
  else
LABEL_125:
    v116 = 2;
LABEL_126:
  *((_DWORD *)v62 + 2) = v116;
  v117 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionCipher"));
  if (v117)
  {
    v118 = v117;
    if (CFEqual(v117, CFSTR("kCGPDFContextEncryptionCipherAESv2")))
    {
      *((_DWORD *)v62 + 3) = 4;
      v119 = (int *)(v62 + 12);
      v121 = v6 + 4;
      v120 = *((_DWORD *)v6 + 1);
      if (v120 >= 1)
      {
        if (v120 != 1 || *((int *)v6 + 2) >= 6)
          goto LABEL_142;
        v122 = 6;
LABEL_141:
        *((_DWORD *)v6 + 2) = v122;
LABEL_142:
        v124 = *v119;
        goto LABEL_143;
      }
      v122 = 6;
LABEL_140:
      *v121 = 1;
      goto LABEL_141;
    }
    if (CFEqual(v118, CFSTR("kCGPDFContextEncryptionCipherAESv3")))
    {
      *((_DWORD *)v62 + 3) = 5;
      v119 = (int *)(v62 + 12);
      v121 = v6 + 4;
      v123 = *((_DWORD *)v6 + 1);
      if (v123 >= 1)
      {
        if (v123 != 1 || *((int *)v6 + 2) >= 7)
          goto LABEL_142;
        v122 = 7;
        goto LABEL_141;
      }
      v122 = 7;
      goto LABEL_140;
    }
  }
  v124 = 3;
  *((_DWORD *)v62 + 3) = 3;
  v119 = (int *)(v62 + 12);
LABEL_143:
  LODWORD(valuePtr) = 0;
  *(_DWORD *)md = 0;
  v125 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextEncryptionPermissions"));
  v211 = v119;
  if (v125 && CFNumberGetValue(v125, kCFNumberSInt32Type, md))
  {
    v128 = *(_DWORD *)md & 0xFFFFFFFC;
    v126.i32[0] = 2;
    v127.i32[0] = v124;
    v129 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v127, v126), 0), (int8x16_t)xmmword_185005000, (int8x16_t)xmmword_185004FF0);
    if (v124 != 2)
      v128 = *(_DWORD *)md & 0xFFFFFF3C | 0xC0;
    goto LABEL_177;
  }
  v130 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("kCGPDFContextAccessPermissions"));
  if (!v130 || !CFNumberGetValue(v130, kCFNumberSInt32Type, &valuePtr))
  {
    *(_DWORD *)md = 0;
    v144 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextAllowsPrinting"));
    if (v144 && (v145 = v144, v207 = CFGetTypeID(v144), v207 == CFBooleanGetTypeID()))
    {
      v146 = *(_DWORD *)md;
      if (v145 != (const void *)*MEMORY[0x1E0C9AE50])
      {
        v208 = 0;
        v147 = *(_DWORD *)md & 0xFFFFFFFB;
LABEL_164:
        *(_DWORD *)md = v147 | 8;
        v148 = CFDictionaryGetValue(a3, CFSTR("kCGPDFContextAllowsCopying"));
        if (v148 && (v149 = v148, v206 = CFGetTypeID(v148), v206 == CFBooleanGetTypeID()))
        {
          v150 = *(_DWORD *)md;
          if (v149 != (const void *)*MEMORY[0x1E0C9AE50])
          {
            v151 = 0;
            v152 = *(_DWORD *)md & 0xFFFFFFEF;
LABEL_170:
            v153 = v208;
            if (v124 == 2)
            {
              v153 = 1;
              v151 = 1;
            }
            v154 = v152 | 0x3E0;
            v155 = v152 & 0xFFFFFC1F | 0x1E0;
            if (v151)
              v155 = v154;
            v156 = v155 | 0xC00;
            v128 = v155 & 0xFFFFF3FF | 0x400;
            if (v153)
              v128 = v156;
            goto LABEL_176;
          }
        }
        else
        {
          v150 = *(_DWORD *)md;
        }
        v152 = v150 | 0x10;
        v151 = 1;
        goto LABEL_170;
      }
    }
    else
    {
      v146 = *(_DWORD *)md;
    }
    v147 = v146 | 4;
    v208 = 1;
    goto LABEL_164;
  }
  if (v124 <= 2)
    _CGHandleAssert("get_permissions", 636, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/Encryption/PDFSecurityHandler.c", "revision > 2", "revision (%d) too old?", v131, v132, v133, v124);
  v134 = (16 * valuePtr) & 0x40 | (valuePtr >> 1) & 1 | (32 * ((valuePtr >> 4) & 1)) | valuePtr;
  v135 = ((_DWORD)valuePtr << 7) & 0x400 | (((valuePtr >> 1) & 1) << 11) | (((v134 >> 5) & 1) << 9);
  v136 = valuePtr | (2 * v134);
  v137 = *(_DWORD *)md & 0xFFFFFFF8 | (4 * ((valuePtr >> 1) & 1 | valuePtr & 1)) | 8;
  if ((valuePtr & 4) == 0)
    v137 = *(_DWORD *)md & 0xFFFFFFF0 | (4 * ((valuePtr >> 1) & 1 | valuePtr & 1)) & 0xFFFFFFF7;
  v138 = v137 & 0xFFFFFFCF;
  v139 = v137 | 0x10;
  if ((valuePtr & 0x10) != 0)
    v140 = v139;
  else
    v140 = v138;
  v141 = v140 & 0xFFFFFFDF | (v134 >> 1) & 0x20;
  v142 = v141 & 0xFFFFF03F | 0xC0;
  v143 = v141 | 0x1C0;
  if ((v136 & 0x80) == 0)
    v143 = v142;
  v128 = v135 | v143 & 0xFFFFF1FF;
LABEL_176:
  v129 = (int8x16_t)xmmword_185004FF0;
LABEL_177:
  v157 = vorr_s8(vorr_s8((int8x8_t)v128, *(int8x8_t *)v129.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL));
  *((_DWORD *)v62 + 6) = v157.i32[0] | v157.i32[1];
  v158 = v216;
  if (v216)
  {
    v226.location = 0;
    v226.length = 32;
    CFDataGetBytes(v54, v226, (UInt8 *)v62 + 28);
    v227.location = 0;
    v227.length = 32;
    CFDataGetBytes(v55, v227, (UInt8 *)v62 + 60);
    v228.location = 0;
    v228.length = 16;
    CFDataGetBytes(theData, v228, (UInt8 *)v62 + 92);
  }
  else
  {
    if (!LOBYTE(values[0]))
    {
      pdf_error("no owner password specified; substituting user password.");
      __strcpy_chk();
    }
    v159 = *v211;
    v160 = strlen((const char *)values);
    v209 = v53;
    if (v160 > 0x1F)
    {
      valuePtr = *(_OWORD *)values;
      v223 = v218;
    }
    else
    {
      v161 = v160;
      __memcpy_chk();
      memcpy((char *)&valuePtr + v161, &pad_13337, 32 - v161);
    }
    CGGetMD5DigestOfBytes(v219, (char *)&valuePtr, 0x20uLL);
    v162 = *((_QWORD *)v62 + 16);
    if (v159 >= 3)
    {
      v163 = 50;
      do
      {
        CGGetMD5DigestOfBytes(v219, (char *)v219, v162 >> 3);
        --v163;
      }
      while (v163);
    }
    __memcpy_chk();
    v164 = strlen((const char *)&keyCallBacks);
    v210 = v17;
    if (v164 > 0x1F)
    {
      valuePtr = *(_OWORD *)&keyCallBacks.version;
      v223 = *(_OWORD *)&keyCallBacks.release;
    }
    else
    {
      v165 = v164;
      __memcpy_chk();
      memcpy((char *)&valuePtr + v165, &pad_13337, 32 - v165);
    }
    RC4 = CGCryptorCreateRC4(md, v162 >> 3);
    CGCryptorProcessBytes((uint64_t)RC4, &valuePtr, 0x20uLL, &valuePtr, 0x20uLL, 0);
    CGCryptorRelease((uint64_t)RC4);
    if (v159 >= 3)
    {
      if (v162 >> 3 <= 1)
        v167 = 1;
      else
        v167 = v162 >> 3;
      for (i = 1; i != 20; ++i)
      {
        if (v162 >= 8)
        {
          v169 = data;
          v170 = md;
          v171 = v167;
          do
          {
            v172 = *v170++;
            *v169++ = v172 ^ i;
            --v171;
          }
          while (v171);
        }
        v173 = CGCryptorCreateRC4(data, v162 >> 3);
        CGCryptorProcessBytes((uint64_t)v173, &valuePtr, 0x20uLL, &valuePtr, 0x20uLL, 0);
        CGCryptorRelease((uint64_t)v173);
      }
    }
    v174 = v223;
    *(_OWORD *)(v62 + 28) = valuePtr;
    *(_OWORD *)(v62 + 44) = v174;
    ID = PDFDocumentGetID((uint64_t)v6, 0);
    v176 = *((_DWORD *)v62 + 6);
    v177 = *((_QWORD *)v62 + 16);
    v178 = strlen((const char *)&keyCallBacks);
    theDataa = *((_DWORD *)v62 + 3);
    v212 = (void *)ID;
    if (v178 > 0x1F)
    {
      valuePtr = *(_OWORD *)&keyCallBacks.version;
      v223 = *(_OWORD *)&keyCallBacks.release;
    }
    else
    {
      v179 = v178;
      __memcpy_chk();
      memcpy((char *)&valuePtr + v179, &pad_13337, 32 - v179);
    }
    v180 = v177 >> 3;
    v181 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v181);
    if (v181)
    {
      CC_MD5_Update(v181, &valuePtr, 0x20u);
      CC_MD5_Update(v181, v62 + 28, 0x20u);
    }
    for (j = 0; j != 4; ++j)
    {
      while (1)
      {
        data[0] = v176 >> (8 * j);
        if (v181)
          break;
        if (++j == 4)
          goto LABEL_209;
      }
      CC_MD5_Update(v181, data, 1u);
    }
    CC_MD5_Update(v181, v212, 0x10u);
    CC_MD5_Final(md, v181);
LABEL_209:
    free(v181);
    if (theDataa >= 3)
    {
      v183 = 50;
      do
      {
        CGGetMD5DigestOfBytes(md, (char *)md, v180);
        --v183;
      }
      while (v183);
    }
    memcpy(v62 + 92, md, v180);
    v184 = *((_QWORD *)v62 + 16);
    v185 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v185);
    if (v185)
    {
      CC_MD5_Update(v185, &pad_13337, 0x20u);
      v186 = (const void *)PDFDocumentGetID(*(_QWORD *)v62, 0);
      CC_MD5_Update(v185, v186, 0x10u);
      CC_MD5_Final(md, v185);
    }
    else
    {
      PDFDocumentGetID(*(_QWORD *)v62, 0);
    }
    free(v185);
    v187 = CGCryptorCreateRC4(v62 + 92, v184 >> 3);
    CGCryptorProcessBytes((uint64_t)v187, md, 0x10uLL, md, 0x10uLL, 0);
    CGCryptorRelease((uint64_t)v187);
    if (v184 >> 3 <= 1)
      v188 = 1;
    else
      v188 = v184 >> 3;
    for (k = 1; k != 20; ++k)
    {
      if (v184 >= 8)
      {
        p_valuePtr = &valuePtr;
        v191 = v62 + 92;
        v192 = v188;
        do
        {
          v193 = *v191++;
          *(_BYTE *)p_valuePtr = v193 ^ k;
          p_valuePtr = (__int128 *)((char *)p_valuePtr + 1);
          --v192;
        }
        while (v192);
      }
      v194 = CGCryptorCreateRC4(&valuePtr, v184 >> 3);
      CGCryptorProcessBytes((uint64_t)v194, md, 0x10uLL, md, 0x10uLL, 0);
      CGCryptorRelease((uint64_t)v194);
    }
    *(_OWORD *)(v62 + 60) = *(_OWORD *)md;
    *(_QWORD *)(v62 + 84) = 0;
    *(_QWORD *)(v62 + 76) = 0;
    v53 = v209;
    v17 = v210;
    v158 = 0;
  }
  if (v53
    && (CFEqual(v53, CFSTR("kCGPDFContextEncryptionCipherAESv2"))
     || CFEqual(v53, CFSTR("kCGPDFContextEncryptionCipherAESv3"))))
  {
    arc4random_buf(v62 + 108, 0x10uLL);
  }
  else
  {
    *(_QWORD *)(v62 + 116) = 0;
    *(_QWORD *)(v62 + 108) = 0;
  }
  if (v158)
    v195 = CFBooleanGetValue(BOOLean) != 0;
  else
    v195 = 1;
  v62[136] = v195;
LABEL_78:
  *((_QWORD *)v6 + 7) = v62;
  if (v6[90])
  {
    v66 = operator new();
    *(_QWORD *)v66 = v6;
    *(_OWORD *)(v66 + 24) = 0u;
    *(_QWORD *)(v66 + 216) = 0;
    *(_OWORD *)(v66 + 8) = 0u;
    *(_OWORD *)(v66 + 40) = 0u;
    *(_OWORD *)(v66 + 56) = 0u;
    *(_OWORD *)(v66 + 72) = 0u;
    *(_OWORD *)(v66 + 88) = 0u;
    *(_OWORD *)(v66 + 104) = 0u;
    *(_OWORD *)(v66 + 120) = 0u;
    *(_OWORD *)(v66 + 136) = 0u;
    *(_OWORD *)(v66 + 152) = 0u;
    *(_OWORD *)(v66 + 168) = 0u;
    *(_OWORD *)(v66 + 184) = 0u;
    *(_QWORD *)(v66 + 200) = 0;
    *(_QWORD *)(v66 + 208) = v66 + 216;
    *(_QWORD *)(v66 + 248) = 0;
    *(_QWORD *)(v66 + 240) = 0;
    *(_QWORD *)(v66 + 224) = 0;
    *(_QWORD *)(v66 + 232) = v66 + 240;
    *(_OWORD *)(v66 + 304) = 0u;
    *(_OWORD *)(v66 + 320) = 0u;
    *(_OWORD *)(v66 + 272) = 0u;
    *(_OWORD *)(v66 + 288) = 0u;
    *(_OWORD *)(v66 + 256) = 0u;
    TempFile = PDFLinearizer::createTempFile(0, v66 + 24);
    if (!TempFile)
    {
      v197 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(0, "tempFile", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 176, 0, v198, v199, v200, v205);
      std::logic_error::logic_error(v197, (const std::string *)&keyCallBacks);
      v197->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(v197, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    keyCallBacks.version = 1;
    keyCallBacks.retain = (CFDictionaryRetainCallBack)file_put_bytes;
    keyCallBacks.release = (CFDictionaryReleaseCallBack)file_flush_bytes;
    keyCallBacks.copyDescription = (CFDictionaryCopyDescriptionCallBack)file_set_position;
    keyCallBacks.equal = (CFDictionaryEqualCallBack)file_close;
    keyCallBacks.hash = 0;
    v68 = CGDataConsumerCreate(TempFile, (const CGDataConsumerCallbacks *)&keyCallBacks);
    *(_QWORD *)(v66 + 16) = v68;
    if (!v68)
    {
      v201 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(0, "_unlinearizedDataConsumer", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 179, 0, v202, v203, v204, v205);
      std::logic_error::logic_error(v201, (const std::string *)&keyCallBacks);
      v201->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(v201, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    *((_QWORD *)v6 + 65) = v66;
    if (a1)
    {
      CFRetain(a1);
      v68 = *(CGDataConsumerRef *)(*((_QWORD *)v6 + 65) + 16);
    }
    *((_QWORD *)v6 + 66) = a1;
    a1 = v68;
  }
  if (a1)
    CFRetain(a1);
  *((_QWORD *)v6 + 3) = a1;
  v69 = PDFWriterCreate(a1);
  *((_QWORD *)v6 + 4) = v69;
  if (!v69)
    goto LABEL_9;
  v69[1] = *((_QWORD *)v6 + 7);
  v70 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *v70 = v6;
  if (a3)
    v71 = CFRetain(a3);
  else
    v71 = 0;
  v70[1] = v71;
  v70[2] = 0;
  *((_QWORD *)v6 + 8) = v70;
  if (v6[91])
  {
    default_rgb_color_space = get_default_rgb_color_space((PDFDocument *)v6);
    if (default_rgb_color_space)
    {
      v73 = default_rgb_color_space;
      if (CGColorSpaceGetType(default_rgb_color_space) != 6
        && CGColorSpaceGetType(v73) != 11
        || (v74 = *(uint64_t (**)(PDFDocumentPrivate *))(*(_QWORD *)(*((_QWORD *)v73 + 3) + 104) + 24)) == 0
        || (v75 = (const void *)v74(v73)) == 0)
      {
        v75 = *(const void **)(*((_QWORD *)v73 + 3) + 72);
      }
      v76 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v76)
      {
        v77 = v76;
        CFDictionarySetValue(v76, CFSTR("S"), CFSTR("GTS_PDFA1"));
        CFDictionarySetValue(v77, CFSTR("OutputConditionIdentifier"), CFSTR("Custom"));
        CFDictionarySetValue(v77, CFSTR("Info"), v75);
        CFDictionarySetValue(v77, CFSTR("DestOutputProfile"), v73);
        keyCallBacks.version = (CFIndex)CFSTR("kCGPDFContextOutputIntent");
        values[0] = v77;
        v78 = CFDictionaryCreate(v17, (const void **)&keyCallBacks, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v78)
        {
          v79 = v78;
          *((_QWORD *)v6 + 6) = PDFOutputIntentCreate((uint64_t)v6, v78);
          CFRelease(v79);
        }
        CFRelease(v77);
      }
      goto LABEL_102;
    }
    goto LABEL_9;
  }
  *((_QWORD *)v6 + 6) = PDFOutputIntentCreate((uint64_t)v6, a3);
LABEL_102:
  *((_DWORD *)v6 + 136) = 0;
  *((_QWORD *)v6 + 63) = 0;
  *((_QWORD *)v6 + 64) = 0;
  *((_QWORD *)v6 + 62) = 0;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  v80 = operator new();
  *(_OWORD *)v80 = 0u;
  *(_OWORD *)(v80 + 16) = 0u;
  *(_DWORD *)(v80 + 32) = 1065353216;
  *((_QWORD *)v6 + 36) = v80;
  v81 = operator new();
  *(_OWORD *)v81 = 0u;
  *(_OWORD *)(v81 + 16) = 0u;
  *(_DWORD *)(v81 + 32) = 1065353216;
  *((_QWORD *)v6 + 37) = v81;
  v82 = operator new();
  *(_OWORD *)v82 = 0u;
  *(_OWORD *)(v82 + 16) = 0u;
  *(_DWORD *)(v82 + 32) = 1065353216;
  *((_QWORD *)v6 + 38) = v82;
  v90 = (_QWORD *)CGContextDelegateCreate((uint64_t)v6, v83, v84, v85, v86, v87, v88, v89);
  v20 = v90;
  if (v90)
  {
    CGContextDelegateSetCallbacks(v90, (uint64_t)&set_context_delegate_callbacks_callbacks, 11, v93, v94, v95, v96, v97);
    v98 = CGStyleFilterContextDelegateCreate((uint64_t)v20, 0);
    if (v98)
    {
      v105 = (const void *)v98;
      CFRelease(v20);
      v20 = v105;
    }
    *((_QWORD *)v6 + 2) = v20;
    v106 = (_BYTE **)*((_QWORD *)v6 + 4);
    PDFWriterPrintf(v106, (uint64_t)"%%PDF-%d.%d\n", v99, v100, v101, v102, v103, v104, *((unsigned int *)v6 + 1));
    PDFWriterPrintf(v106, (uint64_t)"%s\n", v107, v108, v109, v110, v111, v112, (uint64_t)"%\xC4\xE5\xF2\xE5\xEB\xA7\xF3\xA0\xD0\xC4\xC6%lu 0 obj\n");
  }
  else
  {
    PDFDocumentRelease((uint64_t)v6, v91, v92, v93, v94, v95, v96, v97);
  }
  return v20;
}

void sub_184D441C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  int v14;
  uint64_t v15;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (*(char *)(v15 - 137) < 0)
  {
    operator delete(*(void **)(v15 - 160));
    if ((v14 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v14)
  {
LABEL_7:
    std::__tree<unsigned long>::destroy(*(_QWORD **)(v12 + 240));
    std::__tree<unsigned long>::destroy(*(_QWORD **)(v12 + 216));
    v18 = *(void **)(v12 + 184);
    if (v18)
    {
      *(_QWORD *)(v12 + 192) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(v12 + 160);
    if (v19)
    {
      *(_QWORD *)(v12 + 168) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v12 + 136);
    if (v20)
    {
      *(_QWORD *)(v12 + 144) = v20;
      operator delete(v20);
    }
    *(_QWORD *)(v15 - 160) = v12 + 112;
    std::vector<PDFIndirectObject>::__destroy_vector::operator()[abi:se180100]((void ***)(v15 - 160));
    *(_QWORD *)(v15 - 160) = v12 + 48;
    std::vector<PDFLinearizerPageInfo>::__destroy_vector::operator()[abi:se180100]((void ***)(v15 - 160));
    if (*(char *)(v12 + 47) < 0)
      operator delete(*v13);
    MEMORY[0x186DC23C4](v12, 0x1072C405A727712);
    v21 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v21 + 16))(v21);
      pdf_error("%s caught exception: %s");
    }
    else
    {
      pdf_error("%s caught an unknown exception");
    }
    __cxa_end_catch();
    *(_QWORD *)(v10 + 520) = 0;
    JUMPOUT(0x184D42D98);
  }
  __cxa_free_exception(v11);
  goto LABEL_7;
}

void pdf_Finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
    v8 = *(_QWORD *)(a1 + 288);
  else
    v8 = 0;
  PDFDocumentFinalize(v8, a2, a3, a4, a5, a6, a7, a8);
  PDFDocumentRelease(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t pdf_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const CGPath *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *Copy;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CGMutablePathRef v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char *ContentStream;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const CGPath *v32;
  const CGPath *CopyByClippingWithPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const CGPath *v37;
  CGAffineTransform v39;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 480);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 72);
    if (v11)
    {
      Copy = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((_QWORD *)Copy + 9) = 0x300000003;
      copyGState(v10, a3);
      v14 = v13;
      v39.a = *(CGFloat *)(v10 + 80);
      v39.b = 0.0;
      v39.c = 0.0;
      v39.d = v39.a;
      v39.tx = 0.0;
      v39.ty = 0.0;
      v21 = CGPathCreateMutableCopyByTransformingPath(a5, &v39);
      if (*(_DWORD *)(v11 + 16) == 1129601108)
      {
        v22 = *(_QWORD *)(v11 + 40);
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v11, v15, v16, v17, v18, v19, v20);
        v22 = 0;
      }
      CGContextDelegateDrawPath(v22, (uint64_t)Copy, v14, a4, v21);
      do
      {
        v23 = __ldxr((unsigned int *)Copy);
        v24 = v23 - 1;
      }
      while (__stxr(v24, (unsigned int *)Copy));
      if (!v24)
        free(Copy);
      CGGStateRelease(v14);
      if (v21)
        CFRelease(v21);
    }
  }
  ContentStream = (char *)PDFDocumentGetContentStream(*(_QWORD *)(a1 + 288));
  v26 = (uint64_t)ContentStream;
  if (ContentStream)
  {
    v27 = *(_OWORD *)(a2 + 24);
    v28 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v28;
    *(_OWORD *)(ContentStream + 120) = v27;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(_QWORD *)(a1 + 288) + 488));
  v32 = *(const CGPath **)(v26 + 200);
  if (v32)
  {
    if (a5)
    {
      CopyByClippingWithPath = (const CGPath *)pathCreateCopyByClippingWithPath(2, a5, 1, v32, 1);
      if (CopyByClippingWithPath)
      {
        v37 = CopyByClippingWithPath;
        PDFWritePath(v26, *(_BYTE ***)(v26 + 64), a3, a4, CopyByClippingWithPath, v34, v35, v36);
        CFRelease(v37);
      }
    }
  }
  else
  {
    PDFWritePath(v26, *(_BYTE ***)(v26 + 64), a3, a4, a5, v29, v30, v31);
  }
  return 0;
}

uint64_t pdf_DrawImage(uint64_t a1, uint64_t a2, double *a3, CGImageRef image, double a5, double a6, double a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *Copy;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(double, double, double, double);
  unsigned int v30;
  unsigned int v31;
  CFStringRef UTType;
  CFStringRef v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CGImage *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  const __CFDictionary *v56;
  CGColorRenderingIntent RenderingIntent;
  char v58;
  CGImage *v59;
  CGImage *jpeg_copy;
  uint64_t v61;
  uint64_t v62;
  CGColorSpace *v63;
  size_t v64;
  size_t v65;
  char *v66;
  CGContext *v67;
  size_t v68;
  char *v69;
  uint64_t i;
  int v71;
  char *v72;
  unsigned __int8 v73;
  size_t v74;
  char *v75;
  int v76;
  CGDataProvider *v77;
  CGImage *v78;
  CFStringRef v79;
  CGImage *v80;
  CGImageRef v81;
  CGImageRef v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  char *ContentStream;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  CGColorSpace *space;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  double v96;
  double v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t valuePtr;
  CGAffineTransform v102;
  void *values[3];
  void *keys[5];
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;

  v14 = a2;
  v15 = a1;
  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
    v16 = *(_QWORD *)(a1 + 288);
  else
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 480);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 72);
    if (v18)
    {
      Copy = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((_QWORD *)Copy + 9) = 0x300000003;
      copyGState(v17, (uint64_t)a3);
      v27 = v26;
      if (*(_DWORD *)(v18 + 16) == 1129601108)
      {
        v28 = *(_QWORD *)(v18 + 40);
        if (v28)
        {
          v29 = *(void (**)(double, double, double, double))(v28 + 80);
          if (v29)
            v29(a5, a6, a7, a8);
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v18, v20, v21, v22, v23, v24, v25);
      }
      do
      {
        v30 = __ldxr((unsigned int *)Copy);
        v31 = v30 - 1;
      }
      while (__stxr(v31, (unsigned int *)Copy));
      if (!v31)
        free(Copy);
      CGGStateRelease(v27);
    }
  }
  UTType = CGImageGetUTType(image);
  if (UTType)
  {
    v33 = UTType;
    if (CFEqual(UTType, CFSTR("public.jpeg")))
      v34 = 0;
    else
      v34 = CFEqual(v33, CFSTR("public.jpeg-2000")) == 0;
  }
  else
  {
    v34 = 1;
  }
  if (*(_BYTE *)(v16 + 88))
  {
    if (image)
    {
      v35 = a5;
      v36 = a8;
      v37 = a6;
      v39 = a3[3];
      v38 = a3[4];
      v40 = a3[5];
      v41 = a3[6];
      v42 = a7;
      v43 = a7 < 0.0;
      v44 = a3[7];
      v45 = a3[8];
      v96 = v36;
      v97 = v42;
      if (v43 || v36 < 0.0)
      {
        v49 = v35;
        v50 = v37;
        *(CGRect *)(&v42 - 2) = CGRectStandardize(*(CGRect *)(&v42 - 2));
      }
      else
      {
        v46 = v35;
        v47 = v37;
      }
      v102.a = v40 * 0.0 + v42 * v39;
      v102.b = v41 * 0.0 + v42 * v38;
      v102.c = v36 * v40 + v39 * 0.0;
      v102.d = v36 * v41 + v38 * 0.0;
      v102.tx = v44 + v40 * v47 + v46 * v39;
      v102.ty = v41 * v47 + v46 * v38 + v45;
      v105.origin.x = 0.0;
      v105.origin.y = 0.0;
      v105.size.width = 1.0;
      v105.size.height = 1.0;
      v106 = CGRectApplyAffineTransform(v105, &v102);
      v51 = (double)*((unint64_t *)image + 5);
      v52 = v106.size.width * 144.0 / (v51 * 72.0);
      if (v52 > 1.0)
        v52 = 1.0;
      if (v52 >= 0.95)
      {
        v48 = 0;
        a6 = v37;
        a8 = v96;
        a7 = v97;
        a5 = v35;
      }
      else
      {
        v100 = llround(v52 * (double)*((unint64_t *)image + 6));
        valuePtr = llround(v52 * v51);
        v99 = 3;
        v53 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
        v54 = CFNumberCreate(0, kCFNumberCFIndexType, &v100);
        v55 = CFNumberCreate(0, kCFNumberSInt32Type, &v99);
        keys[0] = CFSTR("kCGColorTransformConvertImageWidth");
        keys[1] = CFSTR("kCGColorTransformConvertImageHeight");
        keys[2] = CFSTR("kCGColorTransformConvertImageQuality");
        values[0] = v53;
        values[1] = v54;
        values[2] = v55;
        v56 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        a6 = v37;
        a5 = v35;
        if (v53)
          CFRelease(v53);
        a8 = v96;
        if (v54)
          CFRelease(v54);
        a7 = v97;
        if (v55)
          CFRelease(v55);
        RenderingIntent = CGImageGetRenderingIntent(image);
        v48 = (CGImage *)CGColorTransformConvertImage(image, RenderingIntent, v56);
      }
    }
    else
    {
      v48 = 0;
    }
    if (v48)
      image = v48;
  }
  else
  {
    v48 = 0;
  }
  if (v48)
    v58 = v34;
  else
    v58 = 1;
  if (*(_BYTE *)(v16 + 74) || (v58 & 1) == 0)
  {
    jpeg_copy = create_jpeg_copy(image, *(double *)(v16 + 80));
    v59 = jpeg_copy;
    if (jpeg_copy)
      image = jpeg_copy;
  }
  else
  {
    v59 = 0;
  }
  v98 = v16;
  if (image
    && (v61 = *((_QWORD *)image + 27)) != 0
    && CGPropertiesGetProperty(v61, CFSTR("com.apple.CoreGraphics.Is1Bit1ChannelImage")))
  {
    v93 = v14;
    v94 = v15;
    v95 = a3;
    v62 = *((_QWORD *)image + 27);
    if (v62)
      CGPropertiesGetProperty(v62, CFSTR("com.apple.CoreGraphics.Is1Bit1ChannelImageColorSpace"));
    v63 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
    v64 = *((_QWORD *)image + 5);
    v65 = *((_QWORD *)image + 6);
    v66 = (char *)malloc_type_calloc(v64, v65, 0x4B71996uLL);
    space = v63;
    v67 = CGBitmapContextCreateWithData(v66, v64, v65, 8uLL, v64, v63, 0, 0, 0);
    v107.origin.x = 0.0;
    v107.origin.y = 0.0;
    v107.size.width = (double)v64;
    v107.size.height = (double)v65;
    CGContextClearRect(v67, v107);
    CGContextConcatCTM(v67, (CGAffineTransform *)&CGAffineTransformIdentity);
    v108.origin.x = 0.0;
    v108.origin.y = 0.0;
    v108.size.width = (double)v64;
    v108.size.height = (double)v65;
    CGContextDrawImage(v67, v108, image);
    v68 = (v64 + 7) >> 3;
    v69 = (char *)malloc_type_calloc(v68, v65, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v65)
    {
      for (i = 0; i != v65; ++i)
      {
        if (v64)
        {
          v71 = 0;
          v72 = &v66[i * v64];
          v73 = 0x80;
          v74 = v64;
          v75 = &v69[i * v68];
          do
          {
            if (v71 == 8)
            {
              ++v75;
              v73 = 0x80;
            }
            v76 = *v72++;
            if (v76 < 0)
              *v75 |= v73;
            v73 >>= 1;
            if (v71 == 8)
              v71 = 1;
            else
              ++v71;
            --v74;
          }
          while (v74);
        }
      }
    }
    check_clients_buffer("CGDataProviderCreateWithData", v69, v68 * v65);
    v77 = CGDataProviderCreateWithDataInternal((uint64_t)v69, (uint64_t)v69, v68 * v65, (uint64_t)_CGDataProviderReleaseDataCallback, 0);
    v78 = CGImageCreate(v64, v65, 1uLL, 1uLL, (v64 + 7) >> 3, space, 0, v77, 0, 0, kCGRenderingIntentDefault);
    CGDataProviderRelease(v77);
    if (v67)
      CFRelease(v67);
    CGColorSpaceRelease(space);
    a3 = v95;
    v14 = v93;
    if (v66)
      free(v66);
    if (v78)
      image = v78;
    v15 = v94;
  }
  else
  {
    v78 = 0;
  }
  v79 = CGImageGetUTType(image);
  if (!v79 || !CFEqual(v79, CFSTR("public.jpeg-2000")))
  {
LABEL_82:
    if (!image || (*((_BYTE *)image + 39) & 4) == 0)
      goto LABEL_91;
    goto LABEL_84;
  }
  if (!image || (*((_BYTE *)image + 39) & 4) == 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)(v15 + 288) + 91))
      goto LABEL_82;
    goto LABEL_80;
  }
  if (*((_QWORD *)image + 22) || *(_BYTE *)(*(_QWORD *)(v15 + 288) + 91))
  {
LABEL_80:
    v80 = create_jpeg_copy(image, *(double *)(v98 + 80));
    v59 = v80;
    if (v80)
      image = v80;
    goto LABEL_82;
  }
LABEL_84:
  if (is_image_alpha_opaque((uint64_t)image))
  {
    v81 = CGImageCreateCopy(image);
    v82 = v81;
    if (v81)
    {
      v83 = (*((_DWORD *)v81 + 8) & 0x1F) - 1;
      if (v83 <= 3)
      {
        v84 = *((_DWORD *)v81 + 8) & 0xFFFFFFE0 | dword_185005250[v83];
        v85 = *((_DWORD *)v81 + 9) & 0xFBFFFFFF;
        *((_DWORD *)v81 + 8) = v84;
        *((_DWORD *)v81 + 9) = v85;
      }
      image = v81;
    }
    if (v15)
      goto LABEL_90;
    goto LABEL_92;
  }
LABEL_91:
  v82 = 0;
  if (v15)
  {
LABEL_90:
    v86 = *(_QWORD *)(v15 + 288);
    goto LABEL_93;
  }
LABEL_92:
  v86 = 0;
LABEL_93:
  ContentStream = (char *)PDFDocumentGetContentStream(v86);
  v88 = (uint64_t)ContentStream;
  if (ContentStream)
  {
    v89 = *(_OWORD *)(v14 + 24);
    v90 = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(v14 + 56);
    *(_OWORD *)(ContentStream + 136) = v90;
    *(_OWORD *)(ContentStream + 120) = v89;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(_QWORD *)(v15 + 288) + 488));
  PDFContentStreamDrawImage(v88, (uint64_t)a3, image, a5, a6, a7, a8);
  if (v82)
    CFRelease(v82);
  if (v59)
    CFRelease(v59);
  if (v48)
    CFRelease(v48);
  if (v78)
    CFRelease(v78);
  return 0;
}

uint64_t pdf_DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned __int16 *a5, double *a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *Copy;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(double);
  unsigned int v28;
  unsigned int v29;
  const void *ContentStream;
  BOOL v31;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __n128 v44;
  uint64_t v46;
  unsigned __int16 v47;
  const char *v48;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 480);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 72);
    if (v15)
    {
      Copy = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((_QWORD *)Copy + 9) = 0x300000003;
      v23 = copyGState(v14, a3);
      v25 = v24;
      if (*(_DWORD *)(v15 + 16) == 1129601108)
      {
        v26 = *(_QWORD *)(v15 + 40);
        if (v26)
        {
          v27 = *(void (**)(double))(v26 + 88);
          if (v27)
            v27(v23);
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v15, v17, v18, v19, v20, v21, v22);
      }
      do
      {
        v28 = __ldxr((unsigned int *)Copy);
        v29 = v28 - 1;
      }
      while (__stxr(v29, (unsigned int *)Copy));
      if (!v29)
        free(Copy);
      CGGStateRelease(v25);
    }
  }
  ContentStream = PDFDocumentGetContentStream(*(_QWORD *)(a1 + 288));
  if (ContentStream)
    v31 = a4 == 0;
  else
    v31 = 1;
  if (!v31 && a5 != 0 && a6 != 0 && a7 != 0)
  {
    v35 = (uint64_t)ContentStream;
    v36 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8);
    v48 = "nonmarkingreturn";
    v47 = 0;
    if (v36
      && ((*(void (**)(_QWORD, const char **, unsigned __int16 *, uint64_t))(*(_QWORD *)(v36 + 16) + 280))(*(_QWORD *)(v36 + 112), &v48, &v47, 1), (v37 = v47) != 0))
    {
      v46 = a3;
      v38 = 0;
      while (a5[v38] != v47)
      {
        if (a7 == ++v38)
        {
          v39 = 0;
          goto LABEL_38;
        }
      }
      v40 = (unsigned __int16 *)malloc_type_malloc(2 * a7, 0x1000040BDFB0063uLL);
      v39 = v40;
      if (v40)
      {
        memcpy(v40, a5, 2 * v38);
        if (v38 < a7)
        {
          do
          {
            v41 = a5[v38];
            if (v41 == v37)
              LOWORD(v41) = -1;
            v39[v38++] = v41;
          }
          while (a7 != v38);
        }
        a5 = v39;
      }
LABEL_38:
      a3 = v46;
    }
    else
    {
      v39 = 0;
    }
    v42 = *(_OWORD *)(a2 + 24);
    v43 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v35 + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v35 + 136) = v43;
    *(_OWORD *)(v35 + 120) = v42;
    PDFContentStreamSetRedactionPath(v35, *(CFTypeRef *)(*(_QWORD *)(a1 + 288) + 488));
    PDFContentStreamDrawGlyphs(v35, a3, a4, a5, a6, a7, v44);
    free(v39);
  }
  return 0;
}

uint64_t pdf_DrawShading(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *Copy;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(double);
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  char *ContentStream;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  const void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  double v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  float64x2_t v68;
  _BYTE **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  float64x2_t v85[2];
  __int128 v86;

  v12 = *(_QWORD *)(a1[36] + 480);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 72);
    if (v13)
    {
      Copy = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((_QWORD *)Copy + 9) = 0x300000003;
      v21 = copyGState(v12, a3);
      v23 = v22;
      if (*(_DWORD *)(v13 + 16) == 1129601108)
      {
        v24 = *(_QWORD *)(v13 + 40);
        if (v24)
        {
          v25 = *(void (**)(double))(v24 + 96);
          if (v25)
            v25(v21);
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v13, v15, v16, v17, v18, v19, v20);
      }
      do
      {
        v26 = __ldxr((unsigned int *)Copy);
        v27 = v26 - 1;
      }
      while (__stxr(v27, (unsigned int *)Copy));
      if (!v27)
        free(Copy);
      CGGStateRelease(v23);
    }
  }
  v28 = a4[5];
  v29 = v28 > 4;
  v30 = (1 << v28) & 0x16;
  if (v29 || v30 == 0)
  {
    CGShadingDrawInContextDelegate((uint64_t)a4, a1, a2, a3, a5, a6, a7, a8);
    return 0;
  }
  ContentStream = (char *)PDFDocumentGetContentStream(a1[36]);
  v33 = (uint64_t *)ContentStream;
  if (ContentStream)
  {
    v34 = *(_OWORD *)(a2 + 24);
    v35 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v35;
    *(_OWORD *)(ContentStream + 120) = v34;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(a1[36] + 488));
  if (v33 && a4)
  {
    v36 = PDFDocumentAddShading(*v33, a4);
    v37 = v33[14];
    v38 = *(const void ***)(v37 + 88);
    if (!v38)
    {
      v38 = CGOrderedSetCreate();
      *(_QWORD *)(v37 + 88) = v38;
    }
    CGOrderedSetAddValue((CFSetRef *)v38, v36);
    PDFWriterAnnotate(v33[8], (uint64_t)"Drawing shading", v39, v40, v41, v42, v43, v44, v83);
    PDFGStateSetClipStack(v33[13], *(__CFArray **)(a3 + 112));
    v51 = v33[13];
    v52 = *(_QWORD *)(a3 + 120);
    v53 = *(_DWORD *)(v52 + 4);
    if (((v53 >> 20) & 0xF) != 0)
      v54 = v53 << 8;
    else
      v54 = v53 << 12;
    if (v54 >> 28)
      v55 = v54 >> 28;
    else
      v55 = 2;
    if (*(_DWORD *)(v51 + 80) != v55)
    {
      *(_DWORD *)(v51 + 80) = v55;
      addEmitFunction(v51, emitRenderingIntentChange);
      v51 = v33[13];
      v52 = *(_QWORD *)(a3 + 120);
    }
    v56 = *(double *)(v52 + 8);
    if (*(double *)(v51 + 168) != v56)
    {
      *(double *)(v51 + 168) = v56;
      addEmitFunction(v51, emitNonStrokeAlphaChange);
      v51 = v33[13];
    }
    v57 = *(_QWORD *)(a3 + 144);
    v58 = *(unsigned __int8 *)(v57 + 24);
    if (*(unsigned __int8 *)(v51 + 200) != v58)
    {
      *(_BYTE *)(v51 + 200) = v58;
      addEmitFunction(v51, emitNonStrokeOverprintChange);
      v51 = v33[13];
      v57 = *(_QWORD *)(a3 + 144);
    }
    PDFGStateSetOverprintMode(v51, *(unsigned int *)(v57 + 28), v45, v46, v47, v48, v49, v50);
    PDFGStateSetBlackGeneration(v33[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 32));
    PDFGStateSetUndercolorRemoval(v33[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 40));
    PDFGStateSetStyle(v33[13], *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    PDFGStateSetSoftMask(v33[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 120) + 40));
    v59 = v33[13];
    v60 = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24;
    if ((v60 - 13) >= 0xF)
      v60 = 2;
    if (*(_DWORD *)(v59 + 248) != v60)
    {
      *(_DWORD *)(v59 + 248) = v60;
      addEmitFunction(v59, emitBlendModeChange);
      v59 = v33[13];
    }
    PDFGStateEmit((CFArrayRef *)v59);
    v67 = *(_OWORD *)(a3 + 56);
    v68 = *(float64x2_t *)(a3 + 40);
    v85[0] = *(float64x2_t *)(a3 + 24);
    v85[1] = v68;
    v86 = v67;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v85[0], (float64x2_t)xmmword_185004990), (int32x4_t)vceqq_f64(v68, (float64x2_t)xmmword_185004A20))))) & 1) != 0|| *(double *)&v86 != 0.0)
    {
      v69 = (_BYTE **)v33[8];
    }
    else
    {
      v69 = (_BYTE **)v33[8];
      if (*((double *)&v86 + 1) == 0.0)
      {
        PDFWriterPrintf(v69, (uint64_t)"/%s sh", v61, v62, v63, v64, v65, v66, (uint64_t)(v36 + 4));
        return 0;
      }
    }
    PDFWriterPrintf(v69, (uint64_t)"q %*m cm", v61, v62, v63, v64, v65, v66, (uint64_t)v85);
    PDFWriterPrintf((_BYTE **)v33[8], (uint64_t)"/%s sh", v70, v71, v72, v73, v74, v75, (uint64_t)(v36 + 4));
    PDFWriterPrintf((_BYTE **)v33[8], (uint64_t)"Q", v76, v77, v78, v79, v80, v81, v84);
  }
  return 0;
}

uint64_t pdf_DrawDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *Copy;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(double);
  unsigned int v22;
  unsigned int v23;
  char *ContentStream;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const __CFDictionary *v72;
  __int128 v73;
  float64x2_t v74;
  _BYTE **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  float64x2_t v106[2];
  __int128 v107;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 480);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
    {
      Copy = CGRenderingStateCreateCopy(a2);
      Copy[81] = 1;
      *((_QWORD *)Copy + 9) = 0x300000003;
      v17 = copyGState(v8, a3);
      v19 = v18;
      if (*(_DWORD *)(v9 + 16) == 1129601108)
      {
        v20 = *(_QWORD *)(v9 + 40);
        if (v20)
        {
          v21 = *(void (**)(double))(v20 + 128);
          if (v21)
            v21(v17);
        }
      }
      else
      {
        handle_invalid_context((char)"CGContextGetDelegate", v9, v11, v12, v13, v14, v15, v16);
      }
      do
      {
        v22 = __ldxr((unsigned int *)Copy);
        v23 = v22 - 1;
      }
      while (__stxr(v23, (unsigned int *)Copy));
      if (!v23)
        free(Copy);
      CGGStateRelease(v19);
    }
  }
  ContentStream = (char *)PDFDocumentGetContentStream(*(_QWORD *)(a1 + 288));
  v25 = (uint64_t *)ContentStream;
  if (ContentStream)
  {
    v26 = *(_OWORD *)(a2 + 24);
    v27 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(ContentStream + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(ContentStream + 136) = v27;
    *(_OWORD *)(ContentStream + 120) = v26;
  }
  PDFContentStreamSetRedactionPath((uint64_t)ContentStream, *(CFTypeRef *)(*(_QWORD *)(a1 + 288) + 488));
  if (v25)
    v28 = a4 == 0;
  else
    v28 = 1;
  if (!v28)
  {
    v29 = PDFDocumentAddFormWithDisplayList(*v25, a4);
    v30 = v25[14];
    v31 = *(const void ***)(v30 + 56);
    if (!v31)
    {
      v31 = CGOrderedSetCreate();
      *(_QWORD *)(v30 + 56) = v31;
    }
    CGOrderedSetAddValue((CFSetRef *)v31, v29);
    v38 = *(_QWORD *)(v30 + 8);
    v39 = *(_QWORD *)(v38 + 584);
    if (v39)
    {
      v40 = *((_QWORD *)v29 + 2);
      if (v40)
        v40 = *(_QWORD *)(v40 + 8);
      if (*(_DWORD *)(v39 + 16) == 1 && !*(_QWORD *)(v39 + 32))
      {
        *(_QWORD *)(v39 + 32) = v40;
        v41 = *(_QWORD *)(v38 + 592);
        *(_QWORD *)(v38 + 592) = v41 + 1;
        *(_QWORD *)(v39 + 40) = v41;
      }
      else
      {
        v41 = -1;
      }
      *((_QWORD *)v29 + 10) = v41;
    }
    PDFWriterAnnotate(v25[8], (uint64_t)"%s: BEGIN: Draw display list.", v32, v33, v34, v35, v36, v37, (uint64_t)"PDFContentStreamDrawDisplayList");
    PDFWriterAnnotate(v25[8], (uint64_t)"  Forcing gstate reset:", v42, v43, v44, v45, v46, v47, v101);
    PDFGStateReset(v25[13]);
    PDFWriterAnnotate(v25[8], (uint64_t)"  BEGIN: Drawing display list:", v48, v49, v50, v51, v52, v53, v102);
    PDFGStateSetClipStack(v25[13], *(__CFArray **)(a3 + 112));
    v60 = v25[13];
    v61 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 24);
    if (*(unsigned __int8 *)(v60 + 200) != v61)
    {
      *(_BYTE *)(v60 + 200) = v61;
      addEmitFunction(v60, emitNonStrokeOverprintChange);
      v60 = v25[13];
    }
    v62 = *(double *)(*(_QWORD *)(a3 + 120) + 8);
    if (*(double *)(v60 + 168) != v62)
    {
      *(double *)(v60 + 168) = v62;
      addEmitFunction(v60, emitNonStrokeAlphaChange);
      v60 = v25[13];
    }
    PDFGStateSetOverprintMode(v60, *(unsigned int *)(*(_QWORD *)(a3 + 144) + 28), v54, v55, v56, v57, v58, v59);
    PDFGStateSetBlackGeneration(v25[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 32));
    PDFGStateSetUndercolorRemoval(v25[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 40));
    PDFGStateSetStyle(v25[13], *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    PDFGStateSetSoftMask(v25[13], *(CFTypeRef *)(*(_QWORD *)(a3 + 120) + 40));
    v63 = v25[13];
    v64 = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24;
    if ((v64 - 13) >= 0xF)
      v64 = 2;
    if (*(_DWORD *)(v63 + 248) != v64)
    {
      *(_DWORD *)(v63 + 248) = v64;
      addEmitFunction(v63, emitBlendModeChange);
      v63 = v25[13];
    }
    PDFGStateEmit((CFArrayRef *)v63);
    v71 = *(_QWORD *)(*v25 + 480);
    if (v71)
    {
      v72 = *(const __CFDictionary **)(v71 + 48);
      v105 = 0uLL;
      if (v72 && CGCFDictionaryGetPoint(v72, CFSTR("DisplayListOrigin"), (UInt8 *)&v105))
        *((_OWORD *)v29 + 4) = v105;
    }
    else
    {
      v105 = 0uLL;
    }
    v73 = *(_OWORD *)(a3 + 56);
    v74 = *(float64x2_t *)(a3 + 40);
    v106[0] = *(float64x2_t *)(a3 + 24);
    v106[1] = v74;
    v107 = v73;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v106[0], (float64x2_t)xmmword_185004990), (int32x4_t)vceqq_f64(v74, (float64x2_t)xmmword_185004A20))))) & 1) != 0|| *(double *)&v107 != 0.0)
    {
      v75 = (_BYTE **)v25[8];
    }
    else
    {
      v75 = (_BYTE **)v25[8];
      if (*((double *)&v107 + 1) == 0.0)
      {
        PDFWriterPrintf(v75, (uint64_t)"/%s Do", v65, v66, v67, v68, v69, v70, (uint64_t)v29 + 40);
LABEL_46:
        PDFWriterAnnotate(v25[8], (uint64_t)"  END: Drawing display list:", v76, v77, v78, v79, v80, v81, v103);
        PDFWriterAnnotate(v25[8], (uint64_t)"%s: END: Draw display list.", v94, v95, v96, v97, v98, v99, (uint64_t)"PDFContentStreamDrawDisplayList");
        return 0;
      }
    }
    PDFWriterPrintf(v75, (uint64_t)"q %*m cm", v65, v66, v67, v68, v69, v70, (uint64_t)v106);
    PDFWriterPrintf((_BYTE **)v25[8], (uint64_t)"/%s Do", v82, v83, v84, v85, v86, v87, (uint64_t)v29 + 40);
    PDFWriterPrintf((_BYTE **)v25[8], (uint64_t)"Q", v88, v89, v90, v91, v92, v93, v104);
    goto LABEL_46;
  }
  return 0;
}

uint64_t pdf_BeginPage(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  if (a1)
    a1 = (_QWORD *)a1[36];
  PDFDocumentBeginPage(a1, a4);
  return 0;
}

uint64_t pdf_EndPage(uint64_t a1)
{
  if (a1)
    a1 = *(_QWORD *)(a1 + 288);
  PDFDocumentEndPage(a1);
  return 0;
}

uint64_t pdf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf1, const __CFDictionary *a5)
{
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t *v43;
  __int128 v44;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  __int128 v48;
  int v49;
  const __CFDictionary *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *ContentStream;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE **v66;
  const char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  _BYTE **v77;
  const void *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  const void **v87;
  uint64_t v88;
  const void **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  void *v97;
  void *v98;
  uint64_t *DestinationSet;
  _QWORD *Destination;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  const void *v104;
  void *v105;
  const void *v106;
  void *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  void *value;

  v168 = 0uLL;
  if (a1)
    v10 = *(_QWORD *)(a1 + 288);
  else
    v10 = 0;
  if (!CFEqual(cf1, CFSTR("kCGContextStyle")))
  {
    if (CFEqual(cf1, CFSTR("BeginTag")))
    {
      LODWORD(v169) = 0;
      if (CGCFDictionaryGetInteger(a5, CFSTR("TagType"), &v169))
      {
        v49 = v169;
        v50 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("TagProperties"));
        ContentStream = PDFDocumentGetContentStream(v10);
        v58 = *ContentStream;
        if (*(_DWORD *)(*ContentStream + 544) == 2)
        {
          v59 = 0xFFFFFFFFLL;
        }
        else
        {
          *(_DWORD *)(v58 + 544) = 1;
          if (!*(_QWORD *)(v58 + 560))
          {
            *(_QWORD *)(v58 + 560) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            PDFDocumentPushTag((PDFDocument *)v58, 100, 0);
          }
          v59 = (uint64_t)PDFDocumentPushTag((PDFDocument *)v58, v49, v50);
        }
        ++ContentStream[22];
        v164 = v59;
        v76 = "/P << /MCID %d >> BDC";
        v77 = (_BYTE **)ContentStream[8];
        goto LABEL_31;
      }
    }
    else
    {
      if (CFEqual(cf1, CFSTR("EndTag")))
      {
        v68 = (uint64_t *)PDFDocumentGetContentStream(v10);
        PDFContentStreamEndTag(v68, v69, v70, v71, v72, v73, v74, v75, v164);
        return 0;
      }
      if (CFEqual(cf1, CFSTR("BeginTagWithMCID")))
      {
        v78 = CFDictionaryGetValue(a5, CFSTR("PageProperties"));
        if (v78)
        {
          v79 = (uint64_t)v78;
          *(_QWORD *)&v169 = 0;
          if (CGCFDictionaryGetNumber(a5, CFSTR("MCID"), kCFNumberSInt64Type, &v169))
          {
            v80 = (uint64_t *)PDFDocumentGetContentStream(v10);
            PDFContentStreamBeginTagWithMCID(v80, v79, v169, v81, v82, v83, v84, v85);
            return 0;
          }
        }
      }
      else
      {
        if (CFEqual(cf1, CFSTR("BeginAccessibilitySpan")))
        {
          v96 = PDFDocumentGetContentStream(v10);
          PDFContentStreamBeginAccessibilitySpan((uint64_t)v96, a5);
          return 0;
        }
        if (CFEqual(cf1, CFSTR("EndAccessibilitySpan")))
        {
          v77 = (_BYTE **)*((_QWORD *)PDFDocumentGetContentStream(v10) + 8);
          v76 = "EMC";
LABEL_31:
          PDFWriterPrintf(v77, (uint64_t)v76, v51, v52, v53, v54, v55, v56, v164);
          return 0;
        }
        if (CFEqual(cf1, CFSTR("AddDestinationAtPoint")))
        {
          if (a5)
          {
            v97 = (void *)CFDictionaryGetValue(a5, CFSTR("Label"));
            if (v97)
            {
              v98 = v97;
              if (CGCFDictionaryGetPoint(a5, CFSTR("Point"), (UInt8 *)&v168))
              {
                DestinationSet = PDFDocumentGetDestinationSet(v10);
                Destination = PDFDestinationSetGetDestination(DestinationSet, v98);
                if (Destination)
                {
                  v101 = *(_QWORD *)(v10 + 480);
                  if (v101)
                  {
                    v102 = Destination;
                    result = 0;
                    v102[2] = *(_QWORD *)(v101 + 16);
                    *(_OWORD *)(v102 + 3) = v168;
                    return result;
                  }
                }
              }
            }
          }
          return 1000;
        }
        if (CFEqual(cf1, CFSTR("AddAnnotation")))
        {
          result = 1000;
          if (a5)
          {
            v103 = *(_QWORD *)(v10 + 480);
            if (v103)
            {
              PDFDocumentAddAnnotationToPage((PDFDocument *)v10, v103, a5);
              return 0;
            }
          }
          return result;
        }
        if (CFEqual(cf1, CFSTR("AddCatalogEntry")))
        {
          if (a5)
          {
            v104 = CFDictionaryGetValue(a5, CFSTR("Key"));
            v105 = (void *)CFDictionaryGetValue(a5, CFSTR("Value"));
            PDFDocumentAddCatalogEntry(v10, v104, v105);
            return 0;
          }
        }
        else if (CFEqual(cf1, CFSTR("SetImageTag")))
        {
          if (a5)
          {
            v106 = CFDictionaryGetValue(a5, CFSTR("Image"));
            v107 = (void *)CFDictionaryGetValue(a5, CFSTR("Tag"));
            PDFDocumentAddImageTag(v10, (uint64_t)v106, v107);
            return 0;
          }
        }
        else if (CFEqual(cf1, CFSTR("AddPDFXInfo")))
        {
          if (a5)
          {
            PDFDocumentAddPDFXInfo(v10, a5);
            return 0;
          }
        }
        else
        {
          if (CFEqual(cf1, CFSTR("SetOutputIntent")))
          {
            if (a5)
            {
              if (*(_BYTE *)(v10 + 91))
                pdf_error("SetOutputIntent cannot be used when generating PDF/A output");
              else
                PDFDocumentSetOutputIntent(v10, a5);
              return 0;
            }
            return 1000;
          }
          if (CFEqual(cf1, CFSTR("ShouldDeflate")))
          {
            if (a5)
            {
              result = (uint64_t)CFDictionaryGetValue(a5, CFSTR("ShouldDeflate"));
              if (result)
              {
                v108 = CFBooleanGetValue((CFBooleanRef)result);
                result = 0;
                *(_BYTE *)(v10 + 73) = v108 == 0;
              }
              return result;
            }
          }
          else if (CFEqual(cf1, CFSTR("BeginDrawingHiddenText")))
          {
            if (*(_QWORD *)(v10 + 480))
            {
              if (a1)
                v109 = *(_QWORD *)(a1 + 288);
              else
                v109 = 0;
              result = (uint64_t)PDFDocumentGetContentStream(v109);
              if (result)
              {
                v111 = result;
                result = 0;
                *(_BYTE *)(v111 + 169) = 1;
              }
              return result;
            }
          }
          else if (CFEqual(cf1, CFSTR("EndDrawingHiddenText")))
          {
            if (*(_QWORD *)(v10 + 480))
            {
              if (a1)
                v110 = *(_QWORD *)(a1 + 288);
              else
                v110 = 0;
              result = (uint64_t)PDFDocumentGetContentStream(v110);
              if (result)
              {
                v113 = result;
                result = 0;
                *(_BYTE *)(v113 + 169) = 0;
              }
              return result;
            }
          }
          else if (CFEqual(cf1, CFSTR("SetRedactionPath")))
          {
            if (a5)
            {
              v112 = CFDictionaryGetValue(a5, CFSTR("RedactionPath"));
              PDFDocumentSetPageRedactionPath(v10, v112);
              return 0;
            }
          }
          else if (CFEqual(cf1, CFSTR("SetParentTree")))
          {
            if (a5)
            {
              v114 = CFDictionaryGetValue(a5, CFSTR("ParentTree"));
              PDFDocumentSetParentTree((_QWORD *)v10, v114);
              return 0;
            }
          }
          else if (CFEqual(cf1, CFSTR("SetIDTree")))
          {
            if (a5)
            {
              v115 = CFDictionaryGetValue(a5, CFSTR("IDTree"));
              PDFDocumentSetIDTree((_QWORD *)v10, v115);
              return 0;
            }
          }
          else if (CFEqual(cf1, CFSTR("SetPageTagStructureTree")))
          {
            if (a5)
            {
              PDFDocumentSetPageTagStructureTree((_QWORD *)v10, a5);
              return 0;
            }
          }
          else
          {
            if (!CFEqual(cf1, CFSTR("BeginMarkedContentSequence")))
            {
              if (CFEqual(cf1, CFSTR("BeginStructuralMarkedContentSequence")))
              {
                LODWORD(v169) = 0;
                if ((CGCFDictionaryGetInteger(a5, CFSTR("TagType"), &v169) & 1) == 0)
                  return 1000;
                v122 = (void *)-[__CFDictionary valueForKey:](a5, "valueForKey:", CFSTR("MarkedContentItem"));
                if (!v122)
                  return 1000;
                v123 = objc_msgSend(v122, "pointerValue");
                if (!v123)
                  return 1000;
                v130 = (_QWORD *)v123;
                v131 = PDFDocumentBeginStructuralMarkedContentSequence(v10, v169, v124, v125, v126, v127, v128, v129);
              }
              else
              {
                if (CFEqual(cf1, CFSTR("EndMarkedContentSequence")))
                {
                  PDFDocumentEndMarkedContentSequence(v10, v132, v133, v134, v135, v136, v137, v138);
                  return 0;
                }
                if (!CFEqual(cf1, CFSTR("BeginObjectReference")))
                {
                  if (CFEqual(cf1, CFSTR("EndObjectReference")))
                  {
                    PDFDocumentEndObjectReference(v10, v149, v150, v151, v152, v153, v154, v155);
                    return 0;
                  }
                  if (!CFEqual(cf1, CFSTR("AddStructureTreeRootChild")))
                    return 1006;
                  v156 = (void *)-[__CFDictionary valueForKey:](a5, "valueForKey:", CFSTR("StructureElement"));
                  if (v156)
                  {
                    v157 = (const void *)objc_msgSend(v156, "pointerValue");
                    if (v157)
                      return PDFDocumentAddStructureTreeRootChild(v10, v157, v158, v159, v160, v161, v162, v163);
                  }
                  return 1000;
                }
                v139 = (void *)-[__CFDictionary valueForKey:](a5, "valueForKey:", CFSTR("MarkedContentItem"));
                if (!v139)
                  return 1000;
                v140 = objc_msgSend(v139, "pointerValue");
                if (!v140)
                  return 1000;
                v130 = (_QWORD *)v140;
                v131 = PDFDocumentBeginObjectReference((_QWORD *)v10, v141, v142, v143, v144, v145, v146, v147);
              }
              v148 = v131;
              result = 0;
              *v130 = v148;
              return result;
            }
            LODWORD(v169) = 0;
            if (CGCFDictionaryGetInteger(a5, CFSTR("TagType"), &v169))
            {
              PDFDocumentBeginMarkedContentSequence(v10, v169, v116, v117, v118, v119, v120, v121);
              return 0;
            }
          }
        }
      }
    }
    return 1000;
  }
  v11 = (char *)PDFDocumentGetContentStream(v10);
  v12 = v11;
  if (v11)
  {
    v13 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v11 + 136) = v14;
    *(_OWORD *)(v11 + 120) = v13;
  }
  result = (uint64_t)CFDictionaryGetValue(a5, CFSTR("kCGContextStyleType"));
  if (result)
  {
    v22 = (const void *)result;
    PDFWriterAnnotate(*((_QWORD *)v12 + 8), (uint64_t)"%s: BEGIN: Draw style.", v16, v17, v18, v19, v20, v21, (uint64_t)"PDFContentStreamDrawStyle");
    PDFWriterAnnotate(*((_QWORD *)v12 + 8), (uint64_t)"  Forcing gstate reset:", v23, v24, v25, v26, v27, v28, v165);
    PDFGStateReset(*((_QWORD *)v12 + 13));
    PDFGStateEmit(*((CFArrayRef **)v12 + 13));
    PDFGStateSetClipStack(*((_QWORD *)v12 + 13), *(__CFArray **)(a3 + 112));
    PDFWriterAnnotate(*((_QWORD *)v12 + 8), (uint64_t)"  BEGIN: Drawing style:", v29, v30, v31, v32, v33, v34, v166);
    if (CFEqual(v22, CFSTR("kCGContextStyleBegin")))
    {
      PDFWriterPrintf(*((_BYTE ***)v12 + 8), (uint64_t)"/AAPL:Style", v35, v36, v37, v38, v39, v40, v167);
      v41 = CFDictionaryGetValue(a5, CFSTR("kCGContextStyle"));
      v42 = *(_QWORD *)v12;
      v43 = *(uint64_t **)(*(_QWORD *)v12 + 408);
      if (!v43)
      {
        v43 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (!v43)
        {
          *(_QWORD *)(v42 + 408) = 0;
LABEL_44:
          v88 = *((_QWORD *)v12 + 14);
          v89 = *(const void ***)(v88 + 80);
          if (!v89)
          {
            v89 = CGOrderedSetCreate();
            *(_QWORD *)(v88 + 80) = v89;
          }
          CGOrderedSetAddValue((CFSetRef *)v89, v43);
          v66 = (_BYTE **)*((_QWORD *)v12 + 8);
          v167 = (uint64_t)(v43 + 3);
          v67 = "/%s BDC";
          goto LABEL_47;
        }
        *v43 = v42;
        *(_QWORD *)(v42 + 408) = v43;
      }
      v44 = *(_OWORD *)(v12 + 136);
      v169 = *(_OWORD *)(v12 + 120);
      v170 = v44;
      v171 = *(_OWORD *)(v12 + 152);
      if (!v43[1])
        v43[1] = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callbacks_1348);
      value = 0;
      v45 = *v43;
      v46 = malloc_type_calloc(1uLL, 0x70uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (v46)
      {
        *v46 = 1;
        *((_QWORD *)v46 + 1) = v45;
        *((_QWORD *)v46 + 2) = 0;
        *((_BYTE *)v46 + 24) = 0;
        *((_BYTE *)v46 + 40) = 0;
        v46[11] = 0;
        v47 = (char *)malloc_type_malloc(6uLL, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        *((_QWORD *)v46 + 13) = v47;
        if (v47)
        {
          strcpy(v47, "Style");
          v46[11] = 1;
          if (v41)
            CFRetain(v41);
          *((_QWORD *)v46 + 6) = v41;
          v48 = v170;
          *(_OWORD *)(v46 + 14) = v169;
          *(_OWORD *)(v46 + 18) = v48;
          *(_OWORD *)(v46 + 22) = v171;
        }
        else
        {
          PDFPropertyListRelease(v46);
          v46 = 0;
        }
      }
      if (!CFSetGetValueIfPresent((CFSetRef)v43[1], v46, (const void **)&value))
      {
        v86 = *((_DWORD *)v43 + 6) + 1;
        *((_DWORD *)v43 + 6) = v86;
        snprintf_l((char *)v46 + 24, 0x10uLL, 0, "Pl%u", v86);
        CFSetAddValue((CFMutableSetRef)v43[1], v46);
        value = v46;
      }
      PDFPropertyListRelease(v46);
      v87 = (const void **)v43[2];
      if (!v87)
      {
        v87 = CGOrderedSetCreate();
        v43[2] = (uint64_t)v87;
      }
      CGOrderedSetAddValue((CFSetRef *)v87, value);
      v43 = (uint64_t *)value;
      goto LABEL_44;
    }
    if (!CFEqual(v22, CFSTR("kCGContextStyleEnd")))
    {
      if (CFEqual(v22, CFSTR("kCGContextStyleContentBegin")))
      {
        v66 = (_BYTE **)*((_QWORD *)v12 + 8);
        v67 = "/AAPL:StyleContent BMC";
        goto LABEL_47;
      }
      if (!CFEqual(v22, CFSTR("kCGContextStyleContentEnd")))
        goto LABEL_48;
    }
    v66 = (_BYTE **)*((_QWORD *)v12 + 8);
    v67 = "EMC";
LABEL_47:
    PDFWriterPrintf(v66, (uint64_t)v67, v60, v61, v62, v63, v64, v65, v167);
LABEL_48:
    PDFWriterAnnotate(*((_QWORD *)v12 + 8), (uint64_t)"  END: Drawing style:", v60, v61, v62, v63, v64, v65, v167);
    PDFWriterAnnotate(*((_QWORD *)v12 + 8), (uint64_t)"%s: END: Draw style.", v90, v91, v92, v93, v94, v95, (uint64_t)"PDFContentStreamDrawStyle");
    return 0;
  }
  return result;
}

CGFloat pdf_GetBounds(uint64_t a1)
{
  char *ContentStream;
  const CGRect *v2;

  if (a1)
    a1 = *(_QWORD *)(a1 + 288);
  ContentStream = (char *)PDFDocumentGetContentStream(a1);
  v2 = &CGRectNull;
  if (ContentStream)
    v2 = (const CGRect *)(ContentStream + 72);
  return v2->origin.x;
}

uint64_t pdf_DrawImageApplyingToneMapping(uint64_t a1, uint64_t a2, double *a3, CGImage *a4, double a5, double a6, double a7, double a8)
{
  pdf_DrawImage(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

double copyGState(uint64_t a1, uint64_t a2)
{
  double *Copy;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;
  double v15;

  Copy = (double *)CGGStateCreateCopy(a2);
  v4 = *(double *)(a1 + 80);
  v5 = Copy[3];
  v6 = Copy[4];
  v7 = Copy[5];
  v8 = Copy[6];
  v9 = Copy[8];
  v10 = v7 * 0.0;
  v11 = v7 * 0.0 + v4 * v5;
  v12 = v8 * 0.0 + v4 * v6;
  v13 = v4 * v7 + v5 * 0.0;
  result = v4 * v8 + v6 * 0.0;
  v15 = Copy[7] + v10 + v5 * 0.0;
  Copy[3] = v11;
  Copy[4] = v12;
  Copy[5] = v13;
  Copy[6] = result;
  Copy[7] = v15;
  Copy[8] = v8 * 0.0 + v6 * 0.0 + v9;
  return result;
}

void CGPDFFontDescriptorFinalize(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

void CGPDFFontDescriptorRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFTypeRef CGPDFFontDescriptorRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t CGPDFFontDescriptorGetDictionary(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t CGPDFFontDescriptorGetFlags(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

unint64_t CGPDFFontDescriptorGetStyle(unint64_t result)
{
  unint64_t v1;
  unint64_t *v2;
  double *v3;
  _BOOL4 Number;
  double v5;
  double v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  const char **v13;
  BOOL v14;
  uint64_t v15;
  const char **v16;
  unint64_t v17;
  double v19;
  CGPDFReal value;

  if (result)
  {
    v1 = result;
    v2 = (unint64_t *)(result + 24);
    if (!*(_QWORD *)(result + 24))
    {
      v3 = (double *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (!v3)
        return 0;
      v19 = 0.0;
      value = 0.0;
      Number = CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(v1 + 32), "StemV", &value);
      v5 = value;
      if (!Number)
        v5 = 0.0;
      *v3 = v5;
      v3[1] = 0.0;
      if (CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(v1 + 32), "ItalicAngle", &v19))
      {
        v6 = v19;
        v3[1] = v19;
        if (fabs(v6) > 20.0)
          v3[1] = -12.0;
      }
      v7 = *(_DWORD *)(v1 + 40);
      v8 = (v7 >> 6) & 1;
      *((_BYTE *)v3 + 16) = (v7 & 0x40) != 0;
      *((_BYTE *)v3 + 18) = (v7 & 2) != 0;
      *((_BYTE *)v3 + 19) = v7 & 1;
      *((_BYTE *)v3 + 20) = BYTE2(v7) & 1;
      *((_BYTE *)v3 + 21) = (v7 & 0x20000) != 0;
      *((_BYTE *)v3 + 17) = 0;
      v9 = *(_QWORD *)(v1 + 16);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 200);
        if (v10 == 7 || v10 == 4)
        {
          v11 = *(const char **)(v9 + 32);
          if (v11)
          {
            v12 = 0;
            v13 = (const char **)variants;
            do
            {
              if (font_name_contains_variant(v11, *v13))
              {
                v14 = (v12 & 0x7FFFFFFFFFFFFFFBLL) != 2;
                goto LABEL_21;
              }
              ++v12;
              v13 += 3;
            }
            while (v12 != 8);
            v14 = 0;
LABEL_21:
            v15 = 0;
            *((_BYTE *)v3 + 16) = v8 | v14;
            v16 = (const char **)variants;
            while (!font_name_contains_variant(v11, *v16))
            {
              ++v15;
              v16 += 3;
              if (v15 == 8)
                goto LABEL_24;
            }
            v17 = (0xDCuLL >> v15) & 1;
          }
          else
          {
LABEL_24:
            LOBYTE(v17) = 0;
          }
          *((_BYTE *)v3 + 17) = v17;
        }
      }
      while (!__ldxr(v2))
      {
        if (!__stxr((unint64_t)v3, v2))
          return *v2;
      }
      __clrex();
      free(v3);
    }
    return *v2;
  }
  return result;
}

BOOL soft_mask_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t soft_mask_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CGSoftMaskGetTypeID()
{
  if (_block_invoke_once_15426 != -1)
    dispatch_once(&_block_invoke_once_15426, &__block_literal_global_4_15427);
  return CGSoftMaskGetTypeID_soft_mask_type_id;
}

uint64_t draw_soft_mask(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 136);
  if (v1)
    return v1(*(_QWORD *)(result + 120));
  return result;
}

void release_soft_mask(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFTypeRef CGSoftMaskRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGSoftMaskRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGSoftMaskGetIdentifier(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

BOOL CGSoftMaskEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

__n128 CGSoftMaskGetMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const CGAffineTransform *v2;
  __int128 v3;
  __n128 result;

  v2 = (const CGAffineTransform *)(a1 + 24);
  if (!a1)
    v2 = &CGAffineTransformIdentity;
  v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

CGFloat CGSoftMaskGetBounds(uint64_t a1)
{
  const CGRect *v1;

  v1 = &CGRectNull;
  if (a1)
    v1 = (const CGRect *)(a1 + 72);
  return v1->origin.x;
}

uint64_t CGSoftMaskGetBackground(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

uint64_t CGSoftMaskGetTransfer(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

_DWORD *CGPDFSecurityHandlerCreate(CGPDFArrayRef *a1)
{
  _DWORD *v2;
  CGPDFDictionary *v3;
  CGPDFInteger v4;
  CGPDFInteger v5;
  _BOOL4 Integer;
  double v7;
  CGPDFStringRef v8;
  unint64_t v9;
  CGPDFStringRef v10;
  __int128 v11;
  CGPDFStringRef v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CGPDFStringRef v19;
  unint64_t v20;
  CGPDFStringRef v21;
  __int128 v22;
  CGPDFStringRef v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  _BOOL4 String;
  CGPDFStringRef value;
  CGPDFStringRef v34;
  CGPDFStringRef v35;
  CGPDFInteger v36;
  CGPDFInteger v37;
  uint64_t v38;
  CGPDFBoolean v39;
  CGPDFReal v40;

  v2 = malloc_type_calloc(1uLL, 0xE0uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v2)
    return v2;
  v40 = 0.0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  value = 0;
  v34 = 0;
  *((_WORD *)v2 + 92) = 0;
  v2[47] = 0;
  *((_QWORD *)v2 + 3) = 0;
  if (CGPDFArrayGetString(*a1, 0, &value))
    *((_QWORD *)v2 + 3) = value;
  v3 = a1[1];
  if (!CGPDFDictionaryGetInteger(v3, "V", &v37))
  {
    pdf_error("missing or invalid security handler version.");
LABEL_86:
    free(v2);
    return 0;
  }
  switch(v37)
  {
    case 1:
      v4 = 40;
      goto LABEL_16;
    case 2:
      v5 = 40;
      goto LABEL_11;
    case 4:
      v5 = 128;
LABEL_11:
      v36 = v5;
      Integer = CGPDFDictionaryGetInteger(v3, "Length", &v36);
      v4 = v36;
      if (!Integer || (unint64_t)(v36 - 40) <= 0x58 && (v36 & 7) == 0)
        goto LABEL_17;
      goto LABEL_86;
    case 5:
      v4 = 256;
LABEL_16:
      v36 = v4;
LABEL_17:
      *((_QWORD *)v2 + 1) = v4 / 8;
      if (!CGPDFDictionaryGetNumber(v3, "R", &v40))
      {
        pdf_error("missing or invalid security handler revision.");
        goto LABEL_86;
      }
      switch(v37)
      {
        case 0:
          v7 = 2.0;
          break;
        case 1:
        case 2:
        case 3:
          if (v40 == 2.0)
            goto LABEL_28;
          v7 = 3.0;
          break;
        case 4:
          v7 = 4.0;
          break;
        case 5:
          if (v40 == 5.0)
            goto LABEL_28;
          v7 = 6.0;
          break;
        default:
          goto LABEL_27;
      }
      if (v40 != v7)
      {
LABEL_27:
        goto LABEL_86;
      }
LABEL_28:
      *v2 = (int)v40;
      if (!CGPDFDictionaryGetString(v3, "O", &v34))
      {
        goto LABEL_86;
      }
      v8 = v34;
      if (!v34)
      {
        if ((int)*v2 >= 5 && (*v2 - 5) >= 2)
          goto LABEL_54;
        goto LABEL_43;
      }
      if (*((_QWORD *)v34 + 3))
        decrypt_string((uint64_t)v34);
      v9 = *((_QWORD *)v8 + 9);
      if ((int)*v2 < 5)
      {
        if (v9 == 32)
        {
          v10 = v34;
          if (*((_QWORD *)v34 + 3))
            decrypt_string((uint64_t)v34);
          v11 = *((_OWORD *)v10 + 6);
          *((_OWORD *)v2 + 7) = *((_OWORD *)v10 + 5);
          *((_OWORD *)v2 + 8) = v11;
          goto LABEL_54;
        }
LABEL_43:
        goto LABEL_86;
      }
      if ((*v2 - 5) >= 2)
        goto LABEL_54;
      if (v9 <= 0x2F)
        goto LABEL_43;
      v12 = v34;
      if (*((_QWORD *)v34 + 3))
      {
        decrypt_string((uint64_t)v34);
        v13 = *v2;
        v15 = *((_OWORD *)v12 + 6);
        v14 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v2 + 7) = *((_OWORD *)v12 + 5);
        *((_OWORD *)v2 + 8) = v15;
        *((_OWORD *)v2 + 9) = v14;
        if (v13 < 5)
          goto LABEL_49;
      }
      else
      {
        v16 = *((_OWORD *)v34 + 5);
        v17 = *((_OWORD *)v34 + 7);
        *((_OWORD *)v2 + 8) = *((_OWORD *)v34 + 6);
        *((_OWORD *)v2 + 9) = v17;
        *((_OWORD *)v2 + 7) = v16;
      }
      *((_QWORD *)v2 + 20) = *((_QWORD *)v12 + 14);
      *((_QWORD *)v2 + 21) = *((_QWORD *)v12 + 15);
LABEL_49:
      if (!CGPDFDictionaryGetString(v3, "OE", (CGPDFStringRef *)v2 + 22))
      {
        goto LABEL_86;
      }
      v18 = *((_QWORD *)v2 + 22);
      if (!v18)
        goto LABEL_71;
      if (*(_QWORD *)(v18 + 24))
        decrypt_string(*((_QWORD *)v2 + 22));
      if (*(_QWORD *)(v18 + 72) != 32)
      {
LABEL_71:
        goto LABEL_86;
      }
LABEL_54:
      if (!CGPDFDictionaryGetString(v3, "U", &v35))
      {
        goto LABEL_86;
      }
      v19 = v35;
      if (v35)
      {
        if (*((_QWORD *)v35 + 3))
          decrypt_string((uint64_t)v35);
        v20 = *((_QWORD *)v19 + 9);
        if ((int)*v2 < 5)
        {
          if (v20 == 32)
          {
            v21 = v35;
            if (*((_QWORD *)v35 + 3))
              decrypt_string((uint64_t)v35);
            v22 = *((_OWORD *)v21 + 6);
            *(_OWORD *)((char *)v2 + 33) = *((_OWORD *)v21 + 5);
            *(_OWORD *)((char *)v2 + 49) = v22;
            goto LABEL_82;
          }
          goto LABEL_69;
        }
        if ((*v2 - 5) < 2)
        {
          if (v20 <= 0x2F)
          {
LABEL_69:
            goto LABEL_86;
          }
          v23 = v35;
          if (*((_QWORD *)v35 + 3))
          {
            decrypt_string((uint64_t)v35);
            v24 = *v2;
            v26 = *((_OWORD *)v23 + 6);
            v25 = *((_OWORD *)v23 + 7);
            *(_OWORD *)((char *)v2 + 33) = *((_OWORD *)v23 + 5);
            *(_OWORD *)((char *)v2 + 49) = v26;
            *(_OWORD *)((char *)v2 + 65) = v25;
            if (v24 < 5)
              goto LABEL_77;
          }
          else
          {
            v27 = *((_OWORD *)v35 + 5);
            v28 = *((_OWORD *)v35 + 6);
            *(_OWORD *)((char *)v2 + 65) = *((_OWORD *)v35 + 7);
            *(_OWORD *)((char *)v2 + 49) = v28;
            *(_OWORD *)((char *)v2 + 33) = v27;
          }
          *(_QWORD *)((char *)v2 + 81) = *((_QWORD *)v23 + 14);
          *(_QWORD *)((char *)v2 + 89) = *((_QWORD *)v23 + 15);
LABEL_77:
          if (!CGPDFDictionaryGetString(v3, "UE", (CGPDFStringRef *)v2 + 13))
          {
            goto LABEL_86;
          }
          v29 = *((_QWORD *)v2 + 13);
          if (!v29)
            goto LABEL_94;
          if (*(_QWORD *)(v29 + 24))
            decrypt_string(*((_QWORD *)v2 + 13));
          if (*(_QWORD *)(v29 + 72) != 32)
          {
LABEL_94:
            goto LABEL_86;
          }
        }
      }
      else if ((int)*v2 < 5 || (*v2 - 5) < 2)
      {
        goto LABEL_69;
      }
LABEL_82:
      if (!CGPDFDictionaryGetOffset(v3, "P", &v38))
      {
LABEL_85:
        pdf_error("missing or invalid security handler permissions.");
        goto LABEL_86;
      }
      v2[4] = v38;
      v30 = *v2 - 5;
      String = CGPDFDictionaryGetString(v3, "Perms", 0);
      if (v30 > 1)
      {
        if (String)
          pdf_error("encountered unexpected /Perms entry.");
      }
      else if (!String)
      {
        goto LABEL_85;
      }
      *((_BYTE *)v2 + 32) = 1;
      if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 4 && CGPDFDictionaryGetBoolean(v3, "EncryptMetadata", &v39))
        *((_BYTE *)v2 + 32) = v39 != 0;
      return v2;
    default:
      goto LABEL_86;
  }
}

uint64_t CGPDFSecurityHandlerAuthenticateUserPassword(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3;
  CC_MD5_CTX *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *RC4;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t i;
  size_t v24;
  uint64_t j;
  _QWORD *v26;
  size_t v29[2];
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = a3;
  if (!a2)
  {
    if (a3)
      return 0;
  }
  switch(*(_DWORD *)a1)
  {
    case 2:
      if ((get_encryption_key(a1, a2, a3, md) & 1) == 0)
      {
        pdf_error("Failed to generate file decryption key.\n");
        return 0;
      }
      *(_OWORD *)c.count = pad_15487;
      *(_OWORD *)&c.hash[2] = unk_18500014C;
      RC4 = CGCryptorCreateRC4(md, *(_QWORD *)(a1 + 8));
      CGCryptorProcessBytes((uint64_t)RC4, &c, 0x20uLL, &c, 0x20uLL, 0);
      CGCryptorRelease((uint64_t)RC4);
      if (*(_QWORD *)c.count != *(_QWORD *)(a1 + 33)
        || *(_QWORD *)c.hash != *(_QWORD *)(a1 + 41)
        || *(_QWORD *)&c.hash[2] != *(_QWORD *)(a1 + 49)
        || *(_QWORD *)&c.hash[4] != *(_QWORD *)(a1 + 57))
      {
        return 0;
      }
      goto LABEL_61;
    case 3:
    case 4:
      if ((get_encryption_key(a1, a2, a3, md) & 1) == 0)
      {
        pdf_error("Failed to generate decryption key.\n");
        return 0;
      }
      v6 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
      CC_MD5_Init(v6);
      if (v6)
      {
        CC_MD5_Update(v6, &pad_15487, 0x20u);
        v8 = (uint64_t *)(a1 + 24);
        v7 = *(_QWORD *)(a1 + 24);
        if (!v7)
          goto LABEL_47;
      }
      else
      {
        v8 = (uint64_t *)(a1 + 24);
        v7 = *(_QWORD *)(a1 + 24);
        if (!v7)
          goto LABEL_48;
      }
      if (*(_QWORD *)(v7 + 24))
      {
        decrypt_string(v7);
        v19 = *v8;
        v20 = (char *)(v7 + 80);
        if (!v19)
        {
          v21 = 0;
          if (!v6)
            goto LABEL_48;
          goto LABEL_46;
        }
        v7 = v19;
      }
      else
      {
        v20 = (char *)(v7 + 80);
      }
      if (*(_QWORD *)(v7 + 24))
        decrypt_string(v7);
      v21 = *(_QWORD *)(v7 + 72);
      if (v6)
      {
LABEL_46:
        md5_update(v6, v20, v21);
LABEL_47:
        CC_MD5_Final((unsigned __int8 *)&c, v6);
      }
LABEL_48:
      free(v6);
      v22 = CGCryptorCreateRC4(md, *(_QWORD *)(a1 + 8));
      CGCryptorProcessBytes((uint64_t)v22, &c, 0x10uLL, &c, 0x10uLL, 0);
      CGCryptorRelease((uint64_t)v22);
      for (i = 1; i != 20; ++i)
      {
        v24 = *(_QWORD *)(a1 + 8);
        if (v24)
        {
          for (j = 0; j != v24; ++j)
            *((_BYTE *)v29 + j) = md[j] ^ i;
          v26 = CGCryptorCreateRC4(v29, v24);
        }
        else
        {
          v26 = 0;
        }
        CGCryptorProcessBytes((uint64_t)v26, &c, 0x10uLL, &c, 0x10uLL, 0);
        CGCryptorRelease((uint64_t)v26);
      }
      if (*(_QWORD *)c.count == *(_QWORD *)(a1 + 33) && *(_QWORD *)c.hash == *(_QWORD *)(a1 + 41))
      {
LABEL_61:
        memcpy((void *)(a1 + 192), md, *(_QWORD *)(a1 + 8));
        return 1;
      }
      return 0;
    case 5:
      memset(&c.hash[6], 0, 72);
      if (a3 >= 0x7F)
        LODWORD(v3) = 127;
      memset(&c, 0, 32);
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, a2, v3);
      CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
      CC_SHA256_Final(md, &c);
      v13 = *(_QWORD *)md ^ *(_QWORD *)(a1 + 33) | *(_QWORD *)&md[8] ^ *(_QWORD *)(a1 + 41) | v32 ^ *(_QWORD *)(a1 + 49) | v33 ^ *(_QWORD *)(a1 + 57);
      v14 = v13 == 0;
      if (v13)
        return v14;
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, a2, v3);
      CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
      CC_SHA256_Final(md, &c);
      goto LABEL_28;
    case 6:
      hash_password_revision_6(a2, a3, (const void *)(a1 + 81), 0, &c);
      v15 = *(_QWORD *)c.count ^ *(_QWORD *)(a1 + 33) | *(_QWORD *)c.hash ^ *(_QWORD *)(a1 + 41) | *(_QWORD *)&c.hash[2] ^ *(_QWORD *)(a1 + 49) | *(_QWORD *)&c.hash[4] ^ *(_QWORD *)(a1 + 57);
      v14 = v15 == 0;
      if (v15)
        return v14;
      hash_password_revision_6(a2, v3, (const void *)(a1 + 89), 0, md);
LABEL_28:
      v16 = pdf_aes_create((uint64_t)md, 32);
      v17 = *(_QWORD *)(a1 + 104);
      if (v17)
      {
        if (*(_QWORD *)(v17 + 24))
          decrypt_string(*(_QWORD *)(a1 + 104));
        v18 = (const void *)(v17 + 80);
      }
      else
      {
        v18 = 0;
      }
      v29[0] = 0;
      CCCryptorUpdate((CCCryptorRef)v16[7], v18, 0x20uLL, (void *)(a1 + 192), 0x20uLL, v29);
      pdf_aes_free(v16);
      return v14;
    default:
      return 0;
  }
}

uint64_t get_encryption_key(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  BOOL v4;
  uint64_t v5;
  CC_MD5_CTX *v10;
  const float *v11;
  uint32x4_t v12;
  int16x8_t v13;
  const float *v14;
  uint32x4_t v15;
  int16x8_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  CC_MD5_CTX *v21;
  unsigned __int32 data;
  unsigned __int8 md[16];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = 1;
  else
    v4 = a3 == 0;
  v5 = v4;
  if (!v4)
    return v5;
  v10 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v10);
  if (a3 < 0x20)
  {
    if (v10)
    {
      md5_update(v10, a2, a3);
      md5_update(v10, (char *)&pad_15487, 32 - a3);
      goto LABEL_14;
    }
  }
  else if (v10)
  {
    CC_MD5_Update(v10, a2, 0x20u);
LABEL_14:
    CC_MD5_Update(v10, (const void *)(a1 + 112), 0x20u);
    v11 = (const float *)(a1 + 16);
    v12 = (uint32x4_t)vld1q_dup_f32(v11);
    v13 = (int16x8_t)vshlq_u32(v12, (uint32x4_t)xmmword_185005010);
    *(int16x4_t *)v13.i8 = vmovn_s32((int32x4_t)v13);
    data = vmovn_s16(v13).u32[0];
    CC_MD5_Update(v10, &data, 4u);
    goto LABEL_16;
  }
  v14 = (const float *)(a1 + 16);
  v15 = (uint32x4_t)vld1q_dup_f32(v14);
  v16 = (int16x8_t)vshlq_u32(v15, (uint32x4_t)xmmword_185005010);
  *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
  data = vmovn_s16(v16).u32[0];
LABEL_16:
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 24))
    {
      decrypt_string(*(_QWORD *)(a1 + 24));
      v18 = (char *)(v17 + 80);
      if (!*(_QWORD *)(a1 + 24))
      {
        v19 = 0;
        if (!v10)
          goto LABEL_25;
        goto LABEL_24;
      }
      v17 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v18 = (char *)(v17 + 80);
    }
    if (*(_QWORD *)(v17 + 24))
      decrypt_string(v17);
    v19 = *(_QWORD *)(v17 + 72);
    if (v10)
LABEL_24:
      md5_update(v10, v18, v19);
  }
LABEL_25:
  if (*(int *)a1 >= 3 && !*(_BYTE *)(a1 + 32))
  {
    data = -1;
    if (!v10)
      goto LABEL_29;
    CC_MD5_Update(v10, &data, 4u);
    goto LABEL_28;
  }
  if (v10)
LABEL_28:
    CC_MD5_Final(md, v10);
LABEL_29:
  free(v10);
  if (*(int *)a1 >= 3)
  {
    v20 = 50;
    do
    {
      v21 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
      CC_MD5_Init(v21);
      if (v21)
      {
        md5_update(v21, (char *)md, *(_QWORD *)(a1 + 8));
        CC_MD5_Final(md, v21);
      }
      free(v21);
      --v20;
    }
    while (v20);
  }
  memcpy(a4, md, *(_QWORD *)(a1 + 8));
  return v5;
}

void hash_password_revision_6(const void *a1, size_t a2, const void *a3, __int128 *a4, _OWORD *a5)
{
  char *v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  int v26;
  unsigned int v27;
  unsigned int v28;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;
  CC_SHA512_CTX v31;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = (char *)malloc_type_malloc(0x3BC0uLL, 0x653C481AuLL);
  *(_QWORD *)&c.wbuf[14] = 0;
  if (a4)
    v10 = 48;
  else
    v10 = 0;
  memset(&c.wbuf[6], 0, 32);
  if (a2 >= 0x7F)
    a2 = 127;
  memset(&c, 0, 64);
  memset(&v31, 0, sizeof(v31));
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a1, a2);
  CC_SHA256_Update(&c, a3, 8u);
  if (a4)
    CC_SHA256_Update(&c, a4, 0x30u);
  CC_SHA256_Final((unsigned __int8 *)&md, &c);
  v11 = 0;
  v12 = 0;
  v26 = v10 + a2;
  v13 = 32;
  while (v12 < 0x40 || (int)(v12 - 32) < v9[v11 - 1])
  {
    v27 = v13;
    v28 = v12;
    v14 = v26 + v13;
    v15 = v9;
    v16 = 64;
    v17 = v13;
    v18 = a2 + v13;
    do
    {
      memcpy(v15, a1, a2);
      memcpy(&v15[a2], &md, v17);
      if (a4)
      {
        v19 = &v15[v18];
        v20 = *a4;
        v21 = a4[2];
        *((_OWORD *)v19 + 1) = a4[1];
        *((_OWORD *)v19 + 2) = v21;
        *(_OWORD *)v19 = v20;
      }
      v15 += v14;
      --v16;
    }
    while (v16);
    v11 = (_DWORD)v14 << 6;
    cryptorRef = 0;
    CCCryptorCreate(0, 0, 0, &md, 0x10uLL, v34, &cryptorRef);
    dataOutMoved = 0;
    CCCryptorUpdate(cryptorRef, v9, ((_DWORD)v14 << 6), v9, ((_DWORD)v14 << 6), &dataOutMoved);
    CCCryptorRelease(cryptorRef);
    v22 = 0;
    v23 = 0;
    do
      v23 = (v23 + v9[v22++] % 3u) % 3;
    while (v22 != 16);
    if (v23)
    {
      if (v23 == 1)
      {
        CC_SHA384_Init(&v31);
        CC_SHA384_Update(&v31, v9, (_DWORD)v14 << 6);
        CC_SHA384_Final((unsigned __int8 *)&md, &v31);
        v13 = 48;
      }
      else
      {
        v13 = v27;
        if (v23 == 2)
        {
          CC_SHA512_Init(&v31);
          CC_SHA512_Update(&v31, v9, (_DWORD)v14 << 6);
          CC_SHA512_Final((unsigned __int8 *)&md, &v31);
          v13 = 64;
        }
      }
    }
    else
    {
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, v9, (_DWORD)v14 << 6);
      CC_SHA256_Final((unsigned __int8 *)&md, &c);
      v13 = 32;
    }
    v12 = v28 + 1;
  }
  v24 = v34[0];
  *a5 = md;
  a5[1] = v24;
  free(v9);
}

uint64_t CGPDFSecurityHandlerAuthenticateOwnerPassword(uint64_t a1, _OWORD *a2, size_t a3)
{
  size_t v3;
  _BOOL8 v6;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *RC4;
  __int128 v16;
  uint64_t i;
  _QWORD *j;
  unsigned __int8 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _CCCryptor *v25;
  size_t *p_dataOutMoved;
  size_t dataOutMoved;
  unsigned __int8 v28[32];
  CC_SHA256_CTX c;
  __int128 md;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = a3;
  if (!a2)
  {
    if (a3)
      return 0;
  }
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 2) < 3)
  {
    if (a3 > 0x1F)
    {
      v13 = a2[1];
      *(_OWORD *)c.count = *a2;
      *(_OWORD *)&c.hash[2] = v13;
    }
    else
    {
      __memcpy_chk();
      memcpy((char *)&c + v3, &pad_15487, 32 - v3);
    }
    CGGetMD5DigestOfBytes((unsigned __int8 *)&md, (char *)&c, 0x20uLL);
    if (*(int *)a1 >= 3)
    {
      v14 = 50;
      do
      {
        CGGetMD5DigestOfBytes((unsigned __int8 *)&md, (char *)&md, *(_QWORD *)(a1 + 8));
        --v14;
      }
      while (v14);
    }
    RC4 = *(_QWORD **)(a1 + 8);
    __memcpy_chk();
    v16 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)c.count = *(_OWORD *)(a1 + 112);
    *(_OWORD *)&c.hash[2] = v16;
    if ((*(_DWORD *)a1 - 3) < 2)
    {
      for (i = 0; i != 20; ++i)
      {
        if (RC4)
        {
          for (j = 0; j != RC4; j = (_QWORD *)((char *)j + 1))
            v28[(_QWORD)j] ^= 19 - (_BYTE)i;
          RC4 = CGCryptorCreateRC4(v28, (size_t)RC4);
        }
        CGCryptorProcessBytes((uint64_t)RC4, &c, 0x20uLL, &c, 0x20uLL, 0);
        CGCryptorRelease((uint64_t)RC4);
        RC4 = *(_QWORD **)(a1 + 8);
        if (RC4)
        {
          v19 = v28;
          v20 = *(_QWORD *)(a1 + 8);
          do
          {
            *v19++ ^= 19 - (_BYTE)i;
            --v20;
          }
          while (v20);
        }
      }
      return CGPDFSecurityHandlerAuthenticateUserPassword(a1, (char *)&c, 0x20uLL);
    }
    if (*(_DWORD *)a1 == 2)
    {
      v21 = CGCryptorCreateRC4(v28, (size_t)RC4);
      CGCryptorProcessBytes((uint64_t)v21, &c, 0x20uLL, &c, 0x20uLL, 0);
      CGCryptorRelease((uint64_t)v21);
      return CGPDFSecurityHandlerAuthenticateUserPassword(a1, (char *)&c, 0x20uLL);
    }
    return 0;
  }
  if (v8 != 5)
  {
    if (v8 != 6)
      return 0;
    hash_password_revision_6(a2, a3, (const void *)(a1 + 160), (__int128 *)(a1 + 33), &c);
    v9 = *(_QWORD *)c.count ^ *(_QWORD *)(a1 + 112) | *(_QWORD *)c.hash ^ *(_QWORD *)(a1 + 120) | *(_QWORD *)&c.hash[2] ^ *(_QWORD *)(a1 + 128) | *(_QWORD *)&c.hash[4] ^ *(_QWORD *)(a1 + 136);
    v6 = v9 == 0;
    if (v9)
      return v6;
    hash_password_revision_6(a2, v3, (const void *)(a1 + 168), (__int128 *)(a1 + 33), &md);
    v10 = pdf_aes_create((uint64_t)&md, 32);
    v11 = *(_QWORD *)(a1 + 176);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 24))
        decrypt_string(*(_QWORD *)(a1 + 176));
      v12 = (const void *)(v11 + 80);
    }
    else
    {
      v12 = 0;
    }
    v24 = (void *)(a1 + 192);
    *(_QWORD *)v28 = 0;
    v25 = (_CCCryptor *)v10[7];
    p_dataOutMoved = (size_t *)v28;
LABEL_45:
    CCCryptorUpdate(v25, v12, 0x20uLL, v24, 0x20uLL, p_dataOutMoved);
    pdf_aes_free(v10);
    return v6;
  }
  memset(&c.hash[6], 0, 72);
  if (a3 >= 0x7F)
    LODWORD(v3) = 127;
  memset(&c, 0, 32);
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a2, v3);
  CC_SHA256_Update(&c, (const void *)(a1 + 160), 8u);
  CC_SHA256_Update(&c, (const void *)(a1 + 33), 0x20u);
  CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
  CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
  CC_SHA256_Final((unsigned __int8 *)&md, &c);
  v22 = md ^ *(_QWORD *)(a1 + 112) | *((_QWORD *)&md + 1) ^ *(_QWORD *)(a1 + 120) | v31 ^ *(_QWORD *)(a1 + 128) | v32 ^ *(_QWORD *)(a1 + 136);
  v6 = v22 == 0;
  if (!v22)
  {
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, a2, v3);
    CC_SHA256_Update(&c, (const void *)(a1 + 168), 8u);
    CC_SHA256_Update(&c, (const void *)(a1 + 33), 0x20u);
    CC_SHA256_Update(&c, (const void *)(a1 + 81), 8u);
    CC_SHA256_Update(&c, (const void *)(a1 + 89), 8u);
    CC_SHA256_Final(v28, &c);
    v10 = pdf_aes_create((uint64_t)v28, 32);
    v23 = *(_QWORD *)(a1 + 176);
    if (v23)
    {
      if (*(_QWORD *)(v23 + 24))
        decrypt_string(*(_QWORD *)(a1 + 176));
      v12 = (const void *)(v23 + 80);
    }
    else
    {
      v12 = 0;
    }
    v24 = (void *)(a1 + 192);
    dataOutMoved = 0;
    v25 = (_CCCryptor *)v10[7];
    p_dataOutMoved = &dataOutMoved;
    goto LABEL_45;
  }
  return v6;
}

void CGPDFContextBeginMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t);
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 96);
    v13 = CFSTR("TagType");
    v14[0] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", a2);
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    if (v8)
    {
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(v8 + 168);
      if (v12)
        v12(v8, v9, v10, CFSTR("BeginMarkedContentSequence"), v11);
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextBeginStructuralMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 96);
    v14 = 0;
    v15[0] = CFSTR("TagType");
    v15[1] = CFSTR("MarkedContentItem");
    v16[0] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", a2);
    v16[1] = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", &v14);
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
    if (v8)
    {
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(v8 + 168);
      if (v12)
        v12(v8, v9, v10, CFSTR("BeginStructuralMarkedContentSequence"), v11);
    }
    return v14;
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginStructuralMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGPDFContextEndMarkedContentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(void);

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 168);
      if (v9)
        v9();
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextEndMarkedContentSequence", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextBeginObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 96);
    v14 = 0;
    v15 = CFSTR("MarkedContentItem");
    v16[0] = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", &v14);
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    if (v8)
    {
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(v8 + 168);
      if (v12)
        v12(v8, v9, v10, CFSTR("BeginObjectReference"), v11);
    }
    return v14;
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextBeginObjectReference", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGPDFContextEndObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(void);

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 168);
      if (v9)
        v9();
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextEndObjectReference", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGPDFContextAddStructureTreeRootChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t);
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 96);
    v14 = CFSTR("StructureElement");
    v15[0] = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", a2);
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
    if (v8)
    {
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t))(v8 + 168);
      if (v12)
        return v12(v8, v9, v10, CFSTR("AddStructureTreeRootChild"), v11);
      else
        return 1006;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    handle_invalid_context((char)"CGPDFContextAddStructureTreeRootChild", a1, a3, a4, a5, a6, a7, a8);
    return 1001;
  }
}

uint64_t JArithmeticDecoderStats::copy(JArithmeticDecoderStats *this)
{
  uint64_t v2;
  signed int v3;
  void *v4;

  v2 = operator new();
  v3 = *((_DWORD *)this + 2);
  *(_DWORD *)(v2 + 8) = v3;
  v4 = gmallocn(v3, 1u);
  *(_QWORD *)v2 = v4;
  bzero(v4, v3);
  memcpy(v4, *(const void **)this, *((int *)this + 2));
  return v2;
}

void sub_184D47FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

uint64_t JArithmeticDecoder::start(JArithmeticDecoder *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t result;
  int v10;

  if (*((_DWORD *)this + 9))
  {
    v2 = *((_DWORD *)this + 8);
    v3 = v2 - 1;
    *((_DWORD *)this + 8) = v2 - 1;
    if (v2 <= 0)
    {
      v4 = 255;
      *(_DWORD *)this = 255;
      *((_DWORD *)this + 8) = v3 - 1;
LABEL_7:
      v8 = 255;
      goto LABEL_8;
    }
  }
  v4 = (*(unsigned __int8 (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 9);
  *(_DWORD *)this = v4;
  if (v5)
  {
    v6 = *((_DWORD *)this + 8);
    v7 = __OFSUB__(v6--, 1);
    *((_DWORD *)this + 8) = v6;
    if (v6 < 0 != v7)
      goto LABEL_7;
  }
  v8 = (*(unsigned __int8 (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v4 = *(_DWORD *)this;
LABEL_8:
  *((_DWORD *)this + 1) = v8;
  *((_DWORD *)this + 2) = (v4 << 16) ^ 0xFF0000;
  result = JArithmeticDecoder::byteIn((uint64_t)this);
  v10 = *((_DWORD *)this + 4) - 7;
  *((_DWORD *)this + 2) <<= 7;
  *((_DWORD *)this + 3) = 0x80000000;
  *((_DWORD *)this + 4) = v10;
  return result;
}

uint64_t JArithmeticDecoder::byteIn(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v1 = (unsigned int *)this;
  v2 = *(_DWORD *)(this + 4);
  if (*(_DWORD *)this != 255)
  {
    *(_DWORD *)this = v2;
    if (*(_DWORD *)(this + 36)
      && (v6 = *(_DWORD *)(this + 32), v4 = __OFSUB__(v6, 1), --v6, *(_DWORD *)(this + 32) = v6, (v6 < 0) ^ v4))
    {
      v7 = 255;
    }
    else
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 24) + 32))(*(_QWORD *)(this + 24));
      v7 = this;
      v2 = *v1;
    }
    v8 = v1[2] - (v2 << 8) + 65280;
    v1[1] = v7;
    v1[2] = v8;
    goto LABEL_11;
  }
  if (v2 > 0x8F)
  {
LABEL_11:
    v9 = 8;
    goto LABEL_14;
  }
  *(_DWORD *)this = v2;
  if (*(_DWORD *)(this + 36)
    && (v3 = *(_DWORD *)(this + 32), v4 = __OFSUB__(v3, 1), --v3, *(_DWORD *)(this + 32) = v3, (v3 < 0) ^ v4))
  {
    v5 = 255;
  }
  else
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 24) + 32))(*(_QWORD *)(this + 24));
    v5 = this;
    v2 = *v1;
  }
  v10 = v1[2] - (v2 << 9) + 65024;
  v1[1] = v5;
  v1[2] = v10;
  v9 = 7;
LABEL_14:
  v1[4] = v9;
  return this;
}

uint64_t JArithmeticDecoder::decodeBit(JArithmeticDecoder *this, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  char v13;
  char v14;
  char v15;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  int v22;
  int v23;

  if ((a2 & 0x80000000) != 0 || *((_DWORD *)a3 + 2) <= a2)
    return 0;
  v4 = *a3;
  v5 = *(unsigned __int8 *)(*a3 + a2);
  v6 = v5 >> 1;
  v7 = JArithmeticDecoder::qeTab[v5 >> 1];
  v8 = v5 & 1;
  v9 = *((_DWORD *)this + 2);
  v10 = *((_DWORD *)this + 3) - v7;
  *((_DWORD *)this + 3) = v10;
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
  {
    *((_DWORD *)this + 2) = v12;
    if (v10 >= v7)
    {
      v18 = 2 * JArithmeticDecoder::nlpsTab[v6];
      v19 = v18 | v8;
      v8 = v8 ^ 1;
      v20 = v18 | v8;
      if (JArithmeticDecoder::switchTab[v6])
        v17 = v20;
      else
        v17 = v19;
    }
    else
    {
      v17 = v8 | (2 * JArithmeticDecoder::nmpsTab[v6]);
    }
    *(_BYTE *)(v4 + a2) = v17;
    *((_DWORD *)this + 3) = v7;
    v21 = *((_DWORD *)this + 4);
    do
    {
      if (!v21)
      {
        JArithmeticDecoder::byteIn((uint64_t)this);
        v7 = *((_DWORD *)this + 3);
        v21 = *((_DWORD *)this + 4);
      }
      v7 *= 2;
      *((_DWORD *)this + 2) *= 2;
      *((_DWORD *)this + 3) = v7;
      *((_DWORD *)this + 4) = --v21;
    }
    while ((v7 & 0x80000000) == 0);
  }
  else if ((v10 & 0x80000000) == 0)
  {
    if (v10 >= v7)
    {
      v15 = v8 | (2 * JArithmeticDecoder::nmpsTab[v6]);
    }
    else
    {
      v13 = 2 * JArithmeticDecoder::nlpsTab[v6];
      v14 = v13 | v8;
      v8 = v8 ^ 1;
      v15 = v13 | v8;
      if (!JArithmeticDecoder::switchTab[v6])
        v15 = v14;
    }
    *(_BYTE *)(v4 + a2) = v15;
    v22 = *((_DWORD *)this + 4);
    do
    {
      if (!v22)
      {
        JArithmeticDecoder::byteIn((uint64_t)this);
        v22 = *((_DWORD *)this + 4);
      }
      v23 = 2 * *((_DWORD *)this + 3);
      *((_DWORD *)this + 2) *= 2;
      *((_DWORD *)this + 3) = v23;
      *((_DWORD *)this + 4) = --v22;
    }
    while ((v23 & 0x80000000) == 0);
  }
  return v8;
}

uint64_t JArithmeticDecoder::decodeInt(JArithmeticDecoder *a1, int *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;

  *((_DWORD *)a1 + 5) = 1;
  v6 = JArithmeticDecoder::decodeBit(a1, 1u, a3);
  v7 = *((_DWORD *)a1 + 5);
  if (v7 >= 0x100)
    v8 = v6 | (2 * v7) & 0xFE | 0x100;
  else
    v8 = v6 | (2 * v7);
  *((_DWORD *)a1 + 5) = v8;
  v9 = JArithmeticDecoder::decodeBit(a1, v8, a3);
  v10 = *((_DWORD *)a1 + 5);
  if (v10 >= 0x100)
    v11 = v9 | (2 * v10) & 0xFE | 0x100;
  else
    v11 = v9 | (2 * v10);
  *((_DWORD *)a1 + 5) = v11;
  v12 = JArithmeticDecoder::decodeBit(a1, v11, a3);
  v13 = *((_DWORD *)a1 + 5);
  if (v13 >= 0x100)
    v14 = v12 | (2 * v13) & 0xFE | 0x100;
  else
    v14 = v12 | (2 * v13);
  *((_DWORD *)a1 + 5) = v14;
  v15 = JArithmeticDecoder::decodeBit(a1, v14, a3);
  v16 = v15;
  v17 = *((_DWORD *)a1 + 5);
  if (v17 >= 0x100)
    v18 = v15 | (2 * v17) & 0xFE | 0x100;
  else
    v18 = v15 | (2 * v17);
  *((_DWORD *)a1 + 5) = v18;
  if (v9)
  {
    if (v12)
    {
      if (v15)
      {
        v19 = JArithmeticDecoder::decodeBit(a1, v18, a3);
        v20 = *((_DWORD *)a1 + 5);
        if (v20 >= 0x100)
          v21 = v19 | (2 * v20) & 0xFE | 0x100;
        else
          v21 = v19 | (2 * v20);
        *((_DWORD *)a1 + 5) = v21;
        if (v19)
        {
          v22 = JArithmeticDecoder::decodeBit(a1, v21, a3);
          v23 = *((_DWORD *)a1 + 5);
          if (v23 >= 0x100)
            v24 = v22 | (2 * v23) & 0xFE | 0x100;
          else
            v24 = v22 | (2 * v23);
          *((_DWORD *)a1 + 5) = v24;
          v25 = 0;
          if (v22)
          {
            v26 = 32;
            do
            {
              v27 = JArithmeticDecoder::decodeBit(a1, v24, a3);
              v28 = *((_DWORD *)a1 + 5);
              if (v28 >= 0x100)
                v24 = v27 | (2 * v28) & 0xFE | 0x100;
              else
                v24 = v27 | (2 * v28);
              *((_DWORD *)a1 + 5) = v24;
              v25 = v27 | (2 * v25);
              --v26;
            }
            while (v26);
            v29 = v25 + 4436;
            if (!v6)
              goto LABEL_66;
          }
          else
          {
            v48 = 12;
            do
            {
              v49 = JArithmeticDecoder::decodeBit(a1, v24, a3);
              v50 = *((_DWORD *)a1 + 5);
              if (v50 >= 0x100)
                v24 = v49 | (2 * v50) & 0xFE | 0x100;
              else
                v24 = v49 | (2 * v50);
              *((_DWORD *)a1 + 5) = v24;
              v25 = v49 | (2 * v25);
              --v48;
            }
            while (v48);
            v29 = v25 + 340;
            if (!v6)
              goto LABEL_66;
          }
        }
        else
        {
          v44 = 0;
          v45 = 8;
          do
          {
            v46 = JArithmeticDecoder::decodeBit(a1, v21, a3);
            v47 = *((_DWORD *)a1 + 5);
            if (v47 >= 0x100)
              v21 = v46 | (2 * v47) & 0xFE | 0x100;
            else
              v21 = v46 | (2 * v47);
            *((_DWORD *)a1 + 5) = v21;
            v44 = v46 | (2 * v44);
            --v45;
          }
          while (v45);
          v29 = v44 + 84;
          if (!v6)
            goto LABEL_66;
        }
      }
      else
      {
        v41 = 6;
        do
        {
          v42 = JArithmeticDecoder::decodeBit(a1, v18, a3);
          v43 = *((_DWORD *)a1 + 5);
          if (v43 >= 0x100)
            v18 = v42 | (2 * v43) & 0xFE | 0x100;
          else
            v18 = v42 | (2 * v43);
          *((_DWORD *)a1 + 5) = v18;
          v16 = v42 | (2 * v16);
          --v41;
        }
        while (v41);
        v29 = v16 + 20;
        if (!v6)
          goto LABEL_66;
      }
    }
    else
    {
      v30 = JArithmeticDecoder::decodeBit(a1, v18, a3);
      v31 = *((_DWORD *)a1 + 5);
      if (v31 >= 0x100)
        v32 = v30 | (2 * v31) & 0xFE | 0x100;
      else
        v32 = v30 | (2 * v31);
      *((_DWORD *)a1 + 5) = v32;
      v33 = (2 * v30) | (4 * v16);
      v34 = JArithmeticDecoder::decodeBit(a1, v32, a3);
      v35 = *((_DWORD *)a1 + 5);
      if (v35 >= 0x100)
        v36 = v34 | (2 * v35) & 0xFE | 0x100;
      else
        v36 = v34 | (2 * v35);
      *((_DWORD *)a1 + 5) = v36;
      v37 = 2 * (v34 | v33);
      v38 = JArithmeticDecoder::decodeBit(a1, v36, a3);
      v39 = *((_DWORD *)a1 + 5);
      if (v39 >= 0x100)
        v40 = v38 | (2 * v39) & 0xFE | 0x100;
      else
        v40 = v38 | (2 * v39);
      *((_DWORD *)a1 + 5) = v40;
      v29 = (v37 + 4) | v38;
      if (!v6)
        goto LABEL_66;
    }
  }
  else
  {
    v29 = v15 | (2 * v12);
    if (!v6)
      goto LABEL_66;
  }
  if (v29)
  {
    v29 = -v29;
LABEL_66:
    *a2 = v29;
    return 1;
  }
  return 0;
}

uint64_t JArithmeticDecoder::decodeIAID(JArithmeticDecoder *this, int a2, uint64_t *a3)
{
  unsigned int v4;
  int v7;

  v4 = 1;
  *((_DWORD *)this + 5) = 1;
  if (a2)
  {
    v7 = a2;
    do
    {
      v4 = JArithmeticDecoder::decodeBit(this, v4, a3) | (2 * *((_DWORD *)this + 5));
      *((_DWORD *)this + 5) = v4;
      --v7;
    }
    while (v7);
  }
  return v4 + (-1 << a2);
}

uint64_t RenderTriangleMesh(double *a1, unsigned int a2, int *a3, int a4, uint64_t a5, uint64_t *a6, CGFloat *a7)
{
  double v13;
  double v14;
  unsigned int v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t result;
  double v23;
  double v24;
  CGFloat x;
  double y;
  CGFloat width;
  double height;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  size_t v33;
  int v34;
  int v35;
  int v36;
  int v38;
  double *v39;
  double v40;
  double *v41;
  double v42;
  double *v43;
  double v44;
  double *v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double *v62;
  double *v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double *v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double *v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  double *v95;
  double *v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  uint64_t v104;
  double *v105;
  double *v106;
  double *v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double *v113;
  double *v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  double *v120;
  double v121;
  double v122;
  double *v123;
  uint64_t v124;
  double v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  double *v130;
  double *v131;
  uint64_t v132;
  double v133;
  double v134;
  uint64_t v135;
  double *v136;
  double *v137;
  uint64_t v138;
  double v139;
  double v140;
  uint64_t v141;
  double v142;
  double *v143;
  double *v144;
  double *v145;
  double *v146;
  uint64_t v147;
  double v148;
  _QWORD v149[7];
  __int128 v150;
  _OWORD v151[5];
  uint64_t v152;
  double v153[5];
  double v154[5];
  _QWORD v155[7];
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;

  v155[5] = *MEMORY[0x1E0C80C00];
  v14 = *a1;
  v13 = a1[1];
  if (a2 >= 2)
  {
    v15 = a2 - 1;
    v16 = a1 + 10;
    v17 = *a1;
    v18 = a1[1];
    while (1)
    {
      v19 = *(v16 - 1);
      v20 = v19 > v17 ? *(v16 - 1) : v17;
      if (v19 < v14)
        v14 = *(v16 - 1);
      else
        v17 = v20;
      v21 = *v16;
      if (*v16 < v18)
        break;
      if (v21 <= v13)
        goto LABEL_12;
LABEL_13:
      v16 += 9;
      v13 = v21;
      if (!--v15)
        goto LABEL_16;
    }
    v18 = *v16;
LABEL_12:
    v21 = v13;
    goto LABEL_13;
  }
  v18 = a1[1];
  v17 = *a1;
  v21 = v18;
LABEL_16:
  v23 = v17 - v14;
  v24 = v21 - v18;
  if (v24 < 0.0 || v17 - v14 < 0.0)
  {
    v156.origin.x = v14;
    v156.origin.y = v18;
    v156.size.width = v23;
    v156.size.height = v24;
    CGRectStandardize(v156);
    v157.origin.x = v14;
    v157.origin.y = v18;
    v157.size.width = v23;
    v157.size.height = v24;
    CGRectStandardize(v157);
    v158.origin.x = v14;
    v158.origin.y = v18;
    v158.size.width = v23;
    v158.size.height = v24;
    v159 = CGRectStandardize(v158);
    if (v159.size.width >= 0.0)
    {
      v160.origin.x = v14;
      v160.origin.y = v18;
      v160.size.width = v23;
      v160.size.height = v24;
      v161 = CGRectStandardize(v160);
      if (v161.size.width < 134217727.0)
      {
        v162.origin.x = v14;
        v162.origin.y = v18;
        v162.size.width = v23;
        v162.size.height = v24;
        v163 = CGRectStandardize(v162);
        if (v163.size.height >= 0.0)
        {
          v164.origin.x = v14;
          v164.origin.y = v18;
          v164.size.width = v23;
          v164.size.height = v24;
          v165 = CGRectStandardize(v164);
          if (v165.size.height < 134217727.0)
          {
            v166.origin.x = v14;
            v166.origin.y = v18;
            v166.size.width = v23;
            v166.size.height = v24;
            if (fabs(COERCE_DOUBLE(CGRectStandardize(v166))) < 134217727.0)
            {
              v167.origin.x = v14;
              v167.origin.y = v18;
              v167.size.width = v23;
              v167.size.height = v24;
              v168 = CGRectStandardize(v167);
              goto LABEL_38;
            }
          }
        }
      }
    }
    return 0;
  }
  result = 0;
  if (v23 < 0.0)
    return result;
  if (v23 >= 134217727.0)
    return result;
  result = 0;
  if (v24 < 0.0 || v24 >= 134217727.0)
    return result;
  v168.origin.y = v18;
  if (fabs(v14) >= 134217727.0)
    return 0;
LABEL_38:
  if (fabs(v168.origin.y) >= 134217727.0)
    return 0;
  v169.origin.x = v14;
  v169.origin.y = v18;
  v169.size.width = v23;
  v169.size.height = v24;
  v170 = CGRectIntegral(v169);
  x = v170.origin.x;
  y = v170.origin.y;
  width = v170.size.width;
  height = v170.size.height;
  if (v170.size.width < 0.0 || v170.size.height < 0.0)
  {
    v171 = CGRectStandardize(v170);
    v30 = (int)v171.size.width;
    v171.origin.x = x;
    v171.origin.y = y;
    v171.size.width = width;
    v171.size.height = height;
    v170 = CGRectStandardize(v171);
  }
  else
  {
    v30 = (int)v170.size.width;
  }
  v31 = (int)v170.size.height;
  v32 = !v30 || v31 == 0;
  if (v32 || ((v31 * (unint64_t)(v30 * a5)) & 0xFFFFFFFF00000000) != 0)
    return 0;
  v33 = v30 * (_DWORD)a5 * v31;
  result = (uint64_t)malloc_type_calloc(1uLL, v33, 0xE7741BFuLL);
  if (result)
  {
    v141 = result;
    v149[0] = result;
    v149[1] = result + v33 - 1;
    v149[2] = v30;
    *(CGFloat *)&v149[3] = x;
    *(double *)&v149[4] = y;
    *(CGFloat *)&v149[5] = width;
    *(double *)&v149[6] = height;
    if (a4)
    {
      v34 = 0;
      v140 = floor(y + height);
      v147 = v30 * a5;
      while (1)
      {
        v35 = *a3;
        if (*a3 != -1)
        {
          v36 = a3[1];
          if (v36 != -1 && v35 != -13 && a3[2] != -1)
            break;
        }
LABEL_156:
        ++v34;
        a3 += 4;
        if (v34 == a4)
          goto LABEL_157;
      }
      v38 = a3[2];
      v39 = &a1[9 * v35];
      v40 = v39[1];
      v41 = &a1[9 * v36];
      v42 = v41[1];
      v43 = &a1[9 * v38];
      v44 = v43[1];
      v45 = v41 + 4;
      if (v40 > v42)
      {
        if (v42 <= v44)
        {
          if (v40 <= v44)
          {
            v46 = &a1[9 * v38 + 4];
            v47 = &a1[9 * v35 + 4];
            v48 = &a1[9 * v38];
            v49 = v39;
          }
          else
          {
            v46 = &a1[9 * v35 + 4];
            v47 = &a1[9 * v38 + 4];
            v48 = &a1[9 * v35];
            v49 = &a1[9 * v38];
          }
          v43 = v41;
        }
        else
        {
          v46 = &a1[9 * v35 + 4];
          v47 = v41 + 4;
          v45 = &a1[9 * v38 + 4];
          v48 = &a1[9 * v35];
          v49 = v41;
        }
        goto LABEL_70;
      }
      if (v44 <= v42)
      {
        if (v44 <= v40)
        {
          v47 = &a1[9 * v35 + 4];
          v46 = v41 + 4;
          v45 = &a1[9 * v38 + 4];
          v48 = v41;
          v49 = v39;
          goto LABEL_70;
        }
        v47 = &a1[9 * v38 + 4];
        v46 = v41 + 4;
        v45 = &a1[9 * v35 + 4];
        v48 = v41;
        v49 = &a1[9 * v38];
      }
      else
      {
        v46 = &a1[9 * v38 + 4];
        v47 = v41 + 4;
        v45 = &a1[9 * v35 + 4];
        v48 = &a1[9 * v38];
        v49 = v41;
      }
      v43 = v39;
LABEL_70:
      v50 = v43[1];
      v146 = v48;
      v51 = v48[1];
      v52 = v50 - v51;
      if (v50 - v51 != 0.0)
      {
        v53 = *v48;
        v54 = *v43;
        v56 = *v49;
        v55 = v49[1];
        v57 = v55 - v51;
        v58 = *v49 - *v48;
        if (a5)
        {
          v59 = 0;
          do
          {
            *(double *)&v155[v59] = (v45[v59] - v46[v59]) / v52;
            ++v59;
          }
          while (a5 != v59);
          v60 = 0;
          if (v57 == 0.0)
            v57 = 1.0;
          do
          {
            v154[v60] = (v47[v60] - v46[v60]) / v57;
            ++v60;
          }
          while (a5 != v60);
          v61 = v50 - v55;
          if (v50 - v55 == 0.0)
            v61 = 1.0;
          v62 = v153;
          v63 = v47;
          v64 = a5;
          do
          {
            v65 = *v45++;
            v66 = v65;
            v67 = *v63++;
            *v62++ = (v66 - v67) / v61;
            --v64;
          }
          while (v64);
          v68 = v58 / v57;
          v69 = (v54 - v56) / v61;
        }
        else
        {
          if (v57 == 0.0)
            v57 = 1.0;
          v68 = v58 / v57;
          v70 = v50 - v55;
          if (v50 - v55 == 0.0)
            v70 = 1.0;
          v69 = (v54 - v56) / v70;
        }
        v142 = v69;
        if (v51 >= y)
        {
          v71 = y + height;
          v72 = v141;
          if (v51 < y + height)
          {
            v71 = floor(v51);
            v72 = v141 + v30 * (int)(v140 - v71) * a5;
          }
          v73 = (v53 - v54) * (v55 - v50) - (v56 - v54) * (v51 - v50);
          v148 = (v54 - v53) / v52;
          v152 = v72;
          v150 = 0u;
          memset(v151, 0, sizeof(v151));
          v144 = v43;
          v145 = v47;
          v143 = v49;
          if (v73 >= 0.0)
          {
            if (v73 > 0.0)
            {
              if (v71 <= v55)
              {
LABEL_127:
                if (v71 > v50)
                {
                  v117 = v71 - v55;
                  v118 = *v49 + v117 * v142;
                  *(double *)&v150 = v118;
                  if (a5)
                  {
                    v119 = 0;
                    do
                    {
                      *((double *)v151 + v119) = v47[v119] + v117 * v153[v119];
                      ++v119;
                    }
                    while (a5 != v119);
                    v120 = (double *)&v151[2] + 1;
                    v121 = v71 - v146[1];
                    v122 = *v146 + v121 * v148;
                    *((double *)&v150 + 1) = v122;
                    v123 = (double *)v155;
                    v124 = a5;
                    do
                    {
                      v125 = *v46++;
                      v126 = v125;
                      v127 = *v123++;
                      *v120++ = v126 + v121 * v127;
                      --v124;
                    }
                    while (v124);
                  }
                  else
                  {
                    v122 = *v146 + (v71 - v146[1]) * v148;
                    *((double *)&v150 + 1) = v122;
                  }
                  if (v50 <= y)
                    v134 = y;
                  else
                    v134 = v50;
                  while (v71 > v134)
                  {
                    RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                    v118 = v118 - v142;
                    v122 = v122 - v148;
                    *(double *)&v150 = v118;
                    *((double *)&v150 + 1) = v122;
                    if (a5)
                    {
                      v135 = 0;
                      do
                      {
                        *((double *)v151 + v135) = *((double *)v151 + v135) - v153[v135];
                        ++v135;
                      }
                      while (a5 != v135);
                      v136 = (double *)v155;
                      v137 = (double *)&v151[2] + 1;
                      v138 = a5;
                      do
                      {
                        v139 = *v136++;
                        *v137 = *v137 - v139;
                        ++v137;
                        --v138;
                      }
                      while (v138);
                    }
                    v72 += v147;
                    v152 = v72;
                    v71 = v71 + -1.0;
                  }
                }
              }
              else
              {
                v101 = v71 - v51;
                v102 = v53 + (v71 - v51) * v68;
                v103 = v53 + (v71 - v51) * v148;
                *(double *)&v150 = v102;
                *((double *)&v150 + 1) = v103;
                if (a5)
                {
                  v104 = 0;
                  do
                  {
                    *((double *)v151 + v104) = v46[v104] + v101 * v154[v104];
                    ++v104;
                  }
                  while (a5 != v104);
                  v105 = (double *)v155;
                  v106 = v46;
                  v107 = (double *)&v151[2] + 1;
                  v108 = a5;
                  do
                  {
                    v109 = *v106++;
                    v110 = v109;
                    v111 = *v105++;
                    *v107++ = v110 + v101 * v111;
                    --v108;
                  }
                  while (v108);
                }
                while (v71 > y)
                {
                  RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                  v49 = v143;
                  v102 = v102 - v68;
                  v103 = v103 - v148;
                  *(double *)&v150 = v102;
                  *((double *)&v150 + 1) = v103;
                  if (a5)
                  {
                    v112 = 0;
                    do
                    {
                      *((double *)v151 + v112) = *((double *)v151 + v112) - v154[v112];
                      ++v112;
                    }
                    while (a5 != v112);
                    v113 = (double *)v155;
                    v114 = (double *)&v151[2] + 1;
                    v115 = a5;
                    do
                    {
                      v116 = *v113++;
                      *v114 = *v114 - v116;
                      ++v114;
                      --v115;
                    }
                    while (v115);
                  }
                  v72 += v147;
                  v152 = v72;
                  v71 = v71 + -1.0;
                  v55 = v143[1];
                  v47 = v145;
                  if (v71 <= v55)
                  {
                    v50 = v144[1];
                    goto LABEL_127;
                  }
                }
              }
            }
          }
          else if (v71 <= v55)
          {
LABEL_105:
            if (v71 > v50)
            {
              v90 = v71 - v146[1];
              v91 = *v146 + v90 * v148;
              *(double *)&v150 = v91;
              if (a5)
              {
                v92 = 0;
                do
                {
                  *((double *)v151 + v92) = v46[v92] + v90 * *(double *)&v155[v92];
                  ++v92;
                }
                while (a5 != v92);
                v93 = v71 - v55;
                v94 = *v49 + v93 * v142;
                *((double *)&v150 + 1) = v94;
                v95 = v153;
                v96 = (double *)&v151[2] + 1;
                v97 = a5;
                do
                {
                  v98 = *v47++;
                  v99 = v98;
                  v100 = *v95++;
                  *v96++ = v99 + v93 * v100;
                  --v97;
                }
                while (v97);
              }
              else
              {
                v94 = *v49 + (v71 - v55) * v142;
                *((double *)&v150 + 1) = v94;
              }
              if (v50 <= y)
                v128 = y;
              else
                v128 = v50;
              while (v71 > v128)
              {
                RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
                v91 = v91 - v148;
                v94 = v94 - v142;
                *(double *)&v150 = v91;
                *((double *)&v150 + 1) = v94;
                if (a5)
                {
                  v129 = 0;
                  do
                  {
                    *((double *)v151 + v129) = *((double *)v151 + v129) - *(double *)&v155[v129];
                    ++v129;
                  }
                  while (a5 != v129);
                  v130 = v153;
                  v131 = (double *)&v151[2] + 1;
                  v132 = a5;
                  do
                  {
                    v133 = *v130++;
                    *v131 = *v131 - v133;
                    ++v131;
                    --v132;
                  }
                  while (v132);
                }
                v72 += v147;
                v152 = v72;
                v71 = v71 + -1.0;
              }
            }
          }
          else
          {
            v74 = v71 - v51;
            v75 = v53 + (v71 - v51) * v148;
            v76 = v53 + (v71 - v51) * v68;
            *(double *)&v150 = v75;
            *((double *)&v150 + 1) = v76;
            if (a5)
            {
              v77 = 0;
              do
              {
                *((double *)v151 + v77) = v46[v77] + v74 * *(double *)&v155[v77];
                ++v77;
              }
              while (a5 != v77);
              v78 = v154;
              v79 = v46;
              v80 = (double *)&v151[2] + 1;
              v81 = a5;
              do
              {
                v82 = *v79++;
                v83 = v82;
                v84 = *v78++;
                *v80++ = v83 + v74 * v84;
                --v81;
              }
              while (v81);
            }
            while (v71 > y)
            {
              RenderGouradTriangleSpan((uint64_t)v149, (uint64_t)&v150, a5);
              v49 = v143;
              v75 = v75 - v148;
              v76 = v76 - v68;
              *(double *)&v150 = v75;
              *((double *)&v150 + 1) = v76;
              if (a5)
              {
                v85 = 0;
                do
                {
                  *((double *)v151 + v85) = *((double *)v151 + v85) - *(double *)&v155[v85];
                  ++v85;
                }
                while (a5 != v85);
                v86 = v154;
                v87 = (double *)&v151[2] + 1;
                v88 = a5;
                do
                {
                  v89 = *v86++;
                  *v87 = *v87 - v89;
                  ++v87;
                  --v88;
                }
                while (v88);
              }
              v72 += v147;
              v152 = v72;
              v71 = v71 + -1.0;
              v55 = v143[1];
              v47 = v145;
              if (v71 <= v55)
              {
                v50 = v144[1];
                goto LABEL_105;
              }
            }
          }
        }
      }
      goto LABEL_156;
    }
LABEL_157:
    *a6 = v141;
    *a7 = x;
    a7[1] = y;
    result = 1;
    a7[2] = width;
    a7[3] = height;
  }
  return result;
}

uint64_t RenderGouradTriangleSpan(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  int v5;
  double v6;
  int v7;
  int v8;
  double v9;
  double *v10;
  double *v11;
  uint64_t v12;
  double v13;
  double *v14;
  _DWORD *v15;
  _DWORD *v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  _BYTE v33[20];
  _BYTE v34[20];
  _BYTE v35[40];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = (int)*(double *)a2;
  if (*(double *)a2 > (double)v5)
    ++v5;
  v6 = *(double *)(result + 24);
  v7 = (int)v4;
  if (v5 <= (int)v6)
    v5 = (int)v6;
  if (v4 <= (double)v7)
    v8 = (int)v4;
  else
    v8 = v7 + 1;
  if (v8 >= (int)(v6 + *(double *)(result + 40)))
    v8 = (int)(v6 + *(double *)(result + 40));
  if (v5 < v8)
  {
    v9 = 1.0;
    if (v4 != v3)
      v9 = 1.0 / (v4 - v3);
    if (a3)
    {
      v10 = (double *)(a2 + 56);
      v11 = (double *)v35;
      v12 = a3;
      do
      {
        *v11++ = v9 * (*v10 - *(v10 - 5));
        ++v10;
        --v12;
      }
      while (v12);
      v13 = (double)v5 - v3;
      v14 = (double *)(a2 + 16);
      v15 = v34;
      v16 = v33;
      v17 = (double *)v35;
      v18 = a3;
      do
      {
        v19 = *v14++;
        v20 = v19;
        v21 = *v17++;
        *v16++ = (int)(v21 * 16777215.0);
        *v15++ = (int)((v20 + v13 * v21) * 16777215.0);
        --v18;
      }
      while (v18);
    }
    v22 = *(_QWORD *)(a2 + 96);
    if (v22 >= *(_QWORD *)result)
    {
      v23 = *(_QWORD *)(result + 8);
      v24 = v23 >= v22;
      v25 = v23 - v22;
      if (v24)
      {
        v26 = (v5 - (uint64_t)v6) * a3;
        if (v26 <= v25)
        {
          v27 = (_BYTE *)(v22 + v26);
          while (!a3)
          {
LABEL_27:
            if (++v5 >= v8)
              return result;
          }
          v28 = (int *)v34;
          v29 = (int *)v33;
          v30 = a3;
          while ((unint64_t)v27 <= *(_QWORD *)(result + 8))
          {
            v31 = *v29++;
            v32 = *v28;
            *v27++ = BYTE2(*v28);
            *v28++ = v32 + v31;
            if (!--v30)
              goto LABEL_27;
          }
        }
      }
    }
  }
  return result;
}

void nonOverlapOfFirst(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
}

uint64_t compareZOrder(id *a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, "zOrder");
  v4 = objc_msgSend(*a2, "zOrder");
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  else
    return v3 > v4;
}

BOOL CGHasRequiredColorSyncVersion()
{
  uint64_t v0;

  if (CGHasRequiredColorSyncVersion_cglibrarypredicate != -1)
    dispatch_once(&CGHasRequiredColorSyncVersion_cglibrarypredicate, &__block_literal_global_15633);
  v0 = CGHasRequiredColorSyncVersion_f();
  if (CGHasRequiredColorSyncVersion_cglibrarypredicate_16 != -1)
    dispatch_once(&CGHasRequiredColorSyncVersion_cglibrarypredicate_16, &__block_literal_global_18_15634);
  return (CGHasRequiredColorSyncVersion_f_15() | (unint64_t)(v0 << 32)) > 0xF0000030F000005;
}

uint64_t colorsync_smart_null_15638()
{
  return 0;
}

uint64_t CGColorTransformSupportsCalibratedColor()
{
  return 1;
}

uint64_t CGColorTransformGetTypeID()
{
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  return CGColorTransformGetTypeID_type_id;
}

uint64_t color_transform_equal(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *Cache;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
    {
      v5 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(a1 + 32))
      {
        if (v5)
        {
LABEL_7:
          Cache = CGColorTransformGetCache((_QWORD *)a1);
          if (Cache)
            v7 = (const void *)Cache[2];
          else
            v7 = 0;
          v8 = CGColorTransformGetCache((_QWORD *)a2);
          if (v8)
            v9 = (const void *)v8[2];
          else
            v9 = 0;
          result = CFEqual(v7, v9);
          if ((_DWORD)result)
          {
            v10 = *(const void **)(a1 + 32);
            if (!v10)
              return 1;
            v11 = *(const void **)(a2 + 32);
            if (!v11)
              return 1;
            result = CFEqual(v10, v11);
            if ((_DWORD)result)
              return 1;
          }
          return result;
        }
      }
      else if (!v5)
      {
        goto LABEL_7;
      }
    }
    return 0;
  }
  return result;
}

CFStringRef color_transform_copy_format_description(_QWORD *a1)
{
  _QWORD *Cache;
  uint64_t v3;

  Cache = CGColorTransformGetCache(a1);
  if (Cache)
    v3 = Cache[2];
  else
    v3 = 0;
  return CFStringCreateWithFormat(0, 0, CFSTR("<CGColorTransform %p -> space:%@ base:%@>"), a1, v3, a1[3]);
}

_QWORD *CGColorTransformGetColorSpace(_QWORD *a1)
{
  _QWORD *result;

  result = CGColorTransformGetCache(a1);
  if (result)
    return (_QWORD *)result[2];
  return result;
}

uint64_t CGColorTransformCreateCopyWithAttribute(uint64_t a1, void *a2)
{
  uint64_t v2;
  const __CFDictionary *v3;
  CFIndex Count;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  __n128 v11;
  CFDictionaryRef v12;
  CGColorSpace *Cache;
  uint64_t v15;
  void *values;
  void *keys[2];

  v2 = a1;
  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  values = a2;
  keys[0] = CFSTR("kCGColorConversionInfoOptions");
  if (a1)
  {
    v3 = *(const __CFDictionary **)(a1 + 32);
    if (v3 && CFDictionaryGetCount(v3) >= 1)
    {
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v2 + 32));
      v6 = 8 * (Count + 1);
      MEMORY[0x1E0C80A78](Count, v7);
      v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v6 >= 0x200)
        v9 = 512;
      else
        v9 = 8 * (Count + 1);
      bzero((char *)&v15 - v8, v9);
      MEMORY[0x1E0C80A78](v10, v11);
      bzero((char *)&v15 - v8, v9);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v2 + 32), (const void **)((char *)&v15 - v8), (const void **)((char *)&v15 - v8));
      *(uint64_t *)((char *)&v15 + 8 * Count - v8) = (uint64_t)CFSTR("kCGColorConversionInfoOptions");
      *(uint64_t *)((char *)&v15 + 8 * Count - v8) = (uint64_t)a2;
      v12 = CFDictionaryCreate(0, (const void **)((char *)&v15 - v8), (const void **)((char *)&v15 - v8), Count + 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    Cache = (CGColorSpace *)CGColorTransformGetCache((_QWORD *)v2);
    if (Cache)
      Cache = (CGColorSpace *)*((_QWORD *)Cache + 2);
    v2 = color_transform_create(Cache, v12);
    if (v12)
      CFRelease(v12);
  }
  return v2;
}

uint64_t CGColorTransformGetIdentifier(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t CGColorTransformGetAttributes(_QWORD *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v2 == CGColorTransformGetTypeID_type_id)
    return a1[4];
  else
    return 0;
}

BOOL CGColorTransformUsesCalibratedColor(_BYTE *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  return v2 == CGColorTransformGetTypeID_type_id && a1[96] != 0;
}

_QWORD *CGColorTransformConvertData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12)
{
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  if (a6 == 16)
    v15 = 2;
  else
    v15 = a6 == 8;
  if (a6 == 32)
    v16 = 4;
  else
    v16 = v15;
  return CGColorTransformConvertComponentData(a1, a2, v16, a3, a4, a5, a7, a7, v18, a9, a10, v19, a12);
}

CFDictionaryRef CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(const __CFDictionary *cf)
{
  CFDictionaryRef v1;
  const void *v2;
  CFTypeID v3;
  CFTypeID v6;
  const __CFDictionary *Value;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;
  int v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  const void *v23;
  const void *v24;
  CFTypeID v25;
  void *values;
  void *keys[2];

  v1 = cf;
  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (!cf)
    return v1;
  if (CGReferenceWhiteToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGReferenceWhiteToneMappingGetDefaultOptions_predicate, &__block_literal_global_1873);
  v2 = (const void *)CGReferenceWhiteToneMappingGetDefaultOptions_options;
  v3 = CFGetTypeID(v1);
  if (v3 == CFBooleanGetTypeID())
  {
    if ((CFDictionaryRef)*MEMORY[0x1E0C9AE50] == v1 && v2 != 0)
      return (CFDictionaryRef)CFRetain(v2);
    return 0;
  }
  v6 = CFGetTypeID(v1);
  if (v6 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v2, CFSTR("kCGApplyReferenceWhiteToneMapping"));
  if (CFEqual(Value, v1) != 1)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    if (MutableCopy)
    {
      v9 = MutableCopy;
      v10 = CFDictionaryGetValue(v1, CFSTR("kCGRWTMSourcePeak"));
      if (v10 && (v11 = v10, v12 = CFGetTypeID(v10), v12 == CFNumberGetTypeID()))
      {
        CFDictionarySetValue(v9, CFSTR("kCGRWTMSourcePeak"), v11);
        v13 = 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = CFDictionaryGetValue(v1, CFSTR("kCGRWTMSourceReferenceWhite"));
      if (v14)
      {
        v15 = v14;
        v16 = CFGetTypeID(v14);
        if (v16 == CFNumberGetTypeID())
        {
          CFDictionarySetValue(v9, CFSTR("kCGRWTMSourceReferenceWhite"), v15);
          v13 = 1;
        }
      }
      v17 = CFDictionaryGetValue(v1, CFSTR("kCGRWTMEDRHeadroom"));
      if (v17)
      {
        v18 = v17;
        v19 = CFGetTypeID(v17);
        if (v19 == CFNumberGetTypeID())
        {
          CFDictionarySetValue(v9, CFSTR("kCGRWTMEDRHeadroom"), v18);
          v13 = 1;
        }
      }
      v20 = CFDictionaryGetValue(v1, CFSTR("kCGRWTMTargetReferenceWhiteBase"));
      if (v20)
      {
        v21 = v20;
        v22 = CFGetTypeID(v20);
        if (v22 == CFNumberGetTypeID())
        {
          CFDictionarySetValue(v9, CFSTR("kCGRWTMTargetReferenceWhiteBase"), v21);
          v13 = 1;
        }
      }
      v23 = CFDictionaryGetValue(v1, CFSTR("kCGRWTMReferenceWhiteThreshold"));
      if (v23)
      {
        v24 = v23;
        v25 = CFGetTypeID(v23);
        if (v25 == CFNumberGetTypeID())
        {
          CFDictionarySetValue(v9, CFSTR("kCGRWTMReferenceWhiteThreshold"), v24);
LABEL_31:
          values = v9;
          keys[0] = CFSTR("kCGApplyReferenceWhiteToneMapping");
          v1 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(v9);
          return v1;
        }
      }
      if (v13)
        goto LABEL_31;
    }
    return 0;
  }
  values = v1;
  keys[0] = CFSTR("kCGApplyReferenceWhiteToneMapping");
  return CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CFIndex create_colorsync_reference_white_tone_mapping_options(const void *a1)
{
  CFTypeID v2;
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;
  CFIndex v6;
  void **v8;
  CFDictionaryRef v9;
  void *v10;
  void *v11;
  int v12;
  int valuePtr;
  void *values[2];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *keys[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("kCGApplyReferenceWhiteToneMapping"));
  if (!Value)
    return 0;
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID())
    return 0;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)keys = 0u;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)values = 0u;
  v12 = 0;
  v10 = 0;
  v11 = 0;
  v6 = 0;
  if (get_float_from_dictionary(v4, CFSTR("kCGRWTMSourcePeak"), &v12))
  {
    keys[0] = CFSTR("com.apple.cmm.RWTMSourcePeak");
    valuePtr = v12;
    values[0] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    v6 = 1;
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGRWTMSourceReferenceWhite"), &v12))
  {
    *(_QWORD *)((unint64_t)keys | (8 * v6)) = CFSTR("com.apple.cmm.RWTMSourceReferenceWhite");
    valuePtr = v12;
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v6++ & 1))) = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGRWTMEDRHeadroom"), &v12))
  {
    keys[v6] = CFSTR("com.apple.cmm.RWTMEDRHeadroom");
    valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGRWTMTargetReferenceWhiteBase"), &v12))
  {
    keys[v6] = CFSTR("com.apple.cmm.RWTMTargetReferenceWhiteBase");
    valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGRWTMReferenceWhiteThreshold"), &v12))
  {
    keys[v6] = CFSTR("com.apple.cmm.RWTMReferenceWhiteThreshold");
    valuePtr = v12;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  }
  else if (!v6)
  {
    return v6;
  }
  v8 = values;
  v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
  {
    if (*v8)
      CFRelease(*v8);
    ++v8;
    --v6;
  }
  while (v6);
  v10 = v9;
  v11 = CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping");
  v6 = (CFIndex)CFDictionaryCreate(0, (const void **)&v11, (const void **)&v10, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v9)
    CFRelease(v9);
  return v6;
}

CFDictionaryRef CGColorTransformCreateResolveFlexLumaOptions(CFTypeRef cf)
{
  const void *v2;
  CFTypeID v3;
  CFTypeID v6;
  const __CFDictionary *Value;
  CFDictionaryRef v8;
  CFTypeID v9;
  const __CFDictionary *v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (CGFlexLumaToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGFlexLumaToneMappingGetDefaultOptions_predicate, &__block_literal_global_7);
  v2 = (const void *)CGFlexLumaToneMappingGetDefaultOptions_options;
  v3 = CFGetTypeID(cf);
  if (v3 == CFBooleanGetTypeID())
  {
    if ((CFTypeRef)*MEMORY[0x1E0C9AE50] == cf && v2 != 0)
      return (CFDictionaryRef)CFRetain(v2);
    return 0;
  }
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("kCGFlexGTCTargetHeadroom"));
  v8 = Value;
  if (Value)
  {
    v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      v10 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v2, CFSTR("kCGApplyFlexLumaScaling"));
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v10);
      if (MutableCopy)
      {
        v12 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("kCGFlexGTCTargetHeadroom"), v8);
        values = v12;
        keys[0] = CFSTR("kCGApplyFlexLumaScaling");
        v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRelease(v12);
        return v8;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t get_float_from_dictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  uint64_t result;
  const __CFNumber *v5;
  CFTypeID v6;
  int valuePtr;

  result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = (const __CFNumber *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      *a3 = valuePtr;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFDictionaryRef CGColorTransformCreateResolveFlexTRCOptions(CFTypeRef cf)
{
  const void *v2;
  CFTypeID v3;
  CFTypeID v6;
  const __CFDictionary *Value;
  CFDictionaryRef v8;
  CFTypeID v9;
  const __CFDictionary *v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (CGFlexTRCToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGFlexTRCToneMappingGetDefaultOptions_predicate, &__block_literal_global_122);
  v2 = (const void *)CGFlexTRCToneMappingGetDefaultOptions_options;
  v3 = CFGetTypeID(cf);
  if (v3 == CFBooleanGetTypeID())
  {
    if ((CFTypeRef)*MEMORY[0x1E0C9AE50] == cf && v2 != 0)
      return (CFDictionaryRef)CFRetain(v2);
    return 0;
  }
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("kCGFlexGTCTargetHeadroom"));
  v8 = Value;
  if (Value)
  {
    v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      v10 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v2, CFSTR("kCGApplyFlexTRC"));
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v10);
      if (MutableCopy)
      {
        v12 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("kCGFlexGTCTargetHeadroom"), v8);
        values = v12;
        keys[0] = CFSTR("kCGApplyFlexTRC");
        v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRelease(v12);
        return v8;
      }
    }
    return 0;
  }
  return v8;
}

CFDictionaryRef CGColorTransformCreateResolveExtendedRangeToneMappingOptions(const __CFDictionary *cf)
{
  CFDictionaryRef v1;
  CFTypeID v2;
  const void *v3;
  CFTypeID v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFDictionary *v8;
  CFTypeID v9;
  const __CFDictionary *v10;
  CFDictionaryRef ResolveReferenceWhiteToneMappingOptions;
  CFDictionaryRef v12;
  void *values;
  void *keys[2];

  v1 = cf;
  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (!cf)
    return v1;
  v2 = CFGetTypeID(cf);
  if (v2 == CFStringGetTypeID())
  {
    if (CFEqual(v1, CFSTR("kCGApplyEXRToneMappingGamma")))
    {
      if (CGEXRToneMappingGammaGetDefaultOptions_predicate == -1)
        goto LABEL_5;
      goto LABEL_41;
    }
    if (!CFEqual(v1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping")))
    {
      if (!CFEqual(v1, CFSTR("kCGApplySceneReferredExtendedRangeToneMapping")))
        return 0;
      if (CGColorTransformGetSceneReferredToneMappingDefaultOptions_predicate != -1)
        dispatch_once(&CGColorTransformGetSceneReferredToneMappingDefaultOptions_predicate, &__block_literal_global_40_15779);
      v3 = (const void *)CGColorTransformGetSceneReferredToneMappingDefaultOptions_sceneReferredToneMappingOptions;
      if (!CGColorTransformGetSceneReferredToneMappingDefaultOptions_sceneReferredToneMappingOptions)
        return 0;
      return (CFDictionaryRef)CFRetain(v3);
    }
    if (CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate == -1)
    {
LABEL_19:
      v3 = (const void *)CGColorTransformGetDisplayReferredToneMappingDefaultOptions_displayReferredToneMappingOptions;
      if (!CGColorTransformGetDisplayReferredToneMappingDefaultOptions_displayReferredToneMappingOptions)
        return 0;
      return (CFDictionaryRef)CFRetain(v3);
    }
LABEL_42:
    dispatch_once(&CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate, &__block_literal_global_32_15778);
    goto LABEL_19;
  }
  v4 = CFGetTypeID(v1);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  if (CFDictionaryContainsKey(v1, CFSTR("kCGApplyEXRToneMappingGamma")) == 1)
  {
    if (CFDictionaryGetValue(v1, CFSTR("kCGApplyEXRToneMappingGamma")) == (const void *)*MEMORY[0x1E0C9AE50])
    {
      if (CGEXRToneMappingGammaGetDefaultOptions_predicate == -1)
      {
LABEL_5:
        v3 = (const void *)CGEXRToneMappingGammaGetDefaultOptions_exrToneMappingOptions;
        if (!CGEXRToneMappingGammaGetDefaultOptions_exrToneMappingOptions)
          return 0;
        return (CFDictionaryRef)CFRetain(v3);
      }
LABEL_41:
      dispatch_once(&CGEXRToneMappingGammaGetDefaultOptions_predicate, &__block_literal_global_13588);
      goto LABEL_5;
    }
    Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGApplyEXRToneMappingGamma"));
    if (!Value)
      return 0;
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 != CFDictionaryGetTypeID()
      || CFDictionaryContainsKey(v6, CFSTR("kCGEXRToneMappingGammaDefog")) != 1
      && CFDictionaryContainsKey(v6, CFSTR("kCGEXRToneMappingGammaExposure")) != 1
      && CFDictionaryContainsKey(v6, CFSTR("kCGEXRToneMappingGammaKneeLow")) != 1
      && CFDictionaryContainsKey(v6, CFSTR("kCGEXRToneMappingGammaKneeHigh")) != 1)
    {
      return 0;
    }
  }
  else
  {
    if (CFDictionaryContainsKey(v1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping")) == 1)
    {
      if (CFDictionaryGetValue(v1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping")) != (const void *)*MEMORY[0x1E0C9AE50])
      {
        v8 = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping"));
        v1 = v8;
        if (v8)
        {
          v9 = CFGetTypeID(v8);
          if (v9 != CFDictionaryGetTypeID())
            return 0;
          v10 = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGApplyReferenceWhiteToneMapping"));
          ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(v10);
          if (!ResolveReferenceWhiteToneMappingOptions)
            return 0;
          v12 = ResolveReferenceWhiteToneMappingOptions;
          values = ResolveReferenceWhiteToneMappingOptions;
          keys[0] = CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping");
          v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(v12);
        }
        return v1;
      }
      if (CGColorTransformGetDisplayReferredToneMappingDefaultOptions_predicate == -1)
        goto LABEL_19;
      goto LABEL_42;
    }
    if (CFDictionaryContainsKey(v1, CFSTR("kCGApplySceneReferredExtendedRangeToneMapping")) != 1
      || CFDictionaryGetValue(v1, CFSTR("kCGApplySceneReferredExtendedRangeToneMapping")) != (const void *)*MEMORY[0x1E0C9AE50])
    {
      return 0;
    }
  }
  return (CFDictionaryRef)CFRetain(v1);
}

CFDictionaryRef create_colorsync_extended_range_tone_mapping_options(const void *a1)
{
  CFTypeID v2;
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;
  CFIndex v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeID v11;
  CFIndex colorsync_reference_white_tone_mapping_options;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFDictionaryRef v18;
  uint64_t v20;
  const void *v21;
  CFTypeID v22;
  CFTypeID TypeID;
  void *ValueWithType;
  CFTypeID v25;
  void *v26;
  CFTypeID v27;
  void *v28;
  void **v29;
  CFDictionaryRef v30;
  const __CFString *v31;
  int v32;
  void *v33;
  void *v34;
  void *values[2];
  __int128 v36;
  void *keys[2];
  __int128 v38;
  void *v39[3];
  const void *valuePtr[4];

  valuePtr[3] = *(const void **)MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID())
    return 0;
  *(_OWORD *)keys = 0u;
  v38 = 0u;
  *(_OWORD *)values = 0u;
  v36 = 0u;
  v32 = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("kCGApplyEXRToneMappingGamma"));
  if (!Value || (v4 = Value, v5 = CFGetTypeID(Value), v5 != CFDictionaryGetTypeID()))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping")) == 1)
    {
      v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping"));
      if (v7)
      {
        v8 = v7;
        v9 = CFGetTypeID(v7);
        if (v9 == CFDictionaryGetTypeID())
        {
          v10 = CFDictionaryGetValue(v8, CFSTR("kCGApplyReferenceWhiteToneMapping"));
          if (v10 && (v11 = CFGetTypeID(v10), v11 == CFDictionaryGetTypeID()))
          {
            v31 = CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping");
            colorsync_reference_white_tone_mapping_options = create_colorsync_reference_white_tone_mapping_options(v8);
          }
          else
          {
            v31 = CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping");
            v22 = CFGetTypeID(v8);
            if (v22 == CFDictionaryGetTypeID())
            {
              memset(valuePtr, 0, 24);
              memset(v39, 0, sizeof(v39));
              TypeID = CFNumberGetTypeID();
              ValueWithType = (void *)CGCFDictionaryGetValueWithType(v8, CFSTR("kCGPQEOTFOpticalScale"), TypeID);
              if (ValueWithType)
              {
                valuePtr[0] = CFSTR("com.apple.cmm.PQEOTFOpticalScale");
                v39[0] = ValueWithType;
                colorsync_reference_white_tone_mapping_options = 1;
              }
              else
              {
                colorsync_reference_white_tone_mapping_options = 0;
              }
              v25 = CFNumberGetTypeID();
              v26 = (void *)CGCFDictionaryGetValueWithType(v8, CFSTR("kCGTargetDisplayWhite"), v25);
              if (v26)
              {
                valuePtr[colorsync_reference_white_tone_mapping_options] = CFSTR("com.apple.cmm.TargetDisplayWhite");
                v39[colorsync_reference_white_tone_mapping_options++] = v26;
              }
              v27 = CFNumberGetTypeID();
              v28 = (void *)CGCFDictionaryGetValueWithType(v8, CFSTR("kCGEXRReflectanceScale"), v27);
              if (v28)
              {
                valuePtr[colorsync_reference_white_tone_mapping_options] = CFSTR("com.apple.cmm.XRReflectanceScale");
                v39[colorsync_reference_white_tone_mapping_options++] = v28;
              }
              else if (!colorsync_reference_white_tone_mapping_options)
              {
                goto LABEL_48;
              }
              v29 = v39;
              v30 = CFDictionaryCreate(0, valuePtr, (const void **)v39, colorsync_reference_white_tone_mapping_options, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              do
              {
                if (*v29)
                  CFRelease(*v29);
                ++v29;
                --colorsync_reference_white_tone_mapping_options;
              }
              while (colorsync_reference_white_tone_mapping_options);
              v33 = v30;
              v34 = CFSTR("com.apple.cmm.ApplyPQEETFToneMapping");
              colorsync_reference_white_tone_mapping_options = (CFIndex)CFDictionaryCreate(0, (const void **)&v34, (const void **)&v33, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v30)
                CFRelease(v30);
              goto LABEL_48;
            }
            colorsync_reference_white_tone_mapping_options = 0;
          }
LABEL_48:
          valuePtr[0] = (const void *)colorsync_reference_white_tone_mapping_options;
          v6 = 1;
          goto LABEL_49;
        }
      }
      v13 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("kCGApplySceneReferredExtendedRangeToneMapping"));
      if (v13)
      {
        colorsync_reference_white_tone_mapping_options = (CFIndex)v13;
        v14 = CFGetTypeID(v13);
        if (v14 == CFDictionaryGetTypeID())
          _CGHandleAssert("create_colorsync_extended_range_tone_mapping_options", 1277, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransform.c", "0", "custom options not supported for kColorSyncTransformApplySceneReferredToneMapping", v15, v16, v17, (char)v31);
        if (colorsync_reference_white_tone_mapping_options == *MEMORY[0x1E0C9AE50])
        {
          v31 = CFSTR("com.apple.cmm.ApplySceneReferredToneMapping");
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGEXRToneMappingGammaDefog"), &v32))
  {
    keys[0] = CFSTR("com.apple.cmm.ToneMappingGammaDefog");
    LODWORD(valuePtr[0]) = v32;
    values[0] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGEXRToneMappingGammaExposure"), &v32))
  {
    *(_QWORD *)((unint64_t)keys | (8 * v6)) = CFSTR("com.apple.cmm.ToneMappingGammaExposure");
    LODWORD(valuePtr[0]) = v32;
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v6++ & 1))) = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGEXRToneMappingGammaKneeLow"), &v32))
  {
    keys[v6] = CFSTR("com.apple.cmm.ToneMappingGammaKneeLow");
    LODWORD(valuePtr[0]) = v32;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  }
  if (get_float_from_dictionary(v4, CFSTR("kCGEXRToneMappingGammaKneeHigh"), &v32))
  {
    keys[v6] = CFSTR("com.apple.cmm.ToneMappingGammaKneeHigh");
    LODWORD(valuePtr[0]) = v32;
    values[v6++] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    goto LABEL_25;
  }
  if (v6)
  {
LABEL_25:
    colorsync_reference_white_tone_mapping_options = (CFIndex)CFDictionaryCreate(0, (const void **)keys, (const void **)values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20 = 0;
    do
    {
      v21 = values[v20];
      if (v21)
        CFRelease(v21);
      ++v20;
    }
    while (v6 != v20);
    goto LABEL_29;
  }
  colorsync_reference_white_tone_mapping_options = 0;
LABEL_29:
  v31 = CFSTR("com.apple.cmm.ApplyEXRToneMappingGamma");
  valuePtr[0] = (const void *)colorsync_reference_white_tone_mapping_options;
LABEL_49:
  v18 = 0;
  if (v6 && colorsync_reference_white_tone_mapping_options)
  {
    v18 = CFDictionaryCreate(0, (const void **)&v31, valuePtr, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(valuePtr[0]);
  }
  return v18;
}

uint64_t CGGlyphBuilderGetQuantizationLevel(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t W8_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  int v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;

  v4 = *(_DWORD *)(result + 24);
  v126 = *(_DWORD *)(result + 28);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v125 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v125 = v5 % v6;
  }
  else
  {
    v125 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 120);
  v10 = *(_QWORD *)(result + 40);
  v127 = *(_QWORD *)(result + 32);
  if (v7)
  {
    v124 = *(_QWORD *)(result + 120);
    if (v9 > v7)
      v124 = v9 % v7;
  }
  else
  {
    v124 = 0;
  }
  v120 = *(_QWORD *)(result + 80);
  v122 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (v10)
    v14 = 0;
  else
    v14 = -16777216;
  v15 = *(_DWORD *)(result + 260) - 1;
  v16 = *(unsigned int *)(result + 256);
  v17 = (unsigned __int8 *)(v10 + (v16 - 1) + (v15 * v126));
  v119 = *(_DWORD *)(result + 188);
  v18 = v127 + v16 + (v15 * v4) - 1;
  v121 = *(_QWORD *)(result + 64);
  v123 = *(_QWORD *)(result + 72);
  while (1)
  {
    if (a3 < v123)
    {
      v19 = *(_QWORD *)(result + 216);
      v20 = v123 - *(_QWORD *)(result + 224);
      v21 = a3 - v20 + (v19 >> 1);
      v22 = a4;
      if (v21 < 1)
        goto LABEL_60;
      if (v21 >= v19)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
      v30 = v119 | v23;
      v31 = v20 + 0x1000000;
      v28 = a3 - (v20 + 0x1000000);
      v29 = 512;
      goto LABEL_24;
    }
    if (a3 <= v122)
    {
      v28 = 0;
      v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      v30 = 0x3FFFFFFF;
      v31 = a3;
      v22 = a4;
LABEL_24:
      v32 = v121;
      goto LABEL_27;
    }
    v24 = *(_QWORD *)(result + 216);
    v25 = *(_QWORD *)(result + 224) + v122;
    v26 = v25 - a3 + (v24 >> 1);
    v22 = a4;
    if (v26 < 1)
      goto LABEL_60;
    if (v26 >= v24)
      LODWORD(v27) = 0x3FFFFFFF;
    else
      v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
    v32 = v121;
    v30 = v119 | v27;
    v31 = v25 - 0x1000000;
    v28 = a3 - (v25 - 0x1000000);
    v29 = 448;
LABEL_27:
    if (a2 >= v32)
      break;
    v33 = *(_QWORD *)(result + 192);
    v34 = v32 - *(_QWORD *)(result + 200);
    v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33)
        v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v119;
      v36 = v34 + 0x1000000;
      v37 = a2 - (v34 + 0x1000000);
      v38 = 32;
      goto LABEL_38;
    }
LABEL_60:
    v55 = v22 - 1;
    a2 += v5;
    a3 += v9;
    v12 += 4;
    *(_BYTE *)++v13 = 0;
LABEL_61:
    a4 = v55;
    if (!v55)
      return result;
  }
  if (a2 <= v120)
  {
    v37 = 0;
    v38 = ((unint64_t)a2 >> 26) & 0x3C;
    v36 = a2;
    goto LABEL_38;
  }
  v39 = *(_QWORD *)(result + 192);
  v40 = *(_QWORD *)(result + 200) + v120;
  v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1)
    goto LABEL_60;
  if (v41 < v39)
    v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v41) >> 32) >> 15)) | v119;
  v36 = v40 - 0x1000000;
  v37 = a2 - (v40 - 0x1000000);
  v38 = 28;
LABEL_38:
  if (v30 < 0x400000)
    goto LABEL_60;
  if (v6)
  {
    v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7)
      v44 = v7;
    else
      v44 = 0;
    v31 = v42 - v44;
    if (v43 >= v6)
      v45 = v6;
    else
      v45 = 0;
    v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  v46 = v31 >> 32;
  v47 = v127 + SHIDWORD(v31) * (uint64_t)v4;
  v48 = v47 + (v36 >> 32);
  v49 = *(unsigned __int8 **)(result + 32);
  if (v18 >= v48)
    v50 = (unsigned __int8 *)(v47 + (v36 >> 32));
  else
    v50 = (unsigned __int8 *)v18;
  if (v50 < v49)
    v50 = *(unsigned __int8 **)(result + 32);
  v51 = *v50;
  if (v10)
  {
    v52 = v10 + (int)v46 * (uint64_t)v126 + (v36 >> 32);
    v53 = *(unsigned __int8 **)(result + 40);
    if ((unint64_t)v17 >= v52)
      v54 = (unsigned __int8 *)v52;
    else
      v54 = v17;
    if (v54 >= v53)
      v53 = v54;
    v51 |= *v53 << 24;
    if (!v8)
      goto LABEL_138;
  }
  else
  {
    v52 = 0;
    if (!v8)
      goto LABEL_138;
  }
  v56 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_66:
  v57 = v56 & 0xF;
  v58 = v56 >> 8;
  v59 = HIBYTE(v56) & 3;
  switch(v57)
  {
    case 1:
      LODWORD(v85) = SBYTE1(v56);
      if (v6)
      {
        v86 = v58 << 56;
        v87 = v28 + (v86 >> 24);
        v88 = v7 & (v87 >> 63);
        if (v88 + v87 >= v7)
          v89 = v7;
        else
          v89 = 0;
        v85 = (v88 + (v86 >> 24) - v89) >> 32;
      }
      v90 = (unsigned __int8 *)(v48 + (int)v85 * (uint64_t)v4);
      if (v18 < (unint64_t)v90)
        v90 = (unsigned __int8 *)v18;
      if (v90 < v49)
        v90 = v49;
      v91 = *v90;
      if (v10)
      {
        v92 = (unsigned __int8 *)(v52 + (int)v85 * (uint64_t)v126);
        if (v17 < v92)
          v92 = v17;
        if ((unint64_t)v92 < *(_QWORD *)(result + 40))
          v92 = *(unsigned __int8 **)(result + 40);
        v91 |= *v92 << 24;
      }
      v51 = v51
          - ((interpolate_8888_19472[v59] & v51) >> (v59 + 1))
          + ((interpolate_8888_19472[v59] & v91) >> (v59 + 1));
      break;
    case 2:
      v93 = SBYTE2(v56);
      if (v6)
      {
        v94 = (unint64_t)HIWORD(v56) << 56;
        v95 = v37 + (v94 >> 24);
        v96 = v6 & (v95 >> 63);
        if (v96 + v95 >= v6)
          v97 = v6;
        else
          v97 = 0;
        v93 = (v96 + (v94 >> 24) - v97) >> 32;
      }
      v98 = (unsigned __int8 *)(v48 + v93);
      if (v18 < v48 + v93)
        v98 = (unsigned __int8 *)v18;
      if (v98 < v49)
        v98 = v49;
      v99 = *v98;
      if (v10)
      {
        v100 = (unsigned __int8 *)(v52 + v93);
        if (v17 < v100)
          v100 = v17;
        if ((unint64_t)v100 < *(_QWORD *)(result + 40))
          v100 = *(unsigned __int8 **)(result + 40);
        v99 |= *v100 << 24;
      }
      v51 = v51
          - ((interpolate_8888_19472[(v56 >> 28) & 3] & v51) >> (((v56 >> 28) & 3) + 1))
          + ((interpolate_8888_19472[(v56 >> 28) & 3] & v99) >> (((v56 >> 28) & 3) + 1));
      break;
    case 3:
      v60 = HIBYTE(v56) & 3;
      v118 = v30;
      v117 = v22;
      LODWORD(v61) = SBYTE1(v56);
      v62 = SBYTE2(v56);
      if (v6)
      {
        v63 = v58 << 56;
        v64 = v28 + (v63 >> 24);
        v65 = v37 + ((uint64_t)SBYTE2(v56) << 32);
        v66 = v7 & (v64 >> 63);
        v67 = v6 & (v65 >> 63);
        v68 = v67 + v65;
        if (v66 + v64 >= v7)
          v69 = v7;
        else
          v69 = 0;
        if (v68 >= v6)
          v70 = v6;
        else
          v70 = 0;
        v61 = (v66 + (v63 >> 24) - v69) >> 32;
        v62 = (v67 + ((uint64_t)((unint64_t)HIWORD(v56) << 56) >> 24) - v70) >> 32;
      }
      v71 = (unsigned __int8 *)(v48 + v62);
      if (v18 < v48 + v62)
        v71 = (unsigned __int8 *)v18;
      if (v71 < v49)
        v71 = v49;
      v72 = *v71;
      v73 = v48 + (int)v61 * (uint64_t)v4;
      if (v18 >= v73)
        v74 = (unsigned __int8 *)(v48 + (int)v61 * (uint64_t)v4);
      else
        v74 = (unsigned __int8 *)v18;
      if (v74 < v49)
        v74 = v49;
      v75 = *v74;
      v76 = (unsigned __int8 *)(v73 + v62);
      if (v18 < (unint64_t)v76)
        v76 = (unsigned __int8 *)v18;
      if (v76 >= v49)
        v49 = v76;
      v77 = *v49;
      if (v10)
      {
        v78 = (unsigned __int8 *)(v52 + v62);
        v79 = *(_QWORD *)(result + 40);
        if ((unint64_t)v17 < v52 + v62)
          v78 = v17;
        if ((unint64_t)v78 < v79)
          v78 = *(unsigned __int8 **)(result + 40);
        v72 |= *v78 << 24;
        v80 = (unsigned __int8 *)(v52 + (int)v61 * (uint64_t)v126);
        if (v17 >= v80)
          v81 = v80;
        else
          v81 = v17;
        if ((unint64_t)v81 < v79)
          v81 = *(unsigned __int8 **)(result + 40);
        v75 |= *v81 << 24;
        v82 = &v80[v62];
        if (v17 < v82)
          v82 = v17;
        if ((unint64_t)v82 < v79)
          v82 = *(unsigned __int8 **)(result + 40);
        v77 |= *v82 << 24;
      }
      v83 = interpolate_8888_19472[v60];
      v84 = v51 - ((v83 & v51) >> (v60 + 1)) + ((v83 & v75) >> (v60 + 1));
      v51 = v84
          - ((v84 & interpolate_8888_19472[(v56 >> 28) & 3]) >> (((v56 >> 28) & 3) + 1))
          + (((v72 - ((v83 & v72) >> (v60 + 1)) + ((v83 & v77) >> (v60 + 1))) & interpolate_8888_19472[(v56 >> 28) & 3]) >> (((v56 >> 28) & 3) + 1));
      v22 = v117;
      v30 = v118;
      break;
  }
LABEL_138:
  *(_DWORD *)(v12 + 4) = v51 | v14;
  *(_BYTE *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    v101 = v22;
    v102 = 0;
    a2 += v5;
    v103 = v120 - a2;
    a3 += v9;
    v104 = v122 - a3;
    v105 = -4;
    while (((v104 | v103 | (a3 - v123) | (a2 - v121)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v106 = (v7 & ((v28 + v124) >> 63)) + v28 + v124;
        v107 = (v6 & ((v37 + v125) >> 63)) + v37 + v125;
        if (v106 >= v7)
          v108 = v7;
        else
          v108 = 0;
        v109 = v106 - v108;
        if (v107 >= v6)
          v110 = v6;
        else
          v110 = 0;
        v111 = v107 - v110;
        v37 = v111;
        v28 = v109;
      }
      else
      {
        v111 = a2;
        v109 = a3;
      }
      v112 = v109 >> 32;
      v113 = v127 + SHIDWORD(v109) * (uint64_t)v4;
      v48 = v113 + (v111 >> 32);
      v49 = *(unsigned __int8 **)(result + 32);
      if (v18 >= v48)
        v114 = (unsigned __int8 *)(v113 + (v111 >> 32));
      else
        v114 = (unsigned __int8 *)v18;
      if (v114 < v49)
        v114 = *(unsigned __int8 **)(result + 32);
      v51 = *v114;
      if (v10)
      {
        v52 = v10 + (int)v112 * (uint64_t)v126 + (v111 >> 32);
        v115 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v52)
          v116 = (unsigned __int8 *)v52;
        else
          v116 = v17;
        if (v116 >= v115)
          v115 = v116;
        v51 |= *v115 << 24;
      }
      if (v8)
      {
        v56 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v56 & 0xF) != 0)
        {
          v13 += v102 + 1;
          v12 -= v105;
          v22 = ~(_DWORD)v102 + v101;
          v30 = -1;
          goto LABEL_66;
        }
      }
      *(_DWORD *)(v12 + 4 * v102 + 8) = v51 | v14;
      *(_BYTE *)(v13 + v102++ + 2) = -1;
      v105 -= 4;
      a2 += v5;
      v103 -= v5;
      a3 += v9;
      v104 -= v9;
      if (v101 - 1 == (_DWORD)v102)
        return result;
    }
    v13 += v102 + 1;
    v12 -= v105;
    v55 = ~(_DWORD)v102 + v101;
    goto LABEL_61;
  }
  return result;
}

uint64_t W8_sample_RGB555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = -16777216;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v85 = *(_DWORD *)(result + 188);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6;
  v39 = v38 + 2 * v37;
  v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39)
    v41 = (unsigned __int16 *)(v38 + 2 * v37);
  else
    v41 = (unsigned __int16 *)v15;
  if (v41 < v40)
    v41 = *(unsigned __int16 **)(result + 32);
  v42 = bswap32(*v41) >> 16;
  if (!v5)
  {
    v43 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65)
        v65 = (unsigned __int16 *)v15;
      if (v65 < v40)
        v65 = v40;
      v66 = bswap32(*v65) >> 16;
      if (v5)
      {
        v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67)
          v67 = v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(unsigned __int8 **)(result + 40);
        v66 |= *v67 << 24;
      }
      v68 = interpolate_8555_19473[v48];
      v69 = v48 + 1;
      v70 = v42 - ((v68 & v42) >> v69);
      v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (unint64_t)HIWORD(v46) << 56;
          v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50)
            v50 = (unsigned __int16 *)v15;
          if (v50 < v40)
            v50 = v40;
          v51 = bswap32(*v50) >> 16;
          v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52)
            v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          else
            v53 = (unsigned __int16 *)v15;
          if (v53 < v40)
            v53 = v40;
          v54 = bswap32(*v53) >> 16;
          v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55)
            v55 = (unsigned __int16 *)v15;
          if (v55 < v40)
            v55 = v40;
          v56 = bswap32(*v55) >> 16;
          if (v5)
          {
            v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            v58 = *(_QWORD *)(result + 40);
            if (v14 < v57)
              v57 = v14;
            if ((unint64_t)v57 < v58)
              v57 = *(unsigned __int8 **)(result + 40);
            v51 |= *v57 << 24;
            v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59)
              v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            else
              v60 = v14;
            if ((unint64_t)v60 < v58)
              v60 = *(unsigned __int8 **)(result + 40);
            v54 |= *v60 << 24;
            v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61)
              v61 = v14;
            if ((unint64_t)v61 < v58)
              v61 = *(unsigned __int8 **)(result + 40);
            v56 |= *v61 << 24;
          }
          v62 = interpolate_8555_19473[v48];
          v63 = v48 + 1;
          v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          v42 = v64
              - ((v64 & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72)
        v72 = (unsigned __int16 *)v15;
      if (v72 < v40)
        v72 = v40;
      v73 = bswap32(*v72) >> 16;
      if (v5)
      {
        v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74)
          v74 = v14;
        if ((unint64_t)v74 < *(_QWORD *)(result + 40))
          v74 = *(unsigned __int8 **)(result + 40);
        v73 |= *v74 << 24;
      }
      v75 = (v46 >> 28) & 3;
      v76 = interpolate_8555_19473[v75];
      LOBYTE(v75) = v75 + 1;
      v70 = v42 - ((v76 & v42) >> v75);
      v71 = (v76 & v73) >> v75;
    }
    v42 = v70 + v71;
    goto LABEL_103;
  }
  v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43)
    v45 = (unsigned __int8 *)v43;
  else
    v45 = v14;
  if (v45 >= v44)
    v44 = v45;
  v42 |= *v44 << 24;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v77 = 0;
  v78 = 0;
  a3 += v9;
  v79 = v89 - a3;
  a2 += v10;
  v80 = v87 - a2;
  while (1)
  {
    v81 = (v42 & 0x1F)
        + ((unsigned __int16)(v42 & 0x3E0) >> 3)
        + ((v42 >> 9) & 0x3E)
        + ((unsigned __int16)(v42 & 0x3E0) >> 5);
    *(_DWORD *)(v91 + 4 + 4 * v77) = v81 & 0xF8 | (v11 | (v42 >> 5) | v42) & 0xFF000000 | (v81 >> 5);
    *(_BYTE *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v77)
      return result;
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      v91 = v91 - v78 + 4;
      a4 += ~(_DWORD)v77;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39)
      v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    else
      v82 = (unsigned __int16 *)v15;
    if (v82 < v40)
      v82 = *(unsigned __int16 **)(result + 32);
    v42 = bswap32(*v82) >> 16;
    if (v5)
    {
      v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        v91 = v91 - v78 + 4;
        a4 += ~(_DWORD)v77;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    v25 = -1;
  }
}

uint64_t W8_sample_rgb555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = -16777216;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v85 = *(_DWORD *)(result + 188);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6;
  v39 = v38 + 2 * v37;
  v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39)
    v41 = (unsigned __int16 *)(v38 + 2 * v37);
  else
    v41 = (unsigned __int16 *)v15;
  if (v41 < v40)
    v41 = *(unsigned __int16 **)(result + 32);
  v42 = *v41;
  if (!v5)
  {
    v43 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65)
        v65 = (unsigned __int16 *)v15;
      if (v65 < v40)
        v65 = v40;
      v66 = *v65;
      if (v5)
      {
        v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67)
          v67 = v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(unsigned __int8 **)(result + 40);
        v66 |= *v67 << 24;
      }
      v68 = interpolate_8555_19473[v48];
      v69 = v48 + 1;
      v70 = v42 - ((v68 & v42) >> v69);
      v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (unint64_t)HIWORD(v46) << 56;
          v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50)
            v50 = (unsigned __int16 *)v15;
          if (v50 < v40)
            v50 = v40;
          v51 = *v50;
          v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52)
            v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          else
            v53 = (unsigned __int16 *)v15;
          if (v53 < v40)
            v53 = v40;
          v54 = *v53;
          v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55)
            v55 = (unsigned __int16 *)v15;
          if (v55 < v40)
            v55 = v40;
          v56 = *v55;
          if (v5)
          {
            v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            v58 = *(_QWORD *)(result + 40);
            if (v14 < v57)
              v57 = v14;
            if ((unint64_t)v57 < v58)
              v57 = *(unsigned __int8 **)(result + 40);
            v51 |= *v57 << 24;
            v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59)
              v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            else
              v60 = v14;
            if ((unint64_t)v60 < v58)
              v60 = *(unsigned __int8 **)(result + 40);
            v54 |= *v60 << 24;
            v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61)
              v61 = v14;
            if ((unint64_t)v61 < v58)
              v61 = *(unsigned __int8 **)(result + 40);
            v56 |= *v61 << 24;
          }
          v62 = interpolate_8555_19473[v48];
          v63 = v48 + 1;
          v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          v42 = v64
              - ((v64 & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72)
        v72 = (unsigned __int16 *)v15;
      if (v72 < v40)
        v72 = v40;
      v73 = *v72;
      if (v5)
      {
        v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74)
          v74 = v14;
        if ((unint64_t)v74 < *(_QWORD *)(result + 40))
          v74 = *(unsigned __int8 **)(result + 40);
        v73 |= *v74 << 24;
      }
      v75 = (v46 >> 28) & 3;
      v76 = interpolate_8555_19473[v75];
      LOBYTE(v75) = v75 + 1;
      v70 = v42 - ((v76 & v42) >> v75);
      v71 = (v76 & v73) >> v75;
    }
    v42 = v70 + v71;
    goto LABEL_103;
  }
  v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43)
    v45 = (unsigned __int8 *)v43;
  else
    v45 = v14;
  if (v45 >= v44)
    v44 = v45;
  v42 |= *v44 << 24;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v77 = 0;
  v78 = 0;
  a3 += v9;
  v79 = v89 - a3;
  a2 += v10;
  v80 = v87 - a2;
  while (1)
  {
    v81 = (v42 & 0x1F)
        + ((unsigned __int16)(v42 & 0x3E0) >> 3)
        + ((v42 >> 9) & 0x3E)
        + ((unsigned __int16)(v42 & 0x3E0) >> 5);
    *(_DWORD *)(v91 + 4 + 4 * v77) = v81 & 0xF8 | (v11 | (v42 >> 5) | v42) & 0xFF000000 | (v81 >> 5);
    *(_BYTE *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v77)
      return result;
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      v91 = v91 - v78 + 4;
      a4 += ~(_DWORD)v77;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39)
      v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    else
      v82 = (unsigned __int16 *)v15;
    if (v82 < v40)
      v82 = *(unsigned __int16 **)(result + 32);
    v42 = *v82;
    if (v5)
    {
      v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        v91 = v91 - v78 + 4;
        a4 += ~(_DWORD)v77;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    v25 = -1;
  }
}

uint64_t W8_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  v73 = *(_DWORD *)(result + 188);
  v14 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  v74 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v9)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v27 = v8;
        v18 = v74;
        goto LABEL_16;
      }
      v20 = *(_QWORD *)(result + 216);
      v21 = *(_QWORD *)(result + 224) + v9;
      v22 = v21 - a3 + (v20 >> 1);
      v18 = v74;
      if (v22 < 1)
        goto LABEL_35;
      if (v22 >= v20)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
      v25 = v73 | v23;
      v26 = v21 - 0x1000000;
      v24 = 448;
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v7 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      v18 = v74;
      if (v17 < 1)
        goto LABEL_35;
      if (v17 >= v15)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v25 = v73 | v19;
      v26 = v16 + 0x1000000;
      v24 = 512;
    }
    v27 = v8;
LABEL_16:
    if (a2 >= v18)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v18 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v73;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_27;
    }
LABEL_35:
    --a4;
    a2 += v10;
    a3 += v11;
    v12 += 4;
    *(_BYTE *)++v13 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v27)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_27;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v27;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_35;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v73;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_27:
  if (v25 < 0x400000)
    goto LABEL_35;
  v36 = v4 + SHIDWORD(v26) * (uint64_t)v5;
  v37 = 3 * (v31 >> 32);
  v38 = v36 + v37;
  v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v36 + v37)
    v40 = (unsigned __int8 *)(v36 + v37);
  else
    v40 = (unsigned __int8 *)v14;
  if (v40 < v39)
    v40 = *(unsigned __int8 **)(result + 32);
  v41 = (v40[1] << 16) | (*v40 << 24) | (v40[2] << 8) | 0xFF;
  if (!v6)
    goto LABEL_67;
  v42 = *(_DWORD *)(v6 + (v32 | v24));
LABEL_38:
  v43 = v42 & 0xF;
  v44 = HIBYTE(v42) & 3;
  switch(v43)
  {
    case 1:
      v60 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      if (v14 < (unint64_t)v60)
        v60 = (unsigned __int8 *)v14;
      if (v60 < v39)
        v60 = v39;
      v61 = interpolate_8888_19472[v44];
      v62 = v44 + 1;
      v59 = v41 - ((v61 & v41) >> v62);
      v63 = (((v60[1] << 16) | (*v60 << 24) | (v60[2] << 8) | 0xFF) & v61) >> v62;
LABEL_66:
      v41 = v59 + v63;
      break;
    case 2:
      v64 = (unsigned __int8 *)(v38 + 3 * SBYTE2(v42));
      if (v14 < (unint64_t)v64)
        v64 = (unsigned __int8 *)v14;
      if (v64 < v39)
        v64 = v39;
      v55 = (v64[1] << 16) | (*v64 << 24) | (v64[2] << 8) | 0xFF;
      v65 = (v42 >> 28) & 3;
      v57 = interpolate_8888_19472[v65];
      v58 = v65 + 1;
      v59 = v41 - ((v57 & v41) >> v58);
LABEL_65:
      v63 = (v55 & v57) >> v58;
      goto LABEL_66;
    case 3:
      v45 = 3 * SBYTE2(v42);
      v46 = (unsigned __int8 *)(v38 + v45);
      if (v14 < v38 + v45)
        v46 = (unsigned __int8 *)v14;
      if (v46 < v39)
        v46 = v39;
      v47 = (v46[1] << 16) | (*v46 << 24) | (v46[2] << 8) | 0xFF;
      v48 = v38 + SBYTE1(v42) * (uint64_t)v5;
      if (v14 >= v48)
        v49 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      else
        v49 = (unsigned __int8 *)v14;
      if (v49 < v39)
        v49 = v39;
      v50 = (v49[1] << 16) | (*v49 << 24) | (v49[2] << 8) | 0xFF;
      v51 = (unsigned __int8 *)(v48 + v45);
      if (v14 < (unint64_t)v51)
        v51 = (unsigned __int8 *)v14;
      if (v51 < v39)
        v51 = v39;
      v52 = interpolate_8888_19472[v44];
      v53 = v44 + 1;
      v54 = v41 - ((v52 & v41) >> v53) + ((v50 & v52) >> v53);
      v55 = v47 - ((v52 & v47) >> v53) + ((((v51[1] << 16) | (*v51 << 24) | (v51[2] << 8) | 0xFF) & v52) >> v53);
      v56 = (v42 >> 28) & 3;
      v57 = interpolate_8888_19472[v56];
      v58 = v56 + 1;
      v59 = v54 - ((v54 & v57) >> v58);
      goto LABEL_65;
  }
LABEL_67:
  v66 = 0;
  v67 = 0;
  a3 += v11;
  v68 = v9 - a3;
  a2 += v10;
  v69 = v8 - a2;
  while (1)
  {
    *(_DWORD *)(v12 + 4 + 4 * v67) = ((((v41 >> 23) & 0x1FE)
                                     + BYTE1(v41)
                                     + (((v41 >> 8) & 0xFF00) >> 6)
                                     + (((v41 >> 8) & 0xFF00) >> 8)) >> 3) | (v41 << 24);
    *(_BYTE *)(v13 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v67)
      return result;
    if (((v68 | v69 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v13 += v67 + 1;
      v12 = v12 - v66 + 4;
      a4 += ~(_DWORD)v67;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    v71 = 3 * (a2 >> 32);
    v38 = v70 + v71;
    v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v70 + v71)
      v72 = (unsigned __int8 *)(v70 + v71);
    else
      v72 = (unsigned __int8 *)v14;
    if (v72 < v39)
      v72 = *(unsigned __int8 **)(result + 32);
    v41 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      v42 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v42 & 0xF) != 0)
      {
        v13 += v67 + 1;
        v12 = v12 - v66 + 4;
        a4 += ~(_DWORD)v67;
        v25 = -1;
        goto LABEL_38;
      }
    }
    ++v67;
    v66 -= 4;
    a3 += v11;
    v68 -= v11;
    a2 += v10;
    v69 -= v10;
    v25 = -1;
  }
}

uint64_t W8_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  char v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v72 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v70 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = 255;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v71 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v70 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v70 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v71)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v71 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v70;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v72)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v72;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v70;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = bswap32(*v38);
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58)
        v58 = (unsigned int *)v14;
      if (v58 < v37)
        v58 = v37;
      v59 = interpolate_8888_19472[v42];
      v60 = v42 + 1;
      v57 = v39 - ((v59 & v39) >> v60);
      v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      v39 = v57 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62)
        v62 = (unsigned int *)v14;
      if (v62 < v37)
        v62 = v37;
      v53 = bswap32(*v62);
      v63 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v63];
      v56 = v63 + 1;
      v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = bswap32(*v44);
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = bswap32(*v47);
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  v64 = 0;
  v65 = 0;
  a3 += v9;
  v66 = v7 - a3;
  a2 += v8;
  v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = ((((v39 >> 23) & 0x1FE)
                                     + BYTE1(v39)
                                     + (((v39 >> 8) & 0xFF00) >> 6)
                                     + (((v39 >> 8) & 0xFF00) >> 8)) >> 3) | ((v39 | v13) << 24);
    *(_BYTE *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v68 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    else
      v69 = (unsigned int *)v14;
    if (v69 < v37)
      v69 = *(unsigned int **)(result + 32);
    v39 = bswap32(*v69);
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~(_DWORD)v64;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    v24 = -1;
  }
}

uint64_t W8_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v72 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = 255;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v73 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v72 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v72 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v73)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v73 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v72;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v74;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v72;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = *v38;
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59)
        v59 = (unsigned int *)v14;
      if (v59 < v37)
        v59 = v37;
      v60 = interpolate_8888_19472[v42];
      v61 = v42 + 1;
      v57 = v39 - ((v60 & v39) >> v61);
      v62 = (v60 & *v59) >> v61;
LABEL_68:
      v39 = v57 + v62;
      break;
    case 2:
      v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63)
        v63 = (unsigned int *)v14;
      if (v63 < v37)
        v63 = v37;
      v64 = (v40 >> 28) & 3;
      v65 = interpolate_8888_19472[v64];
      v56 = v64 + 1;
      v57 = v39 - ((v65 & v39) >> v56);
      v58 = v65 & *v63;
LABEL_67:
      v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = *v44;
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = *v47;
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  v66 = 0;
  v67 = 0;
  a3 += v9;
  v68 = v7 - a3;
  a2 += v8;
  v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = ((((v39 >> 23) & 0x1FE)
                                     + BYTE1(v39)
                                     + (((v39 >> 8) & 0xFF00) >> 6)
                                     + (((v39 >> 8) & 0xFF00) >> 8)) >> 3) | ((v39 | v13) << 24);
    *(_BYTE *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v70 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    else
      v71 = (unsigned int *)v14;
    if (v71 < v37)
      v71 = *(unsigned int **)(result + 32);
    v39 = *v71;
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~(_DWORD)v66;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    v24 = -1;
  }
}

uint64_t W8_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  char v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v72 = *(_QWORD *)(result + 80);
  v73 = *(_QWORD *)(result + 88);
  v7 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 120);
  v9 = *(_QWORD *)(result + 152) - 4;
  v10 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  v11 = *(_QWORD *)(result + 40);
  v70 = *(_DWORD *)(result + 188);
  v13 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v71 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v73)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v73;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_34;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v70 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v6 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_34;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v23 = v70 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v71)
      break;
    v25 = *(_QWORD *)(result + 192);
    v26 = v71 - *(_QWORD *)(result + 200);
    v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v70;
      v28 = v26 + 0x1000000;
      v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v7;
    a3 += v8;
    v9 += 4;
    *(_BYTE *)++v10 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v72)
  {
    v29 = ((unint64_t)a2 >> 26) & 0x3C;
    v28 = a2;
    goto LABEL_26;
  }
  v30 = *(_QWORD *)(result + 192);
  v31 = *(_QWORD *)(result + 200) + v72;
  v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1)
    goto LABEL_34;
  if (v32 < v30)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v70;
  v28 = v31 - 0x1000000;
  v29 = 28;
LABEL_26:
  if (v23 < 0x400000)
    goto LABEL_34;
  v33 = v12 + SHIDWORD(v24) * (uint64_t)v4;
  v34 = v28 >> 32;
  v35 = v33 + 4 * v34;
  v36 = *(unsigned int **)(result + 32);
  if (v13 >= v35)
    v37 = (unsigned int *)(v33 + 4 * v34);
  else
    v37 = (unsigned int *)v13;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = bswap32(*v37);
  if (!v5)
    goto LABEL_66;
  v39 = *(_DWORD *)(v5 + (v29 | v22));
LABEL_37:
  v40 = v39 & 0xF;
  v41 = HIBYTE(v39) & 3;
  switch(v40)
  {
    case 1:
      v57 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v13 < (unint64_t)v57)
        v57 = (unsigned int *)v13;
      if (v57 < v36)
        v57 = v36;
      v58 = interpolate_8888_19472[v41];
      v59 = v41 + 1;
      v56 = v38 - ((v58 & v38) >> v59);
      v60 = (bswap32(*v57) & v58) >> v59;
LABEL_65:
      v38 = v56 + v60;
      break;
    case 2:
      v61 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v13 < (unint64_t)v61)
        v61 = (unsigned int *)v13;
      if (v61 < v36)
        v61 = v36;
      v52 = bswap32(*v61);
      v62 = (v39 >> 28) & 3;
      v54 = interpolate_8888_19472[v62];
      v55 = v62 + 1;
      v56 = v38 - ((v54 & v38) >> v55);
LABEL_64:
      v60 = (v52 & v54) >> v55;
      goto LABEL_65;
    case 3:
      v42 = (unint64_t)HIWORD(v39) << 56;
      v43 = (unsigned int *)(v35 + (v42 >> 54));
      if (v13 < (unint64_t)v43)
        v43 = (unsigned int *)v13;
      if (v43 < v36)
        v43 = v36;
      v44 = bswap32(*v43);
      v45 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v13 >= v45)
        v46 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      else
        v46 = (unsigned int *)v13;
      if (v46 < v36)
        v46 = v36;
      v47 = bswap32(*v46);
      v48 = (unsigned int *)(v45 + (v42 >> 54));
      if (v13 < (unint64_t)v48)
        v48 = (unsigned int *)v13;
      if (v48 < v36)
        v48 = v36;
      v49 = interpolate_8888_19472[v41];
      v50 = v41 + 1;
      v51 = v38 - ((v49 & v38) >> v50) + ((v49 & v47) >> v50);
      v52 = v44 - ((v49 & v44) >> v50) + ((bswap32(*v48) & v49) >> v50);
      v53 = (v39 >> 28) & 3;
      v54 = interpolate_8888_19472[v53];
      v55 = v53 + 1;
      v56 = v51 - ((v51 & v54) >> v55);
      goto LABEL_64;
  }
LABEL_66:
  v63 = 0;
  v64 = 0;
  a3 += v8;
  v65 = v73 - a3;
  a2 += v7;
  v66 = v72 - a2;
  while (1)
  {
    v67 = v38 & 0xFF000000;
    if (!v11)
      v67 = -16777216;
    *(_DWORD *)(v9 + 4 + 4 * v63) = v67 | ((((unsigned __int16)(v38 & 0xFF00) >> 6)
                                          + v38
                                          + ((v38 >> 15) & 0x1FE)
                                          + ((unsigned __int16)(v38 & 0xFF00) >> 8)) >> 3);
    *(_BYTE *)(v10 + 1 + v63) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v63)
      return result;
    if (((v65 | v66 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v9 = v9 - v64 + 4;
      v10 += v63 + 1;
      a4 += ~(_DWORD)v63;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v35 = v68 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(result + 32);
    if (v13 >= v35)
      v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    else
      v69 = (unsigned int *)v13;
    if (v69 < v36)
      v69 = *(unsigned int **)(result + 32);
    v38 = bswap32(*v69);
    if (v5)
    {
      v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        v9 = v9 - v64 + 4;
        v10 += v63 + 1;
        a4 += ~(_DWORD)v63;
        v23 = -1;
        goto LABEL_37;
      }
    }
    v64 -= 4;
    ++v63;
    a3 += v8;
    v65 -= v8;
    a2 += v7;
    v66 -= v7;
    v23 = -1;
  }
}

uint64_t W8_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v74 = *(_QWORD *)(result + 80);
  v75 = *(_QWORD *)(result + 88);
  v7 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 120);
  v9 = *(_QWORD *)(result + 152) - 4;
  v10 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  v11 = *(_QWORD *)(result + 40);
  v72 = *(_DWORD *)(result + 188);
  v13 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v73 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v75)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v75;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_34;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v72 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v6 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_34;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v23 = v72 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v73)
      break;
    v25 = *(_QWORD *)(result + 192);
    v26 = v73 - *(_QWORD *)(result + 200);
    v27 = a2 - v26 + (v25 >> 1);
    if (v27 >= 1)
    {
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v72;
      v28 = v26 + 0x1000000;
      v29 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v7;
    a3 += v8;
    v9 += 4;
    *(_BYTE *)++v10 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v29 = ((unint64_t)a2 >> 26) & 0x3C;
    v28 = a2;
    goto LABEL_26;
  }
  v30 = *(_QWORD *)(result + 192);
  v31 = *(_QWORD *)(result + 200) + v74;
  v32 = v31 - a2 + (v30 >> 1);
  if (v32 < 1)
    goto LABEL_34;
  if (v32 < v30)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v72;
  v28 = v31 - 0x1000000;
  v29 = 28;
LABEL_26:
  if (v23 < 0x400000)
    goto LABEL_34;
  v33 = v12 + SHIDWORD(v24) * (uint64_t)v4;
  v34 = v28 >> 32;
  v35 = v33 + 4 * v34;
  v36 = *(unsigned int **)(result + 32);
  if (v13 >= v35)
    v37 = (unsigned int *)(v33 + 4 * v34);
  else
    v37 = (unsigned int *)v13;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = *v37;
  if (!v5)
    goto LABEL_66;
  v39 = *(_DWORD *)(v5 + (v29 | v22));
LABEL_37:
  v40 = v39 & 0xF;
  v41 = HIBYTE(v39) & 3;
  switch(v40)
  {
    case 1:
      v58 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      if (v13 < (unint64_t)v58)
        v58 = (unsigned int *)v13;
      if (v58 < v36)
        v58 = v36;
      v59 = interpolate_8888_19472[v41];
      v60 = v41 + 1;
      v56 = v38 - ((v59 & v38) >> v60);
      v61 = (v59 & *v58) >> v60;
LABEL_65:
      v38 = v56 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v39) << 56) >> 54));
      if (v13 < (unint64_t)v62)
        v62 = (unsigned int *)v13;
      if (v62 < v36)
        v62 = v36;
      v63 = (v39 >> 28) & 3;
      v64 = interpolate_8888_19472[v63];
      v55 = v63 + 1;
      v56 = v38 - ((v64 & v38) >> v55);
      v57 = v64 & *v62;
LABEL_64:
      v61 = v57 >> v55;
      goto LABEL_65;
    case 3:
      v42 = (unint64_t)HIWORD(v39) << 56;
      v43 = (unsigned int *)(v35 + (v42 >> 54));
      if (v13 < (unint64_t)v43)
        v43 = (unsigned int *)v13;
      if (v43 < v36)
        v43 = v36;
      v44 = *v43;
      v45 = v35 + SBYTE1(v39) * (uint64_t)v4;
      if (v13 >= v45)
        v46 = (unsigned int *)(v35 + SBYTE1(v39) * (uint64_t)v4);
      else
        v46 = (unsigned int *)v13;
      if (v46 < v36)
        v46 = v36;
      v47 = *v46;
      v48 = (unsigned int *)(v45 + (v42 >> 54));
      if (v13 < (unint64_t)v48)
        v48 = (unsigned int *)v13;
      if (v48 < v36)
        v48 = v36;
      v49 = interpolate_8888_19472[v41];
      v50 = v41 + 1;
      v51 = v38 - ((v49 & v38) >> v50) + ((v49 & v47) >> v50);
      v52 = v44 - ((v49 & v44) >> v50) + ((v49 & *v48) >> v50);
      v53 = (v39 >> 28) & 3;
      v54 = interpolate_8888_19472[v53];
      v55 = v53 + 1;
      v56 = v51 - ((v51 & v54) >> v55);
      v57 = v52 & v54;
      goto LABEL_64;
  }
LABEL_66:
  v65 = 0;
  v66 = 0;
  a3 += v8;
  v67 = v75 - a3;
  a2 += v7;
  v68 = v74 - a2;
  while (1)
  {
    v69 = v38 & 0xFF000000;
    if (!v11)
      v69 = -16777216;
    *(_DWORD *)(v9 + 4 + 4 * v65) = v69 | ((((unsigned __int16)(v38 & 0xFF00) >> 6)
                                          + v38
                                          + ((v38 >> 15) & 0x1FE)
                                          + ((unsigned __int16)(v38 & 0xFF00) >> 8)) >> 3);
    *(_BYTE *)(v10 + 1 + v65) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v65)
      return result;
    if (((v67 | v68 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v9 = v9 - v66 + 4;
      v10 += v65 + 1;
      a4 += ~(_DWORD)v65;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v35 = v70 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(result + 32);
    if (v13 >= v35)
      v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    else
      v71 = (unsigned int *)v13;
    if (v71 < v36)
      v71 = *(unsigned int **)(result + 32);
    v38 = *v71;
    if (v5)
    {
      v39 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v39 & 0xF) != 0)
      {
        v9 = v9 - v66 + 4;
        v10 += v65 + 1;
        a4 += ~(_DWORD)v65;
        v23 = -1;
        goto LABEL_37;
      }
    }
    v66 -= 4;
    ++v65;
    a3 += v8;
    v67 -= v8;
    a2 += v7;
    v68 -= v7;
    v23 = -1;
  }
}

uint64_t W8_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = (unsigned int *)(*(_QWORD *)(result + 152) - 4);
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = *(unsigned int *)(result + 256);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v86 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v86 | v17;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = bswap32(*v37);
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = bswap32(*v36);
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = bswap32(*v36);
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = bswap32(*v47);
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = bswap32(*v50);
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = bswap32(*v36);
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  ++v8;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32_15917(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = bswap32(*v82);
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

uint64_t W8_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = (unsigned int *)(*(_QWORD *)(result + 152) - 4);
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = *(unsigned int *)(result + 256);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v86 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v86 | v17;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = *v37;
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = *v36;
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = *v36;
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = *v47;
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = *v50;
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = *v36;
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  ++v8;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32_15917(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = *v82;
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

uint64_t W8_sample_W16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int16 *v71;
  unsigned int v72;
  unsigned __int16 *v73;
  int v74;
  char v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned __int16 *v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int16 *v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v94 = *(_QWORD *)(result + 80);
  v95 = *(_QWORD *)(result + 64);
  v96 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_DWORD *)(result + 260) - 1;
  v14 = *(unsigned int *)(result + 256);
  v15 = v5 + (v13 * v7) + 2 * (v14 - 1);
  v16 = v4 + (v13 * v6) + 2 * v14 - 2;
  v93 = *(_DWORD *)(result + 188);
  v97 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v97)
      {
        if (a3 <= v96)
        {
          v25 = ((unint64_t)a3 >> 22) & 0x3C0;
          v26 = 0x3FFFFFFF;
          v27 = a3;
          v28 = v95;
        }
        else
        {
          v21 = *(_QWORD *)(result + 216);
          v22 = *(_QWORD *)(result + 224) + v96;
          v23 = v22 - a3 + (v21 >> 1);
          if (v23 < 1)
            goto LABEL_40;
          if (v23 >= v21)
            LODWORD(v24) = 0x3FFFFFFF;
          else
            v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
          v28 = v95;
          v26 = v93 | v24;
          v27 = v22 - 0x1000000;
          v25 = 448;
        }
      }
      else
      {
        v17 = *(_QWORD *)(result + 216);
        v18 = v97 - *(_QWORD *)(result + 224);
        v19 = a3 - v18 + (v17 >> 1);
        if (v19 < 1)
          goto LABEL_40;
        if (v19 >= v17)
          LODWORD(v20) = 0x3FFFFFFF;
        else
          v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
        v28 = v95;
        v26 = v93 | v20;
        v27 = v18 + 0x1000000;
        v25 = 512;
      }
      if (a2 >= v28)
        break;
      v29 = *(_QWORD *)(result + 192);
      v30 = v28 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 >= 1)
      {
        if (v31 < v29)
          v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v93;
        v32 = v30 + 0x1000000;
        v33 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 4;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v94)
    {
      v33 = ((unint64_t)a2 >> 26) & 0x3C;
      v32 = a2;
      goto LABEL_26;
    }
    v34 = *(_QWORD *)(result + 192);
    v35 = *(_QWORD *)(result + 200) + v94;
    v36 = v35 - a2 + (v34 >> 1);
    if (v36 < 1)
      goto LABEL_40;
    if (v36 < v34)
      v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v93;
    v32 = v35 - 0x1000000;
    v33 = 28;
LABEL_26:
    if (v26 < 0x400000)
      goto LABEL_40;
    v37 = v27 >> 32;
    v38 = v4 + (int)v37 * (uint64_t)v6;
    v39 = (v32 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    v40 = v38 + v39;
    v41 = *(unsigned __int16 **)(result + 32);
    if (v16 >= v38 + v39)
      v42 = (unsigned __int16 *)(v38 + v39);
    else
      v42 = (unsigned __int16 *)v16;
    if (v42 < v41)
      v42 = *(unsigned __int16 **)(result + 32);
    v43 = bswap32(*v42) >> 16;
    if (v5)
    {
      v44 = v5 + (int)v37 * (uint64_t)v7 + v39;
      v45 = *(unsigned __int16 **)(result + 40);
      if (v15 >= v44)
        v46 = (unsigned __int16 *)v44;
      else
        v46 = (unsigned __int16 *)v15;
      if (v46 >= v45)
        v45 = v46;
      v43 |= bswap32(*v45) & 0xFFFF0000;
      if (!v8)
        goto LABEL_101;
    }
    else
    {
      v44 = 0;
      if (!v8)
        goto LABEL_101;
    }
    v47 = *(_DWORD *)(v8 + (v33 | v25));
LABEL_45:
    v48 = v47 & 0xF;
    v49 = HIBYTE(v47) & 3;
    switch(v48)
    {
      case 1:
        v71 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 < (unint64_t)v71)
          v71 = (unsigned __int16 *)v16;
        if (v71 < v41)
          v71 = v41;
        v72 = bswap32(*v71) >> 16;
        if (v5)
        {
          v73 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          if (v15 < (unint64_t)v73)
            v73 = (unsigned __int16 *)v15;
          if ((unint64_t)v73 < *(_QWORD *)(result + 40))
            v73 = *(unsigned __int16 **)(result + 40);
          v72 |= bswap32(*v73) & 0xFFFF0000;
        }
        v74 = interpolate_1616[v49];
        v75 = v49 + 1;
        v69 = v43 - ((v74 & v43) >> v75);
        v76 = (v74 & v72) >> v75;
        goto LABEL_100;
      case 2:
        v77 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v77)
          v77 = (unsigned __int16 *)v16;
        if (v77 < v41)
          v77 = v41;
        v78 = bswap32(*v77) >> 16;
        if (v5)
        {
          v79 = (unsigned __int16 *)(v44 + 2 * SBYTE2(v47));
          if (v15 < (unint64_t)v79)
            v79 = (unsigned __int16 *)v15;
          if ((unint64_t)v79 < *(_QWORD *)(result + 40))
            v79 = *(unsigned __int16 **)(result + 40);
          v78 |= bswap32(*v79) & 0xFFFF0000;
        }
        v80 = (v47 >> 28) & 3;
        v81 = interpolate_1616[v80];
        v68 = v80 + 1;
        v69 = v43 - ((v81 & v43) >> v68);
        v70 = v81 & v78;
        goto LABEL_99;
      case 3:
        v50 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v50)
          v50 = (unsigned __int16 *)v16;
        if (v50 < v41)
          v50 = v41;
        v51 = bswap32(*v50) >> 16;
        v52 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 >= (unint64_t)v52)
          v53 = v52;
        else
          v53 = (unsigned __int16 *)v16;
        if (v53 < v41)
          v53 = v41;
        v92 = bswap32(*v53) >> 16;
        v54 = &v52[SBYTE2(v47)];
        if (v16 < (unint64_t)v54)
          v54 = (unsigned __int16 *)v16;
        if (v54 < v41)
          v54 = v41;
        v55 = bswap32(*v54) >> 16;
        if (v5)
        {
          v56 = 2 * SBYTE2(v47);
          v57 = (unsigned __int16 *)(v44 + v56);
          v58 = *(_QWORD *)(result + 40);
          if (v15 < v44 + v56)
            v57 = (unsigned __int16 *)v15;
          if ((unint64_t)v57 < v58)
            v57 = *(unsigned __int16 **)(result + 40);
          v51 |= bswap32(*v57) & 0xFFFF0000;
          v59 = v44 + SBYTE1(v47) * (uint64_t)v7;
          if (v15 >= v59)
            v60 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          else
            v60 = (unsigned __int16 *)v15;
          if ((unint64_t)v60 < v58)
            v60 = *(unsigned __int16 **)(result + 40);
          v92 |= bswap32(*v60) & 0xFFFF0000;
          v61 = (unsigned __int16 *)(v59 + v56);
          if (v15 < v59 + v56)
            v61 = (unsigned __int16 *)v15;
          if ((unint64_t)v61 < v58)
            v61 = *(unsigned __int16 **)(result + 40);
          v55 |= bswap32(*v61) & 0xFFFF0000;
        }
        v62 = interpolate_1616[v49];
        v63 = v49 + 1;
        v64 = v43 - ((v62 & v43) >> v63) + ((v62 & v92) >> v63);
        v65 = v51 - ((v62 & v51) >> v63) + ((v62 & v55) >> v63);
        v66 = (v47 >> 28) & 3;
        v67 = interpolate_1616[v66];
        v68 = v66 + 1;
        v69 = v64 - ((v64 & v67) >> v68);
        v70 = v65 & v67;
LABEL_99:
        v76 = v70 >> v68;
LABEL_100:
        v43 = v69 + v76;
        break;
    }
LABEL_101:
    v82 = v43 & 0xFF000000;
    if (!v5)
      v82 = -16777216;
    *(_DWORD *)(v11 + 4) = v82 & 0xFFFFFF00 | BYTE1(v43);
    *(_BYTE *)(v12 + 1) = v26 >> 22;
    if (a4 == 1)
      break;
    v83 = 0;
    a2 += v10;
    v84 = v94 - a2;
    a3 += v9;
    v85 = v96 - a3;
    v86 = -4;
    while (((v85 | v84 | (a3 - v97) | (a2 - v95)) & 0x8000000000000000) == 0)
    {
      v87 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v4 + SHIDWORD(a3) * (uint64_t)v6 + v87;
      v41 = *(unsigned __int16 **)(result + 32);
      if (v16 >= v40)
        v88 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + v87);
      else
        v88 = (unsigned __int16 *)v16;
      if (v88 < v41)
        v88 = *(unsigned __int16 **)(result + 32);
      v43 = bswap32(*v88) >> 16;
      if (v5)
      {
        v44 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v87;
        v89 = *(unsigned __int16 **)(result + 40);
        if (v15 >= v44)
          v90 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v87);
        else
          v90 = (unsigned __int16 *)v15;
        if (v90 >= v89)
          v89 = v90;
        v43 |= bswap32(*v89) & 0xFFFF0000;
      }
      if (v8)
      {
        v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v47 & 0xF) != 0)
        {
          v12 += v83 + 1;
          v11 -= v86;
          a4 += ~(_DWORD)v83;
          v26 = -1;
          goto LABEL_45;
        }
      }
      v91 = v43 & 0xFF000000;
      if (!v5)
        v91 = -16777216;
      *(_DWORD *)(v11 + 4 * v83 + 8) = v91 & 0xFFFFFF00 | BYTE1(v43);
      *(_BYTE *)(v12 + v83++ + 2) = -1;
      v86 -= 4;
      a2 += v10;
      v84 -= v10;
      a3 += v9;
      v85 -= v9;
      if (a4 - 1 == (_DWORD)v83)
        return result;
    }
    v12 += v83 + 1;
    v11 -= v86;
    a4 += ~(_DWORD)v83;
  }
  while (a4);
  return result;
}

uint64_t W8_sample_w16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned __int16 *v72;
  int v73;
  char v74;
  unsigned int v75;
  unsigned __int16 *v76;
  int v77;
  unsigned __int16 *v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  unsigned __int16 *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v94 = *(_QWORD *)(result + 80);
  v95 = *(_QWORD *)(result + 64);
  v96 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_DWORD *)(result + 260) - 1;
  v14 = *(unsigned int *)(result + 256);
  v15 = v5 + (v13 * v7) + 2 * (v14 - 1);
  v16 = v4 + (v13 * v6) + 2 * v14 - 2;
  v93 = *(_DWORD *)(result + 188);
  v97 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v97)
      {
        if (a3 <= v96)
        {
          v25 = ((unint64_t)a3 >> 22) & 0x3C0;
          v26 = 0x3FFFFFFF;
          v27 = a3;
          v28 = v95;
        }
        else
        {
          v21 = *(_QWORD *)(result + 216);
          v22 = *(_QWORD *)(result + 224) + v96;
          v23 = v22 - a3 + (v21 >> 1);
          if (v23 < 1)
            goto LABEL_40;
          if (v23 >= v21)
            LODWORD(v24) = 0x3FFFFFFF;
          else
            v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
          v28 = v95;
          v26 = v93 | v24;
          v27 = v22 - 0x1000000;
          v25 = 448;
        }
      }
      else
      {
        v17 = *(_QWORD *)(result + 216);
        v18 = v97 - *(_QWORD *)(result + 224);
        v19 = a3 - v18 + (v17 >> 1);
        if (v19 < 1)
          goto LABEL_40;
        if (v19 >= v17)
          LODWORD(v20) = 0x3FFFFFFF;
        else
          v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
        v28 = v95;
        v26 = v93 | v20;
        v27 = v18 + 0x1000000;
        v25 = 512;
      }
      if (a2 >= v28)
        break;
      v29 = *(_QWORD *)(result + 192);
      v30 = v28 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 >= 1)
      {
        if (v31 < v29)
          v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v93;
        v32 = v30 + 0x1000000;
        v33 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 4;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v94)
    {
      v33 = ((unint64_t)a2 >> 26) & 0x3C;
      v32 = a2;
      goto LABEL_26;
    }
    v34 = *(_QWORD *)(result + 192);
    v35 = *(_QWORD *)(result + 200) + v94;
    v36 = v35 - a2 + (v34 >> 1);
    if (v36 < 1)
      goto LABEL_40;
    if (v36 < v34)
      v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v93;
    v32 = v35 - 0x1000000;
    v33 = 28;
LABEL_26:
    if (v26 < 0x400000)
      goto LABEL_40;
    v37 = v27 >> 32;
    v38 = v4 + (int)v37 * (uint64_t)v6;
    v39 = (v32 >> 31) & 0xFFFFFFFFFFFFFFFELL;
    v40 = v38 + v39;
    v41 = *(unsigned __int16 **)(result + 32);
    if (v16 >= v38 + v39)
      v42 = (unsigned __int16 *)(v38 + v39);
    else
      v42 = (unsigned __int16 *)v16;
    if (v42 < v41)
      v42 = *(unsigned __int16 **)(result + 32);
    v43 = *v42;
    if (v5)
    {
      v44 = v5 + (int)v37 * (uint64_t)v7 + v39;
      v45 = *(unsigned __int16 **)(result + 40);
      if (v15 >= v44)
        v46 = (unsigned __int16 *)v44;
      else
        v46 = (unsigned __int16 *)v15;
      if (v46 >= v45)
        v45 = v46;
      v43 |= *v45 << 16;
      if (!v8)
        goto LABEL_101;
    }
    else
    {
      v44 = 0;
      if (!v8)
        goto LABEL_101;
    }
    v47 = *(_DWORD *)(v8 + (v33 | v25));
LABEL_45:
    v48 = v47 & 0xF;
    v49 = HIBYTE(v47) & 3;
    switch(v48)
    {
      case 1:
        v70 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 < (unint64_t)v70)
          v70 = (unsigned __int16 *)v16;
        if (v70 < v41)
          v70 = v41;
        v71 = *v70;
        if (v5)
        {
          v72 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          if (v15 < (unint64_t)v72)
            v72 = (unsigned __int16 *)v15;
          if ((unint64_t)v72 < *(_QWORD *)(result + 40))
            v72 = *(unsigned __int16 **)(result + 40);
          v71 |= *v72 << 16;
        }
        v73 = interpolate_1616[v49];
        v74 = v49 + 1;
        v68 = v43 - ((v73 & v43) >> v74);
        v75 = (v73 & v71) >> v74;
        goto LABEL_100;
      case 2:
        v76 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v76)
          v76 = (unsigned __int16 *)v16;
        if (v76 < v41)
          v76 = v41;
        v77 = *v76;
        if (v5)
        {
          v78 = (unsigned __int16 *)(v44 + 2 * SBYTE2(v47));
          if (v15 < (unint64_t)v78)
            v78 = (unsigned __int16 *)v15;
          if ((unint64_t)v78 < *(_QWORD *)(result + 40))
            v78 = *(unsigned __int16 **)(result + 40);
          v77 |= *v78 << 16;
        }
        v79 = (v47 >> 28) & 3;
        v80 = interpolate_1616[v79];
        v67 = v79 + 1;
        v68 = v43 - ((v80 & v43) >> v67);
        v69 = v80 & v77;
        goto LABEL_99;
      case 3:
        v50 = (unsigned __int16 *)(v40 + 2 * SBYTE2(v47));
        if (v16 < (unint64_t)v50)
          v50 = (unsigned __int16 *)v16;
        if (v50 < v41)
          v50 = v41;
        v51 = *v50;
        v52 = (unsigned __int16 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v16 >= (unint64_t)v52)
          v53 = v52;
        else
          v53 = (unsigned __int16 *)v16;
        if (v53 < v41)
          v53 = v41;
        v92 = *v53;
        v54 = &v52[SBYTE2(v47)];
        if (v16 < (unint64_t)v54)
          v54 = (unsigned __int16 *)v16;
        if (v54 < v41)
          v54 = v41;
        v55 = *v54;
        if (v5)
        {
          v91 = 2 * SBYTE2(v47);
          v56 = (unsigned __int16 *)(v44 + v91);
          v57 = *(_QWORD *)(result + 40);
          if (v15 < v44 + v91)
            v56 = (unsigned __int16 *)v15;
          if ((unint64_t)v56 < v57)
            v56 = *(unsigned __int16 **)(result + 40);
          v51 |= *v56 << 16;
          v58 = v44 + SBYTE1(v47) * (uint64_t)v7;
          if (v15 >= v58)
            v59 = (unsigned __int16 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          else
            v59 = (unsigned __int16 *)v15;
          if ((unint64_t)v59 < v57)
            v59 = *(unsigned __int16 **)(result + 40);
          v92 |= *v59 << 16;
          v60 = (unsigned __int16 *)(v58 + v91);
          if (v15 < v58 + v91)
            v60 = (unsigned __int16 *)v15;
          if ((unint64_t)v60 < v57)
            v60 = *(unsigned __int16 **)(result + 40);
          v55 |= *v60 << 16;
        }
        v61 = interpolate_1616[v49];
        v62 = v49 + 1;
        v63 = v43 - ((v61 & v43) >> v62) + ((v61 & v92) >> v62);
        v64 = v51 - ((v61 & v51) >> v62) + ((v61 & v55) >> v62);
        v65 = (v47 >> 28) & 3;
        v66 = interpolate_1616[v65];
        v67 = v65 + 1;
        v68 = v63 - ((v63 & v66) >> v67);
        v69 = v64 & v66;
LABEL_99:
        v75 = v69 >> v67;
LABEL_100:
        v43 = v68 + v75;
        break;
    }
LABEL_101:
    v81 = v43 & 0xFF000000;
    if (!v5)
      v81 = -16777216;
    *(_DWORD *)(v11 + 4) = v81 & 0xFFFFFF00 | BYTE1(v43);
    *(_BYTE *)(v12 + 1) = v26 >> 22;
    if (a4 == 1)
      break;
    v82 = 0;
    a2 += v10;
    v83 = v94 - a2;
    a3 += v9;
    v84 = v96 - a3;
    v85 = -4;
    while (((v84 | v83 | (a3 - v97) | (a2 - v95)) & 0x8000000000000000) == 0)
    {
      v86 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v4 + SHIDWORD(a3) * (uint64_t)v6 + v86;
      v41 = *(unsigned __int16 **)(result + 32);
      if (v16 >= v40)
        v87 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + v86);
      else
        v87 = (unsigned __int16 *)v16;
      if (v87 < v41)
        v87 = *(unsigned __int16 **)(result + 32);
      v43 = *v87;
      if (v5)
      {
        v44 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v86;
        v88 = *(unsigned __int16 **)(result + 40);
        if (v15 >= v44)
          v89 = (unsigned __int16 *)(v5 + SHIDWORD(a3) * (uint64_t)v7 + v86);
        else
          v89 = (unsigned __int16 *)v15;
        if (v89 >= v88)
          v88 = v89;
        v43 |= *v88 << 16;
      }
      if (v8)
      {
        v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v47 & 0xF) != 0)
        {
          v12 += v82 + 1;
          v11 -= v85;
          a4 += ~(_DWORD)v82;
          v26 = -1;
          goto LABEL_45;
        }
      }
      v90 = v43 & 0xFF000000;
      if (!v5)
        v90 = -16777216;
      *(_DWORD *)(v11 + 4 * v82 + 8) = v90 & 0xFFFFFF00 | BYTE1(v43);
      *(_BYTE *)(v12 + v82++ + 2) = -1;
      v85 -= 4;
      a2 += v10;
      v83 -= v10;
      a3 += v9;
      v84 -= v9;
      if (a4 - 1 == (_DWORD)v82)
        return result;
    }
    v12 += v82 + 1;
    v11 -= v85;
    a4 += ~(_DWORD)v82;
  }
  while (a4);
  return result;
}

uint64_t W8_sample_WF(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  float v45;
  float v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int *v52;
  float v53;
  unsigned int *v54;
  float v55;
  float v56;
  float v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  float v62;
  float v63;
  unsigned int *v64;
  float v65;
  float v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  float v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v86 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v88 = *(_QWORD *)(result + 88);
  v89 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v14 = v5 + (v12 * v7) + 4 * (v13 - 1);
  v15 = v4 + (v12 * v6) + 4 * v13 - 4;
  v84 = *(_DWORD *)(result + 188);
  v87 = *(_QWORD *)(result + 72);
  v85 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v85;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v88;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_39;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v85;
        v25 = v84 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v87 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_39;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v85;
      v25 = v84 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v84;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v89 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v86)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_26;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v86;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_39;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v84;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_26:
  if (v25 < 0x400000)
    goto LABEL_39;
  v36 = v26 >> 32;
  v37 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  v38 = (v31 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = v37 + v38;
  v40 = *(unsigned int **)(result + 32);
  if (v15 >= v37 + v38)
    v41 = (unsigned int *)(v37 + v38);
  else
    v41 = (unsigned int *)v15;
  if (v41 < v40)
    v41 = *(unsigned int **)(result + 32);
  if (v5)
  {
    v42 = v5 + (int)v36 * (uint64_t)v7 + v38;
    v43 = *(unsigned int **)(result + 40);
    if (v14 >= v42)
      v44 = (unsigned int *)v42;
    else
      v44 = (unsigned int *)v14;
    if (v44 >= v43)
      v43 = v44;
    v45 = COERCE_FLOAT(bswap32(*v43));
  }
  else
  {
    v42 = 0;
    v45 = 1.0;
  }
  v46 = COERCE_FLOAT(bswap32(*v41));
  if (v8)
  {
    v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
    v48 = v47 & 0xF;
    v49 = v47 >> 8;
    v50 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      v64 = (unsigned int *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v64)
        v64 = (unsigned int *)v15;
      if (v64 < v40)
        v64 = v40;
      v65 = COERCE_FLOAT(bswap32(*v64));
      v66 = 1.0;
      if (v5)
      {
        v67 = (unsigned int *)(v42 + (char)v49 * (uint64_t)v7);
        if (v14 < (unint64_t)v67)
          v67 = (unsigned int *)v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(unsigned int **)(result + 40);
        v66 = COERCE_FLOAT(bswap32(*v67));
      }
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          v51 = v39 + 4 * SBYTE2(v47);
          if (v15 >= v51)
            v52 = (unsigned int *)(v39 + 4 * SBYTE2(v47));
          else
            v52 = (unsigned int *)v15;
          if (v52 < v40)
            v52 = v40;
          v53 = COERCE_FLOAT(bswap32(*v52));
          v54 = (unsigned int *)(v51 + SBYTE1(v47) * (uint64_t)v6);
          if (v15 < (unint64_t)v54)
            v54 = (unsigned int *)v15;
          if (v54 < v40)
            v54 = v40;
          v55 = COERCE_FLOAT(bswap32(*v54));
          v56 = 1.0;
          v57 = 1.0;
          if (v5)
          {
            v58 = v42 + 4 * SBYTE2(v47);
            v59 = *(_QWORD *)(result + 40);
            if (v14 >= v58)
              v60 = (unsigned int *)(v42 + 4 * SBYTE2(v47));
            else
              v60 = (unsigned int *)v14;
            if ((unint64_t)v60 < v59)
              v60 = *(unsigned int **)(result + 40);
            v56 = COERCE_FLOAT(bswap32(*v60));
            v61 = (unsigned int *)(v58 + SBYTE1(v47) * (uint64_t)v7);
            if (v14 < (unint64_t)v61)
              v61 = (unsigned int *)v14;
            if ((unint64_t)v61 < v59)
              v61 = *(unsigned int **)(result + 40);
            v57 = COERCE_FLOAT(bswap32(*v61));
          }
          v62 = interpolate_waf[2 * v50 + 1];
          v63 = interpolate_waf[2 * ((v47 >> 28) & 3) + 1];
          v46 = (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62))
                      - (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62)) * v63))
              + (float)((float)((float)(v53 - (float)(v53 * v62)) + (float)(v55 * v62)) * v63);
          v45 = (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62))
                      - (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62)) * v63))
              + (float)((float)((float)(v56 - (float)(v56 * v62)) + (float)(v57 * v62)) * v63);
        }
        goto LABEL_91;
      }
      v68 = (unsigned int *)(v39 + 4 * SBYTE2(v47));
      if (v15 < (unint64_t)v68)
        v68 = (unsigned int *)v15;
      if (v68 < v40)
        v68 = v40;
      v65 = COERCE_FLOAT(bswap32(*v68));
      v66 = 1.0;
      if (v5)
      {
        v69 = (unsigned int *)(v42 + 4 * SBYTE2(v47));
        if (v14 < (unint64_t)v69)
          v69 = (unsigned int *)v14;
        if ((unint64_t)v69 < *(_QWORD *)(result + 40))
          v69 = *(unsigned int **)(result + 40);
        v66 = COERCE_FLOAT(bswap32(*v69));
      }
      v50 = (v47 >> 28) & 3;
    }
    v70 = interpolate_waf[2 * v50 + 1];
    v46 = (float)(v46 - (float)(v46 * v70)) + (float)(v65 * v70);
    v45 = (float)(v45 - (float)(v45 * v70)) + (float)(v66 * v70);
  }
LABEL_91:
  v71 = 0;
  v72 = 0;
  a3 += v9;
  v73 = v88 - a3;
  a2 += v10;
  v74 = v86 - a2;
  while (1)
  {
    v75 = (int)(float)((float)(v45 * 255.0) + 0.5);
    if (v45 <= 1.0)
    {
      v76 = v45;
    }
    else
    {
      v75 = 255;
      v76 = 1.0;
    }
    v77 = (int)(float)((float)(v46 * 255.0) + 0.5);
    if (v46 < 0.0)
      v77 = 0;
    if (v46 > v76)
      v77 = v75;
    v78 = v77 | (v75 << 24);
    if (v45 <= 0.0)
      v78 = 0;
    *(_DWORD *)(v89 + 4 + 4 * v72) = v78;
    *(_BYTE *)(v11 + 1 + v72) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v72)
      return result;
    if ((v73 | v74 | (a3 - v87) | (a2 - v85)) < 0)
    {
      v11 += v72 + 1;
      v89 = v89 - v71 + 4;
      a4 += ~(_DWORD)v72;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v79 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    v80 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    v39 = v79 + v80;
    v40 = *(unsigned int **)(result + 32);
    if (v15 >= v79 + v80)
      v81 = (unsigned int *)(v79 + v80);
    else
      v81 = (unsigned int *)v15;
    if (v81 < v40)
      v81 = *(unsigned int **)(result + 32);
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v80;
      v82 = *(unsigned int **)(result + 40);
      if (v14 >= v42)
        v83 = (unsigned int *)v42;
      else
        v83 = (unsigned int *)v14;
      if (v83 >= v82)
        v82 = v83;
      v45 = COERCE_FLOAT(bswap32(*v82));
    }
    else
    {
      v45 = 1.0;
    }
    v46 = COERCE_FLOAT(bswap32(*v81));
    if (v8)
    {
      v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v11 += v72 + 1;
        v89 = v89 - v71 + 4;
        a4 += ~(_DWORD)v72;
        v25 = -1;
        goto LABEL_45;
      }
    }
    ++v72;
    v71 -= 4;
    a3 += v9;
    v73 -= v9;
    a2 += v10;
    v74 -= v10;
    v25 = -1;
  }
}

uint64_t W8_sample_Wf(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  unint64_t v42;
  float *v43;
  float *v44;
  float v45;
  float v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  unint64_t v58;
  unint64_t v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float *v64;
  float v65;
  float v66;
  float *v67;
  float *v68;
  float *v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  float v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  float *v81;
  float *v82;
  float *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v86 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v88 = *(_QWORD *)(result + 88);
  v89 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v14 = v5 + (v12 * v7) + 4 * (v13 - 1);
  v15 = v4 + (v12 * v6) + 4 * v13 - 4;
  v84 = *(_DWORD *)(result + 188);
  v87 = *(_QWORD *)(result + 72);
  v85 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v85;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v88;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_39;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v85;
        v25 = v84 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v87 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_39;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v85;
      v25 = v84 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v84;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v10;
    a3 += v9;
    v89 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v86)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_26;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v86;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_39;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v84;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_26:
  if (v25 < 0x400000)
    goto LABEL_39;
  v36 = v26 >> 32;
  v37 = v4 + SHIDWORD(v26) * (uint64_t)v6;
  v38 = (v31 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = v37 + v38;
  v40 = *(float **)(result + 32);
  if (v15 >= v37 + v38)
    v41 = (float *)(v37 + v38);
  else
    v41 = (float *)v15;
  if (v41 < v40)
    v41 = *(float **)(result + 32);
  if (v5)
  {
    v42 = v5 + (int)v36 * (uint64_t)v7 + v38;
    v43 = *(float **)(result + 40);
    if (v14 >= v42)
      v44 = (float *)v42;
    else
      v44 = (float *)v14;
    if (v44 >= v43)
      v43 = v44;
    v45 = *v43;
  }
  else
  {
    v42 = 0;
    v45 = 1.0;
  }
  v46 = *v41;
  if (v8)
  {
    v47 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_45:
    v48 = v47 & 0xF;
    v49 = v47 >> 8;
    v50 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      v64 = (float *)(v39 + SBYTE1(v47) * (uint64_t)v6);
      if (v15 < (unint64_t)v64)
        v64 = (float *)v15;
      if (v64 < v40)
        v64 = v40;
      v65 = *v64;
      v66 = 1.0;
      if (v5)
      {
        v67 = (float *)(v42 + (char)v49 * (uint64_t)v7);
        if (v14 < (unint64_t)v67)
          v67 = (float *)v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(float **)(result + 40);
        v66 = *v67;
      }
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          v51 = v39 + 4 * SBYTE2(v47);
          if (v15 >= v51)
            v52 = (float *)(v39 + 4 * SBYTE2(v47));
          else
            v52 = (float *)v15;
          if (v52 < v40)
            v52 = v40;
          v53 = *v52;
          v54 = (float *)(v51 + SBYTE1(v47) * (uint64_t)v6);
          if (v15 < (unint64_t)v54)
            v54 = (float *)v15;
          if (v54 < v40)
            v54 = v40;
          v55 = *v54;
          v56 = 1.0;
          v57 = 1.0;
          if (v5)
          {
            v58 = v42 + 4 * SBYTE2(v47);
            v59 = *(_QWORD *)(result + 40);
            if (v14 >= v58)
              v60 = (float *)(v42 + 4 * SBYTE2(v47));
            else
              v60 = (float *)v14;
            if ((unint64_t)v60 < v59)
              v60 = *(float **)(result + 40);
            v56 = *v60;
            v61 = (float *)(v58 + SBYTE1(v47) * (uint64_t)v7);
            if (v14 < (unint64_t)v61)
              v61 = (float *)v14;
            if ((unint64_t)v61 < v59)
              v61 = *(float **)(result + 40);
            v57 = *v61;
          }
          v62 = interpolate_waf[2 * v50 + 1];
          v63 = interpolate_waf[2 * ((v47 >> 28) & 3) + 1];
          v46 = (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62))
                      - (float)((float)((float)(v46 - (float)(v46 * v62)) + (float)(v53 * v62)) * v63))
              + (float)((float)((float)(v53 - (float)(v53 * v62)) + (float)(v55 * v62)) * v63);
          v45 = (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62))
                      - (float)((float)((float)(v45 - (float)(v45 * v62)) + (float)(v56 * v62)) * v63))
              + (float)((float)((float)(v56 - (float)(v56 * v62)) + (float)(v57 * v62)) * v63);
        }
        goto LABEL_91;
      }
      v68 = (float *)(v39 + 4 * SBYTE2(v47));
      if (v15 < (unint64_t)v68)
        v68 = (float *)v15;
      if (v68 < v40)
        v68 = v40;
      v65 = *v68;
      v66 = 1.0;
      if (v5)
      {
        v69 = (float *)(v42 + 4 * SBYTE2(v47));
        if (v14 < (unint64_t)v69)
          v69 = (float *)v14;
        if ((unint64_t)v69 < *(_QWORD *)(result + 40))
          v69 = *(float **)(result + 40);
        v66 = *v69;
      }
      v50 = (v47 >> 28) & 3;
    }
    v70 = interpolate_waf[2 * v50 + 1];
    v46 = (float)(v46 - (float)(v46 * v70)) + (float)(v65 * v70);
    v45 = (float)(v45 - (float)(v45 * v70)) + (float)(v66 * v70);
  }
LABEL_91:
  v71 = 0;
  v72 = 0;
  a3 += v9;
  v73 = v88 - a3;
  a2 += v10;
  v74 = v86 - a2;
  while (1)
  {
    v75 = (int)(float)((float)(v45 * 255.0) + 0.5);
    if (v45 <= 1.0)
    {
      v76 = v45;
    }
    else
    {
      v75 = 255;
      v76 = 1.0;
    }
    v77 = (int)(float)((float)(v46 * 255.0) + 0.5);
    if (v46 < 0.0)
      v77 = 0;
    if (v46 > v76)
      v77 = v75;
    v78 = v77 | (v75 << 24);
    if (v45 <= 0.0)
      v78 = 0;
    *(_DWORD *)(v89 + 4 + 4 * v72) = v78;
    *(_BYTE *)(v11 + 1 + v72) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v72)
      return result;
    if ((v73 | v74 | (a3 - v87) | (a2 - v85)) < 0)
    {
      v11 += v72 + 1;
      v89 = v89 - v71 + 4;
      a4 += ~(_DWORD)v72;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v79 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    v80 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    v39 = v79 + v80;
    v40 = *(float **)(result + 32);
    if (v15 >= v79 + v80)
      v81 = (float *)(v79 + v80);
    else
      v81 = (float *)v15;
    if (v81 < v40)
      v81 = *(float **)(result + 32);
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v80;
      v82 = *(float **)(result + 40);
      if (v14 >= v42)
        v83 = (float *)v42;
      else
        v83 = (float *)v14;
      if (v83 >= v82)
        v82 = v83;
      v45 = *v82;
    }
    else
    {
      v45 = 1.0;
    }
    v46 = *v81;
    if (v8)
    {
      v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        v11 += v72 + 1;
        v89 = v89 - v71 + 4;
        a4 += ~(_DWORD)v72;
        v25 = -1;
        goto LABEL_45;
      }
    }
    ++v72;
    v71 -= 4;
    a3 += v9;
    v73 -= v9;
    a2 += v10;
    v74 -= v10;
    v25 = -1;
  }
}

unsigned int *CMYK32_15917(unsigned int *result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = BYTE4(a2) - (BYTE3(a2) + a2);
  v3 = BYTE4(a2) - (BYTE2(a2) + a2);
  *result = (((v3 & ~(v3 >> 31))
            + 2 * (v2 & ~(v2 >> 31))
            + ((BYTE4(a2) - (BYTE1(a2) + a2)) & ~((BYTE4(a2) - (BYTE1(a2) + a2)) >> 31))
            + 4 * (v3 & ~(v3 >> 31))) >> 3) | (HIDWORD(a2) << 24);
  return result;
}

uint64_t W8_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x1000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = W8_shade_radial_W;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = W8_shade_conic_W;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = W8_shade_axial_W;
    }
    else
    {
      v14 = W8_shade_custom_W;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 1, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 960)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 2, 1, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(4 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  W8_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void W8_shade_radial_W(uint64_t a1, unint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  BOOL v59;
  int v60;
  float v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  char v68;
  float v69;
  float v70;
  float v71;
  unsigned __int16 *v72;
  int v73;
  float v74;
  float v75;
  float v76;
  float v78;
  float v79;
  float v80;
  int v81;
  int v82;
  uint64_t v84;
  int v85;
  int v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  char v100;
  char v101;
  unsigned __int16 *v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned __int16 *v109;
  int v110;
  int v111;
  int v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  int32x2_t v115;
  int32x2_t v116;
  int v117;
  int32x2_t v118;
  int8x8_t v119;
  int32x2_t v120;

  v8 = *(float *)(a1 + 280);
  v9 = *(float *)(a1 + 284);
  v10 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v11 = v10 * (float)(uint64_t)a2;
  v12 = v10 * (float)(uint64_t)a3;
  v13 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v12) + (float)(v8 * v11));
  v14 = *(float *)(a1 + 300) + (float)((float)(v12 * *(float *)(a1 + 292)) + (float)(v9 * v11));
  v16 = *(float **)(a1 + 400);
  v17 = *(float *)(a1 + 336);
  v18 = *(float *)(a1 + 344);
  LODWORD(a8) = *(_DWORD *)(a1 + 304);
  v19 = *(float *)(a1 + 308);
  v20 = *(unsigned int *)(a1 + 324);
  v21 = v16[2];
  v22 = v16[4];
  v23 = v16[5];
  v24 = v16[7];
  v27 = a1 + 144;
  v25 = *(char **)(a1 + 144);
  v26 = *(_QWORD *)(v27 + 8);
  v28 = *(unsigned __int16 **)(a1 + 376);
  v29 = *(_QWORD *)(a1 + 360);
  v30 = (a2 >> 8) & 0xF;
  if (v21 != 0.0 || v24 != 0.0 || v9 != 0.0)
  {
    v40 = *(_DWORD *)(a1 + 320);
    v41 = v16[3];
    v42 = v16[6];
    v43 = v16[8];
    v44 = a1 + 368;
    v45 = *(_QWORD *)(a1 + 368);
    v46 = v45 + ((a3 >> 4) & 0xF0);
    v34 = v45 == 0;
    v47 = 15;
    if (v34)
    {
      v47 = 0;
      v30 = 0;
    }
    else
    {
      v44 = v46;
    }
    v48 = -v42;
    v49 = v19 - *(float *)&a8;
    while (1)
    {
      v50 = v48 + (float)((float)(v13 + v13) * v21);
      v51 = (float)((float)(v14 * v14) + (float)(v13 * v13)) - v24;
      if (v23 == 0.0)
      {
        v58 = v51 / v50;
      }
      else
      {
        v52 = (float)((float)(v23 * -4.0) * v51) + (float)(v50 * v50);
        if (v52 < 0.0)
          goto LABEL_51;
        v53 = sqrtf(v52);
        v54 = v43 * (float)(v50 - v53);
        v55 = v50 + v53;
        v56 = v43 * v55;
        v57 = (float)(v43 * v55) <= v54;
        if ((float)(v43 * v55) <= v54)
          v58 = v43 * v55;
        else
          v58 = v54;
        if (v57)
          v56 = v54;
        if (v56 < 0.0)
        {
          v59 = v56 < v41;
LABEL_37:
          v60 = v40;
          if (v59)
            goto LABEL_51;
LABEL_38:
          if ((v60 & 0x80000000) == 0)
            goto LABEL_50;
          goto LABEL_51;
        }
        if (v56 <= 1.0)
        {
          v61 = *(float *)&a8 + (float)(v56 * v49);
          goto LABEL_49;
        }
        if ((v20 & 0x80000000) == 0)
        {
          v60 = v20;
          if (v56 <= v22)
          {
LABEL_50:
            v62 = (unsigned __int16 *)(v29 + 2 * (2 * v60));
            v63 = v62[1];
            v64 = *(unsigned __int8 *)(v44 + v30);
            v65 = v64 + *v62;
            v66 = v64 + v63;
            goto LABEL_53;
          }
        }
      }
      if (v58 < 0.0)
      {
        v59 = v58 < v41;
        goto LABEL_37;
      }
      if (v58 > 1.0)
      {
        v60 = v20;
        if (v58 > v22)
          goto LABEL_51;
        goto LABEL_38;
      }
      v61 = *(float *)&a8 + (float)(v58 * v49);
LABEL_49:
      v60 = (int)(float)(v18 * (float)(v61 - v17));
      if ((v60 & 0x80000000) == 0)
        goto LABEL_50;
LABEL_51:
      if (!v28)
      {
        v68 = 0;
        goto LABEL_55;
      }
      v67 = *(unsigned __int8 *)(v44 + v30);
      v65 = v67 + *v28;
      v66 = v67 + v28[1];
LABEL_53:
      *(_DWORD *)v26 = ((v65 >> 8) | (v66 << 16)) & 0xFF0000FF;
      v68 = -1;
LABEL_55:
      v30 = ((_DWORD)v30 + 1) & v47;
      v13 = v8 + v13;
      v14 = v9 + v14;
      v26 += 4;
      *v25++ = v68;
      if (!--a4)
        return;
    }
  }
  v31 = a1 + 368;
  v32 = *(_QWORD *)(a1 + 368);
  LODWORD(v33) = (BYTE1(a2) + 1) & 0xF;
  v34 = v32 == 0;
  if (v32)
    v35 = v32 + ((a3 >> 4) & 0xF0);
  else
    v35 = v31;
  if (v34)
  {
    LODWORD(v33) = 0;
    LODWORD(a2) = 0;
  }
  else
  {
    LODWORD(a2) = (a2 >> 8) & 0xF;
  }
  if (v34)
    v36 = 0;
  else
    v36 = 15;
  v37 = v14 * v14;
  v38 = -v23;
  if (v37 <= (float)-v23)
  {
    v69 = fabsf(v16[8]);
    v70 = v23 * -4.0;
    v71 = v19 - *(float *)&a8;
    v72 = (unsigned __int16 *)(v29 + 4 * v20);
    v73 = a4 + 2;
    while (1)
    {
      v74 = v37 + (float)(v13 * v13);
      v75 = v8 + v13;
      v76 = v37 + (float)(v75 * v75);
      if (v74 > v38 && v76 > v38)
      {
        if ((v20 & 0x80000000) != 0)
        {
          if (!v28)
          {
            v101 = 0;
            v100 = 0;
            goto LABEL_79;
          }
          v85 = *v28;
          v86 = v28[1];
        }
        else
        {
          v85 = *v72;
          v86 = v72[1];
        }
        v96 = *(unsigned __int8 *)(v35 + a2);
        v97 = v96 + v85;
        v98 = v96 + v86;
        v99 = *(unsigned __int8 *)(v35 + v33);
        v93 = v99 + v85;
        v94 = v99 + v86;
        v95 = (v97 >> 8) | (v98 << 16);
        goto LABEL_77;
      }
      v78 = sqrtf(v70 * v76);
      v79 = v69 * sqrtf(v70 * v74);
      v80 = v69 * v78;
      v81 = (int)(float)(v18 * (float)((float)(*(float *)&a8 + (float)(v79 * v71)) - v17));
      v82 = (int)(float)(v18 * (float)((float)(*(float *)&a8 + (float)((float)(v69 * v78) * v71)) - v17));
      if (v79 <= 1.0 && v80 <= 1.0)
      {
        v87 = (unsigned __int16 *)(v29 + 4 * v81);
        v88 = (unsigned __int16 *)(v29 + 4 * v82);
        v89 = *v88;
        v90 = v88[1];
        LODWORD(v88) = *(unsigned __int8 *)(v35 + a2);
        v91 = (_DWORD)v88 + *v87;
        LODWORD(v87) = (_DWORD)v88 + v87[1];
        v92 = *(unsigned __int8 *)(v35 + v33);
        v93 = v92 + v89;
        v94 = v92 + v90;
        v95 = ((_DWORD)v87 << 16) | (v91 >> 8);
LABEL_77:
        *(_DWORD *)v26 = v95 & 0xFF0000FF;
        v100 = -1;
        goto LABEL_78;
      }
      if (v79 <= 1.0)
      {
        if ((v81 & 0x80000000) == 0)
        {
          v84 = (2 * v81);
LABEL_83:
          v102 = (unsigned __int16 *)(v29 + 2 * v84);
          v103 = v102[1];
          v104 = *(unsigned __int8 *)(v35 + a2);
          v105 = v104 + *v102;
          v106 = v104 + v103;
          goto LABEL_86;
        }
      }
      else if (v79 <= v22)
      {
        v84 = 2 * v20;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_83;
      }
      if (!v28)
      {
        v100 = 0;
        goto LABEL_87;
      }
      v107 = *(unsigned __int8 *)(v35 + a2);
      v105 = v107 + *v28;
      v106 = v107 + v28[1];
LABEL_86:
      *(_DWORD *)v26 = ((v105 >> 8) | (v106 << 16)) & 0xFF0000FF;
      v100 = -1;
LABEL_87:
      if (v80 <= 1.0)
      {
        if (v82 < 0)
          goto LABEL_94;
        v108 = (2 * v82);
      }
      else if (v80 > v22 || (v108 = 2 * v20, (v20 & 0x80000000) != 0))
      {
LABEL_94:
        if (!v28)
        {
          v101 = 0;
          goto LABEL_79;
        }
        v112 = *(unsigned __int8 *)(v35 + v33);
        v93 = v112 + *v28;
        v94 = v112 + v28[1];
        goto LABEL_78;
      }
      v109 = (unsigned __int16 *)(v29 + 2 * v108);
      v110 = v109[1];
      v111 = *(unsigned __int8 *)(v35 + v33);
      v93 = v111 + *v109;
      v94 = v111 + v110;
LABEL_78:
      *(_DWORD *)(v26 + 4) = ((v93 >> 8) | (v94 << 16)) & 0xFF0000FF;
      v101 = -1;
LABEL_79:
      v13 = v8 + v75;
      LOBYTE(a2) = (a2 + 1) & v36;
      LOBYTE(v33) = (v33 + 1) & v36;
      v26 += 8;
      *v25 = v100;
      v25[1] = v101;
      v25 += 2;
      v73 -= 2;
      if (v73 <= 2)
        return;
    }
  }
  if (v28 || (v20 & 0x80000000) == 0)
  {
    v113 = (unsigned __int16 *)(v29 + 4 * v20);
    if ((int)v20 >= 0)
      v114 = v113;
    else
      v114 = v28;
    v115 = vdup_n_s32(v114[1]);
    v116 = vdup_n_s32(*v114);
    v117 = a4 + 4;
    do
    {
      LOBYTE(a8) = *(_BYTE *)(v35 + a2);
      BYTE4(a8) = *(_BYTE *)(v35 + v33);
      a2 = ((_DWORD)a2 + 1) & v36;
      v118 = (int32x2_t)vand_s8(*(int8x8_t *)&a8, (int8x8_t)0xFF000000FFLL);
      v119 = vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v115, v118), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v116, v118), 8uLL) & 0xFFFFFEFFFFFFFEFFLL));
      *(int8x8_t *)v26 = v119;
      v33 = ((_DWORD)v33 + 1) & v36;
      v119.i8[0] = *(_BYTE *)(v35 + a2);
      v119.i8[4] = *(_BYTE *)(v35 + v33);
      v120 = (int32x2_t)vand_s8(v119, (int8x8_t)0xFF000000FFLL);
      a8 = COERCE_DOUBLE(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v115, v120), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v116, v120), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
      *(double *)(v26 + 8) = a8;
      *(_DWORD *)v25 = -1;
      v25 += 4;
      v117 -= 4;
      v26 += 16;
    }
    while (v117 > 4);
  }
  else
  {
    if (a4 >= 4)
      v39 = 4;
    else
      v39 = a4;
    bzero(v25, ((a4 - v39 + 3) & 0xFFFFFFFC) + 4);
  }
}

void W8_shade_conic_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  unsigned int *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  unsigned __int16 *v28;
  float v29;
  float v30;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = 15;
  else
    v10 = 0;
  if (v9)
    v11 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = a1 + 368;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v29 = *(float *)(a1 + 336);
  v30 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(unsigned int **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v30 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v29);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    v25 = vcvtms_s32_f32(v15 + v21);
    v26 = ceilf(v21 - v15);
    if (v21 < 0.0)
      v22 = v25;
    if (v21 <= v15)
      v27 = v23;
    else
      v27 = v26;
    v28 = (unsigned __int16 *)(v16 + 4 * (int)v27);
    *v17++ = (((*(unsigned __int8 *)(v11 + v19)
              + (((int)v24 * v28[1]
                + (255 - (int)v24) * *(unsigned __int16 *)(v16 + 2 * (int)(2 * v22) + 2)) >> 8)) << 16) | ((*(unsigned __int8 *)(v11 + v19) + (((int)v24 * *v28 + (255 - (int)v24) * *(unsigned __int16 *)(v16 + 2 * (int)(2 * v22))) >> 8)) >> 8)) & 0xFF0000FF;
    v19 = ((_DWORD)v19 + 1) & v10;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t W8_shade_custom_W(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  char *v27;
  unsigned int v31;
  int v32;
  unsigned __int16 *v33;
  int v34;
  char v35;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(unsigned __int16 **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 2 * *(_DWORD *)(result + 48);
  if (v10)
    v25 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v25 = 0;
  v27 = *(char **)(result + 144);
  v26 = *(unsigned int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v33 = (unsigned __int16 *)(v23
                               + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                               + 4 * (int)(float)(v20 * (float)(v8 - v18)));
      result = v33[1];
      v34 = *(unsigned __int8 *)(v9 + v25);
      v31 = v34 + *v33;
      v32 = v34 + result;
      goto LABEL_21;
    }
    if (v22)
    {
      result = *(unsigned __int8 *)(v9 + v25);
      v31 = result + *v22;
      v32 = result + v22[1];
LABEL_21:
      *v26 = ((v31 >> 8) | (v32 << 16)) & 0xFF0000FF;
      v35 = -1;
      goto LABEL_22;
    }
    v35 = 0;
LABEL_22:
    v25 = ((_DWORD)v25 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v26;
    *v27++ = v35;
    --a4;
  }
  while (a4);
  return result;
}

void W8_shade_axial_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v17;
  float v18;
  float v19;
  int v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  char v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned int v44;
  int32x2_t v45;
  int32x2_t v46;
  int v47;
  int32x2_t v48;
  int8x8_t v49;
  int32x2_t v50;
  int32x4_t v51;
  int v52;

  v8 = *(float *)(a1 + 280);
  v9 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v8 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v10 = a1 + 368;
  v11 = *(_QWORD *)(a1 + 368);
  v12 = ((unint64_t)a3 >> 4) & 0xF0;
  v13 = v11 + v12;
  if (v11)
    v14 = v11 + v12;
  else
    v14 = a1 + 368;
  if (v11)
    v15 = 15;
  else
    v15 = 0;
  v17 = *(float *)(a1 + 336);
  LODWORD(a8) = *(_DWORD *)(a1 + 344);
  v18 = *(float *)(a1 + 304);
  v19 = *(float *)(a1 + 308);
  v20 = *(_DWORD *)(a1 + 320);
  v21 = *(_DWORD *)(a1 + 324);
  v22 = (a2 >> 8) & 0xF;
  v25 = a1 + 144;
  v23 = *(_DWORD **)(a1 + 144);
  v24 = *(_QWORD *)(v25 + 8);
  v26 = *(unsigned __int16 **)(a1 + 376);
  v27 = *(_QWORD *)(a1 + 360);
  if (v8 != 0.0)
  {
    if (!v11)
      LOBYTE(v22) = 0;
    while (1)
    {
      v33 = v20;
      if (v9 >= v18)
      {
        v33 = v21;
        if (v9 <= v19)
          v33 = (int)(float)(*(float *)&a8 * (float)(v9 - v17));
      }
      if (v33 < 0)
      {
        if (!v26)
        {
          v40 = 0;
          goto LABEL_39;
        }
        v39 = *(unsigned __int8 *)(v14 + v22);
        v37 = v39 + *v26;
        v38 = v39 + v26[1];
      }
      else
      {
        v34 = (unsigned __int16 *)(v27 + 2 * (2 * v33));
        v35 = v34[1];
        v36 = *(unsigned __int8 *)(v14 + v22);
        v37 = v36 + *v34;
        v38 = v36 + v35;
      }
      *(_DWORD *)v24 = ((v37 >> 8) | (v38 << 16)) & 0xFF0000FF;
      v40 = -1;
LABEL_39:
      LOBYTE(v22) = (v22 + 1) & v15;
      v9 = v8 + v9;
      v24 += 4;
      *(_BYTE *)v23 = v40;
      v23 = (_DWORD *)((char *)v23 + 1);
      if (!--a4)
        return;
    }
  }
  if (v11)
    v28 = 15;
  else
    v28 = 0;
  if (v11)
    LODWORD(v29) = (a2 >> 8) & 0xF;
  else
    LODWORD(v29) = 0;
  if (v11)
    LODWORD(v30) = (BYTE1(a2) + 1) & 0xF;
  else
    LODWORD(v30) = 0;
  if (v11)
    v31 = v13;
  else
    v31 = v10;
  if (v9 >= v18)
  {
    v20 = v21;
    if (v9 <= v19)
      v20 = (int)(float)(*(float *)&a8 * (float)(v9 - v17));
  }
  if ((v20 & 0x80000000) == 0 || v26)
  {
    v41 = (unsigned __int16 *)(v27 + 2 * (2 * v20));
    if (v20 < 0)
      v42 = v26;
    else
      v42 = v41;
    v43 = v42[1];
    v44 = *v42;
    if (v11)
    {
      v45 = vdup_n_s32(v44);
      v46 = vdup_n_s32(v43);
      v47 = a4 + 4;
      do
      {
        LOBYTE(a8) = *(_BYTE *)(v31 + v29);
        BYTE4(a8) = *(_BYTE *)(v31 + v30);
        v29 = ((_DWORD)v29 + 1) & v28;
        v48 = (int32x2_t)vand_s8(*(int8x8_t *)&a8, (int8x8_t)0xFF000000FFLL);
        v49 = vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v46, v48), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v45, v48), 8uLL) & 0xFFFFFEFFFFFFFEFFLL));
        *(int8x8_t *)v24 = v49;
        v30 = ((_DWORD)v30 + 1) & v28;
        v49.i8[0] = *(_BYTE *)(v31 + v29);
        v49.i8[4] = *(_BYTE *)(v31 + v30);
        v50 = (int32x2_t)vand_s8(v49, (int8x8_t)0xFF000000FFLL);
        a8 = COERCE_DOUBLE(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v46, v50), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v45, v50), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(double *)(v24 + 8) = a8;
        *v23++ = -1;
        v47 -= 4;
        v24 += 16;
      }
      while (v47 > 4);
    }
    else
    {
      v51 = vdupq_n_s32((v44 >> 8) | (BYTE1(v43) << 24));
      v52 = a4 + 4;
      do
      {
        *(int32x4_t *)v24 = v51;
        v24 += 16;
        *v23++ = -1;
        v52 -= 4;
      }
      while (v52 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v32 = 4;
    else
      v32 = a4;
    bzero(v23, ((a4 - v32 + 3) & 0xFFFFFFFC) + 4);
  }
}

void W8_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  void *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void (*v55)(uint64_t);
  unsigned __int8 *v56;
  _BYTE *v57;
  unsigned int v58;
  int v59;
  _BYTE *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  float *v67;
  float v68;
  float v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  float *v83;
  float v84;
  int v85;
  float v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _BYTE *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _BYTE *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned __int8 *v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  char v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  unsigned int v269;
  unsigned __int8 *v270;
  int v271;
  unsigned int v272;
  _BYTE *v273;
  _BYTE *v274;
  unsigned int v275;
  int v276;
  unsigned __int8 *v277;
  _BYTE *v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  int v286;
  unsigned __int8 *v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  char v300;
  int v301;
  unsigned __int8 *v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned __int8 *v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  int v311;
  unsigned __int8 *v312;
  int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  uint64_t v320;
  _BYTE *v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  char *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  int *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  void *v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;

  v350 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 4);
  v335 = v4;
  v336 = a1;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v9 = *(_QWORD *)(v336 + 40);
  v8 = *(_QWORD *)(v336 + 48);
  v10 = *(float *)(a2 + 184);
  v341 = *(int **)(v336 + 136);
  v348 = *(_QWORD *)(a2 + 96);
  v349 = v8;
  v347 = *(_QWORD *)(a2 + 104);
  v11 = *(int *)(v336 + 24);
  v331 = *(int *)(v336 + 28);
  v12 = *(_DWORD *)(v336 + 16);
  v345 = (void *)*(int *)(v336 + 20);
  v13 = *(int *)(v336 + 12);
  v346 = *(_DWORD *)(v336 + 8);
  v14 = *(int *)(a2 + 16);
  v15 = (v14 + 6) * v5;
  if (v15 > 65439)
  {
    v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
    v17 = v18;
    v20 = v18;
    if (!v18)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v17 = (char *)&v329 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v17, v16);
    v20 = 0;
  }
  v330 = v20;
  v338 = a3;
  v21 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = v21 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a2 + 160) = v22;
  if ((_DWORD)v14)
    v23 = 4 * v5;
  else
    v23 = 0;
  v24 = v22 + v23;
  v25 = v9 + (v11 - 1) * v331;
  *(_QWORD *)(a2 + 144) = v21;
  *(_QWORD *)(a2 + 152) = v24;
  v337 = a2;
  if (v349)
  {
    v26 = v336;
    v27 = *(int *)(v336 + 32);
    v28 = (_BYTE *)(v349 + v13 + (int)v27 * (uint64_t)v12);
    v343 = v27 - v335;
    v29 = v335;
    v30 = 1;
  }
  else
  {
    v28 = 0;
    v343 = 0;
    v30 = 0;
    v29 = v335;
    v26 = v336;
  }
  v344 = (int)(float)((float)(v10 * 255.0) + 0.5);
  v31 = (char *)v345 + v25;
  v32 = (_BYTE *)(v9 + v13 + v12 * (uint64_t)(int)v331);
  v342 = v331 - v29;
  v33 = *(int *)(v26 + 104);
  v34 = *(_DWORD *)(v26 + 108);
  v35 = *(unsigned __int8 *)(v26 + 2);
  if (v35 == 6 || v35 == 1)
  {
    v36 = v338;
    v37 = v337;
    v39 = v347;
    v38 = v348;
    if (!v341)
      goto LABEL_541;
    v40 = 0;
    LODWORD(v41) = 0;
    v42 = *(int *)(v26 + 124);
    v43 = (unsigned __int8 *)v341 + v33 + (int)v42 * (uint64_t)v34;
    v29 = v335;
    v340 = v42 - v335;
    goto LABEL_31;
  }
  if (!v341)
  {
    v43 = 0;
    v40 = 0;
    v340 = 0;
    LODWORD(v41) = 0;
    v36 = v338;
    v37 = v337;
    v39 = v347;
    v38 = v348;
LABEL_31:
    v332 = -v29;
    v333 = (v4 - 1) + 1;
    v329 = v31;
    v334 = (unint64_t)(v31 - 1);
    v54 = v40;
    v339 = v344 ^ 0xFF;
    while (2)
    {
      v345 = v54;
      v55 = *(void (**)(uint64_t))v37;
      v347 = v39;
      v348 = v38;
      v55(v37);
      v56 = *(unsigned __int8 **)(v37 + 160);
      v57 = *(_BYTE **)(v37 + 144);
      v58 = *(_DWORD *)(v37 + 8);
      if (v58 == *(_DWORD *)(v37 + 12))
      {
        if (v344 != 255)
        {
          v59 = v4;
          v60 = *(_BYTE **)(v37 + 144);
          v61 = v339;
          do
          {
            if (*v60)
            {
              v62 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * v61;
              *(_DWORD *)v56 = (*(_DWORD *)v56 & 0xFF0000FF)
                             - ((v62 + 65537 + ((v62 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v62 + 1 + BYTE1(v62)) >> 8));
            }
            ++v60;
            v56 += 4;
            --v59;
          }
          while (v59);
          v56 += 4 * v332;
          v57 += v333 + v332;
        }
      }
      else
      {
        v63 = *(_QWORD *)(v37 + 152);
        v64 = HIWORD(v58) & 0x3F;
        if (v64 == 16)
        {
          v75 = v339;
          v76 = 0;
          if (v344 == 255)
          {
            do
            {
              if (v57[v76])
                *(_DWORD *)&v56[4 * v76] = *(_DWORD *)(v63 + 4 * v76) & 0xFF000000 | BYTE1(*(_DWORD *)(v63 + 4 * v76));
              ++v76;
            }
            while (v4 != (_DWORD)v76);
          }
          else
          {
            do
            {
              if (v57[v76])
              {
                v77 = *(_DWORD *)(v63 + 4 * v76);
                v78 = ((v77 >> 8) & 0xFF00FF) * v75 + 65537 + (((((v77 >> 8) & 0xFF00FF) * v75) >> 8) & 0xFF00FF);
                *(_DWORD *)&v56[4 * v76] = (v77 & 0xFF000000 | BYTE1(v77)) - (v78 & 0xFF000000 | BYTE1(v78));
              }
              ++v76;
            }
            while (v4 != (_DWORD)v76);
          }
        }
        else
        {
          v65 = v339;
          if (v64 == 32)
          {
            if (v344 == 255)
            {
              v82 = 0;
              v83 = (float *)(v63 + 4);
              do
              {
                if (v57[v82])
                {
                  v84 = *v83;
                  if (*v83 <= 0.0)
                  {
                    v88 = 0;
                  }
                  else
                  {
                    v85 = (int)(float)((float)(v84 * 255.0) + 0.5);
                    v86 = *(v83 - 1);
                    if (v84 > 1.0)
                    {
                      v84 = 1.0;
                      v85 = 255;
                    }
                    v87 = (int)(float)((float)(v86 * 255.0) + 0.5);
                    if (v86 < 0.0)
                      v87 = 0;
                    if (v86 > v84)
                      v87 = v85;
                    v88 = v87 | (v85 << 24);
                  }
                  *(_DWORD *)&v56[4 * v82] = v88;
                }
                v83 += 2;
                ++v82;
              }
              while (v4 != (_DWORD)v82);
            }
            else
            {
              v66 = 0;
              v67 = (float *)(v63 + 4);
              do
              {
                if (v57[v66])
                {
                  v68 = *v67;
                  if (*v67 <= 0.0)
                  {
                    v74 = 0;
                  }
                  else
                  {
                    v69 = *(v67 - 1);
                    v70 = (int)(float)((float)(v68 * 255.0) + 0.5);
                    if (v68 > 1.0)
                    {
                      v70 = 255;
                      v68 = 1.0;
                    }
                    v71 = (int)(float)((float)(v69 * 255.0) + 0.5);
                    if (v69 < 0.0)
                      LOBYTE(v71) = 0;
                    if (v69 > v68)
                      LOBYTE(v71) = v70;
                    v72 = v71 | (v70 << 24);
                    v73 = (v71 | (v70 << 16)) * v65;
                    v74 = v72
                        - ((v73 + 65537 + ((v73 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v73 + 1 + BYTE1(v73)) >> 8));
                  }
                  *(_DWORD *)&v56[4 * v66] = v74;
                }
                v67 += 2;
                ++v66;
              }
              while (v4 != (_DWORD)v66);
            }
          }
          else if (v344 == 255)
          {
            v89 = 0;
            do
            {
              if (v57[v89])
                *(_DWORD *)&v56[4 * v89] = *(_DWORD *)(v63 + 4 * v89);
              ++v89;
            }
            while (v4 != (_DWORD)v89);
          }
          else
          {
            v79 = 0;
            do
            {
              if (v57[v79])
              {
                v80 = *(_DWORD *)(v63 + 4 * v79);
                v81 = (v80 | (HIBYTE(v80) << 16)) * v65;
                *(_DWORD *)&v56[4 * v79] = (v80 & 0xFF0000FF)
                                         - ((v81 + 65537 + ((v81 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v81 + 1 + BYTE1(v81)) >> 8));
              }
              ++v79;
            }
            while (v4 != (_DWORD)v79);
          }
        }
      }
      switch(v36)
      {
        case 0:
          v90 = v43 != 0;
          if (v349)
          {
            v91 = v4;
            v92 = v43;
            v93 = v346;
            do
            {
              v94 = *v57;
              if (*v57)
              {
                if (v43)
                  v94 = ((unsigned __int16)(*v92 * (_WORD)v94 + ((*v92 * v94) >> 8) + 1) >> 8);
                if (v94)
                {
                  if (v94 == 255)
                  {
                    LOBYTE(v95) = 0;
                    *v32 = 0;
                  }
                  else
                  {
                    v96 = *v32;
                    v97 = *v28;
                    v98 = (v96 | (v97 << 16)) * v94
                        + 65537
                        + ((((v96 | (v97 << 16)) * v94) >> 8) & 0xFF00FF);
                    v99 = v96 | (v97 << 24);
                    *v32 = v99 - BYTE1(v98);
                    v95 = (v99 - (v98 & 0xFF000000 | BYTE1(v98))) >> 24;
                  }
                  *v28 = v95;
                }
              }
              ++v57;
              v92 += v90;
              ++v32;
              ++v28;
              --v91;
            }
            while (v91);
            v43 = &v92[v340];
            v32 += v342;
            v28 += v343;
            v101 = v347;
            v100 = v348;
          }
          else
          {
            v266 = v4;
            v267 = v43;
            v93 = v346;
            v100 = v348;
            do
            {
              v268 = *v57;
              if (*v57)
              {
                if (v43)
                  v268 = ((unsigned __int16)(*v267 * (_WORD)v268
                                                            + ((*v267 * v268) >> 8)
                                                            + 1) >> 8);
                if (v268)
                {
                  if (v268 == 255)
                    LOBYTE(v269) = 0;
                  else
                    v269 = *v32
                         - ((*v32 * v268 + ((*v32 * v268) >> 8) + 1) >> 8);
                  *v32 = v269;
                }
              }
              ++v57;
              v267 += v90;
              ++v32;
              --v266;
            }
            while (v266);
            v43 = &v267[v340];
            v32 += v342;
            v28 += v343;
            v101 = v347;
          }
          goto LABEL_477;
        case 1:
          v102 = *v57;
          if (v349)
          {
            if (v43)
            {
              v103 = 0;
              v104 = v57 + 1;
              v101 = v347;
              do
              {
                if (v102)
                {
                  v105 = v43[v103] * v102 + ((v43[v103] * v102) >> 8) + 1;
                  if (BYTE1(v105))
                  {
                    if (BYTE1(v105) == 255)
                    {
                      v106 = *(_DWORD *)&v56[4 * v103];
                      HIBYTE(v107) = HIBYTE(v106);
                    }
                    else
                    {
                      v108 = (*(_DWORD *)&v56[4 * v103] | (HIBYTE(*(_DWORD *)&v56[4 * v103]) << 16))
                           * (v105 >> 8)
                           + (v32[v103] | (v28[v103] << 16)) * ((v105 >> 8) ^ 0xFF);
                      v107 = v108 + 65537 + ((v108 >> 8) & 0xFF00FF);
                      v106 = v107 >> 8;
                    }
                    v32[v103] = v106;
                    v28[v103] = HIBYTE(v107);
                  }
                }
                v102 = v104[v103++];
              }
              while (v4 != (_DWORD)v103);
              v109 = (uint64_t)&v32[v103 - 1];
              v110 = (uint64_t)&v28[v103 - 1];
              v43 += v103 + v340;
            }
            else
            {
              v306 = v57 + 1;
              v110 = (uint64_t)(v28 - 1);
              v109 = (uint64_t)(v32 - 1);
              v307 = v4;
              v101 = v347;
              do
              {
                if (v102)
                {
                  if (v102 == 255)
                  {
                    v308 = *(_DWORD *)v56;
                    v309 = *(_DWORD *)v56;
                  }
                  else
                  {
                    v310 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * v102
                         + (*(unsigned __int8 *)(v109 + 1) | (*(unsigned __int8 *)(v110 + 1) << 16)) * (v102 ^ 0xFF);
                    v309 = v310 + 65537 + ((v310 >> 8) & 0xFF00FF);
                    v308 = v309 >> 8;
                  }
                  *(_BYTE *)(v109 + 1) = v308;
                  *(_BYTE *)(v110 + 1) = HIBYTE(v309);
                }
                v311 = *v306++;
                v102 = v311;
                v56 += 4;
                ++v110;
                ++v109;
                --v307;
              }
              while (v307);
              v43 = 0;
            }
            v32 = (_BYTE *)(v109 + v342 + 1);
            v28 = (_BYTE *)(v110 + v343 + 1);
            goto LABEL_476;
          }
          v270 = v57 + 1;
          v271 = v4;
          if (v43)
          {
            v101 = v347;
            v100 = v348;
            do
            {
              if (v102)
              {
                v272 = *v43 * v102 + ((*v43 * v102) >> 8) + 1;
                v273 = *(_BYTE **)(v336 + 40);
                v274 = (_BYTE *)v334;
                if (v334 >= (unint64_t)v32)
                  v274 = v32;
                if (v274 >= v273)
                  v273 = v274;
                if (BYTE1(v272))
                {
                  if (BYTE1(v272) == 255)
                    v275 = *(_DWORD *)v56;
                  else
                    v275 = (*v56 * (v272 >> 8)
                          + ((v272 >> 8) ^ 0xFF) * *v273
                          + ((*v56 * (v272 >> 8) + ((v272 >> 8) ^ 0xFF) * *v273) >> 8)
                          + 1) >> 8;
                  *v273 = v275;
                }
              }
              else
              {
                v273 = v32;
              }
              v276 = *v270++;
              v102 = v276;
              v56 += 4;
              ++v43;
              v32 = v273 + 1;
              --v271;
            }
            while (v271);
            v43 += v340;
          }
          else
          {
            v320 = v336;
            v101 = v347;
            v100 = v348;
            do
            {
              v273 = *(_BYTE **)(v320 + 40);
              v321 = (_BYTE *)v334;
              if (v334 >= (unint64_t)v32)
                v321 = v32;
              if (v321 >= v273)
                v273 = v321;
              if (v102)
              {
                if (v102 == 255)
                  v322 = *(_DWORD *)v56;
                else
                  v322 = (*v56 * v102
                        + *v273 * (v102 ^ 0xFF)
                        + ((*v56 * v102 + *v273 * (v102 ^ 0xFFu)) >> 8)
                        + 1) >> 8;
                *v273 = v322;
              }
              v323 = *v270++;
              v102 = v323;
              v56 += 4;
              v32 = v273 + 1;
              --v271;
            }
            while (v271);
            v43 = 0;
          }
          v32 = &v273[v342 + 1];
          v28 += v343;
          goto LABEL_524;
        case 2:
          v111 = *v57;
          if (v349)
          {
            if (v43)
            {
              v112 = 0;
              v113 = v57 + 1;
              v101 = v347;
              while (1)
              {
                if (!v111)
                  goto LABEL_128;
                v114 = v43[v112] * v111 + ((v43[v112] * v111) >> 8) + 1;
                if (!BYTE1(v114))
                  goto LABEL_128;
                if (BYTE1(v114) == 255)
                {
                  v115 = *(_DWORD *)&v56[4 * v112];
                  v116 = HIBYTE(v115);
                  if (HIBYTE(v115))
                  {
                    if (v116 == 255)
                    {
                      v32[v112] = v115;
                      LOBYTE(v115) = -1;
                    }
                    else
                    {
                      v119 = (v32[v112] | (v28[v112] << 16)) * (v116 ^ 0xFF);
LABEL_126:
                      v120 = ((v119 + 65537 + ((v119 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v119 + 1 + BYTE1(v119)) >> 8))
                           + (v115 & 0xFF0000FF);
                      v32[v112] = v120;
                      v115 = HIBYTE(v120);
                    }
                    v28[v112] = v115;
                  }
                }
                else
                {
                  v117 = *(_DWORD *)&v56[4 * v112];
                  v118 = (v117 | (HIBYTE(v117) << 16)) * ((v114 >> 8) ^ 0xFF);
                  v115 = (v117 & 0xFF0000FF)
                       - ((v118 + 65537 + ((v118 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v118 + 1 + BYTE1(v118)) >> 8));
                  if (HIBYTE(v115))
                  {
                    v119 = (v32[v112] | (v28[v112] << 16)) * (~v115 >> 24);
                    goto LABEL_126;
                  }
                }
LABEL_128:
                v111 = v113[v112++];
                if (v4 == (_DWORD)v112)
                {
                  v121 = (uint64_t)&v32[v112 - 1];
                  v122 = (uint64_t)&v28[v112 - 1];
                  v43 += v112 + v340;
LABEL_510:
                  v32 = (_BYTE *)(v121 + v342 + 1);
                  v28 = (_BYTE *)(v122 + v343 + 1);
                  goto LABEL_476;
                }
              }
            }
            v312 = v57 + 1;
            v122 = (uint64_t)(v28 - 1);
            v121 = (uint64_t)(v32 - 1);
            v313 = v4;
            v101 = v347;
            while (1)
            {
              if (v111)
              {
                if (v111 == 255)
                {
                  v314 = *(_DWORD *)v56;
                  v315 = HIBYTE(*(_DWORD *)v56);
                  if (v315)
                  {
                    if (v315 == 255)
                    {
                      *(_BYTE *)(v121 + 1) = v314;
                      LOBYTE(v314) = -1;
                    }
                    else
                    {
                      v317 = (*(unsigned __int8 *)(v121 + 1) | (*(unsigned __int8 *)(v122 + 1) << 16)) * (v315 ^ 0xFF);
LABEL_506:
                      v318 = ((v317 + 65537 + ((v317 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v317 + 1 + BYTE1(v317)) >> 8))
                           + (v314 & 0xFF0000FF);
                      *(_BYTE *)(v121 + 1) = v318;
                      v314 = HIBYTE(v318);
                    }
                    *(_BYTE *)(v122 + 1) = v314;
                  }
                }
                else
                {
                  v316 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v111 ^ 0xFF);
                  v314 = (*(_DWORD *)v56 & 0xFF0000FF)
                       - ((v316 + 65537 + ((v316 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v316 + 1 + BYTE1(v316)) >> 8));
                  if (HIBYTE(v314))
                  {
                    v317 = (*(unsigned __int8 *)(v121 + 1) | (*(unsigned __int8 *)(v122 + 1) << 16)) * (~v314 >> 24);
                    goto LABEL_506;
                  }
                }
              }
              v319 = *v312++;
              v111 = v319;
              v56 += 4;
              ++v122;
              ++v121;
              if (!--v313)
              {
                v43 = 0;
                goto LABEL_510;
              }
            }
          }
          v277 = v57 + 1;
          v278 = v32 - 1;
          v279 = v4;
          if (v43)
          {
            v101 = v347;
            while (1)
            {
              if (!v111)
                goto LABEL_443;
              v280 = *v43 * v111 + ((*v43 * v111) >> 8) + 1;
              if (!BYTE1(v280))
                goto LABEL_443;
              if (BYTE1(v280) == 255)
              {
                v281 = *(_DWORD *)v56;
                v282 = HIBYTE(*(_DWORD *)v56);
                if (v282)
                {
                  if (v282 != 255)
                  {
                    v283 = (v282 ^ 0xFF) * v278[1];
                    goto LABEL_441;
                  }
                  goto LABEL_442;
                }
              }
              else
              {
                v284 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * ((v280 >> 8) ^ 0xFF);
                v281 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v284 + 65537 + ((v284 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v284 + 1 + BYTE1(v284)) >> 8));
                if (HIBYTE(v281))
                {
                  v283 = (~v281 >> 24) * v278[1];
LABEL_441:
                  v281 += (v283 + (v283 >> 8) + 1) >> 8;
LABEL_442:
                  v278[1] = v281;
                }
              }
LABEL_443:
              v285 = *v277++;
              v111 = v285;
              v56 += 4;
              ++v43;
              ++v278;
              if (!--v279)
              {
                v43 += v340;
                goto LABEL_537;
              }
            }
          }
          v101 = v347;
          do
          {
            if (!v111)
              goto LABEL_535;
            if (v111 == 255)
            {
              v324 = *(_DWORD *)v56;
              v325 = HIBYTE(*(_DWORD *)v56);
              if (!v325)
                goto LABEL_535;
              if (v325 == 255)
                goto LABEL_534;
              v326 = (v325 ^ 0xFF) * v278[1];
            }
            else
            {
              v327 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v111 ^ 0xFF);
              v324 = (*(_DWORD *)v56 & 0xFF0000FF)
                   - ((v327 + 65537 + ((v327 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v327 + 1 + BYTE1(v327)) >> 8));
              if (!HIBYTE(v324))
                goto LABEL_535;
              v326 = (~v324 >> 24) * v278[1];
            }
            v324 += (v326 + (v326 >> 8) + 1) >> 8;
LABEL_534:
            v278[1] = v324;
LABEL_535:
            v328 = *v277++;
            v111 = v328;
            v56 += 4;
            ++v278;
            --v279;
          }
          while (v279);
          v43 = 0;
LABEL_537:
          v32 = &v278[v342 + 1];
          v28 += v343;
LABEL_476:
          v93 = v346;
          v100 = v348;
LABEL_477:
          v301 = v93 - 1;
          if (!v301)
          {
            v40 = v345;
LABEL_539:
            if (v40)
              goto LABEL_540;
            goto LABEL_541;
          }
          v346 = v301;
          v54 = 0;
          v41 = (v41 + 1);
          v38 = *(_QWORD *)(v37 + 128) + v100;
          v39 = *(_QWORD *)(v37 + 136) + v101;
          v40 = v345;
          if (v345)
          {
            v348 = v38;
            v46 = v335;
            goto LABEL_21;
          }
          continue;
        case 3:
          v123 = v4;
          v124 = v43;
          do
          {
            v125 = *v57;
            if (*v57)
            {
              if (v43)
                v125 = ((unsigned __int16)(*v124 * (_WORD)v125 + ((*v124 * v125) >> 8) + 1) >> 8);
              if (v125)
              {
                if (v125 == 255)
                {
                  v127 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16))
                       * (*v28 ^ 0xFF);
                  v126 = (*(_DWORD *)v56 & 0xFF0000FF)
                       - ((v127 + 65537 + ((v127 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v127 + 1 + BYTE1(v127)) >> 8));
                  HIBYTE(v127) = HIBYTE(v126);
                }
                else
                {
                  v128 = (*v32 | (*v28 << 16)) * (v125 ^ 0xFF)
                       + ((*v28 * v125 + ((*v28 * v125) >> 8) + 1) >> 8)
                       * (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16));
                  v127 = v128 + 65537 + ((v128 >> 8) & 0xFF00FF);
                  v126 = v127 >> 8;
                }
                *v32 = v126;
                *v28 = HIBYTE(v127);
              }
            }
            ++v57;
            v56 += 4;
            v124 += v43 != 0;
            ++v32;
            v28 += v30;
            --v123;
          }
          while (v123);
          goto LABEL_193;
        case 4:
          v129 = v4;
          v124 = v43;
          do
          {
            v130 = *v57;
            if (*v57)
            {
              if (v43)
                v130 = ((unsigned __int16)(*v124 * (_WORD)v130 + ((*v124 * v130) >> 8) + 1) >> 8);
              if (v130)
              {
                if (v130 == 255)
                {
                  v132 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * *v28;
                  v131 = (*(_DWORD *)v56 & 0xFF0000FF)
                       - ((v132 + 65537 + ((v132 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v132 + 1 + BYTE1(v132)) >> 8));
                  HIBYTE(v132) = HIBYTE(v131);
                }
                else
                {
                  v133 = (*v32 | (*v28 << 16)) * (v130 ^ 0xFF)
                       + (((*v28 ^ 0xFF) * v130 + (((*v28 ^ 0xFFu) * v130) >> 8) + 1) >> 8)
                       * (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16));
                  v132 = v133 + 65537 + ((v133 >> 8) & 0xFF00FF);
                  v131 = v132 >> 8;
                }
                *v32 = v131;
                *v28 = HIBYTE(v132);
              }
            }
            ++v57;
            v56 += 4;
            v124 += v43 != 0;
            ++v32;
            v28 += v30;
            --v129;
          }
          while (v129);
          goto LABEL_193;
        case 5:
          v134 = v4;
          v135 = v43;
          do
          {
            v136 = *v57;
            if (*v57)
            {
              if (!v43
                || (v136 = ((unsigned __int16)(*v135 * (_WORD)v136
                                                              + ((*v135 * v136) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v137 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v136 ^ 0xFF);
                v138 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v137 + 65537 + ((v137 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v137 + 1 + BYTE1(v137)) >> 8));
                v139 = (HIBYTE(v138) ^ 0xFF) * (*v32 | (*v28 << 16))
                     + (v138 | (HIBYTE(v138) << 16)) * *v28;
                v140 = v139 + 65537 + ((v139 >> 8) & 0xFF00FF);
                *v32 = BYTE1(v140);
                *v28 = HIBYTE(v140);
              }
            }
            ++v57;
            v56 += 4;
            v135 += v43 != 0;
            ++v32;
            v28 += v30;
            --v134;
          }
          while (v134);
          goto LABEL_473;
        case 6:
          v141 = v4;
          v124 = v43;
          do
          {
            v142 = *v57;
            if (*v57)
            {
              if (!v43
                || (v142 = ((unsigned __int16)(*v124 * (_WORD)v142
                                                              + ((*v124 * v142) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v143 = *v28;
                if ((_BYTE)v143 != 0xFF)
                {
                  if (~(_BYTE)v143 == 255)
                  {
                    v144 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v142 ^ 0xFF);
                    v145 = (*(_DWORD *)v56 & 0xFF0000FF)
                         - ((v144 + 65537 + ((v144 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v144 + 1 + BYTE1(v144)) >> 8));
                  }
                  else
                  {
                    v146 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16))
                         * ((~(_BYTE)v143 * v142
                           + ((~(_BYTE)v143 * v142) >> 8)
                           + 1) >> 8);
                    v145 = ((v146 + 65537 + ((v146 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v146 + 1 + BYTE1(v146)) >> 8))
                         + (*v32 | (v143 << 24));
                  }
                  *v32 = v145;
                  *v28 = HIBYTE(v145);
                }
              }
            }
            ++v57;
            v56 += 4;
            v124 += v43 != 0;
            ++v32;
            v28 += v30;
            --v141;
          }
          while (v141);
          goto LABEL_193;
        case 7:
          v147 = v43 != 0;
          if (v349)
          {
            v148 = v4;
            v124 = v43;
            do
            {
              v149 = *v57;
              if (*v57)
              {
                if (v43)
                  v149 = ((unsigned __int16)(*v124 * (_WORD)v149
                                                            + ((*v124 * v149) >> 8)
                                                            + 1) >> 8);
                if (v149)
                {
                  if (v149 == 255)
                  {
                    v150 = *v32;
                    v153 = *v28;
                    v151 = (v150 | (v153 << 16)) * (~*(_DWORD *)v56 >> 24);
                    v152 = (v150 | (v153 << 24))
                         - ((v151 + 65537 + ((v151 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v151 + 1 + BYTE1(v151)) >> 8));
                    HIBYTE(v153) = HIBYTE(v152);
                  }
                  else
                  {
                    v154 = ((v149 ^ 0xFF) + ((v56[3] * v149 + ((v56[3] * v149) >> 8) + 1) >> 8))
                         * (*v32 | (*v28 << 16));
                    v153 = v154 + 65537 + ((v154 >> 8) & 0xFF00FF);
                    v152 = v153 >> 8;
                  }
                  *v32 = v152;
                  *v28 = HIBYTE(v153);
                }
              }
              ++v57;
              v56 += 4;
              v124 += v147;
              ++v32;
              ++v28;
              --v148;
            }
            while (v148);
            goto LABEL_193;
          }
          v286 = v4;
          v287 = v43;
          v100 = v348;
          do
          {
            v288 = *v57;
            if (*v57)
            {
              if (v43)
                v288 = ((unsigned __int16)(*v287 * (_WORD)v288 + ((*v287 * v288) >> 8) + 1) >> 8);
              if (v288)
              {
                if (v288 == 255)
                {
                  v289 = *v32
                       - (((~*(_DWORD *)v56 >> 24) * *v32
                         + (((~*(_DWORD *)v56 >> 24) * *v32) >> 8)
                         + 1) >> 8);
                }
                else
                {
                  v290 = v56[3] * v288 + ((v56[3] * v288) >> 8) + 1;
                  v289 = (((v288 ^ 0xFF) + (v290 >> 8)) * *v32
                        + ((((v288 ^ 0xFF) + (v290 >> 8)) * *v32) >> 8)
                        + 1) >> 8;
                }
                *v32 = v289;
              }
            }
            ++v57;
            v56 += 4;
            v287 += v147;
            ++v32;
            --v286;
          }
          while (v286);
          goto LABEL_466;
        case 8:
          v155 = v43 != 0;
          if (v349)
          {
            v156 = v4;
            v124 = v43;
            do
            {
              v157 = *v57;
              if (*v57)
              {
                if (v43)
                  v157 = ((unsigned __int16)(*v124 * (_WORD)v157
                                                            + ((*v124 * v157) >> 8)
                                                            + 1) >> 8);
                if (v157)
                {
                  if (v157 == 255)
                  {
                    v158 = *v32;
                    v161 = *v28;
                    v159 = (v158 | (v161 << 16)) * v56[3];
                    v160 = (v158 | (v161 << 24))
                         - ((v159 + 65537 + ((v159 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v159 + 1 + BYTE1(v159)) >> 8));
                    HIBYTE(v161) = HIBYTE(v160);
                  }
                  else
                  {
                    v162 = ((v157 ^ 0xFF)
                          + (((~*(_DWORD *)v56 >> 24) * v157
                            + (((~*(_DWORD *)v56 >> 24) * v157) >> 8)
                            + 1) >> 8))
                         * (*v32 | (*v28 << 16));
                    v161 = v162 + 65537 + ((v162 >> 8) & 0xFF00FF);
                    v160 = v161 >> 8;
                  }
                  *v32 = v160;
                  *v28 = HIBYTE(v161);
                }
              }
              ++v57;
              v56 += 4;
              v124 += v155;
              ++v32;
              ++v28;
              --v156;
            }
            while (v156);
LABEL_193:
            v43 = &v124[v340];
            goto LABEL_474;
          }
          v291 = v4;
          v287 = v43;
          v100 = v348;
          do
          {
            v292 = *v57;
            if (*v57)
            {
              if (v43)
                v292 = ((unsigned __int16)(*v287 * (_WORD)v292 + ((*v287 * v292) >> 8) + 1) >> 8);
              if (v292)
              {
                if (v292 == 255)
                {
                  v293 = *v32
                       - ((v56[3] * *v32 + ((v56[3] * *v32) >> 8) + 1) >> 8);
                }
                else
                {
                  v294 = (~*(_DWORD *)v56 >> 24) * v292
                       + (((~*(_DWORD *)v56 >> 24) * v292) >> 8)
                       + 1;
                  v293 = (((v292 ^ 0xFF) + (v294 >> 8)) * *v32
                        + ((((v292 ^ 0xFF) + (v294 >> 8)) * *v32) >> 8)
                        + 1) >> 8;
                }
                *v32 = v293;
              }
            }
            ++v57;
            v56 += 4;
            v287 += v155;
            ++v32;
            --v291;
          }
          while (v291);
LABEL_466:
          v43 = &v287[v340];
          goto LABEL_487;
        case 9:
          v135 = v43;
          v163 = v4;
          break;
        case 10:
          v135 = v43;
          v171 = v4;
          do
          {
            v172 = *v57;
            if (*v57)
            {
              if (!v43
                || (v172 = ((unsigned __int16)(*v135 * (_WORD)v172
                                                              + ((*v135 * v172) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v173 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v172 ^ 0xFF);
                v174 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v173 + 65537 + ((v173 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v173 + 1 + BYTE1(v173)) >> 8));
                v175 = (HIBYTE(v174) ^ 0xFF) * (*v32 | (*v28 << 16))
                     + (v174 | (HIBYTE(v174) << 16)) * (*v28 ^ 0xFF);
                v176 = v175 + 65537 + ((v175 >> 8) & 0xFF00FF);
                *v32 = BYTE1(v176);
                *v28 = HIBYTE(v176);
              }
            }
            ++v57;
            v56 += 4;
            v135 += v43 != 0;
            ++v32;
            v28 += v30;
            --v171;
          }
          while (v171);
          goto LABEL_473;
        case 11:
          v177 = v43 != 0;
          if (v349)
          {
            v135 = v43;
            v178 = v4;
            do
            {
              v179 = *v57;
              if (*v57)
              {
                if (!v43
                  || (v179 = ((unsigned __int16)(*v135 * (_WORD)v179
                                                                + ((*v135 * v179) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v180 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v179 ^ 0xFF);
                  v181 = (*(_DWORD *)v56 & 0xFF0000FF)
                       - ((v180 + 65537 + ((v180 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v180 + 1 + BYTE1(v180)) >> 8));
                  v182 = ((*v28 - *v32) | (*v28 << 16))
                       + (HIBYTE(v181) << 16)
                       + (HIBYTE(v181) - v181);
                  v183 = (255 * ((v182 >> 8) & 0x10001)) | v182;
                  *v32 = BYTE2(v183) - v183;
                  *v28 = BYTE2(v183);
                }
              }
              ++v57;
              v56 += 4;
              v135 += v177;
              ++v32;
              ++v28;
              --v178;
            }
            while (v178);
          }
          else
          {
            v135 = v43;
            v295 = v4;
            do
            {
              v296 = *v57;
              if (*v57)
              {
                if (!v43
                  || (v296 = ((unsigned __int16)(*v135 * (_WORD)v296
                                                                + ((*v135 * v296) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v297 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v296 ^ 0xFF);
                  v298 = (v297 + 65537 + ((v297 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v297 + 1 + BYTE1(v297)) >> 8);
                  v299 = (*v32 ^ 0xFF)
                       - (*v56 - v298)
                       + (((*(_DWORD *)v56 & 0xFF0000FF) - v298) >> 24);
                  v300 = BYTE1(v299) | (2 * BYTE1(v299)) | (4 * (BYTE1(v299) | (2 * BYTE1(v299))));
                  *v32 = ~((~*v32 - (*v56 - v298) + (((*(_DWORD *)v56 & 0xFF0000FF) - v298) >> 24)) | (16 * v300) | v300);
                }
              }
              ++v57;
              v56 += 4;
              v135 += v177;
              ++v32;
              --v295;
            }
            while (v295);
          }
          goto LABEL_473;
        case 12:
          v184 = v43 != 0;
          if (v349)
          {
            v135 = v43;
            v185 = v4;
            do
            {
              v186 = *v57;
              if (*v57)
              {
                if (!v43
                  || (v186 = ((unsigned __int16)(*v135 * (_WORD)v186
                                                                + ((*v135 * v186) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v187 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v186 ^ 0xFF);
                  v188 = (*(_DWORD *)v56 & 0xFF0000FF)
                       - ((v187 + 65537 + ((v187 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v187 + 1 + BYTE1(v187)) >> 8));
                  v189 = (*v32 | (*v28 << 16))
                       + v188
                       + (HIBYTE(v188) << 16);
                  v190 = (255 * ((v189 >> 8) & 0x10001)) | v189;
                  *v32 = v190;
                  *v28 = BYTE2(v190);
                }
              }
              ++v57;
              v56 += 4;
              v135 += v184;
              ++v32;
              ++v28;
              --v185;
            }
            while (v185);
            goto LABEL_473;
          }
          v302 = v43;
          v303 = v4;
          v100 = v348;
          do
          {
            v304 = *v57;
            if (*v57)
            {
              if (!v43
                || (v304 = ((unsigned __int16)(*v302 * (_WORD)v304
                                                              + ((*v302 * v304) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v305 = *v32
                     + (*(_DWORD *)v56
                                       - ((unsigned __int16)(*(_DWORD *)v56 * (v304 ^ 0xFF)
                                                           + ((*(_DWORD *)v56 * (v304 ^ 0xFFu)) >> 8)
                                                           + 1) >> 8));
                *v32 = -(v305 >> 8) | v305;
              }
            }
            ++v57;
            v56 += 4;
            v302 += v184;
            ++v32;
            --v303;
          }
          while (v303);
          v43 = &v302[v340];
LABEL_487:
          v32 += v342;
          v28 += v343;
          v101 = v347;
LABEL_524:
          v93 = v346;
          goto LABEL_477;
        case 13:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v191 = v4;
          do
          {
            v192 = *v57;
            if (*v57)
            {
              if (!v43
                || (v192 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v192
                                                              + ((*(unsigned __int8 *)v41 * v192) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v193 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v192 ^ 0xFF);
                v194 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v193 + 65537 + ((v193 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v193 + 1 + BYTE1(v193)) >> 8));
                v195 = HIBYTE(v194);
                if (HIBYTE(v194))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v194 = PDAmultiplyPDA_15922(*v32, *v28, (*v56 - ((unsigned __int16)(v193 + 1 + BYTE1(v193)) >> 8)), v195);
                      v195 = HIBYTE(v194);
                    }
                    *v32 = v194;
                    *v28 = v195;
                  }
                  else
                  {
                    *v32 = PDAmultiplyPDA_15922(*v32, 255, (*v56 - ((unsigned __int16)(v193 + 1 + BYTE1(v193)) >> 8)), v195);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v191;
          }
          while (v191);
          goto LABEL_404;
        case 14:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v196 = v4;
          do
          {
            v197 = *v57;
            if (*v57)
            {
              if (!v43
                || (v197 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v197
                                                              + ((*(unsigned __int8 *)v41 * v197) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v198 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v197 ^ 0xFF);
                v199 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v198 + 65537 + ((v198 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v198 + 1 + BYTE1(v198)) >> 8));
                v200 = HIBYTE(v199);
                if (HIBYTE(v199))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v199 = PDAscreenPDA_15923(*v32, *v28, (*v56 - ((unsigned __int16)(v198 + 1 + BYTE1(v198)) >> 8)), v200);
                      v200 = HIBYTE(v199);
                    }
                    *v32 = v199;
                    *v28 = v200;
                  }
                  else
                  {
                    *v32 = PDAscreenPDA_15923(*v32, 255, (*v56 - ((unsigned __int16)(v198 + 1 + BYTE1(v198)) >> 8)), v200);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v196;
          }
          while (v196);
          goto LABEL_404;
        case 15:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v201 = v4;
          do
          {
            v202 = *v57;
            if (*v57)
            {
              if (!v43
                || (v202 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v202
                                                              + ((*(unsigned __int8 *)v41 * v202) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v203 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v202 ^ 0xFF);
                v204 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v203 + 65537 + ((v203 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v203 + 1 + BYTE1(v203)) >> 8));
                v205 = HIBYTE(v204);
                if (HIBYTE(v204))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v204 = PDAoverlayPDA_15924(*v32, *v28, (*v56 - ((unsigned __int16)(v203 + 1 + BYTE1(v203)) >> 8)), v205);
                      v205 = HIBYTE(v204);
                    }
                    *v32 = v204;
                    *v28 = v205;
                  }
                  else
                  {
                    *v32 = PDAoverlayPDA_15924(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v203 + 1 + BYTE1(v203)) >> 8)), v205);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v201;
          }
          while (v201);
          goto LABEL_404;
        case 16:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v206 = v4;
          do
          {
            v207 = *v57;
            if (*v57)
            {
              if (!v43
                || (v207 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v207
                                                              + ((*(unsigned __int8 *)v41 * v207) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v208 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v207 ^ 0xFF);
                v209 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v208 + 65537 + ((v208 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v208 + 1 + BYTE1(v208)) >> 8));
                v210 = HIBYTE(v209);
                if (HIBYTE(v209))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v209 = PDAdarkenPDA_15926(*v32, *v28, (*v56 - ((unsigned __int16)(v208 + 1 + BYTE1(v208)) >> 8)), v210);
                      v210 = HIBYTE(v209);
                    }
                    *v32 = v209;
                    *v28 = v210;
                  }
                  else
                  {
                    *v32 = PDAdarkenPDA_15926(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v208 + 1 + BYTE1(v208)) >> 8)), v210);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v206;
          }
          while (v206);
          goto LABEL_404;
        case 17:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v211 = v4;
          do
          {
            v212 = *v57;
            if (*v57)
            {
              if (!v43
                || (v212 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v212
                                                              + ((*(unsigned __int8 *)v41 * v212) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v213 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v212 ^ 0xFF);
                v214 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v213 + 65537 + ((v213 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v213 + 1 + BYTE1(v213)) >> 8));
                v215 = HIBYTE(v214);
                if (HIBYTE(v214))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v214 = PDAlightenPDA_15925(*v32, *v28, (*v56 - ((unsigned __int16)(v213 + 1 + BYTE1(v213)) >> 8)), v215);
                      v215 = HIBYTE(v214);
                    }
                    *v32 = v214;
                    *v28 = v215;
                  }
                  else
                  {
                    *v32 = PDAlightenPDA_15925(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v213 + 1 + BYTE1(v213)) >> 8)), v215);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v211;
          }
          while (v211);
          goto LABEL_404;
        case 18:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v216 = v4;
          do
          {
            v217 = *v57;
            if (*v57)
            {
              if (!v43
                || (v217 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v217
                                                              + ((*(unsigned __int8 *)v41 * v217) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v218 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v217 ^ 0xFF);
                v219 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v218 + 65537 + ((v218 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v218 + 1 + BYTE1(v218)) >> 8));
                v220 = HIBYTE(v219);
                if (HIBYTE(v219))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v219 = PDAcolordodgePDA_15927(*v32, *v28, (*v56 - ((unsigned __int16)(v218 + 1 + BYTE1(v218)) >> 8)), v220);
                      v220 = HIBYTE(v219);
                    }
                    *v32 = v219;
                    *v28 = v220;
                  }
                  else
                  {
                    *v32 = PDAcolordodgePDA_15927(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v218 + 1 + BYTE1(v218)) >> 8)), v220);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v216;
          }
          while (v216);
          goto LABEL_404;
        case 19:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v221 = v4;
          do
          {
            v222 = *v57;
            if (*v57)
            {
              if (!v43
                || (v222 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v222
                                                              + ((*(unsigned __int8 *)v41 * v222) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v223 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v222 ^ 0xFF);
                v224 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v223 + 65537 + ((v223 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v223 + 1 + BYTE1(v223)) >> 8));
                v225 = HIBYTE(v224);
                if (HIBYTE(v224))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v224 = PDAcolorburnPDA_15928(*v32, *v28, (*v56 - ((unsigned __int16)(v223 + 1 + BYTE1(v223)) >> 8)), v225);
                      v225 = HIBYTE(v224);
                    }
                    *v32 = v224;
                    *v28 = v225;
                  }
                  else
                  {
                    *v32 = PDAcolorburnPDA_15928(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v223 + 1 + BYTE1(v223)) >> 8)), v225);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v221;
          }
          while (v221);
          goto LABEL_404;
        case 20:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v226 = v4;
          do
          {
            v227 = *v57;
            if (*v57)
            {
              if (!v43
                || (v227 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v227
                                                              + ((*(unsigned __int8 *)v41 * v227) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v228 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v227 ^ 0xFF);
                v229 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v228 + 65537 + ((v228 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v228 + 1 + BYTE1(v228)) >> 8));
                v230 = HIBYTE(v229);
                if (HIBYTE(v229))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v229 = PDAsoftlightPDA_15930(*v32, *v28, (*v56 - ((unsigned __int16)(v228 + 1 + BYTE1(v228)) >> 8)), v230);
                      v230 = HIBYTE(v229);
                    }
                    *v32 = v229;
                    *v28 = v230;
                  }
                  else
                  {
                    *v32 = PDAsoftlightPDA_15930(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v228 + 1 + BYTE1(v228)) >> 8)), v230);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v226;
          }
          while (v226);
          goto LABEL_404;
        case 21:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v231 = v4;
          do
          {
            v232 = *v57;
            if (*v57)
            {
              if (!v43
                || (v232 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v232
                                                              + ((*(unsigned __int8 *)v41 * v232) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v233 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v232 ^ 0xFF);
                v234 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v233 + 65537 + ((v233 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v233 + 1 + BYTE1(v233)) >> 8));
                v235 = HIBYTE(v234);
                if (HIBYTE(v234))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v234 = PDAhardlightPDA_15929(*v32, *v28, (*v56 - ((unsigned __int16)(v233 + 1 + BYTE1(v233)) >> 8)), v235);
                      v235 = HIBYTE(v234);
                    }
                    *v32 = v234;
                    *v28 = v235;
                  }
                  else
                  {
                    *v32 = PDAhardlightPDA_15929(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v233 + 1 + BYTE1(v233)) >> 8)), v235);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v231;
          }
          while (v231);
          goto LABEL_404;
        case 22:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v236 = v4;
          do
          {
            v237 = *v57;
            if (*v57)
            {
              if (!v43
                || (v237 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v237
                                                              + ((*(unsigned __int8 *)v41 * v237) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v238 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v237 ^ 0xFF);
                v239 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v238 + 65537 + ((v238 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v238 + 1 + BYTE1(v238)) >> 8));
                v240 = HIBYTE(v239);
                if (HIBYTE(v239))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v239 = PDAdifferencePDA_15931(*v32, *v28, (*v56 - ((unsigned __int16)(v238 + 1 + BYTE1(v238)) >> 8)), v240);
                      v240 = HIBYTE(v239);
                    }
                    *v32 = v239;
                    *v28 = v240;
                  }
                  else
                  {
                    *v32 = PDAdifferencePDA_15931(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v238 + 1 + BYTE1(v238)) >> 8)), v240);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v236;
          }
          while (v236);
          goto LABEL_404;
        case 23:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v241 = v4;
          do
          {
            v242 = *v57;
            if (*v57)
            {
              if (!v43
                || (v242 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v242
                                                              + ((*(unsigned __int8 *)v41 * v242) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v243 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v242 ^ 0xFF);
                v244 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v243 + 65537 + ((v243 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v243 + 1 + BYTE1(v243)) >> 8));
                v245 = HIBYTE(v244);
                if (HIBYTE(v244))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v244 = PDAexclusionPDA_15932(*v32, *v28, (*v56 - ((unsigned __int16)(v243 + 1 + BYTE1(v243)) >> 8)), v245);
                      v245 = HIBYTE(v244);
                    }
                    *v32 = v244;
                    *v28 = v245;
                  }
                  else
                  {
                    *v32 = PDAexclusionPDA_15932(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v243 + 1 + BYTE1(v243)) >> 8)), v245);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v241;
          }
          while (v241);
          goto LABEL_404;
        case 24:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v246 = v4;
          do
          {
            v247 = *v57;
            if (*v57)
            {
              if (!v43
                || (v247 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v247
                                                              + ((*(unsigned __int8 *)v41 * v247) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v248 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v247 ^ 0xFF);
                v249 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v248 + 65537 + ((v248 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v248 + 1 + BYTE1(v248)) >> 8));
                v250 = HIBYTE(v249);
                if (HIBYTE(v249))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v249 = PDAhuePDA_15933(*v32, *v28, (*v56 - ((unsigned __int16)(v248 + 1 + BYTE1(v248)) >> 8)), v250);
                      v250 = HIBYTE(v249);
                    }
                    *v32 = v249;
                    *v28 = v250;
                  }
                  else
                  {
                    *v32 = PDAhuePDA_15933(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v248 + 1 + BYTE1(v248)) >> 8)), v250);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v246;
          }
          while (v246);
          goto LABEL_404;
        case 25:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v251 = v4;
          do
          {
            v252 = *v57;
            if (*v57)
            {
              if (!v43
                || (v252 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v252
                                                              + ((*(unsigned __int8 *)v41 * v252) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v253 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v252 ^ 0xFF);
                v254 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v253 + 65537 + ((v253 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v253 + 1 + BYTE1(v253)) >> 8));
                v255 = HIBYTE(v254);
                if (HIBYTE(v254))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v254 = PDAhuePDA_15933(*v32, *v28, (*v56 - ((unsigned __int16)(v253 + 1 + BYTE1(v253)) >> 8)), v255);
                      v255 = HIBYTE(v254);
                    }
                    *v32 = v254;
                    *v28 = v255;
                  }
                  else
                  {
                    *v32 = PDAhuePDA_15933(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v253 + 1 + BYTE1(v253)) >> 8)), v255);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v251;
          }
          while (v251);
          goto LABEL_404;
        case 26:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v256 = v4;
          do
          {
            v257 = *v57;
            if (*v57)
            {
              if (!v43
                || (v257 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v257
                                                              + ((*(unsigned __int8 *)v41 * v257) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v258 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v257 ^ 0xFF);
                v259 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v258 + 65537 + ((v258 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v258 + 1 + BYTE1(v258)) >> 8));
                v260 = HIBYTE(v259);
                if (HIBYTE(v259))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v259 = PDAluminosityPDA_15935((*v56 - ((unsigned __int16)(v258 + 1 + BYTE1(v258)) >> 8)), v260, *v32, *v28);
                      v260 = HIBYTE(v259);
                    }
                    *v32 = v259;
                    *v28 = v260;
                  }
                  else
                  {
                    *v32 = PDAluminosityPDA_15935((*v56 - ((unsigned __int16)(v258 + 1 + BYTE1(v258)) >> 8)), v260, *v32, 0xFFu);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v256;
          }
          while (v256);
          goto LABEL_404;
        case 27:
          LODWORD(v341) = v41;
          v41 = (unint64_t)v43;
          v261 = v4;
          do
          {
            v262 = *v57;
            if (*v57)
            {
              if (!v43
                || (v262 = ((unsigned __int16)(*(unsigned __int8 *)v41 * (_WORD)v262
                                                              + ((*(unsigned __int8 *)v41 * v262) >> 8)
                                                              + 1) >> 8)) != 0)
              {
                v263 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * (v262 ^ 0xFF);
                v264 = (*(_DWORD *)v56 & 0xFF0000FF)
                     - ((v263 + 65537 + ((v263 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v263 + 1 + BYTE1(v263)) >> 8));
                v265 = HIBYTE(v264);
                if (HIBYTE(v264))
                {
                  if (v349)
                  {
                    if (*v28)
                    {
                      v264 = PDAluminosityPDA_15935(*v32, *v28, (*v56 - ((unsigned __int16)(v263 + 1 + BYTE1(v263)) >> 8)), v265);
                      v265 = HIBYTE(v264);
                    }
                    *v32 = v264;
                    *v28 = v265;
                  }
                  else
                  {
                    *v32 = PDAluminosityPDA_15935(*v32, 0xFFu, (*v56 - ((unsigned __int16)(v263 + 1 + BYTE1(v263)) >> 8)), v265);
                  }
                }
              }
            }
            ++v57;
            v56 += 4;
            v41 += v43 != 0;
            ++v32;
            v28 += v30;
            --v261;
          }
          while (v261);
LABEL_404:
          v43 = (unsigned __int8 *)(v41 + v340);
          v32 += v342;
          v28 += v343;
          v36 = v338;
          v37 = v337;
          v101 = v347;
          v100 = v348;
          v93 = v346;
          LODWORD(v41) = (_DWORD)v341;
          goto LABEL_477;
        default:
          goto LABEL_475;
      }
      break;
    }
    while (1)
    {
      v164 = *v57;
      if (*v57)
      {
        if (!v43)
          goto LABEL_199;
        v165 = *v135 * v164 + ((*v135 * v164) >> 8) + 1;
        if (BYTE1(v165))
          break;
      }
LABEL_200:
      ++v57;
      v56 += 4;
      v135 += v43 != 0;
      ++v32;
      v28 += v30;
      if (!--v163)
      {
LABEL_473:
        v43 = &v135[v340];
LABEL_474:
        v32 += v342;
        v28 += v343;
LABEL_475:
        v101 = v347;
        goto LABEL_476;
      }
    }
    v164 = v165 >> 8;
LABEL_199:
    v166 = ~(_BYTE)v164;
    v167 = (*(_DWORD *)v56 | (HIBYTE(*(_DWORD *)v56) << 16)) * ~(_BYTE)v164;
    v168 = (*(_DWORD *)v56 & 0xFF0000FF)
         - ((v167 + 65537 + ((v167 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v167 + 1 + BYTE1(v167)) >> 8));
    v169 = (v168 | (HIBYTE(v168) << 16)) * (*v28 ^ 0xFF)
         + (*v32 | (*v28 << 16)) * (v166 + HIBYTE(v168));
    v170 = v169 + 65537 + ((v169 >> 8) & 0xFF00FF);
    *v32 = BYTE1(v170);
    *v28 = HIBYTE(v170);
    goto LABEL_200;
  }
  v329 = v31;
  shape_enum_clip_alloc((uint64_t)v18, v19, v341, 1, 1, 1, v33, v34, v4, v346);
  if (!v44)
    goto LABEL_541;
  v40 = v44;
  v41 = 0;
  v45 = (int)((v14 * v5 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v14)
    v45 = 4 * v5;
  v46 = v335;
  v340 = -v335;
  v43 = (unsigned __int8 *)(v24 + v45 + 16);
  v37 = v337;
  v39 = v347;
LABEL_21:
  v347 = v343 + v46;
  while (1)
  {
    while (1)
    {
      v47 = (unsigned __int8 *)*((unsigned int *)v43 - 4);
      v48 = (_DWORD)v47 - v41;
      if ((int)v47 > (int)v41)
        break;
      if ((int)v41 < *((_DWORD *)v43 - 3) + (int)v47)
      {
        v29 = v335;
        v38 = v348;
        v31 = v329;
        v36 = v338;
        goto LABEL_31;
      }
      v49 = (unsigned __int8 *)v41;
      v50 = v40;
      v51 = shape_enum_clip_scan((uint64_t)v40, (_DWORD *)v43 - 4);
      v40 = v50;
      v41 = (unint64_t)v49;
      if (!v51)
        goto LABEL_539;
    }
    v346 -= v48;
    if (v346 < 1)
      break;
    v52 = *(_QWORD *)(v37 + 136);
    v348 += *(_QWORD *)(v37 + 128) * v48;
    v39 += v52 * v48;
    v32 += (int)v331 * (uint64_t)v48;
    v53 = v347 * v48;
    if (!v349)
      v53 = 0;
    v28 += v53;
    v41 = (unint64_t)v47;
  }
  if (!v40)
    goto LABEL_541;
LABEL_540:
  free(v40);
LABEL_541:
  if (v330)
    free(v330);
}

uint64_t PDAmultiplyPDA_15922(int a1, int a2, int a3, int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = (a2 ^ 0xFF) * a3 + ((a4 ^ 0xFF) + a3) * a1;
  v5 = 255 * (a4 + a2) - a4 * a2;
  v6 = v4 + 128;
  if (v4 >> 7 >= 0x1FD)
    v6 = 65152;
  v7 = (v6 + (v6 >> 8)) >> 8;
  if (v5 >= 65152)
    v8 = 65152;
  else
    v8 = v5 + 128;
  return (v7 | ((v8 + (v8 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAscreenPDA_15923(int a1, int a2, int a3, int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = (a1 ^ 0xFF) * a3 - a1 + (a1 << 8);
  v5 = 255 * (a4 + a2) - a4 * a2;
  v6 = v4 + 128;
  if (v4 >> 7 >= 0x1FD)
    v6 = 65152;
  v7 = v6 + (v6 >> 8);
  if (v5 >= 65152)
    v8 = 65152;
  else
    v8 = v5 + 128;
  return (((v8 + (v8 >> 8)) << 16) | (v7 >> 8)) & 0xFF0000FF;
}

uint64_t PDAoverlayPDA_15924(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = 2 * v5 * v4;
  v7 = (a4 + 255) * v5 + (a2 + 255) * v4 - (a4 * a2 + v6);
  v8 = (a2 ^ 0xFF) * v4 + (a4 ^ 0xFF) * v5 + v6;
  if (v5 >= (a2 + 1) >> 1)
    v8 = v7;
  v9 = 255 * (a4 + a2) - a4 * a2;
  if (v8 >= 65152)
    v10 = 65152;
  else
    v10 = v8 + 128;
  v11 = (v10 + (v10 >> 8)) >> 8;
  if (v9 >= 65152)
    v12 = 65152;
  else
    v12 = v9 + 128;
  return (v11 | ((v12 + (v12 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAlightenPDA_15925(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = a4 * v5;
  if (v4 * a2 > a4 * v5)
    v6 = v4 * a2;
  v7 = (a4 ^ 0xFF) * v5 + (a2 ^ 0xFF) * v4 + v6;
  v8 = 255 * (a4 + a2) - a4 * a2;
  v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD)
    v9 = 65152;
  v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152)
    v11 = 65152;
  else
    v11 = v8 + 128;
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAdarkenPDA_15926(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = a4 * v5;
  if (v4 * a2 < a4 * v5)
    v6 = v4 * a2;
  v7 = (a4 ^ 0xFF) * v5 + (a2 ^ 0xFF) * v4 + v6;
  v8 = 255 * (a4 + a2) - a4 * a2;
  v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD)
    v9 = 65152;
  v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152)
    v11 = 65152;
  else
    v11 = v8 + 128;
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAcolordodgePDA_15927(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a1 >= a2)
    v4 = a2;
  else
    v4 = a1;
  if (a3 >= a4)
    v5 = a4;
  else
    v5 = a3;
  if (v4)
  {
    if (a3 >= a4)
      v6 = 65025;
    else
      v6 = (int)(a4 * v4 * a4) / (int)(a4 - v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (a4 ^ 0xFF) * v4 + (a2 ^ 0xFF) * v5 + v6;
  v8 = 255 * (a4 + a2) - a4 * a2;
  if (v7 >= v8)
    v7 = 255 * (a4 + a2) - a4 * a2;
  if (v7 >= 65152)
    v9 = 65152;
  else
    v9 = v7 + 128;
  v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152)
    v11 = 65152;
  else
    v11 = v8 + 128;
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAcolorburnPDA_15928(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = a4 * a2;
  if (a3 >= a4)
    v5 = a4;
  else
    v5 = a3;
  if (a1 >= a2)
    v6 = a2;
  else
    v6 = a1;
  v7 = v4 + (a4 ^ 0xFF) * v6 + (a2 ^ 0xFF) * v5;
  if (a2 <= a1)
    goto LABEL_10;
  if (v5)
  {
    v7 = (v7 - (int)(a4 * a4 * (a2 - v6)) / v5) & ~((int)(v7 - (int)(a4 * a4 * (a2 - v6)) / v5) >> 31);
LABEL_10:
    v8 = 255 * (a4 + a2) - v4;
    if (v7 >> 7 > 0x1FC)
      v9 = 65152;
    else
      v9 = v7 + 128;
    goto LABEL_14;
  }
  v8 = 255 * (a4 + a2) - v4;
  v9 = 128;
LABEL_14:
  if (v8 >= 65152)
    v10 = 65152;
  else
    v10 = v8 + 128;
  return ((v9 + (v9 >> 8)) >> 8) & 0xFFFFFF | (((unsigned __int16)(v10 + (v10 >> 8)) >> 8) << 24);
}

uint64_t PDAhardlightPDA_15929(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = 2 * v5 * v4;
  v7 = (a2 ^ 0xFF) * v4 + (a4 ^ 0xFF) * v5 + v6;
  v8 = (a4 + 255) * v5 + (a2 + 255) * v4 - (a4 * a2 + v6);
  if (v4 > (a4 + 1) >> 1)
    v9 = v8;
  else
    v9 = v7;
  v10 = 255 * (a4 + a2) - a4 * a2;
  if (v9 >= 65152)
    v11 = 65152;
  else
    v11 = v9 + 128;
  v12 = (v11 + (v11 >> 8)) >> 8;
  if (v10 >= 65152)
    v13 = 65152;
  else
    v13 = v10 + 128;
  return (v12 | ((v13 + (v13 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAsoftlightPDA_15930(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a1 >= a2)
    v4 = a2;
  else
    v4 = a1;
  if (a3 >= a4)
    v5 = a4;
  else
    v5 = a3;
  v6 = 2 * v4 * v5 - (int)(v4 * v4 * (2 * v5 - a4)) / (int)a2;
  v7 = (a4 ^ 0xFF) * v4 + (a2 ^ 0xFF) * v5 + (v6 & ~(v6 >> 31));
  v8 = 255 * (a4 + a2) - a4 * a2;
  v9 = v7 + 128;
  if (v7 >> 7 >= 0x1FD)
    v9 = 65152;
  v10 = (v9 + (v9 >> 8)) >> 8;
  if (v8 >= 65152)
    v11 = 65152;
  else
    v11 = v8 + 128;
  return (v10 | ((v11 + (v11 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAdifferencePDA_15931(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = v4 + v5;
  v7 = a4 * v5;
  v8 = v4 * a2;
  v10 = v7 - v8;
  v9 = v7 - v8 < 0;
  v11 = 255 * v6 - v8 - v7;
  if (v9)
    v12 = -v10;
  else
    v12 = v10;
  v13 = v11 + v12;
  v14 = 255 * (a4 + a2) - a4 * a2;
  if (v13 >= 65152)
    v15 = 65152;
  else
    v15 = v13 + 128;
  v16 = (v15 + (v15 >> 8)) >> 8;
  if (v14 >= 65152)
    v17 = 65152;
  else
    v17 = v14 + 128;
  return (v16 | ((v17 + (v17 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAexclusionPDA_15932(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = 255 * (v4 + v5) - 2 * v5 * v4;
  v7 = 255 * (a4 + a2) - a4 * a2;
  if (v6 >= 65152)
    v8 = 65152;
  else
    v8 = v6 + 128;
  v9 = (v8 + (v8 >> 8)) >> 8;
  if (v7 >= 65152)
    v10 = 65152;
  else
    v10 = v7 + 128;
  return (v9 | ((v10 + (v10 >> 8)) << 16)) & 0xFF0000FF;
}

uint64_t PDAhuePDA_15933(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 >= a2)
    v4 = a2;
  else
    v4 = a1;
  v5 = (a4 ^ 0xFF) * v4;
  if (a4 == 255)
    v5 = 0;
  else
    LOBYTE(v4) = (unsigned __int16)(a4 * v4 + 128 + ((a4 * v4 + 128) >> 8)) >> 8;
  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  v7 = v5 + (a2 ^ 0xFF) * v6;
  if (v7 >> 7 >= 0x1FD)
    v8 = 65152;
  else
    v8 = v7 + 128;
  return (v4 + ((unsigned __int16)(v8 + (v8 >> 8)) >> 8)) | ((a4
                                                                             + a2
                                                                             - ((a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8)) << 24);
}

uint64_t PDAluminosityPDA_15935(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (a3 >= a4)
    v4 = a4;
  else
    v4 = a3;
  if (a1 >= a2)
    v5 = a2;
  else
    v5 = a1;
  v6 = (a4 ^ 0xFF) * v5;
  if (a4 == 255)
    v6 = 0;
  if (a2 != 255)
  {
    v6 += (a2 ^ 0xFF) * v4;
    LOBYTE(v4) = (unsigned __int16)(v4 * a2 + 128 + ((v4 * a2 + 128) >> 8)) >> 8;
  }
  if (v6 >> 7 >= 0x1FD)
    v7 = 65152;
  else
    v7 = v6 + 128;
  return (v4 + ((unsigned __int16)(v7 + (v7 >> 8)) >> 8)) | ((a4
                                                                             + a2
                                                                             - ((a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8)) << 24);
}

uint64_t W8_image_mark_W8(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v7)
    v95 = *((_QWORD *)a2 + 5) - a5;
  else
    v95 = 0;
  v8 = *((unsigned __int8 *)a2 + 8);
  v94 = *a2;
  v93 = *((_QWORD *)a2 + 3) - a5;
  v9 = v7 != 0;
  v11 = *((_QWORD *)a2 + 17);
  v10 = *((_QWORD *)a2 + 18);
  v12 = *((_QWORD *)a2 + 9);
  v92 = *((_QWORD *)a2 + 11);
  v13 = *((_QWORD *)a2 + 7) + v92 * a4;
  v14 = *(unsigned __int8 **)(result + 32);
  v15 = &v14[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  if (*(_QWORD *)(result + 176))
  {
    v88 = *((_QWORD *)a2 + 15);
    v89 = *((_QWORD *)a2 + 13);
    v86 = v12 - 4;
    v87 = ~(-1 << v12);
    v16 = v15 - 4;
    v17 = v8 ^ 0xFF;
    v85 = a5;
    v84 = v10 + 16 * a3 + 8;
    v90 = *((_QWORD *)a2 + 9);
    v91 = a5;
    do
    {
      if (((v88 - v13) | (v13 - v89)) < 0)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v18 = ((v13 & (unint64_t)v87) >> v86) & 0xF;
        if ((unint64_t)(v18 - 7) >= 9)
          v19 = -v11;
        else
          v19 = v11;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = *(_QWORD *)(result + 32) + (v13 >> v12) * v11;
      if (v94 == 1)
      {
        if (a5 >= 1)
        {
          v22 = (uint64_t *)v84;
          v23 = v85;
          do
          {
            v25 = *(v22 - 1);
            v24 = *v22;
            v26 = v21 + v25;
            if ((unint64_t)v16 >= v21 + v25)
              v27 = (unsigned __int8 *)(v21 + v25);
            else
              v27 = v16;
            if (v27 < v14)
              v27 = v14;
            v28 = *v27;
            if ((v24 & 0xF) != 0)
            {
              v29 = (unsigned __int8 *)(v26 + (v24 >> 4));
              if (v16 < v29)
                v29 = v16;
              if (v29 < v14)
                v29 = v14;
              v30 = *v29;
              if (v20)
              {
                v31 = (unsigned __int8 *)(v26 + v19);
                if (v16 >= v31)
                  v32 = v31;
                else
                  v32 = v16;
                if (v32 < v14)
                  v32 = v14;
                v33 = *v32;
                v34 = &v31[v24 >> 4];
                if (v16 < v34)
                  v34 = v16;
                if (v34 < v14)
                  v34 = v14;
                v35 = BLEND8_19499[v20];
                v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                v30 = v30 - ((v35 & v30) >> v20) + ((v35 & *v34) >> v20);
              }
              v28 = v28
                  - ((BLEND8_19499[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_19499[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              v36 = (unsigned __int8 *)(v26 + v19);
              if ((unint64_t)v16 < v26 + v19)
                v36 = v16;
              if (v36 < v14)
                v36 = v14;
              v28 = v28 - ((BLEND8_19499[v20] & v28) >> v20) + ((BLEND8_19499[v20] & *v36) >> v20);
            }
            v37 = v28 | 0xFF000000;
            v38 = (v28 | 0xFF0000) * v17
                + 65537
                + ((((v28 | 0xFF0000u) * v17) >> 8) & 0xFF00FF);
            v39 = (v28 | 0xFF000000) - (v38 & 0xFF000000 | BYTE1(v38));
            if (v8 != 255)
              v37 = v39;
            *v6 = v37;
            if (v7)
              *v7 = HIBYTE(v37);
            v22 += 2;
            ++v6;
            v7 += v9;
            --v23;
          }
          while (v23);
        }
      }
      else if (a5 >= 1)
      {
        v41 = (uint64_t *)v84;
        v40 = v85;
        do
        {
          v43 = *(v41 - 1);
          v42 = *v41;
          v44 = v21 + v43;
          if ((unint64_t)v16 >= v21 + v43)
            v45 = (unsigned __int8 *)(v21 + v43);
          else
            v45 = v16;
          if (v45 < v14)
            v45 = v14;
          v46 = *v45;
          if ((v42 & 0xF) != 0)
          {
            v47 = (unsigned __int8 *)(v44 + (v42 >> 4));
            if (v16 < v47)
              v47 = v16;
            if (v47 < v14)
              v47 = v14;
            v48 = *v47;
            if (v20)
            {
              v49 = (unsigned __int8 *)(v44 + v19);
              if (v16 >= v49)
                v50 = v49;
              else
                v50 = v16;
              if (v50 < v14)
                v50 = v14;
              v51 = *v50;
              v52 = &v49[v42 >> 4];
              if (v16 < v52)
                v52 = v16;
              if (v52 < v14)
                v52 = v14;
              v53 = BLEND8_19499[v20];
              v46 = v46 - ((v53 & v46) >> v20) + ((v53 & v51) >> v20);
              v48 = v48 - ((v53 & v48) >> v20) + ((v53 & *v52) >> v20);
            }
            v46 = v46
                - ((BLEND8_19499[*v41 & 0xF] & v46) >> (*v41 & 0xF))
                + ((BLEND8_19499[*v41 & 0xF] & v48) >> (*v41 & 0xF));
          }
          else if (v20)
          {
            v54 = (unsigned __int8 *)(v44 + v19);
            if ((unint64_t)v16 < v44 + v19)
              v54 = v16;
            if (v54 < v14)
              v54 = v14;
            v46 = v46 - ((BLEND8_19499[v20] & v46) >> v20) + ((BLEND8_19499[v20] & *v54) >> v20);
          }
          v55 = v46 | 0xFF000000;
          v56 = (v46 | 0xFF0000) * v17
              + 65537
              + ((((v46 | 0xFF0000u) * v17) >> 8) & 0xFF00FF);
          v57 = (v46 | 0xFF000000) - (v56 & 0xFF000000 | BYTE1(v56));
          if (v8 != 255)
            v55 = v57;
          v58 = HIBYTE(v55);
          if (v7)
          {
            if (v58)
            {
              if (v58 == 255)
              {
                *v6 = v55;
                *v7 = -1;
              }
              else
              {
                v59 = (*v6 | (*v7 << 16)) * (v58 ^ 0xFF);
                v60 = ((v59 + 65537 + ((v59 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v59 + 1 + BYTE1(v59)) >> 8))
                    + (v55 & 0xFF0000FF);
                *v6 = v60;
                *v7 = HIBYTE(v60);
              }
            }
          }
          else if (v58)
          {
            if (v58 != 255)
              v55 += ((v58 ^ 0xFF) * *v6 + (((v58 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
            *v6 = v55;
          }
          v41 += 2;
          ++v6;
          v7 += v9;
          --v40;
        }
        while (v40);
      }
      v6 += v93;
      v7 += v95;
      a5 = v91;
      v13 += v92;
      --a6;
      LOBYTE(v12) = v90;
    }
    while (a6);
  }
  else
  {
    v61 = v15 - 4;
    v62 = v8 ^ 0xFF;
    v63 = (uint64_t *)(v10 + 16 * a3);
    do
    {
      v64 = *(_QWORD *)(result + 32) + (v13 >> v12) * v11;
      if (v94 == 1)
      {
        if (a5 >= 1)
        {
          v65 = v63;
          v66 = a5;
          do
          {
            v67 = *v65;
            v65 += 2;
            v68 = (unsigned __int8 *)(v64 + v67);
            if ((unint64_t)v61 < v64 + v67)
              v68 = v61;
            if ((unint64_t)v68 < *(_QWORD *)(result + 32))
              v68 = *(unsigned __int8 **)(result + 32);
            v69 = *v68;
            v70 = v69 | 0xFF000000;
            v71 = (v69 | 0xFF0000) * v62 + 65537 + ((((v69 | 0xFF0000u) * v62) >> 8) & 0xFF00FF);
            v72 = v70 - (v71 & 0xFF000000 | BYTE1(v71));
            if (v8 == 255)
              v72 = v70;
            *v6 = v72;
            if (v7)
              *v7 = HIBYTE(v72);
            ++v6;
            v7 += v9;
            --v66;
          }
          while (v66);
        }
      }
      else
      {
        v73 = v63;
        v74 = a5;
        if (a5 >= 1)
        {
          do
          {
            v75 = *v73;
            v73 += 2;
            v76 = (unsigned __int8 *)(v64 + v75);
            if ((unint64_t)v61 < v64 + v75)
              v76 = v61;
            if ((unint64_t)v76 < *(_QWORD *)(result + 32))
              v76 = *(unsigned __int8 **)(result + 32);
            v77 = *v76;
            v78 = v77 | 0xFF000000;
            v79 = (v77 | 0xFF0000) * v62 + 65537 + ((((v77 | 0xFF0000u) * v62) >> 8) & 0xFF00FF);
            v80 = v78 - (v79 & 0xFF000000 | BYTE1(v79));
            if (v8 == 255)
              v80 = v78;
            v81 = HIBYTE(v80);
            if (v7)
            {
              if (v81)
              {
                if (v81 == 255)
                {
                  *v6 = v80;
                  *v7 = -1;
                }
                else
                {
                  v82 = (*v6 | (*v7 << 16)) * (v81 ^ 0xFF);
                  v83 = ((v82 + 65537 + ((v82 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v82 + 1 + BYTE1(v82)) >> 8))
                      + (v80 & 0xFF0000FF);
                  *v6 = v83;
                  *v7 = HIBYTE(v83);
                }
              }
            }
            else if (v81)
            {
              if (v81 != 255)
                v80 += ((v81 ^ 0xFF) * *v6 + (((v81 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
              *v6 = v80;
            }
            ++v6;
            v7 += v9;
            --v74;
          }
          while (v74);
        }
      }
      v6 += v93;
      v7 += v95;
      v13 += v92;
      --a6;
    }
    while (a6);
  }
  return result;
}

void W8_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(_QWORD, _QWORD))
{
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  int v49;
  int v50;
  int *v51;
  int v52;
  void *v53;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD);
  char *v65;
  uint64_t *v66;
  _DWORD v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  int v78;
  _QWORD v79[3];

  v79[1] = *MEMORY[0x1E0C80C00];
  v8.n128_u32[1] = 0;
  v8.n128_u64[1] = 0;
  v68 = 0u;
  v69 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v70 = 0u;
  v67[0] = a3;
  v67[1] = a4;
  v8.n128_f32[0] = (float)(*(float *)(a2 + 184) * 255.0) + 0.5;
  LOBYTE(v68) = (int)v8.n128_f32[0];
  v9 = *(int *)(a1 + 28);
  *(_QWORD *)&v69 = v9;
  if (*(_QWORD *)(a1 + 48))
    v10 = *(int *)(a1 + 32);
  else
    v10 = 0;
  *(_QWORD *)&v70 = v10;
  v11 = *(_QWORD *)(a2 + 120);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = HIBYTE(v12);
  v14 = BYTE2(v12);
  if (v11)
  {
    v15 = *(int *)(a2 + 24);
    v16 = (uint64_t *)(a2 + 104);
    v17 = (uint64_t *)(a2 + 72);
    v18 = (uint64_t *)(a2 + 88);
    v19 = v13;
  }
  else
  {
    v15 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v16 = (uint64_t *)(a2 + 96);
    v17 = (uint64_t *)(a2 + 64);
    v18 = (uint64_t *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 112);
    v19 = v14;
  }
  v20 = *v18;
  v21 = *v17;
  v22 = *v16;
  v23 = v19;
  *((_QWORD *)&v71 + 1) = v19;
  *((_QWORD *)&v70 + 1) = v22;
  *((_QWORD *)&v75 + 1) = v15;
  *((_QWORD *)&v74 + 1) = v20;
  *((_QWORD *)&v73 + 1) = v21;
  *((_QWORD *)&v72 + 1) = v11;
  v24 = *(_QWORD *)(a2 + 128);
  if (v24)
  {
    v25 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v26 = (uint64_t *)(a2 + 96);
    v27 = (uint64_t *)(a2 + 64);
    v28 = (uint64_t *)(a2 + 80);
    v13 = v14;
  }
  else
  {
    v25 = *(int *)(a2 + 24);
    v26 = (uint64_t *)(a2 + 104);
    v27 = (uint64_t *)(a2 + 72);
    v28 = (uint64_t *)(a2 + 88);
    v24 = *(_QWORD *)(a2 + 136);
  }
  v66 = &v62;
  v29 = *v28;
  v30 = *v27;
  v31 = *v26;
  *(_QWORD *)&v72 = v13;
  *(_QWORD *)&v71 = v31;
  *(_QWORD *)&v76 = v25;
  *(_QWORD *)&v75 = v29;
  *(_QWORD *)&v74 = v30;
  *(_QWORD *)&v73 = v24;
  v32 = *(int *)(a1 + 4);
  MEMORY[0x1E0C80A78](a1, v8);
  v65 = (char *)&v62 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL)
    v37 = (char *)&v62 - v34 - 15;
  else
    v37 = 0;
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    v63 = v33;
    v64 = a5;
    v38 = v36;
    v37 = (char *)malloc_type_malloc(16 * v32, 0x1B1F656EuLL);
    v33 = v63;
    v36 = v38;
    a5 = v64;
  }
  *((_QWORD *)&v76 + 1) = v37;
  if (v37)
  {
    v39 = v32;
    if (*(_QWORD *)(a2 + 176))
    {
      if ((int)v32 >= 1)
      {
        v40 = (uint64_t *)(v37 + 8);
        v41 = -v33;
        v42 = v36 - v22;
        do
        {
          if (((v41 + v22) | v42) < 0)
          {
            v45 = 0;
            v46 = 0;
          }
          else
          {
            v43 = ((v22 & (unint64_t)~(-1 << v23)) >> (v23 - 4)) & 0xF;
            v44 = weights_19497[v43];
            if (v43 - 7 >= 9)
              v45 = -(uint64_t)v15;
            else
              v45 = v15;
            v46 = v44 & 0xF;
          }
          v33 = v15 * (v22 >> v23);
          *(v40 - 1) = v33;
          *v40 = v46 | (16 * v45);
          v40 += 2;
          v22 += v11;
          v42 -= v11;
          --v39;
        }
        while (v39);
      }
    }
    else if ((int)v32 >= 1)
    {
      v47 = v37 + 8;
      do
      {
        *(v47 - 1) = v15 * (v22 >> v23);
        *v47 = 0;
        v47 += 2;
        v22 += v11;
        --v39;
      }
      while (v39);
    }
    v48 = v37;
    v49 = *(_DWORD *)(a1 + 4);
    v50 = *(_DWORD *)(a1 + 8);
    v77 = v50;
    v78 = v49;
    v51 = *(int **)(a1 + 136);
    if (v51)
    {
      v52 = *(_DWORD *)(a1 + 104);
      LODWORD(v79[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v79[0]) = v52;
      shape_enum_clip_alloc((uint64_t)v37, v33, v51, 1, 1, 1, v52, v79[0], v49, v50);
      v54 = v53;
      if (v53)
        goto LABEL_36;
    }
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v79[0] = 0;
    while (1)
    {
      v57 = *(int *)(a1 + 16) + (uint64_t)v56;
      v58 = *(_QWORD *)(a1 + 48);
      v59 = *(int *)(a1 + 12) + (uint64_t)v55;
      v60 = *(_QWORD *)(a1 + 40) + v9 * v57 + v59;
      v61 = v58 + v10 * v57 + v59;
      if (!v58)
        v61 = 0;
      *((_QWORD *)&v68 + 1) = v60;
      *((_QWORD *)&v69 + 1) = v61;
      a5(a2, v67);
      if (!v54)
        break;
LABEL_36:
      if (!shape_enum_clip_next((uint64_t)v54, (int *)v79 + 1, v79, &v78, &v77))
      {
        free(v54);
        break;
      }
      v56 = v79[0];
      v55 = HIDWORD(v79[0]);
      v9 = v69;
      v10 = v70;
    }
    if (v48 != v65)
      free(v48);
  }
}

uint64_t W8_image_mark_RGB24(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  char v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;

  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v7)
    v108 = *((_QWORD *)a2 + 5) - a5;
  else
    v108 = 0;
  v8 = *((unsigned __int8 *)a2 + 8);
  v107 = *a2;
  v106 = *((_QWORD *)a2 + 3) - a5;
  v9 = v7 != 0;
  v10 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v12 = *((_QWORD *)a2 + 9);
  v105 = *((_QWORD *)a2 + 11);
  v13 = *((_QWORD *)a2 + 7) + v105 * a4;
  v14 = *(unsigned __int8 **)(result + 32);
  v15 = &v14[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  if (*(_QWORD *)(result + 176))
  {
    v101 = *((_QWORD *)a2 + 13);
    v99 = ~(-1 << v12);
    v100 = *((_QWORD *)a2 + 15);
    v98 = v12 - 4;
    v16 = v15 - 3;
    v17 = v8 ^ 0xFF;
    v96 = a5;
    v97 = -v10;
    v95 = v11 + 16 * a3 + 8;
    v103 = *((_QWORD *)a2 + 17);
    v104 = a5;
    v102 = *((_QWORD *)a2 + 9);
    while (1)
    {
      if (((v100 - v13) | (v13 - v101)) < 0)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v18 = ((v13 & (unint64_t)v99) >> v98) & 0xF;
        v19 = (unint64_t)(v18 - 7) >= 9 ? v97 : v10;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = *(_QWORD *)(result + 32) + (v13 >> v12) * v10;
      if (v107 != 1)
        break;
      if (a5 >= 1)
      {
        v22 = (uint64_t *)v95;
        v23 = v96;
        while (1)
        {
          v25 = *(v22 - 1);
          v24 = *v22;
          v26 = v21 + v25;
          if ((unint64_t)v16 >= v21 + v25)
            v27 = (unsigned __int8 *)(v21 + v25);
          else
            v27 = v16;
          if (v27 < v14)
            v27 = v14;
          v28 = (*v27 << 24) | (v27[1] << 16) | (v27[2] << 8);
          v29 = v24 & 0xF;
          if ((v24 & 0xF) != 0)
            break;
          if (v20)
          {
            v39 = (unsigned __int8 *)(v26 + v19);
            if ((unint64_t)v16 < v26 + v19)
              v39 = v16;
            if (v39 < v14)
              v39 = v14;
            v40 = BLEND8_19499[v20];
            v37 = v28 - ((v40 & v28) >> v20);
            v38 = (((*v39 << 24) | (v39[1] << 16) | (v39[2] << 8)) & v40) >> v20;
            goto LABEL_43;
          }
LABEL_44:
          v41 = (((v28 >> 23) & 0x1FE) + BYTE1(v28) + (((v28 >> 8) & 0xFF00) >> 6) + (((v28 >> 8) & 0xFF00) >> 8)) >> 3;
          v42 = v41 | 0xFF000000;
          v43 = (v41 | 0xFF0000) * v17 + 65537 + ((((v41 | 0xFF0000) * v17) >> 8) & 0xFF00FF);
          v44 = v42 - (v43 & 0xFF000000 | BYTE1(v43));
          if (v8 == 255)
            v44 = v42;
          *v6 = v44;
          if (v7)
            *v7 = HIBYTE(v44);
          v22 += 2;
          ++v6;
          v7 += v9;
          if (!--v23)
            goto LABEL_93;
        }
        v30 = (unsigned __int8 *)(v26 + (v24 >> 4));
        if (v16 < v30)
          v30 = v16;
        if (v30 < v14)
          v30 = v14;
        v31 = (*v30 << 24) | (v30[1] << 16) | (v30[2] << 8);
        if (v20)
        {
          v32 = (unsigned __int8 *)(v26 + v19);
          if (v16 >= v32)
            v33 = v32;
          else
            v33 = v16;
          if (v33 < v14)
            v33 = v14;
          v34 = &v32[v24 >> 4];
          if (v16 < v34)
            v34 = v16;
          if (v34 < v14)
            v34 = v14;
          v35 = BLEND8_19499[v20];
          v28 = v28 - ((v35 & v28) >> v20) + ((v35 & ((*v33 << 24) | (v33[1] << 16) | (v33[2] << 8))) >> v20);
          v31 = v31 - ((v35 & v31) >> v20) + ((((*v34 << 24) | (v34[1] << 16) | (v34[2] << 8)) & v35) >> v20);
        }
        v36 = BLEND8_19499[*v22 & 0xF];
        v37 = v28 - ((v36 & v28) >> v29);
        v38 = (v36 & v31) >> v29;
LABEL_43:
        v28 = v37 + v38;
        goto LABEL_44;
      }
LABEL_93:
      v6 += v106;
      v7 += v108;
      a5 = v104;
      v13 += v105;
      --a6;
      LOBYTE(v12) = v102;
      v10 = v103;
      if (!a6)
        return result;
    }
    if (a5 < 1)
      goto LABEL_93;
    v46 = (uint64_t *)v95;
    v45 = v96;
    while (1)
    {
      v48 = *(v46 - 1);
      v47 = *v46;
      v49 = v21 + v48;
      if ((unint64_t)v16 >= v21 + v48)
        v50 = (unsigned __int8 *)(v21 + v48);
      else
        v50 = v16;
      if (v50 < v14)
        v50 = v14;
      v51 = (*v50 << 24) | (v50[1] << 16) | (v50[2] << 8);
      v52 = v47 & 0xF;
      if ((v47 & 0xF) != 0)
        break;
      if (v20)
      {
        v63 = (unsigned __int8 *)(v49 + v19);
        if ((unint64_t)v16 < v49 + v19)
          v63 = v16;
        if (v63 < v14)
          v63 = v14;
        v64 = BLEND8_19499[v20];
        v61 = v51 - ((v64 & v51) >> v20);
        v62 = (((*v63 << 24) | (v63[1] << 16) | (v63[2] << 8)) & v64) >> v20;
        goto LABEL_80;
      }
LABEL_81:
      v65 = (((v51 >> 23) & 0x1FE) + BYTE1(v51) + (((v51 >> 8) & 0xFF00) >> 6) + (((v51 >> 8) & 0xFF00) >> 8)) >> 3;
      v66 = v65 | 0xFF000000;
      v67 = (v65 | 0xFF0000) * v17 + 65537 + ((((v65 | 0xFF0000) * v17) >> 8) & 0xFF00FF);
      v68 = v66 - (v67 & 0xFF000000 | BYTE1(v67));
      if (v8 == 255)
        v68 = v66;
      v69 = HIBYTE(v68);
      if (v7)
      {
        if (v69)
        {
          if (v69 == 255)
          {
            *v6 = v68;
            *v7 = -1;
          }
          else
          {
            v70 = (*v6 | (*v7 << 16)) * (v69 ^ 0xFF);
            v71 = ((v70 + 65537 + ((v70 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v70 + 1 + BYTE1(v70)) >> 8))
                + (v68 & 0xFF0000FF);
            *v6 = v71;
            *v7 = HIBYTE(v71);
          }
        }
      }
      else if (v69)
      {
        if (v69 != 255)
          v68 += ((v69 ^ 0xFF) * *v6 + (((v69 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
        *v6 = v68;
      }
      v46 += 2;
      ++v6;
      v7 += v9;
      if (!--v45)
        goto LABEL_93;
    }
    v53 = (unsigned __int8 *)(v49 + (v47 >> 4));
    if (v16 < v53)
      v53 = v16;
    if (v53 < v14)
      v53 = v14;
    v54 = (*v53 << 24) | (v53[1] << 16) | (v53[2] << 8);
    if (v20)
    {
      v55 = (unsigned __int8 *)(v49 + v19);
      if (v16 >= v55)
        v56 = v55;
      else
        v56 = v16;
      if (v56 < v14)
        v56 = v14;
      v57 = (*v56 << 24) | (v56[1] << 16) | (v56[2] << 8);
      v58 = &v55[v47 >> 4];
      if (v16 < v58)
        v58 = v16;
      if (v58 < v14)
        v58 = v14;
      v59 = BLEND8_19499[v20];
      v51 = v51 - ((v59 & v51) >> v20) + ((v59 & v57) >> v20);
      v54 = v54 - ((v59 & v54) >> v20) + ((((*v58 << 24) | (v58[1] << 16) | (v58[2] << 8)) & v59) >> v20);
    }
    v60 = BLEND8_19499[*v46 & 0xF];
    v61 = v51 - ((v60 & v51) >> v52);
    v62 = (v60 & v54) >> v52;
LABEL_80:
    v51 = v61 + v62;
    goto LABEL_81;
  }
  v72 = v15 - 3;
  v73 = v8 ^ 0xFF;
  v74 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    v75 = *(_QWORD *)(result + 32) + (v13 >> v12) * v10;
    if (v107 == 1)
    {
      if (a5 >= 1)
      {
        v76 = v74;
        v77 = a5;
        do
        {
          v78 = *v76;
          v76 += 2;
          v79 = (unsigned __int8 *)(v75 + v78);
          if ((unint64_t)v72 < v75 + v78)
            v79 = v72;
          if ((unint64_t)v79 < *(_QWORD *)(result + 32))
            v79 = *(unsigned __int8 **)(result + 32);
          v80 = (v79[2] + 2 * *v79 + 4 * v79[1] + v79[1]) >> 3;
          v81 = v80 | 0xFF000000;
          v82 = (v80 | 0xFF0000) * v73 + 65537 + ((((v80 | 0xFF0000) * v73) >> 8) & 0xFF00FF);
          v83 = v81 - (v82 & 0xFF000000 | BYTE1(v82));
          if (v8 == 255)
            v83 = v81;
          *v6 = v83;
          if (v7)
            *v7 = HIBYTE(v83);
          ++v6;
          v7 += v9;
          --v77;
        }
        while (v77);
      }
    }
    else
    {
      v84 = v74;
      v85 = a5;
      if (a5 >= 1)
      {
        do
        {
          v86 = *v84;
          v84 += 2;
          v87 = (unsigned __int8 *)(v75 + v86);
          if ((unint64_t)v72 < v75 + v86)
            v87 = v72;
          if ((unint64_t)v87 < *(_QWORD *)(result + 32))
            v87 = *(unsigned __int8 **)(result + 32);
          v88 = (v87[2] + 2 * *v87 + 4 * v87[1] + v87[1]) >> 3;
          v89 = v88 | 0xFF000000;
          v90 = (v88 | 0xFF0000) * v73 + 65537 + ((((v88 | 0xFF0000) * v73) >> 8) & 0xFF00FF);
          v91 = v89 - (v90 & 0xFF000000 | BYTE1(v90));
          if (v8 == 255)
            v91 = v89;
          v92 = HIBYTE(v91);
          if (v7)
          {
            if (v92)
            {
              if (v92 == 255)
              {
                *v6 = v91;
                *v7 = -1;
              }
              else
              {
                v93 = (*v6 | (*v7 << 16)) * (v92 ^ 0xFF);
                v94 = ((v93 + 65537 + ((v93 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v93 + 1 + BYTE1(v93)) >> 8))
                    + (v91 & 0xFF0000FF);
                *v6 = v94;
                *v7 = HIBYTE(v94);
              }
            }
          }
          else if (v92)
          {
            if (v92 != 255)
              v91 += ((v92 ^ 0xFF) * *v6 + (((v92 ^ 0xFF) * *v6) >> 8) + 1) >> 8;
            *v6 = v91;
          }
          ++v6;
          v7 += v9;
          --v85;
        }
        while (v85);
      }
    }
    v6 += v106;
    v7 += v108;
    v13 += v105;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t W8_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  char *v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  char v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  char v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  unsigned int *v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = 255;
  v7 = (_BYTE *)*((_QWORD *)a2 + 2);
  v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v8)
    v123 = *((_QWORD *)a2 + 5) - a5;
  else
    v123 = 0;
  v9 = *((unsigned __int8 *)a2 + 8);
  v10 = a2[1];
  v122 = *a2;
  v121 = *((_QWORD *)a2 + 3) - a5;
  v11 = v8 != 0;
  v13 = *((_QWORD *)a2 + 17);
  v12 = *((_QWORD *)a2 + 18);
  v14 = *((_QWORD *)a2 + 9);
  v120 = *((_QWORD *)a2 + 11);
  v15 = *((_QWORD *)a2 + 7) + v120 * a4;
  v16 = *(unsigned int **)(result + 32);
  v17 = (char *)v16
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  if (*(_QWORD *)(result + 176))
  {
    v114 = *((_QWORD *)a2 + 15);
    v115 = *((_QWORD *)a2 + 13);
    v112 = v14 - 4;
    v113 = ~(-1 << v14);
    v18 = (unsigned int *)(v17 - 4);
    v19 = v9 ^ 0xFF;
    v118 = result;
    v110 = a5;
    v111 = -v13;
    v109 = v12 + 16 * a3 + 8;
    v116 = *((_QWORD *)a2 + 9);
    v117 = *((_QWORD *)a2 + 17);
    while (1)
    {
      if (((v114 - v15) | (v15 - v115)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v15 & (unint64_t)v113) >> v112) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v111 : v13;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(result + 32) + (v15 >> v14) * v13;
      if (v122 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = v15;
        v25 = (uint64_t *)v109;
        v26 = v110;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v18 >= v23 + v27)
            v30 = (unsigned int *)(v23 + v27);
          else
            v30 = v18;
          if (v30 < v16)
            v30 = v16;
          v31 = bswap32(*v30);
          v32 = v28 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if (v22)
          {
            v43 = (unsigned int *)(v29 + v21);
            if ((unint64_t)v18 < v29 + v21)
              v43 = v18;
            if (v43 < v16)
              v43 = v16;
            v44 = BLEND8_19499[v22];
            v41 = v31 - ((v44 & v31) >> v22);
            v42 = (bswap32(*v43) & v44) >> v22;
            goto LABEL_46;
          }
LABEL_47:
          v45 = __ROL4__(v31, v10);
          v46 = v45 | v6;
          v47 = (((v45 >> 23) & 0x1FE) + BYTE1(v45) + (((v45 >> 8) & 0xFF00) >> 6) + (((v45 >> 8) & 0xFF00) >> 8)) >> 3;
          v48 = v47 | (v46 << 24);
          v49 = (v47 & 0xFF00FFFF | (v46 << 16)) * v19;
          v50 = v48
              - ((v49 + 65537 + ((v49 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v49 + 1 + BYTE1(v49)) >> 8));
          if (v9 == 255)
            v50 = v48;
          *v7 = v50;
          if (v8)
            *v8 = HIBYTE(v50);
          v25 += 2;
          ++v7;
          v8 += v11;
          if (!--v26)
            goto LABEL_99;
        }
        v33 = (unsigned int *)(v29 + (v28 >> 4));
        if (v18 < v33)
          v33 = v18;
        if (v33 < v16)
          v33 = v16;
        v34 = bswap32(*v33);
        if (v22)
        {
          v35 = (unsigned int *)(v29 + v21);
          if (v18 >= v35)
            v36 = v35;
          else
            v36 = v18;
          if (v36 < v16)
            v36 = v16;
          v37 = bswap32(*v36);
          v38 = (unsigned int *)((char *)v35 + (v28 >> 4));
          if (v18 < v38)
            v38 = v18;
          if (v38 < v16)
            v38 = v16;
          v39 = BLEND8_19499[v22];
          v31 = v31 - ((v39 & v31) >> v22) + ((v39 & v37) >> v22);
          v34 = v34 - ((v39 & v34) >> v22) + ((bswap32(*v38) & v39) >> v22);
        }
        v40 = BLEND8_19499[*v25 & 0xF];
        v41 = v31 - ((v40 & v31) >> v32);
        v42 = (v40 & v34) >> v32;
LABEL_46:
        v31 = v41 + v42;
        goto LABEL_47;
      }
LABEL_98:
      v24 = v15;
LABEL_99:
      v7 += v121;
      v8 += v123;
      v15 = v24 + v120;
      --a6;
      v13 = v117;
      result = v118;
      LOBYTE(v14) = v116;
      if (!a6)
        return result;
    }
    if (a5 < 1)
      goto LABEL_98;
    v24 = v15;
    v52 = (uint64_t *)v109;
    v51 = v110;
    while (1)
    {
      v53 = *(v52 - 1);
      v54 = *v52;
      v55 = v23 + v53;
      if ((unint64_t)v18 >= v23 + v53)
        v56 = (unsigned int *)(v23 + v53);
      else
        v56 = v18;
      if (v56 < v16)
        v56 = v16;
      v57 = bswap32(*v56);
      v58 = v54 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if (v22)
      {
        v68 = (unsigned int *)(v55 + v21);
        if ((unint64_t)v18 < v55 + v21)
          v68 = v18;
        if (v68 < v16)
          v68 = v16;
        v69 = BLEND8_19499[v22];
        v66 = v57 - ((v69 & v57) >> v22);
        v67 = (bswap32(*v68) & v69) >> v22;
        goto LABEL_83;
      }
LABEL_84:
      v70 = __ROL4__(v57, v10);
      v71 = v70 | v6;
      v72 = (((v70 >> 23) & 0x1FE) + BYTE1(v70) + (((v70 >> 8) & 0xFF00) >> 6) + (((v70 >> 8) & 0xFF00) >> 8)) >> 3;
      v73 = v72 | (v71 << 24);
      v74 = (v72 & 0xFF00FFFF | (v71 << 16)) * v19;
      v75 = v73
          - ((v74 + 65537 + ((v74 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v74 + 1 + BYTE1(v74)) >> 8));
      if (v9 == 255)
        v75 = v73;
      v76 = HIBYTE(v75);
      if (v8)
      {
        if (v76)
        {
          if (v76 == 255)
          {
            *v7 = v75;
            LOBYTE(v75) = -1;
          }
          else
          {
            v77 = (*v7 | (*v8 << 16)) * (v76 ^ 0xFF);
            v78 = ((v77 + 65537 + ((v77 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v77 + 1 + BYTE1(v77)) >> 8))
                + (v75 & 0xFF0000FF);
            *v7 = v78;
            v75 = HIBYTE(v78);
          }
          *v8 = v75;
        }
      }
      else if (v76)
      {
        if (v76 != 255)
          v75 += ((v76 ^ 0xFF) * *v7 + (((v76 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
        *v7 = v75;
      }
      v52 += 2;
      ++v7;
      v8 += v11;
      if (!--v51)
        goto LABEL_99;
    }
    v59 = (unsigned int *)(v55 + (v54 >> 4));
    if (v18 < v59)
      v59 = v18;
    if (v59 < v16)
      v59 = v16;
    v60 = bswap32(*v59);
    if (v22)
    {
      if ((unint64_t)v18 >= v55 + v21)
        v61 = (unsigned int *)(v55 + v21);
      else
        v61 = v18;
      if (v61 < v16)
        v61 = v16;
      v62 = bswap32(*v61);
      v63 = (unsigned int *)(v55 + v21 + (v54 >> 4));
      if (v18 < v63)
        v63 = v18;
      if (v63 < v16)
        v63 = v16;
      v64 = BLEND8_19499[v22];
      v57 = v57 - ((v64 & v57) >> v22) + ((v64 & v62) >> v22);
      v60 = v60 - ((v64 & v60) >> v22) + ((bswap32(*v63) & v64) >> v22);
    }
    v65 = BLEND8_19499[*v52 & 0xF];
    v66 = v57 - ((v65 & v57) >> v58);
    v67 = (v65 & v60) >> v58;
LABEL_83:
    v57 = v66 + v67;
    goto LABEL_84;
  }
  v79 = (uint64_t *)(v12 + 16 * a3);
  v80 = (unsigned int *)(v17 - 4);
  v81 = v9 ^ 0xFF;
  v83 = a5;
  v84 = v15;
  do
  {
    v85 = *(_QWORD *)(result + 32) + (v84 >> v14) * v13;
    if (v122 == 1)
    {
      if (a5 >= 1)
      {
        v86 = v79;
        v87 = v83;
        do
        {
          v88 = *v86;
          v86 += 2;
          v89 = (unsigned int *)(v85 + v88);
          if ((unint64_t)v80 < v85 + v88)
            v89 = v80;
          if ((unint64_t)v89 < *(_QWORD *)(result + 32))
            v89 = *(unsigned int **)(result + 32);
          v90 = __ROL4__(bswap32(*v89), v10);
          v91 = v90 | v6;
          v92 = (((v90 >> 23) & 0x1FE) + BYTE1(v90) + (((v90 >> 8) & 0xFF00) >> 6) + (((v90 >> 8) & 0xFF00) >> 8)) >> 3;
          v93 = v92 | (v91 << 24);
          v94 = (v92 & 0xFF00FFFF | (v91 << 16)) * v81;
          v95 = v93
              - ((v94 + 65537 + ((v94 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v94 + 1 + BYTE1(v94)) >> 8));
          if (v9 == 255)
            v95 = v93;
          *v7 = v95;
          if (v8)
            *v8 = HIBYTE(v95);
          ++v7;
          v8 += v11;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      v96 = v79;
      v97 = v83;
      if (a5 >= 1)
      {
        do
        {
          v98 = *v96;
          v96 += 2;
          v99 = (unsigned int *)(v85 + v98);
          if ((unint64_t)v80 < v85 + v98)
            v99 = v80;
          if ((unint64_t)v99 < *(_QWORD *)(result + 32))
            v99 = *(unsigned int **)(result + 32);
          v100 = __ROL4__(bswap32(*v99), v10);
          v101 = v100 | v6;
          v102 = (((v100 >> 23) & 0x1FE) + BYTE1(v100) + (((v100 >> 8) & 0xFF00) >> 6) + (((v100 >> 8) & 0xFF00) >> 8)) >> 3;
          v103 = v102 | (v101 << 24);
          v104 = (v102 & 0xFF00FFFF | (v101 << 16)) * v81;
          v105 = v103
               - ((v104 + 65537 + ((v104 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v104 + 1 + BYTE1(v104)) >> 8));
          if (v9 == 255)
            v105 = v103;
          v106 = HIBYTE(v105);
          if (v8)
          {
            if (v106)
            {
              if (v106 == 255)
              {
                *v7 = v105;
                *v8 = -1;
              }
              else
              {
                v107 = (*v7 | (*v8 << 16)) * (v106 ^ 0xFF);
                v108 = ((v107 + 65537 + ((v107 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v107 + 1 + BYTE1(v107)) >> 8))
                     + (v105 & 0xFF0000FF);
                *v7 = v108;
                *v8 = HIBYTE(v108);
              }
            }
          }
          else if (v106)
          {
            if (v106 != 255)
              v105 += ((v106 ^ 0xFF) * *v7 + (((v106 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
            *v7 = v105;
          }
          ++v7;
          v8 += v11;
          --v97;
        }
        while (v97);
      }
    }
    v7 += v121;
    v8 += v123;
    v84 += v120;
    --a6;
  }
  while (a6);
  return result;
}

