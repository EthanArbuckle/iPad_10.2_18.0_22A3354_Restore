uint64_t W8_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  char *v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  char v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  char v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  char *v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = 255;
  v7 = (_BYTE *)*((_QWORD *)a2 + 2);
  v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v8)
    v123 = *((_QWORD *)a2 + 5) - a5;
  else
    v123 = 0;
  v9 = *((unsigned __int8 *)a2 + 8);
  v10 = a2[1];
  v122 = *a2;
  v121 = *((_QWORD *)a2 + 3) - a5;
  v11 = v8 != 0;
  v13 = *((_QWORD *)a2 + 17);
  v12 = *((_QWORD *)a2 + 18);
  v14 = *((_QWORD *)a2 + 9);
  v120 = *((_QWORD *)a2 + 11);
  v15 = *((_QWORD *)a2 + 7) + v120 * a4;
  v16 = *(unsigned int **)(result + 32);
  v17 = (char *)v16
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  if (*(_QWORD *)(result + 176))
  {
    v114 = *((_QWORD *)a2 + 15);
    v115 = *((_QWORD *)a2 + 13);
    v112 = v14 - 4;
    v113 = ~(-1 << v14);
    v18 = (unsigned int *)(v17 - 4);
    v19 = v9 ^ 0xFF;
    v118 = result;
    v110 = a5;
    v111 = -v13;
    v109 = v12 + 16 * a3 + 8;
    v116 = *((_QWORD *)a2 + 9);
    v117 = *((_QWORD *)a2 + 17);
    while (1)
    {
      if (((v114 - v15) | (v15 - v115)) < 0)
      {
        v22 = 0;
        v21 = 0;
      }
      else
      {
        v20 = ((v15 & (unint64_t)v113) >> v112) & 0xF;
        v21 = (unint64_t)(v20 - 7) >= 9 ? v111 : v13;
        v22 = weights_19497[v20] & 0xF;
      }
      v23 = *(_QWORD *)(result + 32) + (v15 >> v14) * v13;
      if (v122 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = v15;
        v25 = (uint64_t *)v109;
        v26 = v110;
        while (1)
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          v29 = v23 + v27;
          if ((unint64_t)v18 >= v23 + v27)
            v30 = (unsigned int *)(v23 + v27);
          else
            v30 = v18;
          if (v30 < v16)
            v30 = v16;
          v31 = *v30;
          v32 = v28 & 0xF;
          if ((v28 & 0xF) != 0)
            break;
          if (v22)
          {
            v43 = (unsigned int *)(v29 + v21);
            if ((unint64_t)v18 < v29 + v21)
              v43 = v18;
            if (v43 < v16)
              v43 = v16;
            v44 = BLEND8_19499[v22];
            v41 = v31 - ((v44 & v31) >> v22);
            v42 = (v44 & *v43) >> v22;
            goto LABEL_46;
          }
LABEL_47:
          v45 = __ROL4__(v31, v10);
          v46 = v45 | v6;
          v47 = (((v45 >> 23) & 0x1FE) + BYTE1(v45) + (((v45 >> 8) & 0xFF00) >> 6) + (((v45 >> 8) & 0xFF00) >> 8)) >> 3;
          v48 = v47 | (v46 << 24);
          v49 = (v47 & 0xFF00FFFF | (v46 << 16)) * v19;
          v50 = v48
              - ((v49 + 65537 + ((v49 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v49 + 1 + BYTE1(v49)) >> 8));
          if (v9 == 255)
            v50 = v48;
          *v7 = v50;
          if (v8)
            *v8 = HIBYTE(v50);
          v25 += 2;
          ++v7;
          v8 += v11;
          if (!--v26)
            goto LABEL_99;
        }
        v33 = (unsigned int *)(v29 + (v28 >> 4));
        if (v18 < v33)
          v33 = v18;
        if (v33 < v16)
          v33 = v16;
        v34 = *v33;
        if (v22)
        {
          v35 = (unsigned int *)(v29 + v21);
          if (v18 >= v35)
            v36 = v35;
          else
            v36 = v18;
          if (v36 < v16)
            v36 = v16;
          v37 = *v36;
          v38 = (unsigned int *)((char *)v35 + (v28 >> 4));
          if (v18 < v38)
            v38 = v18;
          if (v38 < v16)
            v38 = v16;
          v39 = BLEND8_19499[v22];
          v31 = v31 - ((v39 & v31) >> v22) + ((v39 & v37) >> v22);
          v34 = v34 - ((v39 & v34) >> v22) + ((v39 & *v38) >> v22);
        }
        v40 = BLEND8_19499[*v25 & 0xF];
        v41 = v31 - ((v40 & v31) >> v32);
        v42 = (v40 & v34) >> v32;
LABEL_46:
        v31 = v41 + v42;
        goto LABEL_47;
      }
LABEL_98:
      v24 = v15;
LABEL_99:
      v7 += v121;
      v8 += v123;
      v15 = v24 + v120;
      --a6;
      v13 = v117;
      result = v118;
      LOBYTE(v14) = v116;
      if (!a6)
        return result;
    }
    if (a5 < 1)
      goto LABEL_98;
    v24 = v15;
    v52 = (uint64_t *)v109;
    v51 = v110;
    while (1)
    {
      v53 = *(v52 - 1);
      v54 = *v52;
      v55 = v23 + v53;
      if ((unint64_t)v18 >= v23 + v53)
        v56 = (unsigned int *)(v23 + v53);
      else
        v56 = v18;
      if (v56 < v16)
        v56 = v16;
      v57 = *v56;
      v58 = v54 & 0xF;
      if ((v54 & 0xF) != 0)
        break;
      if (v22)
      {
        v68 = (unsigned int *)(v55 + v21);
        if ((unint64_t)v18 < v55 + v21)
          v68 = v18;
        if (v68 < v16)
          v68 = v16;
        v69 = BLEND8_19499[v22];
        v66 = v57 - ((v69 & v57) >> v22);
        v67 = (v69 & *v68) >> v22;
        goto LABEL_83;
      }
LABEL_84:
      v70 = __ROL4__(v57, v10);
      v71 = v70 | v6;
      v72 = (((v70 >> 23) & 0x1FE) + BYTE1(v70) + (((v70 >> 8) & 0xFF00) >> 6) + (((v70 >> 8) & 0xFF00) >> 8)) >> 3;
      v73 = v72 | (v71 << 24);
      v74 = (v72 & 0xFF00FFFF | (v71 << 16)) * v19;
      v75 = v73
          - ((v74 + 65537 + ((v74 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v74 + 1 + BYTE1(v74)) >> 8));
      if (v9 == 255)
        v75 = v73;
      v76 = HIBYTE(v75);
      if (v8)
      {
        if (v76)
        {
          if (v76 == 255)
          {
            *v7 = v75;
            LOBYTE(v75) = -1;
          }
          else
          {
            v77 = (*v7 | (*v8 << 16)) * (v76 ^ 0xFF);
            v78 = ((v77 + 65537 + ((v77 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v77 + 1 + BYTE1(v77)) >> 8))
                + (v75 & 0xFF0000FF);
            *v7 = v78;
            v75 = HIBYTE(v78);
          }
          *v8 = v75;
        }
      }
      else if (v76)
      {
        if (v76 != 255)
          v75 += ((v76 ^ 0xFF) * *v7 + (((v76 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
        *v7 = v75;
      }
      v52 += 2;
      ++v7;
      v8 += v11;
      if (!--v51)
        goto LABEL_99;
    }
    v59 = (unsigned int *)(v55 + (v54 >> 4));
    if (v18 < v59)
      v59 = v18;
    if (v59 < v16)
      v59 = v16;
    v60 = *v59;
    if (v22)
    {
      if ((unint64_t)v18 >= v55 + v21)
        v61 = (unsigned int *)(v55 + v21);
      else
        v61 = v18;
      if (v61 < v16)
        v61 = v16;
      v62 = *v61;
      v63 = (unsigned int *)(v55 + v21 + (v54 >> 4));
      if (v18 < v63)
        v63 = v18;
      if (v63 < v16)
        v63 = v16;
      v64 = BLEND8_19499[v22];
      v57 = v57 - ((v64 & v57) >> v22) + ((v64 & v62) >> v22);
      v60 = v60 - ((v64 & v60) >> v22) + ((v64 & *v63) >> v22);
    }
    v65 = BLEND8_19499[*v52 & 0xF];
    v66 = v57 - ((v65 & v57) >> v58);
    v67 = (v65 & v60) >> v58;
LABEL_83:
    v57 = v66 + v67;
    goto LABEL_84;
  }
  v79 = (uint64_t *)(v12 + 16 * a3);
  v80 = v17 - 4;
  v81 = v9 ^ 0xFF;
  v83 = a5;
  v84 = v15;
  do
  {
    v85 = *(_QWORD *)(result + 32) + (v84 >> v14) * v13;
    if (v122 == 1)
    {
      if (a5 >= 1)
      {
        v86 = v79;
        v87 = v83;
        do
        {
          v88 = *v86;
          v86 += 2;
          v89 = (char *)(v85 + v88);
          if ((unint64_t)v80 < v85 + v88)
            v89 = v80;
          if ((unint64_t)v89 < *(_QWORD *)(result + 32))
            v89 = *(char **)(result + 32);
          v90 = __ROL4__(*(_DWORD *)v89, v10);
          v91 = v90 | v6;
          v92 = (((v90 >> 23) & 0x1FE) + BYTE1(v90) + (((v90 >> 8) & 0xFF00) >> 6) + (((v90 >> 8) & 0xFF00) >> 8)) >> 3;
          v93 = v92 | (v91 << 24);
          v94 = (v92 & 0xFF00FFFF | (v91 << 16)) * v81;
          v95 = v93
              - ((v94 + 65537 + ((v94 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v94 + 1 + BYTE1(v94)) >> 8));
          if (v9 == 255)
            v95 = v93;
          *v7 = v95;
          if (v8)
            *v8 = HIBYTE(v95);
          ++v7;
          v8 += v11;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      v96 = v79;
      v97 = v83;
      if (a5 >= 1)
      {
        do
        {
          v98 = *v96;
          v96 += 2;
          v99 = (char *)(v85 + v98);
          if ((unint64_t)v80 < v85 + v98)
            v99 = v80;
          if ((unint64_t)v99 < *(_QWORD *)(result + 32))
            v99 = *(char **)(result + 32);
          v100 = __ROL4__(*(_DWORD *)v99, v10);
          v101 = v100 | v6;
          v102 = (((v100 >> 23) & 0x1FE) + BYTE1(v100) + (((v100 >> 8) & 0xFF00) >> 6) + (((v100 >> 8) & 0xFF00) >> 8)) >> 3;
          v103 = v102 | (v101 << 24);
          v104 = (v102 & 0xFF00FFFF | (v101 << 16)) * v81;
          v105 = v103
               - ((v104 + 65537 + ((v104 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v104 + 1 + BYTE1(v104)) >> 8));
          if (v9 == 255)
            v105 = v103;
          v106 = HIBYTE(v105);
          if (v8)
          {
            if (v106)
            {
              if (v106 == 255)
              {
                *v7 = v105;
                *v8 = -1;
              }
              else
              {
                v107 = (*v7 | (*v8 << 16)) * (v106 ^ 0xFF);
                v108 = ((v107 + 65537 + ((v107 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v107 + 1 + BYTE1(v107)) >> 8))
                     + (v105 & 0xFF0000FF);
                *v7 = v108;
                *v8 = HIBYTE(v108);
              }
            }
          }
          else if (v106)
          {
            if (v106 != 255)
              v105 += ((v106 ^ 0xFF) * *v7 + (((v106 ^ 0xFF) * *v7) >> 8) + 1) >> 8;
            *v7 = v105;
          }
          ++v7;
          v8 += v11;
          --v97;
        }
        while (v97);
      }
    }
    v7 += v121;
    v8 += v123;
    v84 += v120;
    --a6;
  }
  while (a6);
  return result;
}

_DWORD *CGFontIndexSetCreate()
{
  _DWORD *result;

  result = malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
  *result = 1;
  return result;
}

_DWORD *CGFontIndexSetCreateCopy(uint64_t a1)
{
  _DWORD *v2;
  uint64_t i;
  void *v4;

  if (!a1)
    return 0;
  v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
  *v2 = 1;
  for (i = 2; i != 18; i += 2)
  {
    if (*(_QWORD *)(a1 + i * 4))
    {
      v4 = malloc_type_calloc(1uLL, 0x400uLL, 0x4B0E1C62uLL);
      *(_QWORD *)&v2[i] = v4;
      memmove(v4, *(const void **)(a1 + i * 4), 0x400uLL);
    }
  }
  return v2;
}

unsigned int *CGFontIndexSetRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void CGFontIndexSetRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t i;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      for (i = 8; i != 72; i += 8)
        free(*(void **)(a1 + i));
      free(*(void **)(a1 + 72));
      free((void *)a1);
    }
  }
}

char *CGFontIndexSetAddIndex(char *result, unint64_t a2)
{
  char *v3;
  unint64_t *v4;
  char *v5;

  if (result && (_DWORD)a2 != 0xFFFF)
  {
    v3 = &result[8 * (a2 >> 13)];
    v5 = (char *)*((_QWORD *)v3 + 1);
    v4 = (unint64_t *)(v3 + 8);
    result = v5;
    if (!v5)
    {
      result = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x286615CAuLL);
      while (!__ldxr(v4))
      {
        if (!__stxr((unint64_t)result, v4))
          goto LABEL_9;
      }
      __clrex();
      free(result);
      result = (char *)*v4;
    }
LABEL_9:
    result[(a2 >> 3) & 0x3FF] |= 1 << (a2 & 7);
  }
  return result;
}

char *CGFontIndexSetAddIndexes(char *result, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;

  if (result)
  {
    v3 = a2;
    if (a2)
    {
      v4 = a3;
      if (a3)
      {
        v5 = result;
        do
        {
          v6 = *v3++;
          result = CGFontIndexSetAddIndex(v5, v6);
          --v4;
        }
        while (v4);
      }
    }
  }
  return result;
}

char *CGFontIndexSetAddIndexRange(char *result, __int16 a2, unsigned int a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (result && a3)
  {
    v4 = result;
    v5 = 0;
    v6 = a3;
    do
      result = CGFontIndexSetAddIndex(v4, (unsigned __int16)(v5++ + a2));
    while (v6 != v5);
  }
  return result;
}

uint64_t CGFontIndexSetContainsIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8 * (a2 >> 13) + 8);
  if (v2)
    return (*(unsigned __int8 *)(v2 + ((a2 >> 3) & 0x3FF)) >> (a2 & 7)) & 1;
  else
    return 0;
}

unint64_t CGFontIndexSetGetIndexRange(uint64_t a1, unint64_t a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  v3 = 0;
  if (a1 && (_DWORD)a2 != 0xFFFF)
  {
    while (1)
    {
      v4 = *(_QWORD *)(a1 + 8 * (a2 >> 13) + 8);
      if (v4)
      {
        if (((*(unsigned __int8 *)(v4 + ((a2 >> 3) & 0x3FF)) >> (a2 & 7)) & 1) != 0)
          break;
      }
      a2 = (a2 + 1);
      if ((_DWORD)a2 == 0xFFFF)
        return 0;
    }
    if (a3)
      *a3 = a2;
    v5 = (unsigned __int16)a2;
    v6 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)a2 >> 13) + 8);
    if (v6)
    {
      v7 = (unsigned __int16)a2;
      do
      {
        if (((*(unsigned __int8 *)(v6 + ((v7 >> 3) & 0x3FF)) >> (v7 & 7)) & 1) == 0)
          break;
        LOWORD(a2) = a2 + 1;
        v7 = (unsigned __int16)a2;
        v6 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)a2 >> 13) + 8);
      }
      while (v6);
    }
    return (unsigned __int16)a2 - (unint64_t)v5;
  }
  return v3;
}

uint64_t CGFontIndexSetGetCount(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int8x16_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint32x4_t v15;

  if (result)
  {
    v1 = result;
    result = 0;
    v2 = 0;
    v3.i64[0] = 0x5555555555555555;
    v3.i64[1] = 0x5555555555555555;
    v4.i64[0] = 0x3333333333333333;
    v4.i64[1] = 0x3333333333333333;
    v5.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v5.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6.i64[0] = 0x3F0000003FLL;
    v6.i64[1] = 0x3F0000003FLL;
    do
    {
      v7 = *(_QWORD *)(v1 + 8 * v2 + 8);
      if (v7)
      {
        v8 = 0;
        v9 = 0uLL;
        v10 = 0uLL;
        do
        {
          v11 = (int8x16_t)vsubq_s32(*(int32x4_t *)(v7 + v8), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*(uint32x4_t *)(v7 + v8), 1uLL), v3));
          v12 = (uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v11, 2uLL), v4), (int32x4_t)vandq_s8(v11, v4));
          v13 = (uint32x4_t)vandq_s8((int8x16_t)vsraq_n_u32(v12, v12, 4uLL), v5);
          v14 = vsraq_n_u32(v13, v13, 8uLL);
          v15 = (uint32x4_t)vandq_s8((int8x16_t)vsraq_n_u32(v14, v14, 0x10uLL), v6);
          v10 = (int64x2_t)vaddw_high_u32((uint64x2_t)v10, v15);
          v9 = (int64x2_t)vaddw_u32((uint64x2_t)v9, *(uint32x2_t *)v15.i8);
          v8 += 16;
        }
        while (v8 != 1024);
        v7 = vaddvq_s64(vaddq_s64(v9, v10));
      }
      result += v7;
      ++v2;
    }
    while (v2 != 8);
  }
  return result;
}

uint64_t CGFontIndexSetGetIndexes(uint64_t result, _WORD *a2)
{
  unint64_t i;
  uint64_t v3;

  if (result && a2)
  {
    for (i = 0; i != 0xFFFF; ++i)
    {
      v3 = *(_QWORD *)(result + 8 * ((unsigned __int16)i >> 13) + 8);
      if (v3)
      {
        if (((*(unsigned __int8 *)(v3 + ((i >> 3) & 0x3FF)) >> (i & 7)) & 1) != 0)
          *a2++ = i;
      }
    }
  }
  return result;
}

uint64_t CGFontIndexSetGetIndexVectorSize(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0;
  while (1)
  {
    v2 = v1 ^ 7;
    v3 = *(_QWORD *)(a1 + 8 * (v1 ^ 7) + 8);
    if (v3)
      break;
    if (++v1 == 8)
      return 0;
  }
  v4 = 0;
  while (((*(unsigned __int8 *)(v3 + ((v4 ^ 0x1FFFuLL) >> 3)) >> (~(_BYTE)v4 & 7)) & 1) == 0)
  {
    if (++v4 == 0x2000)
      return 0;
  }
  return (((((unsigned __int16)v4 ^ 0x1FFF) & 0xFFF8u | (unsigned __int16)(v2 << 13)) + 32) >> 3) & 0x3FFCLL;
}

void CGFontIndexSetGetIndexVector(uint64_t a1, void *a2)
{
  size_t IndexVectorSize;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;

  IndexVectorSize = CGFontIndexSetGetIndexVectorSize(a1);
  bzero(a2, IndexVectorSize);
  for (i = 0; i != 0xFFFF; ++i)
  {
    v9 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)i >> 13) + 8);
    if (v9 && ((*(unsigned __int8 *)(v9 + ((i >> 3) & 0x3FF)) >> (i & 7)) & 1) != 0)
    {
      if (i >> 5 >= IndexVectorSize >> 2)
        _CGHandleAssert("CGFontIndexSetGetIndexVector", 284, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontIndexSet.c", "k / 32 < size / 4", "k: %zu  size: %zu", v5, v6, v7, i);
      *((_DWORD *)a2 + (i >> 5)) |= 1 << ~(_BYTE)i;
    }
  }
}

unint64_t CGFontIndexSetGetName(uint64_t a1)
{
  unint64_t *v1;
  CC_MD5_CTX *v3;
  uint64_t i;
  const void *v5;
  _BYTE *v6;
  uint64_t j;
  time_t v10;
  unsigned __int8 md[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = (unint64_t *)(a1 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    v3 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v3);
    v10 = time(0);
    if (v3)
      CC_MD5_Update(v3, &v10, 8u);
    for (i = 0; i != 8; ++i)
    {
      while (1)
      {
        v5 = *(const void **)(a1 + 8 * i + 8);
        if (!v5)
          break;
        if (v3)
        {
          CC_MD5_Update(v3, v5, 0x400u);
          if (++i == 8)
            goto LABEL_14;
        }
        else if (++i == 8)
        {
          goto LABEL_15;
        }
      }
    }
    if (!v3)
      goto LABEL_15;
LABEL_14:
    CC_MD5_Final(md, v3);
LABEL_15:
    free(v3);
    v6 = malloc_type_malloc(7uLL, 0xFBD83575uLL);
    for (j = 0; j != 6; ++j)
      v6[j] = md[j] % 0x1Au + 65;
    v6[6] = 0;
    while (!__ldxr(v1))
    {
      if (!__stxr((unint64_t)v6, v1))
        return *v1;
    }
    __clrex();
    free(v6);
  }
  return *v1;
}

_BYTE *CGPDFCryptFilterCreateStandard(uint64_t a1)
{
  _BYTE *v2;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
  {
    *(_QWORD *)v2 = a1;
    v2[12] = 0;
    *((_DWORD *)v2 + 2) = 1;
    *((_QWORD *)v2 + 2) = 0;
  }
  return v2;
}

BOOL get_object_key(uint64_t a1, int a2, unint64_t a3, unsigned __int8 *a4, size_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  size_t __n;
  char __src[41];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  __n = 0;
  result = CGPDFSecurityManagerGetDecryptionKey(*(_QWORD *)a1, __src, &__n);
  if (result)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = __n;
    if (v11)
      v13 = v11 == __n;
    else
      v13 = 1;
    if (v13)
    {
      v14 = *(_DWORD *)(a1 + 8);
      if (v14 == 3)
      {
        memcpy(a4, __src, __n);
      }
      else
      {
        v15 = &__src[__n];
        *(_WORD *)v15 = a2;
        v15[2] = BYTE2(a2);
        v15[3] = a3;
        v16 = a3 >> 8;
        v17 = v12 + 5;
        v15[4] = v16;
        if (v14 == 2)
        {
          *(_DWORD *)&__src[v17] = 1416380787;
          v17 = v12 + 9;
        }
        CGGetMD5DigestOfBytes(a4, __src, v17);
        if (v17 >= 0x10)
          v12 = 16;
        else
          v12 = v17;
      }
      *a5 = v12;
      if (pdf_is_verbose_onceToken[0] != -1)
        dispatch_once(pdf_is_verbose_onceToken, &__block_literal_global_4_5967);
      if (pdf_is_verbose_isVerbose)
      {
        printf("Object key: %u <", a2);
        for (; v12; --v12)
        {
          v18 = *a4++;
          printf("%02x", v18);
        }
        puts(">");
      }
      return 1;
    }
    else
    {
      pdf_error("unsupported crypt filter key length.");
      return 0;
    }
  }
  return result;
}

_QWORD *CGPDFCryptFilterCreateDecryptor(_QWORD *result, int a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _BOOL4 object_key;
  size_t v7;
  unsigned __int8 v8[32];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    if (*((_BYTE *)result + 12))
    {
      return CGPDFDecryptorCreate(a4, 0, 0, 0);
    }
    else
    {
      v7 = 0;
      object_key = get_object_key((uint64_t)result, a2, a3, v8, &v7);
      result = 0;
      if (object_key)
        return CGPDFDecryptorCreate(a4, *((_DWORD *)v5 + 2), v8, v7);
    }
  }
  return result;
}

uint64_t ripr_super()
{
  return 0;
}

uint64_t ripr_size()
{
  return 0;
}

uint64_t ripr_retain(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

CFArrayRef CGFontCopyVariationAxes(CGFontRef font)
{
  uint64_t v1;
  uint64_t v2;
  __CFArray *Mutable;
  unint64_t v4;
  const CFDictionaryKeyCallBacks *v5;
  double *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  const void *v10;
  CFStringRef v11;
  CFStringRef v12;
  const __CFAllocator *alloc;
  unint64_t v15;
  char cStr[4];
  char v17;

  if (!font)
    return 0;
  v15 = 0;
  v1 = (*(uint64_t (**)(_QWORD, unint64_t *))(*((_QWORD *)font + 2) + 408))(*((_QWORD *)font + 14), &v15);
  if (!v1)
    return 0;
  v2 = v1;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v15)
  {
    v4 = 0;
    v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v6 = (double *)(v2 + 16);
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v8 = CFDictionaryCreateMutable(0, 0, v5, v7);
      v9 = v8;
      v10 = (const void *)*((_QWORD *)v6 - 2);
      if (v10)
      {
        CFDictionarySetValue(v8, CFSTR("kCGFontVariationAxisName"), v10);
      }
      else
      {
        *(_DWORD *)cStr = bswap32(*((_DWORD *)v6 - 2));
        v17 = 0;
        v11 = CFStringCreateWithCString(alloc, cStr, 0);
        if (v11)
        {
          v12 = v11;
          CFDictionarySetValue(v9, CFSTR("kCGFontVariationAxisName"), v11);
          CFRelease(v12);
        }
      }
      CGCFDictionarySetFloat(v9, CFSTR("kCGFontVariationAxisMinValue"), *v6);
      CGCFDictionarySetFloat(v9, CFSTR("kCGFontVariationAxisMaxValue"), v6[1]);
      CGCFDictionarySetFloat(v9, CFSTR("kCGFontVariationAxisDefaultValue"), v6[2]);
      if (v9)
      {
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v9);
      }
      ++v4;
      v6 += 5;
    }
    while (v4 < v15);
  }
  return Mutable;
}

_QWORD *pdf_source_create_predictor2_filter(const void *a1, CGPDFDictionary *a2)
{
  _QWORD *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  _QWORD *result;
  CGPDFInteger value;

  v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10300406BFC95CEuLL);
  v4[3] = 8;
  *(int64x2_t *)(v4 + 1) = vdupq_n_s64(1uLL);
  if (a2)
  {
    value = 0;
    if (CGPDFDictionaryGetInteger(a2, "Colors", &value))
    {
      if (value < 1)
        pdf_error("/%s is outside the range of allowed values.", "Colors");
      else
        v4[1] = value;
    }
    if (CGPDFDictionaryGetInteger(a2, "BitsPerComponent", &value))
    {
      if ((unint64_t)value <= 0x10 && ((1 << value) & 0x10116) != 0)
        v4[3] = value;
      else
        pdf_error("/%s is outside the range of allowed values.", "BitsPerComponent");
    }
    if (CGPDFDictionaryGetInteger(a2, "Columns", &value))
    {
      if ((unint64_t)(value - 1) > 0x3FFFFFFE)
      {
        pdf_error("/%s is outside the range of allowed values.", "Columns");
        if (!a1)
          goto LABEL_15;
        goto LABEL_14;
      }
      v4[2] = value;
    }
  }
  if (a1)
LABEL_14:
    CFRetain(a1);
LABEL_15:
  *v4 = a1;
  v5 = v4[1];
  v6 = v4[3];
  if (v5 <= 0xFFFFFFFFFFFFFFF8 / v6
    && (v7 = v6 * v5, v8 = v4[2], v8 <= 0xFFFFFFFFFFFFFFF8 / v7)
    && (v9 = (v8 * v7 + 7) >> 3,
        v4[4] = malloc_type_malloc(v5, 0xED68B086uLL),
        (result = CGPDFSourceCreateInternal(v9)) != 0))
  {
    *((_BYTE *)result + 209) = 1;
    *((_OWORD *)result + 3) = pdf_source_create_predictor2_filter_callbacks;
    *((_OWORD *)result + 4) = *(_OWORD *)&off_1E162CD20;
    result[10] = v4;
  }
  else
  {
    predictor2_filter_finalize((void **)v4);
    return 0;
  }
  return result;
}

void predictor2_filter_finalize(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1[4]);
    free(a1);
  }
}

uint64_t predictor2_filter_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGPDFSourceRewind(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t predictor2_filter_refill(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;

  v8 = (unsigned __int8 *)a2;
  v10 = CGPDFSourceRead(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = v11 - 1;
    if (v11 - 1 <= 7 && ((0x8Bu >> v12) & 1) != 0)
    {
      bzero(*(void **)(a1 + 32), *(_QWORD *)(a1 + 8));
      v14 = *(_QWORD *)(a1 + 16);
      if (v14)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = &v8[v10];
        v22 = 0xFFFFFFFF >> -(char)v11;
        v23 = v8;
        do
        {
          if (*(_QWORD *)(a1 + 8))
          {
            v24 = 0;
            do
            {
              if (v11)
              {
                while (v19 < v11)
                {
                  v20 <<= 8;
                  if (v23 < v21)
                  {
                    v25 = *v23++;
                    v20 |= v25;
                  }
                  v19 += 8;
                }
                v19 -= v11;
                v26 = (v20 >> v19) & v22;
              }
              else
              {
                LOBYTE(v26) = 0;
              }
              *(_BYTE *)(*(_QWORD *)(a1 + 32) + v24) += v26;
              v27 = *(_QWORD *)(a1 + 32);
              v28 = *(unsigned __int8 *)(v27 + v24);
              if (v15 < 8)
              {
                v29 = *(_BYTE *)(v27 + v24);
              }
              else
              {
                do
                {
                  v15 -= 8;
                  *v8++ = v18 >> v15;
                }
                while (v15 > 7);
                v27 = *(_QWORD *)(a1 + 32);
                v29 = *(_BYTE *)(v27 + v24);
              }
              v18 = v22 & v28 | (v18 << v11);
              v15 += v11;
              *(_BYTE *)(v27 + v24) = v29 & (0xFF01010107010301 >> (8 * v12));
              v16 += v11;
              if (v10 == v16 >> 3)
                break;
              ++v24;
            }
            while (v24 < *(_QWORD *)(a1 + 8));
            v14 = *(_QWORD *)(a1 + 16);
          }
          ++v17;
        }
        while (v17 < v14);
        if (v19 <= 0x18)
        {
          v30 = v20 & (0xFFFFFFFF >> -(char)v19);
          if (!v19)
            v30 = 0;
          goto LABEL_34;
        }
        v30 = v20 & (0xFFFFFFFF >> (24 - v19)) | (((v20 >> (v19 - 24)) & 0xFFFFFF) << (v19 - 24));
        if (v15 >= 8)
        {
          do
          {
            v15 -= 8;
            *v8++ = v18 >> v15;
          }
          while (v15 > 7);
        }
        v15 |= 0x18uLL;
        v18 = (v30 >> (v19 - 24)) & 0xFFFFFF | (v18 << 24);
        v19 -= 24;
        do
        {
          v15 -= 8;
          *v8++ = v18 >> v15;
LABEL_34:
          ;
        }
        while (v15 > 7);
      }
      else
      {
        v30 = 0;
        v18 = 0;
        v19 = 0;
        v15 = 0;
      }
      v31 = v15 + v19;
      if (v31)
      {
        v32 = (0xFFFFFFFF >> -(char)v19) & v30 | (v18 << v19);
        do
        {
          v33 = v31;
          if (v31 >= 8)
          {
            do
            {
              v33 -= 8;
              *v8++ = v32 >> v33;
            }
            while (v33 > 7);
          }
          v34 = -(int)v31 & 7;
          v32 <<= v34;
          v31 = v33 + v34;
        }
        while (v31);
      }
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

uint64_t path_hash(const void *a1)
{
  return 0;
}

__CFString *path_debug_description(const CGPath *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Path %p:\n"), a1);
  CGPathApply(a1, Mutable, (CGPathApplierFunction)path_debug_desc_applier);
  return Mutable;
}

void path_debug_desc_applier(__CFString *a1, const CGPathElement *a2)
{
  CGPoint *points;

  points = a2->points;
  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      CFStringAppendFormat(a1, 0, CFSTR("  moveto (%g, %g)\n"), *(_QWORD *)&points->x, *(_QWORD *)&points->y);
      break;
    case kCGPathElementAddLineToPoint:
      CFStringAppendFormat(a1, 0, CFSTR("    lineto (%g, %g)\n"), *(_QWORD *)&points->x, *(_QWORD *)&points->y);
      break;
    case kCGPathElementAddQuadCurveToPoint:
      CFStringAppendFormat(a1, 0, CFSTR("    quadto (%g, %g) (%g, %g)\n"), *(_QWORD *)&points->x, *(_QWORD *)&points->y, *(_QWORD *)&points[1].x, *(_QWORD *)&points[1].y);
      break;
    case kCGPathElementAddCurveToPoint:
      CFStringAppendFormat(a1, 0, CFSTR("    curveto (%g, %g) (%g, %g) (%g, %g)\n"), *(_QWORD *)&points->x, *(_QWORD *)&points->y, *(_QWORD *)&points[1].x, *(_QWORD *)&points[1].y, *(_QWORD *)&points[2].x, *(_QWORD *)&points[2].y);
      break;
    case kCGPathElementCloseSubpath:
      CFStringAppend(a1, CFSTR("    closepath\n"));
      break;
    default:
      return;
  }
}

CGPathRef CGPathCreateCopyByDashingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat phase, const CGFloat *lengths, size_t count)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v14;
  CFTypeID TypeID;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Instance;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const CGPath *v26;
  CG::Path *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!path)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v14 = CFGetTypeID(path);
    if (v14 != CGPathGetTypeID())
      return 0;
  }
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v16, v17, v18, v19, v20, v21);
  v26 = (const CGPath *)Instance;
  if (Instance)
  {
    v27 = CG::Path::Path((CG::Path *)(Instance + 16), (CGPathRef)((char *)path + 16), phase, lengths, count, 0, v23, v24, v25);
    if (transform)
      CG::Path::apply_transform(v27, transform, v28, v29, v30, v31, v32, v33);
  }
  return v26;
}

uint64_t CGPathCreateWithLineSegment(_anonymous_namespace_ *a1, const CGAffineTransform *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, float64_t a11, float64_t a12)
{
  CFTypeID TypeID;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Instance;
  uint64_t v21;
  float64x2_t v23;
  CGPoint v24;

  v24.x = a9;
  v24.y = a10;
  v23.f64[0] = a11;
  v23.f64[1] = a12;
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 88, v14, v15, v16, v17, v18, v19);
  v21 = Instance;
  if (Instance)
    CG::Path::append_line_segment((CG::Path *)(Instance + 16), (__n128 *)&v24, &v23, (const CGAffineTransform *)a1);
  return v21;
}

CGPathRef CGPathCreateWithUnevenCornersRoundedRect(const CGRect *a1, _anonymous_namespace_ *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  _BOOL4 is_valid;
  uint64_t v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGSize *v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  CFTypeID TypeID;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Instance;
  CGRect v38;
  CGSize v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v46 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  if (a1 && is_valid)
  {
    v47.origin.x = a9;
    v47.origin.y = a10;
    v47.size.width = a11;
    v47.size.height = a12;
    v48 = CGRectStandardize(v47);
    x = v48.origin.x;
    y = v48.origin.y;
    width = v48.size.width;
    height = v48.size.height;
    v38 = v48;
    v25 = v39.width == v40 && v39.height == v41;
    if (v25
      && (v39.width == v42 ? (v26 = v39.height == v43) : (v26 = 0),
          v26 && (v39.width == v44 ? (v27 = v39.height == v45) : (v27 = 0), v27)))
    {
      if (v39.width == 0.0 || v39.height == 0.0)
      {
        v50.origin.x = x;
        v50.origin.y = y;
        v50.size.width = width;
        v50.size.height = height;
        return CGPathCreateWithRect(v50, (const CGAffineTransform *)this);
      }
      else
      {
        v49.origin.x = x;
        v49.origin.y = y;
        v49.size.width = width;
        v49.size.height = height;
        return CGPathCreateWithRoundedRect(v49, v39.width, v39.height, (const CGAffineTransform *)this);
      }
    }
    else
    {
      TypeID = CGPathGetTypeID();
      Instance = CGTypeCreateInstance(TypeID, 120, v29, v30, v31, v32, v33, v34);
      v19 = Instance;
      if (Instance)
        CG::Path::append_uneven_rounded_rect((CG::Path *)(Instance + 16), &v38, &v39, (float64x2_t *)this);
    }
  }
  return (CGPathRef)v19;
}

CGPathRef CGPathCreateWithContinuousRoundedRect(CGAffineTransform *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  const CGAffineTransform *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v21;
  double v22;
  double v23;
  double v24;
  CFTypeID TypeID;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Instance;
  uint64_t v34;
  CGRect v36;
  CGSize v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v38 = CGRectStandardize(*(CGRect *)&a2);
  x = v38.origin.x;
  y = v38.origin.y;
  width = v38.size.width;
  height = v38.size.height;
  v36 = v38;
  if (a6 >= 0.0)
    v21 = a6;
  else
    v21 = 0.0;
  if (a7 >= 0.0)
    v22 = a7;
  else
    v22 = 0.0;
  if (v38.size.width < 0.0 || v38.size.height < 0.0)
  {
    v39 = CGRectStandardize(v38);
    v23 = v39.size.width * 0.5;
    if (v21 <= v39.size.width * 0.5)
      v24 = v21;
    else
      v24 = v39.size.width * 0.5;
    v40.origin.x = x;
    v40.origin.y = y;
    v40.size.width = width;
    v40.size.height = height;
    v38 = CGRectStandardize(v40);
  }
  else
  {
    v23 = v38.size.width * 0.5;
    if (v21 <= v38.size.width * 0.5)
      v24 = v21;
    else
      v24 = v38.size.width * 0.5;
  }
  if (v22 > v38.size.height * 0.5)
    v22 = v38.size.height * 0.5;
  if (v24 == 0.0 || v22 == 0.0)
  {
    v41.origin.x = x;
    v41.origin.y = y;
    v41.size.width = width;
    v41.size.height = height;
    return CGPathCreateWithRect(v41, a1);
  }
  else if (v24 == v23 && v22 == v38.size.height * 0.5)
  {
    v42.origin.x = x;
    v42.origin.y = y;
    v42.size.width = width;
    v42.size.height = height;
    return CGPathCreateWithEllipseInRect(v42, a1);
  }
  else
  {
      return 0;
    TypeID = CGPathGetTypeID();
    Instance = CGTypeCreateInstance(TypeID, 128, v27, v28, v29, v30, v31, v32);
    v34 = Instance;
    if (Instance)
    {
      v37.width = v24;
      v37.height = v22;
      CG::Path::append_continuous_rounded_rect((CG::Path *)(Instance + 16), &v36, v37, (float64x2_t *)a1);
    }
    return (CGPathRef)v34;
  }
}

void CGPathAddContinuousRoundedRect(char *cf, float64x2_t *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14)
{
  CFTypeID v22;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  CG::Path *v32;
  double v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  if (cf)
  {
    if (CGPathDisableTypeValidation || (v22 = CFGetTypeID(cf), v22 == CGPathGetTypeID()))
    {
      {
        v36.origin.x = a9;
        v36.origin.y = a10;
        v36.size.width = a11;
        v36.size.height = a12;
        v37 = CGRectStandardize(v36);
        x = v37.origin.x;
        y = v37.origin.y;
        width = v37.size.width;
        height = v37.size.height;
        v35 = v37;
        if (a13 >= 0.0)
          v27 = a13;
        else
          v27 = 0.0;
        if (a14 >= 0.0)
          v28 = a14;
        else
          v28 = 0.0;
        if (v37.size.width < 0.0 || v37.size.height < 0.0)
        {
          v38 = CGRectStandardize(v37);
          v29 = v38.size.width * 0.5;
          if (v27 <= v38.size.width * 0.5)
            v30 = v27;
          else
            v30 = v38.size.width * 0.5;
          v39.origin.x = x;
          v39.origin.y = y;
          v39.size.width = width;
          v39.size.height = height;
          v40 = CGRectStandardize(v39);
          height = v40.size.height;
        }
        else
        {
          v29 = v37.size.width * 0.5;
          if (v27 <= v37.size.width * 0.5)
            v30 = v27;
          else
            v30 = v37.size.width * 0.5;
        }
        if (v28 <= height * 0.5)
          v31 = v28;
        else
          v31 = height * 0.5;
        if (v30 == 0.0 || v31 == 0.0)
        {
          CG::Path::append_rect((CG::Path *)(cf + 16), &v35, this);
        }
        else
        {
          v32 = (CG::Path *)(cf + 16);
          if (v30 == v29 && v31 == height * 0.5)
          {
            CG::Path::append_ellipse(v32, &v35, 1, 0, (const CGAffineTransform *)this);
          }
          else
          {
            v34 = v30;
            CG::Path::append_continuous_rounded_rect(v32, &v35, *(CGSize *)(&v31 - 1), this);
          }
        }
      }
    }
  }
}

void CGPathAddRelativeArc(CGMutablePathRef path, const CGAffineTransform *matrix, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat delta)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGMutablePathRef v19;
  CGPath *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const CGAffineTransform *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGPoint v43;

  if (path)
  {
    v19 = path;
    if (CGPathDisableTypeValidation
      || (v20 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v20 == path))
    {
      v21 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)matrix, v7, v8, v9, v10, v11, v12);
      if (v21
        && CGFloatValidateWithLog(y, v21, v22, v23, v24, v25, v26, v27, v28)
      {
        if (fabs(startAngle) > 6283.18531 || fabs(delta) > 6283.18531)
        {
          CGPostError((uint64_t)"%s: invalid value for start or delta angle.", v36, v37, v38, v39, v40, v41, v42, (char)"CGPathAddRelativeArc");
        }
        else
        {
          v43.x = x;
          v43.y = y;
          CG::Path::add_arc_relative((CGMutablePathRef)((char *)v19 + 16), (float64x2_t *)&v43, radius, startAngle, delta, (float64x2_t *)matrix, 0);
        }
      }
    }
  }
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v12;
  CFTypeID v13;
  _BOOL8 is_valid;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *p_y;
  size_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CG::Path *v32;
  const CGAffineTransform *v33;
  const CGAffineTransform *v34;
  size_t v35;
  const CGPoint *v36;
  float64x2_t v37;

  if (path)
  {
    if (CGPathDisableTypeValidation)
    {
      v12 = 0;
      if (!count)
        return;
    }
    else
    {
      v13 = CFGetTypeID(path);
      v12 = v13 != CGPathGetTypeID();
      if (!count)
        return;
    }
    if (points)
    {
      if (!v12)
      {
        if (is_valid)
        {
          p_y = &points->y;
          v23 = count;
          while (1)
          {
            v24 = CGFloatValidateWithLog(*(p_y - 1), is_valid, v15, v16, v17, v18, v19, v20, v21);
            if (!v24)
              break;
            is_valid = CGFloatValidateWithLog(*p_y, v24, v25, v26, v27, v28, v29, v30, v31);
            if (!is_valid)
              break;
            p_y += 2;
            if (!--v23)
            {
              v32 = (CGMutablePathRef)((char *)path + 16);
              if (count == 2)
              {
                CG::Path::append_line_segment(v32, (__n128 *)points, (float64x2_t *)&points[1], m);
              }
              else
              {
                CG::Path::reserve_space(v32, count + 1, count + 1);
                CG::Path::move_to_point(v32, (float64x2_t *)m, v33, *(__n128 *)points);
                if (count >= 2)
                {
                  v35 = count - 1;
                  v36 = points + 1;
                  do
                  {
                    v37 = *(float64x2_t *)v36++;
                    CG::Path::add_line_to_point(v32, (float64x2_t *)m, v34, v37);
                    --v35;
                  }
                  while (v35);
                }
              }
              return;
            }
          }
        }
      }
    }
  }
}

void CGPathAddRects(CGMutablePathRef path, const CGAffineTransform *m, const CGRect *rects, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  BOOL v12;
  CFTypeID v13;
  CG::Path *v14;
  CGSize *p_size;
  CGRect v16;
  CGRect v17;

  if (path)
  {
    v8 = count;
    if (CGPathDisableTypeValidation)
    {
      v12 = 0;
      if (!count)
        return;
    }
    else
    {
      v13 = CFGetTypeID(path);
      v12 = v13 != CGPathGetTypeID();
      if (!v8)
        return;
    }
    if (rects
      && !v12
    {
      if (v8 >= 2)
        CG::Path::reserve_space((CGMutablePathRef)((char *)path + 16), 5 * v8, 5 * v8);
      v14 = (CGMutablePathRef)((char *)path + 16);
      p_size = &rects->size;
      do
      {
        v17 = *(CGRect *)&p_size[-1].width;
        p_size += 2;
        v16 = CGRectStandardize(v17);
        CG::Path::append_rect(v14, &v16, (float64x2_t *)m);
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t CGPathAddRegion(uint64_t cf, _anonymous_namespace_ *this, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  CFTypeID v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (cf)
  {
    v10 = cf;
    if (CGPathDisableTypeValidation || (v11 = CFGetTypeID((CFTypeRef)cf), cf = CGPathGetTypeID(), v11 == cf))
    {
      if ((_DWORD)cf)
        return (uint64_t)CG::Path::append_region((CG::Path *)(v10 + 16), a3, (float64x2_t *)this, v12, v13, v14, v15, v16);
    }
  }
  return cf;
}

uint64_t CGPathIsLine(uint64_t cf, _OWORD *a2)
{
  uint64_t v3;
  CFTypeID v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  char *v8;

  if (cf)
  {
    v3 = cf;
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID((CFTypeRef)cf), v4 == CGPathGetTypeID()))
    {
      v5 = *(_DWORD *)(v3 + 16);
      switch(v5)
      {
        case 9:
          if (*(_QWORD *)(v3 + 24) == 2 && *(_QWORD *)(v3 + 32) == 2)
          {
            v7 = *(_OWORD **)(v3 + 48);
            v8 = (char *)v7 + *(_QWORD *)(v3 + 40);
            if (!*(v8 - 1) && *(v8 - 2) == 1)
            {
              if (a2)
              {
                *a2 = *v7;
                v7 = *(_OWORD **)(v3 + 48);
              }
              v6 = v7 + 1;
              goto LABEL_10;
            }
          }
          break;
        case 8:
          if (*(_WORD *)(v3 + 24) == 2 && *(_WORD *)(v3 + 26) == 2 && (*(_DWORD *)(v3 + 28) & 0x3F) == 8)
          {
            if (a2)
              *a2 = *(_OWORD *)(v3 + 32);
            v6 = (_OWORD *)(v3 + 48);
            goto LABEL_10;
          }
          break;
        case 5:
          if (a2)
            *a2 = *(_OWORD *)(v3 + 24);
          v6 = (_OWORD *)(v3 + 40);
LABEL_10:
          a2[1] = *v6;
          return 1;
      }
    }
    return 0;
  }
  return cf;
}

uint64_t CGPathIsEllipse2(char *cf, CGRect *a2, BOOL *a3, uint64_t a4, CGAffineTransform *a5)
{
  CFTypeID v8;

  if (cf && (CGPathDisableTypeValidation || (v8 = CFGetTypeID(cf), v8 == CGPathGetTypeID())))
    return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, a3, 0, a5);
  else
    return 0;
}

uint64_t CGPathIsArc(uint64_t cf, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6)
{
  uint64_t v11;
  CFTypeID v12;
  __int128 v13;
  __int128 v14;

  if (cf)
  {
    v11 = cf;
    if ((CGPathDisableTypeValidation || (v12 = CFGetTypeID((CFTypeRef)cf), v12 == CGPathGetTypeID()))
      && *(_DWORD *)(v11 + 16) == 6)
    {
      if (a2)
      {
        *a2 = 0;
        a2[1] = 0;
      }
      if (a3)
        *a3 = 0x3FF0000000000000;
      if (a4)
        *a4 = 0;
      if (a5)
        *a5 = *(_QWORD *)(v11 + 72);
      if (a6)
      {
        v13 = *(_OWORD *)(v11 + 24);
        v14 = *(_OWORD *)(v11 + 56);
        a6[1] = *(_OWORD *)(v11 + 40);
        a6[2] = v14;
        *a6 = v13;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

BOOL CGPathIsPrimitive(_BOOL8 cf)
{
  uint64_t v1;
  CFTypeID v2;
  int v3;

  if (cf)
  {
    v1 = cf;
    if (CGPathDisableTypeValidation || (v2 = CFGetTypeID((CFTypeRef)cf), v2 == CGPathGetTypeID()))
    {
      cf = 1;
      switch(*(_DWORD *)(v1 + 16))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return cf;
        case 8:
          v3 = *(_DWORD *)(v1 + 28);
          cf = v3 == 16968 || v3 == 135752;
          break;
        default:
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

uint64_t CGPathIsValidGlyphPath(CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64_t v8;
  float64_t v9;
  double v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  void *v18;
  char *v19;
  BOOL v20;
  unint64_t v21;
  char *v22;
  double v23;
  double v24;
  unint64_t v26;
  double *v27;
  double v28;
  double v29;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  float64_t v37;
  float64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  float64x2_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  float64x2_t v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  uint64_t v50;
  float64x2_t v51;
  int v52;
  int v53;
  float64_t v54;
  double *v55;
  uint64_t *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t *v62;
  int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int v69;
  int v70;
  float64_t v71;
  int v72;
  int v73;
  float64_t v74;
  int v75;
  _QWORD *v76;
  float64x2_t v78;
  float64x2_t v79;
  char v80;
  float64x2_t info[4];
  float64x2_t v82[4];

  v82[3].f64[1] = *(float64_t *)MEMORY[0x1E0C80C00];
  if (!cf)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v2 = CFGetTypeID(cf);
    if (v2 != CGPathGetTypeID())
      return 0;
  }
  info[0].f64[0] = 0.0;
  CGPathApply((CGPathRef)cf, info, (CGPathApplierFunction)process_subpath_split);
  v8 = info[0].f64[0];
  if (!*(_QWORD *)&info[0].f64[0])
    return 1;
  v9 = 0.0;
  do
  {
    v10 = **(double **)&v8;
    v11 = *(char **)(*(_QWORD *)&v8 + 16);
    if (!v11)
      goto LABEL_8;
    if (*((_DWORD *)v11 + 4))
      goto LABEL_8;
    v12 = *(uint64_t **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_8;
    while (1)
    {
      v13 = (uint64_t *)*v12;
      v14 = *((_DWORD *)v12 + 4);
      if (!v13)
        break;
      v15 = v14 - 1;
      v12 = v13;
      if (v15 >= 3)
        goto LABEL_8;
    }
    if (v14 != 4)
      goto LABEL_8;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(char **)v11;
      if (*((_DWORD *)v11 + 4) != 1
        || *((_DWORD *)v19 + 4) != 4
        || (*((double *)v11 + 3) == *((double *)v19 + 3)
          ? (v20 = *((double *)v11 + 4) == *((double *)v19 + 4))
          : (v20 = 0),
            !v20))
      {
        if (!v16 || !v19)
          goto LABEL_30;
        v21 = *((_QWORD *)v11 + 1);
        if (v21)
        {
          v22 = &v16[16 * *((_QWORD *)v16 + 1)];
          v23 = *((double *)v22 + 1);
          v24 = *((double *)v22 + 2);
          if (v23 != *((double *)v11 + 3) || v24 != *((double *)v11 + 4))
          {
LABEL_30:
            *(_QWORD *)v11 = v18;
            ++v17;
            v16 = v11;
            v18 = v11;
            goto LABEL_39;
          }
          v26 = 0;
          v27 = (double *)(v11 + 48);
          while (v21 - 1 != v26)
          {
            v28 = *(v27 - 1);
            v29 = *v27;
            v27 += 2;
            ++v26;
            if (v23 != v28 || v24 != v29)
            {
              if (v26 < v21)
                goto LABEL_30;
              break;
            }
          }
        }
      }
      free(v11);
      v16 = 0;
LABEL_39:
      v11 = v19;
    }
    while (v19);
    if (v17 > 2)
    {
      if (v17 == 3)
      {
        v32 = *(void **)v18;
        if (*(_DWORD *)(*(_QWORD *)v18 + 16) == 1)
        {
          while (1)
          {
            v33 = v18;
            v18 = v32;
            free(v33);
            if (!v18)
              break;
            v32 = *(void **)v18;
          }
          goto LABEL_52;
        }
      }
      else if (!v18)
      {
        goto LABEL_52;
      }
      v34 = 0;
      do
      {
        v35 = v18;
        v18 = *(void **)v18;
        *v35 = v34;
        v34 = v35;
      }
      while (v18);
      *(_QWORD *)(*(_QWORD *)&v8 + 16) = v35;
      **(float64_t **)&v8 = v9;
      v9 = v8;
    }
    else
    {
      if (v18)
      {
        do
        {
          v31 = *(void **)v18;
          free(v18);
          v18 = v31;
        }
        while (v31);
      }
LABEL_52:
      *(_QWORD *)(*(_QWORD *)&v8 + 16) = 0;
LABEL_8:
      subpath_release(*(_QWORD **)&v8);
    }
    v8 = v10;
  }
  while (v10 != 0.0);
  if (v9 == 0.0)
    return 1;
  v37 = v9;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)&v37 + 8) == -1)
    {
      *(_DWORD *)(*(_QWORD *)&v37 + 8) = 0;
      v38 = v9;
      do
      {
        if (*(_QWORD *)&v38 != *(_QWORD *)&v37)
        {
          v39 = *(_QWORD **)(*(_QWORD *)&v37 + 16);
          if (*v39)
          {
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = *(float64x2_t *)&v39[2 * v39[1] + 1];
              v80 = 0;
              v43 = *(_QWORD *)(*(_QWORD *)&v38 + 16);
              v44 = *(_QWORD **)v43;
              if (*(_QWORD *)v43)
              {
                v45 = 0;
                v46 = vsubq_f64(*(float64x2_t *)(v43 + 24), v42);
                v78 = v42;
                do
                {
                  info[0] = v46;
                  v47 = v44[1];
                  if (v47)
                  {
                    v48 = (float64x2_t *)(v44 + 3);
                    v49 = v82;
                    v50 = v44[1];
                    do
                    {
                      v51 = *v48++;
                      *v49++ = vsubq_f64(v51, v42);
                      --v50;
                    }
                    while (v50);
                    v46 = info[v47];
                  }
                  v79 = v46;
                  v52 = crossing_count(info, v47, &v80, v3, v4, v5, v6, v7);
                  if (v80)
                  {
                    v53 = 1;
                    goto LABEL_73;
                  }
                  v45 += v52;
                  v44 = (_QWORD *)*v44;
                  v42 = v78;
                  v46 = v79;
                }
                while (v44);
                if (!v45)
                  goto LABEL_71;
                ++v41;
              }
              else
              {
LABEL_71:
                v53 = 0;
LABEL_73:
                if (!v53)
                  ++v40;
              }
              v39 = (_QWORD *)*v39;
            }
            while (*v39);
            if (v41 && (!v40 || v41 > v40 + 1))
              ++*(_DWORD *)(*(_QWORD *)&v37 + 8);
          }
        }
        v38 = **(double **)&v38;
      }
      while (v38 != 0.0);
    }
    v37 = **(double **)&v37;
  }
  while (v37 != 0.0);
  v54 = v9;
  while (2)
  {
    if (*(_DWORD *)(*(_QWORD *)&v54 + 12) == -2)
    {
      v55 = *(double **)(*(_QWORD *)&v54 + 16);
      v56 = *(uint64_t **)v55;
      if (*(_QWORD *)v55)
      {
        v58 = v55[3];
        v57 = v55[4];
        v59 = 0.0;
        while (1)
        {
          v60 = v58;
          v61 = v57;
          v62 = &v56[2 * v56[1]];
          v58 = *((double *)v62 + 1);
          v57 = *((double *)v62 + 2);
          v63 = *((_DWORD *)v56 + 4);
          if (v63 == 3)
            break;
          if (v63 == 2)
          {
            v64 = (v58 + v60 + *((double *)v56 + 3) * 2.0) * 0.25;
            v65 = v57 + v61 + *((double *)v56 + 4) * 2.0;
            v66 = -(v64 * v61);
            v67 = v65 * 0.25;
LABEL_90:
            v59 = v59 + v66 + v60 * v67;
            v61 = v67;
            v60 = v64;
          }
          v59 = v59 + v60 * v57 - v58 * v61;
          v56 = (uint64_t *)*v56;
          if (!v56)
            goto LABEL_94;
        }
        v64 = (v58 + v60 + *((double *)v56 + 3) * 3.0 + *((double *)v56 + 5) * 3.0) * 0.125;
        v68 = v57 + v61 + *((double *)v56 + 4) * 3.0 + *((double *)v56 + 6) * 3.0;
        v66 = -(v64 * v61);
        v67 = v68 * 0.125;
        goto LABEL_90;
      }
      v59 = 0.0;
LABEL_94:
      v69 = v59 > 0.0;
      if (v59 == 0.0)
        v69 = -1;
      *(_DWORD *)(*(_QWORD *)&v54 + 12) = v69;
    }
    v54 = **(double **)&v54;
    if (v54 != 0.0)
      continue;
    break;
  }
  v70 = 0;
  v71 = v9;
  do
  {
    if (!*(_DWORD *)(*(_QWORD *)&v71 + 8))
    {
      v72 = *(_DWORD *)(*(_QWORD *)&v71 + 12);
      if (v72 != -1)
      {
        if (v72 == 1)
        {
          ++LODWORD(v54);
        }
        else
        {
          if (v72)
            abort();
          ++v70;
        }
      }
    }
    v71 = **(double **)&v71;
  }
  while (v71 != 0.0);
  v73 = v70 < SLODWORD(v54);
  v74 = v9;
  while (2)
  {
    v75 = *(_DWORD *)(*(_QWORD *)&v74 + 12);
    if ((*(_BYTE *)(*(_QWORD *)&v74 + 8) & 1) == 0)
    {
      if (v75 != v73)
        break;
      goto LABEL_112;
    }
    if (v75 != v73)
    {
LABEL_112:
      v74 = **(double **)&v74;
      if (v74 == 0.0)
      {
        v36 = 1;
        goto LABEL_115;
      }
      continue;
    }
    break;
  }
  v36 = 0;
  do
  {
LABEL_115:
    v76 = **(_QWORD ***)&v9;
    subpath_release(*(_QWORD **)&v9);
    v9 = *(double *)&v76;
  }
  while (*(double *)&v76 != 0.0);
  return v36;
}

CFTypeRef CGPathCreateByNormalizingGlyphPath(CFTypeRef cf)
{
  CFTypeRef v1;
  CFTypeID v2;

  v1 = cf;
  if (cf)
  {
    if (CGPathDisableTypeValidation || (v2 = CFGetTypeID(cf), v2 == CGPathGetTypeID()))
      CFRetain(v1);
    else
      return 0;
  }
  return v1;
}

void CGPathPrint(const void *a1, FILE *a2)
{
  FILE *v2;
  const __CFString *v3;
  const char *CStringPtr;

  if (a2)
    v2 = a2;
  else
    v2 = (FILE *)*MEMORY[0x1E0C80C20];
  v3 = CFCopyDescription(a1);
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  fprintf_l(v2, 0, "%s", CStringPtr);
  CFRelease(v3);
}

void CGPathSaveAsImage(const CGPath *a1, char *a2)
{
  double width;
  double height;
  const CGPath *v6;
  CGColorSpace *v7;
  CGContext *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGColor *ConstantColor;
  CGImageRef Image;
  CGAffineTransform transform;
  CGRect BoundingBox;
  CGRect v26;

  BoundingBox = CGPathGetBoundingBox(a1);
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tx = 5.0 - BoundingBox.origin.x;
  transform.ty = 5.0 - BoundingBox.origin.y;
  v6 = CGPathCreateMutableCopyByTransformingPath(a1, &transform);
  v7 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  v8 = CGBitmapContextCreateWithData(0, (unint64_t)(width + 10.0), (unint64_t)(height + 10.0), 8uLL, 0, v7, 1u, 0, 0);
  CGContextErase((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
  CGContextAddPath(v8, v6);
  clip((uint64_t)v8, 0, v16, v17, v18, v19, v20, v21);
  if (v6)
    CFRelease(v6);
  ConstantColor = CGColorGetConstantColor(CFSTR("kCGColorBlack"));
  CGContextSetFillColorWithColor(v8, ConstantColor);
  v26.size.width = (double)(unint64_t)(width + 10.0);
  v26.size.height = (double)(unint64_t)(height + 10.0);
  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  CGContextFillRect(v8, v26);
  Image = CGBitmapContextCreateImage(v8);
  if (v8)
    CFRelease(v8);
  CGImageWriteToFile(Image, a2);
  if (Image)
    CFRelease(Image);
}

uint64_t CGPathApplyDashedPath(uint64_t cf, const CGAffineTransform *a2, uint64_t a3, _anonymous_namespace_ *this, const void *a5, unint64_t a6, double *a7, uint64_t a8, double a9)
{
  uint64_t v16;
  _BOOL4 v17;
  CFTypeID v18;
  double *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  path_iterator *v25;
  _QWORD v26[6];
  _QWORD *v27;

  if (cf)
  {
    v16 = cf;
    if (CGPathDisableTypeValidation)
    {
      v17 = 1;
      if (!a3)
        return cf;
    }
    else
    {
      v18 = CFGetTypeID((CFTypeRef)cf);
      cf = CGPathGetTypeID();
      v17 = v18 == cf;
      if (!a3)
        return cf;
    }
    if (v17)
    {
      if ((_DWORD)cf)
      {
        v20 = *(_DWORD *)(v16 + 16);
        v19 = (double *)(v16 + 16);
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 0x40000000;
        v26[2] = __CGPathApplyDashedPath_block_invoke;
        v26[3] = &__block_descriptor_tmp_11_16158;
        v26[4] = a3;
        v26[5] = a2;
        if ((v20 - 10) >= 0xFFFFFFF7)
        {
          if (!a5 || !a6)
            CG::Path::apply(v19, (uint64_t)v26);
          v27 = v26;
          v21 = operator new();
          v22 = v21;
          *(_QWORD *)(v21 + 8) = &v27;
          *(_OWORD *)(v21 + 32) = unk_1E16265E0;
          *(_QWORD *)(v21 + 48) = 0;
          *(_DWORD *)v21 = 1;
          if (!a7
            || *a7 == -8.98846567e307 && a7[1] == -8.98846567e307 && a7[2] == 1.79769313e308 && a7[3] == 1.79769313e308)
          {
            do
              v23 = __ldxr((unsigned int *)v21);
            while (__stxr(v23 + 1, (unsigned int *)v21));
            v24 = (unsigned int *)v21;
          }
          else
          {
            v24 = (unsigned int *)path_iterator_cull_create((uint64_t)a7, (unsigned int *)v21);
          }
          v25 = (path_iterator *)path_iterator_dasher_create((double *)this, a5, a6, v24, a9);
          CG::Path::apply_iterator((CG::Path *)v19, v25);
          if (v25)
            path_iterator::release((uint64_t)v25);
          path_iterator::release((uint64_t)v24);
          return path_iterator::release(v22);
        }
      }
    }
  }
  return cf;
}

uint64_t CGPathApplyStrokedDashedPath(uint64_t cf, const CGAffineTransform *a2, uint64_t a3, float64x2_t *this, const void *a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  int v15;
  int v16;
  uint64_t v24;
  _BOOL4 v25;
  CFTypeID v26;
  CG::Path *v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  CGSize v36;
  double v37;
  float64x2_t v38;
  path_iterator *v39;
  unsigned int v40;
  _QWORD v41[6];
  CGRect v42;
  _QWORD *v43;

  if (cf)
  {
    v15 = a8;
    v16 = a7;
    v24 = cf;
    if (CGPathDisableTypeValidation)
    {
      v25 = 1;
      if (!a3)
        return cf;
    }
    else
    {
      v26 = CFGetTypeID((CFTypeRef)cf);
      cf = CGPathGetTypeID();
      v25 = v26 == cf;
      if (!a3)
        return cf;
    }
    if (v25)
    {
      if ((_DWORD)cf)
      {
        v28 = *(_DWORD *)(v24 + 16);
        v27 = (CG::Path *)(v24 + 16);
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 0x40000000;
        v41[2] = __CGPathApplyStrokedDashedPath_block_invoke;
        v41[3] = &__block_descriptor_tmp_12_16159;
        v41[4] = a3;
        v41[5] = a2;
        if ((v28 - 10) >= 0xFFFFFFF7)
        {
          v43 = v41;
          v29 = operator new();
          *(_QWORD *)(v29 + 8) = &v43;
          *(_OWORD *)(v29 + 32) = unk_1E16265E0;
          *(_QWORD *)(v29 + 48) = 0;
          *(_DWORD *)v29 = 1;
          v30 = (unsigned int *)path_iterator_stroker_create((const CGAffineTransform *)this, v16, v15, (unsigned int *)v29, a12, a10, a11);
          v31 = v30;
          if (!a13
            || (*(double *)a13 == -8.98846567e307 ? (v32 = *(double *)(a13 + 8) == -8.98846567e307) : (v32 = 0),
                v32 ? (v33 = *(double *)(a13 + 16) == 1.79769313e308) : (v33 = 0),
                v33 && *(double *)(a13 + 24) == 1.79769313e308))
          {
            do
              v34 = __ldxr(v30);
            while (__stxr(v34 + 1, v30));
            v35 = v30;
            if (!a5)
              goto LABEL_31;
          }
          else
          {
            v36 = *(CGSize *)(a13 + 16);
            v42.origin = *(CGPoint *)a13;
            v42.size = v36;
            v37 = a10 * a11 + a10 * a11;
            if (v15)
              v37 = a10;
            if (this)
              v38 = vmulq_n_f64(vaddq_f64(vabsq_f64(*this), vabsq_f64(this[1])), v37);
            else
              v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v37, 0);
            v42 = CGRectInset(v42, -v38.f64[0], -v38.f64[1]);
            v35 = (unsigned int *)path_iterator_cull_create((uint64_t)&v42, v31);
            if (!a5)
              goto LABEL_31;
          }
          if (a6)
          {
            v39 = (path_iterator *)path_iterator_dasher_create(this->f64, a5, a6, v35, a9);
            CG::Path::apply_iterator(v27, v39);
            if (!v39)
              goto LABEL_34;
            goto LABEL_33;
          }
          do
LABEL_31:
            v40 = __ldxr(v35);
          while (__stxr(v40 + 1, v35));
          CG::Path::apply_iterator(v27, (path_iterator *)v35);
          v39 = (path_iterator *)v35;
LABEL_33:
          path_iterator::release((uint64_t)v39);
LABEL_34:
          path_iterator::release((uint64_t)v35);
          path_iterator::release((uint64_t)v31);
          return path_iterator::release(v29);
        }
      }
    }
  }
  return cf;
}

void CGPathApplyIterator(char *cf, path_iterator *a2)
{
  _BOOL4 v4;
  CFTypeID v5;

  if (cf)
  {
    if (CGPathDisableTypeValidation)
    {
      v4 = 1;
      if (!a2)
        return;
    }
    else
    {
      v5 = CFGetTypeID(cf);
      v4 = v5 == CGPathGetTypeID();
      if (!a2)
        return;
    }
    if (v4)
      CG::Path::apply_iterator((CG::Path *)(cf + 16), a2);
  }
}

CFMutableDataRef CGPathCreateEncodedData(CFMutableDataRef cf, CFDictionaryRef theDict)
{
  CFMutableDataRef v3;
  CFTypeID v4;
  const void *Value;
  double *v6;
  double v7;
  uint64_t i;
  __CFData *v9;
  unint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __CFData *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  CFMutableDataRef theData;
  BOOL v21;
  UInt8 bytes[8];

  if (cf)
  {
    v3 = cf;
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID(cf), v4 == CGPathGetTypeID()))
    {
      theData = 0;
      v21 = 0;
      if (theDict)
      {
        Value = CFDictionaryGetValue(theDict, CFSTR("kCGPathEncodingOptionTruncatePrecision"));
        if (Value)
          v21 = Value == (const void *)*MEMORY[0x1E0C9AE50];
      }
      switch(*((_DWORD *)v3 + 4))
      {
        case 1:
          create_initialized_encoding_buffer((uint64_t)&theData, 53, 1);
          v6 = (double *)((char *)v3 + 24);
          goto LABEL_15;
        case 2:
          create_initialized_encoding_buffer((uint64_t)&theData, 69, 2);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 9));
          v7 = *((double *)v3 + 10);
          goto LABEL_18;
        case 3:
          create_initialized_encoding_buffer((uint64_t)&theData, 117, 3);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          for (i = 0; i != 64; i += 16)
          {
            encode_CGFloat((uint64_t)&theData, *(double *)((char *)v3 + i + 72));
            encode_CGFloat((uint64_t)&theData, *(double *)((char *)v3 + i + 80));
          }
          return theData;
        case 4:
          create_initialized_encoding_buffer((uint64_t)&theData, 54, 4);
          bytes[0] = *((_BYTE *)v3 + 73) | (2 * *((_BYTE *)v3 + 72));
          CFDataAppendBytes(theData, bytes, 1);
          v6 = (double *)((char *)v3 + 24);
LABEL_15:
          encode_CGAffineTransform((uint64_t)&theData, v6);
          return theData;
        case 5:
          create_initialized_encoding_buffer((uint64_t)&theData, 37, 5);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 3));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 4));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 5));
          v7 = *((double *)v3 + 6);
          goto LABEL_18;
        case 6:
          create_initialized_encoding_buffer((uint64_t)&theData, 85, 6);
          encode_CGAffineTransform((uint64_t)&theData, (double *)v3 + 3);
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 9));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 10));
          encode_CGFloat((uint64_t)&theData, *((double *)v3 + 11));
          v7 = *((double *)v3 + 12);
LABEL_18:
          encode_CGFloat((uint64_t)&theData, v7);
          break;
        case 8:
          create_initialized_encoding_buffer((uint64_t)&theData, (16 * *((unsigned __int16 *)v3 + 12)) | 0xA, 8);
          bytes[0] = *((_BYTE *)v3 + 26);
          v9 = theData;
          CFDataAppendBytes(theData, bytes, 1);
          *(_DWORD *)bytes = *((_DWORD *)v3 + 7);
          CFDataAppendBytes(v9, bytes, 4);
          if (*((_WORD *)v3 + 12))
          {
            v10 = 0;
            v11 = (double *)((char *)v3 + 40);
            do
            {
              encode_CGFloat((uint64_t)&theData, *(v11 - 1));
              v12 = *v11;
              v11 += 2;
              encode_CGFloat((uint64_t)&theData, v12);
              ++v10;
            }
            while (v10 < *((unsigned __int16 *)v3 + 12));
          }
          break;
        case 9:
          v13 = *((_QWORD *)v3 + 3);
          v14 = *((_QWORD *)v3 + 4);
          create_initialized_encoding_buffer((uint64_t)&theData, v14 + 16 * v13 + 21, 9);
          *(_QWORD *)bytes = v14;
          v15 = theData;
          CFDataAppendBytes(theData, bytes, 8);
          *(_QWORD *)bytes = v13;
          CFDataAppendBytes(v15, bytes, 8);
          if (v14)
          {
            v16 = 0;
            v17 = -v14;
            do
            {
              bytes[0] = *(_BYTE *)(*((_QWORD *)v3 + 6) + *((_QWORD *)v3 + 5) + v16 - 1);
              CFDataAppendBytes(v15, bytes, 1);
              --v16;
            }
            while (v17 != v16);
          }
          if (v13)
          {
            v18 = 0;
            do
            {
              v19 = (double *)(*((_QWORD *)v3 + 6) + v18);
              encode_CGFloat((uint64_t)&theData, *v19);
              encode_CGFloat((uint64_t)&theData, v19[1]);
              v18 += 16;
              --v13;
            }
            while (v13);
          }
          break;
        default:
          return theData;
      }
      return theData;
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

uint64_t CGPathCreateWithData(const __CFData *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Instance;
  CG::Path *v10;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v13;
  int v14;
  int v16;
  double *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const UInt8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  UInt8 v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  unsigned int v65;
  UInt8 v66;
  BOOL v67;
  uint64_t v68;
  double *v69;
  unint64_t v70;
  BOOL v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  double v75;
  double v76;
  int v77;
  unint64_t v78;
  const UInt8 *v79;
  double *v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  double v90;
  uint64_t v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double *v98;
  const UInt8 *v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  const UInt8 *v103;
  unsigned __int8 v104;
  uint64_t v105;
  unint64_t v106;

  if (!a1)
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v3, v4, v5, v6, v7, v8);
  v10 = (CG::Path *)(Instance + 16);
  if (*(_DWORD *)(Instance + 16))
  {
LABEL_7:
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  BytePtr = CFDataGetBytePtr(a1);
  v103 = BytePtr;
  Length = CFDataGetLength(a1);
  v106 = Length;
  if ((uint64_t)Length < 4)
    goto LABEL_6;
  if (*(_DWORD *)BytePtr != 1)
    goto LABEL_6;
  v13 = Length;
  v14 = HIWORD(*(_DWORD *)BytePtr) & 1;
  v104 = HIWORD(*(_DWORD *)BytePtr) & 1;
  if (Length < 5)
    goto LABEL_6;
  v16 = BytePtr[4];
  v105 = 5;
  switch(v16)
  {
    case 1:
      *(_DWORD *)(Instance + 16) = 1;
      v17 = (double *)(Instance + 24);
      goto LABEL_60;
    case 2:
      *(_DWORD *)(Instance + 16) = 2;
      if (!decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24)))
        goto LABEL_6;
      v18 = v106;
      if (v104)
      {
        if ((v106 & 0x8000000000000000) != 0)
        {
          v20 = 0;
          v67 = 0;
          *(_QWORD *)(Instance + 72) = 0;
          v98 = (double *)(Instance + 80);
          v92 = 0.0;
        }
        else
        {
          v92 = 0.0;
          if (v105 + 4 <= v106)
          {
            v101 = *(float *)&v103[v105];
            v105 += 4;
            v93 = v101;
            v20 = 1;
          }
          else
          {
            v20 = 0;
            v93 = 0.0;
          }
          *(double *)(Instance + 72) = v93;
          v98 = (double *)(Instance + 80);
          if (v105 + 4 <= v18)
          {
            v92 = *(float *)&v103[v105];
            v67 = 1;
          }
          else
          {
            v67 = 0;
          }
        }
        *v98 = v92;
        goto LABEL_105;
      }
      if ((v106 & 0x8000000000000000) == 0)
      {
        v19 = v105 + 8;
        if (v105 + 8 <= v106)
        {
          *(_QWORD *)(Instance + 72) = *(_QWORD *)&v103[v105];
          v105 = v19;
          v20 = 1;
        }
        else
        {
          v20 = 0;
        }
        if (v105 + 8 <= v18)
        {
          *(_QWORD *)(Instance + 80) = *(_QWORD *)&v103[v105];
          goto LABEL_104;
        }
      }
      goto LABEL_7;
    case 3:
      *(_DWORD *)(Instance + 16) = 3;
      v21 = decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24));
      v22 = 0;
      v23 = v104;
      v25 = v105;
      v24 = v106;
      v26 = v103;
      do
      {
        if ((v21 & 1) != 0)
        {
          v27 = Instance + v22;
          if (v23)
          {
            if ((v24 & 0x8000000000000000) != 0)
            {
              v29 = 0;
              v31 = 0;
              *(_QWORD *)(v27 + 72) = 0;
              v33 = 0.0;
            }
            else
            {
              v32 = v25 + 4;
              v33 = 0.0;
              v29 = v25 + 4 <= v24;
              if (v25 + 4 > v24)
              {
                v35 = v25 + 4;
                v32 = v25;
                v34 = 0.0;
              }
              else
              {
                v34 = *(float *)&v26[v25];
                v35 = v25 + 8;
              }
              *(double *)(v27 + 72) = v34;
              if (v35 <= v24)
              {
                v33 = *(float *)&v26[v32];
                v31 = 1;
                v25 = v35;
              }
              else
              {
                v31 = 0;
                v25 = v32;
              }
            }
            *(double *)(Instance + v22 + 80) = v33;
          }
          else if ((v24 & 0x8000000000000000) != 0)
          {
            v29 = 0;
            v31 = 0;
          }
          else
          {
            v28 = v25 + 8;
            v29 = v25 + 8 <= v24;
            if (v25 + 8 > v24)
            {
              v30 = v25 + 8;
              v28 = v25;
            }
            else
            {
              *(_QWORD *)(v27 + 72) = *(_QWORD *)&v26[v25];
              v30 = v25 + 16;
            }
            if (v30 <= v24)
            {
              *(_QWORD *)(Instance + v22 + 80) = *(_QWORD *)&v26[v28];
              v31 = 1;
              v25 = v30;
            }
            else
            {
              v31 = 0;
              v25 = v28;
            }
          }
          v21 = v29 & v31;
        }
        else
        {
          v21 = 0;
        }
        v22 += 16;
      }
      while (v22 != 64);
      goto LABEL_133;
    case 4:
      *(_DWORD *)v10 = 4;
      if (Length <= 5)
      {
        *(_WORD *)(Instance + 72) = 0;
        goto LABEL_6;
      }
      v45 = BytePtr[5];
      v105 = 6;
      v17 = (double *)(Instance + 24);
      *(_BYTE *)(Instance + 72) = (v45 & 2) != 0;
      *(_BYTE *)(Instance + 73) = v45 & 1;
LABEL_60:
      if ((decode_CGAffineTransform((uint64_t)&v103, v17) & 1) != 0)
        return Instance;
      goto LABEL_7;
    case 5:
      *(_DWORD *)(Instance + 16) = 5;
      if (v14)
      {
        if ((uint64_t)Length < 9)
        {
          v90 = 0.0;
          v91 = 5;
        }
        else
        {
          v90 = *(float *)(BytePtr + 5);
          v91 = 9;
        }
        *(double *)(Instance + 24) = v90;
        v95 = v91 + 4;
        if (v91 + 4 > Length)
        {
          *(_QWORD *)(Instance + 32) = 0;
          goto LABEL_6;
        }
        *(double *)(Instance + 32) = *(float *)&BytePtr[v91];
        if ((uint64_t)Length < 9)
          goto LABEL_6;
        v96 = 0.0;
        if (v91 + 8 <= Length)
        {
          v97 = *(float *)&BytePtr[v95];
          v20 = 1;
          v95 += 4;
        }
        else
        {
          v20 = 0;
          v97 = 0.0;
        }
        *(double *)(Instance + 40) = v97;
        if (v95 + 4 <= Length)
          v96 = *(float *)&BytePtr[v95];
        v67 = v95 + 4 <= Length;
        *(double *)(Instance + 48) = v96;
      }
      else
      {
        if ((uint64_t)Length < 13)
          goto LABEL_6;
        *(_QWORD *)(Instance + 24) = *(_QWORD *)(BytePtr + 5);
        v49 = v106;
        if ((v106 & 0x8000000000000000) != 0 || v106 < 0x15)
          goto LABEL_6;
        *(_QWORD *)(Instance + 32) = *(_QWORD *)(BytePtr + 13);
        if (v49 >= 0x1D)
        {
          v50 = 29;
          *(_QWORD *)(Instance + 40) = *(_QWORD *)(BytePtr + 21);
          v20 = 1;
        }
        else
        {
          v20 = 0;
          v50 = 21;
        }
        if (v50 + 8 > v49)
          goto LABEL_7;
        *(_QWORD *)(Instance + 48) = *(_QWORD *)&BytePtr[v50];
LABEL_104:
        v67 = 1;
      }
LABEL_105:
      if (v20 && v67)
        return Instance;
      goto LABEL_7;
    case 6:
      *(_DWORD *)(Instance + 16) = 6;
      if (!decode_CGAffineTransform((uint64_t)&v103, (double *)(Instance + 24)))
        goto LABEL_6;
      v36 = v106;
      if (!v104)
      {
        if ((v106 & 0x8000000000000000) == 0)
        {
          v37 = v105 + 8;
          if (v105 + 8 <= v106)
          {
            v38 = v103;
            *(_QWORD *)(Instance + 72) = *(_QWORD *)&v103[v105];
            v39 = v37 + 8;
            if (v37 + 8 <= v36)
            {
              *(_QWORD *)(Instance + 80) = *(_QWORD *)&v38[v37];
              v40 = v37 + 16;
              if (v39 + 8 <= v36)
              {
                *(_QWORD *)(Instance + 88) = *(_QWORD *)&v38[v39];
                if ((v36 & 0x8000000000000000) == 0 && v40 + 8 <= v36)
                {
                  *(_QWORD *)(Instance + 96) = *(_QWORD *)&v38[v40];
                  return Instance;
                }
              }
            }
          }
        }
        goto LABEL_6;
      }
      if ((v106 & 0x8000000000000000) != 0 || (v94 = v105 + 4, v105 + 4 > v106))
      {
        *(_QWORD *)(Instance + 72) = 0;
        goto LABEL_6;
      }
      v99 = v103;
      *(double *)(Instance + 72) = *(float *)&v103[v105];
      v100 = v94 + 4;
      if (v94 + 4 > v36)
      {
        *(_QWORD *)(Instance + 80) = 0;
        goto LABEL_6;
      }
      *(double *)(Instance + 80) = *(float *)&v99[v94];
      v102 = v94 + 8;
      if (v100 + 4 > v36)
      {
        *(_QWORD *)(Instance + 88) = 0;
        goto LABEL_6;
      }
      *(double *)(Instance + 88) = *(float *)&v99[v100];
      if ((v36 & 0x8000000000000000) == 0 && v102 + 4 <= v36)
      {
        *(double *)(Instance + 96) = *(float *)&v99[v102];
        return Instance;
      }
      *(_QWORD *)(Instance + 96) = 0;
      goto LABEL_7;
    case 8:
      if (Length <= 5)
      {
        *(_DWORD *)(Instance + 16) = v16;
        *(_QWORD *)(Instance + 24) = 0;
        goto LABEL_7;
      }
      v46 = BytePtr[5];
      v21 = Length > 9;
      if (v13 < 0xA)
      {
        v47 = 0;
        v48 = 6;
      }
      else
      {
        v47 = *(_DWORD *)(BytePtr + 6);
        v48 = 10;
      }
      if (v46 > 0xA)
        goto LABEL_6;
      if (!BytePtr[5])
      {
        *(_DWORD *)(Instance + 16) = v16;
        *(_DWORD *)(Instance + 24) = 0;
        *(_DWORD *)(Instance + 28) = v47;
        if (v13 <= 9)
          goto LABEL_7;
        return Instance;
      }
      v51 = 0;
      v52 = 0;
      while (1)
      {
        v53 = (v47 >> v51) & 7;
        if (v53 > 4)
          break;
        v52 += point_counts[v53];
        v51 += 3;
        if (3 * v46 == v51)
          goto LABEL_111;
      }
      v21 = 0;
LABEL_111:
      if (v52 > 7)
        goto LABEL_6;
      *(_DWORD *)(Instance + 16) = v16;
      *(_WORD *)(Instance + 24) = v52;
      *(_WORD *)(Instance + 26) = v46;
      *(_DWORD *)(Instance + 28) = v47;
      if (v52)
      {
        v68 = v52;
        v69 = (double *)(Instance + 40);
        do
        {
          if ((v21 & 1) != 0)
          {
            if (v14)
            {
              v74 = v48 + 4;
              v75 = 0.0;
              v71 = v48 + 4 <= v13;
              if (v48 + 4 > v13)
              {
                v70 = v48 + 4;
                v74 = v48;
                v76 = 0.0;
              }
              else
              {
                v76 = *(float *)&BytePtr[v48];
                v70 = v48 + 8;
              }
              *(v69 - 1) = v76;
              v73 = v70 <= v13;
              if (v70 > v13)
                v70 = v74;
              else
                v75 = *(float *)&BytePtr[v74];
              *v69 = v75;
            }
            else
            {
              v70 = v48 + 8;
              v71 = v48 + 8 <= v13;
              if (v48 + 8 > v13)
              {
                v72 = v48 + 8;
                v70 = v48;
              }
              else
              {
                *(v69 - 1) = *(double *)&BytePtr[v48];
                v72 = v48 + 16;
              }
              if (v72 <= v13)
              {
                *v69 = *(double *)&BytePtr[v70];
                v73 = 1;
                v70 = v72;
              }
              else
              {
                v73 = 0;
              }
            }
            v21 = v71 && v73;
            v48 = v70;
          }
          else
          {
            v21 = 0;
          }
          v69 += 2;
          --v68;
        }
        while (v68);
      }
LABEL_133:
      if ((v21 & 1) == 0)
        goto LABEL_6;
      return Instance;
    case 9:
      if (Length >= 0xD)
      {
        v41 = *(_QWORD *)(BytePtr + 5);
        if (Length >= 0x15)
        {
          v42 = *(_QWORD *)(BytePtr + 13);
          v43 = 1;
          v44 = 21;
        }
        else
        {
          v42 = 0;
          v43 = 0;
          v44 = 13;
        }
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 5;
      }
      *(_DWORD *)v10 = v16;
      v54 = v44 + v41;
      v55 = __CFADD__(v44, v41);
      v56 = v55 << 63 >> 63;
      if (v56 != v55 || v56 < 0)
        goto LABEL_6;
      v57 = v14 == 0;
      v58 = 8;
      if (v57)
        v58 = 16;
      if (!is_mul_ok(v42, v58))
        goto LABEL_6;
      v59 = v42 * v58;
      v60 = __CFADD__(v54, v59);
      v61 = v54 + v59;
      if (v60 || v61 > Length)
        goto LABEL_6;
      CG::Path::reserve_space(v10, v42, v41);
      if (!v41)
      {
        v65 = 0;
        goto LABEL_137;
      }
      v64 = 0;
      v65 = 0;
      while (2)
      {
        if (v44 + 1 > v13)
        {
          v66 = 0;
          v43 = 0;
          goto LABEL_96;
        }
        v66 = BytePtr[v44];
        if (v66 <= 4u)
        {
          if (v66 == 4)
            ++v65;
          ++v44;
LABEL_96:
          *(_BYTE *)(*(_QWORD *)(Instance + 48) + *(_QWORD *)(Instance + 40) + v64-- - 1) = v66;
          if (-v41 == v64)
            goto LABEL_137;
          continue;
        }
        break;
      }
      v43 = 0;
      *(_QWORD *)(Instance + 32) = 0;
      ++v44;
LABEL_137:
      if (v42)
      {
        v77 = v104;
        v78 = v106;
        v79 = v103;
        v80 = (double *)(*(_QWORD *)(Instance + 48) + 8);
        v81 = v42;
        while ((v43 & 1) == 0)
        {
          v43 = 0;
LABEL_152:
          *(v80 - 1) = v63;
          *v80 = v62;
          v80 += 2;
          if (!--v81)
            goto LABEL_161;
        }
        if (v77)
        {
          if ((v78 & 0x8000000000000000) != 0)
          {
            v82 = 0;
            v84 = 0;
            v63 = 0.0;
            v62 = 0.0;
            goto LABEL_151;
          }
          v62 = 0.0;
          if (v44 + 4 <= v78)
          {
            v63 = *(float *)&v79[v44];
            v82 = 1;
            v44 += 4;
          }
          else
          {
            v82 = 0;
            v63 = 0.0;
          }
          v83 = v44 + 4;
          if (v44 + 4 > v78)
            goto LABEL_148;
          v62 = *(float *)&v79[v44];
        }
        else
        {
          if ((v78 & 0x8000000000000000) != 0)
          {
            v82 = 0;
LABEL_148:
            v84 = 0;
LABEL_151:
            v43 = v82 & v84;
            goto LABEL_152;
          }
          if (v44 + 8 <= v78)
          {
            v63 = *(double *)&v79[v44];
            v82 = 1;
            v44 += 8;
          }
          else
          {
            v82 = 0;
          }
          v83 = v44 + 8;
          if (v44 + 8 > v78)
            goto LABEL_148;
          v62 = *(double *)&v79[v44];
        }
        v84 = 1;
        v44 = v83;
        goto LABEL_151;
      }
LABEL_161:
      *(_QWORD *)(Instance + 96) = v65;
      *(_QWORD *)(Instance + 24) = v42;
      *(_QWORD *)(Instance + 32) = v41;
      if ((v43 & 1) != 0)
      {
        CG::Path::recalculate_subpath_start(v10);
        v85 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        *(float64x2_t *)(Instance + 56) = v85;
        v86 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        *(float64x2_t *)(Instance + 72) = v86;
        v87 = *(_QWORD *)(Instance + 24);
        if (v87)
        {
          v88 = *(float64x2_t **)(Instance + 48);
          do
          {
            v89 = *v88++;
            v85 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v85, v89), (int8x16_t)v89, (int8x16_t)v85);
            *(float64x2_t *)(Instance + 56) = v85;
            v86 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v89, v86), (int8x16_t)v89, (int8x16_t)v86);
            *(float64x2_t *)(Instance + 72) = v86;
            --v87;
          }
          while (v87);
        }
        return Instance;
      }
LABEL_6:
      if (Instance)
        goto LABEL_7;
      return Instance;
    default:
      goto LABEL_6;
  }
}

char *CGImageBlockSetCreateWithType(uint64_t a1, int a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14)
{
  int v19;

  if (a1)
    v19 = *(_DWORD *)(a1 + 36);
  else
    v19 = 0;
  return CGImageBlockSetCreateWithBitmapInfo(a1, a2, v19, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a8);
}

unsigned int *CGImageBlockSetRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void CGImageBlockSetSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  unint64_t *v5;
  _DWORD *v6;

  if (a1 && a2 && a3)
  {
    v5 = (unint64_t *)(a1 + 88);
    if (!*(_QWORD *)(a1 + 88))
    {
      v6 = CGPropertiesCreate();
      while (!__ldxr(v5))
      {
        if (!__stxr((unint64_t)v6, v5))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v6);
    }
LABEL_11:
    CGPropertiesSetProperty(*v5, a2, a3);
  }
}

const void *CGImageBlockSetGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 88)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

void CGGStateStrokeCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  stroke_state_release(*(_QWORD **)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a2 + 128);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 4);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 20) |= 4u;
  *(_BYTE *)(a2 + 20) |= 4u;
}

double CGGStateGetLineWidth(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 128) + 8);
}

uint64_t CGGStateGetLineCap(uint64_t a1)
{
  return *(char *)(*(_QWORD *)(a1 + 128) + 2);
}

void CGGStateSetLineCap(uint64_t a1, int a2)
{
  char v2;

  if (*(char *)(*(_QWORD *)(a1 + 128) + 2) != a2)
  {
    v2 = a2;
    maybe_copy_stroke_state(a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 128) + 2) = v2;
  }
}

uint64_t CGGStateGetLineJoin(uint64_t a1)
{
  return *(char *)(*(_QWORD *)(a1 + 128) + 3);
}

void CGGStateSetLineJoin(uint64_t a1, int a2)
{
  char v2;

  if (*(char *)(*(_QWORD *)(a1 + 128) + 3) != a2)
  {
    v2 = a2;
    maybe_copy_stroke_state(a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 128) + 3) = v2;
  }
}

double CGGStateGetMiterLimit(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 128) + 16);
}

double CGGStateGetLineWidthThreshold(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 128) + 24);
}

uint64_t CGGStateGetStrokeAdjust(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 1);
}

uint64_t CGGStateGetLineDash(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + 32);
}

uint64_t CGGStateGetStrokeParameters(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2)
    *a2 = *(_QWORD *)(*(_QWORD *)(result + 128) + 8);
  if (a3)
    *a3 = *(_QWORD *)(*(_QWORD *)(result + 128) + 24);
  if (a4)
    *a4 = *(_QWORD *)(*(_QWORD *)(result + 128) + 16);
  if (a5)
    *a5 = *(_QWORD *)(*(_QWORD *)(result + 128) + 32);
  if (a6)
    *a6 = *(char *)(*(_QWORD *)(result + 128) + 2);
  if (a7)
    *a7 = *(char *)(*(_QWORD *)(result + 128) + 3);
  return result;
}

uint64_t cache_lock_16224()
{
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  return pthread_mutex_lock((pthread_mutex_t *)get_cache_converter_cache);
}

uint64_t cache_unlock_16227()
{
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  return pthread_mutex_unlock((pthread_mutex_t *)get_cache_converter_cache);
}

uint64_t release_and_remove_16231(void *a1, void *value)
{
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  cache_release_value(*(cache_t **)(get_cache_converter_cache + 64), value);
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  return cache_remove(*(cache_t **)(get_cache_converter_cache + 64), a1);
}

uint64_t __get_cache_block_invoke_16232()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  cache_attributes_t attrs;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  get_cache_converter_cache = (uint64_t)malloc_type_calloc(1uLL, 0x48uLL, 0x1020040C6685353uLL);
  if (!get_cache_converter_cache)
    _CGHandleAssert("get_cache_block_invoke", 191, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverterCache.c", "converter_cache != NULL", "converter cache missing", v0, v1, v2, v8);
  v10.__sig = 0;
  *(_QWORD *)v10.__opaque = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  pthread_mutex_init((pthread_mutex_t *)get_cache_converter_cache, &v10);
  pthread_mutexattr_destroy(&v10);
  attrs = *(cache_attributes_t *)byte_1E1660970;
  v3 = cache_create("com.apple.CoreGraphics.vImage_converter_cache", &attrs, (cache_t **)(get_cache_converter_cache + 64));
  if (v3)
    _CGHandleAssert("get_cache_block_invoke", 214, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverterCache.c", "err == 0", "error %ld creating vImage converter cache", v4, v5, v6, v3);
  return cache_set_count_hint();
}

uint64_t colorsync_smart_null_16244()
{
  return 0;
}

uint64_t partial_get_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t Chunks;
  unint64_t v26;
  uint64_t v27;
  uint64_t Bytes;
  uint64_t v29;

  v11 = *(uint64_t **)(a1 + 40);
  if (!v11)
  {
    v12 = CGAccessSessionCreate(*(CGDataProvider **)a1);
    if (!v12)
      return 0;
    v11 = v12;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 64) = 0;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13 <= v14)
    return 0;
  if (v13 - v14 < a3)
    a3 = v13 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  if (v15 == v16)
  {
    v17 = 0;
    v16 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24);
    v17 = v14 / v15;
  }
  v19 = v13 * v17;
  v20 = v14 - v13 * v17;
  v21 = v20 + v16 * v17 + *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 64);
  if (v21 < v22)
  {
    CGAccessSessionRewind((uint64_t)v11);
    v22 = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (v21 > v22)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v21 - v22);
    *(_QWORD *)(a1 + 64) = v21;
  }
  if (v14 == v19)
  {
    v18 = 0;
LABEL_25:
    if (a3 > v13)
    {
      Chunks = CGAccessSessionGetChunks(v11, v13, v16 - v13, a3 / v13, a2, 0, a7, a8);
      *(_QWORD *)(a1 + 64) += Chunks;
      v26 = Chunks % v16;
      if (Chunks % v16 >= v13)
        v26 = v13;
      v27 = v26 + Chunks / v16 * v13;
      Bytes = *(_QWORD *)(a1 + 48);
      v29 = v27;
      goto LABEL_31;
    }
    if (a3)
    {
      Bytes = CGAccessSessionGetBytes(v11, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(a1 + 64) += Bytes;
      v27 = *(_QWORD *)(a1 + 48);
      v29 = Bytes;
LABEL_31:
      *(_QWORD *)(a1 + 48) = v27 + Bytes;
      v18 += v29;
    }
  }
  else
  {
    v18 = 0;
    if (v13 - v20 >= a3)
      v23 = a3;
    else
      v23 = v13 - v20;
    while (1)
    {
      v24 = CGAccessSessionGetBytes(v11, a2, v23, a4, a5, a6, a7, a8);
      *(_QWORD *)(a1 + 64) += v24;
      *(_QWORD *)(a1 + 48) += v24;
      v18 += v24;
      if (!v24)
        break;
      a3 -= v24;
      if (!a3)
        break;
      a2 += v24;
      v23 -= v24;
      if (!v23)
      {
        if (v16 != v13)
        {
          CGAccessSessionSkipForward((uint64_t)v11, v16 - v13);
          *(_QWORD *)(a1 + 64) += v16 - v13;
        }
        goto LABEL_25;
      }
    }
  }
  return v18;
}

uint64_t partial_skip_forward(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) += a2;
  return a2;
}

void partial_rewind(uint64_t a1)
{
  uint64_t *v2;

  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(uint64_t **)(a1 + 40);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

unint64_t partial_get_packed_bytes(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t Bytes;
  unint64_t v29;
  unint64_t Chunks;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  _BOOL4 v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char v42;

  v8 = a3;
  if (!a3)
    return v8;
  v11 = *(uint64_t **)(a1 + 40);
  if (!v11)
  {
    v12 = CGAccessSessionCreate(*(CGDataProvider **)a1);
    if (!v12)
      return 0;
    v11 = v12;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = v14 > v13;
  v16 = v14 - v13;
  if (!v15)
    return 0;
  if (v16 >= v8)
    v17 = v8;
  else
    v17 = v16;
  v19 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = v13 % v18;
  v22 = v20 != 0;
  v23 = v13 % v18 + v19 * (v13 / v18);
  v24 = v23 + *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 64);
  if (v20)
    v26 = v24 + 1;
  else
    v26 = v23 + *(_QWORD *)(a1 + 8);
  if (v26 < v25)
  {
    CGAccessSessionRewind((uint64_t)v11);
    v25 = 0;
    v22 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  if (v22 + v24 > v25)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v24 - v25);
    v22 = 0;
    *(_QWORD *)(a1 + 64) = v24;
    *(_QWORD *)(a1 + 88) = 0;
  }
  if (!(v21 + v22))
  {
    v8 = 0;
    goto LABEL_35;
  }
  v8 = 0;
  do
  {
    if (v18 - v21 >= v17)
      v27 = v17;
    else
      v27 = v18 - v21;
    if (v22)
    {
      if (v21 == v18 - 1)
        goto LABEL_29;
      v27 -= v17 > 1;
    }
    if (!v27)
    {
LABEL_29:
      Bytes = 0;
      goto LABEL_30;
    }
    Bytes = CGAccessSessionGetBytes(v11, a2, v27, a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 64) += Bytes;
LABEL_30:
    v29 = partial_pack_bytes((_QWORD *)a1, a2, (unsigned __int8 *)a2, Bytes);
    *(_QWORD *)(a1 + 48) += v29;
    v8 += v29;
    if (!v29)
      return v8;
    v17 -= v29;
    if (!v17)
      return v8;
    a2 += v29;
    v21 += v29;
  }
  while (v21 < v18);
  if (v19 != v18)
  {
    CGAccessSessionSkipForward((uint64_t)v11, v19 - v18);
    *(_QWORD *)(a1 + 64) += v19 - v18;
  }
LABEL_35:
  if (v17 <= v18)
  {
    if (v17)
    {
      v36 = v17 == 1;
      v37 = v18 > 1;
      if (v37 && v36)
        v38 = 2;
      else
        v38 = v17;
      if (v37 && v36)
        v39 = &v42;
      else
        v39 = a2;
      v32 = CGAccessSessionGetBytes(v11, v39, v38, a4, a5, a6, a7, a8);
      *(_QWORD *)(a1 + 64) += v32;
      v33 = (_QWORD *)a1;
      v34 = a2;
      v35 = (unsigned __int8 *)v39;
      goto LABEL_47;
    }
  }
  else
  {
    Chunks = CGAccessSessionGetChunks(v11, v18, v19 - v18, v17 / v18, a2, 0, a7, a8);
    *(_QWORD *)(a1 + 64) += Chunks;
    v31 = Chunks % v19;
    if (Chunks % v19 >= v18)
      v31 = v18;
    v32 = v31 + Chunks / v19 * v18;
    v33 = (_QWORD *)a1;
    v34 = a2;
    v35 = (unsigned __int8 *)a2;
LABEL_47:
    v40 = partial_pack_bytes(v33, v34, v35, v32);
    *(_QWORD *)(a1 + 48) += v40;
    v8 += v40;
  }
  return v8;
}

unint64_t partial_pack_bytes(_QWORD *a1, _BYTE *a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;

  if (!a4)
    return 0;
  result = 0;
  v6 = a1[3];
  v7 = a1[6] % v6;
  v9 = a1[10];
  v8 = a1[11];
  v10 = a1[9];
  while (1)
  {
    if (v8)
    {
      if (v7 == v6 - 1)
        v7 = v6;
    }
    else
    {
      v11 = *a3++;
      v9 = v11;
      --a4;
      v7 = 1;
      v8 = 8 - (v10 & 7);
    }
    v12 = v7 + a4 >= v6 ? v6 : v7 + a4;
    v13 = v12 - v7;
    if (v12 <= v7)
    {
      v12 = v7;
    }
    else
    {
      do
      {
        v14 = *a3++;
        v9 = v14 | (v9 << 8);
        *a2++ = v9 >> v8;
        --v13;
      }
      while (v13);
      a4 = v7 + a4 - v12;
      result = result + v12 - v7;
    }
    if (v12 != v6)
      break;
    v8 = 0;
    v15 = 0;
    v16 = 0;
    *a2++ = v9 << v10;
    ++result;
    v7 = v6;
    v9 = 0;
    if (!a4)
      goto LABEL_20;
  }
  v15 = v8;
  v16 = v9;
LABEL_20:
  a1[10] = v16;
  a1[11] = v15;
  return result;
}

size_t partial_get_bytes_at_position(uint64_t a1, char *a2, uint64_t a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 0)
    _CGHandleAssert("partial_get_bytes_at_position", 408, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderPartial.c", "offset >= 0", "offset %lld", a6, a7, a8, a3);
  return CGDataProviderDirectGetBytesAtPositionInternal(*(_QWORD **)a1, a2, *(_QWORD *)(a1 + 8) + a3, a4, a5, a6, a7, a8);
}

uint64_t partial_retain_data(uint64_t *a1)
{
  return CGDataProviderRetainData(*a1);
}

uint64_t partial_release_data(uint64_t *a1)
{
  return CGDataProviderReleaseData(*a1);
}

CGDataProvider *CGPDFAppenderWrite(uint64_t a1, uint64_t a2)
{
  CGDataProvider *result;
  uint64_t v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  void (*v9)(_QWORD, const UInt8 *, CFIndex);
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  CFIndex v14;
  const void **v15;
  uint64_t i;
  uint64_t **v17;
  uint64_t *v18;
  CGPDFDictionaryRef Info;
  CFAllocatorRef *v20;
  CGPDFDictionaryRef v21;
  uint64_t v22;
  CFMutableDictionaryRef Mutable;
  uint64_t v24;
  const void *v25;
  CGPDFDocumentRef v26;
  uint64_t *catalog;
  char *MutableObject;
  CFIndex Count;
  CFIndex v30;
  const void **v31;
  _QWORD *v32;
  __CFDictionary *v33;
  _BYTE *v34;
  CGPDFDocumentRef v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  const void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  CFTypeID v49;
  const __CFDictionary *v50;
  const __CFString *Value;
  const __CFString *v52;
  CFTypeID v53;
  const void *Hash;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void **v67;
  const __CFAllocator *v68;
  __CFData *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  const void **v77;
  unint64_t v78;
  unsigned int v79;
  int j;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  __CFArray *v98;
  CGPDFDictionary *trailer;
  const __CFDictionary *CFDictionary;
  _BYTE *v101;
  __CFArray *DocumentID;
  const void *v103;
  const void *v104;
  const void *v105;
  const void *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  uint64_t v110;
  __CFDictionary *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  const void **v144;
  uint64_t *v145;
  _DWORD *v146;
  int v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  CGPDFDictionary *v158;
  uint64_t v159;
  __CFArray *v160;
  const void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const __CFAllocator *allocator;
  __CFDictionary *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  __CFArray *v195;
  int v196;
  int v197;
  const void **v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  void *v202;
  uint64_t v203;
  void *v204;
  char v205[16];
  __int128 v206;
  UInt8 bytes[16];
  __int128 v208;
  uint64_t v209;

  result = 0;
  v209 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v5 = ***(_QWORD ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
    if (!v5)
      return 0;
    result = *(CGDataProvider **)(v5 + 40);
    if (result)
    {
      result = CGDataProviderCopyData(result);
      if (result)
      {
        v6 = result;
        BytePtr = CFDataGetBytePtr(result);
        Length = CFDataGetLength(v6);
        if (!*(_BYTE *)(a2 + 56))
        {
          v9 = *(void (**)(_QWORD, const UInt8 *, CFIndex))(a2 + 72);
          if (v9)
          {
            v10 = *(_QWORD *)(a2 + 40);
            v11 = *(_QWORD *)(a2 + 48) + Length;
            *(_QWORD *)(a2 + 48) = v11;
            if (v11 > v10)
              *(_QWORD *)(a2 + 40) = v11;
            v9(*(_QWORD *)(a2 + 16), BytePtr, Length);
          }
        }
        CFRelease(v6);
        if (*(_QWORD *)(a1 + 24) || *(_QWORD *)(a1 + 32))
          goto LABEL_13;
        Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
        if (Count >= 1)
        {
          v30 = Count;
          v31 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v31);
          v32 = *v31;
          if ((*((_DWORD *)*v31 + 8) - 1) < 2)
          {
            free(v31);
LABEL_13:
            v12 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
            v13 = MEMORY[0x1E0C809B0];
            if (v12 >= 1)
            {
              v14 = v12;
              v15 = (const void **)malloc_type_malloc(8 * v12, 0xC0040B8AA526DuLL);
              CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v15);
              for (i = 0; i != v14; ++i)
              {
                v17 = (uint64_t **)v15[i];
                AppendModeTraverseCFObject((char *)a1, v17[5], (uint64_t)&__block_literal_global_16262, (uint64_t)&__block_literal_global_26_16263);
                AppendModeTraverseCFObject((char *)a1, v17[5], (uint64_t)&__block_literal_global_28_16264, (uint64_t)&__block_literal_global_30_16265);
                v18 = v17[5];
                v199 = MEMORY[0x1E0C809B0];
                v200 = 0x40000000;
                v201 = __AppendModeUpdateIndirectReferences_block_invoke_6;
                v202 = &__block_descriptor_tmp_34_16266;
                v203 = v14;
                v204 = v15;
                AppendModeTraverseCFObject((char *)a1, v18, (uint64_t)&__block_literal_global_32_16267, (uint64_t)&v199);
              }
              free(v15);
              v13 = MEMORY[0x1E0C809B0];
            }
            Info = CGPDFDocumentGetInfo(*(CGPDFDocumentRef *)a1);
            v20 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
            if (Info)
            {
              v21 = Info;
              v199 = v13;
              v200 = 0x40000000;
              v201 = __AppendModeWrite_block_invoke;
              v202 = &__block_descriptor_tmp_16268;
              v203 = a1;
              v204 = Info;
              AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v199);
              *(_OWORD *)(a1 + 40) = *((_OWORD *)v21 + 2);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 40);
              if (v22 | (unsigned __int16)*(_QWORD *)(a1 + 48))
              {
                MutableObject = CGPDFAppenderGetMutableObject((char *)a1, v22, *(_QWORD *)(a1 + 48));
                v199 = v13;
                v200 = 0x40000000;
                v201 = __AppendModeWrite_block_invoke_2;
                v202 = &__block_descriptor_tmp_16_16271;
                v203 = (uint64_t)MutableObject;
                AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v199);
              }
              else
              {
                Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v199 = v13;
                v200 = 0x40000000;
                v201 = __AppendModeWrite_block_invoke_3;
                v202 = &__block_descriptor_tmp_17_16272;
                v203 = (uint64_t)Mutable;
                AppendModePopulateDocumentInfo(*(const __CFDictionary **)(a1 + 32), (uint64_t)&v199);
                *(_QWORD *)(a1 + 40) = CGPDFAppenderCreateMutableObject(a1, Mutable);
                *(_QWORD *)(a1 + 48) = v24;
                CFRelease(Mutable);
                v25 = (const void *)CGPDFReferenceCreate(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
                v26 = *(CGPDFDocumentRef *)a1;
                if (*(_QWORD *)a1)
                {
                  CGAnalyticsSendPDFDocumentGetCatalogEvent();
                  catalog = (uint64_t *)pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)v26 + 2) + 16));
                }
                else
                {
                  catalog = 0;
                }
                CGPDFAppenderMutateDictionaryValue((char *)a1, catalog, "Info", v25, 4);
                CFRelease(v25);
              }
            }
            if (*(_QWORD *)(a1 + 24))
            {
              v33 = CFDictionaryCreateMutable(*v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CGPDFAppenderDictionarySetCGPDFName(v33, "Type", "Metadata");
              CGPDFAppenderDictionarySetCGPDFName(v33, "Subtype", "XML");
              v34 = (_BYTE *)CGPDFStreamObjectCreate(v33, *(const void **)(a1 + 24));
              v34[32] = 1;
              CFRelease(v33);
              v35 = *(CGPDFDocumentRef *)a1;
              if (*(_QWORD *)a1)
              {
                CGAnalyticsSendPDFDocumentGetCatalogEvent();
                v36 = (uint64_t *)pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)v35 + 2) + 16));
              }
              else
              {
                v36 = 0;
              }
              CGPDFAppenderMutateDictionaryValue((char *)a1, v36, "Metadata", v34, 4);
              CFRelease(v34);
            }
            v37 = PDFWriterCreate((const void *)a2);
            v38 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
            v39 = (const void **)malloc_type_malloc(8 * v38, 0x2004093837F09uLL);
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), 0, v39);
            v198 = v39;
            qsort_b(v39, v38, 8uLL, &__block_literal_global_57_16282);
            v197 = v38;
            if (v38 >= 1)
            {
              v46 = v38;
              do
              {
                v47 = *v39;
                v48 = (const void *)*((_QWORD *)*v39 + 5);
                if (v48)
                {
                  v49 = CFGetTypeID(v48);
                  if (v49 == CFDictionaryGetTypeID())
                  {
                    v50 = (const __CFDictionary *)*((_QWORD *)v47 + 5);
                    Value = (const __CFString *)CFDictionaryGetValue(v50, CFSTR("/Type"));
                    if (Value)
                    {
                      v52 = Value;
                      v53 = CFGetTypeID(Value);
                      if (v53 == CFStringGetTypeID()
                        && CFStringCompare(v52, CFSTR("/Annot"), 0) == kCFCompareEqualTo
                        && CFDictionaryGetValue(v50, CFSTR("/AAPL:AKExtras")))
                      {
                        Hash = (const void *)CGPDFAppenderDictionaryCreateHash((const __CFString *)v50);
                        CGPDFAppenderDictionarySetValue(v50, "AAPL:Hash", Hash);
                        CFRelease(Hash);
                      }
                    }
                  }
                }
                PDFWriterBeginObject(v37, *((_QWORD *)v47 + 2), (_QWORD *)v47 + 6, v41, v42, v43, v44, v45);
                if ((*((_DWORD *)v47 + 8) | 2) == 2)
                  PDFWriteObject(v37, *((uint64_t **)v47 + 5), v55, v56, v57, v58, v59, v60, v183);
                else
                  PDFWriterPrintf((_BYTE **)v37, (uint64_t)"null", v55, v56, v57, v58, v59, v60, v183);
                PDFWriterEndObject(v37, 0, v61, v62, v63, v64, v65, v66);
                ++v39;
                --v46;
              }
              while (v46);
            }
            if (v37)
            {
              v67 = v198;
              if (*v37)
                v193 = *(_QWORD *)(*v37 + 40);
              else
                v193 = 0;
            }
            else
            {
              v193 = 0;
              v67 = v198;
            }
            v194 = a1;
            if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16) + 8))
            {
              v192 = v37;
              v68 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v191 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CGPDFAppenderDictionarySetCGPDFName(v191, "Type", "XRef");
              v195 = CFArrayCreateMutable(v68, 0, MEMORY[0x1E0C9B378]);
              allocator = v68;
              v69 = CFDataCreateMutable(v68, 0);
              v70 = v197 - 1;
              if (v197 >= 1)
              {
                LODWORD(v71) = 0;
                do
                {
                  v72 = 0;
                  v73 = v71;
                  if ((int)v71 <= v70)
                    v74 = v70;
                  else
                    v74 = v71;
                  v75 = v74 - v71 + 1;
                  v76 = v74 - v71;
                  while (v76 != v72)
                  {
                    v77 = &v67[v71] + v72++;
                    if (*((_QWORD *)v77[1] + 2) != *((_QWORD *)*v77 + 2) + 1)
                    {
                      v75 = v72;
                      break;
                    }
                  }
                  v71 = (v75 + v71);
                  v78 = v73;
                  do
                  {
                    v79 = *((_DWORD *)v67[v78] + 12);
                    bytes[0] = 1;
                    CFDataAppendBytes(v69, bytes, 1);
                    for (j = 24; j != -8; j -= 8)
                    {
                      bytes[0] = v79 >> j;
                      CFDataAppendBytes(v69, bytes, 1);
                    }
                    bytes[0] = 0;
                    CFDataAppendBytes(v69, bytes, 1);
                    ++v78;
                    v67 = v198;
                  }
                  while (v78 < v71);
                  CGCFArrayAppendInteger(v195, *((_DWORD *)v198[v73] + 4));
                  CGCFArrayAppendInteger(v195, v75);
                }
                while ((int)v71 < v197);
              }
              CGPDFAppenderDictionarySetValue(v191, "Index", v195);
              CFRelease(v195);
              if (*(_QWORD *)v194)
                v81 = *(_QWORD *)(*(_QWORD *)v194 + 16);
              else
                v81 = 0;
              v37 = v192;
              v96 = *(uint64_t **)(v81 + 16);
              v97 = *v96;
              CGPDFAppenderDictionarySetInt32(v191, "Prev", *(_DWORD *)(*v96 + 184));
              v98 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
              CGCFArrayAppendInteger(v98, 1);
              CGCFArrayAppendInteger(v98, 4);
              CGCFArrayAppendInteger(v98, 1);
              CGPDFAppenderDictionarySetValue(v191, "W", v98);
              CFRelease(v98);
              trailer = (CGPDFDictionary *)pdf_xref_get_trailer(v97);
              CFDictionary = CGPDFAppenderCreateCFDictionary(trailer);
              CGPDFAppenderDictionarySetInt32(v191, "Size", *(_DWORD *)(v194 + 8));
              if (v192)
                v101 = (_BYTE *)*v192;
              else
                v101 = 0;
              DocumentID = AppendModeCreateDocumentID((uint64_t)v101, *(CGPDFArray **)(**(_QWORD **)(v81 + 16) + 48));
              CGPDFAppenderDictionarySetValue(v191, "ID", DocumentID);
              CFRelease(DocumentID);
              v103 = (const void *)CGPDFNameCreate("Root");
              v104 = CFDictionaryGetValue(CFDictionary, v103);
              CFRelease(v103);
              CGPDFAppenderDictionarySetValue(v191, "Root", v104);
              v105 = (const void *)CGPDFNameCreate("Encrypt");
              v106 = CFDictionaryGetValue(CFDictionary, v105);
              CFRelease(v105);
              CGPDFAppenderDictionarySetValue(v191, "Encrypt", v106);
              v107 = (const void *)CGPDFNameCreate("Info");
              v108 = CFDictionaryGetValue(CFDictionary, v107);
              CFRelease(v107);
              if (v108)
              {
                v109 = (const void *)CGPDFNameCreate("Info");
                CFDictionarySetValue(v191, v109, v108);
                CFRelease(v109);
              }
              else
              {
                v110 = *(_QWORD *)(v194 + 40);
                if (v110 | (unsigned __int16)*(_QWORD *)(v194 + 48))
                  CGPDFAppenderDictionarySetCGPDFReference(v191, "Info", v110, *(_QWORD *)(v194 + 48));
              }
              CFRelease(CFDictionary);
              v111 = (__CFDictionary *)CGPDFStreamObjectCreate(v191, v69);
              *((_BYTE *)v111 + 32) = 1;
              CFRelease(v191);
              CFRelease(v69);
              PDFWriterPrintf((_BYTE **)v192, (uint64_t)"%d 0 obj\n", v112, v113, v114, v115, v116, v117, *(_QWORD *)(v194 + 8));
              PDFWriteStreamObject(v192, (uint64_t)v111);
              PDFWriterPrintf((_BYTE **)v192, (uint64_t)"endobj", v118, v119, v120, v121, v122, v123, v185);
            }
            else
            {
              PDFWriterPrintf((_BYTE **)v37, (uint64_t)"xref\n", v40, v41, v42, v43, v44, v45, v183);
              v88 = *((_QWORD *)*v67 + 2);
              v89 = v88 == 1;
              if (v88 == 1)
              {
                v90 = 0;
                if (v197 <= 1)
                  v91 = 1;
                else
                  v91 = v197;
                v92 = 1;
                while (v91 - 1 != v90)
                {
                  v93 = v90 + 1;
                  v94 = v92 + 1;
                  v92 = *((_QWORD *)v67[++v90] + 2);
                  if (v92 != v94)
                  {
                    v95 = (v93 + 1);
                    goto LABEL_88;
                  }
                }
                v95 = (v91 + 1);
LABEL_88:
                v184 = v95;
                v124 = "0 %d\n";
              }
              else
              {
                v124 = "0 1\n";
              }
              PDFWriterPrintf((_BYTE **)v37, (uint64_t)v124, v82, v83, v84, v85, v86, v87, v184);
              PDFWriterPrintf((_BYTE **)v37, (uint64_t)"0000000000 65535 f \n", v125, v126, v127, v128, v129, v130, v187);
              v196 = v197 - 1;
              if (v197 >= 1)
              {
                LODWORD(v137) = 0;
                v138 = 0uLL;
                do
                {
                  v139 = 0;
                  v140 = v137;
                  if ((int)v137 <= v196)
                    v141 = v196;
                  else
                    v141 = v137;
                  v142 = v141 - v137 + 1;
                  v143 = v141 - v137;
                  while (v143 != v139)
                  {
                    v144 = &v67[v137] + v139++;
                    if (*((_QWORD *)v144[1] + 2) != *((_QWORD *)*v144 + 2) + 1)
                    {
                      v142 = v139;
                      break;
                    }
                  }
                  if (!v89)
                  {
                    PDFWriterPrintf((_BYTE **)v37, (uint64_t)"%d %d\n", v131, v132, v133, v134, v135, v136, *((_QWORD *)v67[v137] + 2));
                    v138 = 0uLL;
                  }
                  v137 = (v142 + v137);
                  do
                  {
                    v145 = v37;
                    v146 = v67[v140];
                    v147 = v146[8];
                    *(_OWORD *)bytes = v138;
                    v208 = v138;
                    __sprintf_chk((char *)bytes, 0, 0x20uLL, "%010llu", *((_QWORD *)v146 + 6));
                    *(_OWORD *)v205 = 0u;
                    v206 = 0u;
                    v148 = v147 == 1;
                    v67 = v198;
                    if (v148)
                      v149 = *((unsigned __int16 *)v146 + 12) + 1;
                    else
                      v149 = *((unsigned __int16 *)v146 + 12);
                    __sprintf_chk(v205, 0, 0x20uLL, "%05d", v149);
                    v37 = v145;
                    PDFWriterPrintf((_BYTE **)v145, (uint64_t)"%s %s %c \n", v150, v151, v152, v153, v154, v155, (uint64_t)bytes);
                    v138 = 0uLL;
                    ++v140;
                  }
                  while (v140 < v137);
                  v89 = 0;
                }
                while ((int)v137 < v197);
              }
              PDFWriterPrintf((_BYTE **)v37, (uint64_t)"trailer\n", v131, v132, v133, v134, v135, v136, v188);
              if (*(_QWORD *)v194)
                v156 = *(_QWORD *)(*(_QWORD *)v194 + 16);
              else
                v156 = 0;
              v157 = **(_QWORD **)(v156 + 16);
              v158 = (CGPDFDictionary *)pdf_xref_get_trailer(v157);
              v111 = CGPDFAppenderCreateCFDictionary(v158);
              CGPDFAppenderDictionarySetInt32(v111, "Size", *(_DWORD *)(v194 + 8));
              CGPDFAppenderDictionarySetInt32(v111, "Prev", *(_DWORD *)(v157 + 184));
              if (v37)
                v159 = *v37;
              else
                v159 = 0;
              v67 = v198;
              v160 = AppendModeCreateDocumentID(v159, *(CGPDFArray **)(**(_QWORD **)(v156 + 16) + 48));
              CGPDFAppenderDictionarySetValue(v111, "ID", v160);
              CFRelease(v160);
              v161 = (const void *)CGPDFNameCreate("XRefStm");
              CFDictionaryRemoveValue(v111, v161);
              CFRelease(v161);
              PDFWriteDictionary((_BYTE **)v37, v111);
            }
            CFRelease(v111);
            free(v67);
            PDFWriterPrintf((_BYTE **)v37, (uint64_t)"\nstartxref\n", v162, v163, v164, v165, v166, v167, v186);
            PDFWriterPrintf((_BYTE **)v37, (uint64_t)"%O\n", v168, v169, v170, v171, v172, v173, v193);
            PDFWriterPrintf((_BYTE **)v37, (uint64_t)"%%%%EOF\n", v174, v175, v176, v177, v178, v179, v189);
            CGPDFAssociationRelease((const void **)v37);
            return (CGDataProvider *)1;
          }
          v180 = 1;
          v181 = 1;
          do
          {
            if (*(_QWORD *)a1)
            {
              v182 = pdf_xref_resolve(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16), *((int *)v32 + 4), *((unsigned __int16 *)v32 + 12));
              if (v182)
              {
                if (!CGPDFAppenderCGPDFObjectMatchesCFType((uint64_t)v182, v32[5]))
                  break;
              }
            }
            v181 = v180 < v30;
            if (v30 == v180)
              break;
            v32 = v31[v180++];
          }
          while ((*((_DWORD *)v32 + 8) - 1) >= 2);
          free(v31);
          if (v181)
            goto LABEL_13;
        }
        return (CGDataProvider *)1;
      }
    }
  }
  return result;
}

void AppendModeTraverseCFObject(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __CFSet *Mutable;

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  AppendModeSafelyTraverseCFObject(a1, Mutable, a2, a3, a4);
  CFRelease(Mutable);
}

void AppendModePopulateDocumentInfo(const __CFDictionary *a1, uint64_t a2)
{
  const __CFAllocator *v3;
  CFAbsoluteTime Current;
  CFDateRef v5;
  __CFString *Mutable;
  const __CFString *v7;
  const __CFString *v8;
  _QWORD context[5];

  if (a1)
  {
    context[0] = MEMORY[0x1E0C809B0];
    context[1] = 0x40000000;
    context[2] = __AppendModePopulateDocumentInfo_block_invoke;
    context[3] = &unk_1E1660C08;
    context[4] = a2;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)call_dict_block, context);
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v5 = CFDateCreate(v3, Current);
  (*(void (**)(uint64_t, const char *, CFDateRef))(a2 + 16))(a2, "ModDate", v5);
  CFRelease(v5);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppend(Mutable, CFSTR("iOS "));
  v7 = (const __CFString *)CFCopySystemVersionString();
  if (v7)
  {
    v8 = v7;
    CFStringAppend(Mutable, v7);
    CFStringAppend(Mutable, CFSTR(" "));
    CFRelease(v8);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("Quartz PDFContext, AppendMode %d.%d"), 1, 1);
  (*(void (**)(uint64_t, const char *, __CFString *))(a2 + 16))(a2, "Producer", Mutable);
  CFRelease(Mutable);
}

char *CGPDFAppenderGetMutableObject(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFDictionaryRef *v6;
  const void *v7;
  _QWORD *Value;
  CFNumberRef CFObject;

  if (result)
  {
    v5 = (unsigned __int16)a3;
    if (!(a2 | (unsigned __int16)a3))
      return 0;
    v6 = (CFDictionaryRef *)result;
    v7 = (const void *)CGPDFReferenceCreate(a2, a3);
    Value = CFDictionaryGetValue(v6[2], v7);
    if (Value)
      goto LABEL_8;
    if (!*v6)
      return 0;
    result = pdf_xref_resolve(**(_QWORD **)(*((_QWORD *)*v6 + 2) + 16), (int)a2, v5);
    if (result)
    {
      CFObject = CGPDFAppenderCreateCFObject((uint64_t)result, 1);
      Value = (_QWORD *)AppendModeObjectCreate(0, a2, a3, CFObject);
      CFRelease(CFObject);
      CFDictionarySetValue(v6[2], v7, Value);
      CFRelease(Value);
LABEL_8:
      CFRelease(v7);
      return (char *)Value[5];
    }
  }
  return result;
}

uint64_t CGPDFAppenderCreateMutableObject(uint64_t a1, const void *a2)
{
  uint64_t v2;
  const void *v4;
  const void *v5;

  v2 = 0;
  if (a1 && a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v2 + 1;
    v4 = (const void *)AppendModeObjectCreate(2, v2, 0, a2);
    v5 = (const void *)CGPDFReferenceCreate(v2, 0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v5, v4);
    CFRelease(v5);
    CFRelease(v4);
  }
  return v2;
}

void CGPDFAppenderMutateDictionaryValue(char *a1, uint64_t *a2, const char *a3, const void *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  char *MutableObject;
  const void *v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  CGPDFObjectRef value;

  if (a1 && a2 && a3 && a4)
  {
    v9 = a2[4];
    v8 = a2[5];
    if (!(v9 | (unsigned __int16)v8))
    {
      pdf_error("CGPDFAppenderMutateDictionaryValue(...) was called with an inline / literal object");
      return;
    }
    if (CGPDFAppenderHasMutableObject((uint64_t)a1, a2[4], a2[5]))
    {
      MutableObject = CGPDFAppenderGetMutableObject(a1, v9, v8);
      v13 = (const void *)CGPDFNameCreate(a3);
      v14 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v13);
      CFRelease(v13);
      if (a5 == 2)
      {
        if (v14)
        {
          CGPDFAppenderReplaceMutableObject((uint64_t)a1, v14[2], v14[3], a4);
          return;
        }
      }
      else if (a5 != 4)
      {
        v15 = (const void *)CGPDFNameCreate(a3);
        CFDictionarySetValue((CFMutableDictionaryRef)MutableObject, v15, a4);
        CFRelease(v15);
        return;
      }
      v19 = CGPDFAppenderCreateMutableObject((uint64_t)a1, a4);
      CGPDFAppenderDictionarySetCGPDFReference((__CFDictionary *)MutableObject, a3, v19, v20);
    }
    else
    {
      value = 0;
      if (CGPDFDictionaryGetObject((CGPDFDictionaryRef)a2, a3, &value) && value)
      {
        v16 = *((_QWORD *)value + 2);
        if (a5 == 2 && v16 | (unsigned __int16)*((_QWORD *)value + 3))
        {
          CGPDFAppenderReplaceMutableObject((uint64_t)a1, v16, *((_QWORD *)value + 3), a4);
          return;
        }
        v21 = a5 == 2 && (v16 | (unsigned __int16)*((_QWORD *)value + 3)) == 0;
        v22 = CGPDFAppenderGetMutableObject(a1, v9, v8);
        v17 = v22;
        if (a5 != 4 && !v21)
        {
          CGPDFAppenderDictionarySetValue((__CFDictionary *)v22, a3, a4);
          return;
        }
      }
      else
      {
        v17 = CGPDFAppenderGetMutableObject(a1, v9, v8);
        if (a5 != 4 && a5 != 2)
        {
          v18 = (const void *)CGPDFNameCreate(a3);
          CFDictionarySetValue((CFMutableDictionaryRef)v17, v18, a4);
          CFRelease(v18);
          return;
        }
      }
      v23 = CGPDFAppenderCreateMutableObject((uint64_t)a1, a4);
      CGPDFAppenderDictionarySetCGPDFReference((__CFDictionary *)v17, a3, v23, v24);
    }
  }
}

void PDFWriteObject(uint64_t *a1, uint64_t *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeID v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *v64;
  CFIndex v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  unsigned int v79;
  uint64_t valuePtr;

  v11 = CFGetTypeID(cf);
  if (v11 == CFNullGetTypeID())
  {
    PDFWriterPrintf((_BYTE **)a1, (uint64_t)"null", v12, v13, v14, v15, v16, v17, a9);
  }
  else if (v11 == CFBooleanGetTypeID())
  {
    v78 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
    PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%b", v18, v19, v20, v21, v22, v23, v78);
  }
  else if (v11 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberCGFloatType, &valuePtr);
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%f", v30, v31, v32, v33, v34, v35, valuePtr);
    }
    else
    {
      v79 = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &v79);
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%d", v43, v44, v45, v46, v47, v48, v79);
    }
  }
  else
  {
    if (CGPDFNameTypeID_onceToken != -1)
      dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
    if (v11 == CGPDFNameTypeID_id)
    {
      v36 = (_BYTE *)cf[2];
      if (*v36 == 47)
        ++v36;
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"/%N", v24, v25, v26, v27, v28, v29, (uint64_t)v36);
    }
    else if (v11 == CFStringGetTypeID())
    {
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%T", v37, v38, v39, v40, v41, v42, (uint64_t)cf);
    }
    else if (v11 == CFArrayGetTypeID())
    {
      PDFWriteArray((_BYTE **)a1, (const __CFArray *)cf, v49, v50, v51, v52, v53, v54, a9);
    }
    else if (v11 == CFDictionaryGetTypeID())
    {
      PDFWriteDictionary((_BYTE **)a1, (CFDictionaryRef)cf);
    }
    else
    {
      if (CGPDFStreamObjectTypeID_onceToken != -1)
        dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
      if (v11 == CGPDFStreamObjectTypeID_id)
      {
        PDFWriteStreamObject(a1, (uint64_t)cf);
      }
      else
      {
        if (CGPDFReferenceTypeID_onceToken != -1)
          dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
        if (v11 == CGPDFReferenceTypeID_id)
        {
          if (cf)
            v61 = cf[2];
          else
            v61 = 0;
          PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%R", v55, v56, v57, v58, v59, v60, v61);
        }
        else if (v11 == CFDataGetTypeID())
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          Length = CFDataGetLength((CFDataRef)cf);
          if (a1)
            CGDataConsumerPutBytes(*a1, (uint64_t)BytePtr, Length);
        }
        else
        {
          if (CGPDFHexDataTypeID_onceToken != -1)
            dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_12_18245);
          if (v11 == CGPDFHexDataTypeID_id)
          {
            v64 = (const __CFData *)cf[2];
            v65 = CFDataGetLength(v64);
            CFDataGetBytePtr(v64);
            PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%X", v66, v67, v68, v69, v70, v71, v65);
          }
          else if (v11 == CFDateGetTypeID())
          {
            PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%D", v72, v73, v74, v75, v76, v77, (uint64_t)cf);
          }
          else
          {
            pdf_error("Error: PDFWriteObject(...) encountered unknown object ID %d", v11);
          }
        }
      }
    }
  }
}

__CFArray *AppendModeCreateDocumentID(uint64_t a1, CGPDFArray *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CGPDFStringRef v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t i;
  CGPDFStringRef v11;
  size_t v12;
  CFDataRef v13;
  CC_MD5_CTX *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  CFDataRef v19;
  CFURLRef *v21;
  CFURLRef v22;
  const __CFString *v23;
  const __CFString *v24;
  CFIndex Length;
  UniChar *v26;
  uint64_t v27;
  time_t data;
  CGPDFStringRef value;
  char __s[35];
  char v31[35];
  unsigned __int8 md[16];
  uint64_t v33;
  CFRange v34;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  value = 0;
  CGPDFArrayGetString(a2, 0, &value);
  v6 = value;
  if (value)
  {
    if (*((_QWORD *)value + 3))
      decrypt_string((uint64_t)value);
    v7 = *((_QWORD *)v6 + 9);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)malloc_type_malloc(2 * v7 + 3, 0x100004077774924uLL);
  *(_WORD *)v8 = 60;
  v9 = v8 + 1;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v11 = value;
      if (*((_QWORD *)value + 3))
        decrypt_string((uint64_t)value);
      sprintf(v9, "%02X", *((unsigned __int8 *)v11 + i + 80));
      v9 += 2;
    }
  }
  *(_WORD *)&v8[strlen(v8)] = 62;
  v12 = strlen(v8);
  v13 = CFDataCreate(v4, (const UInt8 *)v8, v12);
  free(v8);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v13);
  v14 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v14);
  if (v14)
  {
    CC_MD5_Update(v14, &AppendModeCreateDocumentID_kBaselineHash, 4u);
    ++AppendModeCreateDocumentID_kBaselineHash;
    data = time(0);
    CC_MD5_Update(v14, &data, 8u);
    if (a1)
    {
LABEL_13:
      v15 = *(_QWORD *)(a1 + 40);
      goto LABEL_16;
    }
  }
  else
  {
    ++AppendModeCreateDocumentID_kBaselineHash;
    data = time(0);
    if (a1)
      goto LABEL_13;
  }
  v15 = 0;
LABEL_16:
  v27 = v15;
  if (v14)
    CC_MD5_Update(v14, &v27, 8u);
  if (a1)
  {
    if (*(unint64_t (**)(uint64_t, const UInt8 *, unint64_t))(a1 + 72) == url_put_bytes)
    {
      v21 = *(CFURLRef **)(a1 + 16);
      if (v21)
      {
        v22 = *v21;
        if (*v21)
        {
          v23 = CFURLGetString(*v21);
          if (v23)
          {
            v24 = v23;
            Length = CFStringGetLength(v23);
            v26 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
            v34.location = 0;
            v34.length = Length;
            CFStringGetCharacters(v24, v34, v26);
            if (v14)
              md5_update(v14, (char *)v26, 2 * Length);
            free(v26);
            CFRelease(v24);
          }
          CFRelease(v22);
        }
      }
    }
  }
  if (v14)
    CC_MD5_Final(md, v14);
  free(v14);
  __sprintf_chk(__s, 0, 0x23uLL, "<");
  v16 = 0;
  v17 = v31;
  do
  {
    sprintf(v17, "%02X", md[v16++]);
    v17 += 2;
  }
  while (v16 != 16);
  *(_WORD *)&__s[strlen(__s)] = 62;
  v18 = strlen(__s);
  v19 = CFDataCreate(v4, (const UInt8 *)__s, v18);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v19);
  return Mutable;
}

void PDFWriteStreamObject(uint64_t *a1, uint64_t a2)
{
  __CFDictionary *v4;
  const __CFData *v5;
  int v6;
  __CFData *Mutable;
  CGDataConsumerRef v8;
  CGDataConsumerRef FlateEncoder;
  const UInt8 *BytePtr;
  CFIndex Length;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const UInt8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(__CFDictionary **)(a2 + 16);
  v5 = *(const __CFData **)(a2 + 24);
  if (CFDataGetBytePtr(v5))
  {
    v6 = *(unsigned __int8 *)(a2 + 32);
    if (*(_BYTE *)(a2 + 32))
    {
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v8 = CGDataConsumerCreateWithCFData(Mutable);
      FlateEncoder = CGDataConsumerCreateFlateEncoder(v8);
      BytePtr = CFDataGetBytePtr(v5);
      Length = CFDataGetLength(v5);
      CGDataConsumerPutBytes((uint64_t)FlateEncoder, (uint64_t)BytePtr, Length);
      CGDataConsumerClose((uint64_t)FlateEncoder);
      if (FlateEncoder)
        CFRelease(FlateEncoder);
      if (v8)
        CFRelease(v8);
      CGPDFAppenderDictionarySetCGPDFName(v4, "Filter", "FlateDecode");
      v5 = Mutable;
    }
    else
    {
      Mutable = 0;
    }
    v12 = CFDataGetLength(v5);
    CGPDFAppenderDictionarySetInt32(v4, "Length", v12);
    PDFWriteDictionary((_BYTE **)a1, *(CFDictionaryRef *)(a2 + 16));
    PDFWriterPrintf((_BYTE **)a1, (uint64_t)"stream\n", v13, v14, v15, v16, v17, v18, v32);
    v19 = CFDataGetBytePtr(v5);
    if (a1)
      CGDataConsumerPutBytes(*a1, (uint64_t)v19, v12);
    PDFWriterPrintf((_BYTE **)a1, (uint64_t)"\n", v20, v21, v22, v23, v24, v25, v33);
    PDFWriterPrintf((_BYTE **)a1, (uint64_t)"endstream\n", v26, v27, v28, v29, v30, v31, v34);
    if (v6)
      CFRelease(Mutable);
  }
  else
  {
    pdf_error("Failed to get the raw data pointer for PDFWriteStreamObject(...)");
  }
}

void PDFWriteDictionary(_BYTE **a1, CFDictionaryRef theDict)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  const void **v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  Count = CFDictionaryGetCount(theDict);
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, v5, v6);
  PDFWriterPrintf(a1, (uint64_t)"<<", v7, v8, v9, v10, v11, v12, v23);
  if (Count >= 1)
  {
    v19 = v5;
    v20 = v6;
    do
    {
      v21 = *v19++;
      PDFWriteObject((int)a1, v21);
      v22 = *v20++;
      PDFWriteObject((int)a1, v22);
      --Count;
    }
    while (Count);
  }
  PDFWriterPrintf(a1, (uint64_t)">>", v13, v14, v15, v16, v17, v18, v24);
  free(v6);
  free(v5);
}

void PDFWriteArray(_BYTE **a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v21;

  PDFWriterPrintf(a1, (uint64_t)"[", a3, a4, a5, a6, a7, a8, v21);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v18 = Count;
    for (i = 0; i != v18; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      PDFWriteObject((int)a1, ValueAtIndex);
    }
  }
  PDFWriterPrintf(a1, (uint64_t)"]", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t CGPDFAppenderHasMutableObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v4;

  v3 = a1;
  if (a1)
  {
    if (a2 | (unsigned __int16)a3)
    {
      v4 = (const void *)CGPDFReferenceCreate(a2, a3);
      v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 16), v4) != 0;
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void CGPDFAppenderReplaceMutableObject(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v8;
  _QWORD *Value;
  const void *v10;

  if (a1 && a4)
  {
    v8 = (const void *)CGPDFReferenceCreate(a2, a3);
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v8);
    if (!Value)
    {
      Value = (_QWORD *)AppendModeObjectCreate(0, a2, a3, 0);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v8, Value);
      CFRelease(Value);
    }
    v10 = (const void *)Value[5];
    if (v10)
      CFRelease(v10);
    Value[5] = CFRetain(a4);
    CFRelease(v8);
  }
}

uint64_t AppendModeObjectCreate(int a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t cftype;

  if (AppendModeObjectGetTypeID_onceToken != -1)
    dispatch_once(&AppendModeObjectGetTypeID_onceToken, &__block_literal_global_124_16342);
  cftype = pdf_create_cftype();
  *(_QWORD *)(cftype + 16) = a2;
  *(_QWORD *)(cftype + 24) = a3;
  *(_DWORD *)(cftype + 32) = a1;
  *(_QWORD *)(cftype + 40) = a4;
  *(_QWORD *)(cftype + 48) = 0;
  if (a4)
    CFRetain(a4);
  return cftype;
}

void AppendModeFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

CFStringRef AppendModeObjectDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<AppendModeObject (%d, %d). State: %s>"), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), AppendModeObjectDebugDesc_kObjectStateNames[*(unsigned int *)(a1 + 32)]);
}

void AppendModeSafelyTraverseCFObject(char *a1, __CFSet *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *MutableObject;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v15;
  const void *v16;
  CFIndex v17;
  CFIndex v18;
  const void **v19;
  uint64_t j;
  const void *v21;
  const void *Value;
  CFTypeID v23;
  const void *v24;

  if (a3)
  {
    MutableObject = a3;
    while (!CFSetContainsValue(a2, MutableObject))
    {
      CFSetAddValue(a2, MutableObject);
      v10 = CFGetTypeID(MutableObject);
      if (CGPDFReferenceTypeID_onceToken != -1)
        dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
      if (v10 == CGPDFReferenceTypeID_id)
      {
        if (!CGPDFAppenderHasMutableObject((uint64_t)a1, MutableObject[2], MutableObject[3]))
          return;
        MutableObject = (uint64_t *)CGPDFAppenderGetMutableObject(a1, MutableObject[2], MutableObject[3]);
      }
      else
      {
        if (v10 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount((CFArrayRef)MutableObject);
          if (Count >= 1)
          {
            v12 = Count;
            for (i = 0; i != v12; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)MutableObject, i);
              v15 = CFGetTypeID(ValueAtIndex);
              if ((*(unsigned int (**)(uint64_t, char *, uint64_t *, CFIndex, CFTypeID, const void *))(a4 + 16))(a4, a1, MutableObject, i, v15, ValueAtIndex))
              {
                v16 = CFArrayGetValueAtIndex((CFArrayRef)MutableObject, i);
                AppendModeSafelyTraverseCFObject(a1, a2, v16, a4, a5);
              }
            }
          }
          return;
        }
        if (v10 == CFDictionaryGetTypeID())
        {
          v17 = CFDictionaryGetCount((CFDictionaryRef)MutableObject);
          if (v17 >= 1)
          {
            v18 = v17;
            v19 = (const void **)malloc_type_malloc(8 * v17, 0xC0040B8AA526DuLL);
            CFDictionaryGetKeysAndValues((CFDictionaryRef)MutableObject, v19, 0);
            for (j = 0; j != v18; ++j)
            {
              v21 = v19[j];
              CFRetain(v21);
              Value = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v21);
              v23 = CFGetTypeID(Value);
              if ((*(unsigned int (**)(uint64_t, char *, uint64_t *, const void *, CFTypeID, const void *))(a5 + 16))(a5, a1, MutableObject, v21, v23, Value))
              {
                v24 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v21);
                if (v24)
                  AppendModeSafelyTraverseCFObject(a1, a2, v24, a4, a5);
              }
              CFRelease(v21);
            }
            free(v19);
          }
          return;
        }
        if (CGPDFStreamObjectTypeID_onceToken != -1)
          dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
        if (v10 != CGPDFStreamObjectTypeID_id)
          return;
        MutableObject = (uint64_t *)MutableObject[2];
      }
      if (!MutableObject)
        return;
    }
  }
}

uint64_t CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(char *a1, const void *a2, double a3, double a4)
{
  const __CFAllocator *v8;
  __CFData *Mutable;
  CGDataConsumer *v10;
  CGContext *v11;
  __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGDataProvider *v18;
  CGPDFDocument *v19;
  CGPDFPageRef Page;
  uint64_t v21;
  uint64_t *v22;
  const __CFData *CGPDFStreamObject;
  const __CFData *v24;
  uint64_t MutableObject;
  uint64_t v26;
  uint64_t v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD block[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  CGPDFDictionaryRef dict;
  CGPDFDictionaryRef value;
  _QWORD v41[6];
  _QWORD v42[6];

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v10 = CGDataConsumerCreateWithCFData(Mutable);
  v11 = CGPDFContextCreate(v10, 0, 0);
  if (v10)
    CFRelease(v10);
  v12 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CGCFDictionarySetPoint(v12, CFSTR("DisplayListOrigin"), a3, a4);
  CGPDFContextBeginPage(v11, v12);
  CGContextDrawDisplayList((uint64_t)v11, a2, 0, v13, v14, v15, v16, v17);
  CGPDFContextEndPage(v11);
  CGPDFContextClose(v11);
  if (v11)
    CFRelease(v11);
  CFRelease(v12);
  v18 = CGDataProviderCreateWithCFData(Mutable);
  CFRelease(Mutable);
  v19 = CGPDFDocumentCreateWithProvider(v18);
  CGDataProviderRelease(v18);
  Page = CGPDFDocumentGetPage(v19, 1uLL);
  if (Page)
    Page = *(CGPDFPageRef *)(*((_QWORD *)Page + 5) + 16);
  value = 0;
  if (CGPDFDictionaryGetDictionary(Page, "Resources", &value))
  {
    dict = 0;
    if (CGPDFDictionaryGetDictionary(value, "XObject", &dict))
    {
      v35 = 0;
      v36 = &v35;
      v37 = 0x2000000000;
      v38 = 0;
      v21 = MEMORY[0x1E0C809B0];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList_block_invoke;
      block[3] = &unk_1E1660BE0;
      block[4] = &v35;
      CGPDFDictionaryApplyBlock(dict, block, 0);
      v22 = (uint64_t *)v36[3];
      if (v22 && (CGPDFStreamObject = CGPDFAppenderCreateCGPDFStreamObject(v22)) != 0)
      {
        v24 = CGPDFStreamObject;
        MutableObject = CGPDFAppenderCreateMutableObject((uint64_t)a1, CGPDFStreamObject);
        v27 = v26;
        CFRelease(v24);
        v28 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v29 = v28;
        v30 = v36[3];
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 24);
          v32 = *(_QWORD *)(v30 + 32);
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        CGPDFAppenderDictionarySetReferenceToReference(v28, v31, v32, MutableObject, v27);
        v42[0] = v21;
        v42[1] = 0x40000000;
        v42[2] = __AppendModeDuplicateExternalObject_block_invoke;
        v42[3] = &__block_descriptor_tmp_113_16378;
        v42[4] = v29;
        v42[5] = v19;
        v41[0] = v21;
        v41[1] = 0x40000000;
        v41[2] = __AppendModeDuplicateExternalObject_block_invoke_2;
        v41[3] = &__block_descriptor_tmp_115_16379;
        v41[4] = v29;
        v41[5] = v19;
        AppendModeTraverseCFObject(a1, (uint64_t *)v24, (uint64_t)v42, (uint64_t)v41);
        CFRelease(v29);
        if (!v19)
          goto LABEL_18;
      }
      else
      {
        MutableObject = 0;
        if (!v19)
        {
LABEL_18:
          _Block_object_dispose(&v35, 8);
          return MutableObject;
        }
      }
      CFRelease(v19);
      goto LABEL_18;
    }
  }
  if (v19)
    CFRelease(v19);
  return 0;
}

uint64_t CGPDFAppenderCreatePageObject(uint64_t a1, CGPDFPage *a2)
{
  CGPDFDictionary *v4;
  CFMutableDictionaryRef CFDictionary;
  uint64_t MutableObject;
  uint64_t v7;
  CFIndex Count;
  const void **v9;
  uint64_t i;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t j;
  __CFArray *PDFRect;
  int RotationAngle;
  const void *v21;
  const void *v22;
  __CFArray *v23;
  __CFDictionary *Mutable;
  __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGPDFDictionary *catalog;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  CGPDFArrayRef v43;
  CGPDFDictionaryRef value;
  _QWORD v45[6];
  _QWORD v46[6];
  CGRect BoxRect;

  if (a2)
    v4 = *(CGPDFDictionary **)(*((_QWORD *)a2 + 5) + 16);
  else
    v4 = 0;
  CFDictionary = CGPDFAppenderCreateCFDictionary(v4);
  v40 = (char *)a1;
  MutableObject = CGPDFAppenderCreateMutableObject(a1, CFDictionary);
  v41 = v7;
  v42 = MutableObject;
  CFRelease(CFDictionary);
  Count = CFDictionaryGetCount(CFDictionary);
  v9 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(CFDictionary, v9, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v11 = 0;
      v12 = v9[i];
      v13 = (unsigned __int8 *)v12[2];
      v15 = *v13;
      v14 = (const char *)(v13 + 1);
      if (v15 == 47)
        v16 = v14;
      else
        v16 = (const char *)v12[2];
      while (strcmp(v16, CGPDFAppenderCreatePageObject_kLegalKeyNames[v11]))
      {
        if (++v11 == 11)
        {
          CFDictionaryRemoveValue(CFDictionary, v12);
          break;
        }
      }
    }
  }
  free(v9);
  CGPDFAppenderDictionarySetCGPDFName(CFDictionary, "Type", "Page");
  for (j = 0; j != 5; ++j)
  {
    BoxRect = CGPDFPageGetBoxRect(a2, (CGPDFBox)j);
    if (BoxRect.origin.x != INFINITY && BoxRect.origin.y != INFINITY)
    {
      PDFRect = CGCFArrayCreatePDFRect(BoxRect.origin.x, BoxRect.origin.y, BoxRect.size.width, BoxRect.size.height);
      CGPDFAppenderDictionarySetValue(CFDictionary, CGPDFAppenderCreatePageObject_kLegalKeyNames[j], PDFRect);
      CFRelease(PDFRect);
    }
  }
  RotationAngle = CGPDFPageGetRotationAngle(a2);
  CGPDFAppenderDictionarySetInt32(CFDictionary, "Rotate", RotationAngle);
  v21 = (const void *)CGPDFNameCreate("MediaBox");
  v22 = CFDictionaryGetValue(CFDictionary, v21);
  CFRelease(v21);
  if (!v22)
  {
    v23 = CGCFArrayCreatePDFRect(0.0, 0.0, 612.0, 792.0);
    CGPDFAppenderDictionarySetValue(CFDictionary, "MediaBox", v23);
    CFRelease(v23);
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v25 = Mutable;
  if (v4)
  {
    v26 = *((_QWORD *)v4 + 4);
    v27 = *((_QWORD *)v4 + 5);
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  CGPDFAppenderDictionarySetReferenceToReference(Mutable, v26, v27, v42, v41);
  value = 0;
  v28 = *(_QWORD *)v40;
  if (*(_QWORD *)v40)
  {
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(_QWORD **)(*(_QWORD *)(v28 + 16) + 16));
  }
  else
  {
    catalog = 0;
  }
  if (CGPDFDictionaryGetDictionary(catalog, "Pages", &value))
  {
    if (value)
    {
      v30 = *((_QWORD *)value + 4);
      v31 = *((_QWORD *)value + 5);
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v32 = (const void *)CGPDFNameCreate("Parent");
    v33 = CFDictionaryGetValue(CFDictionary, v32);
    CFRelease(v32);
    if (v33)
      CGPDFAppenderDictionarySetReferenceToReference(v25, v33[2], v33[3], v30, v31);
  }
  v43 = 0;
  if (CGPDFDictionaryGetArray(v4, "Annots", &v43))
  {
    if (v43)
    {
      v34 = *((_QWORD *)v43 + 5);
      v35 = *((_QWORD *)v43 + 6);
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v36 = (const void *)CGPDFNameCreate("Annots");
    v37 = CFDictionaryGetValue(CFDictionary, v36);
    CFRelease(v36);
    if (v37)
      CGPDFAppenderDictionarySetReferenceToReference(v25, v37[2], v37[3], v34, v35);
  }
  if (a2)
    v38 = *((_QWORD *)a2 + 2);
  else
    v38 = 0;
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 0x40000000;
  v46[2] = __AppendModeDuplicateExternalObject_block_invoke;
  v46[3] = &__block_descriptor_tmp_113_16378;
  v46[4] = v25;
  v46[5] = v38;
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 0x40000000;
  v45[2] = __AppendModeDuplicateExternalObject_block_invoke_2;
  v45[3] = &__block_descriptor_tmp_115_16379;
  v45[4] = v25;
  v45[5] = v38;
  AppendModeTraverseCFObject(v40, (uint64_t *)CFDictionary, (uint64_t)v46, (uint64_t)v45);
  CFRelease(v25);
  return v42;
}

uint64_t CGPDFAppenderCreateAnnotationObject(char *a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *CFDictionary;
  const void *v7;
  const __CFDictionary *v8;
  const void *v9;
  CFTypeID v10;
  const void *v11;
  uint64_t CGPDFStreamObjectFromCGDisplayList;
  const __CFDictionary *v13;
  CGPDFDictionary *v14;
  const void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __CFArray *CFArray;
  const void *v20;
  __CFArray *v21;
  char *MutableObject;
  void *v23;
  uint64_t v24;
  char *v25;
  int v26;
  CFNumberRef CFObject;
  __CFArray *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFMutableArrayRef Mutable;
  CGPDFArrayRef v33;
  CGPDFObjectRef value;
  float64x2_t v35;

  CFDictionary = *(__CFDictionary **)(a3 + 24);
  if (!CFDictionary)
  {
    CFDictionary = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a3 + 16));
    *(_QWORD *)(a3 + 24) = CFDictionary;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
    v15 = (const void *)CGPDFNameCreate("P");
    CFDictionaryRemoveValue(CFDictionary, v15);
    CFRelease(v15);
    return CGPDFAppenderCreateMutableObject((uint64_t)a1, CFDictionary);
  }
  v7 = (const void *)CGPDFNameCreate("AP");
  v8 = (const __CFDictionary *)CFDictionaryGetValue(CFDictionary, v7);
  CFRelease(v7);
  if (v8)
  {
    v9 = (const void *)CGPDFNameCreate("N");
    v8 = (const __CFDictionary *)CFDictionaryGetValue(v8, v9);
    CFRelease(v9);
    if (v8)
    {
      v10 = CFGetTypeID(v8);
      if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1)
        dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_124_14047);
      if (v10 == CGDisplayListGetTypeID::display_list2_type_id)
      {
        v11 = (const void *)CGPDFNameCreate("Rect");
        memset(&v35, 0, 32);
        CGCFDictionaryGetPDFRect(CFDictionary, v11, &v35);
        CFRelease(v11);
        CGPDFStreamObjectFromCGDisplayList = CGPDFAppenderCreateCGPDFStreamObjectFromCGDisplayList(a1, v8, v35.f64[0], v35.f64[1]);
        v8 = v13;
        if (a2)
          v14 = *(CGPDFDictionary **)(*(_QWORD *)(a2 + 40) + 16);
        else
          v14 = 0;
        value = 0;
        CGPDFDictionaryGetObject(v14, "Contents", &value);
        v17 = *((_QWORD *)value + 2);
        v18 = *((_QWORD *)value + 3);
        if (!(v17 | (unsigned __int16)v18))
        {
          v33 = 0;
          CGPDFDictionaryGetArray(v14, "Contents", &v33);
          CFArray = CGPDFAppenderCreateCFArray(v33);
          v20 = (const void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
          CFArrayAppendValue(CFArray, v20);
          CFRelease(v20);
          CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", CFArray, 2);
          v21 = CFArray;
LABEL_18:
          CFRelease(v21);
          goto LABEL_32;
        }
        if (CGPDFAppenderHasMutableObject((uint64_t)a1, *((_QWORD *)value + 2), *((_QWORD *)value + 3)))
        {
          MutableObject = CGPDFAppenderGetMutableObject(a1, v17, v18);
          v23 = (void *)CGPDFReferenceCreate(CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
          CFArrayAppendValue((CFMutableArrayRef)MutableObject, v23);
          v21 = (__CFArray *)v23;
          goto LABEL_18;
        }
        if (!a2)
          goto LABEL_25;
        v24 = *(_QWORD *)(a2 + 16);
        if (!v24)
          goto LABEL_25;
        v25 = pdf_xref_resolve(**(_QWORD **)(*(_QWORD *)(v24 + 16) + 16), (int)v17, (unsigned __int16)v18);
        if (!v25)
          goto LABEL_25;
        v26 = *((_DWORD *)v25 + 2);
        if (v26 != 9)
        {
          if (v26 == 7)
          {
            CFObject = CGPDFAppenderCreateCFObject((uint64_t)v25, 1);
            CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", CFObject, 2);
            CFRelease(CFObject);
            v28 = CFObject;
LABEL_34:
            CGPDFAppenderArrayAppendCGPDFReference(v28, CGPDFStreamObjectFromCGDisplayList, (uint64_t)v8);
            goto LABEL_32;
          }
LABEL_25:
          pdf_error("Unknown format for /Contents for append mode");
          goto LABEL_32;
        }
        v29 = *((_QWORD *)v25 + 4);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          v31 = *(_QWORD *)(v29 + 32);
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
        if (v30 | (unsigned __int16)v31)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          CGPDFAppenderMutateDictionaryValue(a1, (uint64_t *)v14, "Contents", Mutable, 4);
          CFRelease(Mutable);
          CGPDFAppenderArrayAppendCGPDFReference(Mutable, v30, v31);
          v28 = Mutable;
          goto LABEL_34;
        }
        pdf_error("Failed to extract contents array for append burn in of annotation");
      }
      CGPDFStreamObjectFromCGDisplayList = 0;
      v8 = 0;
      goto LABEL_32;
    }
  }
  CGPDFStreamObjectFromCGDisplayList = 0;
LABEL_32:
  result = 0;
  *(_QWORD *)(a3 + 40) = CGPDFStreamObjectFromCGDisplayList;
  *(_QWORD *)(a3 + 48) = v8;
  return result;
}

__int128 *rips_cm_super()
{
  return &_rips_class;
}

uint64_t rips_cm_size()
{
  return 168;
}

void rips_cm_release(void *a1)
{
  int v1;

  v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1)
    free(a1);
}

float *rips_cm_Create(uint64_t a1, uint64_t a2)
{
  size_t v4;
  float *result;
  uint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  BOOL v11;
  BOOL v12;

  v4 = (*(uint64_t (**)(void))(a1 + 8))();
  result = (float *)malloc_type_calloc(1uLL, v4, 0x4579193DuLL);
  if (result)
  {
    v6 = 0;
    *(_QWORD *)result = a1;
    *((_QWORD *)result + 1) = 0x8F100000001;
    if (a2)
      v7 = a2 + 32;
    else
      v7 = 0;
    v8 = (float64x2_t *)(v7 + 8);
    do
    {
      v10 = *v8;
      v9 = v8[1];
      v8 += 2;
      *(float32x4_t *)&result[v6 + 20] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
      v6 += 4;
    }
    while (v6 != 20);
    v11 = result[23] != 0.0
       || result[28] != 0.0
       || result[33] != 0.0
       || result[35] != 0.0
       || result[36] != 0.0
       || result[37] != 0.0
       || result[38] != 1.0
       || result[39] != 0.0;
    v12 = result[24] != 0.0 || result[29] != 0.0 || result[34] != 0.0 || result[39] != 0.0;
    *((_BYTE *)result + 160) = v11 || v12;
  }
  return result;
}

uint64_t rips_cm_Growth()
{
  return 0;
}

uint64_t rips_cm_ColorSpace()
{
  return rips_cm_cs;
}

uint64_t rips_cm_BltShape(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int *v9;
  int *v10;

  v9 = (int *)(a3 + 12);
  if (!a3)
    v9 = (int *)(a2 + 12);
  if (a4)
    v9 = a4;
  if (a5)
    v10 = (int *)(a5 + 12);
  else
    v10 = v9;
  return rips_cm_Draw(a1, a2, a3, a4, v10, a5, 0, 0, 0, a6, a7, a8);
}

uint64_t rips_cm_BltGlyph(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int *v10;
  int *v11;

  v10 = a5;
  v11 = (int *)(a3 + 12);
  if (!a3)
    v11 = (int *)(a2 + 12);
  if (a4)
    v11 = a4;
  if (!a5)
    a5 = v11;
  return rips_cm_Draw(a1, a2, a3, a4, a5, 0, v10, 0, 0, a6, a7, a10);
}

uint64_t rips_cm_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;

  v8 = (uint64_t)a5;
  v9 = (int *)(a3 + 12);
  if (!a3)
    v9 = (int *)(a2 + 12);
  if (a4)
    v9 = a4;
  if (!a5)
    a5 = v9;
  return rips_cm_Draw(a1, a2, a3, a4, a5, 0, 0, v8, 0, a6, a7, a8);
}

uint64_t rips_cm_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int *v8;

  v8 = (int *)(a3 + 12);
  if (!a3)
    v8 = (int *)(a2 + 12);
  if (a4)
    v8 = a4;
  if (a5)
    v8 = (int *)a5;
  return rips_cm_Draw(a1, a2, a3, a4, v8, 0, 0, 0, a5, a6, a7, a8);
}

uint64_t rips_cm_Draw(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12)
{
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  dispatch_once_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  __int128 v38;
  __int128 v39;
  vImagePixelCount v41;
  vImagePixelCount v42;
  size_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  const float *p_matrix;
  int v78;
  unsigned int v79;
  __int16 *v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  int16_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  vImage_Buffer dest;
  _QWORD v91[2];
  __int128 v92;
  int32_t v93[4];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  int16_t v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  float32x4_t post_bias;
  float matrix;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  _OWORD v131[4];
  uint64_t v132;
  uint64_t v133;
  float32x4x4_t v134;

  v133 = *MEMORY[0x1E0C80C00];
  v92 = 0uLL;
  if (!a4 || a4 == a5)
  {
    v92 = *(_OWORD *)a5;
    v18 = 1;
    if (!DWORD2(v92) || !HIDWORD(v92))
      return v18;
  }
  else if (!CGSBoundsIntersection(a4, a5, &v92))
  {
    return 1;
  }
  memset(v98, 0, sizeof(v98));
  v19 = (int *)(a2 + 12);
  if (a3)
  {
    if ((CGSBoundsIntersection(v19, (int *)(a3 + 12), v98) & 1) == 0)
      return 1;
  }
  else
  {
    *(_OWORD *)v98 = *(_OWORD *)v19;
    if (!*(_DWORD *)&v98[4] || !*(_DWORD *)&v98[6])
      return 1;
  }
  v91[0] = 0;
  v91[1] = 0;
  if (!CGSBoundsIntersection((int *)&v92, (int *)v98, v91))
    return 1;
  if (*(_BYTE *)(a1 + 160))
    v27 = 1;
  else
    v27 = (**(_DWORD **)(a2 + 32) & 0x3F0000u) > 0x80000;
  v28 = v27;
  if (v28)
    v29 = 20;
  else
    v29 = 6;
  v30 = RIPGetDepthForLayerFormat(v29, v20, v21, v22, v23, v24, v25, v26);
  v34 = (int *)RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v91, 17, v30, *(unsigned int *)(a2 + 52), v31, v32, v33);
  if (!v34)
    return 0;
  v37 = v34;
  v38 = *(_OWORD *)(a12 + 16);
  v131[0] = *(_OWORD *)a12;
  v131[1] = v38;
  v39 = *(_OWORD *)(a12 + 48);
  v131[2] = *(_OWORD *)(a12 + 32);
  v131[3] = v39;
  v132 = *(_QWORD *)(a12 + 64);
  LODWORD(v131[0]) = 2;
  if (a6)
  {
    if ((RIPLayerBltShape(v34, 0, 0, a6, a10, a11, (uint64_t)v131, v36) & 1) == 0)
      return 0;
  }
  else if (a7)
  {
    if ((RIPLayerBltGlyph(v34, 0, 0, a7, a10, a11, 0, (uint64_t)v131) & 1) == 0)
      return 0;
  }
  else if (a8)
  {
    if ((RIPLayerBltImage((uint64_t)v34, 0, 0, a8, (uint64_t)v131, (uint64_t)a11, v35, v36) & 1) == 0)
      return 0;
  }
  else if (a9 && !RIPLayerBltShade((uint64_t)v34, 0, 0, a9, a10, (uint64_t)v131, v35, v36))
  {
    return 0;
  }
  v42 = v37[5];
  v41 = v37[6];
  dest.data = (void *)*((_QWORD *)v37 + 7);
  dest.height = v41;
  v43 = v37[12];
  dest.width = v42;
  dest.rowBytes = v43;
  if (*(_BYTE *)(a1 + 160))
    vImageUnpremultiplyData_RGBAFFFF(&dest, &dest, 0);
  if (v28)
  {
    v44 = *(_DWORD *)(a1 + 84);
    v46 = *(_DWORD *)(a1 + 96);
    v45 = *(_DWORD *)(a1 + 100);
    matrix = *(float *)(a1 + 80);
    v116 = v45;
    v47 = *(_DWORD *)(a1 + 124);
    v49 = *(_DWORD *)(a1 + 136);
    v48 = *(_DWORD *)(a1 + 140);
    v117 = *(_DWORD *)(a1 + 120);
    v118 = v48;
    v50 = *(_DWORD *)(a1 + 104);
    v51 = *(_DWORD *)(a1 + 108);
    v119 = v44;
    v120 = v50;
    v52 = *(_DWORD *)(a1 + 144);
    v53 = *(_DWORD *)(a1 + 148);
    v121 = v47;
    v122 = v52;
    v54 = *(_DWORD *)(a1 + 92);
    v123 = *(_DWORD *)(a1 + 88);
    v124 = v51;
    v55 = *(_DWORD *)(a1 + 132);
    v125 = *(_DWORD *)(a1 + 128);
    v126 = v53;
    v56 = *(_DWORD *)(a1 + 112);
    v57 = *(_DWORD *)(a1 + 116);
    v127 = v54;
    v128 = v56;
    v58 = *(_DWORD *)(a1 + 152);
    v59 = *(_DWORD *)(a1 + 156);
    v129 = v55;
    v130 = v58;
    post_bias.i64[0] = __PAIR64__(v57, v46);
    post_bias.i64[1] = __PAIR64__(v59, v49);
    vImageMatrixMultiply_ARGBFFFF(&dest, &dest, &matrix, 0, post_bias.f32, 0);
  }
  else
  {
    v64 = *(_DWORD *)(a1 + 104);
    v63 = *(_DWORD *)(a1 + 108);
    v65 = *(_DWORD *)(a1 + 132);
    matrix = *(float *)(a1 + 128);
    v116 = v63;
    v66 = *(_DWORD *)(a1 + 92);
    v68 = *(_DWORD *)(a1 + 136);
    v67 = *(_DWORD *)(a1 + 140);
    v117 = *(_DWORD *)(a1 + 88);
    v118 = v67;
    v69 = *(_DWORD *)(a1 + 120);
    v119 = *(_DWORD *)(a1 + 124);
    v120 = v64;
    v70 = *(_DWORD *)(a1 + 80);
    v71 = *(_DWORD *)(a1 + 144);
    v72 = *(_DWORD *)(a1 + 148);
    v121 = *(_DWORD *)(a1 + 84);
    v122 = v71;
    v74 = *(_DWORD *)(a1 + 96);
    v73 = *(_DWORD *)(a1 + 100);
    v123 = v69;
    v124 = v73;
    v125 = v70;
    v126 = v72;
    v75 = *(_DWORD *)(a1 + 112);
    v76 = *(_DWORD *)(a1 + 116);
    v127 = v65;
    v128 = v75;
    p_matrix = &matrix;
    v78 = *(_DWORD *)(a1 + 152);
    v79 = *(_DWORD *)(a1 + 156);
    v129 = v66;
    v130 = v78;
    v134 = vld4q_f32(p_matrix);
    post_bias.i64[0] = __PAIR64__(v76, v68);
    *(int16x4_t *)v134.val[0].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[0], 8uLL));
    *(int16x4_t *)v134.val[1].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[1], 8uLL));
    *(int16x4_t *)v134.val[2].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[2], 8uLL));
    *(int16x4_t *)v134.val[3].f32 = vmovn_s32(vcvtq_n_s32_f32(v134.val[3], 8uLL));
    v80 = v98;
    post_bias.i64[1] = __PAIR64__(v79, v74);
    *(int32x4_t *)v93 = vcvtq_n_s32_f32(vmulq_f32(post_bias, (float32x4_t)vdupq_n_s32(0x437F0000u)), 8uLL);
    vst4_s16(v80, *(int16x4x4_t *)v134.val[0].f32);
    vImageMatrixMultiply_ARGB8888(&dest, &dest, v98, 256, 0, v93, 0);
  }
  if (*(_BYTE *)(a1 + 160))
    vImagePremultiplyData_RGBAFFFF(&dest, &dest, 0);
  v100 = xmmword_1850006C0;
  v101 = unk_1850006D0;
  v104 = xmmword_185000700;
  v105 = unk_185000710;
  v102 = xmmword_1850006E0;
  v103 = unk_1850006F0;
  v108 = xmmword_185000740;
  v109 = unk_185000750;
  v106 = xmmword_185000720;
  v107 = unk_185000730;
  v113 = 0;
  v111 = unk_185000770;
  v112 = xmmword_185000780;
  v110 = xmmword_185000760;
  *(_OWORD *)v98 = RIPImageDataInitializer;
  v99 = *(_OWORD *)algn_1850006B0;
  *(_QWORD *)&v100 = *((_QWORD *)v37 + 4);
  DWORD2(v101) = v37[5];
  DWORD2(v100) = DWORD2(v101);
  HIDWORD(v101) = v37[6];
  *(_QWORD *)&v101 = 0;
  HIDWORD(v100) = HIDWORD(v101);
  LODWORD(v102) = v37[12];
  *((_QWORD *)&v102 + 1) = *((_QWORD *)v37 + 7);
  *((_QWORD *)&v103 + 1) = *((_QWORD *)v37 + 9);
  LODWORD(v103) = v37[16];
  v104 = 0uLL;
  v88 = 0;
  v84 = *(_OWORD *)(v37 + 3);
  v89 = 0;
  v86 = 0;
  v87 = 0;
  v85 = v98;
  v81 = *(_OWORD *)(a12 + 48);
  v95 = *(_OWORD *)(a12 + 32);
  v96 = v81;
  v82 = *(_QWORD *)(a12 + 64);
  v83 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)v93 = *(_OWORD *)a12;
  v94 = v83;
  v97 = v82;
  *(_QWORD *)&v96 = 0x3FF0000000000000;
  v18 = RIPLayerBltImage(a2, a3, (uint64_t)v91, (uint64_t)&v84, (uint64_t)v93, v60, v61, v62);
  (*(void (**)(int *))(*(_QWORD *)v37 + 24))(v37);
  return v18;
}

void buffer_provider_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;
  char v11;

  if (*(_QWORD *)(a1 + 128))
    _CGHandleAssert("buffer_provider_finalize", 173, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer == NULL", "provider byte pointer method missing", a6, a7, a8, v11);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, *(_QWORD *)(a1 + 16));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  v10 = *(const void **)(a1 + 136);
  if (v10)
    CFRelease(v10);
  _Block_release(*(const void **)(a1 + 32));
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));
}

const __CFString *buffer_provider_copy_format_description(CFStringRef a1)
{
  char *v3;

  if (!os_variant_has_internal_content())
    return CFSTR("CGBufferProvider");
  if (a1)
  {
    v3 = 0;
    asprintf(&v3, "CGBufferProvider: %p size: %zu retain count: %d retained pointer: %p", a1, a1->length, LODWORD(a1[3].length), a1[4].isa);
    a1 = CFStringCreateWithFormat(0, 0, CFSTR("%s\n%@"), v3, &stru_1E1664C98);
    free(v3);
  }
  return a1;
}

uint64_t buffer_provider_retain_count(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  const __CFAllocator *v14;

  if (a1 == -1)
  {
    v12 = a2 + 30;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 - 1, v12));
    if (v13 == 1)
    {
      buffer_provider_finalize((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v14 = CFGetAllocator(a2);
      CFAllocatorDeallocate(v14, a2);
    }
    return 0;
  }
  if (!a1)
    return a2[30];
  if (a1 != 1)
    return 0;
  v9 = a2 + 30;
  do
  {
    v10 = __ldxr(v9);
    result = v10 + 1;
  }
  while (__stxr(result, v9));
  return result;
}

uint64_t CGBufferProviderGetTypeID()
{
  if (_block_invoke_once_16421 != -1)
    dispatch_once(&_block_invoke_once_16421, &__block_literal_global_11_16422);
  return CGBufferProviderGetTypeID_id;
}

uint64_t CGBufferProviderCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v14;
  pthread_mutexattr_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    CGPostError((uint64_t)"%s: Invalid size = %jd", 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)"CGBufferProviderCreate");
    return 0;
  }
  if (!a3)
    return 0;
  if (_block_invoke_once_16421 != -1)
    dispatch_once(&_block_invoke_once_16421, &__block_literal_global_11_16422);
  Instance = CGTypeCreateInstance(CGBufferProviderGetTypeID_id, 128, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (!Instance)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v16.__sig) = 136315138;
      *(uint64_t *)((char *)&v16.__sig + 4) = (uint64_t)"create_buffer_provider";
      _os_log_impl(&dword_1849A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s failed", (uint8_t *)&v16, 0xCu);
    }
    return 0;
  }
  v14 = Instance;
  *(_QWORD *)(Instance + 16) = a1;
  *(_QWORD *)(Instance + 24) = -1;
  *(_DWORD *)(Instance + 120) = 1;
  v16.__sig = 0;
  *(_QWORD *)v16.__opaque = 0;
  pthread_mutexattr_init(&v16);
  pthread_mutexattr_settype(&v16, 2);
  pthread_mutex_init((pthread_mutex_t *)(v14 + 56), &v16);
  pthread_mutexattr_destroy(&v16);
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = _Block_copy(a3);
  *(_QWORD *)(v14 + 40) = _Block_copy(a4);
  *(_QWORD *)(v14 + 48) = _Block_copy(a5);
  return v14;
}

uint64_t CGBufferProviderCreateWithCFData(const void *a1)
{
  CFTypeID v2;
  CFIndex Length;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (v2 != CFDataGetTypeID())
    return 0;
  CFRetain(a1);
  Length = CFDataGetLength((CFDataRef)a1);
  return CGBufferProviderCreate((uint64_t)a1, Length, &__block_literal_global_16439, 0, &__block_literal_global_4_16440, v4, v5, v6);
}

uint64_t CGBufferProviderGetSize(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

char *CGBufferLockBytePtr(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;

  if (result)
  {
    v1 = result;
    CFRetain(result);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
    result = (char *)*((_QWORD *)v1 + 16);
    if (*((_QWORD *)v1 + 5))
    {
      if (result)
        _CGHandleAssert("CGBufferLockBytePtr", 279, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer == NULL", "provider byte pointer method missing", v2, v3, v4, v5);
      goto LABEL_4;
    }
    if (!result)
    {
LABEL_4:
      *((_QWORD *)v1 + 16) = (*(uint64_t (**)(void))(*((_QWORD *)v1 + 4) + 16))();
      v6 = 0;
      asprintf(&v6, "CGBufferProvider: %p\n", v1);
      qword_1ECDA5E30 = (uint64_t)v6;
      ERROR_CGDataProvider_BufferIsNotReadable();
      ERROR_CGDataProvider_BufferIsNotBigEnough();
      qword_1ECDA5E30 = 0;
      free(v6);
      return (char *)*((_QWORD *)v1 + 16);
    }
  }
  return result;
}

void CGBufferUnlockBytePtr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  if (a1)
  {
    if (!*(_QWORD *)(a1 + 128))
      _CGHandleAssert("CGBufferUnlockBytePtr", 302, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGBufferProvider.c", "provider->byte_pointer != NULL", "provider byte pointer method missing", a6, a7, a8, v10);
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, *(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 128) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
    CFRelease((CFTypeRef)a1);
  }
}

BOOL pattern_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t pattern_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

CFTypeID CGPatternGetTypeID(void)
{
  if (kCGPatternWillDeallocate_block_invoke_once != -1)
    dispatch_once(&kCGPatternWillDeallocate_block_invoke_once, &__block_literal_global_5_16460);
  return CGPatternGetTypeID_pattern_type_id;
}

void draw_shading(CGShadingRef shading, CGContextRef c)
{
  CGContextDrawShading(c, shading);
}

void release_shading(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CGPatternRef CGPatternRetain(CGPatternRef pattern)
{
  if (pattern)
    CFRetain(pattern);
  return pattern;
}

CGPatternRef CGPatternCreateWithImage(unint64_t *a1, CGPatternTiling a2)
{
  return CGPatternCreateWithImage2(a1, &CGAffineTransformIdentity, a2);
}

void draw_image_16477(unint64_t *image, CGContextRef c)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;

  if (image)
  {
    v2 = (double)image[5];
    v3 = (double)image[6];
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
  }
  v4 = 0;
  v5 = 0;
  CGContextDrawImage(c, *(CGRect *)(&v2 - 2), (CGImageRef)image);
}

uint64_t CGPatternCreateUncoloredEmpty()
{
  uint64_t v0;

  if (create_empty_once != -1)
    dispatch_once_f(&create_empty_once, 0, (dispatch_function_t)create_empty);
  v0 = uncolored_empty;
  if (uncolored_empty)
    CFRetain((CFTypeRef)uncolored_empty);
  return v0;
}

CGPatternRef create_empty()
{
  CGPatternRef result;
  CGRect v1;
  CGRect v2;

  v1.origin.x = 0.0;
  v1.origin.y = 0.0;
  v1.size.width = 0.0;
  v1.size.height = 0.0;
  colored_empty = (uint64_t)CGPatternCreate(0, v1, (CGAffineTransform *)&CGAffineTransformIdentity, 0.0, 0.0, kCGPatternTilingConstantSpacing, 1, &create_empty_callbacks);
  *(_BYTE *)(colored_empty + 72) = 0;
  v2.origin.x = 0.0;
  v2.origin.y = 0.0;
  v2.size.width = 0.0;
  v2.size.height = 0.0;
  result = CGPatternCreate(0, v2, (CGAffineTransform *)&CGAffineTransformIdentity, 0.0, 0.0, kCGPatternTilingConstantSpacing, 0, &create_empty_callbacks);
  uncolored_empty = (uint64_t)result;
  *((_BYTE *)result + 72) = 0;
  return result;
}

uint64_t CGPatternCreateColoredEmpty()
{
  uint64_t v0;

  if (create_empty_once != -1)
    dispatch_once_f(&create_empty_once, 0, (dispatch_function_t)create_empty);
  v0 = colored_empty;
  if (colored_empty)
    CFRetain((CFTypeRef)colored_empty);
  return v0;
}

uint64_t CGPatternGetIdentifier(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CGPatternIsOpaque(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186);
}

uint64_t CGContextDrawPatternCell(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, uint64_t);

  if (a2)
  {
    v2 = *(uint64_t (**)(_QWORD, uint64_t))(a2 + 168);
    if (v2)
      return v2(*(_QWORD *)(a2 + 80), result);
  }
  return result;
}

void CGPatternDrawInContextDelegate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  void (*v10)(_QWORD, const void *);

  v9 = (const void *)CGContextCreateWithDelegateAndInfo(a2, 0, a3, a4, 0, 0, a7, a8);
  if (a1)
  {
    v10 = *(void (**)(_QWORD, const void *))(a1 + 168);
    if (v10)
      v10(*(_QWORD *)(a1 + 80), v9);
  }
  if (v9)
    CFRelease(v9);
}

unint64_t CGPatternSetAssociate(unint64_t result, unint64_t a2)
{
  unint64_t *v2;

  if (result)
  {
    v2 = (unint64_t *)(result + 88);
    while (!__ldxr(v2))
    {
      if (!__stxr(a2, v2))
        return *v2;
    }
    __clrex();
    return *v2;
  }
  return result;
}

uint64_t CGPatternGetAssociate(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

_DWORD *CGPDFNodeCreateIteratorToNode(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _DWORD *v4;
  void *v9;
  BOOL v10;
  uint64_t TextRange;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int ChildIndex;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = 0;
  if (!a1)
    return v4;
  if (!a2)
    return v4;
  v4 = malloc_type_malloc(0x48uLL, 0x10A0040D82D4B19uLL);
  if (!v4)
    return v4;
  v9 = malloc_type_malloc(0x60uLL, 0x80040B8603338uLL);
  *((_QWORD *)v4 + 8) = v9;
  if (!v9)
  {
    free(v4);
    return 0;
  }
  v10 = 1;
  *v4 = 1;
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = a2;
  TextRange = CGPDFNodeGetTextRange(a1);
  v13 = v12;
  v14 = CGPDFNodeGetTextRange(a2);
  *((_QWORD *)v4 + 4) = v14 + v15;
  if (v14 + v15 <= TextRange + v13)
  {
    if (v14 + v15 == TextRange + v13)
    {
      if (a1 != a2)
      {
        v16 = a1;
        do
        {
          v16 = *(_QWORD *)(v16 + 8);
          v10 = v16 != 0;
        }
        while (v16 != a2 && v16 != 0);
      }
    }
    else
    {
      v10 = 0;
    }
  }
  *((_BYTE *)v4 + 24) = v10;
  v18 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v18;
  if (v18)
  {
    ChildIndex = CGPDFNodeGetChildIndex(a1);
  }
  else
  {
    *((_QWORD *)v4 + 6) = a1;
    if ((*(_BYTE *)(a1 + 1) & 2) != 0)
      ChildIndex = *(_DWORD *)(a1 + 44);
    else
      ChildIndex = 0;
  }
  v4[14] = ChildIndex;
  *((_BYTE *)v4 + 60) = v10;
  v20 = (_QWORD *)*((_QWORD *)v4 + 8);
  if (a3)
  {
    *v20 = CGPDFNodeIteratorReject;
    v21 = CGPDFNodeIteratorAccept;
    if (a3 == 1)
      v22 = CGPDFNodeIteratorAccept;
    else
      v22 = CGPDFNodeIteratorReject;
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 8) = v22;
    if (a4)
      v23 = CGPDFNodeIteratorAccept;
    else
      v23 = CGPDFNodeIteratorReject;
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 24) = v23;
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 32) = v23;
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 40) = v23;
    *(_QWORD *)(*((_QWORD *)v4 + 8) + 16) = CGPDFNodeIteratorReject;
    if (a3 <= 1536)
    {
      switch(a3)
      {
        case 514:
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorAccept;
          v21 = CGPDFNodeIteratorRecurseReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorRecurseReject;
          v24 = *((_QWORD *)v4 + 8);
          goto LABEL_44;
        case 515:
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = CGPDFNodeIteratorAccept;
          v25 = CGPDFNodeIteratorRecurseReject;
          goto LABEL_34;
        case 516:
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = CGPDFNodeIteratorAccept;
          goto LABEL_51;
        case 517:
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = CGPDFNodeIteratorReject;
          *(_QWORD *)(*((_QWORD *)v4 + 8) + 80) = CGPDFNodeIteratorReject;
          goto LABEL_53;
        default:
          if (a3 != 1)
            goto LABEL_45;
          v25 = CGPDFNodeIteratorRecurseReject;
          break;
      }
      goto LABEL_33;
    }
    if (a3 == 1537)
    {
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorAccept;
      v24 = *((_QWORD *)v4 + 8);
      v21 = CGPDFNodeIteratorRecurseReject;
LABEL_44:
      *(_QWORD *)(v24 + 64) = CGPDFNodeIteratorRecurseReject;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = CGPDFNodeIteratorRecurseReject;
      v27 = *((_QWORD *)v4 + 8);
    }
    else
    {
      if (a3 == 1538)
      {
        *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
        *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorReject;
        *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = CGPDFNodeIteratorReject;
        *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = CGPDFNodeIteratorReject;
        *(_QWORD *)(*((_QWORD *)v4 + 8) + 80) = CGPDFNodeIteratorRecurseAccept;
        v26 = *((_QWORD *)v4 + 8);
        v21 = CGPDFNodeIteratorRecurseReject;
LABEL_54:
        *(_QWORD *)(v26 + 88) = v21;
        return v4;
      }
LABEL_45:
      v28 = 1;
      while (kCGPDFNodeTypeOrder[v28] != a3)
      {
        if (++v28 == 12)
        {
          v28 = 0;
          goto LABEL_50;
        }
      }
      v28 = v28;
LABEL_50:
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 8 * v28) = CGPDFNodeIteratorAccept;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = CGPDFNodeIteratorReject;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = CGPDFNodeIteratorReject;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = CGPDFNodeIteratorReject;
      *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = CGPDFNodeIteratorReject;
LABEL_51:
      v27 = *((_QWORD *)v4 + 8);
      v21 = CGPDFNodeIteratorRecurseReject;
    }
    *(_QWORD *)(v27 + 80) = CGPDFNodeIteratorRecurseReject;
LABEL_53:
    v26 = *((_QWORD *)v4 + 8);
    goto LABEL_54;
  }
  *v20 = CGPDFNodeIteratorAccept;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 8) = CGPDFNodeIteratorAccept;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 24) = CGPDFNodeIteratorAccept;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 32) = CGPDFNodeIteratorAccept;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 40) = CGPDFNodeIteratorAccept;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 16) = CGPDFNodeIteratorReject;
  v25 = CGPDFNodeIteratorRecurseAccept;
LABEL_33:
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 48) = v25;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 56) = v25;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 64) = v25;
LABEL_34:
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 72) = v25;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 80) = v25;
  *(_QWORD *)(*((_QWORD *)v4 + 8) + 88) = v25;
  return v4;
}

uint64_t CGPDFNodeIteratorAccept(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = CGPDFNodeIsUsedGraphic(a2);
  if ((result & 1) == 0)
  {
    *(_QWORD *)(a3 + 40) = a2;
    if (a2)
      v7 = *(_QWORD *)(a2 + 8);
    else
      v7 = 0;
    if (!v7)
      v7 = a2;
    *(_QWORD *)(a3 + 48) = v7;
    *(_DWORD *)(a3 + 56) = a1;
  }
  *(_BYTE *)(a3 + 60) = 0;
  return result;
}

uint64_t CGPDFNodeIteratorReject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 60) = 0;
  return 1;
}

uint64_t CGPDFNodeIteratorRecurseAccept(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  LODWORD(result) = *(unsigned __int8 *)(a3 + 60);
  while (1)
  {
    v7 = result;
    v8 = *(unsigned __int8 *)(a3 + 24);
    if ((_DWORD)result == v8)
    {
      *(_QWORD *)(a3 + 40) = a2;
      if (a2)
        v17 = *(_QWORD *)(a2 + 8);
      else
        v17 = 0;
      result = 0;
      if (!v17)
        v17 = a2;
      *(_QWORD *)(a3 + 48) = v17;
      *(_DWORD *)(a3 + 56) = a1;
      *(_BYTE *)(a3 + 60) = v7 ^ 1;
      return result;
    }
    *(_BYTE *)(a3 + 60) = 0;
    if (!a2 || (*(_BYTE *)(a2 + 1) & 2) == 0)
    {
      if (!v8)
      {
        v9 = 0;
LABEL_24:
        while (v9)
        {
          --v9;
          if (a2
            && (*(_BYTE *)(a2 + 1) & 2) != 0
            && *(_DWORD *)(a2 + 44) > v9
            && (v14 = *(int **)(*(_QWORD *)(a2 + 56) + 8 * v9)) != 0)
          {
            v15 = *v14;
          }
          else
          {
            v15 = 0;
          }
          v16 = 1;
          while (kCGPDFNodeTypeOrder[v16] != v15)
          {
            if (++v16 == 12)
            {
              LODWORD(v16) = 0;
              break;
            }
          }
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 64) + 8 * v16))(v9) & 1) == 0)
            return 0;
        }
      }
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(a2 + 44);
    if (!v8)
      goto LABEL_24;
    if (*(_DWORD *)(a2 + 44))
      break;
LABEL_6:
    *(_BYTE *)(a3 + 60) = v7 ^ 1;
    result = 1;
    if (v7)
      return result;
  }
  v10 = 0;
  while (1)
  {
    if ((*(_BYTE *)(a2 + 1) & 2) != 0
      && v10 < *(unsigned int *)(a2 + 44)
      && (v11 = *(int **)(*(_QWORD *)(a2 + 56) + 8 * v10)) != 0)
    {
      v12 = *v11;
    }
    else
    {
      v12 = 0;
    }
    v13 = 1;
    while (kCGPDFNodeTypeOrder[v13] != v12)
    {
      if (++v13 == 12)
      {
        LODWORD(v13) = 0;
        break;
      }
    }
    if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)(a3 + 64) + 8 * v13))(v10) & 1) == 0)
      return 0;
    if (++v10 == v9)
      goto LABEL_6;
  }
}

uint64_t CGPDFNodeIteratorRecurseReject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;

  LODWORD(result) = *(unsigned __int8 *)(a3 + 60);
  while (1)
  {
    v6 = result;
    v7 = *(unsigned __int8 *)(a3 + 24);
    if ((_DWORD)result == (v7 ^ 1))
    {
      *(_BYTE *)(a3 + 60) = 0;
      if (a2 && (*(_BYTE *)(a2 + 1) & 2) != 0)
      {
        v8 = *(unsigned int *)(a2 + 44);
        if (!v7)
          goto LABEL_34;
      }
      else
      {
        v8 = 0;
        if (!v7)
        {
LABEL_34:
          while (v8)
          {
            --v8;
            if (a2
              && (*(_BYTE *)(a2 + 1) & 2) != 0
              && *(_DWORD *)(a2 + 44) > v8
              && (v13 = *(int **)(*(_QWORD *)(a2 + 56) + 8 * v8)) != 0)
            {
              v14 = *v13;
            }
            else
            {
              v14 = 0;
            }
            v15 = 1;
            while (kCGPDFNodeTypeOrder[v15] != v14)
            {
              if (++v15 == 12)
              {
                LODWORD(v15) = 0;
                break;
              }
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 64) + 8 * v15))(v8) & 1) == 0)
              return 0;
          }
          goto LABEL_35;
        }
      }
      if (v8)
        break;
    }
LABEL_35:
    *(_BYTE *)(a3 + 60) = v6 ^ 1;
    result = 1;
    if (v6)
      return result;
  }
  v9 = 0;
  while (1)
  {
    if (a2
      && (*(_BYTE *)(a2 + 1) & 2) != 0
      && v9 < *(unsigned int *)(a2 + 44)
      && (v10 = *(int **)(*(_QWORD *)(a2 + 56) + 8 * v9)) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v11 = 0;
    }
    v12 = 1;
    while (kCGPDFNodeTypeOrder[v12] != v11)
    {
      if (++v12 == 12)
      {
        LODWORD(v12) = 0;
        break;
      }
    }
    if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)(a3 + 64) + 8 * v12))(v9) & 1) == 0)
      return 0;
    if (++v9 == v8)
      goto LABEL_35;
  }
}

_DWORD *CGPDFNodeIteratorRetain(_DWORD *result)
{
  if (result)
    ++*result;
  return result;
}

void CGPDFNodeIteratorRelease(void **a1)
{
  int v2;

  if (a1 && *(_DWORD *)a1)
  {
    v2 = *(_DWORD *)a1 - 1;
    *(_DWORD *)a1 = v2;
    if (!v2)
    {
      free(a1[8]);
      free(a1);
    }
  }
}

uint64_t CGPDFNodeIteratorNextNode(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int ChildIndex;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TextRange;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  if (!result)
    return result;
  v1 = result;
  v2 = *(_QWORD *)(result + 48);
  if (!v2)
    return 0;
  while (1)
  {
    *(_QWORD *)(v1 + 40) = 0;
    if ((*(_DWORD *)v2 & 0x200) == 0)
      break;
    v3 = *(unsigned int *)(v2 + 44);
    v4 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v4 == (_DWORD)v3)
      goto LABEL_45;
    if (!(_DWORD)v3)
      return 0;
    if (*(_BYTE *)(v1 + 24))
    {
      if (v4 < v3)
      {
        while (1)
        {
          if ((*(_BYTE *)(v2 + 1) & 2) != 0
            && v4 < *(unsigned int *)(v2 + 44)
            && (v5 = *(int **)(*(_QWORD *)(v2 + 56) + 8 * v4)) != 0)
          {
            v6 = *v5;
          }
          else
          {
            v6 = 0;
          }
          v7 = 1;
          while (kCGPDFNodeTypeOrder[v7] != v6)
          {
            if (++v7 == 12)
            {
              LODWORD(v7) = 0;
              break;
            }
          }
          if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v1 + 64) + 8 * v7))(v4) & 1) == 0)
            goto LABEL_50;
          if (++v4 == v3)
            goto LABEL_19;
        }
      }
LABEL_20:
      *(_DWORD *)(v1 + 56) = CGPDFNodeGetChildIndex(v2);
      v8 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v1 + 48) = v8;
      if (v8)
      {
        v9 = 1;
        v2 = v8;
      }
      else
      {
        *(_QWORD *)(v1 + 48) = v2;
        *(_DWORD *)(v1 + 56) = v3;
        v9 = 1;
      }
      goto LABEL_41;
    }
    v11 = (v4 + 1);
    while (v11)
    {
      --v11;
      if ((*(_BYTE *)(v2 + 1) & 2) != 0
        && *(_DWORD *)(v2 + 44) > v11
        && (v12 = *(int **)(*(_QWORD *)(v2 + 56) + 8 * v11)) != 0)
      {
        v13 = *v12;
      }
      else
      {
        v13 = 0;
      }
      v14 = 1;
      while (kCGPDFNodeTypeOrder[v14] != v13)
      {
        if (++v14 == 12)
        {
          LODWORD(v14) = 0;
          break;
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 64) + 8 * v14))(v11) & 1) == 0)
        goto LABEL_50;
    }
LABEL_19:
    if (*(_BYTE *)(v1 + 24))
      goto LABEL_20;
    do
    {
      ChildIndex = CGPDFNodeGetChildIndex(v2);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (!ChildIndex && v2);
    if (!ChildIndex)
      return 0;
    v9 = 0;
    *(_DWORD *)(v1 + 56) = ChildIndex - 1;
    *(_QWORD *)(v1 + 48) = v2;
LABEL_41:
    result = 0;
    *(_BYTE *)(v1 + 60) = v9;
    if (!v2)
      return result;
  }
  if (*(_DWORD *)(v1 + 56))
    return 0;
  v3 = 0;
LABEL_45:
  v15 = 1;
  while (kCGPDFNodeTypeOrder[v15] != *(_DWORD *)v2)
  {
    if (++v15 == 12)
    {
      LODWORD(v15) = 0;
      break;
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 64) + 8 * v15))(v3, v2, v1) & 1) == 0)
  {
LABEL_50:
    v16 = *(_QWORD *)(v1 + 40);
    if (v16)
    {
      TextRange = CGPDFNodeGetTextRange(v16);
      v19 = *(_QWORD *)(v1 + 32);
      if (*(_BYTE *)(v1 + 24))
      {
        if (TextRange + v18 > v19)
          return 0;
        if (TextRange + v18 == v19)
        {
          v20 = *(_QWORD *)(v1 + 40);
          v21 = *(_QWORD *)(v1 + 16);
          if (v20 != v21)
          {
            if (v21)
            {
              do
                v21 = *(_QWORD *)(v21 + 8);
              while (v21 != v20 && v21 != 0);
LABEL_71:
              if (v21)
                return 0;
            }
          }
        }
      }
      else
      {
        if (TextRange + v18 < v19)
          return 0;
        if (TextRange + v18 == v19)
        {
          v21 = *(_QWORD *)(v1 + 40);
          v23 = *(_QWORD *)(v1 + 16);
          if (v21 != v23)
          {
            if (v21)
            {
              do
                v21 = *(_QWORD *)(v21 + 8);
              while (v21 != v23 && v21 != 0);
              goto LABEL_71;
            }
          }
        }
      }
      if (!*(_BYTE *)(v1 + 60))
      {
        v25 = *(_DWORD *)(v1 + 56);
        if (*(_BYTE *)(v1 + 24))
        {
          *(_DWORD *)(v1 + 56) = v25 + 1;
          v26 = *(_QWORD *)(v1 + 48);
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 1) & 2) == 0 || (v25 + 1) >= *(_DWORD *)(v26 + 44))
            {
              *(_DWORD *)(v1 + 56) = CGPDFNodeGetChildIndex(*(_QWORD *)(v1 + 48));
              v27 = *(_QWORD *)(v26 + 8);
              goto LABEL_85;
            }
          }
          else
          {
            v29 = CGPDFNodeGetChildIndex(0);
            v27 = 0;
            *(_DWORD *)(v1 + 56) = v29;
LABEL_85:
            *(_QWORD *)(v1 + 48) = v27;
            *(_BYTE *)(v1 + 60) = 1;
          }
        }
        else if (v25)
        {
LABEL_83:
          *(_DWORD *)(v1 + 56) = v25 - 1;
        }
        else
        {
          v28 = *(_QWORD *)(v1 + 48);
          while (v28)
          {
            v25 = CGPDFNodeGetChildIndex(v28);
            *(_DWORD *)(v1 + 56) = v25;
            v28 = *(_QWORD *)(v28 + 8);
            *(_QWORD *)(v1 + 48) = v28;
            if (v25)
              goto LABEL_83;
          }
        }
      }
    }
    return *(_QWORD *)(v1 + 40);
  }
  return 0;
}

uint64_t CGPDFNodeIteratorRestart(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    *(_QWORD *)(result + 40) = 0;
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      v2 = *(_QWORD *)(result + 8);
      *(_QWORD *)(v1 + 48) = v2;
      if (v2)
      {
        result = CGPDFNodeGetChildIndex(result);
      }
      else
      {
        *(_QWORD *)(v1 + 48) = result;
        if ((*(_BYTE *)(result + 1) & 2) != 0)
          result = *(unsigned int *)(result + 44);
        else
          result = 0;
      }
    }
    else
    {
      *(_QWORD *)(v1 + 48) = 0;
    }
    *(_DWORD *)(v1 + 56) = result;
    *(_BYTE *)(v1 + 60) = *(_BYTE *)(v1 + 24);
  }
  return result;
}

uint64_t CGPDFNodeIsHitByPoint(uint64_t result, double a2, double a3, double a4)
{
  __n64 *v7;
  double Rotation;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  uint64_t v13;
  double HitTestRect;
  uint64_t v16;
  uint64_t v17;
  unsigned __int32 v18;
  __n64 *v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int ChildIndexAtX;
  __n64 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v30;
  double v31;
  __n64 *v32;
  double v33;
  CGPoint v34;
  CGRect v35;

  if (result)
  {
    v7 = (__n64 *)result;
    Rotation = CGPDFNodeGetRotation(result);
    v9 = Rotation;
    if (Rotation == 0.0)
    {
      v12 = a3;
      v11 = a2;
    }
    else
    {
      v10 = __sincos_stret(Rotation);
      v11 = a3 * v10.__sinval + v10.__cosval * a2 + 0.0;
      v12 = a3 * v10.__cosval - v10.__sinval * a2 + 0.0;
    }
    HitTestRect = CGPDFNodeGetHitTestRect((uint64_t)v7, a4);
    v17 = v16;
    v18 = v7->n64_u32[0];
    if (v7->n64_u32[0] == 1)
    {
      v19 = (__n64 *)v7[1].n64_u64[0];
      if (v19)
      {
        if (v9 == 0.0)
        {
          CGPDFNodeGetHitTestRect((uint64_t)v19, a4);
        }
        else
        {
          v35.origin.x = CGPDFNodeGetBounds(v19).n64_f64[0];
          *(CGRect *)(&v13 - 1) = CGRectInset(v35, a4, a4);
        }
      }
    }
    v20 = HitTestRect;
    v21 = v17;
    v34.x = v11;
    v34.y = v12;
    result = CGRectContainsPoint(*(CGRect *)(&v13 - 1), v34);
    if ((_DWORD)result)
    {
      if (v18 == 1538 || v18 == 517)
      {
        if ((v7->n64_u8[1] & 2) == 0)
          return 0;
        v25 = v7[5].n64_u32[1];
        if (!(_DWORD)v25)
          return 0;
        v26 = 0;
        v27 = v25 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v26 < v7[5].n64_u32[1])
            v28 = *(_QWORD *)(v7[7].n64_u64[0] + 8 * v26);
          else
            v28 = 0;
          result = CGPDFNodeIsHitByPoint(v28, a2, a3, a4);
          if ((result & 1) != 0)
            break;
        }
        while (v27 != v26++);
      }
      else
      {
        if (v18 == 516)
        {
          if ((v7->n64_u8[1] & 2) == 0)
            return 0;
          v22 = v7[5].n64_u32[1];
          if (!v22)
            return 0;
          ChildIndexAtX = CGPDFNodeGetChildIndexAtX(v7, v11);
          if (ChildIndexAtX <= 1)
          {
            v24 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] ? *(__n64 **)v7[7].n64_u64[0] : 0;
            CGPDFNodeGetBounds(v24);
            if (v12 > v30 + v31 + a4)
              return 0;
          }
          if (ChildIndexAtX >= v22)
          {
            v32 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v22 - 1
                ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v22 - 1))
                : 0;
            CGPDFNodeGetBounds(v32);
            if (v12 < v33 - a4)
              return 0;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

double CGPDFNodeGetHitTestRect(uint64_t a1, double a2)
{
  __n64 v4;
  __n64 v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v12;
  BOOL v13;
  __n64 v14;
  __n64 v15;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  __n64 *v22;
  __n64 *v23;
  unsigned int v24;
  __n64 *v25;
  CGRect v26;

  v5.n64_u64[0] = CGPDFNodeGetBounds((__n64 *)a1).n64_u64[0];
  v6 = v4.n64_f64[0];
  v8 = v7;
  v10 = v9;
  if (v5.n64_f64[0] == INFINITY || v4.n64_f64[0] == INFINITY)
    return v5.n64_f64[0];
  if (!a1
    || ((v12 = *(_QWORD *)(a1 + 8), *(_DWORD *)a1 == 514) ? (v13 = v12 == 0) : (v13 = 1),
        v13
     || ((v14.n64_u64[0] = CGPDFNodeGetBounds(*(__n64 **)(a1 + 8)).n64_u64[0], v14.n64_f64[0] != INFINITY)
       ? (v18 = v15.n64_f64[0] == INFINITY)
       : (v18 = 1),
         v18)))
  {
    v26.origin.x = v5.n64_f64[0];
    v26.origin.y = v6;
    v26.size.width = v8;
    v26.size.height = v10;
    v5.n64_u64[0] = (unint64_t)CGRectInset(v26, -a2, -a2);
    return v5.n64_f64[0];
  }
  v5.n64_u64[0] = (unint64_t)CGRectInset(*(CGRect *)v14.n64_u64, -a2, -a2);
  if ((*(_BYTE *)(v12 + 1) & 2) != 0)
  {
    v20 = *(unsigned int *)(v12 + 44);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = v22;
        v22 = *(__n64 **)(*(_QWORD *)(v12 + 56) + 8 * v21);
        if (v22 == (__n64 *)a1)
          break;
        if (v20 == ++v21)
        {
          LODWORD(v21) = *(_DWORD *)(v12 + 44);
          break;
        }
      }
      if (v23)
        CGPDFNodeGetBounds(v23);
      goto LABEL_27;
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  LODWORD(v21) = 0;
LABEL_27:
  v24 = v21 + 1;
  if ((int)v21 + 1 < v20)
  {
    if ((*(_BYTE *)(v12 + 1) & 2) != 0 && *(_DWORD *)(v12 + 44) > v24)
      v25 = *(__n64 **)(*(_QWORD *)(v12 + 56) + 8 * v24);
    else
      v25 = 0;
    CGPDFNodeGetBounds(v25);
  }
  return v5.n64_f64[0];
}

unint64_t CGPDFNodeGetChildIndexAtX(__n64 *a1, double a2)
{
  __n64 v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  __n64 *v11;
  __n64 v12;
  double v13;
  double v14;
  double v15;

  if (!a1)
    return 0;
  v4.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  v5 = v4.n64_f64[0];
  v7 = v6;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    v8 = 0;
LABEL_17:
    v15 = v4.n64_f64[0];
LABEL_18:
    if ((v7 + v5 + v15) * 0.5 >= a2)
      return v8;
    else
      return (v8 + 1);
  }
  v8 = a1[5].n64_u32[1];
  if (!(_DWORD)v8)
    goto LABEL_17;
  v9 = 0;
  v10 = v4.n64_f64[0];
  while (1)
  {
    v11 = (a1->n64_u8[1] & 2) != 0 && v9 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v9) : 0;
    v12.n64_u64[0] = CGPDFNodeGetBounds(v11).n64_u64[0];
    v14 = v12.n64_f64[0] + v13;
    v15 = v10 <= v14 ? v10 : v14;
    if ((v12.n64_f64[0] + v15) * 0.5 > a2)
      break;
    ++v9;
    v10 = v14;
    if (v8 == v9)
    {
      v15 = v14;
      goto LABEL_18;
    }
  }
  if ((_DWORD)v9 == (_DWORD)v8)
    goto LABEL_18;
  return v9;
}

uint64_t CGPDFNodeGetNodeContainingPoint(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v7;
  char v8;

  v8 = 0;
  v7 = 0;
  return CGPDFNodeGetBestNodeContainingPoint(a1, a2, a3, &v7, &v8, a4, a5, a6);
}

uint64_t CGPDFNodeGetBestNodeContainingPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BYTE *a5, double a6, double a7, double a8)
{
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t BestNodeContainingPoint;
  uint64_t v27;
  __n64 *v28;
  unsigned __int32 v29;
  __n64 *v30;
  unsigned __int32 v31;
  double v32;
  double v33;
  double v34;
  __n64 v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double Rotation;
  double v43;
  __double2 v44;
  __double2 v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  __n64 v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGAffineTransform v57;
  CGAffineTransform v58;
  __n64 *v59;
  char v60[9];
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  *a5 = 0;
  if (!a1 || (CGPDFNodeIsUsedGraphic(a1) & 1) != 0)
    return 0;
  v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 513)
    v17 = 1;
  else
    v17 = (*(_DWORD *)a1 >> 8) & 1;
  if ((v16 & 0x100) != 0 || v16 == 516 || v16 == 513)
    *a4 = a1;
  if (!CGPDFNodeIsDirectlyHitByPoint(a1, a6, a7, a8))
    return 0;
  v18 = 1;
  if (a2 >= 2 && (a2 - 514) >= 2)
    v18 = a2 == 1537;
  v19 = v17 & a3;
  if (v16 == (_DWORD)a2)
    v19 = 1;
  if ((_DWORD)a2)
    v20 = v19;
  else
    v20 = 1;
  if (v16 == 1538 || (v20 ? (v21 = (_DWORD)a2 == 0) : (v21 = 1), v21))
  {
    if (((v16 == 516) & ~v18) != 0 || v16 == 513)
    {
LABEL_73:
      if (!v20)
        return 0;
LABEL_80:
      *a5 = CGPDFNodeIsDirectlyHitByPoint(a1, a6, a7, 0.0);
      return a1;
    }
  }
  else if (v16 != 517 || (a3 & 1) == 0)
  {
    goto LABEL_73;
  }
  v50 = v20;
  if ((*(_BYTE *)(a1 + 1) & 2) != 0)
  {
    v22 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 0;
      v51 = *(unsigned int *)(a1 + 44);
      v52 = a3;
      while (1)
      {
        if ((*(_BYTE *)(a1 + 1) & 2) != 0 && v23 < *(unsigned int *)(a1 + 44))
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v23);
        else
          v25 = 0;
        v60[0] = 0;
        v59 = (__n64 *)*a4;
        BestNodeContainingPoint = CGPDFNodeGetBestNodeContainingPoint(v25, a2, a3, &v59, v60, a6, a7, a8);
        if (!BestNodeContainingPoint)
          goto LABEL_71;
        v27 = BestNodeContainingPoint;
        if (!v24)
        {
          v30 = v59;
          goto LABEL_70;
        }
        v28 = (__n64 *)*a4;
        if (*a4)
          v29 = v28->n64_u32[0];
        else
          v29 = 0;
        v30 = v59;
        if (v59)
          v31 = v59->n64_u32[0];
        else
          v31 = 0;
        v53.n64_u64[0] = CGPDFNodeGetBounds(v28).n64_u64[0];
        v54 = v32;
        v55 = v33;
        v56 = v34;
        v35.n64_u64[0] = CGPDFNodeGetBounds(v30).n64_u64[0];
        v37 = v36;
        v39 = v38;
        v41 = v40;
        Rotation = CGPDFNodeGetRotation(*a4);
        v43 = CGPDFNodeGetRotation((uint64_t)v30);
        if (*a4 && v29 != 516 && v31 == 516)
        {
          v44 = __sincos_stret(v43 - Rotation);
          v58.a = v44.__cosval;
          v58.b = v44.__sinval;
          v58.c = -v44.__sinval;
          v58.d = v44.__cosval;
          v58.tx = 0.0;
          v58.ty = 0.0;
          v61.origin.x = v35.n64_f64[0];
          v61.origin.y = v37;
          v61.size.width = v39;
          v61.size.height = v41;
          v65 = CGRectApplyAffineTransform(v61, &v58);
          v62.origin.x = v53.n64_f64[0];
          v62.origin.y = v54;
          v62.size.width = v55;
          v62.size.height = v56;
          if (CGRectContainsRect(v62, v65))
          {
            a3 = v52;
            v22 = v51;
            goto LABEL_70;
          }
        }
        else if (v30)
        {
          if (v31 != 516 && v29 == 516)
          {
            v45 = __sincos_stret(Rotation - v43);
            v57.a = v45.__cosval;
            v57.b = v45.__sinval;
            v57.c = -v45.__sinval;
            v57.d = v45.__cosval;
            v57.tx = 0.0;
            v57.ty = 0.0;
            v63.origin.x = v53.n64_f64[0];
            v63.origin.y = v54;
            v63.size.width = v55;
            v63.size.height = v56;
            v66 = CGRectApplyAffineTransform(v63, &v57);
            v64.origin.x = v35.n64_f64[0];
            v64.origin.y = v37;
            v64.size.width = v39;
            v64.size.height = v41;
            if (CGRectContainsRect(v64, v66))
            {
              a3 = v52;
              v22 = v51;
              goto LABEL_71;
            }
          }
        }
        if (v60[0])
        {
          a3 = v52;
          v22 = v51;
          if (*a5)
          {
LABEL_59:
            v46 = v27;
            while ((*(_BYTE *)(v46 + 1) & 3) == 0)
            {
              v46 = *(_QWORD *)(v46 + 8);
              if (!v46)
                goto LABEL_64;
            }
            v46 = *(_QWORD *)(v46 + 96);
LABEL_64:
            v47 = v24;
            while ((*(_BYTE *)(v47 + 1) & 3) == 0)
            {
              v47 = *(_QWORD *)(v47 + 8);
              if (!v47)
                goto LABEL_69;
            }
            v47 = *(_QWORD *)(v47 + 96);
LABEL_69:
            if (v46 < v47)
              goto LABEL_71;
          }
LABEL_70:
          *a4 = (uint64_t)v30;
          *a5 = v60[0];
          v24 = v27;
          goto LABEL_71;
        }
        a3 = v52;
        v22 = v51;
        if (!*a5)
          goto LABEL_59;
LABEL_71:
        if (++v23 == v22)
          goto LABEL_77;
      }
    }
  }
  v24 = 0;
LABEL_77:
  v49 = v50;
  if (v24)
    v49 = 0;
  if ((v49 & 1) != 0)
    goto LABEL_80;
  return v24;
}

uint64_t CGPDFNodeIsDirectlyHitByPoint(uint64_t result, double a2, double a3, double a4)
{
  __n64 *v7;
  double Rotation;
  __double2 v9;
  double v10;
  double v11;
  unsigned __int32 v12;
  unsigned int v13;
  unsigned int ChildIndexAtX;
  __n64 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v21;
  double v22;
  __n64 *v23;
  double v24;
  CGPoint v25;
  CGRect v26;

  if (result)
  {
    v7 = (__n64 *)result;
    Rotation = CGPDFNodeGetRotation(result);
    if (Rotation == 0.0)
    {
      v11 = a3;
      v10 = a2;
    }
    else
    {
      v9 = __sincos_stret(Rotation);
      v10 = a3 * v9.__sinval + v9.__cosval * a2 + 0.0;
      v11 = a3 * v9.__cosval - v9.__sinval * a2 + 0.0;
    }
    v26.origin.x = CGPDFNodeGetHitTestRect((uint64_t)v7, a4);
    v25.x = v10;
    v25.y = v11;
    result = CGRectContainsPoint(v26, v25);
    if ((_DWORD)result)
    {
      v12 = v7->n64_u32[0];
      if (v7->n64_u32[0] == 1538 || v12 == 517)
      {
        if ((v12 & 0x200) == 0)
          return 0;
        v16 = v7[5].n64_u32[1];
        if (!(_DWORD)v16)
          return 0;
        v17 = 0;
        v18 = v16 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v17 < v7[5].n64_u32[1])
            v19 = *(_QWORD *)(v7[7].n64_u64[0] + 8 * v17);
          else
            v19 = 0;
          result = CGPDFNodeIsDirectlyHitByPoint(v19, a2, a3, a4);
          if ((result & 1) != 0)
            break;
        }
        while (v18 != v17++);
      }
      else
      {
        if (v12 == 516)
        {
          v13 = v7[5].n64_u32[1];
          if (!v13)
            return 0;
          ChildIndexAtX = CGPDFNodeGetChildIndexAtX(v7, v10);
          if (ChildIndexAtX <= 1)
          {
            v15 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] ? *(__n64 **)v7[7].n64_u64[0] : 0;
            CGPDFNodeGetBounds(v15);
            if (v11 > v21 + v22 + a4)
              return 0;
          }
          if (ChildIndexAtX >= v13)
          {
            v23 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v13 - 1
                ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v13 - 1))
                : 0;
            CGPDFNodeGetBounds(v23);
            if (v11 < v24 - a4)
              return 0;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

__n64 *CGPDFNodeGetNodeAfterPoint(__n64 *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  __n64 *result;
  BOOL v10;

  v10 = 0;
  result = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v10, a4, a5, a6);
  if (!v10)
    return (__n64 *)CGPDFNodeGetNodeAfter(a1, result, a2, a3);
  return result;
}

__n64 *CGPDFNodeGetClosestNodeToPoint(__n64 *a1, unsigned int a2, unsigned int a3, BOOL *a4, double a5, double a6, double a7)
{
  __n64 *FirstDescendantOfType;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  BOOL v15;
  __n64 *ClosestAreaDescendantToPoint;
  __n64 *ClosestAreaToPoint;
  unsigned int v18;
  uint64_t v19;
  __n64 *v20;
  __n64 *NodeBefore;
  __n64 *v22;
  __n64 v23;
  double v24;
  double v25;
  double v26;
  double Rotation;
  __double2 v28;
  double v29;
  __n64 *v30;
  unsigned __int32 v31;
  __n64 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __double2 v38;
  double v39;
  double v40;
  __double2 v41;
  double v42;
  double v43;
  unsigned __int32 v44;
  unsigned int v45;
  __n64 *v46;
  double v47;
  int i;
  __n64 *v49;
  uint64_t TextRange;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  BOOL v63;
  CGRect v64;
  CGRect v65;

  FirstDescendantOfType = a1;
  *a4 = 1;
  if (a1)
  {
    if (a2 <= 1)
      v12 = 1;
    else
      v12 = a2;
    if (a2)
      v13 = a3;
    else
      v13 = 1;
    v14 = a1->n64_u32[0];
    if ((_DWORD)v12 != 1538 && v14 == (_DWORD)v12
      || (_DWORD)v13 && (v14 != 513 ? (v15 = (a1->n64_u32[0] & 0x100) == 0) : (v15 = 0), !v15))
    {
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)a1, a5, a6, a7);
      return FirstDescendantOfType;
    }
    if ((_DWORD)v12 == 517)
      return 0;
    ClosestAreaDescendantToPoint = a1;
    do
    {
      if (ClosestAreaDescendantToPoint->n64_u32[0] == 516)
      {
        if ((v12 - 514) >= 2 && (_DWORD)v12 != 1 && (_DWORD)v12 != 1537)
          return 0;
        goto LABEL_66;
      }
      ClosestAreaDescendantToPoint = (__n64 *)ClosestAreaDescendantToPoint[1].n64_u64[0];
    }
    while (ClosestAreaDescendantToPoint);
    v63 = 0;
    v61 = 0;
    v62 = 0.0;
    v59 = 0;
    v60 = 0;
    ClosestAreaToPoint = CGPDFNodeGetClosestAreaToPoint(a1, v12, v13, a4, &v63, &v62, (double *)&v61, (double *)&v60, a5, a6, a7, (double *)&v59);
    if (!ClosestAreaToPoint)
      return 0;
    ClosestAreaDescendantToPoint = ClosestAreaToPoint;
    if (ClosestAreaToPoint != FirstDescendantOfType && !v63)
    {
      v18 = (v12 >> 8) & 1;
      if ((_DWORD)v12 == 513)
        v18 = 1;
      if (v18)
        v19 = v12;
      else
        v19 = 516;
      v20 = ClosestAreaToPoint;
      while (1)
      {
        do
        {
          ClosestAreaDescendantToPoint = v20;
          NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(FirstDescendantOfType, v20, v19, v13);
          if (!NodeBefore)
            goto LABEL_66;
          v20 = NodeBefore;
          if (!CGPDFNodeIsStrictlyAfterPoint(NodeBefore, a5, a6, a7))
            goto LABEL_66;
          v22 = v20;
          if (v20->n64_u32[0] == 516)
          {
            v22 = v20;
            if (v20[5].n64_u32[1])
              v22 = *(__n64 **)v20[7].n64_u64[0];
          }
          v23.n64_u64[0] = CGPDFNodeGetBounds(v22).n64_u64[0];
          v26 = v24 + v25;
          Rotation = CGPDFNodeGetRotation((uint64_t)v22);
          if (Rotation != 0.0)
          {
            v28 = __sincos_stret(Rotation);
            v29 = v26 * v28.__cosval + v28.__sinval * v23.n64_f64[0];
            v23.n64_f64[0] = v28.__cosval * v23.n64_f64[0] - v28.__sinval * v26 + 0.0;
            v26 = v29 + 0.0;
          }
          v30 = ClosestAreaDescendantToPoint;
          if (ClosestAreaDescendantToPoint->n64_u32[0] == 516)
          {
            v31 = ClosestAreaDescendantToPoint[5].n64_u32[1];
            v30 = ClosestAreaDescendantToPoint;
            if (v31)
              v30 = *(__n64 **)(ClosestAreaDescendantToPoint[7].n64_u64[0] + 8 * (v31 - 1));
          }
          v32.n64_u64[0] = CGPDFNodeGetBounds(v30).n64_u64[0];
          v34 = v33;
          v36 = v32.n64_f64[0] + v35;
          v37 = CGPDFNodeGetRotation((uint64_t)v30);
          if (v37 != 0.0)
          {
            v38 = __sincos_stret(v37);
            v39 = v34 * v38.__cosval + v38.__sinval * v36;
            v36 = v38.__cosval * v36 - v38.__sinval * v34 + 0.0;
            v34 = v39 + 0.0;
          }
          if (!CGPDFNodeIsStrictlyAfterPoint(ClosestAreaDescendantToPoint, v23.n64_f64[0], v26, a7))
            goto LABEL_66;
          v40 = CGPDFNodeGetRotation((uint64_t)v20);
          if (v40 != 0.0)
          {
            v41 = __sincos_stret(v40);
            v42 = v34 * v41.__cosval - v41.__sinval * v36;
            v36 = v34 * v41.__sinval + v41.__cosval * v36 + 0.0;
            v34 = v42 + 0.0;
          }
          v64.origin.x = CGPDFNodeGetBounds(v20).n64_f64[0];
          v65 = CGRectInset(v64, -a7, -a7);
          v43 = v65.origin.y - v34;
        }
        while (v43 > 0.0);
        if (v65.size.height + v43 < 0.0)
          break;
        v44 = v20->n64_u32[0];
        if (v20->n64_i32[0] > 512)
        {
          if (v44 - 513 < 2)
            goto LABEL_52;
          if (v44 != 516)
            break;
          v45 = v20[5].n64_u32[1];
          if (!v45 || CGPDFNodeGetChildIndexAtX(v20, v36) < v45)
            break;
          v46 = (v20->n64_u8[1] & 2) != 0 && v20[5].n64_u32[1] > v45 - 1
              ? *(__n64 **)(v20[7].n64_u64[0] + 8 * (v45 - 1))
              : 0;
          CGPDFNodeGetBounds(v46);
          if (v34 >= v47 - a7)
            break;
        }
        else
        {
          if (v44 - 257 >= 2 && v44 != 1)
            break;
LABEL_52:
          if (v65.origin.x + v65.size.width >= v36)
            break;
        }
      }
    }
LABEL_66:
    if (ClosestAreaDescendantToPoint->n64_u32[0] != 516)
      return ClosestAreaDescendantToPoint;
    if ((_DWORD)v12 == 1538)
    {
      for (i = 516; i != 1538; i = ClosestAreaDescendantToPoint->n64_u32[0])
      {
        ClosestAreaDescendantToPoint = (__n64 *)ClosestAreaDescendantToPoint[1].n64_u64[0];
        if (!ClosestAreaDescendantToPoint)
          break;
      }
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)ClosestAreaDescendantToPoint, a5, a6, a7);
    }
    else
    {
      ClosestAreaDescendantToPoint = (__n64 *)CGPDFNodeGetClosestAreaDescendantToPoint(ClosestAreaDescendantToPoint, v12, v13, a4, a5, a6, a7);
    }
    if (!ClosestAreaDescendantToPoint)
      return 0;
    if (ClosestAreaDescendantToPoint == FirstDescendantOfType)
      return FirstDescendantOfType;
    v49 = ClosestAreaDescendantToPoint;
    do
      v49 = (__n64 *)v49[1].n64_u64[0];
    while (v49 != FirstDescendantOfType && v49 != 0);
    if (v49)
      return ClosestAreaDescendantToPoint;
    TextRange = CGPDFNodeGetTextRange((uint64_t)FirstDescendantOfType);
    v54 = v53;
    v55 = CGPDFNodeGetTextRange((uint64_t)ClosestAreaDescendantToPoint);
    if (*a4)
      v57 = 0;
    else
      v57 = v56;
    if (v57 + v55 - TextRange <= TextRange + v54 - (v57 + v55))
    {
      FirstDescendantOfType = (__n64 *)CGPDFNodeGetFirstDescendantOfType((int *)FirstDescendantOfType, v12, 0);
      v58 = 1;
    }
    else
    {
      FirstDescendantOfType = (__n64 *)CGPDFNodeGetLastDescendantOfType(FirstDescendantOfType, v12, 0);
      v58 = 0;
    }
    *a4 = v58;
  }
  return FirstDescendantOfType;
}

uint64_t CGPDFNodeGetNodeAfter(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = 0;
  if (!a1)
    return result;
  v6 = (uint64_t)a2;
  if (a1 == a2)
    return result;
  while (1)
  {
    if (v6)
    {
      v9 = *(_DWORD **)(v6 + 8);
      if (v9 && (*((_BYTE *)v9 + 1) & 2) != 0)
        v10 = v9[11];
      else
        v10 = 0;
      if ((_DWORD *)v6 != a1)
      {
        v13 = v6;
        do
          v13 = *(_QWORD *)(v13 + 8);
        while ((_DWORD *)v13 != a1 && v13 != 0);
        if (!v13)
          return 0;
      }
      if (v10)
      {
        v15 = 0;
        while (1)
        {
          v16 = v9 && (*((_BYTE *)v9 + 1) & 2) != 0 && v15 < v9[11]
              ? *(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * v15)
              : 0;
          if (v16 == v6)
            break;
          if (v10 == ++v15)
          {
            LODWORD(v15) = v10;
            break;
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
      }
      v12 = v15 + 1;
    }
    else
    {
      v11 = *a1;
      v6 = (uint64_t)a1;
      if ((*a1 & 0x200) == 0)
        goto LABEL_41;
      v12 = 0;
      v10 = a1[11];
      v9 = a1;
    }
    if (v12 < v10)
      break;
LABEL_39:
    if (v9)
    {
      v11 = *v9;
      v6 = (uint64_t)v9;
LABEL_41:
      if ((_DWORD)a3)
        goto LABEL_44;
      goto LABEL_49;
    }
    v6 = 0;
    v11 = 0;
    if ((_DWORD)a3)
    {
LABEL_44:
      if (v11 != (_DWORD)a3 && (!v6 || !(_DWORD)a4 || *(_DWORD *)v6 != 513 && (*(_DWORD *)v6 & 0x100) == 0))
        goto LABEL_50;
    }
LABEL_49:
    if (!CGPDFNodeIsUsedGraphic(v6))
      return v6;
LABEL_50:
    if ((_DWORD *)v6 == a1)
      return 0;
  }
  v17 = v12;
  v18 = v10;
  while (1)
  {
    v19 = v9 && (*((_BYTE *)v9 + 1) & 2) != 0 && v17 < v9[11]
        ? *(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * v17)
        : 0;
    result = CGPDFNodeGetNodeAfter(v19, 0, a3, a4);
    if (result)
      return result;
    if (v18 == ++v17)
      goto LABEL_39;
  }
}

uint64_t CGPDFNodeIsAfterPoint(uint64_t result, double a2, double a3, double a4)
{
  __n64 *v7;
  double v8;
  double v9;
  double v10;
  __n64 *v11;
  __n64 *v12;
  double x;
  double width;
  double v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  unsigned __int32 v18;
  __n64 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int32 RotatedChildIndex;
  __n64 *v26;
  unsigned __int32 v27;
  BOOL v28;
  unsigned __int32 v29;
  unsigned int v30;
  __n64 *v31;
  unsigned int ChildIndex;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  unsigned __int32 v38;
  __n64 *v39;
  unsigned __int32 ChildIndexAtY;
  unsigned __int32 v41;
  unsigned __int32 v42;
  unsigned int v43;
  __n64 *v44;
  unsigned int v45;
  double y;
  double height;
  unsigned int v48;
  unsigned int RotatedTextLineIndexAtPoint;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  __n64 *v53;
  unsigned int v54;
  __n64 v55;
  double v56;
  double v57;
  uint64_t v58;
  unsigned __int32 v59;
  unsigned __int32 RotatedChildIndexAtX;
  unsigned __int32 v61;
  unsigned __int32 v62;
  unsigned int v63;
  unsigned int v64;
  double v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;

  if (!result)
    return result;
  v7 = (__n64 *)result;
  v8 = CGPDFNodeTransformPoint(result, a2, a3);
  v10 = v9;
  v11 = v7;
  do
  {
    if (v11->n64_u32[0] == 516)
      break;
    v11 = (__n64 *)v11[1].n64_u64[0];
  }
  while (v11);
  if (v11)
    v12 = v11;
  else
    v12 = v7;
  v66.origin.x = CGPDFNodeGetBounds(v12).n64_f64[0];
  x = v66.origin.x;
  width = v66.size.width;
  v15 = -a4;
  v67 = CGRectInset(v66, -a4, -a4);
  if (v67.origin.y - v10 > 0.0)
    return 0;
  if (v67.size.height + v67.origin.y - v10 < 0.0)
    return 1;
  v16 = v7->n64_u32[0];
  v17 = v12->n64_u32[0];
  if (v12->n64_u32[0] == 1538 || v17 == 517)
  {
    if ((v16 & 0x200) != 0)
    {
      v20 = v7[5].n64_u32[1];
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = v20 - 1;
        do
        {
          if ((v7->n64_u8[1] & 2) != 0 && v21 < v7[5].n64_u32[1])
            v23 = *(_QWORD *)(v7[7].n64_u64[0] + 8 * v21);
          else
            v23 = 0;
          result = CGPDFNodeIsAfterPoint(v23, a2, a3, a4);
          if ((result & 1) != 0)
            break;
        }
        while (v22 != v21++);
        return result;
      }
    }
    return 0;
  }
  if (v17 != 516)
    return x + width * 0.5 >= v8;
  v18 = v12[5].n64_u32[1];
  if (!v18)
    return 0;
  v19 = v12;
  while (v19->n64_u32[0] != 516)
  {
    v19 = (__n64 *)v19[1].n64_u64[0];
    if (!v19)
      goto LABEL_36;
  }
  if (v19[13].n64_u8[0])
  {
    RotatedChildIndex = CGPDFNodeGetRotatedChildIndex((uint64_t)v12, a2, a3);
    goto LABEL_37;
  }
LABEL_36:
  RotatedChildIndex = CGPDFNodeGetChildIndexAtX(v12, a2);
LABEL_37:
  if (v16 == 516)
  {
    if (RotatedChildIndex >= v18)
    {
      if ((v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v18 - 1)
        v26 = *(__n64 **)(v7[7].n64_u64[0] + 8 * (v18 - 1));
      else
        v26 = 0;
      CGPDFNodeGetBounds(v26);
      v37 = a3 < v36 - a4;
      return !v37;
    }
    return 1;
  }
  if (RotatedChildIndex >= v18)
    v27 = v18;
  else
    v27 = RotatedChildIndex;
  v28 = v27 != 0;
  v29 = v27 - 1;
  if (v28)
    v30 = v29;
  else
    v30 = 0;
  v31 = v7;
  do
  {
    if (v31->n64_u32[0] == 515)
      break;
    v31 = (__n64 *)v31[1].n64_u64[0];
  }
  while (v31);
  ChildIndex = CGPDFNodeGetChildIndex((uint64_t)v31);
  result = 0;
  if (!v31 || ChildIndex < v30)
    return result;
  if (ChildIndex > v30)
    return 1;
  if (v16 == 515)
  {
    CGPDFNodeGetBounds(v31);
    v35 = v34 + v33 * 0.5;
    return v35 <= a3;
  }
  if ((v31->n64_u8[1] & 2) == 0)
    return 0;
  v38 = v31[5].n64_u32[1];
  if (!v38)
    return 0;
  v39 = v12;
  while (v39->n64_u32[0] != 516)
  {
    v39 = (__n64 *)v39[1].n64_u64[0];
    if (!v39)
      goto LABEL_70;
  }
  if (v39[13].n64_u8[0])
  {
    ChildIndexAtY = CGPDFNodeGetRotatedChildIndex((uint64_t)v31, a2, a3);
    goto LABEL_71;
  }
LABEL_70:
  ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v31, a3);
LABEL_71:
  if (ChildIndexAtY >= v38)
    v41 = v38;
  else
    v41 = ChildIndexAtY;
  v28 = v41 != 0;
  v42 = v41 - 1;
  if (v28)
    v43 = v42;
  else
    v43 = 0;
  v44 = v7;
  do
  {
    if (v44->n64_u32[0] == 1537)
      break;
    v44 = (__n64 *)v44[1].n64_u64[0];
  }
  while (v44);
  v45 = CGPDFNodeGetChildIndex((uint64_t)v44);
  result = 0;
  if (!v44 || v45 < v43)
    return result;
  if (v45 > v43)
    return 1;
  v68.origin.x = CGPDFNodeGetBounds(v44).n64_f64[0];
  y = v68.origin.y;
  height = v68.size.height;
  v69 = CGRectInset(v68, v15, v15);
  if (v69.origin.y - a3 > 0.0)
    return 0;
  if (v69.size.height + v69.origin.y - a3 < 0.0)
    return 1;
  if (v16 == 1537)
  {
    v35 = y + height * 0.5;
    return v35 <= a3;
  }
  if ((v44->n64_u8[1] & 2) == 0)
    return 0;
  v48 = v44[5].n64_u32[1];
  if (!v48)
    return 0;
  while (v12->n64_u32[0] != 516)
  {
    v12 = (__n64 *)v12[1].n64_u64[0];
    if (!v12)
      goto LABEL_94;
  }
  if (v12[13].n64_u8[0])
  {
    RotatedTextLineIndexAtPoint = CGPDFNodeGetRotatedTextLineIndexAtPoint(v44, a2, a3);
    goto LABEL_95;
  }
LABEL_94:
  RotatedTextLineIndexAtPoint = CGPDFNodeGetChildIndexAtY(v44, a3);
LABEL_95:
  if (RotatedTextLineIndexAtPoint >= v48)
    v50 = v48;
  else
    v50 = RotatedTextLineIndexAtPoint;
  v28 = v50 != 0;
  v51 = v50 - 1;
  if (v28)
    v52 = v51;
  else
    v52 = 0;
  v53 = v7;
  do
  {
    if (v53->n64_u32[0] == 514)
      break;
    v53 = (__n64 *)v53[1].n64_u64[0];
  }
  while (v53);
  v54 = CGPDFNodeGetChildIndex((uint64_t)v53);
  result = 0;
  if (!v53 || v54 < v52)
    return result;
  if (v54 > v52)
    return 1;
  if (v16 == 514)
  {
    v55.n64_u64[0] = CGPDFNodeGetBounds(v53).n64_u64[0];
    v57 = v56;
    v58 = (uint64_t)v53;
    goto LABEL_109;
  }
  if ((v53->n64_u8[1] & 2) == 0)
    return 0;
  result = 0;
  v59 = v53[5].n64_u32[1];
  if (v59 && v16 == 1)
  {
    RotatedChildIndexAtX = CGPDFNodeGetRotatedChildIndexAtX(v53, a2, a3);
    v61 = RotatedChildIndexAtX >= v59 ? v59 : RotatedChildIndexAtX;
    v28 = v61 != 0;
    v62 = v61 - 1;
    v63 = v28 ? v62 : 0;
    v64 = CGPDFNodeGetChildIndex((uint64_t)v7);
    result = 0;
    if (v64 >= v63)
    {
      if (v64 > v63)
        return 1;
      v55.n64_u64[0] = CGPDFNodeGetBounds(v7).n64_u64[0];
      v57 = v65;
      v58 = (uint64_t)v7;
LABEL_109:
      v37 = v55.n64_f64[0] + v57 * 0.5 < CGPDFNodeTransformPoint(v58, a2, a3);
      return !v37;
    }
  }
  return result;
}

__n64 *CGPDFNodeGetClosestAreaToPoint(__n64 *a1, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5, double *a6, double *a7, double *a8, double a9, CGFloat a10, double a11, double *a12)
{
  BOOL *v15;
  unsigned __int32 v22;
  __n64 *v23;
  double x;
  double v25;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  _DWORD *v35;
  unint64_t v36;
  _BOOL4 v37;
  __n64 *v38;
  __n64 *v39;
  _BOOL4 v40;
  __n64 *ClosestAreaToPoint;
  double v42;
  double v43;
  double v44;
  unsigned __int32 v45;
  double v46;
  double v47;
  double v48;
  __n64 v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  double Rotation;
  double v56;
  int v57;
  __double2 v58;
  __double2 v59;
  BOOL v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  __n64 *v68;
  __n64 *v69;
  _BOOL4 v70;
  double v71;
  double v72;
  double width;
  unsigned __int32 v74;
  unsigned int ChildIndexAtX;
  unsigned int v76;
  unsigned __int32 v77;
  unsigned int v78;
  char v79;
  unint64_t v80;
  __n64 *v81;
  double v82;
  BOOL v83;
  uint64_t v85;
  double v86;
  unint64_t v87;
  __n64 *v88;
  double v89;
  double v91;
  double v92;
  double v93;
  double v94;
  double v96;
  __n64 *v97;
  unsigned __int32 v98;
  unsigned __int32 ChildIndexAtY;
  unsigned __int32 v100;
  BOOL v101;
  unsigned __int32 v102;
  __n64 *v103;
  double *v104;
  double v105;
  BOOL v106;
  double v108;
  double v109;
  _BOOL4 v110;
  __n64 *v111;
  double v112;
  double v113;
  __n64 *v114;
  double v115;
  BOOL *v116;
  CGFloat rect;
  __n64 v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  unsigned __int32 v122;
  double *v123;
  double *v124;
  _BOOL4 v125;
  unsigned __int32 v126;
  uint64_t v127;
  unsigned int v128;
  CGAffineTransform v129;
  CGAffineTransform v130;
  double v131;
  double v132;
  double v133;
  double v134;
  _WORD v135[5];
  CGPoint v136;
  CGPoint v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;

  *a4 = 1;
  *a5 = 0;
  *a6 = 0.0;
  *a7 = 0.0;
  *a8 = 0.0;
  *a12 = 0.0;
  if (!a1)
    return 0;
  v15 = a5;
  v22 = a1->n64_u32[0];
  if (a1->n64_u32[0] == 516)
  {
    v23 = 0;
    if ((_DWORD)a2 == 513 || (a2 & 0x100) != 0)
      return v23;
    v138.origin.x = CGPDFNodeGetBounds(a1).n64_f64[0];
    v139 = CGRectInset(v138, -a11, -a11);
    x = v139.origin.x;
    v25 = v139.origin.y - a10;
    if (v139.origin.y - a10 > 0.0)
    {
      *a7 = -v25;
      *a4 = 0;
      return a1;
    }
    v71 = v139.size.height + v25;
    if (v71 < 0.0)
    {
      v72 = -v71;
LABEL_169:
      *a7 = v72;
      return a1;
    }
    width = v139.size.width;
    v124 = a8;
    if ((a1->n64_u8[1] & 2) != 0)
      v74 = a1[5].n64_u32[1];
    else
      v74 = 0;
    ChildIndexAtX = CGPDFNodeGetChildIndexAtX(a1, a9);
    if (ChildIndexAtX >= v74)
      v76 = v74;
    else
      v76 = ChildIndexAtX;
    v77 = v76 - 1;
    if (!v76)
      v77 = 0;
    if (!v74)
    {
      v105 = x - a9;
      if (width + x - a9 >= -(x - a9))
        v105 = width + x - a9;
      *a6 = v105;
      return a1;
    }
    v126 = v77;
    v128 = v76;
    v78 = 0;
    v79 = 0;
    do
    {
      v80 = v78;
      while (1)
      {
        v81 = (a1->n64_u8[1] & 2) != 0 && v80 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v80) : 0;
        v148.origin.x = CGPDFNodeGetBounds(v81).n64_f64[0];
        v149 = CGRectInset(v148, -a11, -a11);
        v82 = v149.origin.x;
        v83 = v149.origin.y > a10 || a10 > v149.origin.y + v149.size.height;
        if (!v83 && v81 != 0 && (v81->n64_u8[1] & 2) != 0)
        {
          v85 = v81[5].n64_u32[1];
          if ((_DWORD)v85)
            break;
        }
LABEL_125:
        if (++v80 == v74)
        {
          if ((v79 & 1) == 0)
          {
            v96 = x - a9;
            if (width + x - a9 >= -(x - a9))
              v96 = width + x - a9;
            *a6 = v96;
            if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1] > v126)
            {
              v97 = *(__n64 **)(a1[7].n64_u64[0] + 8 * v126);
              if (v97)
              {
                if ((v97->n64_u8[1] & 2) != 0)
                {
                  v98 = v97[5].n64_u32[1];
                  if (v98)
                  {
                    ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v97, a10);
                    if (ChildIndexAtY >= v98)
                      v100 = v98;
                    else
                      v100 = ChildIndexAtY;
                    v101 = v100 != 0;
                    v102 = v100 - 1;
                    if (!v101)
                      v102 = 0;
                    if ((v97->n64_u8[1] & 2) != 0)
                    {
                      v104 = a12;
                      if (v97[5].n64_u32[1] <= v102)
                        v103 = 0;
                      else
                        v103 = *(__n64 **)(v97[7].n64_u64[0] + 8 * v102);
                    }
                    else
                    {
                      v103 = 0;
                      v104 = a12;
                    }
                    v152.origin.x = CGPDFNodeGetBounds(v103).n64_f64[0];
                    v153 = CGRectInset(v152, -a11, -a11);
                    v108 = v153.origin.x - a9;
                    v109 = v153.origin.y - a10;
                    if (v108 < 0.0)
                    {
                      v108 = v153.size.width + v108;
                      if (v108 > 0.0)
                        v108 = 0.0;
                    }
                    if (v109 < 0.0)
                    {
                      v109 = v153.size.height + v109;
                      if (v109 > 0.0)
                        v109 = 0.0;
                    }
                    *v124 = v108;
                    *v104 = -v109;
                  }
                }
              }
            }
          }
          goto LABEL_182;
        }
      }
      v86 = v149.size.width;
      v87 = 0;
      while (1)
      {
        v88 = (v81->n64_u8[1] & 2) != 0 && v87 < v81[5].n64_u32[1] ? *(__n64 **)(v81[7].n64_u64[0] + 8 * v87) : 0;
        v150.origin.x = CGPDFNodeGetBounds(v88).n64_f64[0];
        v151 = CGRectInset(v150, -a11, -a11);
        v89 = v151.origin.y + v151.size.height;
        if (v151.origin.y <= a10 && a10 <= v89)
          break;
        if (v85 == ++v87)
          goto LABEL_125;
      }
      v91 = v82 - a9;
      if (v82 - a9 < 0.0)
      {
        v91 = v86 + v91;
        if (v91 > 0.0)
          v91 = 0.0;
      }
      v92 = v151.origin.x - a9;
      if (v92 < 0.0)
      {
        v92 = v151.size.width + v92;
        if (v92 > 0.0)
          v92 = 0.0;
      }
      if ((v79 & 1) == 0 || (v93 = fabs(v91), v94 = fabs(*a6), v93 < v94) || v93 == v94 && fabs(v92) < fabs(*v124))
      {
        *a6 = v91;
        *v124 = v92;
      }
      v78 = v80 + 1;
      v79 = 1;
    }
    while (v91 < 0.0 && v78 != v74);
LABEL_182:
    v110 = 1;
    *v15 = 1;
    if (v128 <= 1)
    {
      if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1])
        v111 = *(__n64 **)a1[7].n64_u64[0];
      else
        v111 = 0;
      CGPDFNodeGetBounds(v111);
      if (a10 > v112 + v113 + a11)
      {
LABEL_196:
        *v15 = 0;
        return a1;
      }
      v110 = *v15;
    }
    if (!v110 || v126 + 1 != v74)
      return a1;
    v114 = (a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1] > v126 ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v126) : 0;
    CGPDFNodeGetBounds(v114);
    if (a10 >= v115 - a11)
      return a1;
    goto LABEL_196;
  }
  if (v22 == 513 || (a1->n64_u32[0] & 0x100) != 0)
  {
    v28 = v22 != (_DWORD)a2 && (_DWORD)a3 == 0;
    if (!v28 && (CGPDFNodeIsUsedGraphic((uint64_t)a1) & 1) == 0)
    {
      v140.origin.x = CGPDFNodeGetBounds(a1).n64_f64[0];
      v29 = v140.origin.x;
      v30 = v140.size.width;
      v141 = CGRectInset(v140, -a11, -a11);
      v31 = v141.origin.x - a9;
      v32 = v141.origin.y - a10;
      if (v31 < 0.0)
      {
        v31 = v141.size.width + v31;
        if (v31 > 0.0)
          v31 = 0.0;
      }
      if (v32 >= 0.0 || (v32 = v141.size.height + v32, v33 = 0.0, v32 <= 0.0))
      {
        if (v32 < 0.0)
        {
          v34 = 1;
LABEL_166:
          *a4 = v34;
          v106 = v31 == 0.0;
          if (v32 != 0.0)
            v106 = 0;
          *v15 = v106;
          *a6 = v31;
          v72 = -v32;
          goto LABEL_169;
        }
        if (v32 != 0.0)
        {
          v34 = 0;
          goto LABEL_166;
        }
        v33 = v32;
      }
      v34 = a9 <= v29 + v30 * 0.5;
      v32 = v33;
      goto LABEL_166;
    }
    return 0;
  }
  if (v22 != 1538 && v22 != 517)
    return 0;
  if ((v22 & 0x400) != 0 && (v35 = (_DWORD *)a1[13].n64_u64[0]) != 0 && *v35 == 3)
  {
    v142.origin.x = CGPDFNodeGetBounds(a1).n64_f64[0];
    v136.x = a9;
    v136.y = a10;
    v125 = CGRectContainsPoint(v142, v136);
    v22 = a1->n64_u32[0];
  }
  else
  {
    v125 = 0;
  }
  if ((v22 & 0x200) == 0)
    return 0;
  v127 = a1[5].n64_u32[1];
  if (!(_DWORD)v127)
    return 0;
  v123 = a8;
  v36 = 0;
  v37 = 0;
  v23 = 0;
  v116 = v15;
  do
  {
    v38 = v23;
    if ((a1->n64_u8[1] & 2) != 0 && v36 < a1[5].n64_u32[1])
      v39 = *(__n64 **)(a1[7].n64_u64[0] + 8 * v36);
    else
      v39 = 0;
    v135[0] = 0;
    v133 = 0.0;
    v134 = 0.0;
    v131 = 0.0;
    v132 = 0.0;
    if (v125 && !v37)
    {
      v143.origin.x = CGPDFNodeGetBounds(v39).n64_f64[0];
      v137.x = a9;
      v137.y = a10;
      v40 = CGRectContainsPoint(v143, v137);
      v37 = 0;
      if (!v40)
        goto LABEL_81;
    }
    if (!v39)
      goto LABEL_81;
    ClosestAreaToPoint = (__n64 *)CGPDFNodeGetClosestAreaToPoint(v39, a2, a3, (char *)v135 + 1, v135, &v134, &v133, &v132, a9, a10, a11, &v131);
    v37 = v125;
    if (!ClosestAreaToPoint)
      goto LABEL_81;
    v23 = ClosestAreaToPoint;
    v42 = v133;
    if (!v38)
      goto LABEL_43;
    v43 = fabs(v133);
    v44 = fabs(*a7);
    if (v43 < v44)
      goto LABEL_43;
    if (v43 != v44)
      goto LABEL_80;
    v45 = v38->n64_u32[0];
    v122 = ClosestAreaToPoint->n64_u32[0];
    v118.n64_u64[0] = CGPDFNodeGetBounds(v38).n64_u64[0];
    v119 = v46;
    v120 = v47;
    v121 = v48;
    v49.n64_u64[0] = CGPDFNodeGetBounds(v23).n64_u64[0];
    v51 = v50;
    v53 = v52;
    rect = v54;
    Rotation = CGPDFNodeGetRotation((uint64_t)v38);
    v56 = CGPDFNodeGetRotation((uint64_t)v23);
    if (v45 != 516)
    {
      v37 = v122 == 516;
      v57 = 1;
      if (LOBYTE(v135[0]))
      {
        v15 = v116;
        if (v122 == 516)
        {
          v58 = __sincos_stret(v56 - Rotation);
          v130.a = v58.__cosval;
          v130.b = v58.__sinval;
          v130.c = -v58.__sinval;
          v130.d = v58.__cosval;
          v130.tx = 0.0;
          v130.ty = 0.0;
          v144.origin.x = v49.n64_f64[0];
          v144.origin.y = v51;
          v144.size.width = v53;
          v144.size.height = rect;
          v154 = CGRectApplyAffineTransform(v144, &v130);
          v145.origin.x = v118.n64_f64[0];
          v145.origin.y = v119;
          v145.size.width = v120;
          v145.size.height = v121;
          if (CGRectContainsRect(v145, v154))
            goto LABEL_43;
          v37 = 1;
          v57 = 1;
        }
LABEL_54:
        if (v131 == 0.0)
        {
          v61 = *a6;
        }
        else
        {
          v61 = *a6;
          if (*a12 != 0.0 && fabs(v132) < fabs(v61) && fabs(*v123) < fabs(v134))
          {
            v62 = fabs(v131);
            v63 = fabs(*a12);
            if (v62 < v63)
              goto LABEL_43;
            if (v62 != v63)
            {
LABEL_80:
              v37 = 0;
              goto LABEL_81;
            }
          }
        }
        v64 = fabs(v134);
        v65 = fabs(v61);
        if (v64 < v65)
          goto LABEL_43;
        if (v64 == v65)
        {
          v66 = fabs(v132);
          v67 = fabs(*v123);
          if (v66 < v67)
            goto LABEL_43;
          if (v66 == v67)
          {
            if (((v37 | v57 ^ 1) & 1) != 0)
            {
              if ((v37 | v57) == 1)
                goto LABEL_43;
            }
            else
            {
              v68 = v23;
              while ((v68->n64_u8[1] & 3) == 0)
              {
                v68 = (__n64 *)v68[1].n64_u64[0];
                if (!v68)
                  goto LABEL_74;
              }
              v68 = (__n64 *)v68[12].n64_u64[0];
LABEL_74:
              v69 = v38;
              while ((v69->n64_u8[1] & 3) == 0)
              {
                v69 = (__n64 *)v69[1].n64_u64[0];
                if (!v69)
                  goto LABEL_79;
              }
              v69 = (__n64 *)v69[12].n64_u64[0];
LABEL_79:
              if ((uint64_t)v68 >= (uint64_t)v69)
              {
LABEL_43:
                v37 = 0;
                *a4 = HIBYTE(v135[0]);
                *v15 = v135[0];
                *a6 = v134;
                *a7 = v42;
                *v123 = v132;
                *a12 = v131;
                goto LABEL_82;
              }
            }
          }
        }
        goto LABEL_80;
      }
LABEL_52:
      v15 = v116;
      goto LABEL_54;
    }
    if (v122 == 516)
    {
      v37 = 0;
      v57 = 1;
      goto LABEL_52;
    }
    v59 = __sincos_stret(Rotation - v56);
    v129.a = v59.__cosval;
    v129.b = v59.__sinval;
    v129.c = -v59.__sinval;
    v129.d = v59.__cosval;
    v129.tx = 0.0;
    v129.ty = 0.0;
    v146.origin.x = v118.n64_f64[0];
    v146.origin.y = v119;
    v146.size.width = v120;
    v146.size.height = v121;
    v155 = CGRectApplyAffineTransform(v146, &v129);
    v147.origin.x = v49.n64_f64[0];
    v147.origin.y = v51;
    v147.size.width = v53;
    v147.size.height = rect;
    v60 = CGRectContainsRect(v147, v155);
    v37 = 0;
    v57 = 0;
    v15 = v116;
    if (!v60)
      goto LABEL_54;
LABEL_81:
    v23 = v38;
LABEL_82:
    ++v36;
  }
  while (v36 != v127);
  v70 = v125;
  if (!v23)
    v70 = 0;
  if (v70)
  {
    *v15 = 1;
    *a6 = 0.0;
    *a7 = 0.0;
    *v123 = 0.0;
    *a12 = 0.0;
  }
  return v23;
}

_DWORD *CGPDFNodeGetNodeBefore(_DWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t j;
  uint64_t v20;

  if (result)
  {
    v6 = result;
    if (a2)
    {
      v7 = result;
      if (a2 != result)
      {
        v8 = a2;
        do
          v8 = (_DWORD *)*((_QWORD *)v8 + 1);
        while (v8 != result && v8 != 0);
        v7 = a2;
        if (!v8)
          return 0;
      }
      v10 = *v7;
      goto LABEL_19;
    }
    v10 = *result;
    if ((_DWORD)a3 && v10 != (_DWORD)a3 && (!(_DWORD)a4 || v10 != 513 && (v10 & 0x100) == 0))
    {
      v7 = result;
      goto LABEL_19;
    }
    v7 = result;
    if ((CGPDFNodeIsUsedGraphic((uint64_t)result) & 1) != 0)
    {
LABEL_19:
      if ((v10 & 0x200) != 0)
        v11 = v7[11];
      else
        v11 = 0;
      for (i = v11 - 1; i != -1; --i)
      {
        if ((*((_BYTE *)v7 + 1) & 2) != 0 && i < v7[11])
          v13 = *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * i);
        else
          v13 = 0;
        result = (_DWORD *)CGPDFNodeGetNodeBefore(v13, 0, a3, a4);
        if (result)
          return result;
      }
      if (v7 != v6)
      {
        while (1)
        {
          v14 = v7;
          v7 = (_DWORD *)*((_QWORD *)v7 + 1);
          if (!v7)
            break;
          if ((*((_BYTE *)v7 + 1) & 2) != 0)
          {
            v15 = v7[11];
            if (v15 >= 2)
            {
              v16 = 0;
              while (1)
              {
                v17 = v16 >= v15 ? 0 : *(_DWORD **)(*((_QWORD *)v7 + 7) + 8 * v16);
                if (v17 == v14)
                  break;
                if (v15 == ++v16)
                {
                  v18 = v7[11];
                  goto LABEL_42;
                }
              }
              v18 = v16;
LABEL_42:
              for (j = v18 - 1; j != -1; --j)
              {
                if (j >= v15)
                  v20 = 0;
                else
                  v20 = *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * j);
                result = (_DWORD *)CGPDFNodeGetNodeBefore(v20, 0, a3, a4);
                if (result)
                  return result;
              }
            }
          }
          result = 0;
          if (v7 == v6)
            return result;
        }
      }
      return 0;
    }
    return v6;
  }
  return result;
}

uint64_t CGPDFNodeIsStrictlyAfterPoint(__n64 *a1, double a2, double a3, double a4)
{
  double Rotation;
  __double2 v9;
  double v10;
  double v11;
  uint64_t result;
  unsigned __int32 v13;
  __n64 *v14;
  double v15;
  double v16;
  CGRect v17;
  CGRect v18;

  Rotation = CGPDFNodeGetRotation((uint64_t)a1);
  if (Rotation != 0.0)
  {
    v9 = __sincos_stret(Rotation);
    v10 = a3 * v9.__cosval - v9.__sinval * a2;
    a2 = a3 * v9.__sinval + v9.__cosval * a2 + 0.0;
    a3 = v10 + 0.0;
  }
  v17.origin.x = CGPDFNodeGetBounds(a1).n64_f64[0];
  v18 = CGRectInset(v17, -a4, -a4);
  v11 = v18.origin.y - a3;
  if (v11 > 0.0)
    return 0;
  if (v18.size.height + v11 < 0.0)
    return 1;
  if (!a1)
    return 0;
  result = 0;
  v13 = a1->n64_u32[0];
  if (a1->n64_i32[0] <= 512)
  {
    if (v13 - 257 >= 2 && v13 != 1)
      return result;
    return v18.origin.x > a2;
  }
  if (v13 - 513 < 2)
    return v18.origin.x > a2;
  if (v13 != 516)
    return result;
  if (!a1[5].n64_u32[1] || CGPDFNodeGetChildIndexAtX(a1, a2) > 1)
    return 0;
  if ((a1->n64_u8[1] & 2) != 0 && a1[5].n64_u32[1])
    v14 = *(__n64 **)a1[7].n64_u64[0];
  else
    v14 = 0;
  CGPDFNodeGetBounds(v14);
  return a3 > v15 + v16 + a4;
}

uint64_t CGPDFNodeGetClosestAreaDescendantToPoint(__n64 *a1, uint64_t a2, int a3, _BYTE *a4, double a5, double a6, double a7)
{
  __n64 *v7;
  unsigned __int32 v13;
  double v15;
  __n64 *v16;
  uint64_t result;
  int *v18;
  unsigned __int32 v19;
  __n64 *v20;
  unsigned __int32 RotatedChildIndex;
  __n64 *v22;
  unsigned __int32 v23;
  BOOL v24;
  unsigned __int32 v25;
  __n64 *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned __int32 v31;
  __n64 *v32;
  unsigned __int32 ChildIndexAtY;
  unsigned __int32 v34;
  unsigned __int32 v35;
  double y;
  double height;
  unsigned int v38;
  unsigned int RotatedTextLineIndexAtPoint;
  unsigned int v40;
  unsigned __int32 v41;
  double v42;
  double v43;
  unsigned __int32 v44;
  unsigned __int32 RotatedChildIndexAtX;
  unsigned __int32 v46;
  unsigned __int32 v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v7 = a1;
  *a4 = 1;
  if (!a1)
    return (uint64_t)v7;
  v13 = a1->n64_u32[0];
  if (a1->n64_u32[0] - 257 < 2)
  {
LABEL_5:
    if (v13 == (_DWORD)a2 || a3 != 0)
    {
      *a4 = CGPDFNodeIsAfterPoint((uint64_t)a1, a5, a6, a7);
      return (uint64_t)v7;
    }
    return 0;
  }
  if (v13 != 516)
  {
    if (v13 != 513)
      return 0;
    goto LABEL_5;
  }
  if ((a2 - 514) >= 3 && (_DWORD)a2 != 1537 && (_DWORD)a2 != 1)
    return 0;
  v48.origin.x = CGPDFNodeGetBounds(a1).n64_f64[0];
  v15 = -a7;
  v49 = CGRectInset(v48, -a7, -a7);
  if (v49.origin.y - a6 > 0.0)
  {
    v16 = v7;
LABEL_15:
    result = CGPDFNodeGetLastDescendantOfType(v16, a2, 0);
    *a4 = 0;
    return result;
  }
  if (v49.size.height + v49.origin.y - a6 >= 0.0)
  {
    if ((v7->n64_u8[1] & 2) == 0)
      goto LABEL_105;
    v19 = v7[5].n64_u32[1];
    if (!v19)
      goto LABEL_105;
    v20 = v7;
    while (v20->n64_u32[0] != 516)
    {
      v20 = (__n64 *)v20[1].n64_u64[0];
      if (!v20)
        goto LABEL_29;
    }
    if (v20[13].n64_u8[0])
    {
      RotatedChildIndex = CGPDFNodeGetRotatedChildIndex((uint64_t)v7, a5, a6);
      goto LABEL_30;
    }
LABEL_29:
    RotatedChildIndex = CGPDFNodeGetChildIndexAtX(v7, a5);
LABEL_30:
    if ((_DWORD)a2 == 516)
    {
      if (RotatedChildIndex < v19)
        return (uint64_t)v7;
      v22 = (v7->n64_u8[1] & 2) != 0 && v7[5].n64_u32[1] > v19 - 1
          ? *(__n64 **)(v7[7].n64_u64[0] + 8 * (v19 - 1))
          : 0;
      CGPDFNodeGetBounds(v22);
      if (a6 >= v30 - a7)
        return (uint64_t)v7;
      goto LABEL_106;
    }
    if (RotatedChildIndex >= v19)
      v23 = v19;
    else
      v23 = RotatedChildIndex;
    v24 = v23 != 0;
    v25 = v23 - 1;
    if (!v24)
      v25 = 0;
    if ((v7->n64_u8[1] & 2) == 0)
      goto LABEL_105;
    if (v7[5].n64_u32[1] <= v25)
      goto LABEL_105;
    v26 = *(__n64 **)(v7[7].n64_u64[0] + 8 * v25);
    if (!v26 || v26->n64_u32[0] != 515)
      goto LABEL_105;
    if ((_DWORD)a2 == 515)
    {
      CGPDFNodeGetBounds(v26);
      v29 = v28 + v27 * 0.5;
LABEL_46:
      if (v29 > a6)
        *a4 = 0;
      return (uint64_t)v26;
    }
    v31 = v26[5].n64_u32[1];
    if (!v31)
      goto LABEL_105;
    v32 = v7;
    while (v32->n64_u32[0] != 516)
    {
      v32 = (__n64 *)v32[1].n64_u64[0];
      if (!v32)
        goto LABEL_59;
    }
    if (v32[13].n64_u8[0])
    {
      ChildIndexAtY = CGPDFNodeGetRotatedChildIndex((uint64_t)v26, a5, a6);
      goto LABEL_60;
    }
LABEL_59:
    ChildIndexAtY = CGPDFNodeGetChildIndexAtY(v26, a6);
LABEL_60:
    if (ChildIndexAtY >= v31)
      v34 = v31;
    else
      v34 = ChildIndexAtY;
    v24 = v34 != 0;
    v35 = v34 - 1;
    if (!v24)
      v35 = 0;
    if ((v26->n64_u8[1] & 2) == 0)
      goto LABEL_105;
    if (v26[5].n64_u32[1] <= v35)
      goto LABEL_105;
    v26 = *(__n64 **)(v26[7].n64_u64[0] + 8 * v35);
    if (!v26 || v26->n64_u32[0] != 1537)
      goto LABEL_105;
    v50.origin.x = CGPDFNodeGetBounds(v26).n64_f64[0];
    y = v50.origin.y;
    height = v50.size.height;
    v51 = CGRectInset(v50, v15, v15);
    if (v51.origin.y - a6 > 0.0)
    {
      v16 = v26;
      goto LABEL_15;
    }
    if (v51.size.height + v51.origin.y - a6 < 0.0)
    {
      v18 = (int *)v26;
      return CGPDFNodeGetFirstDescendantOfType(v18, a2, 0);
    }
    if ((_DWORD)a2 == 1537)
    {
      v29 = y + height * 0.5;
      goto LABEL_46;
    }
    if ((v26->n64_u8[1] & 2) == 0)
      goto LABEL_105;
    v38 = v26[5].n64_u32[1];
    if (!v38)
      goto LABEL_105;
    while (v7->n64_u32[0] != 516)
    {
      v7 = (__n64 *)v7[1].n64_u64[0];
      if (!v7)
        goto LABEL_82;
    }
    if (v7[13].n64_u8[0])
    {
      RotatedTextLineIndexAtPoint = CGPDFNodeGetRotatedTextLineIndexAtPoint(v26, a5, a6);
      goto LABEL_83;
    }
LABEL_82:
    RotatedTextLineIndexAtPoint = CGPDFNodeGetChildIndexAtY(v26, a6);
LABEL_83:
    if (RotatedTextLineIndexAtPoint >= v38)
      v40 = v38;
    else
      v40 = RotatedTextLineIndexAtPoint;
    v24 = v40 != 0;
    v41 = v40 - 1;
    if (!v24)
      v41 = 0;
    if ((v26->n64_u8[1] & 2) == 0)
      goto LABEL_105;
    if (v26[5].n64_u32[1] <= v41)
      goto LABEL_105;
    v7 = *(__n64 **)(v26[7].n64_u64[0] + 8 * v41);
    if (!v7 || v7->n64_u32[0] != 514)
      goto LABEL_105;
    if ((_DWORD)a2 == 514)
      goto LABEL_93;
    v44 = v7[5].n64_u32[1];
    if (!v44)
      goto LABEL_105;
    RotatedChildIndexAtX = CGPDFNodeGetRotatedChildIndexAtX(v7, a5, a6);
    if (RotatedChildIndexAtX >= v44)
      v46 = v44;
    else
      v46 = RotatedChildIndexAtX;
    v24 = v46 != 0;
    v47 = v46 - 1;
    if (!v24)
      v47 = 0;
    if ((v7->n64_u8[1] & 2) != 0
      && v7[5].n64_u32[1] > v47
      && (v7 = *(__n64 **)(v7[7].n64_u64[0] + 8 * v47)) != 0
      && v7->n64_u32[0] == 1)
    {
LABEL_93:
      v42 = CGPDFNodeGetBounds(v7).n64_f64[0];
      if (v42 + v43 * 0.5 >= CGPDFNodeTransformPoint((uint64_t)v7, a5, a6))
        return (uint64_t)v7;
    }
    else
    {
LABEL_105:
      v7 = 0;
    }
LABEL_106:
    *a4 = 0;
    return (uint64_t)v7;
  }
  v18 = (int *)v7;
  return CGPDFNodeGetFirstDescendantOfType(v18, a2, 0);
}

unint64_t CGPDFNodeGetRotatedChildIndex(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  __n64 *v10;
  __n64 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect v22;

  if (!a1)
    return 0;
  if ((*(_BYTE *)(a1 + 1) & 2) != 0)
    v6 = *(unsigned int *)(a1 + 44);
  else
    v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = INFINITY;
  while (v6 != v8)
  {
    if ((*(_BYTE *)(a1 + 1) & 2) != 0 && v8 < *(unsigned int *)(a1 + 44))
      v10 = *(__n64 **)(*(_QWORD *)(a1 + 56) + 8 * v8);
    else
      v10 = 0;
    v11.n64_u64[0] = CGPDFNodeGetBounds(v10).n64_u64[0];
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = CGPDFNodeTransformPoint((uint64_t)v10, a2, a3);
    v20 = v18;
    ++v8;
    if ((v18 - (v13 + v17 * 0.5)) * (v18 - (v13 + v17 * 0.5))
       + (v19 - (v11.n64_f64[0] + v15 * 0.5)) * (v19 - (v11.n64_f64[0] + v15 * 0.5)) >= v9)
    {
      v7 = v7;
    }
    else
    {
      v9 = (v18 - (v13 + v17 * 0.5)) * (v18 - (v13 + v17 * 0.5))
         + (v19 - (v11.n64_f64[0] + v15 * 0.5)) * (v19 - (v11.n64_f64[0] + v15 * 0.5));
      v7 = v8;
    }
    v22.origin.x = v11.n64_f64[0];
    v22.origin.y = v13;
    v22.size.width = v15;
    v22.size.height = v17;
    if (CGRectContainsPoint(v22, *(CGPoint *)&v19))
      return v8;
  }
  return v7;
}

unint64_t CGPDFNodeGetChildIndexAtY(__n64 *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  __n64 *v10;
  double v11;
  double v12;

  if (!a1)
    return 0;
  CGPDFNodeGetBounds(a1);
  v5 = v4;
  v7 = v4 + v6;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    v8 = 0;
LABEL_17:
    if ((v5 + v7) * 0.5 <= a2)
      return v8;
    else
      return (v8 + 1);
  }
  v8 = a1[5].n64_u32[1];
  if (!(_DWORD)v8)
    goto LABEL_17;
  v9 = 0;
  while (1)
  {
    v10 = (a1->n64_u8[1] & 2) != 0 && v9 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v9) : 0;
    CGPDFNodeGetBounds(v10);
    if (v7 < v11)
      v7 = v11;
    if ((v11 + v12 + v7) * 0.5 < a2)
      break;
    ++v9;
    v7 = v11;
    if (v8 == v9)
    {
      v7 = v11;
      goto LABEL_17;
    }
  }
  if ((_DWORD)v9 == (_DWORD)v8)
    goto LABEL_17;
  return v9;
}

__n64 *CGPDFNodeGetRotatedTextLineIndexAtPoint(__n64 *result, double a2, double a3)
{
  __n64 *v5;
  unsigned __int32 v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __n64 *v10;
  __n64 v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGRect v22;

  if (result)
  {
    v5 = result;
    CGPDFNodeGetBounds(result);
    if ((v5->n64_u8[1] & 2) != 0)
      v6 = v5[5].n64_u32[1];
    else
      v6 = 0;
    v7 = 0;
    v8 = v6;
    v9 = -1;
    while (v8 != v7)
    {
      if ((v5->n64_u8[1] & 2) != 0 && v7 < v5[5].n64_u32[1])
        v10 = *(__n64 **)(v5[7].n64_u64[0] + 8 * v7);
      else
        v10 = 0;
      v11.n64_u64[0] = CGPDFNodeGetBounds(v10).n64_u64[0];
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v18 = CGPDFNodeTransformPoint((uint64_t)v10, a2, a3);
      v20 = v18;
      v21 = v19;
      if (v9 < 0 && v19 > v13)
      {
        if (v18 >= v11.n64_f64[0])
        {
          if (v18 > v11.n64_f64[0])
            v9 = v7 + 1;
        }
        else
        {
          v9 = v7;
        }
      }
      v22.origin.x = v11.n64_f64[0];
      v22.origin.y = v13;
      v22.size.width = v15;
      v22.size.height = v17;
      ++v7;
      if (CGRectContainsPoint(v22, *(CGPoint *)&v20))
      {
        v9 = v7;
        break;
      }
    }
    if (v9 < 0)
      return (__n64 *)(v8 + 1);
    else
      return (__n64 *)v9;
  }
  return result;
}

double CGPDFNodeTransformPoint(uint64_t a1, double a2, double a3)
{
  double Rotation;
  __double2 v6;

  Rotation = CGPDFNodeGetRotation(a1);
  if (Rotation != 0.0)
  {
    v6 = __sincos_stret(Rotation);
    return a3 * v6.__sinval + v6.__cosval * a2 + 0.0;
  }
  return a2;
}

unint64_t CGPDFNodeGetRotatedChildIndexAtX(__n64 *a1, double a2, double a3)
{
  __n64 v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  __n64 *v13;
  __n64 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  if (!a1)
    return 0;
  v6.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  v7 = v6.n64_f64[0];
  v9 = v8;
  if ((a1->n64_u8[1] & 2) == 0)
  {
    v10 = 0;
    goto LABEL_16;
  }
  v10 = a1[5].n64_u32[1];
  if (!(_DWORD)v10)
  {
LABEL_16:
    v18 = v6.n64_f64[0];
LABEL_17:
    v19 = CGPDFNodeTransformPoint((uint64_t)a1, a2, a3);
    v12 = v18;
LABEL_18:
    if (v19 <= (v9 + v7 + v12) * 0.5)
      return v10;
    else
      return (v10 + 1);
  }
  v11 = 0;
  v12 = v6.n64_f64[0];
  while (1)
  {
    v13 = (a1->n64_u8[1] & 2) != 0 && v11 < a1[5].n64_u32[1] ? *(__n64 **)(a1[7].n64_u64[0] + 8 * v11) : 0;
    v14.n64_u64[0] = CGPDFNodeGetBounds(v13).n64_u64[0];
    v16 = v15;
    v17 = CGPDFNodeTransformPoint((uint64_t)v13, a2, a3);
    v18 = v14.n64_f64[0] + v16;
    if (v12 > v18)
      v12 = v18;
    if (v17 < (v14.n64_f64[0] + v12) * 0.5)
      break;
    ++v11;
    v12 = v18;
    if (v10 == v11)
      goto LABEL_17;
  }
  v19 = CGPDFNodeTransformPoint((uint64_t)a1, a2, a3);
  if ((_DWORD)v11 == (_DWORD)v10)
    goto LABEL_18;
  return v11;
}

uint64_t CGPDFNodeCompareReadingOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t TextRange;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  TextRange = CGPDFNodeGetTextRange(a1);
  v6 = v5;
  v7 = CGPDFNodeGetTextRange(a2);
  if (TextRange + v6 < v7 + v8)
    return -1;
  if (TextRange + v6 > v7 + v8)
    return 1;
  if (v3 == a2)
    return 0;
  if (!v3)
    return 1;
  do
    v3 = *(_QWORD *)(v3 + 8);
  while (v3 != a2 && v3 != 0);
  if (v3)
    return -1;
  else
    return 1;
}

uint64_t CGPDFNodeGetTextRangeIncludingWhitespace(uint64_t a1)
{
  uint64_t TextRange;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int ChildIndex;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  TextRange = CGPDFNodeGetTextRange(a1);
  v3 = TextRange;
  if (a1 && *(_DWORD *)a1 == 1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 && (*(_BYTE *)(v4 + 1) & 2) != 0 && (v5 = *(_DWORD *)(v4 + 44)) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      while (*(_DWORD *)v6 != 1537)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          return TextRange - (**(_QWORD **)(v4 + 56) != a1);
      }
      if (*(double *)(v6 + 112) == 0.0)
        return TextRange - (**(_QWORD **)(v4 + 56) != a1);
      ChildIndex = CGPDFNodeGetChildIndex(a1);
      v9 = ChildIndex;
      if (ChildIndex)
      {
        if (v5 <= ChildIndex - 1)
          v10 = 0;
        else
          v10 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * (ChildIndex - 1));
        v11 = CGPDFNodeGetTextRange(v10);
        v3 = v11 + v12;
      }
      else
      {
        v3 = CGPDFNodeGetTextRange(v4);
      }
      v13 = v9 + 1;
      if (v9 + 1 < v5)
      {
        if ((*(_BYTE *)(v4 + 1) & 2) != 0 && *(_DWORD *)(v4 + 44) > v13)
          v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v13);
        else
          v14 = 0;
        CGPDFNodeGetTextRange(v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t CGPDFNodeGetTextIndexAfterPoint(_DWORD *a1, CGFloat a2, CGFloat a3, double a4)
{
  uint64_t TextRangeIncludingWhitespace;
  uint64_t TextIndexAtPoint;
  uint64_t v10;
  __int16 v13;

  if (!a1)
    return -1;
  TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace((uint64_t)a1);
  if (*a1 == 1)
  {
    v13 = 0;
    TextIndexAtPoint = CGPDFNodeGetTextIndexAtPoint((uint64_t)a1, (BOOL *)&v13 + 1, (BOOL *)&v13, a2, a3, a4);
    if (HIBYTE(v13))
      v10 = TextIndexAtPoint;
    else
      v10 = TextIndexAtPoint + 1;
    if (v10 < TextRangeIncludingWhitespace || v13 != 0)
      return v10;
  }
  return TextRangeIncludingWhitespace;
}

uint64_t CGPDFNodeGetTextIndexAtPoint(uint64_t a1, BOOL *a2, BOOL *a3, CGFloat a4, CGFloat a5, double a6)
{
  __n64 *v12;
  double Rotation;
  __double2 v14;
  double v15;
  double y;
  double height;
  double v19;
  double v20;
  double width;
  double v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v29;
  double v30;
  uint64_t TextRangeIncludingWhitespace;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TextRange;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGSize *p_size;
  const CGRect *v44;
  uint64_t v45;
  CGSize *v46;
  const CGRect *v47;
  BOOL v48;
  double x;
  BOOL v50;
  double v51;
  double HitTestRect;
  double v53;
  CGPoint v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;

  *a2 = 0;
  *a3 = 0;
  if (!a1)
    return -1;
  if (*(_DWORD *)a1 == 1)
  {
    v12 = *(__n64 **)(a1 + 8);
    if (v12 && (v12->n64_u8[1] & 2) != 0 && v12[5].n64_u32[1])
    {
      Rotation = CGPDFNodeGetRotation(a1);
      if (Rotation == 0.0)
      {
        CGPDFNodeGetHitTestRect((uint64_t)v12, a6);
        y = v29;
        height = v30;
        v15 = a4;
      }
      else
      {
        v14 = __sincos_stret(Rotation);
        v15 = a5 * v14.__sinval + v14.__cosval * a4 + 0.0;
        a5 = a5 * v14.__cosval - v14.__sinval * a4 + 0.0;
        v55.origin.x = CGPDFNodeGetBounds(v12).n64_f64[0];
        v56 = CGRectInset(v55, a6, a6);
        y = v56.origin.y;
        height = v56.size.height;
      }
      TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace(a1);
      v33 = v32;
      v34 = TextRangeIncludingWhitespace + v32;
      v35 = (uint64_t)v12;
      do
      {
        if (*(_DWORD *)v35 == 515)
          break;
        v35 = *(_QWORD *)(v35 + 8);
      }
      while (v35);
      TextRange = CGPDFNodeGetTextRange(v35);
      if (a5 > y + height)
      {
        *a2 = 1;
        return TextRangeIncludingWhitespace - (TextRangeIncludingWhitespace > TextRange);
      }
      if (a5 < y)
        return v34 - (v34 >= TextRange + v37);
      while (v12->n64_u32[0] != 517)
      {
        v12 = (__n64 *)v12[1].n64_u64[0];
        if (!v12)
        {
          v38 = 0;
          goto LABEL_34;
        }
      }
      v38 = v12[13].n64_u64[0];
LABEL_34:
      v39 = v33 - 1;
      if (v33 < 1)
        return TextRangeIncludingWhitespace;
      v27 = v34 - 1;
      if (v34 <= TextRangeIncludingWhitespace + 1)
        v40 = TextRangeIncludingWhitespace + 1;
      else
        v40 = v34;
      v41 = 24 * TextRangeIncludingWhitespace;
      v42 = TextRangeIncludingWhitespace;
      while (1)
      {
        p_size = &CGRectNull.size;
        if (!v38)
          goto LABEL_53;
        v44 = &CGRectNull;
        if (v42 < 0)
          goto LABEL_49;
        p_size = &CGRectNull.size;
        if (*(_QWORD *)(v38 + 48) > v42 && (v45 = *(_QWORD *)(v38 + 24)) != 0)
        {
          v46 = *(CGSize **)(v45 + v41);
          v47 = (const CGRect *)&v46[1];
          v48 = v46 == 0;
          if (v46)
            p_size = v46 + 2;
          else
            p_size = &CGRectNull.size;
          if (v48)
            v44 = &CGRectNull;
          else
            v44 = v47;
        }
        else
        {
LABEL_53:
          v44 = &CGRectNull;
        }
LABEL_49:
        x = v44->origin.x;
        if (v15 <= v44->origin.x + p_size->width * 0.5)
        {
          if (v42 <= TextRangeIncludingWhitespace)
          {
            *a2 = 1;
            v50 = v15 >= x - a6;
          }
          else if (v15 >= x)
          {
            v50 = 1;
            *a2 = 1;
          }
          else
          {
            --v42;
            v50 = 1;
          }
          *a3 = v50;
          return v42;
        }
        if (!v39)
        {
          v51 = x + p_size->width + a6;
          *a3 = v15 <= v51;
          if (v15 > v51)
          {
            HitTestRect = CGPDFNodeGetHitTestRect(a1, a6);
            *a3 = v15 <= HitTestRect + v53;
          }
          return v27;
        }
        ++v42;
        v41 += 24;
        --v39;
        if (v42 >= v34)
          return v40;
      }
    }
    return -1;
  }
  if (*(_DWORD *)a1 != 513 && (*(_DWORD *)a1 & 0x100) == 0)
    return -1;
  v57.origin.x = CGPDFNodeGetHitTestRect(a1, a6);
  v19 = v57.origin.x;
  v20 = v57.origin.y;
  width = v57.size.width;
  v22 = v57.size.height;
  v54.x = a4;
  v54.y = a5;
  *a3 = CGRectContainsPoint(v57, v54);
  if (a5 >= v20)
  {
    v23 = a5 > v20 + v22;
    if (a4 <= v19 + width * 0.5)
      v23 = 1;
    *a2 = v23;
  }
  v24 = CGPDFNodeGetTextRange(a1);
  if (*a2)
    v26 = v25 - 1;
  else
    v26 = 0;
  return v24 + v26;
}

uint64_t CGPDFNodeGetTextIndexBeforePoint(_DWORD *a1, CGFloat a2, CGFloat a3, double a4)
{
  uint64_t TextRangeIncludingWhitespace;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TextIndexAtPoint;
  uint64_t result;
  uint64_t v14;
  __int16 v15;

  if (!a1)
    return -1;
  TextRangeIncludingWhitespace = CGPDFNodeGetTextRangeIncludingWhitespace((uint64_t)a1);
  v10 = TextRangeIncludingWhitespace;
  v11 = v9;
  if (*a1 != 1)
  {
    v14 = TextRangeIncludingWhitespace + v9;
    return v14 - 1;
  }
  v15 = 0;
  TextIndexAtPoint = CGPDFNodeGetTextIndexAtPoint((uint64_t)a1, (BOOL *)&v15 + 1, (BOOL *)&v15, a2, a3, a4);
  result = TextIndexAtPoint - SHIBYTE(v15);
  if (!(_BYTE)v15)
  {
    v14 = v10 + v11;
    if (result < v10 + v11)
      return v14 - 1;
  }
  return result;
}

void CGPDFNodeGetNodeRangeBetweenPoints(__n64 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, BOOL *a6, uint64_t *a7, double a8, double a9, double a10, double a11, double a12)
{
  __n64 *ClosestNodeToPoint;
  __n64 *NodeBefore;
  uint64_t NodeAfter;
  _DWORD *v26;
  __n64 *v27;
  __n64 *v28;
  uint64_t v29;
  _DWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int IsHitByPoint;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  _DWORD *v42;
  int *v43;
  int v44;
  double Rotation;
  __double2 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  double v52;
  double v53;
  BOOL v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t TextIndexAfterPoint;
  _DWORD *v58;
  CGFloat v59;
  CGFloat v60;
  uint64_t TextIndexBeforePoint;
  uint64_t TextRange;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v71;
  uint64_t v72;
  __n64 *j;
  uint64_t v74;
  __n64 *i;

  v71 = 0;
  ClosestNodeToPoint = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v71, a8, a9, a12);
  if (v71)
  {
    NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(a1, ClosestNodeToPoint, a2, a3);
    NodeAfter = (uint64_t)ClosestNodeToPoint;
  }
  else
  {
    NodeAfter = CGPDFNodeGetNodeAfter(a1, ClosestNodeToPoint, a2, a3);
    NodeBefore = ClosestNodeToPoint;
  }
  v74 = NodeAfter;
  for (i = NodeBefore; ClosestNodeToPoint; ClosestNodeToPoint = (__n64 *)ClosestNodeToPoint[1].n64_u64[0])
  {
    if (ClosestNodeToPoint->n64_u32[0] == 1538)
    {
      v26 = (_DWORD *)ClosestNodeToPoint[13].n64_u64[0];
      if (v26)
      {
        if (*v26 == 2)
          break;
      }
    }
  }
  v27 = CGPDFNodeGetClosestNodeToPoint(a1, a2, a3, &v71, a10, a11, a12);
  if (v71)
  {
    v28 = (__n64 *)CGPDFNodeGetNodeBefore(a1, v27, a2, a3);
    v29 = (uint64_t)v27;
  }
  else
  {
    v29 = CGPDFNodeGetNodeAfter(a1, v27, a2, a3);
    v28 = v27;
  }
  v72 = v29;
  for (j = v28; v27; v27 = (__n64 *)v27[1].n64_u64[0])
  {
    if (v27->n64_u32[0] == 1538)
    {
      v30 = (_DWORD *)v27[13].n64_u64[0];
      if (v30)
      {
        if (*v30 == 2)
          break;
      }
    }
  }
  v31 = ClosestNodeToPoint == v27;
  v32 = NodeAfter;
  if (v31)
  {
    if (ClosestNodeToPoint)
      v38 = (uint64_t)ClosestNodeToPoint;
    else
      v38 = (uint64_t)a1;
    CGPDFNodeMakeLayoutAreasConsistent(v38, a2, a3, (uint64_t *)&i, &v74, (uint64_t *)&j, &v72, a8, a9, a10, a11, a12);
    v32 = v74;
    v29 = v72;
    if (v74)
      goto LABEL_19;
LABEL_29:
    v36 = (uint64_t)i;
    if (v29)
    {
      *a6 = 0;
      v37 = v36;
      v34 = a7;
      goto LABEL_31;
    }
    v34 = a7;
    goto LABEL_41;
  }
  if (!NodeAfter)
    goto LABEL_29;
LABEL_19:
  if (!v29 || (v33 = CGPDFNodeCompareReadingOrder(v32, v29), v33 == -1))
  {
    *a6 = 1;
    v36 = (uint64_t)i;
    if (CGPDFNodeIsHitByPoint((uint64_t)i, a8, a9, a12))
      v40 = (_DWORD *)v36;
    else
      v40 = (_DWORD *)v32;
    *a4 = (uint64_t)v40;
    v34 = a7;
    if (CGPDFNodeIsHitByPoint(v29, a10, a11, a12))
    {
LABEL_37:
      *a5 = v29;
      goto LABEL_83;
    }
    *a5 = (uint64_t)j;
    goto LABEL_83;
  }
  v34 = a7;
  if (v33 == 1)
  {
    *a6 = 0;
    IsHitByPoint = CGPDFNodeIsHitByPoint(v32, a8, a9, a12);
    v36 = (uint64_t)i;
    if (IsHitByPoint)
      v37 = v32;
    else
      v37 = (uint64_t)i;
LABEL_31:
    *a4 = v37;
    v39 = (uint64_t)j;
    if (CGPDFNodeIsHitByPoint((uint64_t)j, a10, a11, a12))
    {
      *a5 = v39;
      goto LABEL_83;
    }
    goto LABEL_37;
  }
  v36 = (uint64_t)i;
LABEL_41:
  if (CGPDFNodeIsHitByPoint(v36, a8, a9, a12))
  {
    *a4 = v36;
    v41 = CGPDFNodeIsHitByPoint(v36, a10, a11, a12);
    v42 = (_DWORD *)v36;
    if ((v41 & 1) != 0)
      goto LABEL_43;
    *a6 = 1;
    if (CGPDFNodeIsHitByPoint(v32, a10, a11, a12))
      *a5 = v32;
    else
      *a5 = v36;
  }
  else
  {
    if (!CGPDFNodeIsHitByPoint(v36, a10, a11, a12))
    {
      if (CGPDFNodeIsHitByPoint(v32, a8, a9, a12))
      {
        *a4 = v32;
        *a5 = v32;
        if ((CGPDFNodeIsHitByPoint(v32, a10, a11, a12) & 1) == 0)
        {
          *a6 = 0;
          goto LABEL_83;
        }
LABEL_44:
        v43 = (int *)*a4;
        if (*a4)
        {
          v44 = *v43;
          Rotation = CGPDFNodeGetRotation((uint64_t)v43);
          if (Rotation != 0.0)
          {
LABEL_46:
            v46 = __sincos_stret(Rotation);
            v47 = a9 * v46.__sinval + v46.__cosval * a8 + 0.0;
            v48 = a9 * v46.__cosval - v46.__sinval * a8 + 0.0;
            v49 = a11 * v46.__sinval + v46.__cosval * a10 + 0.0;
            v50 = a11 * v46.__cosval - v46.__sinval * a10 + 0.0;
LABEL_70:
            if (v44 == 1 || v44 == 516 || v44 == 514)
            {
              if (v47 >= v49)
              {
                v54 = v47 == v49;
                if (v48 < v50)
                  v54 = 0;
                goto LABEL_82;
              }
LABEL_79:
              v54 = 1;
LABEL_82:
              *a6 = v54;
              goto LABEL_83;
            }
LABEL_78:
            if (v48 <= v50)
            {
              v54 = v48 == v50;
              if (v47 > v49)
                v54 = 0;
              goto LABEL_82;
            }
            goto LABEL_79;
          }
          goto LABEL_69;
        }
        if (v36)
        {
          v44 = *(_DWORD *)v36;
          if (v32)
          {
LABEL_57:
            v51 = *(_DWORD *)v32;
            goto LABEL_65;
          }
        }
        else
        {
          v44 = 0;
          if (v32)
            goto LABEL_57;
        }
        v51 = 0;
LABEL_65:
        if (v44 != v51)
        {
          v47 = a8;
          v48 = a9;
          v49 = a10;
          v50 = a11;
          goto LABEL_78;
        }
        v52 = CGPDFNodeGetRotation(v36);
        if (v52 != 0.0)
        {
          v53 = v52;
          if (v52 == CGPDFNodeGetRotation(v32))
          {
            Rotation = v53;
            goto LABEL_46;
          }
        }
LABEL_69:
        v50 = a11;
        v49 = a10;
        v48 = a9;
        v47 = a8;
        goto LABEL_70;
      }
      if (CGPDFNodeIsHitByPoint(v32, a10, a11, a12))
      {
        *a4 = v32;
        *a5 = v32;
        goto LABEL_79;
      }
      v42 = 0;
      *a4 = 0;
LABEL_43:
      *a5 = (uint64_t)v42;
      goto LABEL_44;
    }
    *a5 = v36;
    *a6 = 0;
    if (CGPDFNodeIsHitByPoint(v32, a8, a9, a12))
      *a4 = v32;
    else
      *a4 = v36;
  }
LABEL_83:
  if (!v34)
    return;
  v55 = (_DWORD *)*a4;
  v56 = (_DWORD *)*a5;
  if (!*a6)
  {
    if (v55)
    {
      if (v56)
      {
        TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)*a5, a10, a11, a12);
        v58 = (_DWORD *)*a4;
LABEL_98:
        v59 = a8;
        v60 = a9;
        goto LABEL_99;
      }
    }
    else
    {
      v55 = (_DWORD *)*a5;
      if (!v56)
        goto LABEL_102;
    }
    TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(v55, a10, a11, a12);
    v58 = v55;
    goto LABEL_98;
  }
  if (!v55)
  {
    if (v56)
    {
LABEL_94:
      TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(v56, a8, a9, a12);
      v58 = v56;
      goto LABEL_95;
    }
LABEL_102:
    TextIndexAfterPoint = 0;
    TextIndexBeforePoint = -1;
    goto LABEL_103;
  }
  if (!v56)
  {
    v56 = (_DWORD *)*a4;
    goto LABEL_94;
  }
  TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)*a4, a8, a9, a12);
  v58 = (_DWORD *)*a5;
LABEL_95:
  v59 = a10;
  v60 = a11;
LABEL_99:
  TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(v58, v59, v60, a12);
  if (!*a4 && !*a5)
  {
LABEL_103:
    if (v36 | v32)
    {
      if (v36)
      {
        TextRange = CGPDFNodeGetTextRange(v36);
        TextIndexAfterPoint = TextRange + v63;
        if (!v32)
          TextIndexBeforePoint = TextRange + v63 - 1;
      }
      if (v32)
      {
        v64 = CGPDFNodeGetTextRange(v32);
        TextIndexBeforePoint = v64 - 1;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1 && *(_DWORD *)v32 == 1 && *(_QWORD *)(v36 + 8) == *(_QWORD *)(v32 + 8))
          {
            if (*a6)
              v65 = a8;
            else
              v65 = a10;
            if (*a6)
              v66 = a9;
            else
              v66 = a11;
            if (!*a6)
            {
              a10 = a8;
              a11 = a9;
            }
            v67 = CGPDFNodeGetTextIndexAfterPoint((_DWORD *)v36, v65, v66, a12);
            v68 = CGPDFNodeGetTextIndexBeforePoint((_DWORD *)v32, a10, a11, a12);
            if (v67 > TextIndexAfterPoint)
              TextIndexAfterPoint = v67;
            if (v68 < TextIndexBeforePoint)
              TextIndexBeforePoint = v68;
          }
        }
        else
        {
          TextIndexAfterPoint = v64;
        }
      }
    }
  }
  if (TextIndexBeforePoint >= TextIndexAfterPoint)
    v69 = TextIndexBeforePoint - TextIndexAfterPoint + 1;
  else
    v69 = 0;
  *v34 = TextIndexAfterPoint;
  v34[1] = v69;
}

uint64_t CGPDFNodeMakeLayoutAreasConsistent(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  int IsHitByPoint;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v40;
  uint64_t v41;
  _BOOL4 v43;
  uint64_t v44;
  __n64 *v46;
  _BOOL4 v47;
  uint64_t v48;
  _BOOL4 v50;
  uint64_t v51;
  __n64 *v53;
  _BOOL4 v54;
  uint64_t v55;
  _DWORD *ClosestAreaDescendantToPoint;
  _DWORD *v58;
  _BOOL4 v59;
  uint64_t v60;
  _DWORD *v62;
  uint64_t *v63;
  char v70;

  if (a1)
  {
    v18 = a1;
    do
    {
      if (*(_DWORD *)v18 == 517)
        break;
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    v18 = 0;
  }
  for (i = *a4; i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)i == 516)
      break;
  }
  for (j = *a5; j; j = *(_QWORD *)(j + 8))
  {
    if (*(_DWORD *)j == 516)
      break;
  }
  for (k = *a6; k; k = *(_QWORD *)(k + 8))
  {
    if (*(_DWORD *)k == 516)
      break;
  }
  for (m = *a7; m; m = *(_QWORD *)(m + 8))
  {
    if (*(_DWORD *)m == 516)
      break;
  }
  IsHitByPoint = CGPDFNodeIsHitByPoint(i, a8, a9, a12);
  v24 = CGPDFNodeIsHitByPoint(j, a8, a9, a12);
  v25 = CGPDFNodeIsHitByPoint(k, a10, a11, a12);
  v26 = CGPDFNodeIsHitByPoint(m, a10, a11, a12);
  result = *a5;
  v28 = *a7;
  if (*a5)
  {
    if (v28)
    {
      result = CGPDFNodeCompareReadingOrder(result, v28);
      if (!result)
        return result;
    }
    else
    {
      result = -1;
    }
    v29 = result == -1;
    if (result == -1)
      v30 = v24;
    else
      v30 = 0;
    if ((v30 & v25 & 1) != 0)
      return result;
  }
  else
  {
    if (!v28)
      return result;
    v29 = 0;
    result = 1;
  }
  v31 = v26 ^ 1;
  v32 = IsHitByPoint ^ 1;
  if (result == 1 && (v31 & 1) == 0 && !v32)
    return result;
  v33 = v24 ^ 1;
  v70 = 1;
  if (!v29)
  {
    if (((v31 | IsHitByPoint) & 1) != 0)
    {
      if (((v32 | v26) & 1) == 0)
      {
        result = CGPDFNodeIsHitByPoint(i, a10, a11, a12);
        v33 = v24 ^ 1;
        if ((_DWORD)result)
        {
          v37 = i != 0;
          if (i != a1 && i)
          {
            v38 = i;
            do
            {
              v38 = *(_QWORD *)(v38 + 8);
              v37 = v38 != 0;
            }
            while (v38 != a1 && v38 != 0);
          }
          if (v37)
            goto LABEL_82;
        }
      }
    }
    else
    {
      result = CGPDFNodeIsHitByPoint(m, a8, a9, a12);
      v33 = v24 ^ 1;
      if ((_DWORD)result)
      {
        v47 = m != 0;
        if (m != a1 && m)
        {
          v48 = m;
          do
          {
            v48 = *(_QWORD *)(v48 + 8);
            v47 = v48 != 0;
          }
          while (v48 != a1 && v48 != 0);
        }
        if (v47)
          goto LABEL_116;
      }
    }
    if (((v33 | v25) & 1) != 0)
    {
      if (((v25 ^ 1 | v24) & 1) == 0)
      {
        result = CGPDFNodeIsHitByPoint(k, a8, a9, a12);
        if ((_DWORD)result)
        {
          v50 = k != 0;
          if (k != a1 && k)
          {
            v51 = k;
            do
            {
              v51 = *(_QWORD *)(v51 + 8);
              v50 = v51 != 0;
            }
            while (v51 != a1 && v51 != 0);
          }
          if (v50)
            goto LABEL_105;
        }
      }
      return result;
    }
    result = CGPDFNodeIsHitByPoint(j, a10, a11, a12);
    if (!(_DWORD)result)
      return result;
    v59 = j != 0;
    if (j != a1 && j)
    {
      v60 = j;
      do
      {
        v60 = *(_QWORD *)(v60 + 8);
        v59 = v60 != 0;
      }
      while (v60 != a1 && v60 != 0);
    }
    if (!v59)
      return result;
    goto LABEL_129;
  }
  if (((v33 | v25) & 1) == 0)
  {
    result = CGPDFNodeIsHitByPoint(j, a10, a11, a12);
    v31 = v26 ^ 1;
    v32 = IsHitByPoint ^ 1;
    if (!(_DWORD)result)
      goto LABEL_70;
    v40 = j != 0;
    if (j != a1 && j)
    {
      v41 = j;
      do
      {
        v41 = *(_QWORD *)(v41 + 8);
        v40 = v41 != 0;
      }
      while (v41 != a1 && v41 != 0);
    }
    if (!v40)
      goto LABEL_70;
LABEL_129:
    v46 = (__n64 *)j;
    goto LABEL_130;
  }
  if (((v25 ^ 1 | v24) & 1) == 0)
  {
    result = CGPDFNodeIsHitByPoint(k, a8, a9, a12);
    v31 = v26 ^ 1;
    v32 = IsHitByPoint ^ 1;
    if ((_DWORD)result)
    {
      v34 = k != 0;
      if (k != a1 && k)
      {
        v35 = k;
        do
        {
          v35 = *(_QWORD *)(v35 + 8);
          v34 = v35 != 0;
        }
        while (v35 != a1 && v35 != 0);
      }
      if (v34)
      {
LABEL_105:
        v53 = (__n64 *)k;
LABEL_117:
        ClosestAreaDescendantToPoint = (_DWORD *)CGPDFNodeGetClosestAreaDescendantToPoint(v53, a2, a3, &v70, a8, a9, a12);
        v58 = ClosestAreaDescendantToPoint;
        if (v70)
        {
          result = (uint64_t)CGPDFNodeGetNodeBefore((_DWORD *)v18, ClosestAreaDescendantToPoint, a2, a3);
          *a4 = result;
        }
        else
        {
          *a4 = (uint64_t)ClosestAreaDescendantToPoint;
          result = CGPDFNodeGetNodeAfter((_DWORD *)v18, ClosestAreaDescendantToPoint, a2, a3);
          v58 = (_DWORD *)result;
        }
        v63 = a5;
LABEL_136:
        *v63 = (uint64_t)v58;
        return result;
      }
    }
  }
LABEL_70:
  if (((v31 | IsHitByPoint) & 1) == 0)
  {
    result = CGPDFNodeIsHitByPoint(m, a8, a9, a12);
    if (!(_DWORD)result)
      return result;
    v54 = m != 0;
    if (m != a1 && m)
    {
      v55 = m;
      do
      {
        v55 = *(_QWORD *)(v55 + 8);
        v54 = v55 != 0;
      }
      while (v55 != a1 && v55 != 0);
    }
    if (!v54)
      return result;
LABEL_116:
    v53 = (__n64 *)m;
    goto LABEL_117;
  }
  if (((v32 | v26) & 1) == 0)
  {
    result = CGPDFNodeIsHitByPoint(i, a10, a11, a12);
    if ((_DWORD)result)
    {
      v43 = i != 0;
      if (i != a1 && i)
      {
        v44 = i;
        do
        {
          v44 = *(_QWORD *)(v44 + 8);
          v43 = v44 != 0;
        }
        while (v44 != a1 && v44 != 0);
      }
      if (v43)
      {
LABEL_82:
        v46 = (__n64 *)i;
LABEL_130:
        v62 = (_DWORD *)CGPDFNodeGetClosestAreaDescendantToPoint(v46, a2, a3, &v70, a10, a11, a12);
        v58 = v62;
        if (v70)
        {
          result = (uint64_t)CGPDFNodeGetNodeBefore((_DWORD *)v18, v62, a2, a3);
          *a6 = result;
        }
        else
        {
          *a6 = (uint64_t)v62;
          result = CGPDFNodeGetNodeAfter((_DWORD *)v18, v62, a2, a3);
          v58 = (_DWORD *)result;
        }
        v63 = a7;
        goto LABEL_136;
      }
    }
  }
  return result;
}

void CGPDFNodeGetNodeRangeFromIndexToPoint(__n64 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n64 **a6, __n64 **a7, uint64_t *a8, double a9, double a10, double a11)
{
  __n64 *v21;
  uint64_t v22;
  __n64 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __n64 *NodeFollowingTextIndex;
  __n64 *v31;
  __n64 *v32;
  __n64 *v34;
  uint64_t *v35;
  __n64 *v36;
  _DWORD *v37;
  __n64 *ClosestNodeToPoint;
  __n64 *NodeBefore;
  uint64_t NodeAfter;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v44;
  __n64 **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int32 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double Rotation;
  __double2 v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  BOOL v66;
  uint64_t v67;
  __n64 *v68;
  uint64_t TextIndexBeforePoint;
  __n64 **v71;
  uint64_t v72;
  __n64 *v73;
  __n64 *v74;
  BOOL v75;
  uint64_t v76;
  __n64 *i;

  if (a1)
  {
    v21 = a1;
    while (v21->n64_u32[0] != 517)
    {
      v21 = (__n64 *)v21[1].n64_u64[0];
      if (!v21)
        goto LABEL_5;
    }
    v22 = v21[13].n64_i64[0];
  }
  else
  {
LABEL_5:
    v22 = 0;
  }
  v23.n64_u64[0] = CGPDFLayoutGetRectForTextRange(v22, a3, 1).n64_u64[0];
  v25 = v24;
  v27 = v26;
  v29 = v28;
  if (a4)
    NodeFollowingTextIndex = (__n64 *)CGPDFNodeGetNodeFollowingTextIndex(a1, a3);
  else
    NodeFollowingTextIndex = (__n64 *)CGPDFNodeGetNodePrecedingTextIndex(a1, a3);
  v31 = NodeFollowingTextIndex;
  v71 = a7;
  v72 = a3;
  if (NodeFollowingTextIndex)
  {
    v32 = NodeFollowingTextIndex;
    do
    {
      if (v32->n64_u32[0] == (_DWORD)a2)
      {
        v35 = a8;
        goto LABEL_27;
      }
      v32 = (__n64 *)v32[1].n64_u64[0];
    }
    while (v32);
    if (!(_DWORD)a5)
      goto LABEL_25;
    if (NodeFollowingTextIndex->n64_u32[0] != 513 && (NodeFollowingTextIndex->n64_u32[0] & 0x100) == 0)
      goto LABEL_25;
    v34 = NodeFollowingTextIndex;
    do
    {
      if (v34->n64_u32[0] == 513)
        break;
      v34 = (__n64 *)v34[1].n64_u64[0];
    }
    while (v34);
    v35 = a8;
    if (v34)
      v32 = v34;
    else
      v32 = NodeFollowingTextIndex;
LABEL_27:
    v36 = v32;
    do
    {
      if (v36->n64_u32[0] == 1538)
      {
        v37 = (_DWORD *)v36[13].n64_u64[0];
        if (v37)
        {
          if (*v37 == 2)
            break;
        }
      }
      v36 = (__n64 *)v36[1].n64_u64[0];
    }
    while (v36);
  }
  else
  {
LABEL_25:
    v35 = a8;
    v32 = 0;
    v36 = 0;
  }
  v75 = 0;
  ClosestNodeToPoint = CGPDFNodeGetClosestNodeToPoint(a1, a2, a5, &v75, a9, a10, a11);
  if (v75)
  {
    NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(a1, ClosestNodeToPoint, a2, a5);
    NodeAfter = (uint64_t)ClosestNodeToPoint;
  }
  else
  {
    NodeAfter = CGPDFNodeGetNodeAfter(a1, ClosestNodeToPoint, a2, a5);
    NodeBefore = ClosestNodeToPoint;
  }
  v76 = NodeAfter;
  for (i = NodeBefore; ClosestNodeToPoint; ClosestNodeToPoint = (__n64 *)ClosestNodeToPoint[1].n64_u64[0])
  {
    if (ClosestNodeToPoint->n64_u32[0] == 1538)
    {
      v41 = (_DWORD *)ClosestNodeToPoint[13].n64_u64[0];
      if (v41)
      {
        if (*v41 == 2)
          break;
      }
    }
  }
  if (v31 && v36 == ClosestNodeToPoint)
  {
    if (!v32)
    {
LABEL_58:
      if (!a4 || !NodeAfter)
      {
        if ((a4 & 1) == 0 && i)
          goto LABEL_62;
        v45 = v71;
        *a6 = 0;
        v46 = v35;
        v47 = v72;
LABEL_78:
        *v45 = v32;
        if (a4)
        {
          if (!CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11)
            || (CGPDFNodeIsHitByPoint(v76, a9, a10, a11) & 1) != 0)
          {
            goto LABEL_87;
          }
        }
        else if (!CGPDFNodeIsHitByPoint(v76, a9, a10, a11)
               || CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11))
        {
LABEL_87:
          if (v32)
          {
            v52 = v32->n64_u32[0];
            if (v32->n64_u32[0] == 514 || v52 == 1)
            {
              CGPDFNodeGetBounds(v32);
              v25 = v53;
              v29 = v54;
            }
            v55 = -0.0;
            if (a4)
              v56 = -0.0;
            else
              v56 = v27;
            v57 = v23.n64_f64[0] + v56;
            if (a4)
              v55 = v29;
            v58 = v25 + v55;
            Rotation = CGPDFNodeGetRotation((uint64_t)v32);
            if (Rotation == 0.0)
            {
              v62 = a9;
              v63 = a10;
            }
            else
            {
              v60 = __sincos_stret(Rotation);
              v61 = v58 * v60.__cosval - v60.__sinval * v57;
              v57 = v58 * v60.__sinval + v60.__cosval * v57 + 0.0;
              v58 = v61 + 0.0;
              v62 = a10 * v60.__sinval + v60.__cosval * a9 + 0.0;
              v63 = a10 * v60.__cosval - v60.__sinval * a9 + 0.0;
            }
            if (v52 == 1 || v52 == 516 || v52 == 514)
            {
              v66 = v57 == v62;
              if (v58 < v63)
                v66 = 0;
              if (v57 < v62)
                v66 = 1;
              goto LABEL_116;
            }
          }
          else
          {
            v64 = -0.0;
            if (a4)
              v65 = -0.0;
            else
              v65 = v27;
            v57 = v23.n64_f64[0] + v65;
            if (a4)
              v64 = v29;
            v58 = v25 + v64;
            v63 = a10;
            v62 = a9;
          }
          v66 = v58 == v63;
          if (v57 > v62)
            v66 = 0;
          if (v58 > v63)
            v66 = 1;
LABEL_116:
          v50 = v66 ^ a4;
          if (!v46)
            return;
          goto LABEL_117;
        }
LABEL_72:
        v50 = 1;
        if (!v46)
          return;
        goto LABEL_117;
      }
      goto LABEL_69;
    }
    v42 = (uint64_t)v32;
    while (*(_DWORD *)v42 != 516)
    {
      v42 = *(_QWORD *)(v42 + 8);
      if (!v42)
        goto LABEL_53;
    }
    if (v22)
    {
      if (v23.n64_f64[0] != INFINITY && v25 != INFINITY)
      {
        v73 = v32;
        v74 = v32;
        CGPDFNodeMakeLayoutAreasConsistent(v42, a2, a5, (uint64_t *)&v73, (uint64_t *)&v74, (uint64_t *)&i, &v76, v23.n64_f64[0] + v27 * 0.5, v25 + v29 * 0.5, a9, a10, a11);
      }
    }
  }
LABEL_53:
  if (!v32)
  {
    NodeAfter = v76;
    goto LABEL_58;
  }
  if (!a4)
  {
    v44 = (uint64_t)i;
    if (i)
      goto LABEL_64;
LABEL_69:
    v45 = v71;
    *a6 = v32;
    v46 = v35;
    v47 = v72;
    goto LABEL_70;
  }
  v44 = v76;
  if (!v76)
  {
LABEL_62:
    v45 = v71;
    *a6 = v32;
    v46 = v35;
    v47 = v72;
    goto LABEL_66;
  }
LABEL_64:
  v48 = CGPDFNodeCompareReadingOrder((uint64_t)v32, v44);
  v45 = v71;
  *a6 = v32;
  v46 = v35;
  v47 = v72;
  if (v48 != 1)
  {
    if (v48 == -1)
    {
LABEL_66:
      if (a4)
      {
        v49 = v76;
        if (!CGPDFNodeIsHitByPoint(v76, a9, a10, a11))
        {
          v50 = 0;
          v51 = (uint64_t)i;
          goto LABEL_83;
        }
LABEL_75:
        v50 = 0;
        *v45 = (__n64 *)v49;
        if (!v46)
          return;
        goto LABEL_117;
      }
      goto LABEL_71;
    }
    goto LABEL_78;
  }
LABEL_70:
  if (a4)
  {
LABEL_71:
    *v45 = v32;
    goto LABEL_72;
  }
  v49 = (uint64_t)i;
  if (CGPDFNodeIsHitByPoint((uint64_t)i, a9, a10, a11))
    goto LABEL_75;
  v50 = 0;
  v51 = v76;
LABEL_83:
  *v45 = (__n64 *)v51;
  if (!v46)
    return;
LABEL_117:
  v67 = v47 - 1;
  if (!a4)
    v67 = v47 + 1;
  *v46 = v67;
  if ((v50 & 1) == 0)
  {
    v68 = *v45 ? *v45 : v32;
    if (v68)
    {
      if (a4)
      {
        TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(v68, a9, a10, a11);
        if (TextIndexBeforePoint < v47)
          return;
      }
      else
      {
        TextIndexBeforePoint = CGPDFNodeGetTextIndexAfterPoint(v68, a9, a10, a11);
        if (TextIndexBeforePoint > v47)
          return;
      }
      *v46 = TextIndexBeforePoint;
    }
  }
}

__n64 *CGPDFNodeGetContentNodeAtPoint(uint64_t a1, double a2, double a3)
{
  char v4;

  v4 = 0;
  return CGPDFNodeGetTopmostContentNodeAtPoint(a1, &v4, a2, a3);
}

__n64 *CGPDFNodeGetTopmostContentNodeAtPoint(uint64_t a1, char *a2, double a3, double a4)
{
  __n64 *v7;
  double Rotation;
  __double2 v9;
  double v10;
  double v11;
  _BOOL4 v12;
  unsigned __int32 v13;
  __n64 *v14;
  uint64_t v16;
  unint64_t v17;
  __n64 v18;
  __n64 v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t TopmostContentNodeAtPoint;
  char v26;
  uint64_t v27;
  __n64 *v28;
  char v29;
  CGPoint v30;
  CGPoint v31;
  CGRect v32;

  v7 = (__n64 *)a1;
  Rotation = CGPDFNodeGetRotation(a1);
  if (Rotation == 0.0)
  {
    v11 = a4;
    v10 = a3;
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v9 = __sincos_stret(Rotation);
    v10 = a4 * v9.__sinval + v9.__cosval * a3 + 0.0;
    v11 = a4 * v9.__cosval - v9.__sinval * a3 + 0.0;
    if (!v7)
      goto LABEL_14;
  }
  v32.origin.x = CGPDFNodeGetBounds(v7).n64_f64[0];
  v30.x = v10;
  v30.y = v11;
  v12 = CGRectContainsPoint(v32, v30);
  if (!v12)
  {
    v7 = 0;
    goto LABEL_15;
  }
  v13 = v7->n64_u32[0];
  if (v7->n64_i32[0] <= 512)
  {
    if (v13 == 257)
    {
LABEL_10:
      LOBYTE(v12) = 1;
      goto LABEL_15;
    }
    if (v13 != 258)
      goto LABEL_9;
    goto LABEL_14;
  }
  if (v13 != 515)
  {
    if (v13 != 513)
    {
LABEL_9:
      if ((v13 & 0x200) == 0)
        goto LABEL_10;
      *a2 = 0;
      v22 = v7[5].n64_u32[1];
      if (!(_DWORD)v22)
        return 0;
      v23 = 0;
      v14 = 0;
      while (1)
      {
        v29 = 0;
        if ((v7->n64_u8[1] & 2) != 0 && v23 < v7[5].n64_u32[1])
          v24 = *(_QWORD *)(v7[7].n64_u64[0] + 8 * v23);
        else
          v24 = 0;
        TopmostContentNodeAtPoint = CGPDFNodeGetTopmostContentNodeAtPoint(v24, &v29, a3, a4);
        if (!TopmostContentNodeAtPoint)
          goto LABEL_51;
        v26 = v29;
        if (!v14)
          goto LABEL_50;
        if (v29)
          break;
        if (!*a2)
          goto LABEL_39;
LABEL_51:
        if (++v23 == v22)
          return v14;
      }
      if (*a2)
      {
LABEL_39:
        v27 = TopmostContentNodeAtPoint;
        while ((*(_BYTE *)(v27 + 1) & 3) == 0)
        {
          v27 = *(_QWORD *)(v27 + 8);
          if (!v27)
            goto LABEL_44;
        }
        v27 = *(_QWORD *)(v27 + 96);
LABEL_44:
        v28 = v14;
        while ((v28->n64_u8[1] & 3) == 0)
        {
          v28 = (__n64 *)v28[1].n64_u64[0];
          if (!v28)
            goto LABEL_49;
        }
        v28 = (__n64 *)v28[12].n64_u64[0];
LABEL_49:
        if (v27 < (uint64_t)v28)
          goto LABEL_51;
      }
      else
      {
        v26 = 1;
      }
LABEL_50:
      *a2 = v26;
      v14 = (__n64 *)TopmostContentNodeAtPoint;
      goto LABEL_51;
    }
LABEL_14:
    LOBYTE(v12) = 0;
    goto LABEL_15;
  }
  *a2 = 0;
  v16 = v7[5].n64_u32[1];
  if (!(_DWORD)v16)
    return v7;
  v17 = 0;
  while (1)
  {
    v14 = (v7->n64_u8[1] & 2) != 0 && v17 < v7[5].n64_u32[1] ? *(__n64 **)(v7[7].n64_u64[0] + 8 * v17) : 0;
    v18.n64_u64[0] = CGPDFNodeGetBounds(v14).n64_u64[0];
    if (v19.n64_f64[0] <= v11)
      break;
    if (v16 == ++v17)
      return v14;
  }
  v31.x = v10;
  v31.y = v11;
  LOBYTE(v12) = CGRectContainsPoint(*(CGRect *)v18.n64_u64, v31);
  v7 = v14;
LABEL_15:
  *a2 = v12;
  return v7;
}

double CGPDFNodeGetContentRect(__n64 *a1)
{
  __n64 *v1;
  __n64 v2;
  __n64 v3;
  __n64 v5;
  _BOOL4 v6;
  double v7;

  v1 = a1;
  v3.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  if (v1 && (v1->n64_u32[0] == 1537 || v1->n64_u32[0] == 514) && v3.n64_f64[0] != INFINITY && v2.n64_f64[0] != INFINITY)
  {
    while (v1->n64_u32[0] != 515)
    {
      v1 = (__n64 *)v1[1].n64_u64[0];
      if (!v1)
        return v3.n64_f64[0];
    }
    v5.n64_u64[0] = CGPDFNodeGetBounds(v1).n64_u64[0];
    v6 = v5.n64_f64[0] == INFINITY;
    if (v7 == INFINITY)
      v6 = 1;
    if (!v6)
      v3.n64_u64[0] = v5.n64_u64[0];
  }
  return v3.n64_f64[0];
}

char *RIPLayerConvertLayer(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v41 = unk_185000770;
  v42 = xmmword_185000780;
  v37 = unk_185000730;
  v38 = xmmword_185000740;
  v39 = unk_185000750;
  v40 = xmmword_185000760;
  v33 = unk_1850006F0;
  v34 = xmmword_185000700;
  v43 = 0;
  v35 = unk_185000710;
  v36 = xmmword_185000720;
  memset(v29, 0, sizeof(v29));
  v30 = xmmword_1850006C0;
  v31 = unk_1850006D0;
  v32 = xmmword_1850006E0;
  v28 = 0;
  v27 = 0u;
  v26 = 0u;
  if (!a3)
    return 0;
  if (!*(_QWORD *)a3)
    return 0;
  if (!*(_QWORD *)(a3 + 32))
    return 0;
  if ((*(_DWORD *)(a3 + 20) & 0x80000000) != 0)
    return 0;
  if ((*(_DWORD *)(a3 + 24) & 0x80000000) != 0)
    return 0;
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, a3 + 12);
  if (!v8)
    return 0;
  *(_QWORD *)&v30 = *v8;
  if (!(_QWORD)v30)
    goto LABEL_12;
  *(_QWORD *)&v31 = 0;
  v23 = 0;
  v15 = *(_DWORD *)(a3 + 24);
  DWORD2(v31) = *(_DWORD *)(a3 + 20);
  HIDWORD(v31) = v15;
  v24 = DWORD2(v31);
  v25 = v15;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v15, DWORD2(v31));
  if (!*(_QWORD *)(a3 + 56) && (ripl_CreateMask(a3, 0, v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
LABEL_12:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
    return 0;
  }
  v16 = RIPLayerCreate(a1, (uint64_t)&v23, (*(_QWORD *)(a3 + 72) != 0) | a2, 0, a4, v12, v13, v14);
  v20 = v16;
  if (v16)
  {
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a3 + 56);
    LODWORD(v32) = *(_DWORD *)(a3 + 48);
    LODWORD(v33) = *(_DWORD *)(a3 + 64);
    v21 = *(_QWORD *)(a3 + 72);
    v34 = 0uLL;
    *((_QWORD *)&v33 + 1) = v21;
    v28 = 0;
    *(_QWORD *)&v27 = 0;
    v26 = (unint64_t)v29;
    DWORD2(v27) = 0;
    RIPLayerBltImage((uint64_t)v16, 0, 0, (uint64_t)&v23, (uint64_t)&unk_185000418, v17, v18, v19);
    *(_QWORD *)(v20 + 12) = *(_QWORD *)(a3 + 12);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a3 + 48))(a3, v20 + 12);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
  }
  return v20;
}

uint64_t ripl_super()
{
  return 0;
}

void RIPLayerResample(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  int *v19;
  double v20;
  uint8x8_t v21;
  int *v22;

  if (a1)
  {
    v10 = !*(_QWORD *)a1 || a2 == 0;
    if (!v10 && (*a2 != 0.0 || a2[1] != 1.0))
    {
      v11 = *(_DWORD **)(a1 + 32);
      if (v11
        && v11 == (_DWORD *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8)
        && (*(_QWORD *)(a1 + 56) || ripl_CreateMask(a1, 1, v12, v13, v14, v15, v16, v17)))
      {
        v19 = decode_create((unsigned __int16)*v11 >> 12, *v11 >> 22, *v11 >> 22, (uint64_t)a2, 1, v18);
        if (v19)
        {
          v22 = v19;
          decode_data(v19, *(unsigned int *)(a1 + 20), *(_DWORD *)(a1 + 24), *(char **)(a1 + 56), *(_DWORD *)(a1 + 48), *(uint16x4_t **)(a1 + 56), *(_DWORD *)(a1 + 48), 0, v20, v21, 0);
          free(v22);
        }
      }
    }
  }
}

uint64_t RIPLayerTransfer(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  __int128 v23;

  if (result)
  {
    if (a3)
    {
      v9 = result;
      if (*(_QWORD *)result)
      {
        v23 = 0uLL;
        v10 = *(_DWORD **)(result + 32);
        if ((!v10 || (*v10 & 0x3F0000) == 0x80000) && (*(_DWORD *)(result + 20) & 0x80000000) == 0)
        {
          v11 = *(_DWORD *)(result + 24);
          if ((v11 & 0x80000000) == 0)
          {
            result += 12;
            if (a2)
            {
              result = CGSBoundsIntersection((int *)result, a2, &v23);
              if (!(_DWORD)result)
                return result;
              v12 = v23 - *(_DWORD *)(v9 + 12);
              v13 = v11 + *(_DWORD *)(v9 + 16) - (DWORD1(v23) + HIDWORD(v23));
            }
            else
            {
              v12 = 0;
              v13 = 0;
              v23 = *(_OWORD *)result;
            }
            if (*(_QWORD *)(v9 + 56) || (result = ripl_CreateMask(v9, 1, a3, a4, a5, a6, a7, a8), (_DWORD)result))
            {
              v14 = HIDWORD(v23);
              if (SHIDWORD(v23) >= 1)
              {
                v15 = *v10 >> 25;
                v16 = DWORD2(v23) * v15;
                v17 = *(_DWORD *)(v9 + 48);
                v18 = (int *)(*(_QWORD *)(v9 + 56) + (v17 * v13) + v15 * v12);
                v19 = v17 - v16;
                do
                {
                  v20 = v16;
                  if (v16 >= 4)
                  {
                    do
                    {
                      *v18 = *(unsigned __int8 *)(a3 + *v18) | (*(unsigned __int8 *)(a3 + BYTE1(*v18)) << 8) | (*(unsigned __int8 *)(a3 + BYTE2(*v18)) << 16) | (*(unsigned __int8 *)(a3 + ((unint64_t)*v18 >> 24)) << 24);
                      ++v18;
                      v21 = v20 > 7;
                      v20 -= 4;
                    }
                    while (v21);
                  }
                  if (v20 >= 1)
                  {
                    v22 = v20 + 1;
                    do
                    {
                      *(_BYTE *)v18 = *(_BYTE *)(a3 + *(unsigned __int8 *)v18);
                      v18 = (int *)((char *)v18 + 1);
                      --v22;
                    }
                    while (v22 > 1);
                  }
                  v18 = (int *)((char *)v18 + v19);
                  v21 = v14-- <= 1;
                }
                while (!v21);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

char *RIPLayerClip(uint64_t a1, signed int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  int v12;
  int v13;
  int v14;
  _OWORD *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v28;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;

  v8 = (char *)a1;
  if (!a2)
    return v8;
  v9 = a4;
  LODWORD(v10) = a3;
  v11 = *a2;
  v12 = a2[1];
  v13 = *a2 + a2[2];
  v14 = v12 + a2[3];
  v15 = (_OWORD *)(a1 + 12);
  v16 = *(_DWORD *)(a1 + 12);
  v18 = *(_DWORD *)(a1 + 20);
  v17 = *(_DWORD *)(a1 + 24);
  v19 = *(unsigned int *)(a1 + 16);
  v20 = v16 + v18;
  v21 = v19 + v17;
  v22 = *(_QWORD *)(a1 + 72);
  if (v22 || (v30 = *(_DWORD *)(a1 + 64)) == 0)
  {
    v23 = v10 & 0xFFFFFF;
    if (v16 > v11)
      v11 = v16;
    else
      v23 = v10;
    a4 = v23 & 0xFFFFFF00;
    if ((int)v19 > v12)
    {
      v23 &= 0xFFFFFF00;
      v12 = v19;
    }
    v19 = v23 & 0xFFFF00FF;
    if (v20 < v13)
    {
      v23 &= 0xFFFF00FF;
      v13 = v16 + v18;
    }
    if (v21 >= v14)
      v10 = v23;
    else
      v10 = v23 & 0xFF00FFFF;
    if (v21 < v14)
      v14 = v21;
  }
  else if ((_DWORD)v10)
  {
    if (v16 <= v11)
    {
      if (v16 == v11)
      {
        v36 = (~v30 >> 24) * (~(_DWORD)v10 >> 24);
        a5 = 4294836224;
        a4 = (-131072 - ((v36 + (v36 >> 8)) << 16)) & 0xFF000000 | v10 & 0xFFFFFF;
        LODWORD(v10) = a4;
      }
    }
    else
    {
      LODWORD(v10) = v30 & 0xFF000000 | v10 & 0xFFFFFF;
      v11 = *((_DWORD *)v8 + 3);
    }
    if ((int)v19 <= v12)
    {
      if ((_DWORD)v19 == v12)
      {
        v37 = ~(_BYTE)v10 * ~(_BYTE)v30;
        a5 = v10 & 0xFFFFFF00;
        a4 = v37 + (v37 >> 8) + 1;
        v19 = 255 - (a4 >> 8);
        LODWORD(v10) = v19 | a5;
      }
    }
    else
    {
      LODWORD(v10) = v10 & 0xFFFFFF00 | v30;
      v12 = *((_DWORD *)v8 + 4);
    }
    if (v20 >= v13)
    {
      if (v20 == v13)
      {
        v38 = ~(v10 >> 8) * ~(v30 >> 8);
        v19 = v10 & 0xFFFF00FF;
        a4 = 65280;
        LODWORD(v10) = (65280 - ((v38 + (v38 >> 8) + 1) & 0x3FF00)) | v19;
      }
    }
    else
    {
      LODWORD(v10) = v10 & 0xFFFF00FF | (BYTE1(v30) << 8);
      v13 = v16 + v18;
    }
    if (v21 >= v14)
    {
      v19 = 16711680;
      v39 = (16711680
           - ((((257 * ~HIWORD(v30) * ~WORD1(v10)) & 0xFFFF00) + 256) & 0x1FF0000)) | v10 & 0xFF00FFFF;
      if (v21 == v14)
        v10 = v39;
      else
        v10 = v10;
    }
    else
    {
      v10 = v10 & 0xFF00FFFF | (BYTE2(v30) << 16);
      v14 = v21;
    }
  }
  else
  {
    v33 = v30 & 0xFF000000;
    if (v16 > v11)
      v11 = v16;
    else
      v33 = 0;
    if ((int)v19 <= v12)
      a5 = 0;
    else
      a5 = v30;
    a4 = v33 | a5;
    if ((int)v19 > v12)
      v12 = v19;
    v34 = v30 & 0xFF00;
    if (v20 >= v13)
      v34 = 0;
    v19 = a4 | v34;
    if (v20 < v13)
      v13 = v16 + v18;
    v35 = v19 | v30 & 0xFF0000;
    if (v21 < v14)
      v10 = v35;
    else
      v10 = v19;
    if (v21 < v14)
      v14 = v21;
  }
  v24 = __OFSUB__(v13, v11);
  v25 = v13 - v11;
  if ((v25 < 0) ^ v24 | (v25 == 0))
    v26 = 1;
  else
    v26 = v14 <= v12;
  if (v26)
    return RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v9, a6, a7, a8);
  *(_QWORD *)&v40 = __PAIR64__(v12, v11);
  v28 = v14 - v12;
  *((_QWORD *)&v40 + 1) = __PAIR64__(v28, v25);
  if (v25 != v18 || v28 != v17)
  {
    if (*((_DWORD *)v8 + 2) == 1 && v16 == v11 && v21 == v14)
    {
      *v15 = v40;
      if (!v22 && *((_DWORD *)v8 + 16))
        *((_DWORD *)v8 + 16) = 0;
    }
    else
    {
      v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
    }
  }
  if (!(_DWORD)v10)
  {
    if (v8)
      return v8;
    v32 = 0;
    return RIPLayerCreateWithData((uint64_t *)&v40, 0, 0, 0, 0, v32, 0, v9);
  }
  if (!v8)
  {
    v32 = v10;
    return RIPLayerCreateWithData((uint64_t *)&v40, 0, 0, 0, 0, v32, 0, v9);
  }
  v31 = (char *)*((_QWORD *)v8 + 7);
  if (!v31 && !*((_QWORD *)v8 + 9))
  {
    if (*((_DWORD *)v8 + 2) != 1)
      v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
    *((_DWORD *)v8 + 16) = v10;
    return v8;
  }
  if (*((_DWORD *)v8 + 2) != 1)
  {
    v8 = RIPLayerCreateWithLayer((uint64_t)RIPLayer_ripl_class, (uint64_t *)&v40, (uint64_t *)v8, v9);
    v31 = (char *)*((_QWORD *)v8 + 7);
  }
  if (!v31)
  {
    if (!ripl_CreateMask((uint64_t)v8, 1, v19, a4, a5, a6, a7, a8))
      return 0;
    v31 = (char *)*((_QWORD *)v8 + 7);
  }
  CGSCombineMask(v31, *((_DWORD *)v8 + 12), v31, *((_DWORD *)v8 + 12), SDWORD2(v40), SHIDWORD(v40), v10);
  return v8;
}

__n128 RIPLayerDefine(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int *v12;
  __n128 result;
  int *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  int v25;

  if (a1)
  {
    if (a2)
    {
      if (!*(_QWORD *)(a1 + 56))
      {
        v10 = a2->n128_i32[2];
        if (v10 >= 1)
        {
          v11 = a2->n128_i32[3];
          if (v11 >= 1)
          {
            v12 = (int *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            if (v10 <= 0x7FFFFE)
            {
              v14 = v12;
              v15 = ((((*v12 >> 22) * v10) >> 3) + 3) & 0x3FFFFFFC;
              v16 = (*v12 >> 2) & 3;
              v17 = (v10 + 3) & 0xFFFFFFFC;
              if (v16 != 1)
                v17 = 0;
              if (v16 == 2)
                v18 = ((((*v12 >> 22) * v10) >> 3) + 3) & 0x3FFFFFFC;
              else
                v18 = v17;
              v19 = v11 * (unint64_t)(v18 + v15);
              if (v19 > 0x7FFFFFFB)
                v20 = 0xFFFFFFFFLL;
              else
                v20 = ((_DWORD)v19 + 19) & 0xFFFFFFF0;
              if ((v20 & 0x80000000) == 0)
              {
                v21 = (char *)malloc_type_calloc(1uLL, v20, 0xEA0DF616uLL);
                if (v21)
                {
                  v22 = v21;
                  if (v18)
                  {
                    v23 = (*v14 >> 2) & 3;
                    v24 = v21;
                    if (v23 != 2)
                    {
                      if (v23 == 1)
                        v24 = &v21[v15 * v11];
                      else
                        v24 = 0;
                    }
                  }
                  else
                  {
                    v24 = 0;
                  }
                  v25 = *(_DWORD *)(a1 + 28) | initialize_deep_mask(v14);
                  *(_DWORD *)(a1 + 28) = v25;
                  if (v14[4])
                    *(_DWORD *)(a1 + 28) = v25 | 0x200;
                  *(_QWORD *)(a1 + 32) = v14;
                  result = *a2;
                  *(__n128 *)(a1 + 12) = *a2;
                  *(_DWORD *)(a1 + 64) = v18;
                  *(_QWORD *)(a1 + 72) = v24;
                  *(_DWORD *)(a1 + 48) = v15;
                  *(_QWORD *)(a1 + 56) = v22;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

CGDataProvider *RIPLayerCreateImage(uint64_t a1, CGColorSpace *a2, char a3)
{
  CGDataProvider *v4;
  int v6;
  UInt8 *v7;
  unsigned int *v8;
  unsigned int v9;
  CGDataProvider *provider_16598;
  CGDataProvider *v13;
  CGColorSpace *DeviceGray;
  unsigned int v15;
  int v16;
  CGBitmapInfo v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  UInt8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  CGColorSpace *v34;
  CGImageRef v35;
  unint64_t v36;
  CGDataProvider *v37;
  CGColorSpace *v38;
  CGBitmapInfo v39;
  CGImageRef v40;
  unsigned int bitsPerPixel;
  unsigned int bitsPerPixel_4;
  CGColorSpaceRef space;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v44 = xmmword_185000460;
  if (!a1)
    return 0;
  if (*(uint64_t (***)())a1 != RIPLayer_ripl_class)
    return 0;
  if (*(int *)(a1 + 20) < 1)
    return 0;
  v6 = *(_DWORD *)(a1 + 24);
  if (v6 < 1)
    return 0;
  v7 = *(UInt8 **)(a1 + 56);
  if (!v7)
    return 0;
  v8 = *(unsigned int **)(a1 + 32);
  if (!v8)
    return 0;
  v4 = 0;
  v9 = *v8;
  switch((*v8 >> 8) & 0xF)
  {
    case 0u:
      provider_16598 = create_provider_16598(v7, *(unsigned int *)(a1 + 48) * (unint64_t)v6, a3);
      if (!provider_16598)
        goto LABEL_23;
      v13 = provider_16598;
      v4 = mask_create(*(int *)(a1 + 20), *(int *)(a1 + 24), 8uLL, 8uLL, *(unsigned int *)(a1 + 48), provider_16598, (double *)&v44, 1, 4);
      CGDataProviderRelease(v13);
      goto LABEL_116;
    case 1u:
      if ((*v8 & 0xCC) != 4)
        goto LABEL_23;
      if (a2 && !*(_DWORD *)(*((_QWORD *)a2 + 3) + 24))
      {
        DeviceGray = 0;
      }
      else
      {
        DeviceGray = CGColorSpaceCreateDeviceGray();
        v9 = *v8;
      }
      v18 = *(_DWORD *)(a1 + 48);
      v15 = HIWORD(v9) & 0x3F;
      v19 = v9 >> 22;
      switch(v15)
      {
        case 8u:
          v32 = v9 >> 6;
          if (v32 == 2)
          {
            v17 = 5;
            if ((v9 & 0xC) == 8)
            {
              if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 56))
                v17 = 1;
              else
                v17 = 5;
            }
          }
          else
          {
            if (v32 != 1)
              goto LABEL_88;
            v17 = 6;
            if ((v9 & 0xC) == 8)
            {
              if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 56))
                v17 = 2;
              else
                v17 = 6;
            }
          }
          break;
        case 0x10u:
          if ((v9 & 0x30) == 0x20)
            v17 = ((v9 & 1) << 8) | 0x1000;
          else
            v17 = (v9 & 1) << 8;
          break;
        case 0x20u:
          if ((v9 & 0x30) == 0x20)
            v17 = 8448;
          else
            v17 = 256;
          break;
        default:
LABEL_88:
          v17 = 0;
          break;
      }
      if ((v9 & 0xC) == 4)
      {
        v23 = *(UInt8 **)(a1 + 72);
        if (v23)
        {
          v24 = *(_DWORD *)(a1 + 64);
LABEL_97:
          v29 = HIWORD(v9) & 0x3F;
          v31 = v9 >> 22;
          goto LABEL_98;
        }
      }
      else
      {
        v23 = 0;
      }
      v24 = 0;
      goto LABEL_97;
    case 3u:
      if (a2 && *(_DWORD *)(*((_QWORD *)a2 + 3) + 24) == 1)
      {
        DeviceGray = 0;
      }
      else
      {
        DeviceGray = CGColorSpaceCreateDeviceRGB();
        v9 = *v8;
      }
      v15 = HIWORD(v9) & 0x3F;
      v16 = v9 >> 6;
      if (v16 == 2)
      {
        v17 = 5;
        if ((v9 & 0xC) == 8)
        {
          if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 56))
            v17 = 1;
          else
            v17 = 5;
        }
      }
      else if (v16 == 1)
      {
        v17 = 6;
        if ((v9 & 0xC) == 8)
        {
          if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 56))
            v17 = 2;
          else
            v17 = 6;
        }
      }
      else
      {
        v17 = 0;
      }
      v18 = *(_DWORD *)(a1 + 48);
      v19 = v9 >> 22;
      if ((HIWORD(v9) & 0x3F) <= 0xFu)
      {
        if (v15 == 5)
        {
          if (v19 != 16)
            goto LABEL_67;
          v25 = v9 & 0x30;
          v26 = v17 | 0x1000;
        }
        else
        {
          if (v15 != 8 || v19 != 32)
            goto LABEL_67;
          v25 = v9 & 0x30;
          v26 = v17 | 0x2000;
        }
        v28 = v25 == 16;
        goto LABEL_65;
      }
      if (v15 == 16)
      {
        v17 = v17 & 0xFFFFFEFF | ((v9 & 1) << 8);
        v26 = v17 | 0x1000;
        v28 = (v9 & 0x30) == 32;
LABEL_65:
        if (v28)
          v17 = v26;
        goto LABEL_67;
      }
      if (v15 == 32)
      {
        if ((v9 & 0x30) == 0x20)
          v27 = 8448;
        else
          v27 = 256;
        v17 |= v27;
      }
LABEL_67:
      if ((v9 & 0xC) == 4)
      {
        v29 = 0;
        v23 = 0;
        v30 = *(_QWORD *)(a1 + 72);
        if (!v30 || v30 == *(_QWORD *)(a1 + 56))
        {
          v31 = 0;
          v24 = 0;
        }
        else
        {
          v24 = *(_DWORD *)(a1 + 64);
          v29 = (v15 + 7) & 0x78;
          v23 = *(UInt8 **)(a1 + 72);
          v31 = v29;
        }
      }
      else
      {
        v23 = 0;
        v29 = 0;
        v31 = 0;
        v24 = 0;
      }
LABEL_98:
      v4 = 0;
      v33 = *(int *)(a1 + 24);
      if (is_mul_ok(v33, v18))
      {
        bitsPerPixel = v31;
        bitsPerPixel_4 = v29;
        space = DeviceGray;
        v4 = create_provider_16598(*(UInt8 **)(a1 + 56), v33 * v18, a3);
        if (v4)
        {
          if (space)
            v34 = space;
          else
            v34 = a2;
          v35 = CGImageCreate(*(int *)(a1 + 20), *(int *)(a1 + 24), v15, v19, (int)v18, v34, v17, v4, 0, 0, kCGRenderingIntentDefault);
          CGDataProviderRelease(v4);
          if (v23 && (v36 = *(int *)(a1 + 24), is_mul_ok(v36, v24)))
          {
            v37 = create_provider_16598(v23, (int)v36 * (uint64_t)v24, a3);
            v38 = CGColorSpaceCreateDeviceGray();
            if (bitsPerPixel_4 <= 8)
              v39 = 0;
            else
              v39 = v17 & 0x3100;
            v40 = CGImageCreate(*(int *)(a1 + 20), *(int *)(a1 + 24), bitsPerPixel_4, bitsPerPixel, v24, v38, v39, v37, 0, 0, kCGRenderingIntentDefault);
            CGColorSpaceRelease(v38);
            CGDataProviderRelease(v37);
            v4 = CGImageCreateWithMaskAndMatte((uint64_t)v35, (uint64_t)v40, RIPLayerCreateImage_matte);
            if (v40)
              CFRelease(v40);
            if (v35)
              CFRelease(v35);
          }
          else
          {
            v4 = v35;
          }
        }
        DeviceGray = space;
      }
      if (DeviceGray)
        CGColorSpaceRelease(DeviceGray);
LABEL_116:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
      CGImageSetCachingFlags(v4, 1);
      break;
    case 4u:
      if ((*v8 & 0xCC) != 4)
      {
LABEL_23:
        v4 = 0;
        goto LABEL_116;
      }
      if (a2 && *(_DWORD *)(*((_QWORD *)a2 + 3) + 24) == 2)
      {
        DeviceGray = 0;
      }
      else
      {
        DeviceGray = CGColorSpaceCreateDeviceCMYK();
        v9 = *v8;
      }
      v18 = *(_DWORD *)(a1 + 48);
      v15 = HIWORD(v9) & 0x3F;
      v19 = v9 >> 22;
      v20 = (v9 & 0x30) == 32;
      if ((v9 & 0x30) == 0x20)
        v21 = ((v9 & 1) << 8) | 0x1000;
      else
        v21 = (v9 & 1) << 8;
      if (v20)
        v22 = 8448;
      else
        v22 = 256;
      if (v15 != 32)
        v22 = 0;
      if (v15 == 16)
        v17 = v21;
      else
        v17 = v22;
      v23 = *(UInt8 **)(a1 + 72);
      if (v23)
        v24 = *(_DWORD *)(a1 + 64);
      else
        v24 = 0;
      v29 = v15;
      v31 = v15;
      goto LABEL_98;
    default:
      goto LABEL_116;
  }
  return v4;
}

const __CFData *create_provider_16598(UInt8 *bytes, unint64_t length, char a3)
{
  const __CFData *v4;
  CGDataProviderRef v5;

  if ((a3 & 1) != 0)
    return CGDataProviderCreateWithCopyOfData(bytes, length);
  v4 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v5 = CGDataProviderCreateWithCFData(v4);
  if (v4)
    CFRelease(v4);
  return v5;
}

void RIPLayerSaveTGA(uint64_t a1, const char *a2)
{
  int v3;
  FILE *v4;
  FILE *v5;
  int v6;
  char *v7;
  uint64_t __ptr;
  uint64_t v9;
  __int16 v10;
  char *__filename;

  if (a1)
  {
    if (*(uint64_t (***)())a1 == RIPLayer_ripl_class && *(int *)(a1 + 20) >= 1 && *(int *)(a1 + 24) >= 1)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        if (**(_DWORD **)(a1 + 32))
        {
          __filename = 0;
          asprintf(&__filename, "%s-%d.tga", a2, RIPLayerSaveTGA_count);
          ++RIPLayerSaveTGA_count;
          __ptr = 196608;
          v9 = 0;
          v10 = 0;
          v3 = *(_DWORD *)(a1 + 24);
          WORD2(v9) = *(_DWORD *)(a1 + 20);
          HIWORD(v9) = v3;
          LOBYTE(v10) = 8;
          if (__filename)
          {
            v4 = fopen(__filename, "wb");
            if (v4)
            {
              v5 = v4;
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Writing layer contents to '%s'\n", __filename);
              fwrite(&__ptr, 0x12uLL, 1uLL, v5);
              if (*(int *)(a1 + 24) >= 1)
              {
                v6 = 0;
                v7 = *(char **)(a1 + 56);
                do
                {
                  fwrite(v7, *(int *)(a1 + 20), 1uLL, v5);
                  ++v6;
                  v7 += *(unsigned int *)(a1 + 48);
                }
                while (v6 < *(_DWORD *)(a1 + 24));
              }
              fclose(v5);
            }
            free(__filename);
          }
        }
      }
    }
  }
}

uint64_t CGDisplayListEntryGetType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryGetType", 34, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  return *(char *)(a1 + 8);
}

double CGDisplayListEntryGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryGetBoundingBox", 40, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  return *(double *)(a1 + 16);
}

uint64_t _CGDisplayListEntryIsHidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!a1)
    _CGHandleAssert("_CGDisplayListEntryIsHidden", 48, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entryRef != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  return (*(unsigned __int8 *)(a1 + 10) >> 6) & 1;
}

uint64_t _CGDisplayListEntrySetHidden(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char vars0;

  if (!result)
    _CGHandleAssert("_CGDisplayListEntrySetHidden", 57, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "entryRef != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  if (a2)
    v8 = 0x400000;
  else
    v8 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFBFFFFF | v8;
  return result;
}

uint64_t CGDisplayListEntryImageGetImage(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "imageEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryImage";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryImageGetImage", 70, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[10];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

__n128 CGDisplayListEntryImageGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "imageEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetCTM", 79, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryImageGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "imageEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetInterpolationQuality", 86, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryImageGetRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "imageEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryImage";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryImageGetRenderingIntent", 93, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[37];
}

uint64_t CGDisplayListEntryGlyphsGetFont(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "glyphsEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFont", 102, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[10];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

__n128 CGDisplayListEntryGlyphsGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "glyphsEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetCTM", 111, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

__n128 CGDisplayListEntryGlyphsGetFTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "glyphsEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFTM", 118, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 152);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 136);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 168);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

double CGDisplayListEntryGlyphsGetScale(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetScale", 125, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[23];
}

double CGDisplayListEntryGlyphsGetDilation(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetDilation", 132, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[24];
}

uint64_t CGDisplayListEntryGlyphsGetSmoothingBGColor(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "glyphsEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetSmoothingBGColor", 139, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[26];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryGlyphsGetTextDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetTextDrawingMode", 147, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[54];
}

uint64_t CGDisplayListEntryGlyphsGetFontRenderingStyle(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetFontRenderingStyle", 154, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[55];
}

uint64_t CGDisplayListEntryGlyphsGetShouldDrawBitmapRuns(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetShouldDrawBitmapRuns", 161, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[224];
}

uint64_t CGDisplayListEntryGlyphsGetCount(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "glyphsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGlyphsGetCount", 168, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[31];
}

CFDataRef CGDisplayListEntryGlyphsCopyGlyphs(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  const UInt8 *v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_7;
  }
  if (!v8)
  {
    v11 = "glyphsEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_7:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyGlyphs", 175, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = (const UInt8 *)*((_QWORD *)v8 + 29);
  if (v9)
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 2 * *((_QWORD *)v8 + 31));
  else
    return 0;
}

CFDataRef CGDisplayListEntryGlyphsCopyPositions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  const UInt8 *v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_7;
  }
  if (!v8)
  {
    v11 = "glyphsEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_7:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyPositions", 186, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = (const UInt8 *)*((_QWORD *)v8 + 30);
  if (v9)
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 16 * *((_QWORD *)v8 + 31));
  else
    return 0;
}

CFStringRef CGDisplayListEntryGlyphsCopyCharacters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  CFStringRef v13;
  uint64_t v15;
  UniChar *v16;
  UniChar *v17;
  UniChar *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  _QWORD *v21;
  unsigned __int16 *v22;
  uint64_t UnicharsForGlyph;
  uint64_t (*v24)(_QWORD, _QWORD, void *);
  uint64_t v25;
  UniChar *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  UniChar *v32;
  uint64_t v33;
  uint64_t v34;
  UniChar *v35;
  UniChar *v36;
  uint64_t v37;
  char *v38;
  UniChar *v39;
  UniChar *v40;
  UniChar *v41;
  UniChar v42;
  UniChar *v43;
  UniChar *v44;
  uint64_t v45;
  UniChar *v46;
  UniChar v47;
  uint64_t v48;
  size_t v49;
  UniChar *v50;
  const char *v51;
  const char *v52;
  _QWORD *Property;
  UniChar *v54;
  unsigned __int16 *v55;
  _QWORD *v56;
  __int16 v57;
  void *__p;
  void *v59;

  if (!a1)
  {
    v51 = "entry != nullptr";
    v52 = "entry argument is NULL";
    goto LABEL_72;
  }
  if (!v8)
  {
LABEL_75:
    v51 = "glyphsEntry != nullptr";
    v52 = "entry is not of typeDisplayListEntryGlyphs";
LABEL_72:
    _CGHandleAssert("CGDisplayListEntryGlyphsCopyCharacters", 197, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v51, v52, a6, a7, a8, (char)Property);
  }
  v9 = v8;
  if (!v8[31])
    return 0;
  if (!v8[29])
    return 0;
  v10 = v8[10];
  if (!v10)
    return 0;
  v11 = *(_QWORD **)(v10 + 16);
  if (!v11)
    return 0;
  v12 = atomic_load(v11 + 11);
  if (v12)
    Property = CGPropertiesGetProperty(v12, CFSTR("com.apple.CoreGraphics.CGPDFFontToUnicodeCMap"));
  else
    Property = 0;
  get_unimap(v11);
  std::vector<unsigned short>::vector(&__p, 256);
  v15 = v9[31];
  if (v15 < 1)
  {
    v16 = 0;
    goto LABEL_66;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (unsigned __int16 *)v9[29];
  v20 = &v19[v15];
  v21 = Property;
  v55 = v20;
  v56 = v11;
  do
  {
    if (!v21)
    {
      if (v59 == __p)
        goto LABEL_74;
      UnicharsForGlyph = CGFontGetUnicharsForGlyph((uint64_t)v11, *v19, __p);
LABEL_24:
      v25 = UnicharsForGlyph;
      if (UnicharsForGlyph <= 0)
        goto LABEL_62;
      v26 = (UniChar *)__p;
      v27 = (char *)v17 - (char *)v16;
      v28 = (char *)v16 + (((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFFELL);
      if (UnicharsForGlyph > v18 - v17)
      {
        v29 = v27 >> 1;
        v30 = (v27 >> 1) + UnicharsForGlyph;
        if (v30 < 0)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        if ((char *)v18 - (char *)v16 > (unint64_t)v30)
          v30 = (char *)v18 - (char *)v16;
        if ((unint64_t)((char *)v18 - (char *)v16) >= 0x7FFFFFFFFFFFFFFELL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (UniChar *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v31);
          v34 = v33;
          v35 = v16;
        }
        else
        {
          v35 = v16;
          v32 = 0;
          v34 = 0;
        }
        v16 = &v32[v29];
        v44 = &v16[v25];
        v45 = 2 * v25;
        v46 = v16;
        do
        {
          v47 = *v26++;
          *v46++ = v47;
          v45 -= 2;
        }
        while (v45);
        if (v17 != v35)
        {
          v48 = v29;
          do
          {
            v32[v48 - 1] = v35[v48 - 1];
            --v48;
          }
          while (v48 * 2);
          v16 = v32;
        }
        v49 = (char *)v17 - v28;
        if (v49)
        {
          v50 = v44;
          memmove(v44, v28, v49);
          v44 = v50;
        }
        v18 = &v32[v34];
        v17 = (UniChar *)((char *)v44 + v49);
        if (v35)
          operator delete(v35);
        goto LABEL_60;
      }
      v54 = v16;
      v36 = (UniChar *)((char *)__p + 2 * UnicharsForGlyph);
      v37 = ((char *)v17 - v28) >> 1;
      if (v37 >= UnicharsForGlyph)
      {
        v39 = v17;
      }
      else
      {
        v38 = (char *)__p + 2 * v37;
        memmove(v17, v38, (char *)v36 - v38);
        v39 = (UniChar *)((char *)v17 + (char *)v36 - v38);
        if ((char *)v17 - v28 < 1)
        {
          v17 = (UniChar *)((char *)v17 + (char *)v36 - v38);
LABEL_60:
          v11 = v56;
          v21 = Property;
LABEL_61:
          v20 = v55;
          goto LABEL_62;
        }
        v36 = (UniChar *)v38;
        v21 = Property;
      }
      v40 = &v39[-v25];
      v41 = v39;
      while (v40 < v17)
      {
        v42 = *v40++;
        *v41++ = v42;
      }
      v43 = (UniChar *)&v28[2 * v25];
      if (v39 != v43)
        memmove(&v39[-(v39 - v43)], v28, (char *)v39 - (char *)v43);
      if (v36 != v26)
        memmove(v28, v26, (char *)v36 - (char *)v26);
      v17 = v41;
      v16 = v54;
      v11 = v56;
      goto LABEL_61;
    }
    v57 = 0;
    if (!CGFontGetCIDsForGlyphs(v11, v19, 1, &v57))
    {
      v22 = v19;
      if (v59 != __p)
        goto LABEL_21;
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (v59 == __p)
      goto LABEL_74;
    v22 = (unsigned __int16 *)&v57;
LABEL_21:
    if (cmap_vtable)
    {
      v24 = *(uint64_t (**)(_QWORD, _QWORD, void *))(cmap_vtable + 64);
      if (v24)
      {
        UnicharsForGlyph = v24(v21[2], *v22, __p);
        goto LABEL_24;
      }
    }
LABEL_62:
    ++v19;
  }
  while (v19 < v20);
  if (v17 != v16)
  {
    v13 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v17 - v16);
    goto LABEL_67;
  }
LABEL_66:
  v13 = 0;
LABEL_67:
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v16)
    operator delete(v16);
  return v13;
}

void sub_184D67290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t CGDisplayListEntryPathGetPath(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "pathEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetPath", 241, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[11];
}

__n128 CGDisplayListEntryPathGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, __n128 *a5@<X8>)
{
  __n128 *v6;
  __n128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "pathEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetCTM", 247, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = v6[7];
  *a5 = v6[6];
  a5[1] = v7;
  result = v6[8];
  a5[2] = result;
  return result;
}

uint64_t CGDisplayListEntryPathGetDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "pathEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryPath";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryPathGetDrawingMode", 253, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[20];
}

__n128 CGDisplayListEntryRectsGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "rectsEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryRects";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryRectsGetCTM", 262, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryRectsGetDrawingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "rectsEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryRects";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryRectsGetDrawingMode", 269, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[20];
}

CFDataRef CGDisplayListEntryRectsCopyRects(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  const UInt8 *v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_7;
  }
  if (!v8)
  {
    v11 = "rectsEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryRects";
LABEL_7:
    _CGHandleAssert("CGDisplayListEntryRectsCopyRects", 276, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = (const UInt8 *)*((_QWORD *)v8 + 17);
  if (v9)
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 32 * *((_QWORD *)v8 + 18));
  else
    return 0;
}

CFDataRef CGDisplayListEntryLinesCopyPoints(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  const UInt8 *v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_7;
  }
  if (!v8)
  {
    v11 = "linesEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryLines";
LABEL_7:
    _CGHandleAssert("CGDisplayListEntryLinesCopyPoints", 289, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = (const UInt8 *)*((_QWORD *)v8 + 16);
  if (v9)
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 16 * *((_QWORD *)v8 + 17));
  else
    return 0;
}

__n128 CGDisplayListEntryLinesGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, __n128 *a5@<X8>)
{
  __n128 *v6;
  __n128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "linesEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryLines";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryLinesGetCTM", 300, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = v6[6];
  *a5 = v6[5];
  a5[1] = v7;
  result = v6[7];
  a5[2] = result;
  return result;
}

uint64_t CGDisplayListEntryShadingGetShading(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "shadingEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryShading";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryShadingGetShading", 309, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[10];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

__n128 CGDisplayListEntryShadingGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "shadingEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetCTM", 318, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryShadingGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "shadingEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetInterpolationQuality", 325, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryShadingGetRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "shadingEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryShading";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryShadingGetRenderingIntent", 332, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

uint64_t CGDisplayListEntryGradientGetGradient(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "gradientEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGradient";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGradientGetGradient", 341, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[10];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

__n128 CGDisplayListEntryGradientGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "gradientEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryGradient";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGradientGetCTM", 350, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryGradientGetGradientType(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unsigned int v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "gradientEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryGradient";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryGradientGetGradientType", 357, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[34];
  if (v9 - 1 >= 3)
    return 0;
  else
    return v9;
}

uint64_t CGDisplayListEntryGradientGetDrawingOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryGradientGetDrawingOptions", 379, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

double CGDisplayListEntryGradientGetStartPoint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartPoint", 387, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 1)
    _CGHandleAssert("CGDisplayListEntryGradientGetStartPoint", 388, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeLinear", "gradient entry is not of type CGDisplayListEntryGradientLinear", a6, a7, a8, vars0);
  return v8[18];
}

double CGDisplayListEntryGradientGetEndPoint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndPoint", 395, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 1)
    _CGHandleAssert("CGDisplayListEntryGradientGetEndPoint", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeLinear", "gradient entry is not of type CGDisplayListEntryGradientLinear", a6, a7, a8, vars0);
  return v8[20];
}

double CGDisplayListEntryGradientGetStartCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartCenter", 404, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2)
    _CGHandleAssert("CGDisplayListEntryGradientGetStartCenter", 405, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  return v8[22];
}

double CGDisplayListEntryGradientGetEndCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndCenter", 412, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2)
    _CGHandleAssert("CGDisplayListEntryGradientGetEndCenter", 413, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  return v8[24];
}

double CGDisplayListEntryGradientGetStartRadius(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetStartRadius", 420, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2)
    _CGHandleAssert("CGDisplayListEntryGradientGetStartRadius", 421, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  return v8[26];
}

double CGDisplayListEntryGradientGetEndRadius(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetEndRadius", 428, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 2)
    _CGHandleAssert("CGDisplayListEntryGradientGetEndRadius", 429, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeRadial", "gradient entry is not of type CGDisplayListEntryGradientRadial", a6, a7, a8, vars0);
  return v8[27];
}

double CGDisplayListEntryGradientGetCenter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetCenter", 437, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 3)
    _CGHandleAssert("CGDisplayListEntryGradientGetCenter", 438, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeConic", "gradient entry is not of type CGDisplayListEntryGradientConic", a6, a7, a8, vars0);
  return v8[28];
}

double CGDisplayListEntryGradientGetAngle(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_6;
  }
  if (!v8)
  {
    v10 = "gradientEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryGradient";
LABEL_6:
    _CGHandleAssert("CGDisplayListEntryGradientGetAngle", 445, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  if (*((_DWORD *)v8 + 34) != 3)
    _CGHandleAssert("CGDisplayListEntryGradientGetAngle", 446, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", "gradientEntry->getGradientType() == CG::DisplayListEntryGradient::DLGradientTypeConic", "gradient entry is not of type CGDisplayListEntryGradientConic", a6, a7, a8, vars0);
  return v8[30];
}

uint64_t CGDisplayListEntryDisplayListGetDisplayList(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "displayListEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetDisplayList", 455, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[10];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

__n128 CGDisplayListEntryDisplayListGetCTM@<Q0>(const void *a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  char *v6;
  __int128 v7;
  __n128 result;
  const char *v9;
  const char *v10;
  char v11;

  if (!a1)
  {
    v9 = "entry != nullptr";
    v10 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v6)
  {
    v9 = "displayListEntry != nullptr";
    v10 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetCTM", 464, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v9, v10, a2, a3, a4, v11);
  }
  v7 = *(_OWORD *)(v6 + 104);
  *(_OWORD *)a5 = *(_OWORD *)(v6 + 88);
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 120);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

uint64_t CGDisplayListEntryDisplayListGetInterpolationQuality(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "displayListEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetInterpolationQuality", 471, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[34];
}

uint64_t CGDisplayListEntryDisplayListGetImageRenderingIntent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  const char *v10;
  const char *v11;
  char vars0;

  if (!a1)
  {
    v10 = "entry != nullptr";
    v11 = "entry argument is NULL";
    goto LABEL_5;
  }
  if (!v8)
  {
    v10 = "displayListEntry != nullptr";
    v11 = "entry is not of typeDisplayListEntryDisplayList";
LABEL_5:
    _CGHandleAssert("CGDisplayListEntryDisplayListGetImageRenderingIntent", 478, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v10, v11, a6, a7, a8, vars0);
  }
  return v8[35];
}

uint64_t CGDisplayListEntryActionGetParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  const char *v11;
  const char *v12;
  char vars0;

  if (!a1)
  {
    v11 = "entry != nullptr";
    v12 = "entry argument is NULL";
    goto LABEL_8;
  }
  if (!v8)
  {
    v11 = "actionEntry != nullptr";
    v12 = "entry is not of typeDisplayListEntryAction";
LABEL_8:
    _CGHandleAssert("CGDisplayListEntryActionGetParameters", 487, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntry.cpp", v11, v12, a6, a7, a8, vars0);
  }
  v9 = v8[11];
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

CGPDFContentStreamRef CGPDFContentStreamCreateWithPage(CGPDFPageRef page)
{
  return (CGPDFContentStreamRef)CGPDFContentStreamCreate(*((_QWORD *)page + 5));
}

void CGPDFContentStreamRelease(CGPDFContentStreamRef cs)
{
  if (cs)
    CFRelease(cs);
}

CGPDFContentStreamRef CGPDFContentStreamRetain(CGPDFContentStreamRef cs)
{
  if (cs)
    CFRetain(cs);
  return cs;
}

CFArrayRef CGPDFContentStreamGetStreams(CFArrayRef cs)
{
  if (cs)
    return (CFArrayRef)*((_QWORD *)cs + 3);
  return cs;
}

CGPDFObjectRef CGPDFContentStreamGetResource(CGPDFContentStreamRef cs, const char *category, const char *name)
{
  CGPDFContentStreamRef v4;
  CGPDFObject *resource;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;

  if (!name)
    return 0;
  v4 = cs;
  if (!*name || cs == 0)
    return 0;
  do
  {
    v9 = (os_unfair_lock_s *)*((_QWORD *)v4 + 4);
    v10 = v9 + 20;
    os_unfair_lock_lock(v9 + 20);
    resource = get_resource((uint64_t)v9, (char *)category, name);
    os_unfair_lock_unlock(v10);
    if (resource)
      break;
    if (!*name)
      break;
    v4 = (CGPDFContentStreamRef)*((_QWORD *)v4 + 5);
  }
  while (v4);
  return resource;
}

CGColorSpace *CGPDFContentStreamGetColorSpace(CGColorSpace *result, const char *a2)
{
  CGColorSpace *v3;

  if (result)
  {
    v3 = result;
    while (1)
    {
      result = CGPDFResourcesGetColorSpace(*((_QWORD *)v3 + 4), a2);
      if (result)
        break;
      v3 = (CGColorSpace *)*((_QWORD *)v3 + 5);
      if (!v3)
        return 0;
    }
  }
  return result;
}

const void *CGPDFContentStreamGetFont(uint64_t a1, const char *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  const __CFAllocator *v5;
  uint64_t v6;
  __CFString *v8;
  const __CFDictionary *v9;
  const void *Value;
  CGPDFObjectRef resource;
  void *v12;
  void *v13;

  if (!a1)
    return 0;
  v3 = a1;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  while (1)
  {
    v6 = *(_QWORD *)(v3 + 32);
    if (v6 && a2 != 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
      v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
      v9 = *(const __CFDictionary **)(v6 + 32);
      if (!v8 || !v9 || (Value = CFDictionaryGetValue(v9, v8)) == 0)
      {
        resource = get_resource(v6, "Font", a2);
        if (resource
          && *((_DWORD *)resource + 2) == 8
          && (v12 = (void *)CGPDFFontCreate(*((CGPDFDictionary **)resource + 4))) != 0)
        {
          v13 = table_set_value((__CFDictionary **)(v6 + 32), v8, v12);
          Value = v13;
          if (v13)
            CFRelease(v13);
        }
        else
        {
          Value = 0;
        }
      }
      CFRelease(v8);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      if (Value)
        break;
    }
    v3 = *(_QWORD *)(v3 + 40);
    if (!v3)
      return 0;
  }
  return Value;
}

uint64_t CGPDFContentStreamGetXObjectStream(uint64_t result, const char *a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (result)
  {
    v3 = result;
    while (1)
    {
      v4 = CGPDFResourcesCopyXObject(*(_QWORD *)(v3 + 32), a2);
      if (v4)
        break;
      v3 = *(_QWORD *)(v3 + 40);
      if (!v3)
        return 0;
    }
    return v4[3];
  }
  return result;
}

_QWORD *CGPDFContentStreamGetPattern(_QWORD *result, const char *a2)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    while (1)
    {
      result = CGPDFResourcesGetPattern(v3[4], a2);
      if (result)
        break;
      v3 = (_QWORD *)v3[5];
      if (!v3)
        return 0;
    }
  }
  return result;
}

uint64_t CGPDFContentStreamGetPatternStream(uint64_t result, const char *a2)
{
  uint64_t v3;
  _QWORD *Pattern;

  if (result)
  {
    v3 = result;
    while (1)
    {
      Pattern = CGPDFResourcesGetPattern(*(_QWORD *)(v3 + 32), a2);
      if (Pattern)
        break;
      v3 = *(_QWORD *)(v3 + 40);
      if (!v3)
        return 0;
    }
    if (*((_DWORD *)Pattern + 4) == 1)
      return Pattern[3];
    return 0;
  }
  return result;
}

_QWORD *CGPDFContentStreamGetShading(_QWORD *result, const char *a2)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    while (1)
    {
      result = CGPDFResourcesGetShading(v3[4], a2);
      if (result)
        break;
      v3 = (_QWORD *)v3[5];
      if (!v3)
        return 0;
    }
  }
  return result;
}

uint64_t CGPDFContentStreamGetShadingDictionary(uint64_t result, const char *a2)
{
  uint64_t v3;
  _QWORD *Shading;

  if (result)
  {
    v3 = result;
    while (1)
    {
      Shading = CGPDFResourcesGetShading(*(_QWORD *)(v3 + 32), a2);
      if (Shading)
        break;
      v3 = *(_QWORD *)(v3 + 40);
      if (!v3)
        return 0;
    }
    return Shading[3];
  }
  return result;
}

void *CGPDFContentStreamGetPropertyList(uint64_t a1, const char *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  const __CFAllocator *v5;
  uint64_t v6;
  BOOL v7;
  __CFString *v8;
  const __CFDictionary *v9;
  void *Value;
  CGPDFObjectRef resource;

  if (a1)
  {
    v3 = a1;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v6 = *(_QWORD *)(v3 + 32);
      if (v6)
        v7 = a2 == 0;
      else
        v7 = 1;
      if (!v7)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
        v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
        v9 = *(const __CFDictionary **)(v6 + 72);
        if (v8)
        {
          if (v9)
          {
            Value = (void *)CFDictionaryGetValue(v9, v8);
            if (Value)
              goto LABEL_13;
          }
        }
        resource = get_resource(v6, "Properties", a2);
        if (resource && *((_DWORD *)resource + 2) == 8)
        {
          Value = table_set_value((__CFDictionary **)(v6 + 72), v8, *((void **)resource + 4));
LABEL_13:
          CFRelease(v8);
          os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
          if (Value)
            return Value;
          goto LABEL_16;
        }
        CFRelease(v8);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      }
LABEL_16:
      v3 = *(_QWORD *)(v3 + 40);
    }
    while (v3);
  }
  return 0;
}

CGColorRef CGPDFContentStreamCreateResolvedColor(uint64_t a1, uint64_t cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorRef v8;
  CGColorSpaceRef ColorSpace;
  uint64_t v11;
  CGColorSpace *ResolvedColorSpace;
  const CGFloat *Components;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;

  v8 = (CGColorRef)cf;
  if (a1)
  {
    if (cf)
    {
      if (cf < 0)
        ColorSpace = CGTaggedColorGetColorSpace(cf, cf, a3, a4, a5, a6, a7, a8);
      else
        ColorSpace = *(CGColorSpaceRef *)(cf + 24);
    }
    else
    {
      ColorSpace = 0;
    }
    v11 = *(_QWORD *)(a1 + 64);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __CGColorSpaceCreateResolved_block_invoke;
    v15[3] = &__block_descriptor_tmp_40_20979;
    v16 = *(_OWORD *)(a1 + 48);
    v17 = v11;
    ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(ColorSpace, (uint64_t)v15);
    if (ColorSpace == ResolvedColorSpace)
    {
      if (v8)
        CFRetain(v8);
    }
    else
    {
      Components = CGColorGetComponents(v8);
      v8 = CGColorCreate(ResolvedColorSpace, Components);
    }
    CGColorSpaceRelease(ResolvedColorSpace);
  }
  else if (cf)
  {
    CFRetain((CFTypeRef)cf);
  }
  return v8;
}

void PBPageLayoutPkg::PBPageLayout::~PBPageLayout(PBPageLayoutPkg::PBPageLayout *this)
{
  PBPageLayoutPkg::PBPageLayout::~PBPageLayout(this);
  JUMPOUT(0x186DC23C4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;

  *(_QWORD *)this = &off_1E1628DD0;
  v2 = (_QWORD *)*((_QWORD *)this + 35);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 36);
    v4 = (void *)*((_QWORD *)this + 35);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v2;
    operator delete(v4);
  }
  v25 = (void **)((char *)this + 256);
  std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:se180100](&v25);
  v25 = (void **)((char *)this + 232);
  std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:se180100](&v25);
  v7 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:se180100](v7);
  v8 = (_QWORD *)*((_QWORD *)this + 25);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 26);
    v10 = (void *)*((_QWORD *)this + 25);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v8;
    operator delete(v10);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 22);
  if (v13)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 23);
    v15 = (void *)*((_QWORD *)this + 22);
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v13;
    operator delete(v15);
  }
  v18 = (void *)*((_QWORD *)this + 19);
  if (v18)
  {
    *((_QWORD *)this + 20) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 16);
  if (v19)
  {
    *((_QWORD *)this + 17) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 13);
  if (v20)
  {
    *((_QWORD *)this + 14) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 10);
  if (v21)
  {
    *((_QWORD *)this + 11) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 7);
  if (v22)
  {
    *((_QWORD *)this + 8) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_QWORD *)this + 5) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 1);
  if (v24)
  {
    *((_QWORD *)this + 2) = v24;
    operator delete(v24);
  }
  PB::Base::~Base(this);
}

void PBPageLayoutPkg::PBPageLayout::readFrom(PBPageLayoutPkg::PBPageLayout *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t **v7;
  uint64_t **v8;
  int64x2_t *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  char *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  int64x2_t *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  char *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v173;
  unint64_t v174;
  char v175;
  char v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v194;
  unint64_t v195;
  char v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  _DWORD *v205;
  unint64_t v206;
  char *v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  _DWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  _QWORD *v229;
  unint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  unint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  int64x2_t v279;
  uint64_t *v280;
  unint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  int64x2_t v285;
  uint64_t *v286;
  unint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  int64x2_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  _DWORD *v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  char v303;
  unsigned int v304;
  unint64_t v306;
  char v307;
  uint64_t v308;
  unint64_t v309;
  char v310;
  _DWORD *v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  char v316;
  unsigned int v317;
  unint64_t v319;
  char v320;
  unint64_t v321;
  char v322;
  _DWORD *v323;
  int v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  char v328;
  unsigned int v329;
  unint64_t v331;
  char v332;
  unint64_t v333;
  char v334;
  _DWORD *v335;
  int v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  char v340;
  unsigned int v341;
  unint64_t v343;
  char v344;
  unint64_t v345;
  char v346;
  _DWORD *v347;
  int v348;
  unint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  char v355;
  unsigned int v356;
  unint64_t v358;
  char v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  _QWORD *v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  char v368;
  unsigned int v369;
  unint64_t v371;
  char v372;
  unint64_t v373;
  char v374;
  uint64_t v376;
  int64x2_t v377;
  unint64_t v378;
  char *v379;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  if (v2 >= v3 || *((_BYTE *)a2 + 24) != 0)
    return;
  v7 = (uint64_t **)((char *)this + 232);
  v8 = (uint64_t **)((char *)this + 256);
  v9 = (int64x2_t *)((char *)this + 280);
  v10 = (char *)this + 192;
  v11 = (char *)this + 216;
  v12 = (char *)this + 296;
  while (2)
  {
    v13 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v19 = 0;
      v20 = 0;
      v16 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          *((_BYTE *)a2 + 24) = 1;
          return;
        }
        v21 = v2 + 1;
        v22 = *(_BYTE *)(v13 + v2);
        *((_QWORD *)a2 + 1) = v21;
        v16 |= (unint64_t)(v22 & 0x7F) << v19;
        if ((v22 & 0x80) == 0)
          goto LABEL_22;
        v19 += 7;
        v2 = v21;
        v57 = v20++ > 8;
      }
      while (!v57);
LABEL_20:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return;
      goto LABEL_609;
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v18 = *(_BYTE *)(v13 + v2);
      v16 |= (unint64_t)(v18 & 0x7F) << v14;
      if ((v18 & 0x80) == 0)
        break;
      v14 += 7;
      v2 = v17;
      v57 = v15++ > 8;
      if (v57)
        goto LABEL_20;
    }
LABEL_22:
    v23 = v16 & 7;
    if (v23 == 4)
      return;
    switch((v16 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 308) |= 1u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v25 = v24 + 1;
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
          *((_QWORD *)a2 + 1) = v25;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 304) = v27;
        goto LABEL_609;
      case 2u:
        v28 = (_QWORD *)operator new();
        v28[1] = 0;
        v28[2] = 0;
        *v28 = 0;
        v29 = *((_QWORD *)this + 28);
        *((_QWORD *)this + 28) = v28;
        if (v29)
          std::default_delete<std::string>::operator()[abi:se180100](v29);
        PB::Reader::read();
        goto LABEL_609;
      case 3u:
        v30 = v8;
        v31 = v7;
        v32 = v11;
        v33 = v10;
        v34 = operator new();
        v35 = v34;
        *(_DWORD *)(v34 + 36) = 0;
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        *(_QWORD *)v34 = &off_1E1628D98;
        v37 = (uint64_t *)*((_QWORD *)this + 36);
        v36 = *((_QWORD *)this + 37);
        if ((unint64_t)v37 >= v36)
        {
          v198 = ((uint64_t)v37 - v9->i64[0]) >> 3;
          if ((unint64_t)(v198 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v199 = v36 - v9->i64[0];
          v200 = v199 >> 2;
          if (v199 >> 2 <= (unint64_t)(v198 + 1))
            v200 = v198 + 1;
          if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
            v201 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v201 = v200;
          v379 = v12;
          if (v201)
            v201 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v201);
          else
            v202 = 0;
          v274 = (uint64_t *)(v201 + 8 * v198);
          v275 = v201 + 8 * v202;
          v378 = v275;
          *v274 = v35;
          v38 = v274 + 1;
          v377.i64[1] = (uint64_t)(v274 + 1);
          v277 = (_QWORD *)*((_QWORD *)this + 35);
          v276 = (_QWORD *)*((_QWORD *)this + 36);
          if (v276 == v277)
          {
            v279 = vdupq_n_s64((unint64_t)v276);
          }
          else
          {
            do
            {
              v278 = *--v276;
              *v276 = 0;
              *--v274 = v278;
            }
            while (v276 != v277);
            v279 = *v9;
            v38 = (_QWORD *)v377.i64[1];
            v275 = v378;
          }
          *((_QWORD *)this + 35) = v274;
          *((_QWORD *)this + 36) = v38;
          v377 = v279;
          v292 = *((_QWORD *)this + 37);
          *((_QWORD *)this + 37) = v275;
          v378 = v292;
          v376 = v279.i64[0];
          std::__split_buffer<std::unique_ptr<PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair>>::~__split_buffer((uint64_t)&v376);
        }
        else
        {
          *v37 = v34;
          v38 = v37 + 1;
        }
        *((_QWORD *)this + 36) = v38;
        if (*((_QWORD **)this + 35) == v38)
          goto LABEL_623;
        v293 = *(v38 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v293 + 16))(v293, a2) & 1) == 0)
        {
          return;
        }
        PB::Reader::recallMark();
        v10 = v33;
        v11 = v32;
        goto LABEL_448;
      case 4u:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 20);
            while (1)
            {
              v40 = *((_QWORD *)this + 21);
              if ((unint64_t)v39 >= v40)
              {
                v41 = (char *)*((_QWORD *)this + 19);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_617;
                v44 = v40 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
                v46 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v45)
                  v46 = v43;
                if (v46)
                {
                  v46 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v46);
                  v41 = (char *)*((_QWORD *)this + 19);
                  v39 = (char *)*((_QWORD *)this + 20);
                }
                else
                {
                  v47 = 0;
                }
                v48 = (_DWORD *)(v46 + 4 * v42);
                *v48 = 0;
                v49 = (char *)(v48 + 1);
                while (v39 != v41)
                {
                  v50 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v48 = v50;
                }
                *((_QWORD *)this + 19) = v48;
                *((_QWORD *)this + 20) = v49;
                *((_QWORD *)this + 21) = v46 + 4 * v47;
                if (v41)
                  operator delete(v41);
                v39 = v49;
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v39 += 4;
              }
              *((_QWORD *)this + 20) = v39;
              if (*((char **)this + 19) == v39)
                goto LABEL_623;
              v52 = *((_QWORD *)a2 + 1);
              v51 = *((_QWORD *)a2 + 2);
              v53 = *(_QWORD *)a2;
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v57 = v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v51;
              if (v57)
              {
                if (v51 <= v52)
                  v58 = *((_QWORD *)a2 + 1);
                else
                  v58 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v58 == v52)
                    goto LABEL_329;
                  v59 = v52 + 1;
                  v60 = *(_BYTE *)(v53 + v52);
                  *((_QWORD *)a2 + 1) = v59;
                  v56 |= (unint64_t)(v60 & 0x7F) << v54;
                  if ((v60 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v52 = v59;
                  v57 = v55++ > 8;
                  if (v57)
                  {
LABEL_69:
                    LODWORD(v56) = 0;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v56) = 0;
              }
              else
              {
                while (1)
                {
                  v59 = v52 + 1;
                  *((_QWORD *)a2 + 1) = v52 + 1;
                  v61 = *(_BYTE *)(v53 + v52);
                  v56 |= (unint64_t)(v61 & 0x7F) << v54;
                  if ((v61 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v52 = v59;
                  v57 = v55++ > 8;
                  if (v57)
                    goto LABEL_69;
                }
              }
LABEL_72:
              *((_DWORD *)v39 - 1) = v56;
              if (v59 >= v51 || *((_BYTE *)a2 + 24))
                goto LABEL_450;
            }
          }
          goto LABEL_450;
        }
        v204 = (char *)*((_QWORD *)this + 20);
        v203 = *((_QWORD *)this + 21);
        if ((unint64_t)v204 >= v203)
        {
          v232 = (char *)*((_QWORD *)this + 19);
          v233 = (v204 - v232) >> 2;
          v234 = v233 + 1;
          if ((unint64_t)(v233 + 1) >> 62)
            goto LABEL_617;
          v235 = v203 - (_QWORD)v232;
          if (v235 >> 1 > v234)
            v234 = v235 >> 1;
          v45 = (unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL;
          v236 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45)
            v236 = v234;
          if (v236)
          {
            v236 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v236);
            v232 = (char *)*((_QWORD *)this + 19);
            v204 = (char *)*((_QWORD *)this + 20);
          }
          else
          {
            v237 = 0;
          }
          v298 = (_DWORD *)(v236 + 4 * v233);
          *v298 = 0;
          v205 = v298 + 1;
          while (v204 != v232)
          {
            v299 = *((_DWORD *)v204 - 1);
            v204 -= 4;
            *--v298 = v299;
          }
          *((_QWORD *)this + 19) = v298;
          *((_QWORD *)this + 20) = v205;
          *((_QWORD *)this + 21) = v236 + 4 * v237;
          if (v232)
            operator delete(v232);
        }
        else
        {
          *(_DWORD *)v204 = 0;
          v205 = v204 + 4;
        }
        *((_QWORD *)this + 20) = v205;
        if (*((_DWORD **)this + 19) == v205)
          goto LABEL_623;
        v300 = *((_QWORD *)a2 + 1);
        v301 = *((_QWORD *)a2 + 2);
        v302 = *(_QWORD *)a2;
        v303 = 0;
        v304 = 0;
        if (v300 <= 0xFFFFFFFFFFFFFFF5 && v300 + 10 <= v301)
        {
          v308 = 0;
          while (1)
          {
            v309 = v300 + 1;
            *((_QWORD *)a2 + 1) = v300 + 1;
            v310 = *(_BYTE *)(v302 + v300);
            v308 |= (unint64_t)(v310 & 0x7F) << v303;
            if ((v310 & 0x80) == 0)
              goto LABEL_547;
            v303 += 7;
            v300 = v309;
            v57 = v304++ > 8;
            if (v57)
              goto LABEL_546;
          }
        }
        v308 = 0;
        if (v301 <= v300)
          v301 = *((_QWORD *)a2 + 1);
        while (v301 != v300)
        {
          v306 = v300 + 1;
          v307 = *(_BYTE *)(v302 + v300);
          *((_QWORD *)a2 + 1) = v306;
          v308 |= (unint64_t)(v307 & 0x7F) << v303;
          if ((v307 & 0x80) == 0)
            goto LABEL_540;
          v303 += 7;
          v300 = v306;
          v57 = v304++ > 8;
          if (v57)
            goto LABEL_546;
        }
        goto LABEL_539;
      case 5u:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 17);
            while (1)
            {
              v62 = *((_QWORD *)this + 18);
              if ((unint64_t)v39 >= v62)
              {
                v63 = (char *)*((_QWORD *)this + 16);
                v64 = (v39 - v63) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  goto LABEL_617;
                v66 = v62 - (_QWORD)v63;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                v45 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL;
                v67 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v45)
                  v67 = v65;
                if (v67)
                {
                  v67 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v67);
                  v63 = (char *)*((_QWORD *)this + 16);
                  v39 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v68 = 0;
                }
                v69 = (_DWORD *)(v67 + 4 * v64);
                *v69 = 0;
                v70 = (char *)(v69 + 1);
                while (v39 != v63)
                {
                  v71 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v69 = v71;
                }
                *((_QWORD *)this + 16) = v69;
                *((_QWORD *)this + 17) = v70;
                *((_QWORD *)this + 18) = v67 + 4 * v68;
                if (v63)
                  operator delete(v63);
                v39 = v70;
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v39 += 4;
              }
              *((_QWORD *)this + 17) = v39;
              if (*((char **)this + 16) == v39)
                goto LABEL_623;
              v73 = *((_QWORD *)a2 + 1);
              v72 = *((_QWORD *)a2 + 2);
              v74 = *(_QWORD *)a2;
              v75 = 0;
              v76 = 0;
              v77 = 0;
              if (v73 > 0xFFFFFFFFFFFFFFF5 || v73 + 10 > v72)
              {
                if (v72 <= v73)
                  v79 = *((_QWORD *)a2 + 1);
                else
                  v79 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v79 == v73)
                    goto LABEL_329;
                  v80 = v73 + 1;
                  v81 = *(_BYTE *)(v74 + v73);
                  *((_QWORD *)a2 + 1) = v80;
                  v77 |= (unint64_t)(v81 & 0x7F) << v75;
                  if ((v81 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v73 = v80;
                  v57 = v76++ > 8;
                  if (v57)
                  {
LABEL_113:
                    LODWORD(v77) = 0;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v77) = 0;
              }
              else
              {
                while (1)
                {
                  v80 = v73 + 1;
                  *((_QWORD *)a2 + 1) = v73 + 1;
                  v82 = *(_BYTE *)(v74 + v73);
                  v77 |= (unint64_t)(v82 & 0x7F) << v75;
                  if ((v82 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v73 = v80;
                  v57 = v76++ > 8;
                  if (v57)
                    goto LABEL_113;
                }
              }
LABEL_116:
              *((_DWORD *)v39 - 1) = v77;
              if (v80 >= v72 || *((_BYTE *)a2 + 24))
                goto LABEL_450;
            }
          }
          goto LABEL_450;
        }
        v207 = (char *)*((_QWORD *)this + 17);
        v206 = *((_QWORD *)this + 18);
        if ((unint64_t)v207 >= v206)
        {
          v238 = (char *)*((_QWORD *)this + 16);
          v239 = (v207 - v238) >> 2;
          v240 = v239 + 1;
          if ((unint64_t)(v239 + 1) >> 62)
            goto LABEL_617;
          v241 = v206 - (_QWORD)v238;
          if (v241 >> 1 > v240)
            v240 = v241 >> 1;
          v45 = (unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL;
          v242 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45)
            v242 = v240;
          if (v242)
          {
            v242 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v242);
            v238 = (char *)*((_QWORD *)this + 16);
            v207 = (char *)*((_QWORD *)this + 17);
          }
          else
          {
            v243 = 0;
          }
          v311 = (_DWORD *)(v242 + 4 * v239);
          *v311 = 0;
          v205 = v311 + 1;
          while (v207 != v238)
          {
            v312 = *((_DWORD *)v207 - 1);
            v207 -= 4;
            *--v311 = v312;
          }
          *((_QWORD *)this + 16) = v311;
          *((_QWORD *)this + 17) = v205;
          *((_QWORD *)this + 18) = v242 + 4 * v243;
          if (v238)
            operator delete(v238);
        }
        else
        {
          *(_DWORD *)v207 = 0;
          v205 = v207 + 4;
        }
        *((_QWORD *)this + 17) = v205;
        if (*((_DWORD **)this + 16) == v205)
          goto LABEL_623;
        v313 = *((_QWORD *)a2 + 1);
        v314 = *((_QWORD *)a2 + 2);
        v315 = *(_QWORD *)a2;
        v316 = 0;
        v317 = 0;
        if (v313 <= 0xFFFFFFFFFFFFFFF5 && v313 + 10 <= v314)
        {
          v308 = 0;
          while (1)
          {
            v321 = v313 + 1;
            *((_QWORD *)a2 + 1) = v313 + 1;
            v322 = *(_BYTE *)(v315 + v313);
            v308 |= (unint64_t)(v322 & 0x7F) << v316;
            if ((v322 & 0x80) == 0)
              goto LABEL_547;
            v316 += 7;
            v313 = v321;
            v57 = v317++ > 8;
            if (v57)
              goto LABEL_546;
          }
        }
        v308 = 0;
        if (v314 <= v313)
          v314 = *((_QWORD *)a2 + 1);
        while (v314 != v313)
        {
          v319 = v313 + 1;
          v320 = *(_BYTE *)(v315 + v313);
          *((_QWORD *)a2 + 1) = v319;
          v308 |= (unint64_t)(v320 & 0x7F) << v316;
          if ((v320 & 0x80) == 0)
            goto LABEL_540;
          v316 += 7;
          v313 = v319;
          v57 = v317++ > 8;
          if (v57)
            goto LABEL_546;
        }
        goto LABEL_539;
      case 6u:
        PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>(v8);
        v84 = *((_QWORD *)this + 32);
        v83 = *((_QWORD *)this + 33);
        goto LABEL_121;
      case 7u:
        PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>(v7);
        v84 = *((_QWORD *)this + 29);
        v83 = *((_QWORD *)this + 30);
LABEL_121:
        if (v84 == v83)
          goto LABEL_623;
        v85 = *(_QWORD *)(v83 - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v85 + 16))(v85, a2) & 1) == 0)
        {
          return;
        }
        goto LABEL_450;
      case 8u:
        if (v23 != 2)
        {
          v209 = (char *)*((_QWORD *)this + 14);
          v208 = *((_QWORD *)this + 15);
          if ((unint64_t)v209 >= v208)
          {
            v244 = (char *)*((_QWORD *)this + 13);
            v245 = (v209 - v244) >> 2;
            v246 = v245 + 1;
            if ((unint64_t)(v245 + 1) >> 62)
              goto LABEL_617;
            v247 = v208 - (_QWORD)v244;
            if (v247 >> 1 > v246)
              v246 = v247 >> 1;
            v45 = (unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL;
            v248 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v45)
              v248 = v246;
            if (v248)
            {
              v248 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v248);
              v244 = (char *)*((_QWORD *)this + 13);
              v209 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v249 = 0;
            }
            v323 = (_DWORD *)(v248 + 4 * v245);
            *v323 = 0;
            v205 = v323 + 1;
            while (v209 != v244)
            {
              v324 = *((_DWORD *)v209 - 1);
              v209 -= 4;
              *--v323 = v324;
            }
            *((_QWORD *)this + 13) = v323;
            *((_QWORD *)this + 14) = v205;
            *((_QWORD *)this + 15) = v248 + 4 * v249;
            if (v244)
              operator delete(v244);
          }
          else
          {
            *(_DWORD *)v209 = 0;
            v205 = v209 + 4;
          }
          *((_QWORD *)this + 14) = v205;
          if (*((_DWORD **)this + 13) == v205)
            goto LABEL_623;
          v325 = *((_QWORD *)a2 + 1);
          v326 = *((_QWORD *)a2 + 2);
          v327 = *(_QWORD *)a2;
          v328 = 0;
          v329 = 0;
          if (v325 > 0xFFFFFFFFFFFFFFF5 || v325 + 10 > v326)
          {
            v308 = 0;
            if (v326 <= v325)
              v326 = *((_QWORD *)a2 + 1);
            while (v326 != v325)
            {
              v331 = v325 + 1;
              v332 = *(_BYTE *)(v327 + v325);
              *((_QWORD *)a2 + 1) = v331;
              v308 |= (unint64_t)(v332 & 0x7F) << v328;
              if ((v332 & 0x80) == 0)
                goto LABEL_540;
              v328 += 7;
              v325 = v331;
              v57 = v329++ > 8;
              if (v57)
                goto LABEL_546;
            }
LABEL_539:
            LODWORD(v308) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v308 = 0;
            while (1)
            {
              v333 = v325 + 1;
              *((_QWORD *)a2 + 1) = v325 + 1;
              v334 = *(_BYTE *)(v327 + v325);
              v308 |= (unint64_t)(v334 & 0x7F) << v328;
              if ((v334 & 0x80) == 0)
                break;
              v328 += 7;
              v325 = v333;
              v57 = v329++ > 8;
              if (v57)
                goto LABEL_546;
            }
          }
LABEL_547:
          *(v205 - 1) = v308;
          goto LABEL_609;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return;
        if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
        {
          v39 = (char *)*((_QWORD *)this + 14);
          while (1)
          {
            v86 = *((_QWORD *)this + 15);
            if ((unint64_t)v39 >= v86)
            {
              v87 = (char *)*((_QWORD *)this + 13);
              v88 = (v39 - v87) >> 2;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 62)
                goto LABEL_617;
              v90 = v86 - (_QWORD)v87;
              if (v90 >> 1 > v89)
                v89 = v90 >> 1;
              v45 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL;
              v91 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v45)
                v91 = v89;
              if (v91)
              {
                v91 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v91);
                v87 = (char *)*((_QWORD *)this + 13);
                v39 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v92 = 0;
              }
              v93 = (_DWORD *)(v91 + 4 * v88);
              *v93 = 0;
              v94 = (char *)(v93 + 1);
              while (v39 != v87)
              {
                v95 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *--v93 = v95;
              }
              *((_QWORD *)this + 13) = v93;
              *((_QWORD *)this + 14) = v94;
              *((_QWORD *)this + 15) = v91 + 4 * v92;
              if (v87)
                operator delete(v87);
              v39 = v94;
            }
            else
            {
              *(_DWORD *)v39 = 0;
              v39 += 4;
            }
            *((_QWORD *)this + 14) = v39;
            if (*((char **)this + 13) == v39)
              goto LABEL_623;
            v97 = *((_QWORD *)a2 + 1);
            v96 = *((_QWORD *)a2 + 2);
            v98 = *(_QWORD *)a2;
            v99 = 0;
            v100 = 0;
            v101 = 0;
            if (v97 > 0xFFFFFFFFFFFFFFF5 || v97 + 10 > v96)
            {
              if (v96 <= v97)
                v103 = *((_QWORD *)a2 + 1);
              else
                v103 = *((_QWORD *)a2 + 2);
              while (1)
              {
                if (v103 == v97)
                  goto LABEL_329;
                v104 = v97 + 1;
                v105 = *(_BYTE *)(v98 + v97);
                *((_QWORD *)a2 + 1) = v104;
                v101 |= (unint64_t)(v105 & 0x7F) << v99;
                if ((v105 & 0x80) == 0)
                  break;
                v99 += 7;
                v97 = v104;
                v57 = v100++ > 8;
                if (v57)
                {
LABEL_163:
                  LODWORD(v101) = 0;
                  goto LABEL_166;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v101) = 0;
            }
            else
            {
              while (1)
              {
                v104 = v97 + 1;
                *((_QWORD *)a2 + 1) = v97 + 1;
                v106 = *(_BYTE *)(v98 + v97);
                v101 |= (unint64_t)(v106 & 0x7F) << v99;
                if ((v106 & 0x80) == 0)
                  break;
                v99 += 7;
                v97 = v104;
                v57 = v100++ > 8;
                if (v57)
                  goto LABEL_163;
              }
            }
LABEL_166:
            *((_DWORD *)v39 - 1) = v101;
            if (v104 >= v96 || *((_BYTE *)a2 + 24))
              goto LABEL_450;
          }
        }
        goto LABEL_450;
      case 9u:
        v30 = v8;
        v31 = v7;
        v107 = v9;
        v108 = v12;
        v109 = v11;
        v110 = v10;
        v111 = operator new();
        v112 = v111;
        *(_QWORD *)v111 = &off_1E1628E08;
        *(_QWORD *)(v111 + 8) = 0;
        *(_DWORD *)(v111 + 32) = 0;
        v114 = (uint64_t *)*((_QWORD *)this + 26);
        v113 = *((_QWORD *)this + 27);
        if ((unint64_t)v114 >= v113)
        {
          v210 = *((_QWORD *)this + 25);
          v211 = ((uint64_t)v114 - v210) >> 3;
          if ((unint64_t)(v211 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v212 = v113 - v210;
          v213 = v212 >> 2;
          if (v212 >> 2 <= (unint64_t)(v211 + 1))
            v213 = v211 + 1;
          if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8)
            v214 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v214 = v213;
          v379 = v109;
          if (v214)
            v214 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v214);
          else
            v215 = 0;
          v280 = (uint64_t *)(v214 + 8 * v211);
          v281 = v214 + 8 * v215;
          v378 = v281;
          *v280 = v112;
          v115 = v280 + 1;
          v377.i64[1] = (uint64_t)(v280 + 1);
          v283 = (_QWORD *)*((_QWORD *)this + 25);
          v282 = (_QWORD *)*((_QWORD *)this + 26);
          if (v282 == v283)
          {
            v285 = vdupq_n_s64((unint64_t)v282);
          }
          else
          {
            do
            {
              v284 = *--v282;
              *v282 = 0;
              *--v280 = v284;
            }
            while (v282 != v283);
            v285 = *(int64x2_t *)((char *)this + 200);
            v115 = (_QWORD *)v377.i64[1];
            v281 = v378;
          }
          *((_QWORD *)this + 25) = v280;
          *((_QWORD *)this + 26) = v115;
          v377 = v285;
          v294 = *((_QWORD *)this + 27);
          *((_QWORD *)this + 27) = v281;
          v378 = v294;
          v376 = v285.i64[0];
          std::__split_buffer<std::unique_ptr<PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair>>::~__split_buffer((uint64_t)&v376);
        }
        else
        {
          *v114 = v111;
          v115 = v114 + 1;
        }
        *((_QWORD *)this + 26) = v115;
        v295 = (_QWORD *)*((_QWORD *)this + 25);
        goto LABEL_444;
      case 0xAu:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 5);
            while (1)
            {
              v116 = *((_QWORD *)this + 6);
              if ((unint64_t)v39 >= v116)
              {
                v117 = (char *)*((_QWORD *)this + 4);
                v118 = (v39 - v117) >> 2;
                v119 = v118 + 1;
                if ((unint64_t)(v118 + 1) >> 62)
                  goto LABEL_617;
                v120 = v116 - (_QWORD)v117;
                if (v120 >> 1 > v119)
                  v119 = v120 >> 1;
                v45 = (unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL;
                v121 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v45)
                  v121 = v119;
                if (v121)
                {
                  v121 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v121);
                  v117 = (char *)*((_QWORD *)this + 4);
                  v39 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v122 = 0;
                }
                v123 = (_DWORD *)(v121 + 4 * v118);
                *v123 = 0;
                v124 = (char *)(v123 + 1);
                while (v39 != v117)
                {
                  v125 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v123 = v125;
                }
                *((_QWORD *)this + 4) = v123;
                *((_QWORD *)this + 5) = v124;
                *((_QWORD *)this + 6) = v121 + 4 * v122;
                if (v117)
                  operator delete(v117);
                v39 = v124;
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v39 += 4;
              }
              *((_QWORD *)this + 5) = v39;
              if (*((char **)this + 4) == v39)
                goto LABEL_623;
              v127 = *((_QWORD *)a2 + 1);
              v126 = *((_QWORD *)a2 + 2);
              v128 = *(_QWORD *)a2;
              v129 = 0;
              v130 = 0;
              v131 = 0;
              if (v127 > 0xFFFFFFFFFFFFFFF5 || v127 + 10 > v126)
                break;
              while (1)
              {
                v134 = v127 + 1;
                *((_QWORD *)a2 + 1) = v127 + 1;
                v136 = *(_BYTE *)(v128 + v127);
                v131 |= (unint64_t)(v136 & 0x7F) << v129;
                if ((v136 & 0x80) == 0)
                  break;
                v129 += 7;
                v127 = v134;
                v57 = v130++ > 8;
                if (v57)
                  goto LABEL_209;
              }
LABEL_212:
              *((_DWORD *)v39 - 1) = v131;
              if (v134 >= v126 || *((_BYTE *)a2 + 24))
                goto LABEL_450;
            }
            if (v126 <= v127)
              v133 = *((_QWORD *)a2 + 1);
            else
              v133 = *((_QWORD *)a2 + 2);
            while (v133 != v127)
            {
              v134 = v127 + 1;
              v135 = *(_BYTE *)(v128 + v127);
              *((_QWORD *)a2 + 1) = v134;
              v131 |= (unint64_t)(v135 & 0x7F) << v129;
              if ((v135 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v131) = 0;
                goto LABEL_212;
              }
              v129 += 7;
              v127 = v134;
              v57 = v130++ > 8;
              if (v57)
              {
LABEL_209:
                LODWORD(v131) = 0;
                goto LABEL_212;
              }
            }
LABEL_329:
            *((_BYTE *)a2 + 24) = 1;
            *((_DWORD *)v39 - 1) = 0;
          }
          goto LABEL_450;
        }
        v217 = (char *)*((_QWORD *)this + 5);
        v216 = *((_QWORD *)this + 6);
        if ((unint64_t)v217 >= v216)
        {
          v250 = (char *)*((_QWORD *)this + 4);
          v251 = (v217 - v250) >> 2;
          v252 = v251 + 1;
          if ((unint64_t)(v251 + 1) >> 62)
LABEL_617:
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v253 = v216 - (_QWORD)v250;
          if (v253 >> 1 > v252)
            v252 = v253 >> 1;
          v45 = (unint64_t)v253 >= 0x7FFFFFFFFFFFFFFCLL;
          v254 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45)
            v254 = v252;
          if (v254)
          {
            v254 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v254);
            v250 = (char *)*((_QWORD *)this + 4);
            v217 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v255 = 0;
          }
          v335 = (_DWORD *)(v254 + 4 * v251);
          *v335 = 0;
          v205 = v335 + 1;
          while (v217 != v250)
          {
            v336 = *((_DWORD *)v217 - 1);
            v217 -= 4;
            *--v335 = v336;
          }
          *((_QWORD *)this + 4) = v335;
          *((_QWORD *)this + 5) = v205;
          *((_QWORD *)this + 6) = v254 + 4 * v255;
          if (v250)
            operator delete(v250);
        }
        else
        {
          *(_DWORD *)v217 = 0;
          v205 = v217 + 4;
        }
        *((_QWORD *)this + 5) = v205;
        if (*((_DWORD **)this + 4) == v205)
          goto LABEL_623;
        v337 = *((_QWORD *)a2 + 1);
        v338 = *((_QWORD *)a2 + 2);
        v339 = *(_QWORD *)a2;
        v340 = 0;
        v341 = 0;
        if (v337 <= 0xFFFFFFFFFFFFFFF5 && v337 + 10 <= v338)
        {
          v308 = 0;
          while (1)
          {
            v345 = v337 + 1;
            *((_QWORD *)a2 + 1) = v337 + 1;
            v346 = *(_BYTE *)(v339 + v337);
            v308 |= (unint64_t)(v346 & 0x7F) << v340;
            if ((v346 & 0x80) == 0)
              goto LABEL_547;
            v340 += 7;
            v337 = v345;
            v57 = v341++ > 8;
            if (v57)
              goto LABEL_546;
          }
        }
        v308 = 0;
        if (v338 <= v337)
          v338 = *((_QWORD *)a2 + 1);
        while (v338 != v337)
        {
          v343 = v337 + 1;
          v344 = *(_BYTE *)(v339 + v337);
          *((_QWORD *)a2 + 1) = v343;
          v308 |= (unint64_t)(v344 & 0x7F) << v340;
          if ((v344 & 0x80) == 0)
          {
LABEL_540:
            if (*((_BYTE *)a2 + 24))
              LODWORD(v308) = 0;
            goto LABEL_547;
          }
          v340 += 7;
          v337 = v343;
          v57 = v341++ > 8;
          if (v57)
          {
LABEL_546:
            LODWORD(v308) = 0;
            goto LABEL_547;
          }
        }
        goto LABEL_539;
      case 0xBu:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return;
          v137 = *((_QWORD *)a2 + 1);
          v138 = *((_QWORD *)a2 + 2);
          while (v137 < v138 && !*((_BYTE *)a2 + 24))
          {
            v140 = (char *)*((_QWORD *)this + 2);
            v139 = *((_QWORD *)this + 3);
            if ((unint64_t)v140 >= v139)
            {
              v142 = (char *)*((_QWORD *)this + 1);
              v143 = (v140 - v142) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
                goto LABEL_619;
              v145 = v139 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              v45 = (unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL;
              v146 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v45)
                v146 = v144;
              if (v146)
              {
                v146 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v146);
                v142 = (char *)*((_QWORD *)this + 1);
                v140 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v147 = 0;
              }
              v148 = (_DWORD *)(v146 + 4 * v143);
              *v148 = 0;
              v141 = v148 + 1;
              while (v140 != v142)
              {
                v149 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *--v148 = v149;
              }
              *((_QWORD *)this + 1) = v148;
              *((_QWORD *)this + 2) = v141;
              *((_QWORD *)this + 3) = v146 + 4 * v147;
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v140 = 0;
              v141 = v140 + 4;
            }
            *((_QWORD *)this + 2) = v141;
            if (*((_DWORD **)this + 1) == v141)
              goto LABEL_623;
            v150 = *((_QWORD *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_450;
            }
            *(v141 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v150);
            v138 = *((_QWORD *)a2 + 2);
            v137 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v137;
          }
          goto LABEL_450;
        }
        v219 = (char *)*((_QWORD *)this + 2);
        v218 = *((_QWORD *)this + 3);
        if ((unint64_t)v219 >= v218)
        {
          v256 = (char *)*((_QWORD *)this + 1);
          v257 = (v219 - v256) >> 2;
          v258 = v257 + 1;
          if ((unint64_t)(v257 + 1) >> 62)
LABEL_619:
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v259 = v218 - (_QWORD)v256;
          if (v259 >> 1 > v258)
            v258 = v259 >> 1;
          v45 = (unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL;
          v260 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45)
            v260 = v258;
          if (v260)
          {
            v260 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<float>>(v260);
            v256 = (char *)*((_QWORD *)this + 1);
            v219 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v261 = 0;
          }
          v347 = (_DWORD *)(v260 + 4 * v257);
          *v347 = 0;
          v220 = v347 + 1;
          while (v219 != v256)
          {
            v348 = *((_DWORD *)v219 - 1);
            v219 -= 4;
            *--v347 = v348;
          }
          *((_QWORD *)this + 1) = v347;
          *((_QWORD *)this + 2) = v220;
          *((_QWORD *)this + 3) = v260 + 4 * v261;
          if (v256)
            operator delete(v256);
        }
        else
        {
          *(_DWORD *)v219 = 0;
          v220 = v219 + 4;
        }
        *((_QWORD *)this + 2) = v220;
        if (*((_DWORD **)this + 1) == v220)
          goto LABEL_623;
        v349 = *((_QWORD *)a2 + 1);
        if (v349 <= 0xFFFFFFFFFFFFFFFBLL && v349 + 4 <= *((_QWORD *)a2 + 2))
        {
          *(v220 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v349);
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_609;
      case 0xCu:
        v30 = v8;
        v31 = v7;
        v107 = v9;
        v108 = v12;
        v109 = v11;
        v110 = v10;
        v151 = operator new();
        v152 = v151;
        *(_QWORD *)v151 = &off_1E1628E40;
        *(_QWORD *)(v151 + 8) = 0;
        *(_DWORD *)(v151 + 20) = 0;
        v154 = (uint64_t *)*((_QWORD *)this + 23);
        v153 = *((_QWORD *)this + 24);
        if ((unint64_t)v154 >= v153)
        {
          v221 = *((_QWORD *)this + 22);
          v222 = ((uint64_t)v154 - v221) >> 3;
          if ((unint64_t)(v222 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v223 = v153 - v221;
          v224 = v223 >> 2;
          if (v223 >> 2 <= (unint64_t)(v222 + 1))
            v224 = v222 + 1;
          if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
            v225 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v225 = v224;
          v379 = v110;
          if (v225)
            v225 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v225);
          else
            v226 = 0;
          v286 = (uint64_t *)(v225 + 8 * v222);
          v287 = v225 + 8 * v226;
          v378 = v287;
          *v286 = v152;
          v115 = v286 + 1;
          v377.i64[1] = (uint64_t)(v286 + 1);
          v289 = (_QWORD *)*((_QWORD *)this + 22);
          v288 = (_QWORD *)*((_QWORD *)this + 23);
          if (v288 == v289)
          {
            v291 = vdupq_n_s64((unint64_t)v288);
          }
          else
          {
            do
            {
              v290 = *--v288;
              *v288 = 0;
              *--v286 = v290;
            }
            while (v288 != v289);
            v291 = *((int64x2_t *)this + 11);
            v115 = (_QWORD *)v377.i64[1];
            v287 = v378;
          }
          *((_QWORD *)this + 22) = v286;
          *((_QWORD *)this + 23) = v115;
          v377 = v291;
          v296 = *((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = v287;
          v378 = v296;
          v376 = v291.i64[0];
          std::__split_buffer<std::unique_ptr<PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair>>::~__split_buffer((uint64_t)&v376);
        }
        else
        {
          *v154 = v151;
          v115 = v154 + 1;
        }
        *((_QWORD *)this + 23) = v115;
        v295 = (_QWORD *)*((_QWORD *)this + 22);
LABEL_444:
        if (v295 == v115)
          goto LABEL_623;
        v297 = *(v115 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v297 + 16))(v297, a2) & 1) == 0)
        {
          return;
        }
        PB::Reader::recallMark();
        v10 = v110;
        v11 = v109;
        v12 = v108;
        v9 = v107;
LABEL_448:
        v7 = v31;
        v8 = v30;
        goto LABEL_609;
      case 0xDu:
        if (v23 != 2)
        {
          v228 = (char *)*((_QWORD *)this + 11);
          v227 = *((_QWORD *)this + 12);
          if ((unint64_t)v228 >= v227)
          {
            v262 = (char *)*((_QWORD *)this + 10);
            v263 = (v228 - v262) >> 3;
            v264 = v263 + 1;
            if ((unint64_t)(v263 + 1) >> 61)
              goto LABEL_618;
            v265 = v227 - (_QWORD)v262;
            if (v265 >> 2 > v264)
              v264 = v265 >> 2;
            v45 = (unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8;
            v266 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v45)
              v266 = v264;
            if (v266)
            {
              v266 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v266);
              v262 = (char *)*((_QWORD *)this + 10);
              v228 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v267 = 0;
            }
            v350 = (_QWORD *)(v266 + 8 * v263);
            *v350 = 0;
            v229 = v350 + 1;
            while (v228 != v262)
            {
              v351 = *((_QWORD *)v228 - 1);
              v228 -= 8;
              *--v350 = v351;
            }
            *((_QWORD *)this + 10) = v350;
            *((_QWORD *)this + 11) = v229;
            *((_QWORD *)this + 12) = v266 + 8 * v267;
            if (v262)
              operator delete(v262);
          }
          else
          {
            *(_QWORD *)v228 = 0;
            v229 = v228 + 8;
          }
          *((_QWORD *)this + 11) = v229;
          if (*((_QWORD **)this + 10) == v229)
            goto LABEL_623;
          v352 = *((_QWORD *)a2 + 1);
          v353 = *((_QWORD *)a2 + 2);
          v354 = *(_QWORD *)a2;
          v355 = 0;
          v356 = 0;
          if (v352 > 0xFFFFFFFFFFFFFFF5 || v352 + 10 > v353)
          {
            v360 = 0;
            if (v353 <= v352)
              v353 = *((_QWORD *)a2 + 1);
            while (v353 != v352)
            {
              v358 = v352 + 1;
              v359 = *(_BYTE *)(v354 + v352);
              *((_QWORD *)a2 + 1) = v358;
              v360 |= (unint64_t)(v359 & 0x7F) << v355;
              if ((v359 & 0x80) == 0)
                goto LABEL_606;
              v355 += 7;
              v352 = v358;
              v57 = v356++ > 8;
              if (v57)
                goto LABEL_604;
            }
LABEL_605:
            v360 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v360 = 0;
            while (1)
            {
              v361 = v352 + 1;
              *((_QWORD *)a2 + 1) = v352 + 1;
              v362 = *(_BYTE *)(v354 + v352);
              v360 |= (unint64_t)(v362 & 0x7F) << v355;
              if ((v362 & 0x80) == 0)
                break;
              v355 += 7;
              v352 = v361;
              v57 = v356++ > 8;
              if (v57)
                goto LABEL_604;
            }
          }
LABEL_608:
          *(v229 - 1) = v360;
LABEL_609:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3 || *((_BYTE *)a2 + 24) != 0)
            return;
          continue;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return;
        if (*((_QWORD *)a2 + 1) >= *((_QWORD *)a2 + 2) || *((_BYTE *)a2 + 24))
        {
LABEL_450:
          PB::Reader::recallMark();
          goto LABEL_609;
        }
        v155 = (char *)*((_QWORD *)this + 11);
        while (1)
        {
          v156 = *((_QWORD *)this + 12);
          if ((unint64_t)v155 >= v156)
          {
            v157 = (char *)*((_QWORD *)this + 10);
            v158 = (v155 - v157) >> 3;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 61)
              goto LABEL_618;
            v160 = v156 - (_QWORD)v157;
            if (v160 >> 2 > v159)
              v159 = v160 >> 2;
            v45 = (unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8;
            v161 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v45)
              v161 = v159;
            if (v161)
            {
              v161 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v161);
              v157 = (char *)*((_QWORD *)this + 10);
              v155 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v162 = 0;
            }
            v163 = (_QWORD *)(v161 + 8 * v158);
            *v163 = 0;
            v164 = (char *)(v163 + 1);
            while (v155 != v157)
            {
              v165 = *((_QWORD *)v155 - 1);
              v155 -= 8;
              *--v163 = v165;
            }
            *((_QWORD *)this + 10) = v163;
            *((_QWORD *)this + 11) = v164;
            *((_QWORD *)this + 12) = v161 + 8 * v162;
            if (v157)
              operator delete(v157);
            v155 = v164;
          }
          else
          {
            *(_QWORD *)v155 = 0;
            v155 += 8;
          }
          *((_QWORD *)this + 11) = v155;
          if (*((char **)this + 10) == v155)
            break;
          v167 = *((_QWORD *)a2 + 1);
          v166 = *((_QWORD *)a2 + 2);
          v168 = *(_QWORD *)a2;
          v169 = 0;
          v170 = 0;
          v171 = 0;
          if (v167 > 0xFFFFFFFFFFFFFFF5 || v167 + 10 > v166)
          {
            if (v166 <= v167)
              v173 = *((_QWORD *)a2 + 1);
            else
              v173 = *((_QWORD *)a2 + 2);
            while (1)
            {
              if (v173 == v167)
                goto LABEL_370;
              v174 = v167 + 1;
              v175 = *(_BYTE *)(v168 + v167);
              *((_QWORD *)a2 + 1) = v174;
              v171 |= (unint64_t)(v175 & 0x7F) << v169;
              if ((v175 & 0x80) == 0)
                break;
              v169 += 7;
              v167 = v174;
              v57 = v170++ > 8;
              if (v57)
              {
LABEL_279:
                v171 = 0;
                goto LABEL_282;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v171 = 0;
          }
          else
          {
            while (1)
            {
              v174 = v167 + 1;
              *((_QWORD *)a2 + 1) = v167 + 1;
              v176 = *(_BYTE *)(v168 + v167);
              v171 |= (unint64_t)(v176 & 0x7F) << v169;
              if ((v176 & 0x80) == 0)
                break;
              v169 += 7;
              v167 = v174;
              v57 = v170++ > 8;
              if (v57)
                goto LABEL_279;
            }
          }
LABEL_282:
          *((_QWORD *)v155 - 1) = v171;
          if (v174 >= v166 || *((_BYTE *)a2 + 24))
            goto LABEL_450;
        }
LABEL_623:
        __break(1u);
        return;
      case 0xEu:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v155 = (char *)*((_QWORD *)this + 8);
            while (1)
            {
              v177 = *((_QWORD *)this + 9);
              if ((unint64_t)v155 >= v177)
              {
                v178 = (char *)*((_QWORD *)this + 7);
                v179 = (v155 - v178) >> 3;
                v180 = v179 + 1;
                if ((unint64_t)(v179 + 1) >> 61)
                  goto LABEL_618;
                v181 = v177 - (_QWORD)v178;
                if (v181 >> 2 > v180)
                  v180 = v181 >> 2;
                v45 = (unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8;
                v182 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v45)
                  v182 = v180;
                if (v182)
                {
                  v182 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v182);
                  v178 = (char *)*((_QWORD *)this + 7);
                  v155 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v183 = 0;
                }
                v184 = (_QWORD *)(v182 + 8 * v179);
                *v184 = 0;
                v185 = (char *)(v184 + 1);
                while (v155 != v178)
                {
                  v186 = *((_QWORD *)v155 - 1);
                  v155 -= 8;
                  *--v184 = v186;
                }
                *((_QWORD *)this + 7) = v184;
                *((_QWORD *)this + 8) = v185;
                *((_QWORD *)this + 9) = v182 + 8 * v183;
                if (v178)
                  operator delete(v178);
                v155 = v185;
              }
              else
              {
                *(_QWORD *)v155 = 0;
                v155 += 8;
              }
              *((_QWORD *)this + 8) = v155;
              if (*((char **)this + 7) == v155)
                goto LABEL_623;
              v188 = *((_QWORD *)a2 + 1);
              v187 = *((_QWORD *)a2 + 2);
              v189 = *(_QWORD *)a2;
              v190 = 0;
              v191 = 0;
              v192 = 0;
              if (v188 > 0xFFFFFFFFFFFFFFF5 || v188 + 10 > v187)
                break;
              while (1)
              {
                v195 = v188 + 1;
                *((_QWORD *)a2 + 1) = v188 + 1;
                v197 = *(_BYTE *)(v189 + v188);
                v192 |= (unint64_t)(v197 & 0x7F) << v190;
                if ((v197 & 0x80) == 0)
                  break;
                v190 += 7;
                v188 = v195;
                v57 = v191++ > 8;
                if (v57)
                  goto LABEL_323;
              }
LABEL_326:
              *((_QWORD *)v155 - 1) = v192;
              if (v195 >= v187 || *((_BYTE *)a2 + 24))
                goto LABEL_450;
            }
            if (v187 <= v188)
              v194 = *((_QWORD *)a2 + 1);
            else
              v194 = *((_QWORD *)a2 + 2);
            while (v194 != v188)
            {
              v195 = v188 + 1;
              v196 = *(_BYTE *)(v189 + v188);
              *((_QWORD *)a2 + 1) = v195;
              v192 |= (unint64_t)(v196 & 0x7F) << v190;
              if ((v196 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  v192 = 0;
                goto LABEL_326;
              }
              v190 += 7;
              v188 = v195;
              v57 = v191++ > 8;
              if (v57)
              {
LABEL_323:
                v192 = 0;
                goto LABEL_326;
              }
            }
LABEL_370:
            *((_BYTE *)a2 + 24) = 1;
            *((_QWORD *)v155 - 1) = 0;
          }
          goto LABEL_450;
        }
        v231 = (char *)*((_QWORD *)this + 8);
        v230 = *((_QWORD *)this + 9);
        if ((unint64_t)v231 >= v230)
        {
          v268 = (char *)*((_QWORD *)this + 7);
          v269 = (v231 - v268) >> 3;
          v270 = v269 + 1;
          if ((unint64_t)(v269 + 1) >> 61)
LABEL_618:
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v271 = v230 - (_QWORD)v268;
          if (v271 >> 2 > v270)
            v270 = v271 >> 2;
          v45 = (unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8;
          v272 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v45)
            v272 = v270;
          if (v272)
          {
            v272 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v272);
            v268 = (char *)*((_QWORD *)this + 7);
            v231 = (char *)*((_QWORD *)this + 8);
          }
          else
          {
            v273 = 0;
          }
          v363 = (_QWORD *)(v272 + 8 * v269);
          *v363 = 0;
          v229 = v363 + 1;
          while (v231 != v268)
          {
            v364 = *((_QWORD *)v231 - 1);
            v231 -= 8;
            *--v363 = v364;
          }
          *((_QWORD *)this + 7) = v363;
          *((_QWORD *)this + 8) = v229;
          *((_QWORD *)this + 9) = v272 + 8 * v273;
          if (v268)
            operator delete(v268);
        }
        else
        {
          *(_QWORD *)v231 = 0;
          v229 = v231 + 8;
        }
        *((_QWORD *)this + 8) = v229;
        if (*((_QWORD **)this + 7) == v229)
          goto LABEL_623;
        v365 = *((_QWORD *)a2 + 1);
        v366 = *((_QWORD *)a2 + 2);
        v367 = *(_QWORD *)a2;
        v368 = 0;
        v369 = 0;
        if (v365 <= 0xFFFFFFFFFFFFFFF5 && v365 + 10 <= v366)
        {
          v360 = 0;
          while (1)
          {
            v373 = v365 + 1;
            *((_QWORD *)a2 + 1) = v365 + 1;
            v374 = *(_BYTE *)(v367 + v365);
            v360 |= (unint64_t)(v374 & 0x7F) << v368;
            if ((v374 & 0x80) == 0)
              goto LABEL_608;
            v368 += 7;
            v365 = v373;
            v57 = v369++ > 8;
            if (v57)
              goto LABEL_604;
          }
        }
        v360 = 0;
        if (v366 <= v365)
          v366 = *((_QWORD *)a2 + 1);
        while (v366 != v365)
        {
          v371 = v365 + 1;
          v372 = *(_BYTE *)(v367 + v365);
          *((_QWORD *)a2 + 1) = v371;
          v360 |= (unint64_t)(v372 & 0x7F) << v368;
          if ((v372 & 0x80) == 0)
          {
LABEL_606:
            if (*((_BYTE *)a2 + 24))
              v360 = 0;
            goto LABEL_608;
          }
          v368 += 7;
          v365 = v371;
          v57 = v369++ > 8;
          if (v57)
          {
LABEL_604:
            v360 = 0;
            goto LABEL_608;
          }
        }
        goto LABEL_605;
      default:
        goto LABEL_20;
    }
  }
}

void sub_184D6A54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PBPageLayoutPkg::PBPageLayout::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const PB::Base **v11;
  const PB::Base **v12;
  const PB::Base *v13;
  const PB::Base **v14;
  const PB::Base **v15;
  const PB::Base *v16;
  uint64_t v17;
  uint64_t v18;
  const PB::Base **v19;
  const PB::Base **v20;
  const PB::Base *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float v26;
  const PB::Base **v27;
  const PB::Base **v28;
  const PB::Base *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 308) & 1) != 0)
    this = PB::Writer::write(a2);
  if (v3[28])
    this = PB::Writer::write();
  v4 = (const PB::Base **)v3[35];
  v5 = (const PB::Base **)v3[36];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = v3[19];
  v8 = v3[20];
  while (v7 != v8)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v9 = v3[16];
  v10 = v3[17];
  while (v9 != v10)
  {
    v9 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v11 = (const PB::Base **)v3[32];
  v12 = (const PB::Base **)v3[33];
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  v14 = (const PB::Base **)v3[29];
  v15 = (const PB::Base **)v3[30];
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  v17 = v3[13];
  v18 = v3[14];
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v19 = (const PB::Base **)v3[25];
  v20 = (const PB::Base **)v3[26];
  while (v19 != v20)
  {
    v21 = *v19++;
    this = PB::Writer::writeSubmessage(a2, v21);
  }
  v22 = v3[4];
  v23 = v3[5];
  while (v22 != v23)
  {
    v22 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v24 = (float *)v3[1];
  v25 = (float *)v3[2];
  while (v24 != v25)
  {
    v26 = *v24++;
    this = PB::Writer::write(a2, v26);
  }
  v27 = (const PB::Base **)v3[22];
  v28 = (const PB::Base **)v3[23];
  while (v27 != v28)
  {
    v29 = *v27++;
    this = PB::Writer::writeSubmessage(a2, v29);
  }
  v30 = v3[10];
  v31 = v3[11];
  while (v30 != v31)
  {
    v30 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  v33 = v3[7];
  v32 = v3[8];
  while (v33 != v32)
  {
    v33 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t PBPageLayoutPkg::PBPageLayout::formatText(PBPageLayoutPkg::PBPageLayout *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "baselineOffsets", v7);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 22);
  v9 = (uint64_t *)*((_QWORD *)this + 23);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "charStyleFontData");
  }
  v11 = *((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "characterStyleIndexes");
  }
  v13 = (uint64_t *)*((_QWORD *)this + 25);
  v14 = (uint64_t *)*((_QWORD *)this + 26);
  while (v13 != v14)
  {
    v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "characterStyles");
  }
  if ((*((_BYTE *)this + 308) & 1) != 0)
    PB::TextFormatter::format(a2, "hasRTL");
  v16 = *((_QWORD *)this + 7);
  v17 = *((_QWORD *)this + 8);
  while (v16 != v17)
  {
    v16 += 8;
    PB::TextFormatter::format(a2, "logicalMap");
  }
  v18 = *((_QWORD *)this + 10);
  v19 = *((_QWORD *)this + 11);
  while (v18 != v19)
  {
    v18 += 8;
    PB::TextFormatter::format(a2, "mcids");
  }
  if (*((_QWORD *)this + 28))
    PB::TextFormatter::format();
  v20 = (uint64_t *)*((_QWORD *)this + 29);
  v21 = (uint64_t *)*((_QWORD *)this + 30);
  while (v20 != v21)
  {
    v22 = *v20++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v22 + 32))(v22, a2, "preciseBBoxes");
  }
  v23 = (uint64_t *)*((_QWORD *)this + 32);
  v24 = (uint64_t *)*((_QWORD *)this + 33);
  while (v23 != v24)
  {
    v25 = *v23++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v25 + 32))(v25, a2, "selectionBBoxes");
  }
  v26 = (uint64_t *)*((_QWORD *)this + 35);
  v27 = (uint64_t *)*((_QWORD *)this + 36);
  while (v26 != v27)
  {
    v28 = *v26++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v28 + 32))(v28, a2, "textLines");
  }
  v29 = *((_QWORD *)this + 13);
  v30 = *((_QWORD *)this + 14);
  while (v29 != v30)
  {
    v29 += 4;
    PB::TextFormatter::format(a2, "textRangeMap");
  }
  v31 = *((_QWORD *)this + 16);
  v32 = *((_QWORD *)this + 17);
  while (v31 != v32)
  {
    v31 += 4;
    PB::TextFormatter::format(a2, "uniCharCounts");
  }
  v33 = *((_QWORD *)this + 19);
  v34 = *((_QWORD *)this + 20);
  while (v33 != v34)
  {
    v33 += 4;
    PB::TextFormatter::format(a2, "uniChars");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<PBPageLayoutPkg::PBRect>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E1628E78;
  *(_DWORD *)(result + 40) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_184D6AB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<PBPageLayoutPkg::PBRect>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL pdf_document_unlock_with_password(uint64_t a1, char *__s)
{
  size_t v4;

  if (!a1)
    return 1;
  v4 = strlen(__s);
  return CGPDFSecurityManagerUnlock(a1, __s, v4);
}

void pdf_document_finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  if (v2)
    CFRelease(v2);
  free(*(void **)(a1 + 24));
  CGPropertiesRelease(*(_QWORD *)(a1 + 32));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 48));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 56));
  pdf_reader_release(*(uint64_t **)(a1 + 16));
}

CGPDFDictionaryRef pdf_document_get_catalog(uint64_t a1)
{
  CGPDFDictionary *trailer;
  CGPDFDictionaryRef value;

  value = 0;
  trailer = (CGPDFDictionary *)pdf_xref_get_trailer(a1);
  if (CGPDFDictionaryGetDictionary(trailer, "Root", &value))
    return value;
  else
    return 0;
}

_BYTE *PDFResourceSetEmit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  const __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const __CFArray *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const __CFArray *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const __CFArray *v60;
  uint64_t v61;
  void *v62;
  const __CFArray *v63;
  void *v64;
  const __CFArray *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const __CFArray *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const __CFArray *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  CFRange v106;
  CFRange v107;
  CFRange v108;
  CFRange v109;
  CFRange v110;
  CFRange v111;
  CFRange v112;
  CFRange v113;

  PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"<<", v9, v10, v11, v12, v13, v14, v96);
  if (*(_DWORD *)(a1 + 24))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ProcSet [", v15, v16, v17, v18, v19, v20, v97);
    v27 = *(_DWORD *)(a1 + 24);
    if ((v27 & 1) != 0)
    {
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/PDF", v21, v22, v23, v24, v25, v26, v98);
      v27 = *(_DWORD *)(a1 + 24);
      if ((v27 & 2) == 0)
      {
LABEL_4:
        if ((v27 & 4) == 0)
          goto LABEL_5;
        goto LABEL_31;
      }
    }
    else if ((v27 & 2) == 0)
    {
      goto LABEL_4;
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Text", v21, v22, v23, v24, v25, v26, v98);
    v27 = *(_DWORD *)(a1 + 24);
    if ((v27 & 4) == 0)
    {
LABEL_5:
      if ((v27 & 8) == 0)
        goto LABEL_6;
      goto LABEL_32;
    }
LABEL_31:
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ImageB", v21, v22, v23, v24, v25, v26, v98);
    v27 = *(_DWORD *)(a1 + 24);
    if ((v27 & 8) == 0)
    {
LABEL_6:
      if ((v27 & 0x10) == 0)
      {
LABEL_8:
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v21, v22, v23, v24, v25, v26, v98);
        goto LABEL_9;
      }
LABEL_7:
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ImageI", v21, v22, v23, v24, v25, v26, v98);
      goto LABEL_8;
    }
LABEL_32:
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ImageC", v21, v22, v23, v24, v25, v26, v98);
    if ((*(_DWORD *)(a1 + 24) & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_9:
  if (*(_QWORD *)(a1 + 32))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ColorSpace <<", v15, v16, v17, v18, v19, v20, v97);
    v28 = *(void **)(a1 + 8);
    v29 = *(const __CFArray **)(*(_QWORD *)(a1 + 32) + 8);
    v106.length = CFArrayGetCount(v29);
    v106.location = 0;
    CFArrayApplyFunction(v29, v106, (CFArrayApplierFunction)emitColorSpace_16873, v28);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v30, v31, v32, v33, v34, v35, v99);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ExtGState <<", v15, v16, v17, v18, v19, v20, v97);
    v36 = *(void **)(a1 + 8);
    v37 = *(const __CFArray **)(*(_QWORD *)(a1 + 40) + 8);
    v107.length = CFArrayGetCount(v37);
    v107.location = 0;
    CFArrayApplyFunction(v37, v107, (CFArrayApplierFunction)emitEState, v36);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v38, v39, v40, v41, v42, v43, v100);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Font <<", v15, v16, v17, v18, v19, v20, v97);
    v44 = *(void **)(a1 + 8);
    v45 = *(const __CFArray **)(*(_QWORD *)(a1 + 48) + 8);
    v108.length = CFArrayGetCount(v45);
    v108.location = 0;
    CFArrayApplyFunction(v45, v108, (CFArrayApplierFunction)emitFont, v44);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v46, v47, v48, v49, v50, v51, v101);
  }
  if (*(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/XObject <<", v15, v16, v17, v18, v19, v20, v97);
    v58 = *(_QWORD *)(a1 + 64);
    if (v58)
    {
      v59 = *(void **)(a1 + 8);
      v60 = *(const __CFArray **)(v58 + 8);
      v109.length = CFArrayGetCount(v60);
      v109.location = 0;
      CFArrayApplyFunction(v60, v109, (CFArrayApplierFunction)emitImage, v59);
    }
    v61 = *(_QWORD *)(a1 + 56);
    if (v61)
    {
      v62 = *(void **)(a1 + 8);
      v63 = *(const __CFArray **)(v61 + 8);
      v110.length = CFArrayGetCount(v63);
      v110.location = 0;
      CFArrayApplyFunction(v63, v110, (CFArrayApplierFunction)emitForm, v62);
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v52, v53, v54, v55, v56, v57, v102);
  }
  if (*(_QWORD *)(a1 + 72))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Pattern <<", v15, v16, v17, v18, v19, v20, v97);
    v64 = *(void **)(a1 + 8);
    v65 = *(const __CFArray **)(*(_QWORD *)(a1 + 72) + 8);
    v111.length = CFArrayGetCount(v65);
    v111.location = 0;
    CFArrayApplyFunction(v65, v111, (CFArrayApplierFunction)emitPattern_16879, v64);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v66, v67, v68, v69, v70, v71, v103);
  }
  if (*(_QWORD *)(a1 + 80))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Properties <<", v15, v16, v17, v18, v19, v20, v97);
    v72 = *(void **)(a1 + 8);
    v73 = *(const __CFArray **)(*(_QWORD *)(a1 + 80) + 8);
    v112.length = CFArrayGetCount(v73);
    v112.location = 0;
    CFArrayApplyFunction(v73, v112, (CFArrayApplierFunction)emitProperties, v72);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v74, v75, v76, v77, v78, v79, v104);
  }
  if (*(_QWORD *)(a1 + 88))
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Shading <<", v15, v16, v17, v18, v19, v20, v97);
    v80 = *(void **)(a1 + 8);
    v81 = *(const __CFArray **)(*(_QWORD *)(a1 + 88) + 8);
    v113.length = CFArrayGetCount(v81);
    v113.location = 0;
    CFArrayApplyFunction(v81, v113, (CFArrayApplierFunction)emitShading, v80);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v82, v83, v84, v85, v86, v87, v105);
  }
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v15, v16, v17, v18, v19, v20, v97);
  return PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v88, v89, v90, v91, v92, v93, v94);
}

void emitColorSpace_16873(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (uint64_t)(a1 + 5);
  if (!a1)
    v9 = 0;
  PDFDocumentPrintf(a2, (uint64_t)"/%N", a3, a4, a5, a6, a7, a8, v9);
  PDFColorSpaceEmitReference(a1, v10, v11, v12, v13, v14, v15, v16);
}

void emitEState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v10 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 464));
    *(_QWORD *)(a1 + 16) = v10;
  }
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v10, a5, a6, a7, a8);
}

uint64_t emitFont(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void emitImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v9, a5, a6, a7, a8);
}

void emitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 40, v9, a5, a6, a7, a8);
}

void emitPattern_16879(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 80, v9, a5, a6, a7, a8);
}

void emitProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v10 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 464));
    *(_QWORD *)(a1 + 16) = v10;
  }
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 24, v10, a5, a6, a7, a8);
}

void emitShading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PDFDocumentPrintNameReferencePair(a2, (uint64_t)"/%N %R", a1 + 32, *(_QWORD *)(a1 + 24), a5, a6, a7, a8);
}

void PDFResourceSetAddEState(uint64_t a1, const void *a2)
{
  const void **v4;

  v4 = *(const void ***)(a1 + 40);
  if (!v4)
  {
    v4 = CGOrderedSetCreate();
    *(_QWORD *)(a1 + 40) = v4;
  }
  CGOrderedSetAddValue((CFSetRef *)v4, a2);
}

void *shape_empty()
{
  return &the_empty_shape;
}

BOOL shape_data_valid(_DWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  v2 = 0;
  if (a1 && a2 >= 0xC)
  {
    v3 = a2 >> 2;
    v4 = (a2 >> 2) - 1;
    if ((v4 & 1) != 0 || *a1 != 0x80000000 || a1[v4] != 0x7FFFFFFF)
      return 0;
    v5 = (int)a1[1];
    if (v4 == v5)
      return ((v3 - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0;
    if ((_DWORD)v5 != 2)
      return 0;
    if (a2 < 0x10)
    {
      return 1;
    }
    else
    {
      v6 = 2;
      v7 = 2;
      do
      {
        v2 = 0;
        v8 = v6;
        v9 = a1[v7 + 1];
        if ((v9 & 1) != 0 || (v9 - 1024) < 0xFFFFFC02)
          break;
        v10 = v7;
        v11 = __OFADD__(v7, v9);
        v7 += v9;
        if (v11 || v3 <= v7)
          return 0;
        v6 = v7;
        if (v9 != 2 && v4 == v7)
          return 0;
        if (v4 > v7)
        {
          v13 = a1[v7];
          if (v13 == 0x7FFFFFFF || v13 <= a1[v8])
            return 0;
        }
        v14 = v10 + 2;
        if ((int)v10 + 2 < v7)
        {
          v15 = a1[v14];
          while (1)
          {
            v16 = a1[v14 + 1];
            if (v16 <= v15)
              return 0;
            if (v14 + 2 >= v7)
              break;
            v2 = 0;
            v15 = a1[v14 + 2];
            v14 += 2;
            if (v15 <= v16)
              return v2;
          }
        }
        v2 = 1;
      }
      while (v4 > v7);
    }
  }
  return v2;
}

double shape_alloc_bounds(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  char *v9;
  double result;

  if (a5 >= 2147483646)
    v5 = 2147483646;
  else
    v5 = a5;
  if (a3 == 0x80000000 || a3 == -2147483647)
    v6 = -2147483647;
  else
    v6 = a3;
  if (a2 < a4 && v6 < v5)
  {
    v9 = (char *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
    *(_QWORD *)v9 = 0x280000000;
    *((_DWORD *)v9 + 2) = v6;
    *((_DWORD *)v9 + 3) = 4;
    *((_DWORD *)v9 + 4) = a2;
    *((_DWORD *)v9 + 5) = a4;
    *((_DWORD *)v9 + 6) = v5;
    result = NAN;
    *(_QWORD *)(v9 + 28) = 0x7FFFFFFF00000002;
  }
  return result;
}

uint64_t rect_to_bounds_16910(signed int *a1, signed int *a2, signed int *a3, signed int *a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  signed int v10;
  signed int v11;
  double v12;
  double v13;
  double v14;
  signed int v15;
  signed int v16;

  v8 = -0.0;
  if (a7 < 0.0)
    v8 = a7;
  v9 = a5 + v8;
  if (a7 < 0.0)
    a7 = -a7;
  v10 = vcvtmd_s64_f64(v9 + 0.00390625);
  v11 = vcvtpd_s64_f64(a7 + v9 + -0.00390625);
  if (v10 >= v11)
    return 0xFFFFFFFFLL;
  *a1 = v10;
  *a3 = v11;
  v12 = -a8;
  v13 = -0.0;
  if (a8 < 0.0)
    v13 = a8;
  v14 = a6 + v13;
  if (a8 >= 0.0)
    v12 = a8;
  v15 = vcvtmd_s64_f64(v14 + 0.00390625);
  v16 = vcvtpd_s64_f64(v12 + v14 + -0.00390625);
  if (v15 >= v16)
    return 0xFFFFFFFFLL;
  *a2 = v15;
  *a4 = v16;
  return 1;
}

int *shape_union_with_bounds(int *a1, int a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a5 >= 2147483646)
    v5 = 2147483646;
  else
    v5 = a5;
  if (a3 == 0x80000000 || a3 == -2147483647)
    v6 = -2147483647;
  else
    v6 = a3;
  if (a2 >= a4 || v6 >= v5)
    return shape_copy(a1);
  v8 = 0x280000000;
  v9 = v6;
  v10 = 4;
  v11 = a2;
  v12 = a4;
  v13 = v5;
  v14 = 0x7FFFFFFF00000002;
  return shape_union((uint64_t)a1, a1, (int *)&v8);
}

_DWORD *shape_copy(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  signed int v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    if (*result == 0x80000000 && (v2 = result[1], (int)v2 >= 1))
    {
      result = &the_empty_shape;
      if (v1 != (_DWORD *)&the_empty_shape && v1[v2] != 0x7FFFFFFF)
      {
        v3 = shape_length((uint64_t)v1);
        if (v3 >= 4)
        {
          v4 = v3;
          result = malloc_type_malloc((4 * v3 + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
          v5 = 0;
          do
          {
            result[v5] = v1[v5];
            ++v5;
          }
          while (v4 != v5);
        }
        else
        {
          return &the_empty_shape;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t shape_length(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;

  if (*(_DWORD *)a1 == 0x80000000 && *(_DWORD *)(a1 + 4) == 4 && *(_DWORD *)(a1 + 16) == 0x7FFFFFFF)
    return 5;
  if ((_UNKNOWN *)a1 == &the_empty_shape)
    return 3;
  v2 = (_DWORD *)(a1 + 4 * *(int *)(a1 + 4));
  if (*v2 == 0x7FFFFFFF)
    return 3;
  do
  {
    v3 = v2;
    v2 += (int)v2[1];
  }
  while (*v2 != 0x7FFFFFFF);
  return (((unint64_t)v3 - a1) >> 2) + 3;
}

_DWORD *shape_alloc_data(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _DWORD *result;
  unint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  if (*(_DWORD *)a2 != 0x80000000)
    return 0;
  v4 = *(unsigned int *)(a2 + 4);
  if ((int)v4 < 1)
    return 0;
  result = &the_empty_shape;
  if ((_UNKNOWN *)a2 != &the_empty_shape && *(_DWORD *)(a2 + 4 * v4) != 0x7FFFFFFF && a3 >= 0x10)
  {
    v6 = a3 >> 2;
    if (*(_DWORD *)(a2 + 4 * (a3 >> 2) - 4) == 0x7FFFFFFF)
    {
      result = malloc_type_malloc(((a3 & 0xFFFFFFFFFFFFFFFCLL) + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
      v7 = 0;
      do
      {
        result[v7] = *(_DWORD *)(a2 + 4 * v7);
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return result;
}

BOOL shape_is_empty(uint64_t a1)
{
  return (_UNKNOWN *)a1 == &the_empty_shape || *(_DWORD *)(a1 + 4 * *(int *)(a1 + 4)) == 0x7FFFFFFF;
}

void shape_free(int a1, void *a2)
{
  if (a2)
  {
    if (a2 != &the_empty_shape)
      free(a2);
  }
}

uint64_t shape_count(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  v1 = (_DWORD *)(a1 + 4 * *(int *)(a1 + 4));
  if (*v1 == 0x7FFFFFFF)
    return 0;
  v2 = (int)v1[1];
  v3 = &v1[v2];
  if (*v3 == 0x7FFFFFFF)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + (int)v2 / 2 - 1);
    v2 = (int)v3[1];
    v3 += v2;
  }
  while (*v3 != 0x7FFFFFFF);
  return result;
}

BOOL shape_is_rectangular(uint64_t a1)
{
  if ((_UNKNOWN *)a1 == &the_empty_shape || *(_DWORD *)(a1 + 4 * *(int *)(a1 + 4)) == 0x7FFFFFFF)
    return 1;
  if (*(_DWORD *)(a1 + 12) == 4 && *(_DWORD *)(a1 + 28) == 2)
    return *(_DWORD *)(a1 + 32) == 0x7FFFFFFF;
  return 0;
}

uint64_t shape_contains_point(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  _DWORD *v10;
  _DWORD *v11;

  if (result)
  {
    v3 = result;
    if (*(_DWORD *)result != 0x80000000)
      return 0;
    result = 0;
    if ((_UNKNOWN *)v3 == &the_empty_shape)
      return result;
    v4 = *(unsigned int *)(v3 + 4);
    if ((int)v4 < 1)
      return result;
    v5 = (_DWORD *)(v3 + 4 * v4);
    if (*v5 == 0x7FFFFFFF)
      return 0;
    v6 = (int)v5[1];
    v7 = &v5[v6];
    v8 = *v7;
    if (*v5 > a3 || v8 == 0x7FFFFFFF)
      return 0;
    while (1)
    {
      v10 = v7;
      if (v8 > a3 && (_DWORD)v6 != 2)
        break;
LABEL_18:
      result = 0;
      if (v8 <= a3)
      {
        v6 = (int)v7[1];
        v7 += v6;
        v8 = *v7;
        v5 = v10;
        if (*v7 != 0x7FFFFFFF)
          continue;
      }
      return result;
    }
    v11 = v5 + 2;
    while (*v11 > a2 || v11[1] <= a2)
    {
      v11 += 2;
      if (v11 == v7)
        goto LABEL_18;
    }
    return 1;
  }
  return result;
}

uint64_t shape_contains_bounds(unint64_t a1, int a2, signed int a3, int a4, signed int a5)
{
  uint64_t v5;
  uint64_t v6;
  signed int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v12;

  if (a2 >= a4)
    return 0;
  v5 = 0;
  if (a1 && (_UNKNOWN *)a1 != &the_empty_shape && a3 < a5)
  {
    if (*(_DWORD *)a1 == 0x80000000)
    {
      v6 = *(unsigned int *)(a1 + 4);
      if ((int)v6 >= 1 && *(_DWORD *)(a1 + 4 * v6) != 0x7FFFFFFF)
      {
        v8 = 0x80000000;
        while (a3 >= v8)
        {
          v9 = a1;
          v10 = *(int *)(a1 + 4);
          a1 += 4 * v10;
          v8 = *(_DWORD *)a1;
          if (a3 < *(_DWORD *)a1 && (int)v10 >= 3)
          {
            v12 = (_DWORD *)(v9 + 8);
            while (*v12 > a2 || v12[1] < a4)
            {
              v12 += 2;
              if ((unint64_t)v12 >= a1)
                goto LABEL_22;
            }
            a3 = *(_DWORD *)a1;
            if (v8 >= a5)
              return 1;
          }
LABEL_22:
          v5 = 0;
          if (v8 == 0x7FFFFFFF)
            return v5;
        }
      }
    }
    return 0;
  }
  return v5;
}

int *shape_enclose_with_bounds(uint64_t a1, int a2, signed int a3, signed int a4, int a5)
{
  void *v5;
  uint64_t v7;
  int *v13;
  int *v14;
  _BYTE v15[12];
  _DWORD v16[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = &the_empty_shape;
  if ((_UNKNOWN *)a1 != &the_empty_shape && a1 != 0 && *(_DWORD *)a1 == 0x80000000)
  {
    v7 = *(unsigned int *)(a1 + 4);
    if ((int)v7 >= 1 && *(_DWORD *)(a1 + 4 * v7) != 0x7FFFFFFF && a2 < a4 && a3 < a5)
    {
      *(_QWORD *)v15 = 0x280000000;
      *(_DWORD *)&v15[8] = a3;
      v16[0] = 4;
      v16[1] = a2;
      v16[2] = a4;
      v16[3] = a5;
      v17 = 0x7FFFFFFF00000002;
      v13 = shape_intersect(a1, (int *)a1, (int *)v15);
      if (v13 != (int *)&the_empty_shape)
      {
        v14 = v13;
        if (shape_bounds((uint64_t)v13, (int *)v15, &v15[4], (signed int *)&v15[8], v16) == 9
          && *(_DWORD *)v15 == a2
          && *(_QWORD *)&v15[4] == __PAIR64__(a4, a3)
          && v16[0] == a5)
        {
          if (v14)
            free(v14);
          return 0;
        }
        else
        {
          return v14;
        }
      }
    }
  }
  return (int *)v5;
}

int *shape_intersect(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  int *result;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  _DWORD *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int *v36;
  int *v37;

  if (!a2)
    return 0;
  v3 = a2;
  if (*a2 != 0x80000000)
    return 0;
  v4 = a3;
  result = 0;
  if (!a3)
    return result;
  v6 = a2[1];
  if ((int)v6 < 1)
    return result;
  if (*a3 != 0x80000000)
    return 0;
  v7 = a3[1];
  if ((int)v7 < 1)
    return 0;
  if (a2[v6] == 0x7FFFFFFF || a3[v7] == 0x7FFFFFFF)
    return (int *)&the_empty_shape;
  result = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (result)
  {
    v8 = result;
    if (*v3 == 0x7FFFFFFF)
    {
      v9 = 512;
      v10 = result;
LABEL_13:
      *v8 = 0x7FFFFFFF;
      return final_check(v10, v9, v8 - v10 + 1);
    }
    v36 = 0;
    v11 = 0;
    v12 = 0;
    v9 = 512;
    v10 = result;
    while (1)
    {
      if (*v4 == 0x7FFFFFFF)
        goto LABEL_13;
      v13 = v4;
      if (v8 - v10 + 4 > v9)
      {
        v14 = 2 * v9;
        v15 = (int *)malloc_type_realloc(v10, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
        v16 = (_DWORD *)((char *)v12 + (char *)v15 - (char *)v10);
        if (!v12)
          v16 = 0;
        if (v15 != v10)
        {
          v8 = (int *)((char *)v8 + (char *)v15 - (char *)v10);
          v12 = v16;
          v10 = v15;
        }
        v9 = v14;
      }
      if (!v10)
        return 0;
      v17 = *v3;
      v18 = *v13;
      if (*v13 >= *v3)
      {
        if (v17 == 0x7FFFFFFF)
        {
          v19 = v3;
          v3 = v11;
        }
        else
        {
          *v8 = v17;
          v19 = &v3[v3[1]];
        }
        if (v17 < v18 || (v18 = *v13, *v13 == 0x7FFFFFFF))
        {
          v20 = v3;
          v3 = v19;
          v4 = v13;
          v13 = v36;
          goto LABEL_32;
        }
      }
      else
      {
        v19 = v3;
        v3 = v11;
      }
      *v8 = v18;
      v4 = &v13[v13[1]];
      v20 = v3;
      v3 = v19;
LABEL_32:
      v36 = v13;
      v37 = v20;
      v21 = v20 + 2;
      v22 = (char *)(v8 + 1);
      v8 += 2;
      if (v20 + 2 != v3)
      {
        v23 = v13 + 2;
        if (v13 + 2 != v4)
        {
          v24 = 0;
          do
          {
            if (v8 - v10 + 4 > v9)
            {
              v25 = 2 * v9;
              result = (int *)malloc_type_realloc(v10, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
              v26 = (char *)result - (char *)v10;
              if (result == v10)
              {
                v9 = v25;
              }
              else
              {
                if (v12)
                  v12 = (_DWORD *)((char *)v12 + v26);
                else
                  v12 = 0;
                if (!result)
                  return result;
                v8 = (int *)((char *)v8 + v26);
                v22 += v26;
                v9 = v25;
                v10 = result;
              }
            }
            v27 = *v21;
            v28 = *v23;
            if (*v21 <= *v23)
            {
              v29 = v24 ^ 1;
              ++v21;
              *v8 = v27;
              v28 = *v23;
            }
            else
            {
              v29 = v24;
            }
            if (v28 <= v27)
            {
              v29 = v29 ^ 2;
              ++v23;
              *v8 = v28;
            }
            v31 = (_DWORD)v24 == 3 || (_DWORD)v29 == 3;
            v8 += v31;
            if (v21 == v3)
              break;
            v24 = v29;
          }
          while (v23 != v4);
        }
      }
      v32 = ((unint64_t)((char *)v8 - v22) >> 2) + 1;
      *(_DWORD *)v22 = v32;
      if (v12 && v32 == *v12)
      {
        if (((unint64_t)((char *)v8 - v22) >> 2) != 1)
        {
          v33 = 1;
          while (&v22[v33 * 4] != (char *)v8)
          {
            v34 = v12[v33];
            v35 = *(_DWORD *)&v22[v33 * 4];
            ++v33;
            if (v34 != v35)
              goto LABEL_63;
          }
        }
        v8 = (int *)(v22 - 4);
      }
      else
      {
LABEL_63:
        v12 = v22;
      }
      v11 = v37;
      if (*v3 == 0x7FFFFFFF)
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t shape_intersects_shape(signed int *a1, signed int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  signed int *v6;
  signed int *v7;
  signed int v8;
  signed int v9;
  signed int *v10;
  int v11;
  signed int *v12;
  signed int *v13;
  signed int v14;
  BOOL v15;

  if (!a1 || *a1 != 0x80000000)
    return 0;
  v2 = 0;
  if (a2)
  {
    v3 = a1[1];
    if ((int)v3 >= 1)
    {
      if (*a2 != 0x80000000)
        return 0;
      v4 = a2[1];
      if ((int)v4 < 1 || a1[v3] == 0x7FFFFFFF || a2[v4] == 0x7FFFFFFF)
        return 0;
      v6 = 0;
      v7 = 0;
      v8 = 0x80000000;
      do
      {
        v9 = *a2;
        if (*a2 == 0x7FFFFFFF)
          return 0;
        if (v9 >= v8)
        {
          v10 = &a1[a1[1]];
          v7 = a1;
          if (v8 < v9)
          {
            v7 = a1;
            goto LABEL_18;
          }
        }
        else
        {
          v10 = a1;
        }
        v6 = a2;
        a2 += a2[1];
LABEL_18:
        a1 = v10;
        v11 = 0;
        v12 = v7 + 2;
        v13 = v6 + 2;
        while (v12 != a1 && v13 != a2)
        {
          v14 = *v12;
          v11 ^= *v12 <= *v13;
          v12 += *v12 <= *v13;
          v15 = *v13 <= v14;
          if (v15)
            v11 ^= 2u;
          v13 += v15;
          v2 = 1;
          if (v11 == 3)
            return v2;
        }
        v2 = 0;
        v8 = *a1;
      }
      while (*a1 != 0x7FFFFFFF);
    }
  }
  return v2;
}

int32x2_t *shape_offset(uint64_t a1, int32x2_t *a2, unsigned int a3, __int32 a4)
{
  int v7;
  int32x2_t *result;
  int32x2_t *v9;
  __int32 v10;
  int32x2_t *v11;
  __int32 v12;
  int32x2_t v13;
  uint64_t v14;
  int32x2_t *v15;
  int32x2_t *v16;
  int32x2_t *v17;
  int32x2_t v18;

  v7 = shape_length((uint64_t)a2);
  if (v7 <= 3)
    goto LABEL_4;
  if (v7 == 5)
  {
    a3 += a2[1].u32[0];
    a4 += a2[1].i32[1];
LABEL_4:
    if (a4 | a3)
    {
      result = (int32x2_t *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
      *result = (int32x2_t)0x480000000;
      result[1].i32[0] = a3;
      result[1].i32[1] = a4;
      v9 = result + 2;
LABEL_6:
      v9->i32[0] = 0x7FFFFFFF;
      return result;
    }
    return (int32x2_t *)&the_empty_shape;
  }
  result = (int32x2_t *)malloc_type_malloc((4 * v7 + 511) & 0x7FFFFFE00, 0x705560E0uLL);
  if (result)
  {
    result->i32[0] = a2->i32[0];
    result->i32[1] = a2->i32[1];
    v12 = a2[1].i32[0];
    v11 = a2 + 1;
    v10 = v12;
    v9 = result + 1;
    if (v12 != 0x7FFFFFFF)
    {
      v13 = vdup_n_s32(a3);
      do
      {
        v14 = v11->i32[1];
        v9->i32[0] = v10 + a4;
        v9->i32[1] = v14;
        v15 = (int32x2_t *)((char *)v11 + 4 * v14);
        if ((int)v14 >= 3)
        {
          v16 = v11 + 1;
          v17 = v9 + 1;
          do
          {
            v18 = *v16++;
            *v17++ = vadd_s32(v18, v13);
          }
          while (v16 < v15);
        }
        v9 = (int32x2_t *)((char *)v9 + 4 * v14);
        v10 = v15->i32[0];
        v11 = (int32x2_t *)((char *)v11 + 4 * v14);
      }
      while (v15->i32[0] != 0x7FFFFFFF);
    }
    goto LABEL_6;
  }
  return result;
}

int *shape_intersect_with_bounds(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int *result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a6 >= 2147483646)
    v6 = 2147483646;
  else
    v6 = a6;
  if (a4 == 0x80000000 || a4 == -2147483647)
    v7 = -2147483647;
  else
    v7 = a4;
  result = (int *)&the_empty_shape;
  if (a3 < a5 && v7 < v6)
  {
    v9 = 0x280000000;
    v10 = v7;
    v11 = 4;
    v12 = a3;
    v13 = a5;
    v14 = v6;
    v15 = 0x7FFFFFFF00000002;
    return shape_intersect((uint64_t)&the_empty_shape, a2, (int *)&v9);
  }
  return result;
}

int *shape_difference(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  int *result;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  char *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int *v38;
  int *v39;

  if (!a2)
    return 0;
  v3 = a2;
  if (*a2 != 0x80000000)
    return 0;
  v4 = a3;
  result = 0;
  if (!a3)
    return result;
  v6 = a2[1];
  if ((int)v6 < 1)
    return result;
  if (*a3 != 0x80000000)
    return 0;
  v7 = a3[1];
  if ((int)v7 < 1)
    return 0;
  if (a2[v6] == 0x7FFFFFFF)
    return (int *)&the_empty_shape;
  if (a3[v7] == 0x7FFFFFFF)
    return shape_copy(a2);
  result = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (result)
  {
    v8 = result;
    if (*v3 == 0x7FFFFFFF)
    {
      v9 = 512;
      v10 = result;
LABEL_14:
      *v10 = 0x7FFFFFFF;
      return final_check(v8, v9, v10 - v8 + 1);
    }
    v38 = 0;
    v11 = 0;
    v12 = 0;
    v9 = 512;
    v10 = result;
    while (1)
    {
      v13 = v4;
      if (v10 - v8 + 4 > v9)
      {
        v14 = 2 * v9;
        v15 = (int *)malloc_type_realloc(v8, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
        v16 = &v12[(char *)v15 - (char *)v8];
        if (!v12)
          v16 = 0;
        if (v15 != v8)
        {
          v10 = (int *)((char *)v10 + (char *)v15 - (char *)v8);
          v12 = v16;
          v8 = v15;
        }
        v9 = v14;
      }
      if (!v8)
        return 0;
      v17 = *v3;
      v18 = *v13;
      if (*v13 >= *v3)
      {
        if (v17 == 0x7FFFFFFF)
        {
          v19 = v3;
          v3 = v11;
        }
        else
        {
          *v10 = v17;
          v19 = &v3[v3[1]];
        }
        if (v17 < v18 || (v18 = *v13, *v13 == 0x7FFFFFFF))
        {
          v20 = v3;
          v3 = v19;
          v4 = v13;
          goto LABEL_32;
        }
      }
      else
      {
        v19 = v3;
        v3 = v11;
      }
      *v10 = v18;
      v4 = &v13[v13[1]];
      v20 = v3;
      v3 = v19;
      v38 = v13;
LABEL_32:
      v39 = v20;
      v21 = v20 + 2;
      v22 = (char *)(v10 + 1);
      v10 += 2;
      if (v20 + 2 != v3)
      {
        v23 = 0;
        v24 = v38 + 2;
        do
        {
          if (v10 - v8 + 4 > v9)
          {
            v25 = 2 * v9;
            result = (int *)malloc_type_realloc(v8, (8 * v9 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
            v26 = (char *)result - (char *)v8;
            if (result == v8)
            {
              v9 = v25;
            }
            else
            {
              if (v12)
                v12 += v26;
              else
                v12 = 0;
              if (!result)
                return result;
              v10 = (int *)((char *)v10 + v26);
              v22 += v26;
              v9 = v25;
              v8 = result;
            }
          }
          v27 = *v21;
          v28 = *v24;
          if (*v21 <= *v24 || v24 == v4)
          {
            v30 = v23 ^ 1;
            ++v21;
            *v10 = v27;
            v28 = *v24;
          }
          else
          {
            v30 = v23;
          }
          if (v28 <= v27 && v24 != v4)
          {
            v30 = v30 ^ 2;
            ++v24;
            *v10 = v28;
          }
          v33 = (_DWORD)v23 == 1 || (_DWORD)v30 == 1;
          v10 += v33;
          v23 = v30;
        }
        while (v21 != v3);
      }
      v34 = ((unint64_t)((char *)v10 - v22) >> 2) + 1;
      *(_DWORD *)v22 = v34;
      if (v12 && v34 == *(_DWORD *)v12)
      {
        if (((unint64_t)((char *)v10 - v22) >> 2) != 1)
        {
          v35 = 4;
          while (&v22[v35] != (char *)v10)
          {
            v36 = *(_DWORD *)&v12[v35];
            v37 = *(_DWORD *)&v22[v35];
            v35 += 4;
            if (v36 != v37)
              goto LABEL_67;
          }
        }
        v10 = (int *)(v22 - 4);
        v34 = ((unint64_t)(v22 - 4 - v12) >> 2) + 1;
      }
      else
      {
LABEL_67:
        v12 = v22;
      }
      v11 = v39;
      *(_DWORD *)v12 = v34;
      if (*v3 == 0x7FFFFFFF)
        goto LABEL_14;
    }
  }
  return result;
}

int *shape_xor(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char *v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int *v41;
  int *v42;
  char *v43;
  _DWORD *v44;

  if (!a2)
    return 0;
  v3 = a2;
  if (*a2 != 0x80000000)
    return 0;
  v4 = a3;
  if (!a3)
    return 0;
  v5 = a2[1];
  if ((int)v5 < 1)
    return 0;
  if (*a3 != 0x80000000)
    return 0;
  v6 = a3[1];
  if ((int)v6 < 1)
    return 0;
  if (a2[v5] == 0x7FFFFFFF)
  {
    v7 = a3;
    return shape_copy(v7);
  }
  if (a3[v6] == 0x7FFFFFFF)
  {
    v7 = a2;
    return shape_copy(v7);
  }
  v9 = (char *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = 0;
  v41 = 0;
  v42 = 0;
  v12 = 512;
  v13 = v9;
  while (1)
  {
    v14 = v4;
    if (*v3 == 0x7FFFFFFF && *v4 == 0x7FFFFFFF)
      break;
    if (((v10 - v13) >> 2) + 4 <= v12)
    {
      v44 = v11;
    }
    else
    {
      v15 = 2 * v12;
      v16 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
      v17 = (_DWORD *)((char *)v11 + v16 - v13);
      if (!v11)
        v17 = 0;
      if (v16 != v13)
      {
        v10 += v16 - v13;
        v11 = v17;
      }
      v44 = v11;
      if (v16 != v13)
        v13 = v16;
      v12 = v15;
    }
    if (!v13)
      return 0;
    v18 = *v3;
    v19 = *v14;
    if (*v14 < *v3)
    {
      v20 = v3;
      v3 = v42;
LABEL_34:
      *(_DWORD *)v10 = v19;
      v4 = &v14[v14[1]];
      v21 = v3;
      v3 = v20;
      goto LABEL_35;
    }
    if (v18 == 0x7FFFFFFF)
    {
      v20 = v3;
      v3 = v42;
    }
    else
    {
      *(_DWORD *)v10 = v18;
      v20 = &v3[v3[1]];
    }
    if (v18 >= v19)
    {
      v19 = *v14;
      if (*v14 != 0x7FFFFFFF)
        goto LABEL_34;
    }
    v21 = v3;
    v3 = v20;
    v4 = v14;
    v14 = v41;
LABEL_35:
    v41 = v14;
    v42 = v21;
    v22 = v21 + 2;
    v23 = v14 + 2;
    v43 = v10 + 4;
    v10 += 8;
    v24 = v14 + 2 != v4;
    v25 = v21 + 2 != v3;
    if (v21 + 2 != v3 || v23 != v4)
    {
      v26 = 0;
      while (1)
      {
        if (((v10 - v13) >> 2) + 4 > v12)
        {
          v27 = 2 * v12;
          v28 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
          v29 = v28 - v13;
          if (v28 == v13)
          {
            v12 = v27;
          }
          else
          {
            v30 = (_DWORD *)((char *)v44 + v29);
            if (!v44)
              v30 = 0;
            v44 = v30;
            if (!v28)
              return 0;
            v10 += v29;
            v43 += v29;
            v12 = v27;
            v13 = v28;
          }
        }
        v31 = *v22;
        v32 = *v23;
        v33 = v23 == v4 || v31 <= v32;
        if (!v33 || !v25)
        {
          v34 = v26;
          v35 = v22;
        }
        else
        {
          v34 = v26 ^ 1;
          *(_DWORD *)v10 = v31;
          v35 = v22 + 1;
          v31 = *v22;
          v32 = *v23;
        }
        v36 = v32 <= v31 || v22 == v3;
        if (v36 && v24)
        {
          v34 = v34 ^ 2;
          ++v23;
          *(_DWORD *)v10 = v32;
        }
        v10 += 4 * (((v26 - 1) < 2) ^ ((v34 - 1) < 2));
        v24 = v23 != v4;
        v22 = v35;
        v26 = v34;
        v25 = v35 != v3;
        if (v35 == v3)
        {
          v22 = v35;
          v26 = v34;
          if (v23 == v4)
            break;
        }
      }
    }
    v11 = v44;
    v37 = ((unint64_t)(v10 - v43) >> 2) + 1;
    *(_DWORD *)v43 = v37;
    if (v44 && v37 == *v44)
    {
      if (((unint64_t)(v10 - v43) >> 2) != 1)
      {
        v38 = 1;
        while (&v43[v38 * 4] != v10)
        {
          v39 = v44[v38];
          v40 = *(_DWORD *)&v43[v38 * 4];
          ++v38;
          if (v39 != v40)
            goto LABEL_69;
        }
      }
      v10 = v43 - 4;
      v37 = ((unint64_t)(v43 - 4 - (char *)v44) >> 2) + 1;
    }
    else
    {
LABEL_69:
      v11 = v43;
    }
    *v11 = v37;
  }
  *(_DWORD *)v10 = 0x7FFFFFFF;
  return final_check((int *)v13, v12, ((v10 - v13) >> 2) + 1);
}

void shape_inset(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int *v4;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  _DWORD *v22;
  unsigned int v23;
  int *v24;
  int v25;
  int *v26;
  _DWORD *v27;
  int *v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (int *)a2;
  if (!(a4 | a3)
    || (v45 = 0, v46 = 0, v7 = shape_bounds(a2, (int *)&v46 + 1, &v46, (signed int *)&v45 + 1, &v45), (int)v7 <= 3))
  {
    shape_copy(v4);
    return;
  }
  v9 = v46;
  v8 = HIDWORD(v46);
  v10 = HIDWORD(v46) + a3;
  v11 = v46 + a4;
  LODWORD(v46) = v46 + a4;
  HIDWORD(v46) = v10;
  v13 = v45;
  v12 = HIDWORD(v45);
  v14 = HIDWORD(v45) - a3;
  v15 = v45 - a4;
  LODWORD(v45) = v45 - a4;
  HIDWORD(v45) = v14;
  if (v10 >= v14 || v11 >= v15)
  {
    v17 = v12 + v8 + (v12 + v8 < 0);
    v18 = v13 + v9;
    v19 = v18 < 0;
    goto LABEL_9;
  }
  v23 = v7;
  if ((_DWORD)v7 == 9)
  {
    shape_alloc_bounds(v7, v10, v11, v14, v15);
    return;
  }
  if (a3)
  {
    v24 = (int *)malloc_type_malloc((4 * v7 + 511) & 0x7FFFFFE00, 0x705560E0uLL);
    if (v24)
    {
      v25 = *v4;
      v26 = v24;
      if (*v4 != 0x7FFFFFFF)
      {
        v27 = 0;
        v28 = v24;
        do
        {
          v29 = v28 + 2;
          v30 = v4[1];
          v31 = v4 + 2;
          v4 += v30;
          if (a3 <= 0)
          {
            if ((int)v30 >= 3)
            {
              v34 = -2147483647;
              v26 = v28 + 2;
              do
              {
                v35 = v31[1];
                v36 = *v31 + a3;
                if (v36 <= v34)
                {
                  v37 = v26 - 1;
                }
                else
                {
                  *v26 = v36;
                  v37 = v26 + 1;
                }
                v34 = v35 - a3;
                *v37 = v35 - a3;
                v26 = v37 + 1;
                v31 += 2;
              }
              while (v31 < v4);
              goto LABEL_34;
            }
          }
          else if ((int)v30 >= 3)
          {
            v26 = v28 + 2;
            do
            {
              v32 = *v31 + a3;
              v33 = v31[1] - a3;
              if (v32 < v33)
              {
                *v26 = v32;
                v26[1] = v33;
                v26 += 2;
              }
              v31 += 2;
            }
            while (v31 < v4);
            goto LABEL_34;
          }
          v26 = v28 + 2;
LABEL_34:
          v38 = (unint64_t)((char *)v26 - (char *)v28) >> 2;
          *v28 = v25;
          v28[1] = v38;
          v39 = v28 + 1;
          if (v27 && *v27 == (_DWORD)v38)
          {
            if ((_DWORD)v38 != 2)
            {
              v40 = 0;
              while (&v29[v40] != v26)
              {
                v41 = v27[v40 + 1];
                v42 = v29[v40++];
                if (v41 != v42)
                  goto LABEL_41;
              }
            }
            v39 = v27;
            v26 = v28;
          }
LABEL_41:
          v25 = *v4;
          v27 = v39;
          v28 = v26;
        }
        while (*v4 != 0x7FFFFFFF);
      }
      *v26 = 0x7FFFFFFF;
      v43 = final_check(v24, v23, v26 - v24 + 1);
      if (!a4)
        goto LABEL_50;
    }
    else
    {
      v43 = 0;
      if (!a4)
      {
LABEL_50:
        v44 = v43;
        goto LABEL_51;
      }
    }
    if (v43 != (int *)&the_empty_shape)
    {
      v44 = shape_vinset(v43, a4);
      if (v43)
        free(v43);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  v44 = shape_vinset(v4, a4);
LABEL_51:
  if (v44 != (int *)&the_empty_shape)
    return;
  v17 = HIDWORD(v45) + HIDWORD(v46);
  if (HIDWORD(v45) + HIDWORD(v46) < 0 != __OFADD__(HIDWORD(v45), HIDWORD(v46)))
    ++v17;
  v18 = v45 + v46;
  v19 = ((int)v45 + (int)v46 < 0) ^ __OFADD__((_DWORD)v45, (_DWORD)v46);
LABEL_9:
  if (v19)
    ++v18;
  v20 = v18 >> 1;
  if ((v18 >> 1) | (v17 >> 1))
  {
    v21 = v17 >> 1;
    v22 = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
    *(_QWORD *)v22 = 0x480000000;
    v22[2] = v21;
    v22[3] = v20;
    v22[4] = 0x7FFFFFFF;
  }
}

int *shape_vinset(int *a1, int a2)
{
  int *v2;
  int v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  _BOOL4 v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int *v22;
  int v23;
  int v24;
  int *v25;
  int v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int *v34;
  int *v35;

  v2 = a1;
  if (!a2)
    return a1;
  if (a1 == (int *)&the_empty_shape || a1 == 0)
    return a1;
  v4 = a2;
  v5 = 0;
  v6 = 0;
  v7 = a1;
  while (1)
  {
    if (v4 >= 0)
      v8 = v4;
    else
      v8 = -v4;
    v9 = 0x7FFFFFFF;
    v10 = (char *)v7;
    while (1)
    {
      v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 == 0x7FFFFFFF)
        break;
      v12 = *((int *)v10 + 1);
      v10 += 4 * v12;
      if ((int)v12 >= 3)
      {
        v13 = *(_DWORD *)v10 - v11;
        if (v13 < v9)
          v9 = v13;
        if (v13 < v8)
          v8 = v13;
      }
    }
    v14 = (unint64_t)(v10 - (char *)v7) >> 2;
    v15 = v14 + 1;
    v16 = v9 >> 1;
    v18 = v9 > 0 && v8 > v16;
    if (v4 <= -v8)
      v19 = -v8;
    else
      v19 = v4;
    if (v8 < v16)
      v16 = v8;
    if (v9 > 1)
      v8 = v16;
    if (v8 >= v4)
      v8 = v4;
    v20 = v4 >= 1 ? v8 : v19;
    v21 = v4 < 1 && v18;
    if (!v6)
      break;
    if (v5 >= v15)
      goto LABEL_45;
    v5 = (v14 & 0xFFFFFE00) + 512;
    a1 = (int *)malloc_type_realloc(v6, 8 * v5, 0x7492344AuLL);
    if (!a1)
      goto LABEL_66;
LABEL_44:
    v6 = a1;
LABEL_45:
    v22 = &v6[v15];
    v23 = *v7;
    *v22 = *v7;
    *v6 = v23;
    v24 = v7[1];
    v22[1] = v24;
    v6[1] = v24;
    v25 = v7 + 2;
    v26 = v7[2];
    v27 = v6 + 2;
    v28 = v22 + 2;
    while (v26 != 0x7FFFFFFF)
    {
      v29 = v25[1];
      *v27 = v26 + v20;
      v27[1] = v29;
      v27 += 2;
      *v28 = v26 - v20;
      v28[1] = v29;
      v28 += 2;
      v30 = &v25[v29];
      if ((int)v29 >= 3)
      {
        v31 = v25 + 2;
        do
        {
          v32 = *v31;
          v33 = v31[1];
          v31 += 2;
          *v27 = v32;
          *v28 = v32;
          v27[1] = v33;
          v28[1] = v33;
          v28 += 2;
          v27 += 2;
        }
        while (v31 < v30);
      }
      v26 = *v30;
      v25 = v30;
    }
    *v28 = 0x7FFFFFFF;
    *v27 = 0x7FFFFFFF;
    if (v20 < 1)
    {
      a1 = shape_union((uint64_t)a1, v6, v22);
      v35 = a1;
      if (v21)
      {
        a1 = shape_union((uint64_t)a1, a1, v7);
        v34 = a1;
        if (v35 && v35 != (int *)&the_empty_shape)
          free(v35);
      }
      else
      {
        v34 = a1;
      }
    }
    else
    {
      a1 = shape_intersect((uint64_t)a1, v6, v22);
      v34 = a1;
    }
    if (v7 != v2)
      free(v7);
    v4 -= v20;
    if (v4)
    {
      if (v34 != (int *)&the_empty_shape)
      {
        v7 = v34;
        if (v34)
          continue;
      }
    }
    free(v6);
    return v34;
  }
  v5 = (v14 & 0xFFFFFE00) + 512;
  a1 = (int *)malloc_type_malloc(8 * v5, 0x705560E0uLL);
  if (a1)
    goto LABEL_44;
LABEL_66:
  if (v7 != v2)
    free(v7);
  return 0;
}

double shape_combine(int32x2_t *a1, int a2, int a3, int a4, int a5, int *a6, int a7, int a8, int a9, int a10, int32x2_t *a11)
{
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int *v22;
  int *v25;
  int v26;
  int v27;
  _BOOL4 v29;
  int *v30;
  double result;
  int *v32;
  int *v33;
  int v34;
  int v35;
  __int128 v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v12 = (int)a1;
  v13 = a9;
  v14 = a10;
  v48 = *MEMORY[0x1E0C80C00];
  if (a7 <= a2)
    v15 = a2;
  else
    v15 = a7;
  v16 = a8 < a3 || a7 < a2;
  if (a8 <= a3)
    v17 = a3;
  else
    v17 = a8;
  if (a9 > a4)
    v16 = 1;
  if (a9 >= a4)
    v13 = a4;
  v18 = a10 > a5 || v16;
  v19 = v13 - v15;
  if (v19 < 0)
    return result;
  if (a10 >= a5)
    v14 = a5;
  v21 = v14 - v17;
  if (v21 < 0)
    return result;
  v22 = a6;
  if (!a11)
  {
    v26 = v15 - a2;
    v27 = v17 - a3;
    if (a6)
      goto LABEL_29;
    if ((_DWORD)a1)
    {
      if ((int)a1 <= 0)
      {
        v36 = xmmword_185005070;
        v37 = 0;
        v38 = a4 - a2;
        v39 = a5 - a3;
        v40 = 0x7FFFFFFF00000002;
        v41 = 0x280000000;
        v42 = v27;
        v43 = 4;
        v44 = v26;
        v45 = v19 + v26;
        v46 = v21 + v27;
        v47 = 0x7FFFFFFF00000002;
        shape_difference((uint64_t)a1, (int *)&v36, (int *)&v41);
        return result;
      }
      if ((_DWORD)a1 == 1)
      {
LABEL_29:
        v18 = 0;
        v41 = 0x280000000;
        v42 = v27;
        v43 = 4;
        v44 = v26;
        v45 = v19 + v26;
        v46 = v21 + v27;
        v47 = 0x7FFFFFFF00000002;
        v25 = (int *)&v41;
        if (a6)
          goto LABEL_33;
        goto LABEL_32;
      }
      v34 = a4 - a2;
      v35 = a5 - a3;
      v26 = 0;
      v27 = 0;
    }
    else
    {
      v34 = v19 + v26;
      v35 = v21 + v27;
    }
    return shape_alloc_bounds((uint64_t)a1, v26, v27, v34, v35);
  }
  if (a7 == a2 && a8 == a3)
  {
    v25 = (int *)a11;
    if (a6)
      goto LABEL_33;
  }
  else
  {
    a1 = shape_offset((uint64_t)a1, a11, a7 - a2, a8 - a3);
    v25 = (int *)a1;
    if (v22)
      goto LABEL_33;
  }
LABEL_32:
  v36 = xmmword_185005070;
  v37 = 0;
  v38 = a4 - a2;
  v39 = a5 - a3;
  v40 = 0x7FFFFFFF00000002;
  v22 = (int *)&v36;
LABEL_33:
  v29 = v25 != (int *)a11 && v25 != (int *)&v41;
  if (v12)
  {
    if ((v12 & 0x80000000) == 0)
    {
      v30 = shape_union((uint64_t)a1, v22, v25);
      v32 = v30;
      if (v29 && v25 && v25 != (int *)&the_empty_shape)
        free(v25);
      if (v18)
      {
        v36 = xmmword_185005070;
        v37 = 0;
        v38 = a4 - a2;
        v39 = a5 - a3;
        v40 = 0x7FFFFFFF00000002;
        shape_intersect((uint64_t)v30, (int *)&v36, v32);
        if (v32)
        {
          if (v32 != (int *)&the_empty_shape)
          {
            v33 = v32;
LABEL_55:
            free(v33);
            return result;
          }
        }
      }
      return result;
    }
    shape_difference((uint64_t)a1, v22, v25);
  }
  else
  {
    shape_intersect((uint64_t)a1, v22, v25);
  }
  if (v29 && v25 && v25 != (int *)&the_empty_shape)
  {
    v33 = v25;
    goto LABEL_55;
  }
  return result;
}

_DWORD *shape_reverse_y(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _DWORD *result;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  int *v22;
  int v23;

  result = &the_empty_shape;
  if ((_UNKNOWN *)a1 != &the_empty_shape)
  {
    v11 = shape_length(a1);
    if (v11 == 5)
    {
      v12 = a4 + *(_DWORD *)(a1 + 8) * a2;
      v13 = a5 + *(_DWORD *)(a1 + 12) * a3;
      if (v13 | v12)
      {
        result = malloc_type_malloc(0x200uLL, 0x705560E0uLL);
        *(_QWORD *)result = 0x480000000;
        result[2] = v12;
        result[3] = v13;
        result[4] = 0x7FFFFFFF;
      }
      else
      {
        return &the_empty_shape;
      }
    }
    else
    {
      v14 = v11;
      result = malloc_type_malloc((4 * v11 + 511) & 0xFFFFFFFFFFFFFE00, 0x705560E0uLL);
      if (result)
      {
        v15 = &result[v14 - 1];
        *v15 = 0x7FFFFFFF;
        v16 = v15 - 1;
        v17 = *(int *)(a1 + 4);
        v18 = (int *)(a1 + 4 * v17);
        v19 = *v18;
        if (*v18 == 0x7FFFFFFF)
        {
          v20 = v16;
        }
        else
        {
          do
          {
            if ((int)v17 >= 3)
            {
              v21 = v17 - 1;
              v22 = v18 - 1;
              do
              {
                v23 = *v22--;
                *v16-- = a4 + v23 * a2;
                --v21;
              }
              while (v21 > 1);
            }
            *v16 = v17;
            v20 = v16 - 2;
            *(v16 - 1) = a5 + v19 * a3;
            v17 = v18[1];
            v18 += v17;
            v19 = *v18;
            v16 -= 2;
          }
          while (*v18 != 0x7FFFFFFF);
        }
        *(v20 - 1) = 0x80000000;
        *v20 = v17;
      }
    }
  }
  return result;
}

void CGContextSelectFont(CGContextRef c, const char *name, CGFloat size, CGTextEncoding textEncoding)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  CFStringRef v14;
  CFStringRef v15;
  CGFont *Value;
  CGFont *v17;
  CGContextRef v18;
  CGFontRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t v29;
  _BYTE v30[512];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!c)
  {
    v18 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextSelectFont", (uint64_t)v18, *(uint64_t *)&textEncoding, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v18 = c;
    goto LABEL_11;
  }
  if (!name)
  {
    CGPostError((uint64_t)"%s: font name is NULL.", 0, *(uint64_t *)&textEncoding, v4, v5, v6, v7, v8, (char)"CGContextSelectFont");
    return;
  }
  v11 = *(_QWORD *)&textEncoding;
  if (*((_QWORD *)c + 10)
    || (Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*((_QWORD *)c + 10) = Mutable) != 0))
  {
    v14 = CFStringCreateWithFormat(0, 0, CFSTR("%s/%d"), name, v11);
    if (v14)
    {
      v15 = v14;
      Value = (CGFont *)CFDictionaryGetValue(*((CFDictionaryRef *)c + 10), v14);
      if (Value)
      {
        v17 = Value;
LABEL_21:
        CFRelease(v15);
        CGContextSetFont(c, v17);
        CGContextSetFontSize(c, size);
        return;
      }
      v19 = CGFontCreateWithName((char *)name);
      if (v19)
      {
        v17 = v19;
        if ((_DWORD)v11 == 1)
        {
          (*(void (**)(_QWORD, char **, _BYTE *, uint64_t))(*((_QWORD *)v19 + 2) + 280))(*((_QWORD *)v19 + 14), CGPDFEncodingVectorMacRoman, v30, 256);
LABEL_20:
          CGFontSetEncodingVector((uint64_t)v17, (uint64_t)v30);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)c + 10), v15, v17);
          CFRelease(v17);
          goto LABEL_21;
        }
        if (!(_DWORD)v11)
        {
          v27 = 0;
          v28 = (int16x8_t)xmmword_185004910;
          v29.i64[0] = 0x8000800080008;
          v29.i64[1] = 0x8000800080008;
          do
          {
            *(int16x8_t *)&v30[v27] = v28;
            v28 = vaddq_s16(v28, v29);
            v27 += 16;
          }
          while (v27 != 512);
          goto LABEL_20;
        }
        CGPostError((uint64_t)"%s: invalid encoding %d.", v20, v21, v22, v23, v24, v25, v26, (char)"get_selected_font");
        CFRelease(v17);
      }
      CFRelease(v15);
    }
  }
}

void CGContextShowText(CGContextRef c, const char *string, size_t length)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGGlyph *v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  CGGlyph *v15;
  CGGlyph *v16;
  uint64_t v17;
  unint64_t v18;
  CGSize *v19;
  CGSize *v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t *v30;
  size_t v31;
  CGContextRef v32;
  _OWORD v33[3];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!c)
  {
    v32 = 0;
LABEL_33:
    handle_invalid_context((char)"CGContextShowText", (uint64_t)v32, length, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v32 = c;
    goto LABEL_33;
  }
  if (string && length)
  {
    v11 = (CGGlyph *)((uint64_t (*)(CGContextRef))MEMORY[0x1E0C80A78])(c);
    v15 = (CGGlyph *)((char *)v33 - v13);
    if (v12 <= 0x7FFFFFFFFFFFFFFELL)
      v16 = (CGGlyph *)((char *)v33 - v13);
    else
      v16 = 0;
    if (v12 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000066)
    {
      v11 = (CGGlyph *)malloc_type_malloc(2 * length, 0x3E7B0513uLL);
      v16 = v11;
    }
    if (v16)
    {
      MEMORY[0x1E0C80A78](v11, v14);
      v19 = (CGSize *)((char *)v33 - v17 - 15);
      if (v18 <= 0xFFFFFFFFFFFFFFELL)
        v20 = (CGSize *)((char *)v33 - v17 - 15);
      else
        v20 = 0;
      if (v18 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000066)
        v20 = (CGSize *)malloc_type_malloc(16 * length, 0x8F3D132FuLL);
      if (v20)
      {
        v21 = *(_QWORD *)(*((_QWORD *)c + 12) + 136);
        v22 = *(_QWORD **)(v21 + 8);
        if (v22)
        {
          v23 = *(double *)(v21 + 16);
          if (v23 != 0.0)
          {
            v24 = atomic_load(v22 + 4);
            if (v24)
            {
              v25 = 0;
              do
              {
                v16[v25] = *(_WORD *)(v24 + 2 * string[v25]);
                ++v25;
              }
              while (length != v25);
              v26 = vmulq_n_f64(*(float64x2_t *)((char *)c + 120), v23);
              v27 = vmulq_n_f64(*(float64x2_t *)((char *)c + 136), v23);
              v33[0] = v26;
              v33[1] = v27;
              v33[2] = *(_OWORD *)((char *)c + 152);
              CGFontGetGlyphAdvancesForStyle(v22, (uint64_t)v33, 13, (uint64_t)v16, length, (uint64_t)v20);
              v28 = *(double *)(*(_QWORD *)(*((_QWORD *)c + 12) + 136) + 24);
              if (v28 != 0.0)
              {
                v29 = vmlaq_n_f64(vmulq_f64(*(float64x2_t *)((char *)c + 136), (float64x2_t)0), *(float64x2_t *)((char *)c + 120), v28);
                v30 = (float64x2_t *)v20;
                v31 = length;
                do
                {
                  *v30 = vaddq_f64(v29, *v30);
                  ++v30;
                  --v31;
                }
                while (v31);
              }
              CGContextShowGlyphsWithAdvances(c, v16, v20, length);
            }
          }
        }
        if (v20 != v19)
          free(v20);
      }
      if (v16 != v15)
        free(v16);
    }
  }
}

void draw_glyphs_17005(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  size_t v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  CGFloat v25;
  CGRect *v26;
  _QWORD *v27;
  int *font_info;
  double v29;
  uint64_t v30;
  CGSize *p_size;
  double v32;
  CGFloat y;
  uint64_t v34;
  void (*v35)(void);
  double *p_width;
  CGFloat width;
  CGFloat x;
  CGFloat v39;
  double v40;
  CGFloat height;
  double v42;
  double v43;
  CGFloat v44;
  uint64_t v45;
  float64x2_t v46;
  CGAffineTransform transform;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v4 = a4;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(v8 + 136);
  v10 = *(double *)(v9 + 32);
  if (v10 > 0.0)
  {
    if ((*(char *)(v9 + 1) | 4) == 7)
      return;
    v11 = *(double *)(v9 + 16);
    v12 = v11 * *(double *)(a1 + 120);
    v13 = v11 * *(double *)(a1 + 128);
    v14 = v11 * *(double *)(a1 + 136);
    v15 = v11 * *(double *)(a1 + 144);
    v16 = *(double *)(v8 + 24);
    v17 = *(double *)(v8 + 32);
    v18 = *(double *)(v8 + 40);
    v19 = *(double *)(v8 + 48);
    v20 = (v13 * v19 + v12 * v17) * (v13 * v19 + v12 * v17) + (v13 * v18 + v12 * v16) * (v13 * v18 + v12 * v16);
    v21 = (v15 * v19 + v14 * v17) * (v15 * v19 + v14 * v17) + (v15 * v18 + v14 * v16) * (v15 * v18 + v14 * v16);
    v22 = v10 * v10;
    if (v20 <= v22 || v21 <= v22)
    {
      v45 = *(_QWORD *)(v9 + 16);
      v24 = *(double *)(a1 + 152);
      v25 = *(double *)(a1 + 160);
      v26 = (CGRect *)malloc_type_malloc(32 * a4, 0x2062DE7BuLL);
      v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 136) + 8);
      font_info = (int *)get_font_info(v27);
      v44 = v24;
      if (font_info)
        v29 = (double)font_info[2];
      else
        v29 = 0.0;
      if ((CGFontGetGlyphBBoxesForStyle(v27, 0, 13, a2, v4, (uint64_t)v26) & 1) == 0)
      {
        free(v26);
        goto LABEL_18;
      }
      v30 = 0;
      v46 = (float64x2_t)vdupq_lane_s64(v45, 0);
      p_size = &v26->size;
      v32 = 1.0 / v29;
      do
      {
        v48 = *(CGRect *)&p_size[-1].width;
        transform.b = 0.0;
        transform.c = 0.0;
        transform.a = v32;
        transform.d = v32;
        transform.tx = 0.0;
        transform.ty = 0.0;
        v49 = CGRectApplyAffineTransform(v48, &transform);
        *(CGRect *)&p_size[-1].width = v49;
        y = v49.origin.y;
        p_size[-1] = (CGSize)vaddq_f64((float64x2_t)v49.origin, vdivq_f64(*(float64x2_t *)(a3 + 16 * v30++), v46));
        p_size += 2;
      }
      while (v4 != v30);
      CGContextSaveGState((CGContextRef)a1);
      transform.a = v12;
      transform.b = v13;
      transform.c = v14;
      transform.d = v15;
      transform.tx = v44;
      transform.ty = v25;
      CGContextConcatCTM((CGContextRef)a1, &transform);
      if (v20 < 6.25 || v21 < 6.25)
      {
        p_width = &v26->size.width;
        width = 0.0;
        x = INFINITY;
        v39 = INFINITY;
        v40 = 0.0;
        height = 0.0;
        do
        {
          v53.origin.x = *(p_width - 2);
          v53.origin.y = *(p_width - 1);
          v42 = *p_width;
          v43 = p_width[1];
          p_width += 4;
          v50.origin.x = x;
          v50.origin.y = v39;
          v50.size.width = width;
          v50.size.height = height;
          v53.size.width = v42;
          v53.size.height = v43;
          v51 = CGRectUnion(v50, v53);
          x = v51.origin.x;
          v39 = v51.origin.y;
          width = v51.size.width;
          height = v51.size.height;
          v40 = v40 + v42 * v43;
          --v4;
        }
        while (v4);
        if (v40 <= 0.0)
          goto LABEL_27;
        CGContextSetAlpha((CGContextRef)a1, v40 / (v51.size.height * v51.size.width) * 0.33);
        CGContextBeginPath((CGContextRef)a1);
        v52.origin.x = x;
        v52.origin.y = v39;
        v52.size.width = width;
        v52.size.height = height;
        CGContextAddRect((CGContextRef)a1, v52);
      }
      else
      {
        CGContextSetAlpha((CGContextRef)a1, 0.33);
        CGContextBeginPath((CGContextRef)a1);
        CGContextAddRects((CGContextRef)a1, v26, v4);
      }
      CGContextDrawPath((CGContextRef)a1, kCGPathFill);
LABEL_27:
      CGContextRestoreGState((CGContextRef)a1);
      free(v26);
      return;
    }
  }
LABEL_18:
  v34 = *(_QWORD *)(a1 + 40);
  if (v34)
  {
    v35 = *(void (**)(void))(v34 + 88);
    if (v35)
      v35();
  }
}

void clip_to_glyphs(uint64_t a1, __int16 *a2, __int128 *a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  CGAffineTransform v13;

  v8 = (unsigned int *)malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
  *v8 = 1;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 136);
  v10 = *(double *)(v9 + 16);
  v11 = vmulq_n_f64(*(float64x2_t *)(a1 + 120), v10);
  v12 = vmulq_n_f64(*(float64x2_t *)(a1 + 136), v10);
  *(float64x2_t *)&v13.a = v11;
  *(float64x2_t *)&v13.c = v12;
  *(_OWORD *)&v13.tx = *(_OWORD *)(a1 + 152);
  CGTextClippingAppendGlyphs((uint64_t)v8, *(const void **)(v9 + 8), &v13, a2, a3, a4);
  CGGStateClipToTextClipping(*(_QWORD *)(a1 + 96), (uint64_t)v8);
  CGTextClippingRelease(v8);
}

void CGContextShowTextAtPoint(CGContextRef c, CGFloat x, CGFloat y, const char *string, size_t length)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGContextRef v10;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((CGFloat *)c + 19) = x;
      *((CGFloat *)c + 20) = y;
      CGContextShowText(c, string, length);
      return;
    }
    v10 = c;
  }
  else
  {
    v10 = 0;
  }
  handle_invalid_context((char)"CGContextShowTextAtPoint", (uint64_t)v10, length, v5, v6, v7, v8, v9);
}

void CGContextShowGlyphs(CGContextRef c, const CGGlyph *g, size_t count)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  CGFont *v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  int *font_info;
  __int128 v19;
  double v20;
  uint64_t v21;
  double v22;
  size_t v23;
  __int128 *v24;
  __int128 v25;
  unsigned int v26;
  CGContextRef v27;
  __int128 v28;
  int advances;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!c)
  {
    v27 = 0;
LABEL_21:
    handle_invalid_context((char)"CGContextShowGlyphs", (uint64_t)v27, count, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v27 = c;
    goto LABEL_21;
  }
  if (g)
  {
    if (count)
    {
      v11 = *(_QWORD *)(*((_QWORD *)c + 12) + 136);
      v12 = *(CGFont **)(v11 + 8);
      if (v12)
      {
        v13 = *(double *)(v11 + 16);
        if (v13 != 0.0)
        {
          ((void (*)(CGContextRef))MEMORY[0x1E0C80A78])(c);
          v16 = (__int128 *)((char *)&v28 - v14 - 15);
          if (v15 <= 0xFFFFFFFFFFFFFFELL)
            v17 = (__int128 *)((char *)&v28 - v14 - 15);
          else
            v17 = 0;
          if (v15 - 0xFFFFFFFFFFFFFFFLL >= 0xF00000000000003ELL)
            v17 = (__int128 *)malloc_type_malloc(16 * count, 0xE6C4FADAuLL);
          advances = 0;
          font_info = (int *)get_font_info(v12);
          *(_QWORD *)&v19 = 0;
          v20 = 0.0;
          if (font_info)
            v20 = (double)font_info[2];
          v21 = 0;
          v22 = *(double *)(*(_QWORD *)(*((_QWORD *)c + 12) + 136) + 24);
          v23 = count;
          do
          {
            v28 = v19;
            v24 = &v17[v21];
            *(_QWORD *)v24 = v19;
            *((_QWORD *)v24 + 1) = 0;
            CGFontGetGlyphAdvances(v12, &g[v21], 1uLL, &advances);
            *((_QWORD *)&v25 + 1) = *((_QWORD *)&v28 + 1);
            *(double *)&v25 = *(double *)&v28 + v22 + v13 * (double)advances / v20;
            v28 = v25;
            v19 = v25;
            ++v21;
            --v23;
          }
          while (v23);
          v26 = *(char *)(*(_QWORD *)(*((_QWORD *)c + 12) + 136) + 1);
          if (v26 < 4)
          {
            draw_glyphs_17005((uint64_t)c, (uint64_t)g, (uint64_t)v17, count);
            goto LABEL_25;
          }
          if (v26 - 4 >= 3)
          {
            if (v26 != 7)
              goto LABEL_25;
          }
          else
          {
            draw_glyphs_17005((uint64_t)c, (uint64_t)g, (uint64_t)v17, count);
          }
          clip_to_glyphs((uint64_t)c, (__int16 *)g, v17, count);
LABEL_25:
          *(float64x2_t *)((char *)c + 152) = vaddq_f64(*(float64x2_t *)((char *)c + 152), vmlaq_n_f64(vmulq_f64(*(float64x2_t *)((char *)c + 136), (float64x2_t)0), *(float64x2_t *)((char *)c + 120), *(double *)&v28));
          if (v17 != v16)
            free(v17);
        }
      }
    }
  }
}

void CGContextShowGlyphsAtPoint(CGContextRef c, CGFloat x, CGFloat y, const CGGlyph *glyphs, size_t count)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGContextRef v10;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((CGFloat *)c + 19) = x;
      *((CGFloat *)c + 20) = y;
      CGContextShowGlyphs(c, glyphs, count);
      return;
    }
    v10 = c;
  }
  else
  {
    v10 = 0;
  }
  handle_invalid_context((char)"CGContextShowGlyphsAtPoint", (uint64_t)v10, count, v5, v6, v7, v8, v9);
}

void CGContextShowGlyphsAtPositionsWithString(CGContext *a1, const CGGlyph *a2, const CGPoint *a3, CFIndex *a4, int64_t a5, const __CFString *a6, CFIndex a7, CFIndex a8, CFDictionaryRef theDict)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int Boolean;
  int v21;
  uint64_t v22;
  __n128 v23;
  int v24;
  size_t v25;
  unint64_t v26;
  CFIndex v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  char *v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  __n128 v38;
  const __CFBitVector *v39;
  UniChar *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFIndex v50;
  CFIndex v51;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t Font;
  CFCharacterSetRef Predefined;
  const __CFCharacterSet *v60;
  const CGGlyph *v61;
  CFIndex v62;
  CFIndex *v63;
  int64_t v64;
  const __CFCharacterSet *v65;
  CFIndex v66;
  CFIndex v67;
  CFIndex v68;
  unsigned __int16 *v70;
  UTF32Char v71;
  CFIndex v72;
  uint64_t v74;
  int v75;
  BOOL v76;
  int v77;
  CFTypeID TypeID;
  int CFTypeRef;
  const __CFAllocator *v80;
  CGContext *v81;
  CFDictionaryRef v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __CFBitVector *Mutable;
  uint64_t v90;
  CFIndex v91;
  CFIndex v92;
  BOOL v93;
  uint64_t RangeOfCharacterClusterAtIndex;
  CFIndex v95;
  CFIndex v96;
  uint64_t v97;
  int *v98;
  CFIndex v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  CFIndex v107;
  uint64_t v109;
  uint64_t v110;
  CFIndex v111;
  char *v112;
  CFIndex v113;
  CFIndex v114;
  uint64_t v115;
  uint64_t v116;
  CFIndex v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  CFIndex v123;
  CFIndex v124;
  CFRange v125;
  CFIndex v126;
  CFIndex v127;
  CFIndex v128;
  CFIndex v129;
  int v130;
  int64_t v131;
  size_t v132;
  _DWORD *v133;
  CFIndex v134;
  int v135;
  int v136;
  CGContext *v138;
  CFIndex v139;
  CFAllocatorRef v140;
  __CFString *v141;
  const __CFAllocator *v142;
  CFDictionaryRef v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  CFAllocatorRef v178;
  uint64_t v179;
  char *v180;
  CGContext *v181;
  const CGPoint *v182;
  CFBitVectorRef v183;
  uint64_t *v184;
  CFDictionaryRef v185;
  int v186;
  int64_t v187;
  int v188;
  CFIndex v189;
  const CGGlyph *v190;
  int64_t v191;
  CFBitVectorRef v192;
  CFStringRef v193;
  void *v194;
  void *values;
  const void *__s2[3];
  CFRange v197;
  CFRange v198;

  v189 = a8;
  v190 = a2;
  v193 = a6;
  v191 = a5;
  v182 = a3;
  __s2[1] = *(const void **)MEMORY[0x1E0C80C00];
  LOBYTE(__s2[0]) = 0;
  if (CGCFDictionaryGetBoolean(theDict, CFSTR("rightToLeft"), (BOOL *)__s2))
    v19 = LOBYTE(__s2[0]) == 0;
  else
    v19 = 1;
  if (v19 && CGContextGetType((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18) == 1)
  {
    v181 = a1;
    LOBYTE(__s2[0]) = 0;
    Boolean = CGCFDictionaryGetBoolean(theDict, CFSTR("begin"), (BOOL *)__s2);
    if (LOBYTE(__s2[0]))
      v21 = Boolean;
    else
      v21 = 0;
    LOBYTE(__s2[0]) = 0;
    v185 = theDict;
    v22 = CGCFDictionaryGetBoolean(theDict, CFSTR("finished"), (BOOL *)__s2);
    if (LOBYTE(__s2[0]))
      v24 = v22;
    else
      v24 = 0;
    v188 = v24;
    v25 = 2 * v189;
    if (v189 < 0)
      v26 = -1;
    else
      v26 = v189;
    if (v26 >= 0x3D)
      v27 = 1;
    else
      v27 = (2 * v189) | 1;
    v28 = (char *)MEMORY[0x1E0C80A78](v22, v23);
    if (v26 <= 0x7FFFFFFFFFFFFFFELL)
      v32 = (char *)&v173 - v29;
    else
      v32 = 0;
    v173 = v30;
    v175 = (char *)&v173 - v29;
    v186 = v21;
    if (v26 - 0x7FFFFFFFFFFFFFFFLL >= 0x800000000000003ELL)
    {
      v28 = (char *)malloc_type_malloc(v25, 0xA3470D6CuLL);
      v32 = v28;
    }
    v33 = 8 * v189;
    MEMORY[0x1E0C80A78](v28, v31);
    if (v34 <= 0x3FFFFFFFFFFFFFFELL)
      v36 = (char *)&v173 - v35;
    else
      v36 = 0;
    v174 = (char *)&v173 - v35;
    if (v34 - 0x3FFFFFFFFFFFFFFFLL >= 0xC00000000000007ALL)
      v36 = (char *)malloc_type_malloc(v33, 0xA5CDF6A0uLL);
    v37 = memset(v36, 255, v33);
    v184 = &v173;
    MEMORY[0x1E0C80A78](v37, v38);
    v39 = (const __CFBitVector *)((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v26 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v26 > 0x3C)
      {
        v40 = (UniChar *)malloc_type_calloc(v25, 1uLL, 0x552FB187uLL);
      }
      else
      {
        bzero((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
        v40 = (UniChar *)((char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
    }
    else
    {
      v40 = 0;
    }
    v41 = (uint64_t)v181;
    v197.location = a7;
    v197.length = v189;
    CFStringGetCharacters(v193, v197, v40);
    if (v191 >= 1)
    {
      v49 = 0;
      v50 = a7 + v189;
      do
      {
        v51 = a4[v49];
        if (v51 >= a7 && v50 > v51)
        {
          v53 = &v36[8 * (v51 - a7)];
          v54 = *(int *)v53;
          if ((_DWORD)v54 == -1 || v49 < v54)
            *(_DWORD *)v53 = v49;
          v56 = *((int *)v53 + 1);
          if ((_DWORD)v56 == -1 || v49 > v56)
            *((_DWORD *)v53 + 1) = v49;
        }
        ++v49;
      }
      while (v191 != v49);
    }
    v183 = v39;
    Font = CGContextGetFont(v41, v42, v43, v44, v45, v46, v47, v48);
    v176 = v36;
    if (Font)
      Font = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(Font + 16) + 96))(*(_QWORD *)(Font + 112));
    v187 = Font;
    v192 = (CFBitVectorRef)v40;
    v180 = v32;
    FPFontGetGlyphsForCharacters();
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
    if (v191)
    {
      v60 = Predefined;
      v61 = v190;
      v62 = a7 + v189;
      v63 = a4;
      v64 = v191;
      v65 = Predefined;
      do
      {
        v67 = *v63++;
        v66 = v67;
        v68 = v67 - a7;
        if (v67 >= a7 && v62 > v66)
        {
          v70 = (unsigned __int16 *)((char *)v192 + 2 * v68);
          v71 = *v70;
          v72 = v66 + 1;
          if ((v71 & 0xFC00) != 0xD800 || v62 <= v72)
          {
            v74 = 1;
            if (!v60)
              goto LABEL_77;
          }
          else
          {
            v75 = v70[1];
            v76 = (v75 & 0xFC00) == 56320;
            v77 = v75 + (v71 << 10) - 56613888;
            if (v76)
              v71 = v77;
            if (v76)
              v74 = 2;
            else
              v74 = 1;
            if (!v60)
            {
LABEL_77:
              __s2[0] = 0;
              if (v74 != FPFontGetUnicharsForGlyph() || memcmp(v70, __s2, 2 * v74))
                *(_WORD *)&v180[2 * v68] = 0;
              v60 = v65;
              goto LABEL_81;
            }
          }
          if (!CFCharacterSetIsLongCharacterMember(v60, v71))
            goto LABEL_77;
          v60 = v65;
          *(_WORD *)&v180[2 * v68] = *v61;
        }
LABEL_81:
        ++v61;
        --v64;
      }
      while (v64);
    }
    if (v192 != v183)
      free(v192);
    v194 = 0;
    TypeID = CFStringGetTypeID();
    CFTypeRef = CGCFDictionaryGetCFTypeRef(v185, CFSTR("CGPDFTagPropertyLanguageText"), TypeID, (uint64_t *)&v194);
    v80 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v81 = v181;
    if (CFTypeRef)
    {
      values = v194;
      __s2[0] = CFSTR("CGPDFTagPropertyLanguageText");
      v82 = CFDictionaryCreate(v80, __s2, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CGPDFContextBeginAccessibilitySpan((uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      CFRelease(v82);
    }
    Mutable = CFBitVectorCreateMutable(v80, 0);
    CFBitVectorSetCount(Mutable, v189);
    if (v191)
    {
      v183 = Mutable;
      v178 = v80;
      v179 = 0;
      v90 = 0;
      v187 = 0;
      v91 = a7 + v189;
      v192 = (CFBitVectorRef)&v176[-8 * a7 + 4];
      v189 = (CFIndex)&v180[-2 * a7];
      do
      {
        v92 = a4[v90];
        v93 = v92 < a7 || v91 <= v92;
        if (v93 || !CFBitVectorGetBitAtIndex(v183, v92 - a7))
        {
          RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
          v96 = v95;
          v97 = v90;
          v185 = (CFDictionaryRef)v90;
          do
          {
            if (v96 >= 1)
            {
              v98 = (int *)((char *)v192 + 8 * RangeOfCharacterClusterAtIndex);
              v99 = RangeOfCharacterClusterAtIndex;
              do
              {
                if (a7 <= v99 && v91 > v99)
                {
                  v100 = *(v98 - 1);
                  if (v97 >= v100)
                    v101 = *(v98 - 1);
                  else
                    v101 = v97;
                  if ((_DWORD)v100 != -1)
                    v97 = v101;
                  v102 = *v98;
                  if (v90 <= v102)
                    v103 = *v98;
                  else
                    v103 = v90;
                  if ((_DWORD)v102 != -1)
                    v90 = v103;
                }
                ++v99;
                v98 += 2;
              }
              while (v99 < v96 + RangeOfCharacterClusterAtIndex);
            }
            if (v97 > v90)
              break;
            v104 = 0;
            v105 = v97;
            do
            {
              v106 = a4[v105];
              v107 = v96 + RangeOfCharacterClusterAtIndex;
              if (RangeOfCharacterClusterAtIndex > v106 || v107 <= v106)
              {
                v109 = CFStringGetRangeOfCharacterClusterAtIndex();
                if (RangeOfCharacterClusterAtIndex >= v109)
                  RangeOfCharacterClusterAtIndex = v109;
                v111 = v109 + v110;
                if (v107 > v109 + v110)
                  v111 = v107;
                v96 = v111 - RangeOfCharacterClusterAtIndex;
                v104 = 1;
              }
              ++v105;
            }
            while (v90 + 1 != v105);
          }
          while ((v104 & 1) != 0);
          v112 = (char *)(v90 + 1);
          v113 = RangeOfCharacterClusterAtIndex;
          if (v90 + 1 < (unint64_t)v191)
          {
            while ((__int16)v190[(_QWORD)v112] == -1)
            {
              v114 = a4[(_QWORD)v112];
              v115 = CFStringGetRangeOfCharacterClusterAtIndex();
              v117 = v115 + v116;
              if (v114 < v115 + v116)
              {
                v118 = (int *)((char *)v192 + 8 * v114);
                do
                {
                  if (a7 <= v114 && v91 > v114)
                  {
                    v119 = *(v118 - 1);
                    if (v97 >= v119)
                      v120 = *(v118 - 1);
                    else
                      v120 = v97;
                    if ((_DWORD)v119 != -1)
                      v97 = v120;
                    v121 = *v118;
                    if (v90 <= v121)
                      v122 = *v118;
                    else
                      v122 = v90;
                    if ((_DWORD)v121 != -1)
                      v90 = v122;
                  }
                  ++v114;
                  v118 += 2;
                }
                while (v117 != v114);
              }
              if (RangeOfCharacterClusterAtIndex >= v115)
                v113 = v115;
              else
                v113 = RangeOfCharacterClusterAtIndex;
              if (v96 + RangeOfCharacterClusterAtIndex > v117)
                v117 = v96 + RangeOfCharacterClusterAtIndex;
              v96 = v117 - v113;
              ++v112;
              RangeOfCharacterClusterAtIndex = v113;
              if (v112 == (char *)v191)
                goto LABEL_148;
            }
            v113 = RangeOfCharacterClusterAtIndex;
          }
LABEL_148:
          v123 = v96 + v113;
          if (v96 + v113 >= v91)
            v124 = v91;
          else
            v124 = v96 + v113;
          if (a7 > v113 || v113 >= v91)
          {
            v127 = v124 - a7;
            if (a7 < v123)
              v128 = a7;
            else
              v128 = 0;
            if (a7 < v123)
              v129 = v127;
            else
              v129 = 0;
            if (v113 <= a7)
              v126 = v128;
            else
              v126 = 0;
            if (v113 <= a7)
              v125.length = v129;
            else
              v125.length = 0;
          }
          else
          {
            v125.length = v124 - v113;
            v126 = v113;
          }
          v125.location = v126 - a7;
          v130 = 1;
          CFBitVectorSetBits(v183, v125, 1u);
          v131 = v90 + 1;
          v132 = v90 + 1 - v97;
          v81 = v181;
          v184 = (uint64_t *)v132;
          if (v96 == v132)
          {
            if (v96 >= 1)
            {
              v177 = (char *)(v90 + 1);
              v133 = (_DWORD *)((char *)v192 + 8 * v113);
              v134 = v113;
              while (1)
              {
                if (a7 <= v134 && v91 > v134)
                {
                  v135 = *(unsigned __int16 *)(v189 + 2 * v134);
                  if (*(_WORD *)(v189 + 2 * v134)
                    || (CFStringGetCharacterAtIndex(v193, v134) & 0xFC00) != 0xDC00
                    || v134 <= v113
                    || (CFStringGetCharacterAtIndex(v193, v134 - 1) & 0xFC00) != 0xD800)
                  {
                    v136 = *(v133 - 1);
                    if (v136 == -1 || v136 != *v133)
                    {
                      v81 = v181;
                      v132 = (size_t)v184;
                      v131 = (int64_t)v177;
                      if ((v186 & 1) == 0)
                        goto LABEL_191;
LABEL_193:
                      v138 = v81;
                      v139 = v113;
                      if (v187 >= 1)
                        CGContextShowGlyphsAtPositions(v138, &v190[v179], &v182[v179], v187);
                      v140 = v178;
                      v198.location = v139;
                      v198.length = v96;
                      v141 = (__CFString *)CFStringCreateWithSubstring(v178, v193, v198);
                      values = v141;
                      __s2[0] = CFSTR("CGPDFTagPropertyActualText");
                      v142 = v140;
                      v113 = v139;
                      v143 = CFDictionaryCreate(v142, __s2, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      CGPDFContextBeginAccessibilitySpan((uint64_t)v138, (uint64_t)v143, v144, v145, v146, v147, v148, v149);
                      CFRelease(v143);
                      CFRelease(v141);
                      v187 = 0;
                      v150 = v188;
                      v132 = (size_t)v184;
                      v81 = v138;
                      goto LABEL_207;
                    }
                    if (v190[v136] != v135)
                      break;
                  }
                }
                ++v134;
                v133 += 2;
                if (v134 >= v123)
                {
                  v130 = 0;
LABEL_188:
                  v81 = v181;
                  v132 = (size_t)v184;
                  v131 = (int64_t)v177;
                  goto LABEL_189;
                }
              }
              v130 = 1;
              goto LABEL_188;
            }
            v130 = 0;
          }
LABEL_189:
          if ((v186 & 1) != 0)
            goto LABEL_193;
          if (v130)
          {
LABEL_191:
            if (a7 <= v113 && v123 <= v91)
              goto LABEL_193;
          }
          if (v179 >= v97)
            v151 = v97;
          else
            v151 = v179;
          v152 = v187 + v179;
          if (v187 + v179 <= v131)
            v152 = v131;
          v153 = v152 - v151;
          if (!v187)
            v151 = v97;
          v179 = v151;
          if (v187)
            v154 = v153;
          else
            v154 = v132;
          v150 = v188;
          v187 = v154;
          if ((v188 & 1) != 0)
          {
LABEL_207:
            CGContextShowGlyphsAtPositions(v81, &v190[v97], &v182[v97], v132);
            v163 = a7 <= v113 && v123 <= v91;
            if (((v150 | v163) & 1) != 0)
              CGPDFContextEndAccessibilitySpan((uint64_t)v81, v155, v156, v157, v158, v159, v160, v161);
          }
          v188 = 0;
          v186 = 0;
          v90 = (uint64_t)v185;
        }
        ++v90;
      }
      while (v90 != v191);
      CFRelease(v183);
      v170 = v187;
      if (v187 > 0)
        CGContextShowGlyphsAtPositions(v81, &v190[v179], &v182[v179], v187);
    }
    else
    {
      CFRelease(Mutable);
    }
    v171 = v180;
    v172 = v176;
    if (v194)
      CGPDFContextEndAccessibilitySpan((uint64_t)v81, v164, v165, v170, v166, v167, v168, v169);
    if ((v188 & 1) != 0)
      CGPDFContextEndAccessibilitySpan((uint64_t)v81, v164, v165, v170, v166, v167, v168, v169);
    if (v172 != v174)
      free(v172);
    if (v171 != v175)
      free(v171);
  }
  else
  {
    CGContextShowGlyphsAtPositions(a1, v190, v182, v191);
  }
}

CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint, const CGFloat *blackPoint, CGFloat gamma)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v12;
  uint64_t v13;
  const void *v14;
  CGFloat *v15;
  uint64_t i;
  uint64_t v17;
  const CGFloat *v18;
  CC_MD5_CTX *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGColorSpace *v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v35;
  unsigned __int8 md[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!whitePoint)
    goto LABEL_26;
  v12 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0xFE80F5F0uLL);
  if (!v12)
    goto LABEL_26;
  v13 = (uint64_t)v12;
  *(_DWORD *)v12 = 1;
  v12[12] = 1;
  *((_DWORD *)v12 + 2) = 0x10000;
  *((_WORD *)v12 + 7) = 256;
  *(_QWORD *)(v12 + 20) = 3;
  v14 = v12 + 20;
  *((_QWORD *)v12 + 13) = &color_space_state_create_calibrated_gray_calibrated_gray_vtable;
  *((_DWORD *)v12 + 7) = 0;
  *((_QWORD *)v12 + 9) = 0;
  *((_QWORD *)v12 + 10) = 0;
  *((_QWORD *)v12 + 4) = &calibrated_gray_get_default_color_components_default_gray;
  *((_QWORD *)v12 + 5) = 1;
  v15 = (CGFloat *)malloc_type_calloc(0x90uLL, 1uLL, 0xBEDED83DuLL);
  *(_QWORD *)(v13 + 88) = v15;
  if (!v15)
  {
    free((void *)v13);
LABEL_26:
    v31 = (CGColorSpace *)CGColorSpaceCreateWithState(0, (uint64_t)blackPoint, v3, v4, v5, v6, v7, v8);
    goto LABEL_27;
  }
  for (i = 0; i != 3; ++i)
    v15[i] = whitePoint[i];
  v17 = 0;
  v18 = (const CGFloat *)&default_black_point_17149;
  if (blackPoint)
    v18 = blackPoint;
  do
  {
    v15[v17 + 3] = v18[v17];
    ++v17;
  }
  while (v17 != 3);
  v15[6] = gamma;
  memset(md, 0, 16);
  v19 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v19);
  if (v19)
    CC_MD5_Update(v19, v14, 4u);
  v20 = 0;
  v21 = *(_QWORD *)(v13 + 88);
  do
  {
    if (v19)
      CC_MD5_Update(v19, (const void *)(v21 + v20), 8u);
    v20 += 8;
  }
  while (v20 != 24);
  for (j = 0; j != 3; ++j)
  {
    while (v19)
    {
      CC_MD5_Update(v19, (const void *)(v21 + 8 * j++ + 24), 8u);
      if (j == 3)
      {
        CC_MD5_Update(v19, (const void *)(v21 + 48), 8u);
        CC_MD5_Final(md, v19);
        v23 = *(_OWORD *)md;
        goto LABEL_21;
      }
    }
  }
  v23 = 0uLL;
LABEL_21:
  v35 = v23;
  free(v19);
  *(_OWORD *)(v13 + 56) = v35;
  v31 = (CGColorSpace *)CGColorSpaceCreateWithState((unsigned int *)v13, v24, v25, v26, v27, v28, v29, v30);
  do
  {
    v32 = __ldxr((unsigned int *)v13);
    v33 = v32 - 1;
  }
  while (__stxr(v33, (unsigned int *)v13));
  if (!v33)
    color_space_state_dealloc(v13);
LABEL_27:
  if (v31)
    *((_QWORD *)v31 + 3) = color_space_state_register(*((_BYTE **)v31 + 3));
  return v31;
}

uint64_t calibrated_gray_get_descriptor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

const __CFString *calibrated_gray_create_icc_profile_description()
{
  return CFSTR("CG Cal Gray");
}

__n128 CGColorSpaceGetCalibratedGrayData@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v5 + 20) != 3)
    _CGHandleAssert("CGColorSpaceGetCalibratedGrayData", 122, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_CalGray.c", "space->state->type == kCGColorSpaceCalibratedGray", "Colorspace %p not calibrated grayscale. Type = %d", a2, a3, a4, a1);
  v6 = *(_QWORD *)(v5 + 88);
  v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)(v6 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(v6 + 48);
  return result;
}

uint64_t CGFontCopyPath(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 224))(*(_QWORD *)(result + 112));
  return result;
}

int CGFontGetLeading(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[5];
  return (int)font_info;
}

CGFloat CGFontGetStemV(CGFontRef font)
{
  _BOOL4 Descriptor;
  CGFloat result;
  _OWORD v3[4];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  v4 = 0u;
  memset(v3, 0, sizeof(v3));
  Descriptor = CGFontGetDescriptor(font, (uint64_t)v3);
  result = *(double *)&v4;
  if (!Descriptor)
    return 0.0;
  return result;
}

_BYTE *CGFontIsItalic(_QWORD *a1)
{
  _BYTE *result;

  result = get_font_info(a1);
  if (result)
    return (_BYTE *)(result[49] != 0);
  return result;
}

_QWORD *CGFontGetVMetrics(_QWORD *a1)
{
  unint64_t *v2;
  _QWORD *v3;
  unint64_t v4;

  if (!a1)
    return 0;
  v2 = a1 + 7;
  v3 = (_QWORD *)atomic_load(a1 + 7);
  if (!v3)
  {
    v3 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
    if (((*(uint64_t (**)(_QWORD, _QWORD *))(a1[2] + 120))(a1[14], v3) & 1) == 0)
    {
      *v3 = 0;
      v3[1] = 0;
    }
    while (1)
    {
      v4 = __ldaxr(v2);
      if (v4)
        break;
      if (!__stlxr((unint64_t)v3, v2))
        return v3;
    }
    __clrex();
    free(v3);
    return (_QWORD *)v4;
  }
  return v3;
}

uint64_t CGFontGetPostScriptName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 144))(*(_QWORD *)(result + 112));
  return result;
}

const __CFLocale *CGFontCopyLocalizedName(uint64_t a1, uint64_t a2, __CFString *a3)
{
  int name_id_for_key;
  unsigned __int16 v6;
  os_unfair_lock_s *name_table;

  if (a1
    && a2
    && a3
    && (name_id_for_key = get_name_id_for_key(a3), name_id_for_key != -1)
    && (v6 = name_id_for_key, (name_table = get_name_table(a1)) != 0))
  {
    return CGFontNameTableCopyNameForLocale(name_table, a2, v6);
  }
  else
  {
    return 0;
  }
}

_BYTE *CGFontIsBitmapOnly(_QWORD *a1)
{
  _BYTE *result;

  result = get_font_info(a1);
  if (result)
    return (_BYTE *)(result[104] != 0);
  return result;
}

uint64_t CGFontGetIdentifier(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 + 24);
  v1 = (unsigned int *)(a1 + 24);
  v2 = v3;
  if (!v3)
  {
    do
      v4 = __ldxr((unsigned int *)&get_identifier_identifier);
    while (__stxr(v4 + 1, (unsigned int *)&get_identifier_identifier));
    v5 = ~v4;
    while (!__ldxr(v1))
    {
      if (!__stxr(v5, v1))
        return *v1;
    }
    __clrex();
    return *v1;
  }
  return v2;
}

uint64_t CGSNewRegionWithRect(double *a1, _QWORD *a2)
{
  _QWORD *v3;

  if (!a2)
    return 1001;
  if (a1)
  {
    v3 = CGRegionCreateWithRect(*a1, a1[1], a1[2], a1[3]);
  }
  else
  {
    if (CGRegionGetTypeID_initOnce != -1)
      dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
    v3 = &__kCGRegionEmptyRegion;
  }
  *a2 = v3;
  if (v3)
    return 0;
  else
    return 1000;
}

uint64_t CGSGetRegionBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)a2 = CGRegionGetBoundingBox(a1);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  return 0;
}

uint64_t CGSOffsetRegion(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10)
{
  _QWORD *v11;

  if (!a2)
    return 1001;
  if (a1)
  {
    v11 = CGRegionCreateWithOffset(a1, a9, a10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *a2 = v11;
    if (v11)
      return 0;
    else
      return 1000;
  }
  else
  {
    *a2 = 0;
    return 1001;
  }
}

uint64_t CGSIntersectRegionWithRect(_QWORD *a1, double *a2, _QWORD *a3)
{
  *a3 = CGRegionCreateIntersectionWithRect(a1, *a2, a2[1], a2[2], a2[3]);
  return 0;
}

uint64_t CGSUnionRegion(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = CGRegionCreateUnionWithRegion(a1, a2);
  return 0;
}

uint64_t CGSDiffRegion(int **a1, uint64_t a2, int ***a3)
{
  *a3 = CGRegionCreateDifferenceWithRegion(a1, a2);
  return 0;
}

BOOL CGSRegionIsEmpty(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 1;
  v1 = *(_QWORD *)(a1 + 16);
  return (_UNKNOWN *)v1 == &the_empty_shape || *(_DWORD *)(v1 + 4 * *(int *)(v1 + 4)) == 0x7FFFFFFF;
}

BOOL CGSRectInRegion(_BOOL8 a1, double *a2)
{
  return a2 && CGRegionContainsRect(a1, *a2, a2[1], a2[2], a2[3]);
}

uint64_t CGSTransformRegion(uint64_t *a1, double *a2, uint64_t **a3, float a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL4 v22;
  char *v24;
  void *v25;
  int *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  int v62;
  int *v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  double v74;
  uint64_t *v76;
  float v77;
  float v78;
  double v79;
  uint64_t v80;
  uint64_t v81;

  if (!a3)
    return 1001;
  v7 = a1;
  if (!region_check(a1))
  {
    v7 = 0;
    result = 1001;
    goto LABEL_108;
  }
  if (!a2)
  {
    if (!v7)
      goto LABEL_107;
    goto LABEL_94;
  }
  v15 = v7[2];
  if ((_UNKNOWN *)v15 == &the_empty_shape)
  {
LABEL_94:
    CFRetain(v7);
LABEL_107:
    result = 0;
    goto LABEL_108;
  }
  v16 = *a2;
  v17 = a2[1];
  v18 = a2[2];
  v19 = a2[3];
  v21 = a2[4];
  v20 = a2[5];
  v22 = v18 == 0.0 && v17 == 0.0;
  if (!v22 || v16 != 1.0)
    goto LABEL_12;
  if (v19 == 1.0)
  {
    if (v21 == 0.0 && v20 == 0.0)
      goto LABEL_94;
    v77 = v21;
    v78 = v20;
    v76 = CGRegionCreateWithOffset(v7, v77, v78, v8, v9, v10, v11, v12, v13, v14);
LABEL_106:
    v7 = v76;
    goto LABEL_107;
  }
  if (v19 == -1.0)
  {
    v74 = floor(v20);
    if (floor(v21) == v21 && v74 == v20)
    {
      v73 = shape_reverse_y(v7[2], 1, -1, (int)v21, (int)v20);
      if (v73)
      {
LABEL_104:
        v76 = region_create_with_shape(v73, v66, v67, v68, v69, v70, v71, v72);
        goto LABEL_106;
      }
      v15 = v7[2];
    }
  }
LABEL_12:
  v24 = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
  v25 = v24;
  *(_DWORD *)v24 = 0;
  *(_OWORD *)(v24 + 4) = xmmword_185004E30;
  *(int32x2_t *)(v24 + 20) = vdup_n_s32(0x7FFFFFFEu);
  *((_QWORD *)v24 + 5) = 0;
  *((_QWORD *)v24 + 6) = 0;
  *((_QWORD *)v24 + 4) = 0;
  if ((_UNKNOWN *)v15 != &the_empty_shape && *(_DWORD *)(v15 + 4 * *(int *)(v15 + 4)) != 0x7FFFFFFF)
  {
    *((_DWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 4) = v15;
    *((_QWORD *)v24 + 5) = v15 + 8;
  }
  v80 = 0;
  v81 = 0;
  v79 = -v16;
  v26 = (int *)&the_empty_shape;
  while (shape_enum_next((uint64_t)v25, (_DWORD *)&v81 + 1, &v81, (_DWORD *)&v80 + 1, &v80))
  {
    v27 = (double)SHIDWORD(v81);
    if (v22)
    {
      v28 = v21 + v16 * v27;
      v29 = v21 + v16 * (double)SHIDWORD(v80);
      v30 = v20 + v19 * (double)(int)v81;
      v31 = v20 + v19 * (double)(int)v80;
      if (v28 <= v29)
        v32 = v21 + v16 * v27;
      else
        v32 = v21 + v16 * (double)SHIDWORD(v80);
      if (v28 <= v29)
        v33 = v21 + v16 * (double)SHIDWORD(v80);
      else
        v33 = v28;
      if (v30 > v31)
        v34 = v20 + v19 * (double)(int)v80;
      else
        v34 = v20 + v19 * (double)(int)v81;
      if (v30 > v31)
        v35 = v20 + v19 * (double)(int)v81;
      else
        v35 = v20 + v19 * (double)(int)v80;
      goto LABEL_73;
    }
    v36 = (double)(HIDWORD(v80) - HIDWORD(v81));
    v37 = (double)((int)v80 - (int)v81);
    v38 = v21 + v18 * (double)(int)v81 + v16 * v27;
    v39 = v20 + v19 * (double)(int)v81 + v17 * v27;
    v40 = v38 + v16 * v36;
    v41 = v39 + v17 * v36;
    if (v40 > v38)
      v42 = v38 + v16 * v36;
    else
      v42 = v38;
    if (v40 >= v38)
      v43 = v38;
    else
      v43 = v38 + v16 * v36;
    if (v40 >= v38)
      v38 = v42;
    if (v41 > v39)
      v44 = v39 + v17 * v36;
    else
      v44 = v39;
    if (v41 >= v39)
      v45 = v39;
    else
      v45 = v39 + v17 * v36;
    if (v41 >= v39)
      v46 = v44;
    else
      v46 = v39;
    v47 = v40 + v18 * v37;
    v48 = v41 + v19 * v37;
    if (v47 > v38)
      v49 = v40 + v18 * v37;
    else
      v49 = v38;
    if (v47 >= v43)
      v32 = v43;
    else
      v32 = v47;
    if (v47 >= v43)
      v50 = v49;
    else
      v50 = v38;
    if (v48 > v46)
      v51 = v48;
    else
      v51 = v46;
    if (v48 >= v45)
      v34 = v45;
    else
      v34 = v48;
    if (v48 >= v45)
      v52 = v51;
    else
      v52 = v46;
    v33 = v47 + v79 * v36;
    if (v33 >= v32)
    {
      if (v33 > v50)
        goto LABEL_69;
    }
    else
    {
      v32 = v47 + v79 * v36;
    }
    v33 = v50;
LABEL_69:
    v35 = v48 + -v17 * v36;
    if (v35 < v34)
    {
      v34 = v35;
LABEL_72:
      v35 = v52;
      goto LABEL_73;
    }
    if (v35 <= v52)
      goto LABEL_72;
LABEL_73:
    v53 = ceil(v32 + -0.00390625);
    v54 = floor(v33 + 0.00390625);
    v55 = ceil(v34 + -0.00390625);
    v56 = floor(v35 + 0.00390625);
    v57 = floor(v32 + 0.00390625);
    v58 = ceil(v33 + -0.00390625);
    v59 = floor(v34 + 0.00390625);
    v60 = ceil(v35 + -0.00390625);
    if (a4 < 0.0)
    {
      v57 = v53;
      v58 = v54;
      v59 = v55;
      v60 = v56;
    }
    v61 = (int)v59;
    LODWORD(v81) = (int)v59;
    HIDWORD(v81) = (int)v57;
    v62 = (int)v60;
    LODWORD(v80) = (int)v60;
    HIDWORD(v80) = (int)v58;
    if ((int)v57 < (int)v58 && v61 < v62)
    {
      v64 = shape_union_with_bounds(v26, (int)v57, v61, (int)v58, v62);
      if (v26 && v26 != (int *)&the_empty_shape)
        free(v26);
    }
    else
    {
      v64 = v26;
    }
    v26 = v64;
    if (!v64)
    {
      free(v25);
      if (CGRegionGetTypeID_initOnce != -1)
        dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
      result = 1000;
      goto LABEL_112;
    }
  }
  free(v25);
  if (v26 != (int *)&the_empty_shape)
  {
    v73 = v26;
    goto LABEL_104;
  }
  if (CGRegionGetTypeID_initOnce != -1)
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
  result = 0;
LABEL_112:
  v7 = (uint64_t *)&__kCGRegionEmptyRegion;
LABEL_108:
  *a3 = v7;
  return result;
}

uint64_t calibrated_rgb_get_descriptor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

const __CFString *calibrated_rgb_create_icc_profile_description()
{
  return CFSTR("CG Cal RGB");
}

void sub_184D7046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184D708D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17200(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17201(uint64_t a1)
{

}

uint64_t path_reverse_begin(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  if (a3)
  {
    v3 = (uint64_t (*)(_QWORD, uint64_t, _QWORD))a3[2];
    if (v3)
      return v3(a3[1], a2, a3[6]);
  }
  return result;
}

uint64_t path_reverse_iterate(uint64_t result, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v10 = result;
  switch(a2)
  {
    case 0:
      if (*(_BYTE *)(result + 16))
      {
        v12 = *(_OWORD *)result;
        if (a4)
          (*(void (**)(_QWORD, _QWORD, __int128 *, _QWORD))(a4 + 24))(*(_QWORD *)(a4 + 8), 0, &v12, *(_QWORD *)(a4 + 48));
        result = (uint64_t)path_iterator_unrollpath((_QWORD *)a4, (unsigned __int8 **)(v10 + 24));
        *(_BYTE *)(v10 + 16) = 0;
      }
      *(_OWORD *)v10 = *a3;
      return result;
    case 1:
      result = path_add((unsigned __int8 **)(result + 24), 1u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)result = *(_OWORD *)v10;
      *(_OWORD *)v10 = *a3;
      *(_BYTE *)(v10 + 16) = 1;
      return result;
    case 2:
      result = path_add((unsigned __int8 **)(result + 24), 2u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)result = *a3;
      *(_OWORD *)(result + 16) = *(_OWORD *)v10;
      v11 = a3[1];
      goto LABEL_10;
    case 3:
      result = path_add((unsigned __int8 **)(result + 24), 3u, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_OWORD *)result = a3[1];
      *(_OWORD *)(result + 16) = *a3;
      *(_OWORD *)(result + 32) = *(_OWORD *)v10;
      v11 = a3[2];
LABEL_10:
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v10 + 16) = 1;
      break;
    case 4:
      if (*(_BYTE *)(result + 16))
      {
        v12 = *(_OWORD *)result;
        if (a4)
        {
          (*(void (**)(_QWORD, _QWORD, __int128 *, _QWORD))(a4 + 24))(*(_QWORD *)(a4 + 8), 0, &v12, *(_QWORD *)(a4 + 48));
          path_iterator_unrollpath((_QWORD *)a4, (unsigned __int8 **)(v10 + 24));
          result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a4 + 24))(*(_QWORD *)(a4 + 8), 4, 0, *(_QWORD *)(a4 + 48));
        }
        else
        {
          result = (uint64_t)path_iterator_unrollpath(0, (unsigned __int8 **)(result + 24));
        }
        *(_BYTE *)(v10 + 16) = 0;
      }
      break;
    default:
      abort();
  }
  return result;
}

unsigned __int8 **path_reverse_end(unsigned __int8 **result, uint64_t a2)
{
  unsigned __int8 **v3;
  uint64_t (*v4)(_QWORD, _QWORD);
  __int128 v5;

  if (*((_BYTE *)result + 16))
  {
    v3 = result;
    v5 = *(_OWORD *)result;
    if (a2)
      (*(void (**)(_QWORD, _QWORD, __int128 *, _QWORD))(a2 + 24))(*(_QWORD *)(a2 + 8), 0, &v5, *(_QWORD *)(a2 + 48));
    result = (unsigned __int8 **)path_iterator_unrollpath((_QWORD *)a2, v3 + 3);
    *((_BYTE *)v3 + 16) = 0;
  }
  if (a2)
  {
    v4 = *(uint64_t (**)(_QWORD, _QWORD))(a2 + 32);
    if (v4)
      return (unsigned __int8 **)v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 48));
  }
  return result;
}

void path_reverse_release_info(void **a1)
{
  path_free(a1[3]);
  free(a1);
}

__int128 *rips_gb_super()
{
  return &_rips_class;
}

uint64_t rips_gb_size()
{
  return 104;
}

void rips_gb_release(void *a1)
{
  int v1;

  v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1)
    free(a1);
}

float rips_gb_Create(uint64_t a1, uint64_t a2, double *a3)
{
  size_t v6;
  float *v7;
  float result;
  uint64_t v9;
  double v10;
  float v11;
  unsigned int v12;
  int v13;

  v6 = (*(uint64_t (**)(void))(a1 + 8))();
  v7 = (float *)malloc_type_calloc(1uLL, v6, 0x6269FC0FuLL);
  if (v7)
  {
    *(_QWORD *)v7 = a1;
    *((_QWORD *)v7 + 1) = 1;
    v9 = a2 + 32;
    if (!a2)
      v9 = 0;
    if (a3)
      v10 = sqrt(fabs(*a3 * a3[3] - a3[1] * a3[2]));
    else
      v10 = 1.0;
    v11 = v10 * *(double *)(v9 + 8);
    if (v11 > 4194300.0)
      v11 = 4194300.0;
    v7[24] = v11;
    *((_DWORD *)v7 + 3) = 2289;
    result = v11 + 0.5;
    v12 = vcvtms_s32_f32(result);
    *((_DWORD *)v7 + 20) = ~v12;
    *((_DWORD *)v7 + 21) = ~v12;
    v13 = 2 * v12 + 2;
    *((_DWORD *)v7 + 22) = v13;
    *((_DWORD *)v7 + 23) = v13;
  }
  return result;
}

BOOL rips_gb_Growth(uint64_t a1, _OWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
    *a2 = *(_OWORD *)(a1 + 80);
  return v2 != 0;
}

uint64_t rips_gb_ColorSpace()
{
  return rips_gb_cs;
}

uint64_t rips_gb_BltShape(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int *v9;
  int *v10;

  v9 = (int *)(a3 + 12);
  if (!a3)
    v9 = (int *)(a2 + 12);
  if (a4)
    v9 = a4;
  if (a5)
    v10 = (int *)(a5 + 12);
  else
    v10 = v9;
  return rips_gb_Draw(a1, a2, a3, a4, v10, a5, 0, 0, 0, a6, a7, a8);
}

uint64_t rips_gb_BltGlyph(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int *v10;
  int *v11;

  v10 = a5;
  v11 = (int *)(a3 + 12);
  if (!a3)
    v11 = (int *)(a2 + 12);
  if (a4)
    v11 = a4;
  if (!a5)
    a5 = v11;
  return rips_gb_Draw(a1, a2, a3, a4, a5, 0, v10, 0, 0, a6, a7, a10);
}

uint64_t rips_gb_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;

  v8 = (uint64_t)a5;
  v9 = (int *)(a3 + 12);
  if (!a3)
    v9 = (int *)(a2 + 12);
  if (a4)
    v9 = a4;
  if (!a5)
    a5 = v9;
  return rips_gb_Draw(a1, a2, a3, a4, a5, 0, 0, v8, 0, a6, a7, a8);
}

uint64_t rips_gb_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int *v8;

  v8 = (int *)(a3 + 12);
  if (!a3)
    v8 = (int *)(a2 + 12);
  if (a4)
    v8 = a4;
  if (a5)
    v8 = (int *)a5;
  return rips_gb_Draw(a1, a2, a3, a4, v8, 0, 0, 0, a5, a6, a7, a8);
}

uint64_t rips_gb_Draw(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12)
{
  int v18;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[3];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v18 = vcvtmd_s64_f64(*(float *)(a1 + 96) + 0.5);
  if (v18 > 0)
  {
LABEL_2:
    v55 = 0uLL;
    v54[0] = 0;
    v54[1] = 0;
    if (!a4 || a4 == a5)
    {
      v55 = *(_OWORD *)a5;
      v20 = 1;
      if (!DWORD2(v55))
        return v20;
      v46 = a9;
      v47 = a12;
      if (!HIDWORD(v55))
        return v20;
    }
    else
    {
      v46 = a9;
      v47 = a12;
      if (!CGSBoundsIntersection(a4, a5, &v55))
        return 1;
    }
    v56[0] = 0uLL;
    v21 = (int *)(a2 + 12);
    if (a3)
    {
      if ((CGSBoundsIntersection(v21, (int *)(a3 + 12), v56) & 1) == 0)
        return 1;
    }
    else
    {
      v56[0] = *(_OWORD *)v21;
      if (!DWORD2(v56[0]) || !HIDWORD(v56[0]))
        return 1;
    }
    *(_QWORD *)&v55 = (v55 + ~v18) | ((unint64_t)(DWORD1(v55) + ~v18) << 32);
    *((_QWORD *)&v55 + 1) = (DWORD2(v55) - 2 * ~v18) | ((unint64_t)(HIDWORD(v55) - 2 * ~v18) << 32);
    *(_QWORD *)&v56[0] = (LODWORD(v56[0]) + ~v18) | ((unint64_t)(DWORD1(v56[0]) + ~v18) << 32);
    *((_QWORD *)&v56[0] + 1) = (DWORD2(v56[0]) - 2 * ~v18) | ((unint64_t)(HIDWORD(v56[0]) - 2 * ~v18) << 32);
    if (!CGSBoundsIntersection((int *)&v55, (int *)v56, v54))
      return 1;
    v28 = *(_DWORD **)(a2 + 32);
    if ((*v28 & 0x3F0000u) <= 0x80000)
    {
      v30 = (*v28 >> 8) & 0xF;
      if (!v30 || v30 == 3)
      {
LABEL_28:
        v31 = (int *)RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v54, 17, (uint64_t)v28, *(unsigned int *)(a2 + 52), v25, v26, v27);
        if (v31)
        {
          v37 = (uint64_t)v31;
          v38 = *(_OWORD *)(v47 + 16);
          v71[0] = *(_OWORD *)v47;
          v71[1] = v38;
          v39 = *(_OWORD *)(v47 + 48);
          v71[2] = *(_OWORD *)(v47 + 32);
          v72 = v39;
          v40 = *(_QWORD *)(v47 + 64);
          LODWORD(v71[0]) = 2;
          v73 = v40;
          *(_QWORD *)&v72 = 0x3FF0000000000000;
          if (a6)
          {
            if ((RIPLayerBltShape(v31, 0, 0, a6, a10, a11, (uint64_t)v71, v36) & 1) == 0)
            {
LABEL_44:
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
              return 0;
            }
          }
          else if (a7)
          {
            if ((RIPLayerBltGlyph(v31, 0, 0, a7, a10, a11, 0, (uint64_t)v71) & 1) == 0)
              goto LABEL_44;
          }
          else if (a8)
          {
            if ((RIPLayerBltImage((uint64_t)v31, 0, 0, a8, (uint64_t)v71, v34, v35, v36) & 1) == 0)
              goto LABEL_44;
          }
          else
          {
            v41 = v46;
            if (v46
              && (RIPLayerBltShade((uint64_t)v31, 0, 0, v46, a10, (uint64_t)v71, v35, v36) & 1) == 0)
            {
              goto LABEL_44;
            }
          }
          v42 = RIPLayerGaussianBlur(v37, *(unsigned int *)(a2 + 52), v32, v41, v33, v34, v35, v36, *(float *)(a1 + 96));
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
          if (v42)
          {
            v57 = xmmword_1850006C0;
            v58 = unk_1850006D0;
            v61 = xmmword_185000700;
            v62 = unk_185000710;
            v59 = xmmword_1850006E0;
            v60 = unk_1850006F0;
            v65 = xmmword_185000740;
            v66 = unk_185000750;
            v63 = xmmword_185000720;
            v64 = unk_185000730;
            v70 = 0;
            v68 = unk_185000770;
            v69 = xmmword_185000780;
            v67 = xmmword_185000760;
            memset(v56, 0, sizeof(v56));
            *(_QWORD *)&v57 = *((_QWORD *)v42 + 4);
            DWORD2(v58) = *((_DWORD *)v42 + 5);
            DWORD2(v57) = DWORD2(v58);
            HIDWORD(v58) = *((_DWORD *)v42 + 6);
            *(_QWORD *)&v58 = 0;
            HIDWORD(v57) = HIDWORD(v58);
            LODWORD(v59) = *((_DWORD *)v42 + 12);
            *((_QWORD *)&v59 + 1) = *((_QWORD *)v42 + 7);
            *((_QWORD *)&v60 + 1) = *((_QWORD *)v42 + 9);
            LODWORD(v60) = *((_DWORD *)v42 + 16);
            v61 = 0uLL;
            v52 = 0;
            v48 = *(_OWORD *)(v42 + 12);
            v53 = 0;
            v50 = 0;
            v51 = 0;
            v49 = v56;
            v20 = RIPLayerBltImage(a2, a3, (uint64_t)v54, (uint64_t)&v48, v47, v43, v44, v45);
            (*(void (**)(char *))(*(_QWORD *)v42 + 24))(v42);
            return v20;
          }
        }
        return 0;
      }
      v29 = 6;
    }
    else
    {
      v29 = 20;
    }
    v28 = (_DWORD *)RIPGetDepthForLayerFormat(v29, v22, v23, (uint64_t)v28, v24, v25, v26, v27);
    goto LABEL_28;
  }
  if (a6)
    return (uint64_t)RIPLayerBltShape((int *)a2, a3, a4, a6, a10, a11, a12, a12);
  if (a7)
    return (uint64_t)RIPLayerBltGlyph((_DWORD *)a2, a3, a4, a7, a10, a11, 0, a12);
  if (a8)
    return RIPLayerBltImage(a2, a3, (uint64_t)a4, a8, a12, 0, 0, a12);
  if (!a9)
    goto LABEL_2;
  return (uint64_t)RIPLayerBltShade(a2, a3, (uint64_t)a4, a9, a10, a12, 0, a12);
}

void CGPDFXObjectFinalize(uint64_t a1)
{
  int v1;
  const void *v2;

  v1 = *(_DWORD *)(a1 + 16);
  switch(v1)
  {
    case 2:
      CGPDFGroupRelease(*(CGColorSpaceRef **)(a1 + 96));
      break;
    case 1:
      v2 = *(const void **)(a1 + 96);
      if (v2)
LABEL_5:
        CFRelease(v2);
      break;
    case 0:
      v2 = *(const void **)(a1 + 96);
      if (v2)
        goto LABEL_5;
      break;
  }
}

uint64_t CPTextServicesAppendTextLine(__CFString *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, int *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t RangeInCharacterRange;
  uint64_t v22;
  int v23;
  uint64_t v24;
  CFIndex v25;
  _QWORD *v26;
  _QWORD *v27;
  CFIndex v28;
  const __CFArray *v29;
  uint64_t *ValueAtIndex;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  const __CFArray *v39;
  const void *v40;
  __CFString *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  const UniChar *v46;
  __CFString *v47;
  CFIndex v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  UniChar *v52;
  int v54;
  int ProcessedLength;
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  int ResultLength;
  const UniChar *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a4 < 1)
  {
    v13 = a3;
    return v13 + 2;
  }
  v9 = 0;
  if (a3 + a4 <= a3 + 1)
    v10 = a3 + 1;
  else
    v10 = a3 + a4;
  for (i = 24 * a3 + 16; ; i += 24)
  {
    LOBYTE(v12) = 0;
    v13 = a3 + v9;
    if (a2 && (v13 & 0x8000000000000000) == 0)
    {
      if (a2[6] <= v13)
        goto LABEL_12;
      v12 = a2[3];
      if (v12)
        LODWORD(v12) = *(_DWORD *)(v12 + i);
    }
    if ((v12 & 8) != 0)
      break;
LABEL_12:
    if (a4 - 1 == v9)
      break;
    ++v9;
    if (a3 + v9 >= a3 + a4)
    {
      v13 = v10;
      return v13 + 2;
    }
  }
  v14 = v9 + 1;
  v64 = v9;
  if (v9 < 100)
  {
    v15 = &v65;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_20;
  }
  else
  {
    v15 = (char *)malloc_type_malloc(2 * v14, 0x1000040BDFB0063uLL);
LABEL_20:
    v16 = 0;
    v17 = 24 * a3;
    do
    {
      LOWORD(v18) = 0;
      if (a2 && ((a3 + v16) & 0x8000000000000000) == 0)
      {
        if (a2[6] <= a3 + v16)
        {
          LOWORD(v18) = 0;
        }
        else
        {
          v18 = a2[3];
          if (v18)
          {
            v18 = *(_QWORD *)(v18 + v17);
            if (v18)
              LOWORD(v18) = *(_WORD *)(v18 + 8);
          }
        }
      }
      *(_WORD *)&v15[2 * v16++] = v18;
      v17 += 24;
    }
    while (v9 + 1 != v16);
  }
  v60 = v13 - a3 + 1;
  v19 = malloc_type_malloc(6 * v14, 0x1000040BDFB0063uLL);
  if (!ubidi_open())
  {
    ResultLength = 0;
    v56 = 0;
    v54 = 0;
    goto LABEL_33;
  }
  ubidi_setReorderingMode();
  ubidi_setContext();
  ubidi_setPara();
  ubidi_getLength();
  ubidi_countRuns();
  v54 = ubidi_writeReordered();
  ProcessedLength = ubidi_getProcessedLength();
  v56 = (int *)malloc_type_malloc(4 * ProcessedLength, 0x100004052888210uLL);
  ubidi_getVisualMap();
  ResultLength = ubidi_getResultLength();
  ubidi_close();
  if (v54 <= 0)
  {
LABEL_33:
    free(v19);
    v19 = 0;
  }
  if (v9 >= 100)
    free(v15);
  if (v54 < 1)
  {
    v51 = a6;
    v23 = ResultLength;
    if (a6)
      goto LABEL_77;
  }
  else
  {
    v63 = (const UniChar *)v19;
    v20 = a2[7];
    RangeInCharacterRange = CPMultiUnicodesGetRangeInCharacterRange(v20, a3, v60);
    v23 = ResultLength;
    if (v56)
    {
      v24 = v22;
      if (v22 >= 1 && ResultLength >= 1)
      {
        v25 = RangeInCharacterRange;
        v57 = a5;
        v26 = malloc_type_malloc(8 * v60, 0x100004000313F17uLL);
        v27 = v26;
        if ((v9 & 0x8000000000000000) == 0)
          memset(v26, 255, 8 * v9 + 8);
        v28 = v25 + v24;
        do
        {
          if (v20
            && (v29 = *(const __CFArray **)(v20 + 24)) != 0
            && (ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v29, v25)) != 0)
          {
            v31 = *ValueAtIndex;
          }
          else
          {
            v31 = 0;
          }
          if (v31 >= a3 && v31 <= v13)
            v27[v31 - a3] = v25;
          ++v25;
        }
        while (v25 < v28);
        v32 = 0;
        v33 = 0;
        v34 = 1;
        v35 = a1;
        while (1)
        {
          v36 = v32 + v33;
          v37 = v56[v32 + v33];
          if ((v37 & 0x80000000) != 0 || v64 < v37 || (v38 = v27[v37], v38 == -1))
          {
            v46 = &v63[v33];
            v47 = v35;
            v48 = 1;
          }
          else
          {
            if (v20)
            {
              v39 = *(const __CFArray **)(v20 + 24);
              if (v39)
              {
                v40 = CFArrayGetValueAtIndex(v39, v38);
                if (v40)
                {
                  v41 = v35;
                  v42 = *((_QWORD *)v40 + 2);
                  CFStringAppendCharacters(v41, *((const UniChar **)v40 + 3), v42);
                  if (v42 >= 2)
                  {
                    v58 = v32 + ResultLength + ~v36;
                    v43 = (char *)malloc_type_realloc(v56, 4 * (v32 + v42 - 1 + ResultLength), 0x100004052888210uLL);
                    v56 = (int *)v43;
                    v44 = v36 + 1;
                    if (v58)
                    {
                      memmove(&v43[4 * v42 + 4 * v36], &v43[4 * v44], 4 * v58);
                      v45 = v42 + v36;
                      v44 = v36 + 1;
                    }
                    else
                    {
                      v45 = v42 + v36;
                    }
                    if (v44 < v45)
                    {
                      v49 = v42 - 1;
                      v50 = v32 + v34;
                      do
                      {
                        v56[v50++] = v56[v36];
                        --v49;
                      }
                      while (v49);
                    }
                    v32 = v32 + v42 - 1;
                  }
                  v35 = a1;
                  goto LABEL_65;
                }
              }
            }
            v47 = v35;
            v46 = 0;
            v48 = 0;
          }
          CFStringAppendCharacters(v47, v46, v48);
LABEL_65:
          ++v33;
          ++v34;
          if (v33 == ResultLength)
          {
            v23 = ResultLength + v32;
            free(v27);
            a5 = v57;
            v51 = a6;
            v52 = (UniChar *)v63;
            goto LABEL_76;
          }
        }
      }
    }
    v52 = (UniChar *)v63;
    CFStringAppendCharacters(a1, v63, v54);
    v51 = a6;
LABEL_76:
    free(v52);
    if (v51)
LABEL_77:
      *v51 = v23;
  }
  if (a5)
    *a5 = v56;
  else
    free(v56);
  return v13 + 2;
}

FILE *PDFLinearizer::createTempFile(const char *a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  int v8;
  std::logic_error *exception;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::runtime_error *v14;
  char v15;
  std::string __dst;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (CGGetTempDirPath_predicate != -1)
    dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_113);
  if (!CGGetTempDirPath_tempDirPath)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "strlen(tempDir) == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 965, 0, v11, v12, v13, v15);
    std::logic_error::logic_error(exception, &__dst);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  strncpy((char *)&__dst, &CGGetTempDirPath_tempDirPath, 0x400uLL);
  v4 = strlen((const char *)&__dst);
  if (__dst.__r_.__value_.__s.__data_[v4 - 1] != 47)
    strncat((char *)&__dst, "/", 1023 - v4);
  if (a1)
  {
    v5 = strlen((const char *)&__dst);
    strncat((char *)&__dst, a1, 1023 - v5);
  }
  v6 = strlen((const char *)&__dst);
  strncat((char *)&__dst, "XXXXXX", 1023 - v6);
  v7 = strlen((const char *)&__dst);
  strncat((char *)&__dst, ".pdf", 1023 - v7);
  v8 = mkstemps((char *)&__dst, 4);
  if (v8 == -1)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "mkstemps failed");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  MEMORY[0x186DC2280](a2, &__dst);
  return fdopen(v8, "wb");
}

void sub_184D720A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void std::vector<PDFIndirectObject>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<PDFIndirectObject>::destroy[abi:se180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PDFLinearizerPageInfo>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 6);
        if (v6)
        {
          *((_QWORD *)v4 - 5) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PDFIndirectObject>::destroy[abi:se180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void PDFLinearizer::endDocument(PDFLinearizer *this, CGDataConsumer *a2)
{
  std::string *p_context;
  uint64_t v5;
  const char *v6;
  FILE *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t *v25;
  char **v26;
  PDFLinearizer *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  off_t *v34;
  off_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  unint64_t *v40;
  unint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t **v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD **v56;
  _QWORD *v57;
  _QWORD **v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t **v65;
  char *v66;
  char *v67;
  unint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t (****v89)();
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t (****v96)();
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t (***v100)();
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  CFMutableDataRef v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD **v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  BOOL v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  BOOL v125;
  _QWORD *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  BOOL v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  BOOL v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t **v148;
  unint64_t **v149;
  unint64_t **v150;
  unint64_t v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  std::string ***v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  __n128 v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  std::string ***v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  char *v173;
  _QWORD *v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  BOOL v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  BOOL v185;
  _QWORD *v186;
  uint64_t *v187;
  uint64_t v188;
  int64_t v189;
  char *v190;
  unsigned __int8 v191;
  char *p_p;
  int64_t v193;
  char *v194;
  int v195;
  void *v196;
  int64_t v197;
  char *v198;
  char *v199;
  int64_t v200;
  int64_t v201;
  std::string::size_type v202;
  char v203;
  uint64_t v204;
  unint64_t v205;
  size_t v206;
  int64_t v207;
  void *v208;
  char *v209;
  int64_t v210;
  int v211;
  int64_t v212;
  char *v213;
  char *v214;
  unsigned int v215;
  int v216;
  _QWORD *v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  BOOL v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  const __CFDictionary *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  CGDataConsumer *v295;
  FILE *TempFile;
  char *v297;
  std::string *v298;
  uint64_t v299;
  CGDataConsumerRef v300;
  std::string *v301;
  uint64_t v302;
  uint64_t **v303;
  std::string *v304;
  uint64_t v305;
  size_t v306;
  std::string *v307;
  std::string *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  unint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _BYTE *v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  unint64_t *v349;
  uint64_t v350;
  char *v351;
  unint64_t *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  unint64_t *v367;
  unint64_t *v368;
  _QWORD *v369;
  unint64_t v370;
  char *v371;
  unint64_t v372;
  BOOL v373;
  _QWORD *v374;
  std::string::size_type *p_size;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _BYTE *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t **v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void (*v441)(_QWORD);
  __CFData *Mutable;
  std::string *v443;
  uint64_t v444;
  CGDataConsumerRef v445;
  std::string *v446;
  uint64_t v447;
  uint64_t *v448;
  std::string *v449;
  uint64_t v450;
  std::string *v451;
  int64_t v452;
  _QWORD *v453;
  _QWORD *v454;
  unint64_t *v455;
  unint64_t *v456;
  unint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  unint64_t v460;
  _QWORD *v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  uint64_t *v466;
  int64_t v467;
  BOOL v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  __int16 v490;
  unint64_t v491;
  __int16 v492;
  unint64_t v493;
  __int16 v494;
  unint64_t v495;
  int64x2_t *v496;
  uint64_t v497;
  __int16 v498;
  unint64_t v499;
  unint64_t v500;
  __int16 v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _OWORD *v509;
  unint64_t v510;
  _OWORD *v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  _OWORD *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t *v521;
  unint64_t *v522;
  uint64_t *v523;
  unint64_t v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t *v527;
  unint64_t v528;
  uint64_t *v529;
  unint64_t v530;
  uint64_t *v531;
  uint64_t *v532;
  uint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t *v537;
  uint64_t *v538;
  uint64_t (**v539)();
  int v540;
  uint64_t (*v541)();
  uint64_t *v542;
  _DWORD *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  unint64_t v549;
  char *v550;
  uint64_t v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  uint64_t v556;
  unint64_t v557;
  _DWORD *v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64x2_t v572;
  uint64_t v573;
  _DWORD *v574;
  int64x2_t v575;
  int32x2_t v576;
  _QWORD *v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  _QWORD *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  unint64_t v598;
  __int16 v599;
  unint64_t v600;
  uint64_t (**v601)();
  _QWORD *v602;
  uint64_t (*v603)();
  unint64_t v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  unint64_t v609;
  unint64_t v610;
  char *v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  char *v617;
  uint64_t v618;
  char *v619;
  char *v620;
  char *v621;
  char *v622;
  uint64_t (*v623)();
  uint64_t *v624;
  uint64_t *v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _QWORD *v631;
  unint64_t v632;
  unint64_t v633;
  char *v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  char *v640;
  uint64_t v641;
  char *v642;
  char *v643;
  char *v644;
  char *v645;
  uint64_t *v646;
  uint64_t *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t *v655;
  CFMutableDataRef v656;
  std::string *v657;
  uint64_t v658;
  CGDataConsumerRef v659;
  std::string *v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t *v666;
  void **v667;
  uint64_t **v668;
  _QWORD *v669;
  _OWORD *v670;
  std::string::size_type v671;
  uint64_t *v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t **v686;
  _QWORD *v687;
  uint64_t *v688;
  uint64_t **v689;
  CFMutableDataRef v690;
  uint64_t (***v691)();
  uint64_t v692;
  void **v693;
  uint64_t **v694;
  uint64_t v695;
  CGDataConsumerRef FlateEncoder;
  uint64_t (***v697)();
  uint64_t v698;
  uint64_t v699;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  CFIndex v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  const UInt8 *v727;
  CFIndex v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  void (*v747)(_QWORD);
  uint64_t v748;
  const UInt8 *v749;
  std::string *v750;
  FILE *v751;
  uint64_t (***v752)();
  uint64_t v753;
  std::string *v754;
  size_t v755;
  std::string *v756;
  unint64_t v757;
  uint64_t v758;
  _QWORD *v759;
  _QWORD *v760;
  _QWORD *v761;
  _QWORD *v762;
  _QWORD *v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unint64_t v775;
  unint64_t v776;
  uint64_t (*v777)(_QWORD, uint64_t);
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t (*v784)(_QWORD, uint64_t);
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unsigned int (*v801)(_QWORD, uint64_t);
  unsigned int (*v802)(_QWORD, uint64_t);
  uint64_t v803;
  std::logic_error *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  std::logic_error *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  std::logic_error *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  std::logic_error *exception;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  std::logic_error *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  std::logic_error *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  std::logic_error *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  std::logic_error *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  std::logic_error *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  std::logic_error *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  std::logic_error *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  std::logic_error *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  std::logic_error *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  std::logic_error *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  char v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  char v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  char v877;
  _QWORD *v878;
  uint64_t v879;
  _QWORD *v880;
  _QWORD *v881;
  const __CFAllocator *allocator;
  CGDataConsumer *v883;
  char *v884;
  uint64_t *v885;
  _QWORD *v886;
  char *__src;
  _BYTE *__srca;
  uint64_t v889;
  size_t v890;
  uint64_t *v891;
  int v892[2];
  void **v893;
  _QWORD *v894;
  size_t __n1;
  _BYTE **__n1a;
  unint64_t v897;
  unint64_t v898;
  uint64_t v899;
  _QWORD *v900;
  int64x2_t v901;
  std::string *v902;
  int64x2_t *i;
  std::string v904;
  std::string v905;
  uint64_t **v906;
  uint64_t *v907;
  uint64_t v908;
  uint64_t *v909;
  uint64_t v910;
  CGDataConsumerRef v911;
  uint64_t v912;
  CFMutableDataRef data;
  _QWORD *v914;
  uint64_t v915;
  std::string context;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  uint64_t v921;
  std::string *v922;
  uint64_t **v923;
  uint64_t *v924;
  uint64_t v925;
  _BYTE *v926;
  _QWORD *v927[4];
  void *__p;
  int64_t v929;
  unsigned __int8 v930;
  FILE *v931;
  uint64_t v932;
  uint64_t *v933;
  uint64_t v934;
  uint64_t (**v935)();
  std::string v936;
  void *v937;
  void *v938;
  uint64_t v939;
  uint64_t *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t *v943;
  void (*v944)(uint64_t);
  PDFLinearizer *v945;
  uint64_t v946;
  std::string theData;
  std::string *p_theData;
  std::string *v949;
  uint64_t (***v950)();
  uint64_t **v951;
  _QWORD *v952[3];
  uint64_t (**v953)();
  uint64_t v954;
  uint64_t v955;
  void ***v956;
  void (*v957)(uint64_t);
  std::vector<char> v958;
  char __s[8];
  uint64_t v960;
  std::string __str;
  uint64_t v962;

  v962 = *MEMORY[0x1E0C80C00];
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629788;
  *(_QWORD *)&v917 = &context;
  v933 = PDFWriterCreate(a2);
  std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:se180100]((uint64_t)&v934, (uint64_t)&context);
  p_context = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v5 = 4;
    p_context = &context;
  }
  else
  {
    if (!(_QWORD)v917)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(p_context->__r_.__value_.__r.__words[0] + 8 * v5))();
LABEL_6:
  v6 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v6 = *(const char **)v6;
  v7 = fopen(v6, "rb");
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E16297E0;
  *(_QWORD *)&v917 = &context;
  v931 = v7;
  std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:se180100]((uint64_t)&v932, (uint64_t)&context);
  v8 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v9 = 4;
    v8 = &context;
    goto LABEL_12;
  }
  if ((_QWORD)v917)
  {
    v9 = 5;
LABEL_12:
    (*(void (**)(void))(v8->__r_.__value_.__r.__words[0] + 8 * v9))();
  }
  v10 = (uint64_t)v931;
  if (!v931)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(0, "srcFile.get()", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 260, 0, v817, v818, v819, v860);
    std::logic_error::logic_error(exception, &context);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  if (!*(_QWORD *)this || (v11 = *(_QWORD *)(*(_QWORD *)this + 464)) == 0)
  {
    v812 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(0, "mainXRefTable", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 263, 0, v813, v814, v815, v860);
    std::logic_error::logic_error(v812, &context);
    v812->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v812, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v927[1] = 0;
  v927[0] = 0;
  v926 = v927;
  v12 = (unint64_t *)*((_QWORD *)this + 6);
  v13 = (unint64_t *)*((_QWORD *)this + 7);
  while (v12 != v13)
  {
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v926, *v12, *v12);
    v12 += 9;
  }
  context.__r_.__value_.__r.__words[0] = 0;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)&context;
  context.__r_.__value_.__r.__words[2] = 0x6002000000;
  *(_QWORD *)&v917 = __Block_byref_object_copy__17381;
  *((_QWORD *)&v917 + 1) = __Block_byref_object_dispose__17382;
  v15 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v17 = (unint64_t *)*((_QWORD *)this + 23);
  v16 = (unint64_t *)*((_QWORD *)this + 24);
  *(_QWORD *)&v918 = &v918;
  *((_QWORD *)&v918 + 1) = &v918;
  v919 = 0u;
  v920 = 0u;
  theData.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919 + 8;
  theData.__r_.__value_.__s.__data_[8] = 0;
  v18 = v14 - v15;
  if (v14 != v15)
  {
    if ((unint64_t)v18 > 0x4924924924924920)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v19 = v18 >> 4;
    v20 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v18 >> 4);
    *((_QWORD *)&v919 + 1) = v20;
    *((_QWORD *)&v920 + 1) = &v20[56 * v21];
    v22 = 56 * v19;
    v23 = v20 + 32;
    do
    {
      *(v23 - 3) = 0;
      *(v23 - 4) = v23 - 3;
      *v23 = 0;
      v23[1] = 0;
      *(v23 - 2) = 0;
      *(v23 - 1) = v23;
      v23 += 7;
      v22 -= 56;
    }
    while (v22);
    *(_QWORD *)&v920 = &v20[56 * v19];
  }
  while (v17 != v16)
  {
    boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>((uint64_t)&theData, *v17, v17[1], (uint64_t)&v918);
    v17 += 2;
  }
  v899 = v11;
  v883 = a2;
  v921 = operator new();
  v24 = (unint64_t *)*((_QWORD *)this + 6);
  v25 = (unint64_t *)*((_QWORD *)this + 7);
  for (i = (int64x2_t *)this; v24 != v25; v24 = (unint64_t *)(v26 + 6))
  {
    v953 = 0;
    v954 = (uint64_t)&v953;
    v955 = 0x4002000000;
    v956 = (void ***)__Block_byref_object_copy__15;
    v957 = __Block_byref_object_dispose__16;
    v958.__end_ = 0;
    v958.__end_cap_.__value_ = 0;
    v958.__begin_ = (std::vector<char>::pointer)&v958.__end_;
    v940 = 0;
    v941 = (uint64_t)&v940;
    v942 = 0x3002000000;
    v943 = (uint64_t *)__Block_byref_object_copy__17_17383;
    v944 = __Block_byref_object_dispose__18_17384;
    v945 = 0;
    theData.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    theData.__r_.__value_.__l.__size_ = 1174405120;
    theData.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13PDFLinearizer14collectObjectsEP7__sFILE_block_invoke;
    p_theData = (std::string *)&unk_1E1661160;
    v949 = &context;
    v950 = &v953;
    std::set<unsigned long>::set[abi:se180100]((uint64_t)v952, &v926);
    v951 = &v940;
    *(_QWORD *)(v941 + 40) = &theData;
    ((void (*)(uint64_t *, unint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t *)&theData, *v24);
    v26 = (char **)(v24 + 3);
    std::vector<unsigned long>::assign<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,0>(v26, *(_QWORD **)(v954 + 40), (_QWORD *)(v954 + 48));
    std::__tree<unsigned long>::destroy(v952[1]);
    _Block_object_dispose(&v940, 8);
    _Block_object_dispose(&v953, 8);
    std::__tree<unsigned long>::destroy((_QWORD *)v958.__end_);
  }
  v27 = this;
  v28 = *((_QWORD *)this + 14);
  for (j = *((_QWORD *)this + 15); j != v28; std::allocator<PDFIndirectObject>::destroy[abi:se180100](j))
    j -= 56;
  v30 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = v28;
  v31 = *(_QWORD *)(v899 + 24) - *(_QWORD *)(v899 + 16);
  v32 = *((_QWORD *)this + 14);
  if (0x6DB6DB6DB6DB6DB7 * ((v30 - v32) >> 3) < (unint64_t)(v31 >> 4))
  {
    if ((unint64_t)v31 > 0x4924924924924920)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v957 = (void (*)(uint64_t))((char *)this + 128);
    v953 = (uint64_t (**)())std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v31 >> 4);
    v954 = (uint64_t)v953 + v28 - v32;
    v955 = v954;
    v956 = (void ***)&v953[7 * v33];
    std::vector<PDFIndirectObject>::__swap_out_circular_buffer((uint64_t *)this + 14, &v953);
    std::__split_buffer<PDFIndirectObject>::~__split_buffer((uint64_t)&v953);
  }
  v953 = 0;
  v954 = (uint64_t)&v953;
  v955 = 0x4002000000;
  v956 = (void ***)__Block_byref_object_copy__20_17386;
  v957 = __Block_byref_object_dispose__21_17387;
  std::vector<char>::vector(&v958, 0x9680uLL);
  v940 = (uint64_t *)MEMORY[0x1E0C809B0];
  v941 = 0x40000000;
  v942 = (uint64_t)___ZN13PDFLinearizer14collectObjectsEP7__sFILE_block_invoke_22;
  v943 = (uint64_t *)&unk_1E1661198;
  v946 = v10;
  v945 = this;
  v944 = (void (*)(uint64_t))&v953;
  v34 = *(off_t **)(v899 + 16);
  v35 = *(off_t **)(v899 + 24);
  if (v34 != v35)
  {
    v36 = 0;
    do
    {
      ((void (*)(uint64_t, uint64_t, off_t, size_t))v942)((uint64_t)&v940, v36++, *v34, v34[1]);
      v34 += 2;
    }
    while (v34 != v35);
  }
  v925 = 0;
  v924 = 0;
  v923 = &v924;
  v914 = 0;
  v915 = 0;
  data = (CFMutableDataRef)&v914;
  std::string::basic_string[abi:se180100]<0>(&__str.__r_.__value_.__l.__data_, "");
  v935 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v936, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    v939 = 0;
    v937 = 0;
    v938 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v936 = __str;
    v939 = 0;
    v937 = 0;
    v938 = 0;
  }
  v38 = (uint64_t *)((char *)this + 136);
  v37 = (char *)*((_QWORD *)this + 17);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v935;
  std::vector<std::reference_wrapper<PDFIndirectObject>>::insert((uint64_t)this + 136, v37, &__str);
  v39 = (char *)(*((_QWORD *)this + 17) + 8);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v935;
  std::vector<std::reference_wrapper<PDFIndirectObject>>::insert((uint64_t)this + 136, v39, &__str);
  v41 = (unint64_t *)*((_QWORD *)this + 14);
  v40 = (unint64_t *)*((_QWORD *)this + 15);
  if (v41 == v40)
  {
    v42 = 0;
    v884 = 0;
    v43 = 0;
    __src = 0;
  }
  else
  {
    *(_QWORD *)v892 = 0;
    v42 = 0;
    v884 = 0;
    v897 = 0;
    v43 = 0;
    __src = 0;
    do
    {
      v45 = *((_QWORD *)v27 + 6);
      v44 = *((_QWORD *)v27 + 7);
      if (v44 == v45)
        goto LABEL_911;
      v46 = *v41;
      if (*v41 == *(_QWORD *)v45
        || PDFLinearizerPageInfo::hasReferenceToObject(*(PDFLinearizerPageInfo **)(v45 + 24), *(PDFLinearizerPageInfo **)(v45 + 32), *v41))
      {
        v48 = (unint64_t **)i[9].i64[0];
        v47 = i[9].u64[1];
        if ((unint64_t)v48 >= v47)
        {
          v50 = ((uint64_t)v48 - *v38) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v51 = v47 - *v38;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v53 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v53);
          else
            v54 = 0;
          v65 = (unint64_t **)(v53 + 8 * v50);
          *v65 = v41;
          v49 = v65 + 1;
          v67 = (char *)i[8].i64[1];
          v66 = (char *)i[9].i64[0];
          if (v66 != v67)
          {
            do
            {
              v68 = (unint64_t *)*((_QWORD *)v66 - 1);
              v66 -= 8;
              *--v65 = v68;
            }
            while (v66 != v67);
            v66 = (char *)*v38;
          }
          i[8].i64[1] = (uint64_t)v65;
          i[9].i64[0] = (uint64_t)v49;
          i[9].i64[1] = v53 + 8 * v54;
          if (v66)
            operator delete(v66);
        }
        else
        {
          *v48 = v41;
          v49 = v48 + 1;
        }
        i[9].i64[0] = (uint64_t)v49;
        goto LABEL_82;
      }
      v55 = v927[0];
      if (v927[0])
      {
        v56 = v927;
        do
        {
          v57 = v55;
          v58 = v56;
          v59 = v55[4];
          v60 = v55 + 1;
          if (v59 >= v46)
          {
            v60 = v57;
            v56 = (_QWORD **)v57;
          }
          v55 = (_QWORD *)*v60;
        }
        while (v55);
        if (v56 != v927)
        {
          if (v59 < v46)
            v57 = v58;
          if (v46 >= v57[4])
          {
            std::__tree<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>>>::__emplace_multi<std::pair<unsigned long,PDFIndirectObject&>>((uint64_t **)&data, v46, (uint64_t)v41);
            goto LABEL_82;
          }
        }
      }
      v61 = v40;
      v62 = v45 + 72;
      if (v45 + 72 != v44)
      {
        v63 = 0;
        v64 = 0;
        while (1)
        {
          if (PDFLinearizerPageInfo::hasReferenceToObject(*(PDFLinearizerPageInfo **)(v62 + 24), *(PDFLinearizerPageInfo **)(v62 + 32), v46))
          {
            if (v63)
            {
              if ((unint64_t)v43 < v897)
              {
                *(_QWORD *)v43 = v41;
                v43 += 8;
                goto LABEL_114;
              }
              v74 = (v43 - __src) >> 3;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              v40 = v61;
              if ((uint64_t)(v897 - (_QWORD)__src) >> 2 > v75)
                v75 = (uint64_t)(v897 - (_QWORD)__src) >> 2;
              if (v897 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
                v76 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v76);
              else
                v77 = 0;
              v38 = &i[8].i64[1];
              v82 = (char *)(v76 + 8 * v74);
              *(_QWORD *)v82 = v41;
              v83 = v82 + 8;
              if (v43 != __src)
              {
                do
                {
                  v84 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v82 - 1) = v84;
                  v82 -= 8;
                }
                while (v43 != __src);
                v43 = __src;
              }
              __src = v82;
              v897 = v76 + 8 * v77;
              if (v43)
                operator delete(v43);
              v43 = v83;
              goto LABEL_82;
            }
            v64 = *(_QWORD *)v62;
            v63 = 1;
          }
          v62 += 72;
          if (v62 == v44)
          {
            if (v63 != 1)
              break;
            std::__tree<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>>>::__emplace_multi<std::pair<unsigned long,PDFIndirectObject&>>((uint64_t **)&data, v64, (uint64_t)v41);
            goto LABEL_114;
          }
        }
      }
      if (v46 == i[16].i64[0])
      {
LABEL_114:
        v38 = &i[8].i64[1];
        v40 = v61;
      }
      else
      {
        v40 = v61;
        if ((unint64_t)v42 >= *(_QWORD *)v892)
        {
          v78 = (v42 - v884) >> 3;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          if ((uint64_t)(*(_QWORD *)v892 - (_QWORD)v884) >> 2 > v79)
            v79 = (uint64_t)(*(_QWORD *)v892 - (_QWORD)v884) >> 2;
          if (*(_QWORD *)v892 - (_QWORD)v884 >= 0x7FFFFFFFFFFFFFF8uLL)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v79;
          if (v80)
            v80 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v80);
          else
            v81 = 0;
          v38 = &i[8].i64[1];
          v85 = (char *)(v80 + 8 * v78);
          *(_QWORD *)v85 = v41;
          v86 = v85 + 8;
          if (v42 != v884)
          {
            do
            {
              v87 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v85 - 1) = v87;
              v85 -= 8;
            }
            while (v42 != v884);
            v42 = v884;
          }
          v884 = v85;
          *(_QWORD *)v892 = v80 + 8 * v81;
          if (v42)
            operator delete(v42);
          v42 = v86;
        }
        else
        {
          *(_QWORD *)v42 = v41;
          v42 += 8;
          v38 = &i[8].i64[1];
        }
      }
LABEL_82:
      v69 = v924;
      v70 = &v924;
      v71 = &v924;
      if (v924)
      {
        while (1)
        {
          while (1)
          {
            v71 = (uint64_t **)v69;
            v72 = v69[4];
            if (v46 >= v72)
              break;
            v69 = *v71;
            v70 = v71;
            if (!*v71)
              goto LABEL_89;
          }
          if (v72 >= v46)
            break;
          v69 = v71[1];
          if (!v69)
          {
            v70 = v71 + 1;
            goto LABEL_89;
          }
        }
      }
      else
      {
LABEL_89:
        v73 = (uint64_t *)operator new(0x30uLL);
        v73[4] = v46;
        v73[5] = (uint64_t)v41;
        *v73 = 0;
        v73[1] = 0;
        v73[2] = (uint64_t)v71;
        *v70 = v73;
        if (*v923)
        {
          v923 = (uint64_t **)*v923;
          v73 = *v70;
        }
        std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v924, v73);
        ++v925;
      }
      v41 += 7;
      v27 = (PDFLinearizer *)i;
    }
    while (v41 != v40);
  }
  v89 = (uint64_t (****)())*((_QWORD *)v27 + 18);
  v88 = *((_QWORD *)v27 + 19);
  if ((unint64_t)v89 >= v88)
  {
    v91 = ((uint64_t)v89 - *v38) >> 3;
    if ((unint64_t)(v91 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v92 = v88 - *v38;
    v93 = v92 >> 2;
    if (v92 >> 2 <= (unint64_t)(v91 + 1))
      v93 = v91 + 1;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v94 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v94 = v93;
    if (v94)
      v94 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v94);
    else
      v95 = 0;
    v96 = (uint64_t (****)())(v94 + 8 * v91);
    v97 = v94 + 8 * v95;
    *v96 = &v935;
    v90 = v96 + 1;
    v99 = (char *)*((_QWORD *)v27 + 17);
    v98 = (char *)*((_QWORD *)v27 + 18);
    if (v98 != v99)
    {
      do
      {
        v100 = (uint64_t (***)())*((_QWORD *)v98 - 1);
        v98 -= 8;
        *--v96 = v100;
      }
      while (v98 != v99);
      v98 = (char *)*v38;
    }
    *((_QWORD *)v27 + 17) = v96;
    *((_QWORD *)v27 + 18) = v90;
    *((_QWORD *)v27 + 19) = v97;
    if (v98)
      operator delete(v98);
  }
  else
  {
    *v89 = &v935;
    v90 = v89 + 1;
  }
  v101 = *((_QWORD *)v27 + 20);
  *((_QWORD *)v27 + 18) = v90;
  v102 = v915 + ((v43 - __src) >> 3) + ((v42 - v884) >> 3);
  if (v102 > (*((_QWORD *)v27 + 22) - v101) >> 3)
  {
    if (v102 >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v103 = *((_QWORD *)v27 + 21);
    v104 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v102);
    v105 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFF8];
    v107 = &v104[8 * v106];
    v109 = (char *)*((_QWORD *)v27 + 20);
    v108 = (char *)*((_QWORD *)v27 + 21);
    v110 = v105;
    if (v108 != v109)
    {
      do
      {
        v111 = *((_QWORD *)v108 - 1);
        v108 -= 8;
        *((_QWORD *)v110 - 1) = v111;
        v110 -= 8;
      }
      while (v108 != v109);
      v108 = (char *)*((_QWORD *)v27 + 20);
    }
    *((_QWORD *)v27 + 20) = v110;
    *((_QWORD *)v27 + 21) = v105;
    *((_QWORD *)v27 + 22) = v107;
    if (v108)
      operator delete(v108);
  }
  v893 = (void **)((char *)v27 + 160);
  v112 = data;
  if (data == (CFMutableDataRef)&v914)
    goto LABEL_213;
  v113 = v914;
  do
  {
    if (!v113)
      break;
    v114 = *((_QWORD *)v112 + 4);
    v115 = v113;
    v116 = &v914;
    while (1)
    {
      v117 = v115[4];
      if (v114 >= v117)
        break;
      v116 = (_QWORD **)v115;
LABEL_161:
      v115 = (_QWORD *)*v115;
      if (!v115)
        goto LABEL_204;
    }
    if (v117 < v114)
    {
      ++v115;
      goto LABEL_161;
    }
    v118 = (_QWORD *)*v115;
    v119 = v115;
    if (*v115)
    {
      v119 = v115;
      do
      {
        v120 = v118[4];
        v121 = v120 >= v114;
        if (v120 >= v114)
          v122 = v118;
        else
          v122 = v118 + 1;
        if (v121)
          v119 = v118;
        v118 = (_QWORD *)*v122;
      }
      while (*v122);
    }
    v123 = (_QWORD *)v115[1];
    if (v123)
    {
      do
      {
        v124 = v123[4];
        v125 = v114 >= v124;
        if (v114 >= v124)
          v126 = v123 + 1;
        else
          v126 = v123;
        if (!v125)
          v116 = (_QWORD **)v123;
        v123 = (_QWORD *)*v126;
      }
      while (*v126);
    }
    if (v119 != v116)
    {
      v127 = (char *)i[10].i64[1];
      do
      {
        v128 = i[11].u64[0];
        if ((unint64_t)v127 >= v128)
        {
          v129 = (v127 - (_BYTE *)*v893) >> 3;
          if ((unint64_t)(v129 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v130 = v128 - (_QWORD)*v893;
          v131 = v130 >> 2;
          if (v130 >> 2 <= (unint64_t)(v129 + 1))
            v131 = v129 + 1;
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
            v132 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v132 = v131;
          if (v132)
            v132 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v132);
          else
            v133 = 0;
          v134 = (_QWORD *)(v132 + 8 * v129);
          *v134 = v119[5];
          v127 = (char *)(v134 + 1);
          v136 = (char *)i[10].i64[0];
          v135 = (char *)i[10].i64[1];
          if (v135 != v136)
          {
            do
            {
              v137 = *((_QWORD *)v135 - 1);
              v135 -= 8;
              *--v134 = v137;
            }
            while (v135 != v136);
            v135 = (char *)*v893;
          }
          i[10].i64[0] = (uint64_t)v134;
          i[10].i64[1] = (uint64_t)v127;
          i[11].i64[0] = v132 + 8 * v133;
          if (v135)
            operator delete(v135);
        }
        else
        {
          *(_QWORD *)v127 = v119[5];
          v127 += 8;
        }
        i[10].i64[1] = (uint64_t)v127;
        v138 = (_QWORD *)v119[1];
        if (v138)
        {
          do
          {
            v139 = v138;
            v138 = (_QWORD *)*v138;
          }
          while (v138);
        }
        else
        {
          do
          {
            v139 = (_QWORD *)v119[2];
            v140 = *v139 == (_QWORD)v119;
            v119 = v139;
          }
          while (!v140);
        }
        v119 = v139;
      }
      while (v139 != v116);
      v113 = v914;
    }
LABEL_204:
    v27 = (PDFLinearizer *)i;
    if (!v113)
      break;
    v141 = *((_QWORD *)v112 + 4);
    v112 = (CFMutableDataRef)&v914;
    v142 = v113;
    do
    {
      v143 = v142[4];
      v144 = v141 >= v143;
      if (v141 >= v143)
        v145 = v142 + 1;
      else
        v145 = v142;
      if (!v144)
        v112 = (CFMutableDataRef)v142;
      v142 = (_QWORD *)*v145;
    }
    while (*v145);
  }
  while (v112 != (CFMutableDataRef)&v914);
LABEL_213:
  v146 = (v43 - __src) >> 3;
  std::vector<std::reference_wrapper<PDFIndirectObject>>::__insert_with_size[abi:se180100]<std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>,std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>>(v893, *((char **)v27 + 21), __src, v43, v146);
  std::vector<std::reference_wrapper<PDFIndirectObject>>::__insert_with_size[abi:se180100]<std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>,std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>>(v893, *((char **)v27 + 21), v884, v42, (v42 - v884) >> 3);
  v147 = v146 + v915 + 1;
  *((_QWORD *)v27 + 9) = v915 + 1;
  *((_QWORD *)v27 + 10) = v147;
  v149 = (unint64_t **)*((_QWORD *)v27 + 20);
  v148 = (unint64_t **)*((_QWORD *)v27 + 21);
  *((_QWORD *)v27 + 12) = v148 - v149 + 1;
  v150 = (unint64_t **)*((_QWORD *)v27 + 17);
  if (v150 != *((unint64_t ***)v27 + 18))
  {
    do
    {
      v151 = **v150;
      v152 = *((_QWORD *)v27 + 12) + (((uint64_t)v150 - *((_QWORD *)v27 + 17)) >> 3);
      v153.n128_u64[0] = v151;
      v153.n128_u64[1] = v152;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>((uint64_t *)v27 + 29, v151, v153);
      v154 = *(_QWORD *)(context.__r_.__value_.__l.__size_ + 64);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(context.__r_.__value_.__l.__size_ + 72) - v154) >> 3) <= v151)
        goto LABEL_911;
      v155 = v154 + 56 * v151;
      v156 = *(_QWORD **)(v155 + 24);
      v157 = (_QWORD *)(v155 + 32);
      if (v156 != (_QWORD *)(v155 + 32))
      {
        do
        {
          v158 = (std::string ***)std::map<unsigned long,unsigned long>::at(v924, v156[4]);
          PDFLinearizer::updateObjectReference(*v158, (PDFIndirectObject *)v151, v152);
          v159 = (_QWORD *)v156[1];
          if (v159)
          {
            do
            {
              v160 = v159;
              v159 = (_QWORD *)*v159;
            }
            while (v159);
          }
          else
          {
            do
            {
              v160 = (_QWORD *)v156[2];
              v140 = *v160 == (_QWORD)v156;
              v156 = v160;
            }
            while (!v140);
          }
          v156 = v160;
        }
        while (v160 != v157);
      }
      ++v150;
    }
    while (v150 != *((unint64_t ***)v27 + 18));
    v149 = (unint64_t **)*((_QWORD *)v27 + 20);
    v148 = (unint64_t **)*((_QWORD *)v27 + 21);
  }
  if (v149 != v148)
  {
    do
    {
      v161 = **v149;
      v162 = (((char *)v149 - (_BYTE *)*v893) >> 3) + 1;
      v163.n128_u64[0] = v161;
      v163.n128_u64[1] = v162;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>((uint64_t *)v27 + 29, v161, v163);
      v164 = *(_QWORD *)(context.__r_.__value_.__l.__size_ + 64);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(context.__r_.__value_.__l.__size_ + 72) - v164) >> 3) <= v161)
        goto LABEL_911;
      v165 = v164 + 56 * v161;
      v166 = *(_QWORD **)(v165 + 24);
      v167 = (_QWORD *)(v165 + 32);
      if (v166 != (_QWORD *)(v165 + 32))
      {
        do
        {
          v168 = (std::string ***)std::map<unsigned long,unsigned long>::at(v924, v166[4]);
          PDFLinearizer::updateObjectReference(*v168, (PDFIndirectObject *)v161, v162);
          v169 = (_QWORD *)v166[1];
          if (v169)
          {
            do
            {
              v170 = v169;
              v169 = (_QWORD *)*v169;
            }
            while (v169);
          }
          else
          {
            do
            {
              v170 = (_QWORD *)v166[2];
              v140 = *v170 == (_QWORD)v166;
              v166 = v170;
            }
            while (!v140);
          }
          v166 = v170;
        }
        while (v170 != v167);
      }
      ++v149;
    }
    while (v149 != *((unint64_t ***)v27 + 21));
  }
  v171 = (_QWORD *)*((_QWORD *)v27 + 26);
  v172 = (_QWORD *)((char *)v27 + 216);
  v173 = __src;
  if (v171 != (_QWORD *)((char *)v27 + 216))
  {
    v174 = (_QWORD *)*((_QWORD *)v27 + 27);
    v886 = (_QWORD *)((char *)v27 + 216);
    while (1)
    {
      v175 = v171[4];
      v176 = v172;
      v177 = v172;
      if (!v174)
        goto LABEL_260;
      v177 = v172;
      while (1)
      {
        v178 = v174[4];
        if (v175 >= v178)
          break;
        v177 = v174;
LABEL_242:
        v174 = (_QWORD *)*v174;
        v176 = v177;
        if (!v174)
          goto LABEL_260;
      }
      if (v178 < v175)
      {
        ++v174;
        goto LABEL_242;
      }
      v179 = (_QWORD *)*v174;
      v176 = v174;
      if (*v174)
      {
        v176 = v174;
        do
        {
          v180 = v179[4];
          v181 = v180 >= v175;
          if (v180 >= v175)
            v182 = v179;
          else
            v182 = v179 + 1;
          if (v181)
            v176 = v179;
          v179 = (_QWORD *)*v182;
        }
        while (*v182);
      }
      v183 = (_QWORD *)v174[1];
      if (v183)
      {
        do
        {
          v184 = v183[4];
          v185 = v175 >= v184;
          if (v175 >= v184)
            v186 = v183 + 1;
          else
            v186 = v183;
          if (!v185)
            v177 = v183;
          v183 = (_QWORD *)*v186;
        }
        while (*v186);
      }
LABEL_260:
      v898 = v171[4];
      v187 = std::map<unsigned long,unsigned long>::at(*((_QWORD **)v27 + 30), v175);
      if (v176 != v177)
        break;
LABEL_322:
      v172 = v886;
      v174 = (_QWORD *)*v886;
      v173 = __src;
      if (*v886)
      {
        v219 = v171[4];
        v171 = v886;
        v220 = (_QWORD *)*v886;
        do
        {
          v221 = v220[4];
          v222 = v219 >= v221;
          if (v219 >= v221)
            v223 = v220 + 1;
          else
            v223 = v220;
          if (!v222)
            v171 = v220;
          v220 = (_QWORD *)*v223;
        }
        while (*v223);
        if (v171 != v886)
          continue;
      }
      goto LABEL_331;
    }
    v889 = *v187;
    v900 = v177;
    while (1)
    {
      v188 = *std::map<unsigned long,unsigned long>::at(v924, v176[5]);
      std::string::basic_string[abi:se180100]<0>((char **)&__p, "/Parent");
      v189 = *(unsigned __int8 *)(v188 + 31);
      if ((v189 & 0x80u) == 0)
        v190 = (char *)(v188 + 8);
      else
        v190 = *(char **)(v188 + 8);
      v191 = v930;
      if ((v930 & 0x80u) == 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      if ((v930 & 0x80u) == 0)
        v193 = v930;
      else
        v193 = v929;
      if (v193)
      {
        if ((v189 & 0x80u) != 0)
          v189 = *(_QWORD *)(v188 + 16);
        if (v189 < v193)
          goto LABEL_314;
        v194 = &v190[v189];
        v195 = *p_p;
        v196 = v190;
        do
        {
          v197 = v189 - v193;
          if (v197 == -1)
            break;
          v198 = (char *)memchr(v196, v195, v197 + 1);
          if (!v198)
            break;
          v199 = v198;
          if (!memcmp(v198, p_p, v193))
          {
            v177 = v900;
            if (v199 != v194)
            {
              v200 = v199 - v190;
              if (v199 - v190 != -1)
                goto LABEL_282;
            }
            goto LABEL_314;
          }
          v196 = v199 + 1;
          v189 = v194 - (v199 + 1);
        }
        while (v189 >= v193);
      }
      else
      {
        v200 = 0;
LABEL_282:
        snprintf((char *)&__str, 0x20uLL, "%lu 0 R", v898);
        snprintf(__s, 0x20uLL, "%lu 0 R", v889);
        v890 = strlen(__s);
        __n1 = strlen((const char *)&__str);
        v201 = v930;
        if ((v930 & 0x80u) != 0)
          v201 = v929;
        v202 = v201 + v200;
        v203 = *(_BYTE *)(v188 + 31);
        if (v203 >= 0)
          v204 = v188 + 8;
        else
          v204 = *(_QWORD *)(v188 + 8);
        if (v203 >= 0)
          v205 = *(unsigned __int8 *)(v188 + 31);
        else
          v205 = *(_QWORD *)(v188 + 16);
        v206 = strlen((const char *)&__str);
        if (v205 >= v202)
        {
          v207 = v206;
          if (v206)
          {
            v208 = (void *)(v204 + v202);
            v209 = (char *)(v204 + v205);
            v210 = v205 - v202;
            if ((uint64_t)(v205 - v202) >= v207)
            {
              v211 = __str.__r_.__value_.__s.__data_[0];
              do
              {
                v212 = v210 - v207;
                if (v212 == -1)
                  break;
                v213 = (char *)memchr(v208, v211, v212 + 1);
                if (!v213)
                  break;
                v214 = v213;
                if (!memcmp(v213, &__str, v207))
                {
                  if (v214 == v209)
                    break;
                  v202 = (std::string::size_type)&v214[-v204];
                  goto LABEL_305;
                }
                v208 = v214 + 1;
                v210 = v209 - (v214 + 1);
              }
              while (v210 >= v207);
            }
          }
          else
          {
LABEL_305:
            if (v202 != -1)
            {
              if (v205 < v202 - 1)
                goto LABEL_911;
              v215 = *(char *)(v204 + v202 - 1);
              if ((v215 & 0x80000000) != 0)
                v216 = __maskrune(v215, 0x4000uLL);
              else
                v216 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v215 + 60) & 0x4000;
              if (v216)
              {
                std::string::replace((std::string *)(v188 + 8), v202, __n1, __s);
                PDFIndirectObject::addToReplacementOffsets((PDFIndirectObject *)v188, v898, v890 - __n1);
              }
            }
          }
        }
        v191 = v930;
      }
      v177 = v900;
LABEL_314:
      if ((v191 & 0x80) != 0)
        operator delete(__p);
      v217 = (_QWORD *)v176[1];
      v27 = (PDFLinearizer *)i;
      if (v217)
      {
        do
        {
          v218 = v217;
          v217 = (_QWORD *)*v217;
        }
        while (v217);
      }
      else
      {
        do
        {
          v218 = (_QWORD *)v176[2];
          v140 = *v218 == (_QWORD)v176;
          v176 = v218;
        }
        while (!v140);
      }
      v176 = v218;
      if (v218 == v177)
        goto LABEL_322;
    }
  }
LABEL_331:
  if (v937)
  {
    v938 = v937;
    operator delete(v937);
  }
  if (SHIBYTE(v936.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v936.__r_.__value_.__l.__data_);
  if (v884)
    operator delete(v884);
  if (v173)
    operator delete(v173);
  std::__tree<unsigned long>::destroy(v914);
  std::__tree<unsigned long>::destroy(v924);
  _Block_object_dispose(&v953, 8);
  if (v958.__begin_)
  {
    v958.__end_ = v958.__begin_;
    operator delete(v958.__begin_);
  }
  _Block_object_dispose(&context, 8);
  if (v921)
    MEMORY[0x186DC23C4](v921, 0xC400A2AC0F1);
  v953 = (uint64_t (**)())&v919 + 1;
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100]((void ***)&v953);
  std::__list_imp<long long>::clear(&v918);
  std::__tree<unsigned long>::destroy(v927[0]);
  v224 = *((_QWORD *)v27 + 12);
  if (!v224)
  {
    v820 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "_firstPageXRefTableFirstObject == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 695, 0, v821, v822, v823, v860);
    std::logic_error::logic_error(v820, &context);
    v820->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v820, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v225 = *((_QWORD *)v27 + 18) - *((_QWORD *)v27 + 17);
  if (!v225)
  {
    v824 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "numObjects == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 697, 0, v825, v826, v827, v860);
    std::logic_error::logic_error(v824, &context);
    v824->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v824, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  *((_QWORD *)v27 + 11) = PDFXRefTableCreate2(v225 >> 3, v224);
  v891 = (uint64_t *)((char *)v27 + 88);
  v226 = *((_QWORD *)v27 + 21) - *((_QWORD *)v27 + 20);
  if (!v226)
  {
    v828 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "numObjects == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 706, 0, v829, v830, v831, v860);
    std::logic_error::logic_error(v828, &context);
    v828->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v828, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  *((_QWORD *)v27 + 13) = PDFXRefTableCreate2(v226 >> 3, 0);
  v227 = (_QWORD *)((char *)v27 + 104);
  v228 = v933;
  PDFWriterPrintf((_BYTE **)v933, (uint64_t)"%%PDF-%d.%d\n", v229, v230, v231, v232, v233, v234, *(unsigned int *)(*(_QWORD *)v27 + 4));
  PDFWriterPrintf((_BYTE **)v228, (uint64_t)"%s\n", v235, v236, v237, v238, v239, v240, (uint64_t)"%\xC4\xE5\xF2\xE5\xEB\xA7\xF3\xA0\xD0\xC4\xC6%lu 0 obj\n");
  v245 = *(_QWORD *)(*(_QWORD *)v27 + 24);
  if (v245)
    v246 = *(_QWORD *)(v245 + 48);
  else
    v246 = 0;
  PDFLinearizer::emitLinearizationDict(v27, v933, v246, 0, v241, v242, v243, v244);
  v885 = (uint64_t *)((char *)v27 + 280);
  if (v883)
  {
    *((_QWORD *)v27 + 35) = *((_QWORD *)v883 + 6);
    PDFXRefTableEmit(*((_BYTE **)v27 + 11), (uint64_t)v883, 0, v247, v248, v249, v250, v251);
    v879 = *((_QWORD *)v883 + 6);
  }
  else
  {
    *((_QWORD *)v27 + 35) = 0;
    PDFXRefTableEmit(*((_BYTE **)v27 + 11), 0, 0, v247, v248, v249, v250, v251);
    v879 = 0;
  }
  PDFLinearizer::emitFirstPageTrailer((uint64_t)v27, (_BYTE **)v933, v252, v253, v254, v255, v256, v257);
  PDFWriterPrintf((_BYTE **)v933, (uint64_t)"        \n", v258, v259, v260, v261, v262, v263, v861);
  v264 = v933;
  v953 = 0;
  PDFWriterBeginObject(v933, *((_QWORD *)v27 + 12) + 1, (_QWORD *)v27 + 34, v265, v266, v267, v268, v269);
  PDFWriterPrintf((_BYTE **)v264, (uint64_t)"<<", v270, v271, v272, v273, v274, v275, v862);
  PDFWriterPrintf((_BYTE **)v264, (uint64_t)"/Type /Catalog", v276, v277, v278, v279, v280, v281, v863);
  theData.__r_.__value_.__r.__words[0] = 0;
  theData.__r_.__value_.__l.__size_ = (std::string::size_type)&theData;
  theData.__r_.__value_.__r.__words[2] = 0x2000000000;
  LOBYTE(p_theData) = 0;
  v282 = (const __CFDictionary *)*((_QWORD *)v27 + 41);
  context.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  context.__r_.__value_.__l.__size_ = 0x40000000;
  context.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13PDFLinearizer11emitCatalogEP9PDFWriter_block_invoke;
  *(_QWORD *)&v917 = &unk_1E16611C0;
  *(_QWORD *)&v918 = v27;
  *((_QWORD *)&v918 + 1) = v264;
  *((_QWORD *)&v917 + 1) = &theData;
  CFDictionaryApplyFunction(v282, (CFDictionaryApplierFunction)call_dict_block, &context);
  PDFWriterPrintf((_BYTE **)v264, (uint64_t)">>", v283, v284, v285, v286, v287, v288, v864);
  PDFWriterEndObject(v264, &v953, v289, v290, v291, v292, v293, v294);
  _Block_object_dispose(&theData, 8);
  v295 = v883;
  if (v883)
    v295 = (CGDataConsumer *)*((_QWORD *)v883 + 6);
  *((_QWORD *)v27 + 38) = v295;
  memset(&v905, 0, sizeof(v905));
  TempFile = PDFLinearizer::createTempFile("2nd", (uint64_t)&v905);
  if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v904, v905.__r_.__value_.__l.__data_, v905.__r_.__value_.__l.__size_);
  else
    v904 = v905;
  *(_QWORD *)&v917 = 0;
  v297 = (char *)operator new(0x20uLL);
  *(_QWORD *)v297 = off_1E1629838;
  *(std::string *)(v297 + 8) = v904;
  memset(&v904, 0, sizeof(v904));
  *(_QWORD *)&v917 = v297;
  __p = TempFile;
  std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:se180100]((uint64_t)&v929, (uint64_t)&context);
  v298 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v299 = 4;
    v298 = &context;
  }
  else
  {
    if (!(_QWORD)v917)
      goto LABEL_362;
    v299 = 5;
  }
  (*(void (**)(void))(v298->__r_.__value_.__r.__words[0] + 8 * v299))();
LABEL_362:
  if (SHIBYTE(v904.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v904.__r_.__value_.__l.__data_);
  v300 = CGDataConsumerCreateWithFile((CGDataConsumerRef)__p);
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629890;
  *(_QWORD *)&v917 = &context;
  v926 = v300;
  std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100]((uint64_t)v927, (uint64_t)&context);
  v301 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v302 = 4;
    v301 = &context;
  }
  else
  {
    if (!(_QWORD)v917)
      goto LABEL_369;
    v302 = 5;
  }
  (*(void (**)(void))(v301->__r_.__value_.__r.__words[0] + 8 * v302))();
LABEL_369:
  v303 = (uint64_t **)PDFWriterCreate(v926);
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E16298E8;
  *(_QWORD *)&v917 = &context;
  v923 = v303;
  std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:se180100]((uint64_t)&v924, (uint64_t)&context);
  v304 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v305 = 4;
    v304 = &context;
    goto LABEL_373;
  }
  if ((_QWORD)v917)
  {
    v305 = 5;
LABEL_373:
    (*(void (**)(void))(v304->__r_.__value_.__r.__words[0] + 8 * v305))();
  }
  v306 = *((_QWORD *)v27 + 38);
  v922 = 0;
  if (v306 < 0x101)
  {
    v307 = 0;
  }
  else
  {
    v307 = (std::string *)operator new[]();
    v922 = v307;
    v306 = *((_QWORD *)v27 + 38);
  }
  if (!v307)
    v307 = &context;
  memset(v307, 32, v306);
  if (v922)
    v308 = v922;
  else
    v308 = &context;
  CGDataConsumerPutBytes((uint64_t)v926, (uint64_t)v308, v306);
  if (v922)
    MEMORY[0x186DC23C4](v922, 0x1000C4077774924);
  v315 = *((_QWORD *)v27 + 17);
  v314 = *((_QWORD *)v27 + 18);
  if ((unint64_t)(v314 - v315) <= 0x10)
  {
    v832 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "_firstPageObjects.size() >= 3", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 914, 0, v833, v834, v835, v865);
    std::logic_error::logic_error(v832, &context);
    v832->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v832, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v316 = (uint64_t *)v923;
  v878 = (_QWORD *)((char *)v27 + 272);
  if (v923)
    v317 = *v923;
  else
    v317 = 0;
  v318 = v315 + 16;
  if (v315 + 16 != v314 - 8)
  {
    v319 = (uint64_t *)(v315 + 16);
    while (1)
    {
      v320 = *v319;
      v321 = *((_QWORD *)v27 + 12) + ((v318 - *((_QWORD *)v27 + 17)) >> 3);
      context.__r_.__value_.__r.__words[0] = 0;
      PDFWriterBeginObject(v316, v321, &context, v309, v310, v311, v312, v313);
      v322 = (_QWORD *)*((_QWORD *)v27 + 11);
      if (v322)
      {
        v323 = v322[1];
        v121 = v321 >= v323;
        v324 = v321 - v323;
        if (v121)
        {
          v325 = v322[2];
          if (v324 < (v322[3] - v325) >> 4)
            *(_QWORD *)(v325 + 16 * v324) = context.__r_.__value_.__r.__words[0];
        }
      }
      if ((*(char *)(v320 + 31) & 0x80000000) == 0)
        break;
      v326 = *(_QWORD *)(v320 + 8);
      v327 = *(_QWORD *)(v320 + 16);
      if (v316)
        goto LABEL_397;
LABEL_398:
      if (v317)
      {
        v328 = (_BYTE *)v317[5];
        if (v322)
          goto LABEL_404;
      }
      else
      {
        v328 = 0;
        if (v322)
        {
LABEL_404:
          v329 = v322[1];
          v121 = v321 >= v329;
          v330 = v321 - v329;
          if (v121)
          {
            v332 = v322 + 2;
            v331 = v322[2];
            if (v330 < (v332[1] - v331) >> 4)
              *(_QWORD *)(v331 + 16 * v330 + 8) = &v328[-*(_QWORD *)(v331 + 16 * v330)];
          }
        }
      }
      ++v319;
      v318 += 8;
      if (v319 == (uint64_t *)(*((_QWORD *)v27 + 18) - 8))
      {
        v316 = (uint64_t *)v923;
        goto LABEL_410;
      }
    }
    v326 = v320 + 8;
    v327 = *(unsigned __int8 *)(v320 + 31);
    if (!v316)
      goto LABEL_398;
LABEL_397:
    CGDataConsumerPutBytes(*v316, v326, v327);
    v322 = (_QWORD *)*v891;
    goto LABEL_398;
  }
LABEL_410:
  v333 = (uint64_t *)*((_QWORD *)v27 + 20);
  if (*((uint64_t **)v27 + 21) == v333)
  {
    v836 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "_nonFirstPageObjects.size() > 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 932, 0, v837, v838, v839, v865);
    std::logic_error::logic_error(v836, &context);
    v836->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v836, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  if (!*v227)
  {
    v840 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(0, "_mainXRefTable", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 933, 0, v841, v842, v843, v865);
    std::logic_error::logic_error(v840, &context);
    v840->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v840, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  if (v316)
    v334 = *v316;
  else
    v334 = 0;
  v335 = *((_QWORD *)v27 + 20);
  do
  {
    v336 = *v333;
    v337 = ((v335 - (uint64_t)*v893) >> 3) + 1;
    context.__r_.__value_.__r.__words[0] = 0;
    PDFWriterBeginObject(v316, v337, &context, v309, v310, v311, v312, v313);
    v338 = (_QWORD *)*v227;
    if (*v227)
    {
      v339 = v338[1];
      v121 = v337 >= v339;
      v340 = v337 - v339;
      if (v121)
      {
        v341 = v338[2];
        if (v340 < (v338[3] - v341) >> 4)
          *(_QWORD *)(v341 + 16 * v340) = context.__r_.__value_.__r.__words[0];
      }
    }
    if ((*(char *)(v336 + 31) & 0x80000000) == 0)
    {
      v342 = v336 + 8;
      v343 = *(unsigned __int8 *)(v336 + 31);
      if (!v316)
        goto LABEL_424;
LABEL_423:
      CGDataConsumerPutBytes(*v316, v342, v343);
      v338 = (_QWORD *)*v227;
      goto LABEL_424;
    }
    v342 = *(_QWORD *)(v336 + 8);
    v343 = *(_QWORD *)(v336 + 16);
    if (v316)
      goto LABEL_423;
LABEL_424:
    if (v334)
    {
      v344 = *(_QWORD *)(v334 + 40);
      if (!v338)
        goto LABEL_434;
    }
    else
    {
      v344 = 0;
      if (!v338)
        goto LABEL_434;
    }
    v345 = v338[1];
    v121 = v337 >= v345;
    v346 = v337 - v345;
    if (v121)
    {
      v348 = v338 + 2;
      v347 = v338[2];
      if (v346 < (v348[1] - v347) >> 4)
        *(_QWORD *)(v347 + 16 * v346 + 8) = v344 - *(_QWORD *)(v347 + 16 * v346);
    }
LABEL_434:
    ++v333;
    v335 += 8;
  }
  while (v333 != *((uint64_t **)v27 + 21));
  v349 = (unint64_t *)*((_QWORD *)v27 + 6);
  if (*((unint64_t **)v27 + 7) == v349)
    goto LABEL_911;
  v350 = *v891;
  __n1a = (_BYTE **)((char *)v27 + 104);
  if (*v891)
    v350 = (uint64_t)(*(_QWORD *)(v350 + 24) - *(_QWORD *)(v350 + 16)) >> 4;
  v349[6] = v350 - 3;
  v351 = (char *)v27 + 240;
  do
  {
    v352 = v349;
    v353 = std::map<unsigned long,unsigned long>::at(*(_QWORD **)v351, *v349);
    v354 = *v353;
    *v352 = *v353;
    v355 = *((_QWORD *)v27 + 6);
    v356 = (_QWORD *)((char *)v27 + 104);
    if (v352 == (unint64_t *)v355)
    {
      v356 = (_QWORD *)((char *)v27 + 88);
      if (*((unint64_t **)v27 + 7) == v352)
        goto LABEL_911;
    }
    v357 = (_QWORD *)*v356;
    if (*v356)
    {
      v358 = v357[1];
      v359 = v354 - v358;
      if (v354 < v358 || (v360 = v357[2], v359 >= (v357[3] - v360) >> 4))
        v361 = -1;
      else
        v361 = *(_QWORD *)(v360 + 16 * v359);
      v352[1] = v361;
      v121 = v354 + 1 >= v358;
      v362 = v354 + 1 - v358;
      if (v121)
      {
        v363 = v357[2];
        if (v362 >= (v357[3] - v363) >> 4)
          v364 = -1;
        else
          v364 = *(_QWORD *)(v363 + 16 * v362);
        v352[7] = v364;
        v366 = v357 + 2;
        v365 = v357[2];
        if (v362 >= (v366[1] - v365) >> 4)
          v357 = 0;
        else
          v357 = *(_QWORD **)(v365 + 16 * v362 + 8);
      }
      else
      {
        v357 = 0;
        v352[7] = -1;
      }
    }
    else
    {
      v361 = -1;
      v352[1] = -1;
      v352[7] = -1;
    }
    v352[8] = (unint64_t)v357;
    if (v355 < (unint64_t)v352)
    {
      *(v352 - 7) = v361 - 1;
      if (v355 < (unint64_t)(v352 - 9))
        *(v352 - 3) = v354 - *(v352 - 9);
    }
    *(_OWORD *)&context.__r_.__value_.__r.__words[1] = 0uLL;
    context.__r_.__value_.__r.__words[0] = (std::string::size_type)&context.__r_.__value_.__l.__size_;
    v367 = (unint64_t *)v352[3];
    v368 = (unint64_t *)v352[4];
    if (v367 == v368)
    {
      p_size = &context.__r_.__value_.__l.__size_;
    }
    else
    {
      do
      {
        v369 = *(_QWORD **)v351;
        v370 = *v367;
        if (!*(_QWORD *)v351)
          goto LABEL_470;
        v371 = (char *)v27 + 240;
        do
        {
          v372 = v369[4];
          v373 = v372 >= v370;
          if (v372 >= v370)
            v374 = v369;
          else
            v374 = v369 + 1;
          if (v373)
            v371 = (char *)v369;
          v369 = (_QWORD *)*v374;
        }
        while (*v374);
        if (v371 != v351 && v370 >= *((_QWORD *)v371 + 4))
          std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&context, *((_QWORD *)v371 + 5), *((_QWORD *)v371 + 5));
        else
LABEL_470:
          printf("Error: No remapping for object = %lu, page = %zu\n", *v367, 0x8E38E38E38E38E39 * (((uint64_t)v352 - *((_QWORD *)v27 + 6)) >> 3) + 1);
        ++v367;
      }
      while (v367 != v368);
      p_size = (std::string::size_type *)context.__r_.__value_.__r.__words[0];
    }
    std::vector<unsigned long>::assign<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,0>((char **)v352 + 3, p_size, &context.__r_.__value_.__l.__size_);
    std::__tree<unsigned long>::destroy((_QWORD *)context.__r_.__value_.__l.__size_);
    v349 = v352 + 9;
  }
  while (v352 + 9 != *((unint64_t **)v27 + 7));
  if (*((unint64_t **)v27 + 6) == v349)
    goto LABEL_911;
  v382 = *((_QWORD *)v27 + 13);
  v383 = *((_QWORD *)v27 + 9);
  if (v382)
  {
    v384 = *(_QWORD *)(v382 + 8);
    v121 = v383 >= v384;
    v385 = v383 - v384;
    if (v121 && (v387 = v382 + 16, v386 = *(_QWORD *)(v382 + 16), v385 < (*(_QWORD *)(v387 + 8) - v386) >> 4))
      v388 = *(_QWORD *)(v386 + 16 * v385);
    else
      v388 = -1;
  }
  else
  {
    v388 = -1;
  }
  v352[2] = v388 - 1;
  v352[6] = v383 - *v352;
  CGDataConsumerPrintf(v926, "\n", v376, v377, v378, v379, v380, v381, v865);
  v394 = v926;
  if (v926)
    v395 = *((_QWORD *)v926 + 6);
  else
    v395 = 0;
  *((_QWORD *)v27 + 36) = v395;
  PDFXRefTableEmit(*((_BYTE **)v27 + 13), (uint64_t)v394, (_QWORD *)v27 + 37, v389, v390, v391, v392, v393);
  v396 = *((_QWORD *)v27 + 13);
  v397 = v923;
  PDFWriterPrintf((_BYTE **)v923, (uint64_t)"trailer\n", v398, v399, v400, v401, v402, v403, v866);
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)"<<", v404, v405, v406, v407, v408, v409, v867);
  if (v396)
    v416 = (uint64_t)(*(_QWORD *)(v396 + 24) - *(_QWORD *)(v396 + 16)) >> 4;
  else
    v416 = 0;
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)"/Size %d", v410, v411, v412, v413, v414, v415, v416);
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)">>\n", v417, v418, v419, v420, v421, v422, v868);
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)"startxref\n", v423, v424, v425, v426, v427, v428, v869);
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)"%O\n", v429, v430, v431, v432, v433, v434, *v885);
  PDFWriterPrintf((_BYTE **)v397, (uint64_t)"%%%%EOF\n", v435, v436, v437, v438, v439, v440, v870);
  if (v926)
  {
    if (!v926[56])
    {
      v441 = (void (*)(_QWORD))*((_QWORD *)v926 + 10);
      if (v441)
        v441(*((_QWORD *)v926 + 2));
    }
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629940;
  *(_QWORD *)&v917 = &context;
  data = Mutable;
  std::__function::__value_func<void ()(__CFData *)>::__value_func[abi:se180100]((uint64_t)&v914, (uint64_t)&context);
  v443 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v444 = 4;
    v443 = &context;
LABEL_498:
    (*(void (**)(void))(v443->__r_.__value_.__r.__words[0] + 8 * v444))();
  }
  else if ((_QWORD)v917)
  {
    v444 = 5;
    goto LABEL_498;
  }
  v445 = CGDataConsumerCreateWithCFData(data);
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629998;
  *(_QWORD *)&v917 = &context;
  v911 = v445;
  std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100]((uint64_t)&v912, (uint64_t)&context);
  v446 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v447 = 4;
    v446 = &context;
LABEL_503:
    (*(void (**)(void))(v446->__r_.__value_.__r.__words[0] + 8 * v447))();
  }
  else if ((_QWORD)v917)
  {
    v447 = 5;
    goto LABEL_503;
  }
  v448 = PDFWriterCreate(v911);
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E16299F0;
  *(_QWORD *)&v917 = &context;
  v909 = v448;
  std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:se180100]((uint64_t)&v910, (uint64_t)&context);
  v449 = (std::string *)v917;
  if ((std::string *)v917 == &context)
  {
    v450 = 4;
    v449 = &context;
LABEL_508:
    (*(void (**)(void))(v449->__r_.__value_.__r.__words[0] + 8 * v450))();
  }
  else if ((_QWORD)v917)
  {
    v450 = 5;
    goto LABEL_508;
  }
  v451 = (std::string *)*((_QWORD *)v27 + 9);
  v452 = *((_QWORD *)v27 + 10);
  v453 = (_QWORD *)*((_QWORD *)v27 + 11);
  v454 = (_QWORD *)*((_QWORD *)v27 + 13);
  *(_OWORD *)&context.__r_.__value_.__r.__words[1] = 0u;
  v917 = 0u;
  v918 = 0u;
  v919 = 0u;
  v920 = 0u;
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1627FD8;
  v921 = 0;
  v955 = 0;
  v954 = 0;
  v953 = (uint64_t (**)())&v954;
  v942 = 0;
  v941 = 0;
  v940 = &v941;
  v456 = (unint64_t *)*((_QWORD *)v27 + 6);
  v455 = (unint64_t *)*((_QWORD *)v27 + 7);
  if (v455 == v456)
    goto LABEL_911;
  v902 = v451;
  v457 = *v456;
  v894 = v453;
  v458 = 0;
  if (*v456 < v456[6] + *v456)
  {
    v459 = (16 * v457) | 8;
    v460 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v953, v457, v457);
      v461 = v894;
      if (v894)
      {
        v462 = v894[1];
        if (v462 > v457 || (v463 = v894[2], v457 - v462 >= (v894[3] - v463) >> 4))
          v461 = 0;
        else
          v461 = *(_QWORD **)(v463 - 16 * v462 + v459);
      }
      v456 = (unint64_t *)*((_QWORD *)v27 + 6);
      v455 = (unint64_t *)*((_QWORD *)v27 + 7);
      if (v455 == v456)
        goto LABEL_911;
      ++v457;
      if (v458 <= v461)
        v458 = v461;
      if ((unint64_t)v461 < v460)
        v460 = (unint64_t)v461;
      v459 += 16;
      if (v457 >= v456[6] + *v456)
        goto LABEL_525;
    }
  }
  v460 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_525:
  v464 = v456 + 9;
  if (v456 + 9 != v455)
  {
    do
    {
      v465 = (uint64_t *)v456[12];
      v466 = (uint64_t *)v456[13];
      v456 = v464;
      if (v465 != v466)
      {
        do
        {
          v467 = *v465;
          v468 = (uint64_t)v902 > *v465 || v452 <= v467;
          if (!v468)
          {
            std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v940, v467, *v465);
            if (v454
              && (v469 = v454[1], v470 = *v465 - v469, *v465 >= v469)
              && (v471 = v454[2], v470 < (v454[3] - v471) >> 4))
            {
              v472 = *(_QWORD *)(v471 + 16 * v470 + 8);
            }
            else
            {
              v472 = 0;
            }
            if (v472 < v460)
              v460 = v472;
            if ((unint64_t)v458 <= v472)
              v458 = (_QWORD *)v472;
          }
          ++v465;
        }
        while (v465 != v466);
        v455 = (unint64_t *)*((_QWORD *)v27 + 7);
      }
      v464 = v456 + 9;
    }
    while (v456 + 9 != v455);
    v456 = (unint64_t *)*((_QWORD *)v27 + 6);
  }
  v880 = (_QWORD *)((char *)v27 + 296);
  v881 = v454;
  if (v456 == v455)
  {
    v477 = 0;
    v476 = 0;
    v475 = 0;
    v474 = 0;
    v480 = 0x7FFFFFFFFFFFFFFFLL;
    v479 = 0x7FFFFFFFFFFFFFFFLL;
    v478 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v473 = 0;
    v474 = 0;
    v475 = 0;
    v476 = 0;
    v477 = 0;
    v478 = 0x7FFFFFFFFFFFFFFFLL;
    v479 = 0x7FFFFFFFFFFFFFFFLL;
    v480 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v481 = v456[6];
      if (v481 < v478)
        v478 = v456[6];
      if (v474 <= v481)
        v474 = v456[6];
      v482 = v456[1];
      v483 = v456[2] - v482;
      if (v483 < v479)
        v479 = v456[2] - v482;
      if (v475 <= v483)
        v475 = v456[2] - v482;
      if (v473)
        v481 = ((uint64_t)(v456[4] - v456[3]) >> 3) - v481 + 1;
      if (v476 <= v481)
        v476 = v481;
      v484 = v456[8];
      if (v484 < v480)
        v480 = v456[8];
      if (v477 <= v484)
        v477 = v456[8];
      v456 += 9;
      --v473;
    }
    while (v456 != v455);
  }
  v485 = (_QWORD *)operator new();
  v485[6] = 0;
  v485[7] = 0;
  v485[8] = 0;
  theData.__r_.__value_.__r.__words[0] = 0;
  std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100]((uint64_t *)&v919 + 1, (uint64_t)v485);
  std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100]((uint64_t *)&theData, 0);
  v486 = *((_QWORD *)&v919 + 1);
  **((_DWORD **)&v919 + 1) = v478;
  v487 = (_QWORD *)i[3].i64[0];
  __srca = (_BYTE *)i[3].i64[1];
  v488 = __srca - (_BYTE *)v487;
  if (__srca == (_BYTE *)v487)
  {
LABEL_911:
    __break(1u);
    return;
  }
  v489 = i[3].i64[0];
  *(_DWORD *)(v486 + 4) = v487[1];
  v490 = 0;
  v491 = v474 - v478;
  if (v474 != v478)
  {
    do
    {
      ++v490;
      v468 = v491 > 1;
      v491 >>= 1;
    }
    while (v468);
  }
  *(_WORD *)(v486 + 8) = v490;
  *(_DWORD *)(v486 + 12) = v479;
  v492 = 0;
  v493 = v475 - v479;
  if (v475 != v479)
  {
    do
    {
      ++v492;
      v468 = v493 > 1;
      v493 >>= 1;
    }
    while (v468);
  }
  *(_WORD *)(v486 + 16) = v492;
  *(_DWORD *)(v486 + 20) = 0;
  *(_WORD *)(v486 + 24) = 0;
  *(_DWORD *)(v486 + 28) = v480;
  v494 = 0;
  v495 = v477 - v480;
  if (v477 == v480)
  {
    v496 = i;
  }
  else
  {
    v496 = i;
    do
    {
      ++v494;
      v468 = v495 > 1;
      v495 >>= 1;
    }
    while (v468);
  }
  v497 = v488 >> 3;
  *(_WORD *)(v486 + 32) = v494;
  v498 = 0;
  if (v476)
  {
    do
    {
      ++v498;
      v468 = v476 > 1;
      v476 >>= 1;
    }
    while (v468);
  }
  v499 = 0x8E38E38E38E38E39 * v497;
  *(_WORD *)(v486 + 34) = v498;
  v500 = v942 + v955;
  if (v942 + v955)
  {
    v501 = 0;
    v502 = v489;
    do
    {
      ++v501;
      v468 = v500 > 1;
      v500 >>= 1;
    }
    while (v468);
  }
  else
  {
    v501 = 0;
    v502 = v489;
  }
  v504 = (uint64_t *)(v486 + 48);
  v503 = *(_QWORD *)(v486 + 48);
  *(_WORD *)(v486 + 36) = v501;
  *(_DWORD *)(v486 + 38) = 524292;
  if (v499 > (*(_QWORD *)(v486 + 64) - v503) >> 6)
  {
    if (v499 >> 58)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v505 = *(_QWORD *)(v486 + 56);
    v949 = (std::string *)(v486 + 64);
    theData.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:se180100]<std::allocator<CGPageOffsetHintTablePageEntry>>(v499);
    theData.__r_.__value_.__l.__size_ = theData.__r_.__value_.__r.__words[0] + v505 - v503;
    theData.__r_.__value_.__r.__words[2] = theData.__r_.__value_.__l.__size_;
    p_theData = (std::string *)(theData.__r_.__value_.__r.__words[0] + (v506 << 6));
    std::vector<CGPageOffsetHintTablePageEntry>::__swap_out_circular_buffer(v504, &theData);
    std::__split_buffer<CGPageOffsetHintTablePageEntry>::~__split_buffer((uint64_t)&theData);
    v502 = v496[3].i64[0];
    __srca = (_BYTE *)v496[3].i64[1];
  }
  if ((_BYTE *)v502 == __srca)
    goto LABEL_699;
  v507 = 0;
  v901 = vdupq_n_s64(2uLL);
  while (2)
  {
    v508 = *((_QWORD *)&v919 + 1);
    v509 = *(_OWORD **)(*((_QWORD *)&v919 + 1) + 56);
    v510 = *(_QWORD *)(*((_QWORD *)&v919 + 1) + 64);
    if ((unint64_t)v509 >= v510)
    {
      v512 = *(_QWORD *)(*((_QWORD *)&v919 + 1) + 48);
      v513 = ((uint64_t)v509 - v512) >> 6;
      v514 = v513 + 1;
      if ((unint64_t)(v513 + 1) >> 58)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v515 = v510 - v512;
      if (v515 >> 5 > v514)
        v514 = v515 >> 5;
      if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFC0)
        v516 = 0x3FFFFFFFFFFFFFFLL;
      else
        v516 = v514;
      v949 = (std::string *)(*((_QWORD *)&v919 + 1) + 64);
      if (v516)
        v516 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPageOffsetHintTablePageEntry>>(v516);
      else
        v517 = 0;
      v518 = (_OWORD *)(v516 + (v513 << 6));
      theData.__r_.__value_.__r.__words[0] = v516;
      theData.__r_.__value_.__l.__size_ = (std::string::size_type)v518;
      p_theData = (std::string *)(v516 + (v517 << 6));
      *v518 = 0u;
      v518[1] = 0u;
      v518[2] = 0u;
      v518[3] = 0u;
      theData.__r_.__value_.__r.__words[2] = (std::string::size_type)(v518 + 4);
      std::vector<CGPageOffsetHintTablePageEntry>::__swap_out_circular_buffer((uint64_t *)(v508 + 48), &theData);
      v511 = *(_OWORD **)(v508 + 56);
      std::__split_buffer<CGPageOffsetHintTablePageEntry>::~__split_buffer((uint64_t)&theData);
    }
    else
    {
      v509[2] = 0u;
      v509[3] = 0u;
      *v509 = 0u;
      v509[1] = 0u;
      v511 = v509 + 4;
      *(_QWORD *)(v508 + 56) = v509 + 4;
    }
    *(_QWORD *)(v508 + 56) = v511;
    v519 = *(_QWORD *)(*((_QWORD *)&v919 + 1) + 56);
    if (*(_QWORD *)(*((_QWORD *)&v919 + 1) + 48) == v519)
      goto LABEL_911;
    v520 = *(_QWORD *)(v502 + 48);
    *(_DWORD *)(v519 - 64) = v520;
    *(_DWORD *)(v519 - 60) = *(_DWORD *)(v502 + 16) - *(_DWORD *)(v502 + 8) + 1;
    v522 = *(unint64_t **)(v502 + 24);
    v521 = *(unint64_t **)(v502 + 32);
    *(_WORD *)(v519 - 56) = (((_DWORD)v521 - (_DWORD)v522) >> 3) - v520 + 1;
    *(_DWORD *)(v519 - 52) = 0;
    *(_DWORD *)(v519 - 48) = *(_QWORD *)(v502 + 64);
    *(_QWORD *)(v519 - 16) = 0;
    *(_QWORD *)(v519 - 8) = 0;
    if (!v507)
    {
      v577 = *(_QWORD **)(v519 - 40);
      *(_WORD *)(v519 - 56) = v520;
      v578 = (unsigned __int16)v520;
      v579 = *(_QWORD *)(v519 - 24);
      if (v578 <= (v579 - (uint64_t)v577) >> 3)
      {
        v586 = (uint64_t)(*(_QWORD *)(v519 - 32) - (_QWORD)v577) >> 3;
        if (v586 >= v578)
          v587 = v578;
        else
          v587 = (uint64_t)(*(_QWORD *)(v519 - 32) - (_QWORD)v577) >> 3;
        for (; v587; --v587)
          *v577++ = 0;
        if (v578 > v586)
        {
          v588 = *(_QWORD **)(v519 - 32);
          v589 = &v588[v578 - v586];
          v590 = 8 * v578 - 8 * v586;
          do
          {
            *v588++ = 0;
            v590 -= 8;
          }
          while (v590);
          *(_QWORD *)(v519 - 32) = v589;
          goto LABEL_698;
        }
        v584 = *(_QWORD *)(v519 - 40) + 8 * v578;
      }
      else
      {
        if (v577)
        {
          *(_QWORD *)(v519 - 32) = v577;
          operator delete(v577);
          v579 = 0;
          *(_QWORD *)(v519 - 40) = 0;
          *(_QWORD *)(v519 - 32) = 0;
          *(_QWORD *)(v519 - 24) = 0;
        }
        v580 = v579 >> 2;
        if (v579 >> 2 <= v578)
          v580 = v578;
        if ((unint64_t)v579 >= 0x7FFFFFFFFFFFFFF8)
          v581 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v581 = v580;
        if (v581 >> 61)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v582 = std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v581);
        *(_QWORD *)(v519 - 40) = v582;
        *(_QWORD *)(v519 - 32) = v582;
        *(_QWORD *)(v519 - 24) = &v582[v583];
        v584 = (uint64_t)&v582[v578];
        v585 = 8 * v578;
        do
        {
          *v582++ = 0;
          v585 -= 8;
        }
        while (v585);
      }
      *(_QWORD *)(v519 - 32) = v584;
      goto LABEL_698;
    }
    while (2)
    {
      if (v522 != v521)
      {
        v523 = (uint64_t *)v954;
        if (!v954)
          goto LABEL_612;
        v524 = *v522;
        v525 = &v954;
        do
        {
          v526 = v523;
          v527 = v525;
          v528 = v523[4];
          if (v528 >= v524)
            v525 = v523;
          else
            ++v523;
          v523 = (uint64_t *)*v523;
        }
        while (v523);
        if (v525 == &v954)
          goto LABEL_612;
        if (v528 < v524)
          v526 = v527;
        if (v524 >= v526[4])
        {
          v539 = v953;
          if (v953 == (uint64_t (**)())v525)
          {
            v540 = 0;
          }
          else
          {
            v540 = 0;
            do
            {
              v541 = v539[1];
              if (v541)
              {
                do
                {
                  v542 = (uint64_t *)v541;
                  v541 = *(uint64_t (**)())v541;
                }
                while (v541);
              }
              else
              {
                do
                {
                  v542 = (uint64_t *)v539[2];
                  v140 = *v542 == (_QWORD)v539;
                  v539 = (uint64_t (**)())v542;
                }
                while (!v140);
              }
              ++v540;
              v539 = (uint64_t (**)())v542;
            }
            while (v542 != v525);
          }
          v543 = *(_DWORD **)(v519 - 32);
          v544 = *(_QWORD *)(v519 - 24);
          if ((unint64_t)v543 < v544)
          {
LABEL_653:
            *v543 = v540;
            v543[1] = 0;
            v558 = v543 + 2;
          }
          else
          {
            v545 = *(_QWORD *)(v519 - 40);
            v546 = ((uint64_t)v543 - v545) >> 3;
            v547 = v546 + 1;
            if ((unint64_t)(v546 + 1) >> 61)
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
            v548 = v544 - v545;
            if (v548 >> 2 > v547)
              v547 = v548 >> 2;
            if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF8)
              v549 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v549 = v547;
            v550 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v549);
            v552 = &v550[8 * v546];
            *(_DWORD *)v552 = v540;
            *((_DWORD *)v552 + 1) = 0;
            v554 = *(char **)(v519 - 40);
            v553 = *(char **)(v519 - 32);
            v555 = v552;
            if (v553 != v554)
            {
              do
              {
                v556 = *((_QWORD *)v553 - 1);
                v553 -= 8;
                *((_QWORD *)v555 - 1) = v556;
                v555 -= 8;
              }
              while (v553 != v554);
LABEL_662:
              v553 = *(char **)(v519 - 40);
            }
LABEL_663:
            v558 = v552 + 8;
            *(_QWORD *)(v519 - 40) = v555;
            *(_QWORD *)(v519 - 32) = v552 + 8;
            *(_QWORD *)(v519 - 24) = &v550[8 * v551];
            if (v553)
              operator delete(v553);
          }
          *(_QWORD *)(v519 - 32) = v558;
        }
        else
        {
LABEL_612:
          v529 = (uint64_t *)v941;
          if (v941)
          {
            v530 = *v522;
            v531 = &v941;
            do
            {
              v532 = v529;
              v533 = v531;
              v534 = v529[4];
              if (v534 >= v530)
                v531 = v529;
              else
                ++v529;
              v529 = (uint64_t *)*v529;
            }
            while (v529);
            if (v531 != &v941)
            {
              if (v534 < v530)
                v532 = v533;
              if (v530 >= v532[4])
              {
                v535 = (uint64_t)v940;
                if (v940 == v531)
                {
                  v536 = 0;
                }
                else
                {
                  v536 = 0;
                  do
                  {
                    v537 = *(uint64_t **)(v535 + 8);
                    if (v537)
                    {
                      do
                      {
                        v538 = v537;
                        v537 = (uint64_t *)*v537;
                      }
                      while (v537);
                    }
                    else
                    {
                      do
                      {
                        v538 = *(uint64_t **)(v535 + 16);
                        v140 = *v538 == v535;
                        v535 = (uint64_t)v538;
                      }
                      while (!v140);
                    }
                    ++v536;
                    v535 = (uint64_t)v538;
                  }
                  while (v538 != v531);
                }
                v540 = v536 + v955;
                v543 = *(_DWORD **)(v519 - 32);
                v557 = *(_QWORD *)(v519 - 24);
                if ((unint64_t)v543 < v557)
                  goto LABEL_653;
                v559 = *(_QWORD *)(v519 - 40);
                v560 = ((uint64_t)v543 - v559) >> 3;
                v561 = v560 + 1;
                if ((unint64_t)(v560 + 1) >> 61)
                  std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                v562 = v557 - v559;
                if (v562 >> 2 > v561)
                  v561 = v562 >> 2;
                if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFF8)
                  v563 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v563 = v561;
                v550 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v563);
                v552 = &v550[8 * v560];
                *(_DWORD *)v552 = v540;
                *((_DWORD *)v552 + 1) = 0;
                v564 = *(char **)(v519 - 40);
                v553 = *(char **)(v519 - 32);
                v555 = v552;
                if (v553 != v564)
                {
                  do
                  {
                    v565 = *((_QWORD *)v553 - 1);
                    v553 -= 8;
                    *((_QWORD *)v555 - 1) = v565;
                    v555 -= 8;
                  }
                  while (v553 != v564);
                  goto LABEL_662;
                }
                goto LABEL_663;
              }
            }
          }
        }
        ++v522;
        continue;
      }
      break;
    }
    v567 = *(_QWORD *)(v519 - 40);
    v566 = *(_QWORD *)(v519 - 32);
    if (v567 != v566)
    {
      v568 = v566 - v567;
      v569 = (v566 - v567) >> 3;
      v570 = (unint64_t)(v568 - 8) >> 3;
      v571 = (v570 + 2) & 0x3FFFFFFFFFFFFFFELL;
      v572 = (uint64x2_t)vdupq_n_s64(v570);
      v573 = (v568 >> 3) + 0xFFFFFFFFLL;
      v574 = (_DWORD *)(v567 + 12);
      v575 = (int64x2_t)xmmword_185004A00;
      do
      {
        v576 = vmovn_s64((int64x2_t)vcgeq_u64(v572, (uint64x2_t)v575));
        if ((v576.i8[0] & 1) != 0)
          *(v574 - 2) = v573 / v569;
        if ((v576.i8[4] & 1) != 0)
          *v574 = (v573 + 8) / v569;
        v575 = vaddq_s64(v575, v901);
        LODWORD(v573) = v573 + 16;
        v574 += 4;
        v571 -= 2;
      }
      while (v571);
    }
LABEL_698:
    ++v507;
    v502 += 72;
    if ((_BYTE *)v502 != __srca)
      continue;
    break;
  }
LABEL_699:
  v591 = operator new();
  *(_QWORD *)(v591 + 32) = 0;
  *(_QWORD *)(v591 + 40) = 0;
  *(_QWORD *)(v591 + 48) = 0;
  v592 = v920;
  *(_QWORD *)&v920 = v591;
  if (v592)
  {
    std::default_delete<CGSharedObjectHintTable>::operator()[abi:se180100](v592);
    v591 = v920;
  }
  *(_DWORD *)v591 = (_DWORD)v902;
  if (v881
    && (v593 = v881[1], v121 = (unint64_t)v902 >= v593, v594 = (unint64_t)v902 - v593, v121)
    && (v595 = v881[2], v594 < (v881[3] - v595) >> 4))
  {
    v596 = *(_QWORD *)(v595 + 16 * v594);
  }
  else
  {
    LODWORD(v596) = -1;
  }
  *(_DWORD *)(v591 + 4) = v596;
  v597 = v955;
  *(_DWORD *)(v591 + 8) = v955;
  v598 = (v942 + v597);
  *(_DWORD *)(v591 + 12) = v598;
  *(_WORD *)(v591 + 16) = 0;
  *(_DWORD *)(v591 + 20) = v460;
  v599 = 0;
  v600 = (unint64_t)v458 - v460;
  if (v458 != (_QWORD *)v460)
  {
    do
    {
      ++v599;
      v468 = v600 > 1;
      v600 >>= 1;
    }
    while (v468);
  }
  *(_WORD *)(v591 + 24) = v599;
  std::vector<CGSharedObjectGroupEntry>::reserve((void **)(v591 + 32), v598);
  v601 = v953;
  v602 = v894;
  if (v953 != (uint64_t (**)())&v954)
  {
    do
    {
      if (v602
        && (v603 = v601[4],
            v604 = v602[1],
            v121 = (unint64_t)v603 >= v604,
            v605 = (unint64_t)v603 - v604,
            v121)
        && (v606 = v602[2], v605 < (v602[3] - v606) >> 4))
      {
        v607 = *(_QWORD *)(v606 + 16 * v605 + 8);
      }
      else
      {
        LODWORD(v607) = 0;
      }
      v608 = (_QWORD *)v920;
      v609 = *(_QWORD *)(v920 + 40);
      v610 = *(_QWORD *)(v920 + 48);
      if (v609 >= v610)
      {
        v612 = *(_QWORD *)(v920 + 32);
        v613 = (uint64_t)(v609 - v612) >> 4;
        v614 = v613 + 1;
        if ((unint64_t)(v613 + 1) >> 60)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v615 = v610 - v612;
        if (v615 >> 3 > v614)
          v614 = v615 >> 3;
        if ((unint64_t)v615 >= 0x7FFFFFFFFFFFFFF0)
          v616 = 0xFFFFFFFFFFFFFFFLL;
        else
          v616 = v614;
        v617 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v616);
        v619 = &v617[16 * v613];
        *(_DWORD *)v619 = v607;
        *((_QWORD *)v619 + 1) = 0;
        v621 = (char *)v608[4];
        v620 = (char *)v608[5];
        v622 = v619;
        if (v620 == v621)
        {
          v602 = v894;
        }
        else
        {
          v602 = v894;
          do
          {
            *((_OWORD *)v622 - 1) = *((_OWORD *)v620 - 1);
            v622 -= 16;
            v620 -= 16;
          }
          while (v620 != v621);
          v620 = (char *)v608[4];
        }
        v611 = v619 + 16;
        v608[4] = v622;
        v608[5] = v619 + 16;
        v608[6] = &v617[16 * v618];
        if (v620)
          operator delete(v620);
      }
      else
      {
        *(_DWORD *)v609 = v607;
        *(_QWORD *)(v609 + 8) = 0;
        v611 = (char *)(v609 + 16);
      }
      v608[5] = v611;
      v623 = v601[1];
      if (v623)
      {
        do
        {
          v624 = (uint64_t *)v623;
          v623 = *(uint64_t (**)())v623;
        }
        while (v623);
      }
      else
      {
        do
        {
          v624 = (uint64_t *)v601[2];
          v140 = *v624 == (_QWORD)v601;
          v601 = (uint64_t (**)())v624;
        }
        while (!v140);
      }
      v601 = (uint64_t (**)())v624;
    }
    while (v624 != &v954);
  }
  v625 = v940;
  if (v940 != &v941)
  {
    do
    {
      if (v881
        && (v626 = v625[4], v627 = v881[1], v121 = v626 >= v627, v628 = v626 - v627, v121)
        && (v629 = v881[2], v628 < (v881[3] - v629) >> 4))
      {
        v630 = *(_QWORD *)(v629 + 16 * v628 + 8);
      }
      else
      {
        LODWORD(v630) = 0;
      }
      v631 = (_QWORD *)v920;
      v632 = *(_QWORD *)(v920 + 40);
      v633 = *(_QWORD *)(v920 + 48);
      if (v632 >= v633)
      {
        v635 = *(_QWORD *)(v920 + 32);
        v636 = (uint64_t)(v632 - v635) >> 4;
        v637 = v636 + 1;
        if ((unint64_t)(v636 + 1) >> 60)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v638 = v633 - v635;
        if (v638 >> 3 > v637)
          v637 = v638 >> 3;
        if ((unint64_t)v638 >= 0x7FFFFFFFFFFFFFF0)
          v639 = 0xFFFFFFFFFFFFFFFLL;
        else
          v639 = v637;
        v640 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v639);
        v642 = &v640[16 * v636];
        *(_DWORD *)v642 = v630;
        *((_QWORD *)v642 + 1) = 0;
        v644 = (char *)v631[4];
        v643 = (char *)v631[5];
        v645 = v642;
        if (v643 != v644)
        {
          do
          {
            *((_OWORD *)v645 - 1) = *((_OWORD *)v643 - 1);
            v645 -= 16;
            v643 -= 16;
          }
          while (v643 != v644);
          v643 = (char *)v631[4];
        }
        v634 = v642 + 16;
        v631[4] = v645;
        v631[5] = v642 + 16;
        v631[6] = &v640[16 * v641];
        if (v643)
          operator delete(v643);
      }
      else
      {
        *(_DWORD *)v632 = v630;
        *(_QWORD *)(v632 + 8) = 0;
        v634 = (char *)(v632 + 16);
      }
      v631[5] = v634;
      v646 = (uint64_t *)v625[1];
      if (v646)
      {
        do
        {
          v647 = v646;
          v646 = (uint64_t *)*v646;
        }
        while (v646);
      }
      else
      {
        do
        {
          v647 = (uint64_t *)v625[2];
          v140 = *v647 == (_QWORD)v625;
          v625 = v647;
        }
        while (!v140);
      }
      v625 = v647;
    }
    while (v647 != &v941);
  }
  std::__tree<unsigned long>::destroy((_QWORD *)v941);
  std::__tree<unsigned long>::destroy((_QWORD *)v954);
  v653 = i[6].i64[0];
  if (!v653)
  {
    v844 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(2, "_firstPageXRefTableFirstObject == 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 767, 0, v845, v846, v847, v871);
    std::logic_error::logic_error(v844, &theData);
    v844->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v844, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v654 = i[9].i64[0] - i[8].i64[1];
  if ((unint64_t)v654 <= 8)
  {
    v848 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "_firstPageObjects.size() > 1", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 768, 0, v849, v850, v851, v871);
    std::logic_error::logic_error(v848, &theData);
    v848->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v848, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v655 = v909;
  PDFWriterBeginObject(v909, v653 + (v654 >> 3) - 1, 0, v648, v649, v650, v651, v652);
  v656 = CFDataCreateMutable(allocator, 0);
  theData.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629AA0;
  p_theData = &theData;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v656;
  std::__function::__value_func<void ()(__CFData *)>::__value_func[abi:se180100]((uint64_t)&__str.__r_.__value_.__l.__size_, (uint64_t)&theData);
  v657 = p_theData;
  if (p_theData == &theData)
  {
    v658 = 4;
    v657 = &theData;
LABEL_769:
    (*(void (**)(void))(v657->__r_.__value_.__r.__words[0] + 8 * v658))();
  }
  else if (p_theData)
  {
    v658 = 5;
    goto LABEL_769;
  }
  v659 = CGDataConsumerCreateWithCFData((CFMutableDataRef)__str.__r_.__value_.__l.__data_);
  theData.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1629AF8;
  p_theData = &theData;
  *(_QWORD *)__s = v659;
  std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100]((uint64_t)&v960, (uint64_t)&theData);
  v660 = p_theData;
  if (p_theData == &theData)
  {
    v661 = 4;
    v660 = &theData;
LABEL_774:
    (*(void (**)(void))(v660->__r_.__value_.__r.__words[0] + 8 * v661))();
  }
  else if (p_theData)
  {
    v661 = 5;
    goto LABEL_774;
  }
  v907 = 0;
  v908 = 0;
  v906 = &v907;
  v662 = *(_QWORD *)__s;
  if (!*(_QWORD *)__s)
  {
    v852 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(0, "dataConsumer", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFHintTable.cpp", 451, 0, v853, v854, v855, v871);
    std::logic_error::logic_error(v852, &theData);
    v852->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v852, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(**((_DWORD **)&v919 + 1));
  CGDataConsumerPutBytes(*(uint64_t *)__s, (uint64_t)&theData, 4);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(*((_QWORD *)&v919 + 1) + 4));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 8)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(*((_QWORD *)&v919 + 1) + 12));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 16)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(*((_QWORD *)&v919 + 1) + 20));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 24)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(*((_QWORD *)&v919 + 1) + 28));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 32)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 34)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 36)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 38)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 40)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  theData.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  theData.__r_.__value_.__l.__size_ = 0x40000000;
  theData.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke;
  p_theData = (std::string *)&__block_descriptor_tmp_19323;
  v949 = &context;
  v950 = (uint64_t (***)())v662;
  v953 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v954 = 0x40000000;
  v955 = (uint64_t)___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_2;
  v956 = (void ***)&__block_descriptor_tmp_79;
  v957 = (void (*)(uint64_t))&context;
  v958.__begin_ = (std::vector<char>::pointer)v662;
  v663 = *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 8);
  v940 = (uint64_t *)MEMORY[0x1E0C809B0];
  v941 = 0x40000000;
  v942 = (uint64_t)___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_3;
  v943 = (uint64_t *)&__block_descriptor_tmp_81_19324;
  v944 = (void (*)(uint64_t))&context;
  ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke((uint64_t)&theData, v663, (uint64_t)&v940);
  v664 = *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 16);
  v935 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v936.__r_.__value_.__r.__words[0] = 0x40000000;
  v936.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_4;
  v936.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_tmp_82_19325;
  v937 = &context;
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, v664, (uint64_t)&v935);
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 34), (uint64_t)&__block_literal_global_19326);
  ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_2((uint64_t)&v953, *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 36), (uint64_t)&__block_literal_global_86_19327);
  ((void (*)(uint64_t, unint64_t, uint64_t))v955)((uint64_t)&v953, *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 38), (uint64_t)&__block_literal_global_88_19328);
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 24), (uint64_t)&__block_literal_global_90);
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, *(unsigned __int16 *)(*((_QWORD *)&v919 + 1) + 32), (uint64_t)&__block_literal_global_92);
  v665 = *(_QWORD *)(v662 + 40);
  std::string::basic_string[abi:se180100]<0>(&theData.__r_.__value_.__l.__data_, "S");
  v666 = v907;
  if (!v907)
  {
    v667 = (void **)&v907;
    v668 = &v907;
    goto LABEL_785;
  }
  v667 = (void **)&v907;
  while (1)
  {
    while (1)
    {
      v668 = (uint64_t **)v666;
      v669 = v666 + 4;
      if (!std::less<std::string>::operator()[abi:se180100](&theData, v666 + 4))
        break;
      v666 = *v668;
      v667 = (void **)v668;
      if (!*v668)
        goto LABEL_785;
    }
    if (!std::less<std::string>::operator()[abi:se180100](v669, &theData))
      break;
    v667 = (void **)(v668 + 1);
    v666 = v668[1];
    if (!v666)
      goto LABEL_785;
  }
  v670 = *v667;
  if (!*v667)
  {
LABEL_785:
    v670 = operator new(0x40uLL);
    v670[2] = *(_OWORD *)&theData.__r_.__value_.__l.__data_;
    v671 = theData.__r_.__value_.__r.__words[2];
    memset(&theData, 0, sizeof(theData));
    *((_QWORD *)v670 + 6) = v671;
    *((_QWORD *)v670 + 7) = 0;
    *(_QWORD *)v670 = 0;
    *((_QWORD *)v670 + 1) = 0;
    *((_QWORD *)v670 + 2) = v668;
    *v667 = v670;
    v672 = (uint64_t *)v670;
    if (*v906)
    {
      v906 = (uint64_t **)*v906;
      v672 = (uint64_t *)*v667;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v907, v672);
    ++v908;
  }
  *((_QWORD *)v670 + 7) = v665;
  if (SHIBYTE(theData.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theData.__r_.__value_.__l.__data_);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)v920);
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(v920 + 4));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(v920 + 8));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(v920 + 12));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(v920 + 16)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  LODWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(_DWORD *)(v920 + 20));
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 4);
  LOWORD(theData.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(v920 + 24)) >> 16;
  CGDataConsumerPutBytes(v662, (uint64_t)&theData, 2);
  theData.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  theData.__r_.__value_.__l.__size_ = 0x40000000;
  theData.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke;
  p_theData = (std::string *)&__block_descriptor_tmp_94;
  v949 = &context;
  v950 = (uint64_t (***)())v662;
  v673 = *(unsigned __int16 *)(v920 + 24);
  v953 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v954 = 0x40000000;
  v955 = (uint64_t)___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke_2;
  v956 = (void ***)&__block_descriptor_tmp_96_19317;
  v957 = (void (*)(uint64_t))&context;
  ___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke((uint64_t)&theData, v673, (uint64_t)&v953);
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, 1uLL, (uint64_t)&__block_literal_global_98);
  ((void (*)(uint64_t, unint64_t, uint64_t))theData.__r_.__value_.__r.__words[2])((uint64_t)&theData, *(unsigned __int16 *)(v920 + 16), (uint64_t)&__block_literal_global_100_19318);
  CGDataConsumerClose(*(uint64_t *)__s);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"<<", v674, v675, v676, v677, v678, v679, v871);
  v686 = v906;
  if (v906 != &v907)
  {
    do
    {
      v687 = v686 + 4;
      if (*((char *)v686 + 55) < 0)
        v687 = (_QWORD *)*v687;
      PDFWriterPrintf((_BYTE **)v655, (uint64_t)"/%N %O", v680, v681, v682, v683, v684, v685, (uint64_t)v687);
      v688 = v686[1];
      if (v688)
      {
        do
        {
          v689 = (uint64_t **)v688;
          v688 = (uint64_t *)*v688;
        }
        while (v688);
      }
      else
      {
        do
        {
          v689 = (uint64_t **)v686[2];
          v140 = *v689 == (uint64_t *)v686;
          v686 = v689;
        }
        while (!v140);
      }
      v686 = v689;
    }
    while (v689 != &v907);
  }
  v690 = CFDataCreateMutable(allocator, 0);
  v953 = &off_1E1629B50;
  v956 = (void ***)&v953;
  theData.__r_.__value_.__r.__words[0] = (std::string::size_type)v690;
  std::__function::__value_func<void ()(__CFData *)>::__value_func[abi:se180100]((uint64_t)&theData.__r_.__value_.__l.__size_, (uint64_t)&v953);
  v691 = (uint64_t (***)())v956;
  if (v956 == (void ***)&v953)
  {
    v692 = 4;
    v691 = &v953;
LABEL_803:
    (*v691)[v692]();
  }
  else if (v956)
  {
    v692 = 5;
    goto LABEL_803;
  }
  v693 = (void **)CGDataConsumerCreateWithCFData((CFMutableDataRef)theData.__r_.__value_.__l.__data_);
  v940 = (uint64_t *)&off_1E1629BA8;
  v943 = (uint64_t *)&v940;
  v953 = (uint64_t (**)())v693;
  std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100]((uint64_t)&v954, (uint64_t)&v940);
  v694 = (uint64_t **)v943;
  if (v943 == (uint64_t *)&v940)
  {
    v695 = 4;
    v694 = &v940;
LABEL_808:
    ((void (*)(void))(*v694)[v695])();
  }
  else if (v943)
  {
    v695 = 5;
    goto LABEL_808;
  }
  FlateEncoder = CGDataConsumerCreateFlateEncoder(v953);
  v935 = &off_1E1629C00;
  v936.__r_.__value_.__r.__words[2] = (std::string::size_type)&v935;
  v940 = (uint64_t *)FlateEncoder;
  std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100]((uint64_t)&v941, (uint64_t)&v935);
  v697 = (uint64_t (***)())v936.__r_.__value_.__r.__words[2];
  if ((uint64_t (***)())v936.__r_.__value_.__r.__words[2] == &v935)
  {
    v698 = 4;
    v697 = &v935;
LABEL_813:
    (*v697)[v698]();
  }
  else if (v936.__r_.__value_.__r.__words[2])
  {
    v698 = 5;
    goto LABEL_813;
  }
  v699 = (uint64_t)v940;
  BytePtr = CFDataGetBytePtr((CFDataRef)__str.__r_.__value_.__l.__data_);
  Length = CFDataGetLength((CFDataRef)__str.__r_.__value_.__l.__data_);
  CGDataConsumerPutBytes(v699, (uint64_t)BytePtr, Length);
  CGDataConsumerClose((uint64_t)v940);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"/Filter /FlateDecode", v702, v703, v704, v705, v706, v707, v872);
  v708 = CFDataGetLength((CFDataRef)theData.__r_.__value_.__l.__data_);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"/Length %d", v709, v710, v711, v712, v713, v714, v708);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)">>\n", v715, v716, v717, v718, v719, v720, v873);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"stream\n", v721, v722, v723, v724, v725, v726, v874);
  v727 = CFDataGetBytePtr((CFDataRef)theData.__r_.__value_.__l.__data_);
  v728 = CFDataGetLength((CFDataRef)theData.__r_.__value_.__l.__data_);
  if (v655)
    CGDataConsumerPutBytes(*v655, (uint64_t)v727, v728);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"\n", v729, v730, v731, v732, v733, v734, v875);
  PDFWriterPrintf((_BYTE **)v655, (uint64_t)"endstream\n", v735, v736, v737, v738, v739, v740, v876);
  PDFWriterEndObject(v655, 0, v741, v742, v743, v744, v745, v746);
  std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v940);
  std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v953);
  std::unique_ptr<__CFData,std::function<void ()(__CFData*)>>::~unique_ptr[abi:se180100]((uint64_t *)&theData);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v907);
  std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100]((uint64_t *)__s);
  std::unique_ptr<__CFData,std::function<void ()(__CFData*)>>::~unique_ptr[abi:se180100]((uint64_t *)&__str);
  if (v911)
  {
    if (!*((_BYTE *)v911 + 56))
    {
      v747 = (void (*)(_QWORD))*((_QWORD *)v911 + 10);
      if (v747)
        v747(*((_QWORD *)v911 + 2));
    }
  }
  i[19].i64[1] = CFDataGetLength(data);
  if (v883)
    v748 = *((_QWORD *)v883 + 6);
  else
    v748 = 0;
  if (v748 != i[19].i64[0])
  {
    v856 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "CGDataConsumerGetPosition(dataConsumer) == safe_signed_cast(_hintStreamOffset)", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 370, 0, v857, v858, v859, v877);
    std::logic_error::logic_error(v856, &theData);
    v856->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v856, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v749 = CFDataGetBytePtr(data);
  CGDataConsumerPutBytes((uint64_t)v883, (uint64_t)v749, i[19].i64[1]);
  CGPDFHintTableSet::~CGPDFHintTableSet((CGPDFHintTableSet *)&context);
  std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v909);
  std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v911);
  std::unique_ptr<__CFData,std::function<void ()(__CFData*)>>::~unique_ptr[abi:se180100]((uint64_t *)&data);
  v922 = 0;
  v922 = (std::string *)operator new[]();
  if ((v905.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v750 = &v905;
  else
    v750 = (std::string *)v905.__r_.__value_.__r.__words[0];
  v751 = fopen((const char *)v750, "rb");
  v953 = &off_1E1629A48;
  v956 = (void ***)&v953;
  theData.__r_.__value_.__r.__words[0] = (std::string::size_type)v751;
  std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:se180100]((uint64_t)&theData.__r_.__value_.__l.__size_, (uint64_t)&v953);
  v752 = (uint64_t (***)())v956;
  if (v956 == (void ***)&v953)
  {
    v753 = 4;
    v752 = &v953;
LABEL_831:
    (*v752)[v753]();
  }
  else if (v956)
  {
    v753 = 5;
    goto LABEL_831;
  }
  fseek((FILE *)theData.__r_.__value_.__l.__data_, i[19].i64[0], 0);
  while (1)
  {
    v754 = v922 ? v922 : &context;
    v755 = fread(v754, 1uLL, 0x10000uLL, (FILE *)theData.__r_.__value_.__l.__data_);
    if (!v755)
      break;
    if (v922)
      v756 = v922;
    else
      v756 = &context;
    CGDataConsumerPutBytes((uint64_t)v883, (uint64_t)v756, v755);
  }
  std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::~unique_ptr[abi:se180100]((uint64_t *)&theData);
  if (v922)
    MEMORY[0x186DC23C4](v922, 0x1000C4077774924);
  v757 = i[19].u64[1];
  i[18] = vaddq_s64(i[18], vdupq_n_s64(v757));
  v758 = i[3].i64[0];
  if (i[3].i64[1] == v758)
    goto LABEL_911;
  *(_QWORD *)(v758 + 16) += v757;
  v759 = *(_QWORD **)(*v891 + 16);
  v760 = *(_QWORD **)(*v891 + 24);
  while (v759 != v760)
  {
    *v759 += v757;
    v759 += 2;
  }
  v761 = (_QWORD *)*((_QWORD *)*__n1a + 2);
  v762 = (_QWORD *)*((_QWORD *)*__n1a + 3);
  while (v761 != v762)
  {
    *v761 += v757;
    v761 += 2;
  }
  v763 = (_QWORD *)i[5].i64[1];
  if (v763)
  {
    v764 = i[6].u64[0];
    v765 = v763[1];
    v121 = v764 >= v765;
    v766 = v764 - v765;
    if (v121)
    {
      v767 = v763[2];
      if (v766 < (v763[3] - v767) >> 4)
        *(_QWORD *)(v767 + 16 * v766) = i[16].i64[1];
    }
    v768 = v763[1];
    v769 = v764 + 1 - v768;
    if (v764 + 1 >= v768)
    {
      v770 = v763[2];
      if (v769 < (v763[3] - v770) >> 4)
        *(_QWORD *)(v770 + 16 * v769) = *v878;
    }
    v771 = v763[2];
    v772 = v763[3];
    v773 = v763[1];
    v774 = v772 - v771;
    v775 = v764 + (v774 >> 4) - 1;
    v121 = v775 >= v773;
    v776 = v775 - v773;
    if (v121 && v776 < v774 >> 4)
      *(_QWORD *)(v771 + 16 * v776) = i[19].i64[0];
  }
  if (!v883
    || *((_BYTE *)v883 + 56)
    || (v777 = (uint64_t (*)(_QWORD, uint64_t))*((_QWORD *)v883 + 11)) == 0
    || (v778 = *v885, (v777(*((_QWORD *)v883 + 2), *v885) & 1) == 0))
  {
    v804 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "CGDataConsumerSetPosition(dataConsumer, _firstPageXRefOffset)", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 402, 0, v805, v806, v807, v877);
    std::logic_error::logic_error(v804, &context);
    v804->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v804, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  *((_QWORD *)v883 + 6) = v778;
  PDFXRefTableEmit((_BYTE *)i[5].i64[1], (uint64_t)v883, 0, v779, v780, v781, v782, v783);
  if (*((_BYTE *)v883 + 56)
    || (v784 = (uint64_t (*)(_QWORD, uint64_t))*((_QWORD *)v883 + 11)) == 0
    || (v785 = i[18].i64[0], (v784(*((_QWORD *)v883 + 2), v785) & 1) == 0))
  {
    v808 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "CGDataConsumerSetPosition(dataConsumer, _mainXRefOffset)", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 406, 0, v809, v810, v811, v877);
    std::logic_error::logic_error(v808, &context);
    v808->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v808, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  *((_QWORD *)v883 + 6) = v785;
  PDFXRefTableEmit(*__n1a, (uint64_t)v883, v880, v786, v787, v788, v789, v790);
  --*v880;
  if (!*((_BYTE *)v883 + 56))
  {
    v801 = (unsigned int (*)(_QWORD, uint64_t))*((_QWORD *)v883 + 11);
    if (v801)
    {
      if (v801(*((_QWORD *)v883 + 2), v879))
        *((_QWORD *)v883 + 6) = v879;
    }
  }
  PDFLinearizer::emitFirstPageTrailer((uint64_t)i, (_BYTE **)v933, v791, v792, v793, v794, v795, v796);
  if (!*((_BYTE *)v883 + 56))
  {
    v802 = (unsigned int (*)(_QWORD, uint64_t))*((_QWORD *)v883 + 11);
    if (v802)
    {
      v803 = i[16].i64[1];
      if (v802(*((_QWORD *)v883 + 2), v803))
        *((_QWORD *)v883 + 6) = v803;
    }
  }
  PDFLinearizer::emitLinearizationDict(i, v933, *((_QWORD *)v883 + 5), 1, v797, v798, v799, v800);
  std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v923);
  std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v926);
  std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::~unique_ptr[abi:se180100]((uint64_t *)&__p);
  if (SHIBYTE(v905.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v905.__r_.__value_.__l.__data_);
  std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v931);
  std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::~unique_ptr[abi:se180100]((uint64_t *)&v933);
}

void sub_184D76198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,_QWORD *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  void *v57;

  PDFIndirectObject::~PDFIndirectObject((PDFIndirectObject *)&STACK[0x348]);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  std::__tree<unsigned long>::destroy(a52);
  std::__tree<unsigned long>::destroy((_QWORD *)STACK[0x288]);
  _Block_object_dispose(&STACK[0x408], 8);
  v57 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v57;
    operator delete(v57);
  }
  _Block_object_dispose(&a56, 8);
  boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(a16);
  std::__tree<unsigned long>::destroy((_QWORD *)STACK[0x2B0]);
  std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::~unique_ptr[abi:se180100]((uint64_t *)&STACK[0x2F8]);
  std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::~unique_ptr[abi:se180100]((uint64_t *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(PDFWriter *)>::__value_func[abi:se180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(__sFILE *)>::__value_func[abi:se180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

std::string *PDFLinearizer::emitLinearizationDict(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string *result;
  double v75;
  std::string *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string *v84;
  std::logic_error *exception;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string v94;
  std::string *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (a1[7] == a1[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _CGExceptionDescription(3, "_pageInfo.size() > 0", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 776, 0, v86, v87, v88, v89);
    std::logic_error::logic_error(exception, &v94);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v8 = a4;
  v93 = 0;
  PDFWriterBeginObject(a2, a1[12], a1 + 33, a4, a5, a6, a7, a8);
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v89);
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/Linearized 1.0", v18, v19, v20, v21, v22, v23, v90);
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/L %O", v24, v25, v26, v27, v28, v29, a3);
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/H [%O %d]", v30, v31, v32, v33, v34, v35, a1[38]);
  v42 = (uint64_t *)a1[6];
  if ((uint64_t *)a1[7] == v42
    || (PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/O %d", v36, v37, v38, v39, v40, v41, *v42), v49 = a1[6], a1[7] == v49))
  {
    __break(1u);
  }
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/E %O", v43, v44, v45, v46, v47, v48, *(_QWORD *)(v49 + 16));
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/N %d", v50, v51, v52, v53, v54, v55, 0x8E38E38E38E38E39 * ((uint64_t)(a1[7] - a1[6]) >> 3));
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)"/T %O", v56, v57, v58, v59, v60, v61, a1[37]);
  PDFWriterPrintf((_BYTE **)a2, (uint64_t)">>", v62, v63, v64, v65, v66, v67, v91);
  result = (std::string *)PDFWriterEndObject(a2, &v93, v68, v69, v70, v71, v72, v73);
  if ((v8 & 1) == 0)
  {
    v75 = log10((double)(unint64_t)a3);
    v76 = 0;
    v77 = 2 * vcvtmd_u64_f64(v75) + 20;
    v95 = 0;
    if (v77 >= 0x101)
    {
      v76 = (std::string *)operator new[]();
      v95 = v76;
    }
    if (!v76)
      v76 = &v94;
    memset(v76, 32, v77);
    if (a2)
    {
      if (v95)
        v84 = v95;
      else
        v84 = &v94;
      CGDataConsumerPutBytes(*a2, (uint64_t)v84, v77);
    }
    PDFWriterPrintf((_BYTE **)a2, (uint64_t)"\n", v78, v79, v80, v81, v82, v83, v92);
    result = v95;
    if (v95)
      return (std::string *)MEMORY[0x186DC23C4](v95, 0x1000C4077774924);
  }
  return result;
}

void sub_184D76A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void PDFLinearizer::emitFirstPageTrailer(uint64_t a1, _BYTE **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFData *Value;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const __CFData *v51;
  CFIndex Length;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CFIndex v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::logic_error *exception;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;

  if (!*(_QWORD *)(a1 + 320))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Trailer dict is NULL");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  PDFWriterPrintf(a2, (uint64_t)"trailer\n", a3, a4, a5, a6, a7, a8, v97);
  PDFWriterPrintf(a2, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v98);
  v22 = *(_QWORD *)(a1 + 88);
  if (v22)
    v22 = (uint64_t)(*(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16)) >> 4;
  v23 = *(_QWORD *)(a1 + 104);
  if (v23)
    v23 = (uint64_t)(*(_QWORD *)(v23 + 24) - *(_QWORD *)(v23 + 16)) >> 4;
  PDFWriterPrintf(a2, (uint64_t)"/Size %d", v16, v17, v18, v19, v20, v21, v23 + v22);
  v105 = 0;
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), CFSTR("/Root"), kCFNumberLongType, &v105))
    PDFWriterPrintf(a2, (uint64_t)"/Root %R", v24, v25, v26, v27, v28, v29, *(_QWORD *)(a1 + 96) + 1);
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), CFSTR("/Encrypt"), kCFNumberLongType, &v105))
  {
    v30 = std::map<unsigned long,unsigned long>::at(*(_QWORD **)(a1 + 240), v105);
    PDFWriterPrintf(a2, (uint64_t)"/Encrypt %R", v31, v32, v33, v34, v35, v36, *v30);
  }
  if (CGCFDictionaryGetNumber(*(const __CFDictionary **)(a1 + 320), CFSTR("/Info"), kCFNumberLongType, &v105))
  {
    v37 = std::map<unsigned long,unsigned long>::at(*(_QWORD **)(a1 + 240), v105);
    PDFWriterPrintf(a2, (uint64_t)"/Info %R", v38, v39, v40, v41, v42, v43, *v37);
  }
  Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 320), CFSTR("/ID"));
  if (Value)
  {
    v51 = Value;
    PDFWriterPrintf(a2, (uint64_t)"/ID [", v45, v46, v47, v48, v49, v50, v99);
    Length = CFDataGetLength(v51);
    CFDataGetBytePtr(v51);
    PDFWriterPrintf(a2, (uint64_t)"%X", v53, v54, v55, v56, v57, v58, Length);
    v59 = CFDataGetLength(v51);
    CFDataGetBytePtr(v51);
    PDFWriterPrintf(a2, (uint64_t)"%X", v60, v61, v62, v63, v64, v65, v59);
    PDFWriterPrintf(a2, (uint64_t)"]", v66, v67, v68, v69, v70, v71, v100);
  }
  PDFWriterPrintf(a2, (uint64_t)"/Prev %O", v45, v46, v47, v48, v49, v50, *(_QWORD *)(a1 + 288));
  PDFWriterPrintf(a2, (uint64_t)">>\n", v72, v73, v74, v75, v76, v77, v101);
  PDFWriterPrintf(a2, (uint64_t)"startxref\n", v78, v79, v80, v81, v82, v83, v102);
  PDFWriterPrintf(a2, (uint64_t)"0\n", v84, v85, v86, v87, v88, v89, v103);
  PDFWriterPrintf(a2, (uint64_t)"%%%%EOF\n", v90, v91, v92, v93, v94, v95, v104);
}

void sub_184D76CC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(CGDataConsumer *)>::__value_func[abi:se180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(__CFData *)>::__value_func[abi:se180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<PDFWriter,std::function<void ()(PDFWriter*)>>::~unique_ptr[abi:se180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:se180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t *std::unique_ptr<CGDataConsumer,std::function<void ()(CGDataConsumer*)>>::~unique_ptr[abi:se180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:se180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t *std::unique_ptr<__CFData,std::function<void ()(__CFData*)>>::~unique_ptr[abi:se180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:se180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t *std::unique_ptr<__sFILE,std::function<void ()(__sFILE*)>>::~unique_ptr[abi:se180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:se180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__throw_bad_function_call[abi:se180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x186DC23C4);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629A48;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629A48;
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  return fclose(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_8,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_8>,void ()(__sFILE *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629C00;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629C00;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_4>,void ()(CGDataConsumer *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629BA8;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629BA8;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_3>,void ()(CGDataConsumer *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629B50;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629B50;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_2>,void ()(__CFData *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629AF8;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629AF8;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_1>,void ()(CGDataConsumer *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629AA0;
  return result;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629AA0;
}

void std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer14emitHintTablesEP17CGPDFHintTableSetP9PDFWriterE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0,std::allocator<PDFLinearizer::emitHintTables(CGPDFHintTableSet *,PDFWriter *)::$_0>,void ()(__CFData *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E16299F0;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E16299F0;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
  CGPDFAssociationRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_7,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_7>,void ()(PDFWriter *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629998;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629998;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_6,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_6>,void ()(CGDataConsumer *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629940;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629940;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_5,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_5>,void ()(__CFData *)>::target_type()
{
}

_QWORD *std::map<unsigned long,unsigned long>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:se180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

char *std::vector<unsigned long>::assign<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,0>(char **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *result;
  char **v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char **v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v29;
  _QWORD *v30;

  if (a2 == a3)
  {
    v19 = a1 + 1;
    result = *a1;
    v14 = v19;
LABEL_20:
    *v14 = result;
    return result;
  }
  v5 = a2;
  v6 = 0;
  v7 = a2;
  do
  {
    v8 = v6;
    v9 = (_QWORD *)v7[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v7[2];
        v11 = *v10 == (_QWORD)v7;
        v7 = v10;
      }
      while (!v11);
    }
    ++v6;
    v7 = v10;
  }
  while (v10 != a3);
  v12 = (uint64_t)a1[2];
  result = *a1;
  if (v8 >= (v12 - (uint64_t)*a1) >> 3)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v12 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v20 = v12 >> 2;
    if (v12 >> 2 <= v6)
      v20 = v8 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    std::vector<unsigned long>::__vallocate[abi:se180100](a1, v21);
    return (char *)std::vector<unsigned long>::__construct_at_end<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)a1, v5, a3);
  }
  v14 = a1 + 1;
  v15 = a1[1];
  v16 = (v15 - result) >> 3;
  if (v16 > v8)
  {
    if (a2 != a3)
    {
      do
      {
        *(_QWORD *)result = v5[4];
        v17 = (_QWORD *)v5[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v5[2];
            v11 = *v18 == (_QWORD)v5;
            v5 = v18;
          }
          while (!v11);
        }
        result += 8;
        v5 = v18;
      }
      while (v18 != a3);
    }
    goto LABEL_20;
  }
  if (v15 - result <= -8)
  {
    v26 = a2;
    do
    {
      v27 = (_QWORD *)*v26;
      if (*v26)
      {
        do
        {
          v24 = v27;
          v27 = (_QWORD *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v11 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v11);
      }
      v26 = v24;
    }
    while (!__CFADD__(v16++, 1));
    goto LABEL_48;
  }
  if (v15 != result)
  {
    v22 = a2;
    do
    {
      v23 = (_QWORD *)v22[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v22[2];
          v11 = *v24 == (_QWORD)v22;
          v22 = v24;
        }
        while (!v11);
      }
      v22 = v24;
    }
    while (v16-- > 1);
LABEL_48:
    if (v24 != a2)
    {
      do
      {
        *(_QWORD *)result = v5[4];
        v29 = (_QWORD *)v5[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (_QWORD *)v5[2];
            v11 = *v30 == (_QWORD)v5;
            v5 = v30;
          }
          while (!v11);
        }
        result += 8;
        v5 = v30;
      }
      while (v30 != v24);
    }
    v5 = v24;
  }
  return (char *)std::vector<unsigned long>::__construct_at_end<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)a1, v5, a3);
}

uint64_t std::vector<unsigned long>::__construct_at_end<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = a2[4];
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E16298E8;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E16298E8;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
  CGPDFAssociationRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_4,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_4>,void ()(PDFWriter *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629890;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629890;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_3,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_3>,void ()(CGDataConsumer *)>::target_type()
{
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E1629838;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E1629838;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1E1629838;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_184D77B28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1E1629838;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;

  fclose(*a2);
  v5 = *(const char **)(a1 + 8);
  v4 = a1 + 8;
  v3 = v5;
  if (*(char *)(v4 + 23) >= 0)
    v6 = (const char *)v4;
  else
    v6 = v3;
  return unlink(v6);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_2,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_2>,void ()(__sFILE *)>::target_type()
{
}

void ___ZN13PDFLinearizer11emitCatalogEP9PDFWriter_block_invoke(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t valuePtr;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID() && (valuePtr = 0, CFNumberGetValue((CFNumberRef)cf, kCFNumberLongType, &valuePtr)))
  {
    valuePtr = *std::map<unsigned long,unsigned long>::at(*(_QWORD **)(v6 + 240), valuePtr);
    PDFWriterPrintf(*(_BYTE ***)(a1 + 48), (uint64_t)"%/ %R", v8, v9, v10, v11, v12, v13, a2);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void __Block_byref_object_copy__17381(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *i;
  uint64_t v13;
  _BYTE v14[40];

  v4 = a1 + 40;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  v5 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (a2[9] == a2[8])
  {
LABEL_6:
    for (i = (_QWORD *)a2[6]; i != a2 + 5; i = (_QWORD *)i[1])
      boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>((uint64_t)v14, i[2], i[3], v4);
    v13 = operator new();
    if (!a2[11])
      __assert_rtn("operator*", "scoped_ptr.hpp", 99, "px != 0");
    *(_QWORD *)(a1 + 88) = v13;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 48;
    while (1)
    {
      std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize(v5, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) + 1);
      v10 = a2[8];
      v11 = 0x6DB6DB6DB6DB6DB7 * ((a2[9] - v10) >> 3);
      if (v11 <= v8)
        break;
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 72);
      if (v7 == v6)
        break;
      *(_QWORD *)(v6 + 56 * (0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) - 1) + 48) = *(_QWORD *)(v10 + v9);
      ++v8;
      v9 += 56;
      if (v8 >= v11)
        goto LABEL_6;
    }
    __break(1u);
  }
}

void sub_184D77E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100]((void ***)va);
  std::__list_imp<long long>::clear(v2);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_dispose__17382(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    MEMORY[0x186DC23C4](v2, 0xC400A2AC0F1);
  v4 = (void **)(a1 + 64);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100](&v4);
  return std::__list_imp<long long>::clear((_QWORD *)(a1 + 40));
}

_QWORD *__Block_byref_object_copy__15(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  std::__tree<unsigned long>::destroy(*(_QWORD **)(a1 + 48));
}

void __Block_byref_object_copy__17_17383(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__18_17384(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

uint64_t std::set<unsigned long>::set[abi:se180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(_QWORD **)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6)
          v12 = (uint64_t **)v7;
        else
          v12 = (uint64_t **)v3;
        if (v6)
          v13 = (uint64_t **)(v7 + 1);
        else
          v13 = (uint64_t **)v3;
      }
      else
      {
        v12 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (v6)
        {
          v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v17 = v6[4];
              if (v11 >= v17)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v17 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        std::__tree<unsigned long>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_184D781EC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<unsigned long>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20_17386(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__21_17387(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN13PDFLinearizer14collectObjectsEP7__sFILE_block_invoke_22(uint64_t a1, uint64_t a2, off_t a3, size_t a4)
{
  char v5;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  std::logic_error *exception;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::logic_error *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::logic_error *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  char *v49;
  uint64_t *v50;

  if (a3)
  {
    v5 = a3;
    v8 = *(uint64_t **)(a1 + 40);
    if (fseeko(*(FILE **)(a1 + 48), a3, 0) == -1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(2, "ioResult == -1", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 474, "fseek to offset: %llu failed", v34, v35, v36, v5);
      std::logic_error::logic_error(exception, &v48);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v10 = v9[5];
    if (v9[7] - v10 < a4)
    {
      if ((a4 & 0x8000000000000000) != 0)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v11 = (char *)v9[6];
      v12 = operator new(a4);
      v13 = &v11[(_QWORD)v12 - v10];
      v14 = v13;
      if (v11 != (char *)v10)
      {
        v15 = &v11[~v10];
        do
        {
          v16 = *--v11;
          (v15--)[(_QWORD)v12] = v16;
        }
        while (v11 != (char *)v10);
        v14 = v12;
      }
      v9[5] = v14;
      v9[6] = v13;
      v9[7] = &v12[a4];
      if (v10)
        operator delete((void *)v10);
    }
    if (fread(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 1uLL, a4, *(FILE **)(a1 + 48)) != a4)
    {
      v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(3, "bytesRead == length", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 478, "fread of %llu bytes at position %llu failed", v38, v39, v40, a4);
      std::logic_error::logic_error(v37, &v48);
      v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(v37, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    v47 = 0;
    if (sscanf(*(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "%d 0 obj\n%n", (char *)&v47 + 4, &v47) != 1)
    {
      v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _CGExceptionDescription(3, "count == 1", "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Linearized/PDFLinearizer.cc", 482, "failed to scan object number from object: %llu, offset: %llu", v42, v43, v44, v5);
      std::logic_error::logic_error(v41, &v48);
      v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(v41, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    std::string::basic_string[abi:se180100](__p, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + (int)v47), a4 - (int)v47);
    v17 = v8[16];
    v18 = (_QWORD *)v8[15];
    if ((unint64_t)v18 >= v17)
    {
      v21 = v8[14];
      v22 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v18 - v21) >> 3);
      if ((unint64_t)(v22 + 1) > 0x492492492492492)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v21) >> 3);
      v24 = 2 * v23;
      if (2 * v23 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x249249249249249)
        v25 = 0x492492492492492;
      else
        v25 = v24;
      v50 = v8 + 16;
      if (v25)
      {
        v27 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v25);
      }
      else
      {
        v27 = 0;
        v26 = 0;
      }
      v29 = &v27[56 * v22];
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
      v49 = &v27[56 * v26];
      *(_QWORD *)v29 = a2;
      v30 = (std::string *)(v29 + 8);
      if (SHIBYTE(v46) < 0)
      {
        std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        v29 = (char *)v48.__r_.__value_.__r.__words[2];
      }
      else
      {
        v31 = *(_OWORD *)__p;
        *((_QWORD *)v29 + 3) = v46;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
      }
      v32 = &v27[56 * v22];
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 6) = 0;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 56);
      std::vector<PDFIndirectObject>::__swap_out_circular_buffer(v8 + 14, &v48);
      v28 = (_QWORD *)v8[15];
      std::__split_buffer<PDFIndirectObject>::~__split_buffer((uint64_t)&v48);
    }
    else
    {
      *v18 = a2;
      v19 = (std::string *)(v18 + 1);
      if (SHIBYTE(v46) < 0)
      {
        std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v20 = *(_OWORD *)__p;
        v18[3] = v46;
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      v18[4] = 0;
      v18[5] = 0;
      v18[6] = 0;
      v28 = v18 + 7;
      v8[15] = (uint64_t)(v18 + 7);
    }
    v8[15] = (uint64_t)v28;
    if (SHIBYTE(v46) < 0)
      operator delete(__p[0]);
  }
}

void sub_184D78664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__split_buffer<PDFIndirectObject>::~__split_buffer((uint64_t)&a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<std::reference_wrapper<PDFIndirectObject>>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void *__p;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;

  v6 = *(char **)(a1 + 8);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v8)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v8 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = v7;
    if (v18)
    {
      v20 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[8 * v16];
    __p = v20;
    v27 = v21;
    v29 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == __src)
          v23 = 1;
        else
          v23 = v15 >> 2;
        v24 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v23);
        v21 = &v24[8 * (v23 >> 2)];
        __p = v24;
        v27 = v21;
        v29 = &v24[8 * v25];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v21 -= 8 * (v22 >> 1);
        v27 = v21;
      }
    }
    *(_QWORD *)v21 = *a3;
    v28 = v21 + 8;
    std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, __src);
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    *(_QWORD *)__src = *a3;
  }
}

void sub_184D788BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL PDFLinearizerPageInfo::hasReferenceToObject(PDFLinearizerPageInfo *this, PDFLinearizerPageInfo *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  PDFLinearizerPageInfo *v6;
  unint64_t v7;

  if (a2 == this)
    return 0;
  v3 = (a2 - this) >> 3;
  do
  {
    v4 = v3 >> 1;
    v5 = (unint64_t *)((char *)this + 8 * (v3 >> 1));
    v7 = *v5;
    v6 = (PDFLinearizerPageInfo *)(v5 + 1);
    v3 += ~(v3 >> 1);
    if (v7 < a3)
      this = v6;
    else
      v3 = v4;
  }
  while (v3);
  return this != a2 && *(_QWORD *)this == a3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::reference_wrapper<PDFIndirectObject>>>>::__emplace_multi<std::pair<unsigned long,PDFIndirectObject&>>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;

  v6 = (uint64_t *)operator new(0x30uLL);
  v6[4] = a2;
  v6[5] = a3;
  v7 = a1 + 1;
  v8 = a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v8;
        if (v8[4] <= a2)
          break;
        v8 = (uint64_t *)*v8;
        v9 = v7;
        if (!*v7)
          return std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v7, v9, v6);
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v9 = v7 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
  return std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v7, v9, v6);
}

void std::vector<std::reference_wrapper<PDFIndirectObject>>::__insert_with_size[abi:se180100]<std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>,std::__wrap_iter<std::reference_wrapper<PDFIndirectObject>*>>(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  void *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *__p[5];

  if (a5 < 1)
    return;
  v6 = __src;
  v9 = a1 + 2;
  v10 = a1[2];
  v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 3)
  {
    v12 = *a1;
    v13 = a5 + ((uint64_t)(v11 - (_QWORD)*a1) >> 3);
    if (v13 >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v14 = (__dst - v12) >> 3;
    v15 = v10 - v12;
    if (v15 >> 2 > v13)
      v13 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    __p[4] = v9;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v16);
    else
      v17 = 0;
    v27 = (_QWORD *)(v16 + 8 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 8 * v17);
    v28 = 8 * a5;
    v29 = &v27[a5];
    do
    {
      v30 = *(_QWORD *)v6;
      v6 += 8;
      *v27++ = v30;
      v28 -= 8;
    }
    while (v28);
    __p[2] = v29;
    std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer(a1, (uint64_t)__p, __dst);
    if (__p[0])
      operator delete(__p[0]);
    return;
  }
  v18 = v11 - (_QWORD)__dst;
  v19 = (uint64_t)(v11 - (_QWORD)__dst) >> 3;
  if (v19 >= a5)
  {
    v20 = &__src[8 * a5];
    v22 = (char *)a1[1];
LABEL_17:
    v23 = &__dst[8 * a5];
    v24 = &v22[-8 * a5];
    v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      v25 = v22;
      do
      {
        v26 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v25 = v26;
        v25 += 8;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23)
      memmove(&v22[-8 * ((v22 - v23) >> 3)], __dst, v22 - v23);
    if (v20 != v6)
      memmove(__dst, v6, v20 - v6);
    return;
  }
  v20 = &__src[8 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(a1[1], &__src[8 * v19], a4 - v20);
  v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1)
    goto LABEL_17;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>(uint64_t *result, unint64_t a2, __n128 a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  __n128 *v8;

  v3 = (uint64_t **)result;
  v5 = (uint64_t **)(result + 1);
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 1);
LABEL_9:
    v8 = (__n128 *)operator new(0x30uLL);
    v8[2] = a3;
    return std::__tree<unsigned long>::__insert_node_at(v3, (uint64_t)v6, v5, (uint64_t *)v8);
  }
  return result;
}

void PDFLinearizer::updateObjectReference(std::string **this, PDFIndirectObject *a2, uint64_t a3)
{
  size_t v5;
  size_t v6;
  int64_t v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  int v12;
  std::string::size_type v13;
  BOOL v14;
  std::string::size_type size;
  std::string::size_type v16;
  int v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  unsigned int v26;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  std::string::size_type *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type __n1;
  size_t v37;
  std::string *v38;
  PDFIndirectObject *v39;
  char __s[32];
  char __str[32];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x20uLL, "%lu 0 R", a2);
  snprintf(__s, 0x20uLL, "%lu 0 R", a3);
  v5 = strlen(__s);
  v6 = strlen(__str);
  v7 = strlen(__str);
  v8 = 0;
  v39 = (PDFIndirectObject *)this;
  v11 = this[1];
  v9 = (std::string *)(this + 1);
  v10 = v11;
  __n1 = v6;
  v37 = v5;
  v35 = v5 - v6;
  v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v13 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v14 = v12 < 0;
  size = v9->__r_.__value_.__l.__size_;
  v38 = v9;
  if (v12 >= 0)
  {
    v16 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v9 = v10;
    v16 = size;
  }
  v17 = __str[0];
  while (!v7)
  {
LABEL_14:
    if (!v8)
      goto LABEL_26;
    if (v8 == -1)
      return;
    v23 = v8 - 1;
    if (v14)
      v24 = size;
    else
      v24 = v13;
    if (v24 < v23)
      __break(1u);
    v25 = v38;
    if (v14)
      v25 = v10;
    v26 = v25->__r_.__value_.__s.__data_[v23];
    if ((v26 & 0x80000000) != 0
       ? __maskrune(v26, 0x4000uLL)
       : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v26 + 60) & 0x4000)
    {
LABEL_26:
      v28 = (_QWORD *)*((_QWORD *)v39 + 4);
      v29 = (_QWORD *)*((_QWORD *)v39 + 5);
      if (v29 != v28)
      {
        v30 = v29 - v28;
        do
        {
          v31 = v30 >> 1;
          v32 = &v28[v30 >> 1];
          v34 = *v32;
          v33 = v32 + 1;
          v30 += ~(v30 >> 1);
          if (v34 < v8)
            v28 = v33;
          else
            v30 = v31;
        }
        while (v30);
      }
      if (v28 == v29 || *v28 != v8)
      {
        std::string::replace(v38, v8, __n1, __s);
        PDFIndirectObject::addToReplacementOffsets(v39, v8, v35);
      }
    }
    v8 += v37;
    v13 = *((unsigned __int8 *)v39 + 31);
    v14 = *((char *)v39 + 31) < 0;
    v10 = (std::string *)*((_QWORD *)v39 + 1);
    size = *((_QWORD *)v39 + 2);
    if (*((char *)v39 + 31) >= 0)
      v9 = v38;
    else
      v9 = (std::string *)*((_QWORD *)v39 + 1);
    if (*((char *)v39 + 31) >= 0)
      v16 = *((unsigned __int8 *)v39 + 31);
    else
      v16 = *((_QWORD *)v39 + 2);
    if (v16 < v8)
      return;
  }
  v18 = (char *)v9 + v8;
  v19 = (char *)v9 + v16;
  while (v19 - v18 >= v7)
  {
    v20 = v19 - v18 - v7;
    if (v20 == -1)
      break;
    v21 = (char *)memchr(v18, v17, v20 + 1);
    if (!v21)
      break;
    v22 = v21;
    if (!memcmp(v21, __str, v7))
    {
      if (v22 == v19)
        return;
      v8 = v22 - (char *)v9;
      goto LABEL_14;
    }
    v18 = v22 + 1;
  }
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:se180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void PDFIndirectObject::~PDFIndirectObject(PDFIndirectObject *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    MEMORY[0x186DC23C4](v2, 0xC400A2AC0F1);
  v4 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100](&v4);
  std::__list_imp<long long>::clear((_QWORD *)a1);
  return a1;
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:se180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 56)
  {
    std::__tree<unsigned long>::destroy(*(_QWORD **)(i - 24));
    std::__tree<unsigned long>::destroy(*(_QWORD **)(i - 48));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void PDFIndirectObject::addToReplacementOffsets(PDFIndirectObject *this, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  void *v41;
  _QWORD *v42;
  _QWORD *i;
  unint64_t v44;

  v44 = a2;
  v7 = (char *)*((_QWORD *)this + 4);
  v6 = (char *)*((_QWORD *)this + 5);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v10 = (char *)*((_QWORD *)this + 5);
  }
  else
  {
    v9 = v8 >> 3;
    v10 = (char *)*((_QWORD *)this + 4);
    do
    {
      v11 = v9 >> 1;
      v12 = &v10[8 * (v9 >> 1)];
      v14 = *(_QWORD *)v12;
      v13 = v12 + 8;
      v9 += ~(v9 >> 1);
      if (v14 < a2)
        v10 = v13;
      else
        v9 = v11;
    }
    while (v9);
  }
  if (v6 == v10 || *(_QWORD *)v10 != a2)
  {
    v15 = *((_QWORD *)this + 6);
    if ((unint64_t)v6 >= v15)
    {
      v20 = (v8 >> 3) + 1;
      if (v20 >> 61)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v21 = v10 - v7;
      v22 = (v10 - v7) >> 3;
      v23 = v15 - (_QWORD)v7;
      v24 = (uint64_t)(v15 - (_QWORD)v7) >> 2;
      if (v24 > v20)
        v20 = v24;
      if (v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v20;
      if (v25)
      {
        v27 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v25);
      }
      else
      {
        v27 = 0;
        v26 = 0;
      }
      v29 = &v27[8 * v22];
      v30 = &v27[8 * v26];
      if (v22 == v26)
      {
        if (v21 < 1)
        {
          if (v10 == v7)
            v32 = 1;
          else
            v32 = v21 >> 2;
          v33 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v32);
          v29 = &v33[8 * (v32 >> 2)];
          v30 = &v33[8 * v34];
          if (v27)
            operator delete(v27);
        }
        else
        {
          v31 = v22 + 2;
          if (v22 >= -1)
            v31 = v22 + 1;
          v29 -= 8 * (v31 >> 1);
        }
      }
      *(_QWORD *)v29 = a2;
      v35 = (char *)*((_QWORD *)this + 4);
      v36 = v29;
      if (v35 != v10)
      {
        v37 = v10;
        v36 = v29;
        do
        {
          v38 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *((_QWORD *)v36 - 1) = v38;
          v36 -= 8;
        }
        while (v37 != v35);
      }
      v39 = (char *)*((_QWORD *)this + 5);
      v40 = v39 - v10;
      if (v39 != v10)
        memmove(v29 + 8, v10, v39 - v10);
      v41 = (void *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v36;
      *((_QWORD *)this + 5) = &v29[v40 + 8];
      *((_QWORD *)this + 6) = v30;
      if (v41)
        operator delete(v41);
      v10 = v29;
    }
    else if (v10 == v6)
    {
      *(_QWORD *)v6 = a2;
      *((_QWORD *)this + 5) = v6 + 8;
      v10 = v6;
    }
    else
    {
      v16 = v10 + 8;
      v17 = v6 - 8;
      v18 = (_QWORD *)*((_QWORD *)this + 5);
      while (v17 < v6)
      {
        v19 = *(_QWORD *)v17;
        v17 += 8;
        *v18++ = v19;
      }
      *((_QWORD *)this + 5) = v18;
      if (v6 != v16)
        memmove(&v6[-8 * ((v6 - v16) >> 3)], v10, v6 - v16);
      v28 = v44;
      if (v10 > (char *)&v44)
        v28 = a2;
      *(_QWORD *)v10 = v28;
    }
    v42 = (_QWORD *)*((_QWORD *)this + 5);
    for (i = v10 + 8; i != v42; ++i)
      *i += a3;
  }
}

void sub_184D79204(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::reference_wrapper<PDFIndirectObject>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t *std::vector<PDFIndirectObject>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      v8 = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PDFIndirectObject>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<PDFIndirectObject>::destroy[abi:se180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t __copy_helper_block_e8_56c48_ZTSNSt3__13setImNS_4lessImEENS_9allocatorImEEEE(uint64_t a1, uint64_t a2)
{
  return std::set<unsigned long>::set[abi:se180100](a1 + 56, (_QWORD *)(a2 + 56));
}

void __destroy_helper_block_e8_56c48_ZTSNSt3__13setImNS_4lessImEENS_9allocatorImEEEE(uint64_t a1)
{
  std::__tree<unsigned long>::destroy(*(_QWORD **)(a1 + 64));
}

void boost::add_edge<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t **v18;
  __int128 v19;

  if (a2 <= a3)
    v8 = a3;
  else
    v8 = a2;
  v9 = *(_QWORD *)(a4 + 24);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a4 + 32) - v9) >> 3);
  if (v8 >= v10)
  {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize((void **)(a4 + 24), v8 + 1);
    v9 = *(_QWORD *)(a4 + 24);
    v10 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a4 + 32) - v9) >> 3);
  }
  v11 = (uint64_t *)operator new(0x28uLL);
  v11[2] = a2;
  v11[3] = a3;
  v12 = *(_QWORD *)a4;
  *v11 = *(_QWORD *)a4;
  v11[1] = a4;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)a4 = v11;
  ++*(_QWORD *)(a4 + 16);
  if (v10 > a2)
  {
    v13 = v11;
    *(_QWORD *)&v19 = a3;
    *((_QWORD *)&v19 + 1) = v11;
    v14 = std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((uint64_t **)(v9 + 56 * a2), a3, &v19);
    if (!v15)
    {
      v18 = v14;
      std::list<CGPDFPage *>::erase((uint64_t *)a4, v13);
      v17 = 0;
      v13 = v18[5];
      goto LABEL_11;
    }
    v16 = *(_QWORD *)(a4 + 24);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a4 + 32) - v16) >> 3) > a3)
    {
      *(_QWORD *)&v19 = a2;
      *((_QWORD *)&v19 + 1) = v13;
      std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((uint64_t **)(v16 + 56 * a3 + 24), a2, &v19);
      v17 = 1;
LABEL_11:
      *(_QWORD *)a1 = a2;
      *(_QWORD *)(a1 + 8) = a3;
      *(_QWORD *)(a1 + 16) = v13 + 4;
      *(_BYTE *)(a1 + 24) = v17;
      return;
    }
  }
  __break(1u);
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:se180100](&v3);
  std::__list_imp<long long>::clear((_QWORD *)a1);
  return a1;
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;

  v4 = (char *)*a1;
  v5 = (char *)a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3) >= v7)
    {
      v33 = &v5[56 * v7];
      v34 = 56 * a2 - 8 * ((v5 - (_BYTE *)*a1) >> 3);
      v35 = v5 + 32;
      do
      {
        *(v35 - 3) = 0;
        *(v35 - 4) = v35 - 3;
        *v35 = 0;
        v35[1] = 0;
        *(v35 - 2) = 0;
        *(v35 - 1) = v35;
        v35 += 7;
        v34 -= 56;
      }
      while (v34);
      a1[1] = v33;
      return;
    }
    if (a2 > 0x492492492492492)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    v12 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v11);
    v14 = &v12[56 * v6];
    v15 = &v12[56 * a2];
    v16 = 56 * a2 - 56 * v6;
    v17 = v14 + 32;
    do
    {
      *(v17 - 3) = 0;
      *(v17 - 4) = v17 - 3;
      *v17 = 0;
      v17[1] = 0;
      *(v17 - 2) = 0;
      *(v17 - 1) = v17;
      v17 += 7;
      v16 -= 56;
    }
    while (v16);
    v18 = &v12[56 * v13];
    v19 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v18;
      if (!v20)
        return;
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = &v14[v21];
        *((_QWORD *)v22 - 7) = *(_QWORD *)&v20[v21 - 56];
        v23 = &v20[v21 - 48];
        v24 = *(_QWORD *)v23;
        *(_QWORD *)&v14[v21 - 48] = *(_QWORD *)v23;
        v25 = (uint64_t)&v14[v21 - 48];
        v26 = *(_QWORD *)&v20[v21 - 40];
        *((_QWORD *)v22 - 5) = v26;
        if (v26)
        {
          *(_QWORD *)(v24 + 16) = v25;
          *(_QWORD *)&v20[v21 - 56] = v23;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)&v20[v21 - 40] = 0;
        }
        else
        {
          *((_QWORD *)v22 - 7) = v25;
        }
        v27 = &v14[v21];
        *((_QWORD *)v27 - 4) = *(_QWORD *)&v20[v21 - 32];
        v28 = &v20[v21 - 24];
        v29 = *(_QWORD *)v28;
        *(_QWORD *)&v14[v21 - 24] = *(_QWORD *)v28;
        v30 = (uint64_t)&v14[v21 - 24];
        v31 = *(_QWORD *)&v20[v21 - 16];
        *((_QWORD *)v27 - 2) = v31;
        if (v31)
        {
          *(_QWORD *)(v29 + 16) = v30;
          *(_QWORD *)&v20[v21 - 32] = v28;
          *(_QWORD *)v28 = 0;
          *(_QWORD *)&v20[v21 - 16] = 0;
        }
        else
        {
          *((_QWORD *)v27 - 4) = v30;
        }
        *(_QWORD *)&v14[v21 - 8] = *(_QWORD *)&v20[v21 - 8];
        v21 -= 56;
      }
      while (&v20[v21] != v19);
      v32 = (char *)*a1;
      v20 = (char *)a1[1];
      *a1 = &v14[v21];
      a1[1] = v15;
      a1[2] = v18;
      if (v20 != v32)
      {
        do
        {
          std::__tree<unsigned long>::destroy(*((_QWORD **)v20 - 3));
          std::__tree<unsigned long>::destroy(*((_QWORD **)v20 - 6));
          v20 -= 56;
        }
        while (v20 != v32);
        v20 = v32;
      }
      if (!v20)
        return;
    }
    operator delete(v20);
    return;
  }
  if (a2 < v6)
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::setS,boost::vecS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::setS,boost::bidirectionalS,Vertex,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>::__base_destruct_at_end[abi:se180100]((uint64_t)a1, (uint64_t)&v4[56 * a2]);
}

uint64_t **std::__tree<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>::__emplace_unique_key_args<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>(uint64_t **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E16297E0;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E16297E0;
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::operator()(uint64_t a1, FILE **a2)
{
  return fclose(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_1,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_1>,void ()(__sFILE *)>::target_type()
{
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::~__func()
{
  JUMPOUT(0x186DC23C4);
}

_QWORD *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1629788;
  return result;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1629788;
}

void std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::operator()(uint64_t a1, const void ***a2)
{
  CGPDFAssociationRelease(*a2);
}

uint64_t std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13PDFLinearizer11endDocumentEP14CGDataConsumerE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PDFLinearizer::endDocument(CGDataConsumer *)::$_0,std::allocator<PDFLinearizer::endDocument(CGDataConsumer *)::$_0>,void ()(PDFWriter *)>::target_type()
{
}

void PDFLinearizerRecordReference(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;

  if (a2 && a3)
  {
    v7 = (char *)a1[24];
    v6 = a1[25];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[23];
      v10 = (v7 - v9) >> 4;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 3 > v11)
        v11 = v12 >> 3;
      v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
      v14 = 0xFFFFFFFFFFFFFFFLL;
      if (!v13)
        v14 = v11;
      if (v14)
      {
        v14 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v14);
        v9 = (char *)a1[23];
        v7 = (char *)a1[24];
      }
      else
      {
        v15 = 0;
      }
      v16 = (uint64_t *)(v14 + 16 * v10);
      v17 = v14 + 16 * v15;
      *v16 = a3;
      v16[1] = a2;
      v8 = v16 + 2;
      if (v7 != v9)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 2;
          v7 -= 16;
        }
        while (v7 != v9);
        v9 = (char *)a1[23];
      }
      a1[23] = v16;
      a1[24] = v8;
      a1[25] = v17;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v7 = a3;
      *((_QWORD *)v7 + 1) = a2;
      v8 = v7 + 16;
    }
    a1[24] = v8;
  }
  else
  {
    pdf_log("%s: Invalid param. object = %lu, referrer = %lu", "void PDFLinearizer::recordReference(PDFObjectNumber, PDFObjectNumber)", a2, a3);
  }
}

float64x2_t aal_close(uint64_t a1, float64x2_t result)
{
  float v3;
  float v4;
  float v5;
  int32x2_t v6;
  float v7;
  float64x2_t v8;
  float v10;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  float32x2_t v17;
  float64x2_t v18;

  if (!*(_DWORD *)(a1 + 48))
    return result;
  v3 = *(double *)a1;
  *(float32x2_t *)&result.f64[0] = vcvt_f32_f64(*(float64x2_t *)(a1 + 16));
  v18 = result;
  if (*(float *)result.f64 == v3)
  {
    v5 = *(double *)(a1 + 8);
    v4 = *((float *)result.f64 + 1);
    if (*((float *)result.f64 + 1) == v5)
      goto LABEL_6;
  }
  else
  {
    v4 = *((float *)result.f64 + 1);
  }
  aal_add_point(a1, *(float *)result.f64, v4);
  result = v18;
LABEL_6:
  v8 = *(float64x2_t *)(a1 + 32);
  v6 = (int32x2_t)vcvt_f32_f64(v8);
  v7 = fabsf(*(float *)(a1 + 236));
  *(float *)v8.f64 = *(float *)(a1 + 104) - v7;
  if (*(float *)v8.f64 <= *(float *)v6.i32 || *(float *)v8.f64 <= *(float *)result.f64)
  {
    v10 = v7 + *(float *)(a1 + 112);
    if (v10 >= *(float *)v6.i32 || v10 >= *(float *)result.f64)
    {
      *(float *)v8.f64 = *(float *)(a1 + 108) - v7;
      v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v8.f64[0], 0);
      v13 = (float32x2_t)vzip2_s32(*(int32x2_t *)&result.f64[0], v6);
      v14 = vcgt_f32(v12, v13);
      if ((v14.i32[1] & v14.i32[0] & 1) == 0)
      {
        *(float *)v14.i32 = v7 + *(float *)(a1 + 116);
        v15 = vcgt_f32(v13, (float32x2_t)vdup_lane_s32(v14, 0));
        if ((v15.i32[1] & v15.i32[0] & 1) == 0)
        {
          v17 = (float32x2_t)v6;
          v16 = aal_new_edge(a1);
          result = v18;
          if (v16)
          {
            result = vcvtq_f64_f32(*(float32x2_t *)&v18.f64[0]);
            *(float64x2_t *)v16 = result;
            *(float64x2_t *)(v16 + 16) = vcvtq_f64_f32(v17);
            *(_DWORD *)(v16 + 32) = 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t aal_add_point(uint64_t result, float a2, float a3)
{
  uint64_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v10;
  float v12;
  float v13;
  float v15;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float32x2_t v22;

  v5 = result;
  v6 = vcvt_f32_f64(*(float64x2_t *)result);
  v7 = fabsf(*(float *)(result + 236));
  v8 = *(float *)(result + 104) - v7;
  if (v8 < v6.f32[0] || v8 < a2)
  {
    v10 = v7 + *(float *)(result + 112);
    if (v10 > v6.f32[0] || v10 > a2)
    {
      v12 = *(float *)(result + 108) - v7;
      v13 = v6.f32[1];
      if (v12 < v6.f32[1] || v12 < a3)
      {
        v15 = v7 + *(float *)(result + 116);
        if (v15 > v6.f32[1] || v15 > a3)
        {
          v22 = v6;
          result = aal_new_edge(result);
          if (!result)
            return result;
          v17 = v22.f32[0];
          *(float64x2_t *)result = vcvtq_f64_f32(v22);
          *(double *)(result + 16) = a2;
          *(double *)(result + 24) = a3;
          *(_DWORD *)(result + 32) = 0;
          if (v22.f32[0] <= a2)
            v18 = v22.f32[0];
          else
            v18 = a2;
          if (v22.f32[0] <= a2)
            v17 = a2;
          if (v13 <= a3)
            v19 = v13;
          else
            v19 = a3;
          if (v13 <= a3)
            v20 = a3;
          else
            v20 = v13;
          if (v18 < *(float *)(v5 + 52))
          {
            if (v18 < *(float *)(v5 + 104))
              v18 = *(float *)(v5 + 104);
            *(float *)(v5 + 52) = v18;
          }
          if (v17 > *(float *)(v5 + 60))
          {
            if (v17 > *(float *)(v5 + 112))
              v17 = *(float *)(v5 + 112);
            *(float *)(v5 + 60) = v17;
          }
          if (v19 < *(float *)(v5 + 56))
          {
            if (v19 < *(float *)(v5 + 108))
              v19 = *(float *)(v5 + 108);
            *(float *)(v5 + 56) = v19;
          }
          if (v20 > *(float *)(v5 + 64))
          {
            if (v20 > *(float *)(v5 + 116))
              v20 = *(float *)(v5 + 116);
            *(float *)(v5 + 64) = v20;
          }
        }
      }
    }
  }
  *(double *)v5 = a2;
  *(double *)(v5 + 8) = a3;
  v21 = *(_DWORD *)(v5 + 48);
  if (!v21)
  {
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 40) = a3;
  }
  *(_DWORD *)(v5 + 48) = v21 + 1;
  return result;
}

uint64_t aal_new_edge(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD **)(a1 + 184);
  v3 = v2[1];
  v4 = v2[2] + 1;
  if (v4 > v3)
  {
    v2 = malloc_type_malloc(80 * v3 + 24, 0x3EDB0642uLL);
    if (!v2)
    {
      puts("ERROR -- edge pool could not be allocated");
      return 0;
    }
    v5 = *(_QWORD **)(a1 + 176);
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    *v6 = v2;
    *v2 = 0;
    v2[1] = 2 * v3;
    v4 = 1;
    *(_QWORD *)(a1 + 184) = v2;
  }
  v7 = (uint64_t)&v2[5 * v4 - 2];
  v2[2] = v4;
  ++*(_DWORD *)(a1 + 168);
  return v7;
}

uint64_t aa_line_render(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  int64x2_t v7;
  double *v8;
  unsigned int v9;
  int64x2_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  double v32;
  double v33;
  float v34;
  float v35;
  double v36;
  BOOL v37;
  float v38;
  double v39;
  double v40;
  float v41;
  float v42;
  float v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  float32x2_t v49;
  uint64_t v50;

  v49 = 0;
  v50 = 0;
  v7 = vdupq_n_s64(0xC10FFFF800000000);
  *(int64x2_t *)(result + 88) = v7;
  v8 = (double *)(result + 88);
  *(_DWORD *)(result + 120) = a4;
  *(_DWORD *)(result + 124) = a5;
  *(_DWORD *)(result + 128) = a6;
  *(_DWORD *)(result + 132) = a7;
  *(_QWORD *)(result + 152) = a2;
  *(_QWORD *)(result + 160) = a3;
  v9 = (int)fabsf(*(float *)(result + 236) * 65536.0);
  if (v9 >= 0x10000)
    v9 = 0x10000;
  *(_DWORD *)(result + 192) = v9;
  v45 = v7;
  *(int64x2_t *)(result + 72) = v7;
  v10 = (int64x2_t *)(result + 72);
  v11 = *(_QWORD **)(result + 176);
  if (v11)
  {
    v12 = result;
    while (!v11[2])
    {
LABEL_42:
      v11 = (_QWORD *)*v11;
      if (!v11)
        return result;
    }
    v13 = 0;
    v14 = (int64x2_t *)(v11 + 7);
    while (1)
    {
      v48 = 0uLL;
      v47 = 0uLL;
      v48 = v14[-2];
      v47 = v14[-1];
      v15 = *(double *)v48.i64;
      if (fabs(*(double *)v48.i64) <= 262143.0)
      {
        v16 = *(double *)&v48.i64[1];
        if (fabs(*(double *)&v48.i64[1]) <= 262143.0)
        {
          v17 = *(double *)v47.i64;
          if (fabs(*(double *)v47.i64) <= 262143.0)
          {
            v18 = *(double *)&v47.i64[1];
            if (fabs(*(double *)&v47.i64[1]) <= 262143.0)
              goto LABEL_13;
          }
        }
      }
      result = aal_clip_edge((double *)v48.i64, (double *)v47.i64);
      if (!(_DWORD)result)
        break;
LABEL_39:
      ++v13;
      v14 = (int64x2_t *)((char *)v14 + 40);
      if (v13 >= v11[2])
        goto LABEL_42;
    }
    v18 = *(double *)&v47.i64[1];
    v17 = *(double *)v47.i64;
    v16 = *(double *)&v48.i64[1];
    v15 = *(double *)v48.i64;
LABEL_13:
    v19 = v17 - v15;
    v20 = v18 - v16;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    if (v19 != 0.0)
    {
      v22 = 1.0 / v19;
      v23 = (float)(1.0 / v19) * v20;
    }
    v49.f32[0] = v22;
    *(float *)&v50 = v23;
    v24 = 0.0;
    if (v20 != 0.0)
    {
      v21 = 1.0 / v20;
      v24 = (float)(1.0 / v20) * v19;
    }
    v49.f32[1] = v21;
    *((float *)&v50 + 1) = v24;
    if (*v8 != v15)
      goto LABEL_35;
    v25 = *(double *)(v12 + 96);
    if (v25 != v16)
      goto LABEL_35;
    v26 = *v8 - *(double *)(v12 + 72);
    v27 = v25 - *(double *)(v12 + 80);
    v28 = fabsf(v19);
    v29 = fabsf(v20);
    if (v28 > v29 == fabsf(v26) > fabsf(v27) || (float)(v19 * v26) <= 0.0 || (float)(v20 * v27) <= 0.0)
      goto LABEL_35;
    v46 = v48;
    if (v28 <= v29)
    {
      v36 = (float)(v24 * 0.5);
      v37 = v20 < 0.0;
      v38 = v20 + 0.5;
      v39 = v16 + -0.5;
      v40 = v15 - v36;
      v41 = v20 + -0.5;
      v16 = v16 + 0.5;
      v15 = v15 + v36;
      if (v37)
      {
        v42 = v41;
      }
      else
      {
        v16 = v39;
        v42 = v38;
      }
      if (!v37)
        v15 = v40;
      v49.f32[1] = 1.0 / v42;
      *(double *)v48.i64 = v15;
      *(double *)&v48.i64[1] = v16;
      v43 = v17 - v15;
      if (fabsf(v43) > fabsf(v42))
      {
        v49.f32[0] = 1.0 / v43;
        *(float *)&v50 = v42 * (float)(1.0 / v43);
      }
    }
    else
    {
      v30 = (float)(v23 * 0.5);
      v37 = v19 < 0.0;
      v31 = v19 + 0.5;
      v32 = v15 + -0.5;
      v33 = v16 - v30;
      v34 = v19 + -0.5;
      v15 = v15 + 0.5;
      v16 = v16 + v30;
      if (!v37)
      {
        v15 = v32;
        v34 = v31;
        v16 = v33;
      }
      v49.f32[0] = 1.0 / v34;
      *(double *)v48.i64 = v15;
      *(double *)&v48.i64[1] = v16;
      v35 = v18 - v16;
      if (fabsf(v35) > fabsf(v34))
      {
        v49.f32[1] = 1.0 / v35;
        *((float *)&v50 + 1) = v34 * (float)(1.0 / v35);
      }
    }
    if ((v14->i8[0] & 1) != 0)
    {
      v47 = v46;
      result = (uint64_t)line_to((float *)v12, &v49, v15, v16, *(double *)v46.i64, *(double *)&v46.i64[1]);
      *(int64x2_t *)(v12 + 72) = v45;
      *(int64x2_t *)(v12 + 88) = v45;
    }
    else
    {
LABEL_35:
      if ((v14->i8[0] & 1) != 0)
      {
        v44 = v45;
        *v10 = v45;
      }
      else
      {
        result = (uint64_t)line_to((float *)v12, &v49, v15, v16, v17, v18);
        *v10 = v48;
        v44 = v47;
      }
      *(int64x2_t *)v8 = v44;
    }
    goto LABEL_39;
  }
  return result;
}

uint64_t aal_clip_edge(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  double v8;
  double v9;
  _BOOL4 v10;
  uint64_t v11;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = (*a1 > 262143.0) | (4 * (*a1 < -262143.0)) | (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
  v7 = (*a2 > 262143.0) | (4 * (*a2 < -262143.0)) | (2 * (v5 > 262143.0)) | (8 * (v5 < -262143.0));
  v8 = v5 - v3;
  v9 = *a2 - *a1;
  v10 = v7 == 0;
  while (1)
  {
    v11 = v7 & v6;
    if ((v7 & v6) != 0)
      return v11;
    if (v6)
    {
      if ((v6 & 4) == 0)
        goto LABEL_5;
    }
    else
    {
      v10 = 0;
      *a1 = v2;
      a1[1] = v3;
      v9 = -v9;
      v8 = -v8;
      v2 = v4;
      v3 = v5;
      v6 = v7;
      v7 = 0;
      if ((v6 & 4) == 0)
      {
LABEL_5:
        if ((v6 & 1) != 0)
        {
          v3 = v3 + (262143.0 - v2) * v8 / v9;
          v6 = (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
          v2 = 262143.0;
        }
        else if ((v6 & 2) != 0)
        {
          v2 = v2 + v9 * (262143.0 - v3) / v8;
          v6 = (v2 > 262143.0) | (4 * (v2 < -262143.0));
          v3 = 262143.0;
        }
        else if ((v6 & 8) != 0)
        {
          v2 = v2 + v9 * (-262143.0 - v3) / v8;
          v6 = (v2 > 262143.0) | (4 * (v2 < -262143.0));
          v3 = -262143.0;
        }
        goto LABEL_13;
      }
    }
    v3 = v3 + (-262143.0 - v2) * v8 / v9;
    v6 = (2 * (v3 > 262143.0)) | (8 * (v3 < -262143.0));
    v2 = -262143.0;
LABEL_13:
    v11 = v10 | v7 | v6;
    if (!(_DWORD)v11)
    {
      *a2 = v2;
      a2[1] = v3;
      return v11;
    }
  }
}

float *line_to(float *result, float32x2_t *a2, double a3, double a4, double a5, double a6)
{
  float v6;
  float v7;
  double v8;
  double v9;
  unsigned int v10;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  float v20;
  int v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v6 = a3 - a5;
  v7 = a4 - a6;
  if (fabsf(v6) <= fabsf(v7))
  {
    if (v7 != 0.0)
    {
      if (a4 <= a6)
      {
        v6 = a5 - a3;
        v9 = a6;
      }
      else
      {
        *a2 = vneg_f32(*a2);
        v9 = a4;
        a4 = a6;
        a3 = a5;
      }
      v19 = 2048;
      if (v6 != 0.0)
      {
        v20 = v9 - a4;
        v21 = (int)(sqrt((float)((float)(v20 * v20) + (float)(v6 * v6))) * a2->f32[1] * 0.5 * 4096.0 + 0.5);
        if (v21 <= 2048)
          v19 = 2048;
        else
          v19 = v21;
      }
      v22 = (int)(a4 * 4096.0 + 0.5);
      v23 = (int)(v9 * 4096.0 + 0.5);
      v24 = (double)(int)(v22 & 0xFFFFF000) * 0.000244140625;
      v25 = (double)(int)((v23 + 4095) & 0xFFFFF000) * 0.000244140625;
      v26 = result[27];
      if (v26 <= v24)
        v26 = (double)(int)(v22 & 0xFFFFF000) * 0.000244140625;
      v27 = result[29];
      if (v27 >= v25)
        v27 = (double)(int)((v23 + 4095) & 0xFFFFF000) * 0.000244140625;
      if (v26 < v27)
        return (float *)draw_line((uint64_t)result, (int)v26, (int)v27, (int)v24, (int)v25 - 1, (int)((v26 - a4) * a2[1].f32[1] * 4096.0 + 0.5) + (int)(a3 * 4096.0 + 0.5), (int)(a2[1].f32[1] * 4096.0 + 0.5), (int)(a2[1].f32[0] * 4096.0 + 0.5), v19, v22, v23, 1);
    }
  }
  else if (v6 != 0.0)
  {
    if (a3 <= a5)
    {
      v7 = a6 - a4;
      v8 = a5;
    }
    else
    {
      *a2 = vneg_f32(*a2);
      v8 = a3;
      a4 = a6;
      a3 = a5;
    }
    v10 = 2048;
    if (v7 != 0.0)
    {
      v11 = v8 - a3;
      v12 = (int)(sqrt((float)((float)(v7 * v7) + (float)(v11 * v11))) * a2->f32[0] * 0.5 * 4096.0 + 0.5);
      if (v12 <= 2048)
        v10 = 2048;
      else
        v10 = v12;
    }
    v13 = (int)(a3 * 4096.0 + 0.5);
    v14 = (int)(v8 * 4096.0 + 0.5);
    v15 = (double)(int)(v13 & 0xFFFFF000) * 0.000244140625;
    v16 = (double)(int)((v14 + 4095) & 0xFFFFF000) * 0.000244140625;
    v17 = result[26];
    if (v17 <= v15)
      v17 = (double)(int)(v13 & 0xFFFFF000) * 0.000244140625;
    v18 = result[28];
    if (v18 >= v16)
      v18 = (double)(int)((v14 + 4095) & 0xFFFFF000) * 0.000244140625;
    if (v17 < v18)
      return (float *)draw_line((uint64_t)result, (int)v17, (int)v18, (int)v15, (int)v16 - 1, (int)((v17 - a3) * a2[1].f32[0] * 4096.0 + 0.5) + (int)(a4 * 4096.0 + 0.5), (int)(a2[1].f32[0] * 4096.0 + 0.5), (int)(a2[1].f32[1] * 4096.0 + 0.5), v10, v13, v14, 0);
  }
  return result;
}

uint64_t draw_line(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, __int16 a10, int a11, char a12)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  char v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  char v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  int v85;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v92;
  char v95;
  char v96;
  char v97;
  char v98;

  v13 = a2;
  v92 = result;
  v14 = a7 + a6;
  v15 = ((a6 - a9) >> 4);
  v16 = ((a9 + a6) >> 4);
  v17 = (int)(a6 - a9) >> 12;
  v18 = ((int)(a9 + a6 + 4095) >> 12) - 1;
  v90 = a9 >> 3;
  if (a7 < 0)
  {
    if (a2 < a3)
    {
      v87 = -a8;
      v55 = (4096 - (a10 & 0xFFFu)) >> 4;
      v56 = a11 - ((a11 - 1) & 0xFFFFF000);
      v57 = v56 >> 4;
      v89 = v56 >> 4;
      do
      {
        v58 = ((v14 - a9) >> 4);
        v59 = ((a9 + v14) >> 4);
        v60 = (int)(v14 - a9) >> 12;
        v61 = ((int)(a9 + v14 + 4095) >> 12) - 1;
        if (v18 == v60)
        {
          v62 = (255 * v55) >> 8;
          if (a4 != v13)
            LOWORD(v62) = 255;
          if (a5 == v13)
            LOBYTE(v62) = (unsigned __int16)(v62 * v89) >> 8;
          v63 = a4 == v13 || a5 == v13;
          v95 = v62;
        }
        else if (v18 == v60 + 1)
        {
          v64 = ((v15 + v58) >> 1) ^ 0xFF;
          v65 = v90 - v64;
          v66 = (int)((v90 - v64) * v55) >> 8;
          if (a4 == v13)
          {
            v64 = (v64 * v55) >> 8;
            v65 = v66;
          }
          if (a5 == v13)
          {
            LOBYTE(v64) = (unsigned __int16)(v64 * v57) >> 8;
            v65 = (v65 * v57) >> 8;
          }
          v63 = a4 == v13 || a5 == v13;
          v95 = v64;
          if (v65 >= 255)
            v67 = -1;
          else
            v67 = v65;
          v96 = v67;
        }
        else if (v18 == v60 + 2)
        {
          v68 = ((v58 ^ 0xFF) * v87 * (v58 ^ 0xFF)) >> 21;
          if (v68 >= 255)
            v68 = 255;
          v69 = (v16 * v87 * v16) >> 21;
          if (v69 >= 255)
            v70 = 255;
          else
            v70 = (v16 * v87 * v16) >> 21;
          v71 = (v16 + v59) >> 1;
          if (v18 != v61)
            v71 = v70;
          v72 = ((v15 + v58) >> 1) ^ 0xFF;
          if (v69 >= 255)
            v69 = 255;
          if (v17 == v60)
          {
            v68 = v72;
            v71 = v69;
          }
          v73 = v90 - v68 - v71;
          if (v73 >= 255)
            v73 = 255;
          if (a4 == v13)
          {
            v68 = (int)(v68 * v55) >> 8;
            v71 = (int)(v71 * v55) >> 8;
            v73 = (int)(v73 * v55) >> 8;
            v74 = 1;
          }
          else
          {
            v74 = 0;
          }
          if (a5 == v13)
          {
            LOBYTE(v68) = (unsigned __int16)(v68 * v57) >> 8;
            LOBYTE(v71) = (unsigned __int16)(v71 * v57) >> 8;
          }
          v95 = v68;
          if (a5 == v13)
            v75 = (unsigned __int16)(v73 * v57) >> 8;
          else
            v75 = v73;
          if (a5 == v13)
            v63 = 1;
          else
            v63 = v74;
          v96 = v75;
          v97 = v71;
        }
        else
        {
          v76 = ((v58 ^ 0xFF) * v87 * (v58 ^ 0xFF)) >> 21;
          if (v76 >= 255)
            v76 = 255;
          v77 = (v16 * v87 * v16) >> 21;
          if (v77 >= 255)
            v77 = 255;
          v78 = (v16 + v59 + 255) >> 1;
          v79 = v90 - (v76 + v78);
          if (v79 >= 255)
            v79 = 255;
          v80 = v78 - v77;
          if (v80 >= 255)
            LOWORD(v80) = 255;
          if (a4 == v13)
          {
            v76 = (int)(v76 * v55) >> 8;
            v77 = (int)(v77 * v55) >> 8;
            v79 = (int)(v79 * v55) >> 8;
            v80 = (int)(v79 * v55) >> 8;
            v81 = 1;
          }
          else
          {
            v81 = 0;
          }
          if (a5 == v13)
          {
            LOBYTE(v76) = (unsigned __int16)(v76 * v57) >> 8;
            LOBYTE(v77) = (unsigned __int16)(v77 * v57) >> 8;
            LOBYTE(v79) = (unsigned __int16)(v79 * v57) >> 8;
            v63 = 1;
          }
          else
          {
            v63 = v81;
          }
          v95 = v76;
          v96 = v79;
          if (a5 == v13)
            v82 = (unsigned __int16)(v80 * v57) >> 8;
          else
            v82 = v80;
          v97 = v82;
          v98 = v77;
        }
        if (a12)
        {
          v83 = 1;
          v84 = (int)(v14 - a9) >> 12;
          v85 = v13;
        }
        else
        {
          v83 = 0;
          v84 = v13;
          v85 = (int)(v14 - a9) >> 12;
        }
        result = aal_add_coverage_span(v92, v83, v84, v85, v18 - v60 + 1, (uint64_t)&v95, v63);
        ++v13;
        v14 += a7;
        v18 = v61;
        v17 = v60;
        v16 = v59;
        v15 = v58;
      }
      while (a3 != v13);
    }
  }
  else if (a2 < a3)
  {
    v19 = (4096 - (a10 & 0xFFFu)) >> 4;
    v20 = a11 - ((a11 - 1) & 0xFFFFF000);
    v21 = v20 >> 4;
    v88 = v20 >> 4;
    do
    {
      v22 = ((v14 - a9) >> 4);
      v23 = ((a9 + v14) >> 4);
      v24 = (int)(v14 - a9) >> 12;
      v25 = (int)(a9 + v14 + 4095) >> 12;
      v26 = v25 - 1;
      v27 = v25 - 1 - v17;
      if (v25 - 1 == v17)
      {
        v28 = (255 * v19) >> 8;
        if (a4 != v13)
          LOWORD(v28) = 255;
        if (a5 == v13)
          LOBYTE(v28) = (unsigned __int16)(v28 * v88) >> 8;
        v29 = a4 == v13 || a5 == v13;
        v95 = v28;
      }
      else if (v25 == v17 + 2)
      {
        v30 = ((v15 + v22) >> 1) ^ 0xFF;
        v31 = v90 - v30;
        v32 = (int)((v90 - v30) * v19) >> 8;
        if (a4 == v13)
        {
          v30 = (v30 * v19) >> 8;
          v31 = v32;
        }
        if (a5 == v13)
        {
          LOBYTE(v30) = (unsigned __int16)(v30 * v21) >> 8;
          v31 = (v31 * v21) >> 8;
        }
        v29 = a4 == v13 || a5 == v13;
        v95 = v30;
        if (v31 >= 255)
          v33 = -1;
        else
          v33 = v31;
        v96 = v33;
      }
      else if (v25 == v17 + 3)
      {
        v34 = ((v15 ^ 0xFF) * a8 * (v15 ^ 0xFF)) >> 21;
        if (v34 >= 255)
          v34 = 255;
        v35 = (v23 * a8 * v23) >> 21;
        if (v35 >= 255)
          v36 = 255;
        else
          v36 = (v23 * a8 * v23) >> 21;
        v37 = (v16 + v23) >> 1;
        if (v18 == v26)
          v38 = v37;
        else
          v38 = v36;
        v39 = ((v15 + v22) >> 1) ^ 0xFF;
        if (v35 >= 255)
          v40 = 255;
        else
          v40 = (v23 * a8 * v23) >> 21;
        if (v17 == v24)
          v38 = v40;
        else
          v39 = v34;
        v41 = v90 - v39 - v38;
        if (v41 >= 255)
          v41 = 255;
        if (a4 == v13)
        {
          v39 = (int)(v39 * v19) >> 8;
          v38 = (int)(v38 * v19) >> 8;
          v41 = (int)(v41 * v19) >> 8;
          v42 = 1;
        }
        else
        {
          v42 = 0;
        }
        if (a5 == v13)
        {
          LOBYTE(v39) = (unsigned __int16)(v39 * v21) >> 8;
          LOBYTE(v38) = (unsigned __int16)(v38 * v21) >> 8;
        }
        v95 = v39;
        if (a5 == v13)
          v43 = (unsigned __int16)(v41 * v21) >> 8;
        else
          v43 = v41;
        if (a5 == v13)
          v29 = 1;
        else
          v29 = v42;
        v96 = v43;
        v97 = v38;
      }
      else
      {
        v44 = ((v15 ^ 0xFF) * a8 * (v15 ^ 0xFF)) >> 21;
        if (v44 >= 255)
          v44 = 255;
        v45 = (v23 * a8 * v23) >> 21;
        if (v45 >= 255)
          v45 = 255;
        v46 = (v16 + v23 + 255) >> 1;
        v47 = v90 - (v44 + v46);
        if (v47 >= 255)
          v47 = 255;
        v48 = v46 - v45;
        if (v48 >= 255)
          LOWORD(v48) = 255;
        if (a4 == v13)
        {
          v44 = (int)(v44 * v19) >> 8;
          v45 = (int)(v45 * v19) >> 8;
          v47 = (int)(v47 * v19) >> 8;
          v48 = (int)(v47 * v19) >> 8;
          v49 = 1;
        }
        else
        {
          v49 = 0;
        }
        if (a5 == v13)
        {
          LOBYTE(v44) = (unsigned __int16)(v44 * v21) >> 8;
          LOBYTE(v45) = (unsigned __int16)(v45 * v21) >> 8;
          LOBYTE(v47) = (unsigned __int16)(v47 * v21) >> 8;
          v29 = 1;
        }
        else
        {
          v29 = v49;
        }
        v95 = v44;
        v96 = v47;
        if (a5 == v13)
          v50 = (unsigned __int16)(v48 * v21) >> 8;
        else
          v50 = v48;
        v97 = v50;
        v98 = v45;
      }
      if (v27 >= 3)
        v51 = 3;
      else
        v51 = v27;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = 0;
      if (a12)
      {
        v53 = 1;
        v54 = v17;
        v17 = v13;
      }
      else
      {
        v53 = 0;
        v54 = v13;
      }
      result = aal_add_coverage_span(v92, v53, v54, v17, v52, (uint64_t)&v95, v29);
      ++v13;
      v14 += a7;
      v18 = v26;
      v17 = v24;
      v16 = v23;
      v15 = v22;
    }
    while (a3 != v13);
  }
  return result;
}

uint64_t aal_add_coverage_span(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  _BYTE *v38;
  unsigned int v39;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unint64_t v76;

  v9 = result;
  if (a2)
  {
    if (*(_DWORD *)(result + 124) <= a4)
    {
      v10 = *(_DWORD *)(result + 132);
      if (v10 > a4)
      {
        v11 = *(_DWORD *)(result + 120);
        if (a5 + a3 > v11)
        {
          v12 = *(_DWORD *)(result + 128);
          if (v12 > a3)
          {
            v13 = v11 - a3;
            if (v11 <= a3)
              v13 = 0;
            v14 = v13;
            if (v11 <= a3)
              v15 = a3;
            else
              v15 = *(_DWORD *)(result + 120);
            v16 = a5 - v13;
            v17 = v12 - (v16 + v15);
            if (v12 >= v16 + v15)
              v17 = 0;
            v18 = v17 + v16;
            v19 = *(_QWORD *)(result + 152) + *(_QWORD *)(result + 160) * (v10 + ~a4);
            v20 = v15 - v11;
            if (v17 + v16 + v15 > v12)
              result = puts("***** ERROR - aa_line writing outside of the mask");
            v21 = v19 + v20;
            v22 = *(_DWORD *)(v9 + 192);
            v24 = v18 < 1 || v14 > 3;
            if (HIWORD(v22))
            {
              if (a7 == 1)
              {
                if (!v24)
                {
                  v45 = 0;
                  do
                  {
                    v46 = *(unsigned __int8 *)(a6 + v14 + v45) + *(unsigned __int8 *)(v21 + v45);
                    if (v46 >= 0xFF)
                      LOBYTE(v46) = -1;
                    *(_BYTE *)(v21 + v45) = v46;
                    if ((int)v45 + 1 >= v18)
                      break;
                    v47 = v14 - 3 + v45++;
                  }
                  while (v47 >= 0xFFFFFFFFFFFFFFFCLL);
                }
              }
              else if (!v24)
              {
                v65 = 0;
                do
                {
                  v66 = *(unsigned __int8 *)(v21 + v65);
                  v67 = *(unsigned __int8 *)(a6 + v14 + v65);
                  if (v67 <= v66)
                    v68 = *(unsigned __int8 *)(v21 + v65);
                  else
                    v68 = *(unsigned __int8 *)(a6 + v14 + v65);
                  v69 = (v66 + v67 + 3 * v68 + 2) >> 2;
                  if (v69 >= 0xFF)
                    LOBYTE(v69) = -1;
                  *(_BYTE *)(v21 + v65) = v69;
                  if ((int)v65 + 1 >= v18)
                    break;
                  v70 = v14 - 3 + v65++;
                }
                while (v70 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (a7 == 1)
            {
              if (!v24)
              {
                v25 = 0;
                do
                {
                  v26 = *(unsigned __int8 *)(v21 + v25)
                      + ((v22 * *(unsigned __int8 *)(a6 + v14 + v25)) >> 16);
                  if (v26 >= 0xFF)
                    LOBYTE(v26) = -1;
                  *(_BYTE *)(v21 + v25) = v26;
                  if ((int)v25 + 1 >= v18)
                    break;
                  v27 = v14 - 3 + v25++;
                }
                while (v27 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (!v24)
            {
              v51 = 0;
              do
              {
                v52 = *(unsigned __int8 *)(v21 + v51);
                v53 = v22 * *(unsigned __int8 *)(a6 + v14 + v51);
                v54 = HIWORD(v53);
                v55 = BYTE2(v53);
                if (v55 <= v52)
                  v55 = *(unsigned __int8 *)(v21 + v51);
                v56 = (v52 + v54 + 3 * v55 + 2) >> 2;
                if (v56 >= 0xFF)
                  LOBYTE(v56) = -1;
                *(_BYTE *)(v21 + v51) = v56;
                if ((int)v51 + 1 >= v18)
                  break;
                v57 = v14 - 3 + v51++;
              }
              while (v57 >= 0xFFFFFFFFFFFFFFFCLL);
            }
          }
        }
      }
    }
  }
  else
  {
    v28 = *(_DWORD *)(result + 120);
    v29 = __OFSUB__(a3, v28);
    v30 = a3 - v28;
    if (v30 < 0 == v29 && *(_DWORD *)(result + 128) > a3)
    {
      v31 = *(_DWORD *)(result + 124);
      if (a5 + a4 > v31)
      {
        v32 = *(_DWORD *)(result + 132);
        if (v32 > a4)
        {
          v33 = v31 - a4;
          if (v31 <= a4)
          {
            v31 = a4;
            v33 = 0;
          }
          v34 = a5 - v33;
          v35 = v33;
          v36 = v32 - (a5 - v33 + v31);
          if (v32 >= v34 + v31)
            v36 = 0;
          v37 = v36 + v34;
          v38 = (_BYTE *)(*(_QWORD *)(result + 152) + *(_QWORD *)(result + 160) * (v32 + ~v31) + v30);
          if (v36 + v34 + v31 > v32)
            result = puts("***** ERROR - aa_line writing outside of the mask");
          v39 = *(_DWORD *)(v9 + 192);
          v41 = v37 < 1 || v35 > 3;
          if (HIWORD(v39))
          {
            if (a7 == 1)
            {
              if (!v41)
              {
                v48 = 0;
                do
                {
                  v49 = *(unsigned __int8 *)(a6 + v35 + v48) + *v38;
                  if (v49 >= 0xFF)
                    LOBYTE(v49) = -1;
                  *v38 = v49;
                  if ((int)v48 + 1 >= v37)
                    break;
                  v38 -= *(_QWORD *)(v9 + 160);
                  v50 = v35 - 3 + v48++;
                }
                while (v50 >= 0xFFFFFFFFFFFFFFFCLL);
              }
            }
            else if (!v41)
            {
              v71 = 0;
              do
              {
                v72 = *v38;
                v73 = *(unsigned __int8 *)(a6 + v35 + v71);
                if (v73 <= v72)
                  v74 = *v38;
                else
                  v74 = *(unsigned __int8 *)(a6 + v35 + v71);
                v75 = (v72 + v73 + 3 * v74 + 2) >> 2;
                if (v75 >= 0xFF)
                  LOBYTE(v75) = -1;
                *v38 = v75;
                if ((int)v71 + 1 >= v37)
                  break;
                v38 -= *(_QWORD *)(v9 + 160);
                v76 = v35 - 3 + v71++;
              }
              while (v76 > 0xFFFFFFFFFFFFFFFBLL);
            }
          }
          else if (a7 == 1)
          {
            if (!v41)
            {
              v42 = 0;
              do
              {
                v43 = *v38 + ((v39 * *(unsigned __int8 *)(a6 + v35 + v42)) >> 16);
                if (v43 >= 0xFF)
                  LOBYTE(v43) = -1;
                *v38 = v43;
                if ((int)v42 + 1 >= v37)
                  break;
                v38 -= *(_QWORD *)(v9 + 160);
                v44 = v35 - 3 + v42++;
              }
              while (v44 >= 0xFFFFFFFFFFFFFFFCLL);
            }
          }
          else if (!v41)
          {
            v58 = 0;
            do
            {
              v59 = *v38;
              v60 = v39 * *(unsigned __int8 *)(a6 + v35 + v58);
              v61 = HIWORD(v60);
              v62 = BYTE2(v60);
              if (v62 <= v59)
                v62 = *v38;
              v63 = (v59 + v61 + 3 * v62 + 2) >> 2;
              if (v63 >= 0xFF)
                LOBYTE(v63) = -1;
              *v38 = v63;
              if ((int)v58 + 1 >= v37)
                break;
              v38 -= *(_QWORD *)(v9 + 160);
              v64 = v35 - 3 + v58++;
            }
            while (v64 >= 0xFFFFFFFFFFFFFFFCLL);
          }
        }
      }
    }
  }
  return result;
}

uint64_t aa_line_render_shape(uint64_t a1, void **a2, int a3, int a4, int a5, int a6, int a7)
{
  float v8;
  float v9;
  BOOL v10;
  float v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  __int128 *v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  float v41;
  float v42;
  float v43;
  __int128 v44;
  float v45;
  int v46;
  float v47;
  unsigned int v48;
  float v49;
  float v50;
  signed int v51;
  int v52;
  __int128 v53;
  float v54;
  int v55;
  float v56;
  unsigned int v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  BOOL v65;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  BOOL v76;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  void **v83;
  _QWORD *v84;
  __int16 *v85;
  float v86;
  unsigned int v87;
  int v88;
  int *v89;
  unsigned int v90;
  unsigned int v91;
  int32x2_t v92;
  uint64_t v93;
  int *v94;
  int *v95;
  int v96;
  void **v97;
  int v98;
  int v99;
  int v100;
  int *v101;
  _QWORD *v102;
  int32x2_t v103;
  int *v104;
  int *v105;
  char *v106;
  int v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  _DWORD *v112;
  uint64_t v113;
  void *v115;
  int v116;
  int v117;
  int v118;
  void **v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  int v123;
  int v124;
  char *v125;
  char *v126;
  int *v127;
  void *ptr;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132[3];

  v132[0] = a3;
  v129 = 0uLL;
  if (!a2)
    return 0;
  v8 = *(float *)(a1 + 52);
  v9 = *(float *)(a1 + 64);
  v10 = v8 <= *(float *)(a1 + 60) && *(float *)(a1 + 56) <= v9;
  if (!v10 || 40 * *(_DWORD *)(a1 + 168) + 24 < 1)
    return 0;
  v16 = *(float *)(a1 + 236);
  *(_DWORD *)(a1 + 120) = a4;
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 128) = a6;
  *(_DWORD *)(a1 + 132) = a7;
  v17 = (int)fabsf(v16 * 65536.0);
  if (v17 >= 0x10000)
    v17 = 0x10000;
  *(_DWORD *)(a1 + 192) = v17;
  v18 = a7 - a5;
  v19 = 16 * (a7 - a5);
  v20 = (char *)malloc_type_malloc(v19, 0xD1AF96A2uLL);
  if (!v20)
  {
    v24 = "ERROR -- buckets could not be allocated";
    goto LABEL_109;
  }
  v122 = v20;
  v119 = a2;
  v116 = a4;
  v117 = a7;
  v118 = a3;
  if (*(_DWORD *)(a1 + 120) == (__int16)*(_DWORD *)(a1 + 120)
    && *(_DWORD *)(a1 + 128) == (__int16)*(_DWORD *)(a1 + 128))
  {
    bzero(v20, v19);
    v23 = 0;
  }
  else
  {
    if (a7 != a5)
    {
      if (v18 <= 1)
        LODWORD(v21) = 1;
      else
        LODWORD(v21) = v18;
      v21 = (int)v21;
      v22 = v20;
      do
      {
        *(_WORD *)v22 = -1;
        *((_QWORD *)v22 + 1) = 0;
        v22 += 16;
        --v21;
      }
      while (v21);
    }
    v23 = 1;
  }
  *(_BYTE *)(a1 + 232) = v23;
  v131 = 0uLL;
  v130 = 0uLL;
  v25 = *(int *)(a1 + 124);
  v26 = *(int *)(a1 + 132);
  v27 = *(_QWORD *)(a1 + 176);
  if (!v27)
  {
LABEL_105:
    v82 = v118 / 4;
    v132[0] = v118 / 4;
    v83 = v119;
    v84 = *v119;
    if (*v119)
    {
      v85 = (__int16 *)v122;
      if (v118 > 35)
      {
        ptr = *v119;
LABEL_113:
        v86 = fabsf(v16) * 0.5;
        v87 = vcvtps_s32_f32(v9 + v86);
        v88 = (v117 - v87) & ~((int)(v117 - v87) >> 31);
        v125 = (char *)v84 + 4;
        v126 = (char *)v84 + 4;
        *v84 = 0x280000000;
        v89 = (int *)(v84 + 1);
        v127 = (int *)(v84 + 1);
        if ((int)v26 > (int)v25)
        {
          v90 = vcvtms_s32_f32(v8 - v86);
          v91 = ((v90 - v116) & ~((int)(v90 - v116) >> 31)) - v116;
          v92 = vdup_n_s32(v91);
          v93 = 16 * v26 - 16 * v25 - 8;
          while (1)
          {
            if (!aa_shape_size_check(*v83, &ptr, v132, &v127, &v126, &v125))
              goto LABEL_146;
            --v26;
            v94 = v127;
            v95 = v127;
            *v127 = v88;
            v89 = v95 + 2;
            v94[1] = 2;
            v126 = (char *)(v94 + 1);
            v127 = v89;
            v96 = v85[8 * (v26 - v25)];
            if (v96 < 0)
            {
              v102 = *(_QWORD **)&v85[8 * (v26 - v25) + 4];
              if (v102)
              {
                while (1)
                {
                  v103 = (int32x2_t)v102[1];
                  if (!aa_shape_size_check(*v83, &ptr, v132, &v127, &v126, &v125))
                    break;
                  v104 = v127;
                  v105 = v127;
                  *(int32x2_t *)v127 = vadd_s32(v92, v103);
                  v127 = v105 + 2;
                  v102 = (_QWORD *)*v102;
                  if (!v102)
                  {
                    v89 = v104 + 2;
                    goto LABEL_126;
                  }
                }
LABEL_146:
                puts("ERROR -- shape allocation error");
                malloc_type_realloc(ptr, 0, 0x7492344AuLL);
                goto LABEL_142;
              }
            }
            else if (v85[8 * (v26 - v25)])
            {
              v124 = v88;
              v97 = v83;
              LOWORD(v98) = 0;
              v121 = v93;
              while (1)
              {
                v99 = *(__int16 *)((char *)v85 + v93);
                v100 = *(__int16 *)((char *)v85 + v93 + 2);
                if (!aa_shape_size_check(*v97, &ptr, v132, &v127, &v126, &v125))
                  break;
                v101 = v127;
                v89 = v127 + 2;
                v127 += 2;
                *v101 = v91 + v99;
                v101[1] = v91 + v100;
                v98 = (__int16)(v98 + 1);
                v93 += 4;
                v85 = (__int16 *)v122;
                if (v98 >= v96)
                {
                  v83 = v97;
                  v88 = v124;
                  v93 = v121;
                  goto LABEL_126;
                }
              }
              puts("ERROR -- shape allocation error");
              malloc_type_realloc(ptr, 0, 0x7492344AuLL);
              v115 = v122;
              goto LABEL_144;
            }
LABEL_126:
            v106 = v126;
            v107 = ((unint64_t)((char *)v89 - v126) >> 2) + 1;
            *(_DWORD *)v126 = v107;
            v108 = v125;
            if (v125 && v107 == *(_DWORD *)v125)
            {
              if (v107 != 2)
              {
                v109 = 4;
                while (&v106[v109] != (char *)v89)
                {
                  v110 = *(_DWORD *)&v106[v109];
                  v111 = *(_DWORD *)&v125[v109];
                  v109 += 4;
                  if (v110 != v111)
                    goto LABEL_133;
                }
              }
              v89 = (int *)(v106 - 4);
              v126 = v125;
              v127 = (int *)(v106 - 4);
            }
            else
            {
LABEL_133:
              v108 = v106;
            }
            v125 = v108;
            ++v88;
            v93 -= 16;
            if (v26 <= v25)
            {
              v84 = ptr;
              break;
            }
          }
        }
        v112 = v89 + 2;
        *v89 = v88;
        v89[1] = 2;
        v113 = (char *)(v89 + 2) - (char *)v84;
        if (v132[0] <= v113 >> 2)
          puts("failure");
        *v112 = 0x7FFFFFFF;
        *v83 = v84;
        if (*(_BYTE *)(a1 + 232))
          free_all_spans((_QWORD *)a1);
        free(v85);
        return (v113 + 4);
      }
    }
    else
    {
      v85 = (__int16 *)v122;
      if (v118 <= 255)
      {
        v82 = 64;
        v132[0] = 64;
      }
      v84 = malloc_type_realloc(0, (4 * v82 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
      ptr = v84;
      if (v84)
        goto LABEL_113;
    }
    puts("ERROR -- shape allocation error");
LABEL_142:
    v115 = v85;
LABEL_144:
    free(v115);
    return 0;
  }
  v28 = *(_DWORD *)(a1 + 120);
  v29 = *(_DWORD *)(a1 + 128);
  while (1)
  {
    v120 = (uint64_t *)v27;
    v123 = *(_DWORD *)(v27 + 16);
    if (v123 >= 1)
      break;
LABEL_104:
    v27 = *v120;
    if (!*v120)
      goto LABEL_105;
  }
  v30 = 0;
  v31 = (__int128 *)(v27 + 24);
  while (1)
  {
    if ((v31[2] & 1) != 0)
      goto LABEL_32;
    v32 = *v31;
    v130 = v31[1];
    v131 = v32;
    if (fabs(*(double *)&v32) > 262143.0
      || (v33 = *((double *)&v131 + 1), fabs(*((double *)&v131 + 1)) > 262143.0)
      || (v34 = *(double *)&v130, fabs(*(double *)&v130) > 262143.0)
      || (v35 = *((double *)&v130 + 1), fabs(*((double *)&v130 + 1)) > 262143.0))
    {
      if (aal_clip_edge((double *)&v131, (double *)&v130))
        goto LABEL_32;
      v33 = *((double *)&v131 + 1);
      *(_QWORD *)&v32 = v131;
      v35 = *((double *)&v130 + 1);
      v34 = *(double *)&v130;
    }
    v36 = *(double *)&v32 + -0.5;
    v37 = v33 + -0.5;
    *(double *)&v131 = v36;
    *((double *)&v131 + 1) = v37;
    v38 = v34 + -0.5;
    v39 = v35 + -0.5;
    *(double *)&v130 = v34 + -0.5;
    *((double *)&v130 + 1) = v35 + -0.5;
    v40 = v34 + -0.5 - v36;
    v41 = v35 + -0.5 - v37;
    v42 = -v40;
    if (v40 >= 0.0)
      v42 = v40;
    v43 = -v41;
    if (v41 >= 0.0)
      v43 = v41;
    if (v42 <= v43)
      break;
    if (v36 > v38)
    {
      v44 = v130;
      v129 = v131;
      v130 = v131;
      v131 = v44;
      v38 = *(double *)&v130;
      v37 = *((double *)&v44 + 1);
      v36 = *((double *)&v44 + 1);
    }
    v45 = v36 + 0.5;
    v46 = vcvtms_s32_f32(v45);
    v47 = v38 + 0.5;
    v48 = vcvtms_s32_f32(v47);
    v49 = v41 / v40;
    v50 = v37 + ((double)v46 - v36) * (float)(v41 / v40) + 0.5;
    v51 = vcvtms_s32_f32(v50) - 1;
    if ((int)(v48 - *(char *)(a1 + 240)) >= v46)
    {
      v67 = 0;
      v68 = v48 - *(unsigned __int8 *)(a1 + 240) + 1;
      v69 = v46;
      do
      {
        v70 = vcvtms_s32_f32(v50);
        if (v51 == v70)
        {
          v52 = v67 + 1;
        }
        else
        {
          v52 = 1;
          if (v67 >= 1 && v51 >= (int)v25 && v51 < (int)v26 && v67 + v46 > v28 && v46 < v29)
          {
            if (v46 <= v28)
              v71 = v28;
            else
              v71 = v46;
            if (v46 >= v28)
              v72 = 0;
            else
              v72 = v46 - v28;
            v73 = v67 + v72 + v71;
            if (v73 >= v29)
              v74 = v29;
            else
              v74 = v73;
            aal_insert_span(a1, (unsigned __int16 *)&v122[16 * (v51 - (int)v25)], v71, v74);
            v52 = 1;
          }
          v46 = v69;
          v51 = v70;
        }
        ++v69;
        v50 = v49 + v50;
        v67 = v52;
      }
      while (v68 != v69);
    }
    else
    {
      v52 = 0;
    }
    if (v52 >= 1)
    {
      v75 = v51 >= (int)v25 && v51 < (int)v26;
      v76 = !v75 || v52 + v46 <= v28;
      if (!v76 && v46 < v29)
      {
        v78 = v46 <= v28 ? v28 : v46;
        v79 = v46 >= v28 ? 0 : v46 - v28;
        v80 = v52 + v79 + v78;
        v81 = v80 >= v29 ? v29 : v80;
        if ((aal_insert_span(a1, (unsigned __int16 *)&v122[16 * (v51 - (int)v25)], v78, v81) & 1) == 0)
          goto LABEL_108;
      }
    }
LABEL_32:
    ++v30;
    v31 = (__int128 *)((char *)v31 + 40);
    if (v30 == v123)
      goto LABEL_104;
  }
  if (v37 > v39)
  {
    v53 = v130;
    v129 = v131;
    v130 = v131;
    v131 = v53;
    v39 = *((double *)&v130 + 1);
    v37 = *((double *)&v53 + 1);
    v36 = *((double *)&v53 + 1);
  }
  v54 = v37 + 0.5;
  v55 = vcvtms_s32_f32(v54);
  v56 = v39 + 0.5;
  v57 = vcvtms_s32_f32(v56);
  v58 = v40 / v41;
  if (v41 == 0.0)
    v59 = 0.0;
  else
    v59 = v58;
  if ((int)(v57 - *(char *)(a1 + 240)) < v55)
    goto LABEL_32;
  v60 = v36 + ((double)v55 - v37) * v59 + 0.5;
  v61 = v55;
  v62 = (unsigned __int16 *)&v122[16 * v55 + -16 * v25];
  v63 = ~v57 + v55 + *(unsigned __int8 *)(a1 + 240);
  while (1)
  {
    if (v61 >= v25 && v61 < v26)
    {
      v64 = vcvtms_s32_f32(v60);
      v65 = v28 > v64 || v29 <= v64;
      if (!v65 && (aal_insert_span(a1, v62, v64, v64 + 1) & 1) == 0)
        break;
    }
    ++v61;
    v60 = v59 + v60;
    v62 += 8;
    if (__CFADD__(v63++, 1))
      goto LABEL_32;
  }
LABEL_108:
  v24 = "ERROR -- shape allocation error";
LABEL_109:
  puts(v24);
  return 0;
}

uint64_t aal_insert_span(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  int v8;
  __int16 *v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned __int16 v36;
  __int128 v37;

  v37 = 0uLL;
  v8 = *a2;
  if ((v8 & 0x8000) != 0)
    goto LABEL_21;
  v9 = (__int16 *)(a2 + 4);
  if (v8 == 1)
  {
    v11 = *v9;
    if (v11 <= a4)
    {
      v26 = (__int16)a2[5];
      if (v26 >= a3)
      {
        if (v11 > a3)
          *v9 = a3;
        if (v26 >= a4)
          return 1;
        goto LABEL_49;
      }
      a2[6] = a3;
      a2[7] = a4;
    }
    else
    {
      *((_DWORD *)a2 + 3) = *((_DWORD *)a2 + 2);
      a2[4] = a3;
      a2[5] = a4;
    }
    *a2 = 2;
    return 1;
  }
  if (!*a2)
  {
    a2[4] = a3;
    a2[5] = a4;
LABEL_5:
    result = 1;
    *a2 = 1;
    return result;
  }
  v12 = *v9;
  if (v12 > a4)
    goto LABEL_12;
  v13 = (__int16)a2[7];
  if (v13 < a3)
    goto LABEL_12;
  v14 = (__int16)a2[5];
  v15 = (__int16)a2[6];
  if (v14 >= a3)
  {
    if (v15 <= a4)
    {
      v36 = a2[7];
      if (v12 > a3)
        *v9 = a3;
      if (v13 < a4)
      {
        a2[7] = a4;
        v36 = a4;
      }
      a2[5] = v36;
      goto LABEL_5;
    }
    if (v12 > a3)
      *v9 = a3;
    if (v14 >= a4)
      return 1;
LABEL_49:
    a2[5] = a4;
    return 1;
  }
  if (v15 <= a4)
  {
    if (v15 > a3)
      a2[6] = a3;
    if (v13 < a4)
      a2[7] = a4;
    return 1;
  }
LABEL_12:
  *(_BYTE *)(a1 + 232) = 1;
  v37 = *(_OWORD *)a2;
  *a2 = -1;
  *((_QWORD *)a2 + 1) = 0;
  if ((__int16)v37 < 1)
  {
LABEL_21:
    v21 = *((_QWORD *)a2 + 1);
    if (!v21)
    {
      result = (uint64_t)allocate_span((_QWORD *)a1);
      if (!result)
        return result;
      v24 = result;
      *(_DWORD *)(result + 8) = a3;
      *(_DWORD *)(result + 12) = a4;
      *(_QWORD *)result = 0;
LABEL_32:
      result = 1;
      *((_QWORD *)a2 + 1) = v24;
      return result;
    }
    if (*(_QWORD *)v21)
    {
      v22 = *(_DWORD *)(v21 + 12);
      if (v22 < a3)
      {
        while (1)
        {
          v23 = (uint64_t *)v21;
          v21 = *(_QWORD *)v21;
          if (!v21)
            break;
          v22 = *(_DWORD *)(v21 + 12);
          if (v22 >= a3)
            goto LABEL_37;
        }
LABEL_38:
        result = (uint64_t)allocate_span((_QWORD *)a1);
        if (!result)
          return result;
        *(_DWORD *)(result + 8) = a3;
        *(_DWORD *)(result + 12) = a4;
        if (v23)
        {
          *(_QWORD *)result = *v23;
          *v23 = result;
        }
        else
        {
          *(_QWORD *)result = v21;
          *((_QWORD *)a2 + 1) = result;
        }
        return 1;
      }
      v23 = 0;
LABEL_37:
      v27 = *(_DWORD *)(v21 + 8);
      if (v27 > a4)
        goto LABEL_38;
      if (v27 == a4)
      {
LABEL_42:
        *(_DWORD *)(v21 + 8) = a3;
        return 1;
      }
      if (v22 >= a4)
      {
        if (v27 <= a3)
          return 1;
        goto LABEL_42;
      }
      v30 = (uint64_t *)v21;
      do
      {
        v31 = v30;
        v30 = (uint64_t *)*v30;
      }
      while (v30 && *((_DWORD *)v30 + 2) <= a4);
      v32 = *(_QWORD **)v21;
      if (v30 != *(uint64_t **)v21)
      {
        if (v27 > a3)
          *(_DWORD *)(v21 + 8) = a3;
        v33 = *((_DWORD *)v31 + 3);
        if (v33 <= a4)
          v33 = a4;
        *(_DWORD *)(v21 + 12) = v33;
        *(_QWORD *)v21 = v30;
        *v31 = 0;
        v34 = *(_QWORD **)(a1 + 216);
        do
        {
          v35 = v32;
          v32 = (_QWORD *)*v32;
          *v35 = v34;
          v34 = v35;
        }
        while (v32);
        *(_QWORD *)(a1 + 216) = v35;
        return 1;
      }
      if (v27 >= a3)
        *(_DWORD *)(v21 + 8) = a3;
LABEL_85:
      *(_DWORD *)(v21 + 12) = a4;
      return 1;
    }
    v25 = *(_DWORD *)(v21 + 8);
    if (v25 > a4)
    {
      result = (uint64_t)allocate_span((_QWORD *)a1);
      if (!result)
        return result;
      v24 = result;
      *(_DWORD *)(result + 8) = a3;
      *(_DWORD *)(result + 12) = a4;
      *(_QWORD *)result = v21;
      goto LABEL_32;
    }
    v28 = *(_DWORD *)(v21 + 12);
    if (v28 < a3)
    {
      result = (uint64_t)allocate_span((_QWORD *)a1);
      if (result)
      {
        v29 = (_QWORD *)result;
        *(_DWORD *)(result + 8) = a3;
        *(_DWORD *)(result + 12) = a4;
        *(_QWORD *)v21 = result;
        result = 1;
        *v29 = 0;
      }
      return result;
    }
    if (v25 > a3)
      *(_DWORD *)(v21 + 8) = a3;
    if (v28 < a4)
      goto LABEL_85;
    return 1;
  }
  v16 = 0;
  v17 = (unsigned __int16)v37;
  v18 = (__int16 *)((unint64_t)&v37 | 0xA);
  while (1)
  {
    result = (uint64_t)allocate_span((_QWORD *)a1);
    if (!result)
      return result;
    v19 = *v18;
    *(_DWORD *)(result + 8) = *(v18 - 1);
    *(_DWORD *)(result + 12) = v19;
    *(_QWORD *)result = 0;
    if (v16)
      v20 = v16;
    else
      v20 = (uint64_t *)(a2 + 4);
    if (!v16)
      v16 = (uint64_t *)result;
    *v20 = result;
    v18 += 2;
    if (!--v17)
      goto LABEL_21;
  }
}

_BYTE *aa_shape_size_check(_BYTE *a1, void **a2, int *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _BYTE *v6;
  uint64_t v7;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a3;
  if (((uint64_t)(*a4 - (_QWORD)*a2) >> 2) + 5 > v7)
  {
    v14 = (8 * v7 + 511) & 0xFFFFFFFFFFFFFE00;
    if (v6 == a1)
    {
      v16 = malloc_type_realloc(0, v14, 0x7492344AuLL);
      if (!v16)
        return 0;
      v15 = v16;
      memmove(v16, a1, 4 * *a3);
    }
    else
    {
      v15 = malloc_type_realloc(v6, v14, 0x7492344AuLL);
      if (!v15)
        return 0;
    }
    *a3 = 2 * v7;
    if (v15 != v6)
    {
      v17 = (v15 - v6) >> 2;
      *a2 = v15;
      *a4 += 4 * v17;
      *a5 += 4 * v17;
      if (*a6)
        *a6 += 4 * v17;
      return v15;
    }
  }
  return v6;
}

_QWORD *free_all_spans(_QWORD *a1)
{
  _QWORD *result;

  result = (_QWORD *)a1[28];
  if (result)
  {
    while (*result)
    {
      a1[28] = *result;
      free(result);
      result = (_QWORD *)a1[28];
    }
    a1[25] = result + 1;
    a1[26] = result + 513;
    a1[27] = 0;
  }
  return result;
}

_QWORD *allocate_span(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)a1[25];
  if ((unint64_t)result >= a1[26])
  {
    result = (_QWORD *)a1[27];
    if (result)
    {
      a1[27] = *result;
    }
    else
    {
      result = malloc_type_malloc(0x1008uLL, 0x1020040EF3C788CuLL);
      if (result)
      {
        v3 = result++;
        *v3 = a1[28];
        a1[28] = v3;
        a1[25] = v3 + 3;
        a1[26] = v3 + 513;
      }
    }
  }
  else
  {
    a1[25] = result + 2;
  }
  return result;
}

float64x2_t aal_stroke_begin(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  if (a2)
  {
    v2 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 236)), 0);
    v3 = vsubq_f64(*a2, v2);
    result = vaddq_f64(a2[1], v2);
    *a2 = v3;
    a2[1] = result;
  }
  return result;
}

void aal_stroke_iterate(uint64_t a1, int a2, double *a3, float64x2_t a4)
{
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  int v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  float v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  float v26;
  double v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  int v49;
  double v50;
  double v51;
  double v52;
  int v54;
  BOOL v55;
  float v56;
  float v57;
  float v58;
  float v59;
  double v60;
  double v61;
  int v62;
  double v63;
  double v64;
  double v65;
  float v66;
  double v67;
  double v68;
  float v69;
  double v70;
  double v71;
  float v72;
  double v73;
  double v74;
  float v75;
  double v76;
  double v77;
  float v78;
  double v79;
  float v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  BOOL v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int v111;
  double v112;
  double v113;
  int v117;
  BOOL v118;
  float v119;
  float v120;
  float v121;
  float v122;
  double v123;
  double v124;
  int v125;
  double v126;
  int v127;
  double v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  double v134;
  double v135;
  double v136;
  float v137;
  float v138;
  float v139;
  double v140;
  int v141;
  float v142;
  double v143;
  float v144;
  float v145;
  float v146;
  BOOL v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  double v156;
  float v157;
  uint64_t v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float64x2_t v163;
  _BYTE v164[1536];
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case -3:
      v5 = *a3;
      if (*a3 <= 3.40282347e38)
      {
        v14 = v5 < -3.40282347e38;
        v6 = v5;
        if (v14)
          v6 = -3.4028e38;
      }
      else
      {
        v6 = 3.4028e38;
      }
      v126 = a3[1];
      if (v126 > 3.40282347e38)
      {
        v127 = 2139095039;
LABEL_129:
        v131 = *(float *)&v127;
        goto LABEL_144;
      }
      if (v126 < -3.40282347e38)
      {
        v127 = -8388609;
        goto LABEL_129;
      }
      v131 = v126;
LABEL_144:
      v140 = a3[2];
      if (v140 > 3.40282347e38)
      {
        v141 = 2139095039;
LABEL_148:
        v142 = *(float *)&v141;
        goto LABEL_150;
      }
      if (v140 < -3.40282347e38)
      {
        v141 = -8388609;
        goto LABEL_148;
      }
      v142 = v140;
LABEL_150:
      v143 = a3[3];
      if (v143 <= 3.40282347e38)
      {
        v144 = -3.4028e38;
        v14 = v143 < -3.40282347e38;
        v145 = v143;
        if (!v14)
          v144 = v145;
      }
      else
      {
        v144 = 3.4028e38;
      }
      *(_DWORD *)(a1 + 48) = 0;
      v146 = *(float *)(a1 + 144);
      v147 = v146 == 0.0;
      v148 = v146 * v6;
      v149 = v146 * v131;
      v150 = v146 * v142;
      v151 = v146 * v144;
      if (v147)
        v152 = v6;
      else
        v152 = v148;
      if (v147)
        v153 = v131;
      else
        v153 = v149;
      if (v147)
        v154 = v142;
      else
        v154 = v150;
      if (v147)
        v155 = v144;
      else
        v155 = v151;
      v156 = v153;
      *(double *)a1 = v152;
      *(double *)(a1 + 8) = v153;
      *(double *)(a1 + 16) = v152;
      *(double *)(a1 + 24) = v153;
      if (v152 == v154 && v153 == v155)
      {
        v157 = fabsf(*(float *)(a1 + 236));
        if (v152 > (float)(*(float *)(a1 + 104) - v157)
          && v152 < (float)(v157 + *(float *)(a1 + 112))
          && v153 > (float)(*(float *)(a1 + 108) - v157)
          && v153 < (float)(v157 + *(float *)(a1 + 116)))
        {
          v158 = aal_new_edge(a1);
          if (v158)
          {
            *(double *)v158 = (float)(v152 - (float)(v157 * 0.4));
            *(double *)(v158 + 8) = v156;
            *(double *)(v158 + 16) = (float)(v152 + (float)(v157 * 0.4));
            *(double *)(v158 + 24) = v156;
            *(_DWORD *)(v158 + 32) = 0;
            if (v152 < *(float *)(a1 + 52))
            {
              v159 = *(float *)(a1 + 104);
              if (v152 >= v159)
                v159 = v152;
              *(float *)(a1 + 52) = v159;
            }
            if (v152 > *(float *)(a1 + 60))
            {
              v160 = *(float *)(a1 + 112);
              if (v152 <= v160)
                v160 = v152;
              *(float *)(a1 + 60) = v160;
            }
            if (v153 < *(float *)(a1 + 56))
            {
              v161 = *(float *)(a1 + 108);
              if (v153 >= v161)
                v161 = v153;
              *(float *)(a1 + 56) = v161;
            }
            if (v153 > *(float *)(a1 + 64))
            {
              v162 = *(float *)(a1 + 116);
              if (v153 <= v162)
                v162 = v153;
              *(float *)(a1 + 64) = v162;
            }
          }
        }
      }
      else
      {
        aal_add_point(a1, v154, v153);
        aal_add_point(a1, v154, v155);
        aal_add_point(a1, v152, v155);
        aal_close(a1, v163);
        *(_DWORD *)(a1 + 48) = 0;
      }
      return;
    case 0:
      v7 = *a3;
      if (*a3 <= 3.40282347e38)
      {
        v14 = v7 < -3.40282347e38;
        v8 = v7;
        if (v14)
          v8 = -3.4028e38;
      }
      else
      {
        v8 = 3.4028e38;
      }
      v128 = a3[1];
      if (v128 <= 3.40282347e38)
      {
        v129 = -3.4028e38;
        v14 = v128 < -3.40282347e38;
        v132 = v128;
        if (!v14)
          v129 = v132;
      }
      else
      {
        v129 = 3.4028e38;
      }
      *(_DWORD *)(a1 + 48) = 0;
      v133 = *(float *)(a1 + 144);
      if (v133 == 0.0)
        v133 = 1.0;
      v134 = (float)(v8 * v133);
      v135 = (float)(v129 * v133);
      *(double *)a1 = v134;
      *(double *)(a1 + 8) = v135;
      *(double *)(a1 + 16) = v134;
      *(double *)(a1 + 24) = v135;
      return;
    case 1:
      v9 = *a3;
      if (*a3 > 3.40282347e38)
      {
        v10 = 2139095039;
LABEL_126:
        v130 = *(float *)&v10;
        goto LABEL_136;
      }
      if (v9 < -3.40282347e38)
      {
        v10 = -8388609;
        goto LABEL_126;
      }
      v130 = v9;
LABEL_136:
      v136 = a3[1];
      if (v136 <= 3.40282347e38)
      {
        v137 = -3.4028e38;
        v14 = v136 < -3.40282347e38;
        v138 = v136;
        if (!v14)
          v137 = v138;
      }
      else
      {
        v137 = 3.4028e38;
      }
      v139 = *(float *)(a1 + 144);
      if (v139 == 0.0)
        v139 = 1.0;
      aal_add_point(a1, v130 * v139, v137 * v139);
      return;
    case 2:
      v11 = *a3;
      v12 = 3.40282347e38;
      v13 = 3.40282347e38;
      if (*a3 <= 3.40282347e38)
      {
        v14 = v11 < -3.40282347e38;
        v15 = v11;
        v16 = v15;
        if (v14)
          v13 = -3.40282347e38;
        else
          v13 = v16;
      }
      v17 = a3[1];
      v18 = 3.40282347e38;
      if (v17 <= 3.40282347e38)
      {
        v14 = v17 < -3.40282347e38;
        v19 = v17;
        v20 = v19;
        if (v14)
          v18 = -3.40282347e38;
        else
          v18 = v20;
      }
      v21 = a3[2];
      v22 = 3.40282347e38;
      if (v21 <= 3.40282347e38)
      {
        v14 = v21 < -3.40282347e38;
        v23 = v21;
        v24 = v23;
        if (v14)
          v22 = -3.40282347e38;
        else
          v22 = v24;
      }
      v25 = a3[3];
      if (v25 <= 3.40282347e38)
      {
        v14 = v25 < -3.40282347e38;
        v26 = v25;
        v27 = v26;
        if (v14)
          v12 = -3.40282347e38;
        else
          v12 = v27;
      }
      v28 = *(float *)(a1 + 144);
      v29 = *(float *)(a1 + 136) * 16.0;
      v30 = *(float *)(a1 + 140) * 16.0;
      v31 = 0.00390625;
      if (v29 >= 0.00390625)
      {
        v31 = *(float *)(a1 + 136) * 16.0;
        if (v29 > 262144.0)
          v31 = 262144.0;
      }
      v32 = v28;
      v33 = 0.00390625;
      if (v30 >= 0.00390625)
      {
        v33 = *(float *)(a1 + 140) * 16.0;
        if (v30 > 262144.0)
          v33 = 262144.0;
      }
      v34 = 0;
      v35 = *(double *)a1;
      v36 = *(double *)(a1 + 8);
      v37 = fabsf(*(float *)(a1 + 236));
      v38 = *(float *)(a1 + 104) - v37;
      v39 = *(float *)(a1 + 108) - v37;
      v40 = v37 + *(float *)(a1 + 112);
      v41 = v37 + *(float *)(a1 + 116);
      v55 = v28 == 0.0;
      v42 = v13 * v32;
      v43 = v18 * v32;
      v44 = v22 * v32;
      v45 = v12 * v32;
      if (!v55)
      {
        v13 = v42;
        v22 = v44;
        v18 = v43;
        v12 = v45;
      }
      v46 = (double *)v164;
      while (2)
      {
        if (v34 > 22)
          goto LABEL_49;
        v47 = v18 + v18;
        v48 = v13 + v13;
        v49 = (v35 > v40) | (4 * (v35 < v38)) | (2 * (v36 > v41)) | (8 * (v36 < v39));
        while (2)
        {
          v50 = v22;
          v51 = v12;
          v52 = v35 + v22;
          if ((v52 - v48) * (v52 - v48) <= v31 && (v36 + v51 - v47) * (v36 + v51 - v47) <= v33)
          {
            v12 = v51;
LABEL_49:
            v56 = v22;
            v57 = v12;
            aal_add_point(a1, v56, v57);
            if (!v34)
              return;
          }
          else
          {
            if (!v49
              || ((v54 = (v22 > v40) | (4 * (v22 < v38)) | (2 * (v51 > v41)) | (8 * (v51 < v39))) != 0
                ? (v55 = v49 == v54)
                : (v55 = 0),
                  !v55 || v49 != ((v13 > v40) | (4 * (v13 < v38)) | (2 * (v18 > v41)) | (8 * (v18 < v39)))))
            {
              v46[4] = v22;
              v46[5] = v51;
              v22 = (v48 + v52) * 0.25;
              v12 = (v47 + v36 + v51) * 0.25;
              *v46 = v22;
              v46[1] = v12;
              v46[2] = (v13 + v50) * 0.5;
              v46[3] = (v18 + v51) * 0.5;
              v46 += 6;
              ++v34;
              v13 = (v35 + v13) * 0.5;
              v18 = (v36 + v18) * 0.5;
              v48 = v13 + v13;
              v47 = v18 + v18;
              if (v34 == 23)
                goto LABEL_49;
              continue;
            }
            v58 = v22;
            v59 = v51;
            v60 = v58;
            v61 = v59;
            *(double *)a1 = v60;
            *(double *)(a1 + 8) = v61;
            v62 = *(_DWORD *)(a1 + 48);
            if (!v62)
            {
              *(double *)(a1 + 32) = v60;
              *(double *)(a1 + 40) = v61;
            }
            *(_DWORD *)(a1 + 48) = v62 + 1;
            if (!v34)
              return;
          }
          break;
        }
        v35 = *(v46 - 6);
        v36 = *(v46 - 5);
        v46 -= 6;
        v13 = v46[2];
        v18 = v46[3];
        --v34;
        v22 = v46[4];
        v12 = v46[5];
        continue;
      }
    case 3:
      v63 = *a3;
      v64 = 3.40282347e38;
      v65 = 3.40282347e38;
      if (*a3 <= 3.40282347e38)
      {
        v65 = -3.40282347e38;
        if (v63 >= -3.40282347e38)
        {
          v66 = v63;
          v65 = v66;
        }
      }
      v67 = a3[1];
      v68 = 3.40282347e38;
      if (v67 <= 3.40282347e38)
      {
        v68 = -3.40282347e38;
        if (v67 >= -3.40282347e38)
        {
          v69 = v67;
          v68 = v69;
        }
      }
      v70 = a3[2];
      v71 = 3.40282347e38;
      if (v70 <= 3.40282347e38)
      {
        v71 = -3.40282347e38;
        if (v70 >= -3.40282347e38)
        {
          v72 = v70;
          v71 = v72;
        }
      }
      v73 = a3[3];
      v74 = 3.40282347e38;
      if (v73 <= 3.40282347e38)
      {
        v74 = -3.40282347e38;
        if (v73 >= -3.40282347e38)
        {
          v75 = v73;
          v74 = v75;
        }
      }
      v76 = a3[4];
      v77 = 3.40282347e38;
      if (v76 <= 3.40282347e38)
      {
        v77 = -3.40282347e38;
        if (v76 >= -3.40282347e38)
        {
          v78 = v76;
          v77 = v78;
        }
      }
      v79 = a3[5];
      if (v79 <= 3.40282347e38)
      {
        v64 = -3.40282347e38;
        if (v79 >= -3.40282347e38)
        {
          v80 = v79;
          v64 = v80;
        }
      }
      v81 = *(float *)(a1 + 144);
      v82 = *(float *)(a1 + 136) * 1.77777778;
      v83 = *(float *)(a1 + 140) * 1.77777778;
      v84 = 0.00390625;
      if (v82 >= 0.00390625)
      {
        v84 = *(float *)(a1 + 136) * 1.77777778;
        if (v82 > 262144.0)
          v84 = 262144.0;
      }
      v85 = v81;
      v86 = 0.00390625;
      if (v83 >= 0.00390625)
      {
        v86 = *(float *)(a1 + 140) * 1.77777778;
        if (v83 > 262144.0)
          v86 = 262144.0;
      }
      v87 = 0;
      v88 = *(double *)a1;
      v89 = *(double *)(a1 + 8);
      v90 = fabsf(*(float *)(a1 + 236));
      v91 = *(float *)(a1 + 104) - v90;
      v92 = *(float *)(a1 + 108) - v90;
      v93 = v90 + *(float *)(a1 + 112);
      v94 = v90 + *(float *)(a1 + 116);
      v95 = v81 == 0.0;
      v96 = v65 * v85;
      v97 = v68 * v85;
      v98 = v71 * v85;
      v99 = v74 * v85;
      v100 = v77 * v85;
      v101 = v64 * v85;
      if (v95)
        v96 = v65;
      else
        v71 = v98;
      if (v95)
        v102 = v77;
      else
        v102 = v100;
      if (!v95)
      {
        v68 = v97;
        v74 = v99;
        v64 = v101;
      }
      v103 = (double *)v164;
      v104 = 0.125;
      while (2)
      {
        if (v87 > 22)
          goto LABEL_109;
        v105 = v68 + v64;
        v106 = v96 + v102;
        v107 = v74 + v74;
        v108 = v71 + v71;
        v109 = v68 + v68;
        v110 = v96 + v96;
        v111 = (v88 > v93) | (4 * (v88 < v91)) | (2 * (v89 > v94)) | (8 * (v89 < v92));
LABEL_90:
        v112 = v88 + v71;
        v113 = v89 + v74;
        if ((v88 + v71 - v110) * (v88 + v71 - v110) <= v84
          && (v89 + v74 - v109) * (v89 + v74 - v109) <= v86
          && (v106 - v108) * (v106 - v108) <= v84
          && (v105 - v107) * (v105 - v107) <= v86)
        {
LABEL_109:
          v119 = v102;
          v120 = v64;
          aal_add_point(a1, v119, v120);
          v104 = 0.125;
          if (!v87)
            return;
LABEL_110:
          v88 = *(v103 - 8);
          v89 = *(v103 - 7);
          v103 -= 8;
          v96 = v103[2];
          v68 = v103[3];
          --v87;
          v71 = v103[4];
          v74 = v103[5];
          v102 = v103[6];
          v64 = v103[7];
          continue;
        }
        break;
      }
      if (!v111
        || ((v117 = (v102 > v93) | (4 * (v102 < v91)) | (2 * (v64 > v94)) | (8 * (v64 < v92))) != 0
          ? (v118 = v111 == v117)
          : (v118 = 0),
            !v118
         || v111 != ((v96 > v93) | (4 * (v96 < v91)) | (2 * (v68 > v94)) | (8 * (v68 < v92)))
         || v111 != ((v71 > v93) | (4 * (v71 < v91)) | (2 * (v74 > v94)) | (8 * (v74 < v92)))))
      {
        v103[6] = v102;
        v103[7] = v64;
        v103[4] = (v71 + v102) * 0.5;
        v103[5] = (v74 + v64) * 0.5;
        v102 = (v108 + v110 + v112 + v106) * v104;
        v64 = (v107 + v109 + v113 + v105) * v104;
        v103[2] = (v108 + v106) * 0.25;
        v103[3] = (v107 + v105) * 0.25;
        v71 = (v110 + v112) * 0.25;
        v74 = (v109 + v113) * 0.25;
        *v103 = v102;
        v103[1] = v64;
        v103 += 8;
        v96 = (v88 + v96) * 0.5;
        v68 = (v89 + v68) * 0.5;
        ++v87;
        v110 = v96 + v96;
        v109 = v68 + v68;
        v108 = v71 + v71;
        v107 = v74 + v74;
        v106 = v96 + v102;
        v105 = v68 + v64;
        if (v87 == 23)
          goto LABEL_109;
        goto LABEL_90;
      }
      v121 = v102;
      v122 = v64;
      v123 = v121;
      v124 = v122;
      *(double *)a1 = v123;
      *(double *)(a1 + 8) = v124;
      v125 = *(_DWORD *)(a1 + 48);
      if (!v125)
      {
        *(double *)(a1 + 32) = v123;
        *(double *)(a1 + 40) = v124;
      }
      *(_DWORD *)(a1 + 48) = v125 + 1;
      if (v87)
        goto LABEL_110;
      return;
    case 4:
      aal_close(a1, a4);
      return;
    default:
      abort();
  }
}

uint64_t CMYKf_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 152) - 20;
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = (*(_DWORD *)(result + 256) - 1);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + v11 + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 4;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v21 | v86;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v17 | v86;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    v8 += 20;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = bswap32(*v37);
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = bswap32(*v36);
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = bswap32(*v36);
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = bswap32(*v47);
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = bswap32(*v50);
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = bswap32(*v36);
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  v8 += 20;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = bswap32(*v82);
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    v8 += 20;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

float CMYK32(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = _blt_float[BYTE3(a2)];
  *(_DWORD *)(a1 + 4) = _blt_float[BYTE2(a2)];
  *(_DWORD *)(a1 + 8) = _blt_float[BYTE1(a2)];
  *(_DWORD *)(a1 + 12) = _blt_float[a2];
  result = *(float *)&_blt_float[BYTE4(a2)];
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMYKf_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 152) - 20;
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = (*(_DWORD *)(result + 256) - 1);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + v11 + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 4;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v21 | v86;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v17 | v86;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    v8 += 20;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = *v37;
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = *v36;
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = *v36;
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = *v47;
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = *v50;
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = *v36;
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  v8 += 20;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = *v82;
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    v8 += 20;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

uint64_t CMYKf_sample_CMYK64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int64_t v51;
  unsigned __int16 *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int16 *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  char *v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  char *v74;
  unsigned __int16 *v75;
  unint64_t v76;
  unsigned int v77;
  unsigned __int16 *v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  int64_t v87;
  unsigned __int16 *v88;
  unint64_t v89;
  unsigned int v90;
  unsigned __int16 *v91;
  unsigned int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  float *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v7 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 176);
  v107 = *(_QWORD *)(result + 80);
  v108 = *(_QWORD *)(result + 88);
  v120 = *(_QWORD *)(result + 120);
  v121 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 152) - 20;
  v111 = *(_QWORD *)(result + 144) - 1;
  v10 = *(_DWORD *)(result + 260) - 1;
  v118 = *(_DWORD *)(result + 24);
  v115 = *(_QWORD *)(result + 32);
  v11 = *(_DWORD *)(result + 256) - 1;
  v106 = *(_DWORD *)(result + 188);
  v113 = *(_DWORD *)(result + 28);
  v114 = v7 + (v10 * v113) + 2 * v11;
  v119 = v115 + (v10 * v118) + 8 * v11 - 8;
  v109 = *(_QWORD *)(result + 72);
  v110 = *(_QWORD *)(result + 64);
  v116 = v7;
  v117 = result;
  while (1)
  {
    if (a3 >= v109)
    {
      v17 = v9;
      if (a3 <= v108)
      {
        v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        v25 = a3;
        v15 = a4;
        v16 = v110;
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v108;
        v21 = v20 - a3 + (v19 >> 1);
        v15 = a4;
        v16 = v110;
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v22 | v106;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v109 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v110;
      v17 = v9;
      if (v14 < 1)
        goto LABEL_37;
      if (v14 >= v12)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v24 = v18 | v106;
      v25 = v13 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v107)
      {
        v30 = ((unint64_t)a2 >> 26) & 0x3C;
        v29 = a2;
      }
      else
      {
        v31 = *(_QWORD *)(result + 192);
        v32 = *(_QWORD *)(result + 200) + v107;
        v33 = v32 - a2 + (v31 >> 1);
        if (v33 < 1)
          goto LABEL_37;
        if (v33 < v31)
          v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v106;
        v29 = v32 - 0x1000000;
        v30 = 28;
      }
    }
    else
    {
      v26 = *(_QWORD *)(result + 192);
      v27 = v16 - *(_QWORD *)(result + 200);
      v28 = a2 - v27 + (v26 >> 1);
      if (v28 < 1)
        goto LABEL_37;
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v106;
      v29 = v27 + 0x1000000;
      v30 = 32;
    }
    if (v24 >= 0x400000)
      break;
LABEL_37:
    v43 = v15 - 1;
    a2 += v121;
    a3 += v120;
    v9 = v17 + 20;
    *(_BYTE *)++v111 = 0;
LABEL_38:
    a4 = v43;
    if (!v43)
      return result;
  }
  v34 = v25 >> 32;
  v35 = v29 >> 32;
  v36 = v115 + SHIDWORD(v25) * (uint64_t)v118 + 8 * (v29 >> 32);
  v37 = *(unsigned __int16 **)(result + 32);
  v38 = (unsigned __int16 *)v119;
  if (v119 >= v36)
    v38 = (unsigned __int16 *)v36;
  if (v38 < v37)
    v38 = *(unsigned __int16 **)(result + 32);
  if (v7)
  {
    v39 = v7 + (int)v34 * (uint64_t)v113 + 2 * v35;
    v40 = *(unsigned __int16 **)(result + 40);
    v41 = (unsigned __int16 *)v114;
    v112 = v39;
    if (v114 >= v39)
      v41 = (unsigned __int16 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v42 = v4 & 0xFFFFFFFFFFFF0000 | (bswap32(*v40) >> 16);
  }
  else
  {
    v112 = 0;
    v42 = v4 | 0xFFFF;
  }
  v44 = ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | ((unint64_t)(bswap32(v38[3]) >> 16) << 48) | bswap32(v38[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v38) >> 16);
  if (!v8)
  {
    v47 = v107;
    v48 = v108;
    v46 = v42;
    goto LABEL_101;
  }
  v45 = *(_DWORD *)(v8 + (v30 | v23));
  v46 = v42;
LABEL_45:
  v49 = v45 & 0xF;
  v50 = HIBYTE(v45) & 3;
  switch(v49)
  {
    case 1:
      v75 = (unsigned __int16 *)(v36 + SBYTE1(v45) * (uint64_t)v118);
      if (v119 < (unint64_t)v75)
        v75 = (unsigned __int16 *)v119;
      if (v75 >= v37)
        v37 = v75;
      v76 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      v77 = 0xFFFF;
      if (v7)
      {
        v78 = (unsigned __int16 *)(v112 + SBYTE1(v45) * (uint64_t)v113);
        if (v114 < (unint64_t)v78)
          v78 = (unsigned __int16 *)v114;
        if ((unint64_t)v78 < *(_QWORD *)(result + 40))
          v78 = *(unsigned __int16 **)(result + 40);
        v77 = bswap32(*v78) >> 16;
      }
      v79 = (char *)&interpolate_cmyk64 + 16 * v50;
      v80 = *(_QWORD *)v79;
      v81 = v50 + 1;
      v82 = v44 - ((*(_QWORD *)v79 & v44) >> v81);
      LODWORD(v79) = *((unsigned __int16 *)v79 + 4);
      v83 = v46 - ((v79 & v46) >> v81);
      v84 = v46 & 0xFFFFFFFFFFFF0000;
      v85 = (v80 & v76) >> v81;
      v86 = (v79 & v77) >> v81;
      goto LABEL_99;
    case 2:
      v87 = (unint64_t)HIWORD(v45) << 56;
      v88 = (unsigned __int16 *)(v36 + (v87 >> 53));
      if (v119 < (unint64_t)v88)
        v88 = (unsigned __int16 *)v119;
      if (v88 >= v37)
        v37 = v88;
      v89 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      v90 = 0xFFFF;
      if (v7)
      {
        v91 = (unsigned __int16 *)(v112 + (v87 >> 55));
        if (v114 < (unint64_t)v91)
          v91 = (unsigned __int16 *)v114;
        if ((unint64_t)v91 < *(_QWORD *)(result + 40))
          v91 = *(unsigned __int16 **)(result + 40);
        v90 = bswap32(*v91) >> 16;
      }
      v92 = (v45 >> 28) & 3;
      v93 = (char *)&interpolate_cmyk64 + 16 * v92;
      v94 = *(_QWORD *)v93;
      LOBYTE(v92) = v92 + 1;
      v82 = v44 - ((*(_QWORD *)v93 & v44) >> v92);
      LODWORD(v93) = *((unsigned __int16 *)v93 + 4);
      v83 = v46 - ((v93 & v46) >> v92);
      v84 = v46 & 0xFFFFFFFFFFFF0000;
      v85 = (v94 & v89) >> v92;
      v86 = (v93 & v90) >> v92;
LABEL_99:
      v44 = v82 + v85;
      v46 = v84 | (unsigned __int16)(v83 + v86);
      break;
    case 3:
      v51 = (unint64_t)HIWORD(v45) << 56;
      v52 = (unsigned __int16 *)(v36 + (v51 >> 53));
      if (v119 < (unint64_t)v52)
        v52 = (unsigned __int16 *)v119;
      if (v52 < v37)
        v52 = v37;
      v53 = ((unint64_t)(bswap32(v52[2]) >> 16) << 32) | ((unint64_t)(bswap32(v52[3]) >> 16) << 48) | bswap32(v52[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v52) >> 16);
      v54 = v36 + SBYTE1(v45) * (uint64_t)v118;
      if (v119 >= v54)
        v55 = (unsigned __int16 *)(v36 + SBYTE1(v45) * (uint64_t)v118);
      else
        v55 = (unsigned __int16 *)v119;
      if (v55 < v37)
        v55 = v37;
      v56 = ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | ((unint64_t)(bswap32(v55[3]) >> 16) << 48) | bswap32(v55[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v55) >> 16);
      v57 = (unsigned __int16 *)(v54 + (v51 >> 53));
      if (v119 < (unint64_t)v57)
        v57 = (unsigned __int16 *)v119;
      if (v57 >= v37)
        v37 = v57;
      v58 = ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | ((unint64_t)(bswap32(v37[3]) >> 16) << 48) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16);
      v59 = 0xFFFF;
      v60 = 0xFFFF;
      v61 = 0xFFFF;
      if (v7)
      {
        v62 = (unsigned __int16 *)(v112 + (v51 >> 55));
        v63 = *(_QWORD *)(result + 40);
        if (v114 < (unint64_t)v62)
          v62 = (unsigned __int16 *)v114;
        if ((unint64_t)v62 < v63)
          v62 = *(unsigned __int16 **)(result + 40);
        v61 = bswap32(*v62) >> 16;
        v64 = v112 + SBYTE1(v45) * (uint64_t)v113;
        if (v114 >= v64)
          v65 = (unsigned __int16 *)(v112 + SBYTE1(v45) * (uint64_t)v113);
        else
          v65 = (unsigned __int16 *)v114;
        if ((unint64_t)v65 < v63)
          v65 = *(unsigned __int16 **)(result + 40);
        v60 = bswap32(*v65) >> 16;
        v66 = (unsigned __int16 *)(v64 + (v51 >> 55));
        if (v114 < (unint64_t)v66)
          v66 = (unsigned __int16 *)v114;
        if ((unint64_t)v66 < v63)
          v66 = *(unsigned __int16 **)(result + 40);
        v59 = bswap32(*v66) >> 16;
      }
      v67 = (char *)&interpolate_cmyk64 + 16 * v50;
      v68 = *(_QWORD *)v67;
      v69 = v50 + 1;
      v70 = v44 - ((*(_QWORD *)v67 & v44) >> v69);
      LODWORD(v67) = *((unsigned __int16 *)v67 + 4);
      v71 = v46 - ((v67 & v46) >> v69) + ((v67 & v60) >> v69);
      v72 = v53 - ((v68 & v53) >> v69) + ((v68 & v58) >> v69);
      v73 = (v45 >> 28) & 3;
      v74 = (char *)&interpolate_cmyk64 + 16 * v73;
      LOBYTE(v73) = v73 + 1;
      v44 = v70
          + ((v68 & v56) >> v69)
          - (((v70 + ((v68 & v56) >> v69)) & *(_QWORD *)v74) >> v73)
          + ((v72 & *(_QWORD *)v74) >> v73);
      v46 = v46 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)(v71
                                                          - ((unsigned __int16)(v71 & *((_WORD *)v74 + 4)) >> v73)
                                                          + (((v61
                                                             - ((v67 & v61) >> v69)
                                                             + ((v67 & v59) >> v69)) & *((unsigned __int16 *)v74 + 4)) >> v73));
      break;
  }
  v47 = v107;
  v48 = v108;
LABEL_101:
  v95 = 0;
  v96 = (float *)(v17 + 20);
  v105 = v15;
  v97 = v15 - 1;
  a3 += v120;
  v98 = v48 - a3;
  a2 += v121;
  v99 = v47 - a2;
  while (1)
  {
    v9 = (uint64_t)v96;
    v100 = v96;
    v4 = v46;
    v101 = v8;
    CMYK64(v100, v44, v46);
    *(_BYTE *)(v111 + 1 + v95) = v24 >> 22;
    v7 = v116;
    result = v117;
    if (v97 == (_DWORD)v95)
      return result;
    v8 = v101;
    if ((v98 | v99 | (a3 - v109) | (a2 - v110)) < 0)
    {
      v111 += v95 + 1;
      v43 = ~(_DWORD)v95 + v105;
      goto LABEL_38;
    }
    v36 = v115 + SHIDWORD(a3) * (uint64_t)v118 + 8 * (a2 >> 32);
    v37 = *(unsigned __int16 **)(v117 + 32);
    v102 = (unsigned __int16 *)v119;
    if (v119 >= v36)
      v102 = (unsigned __int16 *)(v115 + SHIDWORD(a3) * (uint64_t)v118 + 8 * (a2 >> 32));
    if (v102 < v37)
      v102 = *(unsigned __int16 **)(v117 + 32);
    v17 = v9;
    if (v116)
    {
      v103 = *(unsigned __int16 **)(v117 + 40);
      v104 = v114;
      v112 = v116 + SHIDWORD(a3) * (uint64_t)v113 + 2 * (a2 >> 32);
      if (v114 >= v112)
        v104 = v116 + SHIDWORD(a3) * (uint64_t)v113 + 2 * (a2 >> 32);
      if (v104 >= (unint64_t)v103)
        v103 = (unsigned __int16 *)v104;
      v46 = v4 & 0xFFFFFFFFFFFF0000 | (bswap32(*v103) >> 16);
    }
    else
    {
      v46 = v4 | 0xFFFF;
    }
    v44 = ((unint64_t)(bswap32(v102[2]) >> 16) << 32) | ((unint64_t)(bswap32(v102[3]) >> 16) << 48) | bswap32(v102[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v102) >> 16);
    if (v8)
    {
      v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v111 += v95 + 1;
        v15 = ~(_DWORD)v95 + v105;
        v24 = -1;
        goto LABEL_45;
      }
    }
    ++v95;
    v96 = (float *)(v9 + 20);
    a3 += v120;
    v98 -= v120;
    a2 += v121;
    v99 -= v121;
    v24 = -1;
  }
}

float CMYK64(float *a1, unint64_t a2, __int16 a3)
{
  float result;

  *a1 = *(float *)&_blt_float[a2 + 256] + *(float *)&_blt_float[BYTE1(a2) + 512];
  a1[1] = *(float *)&_blt_float[BYTE2(a2) + 256] + *(float *)&_blt_float[BYTE3(a2) | 0x200];
  a1[2] = *(float *)&_blt_float[BYTE4(a2) + 256] + *(float *)&_blt_float[BYTE5(a2) + 512];
  a1[3] = *(float *)&_blt_float[BYTE6(a2) + 256] + *(float *)&_blt_float[HIBYTE(a2) + 512];
  result = *(float *)&_blt_float[a3 + 256] + *(float *)&_blt_float[HIBYTE(a3) + 512];
  a1[4] = result;
  return result;
}

uint64_t CMYKf_sample_cmyk64(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned __int16 *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  char *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unsigned __int16 *v76;
  char *v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  int64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unsigned __int16 *v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  unint64_t *v100;
  unsigned __int16 *v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v7 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 176);
  v105 = *(_QWORD *)(result + 80);
  v108 = *(_QWORD *)(result + 88);
  v118 = *(_QWORD *)(result + 120);
  v119 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 152) - 20;
  v109 = *(_QWORD *)(result + 144) - 1;
  v10 = *(_DWORD *)(result + 260) - 1;
  v116 = *(_DWORD *)(result + 24);
  v113 = *(_QWORD *)(result + 32);
  v11 = *(_DWORD *)(result + 256) - 1;
  v104 = *(_DWORD *)(result + 188);
  v111 = *(_DWORD *)(result + 28);
  v112 = v7 + (v10 * v111) + 2 * v11;
  v117 = v113 + (v10 * v116) + 8 * v11 - 8;
  v106 = *(_QWORD *)(result + 72);
  v107 = *(_QWORD *)(result + 64);
  v114 = v7;
  v115 = result;
  while (1)
  {
    if (a3 >= v106)
    {
      v17 = v9;
      if (a3 <= v108)
      {
        v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        v25 = a3;
        v15 = a4;
        v16 = v107;
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v108;
        v21 = v20 - a3 + (v19 >> 1);
        v15 = a4;
        v16 = v107;
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v22 | v104;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v106 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v107;
      v17 = v9;
      if (v14 < 1)
        goto LABEL_37;
      if (v14 >= v12)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v24 = v18 | v104;
      v25 = v13 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v105)
      {
        v30 = ((unint64_t)a2 >> 26) & 0x3C;
        v29 = a2;
      }
      else
      {
        v31 = *(_QWORD *)(result + 192);
        v32 = *(_QWORD *)(result + 200) + v105;
        v33 = v32 - a2 + (v31 >> 1);
        if (v33 < 1)
          goto LABEL_37;
        if (v33 < v31)
          v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v104;
        v29 = v32 - 0x1000000;
        v30 = 28;
      }
    }
    else
    {
      v26 = *(_QWORD *)(result + 192);
      v27 = v16 - *(_QWORD *)(result + 200);
      v28 = a2 - v27 + (v26 >> 1);
      if (v28 < 1)
        goto LABEL_37;
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v104;
      v29 = v27 + 0x1000000;
      v30 = 32;
    }
    if (v24 >= 0x400000)
      break;
LABEL_37:
    v43 = v15 - 1;
    a2 += v119;
    a3 += v118;
    v9 = v17 + 20;
    *(_BYTE *)++v109 = 0;
LABEL_38:
    a4 = v43;
    if (!v43)
      return result;
  }
  v34 = v25 >> 32;
  v35 = v29 >> 32;
  v36 = v113 + SHIDWORD(v25) * (uint64_t)v116 + 8 * (v29 >> 32);
  v37 = *(unint64_t **)(result + 32);
  v38 = (unint64_t *)v117;
  if (v117 >= v36)
    v38 = (unint64_t *)v36;
  if (v38 < v37)
    v38 = *(unint64_t **)(result + 32);
  if (v7)
  {
    v39 = v7 + (int)v34 * (uint64_t)v111 + 2 * v35;
    v40 = *(unsigned __int16 **)(result + 40);
    v41 = (unsigned __int16 *)v112;
    v110 = v39;
    if (v112 >= v39)
      v41 = (unsigned __int16 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v42 = v4 & 0xFFFFFFFFFFFF0000 | *v40;
  }
  else
  {
    v110 = 0;
    v42 = v4 | 0xFFFF;
  }
  v44 = *v38;
  if (v8)
  {
    v45 = *(_DWORD *)(v8 + (v30 | v23));
LABEL_44:
    v46 = v45 & 0xF;
    v47 = v45 >> 8;
    v48 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      v73 = (unint64_t *)(v36 + SBYTE1(v45) * (uint64_t)v116);
      if (v117 < (unint64_t)v73)
        v73 = (unint64_t *)v117;
      if (v73 >= v37)
        v37 = v73;
      v74 = *v37;
      v75 = 0xFFFF;
      if (v7)
      {
        v76 = (unsigned __int16 *)(v110 + (char)v47 * (uint64_t)v111);
        if (v112 < (unint64_t)v76)
          v76 = (unsigned __int16 *)v112;
        if ((unint64_t)v76 < *(_QWORD *)(result + 40))
          v76 = *(unsigned __int16 **)(result + 40);
        v75 = *v76;
      }
      v77 = (char *)&interpolate_cmyk64 + 16 * v48;
      v78 = *(_QWORD *)v77;
      v79 = v48 + 1;
      v80 = v44 - ((*(_QWORD *)v77 & v44) >> v79);
      LODWORD(v77) = *((unsigned __int16 *)v77 + 4);
      v81 = v42 - ((v77 & v42) >> v79);
      v82 = v42 & 0xFFFFFFFFFFFF0000;
      v83 = (v78 & v74) >> v79;
      v84 = (v77 & v75) >> v79;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          v49 = (unint64_t)HIWORD(v45) << 56;
          v50 = (unint64_t *)(v36 + (v49 >> 53));
          if (v117 < (unint64_t)v50)
            v50 = (unint64_t *)v117;
          if (v50 < v37)
            v50 = v37;
          v51 = *v50;
          v52 = v36 + SBYTE1(v45) * (uint64_t)v116;
          if (v117 >= v52)
            v53 = (unint64_t *)(v36 + SBYTE1(v45) * (uint64_t)v116);
          else
            v53 = (unint64_t *)v117;
          if (v53 < v37)
            v53 = v37;
          v54 = *v53;
          v55 = (unint64_t *)(v52 + (v49 >> 53));
          if (v117 < (unint64_t)v55)
            v55 = (unint64_t *)v117;
          if (v55 >= v37)
            v37 = v55;
          v56 = *v37;
          v57 = 0xFFFF;
          v58 = 0xFFFF;
          v59 = 0xFFFF;
          if (v7)
          {
            v60 = (unsigned __int16 *)(v110 + (v49 >> 55));
            v61 = *(_QWORD *)(result + 40);
            if (v112 < (unint64_t)v60)
              v60 = (unsigned __int16 *)v112;
            if ((unint64_t)v60 < v61)
              v60 = *(unsigned __int16 **)(result + 40);
            v57 = *v60;
            v62 = v110 + SBYTE1(v45) * (uint64_t)v111;
            if (v112 >= v62)
              v63 = (unsigned __int16 *)(v110 + SBYTE1(v45) * (uint64_t)v111);
            else
              v63 = (unsigned __int16 *)v112;
            if ((unint64_t)v63 < v61)
              v63 = *(unsigned __int16 **)(result + 40);
            v58 = *v63;
            v64 = (unsigned __int16 *)(v62 + (v49 >> 55));
            if (v112 < (unint64_t)v64)
              v64 = (unsigned __int16 *)v112;
            if ((unint64_t)v64 < v61)
              v64 = *(unsigned __int16 **)(result + 40);
            v59 = *v64;
          }
          v65 = (char *)&interpolate_cmyk64 + 16 * v48;
          v66 = *(_QWORD *)v65;
          v67 = v48 + 1;
          v68 = v44 - ((*(_QWORD *)v65 & v44) >> v67);
          LODWORD(v65) = *((unsigned __int16 *)v65 + 4);
          v69 = v42 - ((v65 & v42) >> v67) + ((v65 & v58) >> v67);
          v70 = v51 - ((v66 & v51) >> v67) + ((v66 & v56) >> v67);
          v71 = (v45 >> 28) & 3;
          v72 = (char *)&interpolate_cmyk64 + 16 * v71;
          LOBYTE(v71) = v71 + 1;
          v44 = v68
              + ((v66 & v54) >> v67)
              - (((v68 + ((v66 & v54) >> v67)) & *(_QWORD *)v72) >> v71)
              + ((v70 & *(_QWORD *)v72) >> v71);
          v42 = v42 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)(v69
                                                              - ((unsigned __int16)(v69 & *((_WORD *)v72 + 4)) >> v71)
                                                              + (((v57
                                                                 - ((v65 & v57) >> v67)
                                                                 + ((v65 & v59) >> v67)) & *((unsigned __int16 *)v72 + 4)) >> v71));
        }
        goto LABEL_99;
      }
      v85 = (unint64_t)HIWORD(v45) << 56;
      v86 = (unint64_t *)(v36 + (v85 >> 53));
      if (v117 < (unint64_t)v86)
        v86 = (unint64_t *)v117;
      if (v86 >= v37)
        v37 = v86;
      v87 = *v37;
      v88 = 0xFFFF;
      if (v7)
      {
        v89 = (unsigned __int16 *)(v110 + (v85 >> 55));
        if (v112 < (unint64_t)v89)
          v89 = (unsigned __int16 *)v112;
        if ((unint64_t)v89 < *(_QWORD *)(result + 40))
          v89 = *(unsigned __int16 **)(result + 40);
        v88 = *v89;
      }
      v90 = (v45 >> 28) & 3;
      v91 = (char *)&interpolate_cmyk64 + 16 * v90;
      v92 = *(_QWORD *)v91;
      LOBYTE(v90) = v90 + 1;
      v80 = v44 - ((*(_QWORD *)v91 & v44) >> v90);
      LODWORD(v91) = *((unsigned __int16 *)v91 + 4);
      v81 = v42 - ((v91 & v42) >> v90);
      v82 = v42 & 0xFFFFFFFFFFFF0000;
      v83 = (v92 & v87) >> v90;
      v84 = (v91 & v88) >> v90;
    }
    v44 = v80 + v83;
    v42 = v82 | (unsigned __int16)(v81 + v84);
  }
LABEL_99:
  v93 = 0;
  v94 = (float *)(v17 + 20);
  v103 = v15;
  v95 = v15 - 1;
  a3 += v118;
  v96 = v108 - a3;
  a2 += v119;
  v97 = v105 - a2;
  while (1)
  {
    v9 = (uint64_t)v94;
    v98 = v94;
    v4 = v42;
    v99 = v8;
    CMYK64(v98, v44, v42);
    *(_BYTE *)(v109 + 1 + v93) = v24 >> 22;
    v7 = v114;
    result = v115;
    if (v95 == (_DWORD)v93)
      return result;
    v8 = v99;
    if ((v96 | v97 | (a3 - v106) | (a2 - v107)) < 0)
    {
      v109 += v93 + 1;
      v43 = ~(_DWORD)v93 + v103;
      goto LABEL_38;
    }
    v36 = v113 + SHIDWORD(a3) * (uint64_t)v116 + 8 * (a2 >> 32);
    v37 = *(unint64_t **)(v115 + 32);
    v100 = (unint64_t *)v117;
    if (v117 >= v36)
      v100 = (unint64_t *)(v113 + SHIDWORD(a3) * (uint64_t)v116 + 8 * (a2 >> 32));
    if (v100 < v37)
      v100 = *(unint64_t **)(v115 + 32);
    v17 = v9;
    if (v114)
    {
      v101 = *(unsigned __int16 **)(v115 + 40);
      v102 = v112;
      v110 = v114 + SHIDWORD(a3) * (uint64_t)v111 + 2 * (a2 >> 32);
      if (v112 >= v110)
        v102 = v114 + SHIDWORD(a3) * (uint64_t)v111 + 2 * (a2 >> 32);
      if (v102 >= (unint64_t)v101)
        v101 = (unsigned __int16 *)v102;
      v42 = v4 & 0xFFFFFFFFFFFF0000 | *v101;
    }
    else
    {
      v42 = v4 | 0xFFFF;
    }
    v44 = *v100;
    if (v8)
    {
      v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v109 += v93 + 1;
        v15 = ~(_DWORD)v93 + v103;
        v24 = -1;
        goto LABEL_44;
      }
    }
    ++v93;
    v94 = (float *)(v9 + 20);
    a3 += v118;
    v96 -= v118;
    a2 += v119;
    v97 -= v119;
    v24 = -1;
  }
}

uint64_t CMYKf_sample_WF(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  float v48;
  float v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  float v55;
  unsigned int *v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  float v64;
  float v65;
  unsigned int *v66;
  float v67;
  float v68;
  unsigned int *v69;
  float *v70;
  unsigned int *v71;
  unsigned int *v72;
  float v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  float v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 80);
  v87 = *(_QWORD *)(result + 64);
  v88 = *(_QWORD *)(result + 88);
  v11 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 20;
  v13 = *(_QWORD *)(result + 144) - 1;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(_DWORD *)(result + 256) - 1;
  v16 = v5 + (v14 * v7) + 4 * v15;
  v85 = *(_DWORD *)(result + 188);
  v17 = v4 + (v14 * v6) + 4 * v15 - 4;
  do
  {
    while (1)
    {
      if (a3 >= v9)
      {
        if (a3 <= v88)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v87;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v88;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_40;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v87;
          v27 = v25 | v85;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v9 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v87;
        v27 = v21 | v85;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v30 = *(_QWORD *)(result + 192);
      v31 = v29 - *(_QWORD *)(result + 200);
      v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v85;
        v33 = v31 + 0x1000000;
        v34 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v11;
      a3 += v10;
      v12 += 20;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v86)
    {
      v34 = ((unint64_t)a2 >> 26) & 0x3C;
      v33 = a2;
      goto LABEL_26;
    }
    v35 = *(_QWORD *)(result + 192);
    v36 = *(_QWORD *)(result + 200) + v86;
    v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1)
      goto LABEL_40;
    if (v37 < v35)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v85;
    v33 = v36 - 0x1000000;
    v34 = 28;
LABEL_26:
    if (v27 < 0x400000)
      goto LABEL_40;
    v38 = v28 >> 32;
    v39 = v4 + SHIDWORD(v28) * (uint64_t)v6;
    v40 = (v33 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    v41 = v39 + v40;
    v42 = *(unsigned int **)(result + 32);
    if (v17 >= v39 + v40)
      v43 = (unsigned int *)(v39 + v40);
    else
      v43 = (unsigned int *)v17;
    if (v43 >= v42)
      v44 = v43;
    else
      v44 = *(unsigned int **)(result + 32);
    if (v5)
    {
      v45 = v5 + (int)v38 * (uint64_t)v7 + v40;
      v46 = *(unsigned int **)(result + 40);
      if (v16 >= v45)
        v47 = (unsigned int *)v45;
      else
        v47 = (unsigned int *)v16;
      if (v47 >= v46)
        v46 = v47;
      v48 = COERCE_FLOAT(bswap32(*v46));
    }
    else
    {
      v45 = 0;
      v48 = 1.0;
    }
    v49 = COERCE_FLOAT(bswap32(*v44));
    if (!v8)
      goto LABEL_93;
    v50 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_46:
    v51 = v50 & 0xF;
    v52 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      v66 = (unsigned int *)(v41 + SBYTE1(v50) * (uint64_t)v6);
      if (v17 < (unint64_t)v66)
        v66 = (unsigned int *)v17;
      if (v66 < v42)
        v66 = v42;
      v67 = COERCE_FLOAT(bswap32(*v66));
      v68 = 1.0;
      if (v5)
      {
        v69 = (unsigned int *)(v45 + SBYTE1(v50) * (uint64_t)v7);
        if (v16 < (unint64_t)v69)
          v69 = (unsigned int *)v16;
        if ((unint64_t)v69 < *(_QWORD *)(result + 40))
          v69 = *(unsigned int **)(result + 40);
        v68 = COERCE_FLOAT(bswap32(*v69));
      }
      v70 = &interpolate_waf[2 * v52];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          v53 = v41 + 4 * SBYTE2(v50);
          if (v17 >= v53)
            v54 = (unsigned int *)(v41 + 4 * SBYTE2(v50));
          else
            v54 = (unsigned int *)v17;
          if (v54 < v42)
            v54 = v42;
          v55 = COERCE_FLOAT(bswap32(*v54));
          v56 = (unsigned int *)(v53 + SBYTE1(v50) * (uint64_t)v6);
          if (v17 < (unint64_t)v56)
            v56 = (unsigned int *)v17;
          if (v56 < v42)
            v56 = v42;
          v57 = COERCE_FLOAT(bswap32(*v56));
          v58 = 1.0;
          v59 = 1.0;
          if (v5)
          {
            v60 = v45 + 4 * SBYTE2(v50);
            v61 = *(_QWORD *)(result + 40);
            if (v16 >= v60)
              v62 = (unsigned int *)(v45 + 4 * SBYTE2(v50));
            else
              v62 = (unsigned int *)v16;
            if ((unint64_t)v62 < v61)
              v62 = *(unsigned int **)(result + 40);
            v59 = COERCE_FLOAT(bswap32(*v62));
            v63 = (unsigned int *)(v60 + SBYTE1(v50) * (uint64_t)v7);
            if (v16 < (unint64_t)v63)
              v63 = (unsigned int *)v16;
            if ((unint64_t)v63 < v61)
              v63 = *(unsigned int **)(result + 40);
            v58 = COERCE_FLOAT(bswap32(*v63));
          }
          v64 = interpolate_waf[2 * v52 + 1];
          v65 = interpolate_waf[2 * ((v50 >> 28) & 3) + 1];
          v49 = (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64))
                      - (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64)) * v65))
              + (float)((float)((float)(v55 - (float)(v55 * v64)) + (float)(v57 * v64)) * v65);
          v48 = (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v59 * v64))
                      - (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v59 * v64)) * v65))
              + (float)((float)((float)(v59 - (float)(v59 * v64)) + (float)(v58 * v64)) * v65);
        }
        goto LABEL_93;
      }
      v71 = (unsigned int *)(v41 + 4 * SBYTE2(v50));
      if (v17 < (unint64_t)v71)
        v71 = (unsigned int *)v17;
      if (v71 < v42)
        v71 = v42;
      v67 = COERCE_FLOAT(bswap32(*v71));
      v68 = 1.0;
      if (v5)
      {
        v72 = (unsigned int *)(v45 + 4 * SBYTE2(v50));
        if (v16 < (unint64_t)v72)
          v72 = (unsigned int *)v16;
        if ((unint64_t)v72 < *(_QWORD *)(result + 40))
          v72 = *(unsigned int **)(result + 40);
        v68 = COERCE_FLOAT(bswap32(*v72));
      }
      v70 = &interpolate_waf[2 * ((v50 >> 28) & 3)];
    }
    v73 = v70[1];
    v49 = (float)(v49 - (float)(v49 * v73)) + (float)(v67 * v73);
    v48 = (float)(v48 - (float)(v48 * v73)) + (float)(v68 * v73);
LABEL_93:
    *(_QWORD *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(float *)(v12 + 32) = v48 - v49;
    *(float *)(v12 + 36) = v48;
    *(_BYTE *)(v13 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v74 = 0;
    v75 = (float *)(v12 + 56);
    a2 += v11;
    v76 = v86 - a2;
    a3 += v10;
    v77 = v88 - a3;
    while ((((a2 - v87) | v76 | (a3 - v9) | v77) & 0x8000000000000000) == 0)
    {
      v78 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      v79 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      v41 = v78 + v79;
      v42 = *(unsigned int **)(result + 32);
      if (v17 >= v78 + v79)
        v80 = (unsigned int *)(v78 + v79);
      else
        v80 = (unsigned int *)v17;
      if (v80 < v42)
        v80 = *(unsigned int **)(result + 32);
      if (v5)
      {
        v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v79;
        v81 = *(unsigned int **)(result + 40);
        if (v16 >= v45)
          v82 = (unsigned int *)v45;
        else
          v82 = (unsigned int *)v16;
        if (v82 >= v81)
          v81 = v82;
        v48 = COERCE_FLOAT(bswap32(*v81));
      }
      else
      {
        v48 = 1.0;
      }
      v83 = COERCE_FLOAT(bswap32(*v80));
      v49 = v83;
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v50 & 0xF) != 0)
        {
          v13 += v74 + 1;
          v12 = (uint64_t)(v75 - 9);
          a4 += ~(_DWORD)v74;
          v27 = -1;
          goto LABEL_46;
        }
      }
      *(_QWORD *)(v75 - 3) = 0;
      *(v75 - 4) = 0.0;
      *(v75 - 1) = v48 - v83;
      *v75 = v48;
      v84 = v13 + v74++;
      v75 += 5;
      a2 += v11;
      *(_BYTE *)(v84 + 2) = -1;
      v76 -= v11;
      a3 += v10;
      v77 -= v10;
      if (a4 - 1 == (_DWORD)v74)
        return result;
    }
    v13 += v74 + 1;
    v12 = (uint64_t)(v75 - 9);
    a4 += ~(_DWORD)v74;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_Wf(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float *v44;
  unint64_t v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  float *v54;
  float v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  unint64_t v61;
  float *v62;
  float *v63;
  float v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  float *v69;
  float *v70;
  float *v71;
  float *v72;
  float v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float *v80;
  float *v81;
  float *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 72);
  v85 = *(_QWORD *)(result + 80);
  v86 = *(_QWORD *)(result + 64);
  v87 = *(_QWORD *)(result + 88);
  v11 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 20;
  v13 = *(_QWORD *)(result + 144) - 1;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(_DWORD *)(result + 256) - 1;
  v16 = v5 + (v14 * v7) + 4 * v15;
  v84 = *(_DWORD *)(result + 188);
  v17 = v4 + (v14 * v6) + 4 * v15 - 4;
  do
  {
    while (1)
    {
      if (a3 >= v9)
      {
        if (a3 <= v87)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v86;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v87;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_40;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v86;
          v27 = v25 | v84;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v9 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v86;
        v27 = v21 | v84;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v30 = *(_QWORD *)(result + 192);
      v31 = v29 - *(_QWORD *)(result + 200);
      v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v84;
        v33 = v31 + 0x1000000;
        v34 = 32;
        goto LABEL_26;
      }
LABEL_40:
      --a4;
      a2 += v11;
      a3 += v10;
      v12 += 20;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v85)
    {
      v34 = ((unint64_t)a2 >> 26) & 0x3C;
      v33 = a2;
      goto LABEL_26;
    }
    v35 = *(_QWORD *)(result + 192);
    v36 = *(_QWORD *)(result + 200) + v85;
    v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1)
      goto LABEL_40;
    if (v37 < v35)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v84;
    v33 = v36 - 0x1000000;
    v34 = 28;
LABEL_26:
    if (v27 < 0x400000)
      goto LABEL_40;
    v38 = v28 >> 32;
    v39 = v4 + SHIDWORD(v28) * (uint64_t)v6;
    v40 = (v33 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    v41 = v39 + v40;
    v42 = *(float **)(result + 32);
    if (v17 >= v39 + v40)
      v43 = (float *)(v39 + v40);
    else
      v43 = (float *)v17;
    if (v43 >= v42)
      v44 = v43;
    else
      v44 = *(float **)(result + 32);
    if (v5)
    {
      v45 = v5 + (int)v38 * (uint64_t)v7 + v40;
      v46 = *(float **)(result + 40);
      if (v16 >= v45)
        v47 = (float *)v45;
      else
        v47 = (float *)v16;
      if (v47 >= v46)
        v46 = v47;
      v48 = *v46;
    }
    else
    {
      v45 = 0;
      v48 = 1.0;
    }
    v49 = *v44;
    if (!v8)
      goto LABEL_93;
    v50 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_46:
    v51 = v50 & 0xF;
    v52 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      v66 = (float *)(v41 + SBYTE1(v50) * (uint64_t)v6);
      if (v17 < (unint64_t)v66)
        v66 = (float *)v17;
      if (v66 < v42)
        v66 = v42;
      v67 = *v66;
      v68 = 1.0;
      if (v5)
      {
        v69 = (float *)(v45 + SBYTE1(v50) * (uint64_t)v7);
        if (v16 < (unint64_t)v69)
          v69 = (float *)v16;
        if ((unint64_t)v69 < *(_QWORD *)(result + 40))
          v69 = *(float **)(result + 40);
        v68 = *v69;
      }
      v70 = &interpolate_waf[2 * v52];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          v53 = v41 + 4 * SBYTE2(v50);
          if (v17 >= v53)
            v54 = (float *)(v41 + 4 * SBYTE2(v50));
          else
            v54 = (float *)v17;
          if (v54 < v42)
            v54 = v42;
          v55 = *v54;
          v56 = (float *)(v53 + SBYTE1(v50) * (uint64_t)v6);
          if (v17 < (unint64_t)v56)
            v56 = (float *)v17;
          if (v56 < v42)
            v56 = v42;
          v57 = *v56;
          v58 = 1.0;
          v59 = 1.0;
          if (v5)
          {
            v60 = v45 + 4 * SBYTE2(v50);
            v61 = *(_QWORD *)(result + 40);
            if (v16 >= v60)
              v62 = (float *)(v45 + 4 * SBYTE2(v50));
            else
              v62 = (float *)v16;
            if ((unint64_t)v62 < v61)
              v62 = *(float **)(result + 40);
            v58 = *v62;
            v63 = (float *)(v60 + SBYTE1(v50) * (uint64_t)v7);
            if (v16 < (unint64_t)v63)
              v63 = (float *)v16;
            if ((unint64_t)v63 < v61)
              v63 = *(float **)(result + 40);
            v59 = *v63;
          }
          v64 = interpolate_waf[2 * v52 + 1];
          v65 = interpolate_waf[2 * ((v50 >> 28) & 3) + 1];
          v49 = (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64))
                      - (float)((float)((float)(v49 - (float)(v49 * v64)) + (float)(v55 * v64)) * v65))
              + (float)((float)((float)(v55 - (float)(v55 * v64)) + (float)(v57 * v64)) * v65);
          v48 = (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v58 * v64))
                      - (float)((float)((float)(v48 - (float)(v48 * v64)) + (float)(v58 * v64)) * v65))
              + (float)((float)((float)(v58 - (float)(v58 * v64)) + (float)(v59 * v64)) * v65);
        }
        goto LABEL_93;
      }
      v71 = (float *)(v41 + 4 * SBYTE2(v50));
      if (v17 < (unint64_t)v71)
        v71 = (float *)v17;
      if (v71 < v42)
        v71 = v42;
      v67 = *v71;
      v68 = 1.0;
      if (v5)
      {
        v72 = (float *)(v45 + 4 * SBYTE2(v50));
        if (v16 < (unint64_t)v72)
          v72 = (float *)v16;
        if ((unint64_t)v72 < *(_QWORD *)(result + 40))
          v72 = *(float **)(result + 40);
        v68 = *v72;
      }
      v70 = &interpolate_waf[2 * ((v50 >> 28) & 3)];
    }
    v73 = v70[1];
    v49 = (float)(v49 - (float)(v49 * v73)) + (float)(v67 * v73);
    v48 = (float)(v48 - (float)(v48 * v73)) + (float)(v68 * v73);
LABEL_93:
    *(_QWORD *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(float *)(v12 + 32) = v48 - v49;
    *(float *)(v12 + 36) = v48;
    *(_BYTE *)(v13 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v74 = 0;
    v75 = (float *)(v12 + 56);
    a2 += v11;
    v76 = v85 - a2;
    a3 += v10;
    v77 = v87 - a3;
    while ((((a2 - v86) | v76 | (a3 - v9) | v77) & 0x8000000000000000) == 0)
    {
      v78 = v4 + SHIDWORD(a3) * (uint64_t)v6;
      v79 = (a2 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      v41 = v78 + v79;
      v42 = *(float **)(result + 32);
      if (v17 >= v78 + v79)
        v80 = (float *)(v78 + v79);
      else
        v80 = (float *)v17;
      if (v80 < v42)
        v80 = *(float **)(result + 32);
      if (v5)
      {
        v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + v79;
        v81 = *(float **)(result + 40);
        if (v16 >= v45)
          v82 = (float *)v45;
        else
          v82 = (float *)v16;
        if (v82 >= v81)
          v81 = v82;
        v48 = *v81;
      }
      else
      {
        v48 = 1.0;
      }
      v49 = *v80;
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v50 & 0xF) != 0)
        {
          v13 += v74 + 1;
          v12 = (uint64_t)(v75 - 9);
          a4 += ~(_DWORD)v74;
          v27 = -1;
          goto LABEL_46;
        }
      }
      *(_QWORD *)(v75 - 3) = 0;
      *(v75 - 4) = 0.0;
      *(v75 - 1) = v48 - v49;
      *v75 = v48;
      v83 = v13 + v74++;
      v75 += 5;
      a2 += v11;
      *(_BYTE *)(v83 + 2) = -1;
      v76 -= v11;
      a3 += v10;
      v77 -= v10;
      if (a4 - 1 == (_DWORD)v74)
        return result;
    }
    v13 += v74 + 1;
    v12 = (uint64_t)(v75 - 9);
    a4 += ~(_DWORD)v74;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_RGBF(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int8x8_t *v46;
  int8x8_t *v47;
  float32x2_t v48;
  float v49;
  unsigned int v50;
  float v51;
  int v52;
  int v53;
  unint64_t v54;
  int8x8_t *v55;
  float v56;
  int8x8_t *v57;
  float32x2_t v58;
  float32x2_t v59;
  int8x8_t *v60;
  float v61;
  int8x8_t v62;
  int8x8_t *v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x8_t *v69;

  v11 = *(_QWORD *)(result + 32);
  v12 = *(_DWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 176);
  v14 = *(_QWORD *)(result + 64);
  v15 = *(_QWORD *)(result + 72);
  v16 = *(_QWORD *)(result + 80);
  v17 = *(_QWORD *)(result + 88);
  v18 = *(_QWORD *)(result + 112);
  v19 = *(_QWORD *)(result + 120);
  v20 = *(_QWORD *)(result + 152) - 20;
  v21 = *(_QWORD *)(result + 144) - 1;
  v22 = *(_DWORD *)(result + 188);
  v23 = v11
      + ((*(_DWORD *)(result + 260) - 1) * v12)
      + 4 * (3 * *(_DWORD *)(result + 256) - 3)
      - 12;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v15)
    {
      if ((uint64_t)a3 <= v17)
      {
        v32 = (a3 >> 22) & 0x3C0;
        v33 = 0x3FFFFFFF;
        HIDWORD(v34) = HIDWORD(a3);
      }
      else
      {
        v28 = *(_QWORD *)(result + 216);
        v29 = *(_QWORD *)(result + 224) + v17;
        v30 = v29 - a3 + (v28 >> 1);
        if (v30 < 1)
          goto LABEL_34;
        if (v30 >= v28)
          LODWORD(v31) = 0x3FFFFFFF;
        else
          v31 = (unint64_t)(*(_QWORD *)(result + 232) * v30) >> 32;
        v33 = v31 | v22;
        v34 = v29 - 0x1000000;
        v32 = 448;
      }
    }
    else
    {
      v24 = *(_QWORD *)(result + 216);
      v25 = v15 - *(_QWORD *)(result + 224);
      v26 = a3 - v25 + (v24 >> 1);
      if (v26 < 1)
        goto LABEL_34;
      if (v26 >= v24)
        LODWORD(v27) = 0x3FFFFFFF;
      else
        v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
      v33 = v27 | v22;
      v34 = v25 + 0x1000000;
      v32 = 512;
    }
    if (a2 >= v14)
      break;
    v35 = *(_QWORD *)(result + 192);
    v36 = v14 - *(_QWORD *)(result + 200);
    v37 = a2 - v36 + (v35 >> 1);
    if (v37 >= 1)
    {
      if (v37 < v35)
        v33 = ((v33 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v22;
      v38 = v36 + 0x1000000;
      v39 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v18;
    a3 += v19;
    v20 += 20;
    *(_BYTE *)++v21 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v16)
  {
    v39 = ((unint64_t)a2 >> 26) & 0x3C;
    v38 = a2;
    goto LABEL_26;
  }
  v40 = *(_QWORD *)(result + 192);
  v41 = *(_QWORD *)(result + 200) + v16;
  v42 = v41 - a2 + (v40 >> 1);
  if (v42 < 1)
    goto LABEL_34;
  if (v42 < v40)
    v33 = ((v33 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v42) >> 32) >> 15)) | v22;
  v38 = v41 - 0x1000000;
  v39 = 28;
LABEL_26:
  if (v33 < 0x400000)
    goto LABEL_34;
  v43 = v38 >> 32;
  v44 = v11 + SHIDWORD(v34) * (uint64_t)v12;
  v45 = v44 + 12 * (int)v43;
  v46 = *(int8x8_t **)(result + 32);
  if (v23 >= v45)
    v47 = (int8x8_t *)(v44 + 12 * (int)v43);
  else
    v47 = (int8x8_t *)v23;
  if (v47 < v46)
    v47 = *(int8x8_t **)(result + 32);
  v48 = (float32x2_t)vrev32_s8(*v47);
  v49 = COERCE_FLOAT(bswap32(v47[1].u32[0]));
  if (!v13)
    goto LABEL_36;
  v50 = *(_DWORD *)(v13 + (v39 | v32));
LABEL_38:
  v52 = v50 & 0xF;
  v53 = HIBYTE(v50) & 3;
  if (v52 == 1)
  {
    v60 = (int8x8_t *)(v45 + SBYTE1(v50) * (uint64_t)v12);
    if (v23 < (unint64_t)v60)
      v60 = (int8x8_t *)v23;
    if (v60 < v46)
      v60 = v46;
    v61 = COERCE_FLOAT(bswap32(v60[1].u32[0]));
    LODWORD(a9) = interpolate_rgbaf_19467[4 * v53 + 3];
    v62 = *v60;
    goto LABEL_61;
  }
  if (v52 == 2)
  {
    v63 = (int8x8_t *)(v45 + 12 * SBYTE2(v50));
    if (v23 < (unint64_t)v63)
      v63 = (int8x8_t *)v23;
    if (v63 < v46)
      v63 = v46;
    v61 = COERCE_FLOAT(bswap32(v63[1].u32[0]));
    LODWORD(a9) = interpolate_rgbaf_19467[4 * ((v50 >> 28) & 3) + 3];
    v62 = *v63;
LABEL_61:
    v48 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a9, 0), (float32x2_t)vrev32_s8(v62), *(float *)&a9);
    v49 = (float)(v49 - (float)(v49 * *(float *)&a9)) + (float)(v61 * *(float *)&a9);
    v51 = *(float *)&a9 + (float)(1.0 - *(float *)&a9);
    goto LABEL_62;
  }
  if (v52 != 3)
  {
LABEL_36:
    v51 = 1.0;
    goto LABEL_62;
  }
  v54 = v45 + 12 * SBYTE2(v50);
  if (v23 >= v54)
    v55 = (int8x8_t *)(v45 + 12 * SBYTE2(v50));
  else
    v55 = (int8x8_t *)v23;
  if (v55 < v46)
    v55 = v46;
  v56 = COERCE_FLOAT(bswap32(v55[1].u32[0]));
  v57 = (int8x8_t *)(v54 + SBYTE1(v50) * (uint64_t)v12);
  if (v23 < (unint64_t)v57)
    v57 = (int8x8_t *)v23;
  if (v57 < v46)
    v57 = v46;
  LODWORD(a10) = interpolate_rgbaf_19467[4 * v53 + 3];
  LODWORD(a11) = interpolate_rgbaf_19467[4 * ((v50 >> 28) & 3) + 3];
  v49 = (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v56 * *(float *)&a10))
              - (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v56 * *(float *)&a10))
                      * *(float *)&a11))
      + (float)((float)((float)(v56 - (float)(v56 * *(float *)&a10))
                      + (float)(COERCE_FLOAT(bswap32(v57[1].u32[0])) * *(float *)&a10))
              * *(float *)&a11);
  v58 = (float32x2_t)vrev32_s8(*v55);
  v59 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), v58, *(float *)&a10);
  a9 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v58, v58, *(float32x2_t *)&a10, 0), (float32x2_t)vrev32_s8(*v57), *(float *)&a10));
  v48 = vmla_n_f32(vmls_lane_f32(v59, v59, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a9, *(float *)&a11);
  v51 = (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10))
              - (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11))
      + (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11);
LABEL_62:
  v64 = 0;
  v65 = (float *)(v20 + 36);
  a2 += v18;
  v66 = v16 - a2;
  a3 += v19;
  v67 = v17 - a3;
  while (1)
  {
    LODWORD(a9) = v48.i32[1];
    if (v48.f32[0] > v48.f32[1])
      *(float *)&a9 = v48.f32[0];
    if (v49 > *(float *)&a9)
      *(float *)&a9 = v49;
    a10 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a9, 0));
    *((float32x2_t *)v65 - 2) = vsub_f32(*(float32x2_t *)&a10, v48);
    *(v65 - 2) = *(float *)&a9 - v49;
    *(v65 - 1) = v51 - *(float *)&a9;
    *v65 = v51;
    *(_BYTE *)(v21 + 1 + v64) = v33 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v67 | v66 | (a3 - v15) | (a2 - v14)) & 0x8000000000000000) != 0)
    {
      v21 += v64 + 1;
      v20 = (uint64_t)(v65 - 4);
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v68 = v11 + SHIDWORD(a3) * (uint64_t)v12;
    v45 = v68 + 12 * SHIDWORD(a2);
    v46 = *(int8x8_t **)(result + 32);
    if (v23 >= v45)
      v69 = (int8x8_t *)(v68 + 12 * SHIDWORD(a2));
    else
      v69 = (int8x8_t *)v23;
    if (v69 < v46)
      v69 = *(int8x8_t **)(result + 32);
    v48 = (float32x2_t)vrev32_s8(*v69);
    v49 = COERCE_FLOAT(bswap32(v69[1].u32[0]));
    if (v13)
    {
      v50 = *(_DWORD *)(v13 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v50 & 0xF) != 0)
      {
        v21 += v64 + 1;
        v20 = (uint64_t)(v65 - 4);
        a4 += ~(_DWORD)v64;
        v33 = -1;
        goto LABEL_38;
      }
    }
    ++v64;
    v65 += 5;
    v66 -= v18;
    a2 += v18;
    a3 += v19;
    v67 -= v19;
    v51 = 1.0;
    v33 = -1;
  }
}

uint64_t CMYKf_sample_RGBf(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float32x2_t *v46;
  float32x2_t *v47;
  float32x2_t v48;
  float v49;
  unsigned int v50;
  float v51;
  int v52;
  int v53;
  unint64_t v54;
  float32x2_t *v55;
  float32x2_t *v56;
  float32x2_t v57;
  float32x2_t *v58;
  float v59;
  float32x2_t v60;
  float32x2_t *v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t *v67;

  v11 = *(_QWORD *)(result + 32);
  v12 = *(_DWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 176);
  v14 = *(_QWORD *)(result + 64);
  v15 = *(_QWORD *)(result + 72);
  v16 = *(_QWORD *)(result + 80);
  v17 = *(_QWORD *)(result + 88);
  v18 = *(_QWORD *)(result + 112);
  v19 = *(_QWORD *)(result + 120);
  v20 = *(_QWORD *)(result + 152) - 20;
  v21 = *(_QWORD *)(result + 144) - 1;
  v22 = *(_DWORD *)(result + 188);
  v23 = v11
      + ((*(_DWORD *)(result + 260) - 1) * v12)
      + 4 * (3 * *(_DWORD *)(result + 256) - 3)
      - 12;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v15)
    {
      if ((uint64_t)a3 <= v17)
      {
        v32 = (a3 >> 22) & 0x3C0;
        v33 = 0x3FFFFFFF;
        HIDWORD(v34) = HIDWORD(a3);
      }
      else
      {
        v28 = *(_QWORD *)(result + 216);
        v29 = *(_QWORD *)(result + 224) + v17;
        v30 = v29 - a3 + (v28 >> 1);
        if (v30 < 1)
          goto LABEL_34;
        if (v30 >= v28)
          LODWORD(v31) = 0x3FFFFFFF;
        else
          v31 = (unint64_t)(*(_QWORD *)(result + 232) * v30) >> 32;
        v33 = v31 | v22;
        v34 = v29 - 0x1000000;
        v32 = 448;
      }
    }
    else
    {
      v24 = *(_QWORD *)(result + 216);
      v25 = v15 - *(_QWORD *)(result + 224);
      v26 = a3 - v25 + (v24 >> 1);
      if (v26 < 1)
        goto LABEL_34;
      if (v26 >= v24)
        LODWORD(v27) = 0x3FFFFFFF;
      else
        v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
      v33 = v27 | v22;
      v34 = v25 + 0x1000000;
      v32 = 512;
    }
    if (a2 >= v14)
      break;
    v35 = *(_QWORD *)(result + 192);
    v36 = v14 - *(_QWORD *)(result + 200);
    v37 = a2 - v36 + (v35 >> 1);
    if (v37 >= 1)
    {
      if (v37 < v35)
        v33 = ((v33 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v22;
      v38 = v36 + 0x1000000;
      v39 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v18;
    a3 += v19;
    v20 += 20;
    *(_BYTE *)++v21 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v16)
  {
    v39 = ((unint64_t)a2 >> 26) & 0x3C;
    v38 = a2;
    goto LABEL_26;
  }
  v40 = *(_QWORD *)(result + 192);
  v41 = *(_QWORD *)(result + 200) + v16;
  v42 = v41 - a2 + (v40 >> 1);
  if (v42 < 1)
    goto LABEL_34;
  if (v42 < v40)
    v33 = ((v33 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v42) >> 32) >> 15)) | v22;
  v38 = v41 - 0x1000000;
  v39 = 28;
LABEL_26:
  if (v33 < 0x400000)
    goto LABEL_34;
  v43 = v38 >> 32;
  v44 = v11 + SHIDWORD(v34) * (uint64_t)v12;
  v45 = v44 + 12 * (int)v43;
  v46 = *(float32x2_t **)(result + 32);
  if (v23 >= v45)
    v47 = (float32x2_t *)(v44 + 12 * (int)v43);
  else
    v47 = (float32x2_t *)v23;
  if (v47 < v46)
    v47 = *(float32x2_t **)(result + 32);
  v48 = *v47;
  v49 = v47[1].f32[0];
  if (!v13)
    goto LABEL_36;
  v50 = *(_DWORD *)(v13 + (v39 | v32));
LABEL_38:
  v52 = v50 & 0xF;
  v53 = HIBYTE(v50) & 3;
  if (v52 == 1)
  {
    v58 = (float32x2_t *)(v45 + SBYTE1(v50) * (uint64_t)v12);
    if (v23 < (unint64_t)v58)
      v58 = (float32x2_t *)v23;
    if (v58 < v46)
      v58 = v46;
    v59 = v58[1].f32[0];
    LODWORD(a9) = interpolate_rgbaf_19467[4 * v53 + 3];
    v60 = *v58;
    goto LABEL_61;
  }
  if (v52 == 2)
  {
    v61 = (float32x2_t *)(v45 + 12 * SBYTE2(v50));
    if (v23 < (unint64_t)v61)
      v61 = (float32x2_t *)v23;
    if (v61 < v46)
      v61 = v46;
    v59 = v61[1].f32[0];
    LODWORD(a9) = interpolate_rgbaf_19467[4 * ((v50 >> 28) & 3) + 3];
    v60 = *v61;
LABEL_61:
    v48 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a9, 0), v60, *(float *)&a9);
    v49 = (float)(v49 - (float)(v49 * *(float *)&a9)) + (float)(v59 * *(float *)&a9);
    v51 = *(float *)&a9 + (float)(1.0 - *(float *)&a9);
    goto LABEL_62;
  }
  if (v52 != 3)
  {
LABEL_36:
    v51 = 1.0;
    goto LABEL_62;
  }
  v54 = v45 + 12 * SBYTE2(v50);
  if (v23 >= v54)
    v55 = (float32x2_t *)(v45 + 12 * SBYTE2(v50));
  else
    v55 = (float32x2_t *)v23;
  if (v55 < v46)
    v55 = v46;
  v56 = (float32x2_t *)(v54 + SBYTE1(v50) * (uint64_t)v12);
  if (v23 < (unint64_t)v56)
    v56 = (float32x2_t *)v23;
  if (v56 < v46)
    v56 = v46;
  LODWORD(a10) = interpolate_rgbaf_19467[4 * v53 + 3];
  LODWORD(a11) = interpolate_rgbaf_19467[4 * ((v50 >> 28) & 3) + 3];
  v49 = (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v55[1].f32[0] * *(float *)&a10))
              - (float)((float)((float)(v49 - (float)(v49 * *(float *)&a10)) + (float)(v55[1].f32[0] * *(float *)&a10))
                      * *(float *)&a11))
      + (float)((float)((float)(v55[1].f32[0] - (float)(v55[1].f32[0] * *(float *)&a10))
                      + (float)(v56[1].f32[0] * *(float *)&a10))
              * *(float *)&a11);
  v57 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), *v55, *(float *)&a10);
  a9 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(*v55, *v55, *(float32x2_t *)&a10, 0), *v56, *(float *)&a10));
  v48 = vmla_n_f32(vmls_lane_f32(v57, v57, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a9, *(float *)&a11);
  v51 = (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10))
              - (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11))
      + (float)((float)(*(float *)&a10 + (float)(1.0 - *(float *)&a10)) * *(float *)&a11);
LABEL_62:
  v62 = 0;
  v63 = (float *)(v20 + 36);
  a2 += v18;
  v64 = v16 - a2;
  a3 += v19;
  v65 = v17 - a3;
  while (1)
  {
    LODWORD(a9) = v48.i32[1];
    if (v48.f32[0] > v48.f32[1])
      *(float *)&a9 = v48.f32[0];
    if (v49 > *(float *)&a9)
      *(float *)&a9 = v49;
    a10 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a9, 0));
    *((float32x2_t *)v63 - 2) = vsub_f32(*(float32x2_t *)&a10, v48);
    *(v63 - 2) = *(float *)&a9 - v49;
    *(v63 - 1) = v51 - *(float *)&a9;
    *v63 = v51;
    *(_BYTE *)(v21 + 1 + v62) = v33 >> 22;
    if (a4 - 1 == (_DWORD)v62)
      return result;
    if (((v65 | v64 | (a3 - v15) | (a2 - v14)) & 0x8000000000000000) != 0)
    {
      v21 += v62 + 1;
      v20 = (uint64_t)(v63 - 4);
      a4 += ~(_DWORD)v62;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v66 = v11 + SHIDWORD(a3) * (uint64_t)v12;
    v45 = v66 + 12 * SHIDWORD(a2);
    v46 = *(float32x2_t **)(result + 32);
    if (v23 >= v45)
      v67 = (float32x2_t *)(v66 + 12 * SHIDWORD(a2));
    else
      v67 = (float32x2_t *)v23;
    if (v67 < v46)
      v67 = *(float32x2_t **)(result + 32);
    v48 = *v67;
    v49 = v67[1].f32[0];
    if (v13)
    {
      v50 = *(_DWORD *)(v13 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v50 & 0xF) != 0)
      {
        v21 += v62 + 1;
        v20 = (uint64_t)(v63 - 4);
        a4 += ~(_DWORD)v62;
        v33 = -1;
        goto LABEL_38;
      }
    }
    ++v62;
    v63 += 5;
    v64 -= v18;
    a2 += v18;
    a3 += v19;
    v65 -= v19;
    v51 = 1.0;
    v33 = -1;
  }
}

uint64_t CMYKf_sample_RGBAF(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int8x8_t *v49;
  int8x8_t *v50;
  float v51;
  float32x2_t v52;
  float v53;
  unsigned int v54;
  int v55;
  int v56;
  int8x8_t *v57;
  float32x2_t v58;
  float v59;
  float v60;
  float v61;
  int8x8_t *v62;
  float32x2_t v63;
  float v64;
  float32x2_t v65;
  int8x8_t *v66;
  float v67;
  float v68;
  int8x8_t *v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int8x8_t *v75;

  v13 = *(_DWORD *)(result + 24);
  v14 = *(_QWORD *)(result + 176);
  v15 = *(_QWORD *)(result + 64);
  v16 = *(_QWORD *)(result + 72);
  v17 = *(_QWORD *)(result + 80);
  v18 = *(_QWORD *)(result + 88);
  v19 = *(_QWORD *)(result + 112);
  v20 = *(_QWORD *)(result + 120);
  v21 = *(_DWORD *)(result + 188);
  v22 = *(_QWORD *)(result + 152) - 20;
  v23 = *(_QWORD *)(result + 144) - 1;
  v25 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 40);
  v26 = v25
      + ((*(_DWORD *)(result + 260) - 1) * v13)
      + 4 * (4 * *(_DWORD *)(result + 256) - 4)
      - 16;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v16)
    {
      if ((uint64_t)a3 <= v18)
      {
        v35 = (a3 >> 22) & 0x3C0;
        v36 = 0x3FFFFFFF;
        HIDWORD(v37) = HIDWORD(a3);
      }
      else
      {
        v31 = *(_QWORD *)(result + 216);
        v32 = *(_QWORD *)(result + 224) + v18;
        v33 = v32 - a3 + (v31 >> 1);
        if (v33 < 1)
          goto LABEL_34;
        if (v33 >= v31)
          LODWORD(v34) = 0x3FFFFFFF;
        else
          v34 = (unint64_t)(*(_QWORD *)(result + 232) * v33) >> 32;
        v36 = v34 | v21;
        v37 = v32 - 0x1000000;
        v35 = 448;
      }
    }
    else
    {
      v27 = *(_QWORD *)(result + 216);
      v28 = v16 - *(_QWORD *)(result + 224);
      v29 = a3 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_34;
      if (v29 >= v27)
        LODWORD(v30) = 0x3FFFFFFF;
      else
        v30 = (unint64_t)(*(_QWORD *)(result + 232) * v29) >> 32;
      v36 = v30 | v21;
      v37 = v28 + 0x1000000;
      v35 = 512;
    }
    if (a2 >= v15)
      break;
    v38 = *(_QWORD *)(result + 192);
    v39 = v15 - *(_QWORD *)(result + 200);
    v40 = a2 - v39 + (v38 >> 1);
    if (v40 >= 1)
    {
      if (v40 < v38)
        v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v40) >> 32) >> 15)) | v21;
      v41 = v39 + 0x1000000;
      v42 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v19;
    a3 += v20;
    v22 += 20;
    *(_BYTE *)++v23 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v17)
  {
    v42 = ((unint64_t)a2 >> 26) & 0x3C;
    v41 = a2;
    goto LABEL_26;
  }
  v43 = *(_QWORD *)(result + 192);
  v44 = *(_QWORD *)(result + 200) + v17;
  v45 = v44 - a2 + (v43 >> 1);
  if (v45 < 1)
    goto LABEL_34;
  if (v45 < v43)
    v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v45) >> 32) >> 15)) | v21;
  v41 = v44 - 0x1000000;
  v42 = 28;
LABEL_26:
  if (v36 < 0x400000)
    goto LABEL_34;
  v46 = v25 + SHIDWORD(v37) * (uint64_t)v13;
  v47 = v41 >> 32;
  v48 = v46 + 16 * v47;
  v49 = *(int8x8_t **)(result + 32);
  if (v26 >= v48)
    v50 = (int8x8_t *)(v46 + 16 * v47);
  else
    v50 = (int8x8_t *)v26;
  if (v50 < v49)
    v50 = *(int8x8_t **)(result + 32);
  if (v24)
    v51 = COERCE_FLOAT(bswap32(v50[1].u32[1]));
  else
    v51 = 1.0;
  v52 = (float32x2_t)vrev32_s8(*v50);
  v53 = COERCE_FLOAT(bswap32(v50[1].u32[0]));
  if (v14)
  {
    v54 = *(_DWORD *)(v14 + (v42 | v35));
LABEL_40:
    v55 = v54 & 0xF;
    v56 = HIBYTE(v54) & 3;
    if (v55 == 1)
    {
      v66 = (int8x8_t *)(v48 + SBYTE1(v54) * (uint64_t)v13);
      if (v26 < (unint64_t)v66)
        v66 = (int8x8_t *)v26;
      if (v66 < v49)
        v66 = v49;
      a8 = COERCE_DOUBLE(vrev32_s8(*v66));
      v67 = COERCE_FLOAT(bswap32(v66[1].u32[0]));
      v68 = 1.0;
      if (v24)
        v68 = COERCE_FLOAT(bswap32(v66[1].u32[1]));
    }
    else
    {
      if (v55 != 2)
      {
        if (v55 == 3)
        {
          v57 = (int8x8_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
          if (v26 < (unint64_t)v57)
            v57 = (int8x8_t *)v26;
          if (v57 < v49)
            v57 = v49;
          v58 = (float32x2_t)vrev32_s8(*v57);
          v59 = COERCE_FLOAT(bswap32(v57[1].u32[0]));
          v60 = 1.0;
          v61 = 1.0;
          if (v24)
            v61 = COERCE_FLOAT(bswap32(v57[1].u32[1]));
          v62 = (int8x8_t *)(v48 + SBYTE1(v54) * (uint64_t)v13 + 16 * SBYTE2(v54));
          if (v26 < (unint64_t)v62)
            v62 = (int8x8_t *)v26;
          if (v62 < v49)
            v62 = v49;
          v63 = (float32x2_t)vrev32_s8(*v62);
          v64 = COERCE_FLOAT(bswap32(v62[1].u32[0]));
          if (v24)
            v60 = COERCE_FLOAT(bswap32(v62[1].u32[1]));
          v11.i32[0] = interpolate_rgbaf_19467[4 * v56 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v54 >> 28) & 3) + 3];
          v53 = (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59 * v11.f32[0]))
                      - (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v59 - (float)(v59 * v11.f32[0])) + (float)(v64 * v11.f32[0])) * v12.f32[0]);
          v65 = vmla_n_f32(vmls_lane_f32(v52, v52, v11, 0), v58, v11.f32[0]);
          a8 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v58, v58, v11, 0), v63, v11.f32[0]));
          v52 = vmla_n_f32(vmls_lane_f32(v65, v65, v12, 0), *(float32x2_t *)&a8, v12.f32[0]);
          v51 = (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                      - (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v61 - (float)(v61 * v11.f32[0])) + (float)(v60 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_70;
      }
      v69 = (int8x8_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
      if (v26 < (unint64_t)v69)
        v69 = (int8x8_t *)v26;
      if (v69 < v49)
        v69 = v49;
      a8 = COERCE_DOUBLE(vrev32_s8(*v69));
      v67 = COERCE_FLOAT(bswap32(v69[1].u32[0]));
      v68 = 1.0;
      if (v24)
        v68 = COERCE_FLOAT(bswap32(v69[1].u32[1]));
      v56 = (v54 >> 28) & 3;
    }
    LODWORD(a11) = interpolate_rgbaf_19467[4 * v56 + 3];
    v52 = vmla_n_f32(vmls_lane_f32(v52, v52, *(float32x2_t *)&a11, 0), *(float32x2_t *)&a8, *(float *)&a11);
    v53 = (float)(v53 - (float)(v53 * *(float *)&a11)) + (float)(v67 * *(float *)&a11);
    v51 = (float)(v51 - (float)(v51 * *(float *)&a11)) + (float)(v68 * *(float *)&a11);
  }
LABEL_70:
  v70 = 0;
  v71 = (float *)(v22 + 36);
  a2 += v19;
  v72 = v17 - a2;
  a3 += v20;
  v73 = v18 - a3;
  while (1)
  {
    LODWORD(a8) = v52.i32[1];
    if (v52.f32[0] > v52.f32[1])
      *(float *)&a8 = v52.f32[0];
    if (v53 > *(float *)&a8)
      *(float *)&a8 = v53;
    *((float32x2_t *)v71 - 2) = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v52);
    *(v71 - 2) = *(float *)&a8 - v53;
    *(v71 - 1) = v51 - *(float *)&a8;
    *v71 = v51;
    *(_BYTE *)(v23 + 1 + v70) = v36 >> 22;
    if (a4 - 1 == (_DWORD)v70)
      return result;
    if (((v73 | v72 | (a3 - v16) | (a2 - v15)) & 0x8000000000000000) != 0)
    {
      v22 = (uint64_t)(v71 - 4);
      v23 += v70 + 1;
      a4 += ~(_DWORD)v70;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v74 = v25 + SHIDWORD(a3) * (uint64_t)v13;
    v48 = v74 + 16 * (a2 >> 32);
    v49 = *(int8x8_t **)(result + 32);
    if (v26 >= v48)
      v75 = (int8x8_t *)(v74 + 16 * (a2 >> 32));
    else
      v75 = (int8x8_t *)v26;
    if (v75 < v49)
      v75 = *(int8x8_t **)(result + 32);
    if (v24)
      v51 = COERCE_FLOAT(bswap32(v75[1].u32[1]));
    else
      v51 = 1.0;
    v52 = (float32x2_t)vrev32_s8(*v75);
    v53 = COERCE_FLOAT(bswap32(v75[1].u32[0]));
    if (v14)
    {
      v54 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v54 & 0xF) != 0)
      {
        v22 = (uint64_t)(v71 - 4);
        v23 += v70 + 1;
        a4 += ~(_DWORD)v70;
        v36 = -1;
        goto LABEL_40;
      }
    }
    v71 += 5;
    v72 -= v19;
    a2 += v19;
    ++v70;
    a3 += v20;
    v73 -= v20;
    v36 = -1;
  }
}

uint64_t CMYKf_sample_RGBAf(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float32x2_t *v49;
  float32x2_t *v50;
  float v51;
  float32x2_t v52;
  float v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t v60;
  float v61;
  float32x2_t *v62;
  float v63;
  float32x2_t *v64;
  float32x2_t v65;
  float v66;
  float v67;
  float32x2_t *v68;
  float32x2_t v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float32x2_t *v75;

  v13 = *(_DWORD *)(result + 24);
  v14 = *(_QWORD *)(result + 176);
  v15 = *(_QWORD *)(result + 64);
  v16 = *(_QWORD *)(result + 72);
  v17 = *(_QWORD *)(result + 80);
  v18 = *(_QWORD *)(result + 88);
  v19 = *(_QWORD *)(result + 112);
  v20 = *(_QWORD *)(result + 120);
  v21 = *(_DWORD *)(result + 188);
  v22 = *(_QWORD *)(result + 152) - 20;
  v23 = *(_QWORD *)(result + 144) - 1;
  v25 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 40);
  v26 = v25
      + ((*(_DWORD *)(result + 260) - 1) * v13)
      + 4 * (4 * *(_DWORD *)(result + 256) - 4)
      - 16;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v16)
    {
      if ((uint64_t)a3 <= v18)
      {
        v35 = (a3 >> 22) & 0x3C0;
        v36 = 0x3FFFFFFF;
        HIDWORD(v37) = HIDWORD(a3);
      }
      else
      {
        v31 = *(_QWORD *)(result + 216);
        v32 = *(_QWORD *)(result + 224) + v18;
        v33 = v32 - a3 + (v31 >> 1);
        if (v33 < 1)
          goto LABEL_34;
        if (v33 >= v31)
          LODWORD(v34) = 0x3FFFFFFF;
        else
          v34 = (unint64_t)(*(_QWORD *)(result + 232) * v33) >> 32;
        v36 = v34 | v21;
        v37 = v32 - 0x1000000;
        v35 = 448;
      }
    }
    else
    {
      v27 = *(_QWORD *)(result + 216);
      v28 = v16 - *(_QWORD *)(result + 224);
      v29 = a3 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_34;
      if (v29 >= v27)
        LODWORD(v30) = 0x3FFFFFFF;
      else
        v30 = (unint64_t)(*(_QWORD *)(result + 232) * v29) >> 32;
      v36 = v30 | v21;
      v37 = v28 + 0x1000000;
      v35 = 512;
    }
    if (a2 >= v15)
      break;
    v38 = *(_QWORD *)(result + 192);
    v39 = v15 - *(_QWORD *)(result + 200);
    v40 = a2 - v39 + (v38 >> 1);
    if (v40 >= 1)
    {
      if (v40 < v38)
        v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v40) >> 32) >> 15)) | v21;
      v41 = v39 + 0x1000000;
      v42 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v19;
    a3 += v20;
    v22 += 20;
    *(_BYTE *)++v23 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v17)
  {
    v42 = ((unint64_t)a2 >> 26) & 0x3C;
    v41 = a2;
    goto LABEL_26;
  }
  v43 = *(_QWORD *)(result + 192);
  v44 = *(_QWORD *)(result + 200) + v17;
  v45 = v44 - a2 + (v43 >> 1);
  if (v45 < 1)
    goto LABEL_34;
  if (v45 < v43)
    v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v45) >> 32) >> 15)) | v21;
  v41 = v44 - 0x1000000;
  v42 = 28;
LABEL_26:
  if (v36 < 0x400000)
    goto LABEL_34;
  v46 = v25 + SHIDWORD(v37) * (uint64_t)v13;
  v47 = v41 >> 32;
  v48 = v46 + 16 * v47;
  v49 = *(float32x2_t **)(result + 32);
  if (v26 >= v48)
    v50 = (float32x2_t *)(v46 + 16 * v47);
  else
    v50 = (float32x2_t *)v26;
  if (v50 < v49)
    v50 = *(float32x2_t **)(result + 32);
  if (v24)
    v51 = v50[1].f32[1];
  else
    v51 = 1.0;
  v52 = *v50;
  v53 = v50[1].f32[0];
  if (v14)
  {
    v54 = *(_DWORD *)(v14 + (v42 | v35));
LABEL_40:
    v55 = v54 & 0xF;
    v56 = HIBYTE(v54) & 3;
    if (v55 == 1)
    {
      v64 = (float32x2_t *)(v48 + SBYTE1(v54) * (uint64_t)v13);
      if (v26 < (unint64_t)v64)
        v64 = (float32x2_t *)v26;
      if (v64 < v49)
        v64 = v49;
      v65 = *v64;
      v66 = v64[1].f32[0];
      v67 = 1.0;
      if (v24)
        v67 = v64[1].f32[1];
    }
    else
    {
      if (v55 != 2)
      {
        if (v55 == 3)
        {
          v57 = SBYTE1(v54) * (uint64_t)v13;
          v58 = 16 * SBYTE2(v54);
          v59 = (float32x2_t *)(v48 + v58);
          if (v26 < v48 + v58)
            v59 = (float32x2_t *)v26;
          if (v59 < v49)
            v59 = v49;
          v60 = *v59;
          if (v24)
          {
            v61 = v59[1].f32[1];
            v62 = (float32x2_t *)(v48 + v57 + v58);
            if (v26 < (unint64_t)v62)
              v62 = (float32x2_t *)v26;
            if (v62 < v49)
              v62 = v49;
            v63 = v62[1].f32[1];
          }
          else
          {
            v62 = (float32x2_t *)(v48 + v57 + v58);
            if (v26 < (unint64_t)v62)
              v62 = (float32x2_t *)v26;
            if (v62 < v49)
              v62 = v49;
            v61 = 1.0;
            v63 = 1.0;
          }
          v11.i32[0] = interpolate_rgbaf_19467[4 * v56 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v54 >> 28) & 3) + 3];
          v53 = (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59[1].f32[0] * v11.f32[0]))
                      - (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v59[1].f32[0] * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v59[1].f32[0] - (float)(v59[1].f32[0] * v11.f32[0]))
                              + (float)(v62[1].f32[0] * v11.f32[0]))
                      * v12.f32[0]);
          v69 = vmla_n_f32(vmls_lane_f32(v52, v52, v11, 0), v60, v11.f32[0]);
          a8 = COERCE_DOUBLE(vmla_n_f32(vmls_lane_f32(v60, v60, v11, 0), *v62, v11.f32[0]));
          v52 = vmla_n_f32(vmls_lane_f32(v69, v69, v12, 0), *(float32x2_t *)&a8, v12.f32[0]);
          v51 = (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                      - (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v61 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v61 - (float)(v61 * v11.f32[0])) + (float)(v63 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_73;
      }
      v68 = (float32x2_t *)(v48 + ((uint64_t)((unint64_t)HIWORD(v54) << 56) >> 52));
      if (v26 < (unint64_t)v68)
        v68 = (float32x2_t *)v26;
      if (v68 < v49)
        v68 = v49;
      v65 = *v68;
      v66 = v68[1].f32[0];
      v67 = 1.0;
      if (v24)
        v67 = v68[1].f32[1];
      v56 = (v54 >> 28) & 3;
    }
    LODWORD(a11) = interpolate_rgbaf_19467[4 * v56 + 3];
    v52 = vmla_n_f32(vmls_lane_f32(v52, v52, *(float32x2_t *)&a11, 0), v65, *(float *)&a11);
    v53 = (float)(v53 - (float)(v53 * *(float *)&a11)) + (float)(v66 * *(float *)&a11);
    v51 = (float)(v51 - (float)(v51 * *(float *)&a11)) + (float)(v67 * *(float *)&a11);
  }
LABEL_73:
  v70 = 0;
  v71 = (float *)(v22 + 36);
  a2 += v19;
  v72 = v17 - a2;
  a3 += v20;
  v73 = v18 - a3;
  while (1)
  {
    LODWORD(a8) = v52.i32[1];
    if (v52.f32[0] > v52.f32[1])
      *(float *)&a8 = v52.f32[0];
    if (v53 > *(float *)&a8)
      *(float *)&a8 = v53;
    *((float32x2_t *)v71 - 2) = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v52);
    *(v71 - 2) = *(float *)&a8 - v53;
    *(v71 - 1) = v51 - *(float *)&a8;
    *v71 = v51;
    *(_BYTE *)(v23 + 1 + v70) = v36 >> 22;
    if (a4 - 1 == (_DWORD)v70)
      return result;
    if (((v73 | v72 | (a3 - v16) | (a2 - v15)) & 0x8000000000000000) != 0)
    {
      v23 += v70 + 1;
      v22 = (uint64_t)(v71 - 4);
      a4 += ~(_DWORD)v70;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v74 = v25 + SHIDWORD(a3) * (uint64_t)v13;
    v48 = v74 + 16 * (a2 >> 32);
    v49 = *(float32x2_t **)(result + 32);
    if (v26 >= v48)
      v75 = (float32x2_t *)(v74 + 16 * (a2 >> 32));
    else
      v75 = (float32x2_t *)v26;
    if (v75 < v49)
      v75 = *(float32x2_t **)(result + 32);
    if (v24)
      v51 = v75[1].f32[1];
    else
      v51 = 1.0;
    v52 = *v75;
    v53 = v75[1].f32[0];
    if (v14)
    {
      v54 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v54 & 0xF) != 0)
      {
        v23 += v70 + 1;
        v22 = (uint64_t)(v71 - 4);
        a4 += ~(_DWORD)v70;
        v36 = -1;
        goto LABEL_40;
      }
    }
    ++v70;
    v71 += 5;
    v72 -= v19;
    a2 += v19;
    a3 += v20;
    v73 -= v20;
    v36 = -1;
  }
}

uint64_t CMYKf_sample_CMYKF_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  float v61;
  float32x4_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int8x16_t *v79;
  int8x16_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  float v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int8x16_t *v94;
  float32x4_t v95;
  float v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int8x16_t *v102;
  unsigned int *v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int8x16_t *v118;
  unsigned int *v119;
  unsigned int *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;

  v12 = *(_DWORD *)(result + 24);
  v129 = *(_DWORD *)(result + 28);
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD *)(result + 48);
  v15 = *(_QWORD *)(result + 56);
  if (v14)
  {
    v128 = *(_QWORD *)(result + 112);
    if (v13 > v14)
      v128 = v13 % v14;
  }
  else
  {
    v128 = 0;
  }
  v16 = *(_QWORD *)(result + 176);
  v17 = *(_QWORD *)(result + 40);
  v130 = *(_QWORD *)(result + 32);
  v18 = *(_QWORD *)(result + 120);
  if (v15)
  {
    v19 = v18 % v15;
    if (v18 <= v15)
      v19 = *(_QWORD *)(result + 120);
    v127 = v19;
  }
  else
  {
    v127 = 0;
  }
  v123 = *(_QWORD *)(result + 80);
  v125 = *(_QWORD *)(result + 88);
  v20 = *(_QWORD *)(result + 152) - 20;
  v21 = *(_QWORD *)(result + 144) - 1;
  v22 = *(_DWORD *)(result + 260) - 1;
  v23 = *(_DWORD *)(result + 256) - 1;
  v24 = v17 + (v22 * v129) + 4 * v23;
  v122 = *(_DWORD *)(result + 188);
  v25 = v130 + (v22 * v12) + 16 * v23 - 16;
  v124 = *(_QWORD *)(result + 64);
  v126 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v126)
      {
        v26 = *(_QWORD *)(result + 216);
        v27 = v126 - *(_QWORD *)(result + 224);
        v28 = a3 - v27 + (v26 >> 1);
        if (v28 < 1)
          goto LABEL_57;
        if (v28 >= v26)
          LODWORD(v29) = 0x3FFFFFFF;
        else
          v29 = (unint64_t)(*(_QWORD *)(result + 232) * v28) >> 32;
        v36 = v122 | v29;
        v37 = v27 + 0x1000000;
        v34 = a3 - (v27 + 0x1000000);
        v35 = 512;
        goto LABEL_22;
      }
      if (a3 <= v125)
      {
        v34 = 0;
        v35 = ((unint64_t)a3 >> 22) & 0x3C0;
        v36 = 0x3FFFFFFF;
        v37 = a3;
LABEL_22:
        v38 = v124;
        goto LABEL_25;
      }
      v30 = *(_QWORD *)(result + 216);
      v31 = *(_QWORD *)(result + 224) + v125;
      v32 = v31 - a3 + (v30 >> 1);
      if (v32 < 1)
        goto LABEL_57;
      if (v32 >= v30)
        LODWORD(v33) = 0x3FFFFFFF;
      else
        v33 = (unint64_t)(*(_QWORD *)(result + 232) * v32) >> 32;
      v38 = v124;
      v36 = v122 | v33;
      v37 = v31 - 0x1000000;
      v34 = a3 - (v31 - 0x1000000);
      v35 = 448;
LABEL_25:
      if (a2 >= v38)
        break;
      v39 = *(_QWORD *)(result + 192);
      v40 = v38 - *(_QWORD *)(result + 200);
      v41 = a2 - v40 + (v39 >> 1);
      if (v41 >= 1)
      {
        if (v41 < v39)
          v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v41) >> 32) >> 15)) | v122;
        v42 = v40 + 0x1000000;
        v43 = a2 - (v40 + 0x1000000);
        v44 = 32;
        goto LABEL_36;
      }
LABEL_57:
      --a4;
      a2 += v13;
      a3 += v18;
      v20 += 20;
      *(_BYTE *)++v21 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v123)
    {
      v43 = 0;
      v44 = ((unint64_t)a2 >> 26) & 0x3C;
      v42 = a2;
      goto LABEL_36;
    }
    v45 = *(_QWORD *)(result + 192);
    v46 = *(_QWORD *)(result + 200) + v123;
    v47 = v46 - a2 + (v45 >> 1);
    if (v47 < 1)
      goto LABEL_57;
    if (v47 < v45)
      v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v47) >> 32) >> 15)) | v122;
    v42 = v46 - 0x1000000;
    v43 = a2 - (v46 - 0x1000000);
    v44 = 28;
LABEL_36:
    if (v36 < 0x400000)
      goto LABEL_57;
    if (v14)
    {
      v48 = (v15 & ((v37 % v15) >> 63)) + v37 % v15;
      v49 = (v14 & ((v42 % v14) >> 63)) + v42 % v14;
      if (v48 >= v15)
        v50 = v15;
      else
        v50 = 0;
      v37 = v48 - v50;
      if (v49 >= v14)
        v51 = v14;
      else
        v51 = 0;
      v42 = v49 - v51;
      v34 += v37;
      v43 += v42;
    }
    v52 = v37 >> 32;
    v53 = v130 + SHIDWORD(v37) * (uint64_t)v12;
    v54 = (v42 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    v55 = v53 + 4 * v54;
    v56 = *(int8x16_t **)(result + 32);
    if (v25 >= v55)
      v57 = (int8x16_t *)(v53 + 4 * v54);
    else
      v57 = (int8x16_t *)v25;
    if (v57 < v56)
      v57 = *(int8x16_t **)(result + 32);
    if (v17)
    {
      v58 = v17 + (int)v52 * (uint64_t)v129 + v54;
      v59 = *(unsigned int **)(result + 40);
      if (v24 >= v58)
        v60 = (unsigned int *)v58;
      else
        v60 = (unsigned int *)v24;
      if (v60 >= v59)
        v59 = v60;
      v61 = COERCE_FLOAT(bswap32(*v59));
    }
    else
    {
      v58 = 0;
      v61 = 1.0;
    }
    v62 = (float32x4_t)vrev32q_s8(*v57);
    if (!v16)
      goto LABEL_127;
    v63 = *(_DWORD *)(v16 + (v44 | v35));
LABEL_63:
    v64 = v63 & 0xF;
    v65 = v63 >> 8;
    v66 = HIBYTE(v63) & 3;
    if (v64 == 1)
    {
      LODWORD(v90) = SBYTE1(v63);
      if (v14)
      {
        v91 = v34 + ((uint64_t)SBYTE1(v63) << 32);
        v92 = v15 & (v91 >> 63);
        if (v92 + v91 >= v15)
          v93 = v15;
        else
          v93 = 0;
        v90 = (v92 + ((uint64_t)(char)v65 << 32) - v93) >> 32;
      }
      v94 = (int8x16_t *)(v55 + (int)v90 * (uint64_t)v12);
      if (v25 < (unint64_t)v94)
        v94 = (int8x16_t *)v25;
      if (v94 < v56)
        v94 = v56;
      v95 = (float32x4_t)vrev32q_s8(*v94);
      v96 = 1.0;
      if (v17)
      {
        v97 = (unsigned int *)(v58 + (int)v90 * (uint64_t)v129);
        if (v24 < (unint64_t)v97)
          v97 = (unsigned int *)v24;
        if ((unint64_t)v97 < *(_QWORD *)(result + 40))
          v97 = *(unsigned int **)(result + 40);
        v96 = COERCE_FLOAT(bswap32(*v97));
      }
    }
    else
    {
      if (v64 != 2)
      {
        if (v64 == 3)
        {
          LODWORD(v67) = SBYTE1(v63);
          v68 = SBYTE2(v63);
          if (v14)
          {
            v69 = v65 << 56;
            v70 = (unint64_t)HIWORD(v63) << 56;
            v71 = v34 + ((uint64_t)SBYTE1(v63) << 32);
            v72 = v43 + (v70 >> 24);
            v73 = v15 & (v71 >> 63);
            v74 = v14 & (v72 >> 63);
            v75 = v74 + v72;
            if (v73 + v71 >= v15)
              v76 = v15;
            else
              v76 = 0;
            if (v75 >= v14)
              v77 = v14;
            else
              v77 = 0;
            v67 = (v73 + (v69 >> 24) - v76) >> 32;
            v68 = (v74 + (v70 >> 24) - v77) >> 32;
          }
          v78 = v55 + 16 * v68;
          if (v25 >= v78)
            v79 = (int8x16_t *)(v55 + 16 * v68);
          else
            v79 = (int8x16_t *)v25;
          if (v79 < v56)
            v79 = v56;
          v80 = (int8x16_t *)(v78 + (int)v67 * (uint64_t)v12);
          if (v25 < (unint64_t)v80)
            v80 = (int8x16_t *)v25;
          if (v80 < v56)
            v80 = v56;
          v81 = (float32x4_t)vrev32q_s8(*v79);
          v82 = (float32x4_t)vrev32q_s8(*v80);
          v83 = 1.0;
          v84 = 1.0;
          if (v17)
          {
            v85 = v58 + 4 * v68;
            v86 = *(_QWORD *)(result + 40);
            if (v24 >= v85)
              v87 = (unsigned int *)(v58 + 4 * v68);
            else
              v87 = (unsigned int *)v24;
            if ((unint64_t)v87 < v86)
              v87 = *(unsigned int **)(result + 40);
            v84 = COERCE_FLOAT(bswap32(*v87));
            v88 = (unsigned int *)(v85 + (int)v67 * (uint64_t)v129);
            if (v24 < (unint64_t)v88)
              v88 = (unsigned int *)v24;
            if ((unint64_t)v88 < v86)
              v88 = *(unsigned int **)(result + 40);
            v83 = COERCE_FLOAT(bswap32(*v88));
          }
          LODWORD(a11) = interpolate_cmykaf[5 * v66 + 4];
          LODWORD(a12) = interpolate_cmykaf[5 * ((v63 >> 28) & 3) + 4];
          v89 = vmlaq_n_f32(vmlsq_lane_f32(v62, v62, *(float32x2_t *)&a11, 0), v81, *(float *)&a11);
          v62 = vmlaq_n_f32(vmlsq_lane_f32(v89, v89, *(float32x2_t *)&a12, 0), vmlaq_n_f32(vmlsq_lane_f32(v81, v81, *(float32x2_t *)&a11, 0), v82, *(float *)&a11), *(float *)&a12);
          v61 = (float)((float)((float)(v61 - (float)(v61 * *(float *)&a11)) + (float)(v84 * *(float *)&a11))
                      - (float)((float)((float)(v61 - (float)(v61 * *(float *)&a11)) + (float)(v84 * *(float *)&a11))
                              * *(float *)&a12))
              + (float)((float)((float)(v84 - (float)(v84 * *(float *)&a11)) + (float)(v83 * *(float *)&a11))
                      * *(float *)&a12);
        }
        goto LABEL_127;
      }
      v98 = SBYTE2(v63);
      if (v14)
      {
        v99 = v43 + ((uint64_t)SBYTE2(v63) << 32);
        v100 = v14 & (v99 >> 63);
        if (v100 + v99 >= v14)
          v101 = v14;
        else
          v101 = 0;
        v98 = (v100 + ((uint64_t)((unint64_t)HIWORD(v63) << 56) >> 24) - v101) >> 32;
      }
      v102 = (int8x16_t *)(v55 + 16 * v98);
      if (v25 < (unint64_t)v102)
        v102 = (int8x16_t *)v25;
      if (v102 < v56)
        v102 = v56;
      v95 = (float32x4_t)vrev32q_s8(*v102);
      v96 = 1.0;
      if (v17)
      {
        v103 = (unsigned int *)(v58 + 4 * v98);
        if (v24 < (unint64_t)v103)
          v103 = (unsigned int *)v24;
        if ((unint64_t)v103 < *(_QWORD *)(result + 40))
          v103 = *(unsigned int **)(result + 40);
        v96 = COERCE_FLOAT(bswap32(*v103));
      }
      v66 = (v63 >> 28) & 3;
    }
    LODWORD(a9) = interpolate_cmykaf[5 * v66 + 4];
    v62 = vmlaq_n_f32(vmlsq_lane_f32(v62, v62, *(float32x2_t *)&a9, 0), v95, *(float *)&a9);
    v61 = (float)(v61 - (float)(v61 * *(float *)&a9)) + (float)(v96 * *(float *)&a9);
LABEL_127:
    *(float32x4_t *)(v20 + 20) = v62;
    *(float *)(v20 + 36) = v61;
    *(_BYTE *)(v21 + 1) = v36 >> 22;
    if (a4 == 1)
      break;
    v104 = 0;
    v105 = (float *)(v20 + 56);
    a2 += v13;
    v106 = v123 - a2;
    a3 += v18;
    v107 = v125 - a3;
    v108 = --a4;
    while (1)
    {
      v109 = v21 + v104 + 1;
      v20 = (uint64_t)(v105 - 9);
      if ((v107 | v106 | (a3 - v126) | (a2 - v124)) < 0)
        break;
      if (v14)
      {
        v110 = (v15 & ((v34 + v127) >> 63)) + v34 + v127;
        v111 = (v14 & ((v43 + v128) >> 63)) + v43 + v128;
        if (v110 >= v15)
          v112 = v15;
        else
          v112 = 0;
        v34 = v110 - v112;
        if (v111 >= v14)
          v113 = v14;
        else
          v113 = 0;
        v43 = v111 - v113;
        v114 = v34;
        v115 = v43;
      }
      else
      {
        v114 = a3;
        v115 = a2;
      }
      v116 = v114 >> 32;
      v117 = (v115 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      v55 = v130 + SHIDWORD(v114) * (uint64_t)v12 + 4 * v117;
      v56 = *(int8x16_t **)(result + 32);
      if (v25 >= v55)
        v118 = (int8x16_t *)v55;
      else
        v118 = (int8x16_t *)v25;
      if (v118 < v56)
        v118 = *(int8x16_t **)(result + 32);
      if (v17)
      {
        v58 = v17 + (int)v116 * (uint64_t)v129 + v117;
        v119 = *(unsigned int **)(result + 40);
        if (v24 >= v58)
          v120 = (unsigned int *)v58;
        else
          v120 = (unsigned int *)v24;
        if (v120 >= v119)
          v119 = v120;
        v61 = COERCE_FLOAT(bswap32(*v119));
      }
      else
      {
        v61 = 1.0;
      }
      v62 = (float32x4_t)vrev32q_s8(*v118);
      if (v16)
      {
        v63 = *(_DWORD *)(v16 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v63 & 0xF) != 0)
        {
          v36 = -1;
          v21 = v109;
          goto LABEL_63;
        }
      }
      --a4;
      *((float32x4_t *)v105 - 1) = v62;
      *v105 = v61;
      v105 += 5;
      v121 = v21 + v104++;
      a2 += v13;
      *(_BYTE *)(v121 + 2) = -1;
      v106 -= v13;
      a3 += v18;
      v107 -= v18;
      if (v108 == (_DWORD)v104)
        return result;
    }
    v21 += v104 + 1;
  }
  while (a4);
  return result;
}

uint64_t CMYKf_sample_CMYKf_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  unint64_t v59;
  float *v60;
  float *v61;
  float v62;
  int v63;
  float32x4_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t v84;
  float v85;
  float v86;
  float *v87;
  unint64_t v88;
  float *v89;
  float *v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float v98;
  float *v99;
  _DWORD *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  float *v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float32x4_t *v121;
  float *v122;
  float *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;

  v13 = *(_DWORD *)(result + 24);
  v132 = *(_DWORD *)(result + 28);
  v14 = *(_QWORD *)(result + 112);
  v15 = *(_QWORD *)(result + 48);
  v16 = *(_QWORD *)(result + 56);
  if (v15)
  {
    v131 = *(_QWORD *)(result + 112);
    if (v14 > v15)
      v131 = v14 % v15;
  }
  else
  {
    v131 = 0;
  }
  v17 = *(_QWORD *)(result + 176);
  v19 = *(_QWORD *)(result + 32);
  v18 = *(_QWORD *)(result + 40);
  v20 = *(_QWORD *)(result + 120);
  if (v16)
  {
    v21 = v20 % v16;
    if (v20 <= v16)
      v21 = *(_QWORD *)(result + 120);
    v130 = v21;
  }
  else
  {
    v130 = 0;
  }
  v126 = *(_QWORD *)(result + 80);
  v127 = *(_QWORD *)(result + 64);
  v128 = *(_QWORD *)(result + 88);
  v22 = *(_QWORD *)(result + 152) - 20;
  v23 = *(_QWORD *)(result + 144) - 1;
  v24 = *(_DWORD *)(result + 260) - 1;
  v25 = *(_DWORD *)(result + 256) - 1;
  v26 = v18 + (v24 * v132) + 4 * v25;
  v125 = *(_DWORD *)(result + 188);
  v27 = v19 + (v24 * v13) + 16 * v25 - 16;
  v129 = *(_QWORD *)(result + 72);
  while (1)
  {
    if (a3 < v129)
    {
      v28 = *(_QWORD *)(result + 216);
      v29 = v129 - *(_QWORD *)(result + 224);
      v30 = a3 - v29 + (v28 >> 1);
      if (v30 < 1)
        goto LABEL_57;
      if (v30 >= v28)
        LODWORD(v31) = 0x3FFFFFFF;
      else
        v31 = (unint64_t)(*(_QWORD *)(result + 232) * v30) >> 32;
      v38 = v125 | v31;
      v39 = v29 + 0x1000000;
      v36 = a3 - (v29 + 0x1000000);
      v37 = 512;
      goto LABEL_22;
    }
    if (a3 <= v128)
    {
      v36 = 0;
      v37 = ((unint64_t)a3 >> 22) & 0x3C0;
      v38 = 0x3FFFFFFF;
      v39 = a3;
LABEL_22:
      v40 = v127;
      goto LABEL_25;
    }
    v32 = *(_QWORD *)(result + 216);
    v33 = *(_QWORD *)(result + 224) + v128;
    v34 = v33 - a3 + (v32 >> 1);
    if (v34 < 1)
      goto LABEL_57;
    if (v34 >= v32)
      LODWORD(v35) = 0x3FFFFFFF;
    else
      v35 = (unint64_t)(*(_QWORD *)(result + 232) * v34) >> 32;
    v40 = v127;
    v38 = v125 | v35;
    v39 = v33 - 0x1000000;
    v36 = a3 - (v33 - 0x1000000);
    v37 = 448;
LABEL_25:
    if (a2 >= v40)
      break;
    v41 = *(_QWORD *)(result + 192);
    v42 = v40 - *(_QWORD *)(result + 200);
    v43 = a2 - v42 + (v41 >> 1);
    if (v43 >= 1)
    {
      if (v43 < v41)
        v38 = ((v38 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v43) >> 32) >> 15)) | v125;
      v44 = v42 + 0x1000000;
      v45 = a2 - (v42 + 0x1000000);
      v46 = 32;
      goto LABEL_36;
    }
LABEL_57:
    v63 = a4 - 1;
    a2 += v14;
    a3 += v20;
    v22 += 20;
    *(_BYTE *)++v23 = 0;
LABEL_58:
    a4 = v63;
    if (!v63)
      return result;
  }
  if (a2 <= v126)
  {
    v45 = 0;
    v46 = ((unint64_t)a2 >> 26) & 0x3C;
    v44 = a2;
    goto LABEL_36;
  }
  v47 = *(_QWORD *)(result + 192);
  v48 = *(_QWORD *)(result + 200) + v126;
  v49 = v48 - a2 + (v47 >> 1);
  if (v49 < 1)
    goto LABEL_57;
  if (v49 < v47)
    v38 = ((v38 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v49) >> 32) >> 15)) | v125;
  v44 = v48 - 0x1000000;
  v45 = a2 - (v48 - 0x1000000);
  v46 = 28;
LABEL_36:
  if (v38 < 0x400000)
    goto LABEL_57;
  if (v15)
  {
    v50 = (v16 & ((v39 % v16) >> 63)) + v39 % v16;
    v51 = (v15 & ((v44 % v15) >> 63)) + v44 % v15;
    if (v50 >= v16)
      v52 = v16;
    else
      v52 = 0;
    v39 = v50 - v52;
    if (v51 >= v15)
      v53 = v15;
    else
      v53 = 0;
    v44 = v51 - v53;
    v36 += v39;
    v45 += v44;
  }
  v54 = v39 >> 32;
  v55 = (v44 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  v56 = v19 + SHIDWORD(v39) * (uint64_t)v13 + 4 * v55;
  v57 = *(float32x4_t **)(result + 32);
  if (v27 >= v56)
    v58 = (float32x4_t *)v56;
  else
    v58 = (float32x4_t *)v27;
  if (v58 < v57)
    v58 = *(float32x4_t **)(result + 32);
  if (v18)
  {
    v59 = v18 + (int)v54 * (uint64_t)v132 + v55;
    v60 = *(float **)(result + 40);
    if (v26 >= v59)
      v61 = (float *)v59;
    else
      v61 = (float *)v26;
    if (v61 >= v60)
      v60 = v61;
    v62 = *v60;
  }
  else
  {
    v59 = 0;
    v62 = 1.0;
  }
  v64 = *v58;
  if (v17)
  {
    v65 = *(_DWORD *)(v17 + (v46 | v37));
LABEL_64:
    v66 = v65 & 0xF;
    v67 = v65 >> 8;
    v68 = HIBYTE(v65) & 3;
    if (v66 == 1)
    {
      LODWORD(v92) = SBYTE1(v65);
      if (v15)
      {
        v93 = v36 + ((uint64_t)SBYTE1(v65) << 32);
        v94 = v16 & (v93 >> 63);
        if (v94 + v93 >= v16)
          v95 = v16;
        else
          v95 = 0;
        v92 = (v94 + ((uint64_t)(char)v67 << 32) - v95) >> 32;
      }
      v96 = (float32x4_t *)(v56 + (int)v92 * (uint64_t)v13);
      if (v27 < (unint64_t)v96)
        v96 = (float32x4_t *)v27;
      if (v96 < v57)
        v96 = v57;
      v97 = *v96;
      v98 = 1.0;
      if (v18)
      {
        v99 = (float *)(v59 + (int)v92 * (uint64_t)v132);
        if (v26 < (unint64_t)v99)
          v99 = (float *)v26;
        if ((unint64_t)v99 < *(_QWORD *)(result + 40))
          v99 = *(float **)(result + 40);
        v98 = *v99;
      }
      v100 = &interpolate_cmykaf[5 * v68];
    }
    else
    {
      if (v66 != 2)
      {
        if (v66 == 3)
        {
          LODWORD(v69) = SBYTE1(v65);
          v70 = SBYTE2(v65);
          if (v15)
          {
            v71 = v67 << 56;
            v72 = v36 + ((uint64_t)SBYTE1(v65) << 32);
            v73 = v45 + ((uint64_t)SBYTE2(v65) << 32);
            v74 = v16 & (v72 >> 63);
            v75 = v15 & (v73 >> 63);
            v76 = v75 + v73;
            if (v74 + v72 >= v16)
              v77 = v16;
            else
              v77 = 0;
            if (v76 >= v15)
              v78 = v15;
            else
              v78 = 0;
            v69 = (v74 + (v71 >> 24) - v77) >> 32;
            v79 = v75 + ((uint64_t)((unint64_t)HIWORD(v65) << 56) >> 24) - v78;
            v68 = HIBYTE(v65) & 3;
            v70 = v79 >> 32;
          }
          v80 = v56 + 16 * v70;
          if (v27 >= v80)
            v81 = (float32x4_t *)(v56 + 16 * v70);
          else
            v81 = (float32x4_t *)v27;
          if (v81 < v57)
            v81 = v57;
          v82 = (float32x4_t *)(v80 + (int)v69 * (uint64_t)v13);
          if (v27 < (unint64_t)v82)
            v82 = (float32x4_t *)v27;
          if (v82 < v57)
            v82 = v57;
          v83 = *v81;
          v84 = *v82;
          v85 = 1.0;
          v86 = 1.0;
          if (v18)
          {
            v87 = (float *)(v59 + 4 * v70);
            v88 = *(_QWORD *)(result + 40);
            if (v26 >= (unint64_t)v87)
              v89 = v87;
            else
              v89 = (float *)v26;
            if ((unint64_t)v89 < v88)
              v89 = *(float **)(result + 40);
            v85 = *v89;
            v90 = (float *)((char *)v87 + (int)v69 * (uint64_t)v132);
            if (v26 < (unint64_t)v90)
              v90 = (float *)v26;
            if ((unint64_t)v90 < v88)
              v90 = *(float **)(result + 40);
            v86 = *v90;
          }
          LODWORD(a11) = interpolate_cmykaf[5 * v68 + 4];
          LODWORD(a12) = interpolate_cmykaf[5 * ((v65 >> 28) & 3) + 4];
          v91 = vmlaq_n_f32(vmlsq_lane_f32(v64, v64, *(float32x2_t *)&a11, 0), v83, *(float *)&a11);
          v64 = vmlaq_n_f32(vmlsq_lane_f32(v91, v91, *(float32x2_t *)&a12, 0), vmlaq_n_f32(vmlsq_lane_f32(v83, v83, *(float32x2_t *)&a11, 0), v84, *(float *)&a11), *(float *)&a12);
          v62 = (float)((float)((float)(v62 - (float)(v62 * *(float *)&a11)) + (float)(v85 * *(float *)&a11))
                      - (float)((float)((float)(v62 - (float)(v62 * *(float *)&a11)) + (float)(v85 * *(float *)&a11))
                              * *(float *)&a12))
              + (float)((float)((float)(v85 - (float)(v85 * *(float *)&a11)) + (float)(v86 * *(float *)&a11))
                      * *(float *)&a12);
        }
        goto LABEL_129;
      }
      v101 = SBYTE2(v65);
      if (v15)
      {
        v102 = (unint64_t)HIWORD(v65) << 56;
        v103 = v45 + (v102 >> 24);
        v104 = v15 & (v103 >> 63);
        if (v104 + v103 >= v15)
          v105 = v15;
        else
          v105 = 0;
        v101 = (v104 + (v102 >> 24) - v105) >> 32;
      }
      v106 = (float32x4_t *)(v56 + 16 * v101);
      if (v27 < (unint64_t)v106)
        v106 = (float32x4_t *)v27;
      if (v106 < v57)
        v106 = v57;
      v97 = *v106;
      v98 = 1.0;
      if (v18)
      {
        v107 = (float *)(v59 + 4 * v101);
        if (v26 < (unint64_t)v107)
          v107 = (float *)v26;
        if ((unint64_t)v107 < *(_QWORD *)(result + 40))
          v107 = *(float **)(result + 40);
        v98 = *v107;
      }
      v100 = &interpolate_cmykaf[5 * ((v65 >> 28) & 3)];
    }
    LODWORD(a9) = v100[4];
    v64 = vmlaq_n_f32(vmlsq_lane_f32(v64, v64, *(float32x2_t *)&a9, 0), v97, *(float *)&a9);
    v62 = (float)(v62 - (float)(v62 * *(float *)&a9)) + (float)(v98 * *(float *)&a9);
  }
LABEL_129:
  *(float32x4_t *)(v22 + 20) = v64;
  *(float *)(v22 + 36) = v62;
  *(_BYTE *)(v23 + 1) = v38 >> 22;
  if (a4 != 1)
  {
    v108 = 0;
    v109 = (float *)(v22 + 56);
    a2 += v14;
    v110 = v126 - a2;
    a3 += v20;
    v111 = v128 - a3;
    while (((v111 | v110 | (a3 - v129) | (a2 - v127)) & 0x8000000000000000) == 0)
    {
      if (v15)
      {
        v112 = (v16 & ((v36 + v130) >> 63)) + v36 + v130;
        v113 = (v15 & ((v45 + v131) >> 63)) + v45 + v131;
        if (v112 >= v16)
          v114 = v16;
        else
          v114 = 0;
        v36 = v112 - v114;
        if (v113 >= v15)
          v115 = v15;
        else
          v115 = 0;
        v45 = v113 - v115;
        v116 = v36;
        v117 = v45;
      }
      else
      {
        v116 = a3;
        v117 = a2;
      }
      v118 = v116 >> 32;
      v119 = v19 + (int)v118 * (uint64_t)v13;
      v120 = (v117 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
      v56 = v119 + 4 * v120;
      v57 = *(float32x4_t **)(result + 32);
      if (v27 >= v56)
        v121 = (float32x4_t *)(v119 + 4 * v120);
      else
        v121 = (float32x4_t *)v27;
      if (v121 < v57)
        v121 = *(float32x4_t **)(result + 32);
      if (v18)
      {
        v59 = v18 + (int)v118 * (uint64_t)v132 + v120;
        v122 = *(float **)(result + 40);
        if (v26 >= v59)
          v123 = (float *)v59;
        else
          v123 = (float *)v26;
        if (v123 >= v122)
          v122 = v123;
        v62 = *v122;
      }
      else
      {
        v62 = 1.0;
      }
      v64 = *v121;
      if (v17)
      {
        v65 = *(_DWORD *)(v17 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v65 & 0xF) != 0)
        {
          v23 += v108 + 1;
          v22 = (uint64_t)(v109 - 9);
          a4 += ~(_DWORD)v108;
          v38 = -1;
          goto LABEL_64;
        }
      }
      *((float32x4_t *)v109 - 1) = v64;
      *v109 = v62;
      v109 += 5;
      v124 = v23 + v108++;
      a2 += v14;
      *(_BYTE *)(v124 + 2) = -1;
      v110 -= v14;
      a3 += v20;
      v111 -= v20;
      if (a4 - 1 == (_DWORD)v108)
        return result;
    }
    v23 += v108 + 1;
    v22 = (uint64_t)(v109 - 9);
    v63 = ~(_DWORD)v108 + a4;
    goto LABEL_58;
  }
  return result;
}

float32x2_t *CMYKf_pattern(uint64_t a1, float32x2_t *a2, unsigned int a3, int a4, float32x2_t *a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  _DWORD *v14;
  float32x2_t *v15;
  float v16;
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t *v22;
  double v24;
  double v25;

  v14 = *(_DWORD **)(*(_QWORD *)a1 + 64);
  LODWORD(a10) = *v14;
  LODWORD(a11) = v14[1];
  if (a2 && a3 > 0x13
    || (v24 = a10,
        v25 = a11,
        v15 = (float32x2_t *)malloc_type_malloc(0x44uLL, 0x705560E0uLL),
        a10 = v24,
        a11 = v25,
        (a2 = v15) != 0))
  {
    if (*(float *)&a10 <= a6)
      v16 = a6;
    else
      v16 = *(float *)&a10;
    if (*(float *)&a11 < a6)
      v16 = *(float *)&a11;
    if (a5)
      v17 = a4;
    else
      v17 = 0;
    v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    if (v17 == 1)
    {
      v19.f32[0] = v16 * (float)(*(float *)&a11 - a5->f32[0]);
    }
    else if (v17 == 4)
    {
      v18 = vmul_n_f32(*a5, v16);
      *(float *)&a10 = v16 * a5[1].f32[0];
      v19.f32[0] = v16 * a5[1].f32[1];
    }
    else
    {
      v19.i32[0] = LODWORD(a10);
      if (v17 == 3)
      {
        v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
        v20 = vmul_n_f32(vsub_f32(v19, *a5), v16);
        v21 = v16 * (float)(*(float *)&a11 - a5[1].f32[0]);
        v19.i32[0] = v20.i32[1];
        if (v20.f32[0] < v20.f32[1])
          v19.f32[0] = v20.f32[0];
        if (v21 < v19.f32[0])
          v19.f32[0] = v16 * (float)(*(float *)&a11 - a5[1].f32[0]);
        v18 = vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
        *(float *)&a10 = v21 - v19.f32[0];
      }
    }
    *(_OWORD *)a2->f32 = xmmword_185004D40;
    a2[3].i32[0] = 0;
    a2[2] = (float32x2_t)1;
    a2[6] = v18;
    a2[8].f32[0] = v16;
    v22 = a2 + 8;
    if (v16 >= *(float *)&a11)
      v22 = 0;
    a2[4] = (float32x2_t)&a2[6];
    a2[5] = (float32x2_t)v22;
    a2[7].i32[0] = LODWORD(a10);
    a2[7].i32[1] = v19.i32[0];
  }
  return a2;
}

uint64_t CMYKf_mark(uint64_t a1, __n128 a2)
{
  return CMYKf_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

uint64_t CMYKf_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint16x4_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  size_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float32x4_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int8x16_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  float32x4_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  float v109;
  float v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  float v119;
  float32x4_t v120;
  float v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  float v129;
  float v130;
  float v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  float v140;
  float v141;
  float v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  float v150;
  float v151;
  float v152;
  float v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  float v163;
  float v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  float v174;
  float v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  float v183;
  float v184;
  float v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  float v193;
  float v194;
  float v195;
  float v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  float v224;
  float v225;
  float32x2_t v226;
  float32x2_t v227;
  __int128 v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  float32x4_t v236;
  float32x4_t v237;
  int8x16_t v238;
  int8x16_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v251;
  float32x4_t v252;
  float32x4_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  int v285;
  float32x4_t v286;
  float32x4_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  float v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  float v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  float v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  int8x16_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  float32x4_t v359;
  int v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  float v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  float v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  float v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  float v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  int v419;
  float v420;
  float32x4_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  float v429;
  float32x4_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  int v437;
  float v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  float v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  int v454;
  float32x2_t v455;
  int32x2_t v456;
  float32x2_t v457;
  unint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  int v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint8x8_t v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  int v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  int v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  int v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  unint64_t v499;
  unint64_t v500;
  int v501;
  int v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  char *v508;
  unint64_t v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  char *v513;
  uint64_t v514;
  char *v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unsigned int v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int v529;
  int v530;
  uint64_t v531;
  float32x4_t v532;
  uint64_t v533;
  int v534;
  unsigned int v535;
  unsigned int v536;
  int v537;
  unsigned int v538;
  float32x4_t v539;
  float32x4_t v540;
  unsigned int v541;
  int v542;
  int v543;
  float v544;
  float v545;
  int v546;
  int v547;
  float v548;
  float v549;
  int v550;
  int v551;
  float v552;
  int v553;
  int v554;
  float v555;
  float v556;
  float v557;
  int v558;
  uint64_t v559;
  int v560;
  int v561;
  int v562;
  uint64_t v563;
  int v564;
  int v565;
  int v566;
  int v567;
  float v568;
  float v569;
  int v570;
  int v571;
  float v572;
  float v573;
  float32x4_t v574;
  int v575;
  int v576;
  float v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  int v583;
  uint64_t v584;
  int v585;
  float v586;
  float32x4_t v587;
  int v588;
  int v589;
  float32x4_t v590;
  float32x4_t v591;
  int8x16_t v592;
  int v593;
  float32x4_t v594;
  int8x16_t v595;
  int8x16_t v596;
  float32x4_t v597;
  float32x4_t v598;
  int v599;
  int v601;
  float32x4_t v602;
  float v603;
  uint64_t v604;
  int v605;
  int v606;
  float v607;
  int v608;
  float32x4_t v609;
  float32x4_t v610;
  int8x16_t v611;
  int v612;
  float32x4_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  float32x4_t v618;
  int v619;
  float32x4_t v620;
  float32x4_t v621;
  int8x16_t v622;
  int v623;
  float32x4_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  float32x4_t v629;
  float v630;
  uint64_t v631;
  int v632;
  int v633;
  float v634;
  float v635;
  uint64_t v636;
  int v637;
  int v638;
  float v639;
  __int32 v640;
  uint64_t v641;
  int v642;
  int v643;
  float v644;
  uint64_t v645;
  int v646;
  int v647;
  float v648;
  int v649;
  float32x4_t v650;
  int v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  int8x16_t v657;
  int v658;
  float32x4_t v659;
  float32x4_t v660;
  int v661;
  float32x4_t v662;
  float v663;
  uint64_t v664;
  int v665;
  int v666;
  float v667;
  float v668;
  uint64_t v669;
  int v670;
  int v671;
  float v672;
  float v673;
  uint64_t v674;
  int v675;
  int v676;
  float v677;
  float v678;
  uint64_t v679;
  int v680;
  int v681;
  float v682;
  int *v683;
  int v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  unint64_t v690;
  int v691;
  int v692;
  char *v693;
  char *v694;
  unint64_t v695;
  unint64_t v696;
  char *v697;
  int v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  int v703;
  int v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  int v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unint64_t v726;
  unsigned int v727;
  unint64_t v728;
  unint64_t v729;
  unint64_t v730;
  float32x4_t v731;
  uint64_t v732;
  int v733[2];
  int v734[2];
  int v735;
  int v736;
  uint64_t v737;
  unint64_t v738;
  float32x4_t v739;
  uint64_t v740;
  float32x4_t v741;
  uint64_t v742;
  int v743;
  int v744;
  int v745;
  _OWORD v746[7];
  __int128 v747;
  __int128 v748;
  __int128 v749;
  float32x4_t v750;
  int v751;
  uint64_t v752;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v752 = *MEMORY[0x1E0C80C00];
  v18 = *(char **)(v3 + 96);
  v19 = *(_QWORD *)(v3 + 48);
  v20 = *(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
  if ((int)v20 > 27)
    return 0xFFFFFFFFLL;
  v22 = v3;
  v23 = *(unsigned int *)(v3 + 4);
  v24 = v23 - 1;
  if ((int)v23 < 1)
    return 0;
  v25 = *(_DWORD *)(v3 + 8);
  v26 = (v25 - 1);
  if (v25 < 1)
    return 0;
  v27 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v27)
  {
    v29 = *(_DWORD *)v3 & 0xFF00;
    v688 = v3;
    v689 = *(_DWORD *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
    if (v29 == 1024)
    {
      LODWORD(v746[0]) = *(_DWORD *)(v3 + 4);
      v745 = v25;
      v17.i32[0] = 1.0;
      if (v18)
        v17.i32[0] = *(_DWORD *)v18;
      v30 = *(_QWORD *)(v3 + 40);
      v31 = (unint64_t)*(int *)(v3 + 28) >> 4;
      v33 = *(int *)(v3 + 12);
      v32 = *(int *)(v3 + 16);
      if (v19)
      {
        v34 = (unint64_t)*(int *)(v3 + 32) >> 2;
        *(_QWORD *)v733 = v19 + 4 * (v33 + v34 * v32);
        v727 = 1;
      }
      else
      {
        *(_QWORD *)v733 = 0;
        v34 = 0;
        v727 = 0;
      }
      v44 = *(float32x4_t *)*(_QWORD *)(v3 + 88);
      v13.f32[0] = 1.0 - v17.f32[0];
      v45 = v33 + v32 * v31;
      v46 = v30 + 16 * v45;
      v739 = v44;
      v741 = v17;
      v731 = v13;
      v723 = v34;
      v725 = (unint64_t)*(int *)(v3 + 28) >> 4;
      v729 = v46;
      if (v27)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v27, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v23, v25);
        v48 = v47;
        v49 = *(_QWORD *)v733;
        v50 = v34;
        if (v47)
          goto LABEL_1238;
        return 1;
      }
      v737 = 0;
      if (v19)
        v57 = v23;
      else
        v57 = 0;
      v50 = v34 - v57;
      v58 = v23;
      v49 = *(_QWORD *)v733;
      v59 = (float32x4_t *)(v30 + 16 * v45);
      v60 = v58;
LABEL_918:
      v46 = v31 - v58;
      switch((int)v20)
      {
        case 0:
          v521 = v34;
          v522 = v46 + v60;
          v523 = v745;
          v524 = v745 - 1;
          v525 = (char *)&v59[(v522 * v524) & (v522 >> 63)];
          if (v522 < 0)
            v522 = -v522;
          CGBlt_fillBytes(16 * v60, v745, 0, v525, 16 * v522);
          if (v19)
          {
            v526 = v50 + v60;
            v49 += 4 * ((v526 * v524) & (v526 >> 63));
            if (v526 >= 0)
              v50 += v60;
            else
              v50 = -v526;
            CGBlt_fillBytes(4 * v60, v523, 0, (char *)v49, 4 * v50);
          }
          v34 = v521;
          goto LABEL_1234;
        case 1:
          v527 = v46 + v60;
          if (v527 < 0)
          {
            v59 += v527 * (v745 - 1);
            v527 = -v527;
          }
          v528 = *(_QWORD *)(v688 + 88);
          v529 = v745;
          if (v528)
            CGSFillDRAM64(v59, 16 * v527, 16 * v60, v745, v528, 16, 16, 1, 0, 0);
          else
            CGBlt_fillBytes(16 * v60, v745, 0, (char *)v59, 16 * v527);
          v48 = v737;
          if (v19)
          {
            v683 = *(int **)(v688 + 96);
            if (!v683)
              v683 = (int *)&_CMYK_float_alpha;
            v49 += 4 * (((v50 + v60) * (int)(v529 - 1)) & ((uint64_t)(v50 + v60) >> 63));
            if ((uint64_t)(v50 + v60) >= 0)
              v50 += v60;
            else
              v50 = -(uint64_t)(v50 + v60);
            CGBlt_fillBytes(4 * v60, v529, *v683, (char *)v49, 4 * v50);
          }
          LODWORD(v20) = v689;
          v46 = v729;
          goto LABEL_1236;
        case 2:
          v530 = v745;
          v531 = 4 * v727;
          v532 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v533 = 16 * v727;
          if (v19)
          {
            do
            {
              v534 = v60;
              if (v60 >= 4)
              {
                v535 = (v60 >> 2) + 1;
                do
                {
                  *v59 = vmlaq_f32(v44, v532, *v59);
                  *(float *)v49 = v17.f32[0] + (float)(*(float *)v49 * v13.f32[0]);
                  v59[1] = vmlaq_f32(v44, v532, v59[1]);
                  *(float *)(v49 + 4) = v17.f32[0] + (float)(*(float *)(v49 + 4) * v13.f32[0]);
                  v59[2] = vmlaq_f32(v44, v532, v59[2]);
                  *(float *)(v49 + 8) = v17.f32[0] + (float)(*(float *)(v49 + 8) * v13.f32[0]);
                  v59[3] = vmlaq_f32(v44, v532, v59[3]);
                  *(float *)(v49 + 12) = v17.f32[0] + (float)(*(float *)(v49 + 12) * v13.f32[0]);
                  v59 += 4;
                  --v535;
                  v49 += v533;
                }
                while (v535 > 1);
                v534 = v60 & 3;
              }
              if (v534 >= 1)
              {
                v536 = v534 + 1;
                do
                {
                  *v59 = vmlaq_f32(v44, v532, *v59);
                  ++v59;
                  *(float *)v49 = v17.f32[0] + (float)(*(float *)v49 * v13.f32[0]);
                  v49 += v531;
                  --v536;
                }
                while (v536 > 1);
              }
              v59 += v46;
              v49 += 4 * v50;
              --v530;
            }
            while (v530);
          }
          else
          {
            do
            {
              v537 = v60;
              if (v60 >= 4)
              {
                v538 = (v60 >> 2) + 1;
                do
                {
                  v539 = vmlaq_f32(v44, v532, v59[1]);
                  *v59 = vmlaq_f32(v44, v532, *v59);
                  v59[1] = v539;
                  v540 = vmlaq_f32(v44, v532, v59[3]);
                  v59[2] = vmlaq_f32(v44, v532, v59[2]);
                  v59[3] = v540;
                  v59 += 4;
                  --v538;
                  v49 += v533;
                }
                while (v538 > 1);
                v537 = v60 & 3;
              }
              if (v537 >= 1)
              {
                v541 = v537 + 1;
                do
                {
                  *v59 = vmlaq_f32(v44, v532, *v59);
                  ++v59;
                  v49 += v531;
                  --v541;
                }
                while (v541 > 1);
              }
              v59 += v46;
              v49 += 4 * v50;
              --v530;
            }
            while (v530);
          }
          goto LABEL_1233;
        case 3:
          v542 = v745;
          do
          {
            v543 = v60;
            do
            {
              v544 = *(float *)v49;
              if (*(float *)v49 <= 0.0)
              {
                v59->i64[0] = 0;
                v59->i64[1] = 0;
                v545 = 0.0;
              }
              else if (v544 >= 1.0)
              {
                *v59 = v44;
                v545 = v17.f32[0];
              }
              else
              {
                *v59 = vmulq_n_f32(v44, v544);
                v545 = v17.f32[0] * v544;
              }
              *(float *)v49 = v545;
              ++v59;
              v49 += 4 * v727;
              --v543;
            }
            while (v543);
            v59 += v46;
            v49 += 4 * v50;
            --v542;
          }
          while (v542);
          goto LABEL_1233;
        case 4:
          v546 = v745;
          do
          {
            v547 = v60;
            do
            {
              v548 = 1.0 - *(float *)v49;
              if (v548 <= 0.0)
              {
                v59->i64[0] = 0;
                v59->i64[1] = 0;
                v549 = 0.0;
              }
              else if (v548 >= 1.0)
              {
                *v59 = v44;
                v549 = v17.f32[0];
              }
              else
              {
                *v59 = vmulq_n_f32(v44, v548);
                v549 = v17.f32[0] * v548;
              }
              *(float *)v49 = v549;
              ++v59;
              v49 += 4 * v727;
              --v547;
            }
            while (v547);
            v59 += v46;
            v49 += 4 * v50;
            --v546;
          }
          while (v546);
          goto LABEL_1233;
        case 5:
          v550 = v745;
          do
          {
            v551 = v60;
            do
            {
              v552 = *(float *)v49;
              *v59 = vmlaq_n_f32(vmulq_n_f32(*v59, v13.f32[0]), v44, *(float *)v49);
              ++v59;
              *(float *)v49 = (float)(v13.f32[0] * v552) + (float)(v17.f32[0] * v552);
              v49 += 4 * v727;
              --v551;
            }
            while (v551);
            v59 += v46;
            v49 += 4 * v50;
            --v550;
          }
          while (v550);
          goto LABEL_1233;
        case 6:
          v553 = v745;
          while (1)
          {
            v554 = v60;
            do
            {
              v555 = *(float *)v49;
              v556 = 1.0 - *(float *)v49;
              if (v556 >= 1.0)
              {
                *v59 = v44;
                v557 = v17.f32[0];
              }
              else
              {
                if (v556 <= 0.0)
                  goto LABEL_982;
                *v59 = vmlaq_n_f32(*v59, v44, v556);
                v557 = v555 + (float)(v17.f32[0] * v556);
              }
              *(float *)v49 = v557;
LABEL_982:
              ++v59;
              v49 += 4 * v727;
              --v554;
            }
            while (v554);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v553)
              goto LABEL_1233;
          }
        case 7:
          v558 = v745;
          v559 = 4 * v727;
          if (v19)
          {
            do
            {
              v560 = v60;
              do
              {
                *v59 = vmulq_n_f32(*v59, v17.f32[0]);
                ++v59;
                *(float *)v49 = v17.f32[0] * *(float *)v49;
                v49 += v559;
                --v560;
              }
              while (v560);
              v59 += v46;
              v49 += 4 * v50;
              --v558;
            }
            while (v558);
          }
          else
          {
            do
            {
              v561 = v60;
              do
              {
                *v59 = vmulq_n_f32(*v59, v17.f32[0]);
                ++v59;
                v49 += v559;
                --v561;
              }
              while (v561);
              v59 += v46;
              v49 += 4 * v50;
              --v558;
            }
            while (v558);
          }
          goto LABEL_1233;
        case 8:
          v562 = v745;
          v563 = 4 * v727;
          if (v19)
          {
            do
            {
              v564 = v60;
              do
              {
                *v59 = vmulq_n_f32(*v59, v13.f32[0]);
                ++v59;
                *(float *)v49 = v13.f32[0] * *(float *)v49;
                v49 += v563;
                --v564;
              }
              while (v564);
              v59 += v46;
              v49 += 4 * v50;
              --v562;
            }
            while (v562);
          }
          else
          {
            do
            {
              v565 = v60;
              do
              {
                *v59 = vmulq_n_f32(*v59, v13.f32[0]);
                ++v59;
                v49 += v563;
                --v565;
              }
              while (v565);
              v59 += v46;
              v49 += 4 * v50;
              --v562;
            }
            while (v562);
          }
          goto LABEL_1233;
        case 9:
          v566 = v745;
          do
          {
            v567 = v60;
            do
            {
              v568 = *(float *)v49;
              v569 = 1.0 - *(float *)v49;
              *v59 = vmlaq_n_f32(vmulq_n_f32(*v59, v17.f32[0]), v44, v569);
              ++v59;
              *(float *)v49 = (float)(v17.f32[0] * v568) + (float)(v17.f32[0] * v569);
              v49 += 4 * v727;
              --v567;
            }
            while (v567);
            v59 += v46;
            v49 += 4 * v50;
            --v566;
          }
          while (v566);
          goto LABEL_1233;
        case 10:
          v570 = v745;
          do
          {
            v571 = v60;
            do
            {
              v572 = *(float *)v49;
              v573 = 1.0 - *(float *)v49;
              *v59 = vmlaq_n_f32(vmulq_n_f32(*v59, v13.f32[0]), v44, v573);
              ++v59;
              *(float *)v49 = (float)(v13.f32[0] * v572) + (float)(v17.f32[0] * v573);
              v49 += 4 * v727;
              --v571;
            }
            while (v571);
            v59 += v46;
            v49 += 4 * v50;
            --v570;
          }
          while (v570);
          goto LABEL_1233;
        case 11:
          v574 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v575 = v745;
          if (v19)
          {
            do
            {
              v576 = v60;
              do
              {
                v577 = *(float *)v49;
                v578 = v17.f32[0] + *(float *)v49;
                v579 = v59->f32[1];
                if (v578 > 1.0)
                  v578 = 1.0;
                v59->f32[0] = v578 - (float)(v574.f32[0] + (float)(*(float *)v49 - v59->f32[0]));
                v580 = v59->f32[3];
                v581 = v574.f32[2] + (float)(*(float *)v49 - v59->f32[2]);
                v59->f32[1] = v578 - (float)(v574.f32[1] + (float)(v577 - v579));
                v582 = v574.f32[3] + (float)(*(float *)v49 - v580);
                v59->f32[2] = v578 - v581;
                *(float *)v49 = v578;
                v59->f32[3] = v578 - v582;
                ++v59;
                v49 += 4 * v727;
                --v576;
              }
              while (v576);
              v59 += v46;
              v49 += 4 * v50;
              --v575;
            }
            while (v575);
          }
          else
          {
            __asm { FMOV            V1.4S, #1.0 }
            do
            {
              v685 = v60;
              do
              {
                *v59 = vsubq_f32(_Q1, vaddq_f32(v574, vsubq_f32(_Q1, *v59)));
                ++v59;
                v49 += 4 * v727;
                --v685;
              }
              while (v685);
              v59 += v46;
              v49 += 4 * v50;
              --v575;
            }
            while (v575);
          }
          goto LABEL_1233;
        case 12:
          v583 = v745;
          v584 = 4 * v727;
          if (v19)
          {
            do
            {
              v585 = v60;
              do
              {
                v586 = v17.f32[0] + *(float *)v49;
                if (v586 > 1.0)
                  v586 = 1.0;
                v587.i64[0] = v59->i64[0];
                *(float *)v49 = v586;
                v587.i64[1] = v59->i64[1];
                *v59++ = vaddq_f32(v44, v587);
                v49 += v584;
                --v585;
              }
              while (v585);
              v59 += v46;
              v49 += 4 * v50;
              --v583;
            }
            while (v583);
          }
          else
          {
            do
            {
              v588 = v60;
              do
              {
                *v59 = vaddq_f32(v44, *v59);
                ++v59;
                v49 += v584;
                --v588;
              }
              while (v588);
              v59 += v46;
              v49 += 4 * v50;
              --v583;
            }
            while (v583);
          }
          goto LABEL_1233;
        case 13:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v589 = v745;
          v590 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v591 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          v592 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v593 = v60;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_1038:
                v594 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v59);
                v595 = (int8x16_t)vmulq_f32(v594, v590);
                v596 = vbslq_s8(v592, (int8x16_t)vmlaq_f32((float32x4_t)v595, v591, v594), v595);
                v597 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v596, v590, 1.0 - v13.f32[0]), v596);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *v59 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v597);
                if (!v19)
                  goto LABEL_1040;
                goto LABEL_1039;
              }
              v13.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1038;
              *v59 = v44;
              v13.i32[0] = v17.i32[0];
LABEL_1039:
              *(_DWORD *)v49 = v13.i32[0];
LABEL_1040:
              ++v59;
              v49 += 4 * v727;
              --v593;
            }
            while (v593);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v589)
              goto LABEL_1233;
          }
        case 14:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v598 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v599 = v745;
          __asm { FMOV            V1.4S, #1.0 }
          while (1)
          {
            v601 = v60;
            do
            {
              if (!v19)
              {
                v12.i32[0] = 1.0;
LABEL_1050:
                v11.f32[0] = (float)(v17.f32[0] + v12.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
                v602 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), *v59);
                v12 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(v602, vsubq_f32(_Q1, v602), v598));
                *v59 = v12;
                if (!v19)
                  goto LABEL_1052;
                goto LABEL_1051;
              }
              v12.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1050;
              *v59 = v44;
              v11.i32[0] = v17.i32[0];
LABEL_1051:
              *(_DWORD *)v49 = v11.i32[0];
LABEL_1052:
              ++v59;
              v49 += 4 * v727;
              --v601;
            }
            while (v601);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v599)
              goto LABEL_1233;
          }
        case 15:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v603 = v44.f32[1];
          v604 = v44.i64[1];
          v605 = v745;
          while (1)
          {
            v606 = v60;
            do
            {
              if (v19)
              {
                v607 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1065;
                }
              }
              else
              {
                v607 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAoverlayPDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v607, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v603, *(float *)&v604, *((float *)&v604 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1065:
              ++v59;
              v49 += 4 * v727;
              --v606;
            }
            while (v606);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v605)
              goto LABEL_1219;
          }
        case 16:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v608 = v745;
          v609 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v610 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          v611 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v612 = v60;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_1075:
                v613 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v59);
                v614 = (int8x16_t)vmulq_n_f32(v613, v17.f32[0]);
                v615 = (int8x16_t)vmulq_n_f32(v609, v13.f32[0]);
                v616 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v614, (float32x4_t)v615), v615, v614);
                v617 = vbslq_s8(v611, (int8x16_t)vmlaq_f32((float32x4_t)v616, v610, v613), v616);
                v618 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v617, v609, 1.0 - v13.f32[0]), v617);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *v59 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v618);
                if (!v19)
                  goto LABEL_1077;
                goto LABEL_1076;
              }
              v13.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1075;
              *v59 = v44;
              v13.i32[0] = v17.i32[0];
LABEL_1076:
              *(_DWORD *)v49 = v13.i32[0];
LABEL_1077:
              ++v59;
              v49 += 4 * v727;
              --v612;
            }
            while (v612);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v608)
              goto LABEL_1233;
          }
        case 17:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v619 = v745;
          v620 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v621 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v11.i32[0] = 1.0;
          v622 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v623 = v60;
            do
            {
              if (!v19)
              {
                v13.i32[0] = 1.0;
LABEL_1087:
                v624 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), *v59);
                v625 = (int8x16_t)vmulq_n_f32(v624, v17.f32[0]);
                v626 = (int8x16_t)vmulq_n_f32(v620, v13.f32[0]);
                v627 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v626, (float32x4_t)v625), v626, v625);
                v628 = vbslq_s8(v622, (int8x16_t)vmlaq_f32((float32x4_t)v627, v621, v624), v627);
                v629 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v628, v620, 1.0 - v13.f32[0]), v628);
                v13.f32[0] = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
                *v59 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), v629);
                if (!v19)
                  goto LABEL_1089;
                goto LABEL_1088;
              }
              v13.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1087;
              *v59 = v44;
              v13.i32[0] = v17.i32[0];
LABEL_1088:
              *(_DWORD *)v49 = v13.i32[0];
LABEL_1089:
              ++v59;
              v49 += 4 * v727;
              --v623;
            }
            while (v623);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v619)
              goto LABEL_1233;
          }
        case 18:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v630 = v44.f32[1];
          v631 = v44.i64[1];
          v632 = v745;
          while (1)
          {
            v633 = v60;
            do
            {
              if (v19)
              {
                v634 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1102;
                }
              }
              else
              {
                v634 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAcolordodgePDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v634, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v630, *(float *)&v631, *((float *)&v631 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1102:
              ++v59;
              v49 += 4 * v727;
              --v633;
            }
            while (v633);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v632)
              goto LABEL_1219;
          }
        case 19:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v635 = v44.f32[1];
          v636 = v44.i64[1];
          v637 = v745;
          while (1)
          {
            v638 = v60;
            do
            {
              if (v19)
              {
                v639 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1115;
                }
              }
              else
              {
                v639 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAcolorburnPDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v639, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v635, *(float *)&v636, *((float *)&v636 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1115:
              ++v59;
              v49 += 4 * v727;
              --v638;
            }
            while (v638);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v637)
              goto LABEL_1219;
          }
        case 20:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v640 = v44.i32[1];
          v641 = v44.i64[1];
          v642 = v745;
          while (1)
          {
            v643 = v60;
            do
            {
              if (v19)
              {
                v13.i32[0] = *(_DWORD *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1128;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              v9.i32[0] = v59->i32[0];
              PDAsoftlightPDA(&v750, *(float32x2_t *)v9.f32, v59->f32[1], v59->f32[2], v59->f32[3], *(double *)v13.i64, *(int32x2_t *)v14.i8, *(double *)v15.i64, *(double *)v16.i64, v3, (uint64_t)v27, v4, v5, v6, v7, v8, (float32x2_t)__PAIR64__(v640, v44.u32[0]), *(float *)&v641, *((float *)&v641 + 1),
                v17.f32[0]);
              v9.i32[1] = v750.i32[1];
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1128:
              ++v59;
              v49 += 4 * v727;
              --v643;
            }
            while (v643);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v642)
              goto LABEL_1219;
          }
        case 21:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v644 = v44.f32[1];
          v645 = v44.i64[1];
          v646 = v745;
          while (1)
          {
            v647 = v60;
            do
            {
              if (v19)
              {
                v648 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1141;
                }
              }
              else
              {
                v648 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAhardlightPDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v648, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v644, *(float *)&v645, *((float *)&v645 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1141:
              ++v59;
              v49 += 4 * v727;
              --v647;
            }
            while (v647);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v646)
              goto LABEL_1219;
          }
        case 22:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v649 = v745;
          v650 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          while (1)
          {
            v651 = v60;
            do
            {
              if (!v19)
              {
                v11.i32[0] = 1.0;
LABEL_1151:
                v10.f32[0] = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
                v652 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *v59);
                v653 = vaddq_f32(v652, v650);
                v654 = vmulq_n_f32(v652, v17.f32[0]);
                v655 = vmulq_n_f32(v650, v11.f32[0]);
                v656 = vsubq_f32(v653, v654);
                v657 = (int8x16_t)vsubq_f32(v654, v655);
                v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vaddq_f32(vsubq_f32(v656, v655), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v657), (int8x16_t)vnegq_f32((float32x4_t)v657), v657)));
                *v59 = v11;
                if (!v19)
                  goto LABEL_1153;
                goto LABEL_1152;
              }
              v11.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1151;
              *v59 = v44;
              v10.i32[0] = v17.i32[0];
LABEL_1152:
              *(_DWORD *)v49 = v10.i32[0];
LABEL_1153:
              ++v59;
              v49 += 4 * v727;
              --v651;
            }
            while (v651);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v649)
              goto LABEL_1233;
          }
        case 23:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v658 = v745;
          v659 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v44);
          v660.i64[0] = 0xC0000000C0000000;
          v660.i64[1] = 0xC0000000C0000000;
          while (1)
          {
            v661 = v60;
            do
            {
              if (!v19)
              {
                v12.i32[0] = 1.0;
LABEL_1163:
                v11.f32[0] = (float)(v12.f32[0] + v17.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
                v662 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), *v59);
                v12 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(vaddq_f32(v662, v659), v660, vmulq_f32(v659, v662)));
                *v59 = v12;
                if (!v19)
                  goto LABEL_1165;
                goto LABEL_1164;
              }
              v12.i32[0] = *(_DWORD *)v49;
              if (*(float *)v49 > 0.0)
                goto LABEL_1163;
              *v59 = v44;
              v11.i32[0] = v17.i32[0];
LABEL_1164:
              *(_DWORD *)v49 = v11.i32[0];
LABEL_1165:
              ++v59;
              v49 += 4 * v727;
              --v661;
            }
            while (v661);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v658)
            {
LABEL_1233:
              v745 = 0;
              goto LABEL_1234;
            }
          }
        case 24:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v663 = v44.f32[1];
          v664 = v44.i64[1];
          v665 = v745;
          while (1)
          {
            v666 = v60;
            do
            {
              if (v19)
              {
                v667 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1178;
                }
              }
              else
              {
                v667 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAhuePDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v667, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v663, *(float *)&v664, *((float *)&v664 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1178:
              ++v59;
              v49 += 4 * v727;
              --v666;
            }
            while (v666);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v665)
            {
LABEL_1219:
              v745 = 0;
              LODWORD(v20) = v689;
              v34 = v723;
              v31 = v725;
LABEL_1234:
              v46 = v729;
LABEL_1235:
              v48 = v737;
LABEL_1236:
              if (!v48)
                return 1;
              v744 = 0;
              v743 = 0;
LABEL_1238:
              if (!shape_enum_clip_next(v48, &v744, &v743, v746, &v745))
                goto LABEL_1242;
              v737 = v48;
              v59 = (float32x4_t *)(v46 + 16 * v31 * v743 + 16 * v744);
              v58 = SLODWORD(v746[0]);
              if (v19)
              {
                v49 = *(_QWORD *)v733 + 4 * v34 * v743 + 4 * v744;
                v50 = v34 - SLODWORD(v746[0]);
              }
              v60 = v746[0];
              v44 = v739;
              v17 = v741;
              v13 = v731;
              goto LABEL_918;
            }
          }
        case 25:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v668 = v44.f32[1];
          v669 = v44.i64[1];
          v670 = v745;
          while (1)
          {
            v671 = v60;
            do
            {
              if (v19)
              {
                v672 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1191;
                }
              }
              else
              {
                v672 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAsaturationPDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v672, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v668, *(float *)&v669, *((float *)&v669 + 1), v17.f32[0]);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1191:
              ++v59;
              v49 += 4 * v727;
              --v671;
            }
            while (v671);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v670)
              goto LABEL_1219;
          }
        case 26:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v673 = v44.f32[1];
          v674 = v44.i64[1];
          v675 = v745;
          while (1)
          {
            v676 = v60;
            do
            {
              if (v19)
              {
                v677 = *(float *)v49;
                if (*(float *)v49 <= 0.0)
                {
                  *v59 = v44;
                  *(_DWORD *)v49 = v17.i32[0];
                  goto LABEL_1204;
                }
              }
              else
              {
                v677 = 1.0;
              }
              v750 = 0uLL;
              v751 = 0;
              PDAluminosityPDA(v750.f32, v44.f32[0], v673, *(float *)&v674, *((float *)&v674 + 1), v17.f32[0], *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v59->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v59->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v59->i64 + 4))), v59->f32[3], v677);
              *v59 = v750;
              if (v19)
                *(_DWORD *)v49 = v751;
              v44 = v739;
              v17.i32[0] = v741.i32[0];
LABEL_1204:
              ++v59;
              v49 += 4 * v727;
              --v676;
            }
            while (v676);
            v59 += v46;
            v49 += 4 * v50;
            if (!--v675)
              goto LABEL_1219;
          }
        case 27:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v678 = v44.f32[1];
          v679 = v44.i64[1];
          v680 = v745;
          break;
        default:
          goto LABEL_1235;
      }
LABEL_1209:
      v681 = v60;
      while (v19)
      {
        v682 = *(float *)v49;
        if (*(float *)v49 > 0.0)
          goto LABEL_1214;
        *v59 = v44;
        *(_DWORD *)v49 = v17.i32[0];
LABEL_1217:
        ++v59;
        v49 += 4 * v727;
        if (!--v681)
        {
          v59 += v46;
          v49 += 4 * v50;
          if (!--v680)
            goto LABEL_1219;
          goto LABEL_1209;
        }
      }
      v682 = 1.0;
LABEL_1214:
      v750 = 0uLL;
      v751 = 0;
      PDAluminosityPDA(v750.f32, v59->f32[0], v59->f32[1], v59->f32[2], v59->f32[3], v682, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, v44.f32[0], v678, *(float *)&v679, *((float *)&v679 + 1), v17.f32[0]);
      *v59 = v750;
      if (v19)
        *(_DWORD *)v49 = v751;
      v44 = v739;
      v17.i32[0] = v741.i32[0];
      goto LABEL_1217;
    }
    LODWORD(v746[0]) = *(_DWORD *)(v3 + 4);
    v745 = v25;
    v36 = *(int *)(v3 + 12);
    v35 = *(int *)(v3 + 16);
    v702 = (unint64_t)*(int *)(v3 + 28) >> 4;
    if (v19)
    {
      v696 = (unint64_t)*(int *)(v3 + 32) >> 2;
      v697 = (char *)(v19 + 4 * (v36 + v696 * v35));
      v37 = 0xFFFFFFFFLL;
    }
    else
    {
      v696 = 0;
      v697 = 0;
      v37 = 0;
    }
    v51 = *(_QWORD *)(v3 + 88);
    v695 = *(_QWORD *)(v3 + 40) + 16 * (v36 + v35 * v702);
    v52 = *(unsigned int *)(v3 + 104);
    v53 = *(_DWORD *)(v3 + 56);
    v54 = *(_DWORD *)(v3 + 60);
    v728 = (unint64_t)*(int *)(v3 + 76) >> 4;
    if (v29 != 256)
    {
      v56 = *(unsigned int *)(v3 + 64);
      v699 = *(_DWORD *)(v3 + 68);
      if (v18)
      {
        v730 = (unint64_t)*(int *)(v3 + 80) >> 2;
        v55 = 1;
      }
      else
      {
        v730 = 0;
        v55 = 0;
      }
      v726 = v51 + 16 * v728 * v699;
      v37 &= 1u;
      if (v27)
      {
        v80 = v18;
        v691 = *(_DWORD *)(v3 + 60);
        v692 = *(_DWORD *)(v3 + 56);
        v740 = v55;
        v742 = v37;
        LODWORD(v4) = 1;
        v732 = *(_QWORD *)(v3 + 88);
        v81 = v732;
        goto LABEL_53;
      }
      v738 = v696 - (v37 * v23);
      if (v51)
      {
        v89 = v54 % v699;
        v691 = v54 % v699;
        v701 = *(_QWORD *)(v3 + 88);
        v90 = v51 + 16 * v728 * v89;
        v91 = v53 % (int)v56;
        v51 = v90 + 16 * v91;
        v86 = v90 + 16 * (int)v56;
        v692 = v91;
        v732 = v51;
        v700 = 0;
        if (v18)
        {
          v92 = (uint64_t)&v18[4 * v730 * v89 + 4 * v91];
          v698 = 1;
          v55 = 1;
          v83 = (char *)v92;
        }
        else
        {
          v92 = 0;
          v83 = 0;
          v698 = 1;
        }
        v84 = v697;
        v93 = v695;
        v85 = v23;
        goto LABEL_65;
      }
      v691 = *(_DWORD *)(v3 + 60);
      v692 = *(_DWORD *)(v3 + 56);
      v86 = 0;
      v698 = 1;
      v85 = v23;
      v88 = (unint64_t)*(int *)(v3 + 76) >> 4;
      v87 = v730;
LABEL_61:
      v700 = 0;
      v701 = v51;
      v726 = 0;
      v728 = v88 - v85;
      v730 = v87 - (int)v55 * (int)v23;
      v732 = 0;
      v92 = (uint64_t)v18;
      v83 = v18;
      v84 = v697;
      v93 = v695;
      goto LABEL_65;
    }
    if (v18)
    {
      v730 = (unint64_t)*(int *)(v3 + 80) >> 2;
      v18 += 4 * v53 + 4 * v730 * v54;
      v55 = 0xFFFFFFFFLL;
    }
    else
    {
      v730 = 0;
      v55 = 0;
    }
    v51 += 16 * (v53 + v54 * v728);
    if (v728 == v702 && (uint64_t)(v695 - v51) >= 1)
    {
      if (v23 >= (v695 - v51) >> 4)
      {
        v695 += 16 * v24;
        v51 += 16 * v24;
        v697 += 4 * (v37 & v24);
        v4 = 0xFFFFFFFFLL;
        v728 = (unint64_t)*(int *)(v3 + 28) >> 4;
        v18 += 4 * (v55 & v24);
        goto LABEL_48;
      }
      if (v695 <= v51 + 16 * v702 * v26 + 16 * v24)
      {
        v695 += 16 * v702 * v26;
        v94 = &v697[4 * v696 * v26];
        v696 = -(uint64_t)v696;
        v697 = v94;
        v18 += 4 * v730 * v26;
        v37 &= 1u;
        v728 = -(uint64_t)v702;
        v730 = -(uint64_t)v730;
        v55 &= 1u;
        v4 = 1;
        v51 += 16 * v702 * v26;
        v702 = -(uint64_t)v702;
        goto LABEL_48;
      }
    }
    v37 &= 1u;
    v55 &= 1u;
    v4 = 1;
LABEL_48:
    v691 = *(_DWORD *)(v3 + 60);
    v692 = *(_DWORD *)(v3 + 56);
    if (v27)
    {
      v80 = v18;
      v740 = v55;
      v742 = v37;
      v732 = 0;
      v726 = 0;
      v81 = -1;
      v56 = v728;
      v699 = v730;
LABEL_53:
      v698 = v4;
      shape_enum_clip_alloc(v2, v3, (int *)v27, v4, v702, 1, v52, *(_DWORD *)(v3 + 108), v23, v25);
      v48 = v82;
      v18 = v80;
      v713 = (uint64_t)v80;
      v83 = v80;
      v84 = v697;
      v738 = v696;
      if (!v82)
        return 1;
      while (2)
      {
        if (!shape_enum_clip_next(v48, &v744, &v743, v746, &v745))
        {
LABEL_1242:
          v79 = (void *)v48;
LABEL_1243:
          free(v79);
          return 1;
        }
        v700 = v48;
        v701 = v51;
        if (v726)
        {
          v93 = v695 + 16 * v702 * v743 + 16 * v744;
          v497 = (v743 + *(_DWORD *)(v22 + 60)) % v699;
          v85 = SLODWORD(v746[0]);
          v498 = (v744 + *(_DWORD *)(v22 + 56)) % (int)v56;
          v499 = v51 + 16 * v728 * v497;
          v51 = v499 + 16 * v498;
          v86 = v499 + 16 * (int)v56;
          v37 = v742;
          if ((_DWORD)v742)
            v84 = &v697[4 * v696 * v743 + 4 * v744];
          v500 = v738;
          if ((_DWORD)v742)
            v500 = v696 - SLODWORD(v746[0]);
          v738 = v500;
          if ((_DWORD)v740)
            v55 = v740;
          else
            v55 = 0;
          v92 = v713;
          if ((_DWORD)v740)
          {
            v92 = (uint64_t)&v18[4 * v730 * v497 + 4 * v498];
            v83 = (char *)v92;
          }
          LODWORD(v23) = v746[0];
          v732 = v499 + 16 * v498;
          v691 = (v743 + *(_DWORD *)(v22 + 60)) % v699;
          v692 = (v744 + *(_DWORD *)(v22 + 56)) % (int)v56;
        }
        else
        {
          v501 = v744 * v698;
          LODWORD(v23) = v746[0];
          v502 = LODWORD(v746[0]) * v698;
          v93 = v695 + 16 * v702 * v743 + 16 * v744 * v698;
          v85 = LODWORD(v746[0]) * v698;
          v51 += 16 * v743 * (int)v56 + 16 * v744 * v698;
          v726 = 0;
          v728 = (int)v56 - LODWORD(v746[0]) * v698;
          v37 = v742;
          if ((_DWORD)v742)
            v84 = &v697[4 * v696 * v743 + 4 * v501];
          v503 = v738;
          v55 = v740;
          if ((_DWORD)v742)
            v503 = v696 - v502;
          v738 = v503;
          v504 = (uint64_t)&v18[4 * v743 * v699 + 4 * v501];
          v505 = v699 - v502;
          if ((_DWORD)v740)
            v83 = (char *)v504;
          v506 = v730;
          if ((_DWORD)v740)
            v506 = v505;
          v730 = v506;
          v86 = v81;
          v92 = v713;
        }
LABEL_65:
        v742 = v37;
        v740 = v55;
        *(_QWORD *)v734 = v702 - v85;
        v712 = v23;
        switch((int)v20)
        {
          case 0:
            v693 = v18;
            v713 = v92;
            v81 = v86;
            v95 = *(_QWORD *)v734 - (int)v23;
            v96 = v93 - 16 * ((int)v23 - 1);
            if (v698 >= 0)
            {
              v96 = v93;
              v95 = *(_QWORD *)v734 + (int)v23;
            }
            v97 = v745;
            v98 = v745 - 1;
            v99 = (char *)(v96 + 16 * ((v95 * v98) & (v95 >> 63)));
            if (v95 < 0)
              v95 = -v95;
            CGBlt_fillBytes(16 * v23, v745, 0, v99, 16 * v95);
            if ((_DWORD)v742)
            {
              if (v698 < 0)
              {
                v100 = v738 - (int)v23;
                v84 += -4 * (int)v23 + 4;
              }
              else
              {
                v100 = v738 + (int)v23;
              }
              v84 += 4 * ((v100 * v98) & (v100 >> 63));
              if (v100 < 0)
                v100 = -v100;
              v738 = v100;
              CGBlt_fillBytes(4 * v23, v97, 0, v84, 4 * v100);
            }
            v51 = v701;
            goto LABEL_828;
          case 1:
            v101 = *(unsigned __int8 *)(v22 + 1);
            if (v101 == 2)
            {
              if ((int)v23 >= 2 && (16 * v56) <= 0x40)
              {
                v9.i32[0] = 16 * v56;
                v471 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9.f32);
                v471.i16[0] = vaddlv_u8(v471);
                if (v471.i32[0] <= 1u)
                {
                  v713 = v92;
                  v81 = v86;
                  v472 = 16 * (v23 + v734[0]);
                  v735 = v745;
                  v51 = v701;
                  CGSFillDRAM64((_BYTE *)v93, v472, 16 * v23, v745, v701, 16 * v728, 16 * v56, v699, 16 * v692, v691);
                  if ((_DWORD)v742)
                  {
                    v48 = v700;
                    if ((_DWORD)v740)
                      CGSFillDRAM64(v84, 4 * (v23 + v738), 4 * v23, v735, (uint64_t)v18, 4 * v730, 4 * v56, v699, 4 * v692, v691);
                    else
                      CGBlt_fillBytes(4 * v23, v735, 1065353216, v84, 4 * (v23 + v738));
                  }
                  else
                  {
                    v48 = v700;
                  }
                  if (!v48)
                    return 1;
                  goto LABEL_868;
                }
              }
            }
            else if (v101 == 1)
            {
              v713 = v92;
              v693 = v18;
              v81 = v86;
              if (v698 < 0)
              {
                v102 = v728 - (int)v23;
                v51 -= 16 * ((int)v23 - 1);
                v103 = *(_QWORD *)v734 - (int)v23;
                v93 -= 16 * ((int)v23 - 1);
              }
              else
              {
                v102 = v728 + (int)v23;
                v103 = *(_QWORD *)v734 + (int)v23;
              }
              v507 = v745 - 1;
              v508 = (char *)(v51 + 16 * ((v102 * v507) & (v102 >> 63)));
              if (v102 >= 0)
                v509 = v102;
              else
                v509 = -v102;
              v724 = v745 - 1;
              if (v103 >= 0)
                LODWORD(v510) = v103;
              else
                v510 = -v103;
              v728 = v509;
              v736 = v745;
              CGBlt_copyBytes(16 * v23, v745, v508, (char *)(v93 + 16 * ((v103 * v507) & (v103 >> 63))), 16 * v509, 16 * v510);
              if ((_DWORD)v742)
              {
                v511 = 4 * v23;
                v48 = v700;
                v51 = v701;
                if ((_DWORD)v740)
                {
                  v512 = v730 - (int)v23;
                  v513 = &v83[-4 * (int)v23 + 4];
                  v514 = v738 - (int)v23;
                  v515 = &v84[-4 * (int)v23 + 4];
                  if (v698 >= 0)
                  {
                    v513 = v83;
                    v515 = v84;
                    v512 = v730 + (int)v23;
                    v514 = v738 + (int)v23;
                  }
                  v83 = &v513[4 * ((v512 * v724) & (v512 >> 63))];
                  if (v512 >= 0)
                    v516 = v512;
                  else
                    v516 = -v512;
                  v84 = &v515[4 * ((v514 * v724) & (v514 >> 63))];
                  if (v514 >= 0)
                    v517 = v514;
                  else
                    v517 = -v514;
                  v730 = v516;
                  v738 = v517;
                  CGBlt_copyBytes(v511, v736, v83, &v515[4 * ((v514 * v724) & (v514 >> 63))], 4 * v516, 4 * v517);
                }
                else
                {
                  v518 = v738 - (int)v23;
                  v519 = &v84[-4 * (int)v23 + 4];
                  if (v698 >= 0)
                  {
                    v519 = v84;
                    v518 = v738 + (int)v23;
                  }
                  v520 = (v518 * v724) & (v518 >> 63);
                  v84 = &v519[4 * v520];
                  if (v518 < 0)
                    v518 = -v518;
                  v738 = v518;
                  CGBlt_fillBytes(v511, v736, 1065353216, &v519[4 * v520], 4 * v518);
                }
              }
              else
              {
                v51 = v701;
LABEL_828:
                v48 = v700;
              }
              v18 = v693;
              if (!v48)
                return 1;
              goto LABEL_868;
            }
            if (!(_DWORD)v37)
            {
              v482 = (int)v55;
              v483 = v745;
              v418 = v732;
              do
              {
                v484 = v23;
                do
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  v485 = v51 + 16 * v698;
                  if (v485 >= v86)
                    v486 = -(uint64_t)(int)v56;
                  else
                    v486 = 0;
                  v83 += 4 * v482 + 4 * v486;
                  v51 = v485 + 16 * v486;
                  v93 += 16 * v698;
                  --v484;
                }
                while (v484);
                if (v726)
                {
                  v487 = v418 + 16 * v728;
                  if (v487 >= v726)
                    v488 = -(uint64_t)(v730 * v699);
                  else
                    v488 = 0;
                  v92 += 4 * v730 + 4 * v488;
                  if (v487 >= v726)
                    v489 = -(uint64_t)(v728 * v699);
                  else
                    v489 = 0;
                  v418 = v487 + 16 * v489;
                  v86 += 16 * v489 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v418;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                --v483;
              }
              while (v483);
              goto LABEL_864;
            }
            v473 = 4 * (int)v37;
            v474 = 16 * v698;
            if (!(_DWORD)v55)
            {
              v490 = v745;
              v418 = v732;
              do
              {
                v491 = v23;
                do
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = 1065353216;
                  v492 = v51 + 16 * v698;
                  if (v492 >= v86)
                    v493 = -(uint64_t)(int)v56;
                  else
                    v493 = 0;
                  v83 += 4 * v493;
                  v51 = v492 + 16 * v493;
                  v84 += v473;
                  v93 += v474;
                  --v491;
                }
                while (v491);
                if (v726)
                {
                  v494 = v418 + 16 * v728;
                  if (v494 >= v726)
                    v495 = -(uint64_t)(v730 * v699);
                  else
                    v495 = 0;
                  v92 += 4 * v730 + 4 * v495;
                  if (v494 >= v726)
                    v496 = -(uint64_t)(v728 * v699);
                  else
                    v496 = 0;
                  v418 = v494 + 16 * v496;
                  v86 += 16 * v496 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v418;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                --v490;
              }
              while (v490);
              goto LABEL_864;
            }
            v475 = v745;
            v107 = v732;
            do
            {
              v476 = v23;
              do
              {
                *(_OWORD *)v93 = *(_OWORD *)v51;
                *(_DWORD *)v84 = *(_DWORD *)v83;
                v477 = v51 + 16 * v698;
                if (v477 >= v86)
                  v478 = -(uint64_t)(int)v56;
                else
                  v478 = 0;
                v83 += 4 * (int)v55 + 4 * v478;
                v51 = v477 + 16 * v478;
                v84 += v473;
                v93 += v474;
                --v476;
              }
              while (v476);
              if (v726)
              {
                v479 = v107 + 16 * v728;
                if (v479 >= v726)
                  v480 = -(uint64_t)(v730 * v699);
                else
                  v480 = 0;
                v92 += 4 * v730 + 4 * v480;
                if (v479 >= v726)
                  v481 = -(uint64_t)(v728 * v699);
                else
                  v481 = 0;
                v107 = v479 + 16 * v481;
                v86 += 16 * v481 + 16 * v728;
                v83 = (char *)v92;
                v51 = v107;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v475;
            }
            while (v475);
LABEL_822:
            v732 = v107;
            goto LABEL_865;
          case 2:
            v104 = (int)v55;
            if ((_DWORD)v37)
            {
              v105 = v745;
              v106 = 4 * (int)v37;
              v107 = v732;
              while (1)
              {
                v108 = v23;
                do
                {
                  v109 = *(float *)v83;
                  if (*(float *)v83 >= 1.0)
                  {
                    *(_OWORD *)v93 = *(_OWORD *)v51;
                    v110 = *(float *)v83;
                  }
                  else
                  {
                    if (v109 <= 0.0)
                      goto LABEL_86;
                    *(float32x4_t *)v93 = vmlaq_n_f32(*(float32x4_t *)v51, *(float32x4_t *)v93, 1.0 - v109);
                    v110 = v109 + (float)(*(float *)v84 * (float)(1.0 - v109));
                  }
                  *(float *)v84 = v110;
LABEL_86:
                  v111 = v51 + 16 * v698;
                  if (v111 >= v86)
                    v112 = -(uint64_t)(int)v56;
                  else
                    v112 = 0;
                  v83 += 4 * (int)v55 + 4 * v112;
                  v51 = v111 + 16 * v112;
                  v84 += v106;
                  v93 += 16 * v698;
                  --v108;
                }
                while (v108);
                if (v726)
                {
                  v113 = v107 + 16 * v728;
                  if (v113 >= v726)
                    v114 = -(uint64_t)(v730 * v699);
                  else
                    v114 = 0;
                  v92 += 4 * v730 + 4 * v114;
                  if (v113 >= v726)
                    v115 = -(uint64_t)(v728 * v699);
                  else
                    v115 = 0;
                  v107 = v113 + 16 * v115;
                  v86 += 16 * v115 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v107;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v105)
                  goto LABEL_822;
              }
            }
            v417 = v745;
            v418 = v732;
LABEL_675:
            v419 = v23;
            while (1)
            {
              v420 = *(float *)v83;
              if (*(float *)v83 >= 1.0)
                break;
              if (v420 > 0.0)
              {
                v421 = vmlaq_n_f32(*(float32x4_t *)v51, *(float32x4_t *)v93, 1.0 - v420);
LABEL_680:
                *(float32x4_t *)v93 = v421;
              }
              v422 = v51 + 16 * v698;
              if (v422 >= v86)
                v423 = -(uint64_t)(int)v56;
              else
                v423 = 0;
              v83 += 4 * v104 + 4 * v423;
              v51 = v422 + 16 * v423;
              v93 += 16 * v698;
              if (!--v419)
              {
                if (v726)
                {
                  v424 = v418 + 16 * v728;
                  if (v424 >= v726)
                    v425 = -(uint64_t)(v730 * v699);
                  else
                    v425 = 0;
                  v92 += 4 * v730 + 4 * v425;
                  if (v424 >= v726)
                    v426 = -(uint64_t)(v728 * v699);
                  else
                    v426 = 0;
                  v418 = v424 + 16 * v426;
                  v86 += 16 * v426 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v418;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v417)
                  goto LABEL_864;
                goto LABEL_675;
              }
            }
            v421 = *(float32x4_t *)v51;
            goto LABEL_680;
          case 3:
            if ((_DWORD)v55)
            {
              v116 = v745;
              v117 = 4 * (int)v37;
              v107 = v732;
              do
              {
                v118 = v23;
                do
                {
                  v119 = *(float *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    *(_QWORD *)v93 = 0;
                    *(_QWORD *)(v93 + 8) = 0;
                    v121 = 0.0;
                  }
                  else
                  {
                    v120.i32[0] = *(_DWORD *)v51;
                    if (v119 >= 1.0)
                    {
                      *(_DWORD *)v93 = v120.i32[0];
                      *(_QWORD *)(v93 + 4) = *(_QWORD *)(v51 + 4);
                      *(_DWORD *)(v93 + 12) = *(_DWORD *)(v51 + 12);
                      v121 = *(float *)v83;
                    }
                    else
                    {
                      v120.i32[1] = *(_DWORD *)(v51 + 4);
                      v120.i64[1] = *(_QWORD *)(v51 + 8);
                      *(float32x4_t *)v93 = vmulq_n_f32(v120, v119);
                      v121 = v119 * *(float *)v83;
                    }
                  }
                  *(float *)v84 = v121;
                  v122 = v51 + 16 * v698;
                  if (v122 >= v86)
                    v123 = -(uint64_t)(int)v56;
                  else
                    v123 = 0;
                  v83 += 4 * (int)v55 + 4 * v123;
                  v51 = v122 + 16 * v123;
                  v84 += v117;
                  v93 += 16 * v698;
                  --v118;
                }
                while (v118);
                if (v726)
                {
                  v124 = v107 + 16 * v728;
                  if (v124 >= v726)
                    v125 = -(uint64_t)(v730 * v699);
                  else
                    v125 = 0;
                  v92 += 4 * v730 + 4 * v125;
                  if (v124 >= v726)
                    v126 = -(uint64_t)(v728 * v699);
                  else
                    v126 = 0;
                  v107 = v124 + 16 * v126;
                  v86 += 16 * v126 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v107;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                --v116;
              }
              while (v116);
              goto LABEL_822;
            }
            v427 = v745;
            v138 = v732;
            do
            {
              v428 = v23;
              do
              {
                v429 = *(float *)v84;
                if (*(float *)v84 <= 0.0)
                {
                  *(_QWORD *)v93 = 0;
                  *(_QWORD *)(v93 + 8) = 0;
                }
                else
                {
                  v430.i32[0] = *(_DWORD *)v51;
                  if (v429 >= 1.0)
                  {
                    *(_DWORD *)v93 = v430.i32[0];
                    *(_QWORD *)(v93 + 4) = *(_QWORD *)(v51 + 4);
                    *(_DWORD *)(v93 + 12) = *(_DWORD *)(v51 + 12);
                  }
                  else
                  {
                    v430.i32[1] = *(_DWORD *)(v51 + 4);
                    v430.i64[1] = *(_QWORD *)(v51 + 8);
                    *(float32x4_t *)v93 = vmulq_n_f32(v430, v429);
                  }
                }
                v431 = v51 + 16 * v698;
                if (v431 >= v86)
                  v432 = -(uint64_t)(int)v56;
                else
                  v432 = 0;
                v83 += 4 * v432;
                v51 = v431 + 16 * v432;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v428;
              }
              while (v428);
              if (v726)
              {
                v433 = v138 + 16 * v728;
                if (v433 >= v726)
                  v434 = -(uint64_t)(v730 * v699);
                else
                  v434 = 0;
                v92 += 4 * v730 + 4 * v434;
                if (v433 >= v726)
                  v435 = -(uint64_t)(v728 * v699);
                else
                  v435 = 0;
                v138 = v433 + 16 * v435;
                v86 += 16 * v435 + 16 * v728;
                v83 = (char *)v92;
                v51 = v138;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v427;
            }
            while (v427);
LABEL_717:
            v732 = v138;
            goto LABEL_865;
          case 4:
            v127 = v745;
            do
            {
              v128 = v23;
              do
              {
                v129 = 1.0 - *(float *)v84;
                if (v129 <= 0.0)
                {
                  *(_QWORD *)v93 = 0;
                  *(_QWORD *)(v93 + 8) = 0;
                  v131 = 0.0;
                }
                else if (v129 >= 1.0)
                {
                  if ((_DWORD)v55)
                    v131 = *(float *)v83;
                  else
                    v131 = 1.0;
                }
                else
                {
                  *(float32x4_t *)v93 = vmulq_n_f32(*(float32x4_t *)v51, v129);
                  if ((_DWORD)v55)
                    v130 = *(float *)v83;
                  else
                    v130 = 1.0;
                  v131 = v129 * v130;
                }
                *(float *)v84 = v131;
                v132 = v51 + 16 * v698;
                if (v132 >= v86)
                  v133 = -(uint64_t)(int)v56;
                else
                  v133 = 0;
                v83 += 4 * (int)v55 + 4 * v133;
                v51 = v132 + 16 * v133;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v128;
              }
              while (v128);
              if (v726)
              {
                v134 = v732 + 16 * v728;
                if (v134 >= v726)
                  v135 = -(uint64_t)(v730 * v699);
                else
                  v135 = 0;
                v92 += 4 * v730 + 4 * v135;
                if (v134 >= v726)
                  v136 = -(uint64_t)(v728 * v699);
                else
                  v136 = 0;
                v51 = v134 + 16 * v136;
                v86 += 16 * v136 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v127;
            }
            while (v127);
            goto LABEL_865;
          case 5:
            v137 = v745;
            v138 = v732;
            do
            {
              v139 = v23;
              do
              {
                v140 = *(float *)v84;
                v141 = *(float *)v83;
                v142 = 1.0 - *(float *)v83;
                *(float32x4_t *)v93 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v93, v142), *(float32x4_t *)v51, *(float *)v84);
                *(float *)v84 = (float)(v140 * v142) + (float)(v141 * v140);
                v143 = v51 + 16 * v698;
                if (v143 >= v86)
                  v144 = -(uint64_t)(int)v56;
                else
                  v144 = 0;
                v83 += 4 * (int)v55 + 4 * v144;
                v51 = v143 + 16 * v144;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v139;
              }
              while (v139);
              if (v726)
              {
                v145 = v138 + 16 * v728;
                if (v145 >= v726)
                  v146 = -(uint64_t)(v730 * v699);
                else
                  v146 = 0;
                v92 += 4 * v730 + 4 * v146;
                if (v145 >= v726)
                  v147 = -(uint64_t)(v728 * v699);
                else
                  v147 = 0;
                v138 = v145 + 16 * v147;
                v86 += 16 * v147 + 16 * v728;
                v83 = (char *)v92;
                v51 = v138;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v137;
            }
            while (v137);
            goto LABEL_717;
          case 6:
            v148 = v745;
            while (1)
            {
              v149 = v23;
              do
              {
                v150 = *(float *)v84;
                v151 = 1.0 - *(float *)v84;
                if (v151 >= 1.0)
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  if ((_DWORD)v55)
                    v153 = *(float *)v83;
                  else
                    v153 = 1.0;
                }
                else
                {
                  if (v151 <= 0.0)
                    goto LABEL_180;
                  *(float32x4_t *)v93 = vmlaq_n_f32(*(float32x4_t *)v93, *(float32x4_t *)v51, v151);
                  if ((_DWORD)v55)
                    v152 = *(float *)v83;
                  else
                    v152 = 1.0;
                  v153 = v150 + (float)(v152 * v151);
                }
                *(float *)v84 = v153;
LABEL_180:
                v154 = v51 + 16 * v698;
                if (v154 >= v86)
                  v155 = -(uint64_t)(int)v56;
                else
                  v155 = 0;
                v83 += 4 * (int)v55 + 4 * v155;
                v51 = v154 + 16 * v155;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v149;
              }
              while (v149);
              if (v726)
              {
                v156 = v732 + 16 * v728;
                if (v156 >= v726)
                  v157 = -(uint64_t)(v730 * v699);
                else
                  v157 = 0;
                v92 += 4 * v730 + 4 * v157;
                if (v156 >= v726)
                  v158 = -(uint64_t)(v728 * v699);
                else
                  v158 = 0;
                v51 = v156 + 16 * v158;
                v86 += 16 * v158 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v148)
                goto LABEL_865;
            }
          case 7:
            v159 = (int)v55;
            if ((_DWORD)v37)
            {
              v160 = v745;
              v161 = 4 * (int)v37;
              v107 = v732;
              while (1)
              {
                v162 = v23;
                do
                {
                  v163 = *(float *)v83;
                  if (*(float *)v83 <= 0.0)
                  {
                    *(_QWORD *)v93 = 0;
                    *(_QWORD *)(v93 + 8) = 0;
                    v164 = 0.0;
                  }
                  else
                  {
                    if (v163 >= 1.0)
                      goto LABEL_203;
                    *(float32x4_t *)v93 = vmulq_n_f32(*(float32x4_t *)v93, v163);
                    v164 = v163 * *(float *)v84;
                  }
                  *(float *)v84 = v164;
LABEL_203:
                  v165 = v51 + 16 * v698;
                  if (v165 >= v86)
                    v166 = -(uint64_t)(int)v56;
                  else
                    v166 = 0;
                  v83 += 4 * (int)v55 + 4 * v166;
                  v51 = v165 + 16 * v166;
                  v84 += v161;
                  v93 += 16 * v698;
                  --v162;
                }
                while (v162);
                if (v726)
                {
                  v167 = v107 + 16 * v728;
                  if (v167 >= v726)
                    v168 = -(uint64_t)(v730 * v699);
                  else
                    v168 = 0;
                  v92 += 4 * v730 + 4 * v168;
                  if (v167 >= v726)
                    v169 = -(uint64_t)(v728 * v699);
                  else
                    v169 = 0;
                  v107 = v167 + 16 * v169;
                  v86 += 16 * v169 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v107;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v160)
                  goto LABEL_822;
              }
            }
            v436 = v745;
            v418 = v732;
            do
            {
              v437 = v23;
              do
              {
                v438 = *(float *)v83;
                if (*(float *)v83 <= 0.0)
                {
                  *(_QWORD *)v93 = 0;
                  *(_QWORD *)(v93 + 8) = 0;
                }
                else if (v438 < 1.0)
                {
                  *(float32x4_t *)v93 = vmulq_n_f32(*(float32x4_t *)v93, v438);
                }
                v439 = v51 + 16 * v698;
                if (v439 >= v86)
                  v440 = -(uint64_t)(int)v56;
                else
                  v440 = 0;
                v83 += 4 * v159 + 4 * v440;
                v51 = v439 + 16 * v440;
                v93 += 16 * v698;
                --v437;
              }
              while (v437);
              if (v726)
              {
                v441 = v418 + 16 * v728;
                if (v441 >= v726)
                  v442 = -(uint64_t)(v730 * v699);
                else
                  v442 = 0;
                v92 += 4 * v730 + 4 * v442;
                if (v441 >= v726)
                  v443 = -(uint64_t)(v728 * v699);
                else
                  v443 = 0;
                v418 = v441 + 16 * v443;
                v86 += 16 * v443 + 16 * v728;
                v83 = (char *)v92;
                v51 = v418;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v436;
            }
            while (v436);
            goto LABEL_864;
          case 8:
            v170 = (int)v55;
            if ((_DWORD)v37)
            {
              v171 = v745;
              v172 = 4 * (int)v37;
              v107 = v732;
              while (1)
              {
                v173 = v23;
                do
                {
                  v174 = 1.0 - *(float *)v83;
                  if (v174 <= 0.0)
                  {
                    *(_QWORD *)v93 = 0;
                    *(_QWORD *)(v93 + 8) = 0;
                    v175 = 0.0;
                  }
                  else
                  {
                    if (v174 >= 1.0)
                      goto LABEL_226;
                    *(float32x4_t *)v93 = vmulq_n_f32(*(float32x4_t *)v93, v174);
                    v175 = v174 * *(float *)v84;
                  }
                  *(float *)v84 = v175;
LABEL_226:
                  v176 = v51 + 16 * v698;
                  if (v176 >= v86)
                    v177 = -(uint64_t)(int)v56;
                  else
                    v177 = 0;
                  v83 += 4 * (int)v55 + 4 * v177;
                  v51 = v176 + 16 * v177;
                  v84 += v172;
                  v93 += 16 * v698;
                  --v173;
                }
                while (v173);
                if (v726)
                {
                  v178 = v107 + 16 * v728;
                  if (v178 >= v726)
                    v179 = -(uint64_t)(v730 * v699);
                  else
                    v179 = 0;
                  v92 += 4 * v730 + 4 * v179;
                  if (v178 >= v726)
                    v180 = -(uint64_t)(v728 * v699);
                  else
                    v180 = 0;
                  v107 = v178 + 16 * v180;
                  v86 += 16 * v180 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v107;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v171)
                  goto LABEL_822;
              }
            }
            v444 = v745;
            v418 = v732;
            do
            {
              v445 = v23;
              do
              {
                v446 = 1.0 - *(float *)v83;
                if (v446 <= 0.0)
                {
                  *(_QWORD *)v93 = 0;
                  *(_QWORD *)(v93 + 8) = 0;
                }
                else if (v446 < 1.0)
                {
                  *(float32x4_t *)v93 = vmulq_n_f32(*(float32x4_t *)v93, v446);
                }
                v447 = v51 + 16 * v698;
                if (v447 >= v86)
                  v448 = -(uint64_t)(int)v56;
                else
                  v448 = 0;
                v83 += 4 * v170 + 4 * v448;
                v51 = v447 + 16 * v448;
                v93 += 16 * v698;
                --v445;
              }
              while (v445);
              if (v726)
              {
                v449 = v418 + 16 * v728;
                if (v449 >= v726)
                  v450 = -(uint64_t)(v730 * v699);
                else
                  v450 = 0;
                v92 += 4 * v730 + 4 * v450;
                if (v449 >= v726)
                  v451 = -(uint64_t)(v728 * v699);
                else
                  v451 = 0;
                v418 = v449 + 16 * v451;
                v86 += 16 * v451 + 16 * v728;
                v83 = (char *)v92;
                v51 = v418;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v444;
            }
            while (v444);
LABEL_864:
            v732 = v418;
LABEL_865:
            v713 = v92;
            v81 = v86;
            v745 = 0;
LABEL_866:
            v51 = v701;
LABEL_867:
            v48 = v700;
            if (!v700)
              return 1;
LABEL_868:
            v744 = 0;
            v743 = 0;
            continue;
          case 9:
            v181 = v745;
            v138 = v732;
            do
            {
              v182 = v23;
              do
              {
                v183 = *(float *)v84;
                v184 = *(float *)v83;
                v185 = 1.0 - *(float *)v84;
                *(float32x4_t *)v93 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v93, *(float *)v83), *(float32x4_t *)v51, v185);
                *(float *)v84 = (float)(v183 * v184) + (float)(v184 * v185);
                v186 = v51 + 16 * v698;
                if (v186 >= v86)
                  v187 = -(uint64_t)(int)v56;
                else
                  v187 = 0;
                v83 += 4 * (int)v55 + 4 * v187;
                v51 = v186 + 16 * v187;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v182;
              }
              while (v182);
              if (v726)
              {
                v188 = v138 + 16 * v728;
                if (v188 >= v726)
                  v189 = -(uint64_t)(v730 * v699);
                else
                  v189 = 0;
                v92 += 4 * v730 + 4 * v189;
                if (v188 >= v726)
                  v190 = -(uint64_t)(v728 * v699);
                else
                  v190 = 0;
                v138 = v188 + 16 * v190;
                v86 += 16 * v190 + 16 * v728;
                v83 = (char *)v92;
                v51 = v138;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v181;
            }
            while (v181);
            goto LABEL_717;
          case 10:
            v191 = v745;
            v138 = v732;
            do
            {
              v192 = v23;
              do
              {
                v193 = *(float *)v84;
                v194 = *(float *)v83;
                v195 = 1.0 - *(float *)v84;
                v196 = 1.0 - *(float *)v83;
                *(float32x4_t *)v93 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v93, v196), *(float32x4_t *)v51, v195);
                *(float *)v84 = (float)(v193 * v196) + (float)(v194 * v195);
                v197 = v51 + 16 * v698;
                if (v197 >= v86)
                  v198 = -(uint64_t)(int)v56;
                else
                  v198 = 0;
                v83 += 4 * (int)v55 + 4 * v198;
                v51 = v197 + 16 * v198;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v192;
              }
              while (v192);
              if (v726)
              {
                v199 = v138 + 16 * v728;
                if (v199 >= v726)
                  v200 = -(uint64_t)(v730 * v699);
                else
                  v200 = 0;
                v92 += 4 * v730 + 4 * v200;
                if (v199 >= v726)
                  v201 = -(uint64_t)(v728 * v699);
                else
                  v201 = 0;
                v138 = v199 + 16 * v201;
                v86 += 16 * v201 + 16 * v728;
                v83 = (char *)v92;
                v51 = v138;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v191;
            }
            while (v191);
            goto LABEL_717;
          case 11:
            if ((_DWORD)v37)
            {
              v202 = v745;
              do
              {
                v203 = v23;
                do
                {
                  v204 = 1.0;
                  v205 = 1.0;
                  if ((_DWORD)v55)
                    v205 = *(float *)v83;
                  v206 = *(float *)v84;
                  v207 = *(float *)v84 + v205;
                  if (v207 > 1.0)
                    v207 = 1.0;
                  if ((_DWORD)v55)
                    v204 = *(float *)v83;
                  v208 = *(float *)(v93 + 4);
                  v209 = *(float *)(v51 + 4);
                  *(float *)v93 = v207 - (float)((float)(v206 - *(float *)v93) + (float)(v205 - *(float *)v51));
                  v210 = 1.0;
                  v211 = 1.0;
                  if ((_DWORD)v55)
                    v211 = *(float *)v83;
                  v212 = (float)(v206 - v208) + (float)(v204 - v209);
                  v213 = *(float *)v84;
                  v214 = *(float *)(v93 + 8);
                  v215 = *(float *)(v51 + 8);
                  *(float *)(v93 + 4) = v207 - v212;
                  if ((_DWORD)v55)
                    v210 = *(float *)v83;
                  v216 = (float)(*(float *)v84 - *(float *)(v93 + 12)) + (float)(v210 - *(float *)(v51 + 12));
                  *(float *)(v93 + 8) = v207 - (float)((float)(v213 - v214) + (float)(v211 - v215));
                  *(float *)v84 = v207;
                  *(float *)(v93 + 12) = v207 - v216;
                  v217 = v51 + 16 * v698;
                  if (v217 >= v86)
                    v218 = -(uint64_t)(int)v56;
                  else
                    v218 = 0;
                  v83 += 4 * (int)v55 + 4 * v218;
                  v51 = v217 + 16 * v218;
                  v84 += 4 * (int)v37;
                  v93 += 16 * v698;
                  --v203;
                }
                while (v203);
                if (v726)
                {
                  v219 = v732 + 16 * v728;
                  if (v219 >= v726)
                    v220 = -(uint64_t)(v730 * v699);
                  else
                    v220 = 0;
                  v92 += 4 * v730 + 4 * v220;
                  if (v219 >= v726)
                    v221 = -(uint64_t)(v728 * v699);
                  else
                    v221 = 0;
                  v51 = v219 + 16 * v221;
                  v86 += 16 * v221 + 16 * v728;
                  v83 = (char *)v92;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                --v202;
              }
              while (v202);
              goto LABEL_865;
            }
            v452 = v745;
            __asm { FMOV            V0.2S, #1.0 }
            v107 = v732;
            do
            {
              v454 = v23;
              do
              {
                v12.i32[0] = 1.0;
                if ((_DWORD)v55)
                  v12.i32[0] = *(_DWORD *)v83;
                v455.f32[0] = 1.0 - *(float *)v93;
                v455.f32[1] = 1.0 - *(float *)(v93 + 4);
                v456 = (int32x2_t)vsub_f32(_D0, vadd_f32(v455, vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 0), *(float32x2_t *)v51)));
                *(int32x2_t *)v93 = v456;
                v456.i32[0] = 1.0;
                if ((_DWORD)v55)
                  v456.i32[0] = *(_DWORD *)v83;
                v457.f32[0] = 1.0 - *(float *)(v93 + 8);
                v457.f32[1] = 1.0 - *(float *)(v93 + 12);
                *(float32x2_t *)v12.f32 = vsub_f32((float32x2_t)vdup_lane_s32(v456, 0), *(float32x2_t *)(v51 + 8));
                *(float32x2_t *)(v93 + 8) = vsub_f32(_D0, vadd_f32(v457, *(float32x2_t *)v12.f32));
                v458 = v51 + 16 * v698;
                if (v458 >= v86)
                  v459 = -(uint64_t)(int)v56;
                else
                  v459 = 0;
                v83 += 4 * (int)v55 + 4 * v459;
                v51 = v458 + 16 * v459;
                v93 += 16 * v698;
                --v454;
              }
              while (v454);
              if (v726)
              {
                v460 = v107 + 16 * v728;
                if (v460 >= v726)
                  v461 = -(uint64_t)(v730 * v699);
                else
                  v461 = 0;
                v92 += 4 * v730 + 4 * v461;
                if (v460 >= v726)
                  v462 = -(uint64_t)(v728 * v699);
                else
                  v462 = 0;
                v107 = v460 + 16 * v462;
                v86 += 16 * v462 + 16 * v728;
                v83 = (char *)v92;
                v51 = v107;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v452;
            }
            while (v452);
            goto LABEL_822;
          case 12:
            if (!(_DWORD)v37)
            {
              v463 = (int)v55;
              v464 = v745;
              v418 = v732;
              do
              {
                v465 = v23;
                do
                {
                  *(float32x4_t *)v93 = vaddq_f32(*(float32x4_t *)v93, *(float32x4_t *)v51);
                  v466 = v51 + 16 * v698;
                  if (v466 >= v86)
                    v467 = -(uint64_t)(int)v56;
                  else
                    v467 = 0;
                  v83 += 4 * v463 + 4 * v467;
                  v51 = v466 + 16 * v467;
                  v93 += 16 * v698;
                  --v465;
                }
                while (v465);
                if (v726)
                {
                  v468 = v418 + 16 * v728;
                  if (v468 >= v726)
                    v469 = -(uint64_t)(v730 * v699);
                  else
                    v469 = 0;
                  v92 += 4 * v730 + 4 * v469;
                  if (v468 >= v726)
                    v470 = -(uint64_t)(v728 * v699);
                  else
                    v470 = 0;
                  v418 = v468 + 16 * v470;
                  v86 += 16 * v470 + 16 * v728;
                  v83 = (char *)v92;
                  v51 = v418;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                --v464;
              }
              while (v464);
              goto LABEL_864;
            }
            v222 = v745;
            do
            {
              v223 = v23;
              do
              {
                if ((_DWORD)v55)
                  v224 = *(float *)v83;
                else
                  v224 = 1.0;
                v225 = *(float *)v84 + v224;
                if (v225 > 1.0)
                  v225 = 1.0;
                v226 = *(float32x2_t *)v93;
                v227 = *(float32x2_t *)v51;
                *(float *)v84 = v225;
                *(float32x2_t *)&v228 = vadd_f32(v226, v227);
                *((float32x2_t *)&v228 + 1) = vadd_f32(*(float32x2_t *)(v93 + 8), *(float32x2_t *)(v51 + 8));
                *(_OWORD *)v93 = v228;
                v229 = v51 + 16 * v698;
                if (v229 >= v86)
                  v230 = -(uint64_t)(int)v56;
                else
                  v230 = 0;
                v83 += 4 * (int)v55 + 4 * v230;
                v51 = v229 + 16 * v230;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v223;
              }
              while (v223);
              if (v726)
              {
                v231 = v732 + 16 * v728;
                if (v231 >= v726)
                  v232 = -(uint64_t)(v730 * v699);
                else
                  v232 = 0;
                v92 += 4 * v730 + 4 * v232;
                if (v231 >= v726)
                  v233 = -(uint64_t)(v728 * v699);
                else
                  v233 = 0;
                v51 = v231 + 16 * v233;
                v86 += 16 * v233 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              --v222;
            }
            while (v222);
            goto LABEL_865;
          case 13:
            v234 = v745;
            v9.i32[0] = 1.0;
            while (1)
            {
              v235 = v23;
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if ((_DWORD)v55)
                {
                  v10.i32[0] = *(_DWORD *)v83;
                  if (*(float *)v83 <= 0.0)
                    goto LABEL_336;
                }
                if ((_DWORD)v37)
                {
                  v11.i32[0] = *(_DWORD *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    v11 = *(float32x4_t *)v51;
                    *(_OWORD *)v93 = *(_OWORD *)v51;
LABEL_335:
                    *(_DWORD *)v84 = v10.i32[0];
                    goto LABEL_336;
                  }
                }
                v236 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v93);
                v237 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v51);
                v238 = (int8x16_t)vmulq_f32(v236, v237);
                v239 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v238, v236, 1.0 - v10.f32[0]), v238);
                v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v239, v237, 1.0 - v11.f32[0]), v239));
                *(float32x4_t *)v93 = v11;
                if ((_DWORD)v37)
                  goto LABEL_335;
LABEL_336:
                v240 = v51 + 16 * v698;
                if (v240 >= v86)
                  v241 = -(uint64_t)(int)v56;
                else
                  v241 = 0;
                v83 += 4 * (int)v55 + 4 * v241;
                v51 = v240 + 16 * v241;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v235;
              }
              while (v235);
              if (v726)
              {
                v242 = v732 + 16 * v728;
                if (v242 >= v726)
                  v243 = -(uint64_t)(v730 * v699);
                else
                  v243 = 0;
                v92 += 4 * v730 + 4 * v243;
                if (v242 >= v726)
                  v244 = -(uint64_t)(v728 * v699);
                else
                  v244 = 0;
                v51 = v242 + 16 * v244;
                v86 += 16 * v244 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v234)
                goto LABEL_865;
            }
          case 14:
            v245 = v745;
            __asm { FMOV            V0.4S, #1.0 }
            while (1)
            {
              v251 = v23;
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if ((_DWORD)v55)
                {
                  v10.i32[0] = *(_DWORD *)v83;
                  if (*(float *)v83 <= 0.0)
                    goto LABEL_361;
                }
                if ((_DWORD)v37)
                {
                  v11.i32[0] = *(_DWORD *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    v11 = *(float32x4_t *)v51;
                    *(_OWORD *)v93 = *(_OWORD *)v51;
LABEL_360:
                    *(_DWORD *)v84 = v10.i32[0];
                    goto LABEL_361;
                  }
                }
                v252 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
                v10.f32[0] = (float)(v10.f32[0] + v11.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                v253 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v93);
                v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vmlaq_f32(v253, vsubq_f32(_Q0, v253), vsubq_f32(v252, *(float32x4_t *)v51)));
                *(float32x4_t *)v93 = v11;
                if ((_DWORD)v37)
                  goto LABEL_360;
LABEL_361:
                v254 = v51 + 16 * v698;
                if (v254 >= v86)
                  v255 = -(uint64_t)(int)v56;
                else
                  v255 = 0;
                v83 += 4 * (int)v55 + 4 * v255;
                v51 = v254 + 16 * v255;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v251;
              }
              while (v251);
              if (v726)
              {
                v256 = v732 + 16 * v728;
                if (v256 >= v726)
                  v257 = -(uint64_t)(v730 * v699);
                else
                  v257 = 0;
                v92 += 4 * v730 + 4 * v257;
                if (v256 >= v726)
                  v258 = -(uint64_t)(v728 * v699);
                else
                  v258 = 0;
                v51 = v256 + 16 * v258;
                v86 += 16 * v258 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v245)
                goto LABEL_865;
            }
          case 15:
            v713 = v92;
            v259 = (int)v55;
            v703 = v745;
            v694 = v18;
            v260 = 4 * (int)v37;
            v261 = 16 * v698;
            v690 = v56;
            v262 = -(uint64_t)(int)v56;
            v714 = v262;
            while (1)
            {
              v263 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v263 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v264 = v259;
                  v265 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAoverlayPDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v263, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v265;
                  v259 = v264;
                  v262 = v714;
                  v261 = 16 * v698;
                }
              }
              v266 = v51 + 16 * v698;
              if (v266 >= v86)
                v267 = v262;
              else
                v267 = 0;
              v83 += 4 * v259 + 4 * v267;
              v51 = v266 + 16 * v267;
              v84 += v260;
              v93 += v261;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v268 = v732 + 16 * v728;
                  v269 = -(uint64_t)(v730 * v699);
                  if (v268 < v726)
                    v269 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v269);
                  v270 = -(uint64_t)(v728 * v699);
                  if (v268 < v726)
                    v270 = 0;
                  v51 = v268 + 16 * v270;
                  v86 += 16 * v270 + 16 * v728;
                  v713 += 4 * v730 + 4 * v269;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v703)
                  break;
              }
            }
            goto LABEL_673;
          case 16:
            v271 = v745;
            v9.i32[0] = 1.0;
            while (1)
            {
              v272 = v23;
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if ((_DWORD)v55)
                {
                  v10.i32[0] = *(_DWORD *)v83;
                  if (*(float *)v83 <= 0.0)
                    goto LABEL_408;
                }
                if ((_DWORD)v37)
                {
                  v11.i32[0] = *(_DWORD *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    v11 = *(float32x4_t *)v51;
                    *(_OWORD *)v93 = *(_OWORD *)v51;
LABEL_407:
                    *(_DWORD *)v84 = v10.i32[0];
                    goto LABEL_408;
                  }
                }
                v273 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v93);
                v274 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v51);
                v275 = (int8x16_t)vmulq_n_f32(v273, v10.f32[0]);
                v276 = (int8x16_t)vmulq_n_f32(v274, v11.f32[0]);
                v277 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v275, (float32x4_t)v276), v276, v275);
                v278 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v277, v273, 1.0 - v10.f32[0]), v277);
                v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v278, v274, 1.0 - v11.f32[0]), v278));
                *(float32x4_t *)v93 = v11;
                if ((_DWORD)v37)
                  goto LABEL_407;
LABEL_408:
                v279 = v51 + 16 * v698;
                if (v279 >= v86)
                  v280 = -(uint64_t)(int)v56;
                else
                  v280 = 0;
                v83 += 4 * (int)v55 + 4 * v280;
                v51 = v279 + 16 * v280;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v272;
              }
              while (v272);
              if (v726)
              {
                v281 = v732 + 16 * v728;
                if (v281 >= v726)
                  v282 = -(uint64_t)(v730 * v699);
                else
                  v282 = 0;
                v92 += 4 * v730 + 4 * v282;
                if (v281 >= v726)
                  v283 = -(uint64_t)(v728 * v699);
                else
                  v283 = 0;
                v51 = v281 + 16 * v283;
                v86 += 16 * v283 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v271)
                goto LABEL_865;
            }
          case 17:
            v284 = v745;
            v9.i32[0] = 1.0;
            while (1)
            {
              v285 = v23;
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if ((_DWORD)v55)
                {
                  v10.i32[0] = *(_DWORD *)v83;
                  if (*(float *)v83 <= 0.0)
                    goto LABEL_433;
                }
                if ((_DWORD)v37)
                {
                  v11.i32[0] = *(_DWORD *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    v11 = *(float32x4_t *)v51;
                    *(_OWORD *)v93 = *(_OWORD *)v51;
LABEL_432:
                    *(_DWORD *)v84 = v10.i32[0];
                    goto LABEL_433;
                  }
                }
                v286 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v93);
                v287 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v51);
                v288 = (int8x16_t)vmulq_n_f32(v286, v10.f32[0]);
                v289 = (int8x16_t)vmulq_n_f32(v287, v11.f32[0]);
                v290 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v289, (float32x4_t)v288), v289, v288);
                v291 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v290, v286, 1.0 - v10.f32[0]), v290);
                v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v291, v287, 1.0 - v11.f32[0]), v291));
                *(float32x4_t *)v93 = v11;
                if ((_DWORD)v37)
                  goto LABEL_432;
LABEL_433:
                v292 = v51 + 16 * v698;
                if (v292 >= v86)
                  v293 = -(uint64_t)(int)v56;
                else
                  v293 = 0;
                v83 += 4 * (int)v55 + 4 * v293;
                v51 = v292 + 16 * v293;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v285;
              }
              while (v285);
              if (v726)
              {
                v294 = v732 + 16 * v728;
                if (v294 >= v726)
                  v295 = -(uint64_t)(v730 * v699);
                else
                  v295 = 0;
                v92 += 4 * v730 + 4 * v295;
                if (v294 >= v726)
                  v296 = -(uint64_t)(v728 * v699);
                else
                  v296 = 0;
                v51 = v294 + 16 * v296;
                v86 += 16 * v296 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v284)
                goto LABEL_865;
            }
          case 18:
            v713 = v92;
            v297 = (int)v55;
            v704 = v745;
            v694 = v18;
            v298 = 4 * (int)v37;
            v299 = 16 * v698;
            v690 = v56;
            v300 = -(uint64_t)(int)v56;
            v715 = v300;
            while (1)
            {
              v301 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v301 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v302 = v297;
                  v303 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAcolordodgePDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v301, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v303;
                  v297 = v302;
                  v300 = v715;
                  v299 = 16 * v698;
                }
              }
              v304 = v51 + 16 * v698;
              if (v304 >= v86)
                v305 = v300;
              else
                v305 = 0;
              v83 += 4 * v297 + 4 * v305;
              v51 = v304 + 16 * v305;
              v84 += v298;
              v93 += v299;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v306 = v732 + 16 * v728;
                  v307 = -(uint64_t)(v730 * v699);
                  if (v306 < v726)
                    v307 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v307);
                  v308 = -(uint64_t)(v728 * v699);
                  if (v306 < v726)
                    v308 = 0;
                  v51 = v306 + 16 * v308;
                  v86 += 16 * v308 + 16 * v728;
                  v713 += 4 * v730 + 4 * v307;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v704)
                  break;
              }
            }
            goto LABEL_673;
          case 19:
            v713 = v92;
            v309 = (int)v55;
            v705 = v745;
            v694 = v18;
            v310 = 4 * (int)v37;
            v311 = 16 * v698;
            v690 = v56;
            v312 = -(uint64_t)(int)v56;
            v716 = v312;
            while (1)
            {
              v313 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v313 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v314 = v309;
                  v315 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAcolorburnPDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v313, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v315;
                  v309 = v314;
                  v312 = v716;
                  v311 = 16 * v698;
                }
              }
              v316 = v51 + 16 * v698;
              if (v316 >= v86)
                v317 = v312;
              else
                v317 = 0;
              v83 += 4 * v309 + 4 * v317;
              v51 = v316 + 16 * v317;
              v84 += v310;
              v93 += v311;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v318 = v732 + 16 * v728;
                  v319 = -(uint64_t)(v730 * v699);
                  if (v318 < v726)
                    v319 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v319);
                  v320 = -(uint64_t)(v728 * v699);
                  if (v318 < v726)
                    v320 = 0;
                  v51 = v318 + 16 * v320;
                  v86 += 16 * v320 + 16 * v728;
                  v713 += 4 * v730 + 4 * v319;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v705)
                  break;
              }
            }
            goto LABEL_673;
          case 20:
            v713 = v92;
            v321 = (int)v55;
            v706 = v745;
            v694 = v18;
            v322 = 4 * (int)v37;
            v323 = 16 * v698;
            v690 = v56;
            v324 = -(uint64_t)(int)v56;
            v717 = v324;
            while (1)
            {
              v13.i32[0] = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v13.i32[0] = *(_DWORD *)v84, *(float *)v84 <= 0.0))
                {
                  v9 = *(float32x4_t *)v51;
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v325 = v321;
                  v326 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v9.i32[0] = *(_DWORD *)v93;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  v687 = *(_QWORD *)(v51 + 4);
                  v686 = *(_DWORD *)v51;
                  PDAsoftlightPDA(&v750, *(float32x2_t *)v9.f32, *(float32_t *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), *(double *)v13.i64, *(int32x2_t *)v14.i8, *(double *)v15.i64, *(double *)v16.i64, v3, (uint64_t)v27, v4, v55, v37, v52, v86, *(float32x2_t *)((char *)&v687 - 4), *((float *)&v687 + 1), *(float *)v16.i32,
                    *(float *)v14.i32);
                  v37 = v742;
                  v9.i32[1] = v750.i32[1];
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  v55 = v740;
                  v86 = v326;
                  v321 = v325;
                  v324 = v717;
                  v323 = 16 * v698;
                }
              }
              v327 = v51 + 16 * v698;
              if (v327 >= v86)
                v328 = v324;
              else
                v328 = 0;
              v83 += 4 * v321 + 4 * v328;
              v51 = v327 + 16 * v328;
              v84 += v322;
              v93 += v323;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v329 = v732 + 16 * v728;
                  v330 = -(uint64_t)(v730 * v699);
                  if (v329 < v726)
                    v330 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v330);
                  v331 = -(uint64_t)(v728 * v699);
                  if (v329 < v726)
                    v331 = 0;
                  v51 = v329 + 16 * v331;
                  v86 += 16 * v331 + 16 * v728;
                  v713 += 4 * v730 + 4 * v330;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v706)
                  break;
              }
            }
            goto LABEL_673;
          case 21:
            v713 = v92;
            v332 = (int)v55;
            v707 = v745;
            v694 = v18;
            v333 = 4 * (int)v37;
            v334 = 16 * v698;
            v690 = v56;
            v335 = -(uint64_t)(int)v56;
            v718 = v335;
            while (1)
            {
              v336 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v336 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v337 = v332;
                  v338 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAhardlightPDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v336, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v338;
                  v332 = v337;
                  v335 = v718;
                  v334 = 16 * v698;
                }
              }
              v339 = v51 + 16 * v698;
              if (v339 >= v86)
                v340 = v335;
              else
                v340 = 0;
              v83 += 4 * v332 + 4 * v340;
              v51 = v339 + 16 * v340;
              v84 += v333;
              v93 += v334;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v341 = v732 + 16 * v728;
                  v342 = -(uint64_t)(v730 * v699);
                  if (v341 < v726)
                    v342 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v342);
                  v343 = -(uint64_t)(v728 * v699);
                  if (v341 < v726)
                    v343 = 0;
                  v51 = v341 + 16 * v343;
                  v86 += 16 * v343 + 16 * v728;
                  v713 += 4 * v730 + 4 * v342;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v707)
                  break;
              }
            }
            goto LABEL_673;
          case 22:
            v344 = v745;
            while (1)
            {
              v345 = v23;
              do
              {
                v10.i32[0] = 1.0;
                v9.i32[0] = 1.0;
                if ((_DWORD)v55)
                {
                  v9.i32[0] = *(_DWORD *)v83;
                  if (*(float *)v83 <= 0.0)
                    goto LABEL_546;
                }
                if ((_DWORD)v37)
                {
                  v10.i32[0] = *(_DWORD *)v84;
                  if (*(float *)v84 <= 0.0)
                  {
                    v10 = *(float32x4_t *)v51;
                    *(_OWORD *)v93 = *(_OWORD *)v51;
LABEL_545:
                    *(_DWORD *)v84 = v9.i32[0];
                    goto LABEL_546;
                  }
                }
                v346 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), *(float32x4_t *)v93);
                v347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
                v348 = vmulq_n_f32(v346, v9.f32[0]);
                v9.f32[0] = (float)(v10.f32[0] + v9.f32[0]) - (float)(v10.f32[0] * v9.f32[0]);
                v349 = vsubq_f32(v347, *(float32x4_t *)v51);
                v350 = vmulq_n_f32(v349, v10.f32[0]);
                v351 = vsubq_f32(vaddq_f32(v346, v349), v348);
                v352 = (int8x16_t)vsubq_f32(v348, v350);
                v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), vaddq_f32(vsubq_f32(v351, v350), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v352), (int8x16_t)vnegq_f32((float32x4_t)v352), v352)));
                *(float32x4_t *)v93 = v10;
                if ((_DWORD)v37)
                  goto LABEL_545;
LABEL_546:
                v353 = v51 + 16 * v698;
                if (v353 >= v86)
                  v354 = -(uint64_t)(int)v56;
                else
                  v354 = 0;
                v83 += 4 * (int)v55 + 4 * v354;
                v51 = v353 + 16 * v354;
                v84 += 4 * (int)v37;
                v93 += 16 * v698;
                --v345;
              }
              while (v345);
              if (v726)
              {
                v355 = v732 + 16 * v728;
                if (v355 >= v726)
                  v356 = -(uint64_t)(v730 * v699);
                else
                  v356 = 0;
                v92 += 4 * v730 + 4 * v356;
                if (v355 >= v726)
                  v357 = -(uint64_t)(v728 * v699);
                else
                  v357 = 0;
                v51 = v355 + 16 * v357;
                v86 += 16 * v357 + 16 * v728;
                v83 = (char *)v92;
                v732 = v51;
              }
              else
              {
                v51 += 16 * v728;
                v83 += 4 * v730;
              }
              v93 += 16 * *(_QWORD *)v734;
              v84 += 4 * v738;
              if (!--v344)
                goto LABEL_865;
            }
          case 23:
            v358 = v745;
            v359.i64[0] = 0xC0000000C0000000;
            v359.i64[1] = 0xC0000000C0000000;
            break;
          case 24:
            v713 = v92;
            v369 = (int)v55;
            v708 = v745;
            v694 = v18;
            v370 = 4 * (int)v37;
            v371 = 16 * v698;
            v690 = v56;
            v372 = -(uint64_t)(int)v56;
            v719 = v372;
            while (1)
            {
              v373 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v373 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v374 = v369;
                  v375 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAhuePDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v373, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v375;
                  v369 = v374;
                  v372 = v719;
                  v371 = 16 * v698;
                }
              }
              v376 = v51 + 16 * v698;
              if (v376 >= v86)
                v377 = v372;
              else
                v377 = 0;
              v83 += 4 * v369 + 4 * v377;
              v51 = v376 + 16 * v377;
              v84 += v370;
              v93 += v371;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v378 = v732 + 16 * v728;
                  v379 = -(uint64_t)(v730 * v699);
                  if (v378 < v726)
                    v379 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v379);
                  v380 = -(uint64_t)(v728 * v699);
                  if (v378 < v726)
                    v380 = 0;
                  v51 = v378 + 16 * v380;
                  v86 += 16 * v380 + 16 * v728;
                  v713 += 4 * v730 + 4 * v379;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v708)
                  break;
              }
            }
            goto LABEL_673;
          case 25:
            v713 = v92;
            v381 = (int)v55;
            v709 = v745;
            v694 = v18;
            v382 = 4 * (int)v37;
            v383 = 16 * v698;
            v690 = v56;
            v384 = -(uint64_t)(int)v56;
            v720 = v384;
            while (1)
            {
              v385 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v385 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v386 = v381;
                  v387 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAsaturationPDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v385, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v387;
                  v381 = v386;
                  v384 = v720;
                  v383 = 16 * v698;
                }
              }
              v388 = v51 + 16 * v698;
              if (v388 >= v86)
                v389 = v384;
              else
                v389 = 0;
              v83 += 4 * v381 + 4 * v389;
              v51 = v388 + 16 * v389;
              v84 += v382;
              v93 += v383;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v390 = v732 + 16 * v728;
                  v391 = -(uint64_t)(v730 * v699);
                  if (v390 < v726)
                    v391 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v391);
                  v392 = -(uint64_t)(v728 * v699);
                  if (v390 < v726)
                    v392 = 0;
                  v51 = v390 + 16 * v392;
                  v86 += 16 * v392 + 16 * v728;
                  v713 += 4 * v730 + 4 * v391;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v709)
                  break;
              }
            }
            goto LABEL_673;
          case 26:
            v713 = v92;
            v393 = (int)v55;
            v710 = v745;
            v694 = v18;
            v394 = 4 * (int)v37;
            v395 = 16 * v698;
            v690 = v56;
            v396 = -(uint64_t)(int)v56;
            v721 = v396;
            while (1)
            {
              v14.i32[0] = 1.0;
              v397 = 1.0;
              if (!(_DWORD)v55 || (v397 = *(float *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v14.i32[0] = *(_DWORD *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(float *)v84 = v397;
                }
                else
                {
                  v398 = v393;
                  v399 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v93;
                  v16.i32[0] = *(_DWORD *)(v93 + 12);
                  PDAluminosityPDA(v750.f32, *(float *)v51, *(float *)(v51 + 4), *(float *)(v51 + 8), *(float *)(v51 + 12), v397, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v93, COERCE_FLOAT(*(_QWORD *)(v93 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v93 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v399;
                  v393 = v398;
                  v396 = v721;
                  v395 = 16 * v698;
                }
              }
              v400 = v51 + 16 * v698;
              if (v400 >= v86)
                v401 = v396;
              else
                v401 = 0;
              v83 += 4 * v393 + 4 * v401;
              v51 = v400 + 16 * v401;
              v84 += v394;
              v93 += v395;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v402 = v732 + 16 * v728;
                  v403 = -(uint64_t)(v730 * v699);
                  if (v402 < v726)
                    v403 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v403);
                  v404 = -(uint64_t)(v728 * v699);
                  if (v402 < v726)
                    v404 = 0;
                  v51 = v402 + 16 * v404;
                  v86 += 16 * v404 + 16 * v728;
                  v713 += 4 * v730 + 4 * v403;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v710)
                  break;
              }
            }
            goto LABEL_673;
          case 27:
            v713 = v92;
            v405 = (int)v55;
            v711 = v745;
            v694 = v18;
            v406 = 4 * (int)v37;
            v407 = 16 * v698;
            v690 = v56;
            v408 = -(uint64_t)(int)v56;
            v722 = v408;
            while (1)
            {
              v409 = 1.0;
              v14.i32[0] = 1.0;
              if (!(_DWORD)v55 || (v14.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
              {
                if ((_DWORD)v37 && (v409 = *(float *)v84, *(float *)v84 <= 0.0))
                {
                  *(_OWORD *)v93 = *(_OWORD *)v51;
                  *(_DWORD *)v84 = v14.i32[0];
                }
                else
                {
                  v410 = v405;
                  v411 = v86;
                  v750 = 0uLL;
                  v751 = 0;
                  v15.i32[0] = *(_DWORD *)v51;
                  v16.i32[0] = *(_DWORD *)(v51 + 12);
                  PDAluminosityPDA(v750.f32, *(float *)v93, *(float *)(v93 + 4), *(float *)(v93 + 8), *(float *)(v93 + 12), v409, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v51, COERCE_FLOAT(*(_QWORD *)(v51 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v51 + 4))), *(float *)v16.i32, *(float *)v14.i32);
                  LODWORD(v37) = v742;
                  *(float32x4_t *)v93 = v750;
                  if ((_DWORD)v742)
                    *(_DWORD *)v84 = v751;
                  LODWORD(v55) = v740;
                  v86 = v411;
                  v405 = v410;
                  v408 = v722;
                  v407 = 16 * v698;
                }
              }
              v412 = v51 + 16 * v698;
              if (v412 >= v86)
                v413 = v408;
              else
                v413 = 0;
              v83 += 4 * v405 + 4 * v413;
              v51 = v412 + 16 * v413;
              v84 += v406;
              v93 += v407;
              LODWORD(v23) = v23 - 1;
              if (!(_DWORD)v23)
              {
                if (v726)
                {
                  v414 = v732 + 16 * v728;
                  v415 = -(uint64_t)(v730 * v699);
                  if (v414 < v726)
                    v415 = 0;
                  v83 = (char *)(v713 + 4 * v730 + 4 * v415);
                  v416 = -(uint64_t)(v728 * v699);
                  if (v414 < v726)
                    v416 = 0;
                  v51 = v414 + 16 * v416;
                  v86 += 16 * v416 + 16 * v728;
                  v713 += 4 * v730 + 4 * v415;
                  v732 = v51;
                }
                else
                {
                  v51 += 16 * v728;
                  v83 += 4 * v730;
                }
                LODWORD(v23) = v712;
                v93 += 16 * *(_QWORD *)v734;
                v84 += 4 * v738;
                if (!--v711)
                  break;
              }
            }
LABEL_673:
            v81 = v86;
            v745 = 0;
            v22 = v688;
            LODWORD(v20) = v689;
            v18 = v694;
            v51 = v701;
            v56 = v690;
            goto LABEL_867;
          default:
            v713 = v92;
            v81 = v86;
            goto LABEL_866;
        }
        break;
      }
LABEL_562:
      v360 = v23;
      while (1)
      {
        v11.i32[0] = 1.0;
        v10.i32[0] = 1.0;
        if (!(_DWORD)v55 || (v10.i32[0] = *(_DWORD *)v83, *(float *)v83 > 0.0))
        {
          if ((_DWORD)v37 && (v11.i32[0] = *(_DWORD *)v84, *(float *)v84 <= 0.0))
          {
            v11 = *(float32x4_t *)v51;
            *(_OWORD *)v93 = *(_OWORD *)v51;
          }
          else
          {
            v361 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            v10.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            v362 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), *(float32x4_t *)v93);
            v363 = vsubq_f32(v361, *(float32x4_t *)v51);
            v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), vmlaq_f32(vaddq_f32(v362, v363), v359, vmulq_f32(v363, v362)));
            *(float32x4_t *)v93 = v11;
            if (!(_DWORD)v37)
              goto LABEL_571;
          }
          *(_DWORD *)v84 = v10.i32[0];
        }
LABEL_571:
        v364 = v51 + 16 * v698;
        if (v364 >= v86)
          v365 = -(uint64_t)(int)v56;
        else
          v365 = 0;
        v83 += 4 * (int)v55 + 4 * v365;
        v51 = v364 + 16 * v365;
        v84 += 4 * (int)v37;
        v93 += 16 * v698;
        if (!--v360)
        {
          if (v726)
          {
            v366 = v732 + 16 * v728;
            if (v366 >= v726)
              v367 = -(uint64_t)(v730 * v699);
            else
              v367 = 0;
            v92 += 4 * v730 + 4 * v367;
            if (v366 >= v726)
              v368 = -(uint64_t)(v728 * v699);
            else
              v368 = 0;
            v51 = v366 + 16 * v368;
            v86 += 16 * v368 + 16 * v728;
            v83 = (char *)v92;
            v732 = v51;
          }
          else
          {
            v51 += 16 * v728;
            v83 += 4 * v730;
          }
          v93 += 16 * *(_QWORD *)v734;
          v84 += 4 * v738;
          if (!--v358)
            goto LABEL_865;
          goto LABEL_562;
        }
      }
    }
    v85 = (int)v4 * (int)v23;
    v738 = v696 - (int)v37 * (int)v23;
    v86 = -1;
    v87 = v730;
    v698 = v4;
    v699 = v730;
    v88 = v728;
    v56 = v728;
    goto LABEL_61;
  }
  v28 = *(unsigned int *)(v3 + 128);
  if ((v28 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      CMYKf_mark_constmask(v3, v20, *(double *)v9.i64, *(double *)v10.i64, v11, v12, v13, v14, v15, v16, (uint64_t)v27, v4, v5, v6, v28, v8);
    else
      CMYKf_mark_pixelmask(v3, v20, *(float32x2_t *)v9.f32, v10, v11, v12, *(double *)v13.i64, (float32x4_t)v14, *(double *)v15.i64, *(double *)v16.i64, (uint64_t)v27, v4, v5, v6, v28, v8);
    return 1;
  }
  v38 = *(_DWORD *)(v3 + 112);
  v39 = *(_DWORD *)(v3 + 116);
  v40 = (v38 + 15) & 0xFFFFFFF0;
  v41 = v40 * v39;
  if ((int)v41 <= 4096)
  {
    v43 = &v750;
    goto LABEL_37;
  }
  v42 = (float32x4_t *)malloc_type_malloc(v41, 0x75DBB33BuLL);
  if (v42)
  {
    v43 = v42;
    v27 = *(uint16x4_t **)(v22 + 136);
    LODWORD(v28) = *(_DWORD *)(v22 + 128);
LABEL_37:
    CGSConvertBitsToMask(v27, *(_DWORD *)(v22 + 124), v43, v40, v38, v39, v28);
    v73 = *(_OWORD *)(v22 + 112);
    v746[6] = *(_OWORD *)(v22 + 96);
    v747 = v73;
    v74 = *(_OWORD *)(v22 + 144);
    v748 = *(_OWORD *)(v22 + 128);
    v749 = v74;
    v75 = *(_OWORD *)(v22 + 48);
    v746[2] = *(_OWORD *)(v22 + 32);
    v746[3] = v75;
    v76 = *(_OWORD *)(v22 + 80);
    v746[4] = *(_OWORD *)(v22 + 64);
    v746[5] = v76;
    v77 = *(_OWORD *)v22;
    v78 = *(float32x4_t *)(v22 + 16);
    v746[0] = *(_OWORD *)v22;
    v746[1] = v78;
    HIDWORD(v747) = (v38 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v748 + 1) = v43;
    if (BYTE1(v746[0]) << 8 == 1024)
      CMYKf_mark_constmask((uint64_t)v746, v20, *(double *)&v77, *(double *)v78.i64, v67, v68, v69, v70, v71, v72, v61, v62, v63, v64, v65, v66);
    else
      CMYKf_mark_pixelmask((uint64_t)v746, v20, *(float32x2_t *)&v77, v78, v67, v68, *(double *)v69.i64, (float32x4_t)v70, *(double *)v71.i64, *(double *)v72.i64, v61, v62, v63, v64, v65, v66);
    if (v43 == &v750)
      return 1;
    v79 = v43;
    goto LABEL_1243;
  }
  return 1;
}

float PDAoverlayPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float result;

  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a6 - a5;
  v22 = a14 - a11;
  v23 = a14 - a12;
  v24 = a14 - a13;
  v25 = (float)(v18 * (float)(a14 - a10)) + (float)(v18 * (float)(a14 - a10));
  v26 = (float)(v19 * (float)(a14 - a11)) + (float)(v19 * (float)(a14 - a11));
  v27 = (float)(v20 * (float)(a14 - a12)) + (float)(v20 * (float)(a14 - a12));
  v28 = (float)(v21 * (float)(a14 - a13)) + (float)(v21 * (float)(a14 - a13));
  v29 = a6 * a14;
  v30 = a6 * 0.5;
  v31 = v18 < (float)(a6 * 0.5);
  v32 = a14 + 1.0;
  v33 = a6 + 1.0;
  v34 = (float)((float)((float)((float)(a6 + 1.0) * (float)(a14 - a10)) + (float)(v18 * (float)(a14 + 1.0))) - v25)
      - (float)(a6 * a14);
  v35 = 1.0 - a14;
  v36 = 1.0 - a6;
  v37 = (float)((float)((float)(1.0 - a6) * (float)(a14 - a10)) + (float)(v18 * (float)(1.0 - a14))) + v25;
  if (!v31)
    v37 = v34;
  v31 = v19 < v30;
  v38 = (float)((float)((float)(v33 * v22) + (float)(v19 * v32)) - v26) - v29;
  v39 = (float)((float)(v36 * v22) + (float)(v19 * v35)) + v26;
  if (!v31)
    v39 = v38;
  v31 = v20 < v30;
  v40 = (float)((float)((float)(v33 * v23) + (float)(v20 * v32)) - v27) - v29;
  v41 = (float)((float)(v36 * v23) + (float)(v20 * v35)) + v27;
  if (!v31)
    v41 = v40;
  v31 = v21 < v30;
  v42 = (float)((float)((float)(v33 * v24) + (float)(v21 * v32)) - v28) - v29;
  v43 = (float)((float)(v36 * v24) + (float)(v21 * v35)) + v28;
  if (!v31)
    v43 = v42;
  v44 = (float)(a6 + a14) - v29;
  *a1 = v44 - v37;
  a1[1] = v44 - v39;
  result = v44 - v41;
  a1[2] = v44 - v41;
  a1[3] = v44 - v43;
  a1[4] = v44;
  return result;
}

float PDAcolordodgePDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float result;

  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a14 - a10;
  v21 = a14 * a14;
  v22 = 0.0;
  v23 = 0.0;
  if (v18 != 0.0)
  {
    if (v20 == a14)
      v23 = 1.0;
    else
      v23 = (float)(v18 * v21) / (float)(a14 - v20);
  }
  v24 = a6 - a4;
  v25 = a14 - a11;
  if (v19 != 0.0)
  {
    if (v25 == a14)
      v22 = 1.0;
    else
      v22 = (float)(v19 * v21) / (float)(a14 - v25);
  }
  v26 = a6 - a5;
  v27 = a14 - a12;
  v28 = 0.0;
  v29 = 0.0;
  if (v24 != 0.0)
  {
    if (v27 == a14)
      v29 = 1.0;
    else
      v29 = (float)(v24 * v21) / (float)(a14 - v27);
  }
  v30 = a14 - a13;
  if (v26 != 0.0)
  {
    if (v30 == a14)
      v28 = 1.0;
    else
      v28 = (float)(v26 * v21) / (float)(a14 - v30);
  }
  if (a14 != 1.0)
  {
    v23 = v23 + (float)(v18 * (float)(1.0 - a14));
    v22 = v22 + (float)(v19 * (float)(1.0 - a14));
    v29 = v29 + (float)(v24 * (float)(1.0 - a14));
    v28 = v28 + (float)(v26 * (float)(1.0 - a14));
  }
  v31 = v23 + (float)(v20 * (float)(1.0 - a6));
  v32 = v22 + (float)(v25 * (float)(1.0 - a6));
  v33 = v29 + (float)(v27 * (float)(1.0 - a6));
  if (a6 == 1.0)
    v31 = v23;
  else
    v22 = v32;
  if (a6 == 1.0)
    v34 = v29;
  else
    v34 = v33;
  if (a6 == 1.0)
    v35 = v28;
  else
    v35 = v28 + (float)(v30 * (float)(1.0 - a6));
  v36 = (float)(a6 + a14) - (float)(a6 * a14);
  if (v31 > v36)
    v31 = v36;
  if (v22 > v36)
    v22 = v36;
  if (v34 > v36)
    v34 = v36;
  if (v35 > v36)
    v35 = v36;
  *a1 = v36 - v31;
  a1[1] = v36 - v22;
  result = v36 - v34;
  a1[2] = v36 - v34;
  a1[3] = v36 - v35;
  a1[4] = v36;
  return result;
}

float PDAcolorburnPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float result;

  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a6 - a5;
  v22 = a6 * a14;
  v23 = a6 * a14;
  v24 = a6 * a14;
  v25 = a6 * a14;
  v26 = a6 * a14;
  if (a14 != 1.0)
  {
    v23 = v22 + (float)(v18 * (float)(1.0 - a14));
    v24 = v22 + (float)(v19 * (float)(1.0 - a14));
    v25 = v22 + (float)(v20 * (float)(1.0 - a14));
    v26 = v22 + (float)(v21 * (float)(1.0 - a14));
  }
  v27 = a14 - a10;
  v28 = a14 - a11;
  v29 = a14 - a12;
  v30 = a14 - a13;
  if (a6 != 1.0)
  {
    v23 = v23 + (float)(v27 * (float)(1.0 - a6));
    v24 = v24 + (float)(v28 * (float)(1.0 - a6));
    v25 = v25 + (float)(v29 * (float)(1.0 - a6));
    v26 = v26 + (float)(v30 * (float)(1.0 - a6));
  }
  v31 = a6 - v18;
  if (v31 != 0.0)
  {
    if (v27 == 0.0 || (v23 = v23 - (float)((float)(v31 * (float)(a14 * a14)) / v27), v23 < 0.0))
      v23 = 0.0;
  }
  v32 = a6 - v19;
  if (v32 != 0.0)
  {
    if (v28 == 0.0 || (v24 = v24 - (float)((float)(v32 * (float)(a14 * a14)) / v28), v24 < 0.0))
      v24 = 0.0;
  }
  v33 = a6 - v20;
  if (v33 != 0.0)
  {
    if (v29 == 0.0 || (v25 = v25 - (float)((float)(v33 * (float)(a14 * a14)) / v29), v25 < 0.0))
      v25 = 0.0;
  }
  v34 = a6 - v21;
  if (v34 != 0.0)
  {
    if (v30 == 0.0 || (v26 = v26 - (float)((float)(v34 * (float)(a14 * a14)) / v30), v26 < 0.0))
      v26 = 0.0;
  }
  result = (float)(a6 + a14) - v22;
  *a1 = result - v23;
  a1[1] = result - v24;
  a1[2] = result - v25;
  a1[3] = result - v26;
  a1[4] = result;
  return result;
}

float PDAhardlightPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float result;

  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a6 - a5;
  v22 = a14 - a11;
  v23 = a14 - a12;
  v24 = a14 - a13;
  v25 = (float)(v18 * (float)(a14 - a10)) + (float)(v18 * (float)(a14 - a10));
  v26 = (float)(v19 * (float)(a14 - a11)) + (float)(v19 * (float)(a14 - a11));
  v27 = (float)(v20 * (float)(a14 - a12)) + (float)(v20 * (float)(a14 - a12));
  v28 = (float)(v21 * (float)(a14 - a13)) + (float)(v21 * (float)(a14 - a13));
  v29 = a6 * a14;
  v30 = a14 * 0.5;
  v31 = 1.0 - a14;
  v32 = 1.0 - a6;
  v33 = (float)((float)((float)(1.0 - a6) * (float)(a14 - a10)) + (float)(v18 * (float)(1.0 - a14))) + v25;
  v34 = a14 + 1.0;
  v35 = a6 + 1.0;
  v36 = (float)((float)((float)((float)(a6 + 1.0) * (float)(a14 - a10)) + (float)(v18 * (float)(a14 + 1.0))) - v25)
      - (float)(a6 * a14);
  if ((float)(a14 - a10) <= (float)(a14 * 0.5))
    v36 = v33;
  v37 = (float)((float)(v32 * v22) + (float)(v19 * v31)) + v26;
  v38 = (float)((float)((float)(v35 * v22) + (float)(v19 * v34)) - v26) - v29;
  if (v22 <= v30)
    v38 = v37;
  v39 = (float)((float)(v32 * v23) + (float)(v20 * v31)) + v27;
  v40 = (float)((float)((float)(v35 * v23) + (float)(v20 * v34)) - v27) - v29;
  if (v23 <= v30)
    v40 = v39;
  v41 = (float)((float)(v32 * v24) + (float)(v21 * v31)) + v28;
  v42 = (float)((float)((float)(v35 * v24) + (float)(v21 * v34)) - v28) - v29;
  if (v24 <= v30)
    v42 = v41;
  v43 = (float)(a6 + a14) - v29;
  *a1 = v43 - v36;
  a1[1] = v43 - v38;
  result = v43 - v40;
  a1[2] = v43 - v40;
  a1[3] = v43 - v42;
  a1[4] = v43;
  return result;
}

float32x4_t PDAsoftlightPDA(float32x4_t *a1, float32x2_t a2, float32_t a3, float a4, float a5, double a6, int32x2_t a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x2_t a17, float a18, float a19, float a20)
{
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float32x4_t result;

  *(float *)a7.i32 = a20;
  v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
  a2.f32[1] = a3;
  v19 = vsub_f32(v18, a2);
  v20 = *(float *)&a6 - a4;
  v21 = *(float *)&a6 - a5;
  v22 = (float32x2_t)vdup_lane_s32(a7, 0);
  v23 = vsub_f32(v22, a17);
  v24 = a20 - a18;
  v25 = a20 - a19;
  if (*(float *)&a6 == 0.0)
  {
    v28.i64[0] = 0;
    v29 = 0.0;
    v30 = 0.0;
  }
  else
  {
    v26 = vmul_f32(v19, v23);
    v27 = vsub_f32(vadd_f32(v26, v26), vdiv_f32(vmul_f32(vmul_f32(v19, v19), vsub_f32(vadd_f32(v23, v23), v22)), v18));
    *(int8x8_t *)v28.f32 = vbic_s8((int8x8_t)v27, (int8x8_t)vcltz_f32(v27));
    v29 = (float)((float)(v20 * v24) + (float)(v20 * v24))
        - (float)((float)((float)(v20 * v20) * (float)((float)(v24 + v24) - a20)) / *(float *)&a6);
    v30 = 0.0;
    if (v29 < 0.0)
      v29 = 0.0;
    if ((float)((float)((float)(v21 * v25) + (float)(v21 * v25))
               - (float)((float)((float)(v21 * v21) * (float)((float)(v25 + v25) - a20)) / *(float *)&a6)) >= 0.0)
      v30 = (float)((float)(v21 * v25) + (float)(v21 * v25))
          - (float)((float)((float)(v21 * v21) * (float)((float)(v25 + v25) - a20)) / *(float *)&a6);
  }
  if (a20 != 1.0)
  {
    *(float32x2_t *)v28.f32 = vmla_n_f32(*(float32x2_t *)v28.f32, v19, 1.0 - a20);
    v29 = v29 + (float)(v20 * (float)(1.0 - a20));
    v30 = v30 + (float)(v21 * (float)(1.0 - a20));
  }
  if (*(float *)&a6 != 1.0)
  {
    *(float32x2_t *)v28.f32 = vmla_n_f32(*(float32x2_t *)v28.f32, v23, 1.0 - *(float *)&a6);
    v29 = v29 + (float)(v24 * (float)(1.0 - *(float *)&a6));
    v30 = v30 + (float)(v25 * (float)(1.0 - *(float *)&a6));
  }
  v23.f32[0] = (float)(*(float *)&a6 + a20) - (float)(*(float *)&a6 * a20);
  v28.i64[1] = __PAIR64__(LODWORD(v30), LODWORD(v29));
  result = vsubq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0), v28);
  *a1 = result;
  a1[1].i32[0] = v23.i32[0];
  return result;
}

float PDAhuePDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float result;
  float v55;
  float v56;
  float v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a6 - a5;
  v22 = a14 - a10;
  v23 = a14 - a11;
  v24 = a14 - a12;
  v25 = v18 * a14;
  v26 = v18 - (float)(v18 * a14);
  v27 = v19 - (float)(v19 * a14);
  v28 = v20 - (float)(v20 * a14);
  v29 = v21 - (float)(v21 * a14);
  if (a14 == 1.0)
    v26 = 0.0;
  else
    v21 = v21 * a14;
  if (a14 == 1.0)
  {
    v27 = 0.0;
    v28 = 0.0;
    v30 = 0.0;
  }
  else
  {
    v30 = v29;
  }
  if (a14 == 1.0)
  {
    v31 = v19;
  }
  else
  {
    v20 = v20 * a14;
    v31 = v19 * a14;
  }
  if (a14 == 1.0)
    v25 = v18;
  v32 = v22 * a6;
  v33 = v23 * a6;
  v34 = (float)(v24 + v28) - (float)(v24 * a6);
  if (a6 == 1.0)
  {
    v32 = a14 - a10;
    v33 = a14 - a11;
    v35 = a14 - a12;
  }
  else
  {
    v35 = v24 * a6;
  }
  if (a6 == 1.0)
    v36 = v26;
  else
    v36 = (float)(v22 + v26) - (float)(v22 * a6);
  if (a6 == 1.0)
    v37 = v27;
  else
    v37 = (float)(v23 + v27) - (float)(v23 * a6);
  if (a6 == 1.0)
    v38 = v28;
  else
    v38 = v34;
  if (a6 == 1.0)
    v39 = v30;
  else
    v39 = (float)((float)(a14 - a13) + v30) - (float)((float)(a14 - a13) * a6);
  v55 = v32;
  v56 = v33;
  v57 = v35;
  v40 = v32 < v33;
  v41 = v32 >= v33;
  if (v35 >= *(&v55 + v41))
  {
    v42 = v32 >= v33;
    if (v35 > *(&v55 + v40))
    {
      v41 = v32 < v33;
      v40 = 2;
    }
  }
  else
  {
    v42 = 2;
  }
  v43 = *(&v55 + v40);
  v44 = *(&v55 + v42);
  if (v43 <= v44)
  {
    *(&v55 + v40) = 0.0;
    *(&v55 + v41) = 0.0;
  }
  else
  {
    if (v25 >= v31)
      v45 = v31;
    else
      v45 = v25;
    if (v25 >= v31)
      v46 = v25;
    else
      v46 = v31;
    if (v20 > v46)
      v47 = v20;
    else
      v47 = v46;
    if (v20 >= v45)
      v46 = v47;
    else
      v45 = v20;
    v48 = v46 - v45;
    *(&v55 + v40) = v48;
    *(&v55 + v41) = (float)(v48 / (float)(v43 - v44)) * (float)(*(&v55 + v41) - *(&v55 + v42));
  }
  *(&v55 + v42) = 0.0;
  v49 = (float)((float)((float)(v31 - v56) * 0.59) + (float)((float)(v25 - v55) * 0.3))
      + (float)((float)(v20 - v57) * 0.11);
  v50 = v55 + v49;
  v51 = v56 + v49;
  v52 = (float)(a6 + a14) - (float)(a6 * a14);
  v53 = v38 + (float)(v57 + v49);
  *a1 = v52 - (float)(v36 + v50);
  a1[1] = v52 - (float)(v37 + v51);
  result = v52 - (float)(v21 + v39);
  a1[2] = v52 - v53;
  a1[3] = result;
  a1[4] = v52;
  return result;
}

float PDAsaturationPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float result;
  float v50;
  float v51;
  float v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a6 - a5;
  v22 = a14 - a10;
  v23 = a14 - a11;
  v24 = a14 - a12;
  if (a14 == 1.0)
  {
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
  }
  else
  {
    v25 = v18 - (float)(v18 * a14);
    v26 = v19 - (float)(v19 * a14);
    v27 = v20 - (float)(v20 * a14);
    v28 = v21 - (float)(v21 * a14);
    v21 = v21 * a14;
    v20 = v20 * a14;
    v19 = v19 * a14;
    v18 = v18 * a14;
  }
  v29 = v22 * a6;
  v30 = v23 * a6;
  v31 = (float)((float)(a14 - a13) + v28) - (float)((float)(a14 - a13) * a6);
  if (a6 == 1.0)
  {
    v29 = a14 - a10;
    v30 = a14 - a11;
    v32 = a14 - a12;
  }
  else
  {
    v32 = v24 * a6;
  }
  if (a6 == 1.0)
    v33 = v25;
  else
    v33 = (float)(v22 + v25) - (float)(v22 * a6);
  if (a6 == 1.0)
    v34 = v26;
  else
    v34 = (float)(v23 + v26) - (float)(v23 * a6);
  if (a6 == 1.0)
    v35 = v27;
  else
    v35 = (float)(v24 + v27) - (float)(v24 * a6);
  if (a6 == 1.0)
    v31 = v28;
  v50 = v18;
  v51 = v19;
  v52 = v20;
  v36 = v18 < v19;
  v37 = v18 >= v19;
  if (v20 >= *(&v50 + v37))
  {
    v38 = v18 >= v19;
    if (v20 > *(&v50 + v36))
    {
      v37 = v18 < v19;
      v36 = 2;
    }
  }
  else
  {
    v38 = 2;
  }
  v39 = *(&v50 + v36);
  v40 = *(&v50 + v38);
  if (v39 <= v40)
  {
    *(&v50 + v36) = 0.0;
    *(&v50 + v37) = 0.0;
  }
  else
  {
    if (v29 >= v30)
      v41 = v30;
    else
      v41 = v29;
    if (v29 < v30)
      v29 = v30;
    if (v32 > v29)
      v42 = v32;
    else
      v42 = v29;
    if (v32 >= v41)
    {
      v32 = v41;
      v29 = v42;
    }
    v43 = v29 - v32;
    *(&v50 + v36) = v43;
    *(&v50 + v37) = (float)(v43 / (float)(v39 - v40)) * (float)(*(&v50 + v37) - *(&v50 + v38));
  }
  *(&v50 + v38) = 0.0;
  v44 = (float)((float)((float)(v19 - v51) * 0.59) + (float)((float)(v18 - v50) * 0.3))
      + (float)((float)(v20 - v52) * 0.11);
  v45 = v50 + v44;
  v46 = v51 + v44;
  v47 = (float)(a6 + a14) - (float)(a6 * a14);
  v48 = v35 + (float)(v52 + v44);
  *a1 = v47 - (float)(v33 + v45);
  a1[1] = v47 - (float)(v34 + v46);
  result = v47 - (float)(v21 + v31);
  a1[2] = v47 - v48;
  a1[3] = result;
  a1[4] = v47;
  return result;
}

float PDAluminosityPDA(float *a1, float a2, float a3, float a4, float a5, float a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, float a14)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float result;

  v18 = a6 - a2;
  v19 = a6 - a3;
  v20 = a6 - a4;
  v21 = a14 - a10;
  v22 = a14 - a11;
  v23 = a14 - a12;
  v24 = a14 - a13;
  v25 = v18 - (float)(v18 * a14);
  v26 = v19 - (float)(v19 * a14);
  v27 = v20 - (float)(v20 * a14);
  v28 = (float)(a6 - a5) - (float)((float)(a6 - a5) * a14);
  if (a14 == 1.0)
  {
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
  }
  else
  {
    v20 = v20 * a14;
    v19 = v19 * a14;
    v18 = v18 * a14;
  }
  v29 = (float)(v21 + v25) - (float)(v21 * a6);
  v30 = (float)(v22 + v26) - (float)(v22 * a6);
  v31 = (float)(v23 + v27) - (float)(v23 * a6);
  v32 = (float)(v24 + v28) - (float)(v24 * a6);
  if (a6 == 1.0)
  {
    v29 = v25;
    v33 = v26;
  }
  else
  {
    v21 = v21 * a6;
    v22 = v22 * a6;
    v23 = v23 * a6;
    v24 = v24 * a6;
    v33 = v30;
  }
  if (a6 == 1.0)
    v34 = v27;
  else
    v34 = v31;
  if (a6 != 1.0)
    v28 = v32;
  v35 = (float)((float)((float)(v22 - v19) * 0.59) + (float)((float)(v21 - v18) * 0.3))
      + (float)((float)(v23 - v20) * 0.11);
  v36 = (float)(a6 + a14) - (float)(a6 * a14);
  *a1 = v36 - (float)(v29 + (float)(v18 + v35));
  a1[1] = v36 - (float)(v33 + (float)(v19 + v35));
  result = v36 - (float)(v34 + (float)(v20 + v35));
  a1[2] = result;
  a1[3] = v36 - (float)(v24 + v28);
  a1[4] = v36;
  return result;
}

void CMYKf_mark_constmask(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, float32x4_t a9, int8x16_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  float v42;
  float v43;
  unsigned int v44;
  int v45;
  float32x4_t *v46;
  char v47;
  unsigned int *v48;
  float *v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  float32x4_t *v56;
  char v57;
  unsigned int *v58;
  float *v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  int v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  float v103;
  float v104;
  uint64_t v105;
  int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  int v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  int v132;
  float v133;
  float v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  uint64_t v138;
  int v139;
  float v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  uint64_t v146;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float v157;
  uint64_t v158;
  int v159;
  float v160;
  double v161;
  float v162;
  float v163;
  float32x2_t v164;
  uint64_t v165;
  int v166;
  float v167;
  float32x2_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float32x2_t v176;
  float32x2_t v177;
  uint64_t v178;
  int v179;
  float v180;
  float32x2_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  float v188;
  uint64_t v189;
  int v190;
  float v191;
  double v192;
  float v193;
  float v194;
  float v195;
  uint64_t v196;
  int v197;
  float v198;
  double v199;
  float v200;
  float v201;
  float v202;
  float32x2_t v203;
  uint64_t v204;
  int v205;
  float v206;
  double v207;
  float v208;
  float v209;
  uint64_t v210;
  int v211;
  float v212;
  double v213;
  float v214;
  float v215;
  float32x2_t v216;
  uint64_t v217;
  int v218;
  float v219;
  float32x2_t v220;
  int8x16_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x2_t v229;
  uint64_t v230;
  float32x4_t v231;
  int v232;
  float v233;
  float32x2_t v234;
  int8x16_t v235;
  float32x4_t v236;
  float v237;
  uint64_t v238;
  int v239;
  float v240;
  double v241;
  float v242;
  float v243;
  float v244;
  uint64_t v245;
  int v246;
  float v247;
  double v248;
  float v249;
  float v250;
  float v251;
  uint64_t v252;
  int v253;
  float v254;
  float v255;
  float v256;
  float32x2_t v257;
  float v258;
  float v259;
  uint64_t v260;
  int v261;
  float v262;
  double v263;
  float v264;
  float v265;
  int v266;
  int v267;
  int v268;
  char v269;
  unsigned int *v270;
  float32x4_t *v271;
  int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  char v277;
  unsigned int *v278;
  float32x4_t *v279;
  int v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  float v286;
  float v287;
  int v288;
  unsigned int v289;
  float v290;
  float v291;
  int v293;
  float v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  unint64_t v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  unsigned int v309;
  float v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  float32x4_t v315;
  unint64_t v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  unsigned int v327;
  float v328;
  float v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  int v343;
  float32x4_t v344;
  uint64_t v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  float32x4_t v349;
  float32x4_t v350;
  unsigned int v351;
  int v352;
  uint64_t v353;
  float32x2_t v354;
  float32x2_t v355;
  float32x2_t v356;
  float32x2_t v357;
  float32x2_t v358;
  float32x2_t v359;
  float32x2_t v360;
  float32x2_t v361;
  float32x2_t v362;
  __int32 v363;
  float32x4_t v364;
  unsigned __int32 v365;

  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(float **)(a1 + 96);
  if (v18)
    v19 = *v18;
  else
    v19 = 1.0;
  v21 = *(int *)(a1 + 12);
  v20 = *(int *)(a1 + 16);
  if (v16)
  {
    v22 = (unint64_t)*(int *)(a1 + 32) >> 2;
    v23 = (float *)(v16 + 4 * (v21 + v22 * v20));
    v24 = 1;
    if (!v17)
      return;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v24 = 0;
    if (!v17)
      return;
  }
  v25 = *(unsigned int *)(a1 + 4);
  v26 = v22 - (int)v25;
  if (v16)
    v27 = v22 - (int)v25;
  else
    v27 = v22;
  v28 = *(_DWORD *)(a1 + 8);
  v29 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v30 = *(int8x16_t *)*(_QWORD *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 40) + 16 * (v21 + v29 * v20);
  v32 = *(int *)(a1 + 124);
  v33 = v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32;
  v34 = v32 - (int)v25;
  v35 = v29 - (int)v25;
  v363 = v30.i32[0];
  v353 = v35;
  v36 = v34;
  v37 = *(unsigned int *)(a1 + 4);
  v38 = v27;
  switch((int)a2)
  {
    case 0:
      if (v16)
      {
        v39 = 4 * v24;
        do
        {
          v40 = v25;
          do
          {
            v41 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v41 == 255)
              {
                *(_QWORD *)v31 = 0;
                *(_QWORD *)(v31 + 8) = 0;
                v42 = 0.0;
              }
              else
              {
                v43 = (float)(v41 ^ 0xFFu) * 0.0039216;
                *(float32x4_t *)v31 = vmulq_n_f32(*(float32x4_t *)v31, v43);
                v42 = v43 * *v23;
              }
              *v23 = v42;
            }
            ++v33;
            v31 += 16;
            v23 = (float *)((char *)v23 + v39);
            --v40;
          }
          while (v40);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v266 = v25;
          do
          {
            v267 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v267 == 255)
              {
                *(_QWORD *)v31 = 0;
                *(_QWORD *)(v31 + 8) = 0;
              }
              else
              {
                *(float32x4_t *)v31 = vmulq_n_f32(*(float32x4_t *)v31, (float)(v267 ^ 0xFFu) * 0.0039216);
              }
            }
            ++v33;
            v31 += 16;
            --v266;
          }
          while (v266);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 1:
      v44 = v33 & 3;
      if (!v16)
      {
        v268 = -1 << (8 * v44);
        if ((v33 & 3) != 0)
          v269 = v33 & 0xFC;
        else
          v269 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
        if ((v33 & 3) != 0)
        {
          v270 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v268 = -1;
          v270 = (unsigned int *)(v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32);
        }
        if ((v33 & 3) != 0)
          v271 = (float32x4_t *)(v31 - 16 * (v33 & 3));
        else
          v271 = (float32x4_t *)v31;
        if ((v33 & 3) != 0)
          v272 = v44 + v25;
        else
          v272 = *(_DWORD *)(a1 + 4);
        if ((((_BYTE)v272 + v269) & 3) != 0)
        {
          v273 = 4 - (((_BYTE)v272 + v269) & 3);
          v44 += v273;
          v274 = 0xFFFFFFFF >> (8 * v273);
          if (v272 >= 4)
            v275 = v274;
          else
            v275 = 0;
          if (v272 >= 4)
            v274 = -1;
          v268 &= v274;
        }
        else
        {
          v275 = 0;
        }
        v331 = v34 - v44;
        v332 = v272 >> 2;
        v333 = v35 - v44;
        while (1)
        {
          v334 = *v270 & v268;
          v335 = v332;
          v336 = v275;
          if (!v334)
            goto LABEL_531;
LABEL_513:
          if (v334 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v334)
            {
              v337 = (float32x4_t)v30;
              if (v334 != 255)
                v337 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)v334 * 0.0039216), *v271, 1.0 - (float)((float)v334 * 0.0039216));
              *v271 = v337;
            }
            if (BYTE1(v334))
            {
              v338 = (float32x4_t)v30;
              if (BYTE1(v334) != 255)
                v338 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)BYTE1(v334) * 0.0039216), v271[1], 1.0 - (float)((float)BYTE1(v334) * 0.0039216));
              v271[1] = v338;
            }
            if (BYTE2(v334))
            {
              v339 = (float32x4_t)v30;
              if (BYTE2(v334) != 255)
                v339 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)BYTE2(v334) * 0.0039216), v271[2], 1.0 - (float)((float)BYTE2(v334) * 0.0039216));
              v271[2] = v339;
            }
            v340 = HIBYTE(v334);
            if (v340 == 255)
              goto LABEL_528;
            if (v340)
              v271[3] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)v340 * 0.0039216), v271[3], 1.0 - (float)((float)v340 * 0.0039216));
LABEL_531:
            while (1)
            {
              v341 = v335;
              v271 += 4;
              --v335;
              ++v270;
              if (v341 < 2)
                break;
              v334 = *v270;
              if (*v270)
                goto LABEL_513;
            }
            if (!v336)
              break;
            v336 = 0;
            v334 = *v270 & v275;
          }
          v270 = (unsigned int *)((char *)v270 + v331);
          v271 += v333;
          if (!--v28)
            return;
        }
        *v271 = (float32x4_t)v30;
        v271[1] = (float32x4_t)v30;
        v271[2] = (float32x4_t)v30;
LABEL_528:
        v271[3] = (float32x4_t)v30;
        goto LABEL_531;
      }
      v45 = -1 << (8 * v44);
      v46 = (float32x4_t *)(v31 - 16 * (v33 & 3));
      if ((v33 & 3) != 0)
        v47 = v33 & 0xFC;
      else
        v47 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
      if ((v33 & 3) != 0)
      {
        v48 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v45 = -1;
        v48 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0)
        v49 = &v23[-(v33 & 3)];
      else
        v49 = v23;
      if ((v33 & 3) != 0)
      {
        v50 = v44 + v25;
      }
      else
      {
        v46 = (float32x4_t *)v31;
        v50 = v25;
      }
      if ((((_BYTE)v50 + v47) & 3) != 0)
      {
        v51 = 4 - (((_BYTE)v50 + v47) & 3);
        v44 += v51;
        v52 = 0xFFFFFFFF >> (8 * v51);
        if (v50 >= 4)
          v53 = v52;
        else
          v53 = 0;
        if (v50 >= 4)
          v52 = -1;
        v45 &= v52;
      }
      else
      {
        v53 = 0;
      }
      v296 = v34 - v44;
      v297 = v35 - v44;
      v298 = v50 >> 2;
      v299 = v26 - v44;
      do
      {
        v300 = *v48 & v45;
        v301 = v298;
        v302 = v53;
        if (!v300)
          goto LABEL_482;
LABEL_461:
        if (v300 == -1)
        {
          *v46 = (float32x4_t)v30;
          *v49 = v19;
          v46[1] = (float32x4_t)v30;
          v49[1] = v19;
          v46[2] = (float32x4_t)v30;
          v49[2] = v19;
LABEL_479:
          v46[3] = (float32x4_t)v30;
          v49[3] = v19;
          goto LABEL_482;
        }
        while (1)
        {
          if ((_BYTE)v300)
          {
            if (v300 == 255)
            {
              *v46 = (float32x4_t)v30;
              v303 = v19;
            }
            else
            {
              v304 = (float)v300 * 0.0039216;
              *v46 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v304), *v46, 1.0 - v304);
              v303 = (float)(v19 * v304) + (float)(*v49 * (float)(1.0 - v304));
            }
            *v49 = v303;
          }
          if (BYTE1(v300))
          {
            if (BYTE1(v300) == 255)
            {
              v46[1] = (float32x4_t)v30;
              v305 = v19;
            }
            else
            {
              v306 = (float)BYTE1(v300) * 0.0039216;
              v46[1] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v306), v46[1], 1.0 - v306);
              v305 = (float)(v19 * v306) + (float)(v49[1] * (float)(1.0 - v306));
            }
            v49[1] = v305;
          }
          if (BYTE2(v300))
          {
            if (BYTE2(v300) == 255)
            {
              v46[2] = (float32x4_t)v30;
              v307 = v19;
            }
            else
            {
              v308 = (float)BYTE2(v300) * 0.0039216;
              v46[2] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v308), v46[2], 1.0 - v308);
              v307 = (float)(v19 * v308) + (float)(v49[2] * (float)(1.0 - v308));
            }
            v49[2] = v307;
          }
          v309 = HIBYTE(v300);
          if (v309 == 255)
            goto LABEL_479;
          if (v309)
          {
            v310 = (float)v309 * 0.0039216;
            v46[3] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v310), v46[3], 1.0 - v310);
            v49[3] = (float)(v19 * v310) + (float)(v49[3] * (float)(1.0 - v310));
          }
LABEL_482:
          while (1)
          {
            v311 = v301;
            v46 += 4;
            v49 += 4;
            --v301;
            ++v48;
            if (v311 < 2)
              break;
            v300 = *v48;
            if (*v48)
              goto LABEL_461;
          }
          if (!v302)
            break;
          v302 = 0;
          v300 = *v48 & v53;
        }
        v48 = (unsigned int *)((char *)v48 + v296);
        v46 += v297;
        v49 += v299;
        --v28;
      }
      while (v28);
      return;
    case 2:
      *(float *)&a3 = 1.0 - v19;
      v54 = v33 & 3;
      if (v16)
      {
        v55 = -1 << (8 * v54);
        v56 = (float32x4_t *)(v31 - 16 * (v33 & 3));
        if ((v33 & 3) != 0)
          v57 = v33 & 0xFC;
        else
          v57 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
        if ((v33 & 3) != 0)
        {
          v58 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v55 = -1;
          v58 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0)
          v59 = &v23[-(v33 & 3)];
        else
          v59 = v23;
        if ((v33 & 3) != 0)
        {
          v60 = v54 + v25;
        }
        else
        {
          v56 = (float32x4_t *)v31;
          v60 = v25;
        }
        if ((((_BYTE)v60 + v57) & 3) != 0)
        {
          v61 = 4 - (((_BYTE)v60 + v57) & 3);
          v54 += v61;
          v62 = 0xFFFFFFFF >> (8 * v61);
          if (v60 >= 4)
            v63 = v62;
          else
            v63 = 0;
          if (v60 >= 4)
            v62 = -1;
          v55 &= v62;
        }
        else
        {
          v63 = 0;
        }
        v312 = v34 - v54;
        v313 = v35 - v54;
        v314 = v60 >> 2;
        v315 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v316 = v26 - v54;
        while (1)
        {
          v317 = *v58 & v55;
          v318 = v314;
          v319 = v63;
          if (!v317)
            goto LABEL_503;
LABEL_492:
          if (v317 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v317)
            {
              v321 = (float)v317 * 0.0039216;
              v322 = 1.0 - (float)(v19 * v321);
              *v56 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v321), *v56, v322);
              *v59 = (float)(v19 * v321) + (float)(*v59 * v322);
            }
            if ((v317 & 0xFF00) != 0)
            {
              v323 = (float)BYTE1(v317) * 0.0039216;
              v324 = 1.0 - (float)(v19 * v323);
              v56[1] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v323), v56[1], v324);
              v59[1] = (float)(v19 * v323) + (float)(v59[1] * v324);
            }
            if ((v317 & 0xFF0000) != 0)
            {
              v325 = (float)BYTE2(v317) * 0.0039216;
              v326 = 1.0 - (float)(v19 * v325);
              v56[2] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v325), v56[2], v326);
              v59[2] = (float)(v19 * v325) + (float)(v59[2] * v326);
            }
            v327 = HIBYTE(v317);
            if (v327)
            {
              v328 = (float)v327 * 0.0039216;
              v329 = 1.0 - (float)(v19 * v328);
              v56[3] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v328), v56[3], v329);
              v320 = (float)(v19 * v328) + (float)(v59[3] * v329);
              goto LABEL_502;
            }
LABEL_503:
            while (1)
            {
              v330 = v318;
              v56 += 4;
              v59 += 4;
              --v318;
              ++v58;
              if (v330 < 2)
                break;
              v317 = *v58;
              if (*v58)
                goto LABEL_492;
            }
            if (!v319)
              break;
            v319 = 0;
            v317 = *v58 & v63;
          }
          v58 = (unsigned int *)((char *)v58 + v312);
          v56 += v313;
          v59 += v316;
          if (!--v28)
            return;
        }
        *v56 = vmlaq_f32((float32x4_t)v30, v315, *v56);
        *v59 = v19 + (float)(*v59 * *(float *)&a3);
        v56[1] = vmlaq_f32((float32x4_t)v30, v315, v56[1]);
        v59[1] = v19 + (float)(v59[1] * *(float *)&a3);
        v56[2] = vmlaq_f32((float32x4_t)v30, v315, v56[2]);
        v59[2] = v19 + (float)(v59[2] * *(float *)&a3);
        v56[3] = vmlaq_f32((float32x4_t)v30, v315, v56[3]);
        v320 = v19 + (float)(v59[3] * *(float *)&a3);
LABEL_502:
        v59[3] = v320;
        goto LABEL_503;
      }
      v276 = -1 << (8 * v54);
      if ((v33 & 3) != 0)
        v277 = v33 & 0xFC;
      else
        v277 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
      if ((v33 & 3) != 0)
      {
        v278 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v276 = -1;
        v278 = (unsigned int *)(v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32);
      }
      if ((v33 & 3) != 0)
        v279 = (float32x4_t *)(v31 - 16 * (v33 & 3));
      else
        v279 = (float32x4_t *)v31;
      if ((v33 & 3) != 0)
        v280 = v54 + v25;
      else
        v280 = *(_DWORD *)(a1 + 4);
      if ((((_BYTE)v280 + v277) & 3) != 0)
      {
        v281 = 4 - (((_BYTE)v280 + v277) & 3);
        v54 += v281;
        v282 = 0xFFFFFFFF >> (8 * v281);
        if (v280 >= 4)
          v283 = v282;
        else
          v283 = 0;
        if (v280 >= 4)
          v282 = -1;
        v276 &= v282;
      }
      else
      {
        v283 = 0;
      }
      v342 = v34 - v54;
      v343 = v280 >> 2;
      v344 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
      v345 = v35 - v54;
      do
      {
        v346 = *v278 & v276;
        v347 = v343;
        v348 = v283;
        if (!v346)
          goto LABEL_551;
LABEL_541:
        if (v346 == -1)
        {
          v349 = vmlaq_f32((float32x4_t)v30, v344, v279[1]);
          *v279 = vmlaq_f32((float32x4_t)v30, v344, *v279);
          v279[1] = v349;
          v350 = vmlaq_f32((float32x4_t)v30, v344, v279[3]);
          v279[2] = vmlaq_f32((float32x4_t)v30, v344, v279[2]);
          v279[3] = v350;
          goto LABEL_551;
        }
        while (1)
        {
          if ((_BYTE)v346)
            *v279 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)v346 * 0.0039216), *v279, 1.0 - (float)(v19 * (float)((float)v346 * 0.0039216)));
          if ((v346 & 0xFF00) != 0)
            v279[1] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)BYTE1(v346) * 0.0039216), v279[1], 1.0 - (float)(v19 * (float)((float)BYTE1(v346) * 0.0039216)));
          if ((v346 & 0xFF0000) != 0)
            v279[2] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)BYTE2(v346) * 0.0039216), v279[2], 1.0 - (float)(v19 * (float)((float)BYTE2(v346) * 0.0039216)));
          v351 = HIBYTE(v346);
          if (v351)
            v279[3] = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, (float)v351 * 0.0039216), v279[3], 1.0 - (float)(v19 * (float)((float)v351 * 0.0039216)));
LABEL_551:
          while (1)
          {
            v352 = v347;
            v279 += 4;
            --v347;
            ++v278;
            if (v352 < 2)
              break;
            v346 = *v278;
            if (*v278)
              goto LABEL_541;
          }
          if (!v348)
            break;
          v348 = 0;
          v346 = *v278 & v283;
        }
        v278 = (unsigned int *)((char *)v278 + v342);
        v279 += v345;
        --v28;
      }
      while (v28);
      return;
    case 3:
      v64 = 4 * v24;
      do
      {
        v65 = v25;
        do
        {
          v66 = *(unsigned __int8 *)v33;
          if (*(_BYTE *)v33)
          {
            if (v66 == 255)
            {
              v67 = v19 * *v23;
              *(float32x4_t *)v31 = vmulq_n_f32((float32x4_t)v30, *v23);
            }
            else
            {
              v68 = (float)v66 * 0.0039216;
              v69 = *v23;
              v70 = v68 * *v23;
              v71 = 1.0 - v68;
              *(float32x4_t *)v31 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v70), *(float32x4_t *)v31, v71);
              v67 = (float)(v19 * v70) + (float)(v69 * v71);
            }
            *v23 = v67;
          }
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v64);
          --v65;
        }
        while (v65);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 4:
      v72 = 4 * v24;
      do
      {
        v73 = v25;
        do
        {
          v74 = *(unsigned __int8 *)v33;
          if (*(_BYTE *)v33)
          {
            if (v74 == 255)
            {
              v75 = 1.0 - *v23;
              v76 = v19 * v75;
              *(float32x4_t *)v31 = vmulq_n_f32((float32x4_t)v30, v75);
            }
            else
            {
              v77 = (float)v74 * 0.0039216;
              v78 = *v23;
              v79 = v77 * (float)(1.0 - *v23);
              v80 = 1.0 - v77;
              *(float32x4_t *)v31 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)v30, v79), *(float32x4_t *)v31, v80);
              v76 = (float)(v19 * v79) + (float)(v78 * v80);
            }
            *v23 = v76;
          }
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v72);
          --v73;
        }
        while (v73);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 5:
      v81 = 4 * v24;
      do
      {
        v82 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v83 = *v23;
            v84 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v85 = 1.0 - (float)(v19 * v84);
            *(float32x4_t *)v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v85), vmulq_n_f32((float32x4_t)v30, v84), *v23);
            *v23 = (float)(v85 * v83) + (float)((float)(v19 * v84) * v83);
          }
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v81);
          --v82;
        }
        while (v82);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 6:
      v86 = 4 * v24;
      while (1)
      {
        v87 = v25;
        do
        {
          v88 = *(unsigned __int8 *)v33;
          if (!*(_BYTE *)v33)
            goto LABEL_98;
          v89 = *v23;
          v90 = 1.0 - *v23;
          if (v90 >= 1.0)
          {
            v93 = (float)v88 * 0.0039216;
            v92 = v19 * v93;
            *(float32x4_t *)v31 = vmulq_n_f32((float32x4_t)v30, v93);
          }
          else
          {
            if (v90 <= 0.0)
              goto LABEL_98;
            v91 = (float)v88 * 0.0039216;
            *(float32x4_t *)v31 = vmlaq_n_f32(*(float32x4_t *)v31, vmulq_n_f32((float32x4_t)v30, v91), v90);
            v92 = v89 + (float)((float)(v19 * v91) * v90);
          }
          *v23 = v92;
LABEL_98:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v86);
          --v87;
        }
        while (v87);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 7:
      if (v16)
      {
        v94 = 4 * v24;
        do
        {
          v95 = v25;
          do
          {
            v96 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v96 == 255)
              {
                v97 = v19 * *(float *)v31;
                v98 = v19;
              }
              else
              {
                v98 = (float)(v19 * (float)((float)v96 * 0.0039216)) + (float)(1.0 - (float)((float)v96 * 0.0039216));
                v97 = v98 * *(float *)v31;
              }
              *(float *)v31 = v97;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v98);
              *(float *)(v31 + 12) = v98 * *(float *)(v31 + 12);
              *v23 = v98 * *v23;
            }
            ++v33;
            v31 += 16;
            v23 = (float *)((char *)v23 + v94);
            --v95;
          }
          while (v95);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v284 = v25;
          do
          {
            v285 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v285 == 255)
              {
                v286 = v19 * *(float *)v31;
                v287 = v19;
              }
              else
              {
                v287 = (float)(v19 * (float)((float)v285 * 0.0039216)) + (float)(1.0 - (float)((float)v285 * 0.0039216));
                v286 = v287 * *(float *)v31;
              }
              *(float *)v31 = v286;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v287);
              *(float *)(v31 + 12) = v287 * *(float *)(v31 + 12);
            }
            ++v33;
            v31 += 16;
            --v284;
          }
          while (v284);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 8:
      v99 = 1.0 - v19;
      if (v16)
      {
        v100 = 4 * v24;
        do
        {
          v101 = v25;
          do
          {
            v102 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v102 == 255)
              {
                v103 = v99 * *(float *)v31;
                v104 = 1.0 - v19;
              }
              else
              {
                v104 = (float)(v19 * (float)((float)v102 * -0.0039216)) + 1.0;
                v103 = v104 * *(float *)v31;
              }
              *(float *)v31 = v103;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v104);
              *(float *)(v31 + 12) = v104 * *(float *)(v31 + 12);
              *v23 = v104 * *v23;
            }
            ++v33;
            v31 += 16;
            v23 = (float *)((char *)v23 + v100);
            --v101;
          }
          while (v101);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v288 = v25;
          do
          {
            v289 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v289 == 255)
              {
                v290 = v99 * *(float *)v31;
                v291 = 1.0 - v19;
              }
              else
              {
                v291 = (float)(v19 * (float)((float)v289 * -0.0039216)) + 1.0;
                v290 = v291 * *(float *)v31;
              }
              *(float *)v31 = v290;
              *(float32x2_t *)(v31 + 4) = vmul_n_f32(*(float32x2_t *)(v31 + 4), v291);
              *(float *)(v31 + 12) = v291 * *(float *)(v31 + 12);
            }
            ++v33;
            v31 += 16;
            --v288;
          }
          while (v288);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 9:
      v105 = 4 * v24;
      do
      {
        v106 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v107 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v108 = *v23;
            v109 = 1.0 - *v23;
            v110 = (float)(1.0 - v107) + (float)(v19 * v107);
            *(float32x4_t *)v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v110), vmulq_n_f32((float32x4_t)v30, v107), v109);
            *v23 = (float)(v110 * v108) + (float)((float)(v19 * v107) * v109);
          }
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v105);
          --v106;
        }
        while (v106);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 10:
      v111 = 4 * v24;
      do
      {
        v112 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v113 = *v23;
            v114 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v115 = 1.0 - *v23;
            v116 = 1.0 - (float)(v19 * v114);
            *(float32x4_t *)v31 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v31, v116), vmulq_n_f32((float32x4_t)v30, v114), v115);
            *v23 = (float)(v116 * v113) + (float)((float)(v19 * v114) * v115);
          }
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v111);
          --v112;
        }
        while (v112);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        --v28;
      }
      while (v28);
      return;
    case 11:
      if (v16)
      {
        v117 = 4 * v24;
        do
        {
          v118 = v25;
          do
          {
            if (*(_BYTE *)v33)
            {
              v119 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              v120 = *(float *)v30.i32 * v119;
              v121 = *(float *)&v30.i32[1] * v119;
              v122 = *(float *)&v30.i32[2] * v119;
              v123 = *(float *)&v30.i32[3] * v119;
              v124 = v19 * v119;
              v125 = (float)(v124 - v120) + (float)(*v23 - *(float *)v31);
              v126 = v124 + *v23;
              if (v126 > 1.0)
                v126 = 1.0;
              v127 = (float)(v124 - v121) + (float)(*v23 - *(float *)(v31 + 4));
              *(float *)v31 = v126 - v125;
              v128 = *(float *)(v31 + 12);
              v129 = (float)(v124 - v122) + (float)(*v23 - *(float *)(v31 + 8));
              *(float *)(v31 + 4) = v126 - v127;
              v130 = *v23 - v128;
              *(float *)(v31 + 8) = v126 - v129;
              *v23 = v126;
              *(float *)(v31 + 12) = v126 - (float)((float)(v124 - v123) + v130);
            }
            ++v33;
            v31 += 16;
            v23 = (float *)((char *)v23 + v117);
            --v118;
          }
          while (v118);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        __asm { FMOV            V1.4S, #1.0 }
        do
        {
          v293 = v25;
          do
          {
            if (*(_BYTE *)v33)
            {
              v294 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a6.f32[0] = v19 * v294;
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
              *(float32x4_t *)v31 = vsubq_f32(_Q1, vaddq_f32(vsubq_f32(a6, vmulq_n_f32((float32x4_t)v30, v294)), vsubq_f32(_Q1, *(float32x4_t *)v31)));
            }
            ++v33;
            v31 += 16;
            --v293;
          }
          while (v293);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 12:
      if (v16)
      {
        v131 = 4 * v24;
        do
        {
          v132 = v25;
          do
          {
            if (*(_BYTE *)v33)
            {
              v133 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              v134 = (float)(v19 * v133) + *v23;
              if (v134 > 1.0)
                v134 = 1.0;
              v135.i64[0] = *(_QWORD *)v31;
              *v23 = v134;
              v135.i64[1] = *(_QWORD *)(v31 + 8);
              *(float32x4_t *)v31 = vaddq_f32(vmulq_n_f32((float32x4_t)v30, v133), v135);
            }
            ++v33;
            v31 += 16;
            v23 = (float *)((char *)v23 + v131);
            --v132;
          }
          while (v132);
          v33 += v34;
          v31 += 16 * v35;
          v23 += v27;
          --v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v295 = v25;
          do
          {
            if (*(_BYTE *)v33)
              *(float32x4_t *)v31 = vaddq_f32(vmulq_n_f32((float32x4_t)v30, (float)*(unsigned __int8 *)v33 * 0.0039216), *(float32x4_t *)v31);
            ++v33;
            v31 += 16;
            --v295;
          }
          while (v295);
          v33 += v34;
          v31 += 16 * v35;
          --v28;
        }
        while (v28);
      }
      return;
    case 13:
      v136 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v137 = (float32x2_t)vextq_s8(v30, v30, 0xCuLL).u64[0];
      v138 = 4 * v24;
      a6.i32[0] = 1.0;
      while (1)
      {
        v139 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v140 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a7.f32[0] = v19 * v140;
            if ((float)(v19 * v140) > 0.0)
            {
              v141 = vmul_n_f32(v136, v140);
              *(float32x2_t *)a10.i8 = vmul_n_f32(v137, v140);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_167;
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              v142 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v143 = (float32x4_t)vextq_s8(a10, a10, 4uLL);
              *(float32x2_t *)&v143.i32[1] = v141;
              v144 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v143);
              v145 = (int8x16_t)vmulq_f32(v142, v144);
              a10 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a6)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v145, v142, 1.0 - a7.f32[0]), v145);
              a7.f32[0] = (float)(a9.f32[0] + a7.f32[0]) - (float)(a9.f32[0] * a7.f32[0]);
              a9 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a6)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)a10, v144, 1.0 - a9.f32[0]), a10));
              v141 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 4uLL).u64[0];
              if (v16)
              {
                a10 = vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL);
LABEL_167:
                *(_DWORD *)v31 = a10.i32[1];
                *(float32x2_t *)(v31 + 4) = v141;
                *(_DWORD *)(v31 + 12) = a10.i32[0];
                *v23 = a7.f32[0];
                goto LABEL_169;
              }
              *(_DWORD *)v31 = a9.i32[0];
              *(float32x2_t *)(v31 + 4) = v141;
              *(_DWORD *)(v31 + 12) = a9.i32[3];
            }
          }
LABEL_169:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v138);
          --v139;
        }
        while (v139);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 14:
      v146 = 4 * v24;
      __asm { FMOV            V1.4S, #1.0 }
      while (1)
      {
        v152 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v153 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v153;
            if ((float)(v19 * v153) > 0.0)
            {
              v154 = vmulq_n_f32((float32x4_t)v30, v153);
              if (v16)
              {
                a7.f32[0] = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_181;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v155 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), *(float32x4_t *)v31);
              v156 = vmlaq_f32(v155, vsubq_f32(_Q1, v155), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v154));
              a5.f32[0] = (float)(a5.f32[0] + a7.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              v154 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v156);
              if (v16)
              {
LABEL_181:
                *(float32x4_t *)v31 = v154;
                *v23 = a5.f32[0];
                goto LABEL_183;
              }
              *(float32x4_t *)v31 = v154;
            }
          }
LABEL_183:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v146);
          --v152;
        }
        while (v152);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 15:
      v157 = *(float *)&v30.i32[3];
      v354 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v158 = 4 * v24;
      while (1)
      {
        v159 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v160 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v160;
            if ((float)(v19 * v160) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v160;
              v161 = COERCE_DOUBLE(vmul_n_f32(v354, v160));
              v162 = v157 * v160;
              if (v16)
              {
                v163 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_196;
              }
              else
              {
                v163 = 1.0;
              }
              PDAoverlayPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v163, *(double *)a8.i64, v161, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v161, *((float *)&v161 + 1), v162, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v161 = *(double *)((char *)v364.i64 + 4);
              v162 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_196:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v161;
                *(float *)(v31 + 12) = v162;
                *v23 = *(float *)a10.i32;
                goto LABEL_198;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v161;
              *(float *)(v31 + 12) = v162;
              v30.i32[0] = v363;
            }
          }
LABEL_198:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v158);
          --v159;
        }
        while (v159);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 16:
      v164 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(v30, v30, 8uLL).i32[1];
      v165 = 4 * v24;
      a5.i32[0] = 1.0;
      while (1)
      {
        v166 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v167 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a6.f32[0] = v19 * v167;
            if ((float)(v19 * v167) > 0.0)
            {
              v168 = vmul_n_f32(v164, v167);
              *(float32x2_t *)v169.i8 = vmul_n_f32(*(float32x2_t *)v30.i8, v167);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_211;
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              v169.i32[3] = v169.i32[1];
              v169.i32[1] = v168.i32[0];
              v170 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v169.i32[2] = v168.i32[1];
              v171 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)v169);
              v172 = (int8x16_t)vmulq_n_f32(v170, a6.f32[0]);
              v173 = (int8x16_t)vmulq_n_f32(v171, a9.f32[0]);
              v174 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v172, (float32x4_t)v173), v173, v172);
              v175 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a5)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v174, v170, 1.0 - a6.f32[0]), v174);
              a6.f32[0] = (float)(a9.f32[0] + a6.f32[0]) - (float)(a9.f32[0] * a6.f32[0]);
              v169 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a5)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v175, v171, 1.0 - a9.f32[0]), v175));
              v168 = (float32x2_t)vextq_s8(v169, v169, 4uLL).u64[0];
              if (v16)
              {
                a9 = (float32x4_t)vextq_s8(v169, v169, 8uLL);
                v169.i32[1] = a9.i32[1];
LABEL_211:
                *(_DWORD *)v31 = v169.i32[0];
                *(float32x2_t *)(v31 + 4) = v168;
                *(_DWORD *)(v31 + 12) = v169.i32[1];
                *v23 = a6.f32[0];
                goto LABEL_213;
              }
              *(_DWORD *)v31 = v169.i32[0];
              *(float32x2_t *)(v31 + 4) = v168;
              *(_DWORD *)(v31 + 12) = v169.i32[3];
            }
          }
LABEL_213:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v165);
          --v166;
        }
        while (v166);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 17:
      v176 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v177 = (float32x2_t)vextq_s8(v30, v30, 0xCuLL).u64[0];
      v178 = 4 * v24;
      a6.i32[0] = 1.0;
      while (1)
      {
        v179 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v180 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a7.f32[0] = v19 * v180;
            if ((float)(v19 * v180) > 0.0)
            {
              v181 = vmul_n_f32(v176, v180);
              *(float32x2_t *)a10.i8 = vmul_n_f32(v177, v180);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_226;
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              v182 = (float32x4_t)vextq_s8(a10, a10, 4uLL);
              v182.i32[1] = v181.i32[0];
              v183 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v182.i32[2] = v181.i32[1];
              v184 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v182);
              v185 = (int8x16_t)vmulq_n_f32(v183, a7.f32[0]);
              v186 = (int8x16_t)vmulq_n_f32(v184, a9.f32[0]);
              v187 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v186, (float32x4_t)v185), v186, v185);
              a10 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a6)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v187, v183, 1.0 - a7.f32[0]), v187);
              a7.f32[0] = (float)(a9.f32[0] + a7.f32[0]) - (float)(a9.f32[0] * a7.f32[0]);
              a9 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a9, a6)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)a10, v184, 1.0 - a9.f32[0]), a10));
              v181 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 4uLL).u64[0];
              if (v16)
              {
                a10 = vextq_s8((int8x16_t)a9, (int8x16_t)a9, 0xCuLL);
LABEL_226:
                *(_DWORD *)v31 = a10.i32[1];
                *(float32x2_t *)(v31 + 4) = v181;
                *(_DWORD *)(v31 + 12) = a10.i32[0];
                *v23 = a7.f32[0];
                goto LABEL_228;
              }
              *(_DWORD *)v31 = a9.i32[0];
              *(float32x2_t *)(v31 + 4) = v181;
              *(_DWORD *)(v31 + 12) = a9.i32[3];
            }
          }
LABEL_228:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v178);
          --v179;
        }
        while (v179);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 18:
      v188 = *(float *)&v30.i32[3];
      v355 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v189 = 4 * v24;
      while (1)
      {
        v190 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v191 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v191;
            if ((float)(v19 * v191) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v191;
              v192 = COERCE_DOUBLE(vmul_n_f32(v355, v191));
              v193 = v188 * v191;
              if (v16)
              {
                v194 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_241;
              }
              else
              {
                v194 = 1.0;
              }
              PDAcolordodgePDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v194, *(double *)a8.i64, v192, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v192, *((float *)&v192 + 1), v193, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v192 = *(double *)((char *)v364.i64 + 4);
              v193 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_241:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v192;
                *(float *)(v31 + 12) = v193;
                *v23 = *(float *)a10.i32;
                goto LABEL_243;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v192;
              *(float *)(v31 + 12) = v193;
              v30.i32[0] = v363;
            }
          }
LABEL_243:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v189);
          --v190;
        }
        while (v190);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 19:
      v195 = *(float *)&v30.i32[3];
      v356 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v196 = 4 * v24;
      while (1)
      {
        v197 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v198 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v198;
            if ((float)(v19 * v198) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v198;
              v199 = COERCE_DOUBLE(vmul_n_f32(v356, v198));
              v200 = v195 * v198;
              if (v16)
              {
                v201 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_256;
              }
              else
              {
                v201 = 1.0;
              }
              PDAcolorburnPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v201, *(double *)a8.i64, v199, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v199, *((float *)&v199 + 1), v200, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v199 = *(double *)((char *)v364.i64 + 4);
              v200 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_256:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v199;
                *(float *)(v31 + 12) = v200;
                *v23 = *(float *)a10.i32;
                goto LABEL_258;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v199;
              *(float *)(v31 + 12) = v200;
              v30.i32[0] = v363;
            }
          }
LABEL_258:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v196);
          --v197;
        }
        while (v197);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 20:
      v202 = *(float *)&v30.i32[3];
      v203 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v357 = v203;
      v204 = 4 * v24;
      while (1)
      {
        v205 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v206 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v206;
            if ((float)(v19 * v206) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v206;
              *(float32x2_t *)&v207 = vmul_n_f32(v357, v206);
              v208 = v202 * v206;
              if (v16)
              {
                a7.f32[0] = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_271;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v203.i32[0] = *(_DWORD *)v31;
              v203 = (float32x2_t)PDAsoftlightPDA(&v364, v203, *(float32_t *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), *(double *)a7.i64, *(int32x2_t *)a8.i8, v207, *(double *)a10.i64, a2, v35, v34, v25, a14, a15, a16, (float32x2_t)__PAIR64__(LODWORD(v207), a8.u32[0]), *((float *)&v207 + 1), v208,
                                    *(float *)a10.i32).u64[0];
              a8.i32[0] = v364.i32[0];
              v207 = *(double *)((char *)v364.i64 + 4);
              v208 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_271:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v207;
                *(float *)(v31 + 12) = v208;
                *v23 = *(float *)a10.i32;
                goto LABEL_273;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v207;
              *(float *)(v31 + 12) = v208;
              v30.i32[0] = v363;
            }
          }
LABEL_273:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v204);
          --v205;
        }
        while (v205);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        v25 = v37;
        if (!v28)
          return;
      }
    case 21:
      v209 = *(float *)&v30.i32[3];
      v358 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v210 = 4 * v24;
      while (1)
      {
        v211 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v212 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v212;
            if ((float)(v19 * v212) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v212;
              v213 = COERCE_DOUBLE(vmul_n_f32(v358, v212));
              v214 = v209 * v212;
              if (v16)
              {
                v215 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_286;
              }
              else
              {
                v215 = 1.0;
              }
              PDAhardlightPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v215, *(double *)a8.i64, v213, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v213, *((float *)&v213 + 1), v214, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v213 = *(double *)((char *)v364.i64 + 4);
              v214 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_286:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v213;
                *(float *)(v31 + 12) = v214;
                *v23 = *(float *)a10.i32;
                goto LABEL_288;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v213;
              *(float *)(v31 + 12) = v214;
              v30.i32[0] = v363;
            }
          }
LABEL_288:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v210);
          --v211;
        }
        while (v211);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 22:
      v216 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(v30, v30, 8uLL).i32[1];
      v217 = 4 * v24;
      while (1)
      {
        v218 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v219 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a8.i32 = v19 * v219;
            if ((float)(v19 * v219) > 0.0)
            {
              v220 = vmul_n_f32(v216, v219);
              *(float32x2_t *)v221.i8 = vmul_n_f32(*(float32x2_t *)v30.i8, v219);
              if (v16)
              {
                a9.f32[0] = *v23;
                if (*v23 <= 0.0)
                {
                  v222.i32[0] = a8.i32[0];
LABEL_301:
                  *(_DWORD *)v31 = v221.i32[0];
                  *(float32x2_t *)(v31 + 4) = v220;
                  *(_DWORD *)(v31 + 12) = v221.i32[1];
                  *v23 = v222.f32[0];
                  goto LABEL_303;
                }
              }
              else
              {
                a9.i32[0] = 1.0;
              }
              v222 = *(float32x4_t *)v31;
              v223 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), *(float32x4_t *)v31);
              v221.i32[3] = v221.i32[1];
              v221.i32[1] = v220.i32[0];
              v222.f32[0] = (float)(a9.f32[0] + *(float *)a8.i32) - (float)(a9.f32[0] * *(float *)a8.i32);
              v221.i32[2] = v220.i32[1];
              v224 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0), (float32x4_t)v221);
              v225 = vaddq_f32(v223, v224);
              v226 = vmulq_n_f32(v223, *(float *)a8.i32);
              v227 = vmulq_n_f32(v224, a9.f32[0]);
              v228 = vsubq_f32(v225, v226);
              a8 = (int8x16_t)vsubq_f32(v226, v227);
              a9 = vnegq_f32((float32x4_t)a8);
              v221 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 0), vaddq_f32(vsubq_f32(v228, v227), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)a8), (int8x16_t)a9, a8)));
              v220 = (float32x2_t)vextq_s8(v221, v221, 4uLL).u64[0];
              if (v16)
              {
                a8 = vextq_s8(v221, v221, 8uLL);
                v221.i32[1] = a8.i32[1];
                goto LABEL_301;
              }
              *(_DWORD *)v31 = v221.i32[0];
              *(float32x2_t *)(v31 + 4) = v220;
              *(_DWORD *)(v31 + 12) = v221.i32[3];
            }
          }
LABEL_303:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v217);
          --v218;
        }
        while (v218);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 23:
      v229 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v30.i32[1] = vextq_s8(v30, v30, 8uLL).i32[1];
      v230 = 4 * v24;
      v231.i64[0] = 0xC0000000C0000000;
      v231.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        v232 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v233 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a9.f32[0] = v19 * v233;
            if ((float)(v19 * v233) > 0.0)
            {
              v234 = vmul_n_f32(v229, v233);
              *(float32x2_t *)v235.i8 = vmul_n_f32(*(float32x2_t *)v30.i8, v233);
              if (v16)
              {
                a10.i32[0] = *(__int32 *)v23;
                if (*v23 <= 0.0)
                {
                  a8.i32[0] = a9.i32[0];
LABEL_316:
                  *(_DWORD *)v31 = v235.i32[0];
                  *(float32x2_t *)(v31 + 4) = v234;
                  *(_DWORD *)(v31 + 12) = v235.i32[1];
                  *v23 = *(float *)a8.i32;
                  goto LABEL_318;
                }
              }
              else
              {
                a10.i32[0] = 1.0;
              }
              *(float *)a8.i32 = (float)(*(float *)a10.i32 + a9.f32[0]) - (float)(*(float *)a10.i32 * a9.f32[0]);
              a10 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.i8, 0), *(float32x4_t *)v31);
              a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
              v235.i32[3] = v235.i32[1];
              *(float32x2_t *)((char *)v235.i64 + 4) = v234;
              v236 = vsubq_f32(a9, (float32x4_t)v235);
              v235 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0), vmlaq_f32(vaddq_f32((float32x4_t)a10, v236), v231, vmulq_f32(v236, (float32x4_t)a10)));
              v234 = (float32x2_t)vextq_s8(v235, v235, 4uLL).u64[0];
              if (v16)
              {
                a9 = (float32x4_t)vextq_s8(v235, v235, 8uLL);
                v235.i32[1] = a9.i32[1];
                goto LABEL_316;
              }
              *(_DWORD *)v31 = v235.i32[0];
              *(float32x2_t *)(v31 + 4) = v234;
              *(_DWORD *)(v31 + 12) = v235.i32[3];
            }
          }
LABEL_318:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v230);
          --v232;
        }
        while (v232);
        v33 += v34;
        v31 += 16 * v35;
        v23 += v27;
        if (!--v28)
          return;
      }
    case 24:
      v237 = *(float *)&v30.i32[3];
      v359 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v238 = 4 * v24;
      while (1)
      {
        v239 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v240 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v240;
            if ((float)(v19 * v240) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v240;
              v241 = COERCE_DOUBLE(vmul_n_f32(v359, v240));
              v242 = v237 * v240;
              if (v16)
              {
                v243 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_331;
              }
              else
              {
                v243 = 1.0;
              }
              PDAhuePDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v243, *(double *)a8.i64, v241, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v241, *((float *)&v241 + 1), v242, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v241 = *(double *)((char *)v364.i64 + 4);
              v242 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_331:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v241;
                *(float *)(v31 + 12) = v242;
                *v23 = *(float *)a10.i32;
                goto LABEL_333;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v241;
              *(float *)(v31 + 12) = v242;
              v30.i32[0] = v363;
            }
          }
LABEL_333:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v238);
          --v239;
        }
        while (v239);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 25:
      v244 = *(float *)&v30.i32[3];
      v360 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v245 = 4 * v24;
      while (1)
      {
        v246 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v247 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)a10.i32 = v19 * v247;
            if ((float)(v19 * v247) > 0.0)
            {
              *(float *)a8.i32 = *(float *)v30.i32 * v247;
              v248 = COERCE_DOUBLE(vmul_n_f32(v360, v247));
              v249 = v244 * v247;
              if (v16)
              {
                v250 = *v23;
                if (*v23 <= 0.0)
                  goto LABEL_346;
              }
              else
              {
                v250 = 1.0;
              }
              PDAsaturationPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v250, *(double *)a8.i64, v248, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v248, *((float *)&v248 + 1), v249, *(float *)a10.i32);
              a8.i32[0] = v364.i32[0];
              v248 = *(double *)((char *)v364.i64 + 4);
              v249 = v364.f32[3];
              if (v16)
              {
                a10.i32[0] = v365;
                v30.i32[0] = v363;
LABEL_346:
                *(_DWORD *)v31 = a8.i32[0];
                *(double *)(v31 + 4) = v248;
                *(float *)(v31 + 12) = v249;
                *v23 = *(float *)a10.i32;
                goto LABEL_348;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(double *)(v31 + 4) = v248;
              *(float *)(v31 + 12) = v249;
              v30.i32[0] = v363;
            }
          }
LABEL_348:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v245);
          --v246;
        }
        while (v246);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 26:
      v251 = *(float *)&v30.i32[3];
      v361 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v252 = 4 * v24;
      while (1)
      {
        v253 = v25;
        do
        {
          if (*(_BYTE *)v33)
          {
            v254 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v255 = v19 * v254;
            if ((float)(v19 * v254) > 0.0)
            {
              v256 = *(float *)v30.i32 * v254;
              v257 = vmul_n_f32(v361, v254);
              v258 = v251 * v254;
              if (v16)
              {
                a8.i32[0] = *(__int32 *)v23;
                if (*v23 <= 0.0)
                  goto LABEL_361;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              a9.i32[0] = *(_DWORD *)v31;
              a10.i32[0] = *(_DWORD *)(v31 + 12);
              PDAluminosityPDA(v364.f32, v256, v257.f32[0], v257.f32[1], v258, v255, *(double *)a8.i64, *(double *)a9.i64, *(double *)a10.i64, *(float *)v31, COERCE_FLOAT(*(_QWORD *)(v31 + 4)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v31 + 4))), *(float *)a10.i32, *(float *)a8.i32);
              v256 = v364.f32[0];
              v257 = *(float32x2_t *)&v364.i32[1];
              v258 = v364.f32[3];
              if (v16)
              {
                v255 = *(float *)&v365;
                v30.i32[0] = v363;
LABEL_361:
                *(float *)v31 = v256;
                *(float32x2_t *)(v31 + 4) = v257;
                *(float *)(v31 + 12) = v258;
                *v23 = v255;
                goto LABEL_363;
              }
              *(_DWORD *)v31 = v364.i32[0];
              *(float32x2_t *)(v31 + 4) = v257;
              *(float *)(v31 + 12) = v258;
              v30.i32[0] = v363;
            }
          }
LABEL_363:
          ++v33;
          v31 += 16;
          v23 = (float *)((char *)v23 + v252);
          --v253;
        }
        while (v253);
        v33 += v36;
        v31 += 16 * v353;
        v23 += v38;
        --v28;
        LODWORD(v25) = v37;
        if (!v28)
          return;
      }
    case 27:
      v259 = *(float *)&v30.i32[3];
      v362 = (float32x2_t)vextq_s8(v30, v30, 4uLL).u64[0];
      v260 = 4 * v24;
      break;
    default:
      return;
  }
  do
  {
    v261 = v25;
    do
    {
      if (*(_BYTE *)v33)
      {
        v262 = (float)*(unsigned __int8 *)v33 * 0.0039216;
        *(float *)a10.i32 = v19 * v262;
        if ((float)(v19 * v262) > 0.0)
        {
          *(float *)a8.i32 = *(float *)v30.i32 * v262;
          v263 = COERCE_DOUBLE(vmul_n_f32(v362, v262));
          v264 = v259 * v262;
          if (v16)
          {
            v265 = *v23;
            if (*v23 <= 0.0)
              goto LABEL_376;
          }
          else
          {
            v265 = 1.0;
          }
          PDAluminosityPDA(v364.f32, *(float *)v31, *(float *)(v31 + 4), *(float *)(v31 + 8), *(float *)(v31 + 12), v265, *(double *)a8.i64, v263, *(double *)a10.i64, *(float *)a8.i32, *(float *)&v263, *((float *)&v263 + 1), v264, *(float *)a10.i32);
          a8.i32[0] = v364.i32[0];
          v263 = *(double *)((char *)v364.i64 + 4);
          v264 = v364.f32[3];
          if (v16)
          {
            a10.i32[0] = v365;
            v30.i32[0] = v363;
LABEL_376:
            *(_DWORD *)v31 = a8.i32[0];
            *(double *)(v31 + 4) = v263;
            *(float *)(v31 + 12) = v264;
            *v23 = *(float *)a10.i32;
            goto LABEL_378;
          }
          *(_DWORD *)v31 = v364.i32[0];
          *(double *)(v31 + 4) = v263;
          *(float *)(v31 + 12) = v264;
          v30.i32[0] = v363;
        }
      }
LABEL_378:
      ++v33;
      v31 += 16;
      v23 = (float *)((char *)v23 + v260);
      --v261;
    }
    while (v261);
    v33 += v36;
    v31 += 16 * v353;
    v23 += v38;
    --v28;
    LODWORD(v25) = v37;
  }
  while (v28);
}

void CMYKf_mark_pixelmask(uint64_t a1, uint64_t a2, float32x2_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  float32x4_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  float32x4_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  int v75;
  int v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float32x4_t *v81;
  float *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  int v95;
  int v96;
  unsigned int v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float32x4_t *v105;
  float *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  int v119;
  int v120;
  unsigned int v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float32x4_t *v129;
  float *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float *v142;
  int v143;
  int v144;
  float v145;
  float v146;
  float v147;
  float32x4_t *v148;
  float *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  int v162;
  int v163;
  unsigned int v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float32x4_t *v172;
  float *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float *v184;
  int v185;
  int v186;
  unsigned int v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float32x4_t *v195;
  float *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  int v208;
  int v209;
  unsigned int v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float32x4_t *v217;
  float *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  float *v230;
  int v231;
  int v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float32x4_t *v238;
  float *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  float *v251;
  int v252;
  int v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float32x4_t *v258;
  float *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float *v270;
  int v271;
  int v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float32x4_t *v284;
  float *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  float *v296;
  int v297;
  int v298;
  float v299;
  float v300;
  float32x4_t v301;
  float v302;
  float32x4_t v303;
  float32x4_t *v304;
  float *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  float *v317;
  int v318;
  int v319;
  float v320;
  float v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  int8x16_t v325;
  int8x16_t v326;
  float32x4_t v327;
  float32x4_t *v328;
  float *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  float *v346;
  int v347;
  int v348;
  float v349;
  float v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t *v355;
  float *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  float *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float32x4_t *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  float *v385;
  int v386;
  int v387;
  float v388;
  float v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  float32x4_t v397;
  float32x4_t *v398;
  float *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  float *v411;
  int v412;
  int v413;
  float v414;
  float v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  float *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float32x4_t *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  float *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float32x4_t *v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  float *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  float v472;
  float v473;
  float v474;
  float v475;
  float32x4_t *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  float *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  float32x4_t *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  float *v504;
  int v505;
  int v506;
  float v507;
  float v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  int8x16_t v517;
  float32x4_t *v518;
  float *v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  float32x4_t v531;
  float *v532;
  int v533;
  int v534;
  float v535;
  float v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t *v541;
  float *v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  float *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  float v555;
  float v556;
  float v557;
  float v558;
  float v559;
  float32x4_t *v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  float *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  float v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float32x4_t *v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  float *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  float32x4_t *v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  float *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  float v608;
  float v609;
  float v610;
  float v611;
  float v612;
  float32x4_t *v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  int v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  int v626;
  unsigned int v627;
  float32x4_t v628;
  float32x4_t *v629;
  uint64_t v630;
  unint64_t v631;
  unint64_t v632;
  uint64_t v633;
  unint64_t v634;
  float32x4_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  float *v639;
  int v640;
  int v641;
  unsigned int v642;
  float v643;
  float v644;
  float32x4_t v645;
  float v646;
  float v647;
  float32x4_t v648;
  float32x4_t *v649;
  float *v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  float *v660;
  int v661;
  int v662;
  unsigned int v663;
  float v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float32x4_t *v670;
  float *v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  float *v679;
  int v680;
  int v681;
  unsigned int v682;
  float v683;
  float v684;
  float v685;
  float v686;
  float32x4_t *v687;
  float *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned __int32 *v699;
  int v700;
  int v701;
  float v702;
  float32x4_t *v703;
  unsigned __int32 *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  int v713;
  float32x4_t *v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  uint64_t v718;
  unint64_t v719;
  float32x4_t *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  int v725;
  unsigned int v726;
  float v727;
  float v728;
  float32x4_t *v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  float32x4_t *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  int v769;
  uint64_t v770;
  float *v771;
  unint64_t v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  float32x4_t v777;
  float v778;

  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 136);
  v19 = *(int *)(a1 + 12);
  v18 = *(int *)(a1 + 16);
  if (v16)
  {
    v20 = (unint64_t)*(int *)(a1 + 32) >> 2;
    v21 = (float *)(v16 + 4 * (v19 + v20 * v18));
    v22 = 0xFFFFFFFFLL;
    if (!v17)
      return;
  }
  else
  {
    v21 = 0;
    v20 = 0;
    v22 = 0;
    if (!v17)
      return;
  }
  v23 = *(unsigned int *)(a1 + 4);
  v24 = *(_DWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 96);
  v776 = *(_QWORD *)(a1 + 88);
  v26 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v27 = (float32x4_t *)(*(_QWORD *)(a1 + 40) + 16 * (v19 + v26 * v18));
  v28 = *(int *)(a1 + 124);
  v29 = (_BYTE *)(v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v28);
  v30 = *(int *)(a1 + 56);
  v31 = *(int *)(a1 + 60);
  v32 = *(int *)(a1 + 76);
  if ((*(_DWORD *)a1 & 0xFF00) != 0x100)
  {
    v33 = *(_DWORD *)(a1 + 64);
    v34 = *(_DWORD *)(a1 + 68);
    v770 = v32 >> 4;
    v771 = *(float **)(a1 + 96);
    if (v25)
    {
      v768 = (unint64_t)*(int *)(a1 + 80) >> 2;
      v25 = 1;
    }
    else
    {
      v768 = 0;
    }
    v35 = *(float32x4_t **)(a1 + 88);
    v38 = v776 + 16 * v770 * v34;
    v22 &= 1u;
    v37 = 1;
    v772 = v776;
    goto LABEL_19;
  }
  v770 = v32 >> 4;
  if (v25)
  {
    v768 = (unint64_t)*(int *)(a1 + 80) >> 2;
    v771 = (float *)(v25 + 4 * (v30 + v768 * v31));
    v25 = 0xFFFFFFFFLL;
  }
  else
  {
    v771 = 0;
    v768 = 0;
  }
  v35 = (float32x4_t *)(v776 + 16 * (v30 + v770 * v31));
  if (v770 == v26 && (char *)v27 - (char *)v35 >= 1)
  {
    if ((int)v23 >= (uint64_t)((unint64_t)((char *)v27 - (char *)v35) >> 4))
    {
      v27 += (int)v23 - 1;
      v35 += (int)v23 - 1;
      v29 += (int)v23 - 1;
      v21 += (int)(v22 & (v23 - 1));
      v37 = -1;
      v770 = (unint64_t)*(int *)(a1 + 28) >> 4;
      v771 += (int)(v25 & (v23 - 1));
      goto LABEL_16;
    }
    v36 = v24 - 1;
    if (v27 <= &v35[v26 * v36 - 1 + (int)v23])
    {
      v27 += v26 * v36;
      v29 += v28 * v36;
      v28 = -v28;
      v21 += v20 * v36;
      v20 = -(uint64_t)v20;
      v22 &= 1u;
      v770 = -(uint64_t)v26;
      v771 += v768 * v36;
      v768 = -(uint64_t)v768;
      v25 &= 1u;
      v37 = 1;
      v35 += v26 * v36;
      v26 = -(uint64_t)v26;
      goto LABEL_16;
    }
  }
  v22 &= 1u;
  v25 &= 1u;
  v37 = 1;
LABEL_16:
  v38 = 0;
  v772 = 0;
  v776 = -1;
  v34 = v768;
  v33 = v770;
LABEL_19:
  v39 = v37 * v23;
  v769 = v23;
  v765 = v38;
  v773 = v24;
  if (v38)
  {
    v40 = (int)v31 % v34;
    v41 = &v35[v770 * v40];
    v42 = (int)v30 % v33;
    v35 = &v41[v42];
    v776 = (unint64_t)&v41[v33];
    v43 = v768 * v40;
    v44 = (uint64_t)v771;
    v45 = (uint64_t)&v771[v43 + v42];
    if ((v25 & 1) != 0)
      v44 = v45;
    v771 = (float *)v44;
    v772 = (unint64_t)&v41[v42];
  }
  else
  {
    v770 -= v39;
    v768 -= (int)v25 * (int)v23;
  }
  v767 = v28 - v39;
  v766 = v26 - v39;
  v764 = v20 - (int)v22 * (int)v23;
  v774 = v25;
  v775 = v22;
  switch((int)a2)
  {
    case 0:
      if ((_DWORD)v22)
      {
        do
        {
          v46 = v23;
          v47 = v773;
          do
          {
            v48 = *v29;
            if (*v29)
            {
              if (v48 == 255)
              {
                v27->i64[0] = 0;
                v27->i64[1] = 0;
                v49 = 0.0;
              }
              else
              {
                v50 = (float)((float)v48 * -0.0039216) + 1.0;
                *v27 = vmulq_n_f32(*v27, v50);
                v49 = v50 * *v21;
              }
              *v21 = v49;
            }
            v29 += v37;
            v21 += (int)v22;
            v27 += v37;
            --v46;
          }
          while (v46);
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v47 != 1);
      }
      else
      {
        do
        {
          v618 = v23;
          v619 = v773;
          do
          {
            v620 = *v29;
            if (*v29)
            {
              if (v620 == 255)
              {
                v27->i64[0] = 0;
                v27->i64[1] = 0;
              }
              else
              {
                *v27 = vmulq_n_f32(*v27, (float)((float)v620 * -0.0039216) + 1.0);
              }
            }
            v29 += v37;
            v27 += v37;
            --v618;
          }
          while (v618);
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v619 != 1);
      }
      return;
    case 1:
      if ((_DWORD)v22)
      {
        v51 = v37;
        if ((_DWORD)v25)
        {
          v52 = v34;
          v53 = -(v770 * v34);
          v54 = -(uint64_t)(v768 * v52);
          v55 = v771;
          v56 = -(uint64_t)v33;
          do
          {
            v57 = v769;
            v58 = v773;
            do
            {
              v59 = *v29;
              if (*v29)
              {
                if (v59 == 255)
                {
                  *v27 = *v35;
                  v60 = *v55;
                }
                else
                {
                  v61 = (float)v59 * 0.0039216;
                  *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v61), *v35, v61);
                  v60 = (float)((float)(1.0 - v61) * *v21) + (float)(*v55 * v61);
                }
                *v21 = v60;
              }
              v29 += v51;
              v62 = &v35[v51];
              v63 = &v55[(int)v25];
              if ((unint64_t)v62 >= v776)
                v64 = v56;
              else
                v64 = 0;
              v55 = &v63[v64];
              v35 = &v62[v64];
              v21 += (int)v22;
              v27 += v51;
              --v57;
            }
            while (v57);
            if (v765)
            {
              v65 = v772 + 16 * v770;
              if (v65 >= v765)
                v66 = v54;
              else
                v66 = 0;
              v67 = (uint64_t)&v771[v768 + v66];
              if (v65 >= v765)
                v68 = v53;
              else
                v68 = 0;
              v35 = (float32x4_t *)(v65 + 16 * v68);
              v776 += 16 * v68 + 16 * v770;
              v771 += v768 + v66;
              v772 = (unint64_t)v35;
              v55 = (float *)v67;
            }
            else
            {
              v35 += v770;
              v55 += v768;
            }
            v29 += v767;
            v27 += v766;
            v21 += v764;
            --v773;
          }
          while (v58 != 1);
        }
        else
        {
          v722 = -(uint64_t)v33;
          v723 = -(v770 * v34);
          do
          {
            v724 = v769;
            v725 = v773;
            do
            {
              v726 = *v29;
              if (*v29)
              {
                if (v726 == 255)
                {
                  *v27 = *v35;
                  v727 = 1.0;
                }
                else
                {
                  v728 = (float)v726 * 0.0039216;
                  *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v728), *v35, v728);
                  v727 = v728 + (float)((float)(1.0 - v728) * *v21);
                }
                *v21 = v727;
              }
              v29 += v51;
              v729 = &v35[v51];
              if ((unint64_t)v729 >= v776)
                v730 = v722;
              else
                v730 = 0;
              v35 = &v729[v730];
              v21 += (int)v22;
              v27 += v51;
              --v724;
            }
            while (v724);
            v29 += v767;
            v27 += v766;
            v21 += v764;
            v731 = v772;
            v732 = v772 + 16 * v770;
            if (v732 >= v765)
              v733 = v723;
            else
              v733 = 0;
            v734 = v776;
            v735 = (float32x4_t *)(v732 + 16 * v733);
            v736 = v776 + 16 * v733 + 16 * v770;
            if (v765)
              v734 = v736;
            v776 = v734;
            if (v765)
            {
              v731 = (unint64_t)v735;
              v35 = v735;
            }
            else
            {
              v35 += v770;
            }
            v772 = v731;
            --v773;
          }
          while (v725 != 1);
        }
      }
      else
      {
        v621 = v37;
        v622 = -(uint64_t)v33;
        v623 = -(v770 * v34);
        v624 = 16 * v37;
        do
        {
          v625 = v23;
          v626 = v773;
          do
          {
            v627 = *v29;
            if (*v29)
            {
              if (v627 == 255)
                v628 = *v35;
              else
                v628 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - (float)((float)v627 * 0.0039216)), *v35, (float)v627 * 0.0039216);
              *v27 = v628;
            }
            v29 += v621;
            v629 = &v35[v621];
            if ((unint64_t)v629 >= v776)
              v630 = v622;
            else
              v630 = 0;
            v35 = &v629[v630];
            v27 = (float32x4_t *)((char *)v27 + v624);
            --v625;
          }
          while (v625);
          v29 += v767;
          v27 += v766;
          v631 = v772;
          v632 = v772 + 16 * v770;
          if (v632 >= v765)
            v633 = v623;
          else
            v633 = 0;
          v634 = v776;
          v635 = (float32x4_t *)(v632 + 16 * v633);
          v636 = v776 + 16 * v633 + 16 * v770;
          if (v765)
            v634 = v636;
          v776 = v634;
          if (v765)
          {
            v631 = (unint64_t)v635;
            v35 = v635;
          }
          else
          {
            v35 += v770;
          }
          v772 = v631;
          --v773;
        }
        while (v626 != 1);
      }
      return;
    case 2:
      v69 = v37;
      v70 = -(uint64_t)v33;
      v71 = v34;
      if ((_DWORD)v22)
      {
        v72 = -(v770 * v34);
        v73 = -(uint64_t)(v768 * v71);
        v74 = v771;
        while (1)
        {
          v75 = v769;
          v76 = v773;
          do
          {
            v77 = *v29;
            if (!*v29)
              goto LABEL_73;
            if (v77 == 255)
            {
              v78 = *v74;
              if (*v74 >= 1.0)
              {
                *v27 = *v35;
              }
              else
              {
                if (v78 <= 0.0)
                  goto LABEL_73;
                *v27 = vmlaq_n_f32(*v35, *v27, 1.0 - v78);
                v78 = v78 + (float)(*v21 * (float)(1.0 - v78));
              }
            }
            else
            {
              v79 = (float)v77 * 0.0039216;
              v80 = v79 * *v74;
              if (v80 <= 0.0)
                goto LABEL_73;
              *v27 = vmlaq_n_f32(vmulq_n_f32(*v35, v79), *v27, 1.0 - v80);
              v78 = v80 + (float)(*v21 * (float)(1.0 - v80));
            }
            *v21 = v78;
LABEL_73:
            v29 += v69;
            v81 = &v35[v69];
            v82 = &v74[(int)v25];
            if ((unint64_t)v81 >= v776)
              v83 = v70;
            else
              v83 = 0;
            v74 = &v82[v83];
            v35 = &v81[v83];
            v21 += (int)v22;
            v27 += v69;
            --v75;
          }
          while (v75);
          if (v765)
          {
            v84 = v772 + 16 * v770;
            if (v84 >= v765)
              v85 = v73;
            else
              v85 = 0;
            v86 = (uint64_t)&v771[v768 + v85];
            if (v84 >= v765)
              v87 = v72;
            else
              v87 = 0;
            v35 = (float32x4_t *)(v84 + 16 * v87);
            v776 += 16 * v87 + 16 * v770;
            v771 += v768 + v85;
            v772 = (unint64_t)v35;
            v74 = (float *)v86;
          }
          else
          {
            v35 += v770;
            v74 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
          if (v76 == 1)
            return;
        }
      }
      v637 = -(v770 * v34);
      v638 = -(uint64_t)(v768 * v71);
      v639 = v771;
LABEL_781:
      v640 = v23;
      v641 = v773;
      while (1)
      {
        v642 = *v29;
        if (*v29)
        {
          if (v642 == 255)
          {
            v643 = *v639;
            if (*v639 >= 1.0)
            {
              v648 = *v35;
              goto LABEL_791;
            }
            if (v643 > 0.0)
            {
              v644 = 1.0 - v643;
              v645 = *v35;
              goto LABEL_789;
            }
          }
          else
          {
            v646 = (float)v642 * 0.0039216;
            v647 = v646 * *v639;
            if (v647 > 0.0)
            {
              v644 = 1.0 - v647;
              v645 = vmulq_n_f32(*v35, v646);
LABEL_789:
              v648 = vmlaq_n_f32(v645, *v27, v644);
LABEL_791:
              *v27 = v648;
            }
          }
        }
        v29 += v69;
        v649 = &v35[v69];
        v650 = &v639[(int)v25];
        if ((unint64_t)v649 >= v776)
          v651 = v70;
        else
          v651 = 0;
        v639 = &v650[v651];
        v35 = &v649[v651];
        v27 += v69;
        if (!--v640)
        {
          if (v765)
          {
            v652 = v772 + 16 * v770;
            if (v652 >= v765)
              v653 = v638;
            else
              v653 = 0;
            v654 = (uint64_t)&v771[v768 + v653];
            if (v652 >= v765)
              v655 = v637;
            else
              v655 = 0;
            v35 = (float32x4_t *)(v652 + 16 * v655);
            v776 += 16 * v655 + 16 * v770;
            v771 += v768 + v653;
            v772 = (unint64_t)v35;
            v639 = (float *)v654;
          }
          else
          {
            v35 += v770;
            v639 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
          if (v641 == 1)
            return;
          goto LABEL_781;
        }
      }
    case 3:
      v88 = v37;
      v89 = v34;
      v90 = -(v770 * v34);
      v91 = -(uint64_t)(v768 * v89);
      v92 = 16 * v37;
      v93 = -(uint64_t)v33;
      v94 = v771;
      do
      {
        v95 = v769;
        v96 = v773;
        do
        {
          v97 = *v29;
          if (*v29)
          {
            if (v97 == 255)
            {
              v27->f32[0] = v35->f32[0] * *v21;
              v27->f32[1] = v35->f32[1] * *v21;
              v27->f32[2] = v35->f32[2] * *v21;
              v27->f32[3] = v35->f32[3] * *v21;
              if ((_DWORD)v25)
                v98 = *v94;
              else
                v98 = 1.0;
              v104 = v98 * *v21;
            }
            else
            {
              v99 = (float)v97 * 0.0039216;
              v100 = *v21;
              v101 = v99 * *v21;
              v102 = 1.0;
              v103 = 1.0 - v99;
              *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v103), *v35, v101);
              if ((_DWORD)v25)
                v102 = *v94;
              v104 = (float)(v103 * v100) + (float)(v102 * v101);
            }
            *v21 = v104;
          }
          v29 += v88;
          v105 = &v35[v88];
          v106 = &v94[(int)v25];
          if ((unint64_t)v105 >= v776)
            v107 = v93;
          else
            v107 = 0;
          v94 = &v106[v107];
          v35 = &v105[v107];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v92);
          --v95;
        }
        while (v95);
        if (v765)
        {
          v108 = v772 + 16 * v770;
          if (v108 >= v765)
            v109 = v91;
          else
            v109 = 0;
          v110 = (uint64_t)&v771[v768 + v109];
          if (v108 >= v765)
            v111 = v90;
          else
            v111 = 0;
          v35 = (float32x4_t *)(v108 + 16 * v111);
          v776 += 16 * v111 + 16 * v770;
          v771 += v768 + v109;
          v772 = (unint64_t)v35;
          v94 = (float *)v110;
        }
        else
        {
          v35 += v770;
          v94 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v96 != 1);
      return;
    case 4:
      v112 = v37;
      v113 = v34;
      v114 = -(v770 * v34);
      v115 = -(uint64_t)(v768 * v113);
      v116 = 16 * v37;
      v117 = -(uint64_t)v33;
      v118 = v771;
      do
      {
        v119 = v769;
        v120 = v773;
        do
        {
          v121 = *v29;
          if (*v29)
          {
            if (v121 == 255)
            {
              v122 = 1.0;
              v27->f32[0] = v35->f32[0] * (float)(1.0 - *v21);
              v27->f32[1] = v35->f32[1] * (float)(1.0 - *v21);
              v27->f32[2] = v35->f32[2] * (float)(1.0 - *v21);
              v27->f32[3] = v35->f32[3] * (float)(1.0 - *v21);
              if ((_DWORD)v25)
                v122 = *v118;
              v123 = v122 * (float)(1.0 - *v21);
            }
            else
            {
              v124 = (float)v121 * 0.0039216;
              v125 = *v21;
              v126 = 1.0;
              v127 = v124 * (float)(1.0 - *v21);
              v128 = 1.0 - v124;
              *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v128), *v35, v127);
              if ((_DWORD)v25)
                v126 = *v118;
              v123 = (float)(v128 * v125) + (float)(v126 * v127);
            }
            *v21 = v123;
          }
          v29 += v112;
          v129 = &v35[v112];
          v130 = &v118[(int)v25];
          if ((unint64_t)v129 >= v776)
            v131 = v117;
          else
            v131 = 0;
          v118 = &v130[v131];
          v35 = &v129[v131];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v116);
          --v119;
        }
        while (v119);
        if (v765)
        {
          v132 = v772 + 16 * v770;
          if (v132 >= v765)
            v133 = v115;
          else
            v133 = 0;
          v134 = (uint64_t)&v771[v768 + v133];
          if (v132 >= v765)
            v135 = v114;
          else
            v135 = 0;
          v35 = (float32x4_t *)(v132 + 16 * v135);
          v776 += 16 * v135 + 16 * v770;
          v771 += v768 + v133;
          v772 = (unint64_t)v35;
          v118 = (float *)v134;
        }
        else
        {
          v35 += v770;
          v118 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v120 != 1);
      return;
    case 5:
      v136 = v37;
      v137 = v34;
      v138 = -(v770 * v34);
      v139 = -(uint64_t)(v768 * v137);
      v140 = 16 * v37;
      v141 = -(uint64_t)v33;
      v142 = v771;
      do
      {
        v143 = v769;
        v144 = v773;
        do
        {
          if (*v29)
          {
            v145 = *v21;
            v146 = (float)*v29 * 0.0039216;
            v147 = v146 * *v142;
            *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v147), vmulq_n_f32(*v35, v146), *v21);
            *v21 = (float)(v145 * (float)(1.0 - v147)) + (float)(v147 * v145);
          }
          v29 += v136;
          v148 = &v35[v136];
          v149 = &v142[(int)v25];
          if ((unint64_t)v148 >= v776)
            v150 = v141;
          else
            v150 = 0;
          v142 = &v149[v150];
          v35 = &v148[v150];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v140);
          --v143;
        }
        while (v143);
        if (v765)
        {
          v151 = v772 + 16 * v770;
          if (v151 >= v765)
            v152 = v139;
          else
            v152 = 0;
          v153 = (uint64_t)&v771[v768 + v152];
          if (v151 >= v765)
            v154 = v138;
          else
            v154 = 0;
          v35 = (float32x4_t *)(v151 + 16 * v154);
          v776 += 16 * v154 + 16 * v770;
          v771 += v768 + v152;
          v772 = (unint64_t)v35;
          v142 = (float *)v153;
        }
        else
        {
          v35 += v770;
          v142 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v144 != 1);
      return;
    case 6:
      v155 = v37;
      v156 = v34;
      v157 = -(v770 * v34);
      v158 = -(uint64_t)(v768 * v156);
      v159 = 16 * v37;
      v160 = -(uint64_t)v33;
      v161 = v771;
      while (1)
      {
        v162 = v769;
        v163 = v773;
        do
        {
          v164 = *v29;
          if (!*v29)
            goto LABEL_174;
          v165 = *v21;
          v166 = 1.0 - *v21;
          if (v166 >= 1.0)
          {
            v169 = (float)v164 * 0.0039216;
            *v27 = vmulq_n_f32(*v35, v169);
            if ((_DWORD)v25)
              v170 = *v161;
            else
              v170 = 1.0;
            v171 = v169 * v170;
          }
          else
          {
            if (v166 <= 0.0)
              goto LABEL_174;
            v167 = (float)((float)v164 * 0.0039216) * v166;
            *v27 = vmlaq_n_f32(*v27, *v35, v167);
            if ((_DWORD)v25)
              v168 = *v161;
            else
              v168 = 1.0;
            v171 = v165 + (float)(v168 * v167);
          }
          *v21 = v171;
LABEL_174:
          v29 += v155;
          v172 = &v35[v155];
          v173 = &v161[(int)v25];
          if ((unint64_t)v172 >= v776)
            v174 = v160;
          else
            v174 = 0;
          v161 = &v173[v174];
          v35 = &v172[v174];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v159);
          --v162;
        }
        while (v162);
        if (v765)
        {
          v175 = v772 + 16 * v770;
          if (v175 >= v765)
            v176 = v158;
          else
            v176 = 0;
          v177 = (uint64_t)&v771[v768 + v176];
          if (v175 >= v765)
            v178 = v157;
          else
            v178 = 0;
          v35 = (float32x4_t *)(v175 + 16 * v178);
          v776 += 16 * v178 + 16 * v770;
          v771 += v768 + v176;
          v772 = (unint64_t)v35;
          v161 = (float *)v177;
        }
        else
        {
          v35 += v770;
          v161 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v163 == 1)
          return;
      }
    case 7:
      v179 = v37;
      if ((_DWORD)v22)
      {
        v180 = v34;
        v181 = -(v770 * v34);
        v182 = -(uint64_t)(v768 * v180);
        v183 = -(uint64_t)v33;
        v184 = v771;
        do
        {
          v185 = v769;
          v186 = v773;
          do
          {
            v187 = *v29;
            if (*v29)
            {
              if (v187 == 255)
              {
                v188 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * *v184;
                v27->f32[1] = v188 * *v184;
                v189 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * *v184;
                v27->f32[3] = v189 * *v184;
                v190 = *v21 * *v184;
              }
              else
              {
                v191 = (float)v187 * 0.0039216;
                v192 = *v21;
                v193 = v27->f32[1];
                v27->f32[0] = (float)((float)(1.0 - v191) * v27->f32[0]) + (float)(v27->f32[0] * (float)(v191 * *v184));
                v27->f32[1] = (float)((float)(1.0 - v191) * v193) + (float)(v193 * (float)(v191 * *v184));
                v194 = v27->f32[3];
                v27->f32[2] = (float)((float)(1.0 - v191) * v27->f32[2]) + (float)(v27->f32[2] * (float)(v191 * *v184));
                v27->f32[3] = (float)((float)(1.0 - v191) * v194) + (float)(v194 * (float)(v191 * *v184));
                v190 = (float)((float)(1.0 - v191) * v192) + (float)(v192 * (float)(v191 * *v184));
              }
              *v21 = v190;
            }
            v29 += v179;
            v195 = &v35[v179];
            v196 = &v184[(int)v25];
            if ((unint64_t)v195 >= v776)
              v197 = v183;
            else
              v197 = 0;
            v184 = &v196[v197];
            v35 = &v195[v197];
            v21 += (int)v22;
            v27 += v179;
            --v185;
          }
          while (v185);
          if (v765)
          {
            v198 = v772 + 16 * v770;
            if (v198 >= v765)
              v199 = v182;
            else
              v199 = 0;
            v200 = (uint64_t)&v771[v768 + v199];
            if (v198 >= v765)
              v201 = v181;
            else
              v201 = 0;
            v35 = (float32x4_t *)(v198 + 16 * v201);
            v776 += 16 * v201 + 16 * v770;
            v771 += v768 + v199;
            v772 = (unint64_t)v35;
            v184 = (float *)v200;
          }
          else
          {
            v35 += v770;
            v184 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v186 != 1);
      }
      else
      {
        v656 = -(uint64_t)v33;
        v657 = v34;
        v658 = -(v770 * v34);
        v659 = -(uint64_t)(v768 * v657);
        v660 = v771;
        do
        {
          v661 = v23;
          v662 = v773;
          do
          {
            v663 = *v29;
            if (*v29)
            {
              if (v663 == 255)
              {
                v664 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * *v660;
                v27->f32[1] = v664 * *v660;
                v665 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * *v660;
                v666 = v665 * *v660;
              }
              else
              {
                v667 = (float)v663 * 0.0039216;
                v668 = v27->f32[1];
                v27->f32[0] = (float)((float)(1.0 - v667) * v27->f32[0]) + (float)(v27->f32[0] * (float)(v667 * *v660));
                v27->f32[1] = (float)((float)(1.0 - v667) * v668) + (float)(v668 * (float)(v667 * *v660));
                v669 = v27->f32[3];
                v27->f32[2] = (float)((float)(1.0 - v667) * v27->f32[2]) + (float)(v27->f32[2] * (float)(v667 * *v660));
                v666 = (float)((float)(1.0 - v667) * v669) + (float)(v669 * (float)(v667 * *v660));
              }
              v27->f32[3] = v666;
            }
            v29 += v179;
            v670 = &v35[v179];
            v671 = &v660[(int)v25];
            if ((unint64_t)v670 >= v776)
              v672 = v656;
            else
              v672 = 0;
            v660 = &v671[v672];
            v35 = &v670[v672];
            v27 += v179;
            --v661;
          }
          while (v661);
          if (v765)
          {
            v673 = v772 + 16 * v770;
            if (v673 >= v765)
              v674 = v659;
            else
              v674 = 0;
            v675 = (uint64_t)&v771[v768 + v674];
            if (v673 >= v765)
              v676 = v658;
            else
              v676 = 0;
            v35 = (float32x4_t *)(v673 + 16 * v676);
            v776 += 16 * v676 + 16 * v770;
            v771 += v768 + v674;
            v772 = (unint64_t)v35;
            v660 = (float *)v675;
          }
          else
          {
            v35 += v770;
            v660 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v662 != 1);
      }
      return;
    case 8:
      v202 = v37;
      v203 = -(uint64_t)v33;
      v204 = v34;
      if ((_DWORD)v22)
      {
        v205 = -(v770 * v34);
        v206 = -(uint64_t)(v768 * v204);
        v207 = v771;
        do
        {
          v208 = v769;
          v209 = v773;
          do
          {
            v210 = *v29;
            if (*v29)
            {
              if (v210 == 255)
              {
                v211 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - *v207);
                v27->f32[1] = v211 * (float)(1.0 - *v207);
                v212 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * (float)(1.0 - *v207);
                v27->f32[3] = v212 * (float)(1.0 - *v207);
                v213 = *v207;
              }
              else
              {
                v214 = (float)v210 * 0.0039216;
                v215 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - (float)(v214 * *v207));
                v27->f32[1] = v215 * (float)(1.0 - (float)(v214 * *v207));
                v216 = v27->f32[3];
                v27->f32[2] = v27->f32[2] * (float)(1.0 - (float)(v214 * *v207));
                v27->f32[3] = v216 * (float)(1.0 - (float)(v214 * *v207));
                v213 = v214 * *v207;
              }
              *v21 = *v21 * (float)(1.0 - v213);
            }
            v29 += v202;
            v217 = &v35[v202];
            v218 = &v207[(int)v25];
            if ((unint64_t)v217 >= v776)
              v219 = v203;
            else
              v219 = 0;
            v207 = &v218[v219];
            v35 = &v217[v219];
            v21 += (int)v22;
            v27 += v202;
            --v208;
          }
          while (v208);
          if (v765)
          {
            v220 = v772 + 16 * v770;
            if (v220 >= v765)
              v221 = v206;
            else
              v221 = 0;
            v222 = (uint64_t)&v771[v768 + v221];
            if (v220 >= v765)
              v223 = v205;
            else
              v223 = 0;
            v35 = (float32x4_t *)(v220 + 16 * v223);
            v776 += 16 * v223 + 16 * v770;
            v771 += v768 + v221;
            v772 = (unint64_t)v35;
            v207 = (float *)v222;
          }
          else
          {
            v35 += v770;
            v207 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v209 != 1);
      }
      else
      {
        v677 = -(v770 * v34);
        v678 = -(uint64_t)(v768 * v204);
        v679 = v771;
        do
        {
          v680 = v23;
          v681 = v773;
          do
          {
            v682 = *v29;
            if (*v29)
            {
              if (v682 == 255)
              {
                v683 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - *v679);
                v27->f32[1] = v683 * (float)(1.0 - *v679);
                v27->f32[2] = v27->f32[2] * (float)(1.0 - *v679);
                v684 = *v679;
              }
              else
              {
                v685 = (float)v682 * 0.0039216;
                v686 = v27->f32[1];
                v27->f32[0] = v27->f32[0] * (float)(1.0 - (float)(v685 * *v679));
                v27->f32[1] = v686 * (float)(1.0 - (float)(v685 * *v679));
                v27->f32[2] = v27->f32[2] * (float)(1.0 - (float)(v685 * *v679));
                v684 = v685 * *v679;
              }
              v27->f32[3] = v27->f32[3] * (float)(1.0 - v684);
            }
            v29 += v202;
            v687 = &v35[v202];
            v688 = &v679[(int)v25];
            if ((unint64_t)v687 >= v776)
              v689 = v203;
            else
              v689 = 0;
            v679 = &v688[v689];
            v35 = &v687[v689];
            v27 += v202;
            --v680;
          }
          while (v680);
          if (v765)
          {
            v690 = v772 + 16 * v770;
            if (v690 >= v765)
              v691 = v678;
            else
              v691 = 0;
            v692 = (uint64_t)&v771[v768 + v691];
            if (v690 >= v765)
              v693 = v677;
            else
              v693 = 0;
            v35 = (float32x4_t *)(v690 + 16 * v693);
            v776 += 16 * v693 + 16 * v770;
            v771 += v768 + v691;
            v772 = (unint64_t)v35;
            v679 = (float *)v692;
          }
          else
          {
            v35 += v770;
            v679 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v681 != 1);
      }
      return;
    case 9:
      v224 = v37;
      v225 = v34;
      v226 = -(v770 * v34);
      v227 = -(uint64_t)(v768 * v225);
      v228 = 16 * v37;
      v229 = -(uint64_t)v33;
      v230 = v771;
      do
      {
        v231 = v769;
        v232 = v773;
        do
        {
          if (*v29)
          {
            v233 = *v21;
            v234 = (float)*v29 * 0.0039216;
            v235 = v234 * *v230;
            v236 = 1.0 - *v21;
            v237 = (float)(1.0 - v234) + v235;
            *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, v237), vmulq_n_f32(*v35, v234), v236);
            *v21 = (float)(v233 * v237) + (float)(v235 * v236);
          }
          v29 += v224;
          v238 = &v35[v224];
          v239 = &v230[(int)v25];
          if ((unint64_t)v238 >= v776)
            v240 = v229;
          else
            v240 = 0;
          v230 = &v239[v240];
          v35 = &v238[v240];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v228);
          --v231;
        }
        while (v231);
        if (v765)
        {
          v241 = v772 + 16 * v770;
          if (v241 >= v765)
            v242 = v227;
          else
            v242 = 0;
          v243 = (uint64_t)&v771[v768 + v242];
          if (v241 >= v765)
            v244 = v226;
          else
            v244 = 0;
          v35 = (float32x4_t *)(v241 + 16 * v244);
          v776 += 16 * v244 + 16 * v770;
          v771 += v768 + v242;
          v772 = (unint64_t)v35;
          v230 = (float *)v243;
        }
        else
        {
          v35 += v770;
          v230 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v232 != 1);
      return;
    case 10:
      v245 = v37;
      v246 = v34;
      v247 = -(v770 * v34);
      v248 = -(uint64_t)(v768 * v246);
      v249 = 16 * v37;
      v250 = -(uint64_t)v33;
      v251 = v771;
      do
      {
        v252 = v769;
        v253 = v773;
        do
        {
          if (*v29)
          {
            v254 = *v21;
            v255 = (float)*v29 * 0.0039216;
            v256 = v255 * *v251;
            v257 = 1.0 - *v21;
            *v27 = vmlaq_n_f32(vmulq_n_f32(*v27, 1.0 - v256), vmulq_n_f32(*v35, v255), v257);
            *v21 = (float)(v254 * (float)(1.0 - v256)) + (float)(v256 * v257);
          }
          v29 += v245;
          v258 = &v35[v245];
          v259 = &v251[(int)v25];
          if ((unint64_t)v258 >= v776)
            v260 = v250;
          else
            v260 = 0;
          v251 = &v259[v260];
          v35 = &v258[v260];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v249);
          --v252;
        }
        while (v252);
        if (v765)
        {
          v261 = v772 + 16 * v770;
          if (v261 >= v765)
            v262 = v248;
          else
            v262 = 0;
          v263 = (uint64_t)&v771[v768 + v262];
          if (v261 >= v765)
            v264 = v247;
          else
            v264 = 0;
          v35 = (float32x4_t *)(v261 + 16 * v264);
          v776 += 16 * v264 + 16 * v770;
          v771 += v768 + v262;
          v772 = (unint64_t)v35;
          v251 = (float *)v263;
        }
        else
        {
          v35 += v770;
          v251 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
      }
      while (v253 != 1);
      return;
    case 11:
      v265 = v37;
      if ((_DWORD)v22)
      {
        v266 = v34;
        v267 = -(v770 * v34);
        v268 = -(uint64_t)(v768 * v266);
        v269 = -(uint64_t)v33;
        v270 = v771;
        do
        {
          v271 = v769;
          v272 = v773;
          do
          {
            if (*v29)
            {
              if ((_DWORD)v25)
                v273 = *v270;
              else
                v273 = 1.0;
              v274 = (float)*v29 * 0.0039216;
              v275 = v274 * v35->f32[2];
              v276 = v274 * v35->f32[3];
              v277 = v274 * v273;
              v278 = (float)(v277 - (float)(v274 * v35->f32[0])) + (float)(*v21 - v27->f32[0]);
              v279 = *v21 + v277;
              if (v279 > 1.0)
                v279 = 1.0;
              v280 = (float)(v277 - (float)(v274 * v35->f32[1])) + (float)(*v21 - v27->f32[1]);
              v27->f32[0] = v279 - v278;
              v281 = v27->f32[3];
              v282 = (float)(v277 - v275) + (float)(*v21 - v27->f32[2]);
              v27->f32[1] = v279 - v280;
              v283 = (float)(v277 - v276) + (float)(*v21 - v281);
              v27->f32[2] = v279 - v282;
              *v21 = v279;
              v27->f32[3] = v279 - v283;
            }
            v29 += v265;
            v284 = &v35[v265];
            v285 = &v270[(int)v25];
            if ((unint64_t)v284 >= v776)
              v286 = v269;
            else
              v286 = 0;
            v270 = &v285[v286];
            v35 = &v284[v286];
            v21 += (int)v22;
            v27 += v265;
            --v271;
          }
          while (v271);
          if (v765)
          {
            v287 = v772 + 16 * v770;
            if (v287 >= v765)
              v288 = v268;
            else
              v288 = 0;
            v289 = (uint64_t)&v771[v768 + v288];
            if (v287 >= v765)
              v290 = v267;
            else
              v290 = 0;
            v35 = (float32x4_t *)(v287 + 16 * v290);
            v776 += 16 * v290 + 16 * v770;
            v771 += v768 + v288;
            v772 = (unint64_t)v35;
            v270 = (float *)v289;
          }
          else
          {
            v35 += v770;
            v270 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v272 != 1);
      }
      else
      {
        v694 = -(uint64_t)v33;
        v695 = v34;
        v696 = -(v770 * v34);
        v697 = -(uint64_t)(v768 * v695);
        __asm { FMOV            V1.4S, #1.0 }
        v699 = (unsigned __int32 *)v771;
        do
        {
          v700 = v23;
          v701 = v773;
          do
          {
            if (*v29)
            {
              if ((_DWORD)v25)
                a5.i32[0] = *v699;
              else
                a5.i32[0] = 1.0;
              v702 = (float)*v29 * 0.0039216;
              a5.f32[0] = v702 * a5.f32[0];
              a5 = vsubq_f32(_Q1, vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), vmulq_n_f32(*v35, v702)), vsubq_f32(_Q1, *v27)));
              *v27 = a5;
            }
            v29 += v265;
            v703 = &v35[v265];
            v704 = &v699[(int)v25];
            if ((unint64_t)v703 >= v776)
              v705 = v694;
            else
              v705 = 0;
            v699 = &v704[v705];
            v35 = &v703[v705];
            v27 += v265;
            --v700;
          }
          while (v700);
          if (v765)
          {
            v706 = v772 + 16 * v770;
            if (v706 >= v765)
              v707 = v697;
            else
              v707 = 0;
            v708 = (uint64_t)&v771[v768 + v707];
            if (v706 >= v765)
              v709 = v696;
            else
              v709 = 0;
            v35 = (float32x4_t *)(v706 + 16 * v709);
            v776 += 16 * v709 + 16 * v770;
            v771 += v768 + v707;
            v772 = (unint64_t)v35;
            v699 = (unsigned __int32 *)v708;
          }
          else
          {
            v35 += v770;
            v699 += v768;
          }
          v29 += v767;
          v27 += v766;
          --v773;
        }
        while (v701 != 1);
      }
      return;
    case 12:
      v291 = v37;
      if ((_DWORD)v22)
      {
        v292 = v34;
        v293 = -(v770 * v34);
        v294 = -(uint64_t)(v768 * v292);
        v295 = -(uint64_t)v33;
        v296 = v771;
        do
        {
          v297 = v769;
          v298 = v773;
          do
          {
            if (*v29)
            {
              if ((_DWORD)v25)
                v299 = *v296;
              else
                v299 = 1.0;
              v300 = (float)*v29 * 0.0039216;
              v301 = vmulq_n_f32(*v35, v300);
              v302 = *v21 + (float)(v300 * v299);
              if (v302 > 1.0)
                v302 = 1.0;
              v303.i64[0] = v27->i64[0];
              *v21 = v302;
              v303.i64[1] = v27->i64[1];
              *v27 = vaddq_f32(v301, v303);
            }
            v29 += v291;
            v304 = &v35[v291];
            v305 = &v296[(int)v25];
            if ((unint64_t)v304 >= v776)
              v306 = v295;
            else
              v306 = 0;
            v296 = &v305[v306];
            v35 = &v304[v306];
            v21 += (int)v22;
            v27 += v291;
            --v297;
          }
          while (v297);
          if (v765)
          {
            v307 = v772 + 16 * v770;
            if (v307 >= v765)
              v308 = v294;
            else
              v308 = 0;
            v309 = (uint64_t)&v771[v768 + v308];
            if (v307 >= v765)
              v310 = v293;
            else
              v310 = 0;
            v35 = (float32x4_t *)(v307 + 16 * v310);
            v776 += 16 * v310 + 16 * v770;
            v771 += v768 + v308;
            v772 = (unint64_t)v35;
            v296 = (float *)v309;
          }
          else
          {
            v35 += v770;
            v296 += v768;
          }
          v29 += v767;
          v27 += v766;
          v21 += v764;
          --v773;
        }
        while (v298 != 1);
      }
      else
      {
        v710 = -(uint64_t)v33;
        v711 = -(v770 * v34);
        do
        {
          v712 = v23;
          v713 = v773;
          do
          {
            if (*v29)
              *v27 = vaddq_f32(vmulq_n_f32(*v35, (float)*v29 * 0.0039216), *v27);
            v29 += v291;
            v714 = &v35[v291];
            if ((unint64_t)v714 >= v776)
              v715 = v710;
            else
              v715 = 0;
            v35 = &v714[v715];
            v27 += v291;
            --v712;
          }
          while (v712);
          v29 += v767;
          v27 += v766;
          v716 = v772;
          v717 = v772 + 16 * v770;
          if (v717 >= v765)
            v718 = v711;
          else
            v718 = 0;
          v719 = v776;
          v720 = (float32x4_t *)(v717 + 16 * v718);
          v721 = v776 + 16 * v718 + 16 * v770;
          if (v765)
            v719 = v721;
          v776 = v719;
          if (v765)
          {
            v716 = (unint64_t)v720;
            v35 = v720;
          }
          else
          {
            v35 += v770;
          }
          v772 = v716;
          --v773;
        }
        while (v713 != 1);
      }
      return;
    case 13:
      v311 = v37;
      v312 = v34;
      v313 = -(v770 * v34);
      v314 = -(uint64_t)(v768 * v312);
      v315 = 16 * v37;
      v316 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      v317 = v771;
      while (1)
      {
        v318 = v769;
        v319 = v773;
        do
        {
          if (*v29)
          {
            v320 = (_DWORD)v25 ? *v317 : 1.0;
            v321 = (float)*v29 * 0.0039216;
            a5.f32[0] = v321 * v320;
            if (a5.f32[0] > 0.0)
            {
              v322 = vmulq_n_f32(*v35, v321);
              if ((_DWORD)v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_335;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v323 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              v324 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v322);
              v325 = (int8x16_t)vmulq_f32(v323, v324);
              v326 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v325, v323, 1.0 - a5.f32[0]), v325);
              v327 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v326, v324, 1.0 - a6.f32[0]), v326);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v322 = vsubq_f32(a6, v327);
              if ((_DWORD)v22)
              {
LABEL_335:
                *v27 = v322;
                *v21 = a5.f32[0];
                goto LABEL_337;
              }
              *v27 = v322;
            }
          }
LABEL_337:
          v29 += v311;
          v328 = &v35[v311];
          v329 = &v317[(int)v25];
          if ((unint64_t)v328 >= v776)
            v330 = v316;
          else
            v330 = 0;
          v317 = &v329[v330];
          v35 = &v328[v330];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v315);
          --v318;
        }
        while (v318);
        if (v765)
        {
          v331 = v772 + 16 * v770;
          if (v331 >= v765)
            v332 = v314;
          else
            v332 = 0;
          v333 = (uint64_t)&v771[v768 + v332];
          if (v331 >= v765)
            v334 = v313;
          else
            v334 = 0;
          v35 = (float32x4_t *)(v331 + 16 * v334);
          v776 += 16 * v334 + 16 * v770;
          v771 += v768 + v332;
          v772 = (unint64_t)v35;
          v317 = (float *)v333;
        }
        else
        {
          v35 += v770;
          v317 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v319 == 1)
          return;
      }
    case 14:
      v335 = v37;
      v336 = v34;
      v337 = -(v770 * v34);
      v338 = -(uint64_t)(v768 * v336);
      v339 = 16 * v37;
      v340 = -(uint64_t)v33;
      __asm { FMOV            V1.4S, #1.0 }
      v346 = v771;
      while (1)
      {
        v347 = v769;
        v348 = v773;
        do
        {
          if (*v29)
          {
            v349 = (_DWORD)v25 ? *v346 : 1.0;
            v350 = (float)*v29 * 0.0039216;
            a5.f32[0] = v350 * v349;
            if (a5.f32[0] > 0.0)
            {
              v351 = *v35;
              v352 = vmulq_n_f32(*v35, v350);
              if ((_DWORD)v22)
              {
                v351.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_364;
              }
              else
              {
                v351.i32[0] = 1.0;
              }
              v353 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v351.f32, 0), *v27);
              v354 = vmlaq_f32(v353, vsubq_f32(_Q1, v353), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v352));
              a5.f32[0] = (float)(a5.f32[0] + v351.f32[0]) - (float)(v351.f32[0] * a5.f32[0]);
              v352 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v354);
              if ((_DWORD)v22)
              {
LABEL_364:
                *v27 = v352;
                *v21 = a5.f32[0];
                goto LABEL_366;
              }
              *v27 = v352;
            }
          }
LABEL_366:
          v29 += v335;
          v355 = &v35[v335];
          v356 = &v346[(int)v25];
          if ((unint64_t)v355 >= v776)
            v357 = v340;
          else
            v357 = 0;
          v346 = &v356[v357];
          v35 = &v355[v357];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v339);
          --v347;
        }
        while (v347);
        if (v765)
        {
          v358 = v772 + 16 * v770;
          if (v358 >= v765)
            v359 = v338;
          else
            v359 = 0;
          v360 = (uint64_t)&v771[v768 + v359];
          if (v358 >= v765)
            v361 = v337;
          else
            v361 = 0;
          v35 = (float32x4_t *)(v358 + 16 * v361);
          v776 += 16 * v361 + 16 * v770;
          v771 += v768 + v359;
          v772 = (unint64_t)v35;
          v346 = (float *)v360;
        }
        else
        {
          v35 += v770;
          v346 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v348 == 1)
          return;
      }
    case 15:
      v362 = v37;
      v363 = (int)v25;
      v364 = v771;
      v746 = -(v770 * v34);
      v737 = -(uint64_t)(v768 * v34);
      v365 = 4 * (int)v22;
      v366 = 16 * v37;
      v367 = -(uint64_t)v33;
      v755 = v366;
      while (1)
      {
        v368 = v769;
        do
        {
          if (*v29)
          {
            v369 = (_DWORD)v25 ? *v364 : 1.0;
            v370 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v370 * v369;
            if ((float)(v370 * v369) > 0.0)
            {
              *(float *)&a9 = v370 * v35->f32[0];
              a8.f32[0] = v370 * v35->f32[1];
              v371 = v370 * v35->f32[2];
              v372 = v370 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v373 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_394;
              }
              else
              {
                v373 = 1.0;
              }
              PDAoverlayPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v373, *(double *)a8.i64, a9, a10, *(float *)&a9, a8.f32[0], v371, v372, *(float *)&a10);
              LODWORD(v22) = v775;
              a8.i32[0] = v777.i32[1];
              LODWORD(a9) = v777.i32[0];
              v372 = v777.f32[3];
              v371 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v366 = v755;
LABEL_394:
                v27->i32[0] = LODWORD(a9);
                v27->i32[1] = a8.i32[0];
                v27->f32[2] = v371;
                v27->f32[3] = v372;
                *v21 = *(float *)&a10;
                goto LABEL_396;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = a8.i32[0];
              v27->f32[2] = v371;
              v27->f32[3] = v372;
              LODWORD(v25) = v774;
              v366 = v755;
            }
          }
LABEL_396:
          v29 += v362;
          v374 = &v35[v362];
          if ((unint64_t)v374 >= v776)
            v375 = v367;
          else
            v375 = 0;
          v364 += v363 + v375;
          v35 = &v374[v375];
          v21 = (float *)((char *)v21 + v365);
          v27 = (float32x4_t *)((char *)v27 + v366);
          --v368;
        }
        while (v368);
        if (v765)
        {
          v376 = v772 + 16 * v770;
          v377 = v737;
          if (v376 < v765)
            v377 = 0;
          v364 = &v771[v768 + v377];
          v378 = v746;
          if (v376 < v765)
            v378 = 0;
          v35 = (float32x4_t *)(v376 + 16 * v378);
          v776 += 16 * v378 + 16 * v770;
          v771 += v768 + v377;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v364 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 16:
      v379 = v37;
      v380 = v34;
      v381 = -(v770 * v34);
      v382 = -(uint64_t)(v768 * v380);
      v383 = 16 * v37;
      v384 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      v385 = v771;
      while (1)
      {
        v386 = v769;
        v387 = v773;
        do
        {
          if (*v29)
          {
            v388 = (_DWORD)v25 ? *v385 : 1.0;
            v389 = (float)*v29 * 0.0039216;
            a5.f32[0] = v389 * v388;
            if (a5.f32[0] > 0.0)
            {
              v390 = vmulq_n_f32(*v35, v389);
              if ((_DWORD)v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_421;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v391 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              v392 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v390);
              v393 = (int8x16_t)vmulq_n_f32(v391, a5.f32[0]);
              v394 = (int8x16_t)vmulq_n_f32(v392, a6.f32[0]);
              v395 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v393, (float32x4_t)v394), v394, v393);
              v396 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v395, v391, 1.0 - a5.f32[0]), v395);
              v397 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v396, v392, 1.0 - a6.f32[0]), v396);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v390 = vsubq_f32(a6, v397);
              if ((_DWORD)v22)
              {
LABEL_421:
                *v27 = v390;
                *v21 = a5.f32[0];
                goto LABEL_423;
              }
              *v27 = v390;
            }
          }
LABEL_423:
          v29 += v379;
          v398 = &v35[v379];
          v399 = &v385[(int)v25];
          if ((unint64_t)v398 >= v776)
            v400 = v384;
          else
            v400 = 0;
          v385 = &v399[v400];
          v35 = &v398[v400];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v383);
          --v386;
        }
        while (v386);
        if (v765)
        {
          v401 = v772 + 16 * v770;
          if (v401 >= v765)
            v402 = v382;
          else
            v402 = 0;
          v403 = (uint64_t)&v771[v768 + v402];
          if (v401 >= v765)
            v404 = v381;
          else
            v404 = 0;
          v35 = (float32x4_t *)(v401 + 16 * v404);
          v776 += 16 * v404 + 16 * v770;
          v771 += v768 + v402;
          v772 = (unint64_t)v35;
          v385 = (float *)v403;
        }
        else
        {
          v35 += v770;
          v385 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v387 == 1)
          return;
      }
    case 17:
      v405 = v37;
      v406 = v34;
      v407 = -(v770 * v34);
      v408 = -(uint64_t)(v768 * v406);
      v409 = 16 * v37;
      v410 = -(uint64_t)v33;
      a4.i32[0] = 1.0;
      v411 = v771;
      while (1)
      {
        v412 = v769;
        v413 = v773;
        do
        {
          if (*v29)
          {
            v414 = (_DWORD)v25 ? *v411 : 1.0;
            v415 = (float)*v29 * 0.0039216;
            a5.f32[0] = v415 * v414;
            if (a5.f32[0] > 0.0)
            {
              v416 = vmulq_n_f32(*v35, v415);
              if ((_DWORD)v22)
              {
                a6.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_450;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v417 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), *v27);
              v418 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v416);
              v419 = (int8x16_t)vmulq_n_f32(v417, a5.f32[0]);
              v420 = (int8x16_t)vmulq_n_f32(v418, a6.f32[0]);
              v421 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v420, (float32x4_t)v419), v420, v419);
              v422 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v421, v417, 1.0 - a5.f32[0]), v421);
              v423 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v422, v418, 1.0 - a6.f32[0]), v422);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v416 = vsubq_f32(a6, v423);
              if ((_DWORD)v22)
              {
LABEL_450:
                *v27 = v416;
                *v21 = a5.f32[0];
                goto LABEL_452;
              }
              *v27 = v416;
            }
          }
LABEL_452:
          v29 += v405;
          v424 = &v35[v405];
          v425 = &v411[(int)v25];
          if ((unint64_t)v424 >= v776)
            v426 = v410;
          else
            v426 = 0;
          v411 = &v425[v426];
          v35 = &v424[v426];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v409);
          --v412;
        }
        while (v412);
        if (v765)
        {
          v427 = v772 + 16 * v770;
          if (v427 >= v765)
            v428 = v408;
          else
            v428 = 0;
          v429 = (uint64_t)&v771[v768 + v428];
          if (v427 >= v765)
            v430 = v407;
          else
            v430 = 0;
          v35 = (float32x4_t *)(v427 + 16 * v430);
          v776 += 16 * v430 + 16 * v770;
          v771 += v768 + v428;
          v772 = (unint64_t)v35;
          v411 = (float *)v429;
        }
        else
        {
          v35 += v770;
          v411 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v413 == 1)
          return;
      }
    case 18:
      v431 = v37;
      v432 = (int)v25;
      v433 = v771;
      v747 = -(v770 * v34);
      v738 = -(uint64_t)(v768 * v34);
      v434 = 4 * (int)v22;
      v435 = 16 * v37;
      v436 = -(uint64_t)v33;
      v756 = v435;
      while (1)
      {
        v437 = v769;
        do
        {
          if (*v29)
          {
            v438 = (_DWORD)v25 ? *v433 : 1.0;
            v439 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v439 * v438;
            if ((float)(v439 * v438) > 0.0)
            {
              a8.f32[0] = v439 * v35->f32[0];
              *(float *)&a9 = v439 * v35->f32[1];
              v440 = v439 * v35->f32[2];
              v441 = v439 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v442 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_480;
              }
              else
              {
                v442 = 1.0;
              }
              PDAcolordodgePDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v442, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v440, v441, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v441 = v777.f32[3];
              v440 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v435 = v756;
LABEL_480:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v440;
                v27->f32[3] = v441;
                *v21 = *(float *)&a10;
                goto LABEL_482;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v440;
              v27->f32[3] = v441;
              LODWORD(v25) = v774;
              v435 = v756;
            }
          }
LABEL_482:
          v29 += v431;
          v443 = &v35[v431];
          if ((unint64_t)v443 >= v776)
            v444 = v436;
          else
            v444 = 0;
          v433 += v432 + v444;
          v35 = &v443[v444];
          v21 = (float *)((char *)v21 + v434);
          v27 = (float32x4_t *)((char *)v27 + v435);
          --v437;
        }
        while (v437);
        if (v765)
        {
          v445 = v772 + 16 * v770;
          v446 = v738;
          if (v445 < v765)
            v446 = 0;
          v433 = &v771[v768 + v446];
          v447 = v747;
          if (v445 < v765)
            v447 = 0;
          v35 = (float32x4_t *)(v445 + 16 * v447);
          v776 += 16 * v447 + 16 * v770;
          v771 += v768 + v446;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v433 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 19:
      v448 = v37;
      v449 = (int)v25;
      v450 = v771;
      v748 = -(v770 * v34);
      v739 = -(uint64_t)(v768 * v34);
      v451 = 4 * (int)v22;
      v452 = 16 * v37;
      v453 = -(uint64_t)v33;
      v757 = v452;
      while (1)
      {
        v454 = v769;
        do
        {
          if (*v29)
          {
            v455 = (_DWORD)v25 ? *v450 : 1.0;
            v456 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v456 * v455;
            if ((float)(v456 * v455) > 0.0)
            {
              a8.f32[0] = v456 * v35->f32[0];
              *(float *)&a9 = v456 * v35->f32[1];
              v457 = v456 * v35->f32[2];
              v458 = v456 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v459 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_508;
              }
              else
              {
                v459 = 1.0;
              }
              PDAcolorburnPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v459, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v457, v458, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v458 = v777.f32[3];
              v457 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v452 = v757;
LABEL_508:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v457;
                v27->f32[3] = v458;
                *v21 = *(float *)&a10;
                goto LABEL_510;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v457;
              v27->f32[3] = v458;
              LODWORD(v25) = v774;
              v452 = v757;
            }
          }
LABEL_510:
          v29 += v448;
          v460 = &v35[v448];
          if ((unint64_t)v460 >= v776)
            v461 = v453;
          else
            v461 = 0;
          v450 += v449 + v461;
          v35 = &v460[v461];
          v21 = (float *)((char *)v21 + v451);
          v27 = (float32x4_t *)((char *)v27 + v452);
          --v454;
        }
        while (v454);
        if (v765)
        {
          v462 = v772 + 16 * v770;
          v463 = v739;
          if (v462 < v765)
            v463 = 0;
          v450 = &v771[v768 + v463];
          v464 = v748;
          if (v462 < v765)
            v464 = 0;
          v35 = (float32x4_t *)(v462 + 16 * v464);
          v776 += 16 * v464 + 16 * v770;
          v771 += v768 + v463;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v450 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 20:
      v465 = v37;
      v466 = (int)v25;
      v467 = v771;
      v749 = -(v770 * v34);
      v740 = -(uint64_t)(v768 * v34);
      v468 = 4 * (int)v22;
      v469 = 16 * v37;
      v470 = -(uint64_t)v33;
      v758 = v469;
      while (1)
      {
        v471 = v769;
        do
        {
          if (*v29)
          {
            v472 = (_DWORD)v25 ? *v467 : 1.0;
            v473 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v473 * v472;
            if ((float)(v473 * v472) > 0.0)
            {
              a8.f32[0] = v473 * v35->f32[0];
              *(float *)&a9 = v473 * v35->f32[1];
              v474 = v473 * v35->f32[2];
              v475 = v473 * v35->f32[3];
              if ((_DWORD)v22)
              {
                *(float *)&a7 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_536;
              }
              else
              {
                LODWORD(a7) = 1.0;
              }
              a3.i32[0] = v27->i32[0];
              a3 = (float32x2_t)PDAsoftlightPDA(&v777, a3, v27->f32[1], v27->f32[2], v27->f32[3], a7, *(int32x2_t *)a8.f32, a9, a10, a2, v23, v25, v22, a14, a15, a16, (float32x2_t)__PAIR64__(LODWORD(a9), a8.u32[0]), v474, v475,
                                  *(float *)&a10).u64[0];
              v22 = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v475 = v777.f32[3];
              v474 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                v25 = v774;
                v469 = v758;
LABEL_536:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v474;
                v27->f32[3] = v475;
                *v21 = *(float *)&a10;
                goto LABEL_538;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v474;
              v27->f32[3] = v475;
              v25 = v774;
              v469 = v758;
            }
          }
LABEL_538:
          v29 += v465;
          v476 = &v35[v465];
          if ((unint64_t)v476 >= v776)
            v477 = v470;
          else
            v477 = 0;
          v467 += v466 + v477;
          v35 = &v476[v477];
          v21 = (float *)((char *)v21 + v468);
          v27 = (float32x4_t *)((char *)v27 + v469);
          --v471;
        }
        while (v471);
        if (v765)
        {
          v478 = v772 + 16 * v770;
          v479 = v740;
          if (v478 < v765)
            v479 = 0;
          v467 = &v771[v768 + v479];
          v480 = v749;
          if (v478 < v765)
            v480 = 0;
          v35 = (float32x4_t *)(v478 + 16 * v480);
          v776 += 16 * v480 + 16 * v770;
          v771 += v768 + v479;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v467 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 21:
      v481 = v37;
      v482 = (int)v25;
      v483 = v771;
      v750 = -(v770 * v34);
      v741 = -(uint64_t)(v768 * v34);
      v484 = 4 * (int)v22;
      v485 = 16 * v37;
      v486 = -(uint64_t)v33;
      v759 = v485;
      while (1)
      {
        v487 = v769;
        do
        {
          if (*v29)
          {
            v488 = (_DWORD)v25 ? *v483 : 1.0;
            v489 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v489 * v488;
            if ((float)(v489 * v488) > 0.0)
            {
              a8.f32[0] = v489 * v35->f32[0];
              *(float *)&a9 = v489 * v35->f32[1];
              v490 = v489 * v35->f32[2];
              v491 = v489 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v492 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_564;
              }
              else
              {
                v492 = 1.0;
              }
              PDAhardlightPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v492, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v490, v491, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v491 = v777.f32[3];
              v490 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v485 = v759;
LABEL_564:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v490;
                v27->f32[3] = v491;
                *v21 = *(float *)&a10;
                goto LABEL_566;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v490;
              v27->f32[3] = v491;
              LODWORD(v25) = v774;
              v485 = v759;
            }
          }
LABEL_566:
          v29 += v481;
          v493 = &v35[v481];
          if ((unint64_t)v493 >= v776)
            v494 = v486;
          else
            v494 = 0;
          v483 += v482 + v494;
          v35 = &v493[v494];
          v21 = (float *)((char *)v21 + v484);
          v27 = (float32x4_t *)((char *)v27 + v485);
          --v487;
        }
        while (v487);
        if (v765)
        {
          v495 = v772 + 16 * v770;
          v496 = v741;
          if (v495 < v765)
            v496 = 0;
          v483 = &v771[v768 + v496];
          v497 = v750;
          if (v495 < v765)
            v497 = 0;
          v35 = (float32x4_t *)(v495 + 16 * v497);
          v776 += 16 * v497 + 16 * v770;
          v771 += v768 + v496;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v483 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 22:
      v498 = v37;
      v499 = v34;
      v500 = -(v770 * v34);
      v501 = -(uint64_t)(v768 * v499);
      v502 = 16 * v37;
      v503 = -(uint64_t)v33;
      v504 = v771;
      while (1)
      {
        v505 = v769;
        v506 = v773;
        do
        {
          if (*v29)
          {
            v507 = (_DWORD)v25 ? *v504 : 1.0;
            v508 = (float)*v29 * 0.0039216;
            a4.f32[0] = v508 * v507;
            if (a4.f32[0] > 0.0)
            {
              v509 = *v35;
              v510 = vmulq_n_f32(*v35, v508);
              if ((_DWORD)v22)
              {
                v509.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_592;
              }
              else
              {
                v509.i32[0] = 1.0;
              }
              *(float *)&a7 = (float)(v509.f32[0] + a4.f32[0]) - (float)(v509.f32[0] * a4.f32[0]);
              v511 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v509.f32, 0), *v27);
              v512 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v510);
              v513 = vaddq_f32(v511, v512);
              v514 = vmulq_n_f32(v511, a4.f32[0]);
              v515 = vmulq_n_f32(v512, v509.f32[0]);
              v516 = vsubq_f32(v513, v514);
              v517 = (int8x16_t)vsubq_f32(v514, v515);
              a4 = vaddq_f32(vsubq_f32(v516, v515), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v517), (int8x16_t)vnegq_f32((float32x4_t)v517), v517));
              v510 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), a4);
              if ((_DWORD)v22)
              {
                a4.i32[0] = LODWORD(a7);
LABEL_592:
                *v27 = v510;
                *v21 = a4.f32[0];
                goto LABEL_594;
              }
              *v27 = v510;
            }
          }
LABEL_594:
          v29 += v498;
          v518 = &v35[v498];
          v519 = &v504[(int)v25];
          if ((unint64_t)v518 >= v776)
            v520 = v503;
          else
            v520 = 0;
          v504 = &v519[v520];
          v35 = &v518[v520];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v502);
          --v505;
        }
        while (v505);
        if (v765)
        {
          v521 = v772 + 16 * v770;
          if (v521 >= v765)
            v522 = v501;
          else
            v522 = 0;
          v523 = (uint64_t)&v771[v768 + v522];
          if (v521 >= v765)
            v524 = v500;
          else
            v524 = 0;
          v35 = (float32x4_t *)(v521 + 16 * v524);
          v776 += 16 * v524 + 16 * v770;
          v771 += v768 + v522;
          v772 = (unint64_t)v35;
          v504 = (float *)v523;
        }
        else
        {
          v35 += v770;
          v504 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v506 == 1)
          return;
      }
    case 23:
      v525 = v37;
      v526 = v34;
      v527 = -(v770 * v34);
      v528 = -(uint64_t)(v768 * v526);
      v529 = 16 * v37;
      v530 = -(uint64_t)v33;
      v531.i64[0] = 0xC0000000C0000000;
      v531.i64[1] = 0xC0000000C0000000;
      v532 = v771;
      while (1)
      {
        v533 = v769;
        v534 = v773;
        do
        {
          if (*v29)
          {
            v535 = (_DWORD)v25 ? *v532 : 1.0;
            v536 = (float)*v29 * 0.0039216;
            a5.f32[0] = v536 * v535;
            if (a5.f32[0] > 0.0)
            {
              v537 = *v35;
              v538 = vmulq_n_f32(*v35, v536);
              if ((_DWORD)v22)
              {
                a8.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_622;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v537.f32[0] = (float)(a8.f32[0] + a5.f32[0]) - (float)(a8.f32[0] * a5.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), *v27);
              v539 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v538);
              v540 = vmlaq_f32(vaddq_f32(a8, v539), v531, vmulq_f32(v539, a8));
              a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v537.f32, 0);
              v538 = vsubq_f32(a5, v540);
              if ((_DWORD)v22)
              {
                a5.i32[0] = v537.i32[0];
LABEL_622:
                *v27 = v538;
                *v21 = a5.f32[0];
                goto LABEL_624;
              }
              *v27 = v538;
            }
          }
LABEL_624:
          v29 += v525;
          v541 = &v35[v525];
          v542 = &v532[(int)v25];
          if ((unint64_t)v541 >= v776)
            v543 = v530;
          else
            v543 = 0;
          v532 = &v542[v543];
          v35 = &v541[v543];
          v21 += (int)v22;
          v27 = (float32x4_t *)((char *)v27 + v529);
          --v533;
        }
        while (v533);
        if (v765)
        {
          v544 = v772 + 16 * v770;
          if (v544 >= v765)
            v545 = v528;
          else
            v545 = 0;
          v546 = (uint64_t)&v771[v768 + v545];
          if (v544 >= v765)
            v547 = v527;
          else
            v547 = 0;
          v35 = (float32x4_t *)(v544 + 16 * v547);
          v776 += 16 * v547 + 16 * v770;
          v771 += v768 + v545;
          v772 = (unint64_t)v35;
          v532 = (float *)v546;
        }
        else
        {
          v35 += v770;
          v532 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        --v773;
        if (v534 == 1)
          return;
      }
    case 24:
      v548 = v37;
      v549 = (int)v25;
      v550 = v771;
      v751 = -(v770 * v34);
      v742 = -(uint64_t)(v768 * v34);
      v551 = 4 * (int)v22;
      v552 = 16 * v37;
      v553 = -(uint64_t)v33;
      v760 = v552;
      while (1)
      {
        v554 = v769;
        do
        {
          if (*v29)
          {
            v555 = (_DWORD)v25 ? *v550 : 1.0;
            v556 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v556 * v555;
            if ((float)(v556 * v555) > 0.0)
            {
              a8.f32[0] = v556 * v35->f32[0];
              *(float *)&a9 = v556 * v35->f32[1];
              v557 = v556 * v35->f32[2];
              v558 = v556 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v559 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_652;
              }
              else
              {
                v559 = 1.0;
              }
              PDAhuePDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v559, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v557, v558, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v558 = v777.f32[3];
              v557 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v552 = v760;
LABEL_652:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v557;
                v27->f32[3] = v558;
                *v21 = *(float *)&a10;
                goto LABEL_654;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v557;
              v27->f32[3] = v558;
              LODWORD(v25) = v774;
              v552 = v760;
            }
          }
LABEL_654:
          v29 += v548;
          v560 = &v35[v548];
          if ((unint64_t)v560 >= v776)
            v561 = v553;
          else
            v561 = 0;
          v550 += v549 + v561;
          v35 = &v560[v561];
          v21 = (float *)((char *)v21 + v551);
          v27 = (float32x4_t *)((char *)v27 + v552);
          --v554;
        }
        while (v554);
        if (v765)
        {
          v562 = v772 + 16 * v770;
          v563 = v742;
          if (v562 < v765)
            v563 = 0;
          v550 = &v771[v768 + v563];
          v564 = v751;
          if (v562 < v765)
            v564 = 0;
          v35 = (float32x4_t *)(v562 + 16 * v564);
          v776 += 16 * v564 + 16 * v770;
          v771 += v768 + v563;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v550 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 25:
      v565 = v37;
      v566 = (int)v25;
      v567 = v771;
      v752 = -(v770 * v34);
      v743 = -(uint64_t)(v768 * v34);
      v568 = 4 * (int)v22;
      v569 = 16 * v37;
      v570 = -(uint64_t)v33;
      v761 = v570;
      while (1)
      {
        v571 = v769;
        do
        {
          if (*v29)
          {
            v572 = (_DWORD)v25 ? *v567 : 1.0;
            v573 = (float)*v29 * 0.0039216;
            *(float *)&a10 = v573 * v572;
            if ((float)(v573 * v572) > 0.0)
            {
              a8.f32[0] = v573 * v35->f32[0];
              *(float *)&a9 = v573 * v35->f32[1];
              v574 = v573 * v35->f32[2];
              v575 = v573 * v35->f32[3];
              if ((_DWORD)v22)
              {
                v576 = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_680;
              }
              else
              {
                v576 = 1.0;
              }
              PDAsaturationPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v576, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v574, v575, *(float *)&a10);
              LODWORD(v22) = v775;
              LODWORD(a9) = v777.i32[1];
              a8.i32[0] = v777.i32[0];
              v575 = v777.f32[3];
              v574 = v777.f32[2];
              if ((_DWORD)v775)
              {
                *(float *)&a10 = v778;
                LODWORD(v25) = v774;
                v570 = v761;
LABEL_680:
                v27->i32[0] = a8.i32[0];
                v27->i32[1] = LODWORD(a9);
                v27->f32[2] = v574;
                v27->f32[3] = v575;
                *v21 = *(float *)&a10;
                goto LABEL_682;
              }
              v27->i32[0] = v777.i32[0];
              v27->i32[1] = LODWORD(a9);
              v27->f32[2] = v574;
              v27->f32[3] = v575;
              LODWORD(v25) = v774;
              v570 = v761;
            }
          }
LABEL_682:
          v29 += v565;
          v577 = &v35[v565];
          if ((unint64_t)v577 >= v776)
            v578 = v570;
          else
            v578 = 0;
          v567 += v566 + v578;
          v35 = &v577[v578];
          v21 = (float *)((char *)v21 + v568);
          v27 = (float32x4_t *)((char *)v27 + v569);
          --v571;
        }
        while (v571);
        if (v765)
        {
          v579 = v772 + 16 * v770;
          v580 = v743;
          if (v579 < v765)
            v580 = 0;
          v567 = &v771[v768 + v580];
          v581 = v752;
          if (v579 < v765)
            v581 = 0;
          v35 = (float32x4_t *)(v579 + 16 * v581);
          v776 += 16 * v581 + 16 * v770;
          v771 += v768 + v580;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v567 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 26:
      v582 = v37;
      v583 = (int)v25;
      v584 = v771;
      v753 = -(v770 * v34);
      v744 = -(uint64_t)(v768 * v34);
      v585 = 4 * (int)v22;
      v586 = 16 * v37;
      v587 = -(uint64_t)v33;
      v762 = v587;
      while (1)
      {
        v588 = v769;
        do
        {
          if (*v29)
          {
            v589 = (_DWORD)v25 ? *v584 : 1.0;
            v590 = (float)*v29 * 0.0039216;
            v591 = v590 * v589;
            if ((float)(v590 * v589) > 0.0)
            {
              v592 = v590 * v35->f32[0];
              v593 = v590 * v35->f32[1];
              v594 = v590 * v35->f32[2];
              v595 = v590 * v35->f32[3];
              if ((_DWORD)v22)
              {
                a8.f32[0] = *v21;
                if (*v21 <= 0.0)
                  goto LABEL_708;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              LODWORD(a9) = v27->i32[0];
              LODWORD(a10) = v27->i32[3];
              PDAluminosityPDA(v777.f32, v592, v593, v594, v595, v591, *(double *)a8.i64, a9, a10, v27->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v27->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v27->i64 + 4))), *(float *)&a10, a8.f32[0]);
              LODWORD(v22) = v775;
              v593 = v777.f32[1];
              v592 = v777.f32[0];
              v595 = v777.f32[3];
              v594 = v777.f32[2];
              if ((_DWORD)v775)
              {
                v591 = v778;
                LODWORD(v25) = v774;
                v587 = v762;
LABEL_708:
                v27->f32[0] = v592;
                v27->f32[1] = v593;
                v27->f32[2] = v594;
                v27->f32[3] = v595;
                *v21 = v591;
                goto LABEL_710;
              }
              v27->i32[0] = v777.i32[0];
              v27->f32[1] = v593;
              v27->f32[2] = v594;
              v27->f32[3] = v595;
              LODWORD(v25) = v774;
              v587 = v762;
            }
          }
LABEL_710:
          v29 += v582;
          v596 = &v35[v582];
          if ((unint64_t)v596 >= v776)
            v597 = v587;
          else
            v597 = 0;
          v584 += v583 + v597;
          v35 = &v596[v597];
          v21 = (float *)((char *)v21 + v585);
          v27 = (float32x4_t *)((char *)v27 + v586);
          --v588;
        }
        while (v588);
        if (v765)
        {
          v598 = v772 + 16 * v770;
          v599 = v744;
          if (v598 < v765)
            v599 = 0;
          v584 = &v771[v768 + v599];
          v600 = v753;
          if (v598 < v765)
            v600 = 0;
          v35 = (float32x4_t *)(v598 + 16 * v600);
          v776 += 16 * v600 + 16 * v770;
          v771 += v768 + v599;
          v772 = (unint64_t)v35;
        }
        else
        {
          v35 += v770;
          v584 += v768;
        }
        v29 += v767;
        v27 += v766;
        v21 += v764;
        if (!--v773)
          return;
      }
    case 27:
      v601 = v37;
      v602 = (int)v25;
      v603 = v771;
      v754 = -(v770 * v34);
      v745 = -(uint64_t)(v768 * v34);
      v604 = 4 * (int)v22;
      v605 = 16 * v37;
      v606 = -(uint64_t)v33;
      v763 = v606;
      break;
    default:
      return;
  }
  do
  {
    v607 = v769;
    do
    {
      if (*v29)
      {
        v608 = (_DWORD)v25 ? *v603 : 1.0;
        v609 = (float)*v29 * 0.0039216;
        *(float *)&a10 = v609 * v608;
        if ((float)(v609 * v608) > 0.0)
        {
          a8.f32[0] = v609 * v35->f32[0];
          *(float *)&a9 = v609 * v35->f32[1];
          v610 = v609 * v35->f32[2];
          v611 = v609 * v35->f32[3];
          if ((_DWORD)v22)
          {
            v612 = *v21;
            if (*v21 <= 0.0)
              goto LABEL_736;
          }
          else
          {
            v612 = 1.0;
          }
          PDAluminosityPDA(v777.f32, v27->f32[0], v27->f32[1], v27->f32[2], v27->f32[3], v612, *(double *)a8.i64, a9, a10, a8.f32[0], *(float *)&a9, v610, v611, *(float *)&a10);
          LODWORD(v22) = v775;
          LODWORD(a9) = v777.i32[1];
          a8.i32[0] = v777.i32[0];
          v611 = v777.f32[3];
          v610 = v777.f32[2];
          if ((_DWORD)v775)
          {
            *(float *)&a10 = v778;
            LODWORD(v25) = v774;
            v606 = v763;
LABEL_736:
            v27->i32[0] = a8.i32[0];
            v27->i32[1] = LODWORD(a9);
            v27->f32[2] = v610;
            v27->f32[3] = v611;
            *v21 = *(float *)&a10;
            goto LABEL_738;
          }
          v27->i32[0] = v777.i32[0];
          v27->i32[1] = LODWORD(a9);
          v27->f32[2] = v610;
          v27->f32[3] = v611;
          LODWORD(v25) = v774;
          v606 = v763;
        }
      }
LABEL_738:
      v29 += v601;
      v613 = &v35[v601];
      if ((unint64_t)v613 >= v776)
        v614 = v606;
      else
        v614 = 0;
      v603 += v602 + v614;
      v35 = &v613[v614];
      v21 = (float *)((char *)v21 + v604);
      v27 = (float32x4_t *)((char *)v27 + v605);
      --v607;
    }
    while (v607);
    if (v765)
    {
      v615 = v772 + 16 * v770;
      v616 = v745;
      if (v615 < v765)
        v616 = 0;
      v603 = &v771[v768 + v616];
      v617 = v754;
      if (v615 < v765)
        v617 = 0;
      v35 = (float32x4_t *)(v615 + 16 * v617);
      v776 += 16 * v617 + 16 * v770;
      v771 += v768 + v616;
      v772 = (unint64_t)v35;
    }
    else
    {
      v35 += v770;
      v603 += v768;
    }
    v29 += v767;
    v27 += v766;
    v21 += v764;
    --v773;
  }
  while (v773);
}

uint64_t CMYKf_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int *v23;
  int v24;
  unint64_t v25;
  void (*v26)(uint64_t, _DWORD *);
  uint64_t v27;
  int v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double);
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _OWORD v36[64];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v36, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)v36) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *(_DWORD *)a3;
  v31 = v19;
  v32 = v18;
  if (v19 != 538985509)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 > 0xB)
      {
LABEL_20:
        v22 = 255;
        v21 = 1;
      }
      else
      {
        v21 = 0;
        v22 = 0;
        switch(v20)
        {
          case 2u:
            if (*((_QWORD *)a2 + 12))
              goto LABEL_20;
            v21 = 0;
            v22 = 16;
            break;
          case 5u:
            v21 = 0;
            v22 = 24;
            break;
          case 6u:
            break;
          case 7u:
            v21 = 0;
            v22 = 32;
            break;
          case 8u:
            v21 = 0;
            v22 = 8;
            break;
          case 9u:
            v21 = 0;
            v22 = 40;
            break;
          default:
            goto LABEL_20;
        }
      }
      v23 = CMYKF_image_sample;
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYKF_image_sample[2 * v20 + 2];
      if (v30)
      {
LABEL_29:
        v31 = *v23;
        if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (v34 & 7) == 3 && (a2[2] == 5 || !a2[2]) && v20 <= 0xB)
        {
          HIDWORD(v25) = v22;
          LODWORD(v25) = v22;
          switch((v25 >> 3))
          {
            case 0u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_RGB32;
              goto LABEL_52;
            case 1u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_RGB32;
              goto LABEL_54;
            case 2u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_W8;
              goto LABEL_52;
            case 3u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_RGB24;
              goto LABEL_52;
            case 4u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_rgb32;
LABEL_52:
              v27 = (uint64_t)a2;
              v28 = v8;
              v29 = 0;
              break;
            case 5u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKf_image_mark_rgb32;
LABEL_54:
              v27 = (uint64_t)a2;
              v28 = v8;
              v29 = 8;
              break;
            default:
              goto LABEL_37;
          }
          CMYKf_image_mark_image(v27, (uint64_t)&v30, v28, v29, v26);
          return 1;
        }
        goto LABEL_37;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v23 = CMYK8_image_sample;
        v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK8_image_sample[2 * v20 + 2];
        if (v30)
        {
          v24 = 8;
LABEL_28:
          v33 = v24;
          goto LABEL_29;
        }
      }
      v23 = CMYK16_image_sample;
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK16_image_sample[2 * v20 + 2];
      if (v30)
      {
        v24 = 16;
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v35 && (~v34 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v34 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      CMYKf_mark_inner(*(_QWORD *)(*a1 + 56), v17);
      return 1;
    }
  }
  v30 = CMYKf_sample_CMYKf_inner;
LABEL_37:
  CMYKf_image_mark((uint64_t)a2, (uint64_t)&v30, v8, v17);
  return 1;
}

uint64_t CMYKf_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float32x2_t *v12;
  float *v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  float v25;
  float32x2_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t result;
  unsigned __int8 *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  float v47;
  float32_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  int v60;
  unsigned __int8 *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t *v66;
  float v67;
  float32x2_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  float v73;
  float32_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v12 = (float32x2_t *)*((_QWORD *)a2 + 2);
  v13 = (float *)*((_QWORD *)a2 + 4);
  if (v13)
    v86 = *((_QWORD *)a2 + 5) - a5;
  else
    v86 = 0;
  v14 = *((float *)a2 + 2);
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 3) - a5;
  v17 = *((_QWORD *)a2 + 17);
  v18 = *((_QWORD *)a2 + 18);
  v19 = *((_QWORD *)a2 + 9);
  v20 = *((_QWORD *)a2 + 11);
  v21 = *((_QWORD *)a2 + 7) + v20 * a4;
  v22 = *(unsigned __int8 **)(a1 + 32);
  v23 = &v22[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v24 = 4 * (v13 != 0);
  if (*(_QWORD *)(a1 + 176))
  {
    v85 = *((_QWORD *)a2 + 13);
    v84 = *((_QWORD *)a2 + 15);
    v25 = fminf(v14, 1.0);
    *(float *)&a9 = 1.0 - v25;
    v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v83 = v18 + 16 * a3 + 8;
    while (1)
    {
      if (((v84 - v21) | (v21 - v85)) < 0)
      {
        v29 = 0;
        v28 = 0;
      }
      else
      {
        v27 = ((v21 & (unint64_t)~(-1 << v19)) >> (v19 - 4)) & 0xF;
        if (v27 - 7 >= 9)
          v28 = -v17;
        else
          v28 = v17;
        v29 = weights_19497[v27] & 0xF;
      }
      result = v21 >> v19;
      v31 = &v22[(v21 >> v19) * v17];
      if (v15 == 1)
      {
        if (a5 >= 1)
        {
          result = v29;
          v32 = (uint64_t *)v83;
          v33 = a5;
          do
          {
            v34 = *(v32 - 1);
            v35 = *v32;
            v36 = &v31[v34];
            if (v23 >= &v31[v34])
              v37 = &v31[v34];
            else
              v37 = v23;
            if (v22 > v37)
              v37 = v22;
            v38 = *v37;
            if ((v35 & 0xF) != 0)
            {
              v39 = &v36[v35 >> 4];
              if (v23 < v39)
                v39 = v23;
              if (v22 > v39)
                v39 = v22;
              v40 = *v39;
              if (v29)
              {
                v41 = &v36[v28];
                if (v23 >= v41)
                  v42 = v41;
                else
                  v42 = v23;
                if (v22 > v42)
                  v42 = v22;
                v43 = *v42;
                v44 = &v41[v35 >> 4];
                if (v23 < v44)
                  v44 = v23;
                if (v22 > v44)
                  v44 = v22;
                v45 = BLEND8_19499[v29];
                v38 = v38 - ((v45 & v38) >> v29) + ((v45 & v43) >> v29);
                v40 = v40 - ((v45 & v40) >> v29) + ((v45 & *v44) >> v29);
              }
              v38 = v38
                  - ((BLEND8_19499[*v32 & 0xF] & v38) >> (*v32 & 0xF))
                  + ((BLEND8_19499[*v32 & 0xF] & v40) >> (*v32 & 0xF));
            }
            else if (v29)
            {
              v46 = &v36[v28];
              if (v23 < &v36[v28])
                v46 = v23;
              if (v22 > v46)
                v46 = v22;
              v38 = v38 - ((BLEND8_19499[v29] & v38) >> v29) + ((BLEND8_19499[v29] & *v46) >> v29);
            }
            v47 = *(float *)&_blt_float[v38];
            v48 = (float)(v47 - v47) * v25;
            v12->f32[0] = v48;
            v12->f32[1] = v48;
            v12[1].f32[0] = v48;
            v12[1].f32[1] = (float)(1.0 - v47) * v25;
            if (v13)
              *v13 = v25;
            v32 += 2;
            v12 += 2;
            v13 = (float *)((char *)v13 + v24);
            --v33;
          }
          while (v33);
        }
        goto LABEL_88;
      }
      if (a5 >= 1)
        break;
LABEL_88:
      v12 += 2 * v16;
      v21 += v20;
      v13 += v86;
      if (!--a6)
        return result;
    }
    v49 = (uint64_t *)v83;
    result = a5;
    while (1)
    {
      v50 = *(v49 - 1);
      v51 = *v49;
      v52 = &v31[v50];
      if (v23 >= &v31[v50])
        v53 = &v31[v50];
      else
        v53 = v23;
      if (v22 > v53)
        v53 = v22;
      v54 = *v53;
      if ((v51 & 0xF) != 0)
      {
        v55 = &v52[v51 >> 4];
        if (v23 < v55)
          v55 = v23;
        if (v22 > v55)
          v55 = v22;
        v56 = *v55;
        if (v29)
        {
          if (v23 >= &v52[v28])
            v57 = &v52[v28];
          else
            v57 = v23;
          if (v22 > v57)
            v57 = v22;
          v58 = *v57;
          v59 = &v52[v28 + (v51 >> 4)];
          if (v23 < v59)
            v59 = v23;
          if (v22 > v59)
            v59 = v22;
          v60 = BLEND8_19499[v29];
          v54 = v54 - ((v60 & v54) >> v29) + ((v60 & v58) >> v29);
          v56 = v56 - ((v60 & v56) >> v29) + ((v60 & *v59) >> v29);
        }
        v54 = v54
            - ((BLEND8_19499[*v49 & 0xF] & v54) >> (*v49 & 0xF))
            + ((BLEND8_19499[*v49 & 0xF] & v56) >> (*v49 & 0xF));
      }
      else if (v29)
      {
        v61 = &v52[v28];
        if (v23 < &v52[v28])
          v61 = v23;
        if (v22 > v61)
          v61 = v22;
        v54 = v54 - ((BLEND8_19499[v29] & v54) >> v29) + ((BLEND8_19499[v29] & *v61) >> v29);
      }
      v62 = *(float *)&_blt_float[v54];
      v63 = v62 - v62;
      v64 = (float)(1.0 - v62) * v25;
      *(float *)&a12 = v63 * v25;
      if (v13)
      {
        if (v25 < 1.0)
        {
          if (v25 > 0.0)
          {
            *v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v26, *v12);
            v65 = v12[1].f32[1];
            v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
            v12[1].f32[1] = v64 + (float)(v65 * *(float *)&a9);
            *v13 = v25 + (float)(*v13 * *(float *)&a9);
          }
        }
        else
        {
          v12->i32[0] = LODWORD(a12);
          v12->i32[1] = LODWORD(a12);
          v12[1].i32[0] = LODWORD(a12);
          v12[1].f32[1] = v64;
          *v13 = v25;
        }
        goto LABEL_87;
      }
      if (v25 >= 1.0)
        break;
      if (v25 > 0.0)
      {
        *v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v26, *v12);
        v64 = v64 + (float)(v12[1].f32[1] * *(float *)&a9);
        v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
        goto LABEL_86;
      }
LABEL_87:
      v49 += 2;
      v12 += 2;
      v13 = (float *)((char *)v13 + v24);
      if (!--result)
        goto LABEL_88;
    }
    v12->i32[0] = LODWORD(a12);
    v12->i32[1] = LODWORD(a12);
    v12[1].i32[0] = LODWORD(a12);
LABEL_86:
    v12[1].f32[1] = v64;
    goto LABEL_87;
  }
  v66 = (uint64_t *)(v18 + 16 * a3);
  v67 = fminf(v14, 1.0);
  *(float *)&a9 = 1.0 - v67;
  v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  do
  {
    result = (uint64_t)&v22[(v21 >> v19) * v17];
    if (v15 != 1)
    {
      v75 = v66;
      v76 = a5;
      if (a5 < 1)
        goto LABEL_118;
      while (1)
      {
        v77 = *v75;
        v75 += 2;
        v78 = (unsigned __int8 *)(result + v77);
        if ((unint64_t)v23 < result + v77)
          v78 = v23;
        if (v22 > v78)
          v78 = v22;
        v79 = *(float *)&_blt_float[*v78];
        v80 = v79 - v79;
        v81 = (float)(1.0 - v79) * v67;
        *(float *)&a12 = v80 * v67;
        if (v13)
        {
          if (v67 < 1.0)
          {
            if (v67 > 0.0)
            {
              *v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v68, *v12);
              v82 = v12[1].f32[1];
              v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
              v12[1].f32[1] = v81 + (float)(v82 * *(float *)&a9);
              *v13 = v67 + (float)(*v13 * *(float *)&a9);
            }
          }
          else
          {
            v12->i32[0] = LODWORD(a12);
            v12->i32[1] = LODWORD(a12);
            v12[1].i32[0] = LODWORD(a12);
            v12[1].f32[1] = v81;
            *v13 = v67;
          }
          goto LABEL_117;
        }
        if (v67 >= 1.0)
          break;
        if (v67 > 0.0)
        {
          *v12 = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0), v68, *v12);
          v81 = v81 + (float)(v12[1].f32[1] * *(float *)&a9);
          v12[1].f32[0] = *(float *)&a12 + (float)(v12[1].f32[0] * *(float *)&a9);
          goto LABEL_116;
        }
LABEL_117:
        v12 += 2;
        v13 = (float *)((char *)v13 + v24);
        if (!--v76)
          goto LABEL_118;
      }
      v12->i32[0] = LODWORD(a12);
      v12->i32[1] = LODWORD(a12);
      v12[1].i32[0] = LODWORD(a12);
LABEL_116:
      v12[1].f32[1] = v81;
      goto LABEL_117;
    }
    if (a5 >= 1)
    {
      v69 = v66;
      v70 = a5;
      do
      {
        v71 = *v69;
        v69 += 2;
        v72 = (unsigned __int8 *)(result + v71);
        if ((unint64_t)v23 < result + v71)
          v72 = v23;
        if (v22 > v72)
          v72 = v22;
        v73 = *(float *)&_blt_float[*v72];
        v74 = (float)(v73 - v73) * v67;
        v12->f32[0] = v74;
        v12->f32[1] = v74;
        v12[1].f32[0] = v74;
        v12[1].f32[1] = (float)(1.0 - v73) * v67;
        if (v13)
          *v13 = v67;
        v12 += 2;
        v13 = (float *)((char *)v13 + v24);
        --v70;
      }
      while (v70);
    }
LABEL_118:
    v12 += 2 * v16;
    v21 += v20;
    v13 += v86;
    --a6;
  }
  while (a6);
  return result;
}

void CMYKf_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  int v41;
  int v42;
  int *v43;
  int v44;
  void *v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD v56[4];
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  int v75;
  int v76[4];

  v56[0] = a3;
  v56[1] = a4;
  v56[2] = *(_DWORD *)(a2 + 184);
  v8 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v58 = v8;
  if (*(_QWORD *)(a1 + 48))
    v9 = (unint64_t)*(int *)(a1 + 32) >> 2;
  else
    v9 = 0;
  v60 = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    v12 = HIBYTE(v11);
    v13 = *(int *)(a2 + 24);
    v14 = (uint64_t *)(a2 + 104);
    v15 = (uint64_t *)(a2 + 72);
    v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    v12 = BYTE2(v11);
    v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v14 = (uint64_t *)(a2 + 96);
    v15 = (uint64_t *)(a2 + 64);
    v16 = (uint64_t *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 112);
  }
  v17 = *v16;
  v18 = *v15;
  v19 = *v14;
  v20 = v12;
  v63 = v12;
  v61 = v19;
  v71 = v13;
  v69 = v17;
  v67 = v18;
  v65 = v10;
  v21 = *(_QWORD *)(a2 + 128);
  v54 = v18;
  v55 = v17;
  if (v21)
  {
    v22 = BYTE2(v11);
    v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v24 = (uint64_t *)(a2 + 96);
    v25 = (uint64_t *)(a2 + 64);
    v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    v22 = HIBYTE(v11);
    v23 = *(int *)(a2 + 24);
    v24 = (uint64_t *)(a2 + 104);
    v25 = (uint64_t *)(a2 + 72);
    v26 = (uint64_t *)(a2 + 88);
    v21 = *(_QWORD *)(a2 + 136);
  }
  v27 = *v26;
  v28 = *v25;
  v29 = *v24;
  v64 = v22;
  v62 = v29;
  v72 = v23;
  v70 = v27;
  v68 = v28;
  v66 = v21;
  v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    v31 = malloc_type_malloc(16 * v30, 0xDE4F2DC6uLL);
    v73 = v31;
    if (v31)
    {
      if (*(_QWORD *)(a2 + 176))
      {
        if ((_DWORD)v30)
        {
          v33 = v31 + 1;
          v34 = v55 - v19;
          do
          {
            if (((v19 - v54) | v34) < 0)
            {
              v37 = 0;
              v38 = 0;
            }
            else
            {
              v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              v36 = weights_19497[v35];
              if (v35 - 7 >= 9)
                v37 = -(uint64_t)v13;
              else
                v37 = v13;
              v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if ((_DWORD)v30)
      {
        v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      v40 = v31;
      v41 = *(_DWORD *)(a1 + 4);
      v42 = *(_DWORD *)(a1 + 8);
      v74 = v42;
      v75 = v41;
      v43 = *(int **)(a1 + 136);
      if (v43)
      {
        v44 = *(_DWORD *)(a1 + 104);
        v76[0] = *(_DWORD *)(a1 + 108);
        v76[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v76[0], v41, v42);
        v46 = v45;
        if (v45)
          goto LABEL_32;
      }
      v47 = 0;
      v48 = 0;
      v46 = 0;
      *(_QWORD *)v76 = 0;
      while (1)
      {
        v49 = *(int *)(a1 + 16) + (uint64_t)v48;
        v50 = *(_QWORD *)(a1 + 48);
        v51 = v47 + *(_DWORD *)(a1 + 12);
        v52 = *(_QWORD *)(a1 + 40) + 16 * v8 * v49 + 16 * v51;
        v53 = v50 + 4 * v9 * v49 + 4 * v51;
        if (!v50)
          v53 = 0;
        v57 = v52;
        v59 = v53;
        a5(a2, v56);
        if (!v46)
          break;
LABEL_32:
        if (!shape_enum_clip_next((uint64_t)v46, &v76[1], v76, &v75, &v74))
        {
          free(v46);
          break;
        }
        v48 = v76[0];
        v47 = v76[1];
        v8 = v58;
        v9 = v60;
      }
      free(v40);
    }
  }
}

uint64_t CMYKf_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t result;
  unsigned __int8 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned __int8 *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;

  v6 = (float *)*((_QWORD *)a2 + 2);
  v7 = (float *)*((_QWORD *)a2 + 4);
  if (v7)
    v135 = *((_QWORD *)a2 + 5) - a5;
  else
    v135 = 0;
  v8 = *((float *)a2 + 2);
  v134 = *a2;
  v9 = *((_QWORD *)a2 + 3) - a5;
  v10 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v12 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 7) + v13 * a4;
  v15 = *(unsigned __int8 **)(a1 + 32);
  v16 = &v15[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v17 = 4 * (v7 != 0);
  if (*(_QWORD *)(a1 + 176))
  {
    v132 = *((_QWORD *)a2 + 15);
    v133 = *((_QWORD *)a2 + 13);
    v131 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v132 - v14) | (v14 - v133)) < 0)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v18 = ((v14 & (unint64_t)~(-1 << v12)) >> (v12 - 4)) & 0xF;
        if (v18 - 7 >= 9)
          v19 = -v10;
        else
          v19 = v10;
        v20 = weights_19497[v18] & 0xF;
      }
      result = v14 >> v12;
      v22 = &v15[(v14 >> v12) * v10];
      if (v134 == 1)
      {
        if (a5 >= 1)
        {
          result = v20;
          v23 = (uint64_t *)v131;
          v24 = a5;
          do
          {
            v25 = *(v23 - 1);
            v26 = *v23;
            v27 = &v22[v25];
            if (v16 >= &v22[v25])
              v28 = &v22[v25];
            else
              v28 = v16;
            if (v15 > v28)
              v28 = v15;
            v29 = (*v28 << 24) | (v28[1] << 16) | (v28[2] << 8);
            if ((v26 & 0xF) != 0)
            {
              v30 = &v27[v26 >> 4];
              if (v16 < v30)
                v30 = v16;
              if (v15 > v30)
                v30 = v15;
              v31 = (*v30 << 24) | (v30[1] << 16) | (v30[2] << 8);
              if (v20)
              {
                if (v16 >= &v27[v19])
                  v32 = &v27[v19];
                else
                  v32 = v16;
                if (v15 > v32)
                  v32 = v15;
                v33 = (*v32 << 24) | (v32[1] << 16) | (v32[2] << 8);
                v34 = &v27[v19 + (v26 >> 4)];
                if (v16 < v34)
                  v34 = v16;
                if (v15 > v34)
                  v34 = v15;
                v35 = BLEND8_19499[v20];
                v29 = v29 - ((v35 & v29) >> v20) + ((v35 & v33) >> v20);
                v31 = v31 - ((v35 & v31) >> v20) + ((((*v34 << 24) | (v34[1] << 16) | (v34[2] << 8)) & v35) >> v20);
              }
              v29 = v29
                  - ((BLEND8_19499[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_19499[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v20)
            {
              v36 = &v27[v19];
              if (v16 < &v27[v19])
                v36 = v16;
              if (v15 > v36)
                v36 = v15;
              v29 = v29
                  - ((BLEND8_19499[v20] & v29) >> v20)
                  + ((((*v36 << 24) | (v36[1] << 16) | (v36[2] << 8)) & BLEND8_19499[v20]) >> v20);
            }
            v37 = *(float *)&_blt_float[HIBYTE(v29)];
            if (v8 >= 1.0)
            {
              v48 = *(float *)&_blt_float[BYTE2(v29)];
              v49 = *(float *)&_blt_float[BYTE1(v29)];
              if (v37 <= v48)
                v50 = *(float *)&_blt_float[BYTE2(v29)];
              else
                v50 = *(float *)&_blt_float[HIBYTE(v29)];
              if (v49 <= v50)
                v51 = v50;
              else
                v51 = *(float *)&_blt_float[BYTE1(v29)];
              v43 = v51 - v37;
              v44 = v51 - v48;
              v45 = v51 - v49;
              v47 = 1.0;
              v46 = 1.0 - v51;
            }
            else
            {
              v38 = v8 * v37;
              v39 = v8 * *(float *)&_blt_float[BYTE2(v29)];
              v40 = v8 * *(float *)&_blt_float[BYTE1(v29)];
              if (v38 <= v39)
                v41 = v8 * *(float *)&_blt_float[BYTE2(v29)];
              else
                v41 = v38;
              if (v40 <= v41)
                v42 = v41;
              else
                v42 = v8 * *(float *)&_blt_float[BYTE1(v29)];
              v43 = v42 - v38;
              v44 = v42 - v39;
              v45 = v42 - v40;
              v46 = v8 - v42;
              v47 = v8;
            }
            *v6 = v43;
            v6[1] = v44;
            v6[2] = v45;
            v6[3] = v46;
            if (v7)
              *v7 = v47;
            v23 += 2;
            v6 += 4;
            v7 = (float *)((char *)v7 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_118;
      }
      if (a5 >= 1)
        break;
LABEL_118:
      v6 += 4 * v9;
      v14 += v13;
      v7 += v135;
      if (!--a6)
        return result;
    }
    v52 = (uint64_t *)v131;
    result = a5;
    while (1)
    {
      v53 = *(v52 - 1);
      v54 = *v52;
      v55 = &v22[v53];
      if (v16 >= &v22[v53])
        v56 = &v22[v53];
      else
        v56 = v16;
      if (v15 > v56)
        v56 = v15;
      v57 = (*v56 << 24) | (v56[1] << 16) | (v56[2] << 8);
      if ((v54 & 0xF) != 0)
      {
        v58 = &v55[v54 >> 4];
        if (v16 < v58)
          v58 = v16;
        if (v15 > v58)
          v58 = v15;
        v59 = (*v58 << 24) | (v58[1] << 16) | (v58[2] << 8);
        if (v20)
        {
          if (v16 >= &v55[v19])
            v60 = &v55[v19];
          else
            v60 = v16;
          if (v15 > v60)
            v60 = v15;
          v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          v62 = &v55[v19 + (v54 >> 4)];
          if (v16 < v62)
            v62 = v16;
          if (v15 > v62)
            v62 = v15;
          v63 = BLEND8_19499[v20];
          v57 = v57 - ((v63 & v57) >> v20) + ((v63 & v61) >> v20);
          v59 = v59 - ((v63 & v59) >> v20) + ((((*v62 << 24) | (v62[1] << 16) | (v62[2] << 8)) & v63) >> v20);
        }
        v57 = v57
            - ((BLEND8_19499[*v52 & 0xF] & v57) >> (*v52 & 0xF))
            + ((BLEND8_19499[*v52 & 0xF] & v59) >> (*v52 & 0xF));
      }
      else if (v20)
      {
        v64 = &v55[v19];
        if (v16 < &v55[v19])
          v64 = v16;
        if (v15 > v64)
          v64 = v15;
        v57 = v57
            - ((BLEND8_19499[v20] & v57) >> v20)
            + ((((*v64 << 24) | (v64[1] << 16) | (v64[2] << 8)) & BLEND8_19499[v20]) >> v20);
      }
      v65 = *(float *)&_blt_float[HIBYTE(v57)];
      if (v8 >= 1.0)
      {
        v76 = *(float *)&_blt_float[BYTE2(v57)];
        v77 = *(float *)&_blt_float[BYTE1(v57)];
        if (v65 <= v76)
          v78 = *(float *)&_blt_float[BYTE2(v57)];
        else
          v78 = *(float *)&_blt_float[HIBYTE(v57)];
        if (v77 <= v78)
          v79 = v78;
        else
          v79 = *(float *)&_blt_float[BYTE1(v57)];
        v71 = v79 - v65;
        v72 = v79 - v76;
        v73 = v79 - v77;
        v75 = 1.0;
        v74 = 1.0 - v79;
      }
      else
      {
        v66 = v8 * v65;
        v67 = v8 * *(float *)&_blt_float[BYTE2(v57)];
        v68 = v8 * *(float *)&_blt_float[BYTE1(v57)];
        if (v66 <= v67)
          v69 = v8 * *(float *)&_blt_float[BYTE2(v57)];
        else
          v69 = v66;
        if (v68 <= v69)
          v70 = v69;
        else
          v70 = v8 * *(float *)&_blt_float[BYTE1(v57)];
        v71 = v70 - v66;
        v72 = v70 - v67;
        v73 = v70 - v68;
        v74 = v8 - v70;
        v75 = v8;
      }
      if (v7)
      {
        if (v75 < 1.0)
        {
          if (v75 > 0.0)
          {
            v80 = v6[1];
            *v6 = v71 + (float)(*v6 * (float)(1.0 - v75));
            v6[1] = v72 + (float)(v80 * (float)(1.0 - v75));
            v81 = v6[3];
            v6[2] = v73 + (float)(v6[2] * (float)(1.0 - v75));
            v6[3] = v74 + (float)(v81 * (float)(1.0 - v75));
            *v7 = v75 + (float)(*v7 * (float)(1.0 - v75));
          }
        }
        else
        {
          *v6 = v71;
          v6[1] = v72;
          v6[2] = v73;
          v6[3] = v74;
          *v7 = v75;
        }
        goto LABEL_117;
      }
      if (v75 >= 1.0)
        break;
      if (v75 > 0.0)
      {
        v82 = 1.0 - v75;
        v83 = v6[1];
        *v6 = v71 + (float)(*v6 * v82);
        v6[1] = v72 + (float)(v83 * v82);
        v73 = v73 + (float)(v6[2] * v82);
        v74 = v74 + (float)(v6[3] * v82);
        goto LABEL_116;
      }
LABEL_117:
      v52 += 2;
      v6 += 4;
      v7 = (float *)((char *)v7 + v17);
      if (!--result)
        goto LABEL_118;
    }
    *v6 = v71;
    v6[1] = v72;
LABEL_116:
    v6[2] = v73;
    v6[3] = v74;
    goto LABEL_117;
  }
  v84 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    result = (uint64_t)&v15[(v14 >> v12) * v10];
    if (v134 != 1)
    {
      v106 = v84;
      v107 = a5;
      if (a5 < 1)
        goto LABEL_178;
      while (1)
      {
        v108 = *v106;
        v106 += 2;
        v109 = (unsigned __int8 *)(result + v108);
        if ((unint64_t)v16 < result + v108)
          v109 = v16;
        if (v15 > v109)
          v109 = v15;
        v110 = v109[1];
        v111 = v109[2];
        v112 = *(float *)&_blt_float[*v109];
        if (v8 >= 1.0)
        {
          v123 = *(float *)&_blt_float[v110];
          v124 = *(float *)&_blt_float[v111];
          if (v112 <= v123)
            v125 = *(float *)&_blt_float[v110];
          else
            v125 = *(float *)&_blt_float[*v109];
          if (v124 <= v125)
            v126 = v125;
          else
            v126 = *(float *)&_blt_float[v111];
          v118 = v126 - v112;
          v119 = v126 - v123;
          v120 = v126 - v124;
          v122 = 1.0;
          v121 = 1.0 - v126;
        }
        else
        {
          v113 = v8 * v112;
          v114 = v8 * *(float *)&_blt_float[v110];
          v115 = v8 * *(float *)&_blt_float[v111];
          if (v113 <= v114)
            v116 = v8 * *(float *)&_blt_float[v110];
          else
            v116 = v113;
          if (v115 <= v116)
            v117 = v116;
          else
            v117 = v8 * *(float *)&_blt_float[v111];
          v118 = v117 - v113;
          v119 = v117 - v114;
          v120 = v117 - v115;
          v121 = v8 - v117;
          v122 = v8;
        }
        if (v7)
        {
          if (v122 < 1.0)
          {
            if (v122 > 0.0)
            {
              v127 = v6[1];
              *v6 = v118 + (float)(*v6 * (float)(1.0 - v122));
              v6[1] = v119 + (float)(v127 * (float)(1.0 - v122));
              v128 = v6[3];
              v6[2] = v120 + (float)(v6[2] * (float)(1.0 - v122));
              v6[3] = v121 + (float)(v128 * (float)(1.0 - v122));
              *v7 = v122 + (float)(*v7 * (float)(1.0 - v122));
            }
          }
          else
          {
            *v6 = v118;
            v6[1] = v119;
            v6[2] = v120;
            v6[3] = v121;
            *v7 = v122;
          }
          goto LABEL_177;
        }
        if (v122 >= 1.0)
          break;
        if (v122 > 0.0)
        {
          v129 = 1.0 - v122;
          v130 = v6[1];
          *v6 = v118 + (float)(*v6 * v129);
          v6[1] = v119 + (float)(v130 * v129);
          v120 = v120 + (float)(v6[2] * v129);
          v121 = v121 + (float)(v6[3] * v129);
          goto LABEL_176;
        }
LABEL_177:
        v6 += 4;
        v7 = (float *)((char *)v7 + v17);
        if (!--v107)
          goto LABEL_178;
      }
      *v6 = v118;
      v6[1] = v119;
LABEL_176:
      v6[2] = v120;
      v6[3] = v121;
      goto LABEL_177;
    }
    if (a5 >= 1)
    {
      v85 = v84;
      v86 = a5;
      do
      {
        v87 = *v85;
        v85 += 2;
        v88 = (unsigned __int8 *)(result + v87);
        if ((unint64_t)v16 < result + v87)
          v88 = v16;
        if (v15 > v88)
          v88 = v15;
        v89 = v88[1];
        v90 = v88[2];
        v91 = *(float *)&_blt_float[*v88];
        if (v8 >= 1.0)
        {
          v102 = *(float *)&_blt_float[v89];
          v103 = *(float *)&_blt_float[v90];
          if (v91 <= v102)
            v104 = *(float *)&_blt_float[v89];
          else
            v104 = *(float *)&_blt_float[*v88];
          if (v103 <= v104)
            v105 = v104;
          else
            v105 = *(float *)&_blt_float[v90];
          v97 = v105 - v91;
          v98 = v105 - v102;
          v99 = v105 - v103;
          v101 = 1.0;
          v100 = 1.0 - v105;
        }
        else
        {
          v92 = v8 * v91;
          v93 = v8 * *(float *)&_blt_float[v89];
          v94 = v8 * *(float *)&_blt_float[v90];
          if (v92 <= v93)
            v95 = v8 * *(float *)&_blt_float[v89];
          else
            v95 = v92;
          if (v94 <= v95)
            v96 = v95;
          else
            v96 = v8 * *(float *)&_blt_float[v90];
          v97 = v96 - v92;
          v98 = v96 - v93;
          v99 = v96 - v94;
          v100 = v8 - v96;
          v101 = v8;
        }
        *v6 = v97;
        v6[1] = v98;
        v6[2] = v99;
        v6[3] = v100;
        if (v7)
          *v7 = v101;
        v6 += 4;
        v7 = (float *)((char *)v7 + v17);
        --v86;
      }
      while (v86);
    }
LABEL_178:
    v6 += 4 * v9;
    v14 += v13;
    v7 += v135;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  char v6;
  float *v7;
  float *v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned __int8 v38;
  float v39;
  int v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned __int8 v61;
  float v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = -1;
  v7 = (float *)*((_QWORD *)a2 + 2);
  v8 = (float *)*((_QWORD *)a2 + 4);
  if (v8)
    v117 = *((_QWORD *)a2 + 5) - a5;
  else
    v117 = 0;
  v9 = *((float *)a2 + 2);
  v10 = a2[1];
  v116 = *a2;
  v115 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v13 = *((_QWORD *)a2 + 9);
  v114 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 7) + v114 * a4;
  v15 = *(unsigned int **)(result + 32);
  v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  v17 = 4 * (v8 != 0);
  if (*(_QWORD *)(result + 176))
  {
    v113 = *((_QWORD *)a2 + 13);
    v112 = *((_QWORD *)a2 + 15);
    v111 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v112 - v14) | (v14 - v113)) < 0)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v18 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v18 - 7 >= 9)
          v19 = -v12;
        else
          v19 = v12;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = (char *)v15 + (v14 >> v13) * v12;
      if (v116 == 1)
      {
        if (a5 >= 1)
        {
          result = v20;
          v22 = (uint64_t *)v111;
          v23 = a5;
          do
          {
            v24 = *(v22 - 1);
            v25 = *v22;
            v26 = &v21[v24];
            if (v16 >= (unsigned int *)&v21[v24])
              v27 = (unsigned int *)&v21[v24];
            else
              v27 = v16;
            if (v15 > v27)
              v27 = v15;
            v28 = bswap32(*v27);
            if ((v25 & 0xF) != 0)
            {
              v29 = (unsigned int *)&v26[v25 >> 4];
              if (v16 < v29)
                v29 = v16;
              if (v15 > v29)
                v29 = v15;
              v30 = bswap32(*v29);
              if (v20)
              {
                v31 = (unsigned int *)&v26[v19];
                if (v16 >= v31)
                  v32 = v31;
                else
                  v32 = v16;
                if (v15 > v32)
                  v32 = v15;
                v33 = bswap32(*v32);
                v34 = (unsigned int *)((char *)v31 + (v25 >> 4));
                if (v16 < v34)
                  v34 = v16;
                if (v15 > v34)
                  v34 = v15;
                v35 = BLEND8_19499[v20];
                v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                v30 = v30 - ((v35 & v30) >> v20) + ((bswap32(*v34) & v35) >> v20);
              }
              v28 = v28
                  - ((BLEND8_19499[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_19499[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              v36 = (unsigned int *)&v26[v19];
              if (v16 < (unsigned int *)&v26[v19])
                v36 = v16;
              if (v15 > v36)
                v36 = v15;
              v28 = v28 - ((BLEND8_19499[v20] & v28) >> v20) + ((bswap32(*v36) & BLEND8_19499[v20]) >> v20);
            }
            v37 = __ROL4__(v28, v10);
            v38 = v37 | v6;
            v39 = *(float *)&_blt_float[HIBYTE(v37)];
            v40 = BYTE2(v37);
            v41 = BYTE1(v37);
            if (v9 >= 1.0)
            {
              v42 = *(float *)&_blt_float[v40];
              v43 = *(float *)&_blt_float[v41];
              v44 = *(float *)&_blt_float[v38];
            }
            else
            {
              v39 = v9 * v39;
              v42 = v9 * *(float *)&_blt_float[v40];
              v43 = v9 * *(float *)&_blt_float[v41];
              v44 = v9 * *(float *)&_blt_float[v38];
            }
            if (v39 <= v42)
              v45 = v42;
            else
              v45 = v39;
            if (v43 > v45)
              v45 = v43;
            *v7 = v45 - v39;
            v7[1] = v45 - v42;
            v7[2] = v45 - v43;
            v7[3] = v44 - v45;
            if (v8)
              *v8 = v44;
            v22 += 2;
            v7 += 4;
            v8 = (float *)((char *)v8 + v17);
            --v23;
          }
          while (v23);
        }
        goto LABEL_108;
      }
      if (a5 >= 1)
        break;
LABEL_108:
      v7 += 4 * v115;
      v14 += v114;
      v8 += v117;
      if (!--a6)
        return result;
    }
    v46 = (uint64_t *)v111;
    result = a5;
    while (1)
    {
      v47 = *(v46 - 1);
      v48 = *v46;
      v49 = &v21[v47];
      if (v16 >= (unsigned int *)&v21[v47])
        v50 = (unsigned int *)&v21[v47];
      else
        v50 = v16;
      if (v15 > v50)
        v50 = v15;
      v51 = bswap32(*v50);
      if ((v48 & 0xF) != 0)
      {
        v52 = (unsigned int *)&v49[v48 >> 4];
        if (v16 < v52)
          v52 = v16;
        if (v15 > v52)
          v52 = v15;
        v53 = bswap32(*v52);
        if (v20)
        {
          v54 = (unsigned int *)&v49[v19];
          if (v16 >= v54)
            v55 = v54;
          else
            v55 = v16;
          if (v15 > v55)
            v55 = v15;
          v56 = bswap32(*v55);
          v57 = (unsigned int *)((char *)v54 + (v48 >> 4));
          if (v16 < v57)
            v57 = v16;
          if (v15 > v57)
            v57 = v15;
          v58 = BLEND8_19499[v20];
          v51 = v51 - ((v58 & v51) >> v20) + ((v58 & v56) >> v20);
          v53 = v53 - ((v58 & v53) >> v20) + ((bswap32(*v57) & v58) >> v20);
        }
        v51 = v51
            - ((BLEND8_19499[*v46 & 0xF] & v51) >> (*v46 & 0xF))
            + ((BLEND8_19499[*v46 & 0xF] & v53) >> (*v46 & 0xF));
      }
      else if (v20)
      {
        v59 = (unsigned int *)&v49[v19];
        if (v16 < (unsigned int *)&v49[v19])
          v59 = v16;
        if (v15 > v59)
          v59 = v15;
        v51 = v51 - ((BLEND8_19499[v20] & v51) >> v20) + ((bswap32(*v59) & BLEND8_19499[v20]) >> v20);
      }
      v60 = __ROL4__(v51, v10);
      v61 = v60 | v6;
      v62 = *(float *)&_blt_float[HIBYTE(v60)];
      v63 = BYTE2(v60);
      v64 = BYTE1(v60);
      if (v9 >= 1.0)
      {
        v65 = *(float *)&_blt_float[v63];
        v66 = *(float *)&_blt_float[v64];
        v67 = *(float *)&_blt_float[v61];
      }
      else
      {
        v62 = v9 * v62;
        v65 = v9 * *(float *)&_blt_float[v63];
        v66 = v9 * *(float *)&_blt_float[v64];
        v67 = v9 * *(float *)&_blt_float[v61];
      }
      if (v62 <= v65)
        v68 = v65;
      else
        v68 = v62;
      if (v66 <= v68)
        v69 = v68;
      else
        v69 = v66;
      v70 = v69 - v62;
      v71 = v69 - v65;
      v72 = v69 - v66;
      v73 = v67 - v69;
      if (!v8)
      {
        if (v67 < 1.0)
        {
          if (v67 > 0.0)
          {
            v76 = 1.0 - v67;
            v77 = v7[1];
            *v7 = v70 + (float)(*v7 * v76);
            v7[1] = v71 + (float)(v77 * v76);
            v78 = v72 + (float)(v7[2] * v76);
            v79 = v73 + (float)(v7[3] * v76);
            v7[2] = v78;
            v7[3] = v79;
          }
        }
        else
        {
          *v7 = v70;
          v7[1] = v71;
          v7[2] = v72;
          v7[3] = v73;
        }
        goto LABEL_107;
      }
      if (v67 >= 1.0)
        break;
      if (v67 > 0.0)
      {
        v74 = v7[1];
        *v7 = v70 + (float)(*v7 * (float)(1.0 - v67));
        v7[1] = v71 + (float)(v74 * (float)(1.0 - v67));
        v75 = v7[3];
        v7[2] = v72 + (float)(v7[2] * (float)(1.0 - v67));
        v7[3] = v73 + (float)(v75 * (float)(1.0 - v67));
        v67 = v67 + (float)(*v8 * (float)(1.0 - v67));
        goto LABEL_106;
      }
LABEL_107:
      v46 += 2;
      v7 += 4;
      v8 = (float *)((char *)v8 + v17);
      if (!--result)
        goto LABEL_108;
    }
    *v7 = v70;
    v7[1] = v71;
    v7[2] = v72;
    v7[3] = v73;
LABEL_106:
    *v8 = v67;
    goto LABEL_107;
  }
  v80 = v11 + 16 * a3;
  do
  {
    v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v116 != 1)
    {
      result = v80;
      v91 = a5;
      if (a5 < 1)
        goto LABEL_155;
      while (1)
      {
        v92 = *(_QWORD *)result;
        result += 16;
        v93 = (unsigned int *)&v81[v92];
        if (v16 < (unsigned int *)&v81[v92])
          v93 = v16;
        if (v15 > v93)
          v93 = v15;
        v94 = __ROL4__(bswap32(*v93), v10);
        v95 = *(float *)&_blt_float[HIBYTE(v94)];
        if (v9 >= 1.0)
        {
          v96 = *(float *)&_blt_float[BYTE2(v94)];
          v97 = *(float *)&_blt_float[BYTE1(v94)];
          v98 = *(float *)&_blt_float[(v94 | v6)];
        }
        else
        {
          v95 = v9 * v95;
          v96 = v9 * *(float *)&_blt_float[BYTE2(v94)];
          v97 = v9 * *(float *)&_blt_float[BYTE1(v94)];
          v98 = v9 * *(float *)&_blt_float[(v94 | v6)];
        }
        if (v95 <= v96)
          v99 = v96;
        else
          v99 = v95;
        if (v97 <= v99)
          v100 = v99;
        else
          v100 = v97;
        v101 = v100 - v95;
        v102 = v100 - v96;
        v103 = v100 - v97;
        v104 = v98 - v100;
        if (!v8)
        {
          if (v98 < 1.0)
          {
            if (v98 > 0.0)
            {
              v107 = 1.0 - v98;
              v108 = v7[1];
              *v7 = v101 + (float)(*v7 * v107);
              v7[1] = v102 + (float)(v108 * v107);
              v109 = v103 + (float)(v7[2] * v107);
              v110 = v104 + (float)(v7[3] * v107);
              v7[2] = v109;
              v7[3] = v110;
            }
          }
          else
          {
            *v7 = v101;
            v7[1] = v102;
            v7[2] = v103;
            v7[3] = v104;
          }
          goto LABEL_154;
        }
        if (v98 >= 1.0)
          break;
        if (v98 > 0.0)
        {
          v105 = v7[1];
          *v7 = v101 + (float)(*v7 * (float)(1.0 - v98));
          v7[1] = v102 + (float)(v105 * (float)(1.0 - v98));
          v106 = v7[3];
          v7[2] = v103 + (float)(v7[2] * (float)(1.0 - v98));
          v7[3] = v104 + (float)(v106 * (float)(1.0 - v98));
          v98 = v98 + (float)(*v8 * (float)(1.0 - v98));
          goto LABEL_153;
        }
LABEL_154:
        v7 += 4;
        v8 = (float *)((char *)v8 + v17);
        if (!--v91)
          goto LABEL_155;
      }
      *v7 = v101;
      v7[1] = v102;
      v7[2] = v103;
      v7[3] = v104;
LABEL_153:
      *v8 = v98;
      goto LABEL_154;
    }
    if (a5 >= 1)
    {
      result = v80;
      v82 = a5;
      do
      {
        v83 = *(_QWORD *)result;
        result += 16;
        v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83])
          v84 = v16;
        if (v15 > v84)
          v84 = v15;
        v85 = __ROL4__(bswap32(*v84), v10);
        v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          v87 = *(float *)&_blt_float[BYTE2(v85)];
          v88 = *(float *)&_blt_float[BYTE1(v85)];
          v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          v86 = v9 * v86;
          v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87)
          v90 = v87;
        else
          v90 = v86;
        if (v88 > v90)
          v90 = v88;
        *v7 = v90 - v86;
        v7[1] = v90 - v87;
        v7[2] = v90 - v88;
        v7[3] = v89 - v90;
        if (v8)
          *v8 = v89;
        v7 += 4;
        v8 = (float *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_155:
    v7 += 4 * v115;
    v14 += v114;
    v8 += v117;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKf_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  char v6;
  float *v7;
  float *v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned __int8 v38;
  float v39;
  int v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned __int8 v61;
  float v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = -1;
  v7 = (float *)*((_QWORD *)a2 + 2);
  v8 = (float *)*((_QWORD *)a2 + 4);
  if (v8)
    v117 = *((_QWORD *)a2 + 5) - a5;
  else
    v117 = 0;
  v9 = *((float *)a2 + 2);
  v10 = a2[1];
  v116 = *a2;
  v115 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v13 = *((_QWORD *)a2 + 9);
  v114 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 7) + v114 * a4;
  v15 = *(unsigned int **)(result + 32);
  v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  v17 = 4 * (v8 != 0);
  if (*(_QWORD *)(result + 176))
  {
    v113 = *((_QWORD *)a2 + 13);
    v112 = *((_QWORD *)a2 + 15);
    v111 = v11 + 16 * a3 + 8;
    while (1)
    {
      if (((v112 - v14) | (v14 - v113)) < 0)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v18 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v18 - 7 >= 9)
          v19 = -v12;
        else
          v19 = v12;
        v20 = weights_19497[v18] & 0xF;
      }
      v21 = (char *)v15 + (v14 >> v13) * v12;
      if (v116 == 1)
      {
        if (a5 >= 1)
        {
          result = v20;
          v22 = (uint64_t *)v111;
          v23 = a5;
          do
          {
            v24 = *(v22 - 1);
            v25 = *v22;
            v26 = &v21[v24];
            if (v16 >= (unsigned int *)&v21[v24])
              v27 = (unsigned int *)&v21[v24];
            else
              v27 = v16;
            if (v15 > v27)
              v27 = v15;
            v28 = *v27;
            if ((v25 & 0xF) != 0)
            {
              v29 = (unsigned int *)&v26[v25 >> 4];
              if (v16 < v29)
                v29 = v16;
              if (v15 > v29)
                v29 = v15;
              v30 = *v29;
              if (v20)
              {
                v31 = (unsigned int *)&v26[v19];
                if (v16 >= v31)
                  v32 = v31;
                else
                  v32 = v16;
                if (v15 > v32)
                  v32 = v15;
                v33 = *v32;
                v34 = (unsigned int *)((char *)v31 + (v25 >> 4));
                if (v16 < v34)
                  v34 = v16;
                if (v15 > v34)
                  v34 = v15;
                v35 = BLEND8_19499[v20];
                v28 = v28 - ((v35 & v28) >> v20) + ((v35 & v33) >> v20);
                v30 = v30 - ((v35 & v30) >> v20) + ((v35 & *v34) >> v20);
              }
              v28 = v28
                  - ((BLEND8_19499[*v22 & 0xF] & v28) >> (*v22 & 0xF))
                  + ((BLEND8_19499[*v22 & 0xF] & v30) >> (*v22 & 0xF));
            }
            else if (v20)
            {
              v36 = (unsigned int *)&v26[v19];
              if (v16 < (unsigned int *)&v26[v19])
                v36 = v16;
              if (v15 > v36)
                v36 = v15;
              v28 = v28 - ((BLEND8_19499[v20] & v28) >> v20) + ((BLEND8_19499[v20] & *v36) >> v20);
            }
            v37 = __ROL4__(v28, v10);
            v38 = v37 | v6;
            v39 = *(float *)&_blt_float[HIBYTE(v37)];
            v40 = BYTE2(v37);
            v41 = BYTE1(v37);
            if (v9 >= 1.0)
            {
              v42 = *(float *)&_blt_float[v40];
              v43 = *(float *)&_blt_float[v41];
              v44 = *(float *)&_blt_float[v38];
            }
            else
            {
              v39 = v9 * v39;
              v42 = v9 * *(float *)&_blt_float[v40];
              v43 = v9 * *(float *)&_blt_float[v41];
              v44 = v9 * *(float *)&_blt_float[v38];
            }
            if (v39 <= v42)
              v45 = v42;
            else
              v45 = v39;
            if (v43 > v45)
              v45 = v43;
            *v7 = v45 - v39;
            v7[1] = v45 - v42;
            v7[2] = v45 - v43;
            v7[3] = v44 - v45;
            if (v8)
              *v8 = v44;
            v22 += 2;
            v7 += 4;
            v8 = (float *)((char *)v8 + v17);
            --v23;
          }
          while (v23);
        }
        goto LABEL_108;
      }
      if (a5 >= 1)
        break;
LABEL_108:
      v7 += 4 * v115;
      v14 += v114;
      v8 += v117;
      if (!--a6)
        return result;
    }
    v46 = (uint64_t *)v111;
    result = a5;
    while (1)
    {
      v47 = *(v46 - 1);
      v48 = *v46;
      v49 = &v21[v47];
      if (v16 >= (unsigned int *)&v21[v47])
        v50 = (unsigned int *)&v21[v47];
      else
        v50 = v16;
      if (v15 > v50)
        v50 = v15;
      v51 = *v50;
      if ((v48 & 0xF) != 0)
      {
        v52 = (unsigned int *)&v49[v48 >> 4];
        if (v16 < v52)
          v52 = v16;
        if (v15 > v52)
          v52 = v15;
        v53 = *v52;
        if (v20)
        {
          v54 = (unsigned int *)&v49[v19];
          if (v16 >= v54)
            v55 = v54;
          else
            v55 = v16;
          if (v15 > v55)
            v55 = v15;
          v56 = *v55;
          v57 = (unsigned int *)((char *)v54 + (v48 >> 4));
          if (v16 < v57)
            v57 = v16;
          if (v15 > v57)
            v57 = v15;
          v58 = BLEND8_19499[v20];
          v51 = v51 - ((v58 & v51) >> v20) + ((v58 & v56) >> v20);
          v53 = v53 - ((v58 & v53) >> v20) + ((v58 & *v57) >> v20);
        }
        v51 = v51
            - ((BLEND8_19499[*v46 & 0xF] & v51) >> (*v46 & 0xF))
            + ((BLEND8_19499[*v46 & 0xF] & v53) >> (*v46 & 0xF));
      }
      else if (v20)
      {
        v59 = (unsigned int *)&v49[v19];
        if (v16 < (unsigned int *)&v49[v19])
          v59 = v16;
        if (v15 > v59)
          v59 = v15;
        v51 = v51 - ((BLEND8_19499[v20] & v51) >> v20) + ((BLEND8_19499[v20] & *v59) >> v20);
      }
      v60 = __ROL4__(v51, v10);
      v61 = v60 | v6;
      v62 = *(float *)&_blt_float[HIBYTE(v60)];
      v63 = BYTE2(v60);
      v64 = BYTE1(v60);
      if (v9 >= 1.0)
      {
        v65 = *(float *)&_blt_float[v63];
        v66 = *(float *)&_blt_float[v64];
        v67 = *(float *)&_blt_float[v61];
      }
      else
      {
        v62 = v9 * v62;
        v65 = v9 * *(float *)&_blt_float[v63];
        v66 = v9 * *(float *)&_blt_float[v64];
        v67 = v9 * *(float *)&_blt_float[v61];
      }
      if (v62 <= v65)
        v68 = v65;
      else
        v68 = v62;
      if (v66 <= v68)
        v69 = v68;
      else
        v69 = v66;
      v70 = v69 - v62;
      v71 = v69 - v65;
      v72 = v69 - v66;
      v73 = v67 - v69;
      if (!v8)
      {
        if (v67 < 1.0)
        {
          if (v67 > 0.0)
          {
            v76 = 1.0 - v67;
            v77 = v7[1];
            *v7 = v70 + (float)(*v7 * v76);
            v7[1] = v71 + (float)(v77 * v76);
            v78 = v72 + (float)(v7[2] * v76);
            v79 = v73 + (float)(v7[3] * v76);
            v7[2] = v78;
            v7[3] = v79;
          }
        }
        else
        {
          *v7 = v70;
          v7[1] = v71;
          v7[2] = v72;
          v7[3] = v73;
        }
        goto LABEL_107;
      }
      if (v67 >= 1.0)
        break;
      if (v67 > 0.0)
      {
        v74 = v7[1];
        *v7 = v70 + (float)(*v7 * (float)(1.0 - v67));
        v7[1] = v71 + (float)(v74 * (float)(1.0 - v67));
        v75 = v7[3];
        v7[2] = v72 + (float)(v7[2] * (float)(1.0 - v67));
        v7[3] = v73 + (float)(v75 * (float)(1.0 - v67));
        v67 = v67 + (float)(*v8 * (float)(1.0 - v67));
        goto LABEL_106;
      }
LABEL_107:
      v46 += 2;
      v7 += 4;
      v8 = (float *)((char *)v8 + v17);
      if (!--result)
        goto LABEL_108;
    }
    *v7 = v70;
    v7[1] = v71;
    v7[2] = v72;
    v7[3] = v73;
LABEL_106:
    *v8 = v67;
    goto LABEL_107;
  }
  v80 = v11 + 16 * a3;
  do
  {
    v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v116 != 1)
    {
      result = v80;
      v91 = a5;
      if (a5 < 1)
        goto LABEL_155;
      while (1)
      {
        v92 = *(_QWORD *)result;
        result += 16;
        v93 = (unsigned int *)&v81[v92];
        if (v16 < (unsigned int *)&v81[v92])
          v93 = v16;
        if (v15 > v93)
          v93 = v15;
        v94 = __ROL4__(*v93, v10);
        v95 = *(float *)&_blt_float[HIBYTE(v94)];
        if (v9 >= 1.0)
        {
          v96 = *(float *)&_blt_float[BYTE2(v94)];
          v97 = *(float *)&_blt_float[BYTE1(v94)];
          v98 = *(float *)&_blt_float[(v94 | v6)];
        }
        else
        {
          v95 = v9 * v95;
          v96 = v9 * *(float *)&_blt_float[BYTE2(v94)];
          v97 = v9 * *(float *)&_blt_float[BYTE1(v94)];
          v98 = v9 * *(float *)&_blt_float[(v94 | v6)];
        }
        if (v95 <= v96)
          v99 = v96;
        else
          v99 = v95;
        if (v97 <= v99)
          v100 = v99;
        else
          v100 = v97;
        v101 = v100 - v95;
        v102 = v100 - v96;
        v103 = v100 - v97;
        v104 = v98 - v100;
        if (!v8)
        {
          if (v98 < 1.0)
          {
            if (v98 > 0.0)
            {
              v107 = 1.0 - v98;
              v108 = v7[1];
              *v7 = v101 + (float)(*v7 * v107);
              v7[1] = v102 + (float)(v108 * v107);
              v109 = v103 + (float)(v7[2] * v107);
              v110 = v104 + (float)(v7[3] * v107);
              v7[2] = v109;
              v7[3] = v110;
            }
          }
          else
          {
            *v7 = v101;
            v7[1] = v102;
            v7[2] = v103;
            v7[3] = v104;
          }
          goto LABEL_154;
        }
        if (v98 >= 1.0)
          break;
        if (v98 > 0.0)
        {
          v105 = v7[1];
          *v7 = v101 + (float)(*v7 * (float)(1.0 - v98));
          v7[1] = v102 + (float)(v105 * (float)(1.0 - v98));
          v106 = v7[3];
          v7[2] = v103 + (float)(v7[2] * (float)(1.0 - v98));
          v7[3] = v104 + (float)(v106 * (float)(1.0 - v98));
          v98 = v98 + (float)(*v8 * (float)(1.0 - v98));
          goto LABEL_153;
        }
LABEL_154:
        v7 += 4;
        v8 = (float *)((char *)v8 + v17);
        if (!--v91)
          goto LABEL_155;
      }
      *v7 = v101;
      v7[1] = v102;
      v7[2] = v103;
      v7[3] = v104;
LABEL_153:
      *v8 = v98;
      goto LABEL_154;
    }
    if (a5 >= 1)
    {
      result = v80;
      v82 = a5;
      do
      {
        v83 = *(_QWORD *)result;
        result += 16;
        v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83])
          v84 = v16;
        if (v15 > v84)
          v84 = v15;
        v85 = __ROL4__(*v84, v10);
        v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          v87 = *(float *)&_blt_float[BYTE2(v85)];
          v88 = *(float *)&_blt_float[BYTE1(v85)];
          v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          v86 = v9 * v86;
          v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87)
          v90 = v87;
        else
          v90 = v86;
        if (v88 > v90)
          v90 = v88;
        *v7 = v90 - v86;
        v7[1] = v90 - v87;
        v7[2] = v90 - v88;
        v7[3] = v89 - v90;
        if (v8)
          *v8 = v89;
        v7 += 4;
        v8 = (float *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_155:
    v7 += 4 * v115;
    v14 += v114;
    v8 += v117;
    --a6;
  }
  while (a6);
  return result;
}

void CMYKf_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float32x4_t *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  _BYTE *v63;
  int v64;
  float32x4_t *v65;
  int v66;
  float v67;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  float *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  int v84;
  unsigned __int8 *v85;
  unsigned int v86;
  float v87;
  float v88;
  unsigned int v89;
  unsigned __int8 v90;
  uint64_t v91;
  float *f32;
  _BYTE *v93;
  float *v94;
  float32x4_t *v95;
  uint64_t v96;
  unsigned int v97;
  float v98;
  float v99;
  unsigned __int8 v100;
  uint64_t v101;
  _BYTE *v102;
  float *v103;
  float32x4_t *v104;
  unsigned int v105;
  float v106;
  float v107;
  float v108;
  float *v109;
  int v110;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float *v117;
  int v118;
  unsigned int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float *v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  float v129;
  float v130;
  float v131;
  float *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  float *v142;
  int v143;
  unsigned int v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  unsigned int v151;
  float32x4_t v152;
  uint64_t v153;
  float *v154;
  int v155;
  unsigned int v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  unsigned int v163;
  float32x4_t v164;
  float *v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float *v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  float *v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  uint64_t v199;
  float *v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  float v204;
  float v205;
  float32x4_t v206;
  float32x4_t v207;
  float *v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  float v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int8x16_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float *v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  float v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v232;
  float *v233;
  int v234;
  unsigned __int8 *v235;
  unsigned int v236;
  unsigned int v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float *v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  float v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  float32x4_t v255;
  float *v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  float v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  float32x4_t v269;
  float *v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float *v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float *v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  float v290;
  float v291;
  float v292;
  float *v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float *v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  float v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  int8x16_t v314;
  float *v315;
  int v316;
  unsigned int v317;
  unsigned int v318;
  float v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float *v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float *v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float *v344;
  unsigned __int8 *v345;
  unsigned int v346;
  unsigned int v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float *v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  float v359;
  float v360;
  float v361;
  float v362;
  unsigned __int8 *v363;
  float32x4_t *v364;
  int v365;
  unsigned int v366;
  float32x4_t v367;
  unsigned __int8 v368;
  unsigned __int8 *v369;
  float32x4_t *v370;
  int v371;
  unsigned int v372;
  float v373;
  float v374;
  float32x4_t v375;
  float v376;
  float v377;
  float32x4_t v378;
  unsigned __int8 v379;
  float *v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  float v384;
  int v386;
  unsigned __int8 *v387;
  unsigned int v388;
  unsigned int v389;
  float *v390;
  unsigned __int8 *v391;
  int v392;
  float v393;
  float v394;
  unsigned __int8 v395;
  unsigned __int8 *v396;
  int v397;
  float v398;
  float v399;
  float v400;
  unsigned __int8 v401;
  float32x4_t v402;
  unsigned __int8 v403;
  float32x4_t *v404;
  float v405;
  float v406;
  float32x4_t v407;
  float v408;
  float v409;
  float32x4_t v410;
  unsigned __int8 v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  __n128 v429;
  uint64_t v430;
  int *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  float32x4_t v436;
  float v437;
  uint64_t v438;

  v425 = a3;
  v438 = *MEMORY[0x1E0C80C00];
  v423 = *(unsigned int *)(a1 + 4);
  v422 = (int)v423;
  v4 = ((int)v423 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    v6 = *(int *)(a1 + 28);
    v7 = *(_QWORD *)(a1 + 48);
    v435 = *(_QWORD *)(a1 + 40);
    a4.n128_u32[0] = *(_DWORD *)(a2 + 184);
    v429 = a4;
    v8 = *(int **)(a1 + 136);
    v9 = *(_QWORD *)(a2 + 104);
    v426 = *(_QWORD *)(a2 + 96);
    v11 = *(int *)(a1 + 12);
    v10 = *(int *)(a1 + 16);
    v432 = *(_DWORD *)(a1 + 8);
    v424 = (_QWORD *)a2;
    v12 = *(int *)(a2 + 16);
    v13 = (v12 + 22) * v4;
    if (v13 > 65439)
    {
      v15 = (char *)malloc_type_calloc(1uLL, v13 + 96, 0xB050C286uLL);
      v17 = v15;
      v18 = v424;
      if (!v15)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v15 = (char *)&v417 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      v17 = 0;
      v18 = v424;
    }
    v419 = v17;
    v433 = v9;
    v19 = v6 >> 4;
    v20 = (unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    v21 = v20 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    if ((_DWORD)v12)
      v22 = 20 * v4;
    else
      v22 = 0;
    v23 = v21 + v22;
    v18[18] = v20;
    v18[19] = v21 + v22;
    v18[20] = v21;
    if (v7)
    {
      v24 = (unint64_t)*(int *)(a1 + 32) >> 2;
      v25 = (float *)(v7 + 4 * (v11 + v24 * v10));
      v26 = v422;
      v430 = v24 - v422;
      v27 = 1;
    }
    else
    {
      v25 = 0;
      v430 = 0;
      v27 = 0;
      v26 = v422;
    }
    v28 = (float32x4_t *)(v435 + 16 * (v11 + v19 * v10));
    v428 = v19 - v26;
    v29 = *(int *)(a1 + 104);
    v30 = *(_DWORD *)(a1 + 108);
    v31 = *(unsigned __int8 *)(a1 + 2);
    if (v31 == 6 || v31 == 1)
    {
      v32 = v425;
      v33 = v424;
      v34 = v426;
      v35 = v433;
      if (v8)
      {
        v418 = v19;
        LODWORD(v435) = 0;
        v36 = *(int *)(a1 + 124);
        v37 = (unsigned __int8 *)v8 + v29 + (int)v36 * (uint64_t)v30;
        v8 = 0;
        v26 = v422;
        v427 = v36 - v422;
        v38 = v423;
        goto LABEL_21;
      }
      goto LABEL_554;
    }
    v418 = v19;
    if (v8)
    {
      v434 = v27;
      shape_enum_clip_alloc(v27, v16, v8, 1, 1, 1, v29, v30, v423, v432);
      if (v39)
      {
        v8 = v39;
        LODWORD(v435) = 0;
        v40 = (int)((v12 * v4 + 15) & 0xFFFFFFF0);
        if (!(_DWORD)v12)
          v40 = 20 * v4;
        v41 = v422;
        v427 = -v422;
        v37 = (unsigned __int8 *)(v23 + v40 + 16);
        v32 = v425;
        v38 = v423;
        v33 = v424;
        v35 = v433;
        goto LABEL_557;
      }
LABEL_554:
      if (v419)
        free(v419);
      return;
    }
    v427 = 0;
    v37 = 0;
    LODWORD(v435) = 0;
    v32 = v425;
    v38 = v423;
    v33 = v424;
    v34 = v426;
    v35 = v433;
LABEL_21:
    v421 = (v38 - 1) + 1;
    v420 = -v26;
    v42 = 4 * v27;
    v43 = v8;
    v434 = v27;
LABEL_22:
    v431 = v43;
    v44 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v33;
    v433 = v35;
    v44(v33, v34, v35, v38);
    v59 = (float32x4_t *)v33[20];
    v60 = (unsigned __int8 *)v33[18];
    v61 = *((_DWORD *)v33 + 2);
    if (v61 == *((_DWORD *)v33 + 3))
    {
      v53 = (float32x4_t)v429;
      if (v429.n128_f32[0] >= 1.0)
      {
        v64 = v434;
      }
      else
      {
        v62 = v38;
        v63 = (_BYTE *)v33[18];
        v64 = v434;
        do
        {
          if (*v63)
          {
            v52 = vmulq_n_f32(*v59, v53.f32[0]);
            *v59 = v52;
            v59[1].f32[0] = v53.f32[0] * v59[1].f32[0];
          }
          ++v63;
          v59 = (float32x4_t *)((char *)v59 + 20);
          --v62;
        }
        while (v62);
        v59 = (float32x4_t *)((char *)v59 + 20 * v420);
        v60 += v421 + v420;
      }
    }
    else
    {
      v65 = (float32x4_t *)v33[19];
      v66 = HIWORD(v61) & 0x3F;
      v67 = v429.n128_f32[0];
      if (v66 == 16)
      {
        v64 = v434;
        v72 = 0;
        v73 = &v65->u16[4];
        v74 = &v59->f32[2];
        if (v429.n128_f32[0] >= 1.0)
        {
          do
          {
            if (v60[v72])
            {
              v77 = *v73;
              v78 = *((_QWORD *)v73 - 1);
              *(v74 - 2) = *(float *)&_blt_float[v78 + 256] + *(float *)&_blt_float[BYTE1(v78) + 512];
              *(v74 - 1) = *(float *)&_blt_float[BYTE2(v78) + 256] + *(float *)&_blt_float[BYTE3(v78) | 0x200];
              *v74 = *(float *)&_blt_float[BYTE4(v78) + 256] + *(float *)&_blt_float[BYTE5(v78) + 512];
              v74[1] = *(float *)&_blt_float[BYTE6(v78) + 256] + *(float *)&_blt_float[HIBYTE(v78) + 512];
              v74[2] = *(float *)&_blt_float[v77 + 256]
                     + *(float *)((char *)&_blt_float[512] + ((v77 >> 6) & 0x3FC));
            }
            v73 += 8;
            ++v72;
            v74 += 5;
          }
          while ((_DWORD)v38 != (_DWORD)v72);
        }
        else
        {
          do
          {
            if (v60[v72])
            {
              v75 = *v73;
              v76 = *((_QWORD *)v73 - 1);
              *(v74 - 2) = v67
                         * (float)(*(float *)&_blt_float[v76 + 256]
                                 + *(float *)&_blt_float[BYTE1(v76) + 512]);
              *(v74 - 1) = v67
                         * (float)(*(float *)&_blt_float[BYTE2(v76) + 256] + *(float *)&_blt_float[BYTE3(v76) | 0x200]);
              *v74 = v67 * (float)(*(float *)&_blt_float[BYTE4(v76) + 256] + *(float *)&_blt_float[BYTE5(v76) + 512]);
              v74[1] = v67 * (float)(*(float *)&_blt_float[BYTE6(v76) + 256] + *(float *)&_blt_float[HIBYTE(v76) + 512]);
              v74[2] = v67
                     * (float)(*(float *)&_blt_float[v75 + 256]
                             + *(float *)((char *)&_blt_float[512] + ((v75 >> 6) & 0x3FC)));
            }
            v73 += 8;
            ++v72;
            v74 += 5;
          }
          while ((_DWORD)v38 != (_DWORD)v72);
        }
      }
      else
      {
        _ZF = v66 == 32;
        v64 = v434;
        v69 = 0;
        if (_ZF)
        {
          v70 = v65 + 1;
          v71 = v59 + 1;
          if (v429.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v60[v69])
              {
                v52 = v70[-1];
                v71[-1] = v52;
                v71->i32[0] = v70->i32[0];
              }
              v70 = (float32x4_t *)((char *)v70 + 20);
              ++v69;
              v71 = (float32x4_t *)((char *)v71 + 20);
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
          else
          {
            do
            {
              if (v60[v69])
              {
                v52 = vmulq_n_f32(v70[-1], v67);
                v71[-1] = v52;
                v71->f32[0] = v67 * v70->f32[0];
              }
              v70 = (float32x4_t *)((char *)v70 + 20);
              ++v69;
              v71 = (float32x4_t *)((char *)v71 + 20);
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
        }
        else
        {
          v79 = &v59->f32[2];
          if (v429.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v60[v69])
              {
                v81 = v65->i64[v69];
                *(v79 - 2) = *(float *)&_blt_float[BYTE3(v81)];
                *(v79 - 1) = *(float *)&_blt_float[BYTE2(v81)];
                *v79 = *(float *)&_blt_float[BYTE1(v81)];
                v79[1] = *(float *)&_blt_float[v81];
                v79[2] = *(float *)&_blt_float[BYTE4(v81)];
              }
              ++v69;
              v79 += 5;
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
          else
          {
            do
            {
              if (v60[v69])
              {
                v80 = v65->i64[v69];
                *(v79 - 2) = v67 * *(float *)&_blt_float[BYTE3(v80)];
                *(v79 - 1) = v67 * *(float *)&_blt_float[BYTE2(v80)];
                *v79 = v67 * *(float *)&_blt_float[BYTE1(v80)];
                v79[1] = v67 * *(float *)&_blt_float[v80];
                v79[2] = v67 * *(float *)&_blt_float[BYTE4(v80)];
              }
              ++v69;
              v79 += 5;
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
        }
      }
    }
    v82 = &xmmword_185005000;
    switch(v32)
    {
      case 0:
        v83 = v37 != 0;
        v84 = v38;
        v85 = v37;
        if (v64)
        {
          do
          {
            v86 = *v60;
            if (*v60)
            {
              if (v37)
                v86 = (*v85 * v86 + ((*v85 * v86) >> 8) + 1) >> 8;
              if ((_BYTE)v86)
              {
                if (v86 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                  v87 = 0.0;
                }
                else
                {
                  v88 = (float)((float)v86 * -0.0039216) + 1.0;
                  *v28 = vmulq_n_f32(*v28, v88);
                  v87 = v88 * *v25;
                }
                *v25 = v87;
              }
            }
            ++v60;
            v85 += v83;
            ++v28;
            ++v25;
            --v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            v89 = *v60;
            if (*v60)
            {
              if (v37)
                v89 = (*v85 * v89 + ((*v85 * v89) >> 8) + 1) >> 8;
              if ((_BYTE)v89)
              {
                if (v89 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                }
                else
                {
                  *v28 = vmulq_n_f32(*v28, (float)((float)v89 * -0.0039216) + 1.0);
                }
              }
            }
            ++v60;
            v85 += v83;
            ++v28;
            --v84;
          }
          while (v84);
        }
        goto LABEL_491;
      case 1:
        v90 = *v60;
        if (v64)
        {
          if (v37)
          {
            v91 = 0;
            f32 = v59[1].f32;
            v93 = v60 + 1;
            v94 = v25 - 1;
            v95 = v28 - 1;
            v96 = v433;
            do
            {
              if (v90)
              {
                v97 = ((unsigned __int16)(v37[v91] * v90 + ((v37[v91] * v90) >> 8) + 1) >> 8);
                if (v97)
                {
                  if (v97 == 255)
                  {
                    v28[v91] = *(float32x4_t *)(f32 - 4);
                    v98 = *f32;
                  }
                  else
                  {
                    v99 = (float)v97 * 0.0039216;
                    v28[v91] = vmlaq_n_f32(vmulq_n_f32(v28[v91], 1.0 - v99), *(float32x4_t *)(f32 - 4), v99);
                    v98 = (float)((float)(1.0 - v99) * v25[v91]) + (float)(*f32 * v99);
                  }
                  v25[v91] = v98;
                }
              }
              v90 = v93[v91++];
              f32 += 5;
              ++v94;
              ++v95;
            }
            while ((_DWORD)v38 != (_DWORD)v91);
            v37 += v91 + v427;
          }
          else
          {
            v390 = v59[1].f32;
            v391 = v60 + 1;
            v94 = v25 - 1;
            v95 = v28 - 1;
            v392 = v38;
            v96 = v433;
            do
            {
              if (v90)
              {
                if (v90 == 255)
                {
                  v95[1] = *(float32x4_t *)(v390 - 4);
                  v393 = *v390;
                }
                else
                {
                  v394 = (float)v90 * 0.0039216;
                  v95[1] = vmlaq_n_f32(vmulq_n_f32(v95[1], 1.0 - v394), *(float32x4_t *)(v390 - 4), v394);
                  v393 = (float)((float)(1.0 - v394) * v94[1]) + (float)(*v390 * v394);
                }
                v94[1] = v393;
              }
              v395 = *v391++;
              v90 = v395;
              v390 += 5;
              ++v94;
              ++v95;
              --v392;
            }
            while (v392);
            v37 = 0;
          }
          v28 = &v95[v428 + 1];
          v25 = &v94[v430 + 1];
          goto LABEL_494;
        }
        v363 = v60 + 1;
        v364 = v28 - 1;
        v365 = v38;
        if (v37)
        {
          v96 = v433;
          do
          {
            if (v90)
            {
              v366 = ((unsigned __int16)(*v37 * v90 + ((*v37 * v90) >> 8) + 1) >> 8);
              if (v366)
              {
                if (v366 == 255)
                  v367 = *v59;
                else
                  v367 = vmlaq_n_f32(vmulq_n_f32(v364[1], 1.0 - (float)((float)v366 * 0.0039216)), *v59, (float)v366 * 0.0039216);
                v364[1] = v367;
              }
            }
            v368 = *v363++;
            v90 = v368;
            v59 = (float32x4_t *)((char *)v59 + 20);
            ++v37;
            ++v364;
            --v365;
          }
          while (v365);
          v37 += v427;
        }
        else
        {
          v96 = v433;
          do
          {
            if (v90)
            {
              if (v90 == 255)
                v402 = *v59;
              else
                v402 = vmlaq_n_f32(vmulq_n_f32(v364[1], 1.0 - (float)((float)v90 * 0.0039216)), *v59, (float)v90 * 0.0039216);
              v364[1] = v402;
            }
            v403 = *v363++;
            v90 = v403;
            v59 = (float32x4_t *)((char *)v59 + 20);
            ++v364;
            --v365;
          }
          while (v365);
          v37 = 0;
        }
        v404 = &v364[v428];
        goto LABEL_550;
      case 2:
        v100 = *v60;
        if (v64)
        {
          if (v37)
          {
            v101 = 0;
            v102 = v60 + 1;
            v103 = v25 - 1;
            v104 = v28 - 1;
            v96 = v433;
            while (1)
            {
              if (!v100)
                goto LABEL_104;
              v105 = ((unsigned __int16)(v37[v101] * v100 + ((v37[v101] * v100) >> 8) + 1) >> 8);
              if (!v105)
                goto LABEL_104;
              if (v105 == 255)
              {
                v106 = v59[1].f32[0];
                if (v106 >= 1.0)
                {
                  v28[v101] = *v59;
                  goto LABEL_103;
                }
                if (v106 > 0.0)
                {
                  v28[v101] = vmlaq_n_f32(*v59, v28[v101], 1.0 - v106);
                  v106 = v106 + (float)(v25[v101] * (float)(1.0 - v106));
LABEL_103:
                  v25[v101] = v106;
                }
              }
              else
              {
                v107 = (float)v105 * 0.0039216;
                v108 = v107 * v59[1].f32[0];
                if (v108 > 0.0)
                {
                  v28[v101] = vmlaq_n_f32(vmulq_n_f32(*v59, v107), v28[v101], 1.0 - v108);
                  v106 = v108 + (float)(v25[v101] * (float)(1.0 - v108));
                  goto LABEL_103;
                }
              }
LABEL_104:
              v100 = v102[v101];
              v59 = (float32x4_t *)((char *)v59 + 20);
              ++v101;
              ++v103;
              ++v104;
              if ((_DWORD)v38 == (_DWORD)v101)
              {
                v37 += v101 + v427;
LABEL_526:
                v28 = &v104[v428 + 1];
                v25 = &v103[v430 + 1];
                goto LABEL_494;
              }
            }
          }
          v396 = v60 + 1;
          v103 = v25 - 1;
          v104 = v28 - 1;
          v397 = v38;
          v96 = v433;
          while (1)
          {
            if (v100)
            {
              if (v100 == 255)
              {
                v398 = v59[1].f32[0];
                if (v398 >= 1.0)
                {
                  v104[1] = *v59;
                  goto LABEL_523;
                }
                if (v398 > 0.0)
                {
                  v104[1] = vmlaq_n_f32(*v59, v104[1], 1.0 - v398);
                  v398 = v398 + (float)(v103[1] * (float)(1.0 - v398));
LABEL_523:
                  v103[1] = v398;
                }
              }
              else
              {
                v399 = (float)v100 * 0.0039216;
                v400 = v399 * v59[1].f32[0];
                if (v400 > 0.0)
                {
                  v104[1] = vmlaq_n_f32(vmulq_n_f32(*v59, v399), v104[1], 1.0 - v400);
                  v398 = v400 + (float)(v103[1] * (float)(1.0 - v400));
                  goto LABEL_523;
                }
              }
            }
            v401 = *v396++;
            v100 = v401;
            v59 = (float32x4_t *)((char *)v59 + 20);
            ++v103;
            ++v104;
            if (!--v397)
            {
              v37 = 0;
              goto LABEL_526;
            }
          }
        }
        v369 = v60 + 1;
        v370 = v28 - 1;
        v371 = v38;
        if (v37)
        {
          v96 = v433;
          while (1)
          {
            if (!v100)
              goto LABEL_482;
            v372 = ((unsigned __int16)(*v37 * v100 + ((*v37 * v100) >> 8) + 1) >> 8);
            if (!v372)
              goto LABEL_482;
            if (v372 == 255)
            {
              v373 = v59[1].f32[0];
              if (v373 >= 1.0)
              {
                v378 = *v59;
                goto LABEL_481;
              }
              if (v373 > 0.0)
              {
                v374 = 1.0 - v373;
                v375 = *v59;
                goto LABEL_479;
              }
            }
            else
            {
              v376 = (float)v372 * 0.0039216;
              v377 = v376 * v59[1].f32[0];
              if (v377 > 0.0)
              {
                v374 = 1.0 - v377;
                v375 = vmulq_n_f32(*v59, v376);
LABEL_479:
                v378 = vmlaq_n_f32(v375, v370[1], v374);
LABEL_481:
                v370[1] = v378;
              }
            }
LABEL_482:
            v379 = *v369++;
            v100 = v379;
            v59 = (float32x4_t *)((char *)v59 + 20);
            ++v37;
            ++v370;
            if (!--v371)
            {
              v37 += v427;
LABEL_549:
              v404 = &v370[v428];
LABEL_550:
              v28 = v404 + 1;
              v25 += v430;
LABEL_494:
              if (v432 == 1)
              {
                v8 = v431;
LABEL_552:
                if (v8)
                  free(v8);
                goto LABEL_554;
              }
              --v432;
              v43 = 0;
              LODWORD(v435) = v435 + 1;
              v34 += v33[16];
              v35 = v33[17] + v96;
              if (v431)
              {
                v426 = v34;
                v41 = v422;
                v8 = v431;
LABEL_557:
                v412 = v430 + v41;
                while (1)
                {
                  while (1)
                  {
                    v413 = *((_DWORD *)v37 - 4);
                    v414 = v413 - v435;
                    if (v413 <= (int)v435)
                      break;
                    v432 -= v414;
                    if (v432 < 1)
                      goto LABEL_552;
                    v415 = v33[17];
                    v426 += v33[16] * v414;
                    v35 += v415 * v414;
                    v28 += v418 * v414;
                    v416 = v412 * v414;
                    if (!(_DWORD)v434)
                      v416 = 0;
                    v25 += v416;
                    LODWORD(v435) = v413;
                  }
                  if ((int)v435 < *((_DWORD *)v37 - 3) + v413)
                    break;
                  if (!shape_enum_clip_scan((uint64_t)v8, (_DWORD *)v37 - 4))
                    goto LABEL_552;
                }
                v26 = v422;
                v34 = v426;
                v27 = v434;
                goto LABEL_21;
              }
              goto LABEL_22;
            }
          }
        }
        v96 = v433;
        while (1)
        {
          if (v100)
          {
            if (v100 == 255)
            {
              v405 = v59[1].f32[0];
              if (v405 >= 1.0)
              {
                v410 = *v59;
                goto LABEL_546;
              }
              if (v405 > 0.0)
              {
                v406 = 1.0 - v405;
                v407 = *v59;
                goto LABEL_544;
              }
            }
            else
            {
              v408 = (float)v100 * 0.0039216;
              v409 = v408 * v59[1].f32[0];
              if (v409 > 0.0)
              {
                v406 = 1.0 - v409;
                v407 = vmulq_n_f32(*v59, v408);
LABEL_544:
                v410 = vmlaq_n_f32(v407, v370[1], v406);
LABEL_546:
                v370[1] = v410;
              }
            }
          }
          v411 = *v369++;
          v100 = v411;
          v59 = (float32x4_t *)((char *)v59 + 20);
          ++v370;
          if (!--v371)
          {
            v37 = 0;
            goto LABEL_549;
          }
        }
      case 3:
        v109 = v59[1].f32;
        v110 = v38;
        v85 = v37;
        do
        {
          v111 = *v60;
          if (*v60)
          {
            if (v37)
              v111 = (*v85 * v111 + ((*v85 * v111) >> 8) + 1) >> 8;
            if ((_BYTE)v111)
            {
              if (v111 == 255)
              {
                v28->f32[0] = *(v109 - 4) * *v25;
                v28->f32[1] = *(v109 - 3) * *v25;
                v28->f32[2] = *(v109 - 2) * *v25;
                v28->f32[3] = *(v109 - 1) * *v25;
                v112 = *v109 * *v25;
              }
              else
              {
                v113 = (float)v111 * 0.0039216;
                v114 = *v25;
                v115 = v113 * *v25;
                v116 = 1.0 - v113;
                *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v116), *(float32x4_t *)(v109 - 4), v115);
                v112 = (float)(v116 * v114) + (float)(*v109 * v115);
              }
              *v25 = v112;
            }
          }
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v109 += 5;
          v25 = (float *)((char *)v25 + v42);
          --v110;
        }
        while (v110);
        goto LABEL_491;
      case 4:
        v117 = v59[1].f32;
        v118 = v38;
        v85 = v37;
        do
        {
          v119 = *v60;
          if (*v60)
          {
            if (v37)
              v119 = (*v85 * v119 + ((*v85 * v119) >> 8) + 1) >> 8;
            if ((_BYTE)v119)
            {
              if (v119 == 255)
              {
                v28->f32[0] = *(v117 - 4) * (float)(1.0 - *v25);
                v28->f32[1] = *(v117 - 3) * (float)(1.0 - *v25);
                v28->f32[2] = *(v117 - 2) * (float)(1.0 - *v25);
                v28->f32[3] = *(v117 - 1) * (float)(1.0 - *v25);
                v120 = *v117 * (float)(1.0 - *v25);
              }
              else
              {
                v121 = (float)v119 * 0.0039216;
                v122 = *v25;
                v123 = v121 * (float)(1.0 - *v25);
                v124 = 1.0 - v121;
                *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v124), *(float32x4_t *)(v117 - 4), v123);
                v120 = (float)(v124 * v122) + (float)(*v117 * v123);
              }
              *v25 = v120;
            }
          }
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v117 += 5;
          v25 = (float *)((char *)v25 + v42);
          --v118;
        }
        while (v118);
        goto LABEL_491;
      case 5:
        v125 = v59[1].f32;
        v126 = v38;
        v85 = v37;
        while (1)
        {
          v127 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_133;
            v128 = *v85 * v127 + ((*v85 * v127) >> 8) + 1;
            if (BYTE1(v128))
              break;
          }
LABEL_134:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v125 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v126)
            goto LABEL_491;
        }
        v127 = v128 >> 8;
LABEL_133:
        v129 = *v25;
        v130 = (float)v127 * 0.0039216;
        v131 = v130 * *v125;
        *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - v131), vmulq_n_f32(*(float32x4_t *)(v125 - 4), v130), *v25);
        *v25 = (float)(v129 * (float)(1.0 - v131)) + (float)(v131 * v129);
        goto LABEL_134;
      case 6:
        v132 = v59[1].f32;
        v133 = v38;
        v85 = v37;
        while (1)
        {
          v134 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v135 = *v85 * v134 + ((*v85 * v134) >> 8) + 1;
              if (!BYTE1(v135))
                goto LABEL_146;
              v134 = v135 >> 8;
            }
            v136 = *v25;
            v137 = 1.0 - *v25;
            if (v137 >= 1.0)
            {
              v140 = (float)v134 * 0.0039216;
              *v28 = vmulq_n_f32(*(float32x4_t *)(v132 - 4), v140);
              v139 = v140 * *v132;
              goto LABEL_145;
            }
            if (v137 > 0.0)
            {
              v138 = v137 * (float)((float)v134 * 0.0039216);
              *v28 = vmlaq_n_f32(*v28, *(float32x4_t *)(v132 - 4), v138);
              v139 = v136 + (float)(*v132 * v138);
LABEL_145:
              *v25 = v139;
            }
          }
LABEL_146:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v132 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v133)
            goto LABEL_491;
        }
      case 7:
        v141 = v37 != 0;
        v142 = v59[1].f32;
        v143 = v38;
        v85 = v37;
        if (v64)
        {
          do
          {
            v144 = *v60;
            if (*v60)
            {
              if (v37)
                v144 = (*v85 * v144 + ((*v85 * v144) >> 8) + 1) >> 8;
              if ((_BYTE)v144)
              {
                if (v144 == 255)
                {
                  v145 = *v142;
                  *v28 = vmulq_n_f32(*v28, *v142);
                  v146 = v145 * *v25;
                }
                else
                {
                  v147 = (float)v144 * 0.0039216;
                  v148 = *v25;
                  v149 = v147 * *v142;
                  v150 = 1.0 - v147;
                  *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v150), *v28, v149);
                  v146 = (float)(v150 * v148) + (float)(v148 * v149);
                }
                *v25 = v146;
              }
            }
            ++v60;
            v85 += v141;
            ++v28;
            ++v25;
            v142 += 5;
            --v143;
          }
          while (v143);
        }
        else
        {
          do
          {
            v151 = *v60;
            if (*v60)
            {
              if (v37)
                v151 = (*v85 * v151 + ((*v85 * v151) >> 8) + 1) >> 8;
              if ((_BYTE)v151)
              {
                if (v151 == 255)
                  v152 = vmulq_n_f32(*v28, *v142);
                else
                  v152 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - (float)((float)v151 * 0.0039216)), *v28, (float)((float)v151 * 0.0039216) * *v142);
                *v28 = v152;
              }
            }
            ++v60;
            v85 += v141;
            ++v28;
            v142 += 5;
            --v143;
          }
          while (v143);
        }
        goto LABEL_491;
      case 8:
        v153 = v37 != 0;
        v154 = v59[1].f32;
        v155 = v38;
        v85 = v37;
        if (v64)
        {
          do
          {
            v156 = *v60;
            if (*v60)
            {
              if (v37)
                v156 = (*v85 * v156 + ((*v85 * v156) >> 8) + 1) >> 8;
              if ((_BYTE)v156)
              {
                if (v156 == 255)
                {
                  v157 = 1.0 - *v154;
                  *v28 = vmulq_n_f32(*v28, v157);
                  v158 = v157 * *v25;
                }
                else
                {
                  v159 = (float)v156 * 0.0039216;
                  v160 = *v25;
                  v161 = v159 * (float)(1.0 - *v154);
                  v162 = 1.0 - v159;
                  *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v162), *v28, v161);
                  v158 = (float)(v162 * v160) + (float)(v160 * v161);
                }
                *v25 = v158;
              }
            }
            ++v60;
            v85 += v153;
            ++v28;
            ++v25;
            v154 += 5;
            --v155;
          }
          while (v155);
        }
        else
        {
          do
          {
            v163 = *v60;
            if (*v60)
            {
              if (v37)
                v163 = (*v85 * v163 + ((*v85 * v163) >> 8) + 1) >> 8;
              if ((_BYTE)v163)
              {
                if (v163 == 255)
                  v164 = vmulq_n_f32(*v28, 1.0 - *v154);
                else
                  v164 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - (float)((float)v163 * 0.0039216)), *v28, (float)((float)v163 * 0.0039216) * (float)(1.0 - *v154));
                *v28 = v164;
              }
            }
            ++v60;
            v85 += v153;
            ++v28;
            v154 += 5;
            --v155;
          }
          while (v155);
        }
        goto LABEL_491;
      case 9:
        v165 = v59[1].f32;
        v166 = v38;
        v85 = v37;
        while (1)
        {
          v167 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_195;
            v168 = *v85 * v167 + ((*v85 * v167) >> 8) + 1;
            if (BYTE1(v168))
              break;
          }
LABEL_196:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v165 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v166)
            goto LABEL_491;
        }
        v167 = v168 >> 8;
LABEL_195:
        v169 = *v25;
        v170 = (float)v167 * 0.0039216;
        v171 = v170 * *v165;
        v172 = 1.0 - *v25;
        v173 = (float)(1.0 - v170) + v171;
        *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, v173), vmulq_n_f32(*(float32x4_t *)(v165 - 4), v170), v172);
        *v25 = (float)(v169 * v173) + (float)(v171 * v172);
        goto LABEL_196;
      case 10:
        v174 = v59[1].f32;
        v175 = v38;
        v85 = v37;
        while (1)
        {
          v176 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_203;
            v177 = *v85 * v176 + ((*v85 * v176) >> 8) + 1;
            if (BYTE1(v177))
              break;
          }
LABEL_204:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v174 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v175)
            goto LABEL_491;
        }
        v176 = v177 >> 8;
LABEL_203:
        v178 = *v25;
        v179 = (float)v176 * 0.0039216;
        v180 = v179 * *v174;
        v181 = 1.0 - *v25;
        *v28 = vmlaq_n_f32(vmulq_n_f32(*v28, 1.0 - v180), vmulq_n_f32(*(float32x4_t *)(v174 - 4), v179), v181);
        *v25 = (float)(v178 * (float)(1.0 - v180)) + (float)(v180 * v181);
        goto LABEL_204;
      case 11:
        v182 = v37 != 0;
        if (v64)
        {
          v183 = &v59->f32[2];
          v184 = v38;
          v85 = v37;
          while (1)
          {
            v185 = *v60;
            if (*v60)
            {
              if (!v37)
                goto LABEL_212;
              v186 = *v85 * v185 + ((*v85 * v185) >> 8) + 1;
              if (BYTE1(v186))
                break;
            }
LABEL_215:
            ++v60;
            v85 += v182;
            ++v28;
            ++v25;
            v183 += 5;
            if (!--v184)
              goto LABEL_491;
          }
          v185 = v186 >> 8;
LABEL_212:
          v187 = (float)v185 * 0.0039216;
          v188 = *(v183 - 2) * v187;
          v189 = *(v183 - 1) * v187;
          v190 = v187 * *v183;
          v191 = v187 * v183[1];
          v192 = v187 * v183[2];
          v193 = *v25 + v192;
          v194 = (float)(v192 - v188) + (float)(*v25 - v28->f32[0]);
          if (v193 > 1.0)
            v193 = 1.0;
          v195 = (float)(v192 - v189) + (float)(*v25 - v28->f32[1]);
          v28->f32[0] = v193 - v194;
          v196 = v28->f32[3];
          v197 = (float)(v192 - v190) + (float)(*v25 - v28->f32[2]);
          v28->f32[1] = v193 - v195;
          v198 = *v25 - v196;
          v28->f32[2] = v193 - v197;
          *v25 = v193;
          v28->f32[3] = v193 - (float)((float)(v192 - v191) + v198);
          goto LABEL_215;
        }
        v380 = v59[1].f32;
        v381 = v38;
        v85 = v37;
        while (1)
        {
          v382 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_489;
            v383 = *v85 * v382 + ((*v85 * v382) >> 8) + 1;
            if (BYTE1(v383))
              break;
          }
LABEL_490:
          ++v60;
          v85 += v182;
          ++v28;
          v380 += 5;
          if (!--v381)
            goto LABEL_491;
        }
        v382 = v383 >> 8;
LABEL_489:
        v384 = (float)v382 * 0.0039216;
        v53.f32[0] = v384 * *v380;
        __asm { FMOV            V3.4S, #1.0 }
        v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0);
        *v28 = vsubq_f32(_Q3, vaddq_f32(vsubq_f32(v53, vmulq_n_f32(*(float32x4_t *)(v380 - 4), v384)), vsubq_f32(_Q3, *v28)));
        goto LABEL_490;
      case 12:
        v199 = v37 != 0;
        if (v64)
        {
          v200 = v59[1].f32;
          v201 = v38;
          v85 = v37;
          while (1)
          {
            v202 = *v60;
            if (*v60)
            {
              if (!v37)
                goto LABEL_223;
              v203 = *v85 * v202 + ((*v85 * v202) >> 8) + 1;
              if (BYTE1(v203))
                break;
            }
LABEL_226:
            ++v60;
            v85 += v199;
            ++v28;
            ++v25;
            v200 += 5;
            if (!--v201)
              goto LABEL_491;
          }
          v202 = v203 >> 8;
LABEL_223:
          v204 = (float)v202 * 0.0039216;
          v205 = *v25 + (float)(v204 * *v200);
          if (v205 > 1.0)
            v205 = 1.0;
          v206 = vmulq_n_f32(*(float32x4_t *)(v200 - 4), v204);
          v207.i64[0] = v28->i64[0];
          *v25 = v205;
          v207.i64[1] = v28->i64[1];
          *v28 = vaddq_f32(v206, v207);
          goto LABEL_226;
        }
        v386 = v38;
        v387 = v37;
        while (1)
        {
          v388 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_502;
            v389 = *v387 * v388 + ((*v387 * v388) >> 8) + 1;
            if (BYTE1(v389))
              break;
          }
LABEL_503:
          ++v60;
          v59 = (float32x4_t *)((char *)v59 + 20);
          v387 += v199;
          ++v28;
          if (!--v386)
          {
            v37 = &v387[v427];
LABEL_492:
            v28 += v428;
            v25 += v430;
LABEL_493:
            v96 = v433;
            goto LABEL_494;
          }
        }
        v388 = v389 >> 8;
LABEL_502:
        *v28 = vaddq_f32(vmulq_n_f32(*v59, (float)v388 * 0.0039216), *v28);
        goto LABEL_503;
      case 13:
        v208 = v59[1].f32;
        v209 = v38;
        v85 = v37;
        while (1)
        {
          v210 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_233;
            v211 = *v85 * v210 + ((*v85 * v210) >> 8) + 1;
            if (BYTE1(v211))
              break;
          }
LABEL_239:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v208 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v209)
            goto LABEL_491;
        }
        v210 = v211 >> 8;
LABEL_233:
        v212 = (float)v210 * 0.0039216;
        v52.f32[0] = v212 * *v208;
        if (v52.f32[0] > 0.0)
        {
          v214 = *(float32x4_t *)(v208 - 4);
          v213 = vmulq_n_f32(v214, v212);
          v214.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v64)
          {
            v53.f32[0] = *v25;
            if (*v25 <= 0.0)
              goto LABEL_237;
          }
          v215 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), *v28);
          v216 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v213);
          v217 = (int8x16_t)vmulq_f32(v215, v216);
          v218 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v214)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v217, v215, 1.0 - v52.f32[0]), v217);
          v219 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v214)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v218, v216, 1.0 - v53.f32[0]), v218);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v213 = vsubq_f32(v53, v219);
          if (v64)
          {
LABEL_237:
            *v28 = v213;
            *v25 = v52.f32[0];
          }
          else
          {
            *v28 = v213;
          }
        }
        goto LABEL_239;
      case 14:
        v220 = v59[1].f32;
        v221 = v38;
        v85 = v37;
        while (1)
        {
          v222 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v223 = *v85 * v222 + ((*v85 * v222) >> 8) + 1;
              if (!BYTE1(v223))
                goto LABEL_254;
              v222 = v223 >> 8;
            }
            v224 = (float)v222 * 0.0039216;
            v52.f32[0] = v224 * *v220;
            if (v52.f32[0] > 0.0)
            {
              v225 = *(float32x4_t *)(v220 - 4);
              v226 = vmulq_n_f32(v225, v224);
              if (v64)
              {
                v225.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_252:
                  *v28 = v226;
                  *v25 = v52.f32[0];
                  goto LABEL_254;
                }
              }
              else
              {
                v225.i32[0] = 1.0;
              }
              v227 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v225.f32, 0), *v28);
              __asm { FMOV            V4.4S, #1.0 }
              v232 = vmlaq_f32(v227, vsubq_f32(_Q4, v227), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v226));
              v52.f32[0] = (float)(v52.f32[0] + v225.f32[0]) - (float)(v225.f32[0] * v52.f32[0]);
              v226 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v232);
              if (!v64)
              {
                *v28 = v226;
                goto LABEL_254;
              }
              goto LABEL_252;
            }
          }
LABEL_254:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v220 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v221)
            goto LABEL_491;
        }
      case 15:
        v426 = v34;
        v233 = &v59->f32[2];
        v234 = v38;
        v235 = v37;
        while (1)
        {
          v236 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v237 = *v235 * v236 + ((*v235 * v236) >> 8) + 1;
              if (!BYTE1(v237))
                goto LABEL_270;
              v236 = v237 >> 8;
            }
            v238 = (float)v236 * *((float *)v82 + 159);
            v239 = v238 * v233[2];
            if (v239 > 0.0)
            {
              *(float *)&v56 = *(v233 - 2) * v238;
              *(float *)&v57 = *(v233 - 1) * v238;
              v240 = v238 * *v233;
              *(float *)&v58 = v238 * v233[1];
              if (v64)
              {
                v241 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_268:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v240;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v239;
                  goto LABEL_270;
                }
              }
              else
              {
                v241 = 1.0;
              }
              PDAoverlayPDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v241, v56, v57, v58, *(float *)&v56, *(float *)&v57, v240, *(float *)&v58, v239);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v240 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v240;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_270;
              }
              v239 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_268;
            }
          }
LABEL_270:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v233 += 5;
          if (!--v234)
            goto LABEL_457;
        }
      case 16:
        v242 = v59[1].f32;
        v243 = v38;
        v85 = v37;
        while (1)
        {
          v244 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_277;
            v245 = *v85 * v244 + ((*v85 * v244) >> 8) + 1;
            if (BYTE1(v245))
              break;
          }
LABEL_283:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v242 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v243)
            goto LABEL_491;
        }
        v244 = v245 >> 8;
LABEL_277:
        v246 = (float)v244 * 0.0039216;
        v52.f32[0] = v246 * *v242;
        if (v52.f32[0] > 0.0)
        {
          v248 = *(float32x4_t *)(v242 - 4);
          v247 = vmulq_n_f32(v248, v246);
          v248.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v64)
          {
            v53.f32[0] = *v25;
            if (*v25 <= 0.0)
              goto LABEL_281;
          }
          v249 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), *v28);
          v250 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v247);
          v251 = (int8x16_t)vmulq_n_f32(v249, v52.f32[0]);
          v252 = (int8x16_t)vmulq_n_f32(v250, v53.f32[0]);
          v253 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v251, (float32x4_t)v252), v252, v251);
          v254 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v248)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v253, v249, 1.0 - v52.f32[0]), v253);
          v255 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v248)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v254, v250, 1.0 - v53.f32[0]), v254);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v247 = vsubq_f32(v53, v255);
          if (v64)
          {
LABEL_281:
            *v28 = v247;
            *v25 = v52.f32[0];
          }
          else
          {
            *v28 = v247;
          }
        }
        goto LABEL_283;
      case 17:
        v256 = v59[1].f32;
        v257 = v38;
        v85 = v37;
        while (1)
        {
          v258 = *v60;
          if (*v60)
          {
            if (!v37)
              goto LABEL_290;
            v259 = *v85 * v258 + ((*v85 * v258) >> 8) + 1;
            if (BYTE1(v259))
              break;
          }
LABEL_296:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v256 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v257)
            goto LABEL_491;
        }
        v258 = v259 >> 8;
LABEL_290:
        v260 = (float)v258 * 0.0039216;
        v52.f32[0] = v260 * *v256;
        if (v52.f32[0] > 0.0)
        {
          v262 = *(float32x4_t *)(v256 - 4);
          v261 = vmulq_n_f32(v262, v260);
          v262.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v64)
          {
            v53.f32[0] = *v25;
            if (*v25 <= 0.0)
              goto LABEL_294;
          }
          v263 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), *v28);
          v264 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v261);
          v265 = (int8x16_t)vmulq_n_f32(v263, v52.f32[0]);
          v266 = (int8x16_t)vmulq_n_f32(v264, v53.f32[0]);
          v267 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v266, (float32x4_t)v265), v266, v265);
          v268 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v262)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v267, v263, 1.0 - v52.f32[0]), v267);
          v269 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v262)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v268, v264, 1.0 - v53.f32[0]), v268);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v261 = vsubq_f32(v53, v269);
          if (v64)
          {
LABEL_294:
            *v28 = v261;
            *v25 = v52.f32[0];
          }
          else
          {
            *v28 = v261;
          }
        }
        goto LABEL_296;
      case 18:
        v426 = v34;
        v270 = &v59->f32[2];
        v271 = v38;
        v235 = v37;
        while (1)
        {
          v272 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v273 = *v235 * v272 + ((*v235 * v272) >> 8) + 1;
              if (!BYTE1(v273))
                goto LABEL_312;
              v272 = v273 >> 8;
            }
            v274 = (float)v272 * *((float *)v82 + 159);
            v275 = v274 * v270[2];
            if (v275 > 0.0)
            {
              *(float *)&v56 = *(v270 - 2) * v274;
              *(float *)&v57 = *(v270 - 1) * v274;
              v276 = v274 * *v270;
              *(float *)&v58 = v274 * v270[1];
              if (v64)
              {
                v277 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_310:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v276;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v275;
                  goto LABEL_312;
                }
              }
              else
              {
                v277 = 1.0;
              }
              PDAcolordodgePDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v277, v56, v57, v58, *(float *)&v56, *(float *)&v57, v276, *(float *)&v58, v275);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v276 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v276;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_312;
              }
              v275 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_310;
            }
          }
LABEL_312:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v270 += 5;
          if (!--v271)
            goto LABEL_457;
        }
      case 19:
        v426 = v34;
        v278 = &v59->f32[2];
        v279 = v38;
        v235 = v37;
        while (1)
        {
          v280 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v281 = *v235 * v280 + ((*v235 * v280) >> 8) + 1;
              if (!BYTE1(v281))
                goto LABEL_328;
              v280 = v281 >> 8;
            }
            v282 = (float)v280 * *((float *)v82 + 159);
            v283 = v282 * v278[2];
            if (v283 > 0.0)
            {
              *(float *)&v56 = *(v278 - 2) * v282;
              *(float *)&v57 = *(v278 - 1) * v282;
              v284 = v282 * *v278;
              *(float *)&v58 = v282 * v278[1];
              if (v64)
              {
                v285 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_326:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v284;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v283;
                  goto LABEL_328;
                }
              }
              else
              {
                v285 = 1.0;
              }
              PDAcolorburnPDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v285, v56, v57, v58, *(float *)&v56, *(float *)&v57, v284, *(float *)&v58, v283);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v284 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v284;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_328;
              }
              v283 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_326;
            }
          }
LABEL_328:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v278 += 5;
          if (!--v279)
            goto LABEL_457;
        }
      case 20:
        v426 = v34;
        v286 = &v59->f32[2];
        v287 = v38;
        v235 = v37;
        while (1)
        {
          v288 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v289 = *v235 * v288 + ((*v235 * v288) >> 8) + 1;
              if (!BYTE1(v289))
                goto LABEL_344;
              v288 = v289 >> 8;
            }
            v290 = (float)v288 * *((float *)v82 + 159);
            v291 = v290 * v286[2];
            if (v291 > 0.0)
            {
              *(float *)&v56 = *(v286 - 2) * v290;
              *(float *)&v57 = *(v286 - 1) * v290;
              v292 = v290 * *v286;
              *(float *)&v58 = v290 * v286[1];
              if (v64)
              {
                *(float *)&v55 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_342:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v292;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v291;
                  goto LABEL_344;
                }
              }
              else
              {
                LODWORD(v55) = 1.0;
              }
              v52.i32[0] = v28->i32[0];
              v52 = PDAsoftlightPDA(&v436, *(float32x2_t *)v52.f32, v28->f32[1], v28->f32[2], v28->f32[3], v55, *(int32x2_t *)&v56, v57, v58, v45, v46, v47, v48, v49, v50, v51, (float32x2_t)__PAIR64__(LODWORD(v57), LODWORD(v56)), v292, *(float *)&v58,
                      v291);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v292 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v292;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_344;
              }
              v291 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_342;
            }
          }
LABEL_344:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v286 += 5;
          if (!--v287)
            goto LABEL_457;
        }
      case 21:
        v426 = v34;
        v293 = &v59->f32[2];
        v294 = v38;
        v235 = v37;
        while (1)
        {
          v295 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v296 = *v235 * v295 + ((*v235 * v295) >> 8) + 1;
              if (!BYTE1(v296))
                goto LABEL_360;
              v295 = v296 >> 8;
            }
            v297 = (float)v295 * *((float *)v82 + 159);
            v298 = v297 * v293[2];
            if (v298 > 0.0)
            {
              *(float *)&v56 = *(v293 - 2) * v297;
              *(float *)&v57 = *(v293 - 1) * v297;
              v299 = v297 * *v293;
              *(float *)&v58 = v297 * v293[1];
              if (v64)
              {
                v300 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_358:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v299;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v298;
                  goto LABEL_360;
                }
              }
              else
              {
                v300 = 1.0;
              }
              PDAhardlightPDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v300, v56, v57, v58, *(float *)&v56, *(float *)&v57, v299, *(float *)&v58, v298);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v299 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v299;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_360;
              }
              v298 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_358;
            }
          }
LABEL_360:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v293 += 5;
          if (!--v294)
            goto LABEL_457;
        }
      case 22:
        v301 = v59[1].f32;
        v302 = v38;
        v85 = v37;
        while (1)
        {
          v303 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v304 = *v85 * v303 + ((*v85 * v303) >> 8) + 1;
              if (!BYTE1(v304))
                goto LABEL_376;
              v303 = v304 >> 8;
            }
            v305 = (float)v303 * 0.0039216;
            v52.f32[0] = v305 * *v301;
            if (v52.f32[0] > 0.0)
            {
              v306 = *(float32x4_t *)(v301 - 4);
              v307 = vmulq_n_f32(v306, v305);
              if (v64)
              {
                v306.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_374:
                  *v28 = v307;
                  *v25 = v52.f32[0];
                  goto LABEL_376;
                }
              }
              else
              {
                v306.i32[0] = 1.0;
              }
              *(float *)v54.i32 = (float)(v306.f32[0] + v52.f32[0]) - (float)(v306.f32[0] * v52.f32[0]);
              v308 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v306.f32, 0), *v28);
              v309 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v307);
              v310 = vaddq_f32(v308, v309);
              v311 = vmulq_n_f32(v308, v52.f32[0]);
              v312 = vmulq_n_f32(v309, v306.f32[0]);
              v313 = vsubq_f32(v310, v311);
              v314 = (int8x16_t)vsubq_f32(v311, v312);
              v52 = vaddq_f32(vsubq_f32(v313, v312), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v314), (int8x16_t)vnegq_f32((float32x4_t)v314), v314));
              v307 = vsubq_f32((float32x4_t)vdupq_lane_s32(v54, 0), v52);
              if (!v64)
              {
                *v28 = v307;
                goto LABEL_376;
              }
              v52.i32[0] = v54.i32[0];
              goto LABEL_374;
            }
          }
LABEL_376:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v301 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v302)
            goto LABEL_491;
        }
      case 23:
        v315 = v59[1].f32;
        v316 = v38;
        v85 = v37;
        while (1)
        {
          v317 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v318 = *v85 * v317 + ((*v85 * v317) >> 8) + 1;
              if (!BYTE1(v318))
                goto LABEL_392;
              v317 = v318 >> 8;
            }
            v319 = (float)v317 * 0.0039216;
            v52.f32[0] = v319 * *v315;
            if (v52.f32[0] > 0.0)
            {
              v320 = *(float32x4_t *)(v315 - 4);
              v321 = vmulq_n_f32(v320, v319);
              if (v64)
              {
                v320.f32[0] = *v25;
                if (*v25 <= 0.0)
                {
LABEL_390:
                  *v28 = v321;
                  *v25 = v52.f32[0];
                  goto LABEL_392;
                }
              }
              else
              {
                v320.i32[0] = 1.0;
              }
              v322 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
              v320.f32[0] = (float)(v320.f32[0] + v52.f32[0]) - (float)(v320.f32[0] * v52.f32[0]);
              v323 = vsubq_f32(v322, *v28);
              v324 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v321);
              v325 = vaddq_f32(v323, v324);
              v326 = vmulq_f32(v324, v323);
              v323.i64[0] = 0xC0000000C0000000;
              v323.i64[1] = 0xC0000000C0000000;
              v327 = vmlaq_f32(v325, v323, v326);
              v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
              v321 = vsubq_f32(v52, v327);
              if (!v64)
              {
                *v28 = v321;
                goto LABEL_392;
              }
              v52.i32[0] = v320.i32[0];
              goto LABEL_390;
            }
          }
LABEL_392:
          ++v60;
          v85 += v37 != 0;
          ++v28;
          v315 += 5;
          v25 = (float *)((char *)v25 + v42);
          if (!--v316)
          {
LABEL_491:
            v37 = &v85[v427];
            goto LABEL_492;
          }
        }
      case 24:
        v426 = v34;
        v328 = &v59->f32[2];
        v329 = v38;
        v235 = v37;
        while (1)
        {
          v330 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v331 = *v235 * v330 + ((*v235 * v330) >> 8) + 1;
              if (!BYTE1(v331))
                goto LABEL_408;
              v330 = v331 >> 8;
            }
            v332 = (float)v330 * *((float *)v82 + 159);
            v333 = v332 * v328[2];
            if (v333 > 0.0)
            {
              *(float *)&v56 = *(v328 - 2) * v332;
              *(float *)&v57 = *(v328 - 1) * v332;
              v334 = v332 * *v328;
              *(float *)&v58 = v332 * v328[1];
              if (v64)
              {
                v335 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_406:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v334;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v333;
                  goto LABEL_408;
                }
              }
              else
              {
                v335 = 1.0;
              }
              PDAhuePDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v335, v56, v57, v58, *(float *)&v56, *(float *)&v57, v334, *(float *)&v58, v333);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v334 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v334;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_408;
              }
              v333 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_406;
            }
          }
LABEL_408:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v328 += 5;
          if (!--v329)
            goto LABEL_457;
        }
      case 25:
        v426 = v34;
        v336 = &v59->f32[2];
        v337 = v38;
        v235 = v37;
        while (1)
        {
          v338 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v339 = *v235 * v338 + ((*v235 * v338) >> 8) + 1;
              if (!BYTE1(v339))
                goto LABEL_424;
              v338 = v339 >> 8;
            }
            v340 = (float)v338 * *((float *)v82 + 159);
            v341 = v340 * v336[2];
            if (v341 > 0.0)
            {
              *(float *)&v56 = *(v336 - 2) * v340;
              *(float *)&v57 = *(v336 - 1) * v340;
              v342 = v340 * *v336;
              *(float *)&v58 = v340 * v336[1];
              if (v64)
              {
                v343 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_422:
                  v28->i32[0] = LODWORD(v56);
                  v28->i32[1] = LODWORD(v57);
                  v28->f32[2] = v342;
                  v28->i32[3] = LODWORD(v58);
                  *v25 = v341;
                  goto LABEL_424;
                }
              }
              else
              {
                v343 = 1.0;
              }
              PDAsaturationPDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v343, v56, v57, v58, *(float *)&v56, *(float *)&v57, v342, *(float *)&v58, v341);
              v64 = v434;
              LODWORD(v57) = v436.i32[1];
              LODWORD(v56) = v436.i32[0];
              LODWORD(v58) = v436.i32[3];
              v342 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->i32[1] = LODWORD(v57);
                v28->f32[2] = v342;
                v28->i32[3] = LODWORD(v58);
                v82 = &xmmword_185005000;
                goto LABEL_424;
              }
              v341 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_422;
            }
          }
LABEL_424:
          ++v60;
          v235 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v336 += 5;
          if (!--v337)
            goto LABEL_457;
        }
      case 26:
        v426 = v34;
        v344 = &v59->f32[2];
        v345 = v37;
        while (1)
        {
          v346 = *v60;
          if (*v60)
          {
            if (v37)
            {
              v347 = *v345 * v346 + ((*v345 * v346) >> 8) + 1;
              if (!BYTE1(v347))
                goto LABEL_440;
              v346 = v347 >> 8;
            }
            v348 = (float)v346 * *((float *)v82 + 159);
            v349 = v348 * v344[2];
            if (v349 > 0.0)
            {
              v350 = *(v344 - 2) * v348;
              v351 = *(v344 - 1) * v348;
              v352 = v348 * *v344;
              v353 = v348 * v344[1];
              if (v64)
              {
                *(float *)&v56 = *v25;
                if (*v25 <= 0.0)
                {
LABEL_438:
                  v28->f32[0] = v350;
                  v28->f32[1] = v351;
                  v28->f32[2] = v352;
                  v28->f32[3] = v353;
                  *v25 = v349;
                  goto LABEL_440;
                }
              }
              else
              {
                LODWORD(v56) = 1.0;
              }
              LODWORD(v57) = v28->i32[0];
              LODWORD(v58) = v28->i32[3];
              PDAluminosityPDA(v436.f32, v350, v351, v352, v353, v349, v56, v57, v58, v28->f32[0], COERCE_FLOAT(*(uint64_t *)((char *)v28->i64 + 4)), COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v28->i64 + 4))), *(float *)&v58, *(float *)&v56);
              v64 = v434;
              v351 = v436.f32[1];
              v350 = v436.f32[0];
              v353 = v436.f32[3];
              v352 = v436.f32[2];
              if (!(_DWORD)v434)
              {
                v28->i32[0] = v436.i32[0];
                v28->f32[1] = v351;
                v28->f32[2] = v352;
                v28->f32[3] = v353;
                v82 = &xmmword_185005000;
                goto LABEL_440;
              }
              v349 = v437;
              v82 = &xmmword_185005000;
              goto LABEL_438;
            }
          }
LABEL_440:
          ++v60;
          v345 += v37 != 0;
          ++v28;
          v25 = (float *)((char *)v25 + v42);
          v344 += 5;
          LODWORD(v38) = v38 - 1;
          if (!(_DWORD)v38)
          {
            v37 = &v345[v427];
LABEL_458:
            v28 += v428;
            v25 += v430;
            v32 = v425;
            v38 = v423;
            v33 = v424;
            v34 = v426;
            goto LABEL_493;
          }
        }
      case 27:
        v426 = v34;
        v354 = &v59->f32[2];
        v355 = v38;
        v235 = v37;
        v356 = v355;
        break;
      default:
        goto LABEL_493;
    }
    while (1)
    {
      v357 = *v60;
      if (*v60)
      {
        if (v37)
        {
          v358 = *v235 * v357 + ((*v235 * v357) >> 8) + 1;
          if (!BYTE1(v358))
            goto LABEL_456;
          v357 = v358 >> 8;
        }
        v359 = (float)v357 * *((float *)v82 + 159);
        v360 = v359 * v354[2];
        if (v360 > 0.0)
        {
          *(float *)&v56 = *(v354 - 2) * v359;
          *(float *)&v57 = *(v354 - 1) * v359;
          v361 = v359 * *v354;
          *(float *)&v58 = v359 * v354[1];
          if (v64)
          {
            v362 = *v25;
            if (*v25 <= 0.0)
            {
LABEL_454:
              v28->i32[0] = LODWORD(v56);
              v28->i32[1] = LODWORD(v57);
              v28->f32[2] = v361;
              v28->i32[3] = LODWORD(v58);
              *v25 = v360;
              goto LABEL_456;
            }
          }
          else
          {
            v362 = 1.0;
          }
          PDAluminosityPDA(v436.f32, v28->f32[0], v28->f32[1], v28->f32[2], v28->f32[3], v362, v56, v57, v58, *(float *)&v56, *(float *)&v57, v361, *(float *)&v58, v360);
          v64 = v434;
          LODWORD(v57) = v436.i32[1];
          LODWORD(v56) = v436.i32[0];
          LODWORD(v58) = v436.i32[3];
          v361 = v436.f32[2];
          if (!(_DWORD)v434)
          {
            v28->i32[0] = v436.i32[0];
            v28->i32[1] = LODWORD(v57);
            v28->f32[2] = v361;
            v28->i32[3] = LODWORD(v58);
            v82 = &xmmword_185005000;
            goto LABEL_456;
          }
          v360 = v437;
          v82 = &xmmword_185005000;
          goto LABEL_454;
        }
      }
LABEL_456:
      ++v60;
      v235 += v37 != 0;
      ++v28;
      v354 += 5;
      v25 = (float *)((char *)v25 + v42);
      if (!--v356)
      {
LABEL_457:
        v37 = &v235[v427];
        goto LABEL_458;
      }
    }
  }
}

uint64_t CMYKf_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  int v9;
  __n128 v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[36];
  char v19;
  _QWORD v20[483];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) != 0x4000000)
  {
    if (v13)
      goto LABEL_22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = CMYKf_shade_radial_CMYK;
  }
  else if (*(_QWORD *)(v5 + 24))
  {
    v12 = CMYKf_shade_conic_CMYK;
  }
  else if (v16 < 2)
  {
    v12 = CMYKf_shade_axial_CMYK;
  }
  else
  {
    v12 = CMYKf_shade_custom_CMYK;
  }
  v13 = v12;
LABEL_22:
  v14 = *v7;
  v15 = v14;
  CMYKf_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17))
    free(v17);
  return 1;
}

void CMYKf_shade_radial_CMYK(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int64x2_t v4;
  int64x2_t v5;
  float *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float v33;
  float v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32x4_t *i;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  float32x4_t v56;
  char v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  int8x16_t v74;
  float32x4_t v79;
  uint64_t v80;
  float v81;
  float32x4_t v82;
  float v83;
  float32x4_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  float v89;
  float32x4_t v90;
  int v91;

  v7 = *(float **)(a1 + 400);
  v8 = *(float *)(a1 + 280);
  v9 = *(float *)(a1 + 284);
  v10 = *(float **)(a1 + 272);
  v11 = v10[1];
  v12 = v11 * (float)a2;
  v13 = v11 * (float)a3;
  v14 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v13) + (float)(v8 * v12));
  v15 = *(float *)(a1 + 300) + (float)((float)(v13 * *(float *)(a1 + 292)) + (float)(v9 * v12));
  v16 = *(float *)(a1 + 336);
  v17 = *(float *)(a1 + 344);
  v18 = *(float *)(a1 + 304);
  v19 = *(float *)(a1 + 308);
  v20 = *(unsigned int *)(a1 + 324);
  v21 = v7[2];
  v22 = v7[4];
  v23 = v7[5];
  v24 = v7[7];
  v27 = a1 + 144;
  v25 = *(char **)(a1 + 144);
  v26 = *(_QWORD *)(v27 + 8);
  v28 = *(float32x4_t **)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v29 = *(float **)(a1 + 392);
  else
    v29 = v10;
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 40);
  if (v31)
    v32 = *(float **)(a1 + 40);
  else
    v32 = v10;
  if (v21 != 0.0 || v24 != 0.0 || v9 != 0.0)
  {
    v36 = *(_DWORD *)(a1 + 320);
    v37 = v7[3];
    v38 = v7[8];
    v39 = -v7[6];
    v40 = v19 - v18;
    for (i = (float32x4_t *)(v26 + 16); ; i = (float32x4_t *)((char *)i + 20))
    {
      v42 = v39 + (float)((float)(v14 + v14) * v21);
      v43 = (float)((float)(v15 * v15) + (float)(v14 * v14)) - v24;
      if (v23 == 0.0)
      {
        v50 = v43 / v42;
      }
      else
      {
        v44 = (float)((float)(v23 * -4.0) * v43) + (float)(v42 * v42);
        if (v44 < 0.0)
          goto LABEL_48;
        v45 = sqrtf(v44);
        v46 = v38 * (float)(v42 - v45);
        v47 = v42 + v45;
        v48 = v38 * v47;
        v49 = (float)(v38 * v47) <= v46;
        if ((float)(v38 * v47) <= v46)
          v50 = v38 * v47;
        else
          v50 = v46;
        if (v49)
          v48 = v46;
        if (v48 < 0.0)
        {
          _NF = v48 < v37;
LABEL_31:
          LODWORD(v52) = v36;
          if (_NF)
            goto LABEL_48;
LABEL_32:
          if ((v52 & 0x80000000) == 0)
            goto LABEL_44;
          goto LABEL_48;
        }
        if (v48 <= 1.0)
        {
          v53 = v18 + (float)(v48 * v40);
          goto LABEL_43;
        }
        if ((v20 & 0x80000000) == 0)
        {
          LODWORD(v52) = v20;
          if (v48 <= v22)
          {
LABEL_44:
            v54 = 16 * (_DWORD)v52;
            v52 = v52;
            if (!v31)
              v52 = 0;
            v55 = v32[v52];
            v56 = *(float32x4_t *)(v30 + v54);
            if (!v31)
              goto LABEL_51;
            goto LABEL_50;
          }
        }
      }
      if (v50 < 0.0)
      {
        _NF = v50 < v37;
        goto LABEL_31;
      }
      if (v50 > 1.0)
      {
        LODWORD(v52) = v20;
        if (v50 > v22)
          goto LABEL_48;
        goto LABEL_32;
      }
      v53 = v18 + (float)(v50 * v40);
LABEL_43:
      LODWORD(v52) = (int)(float)(v17 * (float)(v53 - v16));
      if ((v52 & 0x80000000) == 0)
        goto LABEL_44;
LABEL_48:
      if (!v28)
      {
        v57 = 0;
        goto LABEL_53;
      }
      v55 = *v29;
      v56 = *v28;
LABEL_50:
      v56 = vmulq_n_f32(v56, v55);
LABEL_51:
      i[-1] = v56;
      i->f32[0] = v55;
      v57 = -1;
LABEL_53:
      v14 = v8 + v14;
      v15 = v9 + v15;
      *v25++ = v57;
      if (!--a4)
        return;
    }
  }
  v33 = v15 * v15;
  v34 = -v23;
  if (v33 <= (float)-v23)
  {
    v58 = fabsf(v7[8]);
    v59 = v23 * -4.0;
    v60 = v19 - v18;
    if (v31)
      v61 = v20;
    else
      v61 = 0;
    v62 = a4 + 2;
    v4.i64[0] = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v63 = v33 + (float)(v14 * v14);
      v64 = v8 + v14;
      v65 = v33 + (float)(v64 * v64);
      if (v63 > v34 && v65 > v34)
      {
        if ((v20 & 0x80000000) != 0)
        {
          if (!v28)
          {
            v87 = 0;
            v85 = 0;
            goto LABEL_106;
          }
          v5.i32[0] = *(__int32 *)v29;
          v79 = vmulq_n_f32(*v28, *v29);
        }
        else
        {
          v5.i64[0] = 0;
          v5 = vceqq_s64(v4, v5);
          v74 = (int8x16_t)vdupq_lane_s64(v5.i64[0], 0);
          *(float *)v5.i32 = v32[v61];
          __asm { FMOV            V24.4S, #1.0 }
          v79 = vmulq_f32(*(float32x4_t *)(v30 + 16 * (int)v20), (float32x4_t)vbslq_s8(v74, _Q24, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0)));
        }
        *(float32x4_t *)v26 = v79;
        *(_DWORD *)(v26 + 16) = v5.i32[0];
        goto LABEL_104;
      }
      v67 = sqrtf(v59 * v65);
      v68 = v58 * sqrtf(v59 * v63);
      v69 = v58 * v67;
      v70 = (int)(float)(v17 * (float)((float)(v18 + (float)(v68 * v60)) - v16));
      v71 = (int)(float)(v17 * (float)((float)(v18 + (float)((float)(v58 * v67) * v60)) - v16));
      if (v68 <= 1.0 && v69 <= 1.0)
      {
        v80 = 16 * (_DWORD)v70;
        v70 = (int)v70;
        if (!v31)
          v70 = 0;
        v81 = v32[v70];
        v82 = *(float32x4_t *)(v30 + v80);
        if (v31)
        {
          v82 = vmulq_n_f32(v82, v81);
          v5.i32[0] = *(_DWORD *)(v31 + 4 * (int)v71);
          v79 = vmulq_n_f32(*(float32x4_t *)(v30 + 16 * (int)v71), *(float *)v5.i32);
        }
        else
        {
          v5.i32[0] = *(__int32 *)v10;
          v79 = *(float32x4_t *)(v30 + 16 * (int)v71);
        }
        *(float32x4_t *)v26 = v82;
        *(float *)(v26 + 16) = v81;
LABEL_104:
        v85 = -1;
        goto LABEL_105;
      }
      if (v68 <= 1.0)
      {
        if ((v70 & 0x80000000) == 0)
        {
          v73 = 4 * (int)v70;
          if (!v31)
            v70 = 0;
LABEL_84:
          v83 = v32[v70];
          v84 = *(float32x4_t *)(v30 + 4 * v73);
          if (v31)
LABEL_88:
            v84 = vmulq_n_f32(v84, v83);
          *(float32x4_t *)v26 = v84;
          *(float *)(v26 + 16) = v83;
          v85 = -1;
          goto LABEL_90;
        }
      }
      else if (v68 <= v22)
      {
        v70 = v61;
        v73 = 4 * (int)v20;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_84;
      }
      if (v28)
      {
        v83 = *v29;
        v84 = *v28;
        goto LABEL_88;
      }
      v85 = 0;
LABEL_90:
      if (v69 <= 1.0)
      {
        if ((v71 & 0x80000000) == 0)
        {
          v86 = 4 * (int)v71;
          if (!v31)
            v71 = 0;
LABEL_97:
          *(float *)v5.i32 = v32[v71];
          v79 = *(float32x4_t *)(v30 + 4 * v86);
          if (!v31)
            goto LABEL_105;
          goto LABEL_101;
        }
      }
      else if (v69 <= v22)
      {
        v71 = v61;
        v86 = 4 * (int)v20;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_97;
      }
      if (!v28)
      {
        v87 = 0;
        goto LABEL_106;
      }
      v5.i32[0] = *(__int32 *)v29;
      v79 = *v28;
LABEL_101:
      v79 = vmulq_n_f32(v79, *(float *)v5.i32);
LABEL_105:
      *(float32x4_t *)(v26 + 20) = v79;
      *(_DWORD *)(v26 + 36) = v5.i32[0];
      v87 = -1;
LABEL_106:
      v14 = v8 + v64;
      v26 += 40;
      *v25 = v85;
      v25[1] = v87;
      v25 += 2;
      v62 -= 2;
      if (v62 <= 2)
        return;
    }
  }
  if (v28 || (v20 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) != 0)
    {
      v89 = *v29;
      v90 = *v28;
    }
    else
    {
      if (v31)
        v88 = v20;
      else
        v88 = 0;
      v89 = v32[v88];
      v90 = *(float32x4_t *)(v30 + 16 * (int)v20);
      if (!v31)
        goto LABEL_119;
    }
    v90 = vmulq_n_f32(v90, v89);
LABEL_119:
    v91 = a4 + 4;
    do
    {
      *(float32x4_t *)v26 = v90;
      *(float *)(v26 + 16) = v89;
      *(float32x4_t *)(v26 + 20) = v90;
      *(float *)(v26 + 36) = v89;
      *(float32x4_t *)(v26 + 40) = v90;
      *(float *)(v26 + 56) = v89;
      *(float32x4_t *)(v26 + 60) = v90;
      v91 -= 4;
      *(float *)(v26 + 76) = v89;
      v26 += 80;
      *(_DWORD *)v25 = -1;
      v25 += 4;
    }
    while (v91 > 4);
    return;
  }
  if (a4 >= 4)
    v35 = 4;
  else
    v35 = a4;
  bzero(v25, ((a4 - v35 + 3) & 0xFFFFFFFC) + 4);
}

void CMYKf_shade_conic_CMYK(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, int64x2_t a5, __n128 a6)
{
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float32x4_t *v11;
  _BYTE *v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  int32x2_t v22;
  signed int v23;
  unsigned int v24;
  int32x2_t v25;
  float v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float v30;
  float32x4_t v31;
  int8x16_t v32;
  int64x2_t v33;
  int8x16_t v34;
  __n128 v35;

  v7 = a1[35];
  a6.n128_u64[0] = (unint64_t)vadd_f32(a1[37], vmla_n_f32(vmul_n_f32(a1[36], *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a3), v7, *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a2));
  v8 = a1[42].f32[0];
  v9 = a1[43].f32[0];
  v10 = a1[38].f32[0];
  v12 = (_BYTE *)a1[18];
  v11 = (float32x4_t *)a1[19];
  v13 = a1[4];
  v14 = a1[5];
  if (v14)
    v15 = a1[5];
  else
    v15 = a1[34];
  v16 = a1[38].f32[1] - v10;
  *(float32x2_t *)a5.i8 = a1[5];
  v33 = a5;
  __asm { FMOV            V0.4S, #1.0 }
  v32 = (int8x16_t)_Q0;
  do
  {
    _Q0.i64[0] = 0;
    v34 = (int8x16_t)vdupq_lane_s64(vceqq_s64(v33, _Q0).i64[0], 0);
    v35 = a6;
    *(float *)_Q0.i32 = v9
                      * (float)((float)(v10
                                      + (float)((float)((float)(atan2f(a6.n128_f32[1], a6.n128_f32[0]) * 0.15915) + 0.5)
                                              * v16))
                              - v8);
    v23 = vcvtms_s32_f32(*(float *)_Q0.i32);
    v24 = vcvtms_s32_f32(v9 + *(float *)_Q0.i32);
    *(float *)v25.i32 = ceilf(*(float *)_Q0.i32);
    if (*(float *)_Q0.i32 < 0.0)
      v23 = v24;
    v26 = ceilf(*(float *)_Q0.i32 - v9);
    if (*(float *)_Q0.i32 > v9)
      *(float *)v25.i32 = v26;
    v27 = v23;
    if (!*(_QWORD *)&v14)
      v27 = 0;
    v28 = (int)*(float *)v25.i32;
    v25.i32[0] = *(_DWORD *)(*(_QWORD *)&v15 + 4 * v27);
    v29 = v28;
    if (!*(_QWORD *)&v14)
      v29 = 0;
    v22.i32[0] = *(_DWORD *)(*(_QWORD *)&v15 + 4 * v29);
    v30 = *(float *)_Q0.i32 - (float)(int)floorf(*(float *)_Q0.i32);
    v31 = vmulq_f32(*(float32x4_t *)(*(_QWORD *)&v13 + 16 * v23), (float32x4_t)vbslq_s8(v34, v32, (int8x16_t)vdupq_lane_s32(v25, 0)));
    *v11 = vmlaq_n_f32(v31, vsubq_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)&v13 + 16 * v28), (float32x4_t)vbslq_s8(v34, v32, (int8x16_t)vdupq_lane_s32(v22, 0))), v31), v30);
    v11[1].f32[0] = *(float *)v25.i32 + (float)(v30 * (float)(*(float *)v22.i32 - *(float *)v25.i32));
    a6.n128_u64[1] = v35.n128_u64[1];
    a6.n128_u64[0] = (unint64_t)vadd_f32(v7, (float32x2_t)v35.n128_u64[0]);
    *v12++ = -1;
    v11 = (float32x4_t *)((char *)v11 + 20);
    --a4;
  }
  while (a4);
}

uint64_t CMYKf_shade_custom_CMYK(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, int32x4_t a6)
{
  uint64_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  char *v13;
  float32x4_t *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  float32x4_t *v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v6 = *(_QWORD *)(result + 272);
  v7 = *(float32x2_t *)(result + 280);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)(result + 296), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(result + 288), *(float *)(v6 + 4) * (float)a3), v7, *(float *)(v6 + 4) * (float)a2));
  v8 = *(float32x4_t *)(result + 304);
  v9 = *(float *)(result + 336);
  v10 = *(float *)(result + 348);
  v11 = *(float *)(result + 344);
  v12 = *(float *)(result + 356);
  v13 = *(char **)(result + 144);
  v14 = *(float32x4_t **)(result + 384);
  v15 = *(float **)(result + 392);
  if (!v15)
    v15 = *(float **)(result + 272);
  v16 = *(_QWORD *)(result + 32);
  v17 = *(_QWORD *)(result + 40);
  if (v17)
    v18 = *(_DWORD *)(result + 48);
  else
    v18 = 0;
  if (v17)
    v6 = *(_QWORD *)(result + 40);
  v19 = 4 * *(_DWORD *)(result + 48);
  v20 = (float32x4_t *)(*(_QWORD *)(result + 152) + 16);
  do
  {
    v21 = (float32x4_t)vzip1q_s32(a6, a6);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(v8, v21))), vmovn_s32(vcgtq_f32(v21, v8))), 0xFuLL))) & 1) == 0)
    {
      v24 = (int)(float)(v12 * (float)(*(float *)&a6.i32[1] - v10));
      v25 = v11 * (float)(*(float *)a6.i32 - v9);
      v26 = v16 + 4 * v19 * v24;
      v27 = 16 * (int)v25;
      v28 = v6 + 4 * v18 * v24;
      result = (int)v25;
      if (!v17)
        result = 0;
      v22 = *(float *)(v28 + 4 * result);
      v23 = *(float32x4_t *)(v26 + v27);
      if (!v17)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (v14)
    {
      v22 = *v15;
      v23 = *v14;
LABEL_15:
      v23 = vmulq_n_f32(v23, v22);
LABEL_16:
      v20[-1] = v23;
      v20->f32[0] = v22;
      v29 = -1;
      goto LABEL_18;
    }
    v29 = 0;
LABEL_18:
    *(float32x2_t *)a6.i8 = vadd_f32(v7, *(float32x2_t *)a6.i8);
    *v13++ = v29;
    v20 = (float32x4_t *)((char *)v20 + 20);
    --a4;
  }
  while (a4);
  return result;
}

void CMYKf_shade_axial_CMYK(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  int v21;
  float32x4_t *i;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float32x4_t v26;
  char v27;
  uint64_t v28;
  float v29;
  float32x4_t v30;
  int v31;

  v5 = *(float *)(a1 + 280);
  v6 = *(float **)(a1 + 272);
  v7 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(v6[1] * (float)a3)) + (float)(v5 * (float)(v6[1] * (float)a2)));
  v8 = *(float *)(a1 + 336);
  v9 = *(float *)(a1 + 344);
  v10 = *(float *)(a1 + 304);
  v11 = *(float *)(a1 + 308);
  LODWORD(v12) = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(a1 + 324);
  v16 = a1 + 144;
  v14 = *(_DWORD **)(a1 + 144);
  v15 = *(_QWORD *)(v16 + 8);
  v17 = *(float32x4_t **)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v18 = *(float **)(a1 + 392);
  else
    v18 = v6;
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(float **)(a1 + 40);
  if (v19)
    v6 = v19;
  if (v5 != 0.0)
  {
    for (i = (float32x4_t *)(v15 + 16); ; i = (float32x4_t *)((char *)i + 20))
    {
      LODWORD(v23) = v12;
      if (v7 >= v10)
      {
        LODWORD(v23) = v13;
        if (v7 <= v11)
          LODWORD(v23) = (int)(float)(v9 * (float)(v7 - v8));
      }
      if ((v23 & 0x80000000) != 0)
      {
        if (!v17)
        {
          v27 = 0;
          goto LABEL_29;
        }
        v25 = *v18;
        v26 = *v17;
      }
      else
      {
        v24 = 16 * (_DWORD)v23;
        v23 = v23;
        if (!v19)
          v23 = 0;
        v25 = v6[v23];
        v26 = *(float32x4_t *)(v20 + v24);
        if (!v19)
          goto LABEL_28;
      }
      v26 = vmulq_n_f32(v26, v25);
LABEL_28:
      i[-1] = v26;
      i->f32[0] = v25;
      v27 = -1;
LABEL_29:
      v7 = v5 + v7;
      *(_BYTE *)v14 = v27;
      v14 = (_DWORD *)((char *)v14 + 1);
      if (!--a4)
        return;
    }
  }
  if (v7 >= v10)
  {
    LODWORD(v12) = v13;
    if (v7 <= v11)
      LODWORD(v12) = (int)(float)(v9 * (float)(v7 - v8));
  }
  if ((v12 & 0x80000000) == 0 || v17)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v29 = *v18;
      v30 = *v17;
    }
    else
    {
      v28 = 16 * (_DWORD)v12;
      v12 = v12;
      if (!v19)
        v12 = 0;
      v29 = v6[v12];
      v30 = *(float32x4_t *)(v20 + v28);
      if (!v19)
        goto LABEL_39;
    }
    v30 = vmulq_n_f32(v30, v29);
LABEL_39:
    v31 = a4 + 4;
    do
    {
      *(float32x4_t *)v15 = v30;
      *(float *)(v15 + 16) = v29;
      *(float32x4_t *)(v15 + 20) = v30;
      *(float *)(v15 + 36) = v29;
      *(float32x4_t *)(v15 + 40) = v30;
      *(float *)(v15 + 56) = v29;
      *(float32x4_t *)(v15 + 60) = v30;
      v31 -= 4;
      *(float *)(v15 + 76) = v29;
      v15 += 80;
      *v14++ = -1;
    }
    while (v31 > 4);
    return;
  }
  if (a4 >= 4)
    v21 = 4;
  else
    v21 = a4;
  bzero(v14, ((a4 - v21 + 3) & 0xFFFFFFFC) + 4);
}

int8x16_t *CMYKF_pattern(uint64_t a1, int8x16_t *a2, unsigned int a3, int a4, float32x4_t *a5, float a6, double a7, double a8, int32x4_t a9, double a10, double a11)
{
  unsigned __int32 *v14;
  int8x16_t *v15;
  float v16;
  int v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t *v23;
  __n128 v25;
  double v26;

  v14 = *(unsigned __int32 **)(*(_QWORD *)a1 + 64);
  a9.i32[0] = *v14;
  LODWORD(a11) = v14[1];
  if (a2 && a3 > 0x13
    || (v25 = (__n128)a9,
        v26 = a11,
        v15 = (int8x16_t *)malloc_type_malloc(0x44uLL, 0x705560E0uLL),
        a9 = (int32x4_t)v25,
        a11 = v26,
        (a2 = v15) != 0))
  {
    if (*(float *)a9.i32 <= a6)
      v16 = a6;
    else
      v16 = *(float *)a9.i32;
    if (*(float *)&a11 < a6)
      v16 = *(float *)&a11;
    if (a5)
      v17 = a4;
    else
      v17 = 0;
    switch(v17)
    {
      case 1:
        v22 = a9;
        *(float *)&v22.i32[1] = v16 * (float)(v16 * (float)(*(float *)&a11 - a5->f32[0]));
        v21 = (int8x16_t)vzip1q_s32(v22, v22);
        v21.i32[2] = a9.i32[0];
        break;
      case 4:
        v21 = (int8x16_t)vmulq_n_f32(*a5, v16);
        break;
      case 3:
        v18 = v16 * (float)(*(float *)&a11 - a5->f32[2]);
        v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
        v19 = vmul_n_f32(vsub_f32(v20, *(float32x2_t *)a5->f32), v16);
        v20.i32[0] = v19.i32[1];
        if (v19.f32[0] < v19.f32[1])
          v20.f32[0] = v19.f32[0];
        if (v20.f32[0] < v18)
          v20.f32[0] = v16 * (float)(*(float *)&a11 - a5->f32[2]);
        *(float32x2_t *)v21.i8 = vsub_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 0));
        *(float *)&v21.i32[2] = v18 - v20.f32[0];
        v21.i32[3] = v20.i32[0];
        break;
      default:
        v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a9.i8, 0);
        break;
    }
    *a2 = (int8x16_t)xmmword_185004D40;
    a2[1].i32[2] = 0;
    a2[1].i64[0] = 1;
    a2[4].i32[0] = bswap32(LODWORD(v16));
    v23 = a2 + 4;
    a2[3] = vrev32q_s8(v21);
    if (v16 >= *(float *)&a11)
      v23 = 0;
    a2[2].i64[0] = (uint64_t)a2[3].i64;
    a2[2].i64[1] = (uint64_t)v23;
  }
  return a2;
}

uint64_t CMYKF_mark(uint64_t a1, __n128 a2)
{
  return CMYKF_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

uint64_t CMYKF_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  double v15;
  double v16;
  float32x4_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint16x4_t *v26;
  uint64_t v27;
  int v28;
  int8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  size_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  int8x16_t *v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  double v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  float32x4_t v79;
  void *v80;
  uint64_t v81;
  int8x16_t *v82;
  int v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  char *v88;
  uint64_t i64;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int8x16_t *v94;
  int v95;
  uint64_t v96;
  int8x16_t *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int8x16_t *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  float v118;
  float v119;
  unsigned int v120;
  int8x16_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  float v127;
  float v128;
  unsigned int v129;
  int8x16_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  int8x16_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  float v146;
  float v147;
  int8x16_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  float v154;
  float v155;
  float v156;
  unsigned int v157;
  int8x16_t v158;
  unsigned int v159;
  int8x16_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  float v166;
  float v167;
  unsigned int v168;
  int8x16_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  float v175;
  unsigned int v176;
  int8x16_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  float v183;
  float v184;
  int8x16_t *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  float v191;
  float v192;
  int8x16_t *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x16_t *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  float v207;
  float v208;
  int8x16_t v209;
  int8x16_t *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  float32x4_t v216;
  float32x4_t v217;
  int8x16_t v218;
  int8x16_t v219;
  float32x4_t v220;
  unsigned int v221;
  int8x16_t *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v232;
  float32x4_t v233;
  unsigned int v234;
  int8x16_t *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  float v244;
  unint64_t v245;
  int8x16_t v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  int8x16_t *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  unsigned int v266;
  int8x16_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  float32x4_t v279;
  unsigned int v280;
  int8x16_t *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  float v290;
  unint64_t v291;
  int8x16_t v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int8x16_t *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  float v307;
  unint64_t v308;
  int8x16_t v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  int8x16_t *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  unint64_t v324;
  int8x16_t v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  int8x16_t *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  float v340;
  unint64_t v341;
  int8x16_t v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  int8x16_t *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int8x16_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  int8x16_t v360;
  float32x4_t v361;
  int8x16_t *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  float32x4_t v367;
  int v368;
  int8x16_t v369;
  float32x4_t v370;
  unsigned int v371;
  int8x16_t *v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  float v381;
  unint64_t v382;
  int8x16_t v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  int8x16_t *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  float v398;
  unint64_t v399;
  int8x16_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  int8x16_t *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  float v415;
  unint64_t v416;
  int8x16_t v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  int8x16_t *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  float v432;
  unint64_t v433;
  int8x16_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  int8x16_t *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  float v446;
  int8x16_t v447;
  int8x16_t *v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  float v455;
  int8x16_t v456;
  int8x16_t *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  int v463;
  float v464;
  int8x16_t *v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  int v471;
  float v472;
  int8x16_t *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  int8x16_t *v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  int v486;
  int8x16_t *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint8x8_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  int v497;
  int8x16_t *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  int v504;
  int8x16_t *v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  int8x16_t *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  int v517;
  int8x16_t *v518;
  unint64_t v519;
  int v520;
  int v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  char *v526;
  unint64_t v527;
  uint64_t v528;
  int v529;
  int v530;
  uint64_t v531;
  unsigned int *v532;
  uint64_t v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  char *i8;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  float32x4_t v554;
  int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  int v564;
  float v565;
  unsigned int v566;
  int v567;
  float v568;
  int v569;
  float v570;
  unsigned int v571;
  int v572;
  float v573;
  float v574;
  int8x16_t v575;
  unsigned int v576;
  int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  int v581;
  float v582;
  int v583;
  float v584;
  float32x4_t v585;
  int v586;
  float32x4_t v587;
  unsigned int v588;
  int v589;
  float v590;
  unsigned int v591;
  float32x4_t v592;
  float32x4_t v593;
  int8x16_t v594;
  int v595;
  float32x4_t v596;
  int8x16_t v597;
  float32x4_t v598;
  int8x16_t v599;
  unsigned int v600;
  float32x4_t v601;
  int v603;
  float32x4_t v604;
  unsigned int v605;
  float v606;
  uint64_t v607;
  int v608;
  float v609;
  int8x16_t v610;
  unsigned int v611;
  unsigned int v612;
  unsigned int v613;
  unsigned int v614;
  unsigned int v615;
  unsigned int v616;
  float32x4_t v617;
  float32x4_t v618;
  int8x16_t v619;
  int v620;
  float32x4_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int32x2_t v627;
  unsigned int v628;
  float32x4_t v629;
  float32x4_t v630;
  int8x16_t v631;
  int v632;
  float32x4_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  float32x4_t v637;
  int8x16_t v638;
  unsigned int v639;
  float v640;
  uint64_t v641;
  int v642;
  float v643;
  int8x16_t v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  float v651;
  uint64_t v652;
  int v653;
  float v654;
  int8x16_t v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  __int32 v661;
  uint64_t v662;
  int v663;
  int8x16_t v664;
  unsigned int v665;
  unsigned int v666;
  unsigned int v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int v670;
  float v671;
  uint64_t v672;
  int v673;
  float v674;
  int8x16_t v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  unsigned int v681;
  float32x4_t v682;
  int v683;
  int8x16_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  int8x16_t v690;
  unsigned int v691;
  float32x4_t v692;
  float32x4_t v693;
  int v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  unsigned int v698;
  unsigned int v699;
  float v700;
  uint64_t v701;
  int v702;
  float v703;
  int8x16_t v704;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  unsigned int v710;
  float v711;
  uint64_t v712;
  int v713;
  float v714;
  int8x16_t v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  unsigned int v719;
  unsigned int v720;
  unsigned int v721;
  float v722;
  uint64_t v723;
  int v724;
  float v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  unsigned int v729;
  unsigned int v730;
  float v731;
  uint64_t v732;
  int v733;
  float v734;
  int8x16_t v735;
  unsigned int v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  int *v740;
  float32x4_t v741;
  int v742;
  unsigned int v743;
  int8x16_t v744;
  int8x16_t v745;
  int v746;
  unsigned int v747;
  int v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  int v755;
  int8x16_t v756;
  int8x16_t v757;
  int8x16_t v758;
  int8x16_t v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  uint64_t v766;
  int v767;
  unint64_t v768;
  int v769;
  int v770;
  unsigned int *v771;
  unsigned int *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  unint64_t v783;
  char *v784;
  int v785;
  int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  unint64_t v798;
  unint64_t v799;
  unint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unsigned int v803;
  uint64_t v804;
  int v805[2];
  int v806;
  int v807;
  uint64_t v808;
  int8x16_t *v809;
  unint64_t v810;
  uint64_t v811;
  int8x16_t v812;
  unint64_t v813;
  float32x4_t v814;
  uint64_t v815;
  float32x4_t v816;
  uint64_t v817;
  _OWORD v818[7];
  __int128 v819;
  __int128 v820;
  __int128 v821;
  int v822;
  int v823;
  int v824;
  float32x4_t v825;
  unsigned int v826;
  uint64_t v827;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v827 = *MEMORY[0x1E0C80C00];
  v18 = *(unsigned int **)(v3 + 96);
  v19 = *(_QWORD *)(v3 + 48);
  v20 = *(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
  if ((int)v20 > 27)
    return 0xFFFFFFFFLL;
  v22 = v3;
  v23 = *(unsigned int *)(v3 + 4);
  v24 = v23 - 1;
  if ((int)v23 < 1)
    return 0;
  v25 = *(_DWORD *)(v3 + 8);
  if (v25 < 1)
    return 0;
  v26 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v26)
  {
    v28 = *(_DWORD *)v3 & 0xFF00;
    v766 = v3;
    v767 = *(_DWORD *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v18 == 0) + 4 * (v19 == 0));
    if (v28 == 1024)
    {
      LODWORD(v818[0]) = *(_DWORD *)(v3 + 4);
      v824 = v25;
      v17.i32[0] = 1.0;
      if (v18)
        v17.i32[0] = bswap32(*v18);
      v29 = *(int8x16_t *)*(_QWORD *)(v3 + 88);
      v30 = (unint64_t)*(int *)(v3 + 28) >> 4;
      v32 = *(int *)(v3 + 12);
      v31 = *(int *)(v3 + 16);
      if (v19)
      {
        v33 = (unint64_t)*(int *)(v3 + 32) >> 2;
        v34 = v19 + 4 * (v32 + v33 * v31);
        v803 = 1;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v803 = 0;
      }
      v46 = (float32x4_t)vrev32q_s8(v29);
      v12.f32[0] = 1.0 - v17.f32[0];
      v47 = *(_QWORD *)(v3 + 40) + 16 * (v32 + v31 * v30);
      v814 = v46;
      v816 = v17;
      v812 = *(int8x16_t *)*(_QWORD *)(v3 + 88);
      v808 = v12.i64[0];
      v799 = (unint64_t)*(int *)(v3 + 28) >> 4;
      v801 = v34;
      *(_QWORD *)v805 = v47;
      if (v26)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v26, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v23, v25);
        v49 = v48;
        v50 = v34;
        v51 = v33;
        if (v48)
          goto LABEL_1238;
        return 1;
      }
      v811 = 0;
      if (v19)
        v59 = v23;
      else
        v59 = 0;
      v51 = v33 - v59;
      v50 = v34;
      v60 = (int8x16_t *)v47;
      v61 = v23;
LABEL_906:
      v47 = v30 - v61;
      switch((int)v20)
      {
        case 0:
          v540 = v33;
          v541 = v34;
          v542 = v47 + (int)v23;
          v543 = v824;
          v544 = v824 - 1;
          i8 = v60[(v542 * v544) & (v542 >> 63)].i8;
          if (v542 < 0)
            v542 = -v542;
          v546 = v23;
          CGBlt_fillBytes(16 * v23, v824, 0, i8, 16 * v542);
          if (v19)
          {
            v547 = v51 + v546;
            v50 += 4 * ((v547 * v544) & (v547 >> 63));
            if (v547 >= 0)
              v51 += v546;
            else
              v51 = -v547;
            CGBlt_fillBytes(4 * v546, v543, 0, (char *)v50, 4 * v51);
          }
          v34 = v541;
          v33 = v540;
          goto LABEL_1234;
        case 1:
          v548 = (int)v23;
          v549 = v47 + (int)v23;
          if (v549 < 0)
          {
            v60 += v549 * (v824 - 1);
            v549 = -v549;
          }
          v550 = *(_QWORD *)(v766 + 88);
          v551 = v23;
          v552 = v824;
          if (v550)
            CGSFillDRAM64(v60, 16 * v549, 16 * v23, v824, v550, 16, 16, 1, 0, 0);
          else
            CGBlt_fillBytes(16 * v23, v824, 0, v60->i8, 16 * v549);
          v49 = v811;
          if (v19)
          {
            v740 = *(int **)(v766 + 96);
            if (!v740)
              v740 = (int *)&unk_1850012EC;
            v50 += 4 * (((v51 + v548) * (int)(v552 - 1)) & ((uint64_t)(v51 + v548) >> 63));
            if ((uint64_t)(v51 + v548) >= 0)
              v51 += v548;
            else
              v51 = -(uint64_t)(v51 + v548);
            CGBlt_fillBytes(4 * v551, v552, *v740, (char *)v50, 4 * v51);
          }
          v34 = v801;
          v47 = *(_QWORD *)v805;
          goto LABEL_1236;
        case 2:
          v553 = 4 * v803;
          if (v19)
          {
            v554 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
            do
            {
              v555 = v818[0];
              if (SLODWORD(v818[0]) >= 4)
              {
                v556 = (LODWORD(v818[0]) >> 2) + 1;
                do
                {
                  v557 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v50))
                                                                        * v12.f32[0])));
                  *v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(*v60)));
                  *(_DWORD *)v50 = v557;
                  v558 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 4)))
                                                                        * v12.f32[0])));
                  v60[1] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[1])));
                  *(_DWORD *)(v50 + 4) = v558;
                  v559 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 8)))
                                                                        * v12.f32[0])));
                  v60[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[2])));
                  *(_DWORD *)(v50 + 8) = v559;
                  v560 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v50 + 12)))
                                                                        * v12.f32[0])));
                  v60[3] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(v60[3])));
                  *(_DWORD *)(v50 + 12) = v560;
                  v60 += 4;
                  --v556;
                  v50 += 16 * v803;
                }
                while (v556 > 1);
                v555 = v818[0] & 3;
              }
              if (v555 >= 1)
              {
                v561 = v555 + 1;
                do
                {
                  v562 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v50))
                                                                        * v12.f32[0])));
                  *v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v554, (float32x4_t)vrev32q_s8(*v60)));
                  ++v60;
                  *(_DWORD *)v50 = v562;
                  v50 += v553;
                  --v561;
                }
                while (v561 > 1);
              }
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          v741 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v742 = v824;
          do
          {
            if ((int)v23 < 4)
            {
              v746 = v23;
            }
            else
            {
              v743 = (v23 >> 2) + 1;
              do
              {
                v744 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[1])));
                *v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(*v60)));
                v60[1] = v744;
                v745 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[3])));
                v60[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(v60[2])));
                v60[3] = v745;
                v60 += 4;
                --v743;
                v50 += 16 * v803;
              }
              while (v743 > 1);
              v746 = v23 & 3;
            }
            if (v746 >= 1)
            {
              v747 = v746 + 1;
              do
              {
                *v60 = vrev32q_s8((int8x16_t)vmlaq_f32(v46, v741, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += v553;
                --v747;
              }
              while (v747 > 1);
            }
            v60 += v47;
            v50 += 4 * v51;
            --v742;
          }
          while (v742);
          goto LABEL_1233;
        case 3:
          v563 = bswap32(v17.u32[0]);
          do
          {
            v564 = v818[0];
            do
            {
              v565 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              if (v565 <= 0.0)
              {
                v60->i64[0] = 0;
                v60->i64[1] = 0;
                *(_DWORD *)v50 = 0;
              }
              else if (v565 >= 1.0)
              {
                *v60 = v29;
                *(_DWORD *)v50 = v563;
              }
              else
              {
                *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32(v46, v565));
                *(_DWORD *)v50 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * v565));
              }
              ++v60;
              v50 += 4 * v803;
              --v564;
            }
            while (v564);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 4:
          v566 = bswap32(v17.u32[0]);
          do
          {
            v567 = v818[0];
            do
            {
              v568 = 1.0 - COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              if (v568 <= 0.0)
              {
                v60->i64[0] = 0;
                v60->i64[1] = 0;
                *(_DWORD *)v50 = 0;
              }
              else if (v568 >= 1.0)
              {
                *v60 = v29;
                *(_DWORD *)v50 = v566;
              }
              else
              {
                *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32(v46, v568));
                *(_DWORD *)v50 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * v568));
              }
              ++v60;
              v50 += 4 * v803;
              --v567;
            }
            while (v567);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 5:
          do
          {
            v569 = v818[0];
            do
            {
              v570 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]), v46, v570));
              ++v60;
              *(_DWORD *)v50 = bswap32(COERCE_UNSIGNED_INT((float)(v12.f32[0] * v570) + (float)(v17.f32[0] * v570)));
              v50 += 4 * v803;
              --v569;
            }
            while (v569);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 6:
          v571 = bswap32(v17.u32[0]);
          while (1)
          {
            v572 = v818[0];
            do
            {
              v573 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              v574 = 1.0 - v573;
              v575 = v29;
              v576 = v571;
              if ((float)(1.0 - v573) < 1.0)
              {
                if (v574 <= 0.0)
                  goto LABEL_960;
                v576 = bswap32(COERCE_UNSIGNED_INT(v573 + (float)(v17.f32[0] * v574)));
                v575 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v60), v46, v574));
              }
              *v60 = v575;
              *(_DWORD *)v50 = v576;
LABEL_960:
              ++v60;
              v50 += 4 * v803;
              --v572;
            }
            while (v572);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 7:
          if (v19)
          {
            do
            {
              v577 = v818[0];
              do
              {
                v578 = bswap32(COERCE_UNSIGNED_INT(v17.f32[0] * COERCE_FLOAT(bswap32(*(_DWORD *)v50))));
                *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]));
                ++v60;
                *(_DWORD *)v50 = v578;
                v50 += 4 * v803;
                --v577;
              }
              while (v577);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          v748 = v824;
          do
          {
            v749 = v23;
            do
            {
              *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]));
              ++v60;
              v50 += 4 * v803;
              --v749;
            }
            while (v749);
            v60 += v47;
            v50 += 4 * v51;
            --v748;
          }
          while (v748);
          goto LABEL_1233;
        case 8:
          if (v19)
          {
            do
            {
              v579 = v818[0];
              do
              {
                v580 = bswap32(COERCE_UNSIGNED_INT(v12.f32[0] * COERCE_FLOAT(bswap32(*(_DWORD *)v50))));
                *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]));
                ++v60;
                *(_DWORD *)v50 = v580;
                v50 += 4 * v803;
                --v579;
              }
              while (v579);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
            goto LABEL_1234;
          }
          v750 = v824;
          do
          {
            v751 = v23;
            do
            {
              *v60 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]));
              ++v60;
              v50 += 4 * v803;
              --v751;
            }
            while (v751);
            v60 += v47;
            v50 += 4 * v51;
            --v750;
          }
          while (v750);
          goto LABEL_1233;
        case 9:
          do
          {
            v581 = v818[0];
            do
            {
              v582 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v17.f32[0]), v46, 1.0 - v582));
              ++v60;
              *(_DWORD *)v50 = bswap32(COERCE_UNSIGNED_INT((float)(v17.f32[0] * v582) + (float)(v17.f32[0]
                                                                                              * (float)(1.0 - v582))));
              v50 += 4 * v803;
              --v581;
            }
            while (v581);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 10:
          do
          {
            v583 = v818[0];
            do
            {
              v584 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
              *v60 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v60), v12.f32[0]), v46, 1.0 - v584));
              ++v60;
              *(_DWORD *)v50 = bswap32(COERCE_UNSIGNED_INT((float)(v12.f32[0] * v584) + (float)(v17.f32[0]
                                                                                              * (float)(1.0 - v584))));
              v50 += 4 * v803;
              --v583;
            }
            while (v583);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 11:
          v585 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          if (!v19)
          {
            v752 = v824;
            do
            {
              v753 = v23;
              do
              {
                *v60 = vrev32q_s8((int8x16_t)vaddq_f32(v585, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += 4 * v803;
                --v753;
              }
              while (v753);
              v60 += v47;
              v50 += 4 * v51;
              --v752;
            }
            while (v752);
            goto LABEL_1233;
          }
          do
          {
            v586 = v818[0];
            do
            {
              v11.i32[0] = bswap32(*(_DWORD *)v50);
              v12.f32[0] = v17.f32[0] + v11.f32[0];
              if ((float)(v17.f32[0] + v11.f32[0]) > 1.0)
                v12.f32[0] = 1.0;
              v587 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
              v588 = bswap32(v12.u32[0]);
              v12 = (float32x4_t)vrev32q_s8(*v60);
              v11 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(v585, vsubq_f32(v587, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v12))));
              *v60++ = (int8x16_t)v11;
              *(_DWORD *)v50 = v588;
              v50 += 4 * v803;
              --v586;
            }
            while (v586);
            v60 += v47;
            v50 += 4 * v51;
            --v824;
          }
          while (v824);
          goto LABEL_1234;
        case 12:
          if (v19)
          {
            do
            {
              v589 = v818[0];
              do
              {
                v590 = v17.f32[0] + COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v590 > 1.0)
                  v590 = 1.0;
                *v60 = vrev32q_s8((int8x16_t)vaddq_f32(v46, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                *(_DWORD *)v50 = bswap32(LODWORD(v590));
                v50 += 4 * v803;
                --v589;
              }
              while (v589);
              v60 += v47;
              v50 += 4 * v51;
              --v824;
            }
            while (v824);
          }
          else
          {
            v754 = v824;
            do
            {
              v755 = v23;
              do
              {
                *v60 = vrev32q_s8((int8x16_t)vaddq_f32(v46, (float32x4_t)vrev32q_s8(*v60)));
                ++v60;
                v50 += 4 * v803;
                --v755;
              }
              while (v755);
              v60 += v47;
              v50 += 4 * v51;
              --v754;
            }
            while (v754);
LABEL_1233:
            v824 = 0;
          }
          goto LABEL_1234;
        case 13:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v591 = bswap32(v17.u32[0]);
          v592 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v593 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          v594 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v595 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v591;
                  goto LABEL_1004;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              v596 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              v597 = (int8x16_t)vmulq_f32(v596, v592);
              v599 = vbslq_s8(v594, (int8x16_t)vmlaq_f32((float32x4_t)v597, v593, v596), v597);
              v598 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v599, v592, 1.0 - v13.f32[0]), v599);
              *(float *)v599.i32 = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v599.i8, 0), v598);
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19)
                *(_DWORD *)v50 = bswap32(v599.u32[0]);
LABEL_1004:
              ++v60;
              v50 += 4 * v803;
              --v595;
            }
            while (v595);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 14:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v600 = bswap32(v17.u32[0]);
          v601 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          __asm { FMOV            V1.4S, #1.0 }
          while (1)
          {
            v603 = v818[0];
            do
            {
              if (v19)
              {
                v12.i32[0] = bswap32(*(_DWORD *)v50);
                if (v12.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v600;
                  goto LABEL_1016;
                }
              }
              else
              {
                v12.i32[0] = 1.0;
              }
              v11.f32[0] = (float)(v17.f32[0] + v12.f32[0]) - (float)(v12.f32[0] * v17.f32[0]);
              v604 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              v12 = (float32x4_t)vrev32q_s8((int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(v604, vsubq_f32(_Q1, v604), v601)));
              *v60 = (int8x16_t)v12;
              if (v19)
                *(_DWORD *)v50 = bswap32(v11.u32[0]);
LABEL_1016:
              ++v60;
              v50 += 4 * v803;
              --v603;
            }
            while (v603);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 15:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v605 = bswap32(v17.u32[0]);
          v606 = v46.f32[1];
          v607 = v46.i64[1];
          while (1)
          {
            v608 = v818[0];
            do
            {
              if (v19)
              {
                v609 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v609 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v605;
                  goto LABEL_1030;
                }
              }
              else
              {
                v609 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v610 = vrev32q_s8(*v60);
              PDAoverlayPDA(v825.f32, *(float *)v610.i32, *(float *)&v610.i32[1], *(float *)&v610.i32[2], *(float *)&v610.i32[3], v609, *(double *)v46.i64, v15, v16, v46.f32[0], v606, *(float *)&v607, *((float *)&v607 + 1), v17.f32[0]);
              v611 = bswap32(v825.u32[0]);
              v612 = bswap32(v825.u32[1]);
              v613 = bswap32(v825.u32[2]);
              v614 = bswap32(v825.u32[3]);
              if (v19)
              {
                v615 = bswap32(v826);
                v60->i32[0] = v611;
                v60->i32[1] = v612;
                v60->i32[2] = v613;
                v60->i32[3] = v614;
                *(_DWORD *)v50 = v615;
              }
              else
              {
                v60->i32[0] = v611;
                v60->i32[1] = v612;
                v60->i32[2] = v613;
                v60->i32[3] = v614;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1030:
              ++v60;
              v50 += 4 * v803;
              --v608;
            }
            while (v608);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 16:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v616 = bswap32(v17.u32[0]);
          v617 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v618 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          v619 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v620 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v616;
                  goto LABEL_1042;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              v621 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              v622 = (int8x16_t)vmulq_n_f32(v621, v17.f32[0]);
              v623 = (int8x16_t)vmulq_n_f32(v617, v13.f32[0]);
              v624 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v622, (float32x4_t)v623), v623, v622);
              v625 = vbslq_s8(v619, (int8x16_t)vmlaq_f32((float32x4_t)v624, v618, v621), v624);
              v627 = (int32x2_t)vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)).u64[0];
              v626 = (int8x16_t)vdupq_lane_s32(v627, 0);
              *(float *)v627.i32 = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(v627, 0), (float32x4_t)vbslq_s8(v626, (int8x16_t)vmlaq_n_f32((float32x4_t)v625, v617, 1.0 - v13.f32[0]), v625));
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19)
                *(_DWORD *)v50 = bswap32(v627.u32[0]);
LABEL_1042:
              ++v60;
              v50 += 4 * v803;
              --v620;
            }
            while (v620);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 17:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v628 = bswap32(v17.u32[0]);
          v629 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v630 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
          v11.i32[0] = 1.0;
          v631 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v17, v11)), 0);
          while (1)
          {
            v632 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v628;
                  goto LABEL_1054;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              v633 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              v634 = (int8x16_t)vmulq_n_f32(v633, v17.f32[0]);
              v635 = (int8x16_t)vmulq_n_f32(v629, v13.f32[0]);
              v636 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v635, (float32x4_t)v634), v635, v634);
              v638 = vbslq_s8(v631, (int8x16_t)vmlaq_f32((float32x4_t)v636, v630, v633), v636);
              v637 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v13, v11)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v638, v629, 1.0 - v13.f32[0]), v638);
              *(float *)v638.i32 = (float)(v13.f32[0] + v17.f32[0]) - (float)(v13.f32[0] * v17.f32[0]);
              v13 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v638.i8, 0), v637);
              *(int8x8_t *)v13.f32 = vrev32_s8(*(int8x8_t *)v13.f32);
              v60->i64[0] = v13.i64[0];
              v60->i32[2] = bswap32(v13.u32[2]);
              v60->i32[3] = bswap32(v13.u32[3]);
              if (v19)
                *(_DWORD *)v50 = bswap32(v638.u32[0]);
LABEL_1054:
              ++v60;
              v50 += 4 * v803;
              --v632;
            }
            while (v632);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 18:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v639 = bswap32(v17.u32[0]);
          v640 = v46.f32[1];
          v641 = v46.i64[1];
          while (1)
          {
            v642 = v818[0];
            do
            {
              if (v19)
              {
                v643 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v643 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v639;
                  goto LABEL_1068;
                }
              }
              else
              {
                v643 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v644 = vrev32q_s8(*v60);
              PDAcolordodgePDA(v825.f32, *(float *)v644.i32, *(float *)&v644.i32[1], *(float *)&v644.i32[2], *(float *)&v644.i32[3], v643, *(double *)v46.i64, v15, v16, v46.f32[0], v640, *(float *)&v641, *((float *)&v641 + 1), v17.f32[0]);
              v645 = bswap32(v825.u32[0]);
              v646 = bswap32(v825.u32[1]);
              v647 = bswap32(v825.u32[2]);
              v648 = bswap32(v825.u32[3]);
              if (v19)
              {
                v649 = bswap32(v826);
                v60->i32[0] = v645;
                v60->i32[1] = v646;
                v60->i32[2] = v647;
                v60->i32[3] = v648;
                *(_DWORD *)v50 = v649;
              }
              else
              {
                v60->i32[0] = v645;
                v60->i32[1] = v646;
                v60->i32[2] = v647;
                v60->i32[3] = v648;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1068:
              ++v60;
              v50 += 4 * v803;
              --v642;
            }
            while (v642);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 19:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v650 = bswap32(v17.u32[0]);
          v651 = v46.f32[1];
          v652 = v46.i64[1];
          while (1)
          {
            v653 = v818[0];
            do
            {
              if (v19)
              {
                v654 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v654 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v650;
                  goto LABEL_1082;
                }
              }
              else
              {
                v654 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v655 = vrev32q_s8(*v60);
              PDAcolorburnPDA(v825.f32, *(float *)v655.i32, *(float *)&v655.i32[1], *(float *)&v655.i32[2], *(float *)&v655.i32[3], v654, *(double *)v46.i64, v15, v16, v46.f32[0], v651, *(float *)&v652, *((float *)&v652 + 1), v17.f32[0]);
              v656 = v825.u32[1];
              v657 = v825.u32[2];
              v658 = v825.u32[3];
              if (v19)
              {
                v659 = bswap32(v826);
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v656);
                v60->i32[2] = bswap32(v657);
                v60->i32[3] = bswap32(v658);
                *(_DWORD *)v50 = v659;
              }
              else
              {
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v656);
                v60->i32[2] = bswap32(v657);
                v60->i32[3] = bswap32(v658);
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1082:
              ++v60;
              v50 += 4 * v803;
              --v653;
            }
            while (v653);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 20:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v660 = bswap32(v17.u32[0]);
          v661 = v46.i32[1];
          v662 = v46.i64[1];
          while (1)
          {
            v663 = v818[0];
            do
            {
              if (v19)
              {
                v13.i32[0] = bswap32(*(_DWORD *)v50);
                if (v13.f32[0] <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v660;
                  goto LABEL_1096;
                }
              }
              else
              {
                v13.i32[0] = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v664 = vrev32q_s8(*v60);
              PDAsoftlightPDA(&v825, *(float32x2_t *)v664.i8, *(float32_t *)&v664.i32[1], *(float *)&v664.i32[2], *(float *)&v664.i32[3], *(double *)v13.i64, *(int32x2_t *)v46.f32, v15, v16, v3, (uint64_t)v26, v4, v5, v6, v7, v8, (float32x2_t)__PAIR64__(v661, v46.u32[0]), *(float *)&v662, *((float *)&v662 + 1),
                v17.f32[0]);
              v665 = bswap32(v825.u32[0]);
              v666 = bswap32(v825.u32[1]);
              v667 = bswap32(v825.u32[2]);
              v668 = bswap32(v825.u32[3]);
              if (v19)
              {
                v669 = bswap32(v826);
                v60->i32[0] = v665;
                v60->i32[1] = v666;
                v60->i32[2] = v667;
                v60->i32[3] = v668;
                *(_DWORD *)v50 = v669;
              }
              else
              {
                v60->i32[0] = v665;
                v60->i32[1] = v666;
                v60->i32[2] = v667;
                v60->i32[3] = v668;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1096:
              ++v60;
              v50 += 4 * v803;
              --v663;
            }
            while (v663);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 21:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v670 = bswap32(v17.u32[0]);
          v671 = v46.f32[1];
          v672 = v46.i64[1];
          while (1)
          {
            v673 = v818[0];
            do
            {
              if (v19)
              {
                v674 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v674 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v670;
                  goto LABEL_1110;
                }
              }
              else
              {
                v674 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v675 = vrev32q_s8(*v60);
              PDAhardlightPDA(v825.f32, *(float *)v675.i32, *(float *)&v675.i32[1], *(float *)&v675.i32[2], *(float *)&v675.i32[3], v674, *(double *)v46.i64, v15, v16, v46.f32[0], v671, *(float *)&v672, *((float *)&v672 + 1), v17.f32[0]);
              v676 = bswap32(v825.u32[0]);
              v677 = bswap32(v825.u32[1]);
              v678 = bswap32(v825.u32[2]);
              v679 = bswap32(v825.u32[3]);
              if (v19)
              {
                v680 = bswap32(v826);
                v60->i32[0] = v676;
                v60->i32[1] = v677;
                v60->i32[2] = v678;
                v60->i32[3] = v679;
                *(_DWORD *)v50 = v680;
              }
              else
              {
                v60->i32[0] = v676;
                v60->i32[1] = v677;
                v60->i32[2] = v678;
                v60->i32[3] = v679;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1110:
              ++v60;
              v50 += 4 * v803;
              --v673;
            }
            while (v673);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 22:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v681 = bswap32(v17.u32[0]);
          v682 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          while (1)
          {
            v683 = v818[0];
            do
            {
              if (v19)
              {
                v11.i32[0] = bswap32(*(_DWORD *)v50);
                if (v11.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v681;
                  goto LABEL_1122;
                }
              }
              else
              {
                v11.i32[0] = 1.0;
              }
              v684 = *v60;
              *(float *)v684.i32 = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
              v685 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v60));
              v686 = vaddq_f32(v685, v682);
              v687 = vmulq_n_f32(v685, v17.f32[0]);
              v688 = vmulq_n_f32(v682, v11.f32[0]);
              v689 = vsubq_f32(v686, v687);
              v690 = (int8x16_t)vsubq_f32(v687, v688);
              v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v684.i8, 0), vaddq_f32(vsubq_f32(v689, v688), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v690), (int8x16_t)vnegq_f32((float32x4_t)v690), v690)));
              *(int8x8_t *)v60->i8 = vrev32_s8(*(int8x8_t *)v11.f32);
              v60->i32[2] = bswap32(v11.u32[2]);
              v60->i32[3] = bswap32(v11.u32[3]);
              if (v19)
                *(_DWORD *)v50 = bswap32(v684.u32[0]);
LABEL_1122:
              ++v60;
              v50 += 4 * v803;
              --v683;
            }
            while (v683);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 23:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v691 = bswap32(v17.u32[0]);
          v692 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v46);
          v693.i64[0] = 0xC0000000C0000000;
          v693.i64[1] = 0xC0000000C0000000;
          while (1)
          {
            v694 = v818[0];
            do
            {
              if (v19)
              {
                v11.i32[0] = bswap32(*(_DWORD *)v50);
                if (v11.f32[0] <= 0.0)
                {
                  *v60 = v29;
                  *(_DWORD *)v50 = v691;
                  goto LABEL_1135;
                }
              }
              else
              {
                v11.i32[0] = 1.0;
              }
              v695 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0);
              v11.f32[0] = (float)(v11.f32[0] + v17.f32[0]) - (float)(v11.f32[0] * v17.f32[0]);
              v696 = vsubq_f32(v695, (float32x4_t)vrev32q_s8(*v60));
              v697 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), vmlaq_f32(vaddq_f32(v696, v692), v693, vmulq_f32(v692, v696)));
              if (v19)
              {
                v698 = v11.i32[0];
                *(int8x8_t *)v11.f32 = vrev32_s8(*(int8x8_t *)v697.f32);
                v60->i64[0] = v11.i64[0];
                v60->i32[2] = bswap32(v697.u32[2]);
                v60->i32[3] = bswap32(v697.u32[3]);
                *(_DWORD *)v50 = bswap32(v698);
              }
              else
              {
                *(int8x8_t *)v11.f32 = vrev32_s8(*(int8x8_t *)v697.f32);
                v60->i64[0] = v11.i64[0];
                v60->i32[2] = bswap32(v697.u32[2]);
                v60->i32[3] = bswap32(v697.u32[3]);
              }
LABEL_1135:
              ++v60;
              v50 += 4 * v803;
              --v694;
            }
            while (v694);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1234;
          }
        case 24:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v699 = bswap32(v17.u32[0]);
          v700 = v46.f32[1];
          v701 = v46.i64[1];
          while (1)
          {
            v702 = v818[0];
            do
            {
              if (v19)
              {
                v703 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v703 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v699;
                  goto LABEL_1149;
                }
              }
              else
              {
                v703 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v704 = vrev32q_s8(*v60);
              PDAhuePDA(v825.f32, *(float *)v704.i32, *(float *)&v704.i32[1], *(float *)&v704.i32[2], *(float *)&v704.i32[3], v703, *(double *)v46.i64, v15, v16, v46.f32[0], v700, *(float *)&v701, *((float *)&v701 + 1), v17.f32[0]);
              v705 = bswap32(v825.u32[0]);
              v706 = bswap32(v825.u32[1]);
              v707 = bswap32(v825.u32[2]);
              v708 = bswap32(v825.u32[3]);
              if (v19)
              {
                v709 = bswap32(v826);
                v60->i32[0] = v705;
                v60->i32[1] = v706;
                v60->i32[2] = v707;
                v60->i32[3] = v708;
                *(_DWORD *)v50 = v709;
              }
              else
              {
                v60->i32[0] = v705;
                v60->i32[1] = v706;
                v60->i32[2] = v707;
                v60->i32[3] = v708;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1149:
              ++v60;
              v50 += 4 * v803;
              --v702;
            }
            while (v702);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 25:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v710 = bswap32(v17.u32[0]);
          v711 = v46.f32[1];
          v712 = v46.i64[1];
          while (1)
          {
            v713 = v818[0];
            do
            {
              if (v19)
              {
                v714 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v714 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v710;
                  goto LABEL_1163;
                }
              }
              else
              {
                v714 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v715 = vrev32q_s8(*v60);
              PDAsaturationPDA(v825.f32, *(float *)v715.i32, *(float *)&v715.i32[1], *(float *)&v715.i32[2], *(float *)&v715.i32[3], v714, *(double *)v46.i64, v15, v16, v46.f32[0], v711, *(float *)&v712, *((float *)&v712 + 1), v17.f32[0]);
              v716 = bswap32(v825.u32[0]);
              v717 = bswap32(v825.u32[1]);
              v718 = bswap32(v825.u32[2]);
              v719 = bswap32(v825.u32[3]);
              if (v19)
              {
                v720 = bswap32(v826);
                v60->i32[0] = v716;
                v60->i32[1] = v717;
                v60->i32[2] = v718;
                v60->i32[3] = v719;
                *(_DWORD *)v50 = v720;
              }
              else
              {
                v60->i32[0] = v716;
                v60->i32[1] = v717;
                v60->i32[2] = v718;
                v60->i32[3] = v719;
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1163:
              ++v60;
              v50 += 4 * v803;
              --v713;
            }
            while (v713);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 26:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v721 = bswap32(v17.u32[0]);
          v722 = v46.f32[1];
          v723 = v46.i64[1];
          while (1)
          {
            v724 = v818[0];
            do
            {
              if (v19)
              {
                v725 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
                if (v725 <= 0.0)
                {
                  *v60 = v812;
                  *(_DWORD *)v50 = v721;
                  goto LABEL_1177;
                }
              }
              else
              {
                v725 = 1.0;
              }
              v825 = 0uLL;
              v826 = 0;
              v765 = vrev32q_s8(*v60);
              PDAluminosityPDA(v825.f32, v46.f32[0], v722, *(float *)&v723, *((float *)&v723 + 1), v17.f32[0], *(double *)v46.i64, v15, v16, *(float *)v765.i32, *(float *)&v765.i32[1], *(float *)&v765.i32[2], *(float *)&v765.i32[3], v725);
              v726 = v825.u32[1];
              v727 = v825.u32[2];
              v728 = v825.u32[3];
              if (v19)
              {
                v729 = bswap32(v826);
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v726);
                v60->i32[2] = bswap32(v727);
                v60->i32[3] = bswap32(v728);
                *(_DWORD *)v50 = v729;
              }
              else
              {
                v60->i32[0] = bswap32(v825.u32[0]);
                v60->i32[1] = bswap32(v726);
                v60->i32[2] = bswap32(v727);
                v60->i32[3] = bswap32(v728);
              }
              v46.i64[0] = v814.i64[0];
              v17.i32[0] = v816.i32[0];
LABEL_1177:
              ++v60;
              v50 += 4 * v803;
              --v724;
            }
            while (v724);
            v60 += v47;
            v50 += 4 * v51;
            if (!--v824)
              goto LABEL_1193;
          }
        case 27:
          if (v17.f32[0] <= 0.0)
            goto LABEL_1234;
          v730 = bswap32(v17.u32[0]);
          v731 = v46.f32[1];
          v732 = v46.i64[1];
          break;
        default:
          goto LABEL_1235;
      }
LABEL_1182:
      v733 = v818[0];
      while (v19)
      {
        v734 = COERCE_FLOAT(bswap32(*(_DWORD *)v50));
        if (v734 > 0.0)
          goto LABEL_1187;
        *v60 = v812;
        *(_DWORD *)v50 = v730;
LABEL_1191:
        ++v60;
        v50 += 4 * v803;
        if (!--v733)
        {
          v60 += v47;
          v50 += 4 * v51;
          if (!--v824)
          {
LABEL_1193:
            LODWORD(v20) = v767;
            v30 = v799;
            v34 = v801;
LABEL_1234:
            v47 = *(_QWORD *)v805;
LABEL_1235:
            v49 = v811;
LABEL_1236:
            if (!v49)
              return 1;
            v823 = 0;
            v822 = 0;
LABEL_1238:
            if (!shape_enum_clip_next(v49, &v823, &v822, v818, &v824))
              goto LABEL_1242;
            v811 = v49;
            v60 = (int8x16_t *)(v47 + 16 * v30 * v822 + 16 * v823);
            v61 = SLODWORD(v818[0]);
            if (v19)
            {
              v50 = v34 + 4 * v33 * v822 + 4 * v823;
              v51 = v33 - SLODWORD(v818[0]);
            }
            LODWORD(v23) = v818[0];
            v46 = v814;
            v17 = v816;
            v29 = v812;
            v12.i64[0] = v808;
            goto LABEL_906;
          }
          goto LABEL_1182;
        }
      }
      v734 = 1.0;
LABEL_1187:
      v825 = 0uLL;
      v826 = 0;
      v735 = vrev32q_s8(*v60);
      PDAluminosityPDA(v825.f32, *(float *)v735.i32, *(float *)&v735.i32[1], *(float *)&v735.i32[2], *(float *)&v735.i32[3], v734, *(double *)v46.i64, v15, v16, v46.f32[0], v731, *(float *)&v732, *((float *)&v732 + 1), v17.f32[0]);
      v736 = v825.u32[1];
      v737 = v825.u32[2];
      v738 = v825.u32[3];
      if (v19)
      {
        v739 = bswap32(v826);
        v60->i32[0] = bswap32(v825.u32[0]);
        v60->i32[1] = bswap32(v736);
        v60->i32[2] = bswap32(v737);
        v60->i32[3] = bswap32(v738);
        *(_DWORD *)v50 = v739;
      }
      else
      {
        v60->i32[0] = bswap32(v825.u32[0]);
        v60->i32[1] = bswap32(v736);
        v60->i32[2] = bswap32(v737);
        v60->i32[3] = bswap32(v738);
      }
      v46.i64[0] = v814.i64[0];
      v17.i32[0] = v816.i32[0];
      goto LABEL_1191;
    }
    LODWORD(v818[0]) = *(_DWORD *)(v3 + 4);
    v824 = v25;
    v35 = *(_QWORD *)(v3 + 40);
    v37 = *(int *)(v3 + 12);
    v36 = *(int *)(v3 + 16);
    v38 = (unint64_t)*(int *)(v3 + 28) >> 4;
    if (v19)
    {
      v783 = (unint64_t)*(int *)(v3 + 32) >> 2;
      v784 = (char *)(v19 + 4 * (v37 + v783 * v36));
      v39 = 0xFFFFFFFFLL;
    }
    else
    {
      v783 = 0;
      v784 = 0;
      v39 = 0;
    }
    v52 = v23;
    v53 = (int)v23;
    v54 = *(int8x16_t **)(v22 + 88);
    v782 = v35 + 16 * (v37 + v38 * v36);
    v55 = *(_DWORD *)(v22 + 56);
    v56 = *(_DWORD *)(v22 + 60);
    v810 = (unint64_t)*(int *)(v22 + 76) >> 4;
    if (v28 != 256)
    {
      v787 = *(_DWORD *)(v22 + 64);
      v786 = *(_DWORD *)(v22 + 68);
      if (v18)
      {
        v57 = (unint64_t)*(int *)(v22 + 80) >> 2;
        v58 = 1;
      }
      else
      {
        v57 = 0;
        v58 = 0;
      }
      v39 &= 1u;
      v809 = &v54[v810 * v786];
      if (v26)
      {
        v84 = v18;
        v769 = *(_DWORD *)(v22 + 60);
        v770 = *(_DWORD *)(v22 + 56);
        v815 = v58;
        v817 = v39;
        v83 = 1;
        v802 = *(_QWORD *)(v22 + 88);
        v85 = v802;
        goto LABEL_53;
      }
      v90 = v52;
      v813 = v783 - (int)v39 * (int)v52;
      if (&v54[v810 * v786])
      {
        v93 = v56 % v786;
        v769 = v56 % v786;
        v789 = *(_QWORD *)(v22 + 88);
        v94 = &v54[v810 * v93];
        v95 = v55 % v787;
        i64 = (uint64_t)v94[v95].i64;
        v91 = (unint64_t)&v94[v787];
        v770 = v95;
        v788 = 0;
        if ((_DWORD)v58)
        {
          v96 = (uint64_t)&v18[v57 * v93 + v95];
          v785 = 1;
          v87 = (unsigned int *)v96;
        }
        else
        {
          v785 = 1;
          v96 = (uint64_t)v18;
          v87 = v18;
        }
        v54 = &v94[v95];
        goto LABEL_64;
      }
      v769 = *(_DWORD *)(v22 + 60);
      v770 = *(_DWORD *)(v22 + 56);
      v785 = 1;
      v91 = *(_QWORD *)(v22 + 88);
      i64 = v91;
      v92 = (unint64_t)*(int *)(v22 + 76) >> 4;
LABEL_61:
      v788 = 0;
      v789 = (uint64_t)v54;
      v810 = v92 - v53;
      v57 -= (int)v58 * (int)v90;
      v96 = (uint64_t)v18;
      v87 = v18;
LABEL_64:
      v88 = v784;
      v97 = (int8x16_t *)v782;
      goto LABEL_66;
    }
    if (v18)
    {
      v57 = (unint64_t)*(int *)(v22 + 80) >> 2;
      v18 += v55 + v57 * v56;
      v58 = 0xFFFFFFFFLL;
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v54 += v55 + v810 * v56;
    if (v810 == v38 && (uint64_t)(v782 - (_QWORD)v54) >= 1)
    {
      if (v53 >= (uint64_t)((v782 - (unint64_t)v54) >> 4))
      {
        v782 += 16 * v24;
        v54 += v24;
        v784 += 4 * (int)(v39 & v24);
        v83 = -1;
        v810 = v38;
        v18 += (int)(v58 & v24);
        goto LABEL_48;
      }
      v81 = v25 - 1;
      v82 = &v54[v38 * v81];
      if (v782 <= (unint64_t)&v82[v24])
      {
        v782 += 16 * v38 * v81;
        v38 = -(uint64_t)v38;
        v98 = &v784[4 * v783 * v81];
        v783 = -(uint64_t)v783;
        v784 = v98;
        v18 += v57 * v81;
        v39 &= 1u;
        v57 = -(uint64_t)v57;
        v58 &= 1u;
        v83 = 1;
        v54 = v82;
        v810 = v38;
        goto LABEL_48;
      }
    }
    v39 &= 1u;
    v58 &= 1u;
    v83 = 1;
LABEL_48:
    v769 = *(_DWORD *)(v22 + 60);
    v770 = *(_DWORD *)(v22 + 56);
    if (v26)
    {
      v84 = v18;
      v815 = v58;
      v817 = v39;
      v802 = 0;
      v809 = 0;
      v85 = -1;
      v787 = v810;
      v786 = v57;
LABEL_53:
      v785 = v83;
      shape_enum_clip_alloc(v2, v39, (int *)v26, v83, v38, 1, *(_DWORD *)(v22 + 104), *(_DWORD *)(v22 + 108), v52, v25);
      v49 = v86;
      v18 = v84;
      v804 = (uint64_t)v84;
      v87 = v84;
      v88 = v784;
      v813 = v783;
      if (!v86)
        return 1;
      while (2)
      {
        if (!shape_enum_clip_next(v49, &v823, &v822, v818, &v824))
        {
LABEL_1242:
          v80 = (void *)v49;
LABEL_1243:
          free(v80);
          return 1;
        }
        v788 = v49;
        v789 = (uint64_t)v54;
        if (v809)
        {
          v97 = (int8x16_t *)(v782 + 16 * v38 * v822 + 16 * v823);
          v516 = (v822 + *(_DWORD *)(v22 + 60)) % v786;
          v53 = SLODWORD(v818[0]);
          v517 = (v823 + *(_DWORD *)(v22 + 56)) % v787;
          v518 = &v54[v810 * v516];
          i64 = (uint64_t)v518[v517].i64;
          v91 = (unint64_t)&v518[v787];
          v39 = v817;
          if ((_DWORD)v817)
            v88 = &v784[4 * v783 * v822 + 4 * v823];
          v519 = v813;
          if ((_DWORD)v817)
            v519 = v783 - SLODWORD(v818[0]);
          v813 = v519;
          v58 = v815;
          v96 = v804;
          if ((_DWORD)v815)
          {
            v96 = (uint64_t)&v18[v57 * v516 + v517];
            v87 = (unsigned int *)v96;
          }
          v90 = LODWORD(v818[0]);
          v54 = &v518[v517];
          v769 = (v822 + *(_DWORD *)(v22 + 60)) % v786;
          v770 = (v823 + *(_DWORD *)(v22 + 56)) % v787;
        }
        else
        {
          v520 = v823 * v785;
          v90 = LODWORD(v818[0]);
          v521 = LODWORD(v818[0]) * v785;
          v97 = (int8x16_t *)(v782 + 16 * v38 * v822 + 16 * v823 * v785);
          v53 = LODWORD(v818[0]) * v785;
          v54 += v822 * v787 + v823 * v785;
          v39 = v817;
          if ((_DWORD)v817)
            v88 = &v784[4 * v783 * v822 + 4 * v520];
          v522 = v813;
          if ((_DWORD)v817)
            v522 = v783 - v521;
          v810 = v787 - v521;
          v813 = v522;
          v523 = (uint64_t)&v18[v822 * v786 + v520];
          v524 = v786 - v521;
          v58 = v815;
          if ((_DWORD)v815)
          {
            v87 = (unsigned int *)v523;
            v57 = v524;
          }
          v91 = v85;
          i64 = v802;
          v96 = v804;
        }
LABEL_66:
        v817 = v39;
        v815 = v58;
        v99 = v38 - v53;
        v800 = v57;
        switch((int)v20)
        {
          case 0:
            v771 = v18;
            v802 = i64;
            v804 = v96;
            v100 = v38 - v53;
            v85 = v91;
            v101 = (int)v90;
            v102 = v38 - v53 - (int)v90;
            v103 = v90 - 1;
            v104 = &v97[-(int)v90 + 1];
            v105 = v100 + (int)v90;
            if (v785 >= 0)
            {
              v104 = v97;
              v102 = v105;
            }
            v106 = v824;
            v107 = v824 - 1;
            v108 = v104[(v102 * v107) & (v102 >> 63)].i8;
            if (v102 < 0)
              v102 = -v102;
            v109 = v90;
            CGBlt_fillBytes(16 * v90, v824, 0, v108, 16 * v102);
            if ((_DWORD)v817)
            {
              if (v785 < 0)
              {
                v110 = v813 - v101;
                v88 -= 4 * v103;
              }
              else
              {
                v110 = v813 + v101;
              }
              v88 += 4 * ((v110 * v107) & (v110 >> 63));
              if (v110 < 0)
                v110 = -v110;
              v813 = v110;
              CGBlt_fillBytes(4 * v109, v106, 0, v88, 4 * v110);
            }
            goto LABEL_824;
          case 1:
            v111 = *(unsigned __int8 *)(v22 + 1);
            if (v111 == 2)
            {
              v112 = v90;
              if ((int)v90 >= 2 && (16 * v787) <= 0x40)
              {
                v9.i32[0] = 16 * v787;
                v492 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9.f32);
                v492.i16[0] = vaddlv_u8(v492);
                if (v492.i32[0] <= 1u)
                {
                  v802 = i64;
                  v804 = v96;
                  v493 = v99;
                  v85 = v91;
                  v806 = v824;
                  v54 = (int8x16_t *)v789;
                  CGSFillDRAM64(v97, 16 * (v90 + v493), 16 * v90, v824, v789, 16 * v810, 16 * v787, v786, 16 * v770, v769);
                  if ((_DWORD)v817)
                  {
                    v49 = v788;
                    if ((_DWORD)v815)
                      CGSFillDRAM64(v88, 4 * (v112 + v813), 4 * v112, v806, (uint64_t)v18, 4 * v57, 4 * v787, v786, 4 * v770, v769);
                    else
                      CGBlt_fillBytes(4 * v112, v806, 32831, v88, 4 * (v112 + v813));
                  }
                  else
                  {
                    v49 = v788;
                  }
                  if (!v49)
                    return 1;
                  goto LABEL_862;
                }
              }
            }
            else
            {
              v112 = v90;
              if (v111 == 1)
              {
                v113 = v99;
                v802 = i64;
                v804 = v96;
                v114 = (int)v90;
                v771 = v18;
                v85 = v91;
                if (v785 < 0)
                {
                  v115 = v810 - (int)v90;
                  v54 += -(int)v90 + 1;
                  v116 = v113 - (int)v90;
                  v97 += -(int)v90 + 1;
                }
                else
                {
                  v115 = v810 + (int)v90;
                  v116 = v113 + (int)v90;
                }
                v525 = v824 - 1;
                v526 = v54[(v115 * v525) & (v115 >> 63)].i8;
                if (v115 >= 0)
                  v527 = v115;
                else
                  v527 = -v115;
                if (v116 >= 0)
                  LODWORD(v528) = v116;
                else
                  v528 = -v116;
                v810 = v527;
                v807 = v824;
                v529 = v90;
                CGBlt_copyBytes(16 * v90, v824, v526, v97[(v116 * v525) & (v116 >> 63)].i8, 16 * v527, 16 * v528);
                if ((_DWORD)v817)
                {
                  v530 = 4 * v529;
                  v49 = v788;
                  v54 = (int8x16_t *)v789;
                  if ((_DWORD)v815)
                  {
                    v531 = v800 - v114;
                    v532 = &v87[-v529 + 1];
                    v533 = v813 - v114;
                    v534 = &v88[-4 * v529 + 4];
                    if (v785 >= 0)
                    {
                      v532 = v87;
                      v534 = v88;
                      v531 = v800 + v114;
                      v533 = v813 + v114;
                    }
                    v535 = (v531 * v525) & (v531 >> 63);
                    v87 = &v532[v535];
                    if (v531 >= 0)
                      v57 = v531;
                    else
                      v57 = -v531;
                    v88 = &v534[4 * ((v533 * v525) & (v533 >> 63))];
                    if (v533 >= 0)
                      v536 = v533;
                    else
                      v536 = -v533;
                    v813 = v536;
                    CGBlt_copyBytes(v530, v807, (char *)&v532[v535], v88, 4 * v57, 4 * v536);
LABEL_826:
                    v18 = v771;
                    LODWORD(v20) = v767;
                    if (!v49)
                      return 1;
                    goto LABEL_862;
                  }
                  v537 = v813 - v114;
                  v538 = &v88[-4 * v529 + 4];
                  if (v785 >= 0)
                  {
                    v538 = v88;
                    v537 = v813 + v114;
                  }
                  v539 = (v537 * v525) & (v537 >> 63);
                  v88 = &v538[4 * v539];
                  if (v537 < 0)
                    v537 = -v537;
                  v813 = v537;
                  CGBlt_fillBytes(v530, v807, 32831, &v538[4 * v539], 4 * v537);
                }
                else
                {
LABEL_824:
                  v49 = v788;
                  v54 = (int8x16_t *)v789;
                }
                v57 = v800;
                goto LABEL_826;
              }
            }
            if (!(_DWORD)v39)
            {
              v503 = v824;
              do
              {
                v504 = v112;
                do
                {
                  *v97 = *v54;
                  v505 = &v54[v785];
                  if ((unint64_t)v505 >= v91)
                    v506 = -(uint64_t)v787;
                  else
                    v506 = 0;
                  v87 += (int)v58 + v506;
                  v54 = &v505[v506];
                  v97 += v785;
                  --v504;
                }
                while (v504);
                if (v809)
                {
                  v507 = i64 + 16 * v810;
                  if (v507 >= (unint64_t)v809)
                    v508 = -(uint64_t)(v57 * v786);
                  else
                    v508 = 0;
                  v96 += 4 * v57 + 4 * v508;
                  if (v507 >= (unint64_t)v809)
                    v509 = -(uint64_t)(v810 * v786);
                  else
                    v509 = 0;
                  i64 = v507 + 16 * v509;
                  v91 += 16 * v509 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v503;
              }
              while (v503);
              goto LABEL_844;
            }
            v494 = 4 * (int)v39;
            v495 = 16 * v785;
            if ((_DWORD)v58)
            {
              v496 = v824;
              do
              {
                v497 = v112;
                do
                {
                  *v97 = *v54;
                  *(_DWORD *)v88 = *v87;
                  v498 = &v54[v785];
                  if ((unint64_t)v498 >= v91)
                    v499 = -(uint64_t)v787;
                  else
                    v499 = 0;
                  v87 += (int)v58 + v499;
                  v54 = &v498[v499];
                  v88 += v494;
                  v97 = (int8x16_t *)((char *)v97 + v495);
                  --v497;
                }
                while (v497);
                if (v809)
                {
                  v500 = i64 + 16 * v810;
                  if (v500 >= (unint64_t)v809)
                    v501 = -(uint64_t)(v57 * v786);
                  else
                    v501 = 0;
                  v96 += 4 * v57 + 4 * v501;
                  if (v500 >= (unint64_t)v809)
                    v502 = -(uint64_t)(v810 * v786);
                  else
                    v502 = 0;
                  i64 = v500 + 16 * v502;
                  v91 += 16 * v502 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v496;
              }
              while (v496);
LABEL_844:
              v802 = i64;
              v804 = v96;
              v85 = v91;
              v824 = 0;
              goto LABEL_861;
            }
            do
            {
              v510 = v818[0];
              do
              {
                *v97 = *v54;
                *(_DWORD *)v88 = 32831;
                v511 = &v54[v785];
                if ((unint64_t)v511 >= v91)
                  v512 = -(uint64_t)v787;
                else
                  v512 = 0;
                v87 += v512;
                v54 = &v511[v512];
                v88 += v494;
                v97 = (int8x16_t *)((char *)v97 + v495);
                --v510;
              }
              while (v510);
              if (v809)
              {
                v513 = i64 + 16 * v810;
                if (v513 >= (unint64_t)v809)
                  v514 = -(uint64_t)(v57 * v786);
                else
                  v514 = 0;
                v96 += 4 * v57 + 4 * v514;
                if (v513 >= (unint64_t)v809)
                  v515 = -(uint64_t)(v810 * v786);
                else
                  v515 = 0;
                i64 = v513 + 16 * v515;
                v91 += 16 * v515 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 2:
            if (!(_DWORD)v39)
            {
              v444 = v824;
              while (1)
              {
                v445 = v90;
                do
                {
                  v446 = COERCE_FLOAT(bswap32(*v87));
                  if (v446 >= 1.0)
                  {
                    v447 = *v54;
                  }
                  else
                  {
                    if (v446 <= 0.0)
                      goto LABEL_678;
                    v447 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v54), (float32x4_t)vrev32q_s8(*v97), 1.0 - v446));
                  }
                  *v97 = v447;
LABEL_678:
                  v448 = &v54[v785];
                  if ((unint64_t)v448 >= v91)
                    v449 = -(uint64_t)v787;
                  else
                    v449 = 0;
                  v87 += (int)v58 + v449;
                  v54 = &v448[v449];
                  v97 += v785;
                  --v445;
                }
                while (v445);
                if (v809)
                {
                  v450 = i64 + 16 * v810;
                  if (v450 >= (unint64_t)v809)
                    v451 = -(uint64_t)(v57 * v786);
                  else
                    v451 = 0;
                  v96 += 4 * v57 + 4 * v451;
                  if (v450 >= (unint64_t)v809)
                    v452 = -(uint64_t)(v810 * v786);
                  else
                    v452 = 0;
                  i64 = v450 + 16 * v452;
                  v91 += 16 * v452 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                v824 = --v444;
                if (!v444)
                  goto LABEL_860;
              }
            }
            do
            {
              v117 = v818[0];
              do
              {
                v118 = COERCE_FLOAT(bswap32(*v87));
                v119 = v118;
                if (v118 >= 1.0)
                {
                  *v97 = *v54;
                  *(_DWORD *)v88 = *v87;
                }
                else if (v118 > 0.0)
                {
                  v120 = bswap32(COERCE_UNSIGNED_INT(v118 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v88))
                                                                  * (float)(1.0 - v118))));
                  *v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v54), (float32x4_t)vrev32q_s8(*v97), 1.0 - v119));
                  *(_DWORD *)v88 = v120;
                }
                v121 = &v54[v785];
                if ((unint64_t)v121 >= v91)
                  v122 = -(uint64_t)v787;
                else
                  v122 = 0;
                v87 += (int)v58 + v122;
                v54 = &v121[v122];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v117;
              }
              while (v117);
              if (v809)
              {
                v123 = i64 + 16 * v810;
                if (v123 >= (unint64_t)v809)
                  v124 = -(uint64_t)(v57 * v786);
                else
                  v124 = 0;
                v96 += 4 * v57 + 4 * v124;
                if (v123 >= (unint64_t)v809)
                  v125 = -(uint64_t)(v810 * v786);
                else
                  v125 = 0;
                i64 = v123 + 16 * v125;
                v91 += 16 * v125 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
LABEL_860:
            v802 = i64;
            v804 = v96;
            v85 = v91;
LABEL_861:
            v49 = v788;
            v54 = (int8x16_t *)v789;
            if (!v788)
              return 1;
LABEL_862:
            v823 = 0;
            v822 = 0;
            continue;
          case 3:
            if ((_DWORD)v58)
            {
              do
              {
                v126 = v818[0];
                do
                {
                  v127 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                  v128 = v127;
                  if (v127 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)v88 = 0;
                  }
                  else if (v127 >= 1.0)
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = *v87;
                  }
                  else
                  {
                    v129 = bswap32(COERCE_UNSIGNED_INT(v127 * COERCE_FLOAT(bswap32(*v87))));
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v128));
                    *(_DWORD *)v88 = v129;
                  }
                  v130 = &v54[v785];
                  if ((unint64_t)v130 >= v91)
                    v131 = -(uint64_t)v787;
                  else
                    v131 = 0;
                  v87 += (int)v58 + v131;
                  v54 = &v130[v131];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v126;
                }
                while (v126);
                if (v809)
                {
                  v132 = i64 + 16 * v810;
                  if (v132 >= (unint64_t)v809)
                    v133 = -(uint64_t)(v57 * v786);
                  else
                    v133 = 0;
                  v96 += 4 * v57 + 4 * v133;
                  if (v132 >= (unint64_t)v809)
                    v134 = -(uint64_t)(v810 * v786);
                  else
                    v134 = 0;
                  i64 = v132 + 16 * v134;
                  v91 += 16 * v134 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              v453 = v824;
              do
              {
                v454 = v90;
                do
                {
                  v455 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                  if (v455 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else
                  {
                    if (v455 >= 1.0)
                      v456 = *v54;
                    else
                      v456 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v455));
                    *v97 = v456;
                  }
                  v457 = &v54[v785];
                  if ((unint64_t)v457 >= v91)
                    v458 = -(uint64_t)v787;
                  else
                    v458 = 0;
                  v87 += v458;
                  v54 = &v457[v458];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v454;
                }
                while (v454);
                if (v809)
                {
                  v459 = i64 + 16 * v810;
                  if (v459 >= (unint64_t)v809)
                    v460 = -(uint64_t)(v57 * v786);
                  else
                    v460 = 0;
                  v96 += 4 * v57 + 4 * v460;
                  if (v459 >= (unint64_t)v809)
                    v461 = -(uint64_t)(v810 * v786);
                  else
                    v461 = 0;
                  i64 = v459 + 16 * v461;
                  v91 += 16 * v461 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                v824 = --v453;
              }
              while (v453);
            }
            goto LABEL_860;
          case 4:
            do
            {
              v135 = v818[0];
              do
              {
                v136 = 1.0 - COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                if (v136 <= 0.0)
                {
                  v97->i64[0] = 0;
                  v97->i64[1] = 0;
                  *(_DWORD *)v88 = 0;
                }
                else
                {
                  if (v136 >= 1.0)
                  {
                    if ((_DWORD)v58)
                      v138 = bswap32(*v87);
                    else
                      v138 = 1065353216;
                    v139 = bswap32(v138);
                  }
                  else
                  {
                    if ((_DWORD)v58)
                      v137 = COERCE_FLOAT(bswap32(*v87));
                    else
                      v137 = 1.0;
                    v139 = bswap32(COERCE_UNSIGNED_INT(v136 * v137));
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v54), v136));
                  }
                  *(_DWORD *)v88 = v139;
                }
                v140 = &v54[v785];
                if ((unint64_t)v140 >= v91)
                  v141 = -(uint64_t)v787;
                else
                  v141 = 0;
                v87 += (int)v58 + v141;
                v54 = &v140[v141];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v135;
              }
              while (v135);
              if (v809)
              {
                v142 = i64 + 16 * v810;
                if (v142 >= (unint64_t)v809)
                  v143 = -(uint64_t)(v57 * v786);
                else
                  v143 = 0;
                v96 += 4 * v57 + 4 * v143;
                if (v142 >= (unint64_t)v809)
                  v144 = -(uint64_t)(v810 * v786);
                else
                  v144 = 0;
                i64 = v142 + 16 * v144;
                v91 += 16 * v144 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 5:
            do
            {
              v145 = v818[0];
              do
              {
                v146 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                v147 = COERCE_FLOAT(bswap32(*v87));
                *v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), 1.0 - v147), (float32x4_t)vrev32q_s8(*v54), v146));
                *(_DWORD *)v88 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v147) * v146) + (float)(v147 * v146)));
                v148 = &v54[v785];
                if ((unint64_t)v148 >= v91)
                  v149 = -(uint64_t)v787;
                else
                  v149 = 0;
                v87 += (int)v58 + v149;
                v54 = &v148[v149];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v145;
              }
              while (v145);
              if (v809)
              {
                v150 = i64 + 16 * v810;
                if (v150 >= (unint64_t)v809)
                  v151 = -(uint64_t)(v57 * v786);
                else
                  v151 = 0;
                v96 += 4 * v57 + 4 * v151;
                if (v150 >= (unint64_t)v809)
                  v152 = -(uint64_t)(v810 * v786);
                else
                  v152 = 0;
                i64 = v150 + 16 * v152;
                v91 += 16 * v152 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 6:
            while (1)
            {
              v153 = v818[0];
              do
              {
                v154 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                v155 = 1.0 - v154;
                if ((float)(1.0 - v154) >= 1.0)
                {
                  if ((_DWORD)v58)
                    v157 = bswap32(*v87);
                  else
                    v157 = 1065353216;
                  v158 = *v54;
                  v159 = bswap32(v157);
                }
                else
                {
                  if (v155 <= 0.0)
                    goto LABEL_177;
                  if ((_DWORD)v58)
                    v156 = COERCE_FLOAT(bswap32(*v87));
                  else
                    v156 = 1.0;
                  v159 = bswap32(COERCE_UNSIGNED_INT(v154 + (float)(v156 * v155)));
                  v158 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54), v155));
                }
                *v97 = v158;
                *(_DWORD *)v88 = v159;
LABEL_177:
                v160 = &v54[v785];
                if ((unint64_t)v160 >= v91)
                  v161 = -(uint64_t)v787;
                else
                  v161 = 0;
                v87 += (int)v58 + v161;
                v54 = &v160[v161];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v153;
              }
              while (v153);
              if (v809)
              {
                v162 = i64 + 16 * v810;
                if (v162 >= (unint64_t)v809)
                  v163 = -(uint64_t)(v57 * v786);
                else
                  v163 = 0;
                v96 += 4 * v57 + 4 * v163;
                if (v162 >= (unint64_t)v809)
                  v164 = -(uint64_t)(v810 * v786);
                else
                  v164 = 0;
                i64 = v162 + 16 * v164;
                v91 += 16 * v164 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              if (!--v824)
                goto LABEL_860;
            }
          case 7:
            if ((_DWORD)v39)
            {
              do
              {
                v165 = v818[0];
                do
                {
                  v166 = COERCE_FLOAT(bswap32(*v87));
                  v167 = v166;
                  if (v166 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)v88 = 0;
                  }
                  else if (v166 < 1.0)
                  {
                    v168 = bswap32(COERCE_UNSIGNED_INT(v166 * COERCE_FLOAT(bswap32(*(_DWORD *)v88))));
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v167));
                    *(_DWORD *)v88 = v168;
                  }
                  v169 = &v54[v785];
                  if ((unint64_t)v169 >= v91)
                    v170 = -(uint64_t)v787;
                  else
                    v170 = 0;
                  v87 += (int)v58 + v170;
                  v54 = &v169[v170];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v165;
                }
                while (v165);
                if (v809)
                {
                  v171 = i64 + 16 * v810;
                  if (v171 >= (unint64_t)v809)
                    v172 = -(uint64_t)(v57 * v786);
                  else
                    v172 = 0;
                  v96 += 4 * v57 + 4 * v172;
                  if (v171 >= (unint64_t)v809)
                    v173 = -(uint64_t)(v810 * v786);
                  else
                    v173 = 0;
                  i64 = v171 + 16 * v173;
                  v91 += 16 * v173 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              v462 = v824;
              do
              {
                v463 = v90;
                do
                {
                  v464 = COERCE_FLOAT(bswap32(*v87));
                  if (v464 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else if (v464 < 1.0)
                  {
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v464));
                  }
                  v465 = &v54[v785];
                  if ((unint64_t)v465 >= v91)
                    v466 = -(uint64_t)v787;
                  else
                    v466 = 0;
                  v87 += (int)v58 + v466;
                  v54 = &v465[v466];
                  v97 += v785;
                  --v463;
                }
                while (v463);
                if (v809)
                {
                  v467 = i64 + 16 * v810;
                  if (v467 >= (unint64_t)v809)
                    v468 = -(uint64_t)(v57 * v786);
                  else
                    v468 = 0;
                  v96 += 4 * v57 + 4 * v468;
                  if (v467 >= (unint64_t)v809)
                    v469 = -(uint64_t)(v810 * v786);
                  else
                    v469 = 0;
                  i64 = v467 + 16 * v469;
                  v91 += 16 * v469 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                v824 = --v462;
              }
              while (v462);
            }
            goto LABEL_860;
          case 8:
            if ((_DWORD)v39)
            {
              do
              {
                v174 = v818[0];
                do
                {
                  v175 = 1.0 - COERCE_FLOAT(bswap32(*v87));
                  if (v175 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                    *(_DWORD *)v88 = 0;
                  }
                  else if (v175 < 1.0)
                  {
                    v176 = bswap32(COERCE_UNSIGNED_INT(v175 * COERCE_FLOAT(bswap32(*(_DWORD *)v88))));
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v175));
                    *(_DWORD *)v88 = v176;
                  }
                  v177 = &v54[v785];
                  if ((unint64_t)v177 >= v91)
                    v178 = -(uint64_t)v787;
                  else
                    v178 = 0;
                  v87 += (int)v58 + v178;
                  v54 = &v177[v178];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v174;
                }
                while (v174);
                if (v809)
                {
                  v179 = i64 + 16 * v810;
                  if (v179 >= (unint64_t)v809)
                    v180 = -(uint64_t)(v57 * v786);
                  else
                    v180 = 0;
                  v96 += 4 * v57 + 4 * v180;
                  if (v179 >= (unint64_t)v809)
                    v181 = -(uint64_t)(v810 * v786);
                  else
                    v181 = 0;
                  i64 = v179 + 16 * v181;
                  v91 += 16 * v181 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              v470 = v824;
              do
              {
                v471 = v90;
                do
                {
                  v472 = 1.0 - COERCE_FLOAT(bswap32(*v87));
                  if (v472 <= 0.0)
                  {
                    v97->i64[0] = 0;
                    v97->i64[1] = 0;
                  }
                  else if (v472 < 1.0)
                  {
                    *v97 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v472));
                  }
                  v473 = &v54[v785];
                  if ((unint64_t)v473 >= v91)
                    v474 = -(uint64_t)v787;
                  else
                    v474 = 0;
                  v87 += (int)v58 + v474;
                  v54 = &v473[v474];
                  v97 += v785;
                  --v471;
                }
                while (v471);
                if (v809)
                {
                  v475 = i64 + 16 * v810;
                  if (v475 >= (unint64_t)v809)
                    v476 = -(uint64_t)(v57 * v786);
                  else
                    v476 = 0;
                  v96 += 4 * v57 + 4 * v476;
                  if (v475 >= (unint64_t)v809)
                    v477 = -(uint64_t)(v810 * v786);
                  else
                    v477 = 0;
                  i64 = v475 + 16 * v477;
                  v91 += 16 * v477 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                v824 = --v470;
              }
              while (v470);
            }
            goto LABEL_860;
          case 9:
            do
            {
              v182 = v818[0];
              do
              {
                v183 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                v184 = COERCE_FLOAT(bswap32(*v87));
                *v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), v184), (float32x4_t)vrev32q_s8(*v54), 1.0 - v183));
                *(_DWORD *)v88 = bswap32(COERCE_UNSIGNED_INT((float)(v183 * v184) + (float)(v184 * (float)(1.0 - v183))));
                v185 = &v54[v785];
                if ((unint64_t)v185 >= v91)
                  v186 = -(uint64_t)v787;
                else
                  v186 = 0;
                v87 += (int)v58 + v186;
                v54 = &v185[v186];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v182;
              }
              while (v182);
              if (v809)
              {
                v187 = i64 + 16 * v810;
                if (v187 >= (unint64_t)v809)
                  v188 = -(uint64_t)(v57 * v786);
                else
                  v188 = 0;
                v96 += 4 * v57 + 4 * v188;
                if (v187 >= (unint64_t)v809)
                  v189 = -(uint64_t)(v810 * v786);
                else
                  v189 = 0;
                i64 = v187 + 16 * v189;
                v91 += 16 * v189 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 10:
            do
            {
              v190 = v818[0];
              do
              {
                v191 = COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                v192 = COERCE_FLOAT(bswap32(*v87));
                *v97 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v97), 1.0 - v192), (float32x4_t)vrev32q_s8(*v54), 1.0 - v191));
                *(_DWORD *)v88 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v192) * v191) + (float)(v192 * (float)(1.0 - v191))));
                v193 = &v54[v785];
                if ((unint64_t)v193 >= v91)
                  v194 = -(uint64_t)v787;
                else
                  v194 = 0;
                v87 += (int)v58 + v194;
                v54 = &v193[v194];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v190;
              }
              while (v190);
              if (v809)
              {
                v195 = i64 + 16 * v810;
                if (v195 >= (unint64_t)v809)
                  v196 = -(uint64_t)(v57 * v786);
                else
                  v196 = 0;
                v96 += 4 * v57 + 4 * v196;
                if (v195 >= (unint64_t)v809)
                  v197 = -(uint64_t)(v810 * v786);
                else
                  v197 = 0;
                i64 = v195 + 16 * v197;
                v91 += 16 * v197 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 11:
            if ((_DWORD)v39)
            {
              do
              {
                v198 = v818[0];
                do
                {
                  if ((_DWORD)v58)
                    v10.i32[0] = bswap32(*v87);
                  else
                    v10.i32[0] = 1.0;
                  v199 = (float32x4_t)vrev32q_s8(*v97);
                  v200 = (float32x4_t)vrev32q_s8(*v54);
                  v13.i32[0] = bswap32(*(_DWORD *)v88);
                  v14.f32[0] = v10.f32[0] + v13.f32[0];
                  if ((float)(v10.f32[0] + v13.f32[0]) > 1.0)
                    v14.f32[0] = 1.0;
                  v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
                  v10 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), v200), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0), vsubq_f32(v13, v199))));
                  *v97 = (int8x16_t)v10;
                  *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  v201 = &v54[v785];
                  if ((unint64_t)v201 >= v91)
                    v202 = -(uint64_t)v787;
                  else
                    v202 = 0;
                  v87 += (int)v58 + v202;
                  v54 = &v201[v202];
                  v88 += 4 * (int)v39;
                  v97 += v785;
                  --v198;
                }
                while (v198);
                if (v809)
                {
                  v203 = i64 + 16 * v810;
                  if (v203 >= (unint64_t)v809)
                    v204 = -(uint64_t)(v57 * v786);
                  else
                    v204 = 0;
                  v96 += 4 * v57 + 4 * v204;
                  if (v203 >= (unint64_t)v809)
                    v205 = -(uint64_t)(v810 * v786);
                  else
                    v205 = 0;
                  i64 = v203 + 16 * v205;
                  v91 += 16 * v205 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v824;
              }
              while (v824);
            }
            else
            {
              v478 = v824;
              do
              {
                v479 = v90;
                do
                {
                  if ((_DWORD)v58)
                    v9.i32[0] = bswap32(*v87);
                  else
                    v9.i32[0] = 1.0;
                  v9 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), (float32x4_t)vrev32q_s8(*v54)), (float32x4_t)vrev32q_s8(*v97)));
                  *v97 = (int8x16_t)v9;
                  v480 = &v54[v785];
                  if ((unint64_t)v480 >= v91)
                    v481 = -(uint64_t)v787;
                  else
                    v481 = 0;
                  v87 += (int)v58 + v481;
                  v54 = &v480[v481];
                  v97 += v785;
                  --v479;
                }
                while (v479);
                if (v809)
                {
                  v482 = i64 + 16 * v810;
                  if (v482 >= (unint64_t)v809)
                    v483 = -(uint64_t)(v57 * v786);
                  else
                    v483 = 0;
                  v96 += 4 * v57 + 4 * v483;
                  if (v482 >= (unint64_t)v809)
                    v484 = -(uint64_t)(v810 * v786);
                  else
                    v484 = 0;
                  i64 = v482 + 16 * v484;
                  v91 += 16 * v484 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                v824 = --v478;
              }
              while (v478);
            }
            goto LABEL_860;
          case 12:
            if (!(_DWORD)v39)
            {
              v485 = v824;
              do
              {
                v486 = v90;
                do
                {
                  *v97 = vrev32q_s8((int8x16_t)vaddq_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54)));
                  v487 = &v54[v785];
                  if ((unint64_t)v487 >= v91)
                    v488 = -(uint64_t)v787;
                  else
                    v488 = 0;
                  v87 += (int)v58 + v488;
                  v54 = &v487[v488];
                  v97 += v785;
                  --v486;
                }
                while (v486);
                if (v809)
                {
                  v489 = i64 + 16 * v810;
                  if (v489 >= (unint64_t)v809)
                    v490 = -(uint64_t)(v57 * v786);
                  else
                    v490 = 0;
                  v96 += 4 * v57 + 4 * v490;
                  if (v489 >= (unint64_t)v809)
                    v491 = -(uint64_t)(v810 * v786);
                  else
                    v491 = 0;
                  i64 = v489 + 16 * v491;
                  v91 += 16 * v491 + 16 * v810;
                  v87 = (unsigned int *)v96;
                  v54 = (int8x16_t *)i64;
                }
                else
                {
                  v54 += v810;
                  v87 += v57;
                }
                v97 += v99;
                v88 += 4 * v813;
                --v485;
              }
              while (v485);
              goto LABEL_844;
            }
            do
            {
              v206 = v818[0];
              do
              {
                if ((_DWORD)v58)
                  v207 = COERCE_FLOAT(bswap32(*v87));
                else
                  v207 = 1.0;
                v208 = v207 + COERCE_FLOAT(bswap32(*(_DWORD *)v88));
                v209 = (int8x16_t)vaddq_f32((float32x4_t)vrev32q_s8(*v97), (float32x4_t)vrev32q_s8(*v54));
                if (v208 > 1.0)
                  v208 = 1.0;
                *v97 = vrev32q_s8(v209);
                *(_DWORD *)v88 = bswap32(LODWORD(v208));
                v210 = &v54[v785];
                if ((unint64_t)v210 >= v91)
                  v211 = -(uint64_t)v787;
                else
                  v211 = 0;
                v87 += (int)v58 + v211;
                v54 = &v210[v211];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v206;
              }
              while (v206);
              if (v809)
              {
                v212 = i64 + 16 * v810;
                if (v212 >= (unint64_t)v809)
                  v213 = -(uint64_t)(v57 * v786);
                else
                  v213 = 0;
                v96 += 4 * v57 + 4 * v213;
                if (v212 >= (unint64_t)v809)
                  v214 = -(uint64_t)(v810 * v786);
                else
                  v214 = 0;
                i64 = v212 + 16 * v214;
                v91 += 16 * v214 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 13:
            v9.i32[0] = 1.0;
            do
            {
              v215 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    v221 = v10.i32[0];
                    v10 = *(float32x4_t *)v54;
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v221);
                  }
                  else
                  {
                    v216 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    v217 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    v218 = (int8x16_t)vmulq_f32(v216, v217);
                    v219 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v218, v216, 1.0 - v10.f32[0]), v218);
                    v220 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v219, v217, 1.0 - v11.f32[0]), v219);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v220);
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if ((_DWORD)v39)
                      *(_DWORD *)v88 = bswap32(v11.u32[0]);
                  }
                }
                v222 = &v54[v785];
                if ((unint64_t)v222 >= v91)
                  v223 = -(uint64_t)v787;
                else
                  v223 = 0;
                v87 += (int)v58 + v223;
                v54 = &v222[v223];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v215;
              }
              while (v215);
              if (v809)
              {
                v224 = i64 + 16 * v810;
                if (v224 >= (unint64_t)v809)
                  v225 = -(uint64_t)(v57 * v786);
                else
                  v225 = 0;
                v96 += 4 * v57 + 4 * v225;
                if (v224 >= (unint64_t)v809)
                  v226 = -(uint64_t)(v810 * v786);
                else
                  v226 = 0;
                i64 = v224 + 16 * v226;
                v91 += 16 * v226 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 14:
            __asm { FMOV            V0.4S, #1.0 }
            break;
          case 15:
            v790 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v240 = (int)v58;
            v772 = v18;
            v773 = -(uint64_t)(v57 * v786);
            v241 = 4 * (int)v39;
            v242 = -(uint64_t)v787;
            do
            {
              v243 = v818[0];
              do
              {
                v244 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v244 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v244 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v245 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v246 = vrev32q_s8(*v97);
                    v756 = vrev32q_s8(*v54);
                    PDAoverlayPDA(v825.f32, *(float *)v246.i32, *(float *)&v246.i32[1], *(float *)&v246.i32[2], *(float *)&v246.i32[3], v244, *(double *)v14.i64, *(double *)v756.i64, v16, *(float *)v756.i32, *(float *)&v756.i32[1], *(float *)&v756.i32[2], *(float *)&v756.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v247 = bswap32(v825.u32[0]);
                    v248 = bswap32(v825.u32[1]);
                    v249 = bswap32(v825.u32[2]);
                    v250 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v251 = bswap32(v826);
                      v97->i32[0] = v247;
                      v97->i32[1] = v248;
                      v97->i32[2] = v249;
                      v97->i32[3] = v250;
                      *(_DWORD *)v88 = v251;
                    }
                    else
                    {
                      v97->i32[0] = v247;
                      v97->i32[1] = v248;
                      v97->i32[2] = v249;
                      v97->i32[3] = v250;
                    }
                    LODWORD(v58) = v815;
                    v91 = v245;
                    v242 = -(uint64_t)v787;
                  }
                }
                v252 = &v54[v785];
                if ((unint64_t)v252 >= v91)
                  v253 = v242;
                else
                  v253 = 0;
                v87 += v240 + v253;
                v54 = &v252[v253];
                v88 += v241;
                v97 += v785;
                --v243;
              }
              while (v243);
              if (v809)
              {
                v57 = v800;
                v254 = v802 + 16 * v810;
                v255 = v773;
                if (v254 < (unint64_t)v809)
                  v255 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v255);
                v256 = -(uint64_t)(v810 * v786);
                if (v254 < (unint64_t)v809)
                  v256 = 0;
                v54 = (int8x16_t *)(v254 + 16 * v256);
                v91 += 16 * v256 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v255;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v790;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 16:
            v9.i32[0] = 1.0;
            do
            {
              v257 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    v266 = v10.i32[0];
                    v10 = *(float32x4_t *)v54;
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v266);
                  }
                  else
                  {
                    v258 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    v259 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    v260 = (int8x16_t)vmulq_n_f32(v258, v10.f32[0]);
                    v261 = (int8x16_t)vmulq_n_f32(v259, v11.f32[0]);
                    v262 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v260, (float32x4_t)v261), v261, v260);
                    v263 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v262, v258, 1.0 - v10.f32[0]), v262);
                    v264 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0);
                    v265 = (int8x16_t)vmlaq_n_f32((float32x4_t)v263, v259, 1.0 - v11.f32[0]);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vbslq_s8(v264, v265, v263));
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if ((_DWORD)v39)
                      *(_DWORD *)v88 = bswap32(v11.u32[0]);
                  }
                }
                v267 = &v54[v785];
                if ((unint64_t)v267 >= v91)
                  v268 = -(uint64_t)v787;
                else
                  v268 = 0;
                v87 += (int)v58 + v268;
                v54 = &v267[v268];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v257;
              }
              while (v257);
              if (v809)
              {
                v269 = i64 + 16 * v810;
                if (v269 >= (unint64_t)v809)
                  v270 = -(uint64_t)(v57 * v786);
                else
                  v270 = 0;
                v96 += 4 * v57 + 4 * v270;
                if (v269 >= (unint64_t)v809)
                  v271 = -(uint64_t)(v810 * v786);
                else
                  v271 = 0;
                i64 = v269 + 16 * v271;
                v91 += 16 * v271 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 17:
            v9.i32[0] = 1.0;
            do
            {
              v272 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    v280 = v10.i32[0];
                    v10 = *(float32x4_t *)v54;
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v280);
                  }
                  else
                  {
                    v273 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    v274 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    v275 = (int8x16_t)vmulq_n_f32(v273, v10.f32[0]);
                    v276 = (int8x16_t)vmulq_n_f32(v274, v11.f32[0]);
                    v277 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v276, (float32x4_t)v275), v276, v275);
                    v278 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v10, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v277, v273, 1.0 - v10.f32[0]), v277);
                    v279 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v11, v9)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v278, v274, 1.0 - v11.f32[0]), v278);
                    v11.f32[0] = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), v279);
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if ((_DWORD)v39)
                      *(_DWORD *)v88 = bswap32(v11.u32[0]);
                  }
                }
                v281 = &v54[v785];
                if ((unint64_t)v281 >= v91)
                  v282 = -(uint64_t)v787;
                else
                  v282 = 0;
                v87 += (int)v58 + v282;
                v54 = &v281[v282];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v272;
              }
              while (v272);
              if (v809)
              {
                v283 = i64 + 16 * v810;
                if (v283 >= (unint64_t)v809)
                  v284 = -(uint64_t)(v57 * v786);
                else
                  v284 = 0;
                v96 += 4 * v57 + 4 * v284;
                if (v283 >= (unint64_t)v809)
                  v285 = -(uint64_t)(v810 * v786);
                else
                  v285 = 0;
                i64 = v283 + 16 * v285;
                v91 += 16 * v285 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 18:
            v791 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v286 = (int)v58;
            v772 = v18;
            v774 = -(uint64_t)(v57 * v786);
            v287 = 4 * (int)v39;
            v288 = -(uint64_t)v787;
            do
            {
              v289 = v818[0];
              do
              {
                v290 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v290 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v290 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v291 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v292 = vrev32q_s8(*v97);
                    v757 = vrev32q_s8(*v54);
                    PDAcolordodgePDA(v825.f32, *(float *)v292.i32, *(float *)&v292.i32[1], *(float *)&v292.i32[2], *(float *)&v292.i32[3], v290, *(double *)v14.i64, *(double *)v757.i64, v16, *(float *)v757.i32, *(float *)&v757.i32[1], *(float *)&v757.i32[2], *(float *)&v757.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v293 = bswap32(v825.u32[0]);
                    v294 = bswap32(v825.u32[1]);
                    v295 = bswap32(v825.u32[2]);
                    v296 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v297 = bswap32(v826);
                      v97->i32[0] = v293;
                      v97->i32[1] = v294;
                      v97->i32[2] = v295;
                      v97->i32[3] = v296;
                      *(_DWORD *)v88 = v297;
                    }
                    else
                    {
                      v97->i32[0] = v293;
                      v97->i32[1] = v294;
                      v97->i32[2] = v295;
                      v97->i32[3] = v296;
                    }
                    LODWORD(v58) = v815;
                    v91 = v291;
                    v288 = -(uint64_t)v787;
                  }
                }
                v298 = &v54[v785];
                if ((unint64_t)v298 >= v91)
                  v299 = v288;
                else
                  v299 = 0;
                v87 += v286 + v299;
                v54 = &v298[v299];
                v88 += v287;
                v97 += v785;
                --v289;
              }
              while (v289);
              if (v809)
              {
                v57 = v800;
                v300 = v802 + 16 * v810;
                v301 = v774;
                if (v300 < (unint64_t)v809)
                  v301 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v301);
                v302 = -(uint64_t)(v810 * v786);
                if (v300 < (unint64_t)v809)
                  v302 = 0;
                v54 = (int8x16_t *)(v300 + 16 * v302);
                v91 += 16 * v302 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v301;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v791;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 19:
            v792 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v303 = (int)v58;
            v772 = v18;
            v775 = -(uint64_t)(v57 * v786);
            v304 = 4 * (int)v39;
            v305 = -(uint64_t)v787;
            do
            {
              v306 = v818[0];
              do
              {
                v307 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v307 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v307 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v308 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v309 = vrev32q_s8(*v97);
                    v758 = vrev32q_s8(*v54);
                    PDAcolorburnPDA(v825.f32, *(float *)v309.i32, *(float *)&v309.i32[1], *(float *)&v309.i32[2], *(float *)&v309.i32[3], v307, *(double *)v14.i64, *(double *)v758.i64, v16, *(float *)v758.i32, *(float *)&v758.i32[1], *(float *)&v758.i32[2], *(float *)&v758.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v310 = bswap32(v825.u32[0]);
                    v311 = bswap32(v825.u32[1]);
                    v312 = bswap32(v825.u32[2]);
                    v313 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v314 = bswap32(v826);
                      v97->i32[0] = v310;
                      v97->i32[1] = v311;
                      v97->i32[2] = v312;
                      v97->i32[3] = v313;
                      *(_DWORD *)v88 = v314;
                    }
                    else
                    {
                      v97->i32[0] = v310;
                      v97->i32[1] = v311;
                      v97->i32[2] = v312;
                      v97->i32[3] = v313;
                    }
                    LODWORD(v58) = v815;
                    v91 = v308;
                    v305 = -(uint64_t)v787;
                  }
                }
                v315 = &v54[v785];
                if ((unint64_t)v315 >= v91)
                  v316 = v305;
                else
                  v316 = 0;
                v87 += v303 + v316;
                v54 = &v315[v316];
                v88 += v304;
                v97 += v785;
                --v306;
              }
              while (v306);
              if (v809)
              {
                v57 = v800;
                v317 = v802 + 16 * v810;
                v318 = v775;
                if (v317 < (unint64_t)v809)
                  v318 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v318);
                v319 = -(uint64_t)(v810 * v786);
                if (v317 < (unint64_t)v809)
                  v319 = 0;
                v54 = (int8x16_t *)(v317 + 16 * v319);
                v91 += 16 * v319 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v318;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v792;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 20:
            v793 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v320 = (int)v58;
            v772 = v18;
            v776 = -(uint64_t)(v57 * v786);
            v321 = 4 * (int)v39;
            v322 = -(uint64_t)v787;
            do
            {
              v323 = v818[0];
              do
              {
                v13.i32[0] = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v13.i32[0] = bswap32(*(_DWORD *)v88), v13.f32[0] <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v324 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v325 = vrev32q_s8(*v97);
                    v759 = vrev32q_s8(*v54);
                    PDAsoftlightPDA(&v825, *(float32x2_t *)v325.i8, *(float32_t *)&v325.i32[1], *(float *)&v325.i32[2], *(float *)&v325.i32[3], *(double *)v13.i64, *(int32x2_t *)v14.f32, *(double *)v759.i64, v16, v39, (uint64_t)v26, v91, v58, v96, v90, i64, *(float32x2_t *)v759.i8, *(float *)&v759.i32[2], *(float *)&v759.i32[3],
                      v14.f32[0]);
                    v39 = v817;
                    v326 = bswap32(v825.u32[0]);
                    v327 = bswap32(v825.u32[1]);
                    v328 = bswap32(v825.u32[2]);
                    v329 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v330 = bswap32(v826);
                      v97->i32[0] = v326;
                      v97->i32[1] = v327;
                      v97->i32[2] = v328;
                      v97->i32[3] = v329;
                      *(_DWORD *)v88 = v330;
                    }
                    else
                    {
                      v97->i32[0] = v326;
                      v97->i32[1] = v327;
                      v97->i32[2] = v328;
                      v97->i32[3] = v329;
                    }
                    v58 = v815;
                    v91 = v324;
                    v322 = -(uint64_t)v787;
                  }
                }
                v331 = &v54[v785];
                if ((unint64_t)v331 >= v91)
                  v332 = v322;
                else
                  v332 = 0;
                v87 += v320 + v332;
                v54 = &v331[v332];
                v88 += v321;
                v97 += v785;
                --v323;
              }
              while (v323);
              if (v809)
              {
                v57 = v800;
                v333 = v802 + 16 * v810;
                v334 = v776;
                if (v333 < (unint64_t)v809)
                  v334 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v334);
                v335 = -(uint64_t)(v810 * v786);
                if (v333 < (unint64_t)v809)
                  v335 = 0;
                v54 = (int8x16_t *)(v333 + 16 * v335);
                v91 += 16 * v335 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v334;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v793;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 21:
            v794 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v336 = (int)v58;
            v772 = v18;
            v777 = -(uint64_t)(v57 * v786);
            v337 = 4 * (int)v39;
            v338 = -(uint64_t)v787;
            do
            {
              v339 = v818[0];
              do
              {
                v340 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v340 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v340 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v341 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v342 = vrev32q_s8(*v97);
                    v760 = vrev32q_s8(*v54);
                    PDAhardlightPDA(v825.f32, *(float *)v342.i32, *(float *)&v342.i32[1], *(float *)&v342.i32[2], *(float *)&v342.i32[3], v340, *(double *)v14.i64, *(double *)v760.i64, v16, *(float *)v760.i32, *(float *)&v760.i32[1], *(float *)&v760.i32[2], *(float *)&v760.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v343 = bswap32(v825.u32[0]);
                    v344 = bswap32(v825.u32[1]);
                    v345 = bswap32(v825.u32[2]);
                    v346 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v347 = bswap32(v826);
                      v97->i32[0] = v343;
                      v97->i32[1] = v344;
                      v97->i32[2] = v345;
                      v97->i32[3] = v346;
                      *(_DWORD *)v88 = v347;
                    }
                    else
                    {
                      v97->i32[0] = v343;
                      v97->i32[1] = v344;
                      v97->i32[2] = v345;
                      v97->i32[3] = v346;
                    }
                    LODWORD(v58) = v815;
                    v91 = v341;
                    v338 = -(uint64_t)v787;
                  }
                }
                v348 = &v54[v785];
                if ((unint64_t)v348 >= v91)
                  v349 = v338;
                else
                  v349 = 0;
                v87 += v336 + v349;
                v54 = &v348[v349];
                v88 += v337;
                v97 += v785;
                --v339;
              }
              while (v339);
              if (v809)
              {
                v57 = v800;
                v350 = v802 + 16 * v810;
                v351 = v777;
                if (v350 < (unint64_t)v809)
                  v351 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v351);
                v352 = -(uint64_t)(v810 * v786);
                if (v350 < (unint64_t)v809)
                  v352 = 0;
                v54 = (int8x16_t *)(v350 + 16 * v352);
                v91 += 16 * v352 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v351;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v794;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 22:
            do
            {
              v353 = v818[0];
              do
              {
                v9.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v9.i32[0] = bswap32(*(_DWORD *)v88), v9.f32[0] <= 0.0))
                  {
                    v9 = *(float32x4_t *)v54;
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v10.u32[0]);
                  }
                  else
                  {
                    v354 = *v54;
                    *(float *)v354.i32 = (float)(v9.f32[0] + v10.f32[0]) - (float)(v9.f32[0] * v10.f32[0]);
                    v355 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    v356 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    v357 = vmulq_n_f32(v355, v10.f32[0]);
                    v358 = vmulq_n_f32(v356, v9.f32[0]);
                    v359 = vsubq_f32(vaddq_f32(v355, v356), v357);
                    v360 = (int8x16_t)vsubq_f32(v357, v358);
                    v361 = vaddq_f32(vsubq_f32(v359, v358), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v360), (int8x16_t)vnegq_f32((float32x4_t)v360), v360));
                    v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 0);
                    v9 = vsubq_f32(v10, v361);
                    *(int8x8_t *)v9.f32 = vrev32_s8(*(int8x8_t *)v9.f32);
                    v97->i64[0] = v9.i64[0];
                    v97->i32[2] = bswap32(v9.u32[2]);
                    v97->i32[3] = bswap32(v9.u32[3]);
                    if ((_DWORD)v39)
                      *(_DWORD *)v88 = bswap32(v354.u32[0]);
                  }
                }
                v362 = &v54[v785];
                if ((unint64_t)v362 >= v91)
                  v363 = -(uint64_t)v787;
                else
                  v363 = 0;
                v87 += (int)v58 + v363;
                v54 = &v362[v363];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v353;
              }
              while (v353);
              if (v809)
              {
                v364 = i64 + 16 * v810;
                if (v364 >= (unint64_t)v809)
                  v365 = -(uint64_t)(v57 * v786);
                else
                  v365 = 0;
                v96 += 4 * v57 + 4 * v365;
                if (v364 >= (unint64_t)v809)
                  v366 = -(uint64_t)(v810 * v786);
                else
                  v366 = 0;
                i64 = v364 + 16 * v366;
                v91 += 16 * v366 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 23:
            v367.i64[0] = 0xC0000000C0000000;
            v367.i64[1] = 0xC0000000C0000000;
            do
            {
              v368 = v818[0];
              do
              {
                v11.i32[0] = 1.0;
                v10.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
                  {
                    v371 = v10.i32[0];
                    v10 = *(float32x4_t *)v54;
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v371);
                  }
                  else
                  {
                    v369 = *v54;
                    *(float *)v369.i32 = (float)(v11.f32[0] + v10.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
                    v11 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
                    v370 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54));
                    v10 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v369.i8, 0), vmlaq_f32(vaddq_f32(v11, v370), v367, vmulq_f32(v370, v11)));
                    *(int8x8_t *)v10.f32 = vrev32_s8(*(int8x8_t *)v10.f32);
                    v97->i64[0] = v10.i64[0];
                    v97->i32[2] = bswap32(v10.u32[2]);
                    v97->i32[3] = bswap32(v10.u32[3]);
                    if ((_DWORD)v39)
                      *(_DWORD *)v88 = bswap32(v369.u32[0]);
                  }
                }
                v372 = &v54[v785];
                if ((unint64_t)v372 >= v91)
                  v373 = -(uint64_t)v787;
                else
                  v373 = 0;
                v87 += (int)v58 + v373;
                v54 = &v372[v373];
                v88 += 4 * (int)v39;
                v97 += v785;
                --v368;
              }
              while (v368);
              if (v809)
              {
                v374 = i64 + 16 * v810;
                if (v374 >= (unint64_t)v809)
                  v375 = -(uint64_t)(v57 * v786);
                else
                  v375 = 0;
                v96 += 4 * v57 + 4 * v375;
                if (v374 >= (unint64_t)v809)
                  v376 = -(uint64_t)(v810 * v786);
                else
                  v376 = 0;
                i64 = v374 + 16 * v376;
                v91 += 16 * v376 + 16 * v810;
                v87 = (unsigned int *)v96;
                v54 = (int8x16_t *)i64;
              }
              else
              {
                v54 += v810;
                v87 += v57;
              }
              v97 += v99;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_860;
          case 24:
            v795 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v377 = (int)v58;
            v772 = v18;
            v778 = -(uint64_t)(v57 * v786);
            v378 = 4 * (int)v39;
            v379 = -(uint64_t)v787;
            do
            {
              v380 = v818[0];
              do
              {
                v381 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v381 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v381 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v382 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v383 = vrev32q_s8(*v97);
                    v761 = vrev32q_s8(*v54);
                    PDAhuePDA(v825.f32, *(float *)v383.i32, *(float *)&v383.i32[1], *(float *)&v383.i32[2], *(float *)&v383.i32[3], v381, *(double *)v14.i64, *(double *)v761.i64, v16, *(float *)v761.i32, *(float *)&v761.i32[1], *(float *)&v761.i32[2], *(float *)&v761.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v384 = bswap32(v825.u32[0]);
                    v385 = bswap32(v825.u32[1]);
                    v386 = bswap32(v825.u32[2]);
                    v387 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v388 = bswap32(v826);
                      v97->i32[0] = v384;
                      v97->i32[1] = v385;
                      v97->i32[2] = v386;
                      v97->i32[3] = v387;
                      *(_DWORD *)v88 = v388;
                    }
                    else
                    {
                      v97->i32[0] = v384;
                      v97->i32[1] = v385;
                      v97->i32[2] = v386;
                      v97->i32[3] = v387;
                    }
                    LODWORD(v58) = v815;
                    v91 = v382;
                    v379 = -(uint64_t)v787;
                  }
                }
                v389 = &v54[v785];
                if ((unint64_t)v389 >= v91)
                  v390 = v379;
                else
                  v390 = 0;
                v87 += v377 + v390;
                v54 = &v389[v390];
                v88 += v378;
                v97 += v785;
                --v380;
              }
              while (v380);
              if (v809)
              {
                v57 = v800;
                v391 = v802 + 16 * v810;
                v392 = v778;
                if (v391 < (unint64_t)v809)
                  v392 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v392);
                v393 = -(uint64_t)(v810 * v786);
                if (v391 < (unint64_t)v809)
                  v393 = 0;
                v54 = (int8x16_t *)(v391 + 16 * v393);
                v91 += 16 * v393 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v392;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v795;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 25:
            v796 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v394 = (int)v58;
            v772 = v18;
            v779 = -(uint64_t)(v57 * v786);
            v395 = 4 * (int)v39;
            v396 = -(uint64_t)v787;
            do
            {
              v397 = v818[0];
              do
              {
                v398 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v398 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v398 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v399 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v400 = vrev32q_s8(*v97);
                    v762 = vrev32q_s8(*v54);
                    PDAsaturationPDA(v825.f32, *(float *)v400.i32, *(float *)&v400.i32[1], *(float *)&v400.i32[2], *(float *)&v400.i32[3], v398, *(double *)v14.i64, *(double *)v762.i64, v16, *(float *)v762.i32, *(float *)&v762.i32[1], *(float *)&v762.i32[2], *(float *)&v762.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v401 = bswap32(v825.u32[0]);
                    v402 = bswap32(v825.u32[1]);
                    v403 = bswap32(v825.u32[2]);
                    v404 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v405 = bswap32(v826);
                      v97->i32[0] = v401;
                      v97->i32[1] = v402;
                      v97->i32[2] = v403;
                      v97->i32[3] = v404;
                      *(_DWORD *)v88 = v405;
                    }
                    else
                    {
                      v97->i32[0] = v401;
                      v97->i32[1] = v402;
                      v97->i32[2] = v403;
                      v97->i32[3] = v404;
                    }
                    LODWORD(v58) = v815;
                    v91 = v399;
                    v396 = -(uint64_t)v787;
                  }
                }
                v406 = &v54[v785];
                if ((unint64_t)v406 >= v91)
                  v407 = v396;
                else
                  v407 = 0;
                v87 += v394 + v407;
                v54 = &v406[v407];
                v88 += v395;
                v97 += v785;
                --v397;
              }
              while (v397);
              if (v809)
              {
                v57 = v800;
                v408 = v802 + 16 * v810;
                v409 = v779;
                if (v408 < (unint64_t)v809)
                  v409 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v409);
                v410 = -(uint64_t)(v810 * v786);
                if (v408 < (unint64_t)v809)
                  v410 = 0;
                v54 = (int8x16_t *)(v408 + 16 * v410);
                v91 += 16 * v410 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v409;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v796;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 26:
            v797 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v411 = (int)v58;
            v772 = v18;
            v780 = -(uint64_t)(v57 * v786);
            v412 = 4 * (int)v39;
            v413 = -(uint64_t)v787;
            do
            {
              v414 = v818[0];
              do
              {
                v14.i32[0] = 1.0;
                v415 = 1.0;
                if (!(_DWORD)v58 || (v415 = COERCE_FLOAT(bswap32(*v87)), v415 > 0.0))
                {
                  if ((_DWORD)v39 && (v14.i32[0] = bswap32(*(_DWORD *)v88), v14.f32[0] <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(LODWORD(v415));
                  }
                  else
                  {
                    v416 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v417 = vrev32q_s8(*v54);
                    v763 = vrev32q_s8(*v97);
                    PDAluminosityPDA(v825.f32, *(float *)v417.i32, *(float *)&v417.i32[1], *(float *)&v417.i32[2], *(float *)&v417.i32[3], v415, *(double *)v14.i64, *(double *)v763.i64, v16, *(float *)v763.i32, *(float *)&v763.i32[1], *(float *)&v763.i32[2], *(float *)&v763.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v418 = bswap32(v825.u32[0]);
                    v419 = bswap32(v825.u32[1]);
                    v420 = bswap32(v825.u32[2]);
                    v421 = bswap32(v825.u32[3]);
                    if ((_DWORD)v817)
                    {
                      v422 = bswap32(v826);
                      v97->i32[0] = v418;
                      v97->i32[1] = v419;
                      v97->i32[2] = v420;
                      v97->i32[3] = v421;
                      *(_DWORD *)v88 = v422;
                    }
                    else
                    {
                      v97->i32[0] = v418;
                      v97->i32[1] = v419;
                      v97->i32[2] = v420;
                      v97->i32[3] = v421;
                    }
                    LODWORD(v58) = v815;
                    v91 = v416;
                    v413 = -(uint64_t)v787;
                  }
                }
                v423 = &v54[v785];
                if ((unint64_t)v423 >= v91)
                  v424 = v413;
                else
                  v424 = 0;
                v87 += v411 + v424;
                v54 = &v423[v424];
                v88 += v412;
                v97 += v785;
                --v414;
              }
              while (v414);
              if (v809)
              {
                v57 = v800;
                v425 = v802 + 16 * v810;
                v426 = v780;
                if (v425 < (unint64_t)v809)
                  v426 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v426);
                v427 = -(uint64_t)(v810 * v786);
                if (v425 < (unint64_t)v809)
                  v427 = 0;
                v54 = (int8x16_t *)(v425 + 16 * v427);
                v91 += 16 * v427 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v426;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v797;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
            goto LABEL_670;
          case 27:
            v798 = v38 - v53;
            v802 = i64;
            v804 = v96;
            v768 = v38;
            v428 = (int)v58;
            v772 = v18;
            v781 = -(uint64_t)(v57 * v786);
            v429 = 4 * (int)v39;
            v430 = -(uint64_t)v787;
            do
            {
              v431 = v818[0];
              do
              {
                v432 = 1.0;
                v14.i32[0] = 1.0;
                if (!(_DWORD)v58 || (v14.i32[0] = bswap32(*v87), v14.f32[0] > 0.0))
                {
                  if ((_DWORD)v39 && (v432 = COERCE_FLOAT(bswap32(*(_DWORD *)v88)), v432 <= 0.0))
                  {
                    *v97 = *v54;
                    *(_DWORD *)v88 = bswap32(v14.u32[0]);
                  }
                  else
                  {
                    v433 = v91;
                    v825 = 0uLL;
                    v826 = 0;
                    v434 = vrev32q_s8(*v97);
                    v764 = vrev32q_s8(*v54);
                    PDAluminosityPDA(v825.f32, *(float *)v434.i32, *(float *)&v434.i32[1], *(float *)&v434.i32[2], *(float *)&v434.i32[3], v432, *(double *)v14.i64, *(double *)v764.i64, v16, *(float *)v764.i32, *(float *)&v764.i32[1], *(float *)&v764.i32[2], *(float *)&v764.i32[3], v14.f32[0]);
                    LODWORD(v39) = v817;
                    v435 = v825.u32[1];
                    v436 = v825.u32[2];
                    v437 = v825.u32[3];
                    if ((_DWORD)v817)
                    {
                      v438 = bswap32(v826);
                      v97->i32[0] = bswap32(v825.u32[0]);
                      v97->i32[1] = bswap32(v435);
                      v97->i32[2] = bswap32(v436);
                      v97->i32[3] = bswap32(v437);
                      *(_DWORD *)v88 = v438;
                    }
                    else
                    {
                      v97->i32[0] = bswap32(v825.u32[0]);
                      v97->i32[1] = bswap32(v435);
                      v97->i32[2] = bswap32(v436);
                      v97->i32[3] = bswap32(v437);
                    }
                    LODWORD(v58) = v815;
                    v91 = v433;
                    v430 = -(uint64_t)v787;
                  }
                }
                v439 = &v54[v785];
                if ((unint64_t)v439 >= v91)
                  v440 = v430;
                else
                  v440 = 0;
                v87 += v428 + v440;
                v54 = &v439[v440];
                v88 += v429;
                v97 += v785;
                --v431;
              }
              while (v431);
              if (v809)
              {
                v57 = v800;
                v441 = v802 + 16 * v810;
                v442 = v781;
                if (v441 < (unint64_t)v809)
                  v442 = 0;
                v87 = (unsigned int *)(v804 + 4 * v800 + 4 * v442);
                v443 = -(uint64_t)(v810 * v786);
                if (v441 < (unint64_t)v809)
                  v443 = 0;
                v54 = (int8x16_t *)(v441 + 16 * v443);
                v91 += 16 * v443 + 16 * v810;
                v802 = (uint64_t)v54;
                v804 += 4 * v800 + 4 * v442;
              }
              else
              {
                v54 += v810;
                v57 = v800;
                v87 += v800;
              }
              v97 += v798;
              v88 += 4 * v813;
              --v824;
            }
            while (v824);
LABEL_670:
            v85 = v91;
            v22 = v766;
            LODWORD(v20) = v767;
            v18 = v772;
            v38 = v768;
            goto LABEL_861;
          default:
            goto LABEL_860;
        }
        break;
      }
LABEL_335:
      v232 = v818[0];
      while (1)
      {
        v11.i32[0] = 1.0;
        v10.i32[0] = 1.0;
        if (!(_DWORD)v58 || (v10.i32[0] = bswap32(*v87), v10.f32[0] > 0.0))
        {
          if ((_DWORD)v39 && (v11.i32[0] = bswap32(*(_DWORD *)v88), v11.f32[0] <= 0.0))
          {
            v234 = v10.i32[0];
            v10 = *(float32x4_t *)v54;
          }
          else
          {
            v12.f32[0] = (float)(v10.f32[0] + v11.f32[0]) - (float)(v11.f32[0] * v10.f32[0]);
            v233 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vrev32q_s8(*v97));
            v11 = vmlaq_f32(v233, vsubq_f32(_Q0, v233), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), (float32x4_t)vrev32q_s8(*v54)));
            v10 = (float32x4_t)vrev32q_s8((int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), v11));
            if (!(_DWORD)v39)
            {
              *v97 = (int8x16_t)v10;
              goto LABEL_345;
            }
            v234 = v12.i32[0];
          }
          *v97 = (int8x16_t)v10;
          *(_DWORD *)v88 = bswap32(v234);
        }
LABEL_345:
        v235 = &v54[v785];
        if ((unint64_t)v235 >= v91)
          v236 = -(uint64_t)v787;
        else
          v236 = 0;
        v87 += (int)v58 + v236;
        v54 = &v235[v236];
        v88 += 4 * (int)v39;
        v97 += v785;
        if (!--v232)
        {
          if (v809)
          {
            v237 = i64 + 16 * v810;
            if (v237 >= (unint64_t)v809)
              v238 = -(uint64_t)(v57 * v786);
            else
              v238 = 0;
            v96 += 4 * v57 + 4 * v238;
            if (v237 >= (unint64_t)v809)
              v239 = -(uint64_t)(v810 * v786);
            else
              v239 = 0;
            i64 = v237 + 16 * v239;
            v91 += 16 * v239 + 16 * v810;
            v87 = (unsigned int *)v96;
            v54 = (int8x16_t *)i64;
          }
          else
          {
            v54 += v810;
            v87 += v57;
          }
          v97 += v99;
          v88 += 4 * v813;
          if (!--v824)
            goto LABEL_860;
          goto LABEL_335;
        }
      }
    }
    v809 = 0;
    i64 = 0;
    v785 = v83;
    v90 = v52;
    v53 = v83 * (int)v52;
    v813 = v783 - (int)v39 * (int)v52;
    v91 = -1;
    v786 = v57;
    v92 = v810;
    v787 = v810;
    goto LABEL_61;
  }
  v27 = *(unsigned int *)(v3 + 128);
  if ((v27 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      CMYKF_mark_constmask(v3, v20, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16, (uint64_t)v26, v4, v5, v6, v27, v8);
    else
      CMYKF_mark_pixelmask(v3, v20, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16);
    return 1;
  }
  v40 = *(_DWORD *)(v3 + 112);
  v41 = *(_DWORD *)(v3 + 116);
  v42 = (v40 + 15) & 0xFFFFFFF0;
  v43 = v42 * v41;
  if ((int)v43 <= 4096)
  {
    v45 = &v825;
    goto LABEL_37;
  }
  v44 = (float32x4_t *)malloc_type_malloc(v43, 0x967E044uLL);
  if (v44)
  {
    v45 = v44;
    v26 = *(uint16x4_t **)(v22 + 136);
    LODWORD(v27) = *(_DWORD *)(v22 + 128);
LABEL_37:
    CGSConvertBitsToMask(v26, *(_DWORD *)(v22 + 124), v45, v42, v40, v41, v27);
    v74 = *(_OWORD *)(v22 + 112);
    v818[6] = *(_OWORD *)(v22 + 96);
    v819 = v74;
    v75 = *(_OWORD *)(v22 + 144);
    v820 = *(_OWORD *)(v22 + 128);
    v821 = v75;
    v76 = *(_OWORD *)(v22 + 48);
    v818[2] = *(_OWORD *)(v22 + 32);
    v818[3] = v76;
    v77 = *(_OWORD *)(v22 + 80);
    v818[4] = *(_OWORD *)(v22 + 64);
    v818[5] = v77;
    v78 = *(_OWORD *)v22;
    v79 = *(float32x4_t *)(v22 + 16);
    v818[0] = *(_OWORD *)v22;
    v818[1] = v79;
    HIDWORD(v819) = (v40 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v820 + 1) = v45;
    if (BYTE1(v818[0]) << 8 == 1024)
      CMYKF_mark_constmask((uint64_t)v818, v20, *(double *)&v78, v79, v68, v69, v70, v71, v72, v73, v62, v63, v64, v65, v66, v67);
    else
      CMYKF_mark_pixelmask((uint64_t)v818, v20, *(double *)&v78, v79, v68, v69, v70, v71, v72, v73);
    if (v45 == &v825)
      return 1;
    v80 = v45;
    goto LABEL_1243;
  }
  return 1;
}

void CMYKF_mark_constmask(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  float v19;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float32x4_t v30;
  int8x16_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int8x16_t *v46;
  char v47;
  unsigned int *v48;
  unsigned int *v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int8x16_t *v56;
  char v57;
  unsigned int *v58;
  unsigned int *v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  int8x16_t v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  float v76;
  unsigned int v77;
  int8x16_t v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  int v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  int8x16_t v94;
  float v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int8x16_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int8x16_t v106;
  float v107;
  float v108;
  uint64_t v109;
  int v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  int v115;
  float v116;
  float v117;
  float v118;
  uint64_t v119;
  int v120;
  float v121;
  float32x4_t v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  float v126;
  float v127;
  uint64_t v128;
  int v129;
  float v130;
  int8x16_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  float32x4_t v136;
  unsigned int v137;
  uint64_t v138;
  int v144;
  float v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  unsigned int v149;
  uint64_t v150;
  int v151;
  float v152;
  int8x16_t v153;
  float v154;
  int8x16_t v155;
  uint64_t v156;
  int v157;
  float v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  float32x4_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  float v170;
  int8x16_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  float32x4_t v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  float v182;
  int8x16_t v183;
  float v184;
  int8x16_t v185;
  uint64_t v186;
  int v187;
  float v188;
  int8x16_t v189;
  float v190;
  int8x16_t v191;
  uint64_t v192;
  int v193;
  float v194;
  int8x16_t v195;
  int8x16_t v196;
  uint64_t v197;
  int v198;
  float v199;
  int8x16_t v200;
  float v201;
  int8x16_t v202;
  uint64_t v203;
  int v204;
  float v205;
  int8x16_t v206;
  int8x16_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int8x16_t v214;
  float32x4_t v215;
  unsigned int v216;
  uint64_t v217;
  float32x4_t v218;
  int v219;
  float v220;
  int8x16_t v221;
  int8x16_t v222;
  float32x4_t v223;
  uint64_t v224;
  int v225;
  float v226;
  int8x16_t v227;
  float v228;
  int8x16_t v229;
  uint64_t v230;
  int v231;
  float v232;
  int8x16_t v233;
  float v234;
  int8x16_t v235;
  uint64_t v236;
  int v237;
  float v238;
  float v239;
  int8x16_t v240;
  uint64_t v241;
  int v242;
  float v243;
  int8x16_t v244;
  float v245;
  int8x16_t v246;
  int v247;
  int v248;
  int v249;
  char v250;
  unsigned int *v251;
  int8x16_t *v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  char v258;
  unsigned int *v259;
  uint64_t i64;
  int v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  int8x16_t v267;
  int v268;
  unsigned int v269;
  int8x16_t v270;
  int v271;
  float v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  unsigned int v277;
  unint64_t v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int8x16_t v282;
  unsigned int v283;
  float v284;
  int8x16_t v285;
  unsigned int v286;
  float v287;
  int8x16_t v288;
  unsigned int v289;
  float v290;
  unsigned int v291;
  float v292;
  unsigned int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  float32x4_t v298;
  unint64_t v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  int8x16_t v306;
  float v307;
  float v308;
  float v309;
  unsigned int v310;
  float v311;
  float v312;
  unsigned int v313;
  float v314;
  float v315;
  unsigned int v316;
  unsigned int v317;
  float v318;
  float v319;
  int v320;
  int v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  unsigned int v328;
  int v329;
  uint64_t v330;
  int v331;
  float32x4_t v332;
  uint64_t v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  unsigned int v340;
  int v341;
  int8x16_t v342;
  uint64_t v343;
  float32x4_t v344;
  float v345;
  int8x16_t v346;
  float v347;

  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(unsigned int **)(a1 + 96);
  if (v18)
    v19 = COERCE_FLOAT(bswap32(*v18));
  else
    v19 = 1.0;
  v20 = *(unsigned int *)(a1 + 4);
  v21 = *(_DWORD *)(a1 + 8);
  v22 = *(int8x16_t *)*(_QWORD *)(a1 + 88);
  v24 = *(int *)(a1 + 12);
  v23 = *(int *)(a1 + 16);
  if (v16)
  {
    v25 = (unint64_t)*(int *)(a1 + 32) >> 2;
    v26 = (unsigned int *)(v16 + 4 * (v24 + v25 * v23));
    v27 = 1;
    if (!v17)
      return;
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v27 = 0;
    if (!v17)
      return;
  }
  v28 = v25 - (int)v20;
  if (v16)
    v25 -= (int)v20;
  v29 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v30 = (float32x4_t)vrev32q_s8(v22);
  v31 = (int8x16_t *)(*(_QWORD *)(a1 + 40) + 16 * (v24 + v29 * v23));
  v32 = *(int *)(a1 + 124);
  v33 = v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32;
  v34 = v32 - (int)v20;
  v35 = v29 - (int)v20;
  v344 = v30;
  v345 = v19;
  v36 = v35;
  v37 = v34;
  v343 = *(unsigned int *)(a1 + 4);
  v38 = v25;
  switch((int)a2)
  {
    case 0:
      if (v16)
      {
        v39 = 4 * v27;
        do
        {
          v40 = v20;
          do
          {
            v41 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v41 == 255)
              {
                v31->i64[0] = 0;
                v31->i64[1] = 0;
                *v26 = 0;
              }
              else
              {
                v42 = (float)(v41 ^ 0xFFu) * 0.0039216;
                v43 = bswap32(COERCE_UNSIGNED_INT(v42 * COERCE_FLOAT(bswap32(*v26))));
                *v31 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v42));
                *v26 = v43;
              }
            }
            ++v33;
            ++v31;
            v26 = (unsigned int *)((char *)v26 + v39);
            --v40;
          }
          while (v40);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v247 = v20;
          do
          {
            v248 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v248 == 255)
              {
                v31->i64[0] = 0;
                v31->i64[1] = 0;
              }
              else
              {
                *v31 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v248 ^ 0xFFu) * 0.0039216));
              }
            }
            ++v33;
            ++v31;
            --v247;
          }
          while (v247);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 1:
      v44 = v33 & 3;
      if (!v16)
      {
        v249 = -1 << (8 * v44);
        if ((v33 & 3) != 0)
          v250 = v33 & 0xFC;
        else
          v250 = v33;
        if ((v33 & 3) != 0)
        {
          v251 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v249 = -1;
          v251 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0)
          v252 = &v31[-(v33 & 3)];
        else
          v252 = v31;
        if ((v33 & 3) != 0)
          v253 = v44 + v20;
        else
          v253 = v20;
        if ((((_BYTE)v253 + v250) & 3) != 0)
        {
          v254 = 4 - (((_BYTE)v253 + v250) & 3);
          v44 += v254;
          v255 = 0xFFFFFFFF >> (8 * v254);
          if (v253 >= 4)
            v256 = v255;
          else
            v256 = 0;
          if (v253 >= 4)
            v255 = -1;
          v249 &= v255;
        }
        else
        {
          v256 = 0;
        }
        v321 = v253 >> 2;
        while (1)
        {
          v322 = *v251 & v249;
          v323 = v321;
          v324 = v256;
          if (!v322)
            goto LABEL_522;
LABEL_504:
          if (v322 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v322)
            {
              v325 = v22;
              if (v322 != 255)
                v325 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v322 * 0.0039216), (float32x4_t)vrev32q_s8(*v252), 1.0 - (float)((float)v322 * 0.0039216)));
              *v252 = v325;
            }
            if (BYTE1(v322))
            {
              v326 = v22;
              if (BYTE1(v322) != 255)
                v326 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v322) * 0.0039216), (float32x4_t)vrev32q_s8(v252[1]), 1.0 - (float)((float)BYTE1(v322) * 0.0039216)));
              v252[1] = v326;
            }
            if (BYTE2(v322))
            {
              v327 = v22;
              if (BYTE2(v322) != 255)
                v327 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v322) * 0.0039216), (float32x4_t)vrev32q_s8(v252[2]), 1.0 - (float)((float)BYTE2(v322) * 0.0039216)));
              v252[2] = v327;
            }
            v328 = HIBYTE(v322);
            if (v328 == 255)
              goto LABEL_519;
            if (v328)
              v252[3] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v328 * 0.0039216), (float32x4_t)vrev32q_s8(v252[3]), 1.0 - (float)((float)v328 * 0.0039216)));
LABEL_522:
            while (1)
            {
              v329 = v323;
              v252 += 4;
              --v323;
              ++v251;
              if (v329 < 2)
                break;
              v322 = *v251;
              if (*v251)
                goto LABEL_504;
            }
            if (!v324)
              break;
            v324 = 0;
            v322 = *v251 & v256;
          }
          v251 = (unsigned int *)((char *)v251 + v34 - v44);
          v252 += v35 - v44;
          if (!--v21)
            return;
        }
        *v252 = v22;
        v252[1] = v22;
        v252[2] = v22;
LABEL_519:
        v252[3] = v22;
        goto LABEL_522;
      }
      v45 = -1 << (8 * v44);
      v46 = &v31[-(v33 & 3)];
      if ((v33 & 3) != 0)
        v47 = v33 & 0xFC;
      else
        v47 = v33;
      if ((v33 & 3) != 0)
      {
        v48 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v45 = -1;
        v48 = (unsigned int *)v33;
      }
      if ((v33 & 3) != 0)
        v49 = &v26[-(v33 & 3)];
      else
        v49 = v26;
      if ((v33 & 3) != 0)
      {
        v50 = v44 + v20;
      }
      else
      {
        v46 = v31;
        v50 = v20;
      }
      if ((((_BYTE)v50 + v47) & 3) != 0)
      {
        v51 = 4 - (((_BYTE)v50 + v47) & 3);
        v44 += v51;
        v52 = 0xFFFFFFFF >> (8 * v51);
        if (v50 >= 4)
          v53 = v52;
        else
          v53 = 0;
        if (v50 >= 4)
          v52 = -1;
        v45 &= v52;
      }
      else
      {
        v53 = 0;
      }
      v274 = v34 - v44;
      v275 = v50 >> 2;
      v276 = v35 - v44;
      v277 = bswap32(LODWORD(v19));
      v278 = v28 - v44;
      do
      {
        v279 = *v48 & v45;
        v280 = v275;
        v281 = v53;
        if (!v279)
          goto LABEL_473;
LABEL_455:
        if (v279 == -1)
        {
          *v46 = v22;
          *v49 = v277;
          v46[1] = v22;
          v49[1] = v277;
          v46[2] = v22;
          v49[2] = v277;
LABEL_470:
          v46[3] = v22;
          v49[3] = v277;
          goto LABEL_473;
        }
        while (1)
        {
          if ((_BYTE)v279)
          {
            v282 = v22;
            v283 = v277;
            if (v279 != 255)
            {
              v284 = (float)v279 * 0.0039216;
              v283 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v284) + (float)(COERCE_FLOAT(bswap32(*v49))
                                                                             * (float)(1.0 - v284))));
              v282 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v284), (float32x4_t)vrev32q_s8(*v46), 1.0 - v284));
            }
            *v46 = v282;
            *v49 = v283;
          }
          if (BYTE1(v279))
          {
            v285 = v22;
            v286 = v277;
            if (BYTE1(v279) != 255)
            {
              v287 = (float)BYTE1(v279) * 0.0039216;
              v286 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v287) + (float)(COERCE_FLOAT(bswap32(v49[1]))
                                                                             * (float)(1.0 - v287))));
              v285 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v287), (float32x4_t)vrev32q_s8(v46[1]), 1.0 - v287));
            }
            v46[1] = v285;
            v49[1] = v286;
          }
          if (BYTE2(v279))
          {
            v288 = v22;
            v289 = v277;
            if (BYTE2(v279) != 255)
            {
              v290 = (float)BYTE2(v279) * 0.0039216;
              v289 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v290) + (float)(COERCE_FLOAT(bswap32(v49[2]))
                                                                             * (float)(1.0 - v290))));
              v288 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v290), (float32x4_t)vrev32q_s8(v46[2]), 1.0 - v290));
            }
            v46[2] = v288;
            v49[2] = v289;
          }
          v291 = HIBYTE(v279);
          if (v291 == 255)
            goto LABEL_470;
          if (v291)
          {
            v292 = (float)v291 * 0.0039216;
            v293 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v292) + (float)(COERCE_FLOAT(bswap32(v49[3]))
                                                                           * (float)(1.0 - v292))));
            v46[3] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v292), (float32x4_t)vrev32q_s8(v46[3]), 1.0 - v292));
            v49[3] = v293;
          }
LABEL_473:
          while (1)
          {
            v294 = v280;
            v46 += 4;
            v49 += 4;
            --v280;
            ++v48;
            if (v294 < 2)
              break;
            v279 = *v48;
            if (*v48)
              goto LABEL_455;
          }
          if (!v281)
            break;
          v281 = 0;
          v279 = *v48 & v53;
        }
        v48 = (unsigned int *)((char *)v48 + v274);
        v46 += v276;
        v49 += v278;
        --v21;
      }
      while (v21);
      return;
    case 2:
      *(float *)v22.i32 = 1.0 - v19;
      v54 = v33 & 3;
      if (v16)
      {
        v55 = -1 << (8 * v54);
        v56 = &v31[-(v33 & 3)];
        if ((v33 & 3) != 0)
          v57 = v33 & 0xFC;
        else
          v57 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
        if ((v33 & 3) != 0)
        {
          v58 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v55 = -1;
          v58 = (unsigned int *)v33;
        }
        if ((v33 & 3) != 0)
          v59 = &v26[-(v33 & 3)];
        else
          v59 = v26;
        if ((v33 & 3) != 0)
        {
          v60 = v54 + v20;
        }
        else
        {
          v56 = v31;
          v60 = v20;
        }
        if ((((_BYTE)v60 + v57) & 3) != 0)
        {
          v61 = 4 - (((_BYTE)v60 + v57) & 3);
          v54 += v61;
          v62 = 0xFFFFFFFF >> (8 * v61);
          if (v60 >= 4)
            v63 = v62;
          else
            v63 = 0;
          if (v60 >= 4)
            v62 = -1;
          v55 &= v62;
        }
        else
        {
          v63 = 0;
        }
        v295 = v34 - v54;
        v296 = v35 - v54;
        v297 = v60 >> 2;
        v298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        v299 = v28 - v54;
        while (1)
        {
          v300 = *v58 & v55;
          v301 = v297;
          v302 = v63;
          if (!v300)
            goto LABEL_494;
LABEL_483:
          if (v300 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v300)
            {
              v308 = (float)v300 * 0.0039216;
              v309 = 1.0 - (float)(v19 * v308);
              v310 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v308) + (float)(COERCE_FLOAT(bswap32(*v59)) * v309)));
              *v56 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v308), (float32x4_t)vrev32q_s8(*v56), v309));
              *v59 = v310;
            }
            if ((v300 & 0xFF00) != 0)
            {
              v311 = (float)BYTE1(v300) * 0.0039216;
              v312 = 1.0 - (float)(v19 * v311);
              v313 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v311) + (float)(COERCE_FLOAT(bswap32(v59[1])) * v312)));
              v56[1] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v311), (float32x4_t)vrev32q_s8(v56[1]), v312));
              v59[1] = v313;
            }
            if ((v300 & 0xFF0000) != 0)
            {
              v314 = (float)BYTE2(v300) * 0.0039216;
              v315 = 1.0 - (float)(v19 * v314);
              v316 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v314) + (float)(COERCE_FLOAT(bswap32(v59[2])) * v315)));
              v56[2] = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v314), (float32x4_t)vrev32q_s8(v56[2]), v315));
              v59[2] = v316;
            }
            v317 = HIBYTE(v300);
            if (v317)
            {
              v318 = (float)v317 * 0.0039216;
              v319 = v19 * v318;
              v306 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v318), (float32x4_t)vrev32q_s8(v56[3]), 1.0 - (float)(v19 * v318));
              v307 = v319 + (float)(COERCE_FLOAT(bswap32(v59[3])) * (float)(1.0 - v319));
              goto LABEL_493;
            }
LABEL_494:
            while (1)
            {
              v320 = v301;
              v56 += 4;
              v59 += 4;
              --v301;
              ++v58;
              if (v320 < 2)
                break;
              v300 = *v58;
              if (*v58)
                goto LABEL_483;
            }
            if (!v302)
              break;
            v302 = 0;
            v300 = *v58 & v63;
          }
          v58 = (unsigned int *)((char *)v58 + v295);
          v56 += v296;
          v59 += v299;
          if (!--v21)
            return;
        }
        v303 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(*v59)) * *(float *)v22.i32)));
        *v56 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(*v56)));
        *v59 = v303;
        v304 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(v59[1])) * *(float *)v22.i32)));
        v56[1] = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[1])));
        v59[1] = v304;
        v305 = bswap32(COERCE_UNSIGNED_INT(v19 + (float)(COERCE_FLOAT(bswap32(v59[2])) * *(float *)v22.i32)));
        v56[2] = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[2])));
        v59[2] = v305;
        v306 = (int8x16_t)vmlaq_f32(v30, v298, (float32x4_t)vrev32q_s8(v56[3]));
        v307 = v19 + (float)(COERCE_FLOAT(bswap32(v59[3])) * *(float *)v22.i32);
LABEL_493:
        v56[3].i32[0] = bswap32(v306.u32[0]);
        *(int8x8_t *)((char *)v56[3].i64 + 4) = vrev32_s8(vext_s8(*(int8x8_t *)v306.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v306, v306, 8uLL), 4uLL));
        v56[3].i32[3] = bswap32(v306.u32[3]);
        v59[3] = bswap32(LODWORD(v307));
        goto LABEL_494;
      }
      v257 = -1 << (8 * v54);
      if ((v33 & 3) != 0)
        v258 = v33 & 0xFC;
      else
        v258 = v17 + *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 108) * v32;
      if ((v33 & 3) != 0)
      {
        v259 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v257 = -1;
        v259 = (unsigned int *)(v17 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32);
      }
      if ((v33 & 3) != 0)
        i64 = (uint64_t)v31[-(v33 & 3)].i64;
      else
        i64 = *(_QWORD *)(a1 + 40) + 16 * (v24 + v29 * v23);
      if ((v33 & 3) != 0)
        v261 = v54 + v20;
      else
        v261 = *(_DWORD *)(a1 + 4);
      if ((((_BYTE)v261 + v258) & 3) != 0)
      {
        v262 = 4 - (((_BYTE)v261 + v258) & 3);
        v54 += v262;
        v263 = 0xFFFFFFFF >> (8 * v262);
        if (v261 >= 4)
          v264 = v263;
        else
          v264 = 0;
        if (v261 >= 4)
          v263 = -1;
        v257 &= v263;
      }
      else
      {
        v264 = 0;
      }
      v330 = v34 - v54;
      v331 = v261 >> 2;
      v332 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
      v333 = v35 - v54;
      while (1)
      {
        v334 = *v259 & v257;
        v335 = v331;
        v336 = v264;
        if (!v334)
          goto LABEL_543;
LABEL_532:
        if (v334 == -1)
          break;
        while (1)
        {
          if ((_BYTE)v334)
            *(int8x16_t *)i64 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v334 * 0.0039216), (float32x4_t)vrev32q_s8(*(int8x16_t *)i64), 1.0- (float)(v19 * (float)((float)v334 * 0.0039216))));
          if ((v334 & 0xFF00) != 0)
            *(int8x16_t *)(i64 + 16) = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE1(v334) * 0.0039216), (float32x4_t)vrev32q_s8(*(int8x16_t *)(i64 + 16)), 1.0- (float)(v19 * (float)((float)BYTE1(v334) * 0.0039216))));
          if ((v334 & 0xFF0000) != 0)
            *(int8x16_t *)(i64 + 32) = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)BYTE2(v334) * 0.0039216), (float32x4_t)vrev32q_s8(*(int8x16_t *)(i64 + 32)), 1.0- (float)(v19 * (float)((float)BYTE2(v334) * 0.0039216))));
          v340 = HIBYTE(v334);
          if (v340)
          {
            v339 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, (float)v340 * 0.0039216), (float32x4_t)vrev32q_s8(*(int8x16_t *)(i64 + 48)), 1.0 - (float)(v19 * (float)((float)v340 * 0.0039216)));
            goto LABEL_542;
          }
LABEL_543:
          while (1)
          {
            v341 = v335;
            i64 += 64;
            --v335;
            ++v259;
            if (v341 < 2)
              break;
            v334 = *v259;
            if (*v259)
              goto LABEL_532;
          }
          if (!v336)
            break;
          v336 = 0;
          v334 = *v259 & v264;
        }
        v259 = (unsigned int *)((char *)v259 + v330);
        i64 += 16 * v333;
        if (!--v21)
          return;
      }
      v337 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v332, (float32x4_t)vrev32q_s8(*(int8x16_t *)(i64 + 16))));
      *(int8x16_t *)i64 = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v332, (float32x4_t)vrev32q_s8(*(int8x16_t *)i64)));
      *(int8x16_t *)(i64 + 16) = v337;
      v338 = *(int8x16_t *)(i64 + 48);
      *(int8x16_t *)(i64 + 32) = vrev32q_s8((int8x16_t)vmlaq_f32(v30, v332, (float32x4_t)vrev32q_s8(*(int8x16_t *)(i64 + 32))));
      v339 = (int8x16_t)vmlaq_f32(v30, v332, (float32x4_t)vrev32q_s8(v338));
LABEL_542:
      *(_DWORD *)(i64 + 48) = bswap32(v339.u32[0]);
      *(int8x8_t *)(i64 + 52) = vrev32_s8(vext_s8(*(int8x8_t *)v339.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v339, v339, 8uLL), 4uLL));
      *(_DWORD *)(i64 + 60) = bswap32(v339.u32[3]);
      goto LABEL_543;
    case 3:
      v64 = 4 * v27;
      do
      {
        v65 = v20;
        do
        {
          v66 = *(unsigned __int8 *)v33;
          if (*(_BYTE *)v33)
          {
            if (v66 == 255)
            {
              v67 = COERCE_FLOAT(bswap32(*v26));
              v68 = bswap32(COERCE_UNSIGNED_INT(v19 * v67));
              v69 = (int8x16_t)vmulq_n_f32(v30, v67);
            }
            else
            {
              v70 = (float)v66 * 0.0039216;
              v71 = COERCE_FLOAT(bswap32(*v26));
              v72 = v70 * v71;
              v68 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * (float)(v70 * v71)) + (float)(v71 * (float)(1.0 - v70))));
              v69 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v72), (float32x4_t)vrev32q_s8(*v31), 1.0 - v70);
            }
            *v31 = vrev32q_s8(v69);
            *v26 = v68;
          }
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v64);
          --v65;
        }
        while (v65);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 4:
      v73 = 4 * v27;
      do
      {
        v74 = v20;
        do
        {
          v75 = *(unsigned __int8 *)v33;
          if (*(_BYTE *)v33)
          {
            if (v75 == 255)
            {
              v76 = 1.0 - COERCE_FLOAT(bswap32(*v26));
              v77 = bswap32(COERCE_UNSIGNED_INT(v19 * v76));
              v78 = (int8x16_t)vmulq_n_f32(v30, v76);
            }
            else
            {
              v79 = (float)v75 * 0.0039216;
              v80 = COERCE_FLOAT(bswap32(*v26));
              v81 = v79 * (float)(1.0 - v80);
              v77 = bswap32(COERCE_UNSIGNED_INT((float)(v19 * v81) + (float)(v80 * (float)(1.0 - v79))));
              v78 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v30, v81), (float32x4_t)vrev32q_s8(*v31), 1.0 - v79);
            }
            *v31 = vrev32q_s8(v78);
            *v26 = v77;
          }
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v73);
          --v74;
        }
        while (v74);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 5:
      v82 = 4 * v27;
      do
      {
        v83 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v84 = COERCE_FLOAT(bswap32(*v26));
            v85 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v86 = 1.0 - (float)(v19 * v85);
            *v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v86), vmulq_n_f32(v30, v85), v84));
            *v26 = bswap32(COERCE_UNSIGNED_INT((float)(v86 * v84) + (float)((float)(v19 * v85) * v84)));
          }
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v82);
          --v83;
        }
        while (v83);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 6:
      v87 = 4 * v27;
      while (1)
      {
        v88 = v20;
        do
        {
          v89 = *(unsigned __int8 *)v33;
          if (!*(_BYTE *)v33)
            goto LABEL_96;
          v90 = COERCE_FLOAT(bswap32(*v26));
          v91 = 1.0 - v90;
          if ((float)(1.0 - v90) >= 1.0)
          {
            v95 = (float)v89 * 0.0039216;
            v93 = bswap32(COERCE_UNSIGNED_INT(v19 * v95));
            v94 = (int8x16_t)vmulq_n_f32(v30, v95);
          }
          else
          {
            if (v91 <= 0.0)
              goto LABEL_96;
            v92 = (float)v89 * 0.0039216;
            v93 = bswap32(COERCE_UNSIGNED_INT(v90 + (float)((float)(v19 * v92) * v91)));
            v94 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v31), vmulq_n_f32(v30, v92), v91);
          }
          *v31 = vrev32q_s8(v94);
          *v26 = v93;
LABEL_96:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v87);
          --v88;
        }
        while (v88);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 7:
      if (v16)
      {
        v96 = 4 * v27;
        do
        {
          v97 = v20;
          do
          {
            v98 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v98 == 255)
              {
                v99 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v19);
                v100 = v19 * COERCE_FLOAT(bswap32(*v26));
              }
              else
              {
                v101 = (float)(v19 * (float)((float)v98 * 0.0039216)) + (float)(1.0 - (float)((float)v98 * 0.0039216));
                v99 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v101);
                v100 = v101 * COERCE_FLOAT(bswap32(*v26));
              }
              *v31 = vrev32q_s8(v99);
              *v26 = bswap32(LODWORD(v100));
            }
            ++v33;
            ++v31;
            v26 = (unsigned int *)((char *)v26 + v96);
            --v97;
          }
          while (v97);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v265 = v20;
          do
          {
            v266 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v266 == 255)
                v267 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v19);
              else
                v267 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v19 * (float)((float)v266 * 0.0039216))+ (float)(1.0 - (float)((float)v266 * 0.0039216)));
              *v31 = vrev32q_s8(v267);
            }
            ++v33;
            ++v31;
            --v265;
          }
          while (v265);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 8:
      v102 = 1.0 - v19;
      if (v16)
      {
        v103 = 4 * v27;
        do
        {
          v104 = v20;
          do
          {
            v105 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v105 == 255)
              {
                v106 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v102);
                v107 = v102 * COERCE_FLOAT(bswap32(*v26));
              }
              else
              {
                v108 = (float)(v19 * (float)((float)v105 * -0.0039216)) + 1.0;
                v106 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v108);
                v107 = v108 * COERCE_FLOAT(bswap32(*v26));
              }
              *v31 = vrev32q_s8(v106);
              *v26 = bswap32(LODWORD(v107));
            }
            ++v33;
            ++v31;
            v26 = (unsigned int *)((char *)v26 + v103);
            --v104;
          }
          while (v104);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v268 = v20;
          do
          {
            v269 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v269 == 255)
                v270 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v102);
              else
                v270 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), (float)(v19 * (float)((float)v269 * -0.0039216)) + 1.0);
              *v31 = vrev32q_s8(v270);
            }
            ++v33;
            ++v31;
            --v268;
          }
          while (v268);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 9:
      v109 = 4 * v27;
      do
      {
        v110 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v111 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v112 = COERCE_FLOAT(bswap32(*v26));
            v113 = (float)(1.0 - v111) + (float)(v19 * v111);
            *v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v113), vmulq_n_f32(v30, v111), 1.0 - v112));
            *v26 = bswap32(COERCE_UNSIGNED_INT((float)(v113 * v112) + (float)((float)(v19 * v111) * (float)(1.0 - v112))));
          }
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v109);
          --v110;
        }
        while (v110);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 10:
      v114 = 4 * v27;
      do
      {
        v115 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v116 = COERCE_FLOAT(bswap32(*v26));
            v117 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v118 = 1.0 - (float)(v19 * v117);
            *v31 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v31), v118), vmulq_n_f32(v30, v117), 1.0 - v116));
            *v26 = bswap32(COERCE_UNSIGNED_INT((float)(v118 * v116) + (float)((float)(v19 * v117) * (float)(1.0 - v116))));
          }
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v114);
          --v115;
        }
        while (v115);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        --v21;
      }
      while (v21);
      return;
    case 11:
      if (v16)
      {
        v119 = 4 * v27;
        do
        {
          v120 = v20;
          do
          {
            if (*(_BYTE *)v33)
            {
              v121 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a7.i32[0] = bswap32(*v26);
              a8.f32[0] = (float)(v19 * v121) + a7.f32[0];
              if (a8.f32[0] > 1.0)
                a8.f32[0] = 1.0;
              v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
              v123 = bswap32(a8.u32[0]);
              a8 = (float32x4_t)vrev32q_s8(*v31);
              a6.f32[0] = v19 * v121;
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
              a7 = vsubq_f32(v122, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), a8));
              *v31 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(a6, vmulq_n_f32(v30, v121)), a7));
              *v26 = v123;
            }
            ++v33;
            ++v31;
            v26 = (unsigned int *)((char *)v26 + v119);
            --v120;
          }
          while (v120);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v271 = v20;
          do
          {
            if (*(_BYTE *)v33)
            {
              v272 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              a5.f32[0] = v19 * v272;
              a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              *v31 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(a5, vmulq_n_f32(v30, v272)), (float32x4_t)vrev32q_s8(*v31)));
            }
            ++v33;
            ++v31;
            --v271;
          }
          while (v271);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 12:
      if (v16)
      {
        v124 = 4 * v27;
        do
        {
          v125 = v20;
          do
          {
            if (*(_BYTE *)v33)
            {
              v126 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              v127 = (float)(v19 * v126) + COERCE_FLOAT(bswap32(*v26));
              if (v127 > 1.0)
                v127 = 1.0;
              *v31 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(v30, v126), (float32x4_t)vrev32q_s8(*v31)));
              *v26 = bswap32(LODWORD(v127));
            }
            ++v33;
            ++v31;
            v26 = (unsigned int *)((char *)v26 + v124);
            --v125;
          }
          while (v125);
          v33 += v34;
          v31 += v35;
          v26 += v25;
          --v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v273 = v20;
          do
          {
            if (*(_BYTE *)v33)
              *v31 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(v30, (float)*(unsigned __int8 *)v33 * 0.0039216), (float32x4_t)vrev32q_s8(*v31)));
            ++v33;
            ++v31;
            --v273;
          }
          while (v273);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
      }
      return;
    case 13:
      v128 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        v129 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v130 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v130;
            if ((float)(v19 * v130) > 0.0)
            {
              v131 = (int8x16_t)vmulq_n_f32(v30, v130);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0)
                  goto LABEL_164;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v132 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v133 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v131);
              v134 = (int8x16_t)vmulq_f32(v132, v133);
              v135 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v134, v132, 1.0 - a5.f32[0]), v134);
              v136 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a7, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v135, v133, 1.0 - a7.f32[0]), v135);
              a5.f32[0] = (float)(a7.f32[0] + a5.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v131 = (int8x16_t)vsubq_f32(a7, v136);
              if (v16)
              {
LABEL_164:
                v137 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v131);
                *v31 = (int8x16_t)a5;
                *v26 = v137;
                goto LABEL_166;
              }
              a5 = (float32x4_t)vrev32q_s8(v131);
              *v31 = (int8x16_t)a5;
            }
          }
LABEL_166:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v128);
          --v129;
        }
        while (v129);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 14:
      v138 = 4 * v27;
      __asm { FMOV            V1.4S, #1.0 }
      while (1)
      {
        v144 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v145 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v145;
            if ((float)(v19 * v145) > 0.0)
            {
              v146 = (int8x16_t)vmulq_n_f32(v30, v145);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0)
                  goto LABEL_178;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v147 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v148 = vmlaq_f32(v147, vsubq_f32(_Q1, v147), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v146));
              a5.f32[0] = (float)(a5.f32[0] + a7.f32[0]) - (float)(a7.f32[0] * a5.f32[0]);
              v146 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v148);
              if (v16)
              {
LABEL_178:
                v149 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v146);
                *v31 = (int8x16_t)a5;
                *v26 = v149;
                goto LABEL_180;
              }
              a5 = (float32x4_t)vrev32q_s8(v146);
              *v31 = (int8x16_t)a5;
            }
          }
LABEL_180:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v138);
          --v144;
        }
        while (v144);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 15:
      v150 = 4 * v27;
      while (1)
      {
        v151 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v152 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v152;
            if ((float)(v19 * v152) > 0.0)
            {
              v153 = (int8x16_t)vmulq_n_f32(v30, v152);
              if (v16)
              {
                v154 = COERCE_FLOAT(bswap32(*v26));
                if (v154 <= 0.0)
                  goto LABEL_193;
              }
              else
              {
                v154 = 1.0;
              }
              v155 = vrev32q_s8(*v31);
              PDAoverlayPDA((float *)v346.i32, *(float *)v155.i32, *(float *)&v155.i32[1], *(float *)&v155.i32[2], *(float *)&v155.i32[3], v154, *(double *)v153.i64, a9, a10, *(float *)v153.i32, *(float *)&v153.i32[1], *(float *)&v153.i32[2], *(float *)&v153.i32[3], *(float *)&a9);
              v153 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_193:
                *v31 = vrev32q_s8(v153);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_195;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_195:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v150);
          --v151;
        }
        while (v151);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 16:
      v156 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        v157 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v158 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v158;
            if ((float)(v19 * v158) > 0.0)
            {
              v159 = (int8x16_t)vmulq_n_f32(v30, v158);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0)
                  goto LABEL_207;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v160 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v161 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v159);
              v162 = (int8x16_t)vmulq_n_f32(v160, a5.f32[0]);
              v163 = (int8x16_t)vmulq_n_f32(v161, a6.f32[0]);
              v164 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v162, (float32x4_t)v163), v163, v162);
              v165 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v164, v160, 1.0 - a5.f32[0]), v164);
              v166 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v165, v161, 1.0 - a6.f32[0]), v165);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v159 = (int8x16_t)vsubq_f32(a6, v166);
              if (v16)
              {
LABEL_207:
                v167 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v159);
                *v31 = (int8x16_t)a5;
                *v26 = v167;
                goto LABEL_209;
              }
              a5 = (float32x4_t)vrev32q_s8(v159);
              *v31 = (int8x16_t)a5;
            }
          }
LABEL_209:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v156);
          --v157;
        }
        while (v157);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 17:
      v168 = 4 * v27;
      a4.i32[0] = 1.0;
      while (1)
      {
        v169 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v170 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a5.f32[0] = v19 * v170;
            if ((float)(v19 * v170) > 0.0)
            {
              v171 = (int8x16_t)vmulq_n_f32(v30, v170);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0)
                  goto LABEL_221;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v172 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v173 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v171);
              v174 = (int8x16_t)vmulq_n_f32(v172, a5.f32[0]);
              v175 = (int8x16_t)vmulq_n_f32(v173, a6.f32[0]);
              v176 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v175, (float32x4_t)v174), v175, v174);
              v177 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v176, v172, 1.0 - a5.f32[0]), v176);
              v178 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v177, v173, 1.0 - a6.f32[0]), v177);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v171 = (int8x16_t)vsubq_f32(a6, v178);
              if (v16)
              {
LABEL_221:
                v179 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v171);
                *v31 = (int8x16_t)a5;
                *v26 = v179;
                goto LABEL_223;
              }
              a5 = (float32x4_t)vrev32q_s8(v171);
              *v31 = (int8x16_t)a5;
            }
          }
LABEL_223:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v168);
          --v169;
        }
        while (v169);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 18:
      v180 = 4 * v27;
      while (1)
      {
        v181 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v182 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v182;
            if ((float)(v19 * v182) > 0.0)
            {
              v183 = (int8x16_t)vmulq_n_f32(v30, v182);
              if (v16)
              {
                v184 = COERCE_FLOAT(bswap32(*v26));
                if (v184 <= 0.0)
                  goto LABEL_236;
              }
              else
              {
                v184 = 1.0;
              }
              v185 = vrev32q_s8(*v31);
              PDAcolordodgePDA((float *)v346.i32, *(float *)v185.i32, *(float *)&v185.i32[1], *(float *)&v185.i32[2], *(float *)&v185.i32[3], v184, *(double *)v183.i64, a9, a10, *(float *)v183.i32, *(float *)&v183.i32[1], *(float *)&v183.i32[2], *(float *)&v183.i32[3], *(float *)&a9);
              v183 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_236:
                *v31 = vrev32q_s8(v183);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_238;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_238:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v180);
          --v181;
        }
        while (v181);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 19:
      v186 = 4 * v27;
      while (1)
      {
        v187 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v188 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v188;
            if ((float)(v19 * v188) > 0.0)
            {
              v189 = (int8x16_t)vmulq_n_f32(v30, v188);
              if (v16)
              {
                v190 = COERCE_FLOAT(bswap32(*v26));
                if (v190 <= 0.0)
                  goto LABEL_251;
              }
              else
              {
                v190 = 1.0;
              }
              v191 = vrev32q_s8(*v31);
              PDAcolorburnPDA((float *)v346.i32, *(float *)v191.i32, *(float *)&v191.i32[1], *(float *)&v191.i32[2], *(float *)&v191.i32[3], v190, *(double *)v189.i64, a9, a10, *(float *)v189.i32, *(float *)&v189.i32[1], *(float *)&v189.i32[2], *(float *)&v189.i32[3], *(float *)&a9);
              v189 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_251:
                *v31 = vrev32q_s8(v189);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_253;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_253:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v186);
          --v187;
        }
        while (v187);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 20:
      v192 = 4 * v27;
      while (1)
      {
        v193 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v194 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v194;
            if ((float)(v19 * v194) > 0.0)
            {
              v195 = (int8x16_t)vmulq_n_f32(v30, v194);
              if (v16)
              {
                a7.i32[0] = bswap32(*v26);
                if (a7.f32[0] <= 0.0)
                  goto LABEL_266;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v196 = vrev32q_s8(*v31);
              PDAsoftlightPDA((float32x4_t *)&v346, *(float32x2_t *)v196.i8, *(float32_t *)&v196.i32[1], *(float *)&v196.i32[2], *(float *)&v196.i32[3], *(double *)a7.i64, *(int32x2_t *)v195.i8, a9, a10, a2, v35, v34, v20, a14, a15, a16, *(float32x2_t *)v195.i8, *(float *)&v195.i32[2], *(float *)&v195.i32[3],
                *(float *)&a9);
              v195 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_266:
                *v31 = vrev32q_s8(v195);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_268;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_268:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v192);
          --v193;
        }
        while (v193);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        v20 = v343;
        if (!v21)
          return;
      }
    case 21:
      v197 = 4 * v27;
      while (1)
      {
        v198 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v199 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v199;
            if ((float)(v19 * v199) > 0.0)
            {
              v200 = (int8x16_t)vmulq_n_f32(v30, v199);
              if (v16)
              {
                v201 = COERCE_FLOAT(bswap32(*v26));
                if (v201 <= 0.0)
                  goto LABEL_281;
              }
              else
              {
                v201 = 1.0;
              }
              v202 = vrev32q_s8(*v31);
              PDAhardlightPDA((float *)v346.i32, *(float *)v202.i32, *(float *)&v202.i32[1], *(float *)&v202.i32[2], *(float *)&v202.i32[3], v201, *(double *)v200.i64, a9, a10, *(float *)v200.i32, *(float *)&v200.i32[1], *(float *)&v200.i32[2], *(float *)&v200.i32[3], *(float *)&a9);
              v200 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_281:
                *v31 = vrev32q_s8(v200);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_283;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_283:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v197);
          --v198;
        }
        while (v198);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 22:
      v203 = 4 * v27;
      while (1)
      {
        v204 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v205 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a4.f32[0] = v19 * v205;
            if ((float)(v19 * v205) > 0.0)
            {
              v206 = (int8x16_t)vmulq_n_f32(v30, v205);
              if (v16)
              {
                a6.i32[0] = bswap32(*v26);
                if (a6.f32[0] <= 0.0)
                  goto LABEL_296;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v207 = *v31;
              *(float *)v207.i32 = (float)(a6.f32[0] + a4.f32[0]) - (float)(a6.f32[0] * a4.f32[0]);
              v208 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v209 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), (float32x4_t)v206);
              v210 = vaddq_f32(v208, v209);
              v211 = vmulq_n_f32(v208, a4.f32[0]);
              v212 = vmulq_n_f32(v209, a6.f32[0]);
              v213 = vsubq_f32(v210, v211);
              v214 = (int8x16_t)vsubq_f32(v211, v212);
              v215 = vsubq_f32(v213, v212);
              a6 = (float32x4_t)vcltzq_f32((float32x4_t)v214);
              v206 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.i8, 0), vaddq_f32(v215, (float32x4_t)vbslq_s8((int8x16_t)a6, (int8x16_t)vnegq_f32((float32x4_t)v214), v214)));
              if (v16)
              {
                a4.i32[0] = v207.i32[0];
LABEL_296:
                v216 = bswap32(a4.u32[0]);
                a4 = (float32x4_t)vrev32q_s8(v206);
                *v31 = (int8x16_t)a4;
                *v26 = v216;
                goto LABEL_298;
              }
              a4 = (float32x4_t)vrev32q_s8(v206);
              *v31 = (int8x16_t)a4;
            }
          }
LABEL_298:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v203);
          --v204;
        }
        while (v204);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 23:
      v217 = 4 * v27;
      v218.i64[0] = 0xC0000000C0000000;
      v218.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        v219 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v220 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            a6.f32[0] = v19 * v220;
            if ((float)(v19 * v220) > 0.0)
            {
              v221 = (int8x16_t)vmulq_n_f32(v30, v220);
              if (v16)
              {
                a8.i32[0] = bswap32(*v26);
                if (a8.f32[0] <= 0.0)
                  goto LABEL_311;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v222 = *v31;
              *(float *)v222.i32 = (float)(a8.f32[0] + a6.f32[0]) - (float)(a8.f32[0] * a6.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), (float32x4_t)vrev32q_s8(*v31));
              v223 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)v221);
              a6 = vmlaq_f32(vaddq_f32(a8, v223), v218, vmulq_f32(v223, a8));
              v221 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.i8, 0), a6);
              if (v16)
              {
                a6.i32[0] = v222.i32[0];
LABEL_311:
                *v31 = vrev32q_s8(v221);
                *v26 = bswap32(a6.u32[0]);
                goto LABEL_313;
              }
              *v31 = vrev32q_s8(v221);
            }
          }
LABEL_313:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v217);
          --v219;
        }
        while (v219);
        v33 += v34;
        v31 += v35;
        v26 += v25;
        if (!--v21)
          return;
      }
    case 24:
      v224 = 4 * v27;
      while (1)
      {
        v225 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v226 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v226;
            if ((float)(v19 * v226) > 0.0)
            {
              v227 = (int8x16_t)vmulq_n_f32(v30, v226);
              if (v16)
              {
                v228 = COERCE_FLOAT(bswap32(*v26));
                if (v228 <= 0.0)
                  goto LABEL_326;
              }
              else
              {
                v228 = 1.0;
              }
              v229 = vrev32q_s8(*v31);
              PDAhuePDA((float *)v346.i32, *(float *)v229.i32, *(float *)&v229.i32[1], *(float *)&v229.i32[2], *(float *)&v229.i32[3], v228, *(double *)v227.i64, a9, a10, *(float *)v227.i32, *(float *)&v227.i32[1], *(float *)&v227.i32[2], *(float *)&v227.i32[3], *(float *)&a9);
              v227 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_326:
                *v31 = vrev32q_s8(v227);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_328;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_328:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v224);
          --v225;
        }
        while (v225);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 25:
      v230 = 4 * v27;
      while (1)
      {
        v231 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v232 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            *(float *)&a9 = v19 * v232;
            if ((float)(v19 * v232) > 0.0)
            {
              v233 = (int8x16_t)vmulq_n_f32(v30, v232);
              if (v16)
              {
                v234 = COERCE_FLOAT(bswap32(*v26));
                if (v234 <= 0.0)
                  goto LABEL_341;
              }
              else
              {
                v234 = 1.0;
              }
              v235 = vrev32q_s8(*v31);
              PDAsaturationPDA((float *)v346.i32, *(float *)v235.i32, *(float *)&v235.i32[1], *(float *)&v235.i32[2], *(float *)&v235.i32[3], v234, *(double *)v233.i64, a9, a10, *(float *)v233.i32, *(float *)&v233.i32[1], *(float *)&v233.i32[2], *(float *)&v233.i32[3], *(float *)&a9);
              v233 = v346;
              if (v16)
              {
                *(float *)&a9 = v347;
                v30 = v344;
                v19 = v345;
LABEL_341:
                *v31 = vrev32q_s8(v233);
                *v26 = bswap32(LODWORD(a9));
                goto LABEL_343;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_343:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v230);
          --v231;
        }
        while (v231);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 26:
      v236 = 4 * v27;
      while (1)
      {
        v237 = v20;
        do
        {
          if (*(_BYTE *)v33)
          {
            v238 = (float)*(unsigned __int8 *)v33 * 0.0039216;
            v239 = v19 * v238;
            if ((float)(v19 * v238) > 0.0)
            {
              v240 = (int8x16_t)vmulq_n_f32(v30, v238);
              if (v16)
              {
                a8.i32[0] = bswap32(*v26);
                if (a8.f32[0] <= 0.0)
                  goto LABEL_356;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v342 = vrev32q_s8(*v31);
              PDAluminosityPDA((float *)v346.i32, *(float *)v240.i32, *(float *)&v240.i32[1], *(float *)&v240.i32[2], *(float *)&v240.i32[3], v239, *(double *)a8.i64, *(double *)v342.i64, a10, *(float *)v342.i32, *(float *)&v342.i32[1], *(float *)&v342.i32[2], *(float *)&v342.i32[3], a8.f32[0]);
              v240 = v346;
              if (v16)
              {
                v239 = v347;
                v30 = v344;
                v19 = v345;
LABEL_356:
                *v31 = vrev32q_s8(v240);
                *v26 = bswap32(LODWORD(v239));
                goto LABEL_358;
              }
              *v31 = vrev32q_s8(v346);
              v30 = v344;
              v19 = v345;
            }
          }
LABEL_358:
          ++v33;
          ++v31;
          v26 = (unsigned int *)((char *)v26 + v236);
          --v237;
        }
        while (v237);
        v33 += v37;
        v31 += v36;
        v26 += v38;
        --v21;
        LODWORD(v20) = v343;
        if (!v21)
          return;
      }
    case 27:
      v241 = 4 * v27;
      break;
    default:
      return;
  }
  do
  {
    v242 = v20;
    do
    {
      if (*(_BYTE *)v33)
      {
        v243 = (float)*(unsigned __int8 *)v33 * 0.0039216;
        *(float *)&a9 = v19 * v243;
        if ((float)(v19 * v243) > 0.0)
        {
          v244 = (int8x16_t)vmulq_n_f32(v30, v243);
          if (v16)
          {
            v245 = COERCE_FLOAT(bswap32(*v26));
            if (v245 <= 0.0)
              goto LABEL_371;
          }
          else
          {
            v245 = 1.0;
          }
          v246 = vrev32q_s8(*v31);
          PDAluminosityPDA((float *)v346.i32, *(float *)v246.i32, *(float *)&v246.i32[1], *(float *)&v246.i32[2], *(float *)&v246.i32[3], v245, *(double *)v244.i64, a9, a10, *(float *)v244.i32, *(float *)&v244.i32[1], *(float *)&v244.i32[2], *(float *)&v244.i32[3], *(float *)&a9);
          v244 = v346;
          if (v16)
          {
            *(float *)&a9 = v347;
            v30 = v344;
            v19 = v345;
LABEL_371:
            *v31 = vrev32q_s8(v244);
            *v26 = bswap32(LODWORD(a9));
            goto LABEL_373;
          }
          *v31 = vrev32q_s8(v346);
          v30 = v344;
          v19 = v345;
        }
      }
LABEL_373:
      ++v33;
      ++v31;
      v26 = (unsigned int *)((char *)v26 + v241);
      --v242;
    }
    while (v242);
    v33 += v37;
    v31 += v36;
    v26 += v38;
    --v21;
    LODWORD(v20) = v343;
  }
  while (v21);
}

void CMYKF_mark_pixelmask(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int8x16_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  float v54;
  unsigned int v55;
  int8x16_t *v56;
  unsigned int *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  int8x16_t v72;
  float v73;
  float v74;
  int8x16_t v75;
  int8x16_t *v76;
  unsigned int *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  int v89;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  int8x16_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int8x16_t *v100;
  unsigned int *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  int v113;
  unsigned int v114;
  float v115;
  float v116;
  float v117;
  unsigned int v118;
  int8x16_t v119;
  float v120;
  float v121;
  float v122;
  float v123;
  int8x16_t *v124;
  unsigned int *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  int v137;
  float v138;
  float v139;
  float v140;
  float v141;
  int8x16_t *v142;
  unsigned int *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  int v155;
  unsigned int v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  unsigned int v162;
  int8x16_t v163;
  float v164;
  int8x16_t *v165;
  unsigned int *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  int v177;
  unsigned int v178;
  float v179;
  int8x16_t v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float32x4_t v186;
  int8x16_t *v187;
  unsigned int *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int *v198;
  int v199;
  unsigned int v200;
  float32x4_t v201;
  float v202;
  float v203;
  int8x16_t *v204;
  unsigned int *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  int v217;
  float v218;
  float v219;
  float v220;
  float v221;
  int8x16_t *v222;
  unsigned int *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  int v235;
  float v236;
  float v237;
  float v238;
  int8x16_t *v239;
  unsigned int *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  int v251;
  float v252;
  float v253;
  float32x4_t v254;
  float32x4_t v255;
  unsigned int v256;
  int8x16_t *v257;
  unsigned int *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  int v269;
  float v270;
  float v271;
  float32x4_t v272;
  float v273;
  int8x16_t *v274;
  unsigned int *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  int v287;
  float v288;
  float v289;
  float32x4_t v290;
  int8x16_t v291;
  float32x4_t v292;
  float32x4_t v293;
  int8x16_t v294;
  int8x16_t v295;
  unsigned int v296;
  int8x16_t *v297;
  unsigned int *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int *v314;
  int v315;
  float v316;
  float v317;
  float32x4_t v318;
  int8x16_t v319;
  float32x4_t v320;
  float32x4_t v321;
  unsigned int v322;
  int8x16_t *v323;
  unsigned int *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  int v333;
  int v334;
  int v335;
  float v336;
  float v337;
  int8x16_t v338;
  float v339;
  int8x16_t v340;
  int8x16_t *v341;
  uint64_t v342;
  int8x16_t *v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int *v355;
  int v356;
  float v357;
  float v358;
  int8x16_t v359;
  float32x4_t v360;
  float32x4_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  float32x4_t v366;
  unsigned int v367;
  int8x16_t *v368;
  unsigned int *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  int v381;
  float v382;
  float v383;
  int8x16_t v384;
  float32x4_t v385;
  float32x4_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  float32x4_t v391;
  unsigned int v392;
  int8x16_t *v393;
  unsigned int *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int *v402;
  int v403;
  int v404;
  int v405;
  float v406;
  float v407;
  int8x16_t v408;
  float v409;
  int8x16_t v410;
  int8x16_t *v411;
  uint64_t v412;
  int8x16_t *v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int *v422;
  int v423;
  int v424;
  int v425;
  float v426;
  float v427;
  int8x16_t v428;
  float v429;
  int8x16_t v430;
  int8x16_t *v431;
  uint64_t v432;
  int8x16_t *v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int *v442;
  int v443;
  int v444;
  int v445;
  float v446;
  float v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t *v450;
  uint64_t v451;
  int8x16_t *v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int *v461;
  int v462;
  int v463;
  int v464;
  float v465;
  float v466;
  int8x16_t v467;
  float v468;
  int8x16_t v469;
  int8x16_t *v470;
  uint64_t v471;
  int8x16_t *v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int *v484;
  int v485;
  float v486;
  float v487;
  float32x4_t v488;
  int8x16_t v489;
  int8x16_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  int8x16_t v497;
  unsigned int v498;
  int8x16_t *v499;
  unsigned int *v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  float32x4_t v511;
  unsigned int *v512;
  int v513;
  float v514;
  float v515;
  int8x16_t v516;
  int8x16_t v517;
  float32x4_t v518;
  unsigned int v519;
  int8x16_t *v520;
  unsigned int *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int *v529;
  int v530;
  int v531;
  int v532;
  float v533;
  float v534;
  int8x16_t v535;
  float v536;
  int8x16_t v537;
  int8x16_t *v538;
  uint64_t v539;
  int8x16_t *v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int *v549;
  int v550;
  int v551;
  int v552;
  float v553;
  float v554;
  int8x16_t v555;
  float v556;
  int8x16_t v557;
  int8x16_t *v558;
  uint64_t v559;
  int8x16_t *v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unsigned int *v569;
  int v570;
  int v571;
  int v572;
  float v573;
  float v574;
  float v575;
  int8x16_t v576;
  int8x16_t *v577;
  uint64_t v578;
  int8x16_t *v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int *v588;
  int v589;
  int v590;
  int v591;
  float v592;
  float v593;
  int8x16_t v594;
  float v595;
  int8x16_t v596;
  int8x16_t *v597;
  uint64_t v598;
  int8x16_t *v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  unsigned int v612;
  int8x16_t v613;
  int8x16_t *v614;
  uint64_t v615;
  int8x16_t *v616;
  unint64_t v617;
  uint64_t v618;
  int8x16_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int *v625;
  int v626;
  unsigned int v627;
  float v628;
  int8x16_t v629;
  float v630;
  float v631;
  int8x16_t *v632;
  unsigned int *v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int *v642;
  int v643;
  unsigned int v644;
  int8x16_t v645;
  float32x4_t v646;
  int8x16_t *v647;
  unsigned int *v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned int *v657;
  int v658;
  unsigned int v659;
  float32x4_t v660;
  float v661;
  int8x16_t *v662;
  unsigned int *v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unsigned int *v672;
  int v673;
  float v674;
  int8x16_t *v675;
  unsigned int *v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  int8x16_t *v684;
  uint64_t v685;
  int8x16_t *v686;
  unint64_t v687;
  uint64_t v688;
  int8x16_t *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  unsigned int v694;
  int8x16_t v695;
  unsigned int v696;
  float v697;
  int8x16_t *v698;
  uint64_t v699;
  int8x16_t *v700;
  unint64_t v701;
  uint64_t v702;
  int8x16_t *v703;
  uint64_t v704;
  int8x16_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  int v757;
  int v758;
  int v759;
  int v760;
  int v761;
  int v762;
  int v763;
  int v764;
  unint64_t v765;
  int8x16_t *v766;
  int v767;
  int v768;
  int8x16_t v769;
  unsigned __int32 v770;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 136);
  v13 = *(int *)(a1 + 12);
  v12 = *(int *)(a1 + 16);
  if (v10)
  {
    v14 = (unint64_t)*(int *)(a1 + 32) >> 2;
    v15 = (unsigned int *)(v10 + 4 * (v13 + v14 * v12));
    v16 = -1;
    if (!v11)
      return;
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v16 = 0;
    if (!v11)
      return;
  }
  v18 = *(unsigned int *)(a1 + 4);
  v17 = *(unsigned int *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v21 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v22 = (int8x16_t *)(*(_QWORD *)(a1 + 40) + 16 * (v13 + v21 * v12));
  v23 = *(int *)(a1 + 124);
  v24 = (_BYTE *)(v11 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v23);
  v25 = *(int *)(a1 + 56);
  v26 = *(int *)(a1 + 60);
  v27 = *(int *)(a1 + 76);
  if ((*(_DWORD *)a1 & 0xFF00) != 0x100)
  {
    v30 = *(_DWORD *)(a1 + 64);
    v31 = *(_DWORD *)(a1 + 68);
    v28 = v27 >> 4;
    if (v19)
    {
      v29 = (unint64_t)*(int *)(a1 + 80) >> 2;
      v767 = 1;
    }
    else
    {
      v29 = 0;
      v767 = 0;
    }
    v35 = v20 + 16 * v28 * v31;
    v16 &= 1u;
    v34 = 1;
    v766 = *(int8x16_t **)(a1 + 88);
    v32 = v766;
    goto LABEL_19;
  }
  v28 = v27 >> 4;
  if (v19)
  {
    v29 = (unint64_t)*(int *)(a1 + 80) >> 2;
    v19 += 4 * (v25 + v29 * v26);
    v767 = -1;
  }
  else
  {
    v29 = 0;
    v767 = 0;
  }
  v32 = (int8x16_t *)(v20 + 16 * (v25 + v28 * v26));
  if (v28 == v21 && (char *)v22 - (char *)v32 >= 1)
  {
    if ((int)v18 >= (uint64_t)((unint64_t)((char *)v22 - (char *)v32) >> 4))
    {
      v22 += (int)v18 - 1;
      v32 += (int)v18 - 1;
      v24 += (int)v18 - 1;
      v15 += v16 & ((int)v18 - 1);
      v34 = -1;
      v28 = (unint64_t)*(int *)(a1 + 28) >> 4;
      v19 += 4 * (v767 & ((int)v18 - 1));
      goto LABEL_16;
    }
    v33 = (int)v17 - 1;
    if (v22 <= &v32[v21 * v33 - 1 + (int)v18])
    {
      v22 += v21 * v33;
      v28 = -(uint64_t)v21;
      v24 += v23 * v33;
      v23 = -v23;
      v15 += v14 * v33;
      v14 = -(uint64_t)v14;
      v16 &= 1u;
      v19 += 4 * v29 * v33;
      v29 = -(uint64_t)v29;
      v767 &= 1u;
      v34 = 1;
      v32 += v21 * v33;
      v21 = -(uint64_t)v21;
      goto LABEL_16;
    }
  }
  v16 &= 1u;
  v767 &= 1u;
  v34 = 1;
LABEL_16:
  v35 = 0;
  v766 = 0;
  v20 = -1;
  v31 = v29;
  v30 = v28;
LABEL_19:
  v768 = v16;
  v36 = v34 * v18;
  if (v35)
  {
    v37 = (int)v26 % v31;
    v38 = &v32[v28 * v37];
    v39 = (int)v25 % v30;
    v32 = &v38[v39];
    v20 = (unint64_t)&v38[v30];
    if ((v767 & 1) != 0)
      v19 += 4 * v29 * v37 + 4 * v39;
    v766 = &v38[v39];
  }
  else
  {
    v28 -= v36;
    v29 -= v767 * (int)v18;
  }
  v40 = v23 - v36;
  v41 = v21 - v36;
  v765 = v14 - v768 * (int)v18;
  v744 = v28;
  v745 = v18;
  v742 = v41;
  v743 = v40;
  v746 = v35;
  switch((int)a2)
  {
    case 0:
      if (v768)
      {
        do
        {
          v42 = v18;
          do
          {
            v43 = *v24;
            if (*v24)
            {
              if (v43 == 255)
              {
                v22->i64[0] = 0;
                v22->i64[1] = 0;
                *v15 = 0;
              }
              else
              {
                v44 = (float)((float)v43 * -0.0039216) + 1.0;
                v45 = bswap32(COERCE_UNSIGNED_INT(v44 * COERCE_FLOAT(bswap32(*v15))));
                *v22 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v44));
                *v15 = v45;
              }
            }
            v24 += v34;
            v15 += v768;
            v22 += v34;
            --v42;
          }
          while (v42);
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      else
      {
        do
        {
          v605 = v18;
          do
          {
            v606 = *v24;
            if (*v24)
            {
              if (v606 == 255)
              {
                v22->i64[0] = 0;
                v22->i64[1] = 0;
              }
              else
              {
                *v22 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), (float)((float)v606 * -0.0039216) + 1.0));
              }
            }
            v24 += v34;
            v22 += v34;
            --v605;
          }
          while (v605);
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 1:
      if (v768)
      {
        v46 = v34;
        if (v767)
        {
          v47 = v31;
          v48 = -(v28 * v31);
          v49 = -(uint64_t)(v29 * v47);
          v50 = (unsigned int *)v19;
          v51 = -(uint64_t)v30;
          do
          {
            v52 = v18;
            do
            {
              v53 = *v24;
              if (*v24)
              {
                if (v53 == 255)
                {
                  *v22 = *v32;
                  *v15 = *v50;
                }
                else
                {
                  v54 = (float)v53 * 0.0039216;
                  v55 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v54) * COERCE_FLOAT(bswap32(*v15)))+ (float)(COERCE_FLOAT(bswap32(*v50)) * v54)));
                  *v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v54), (float32x4_t)vrev32q_s8(*v32), v54));
                  *v15 = v55;
                }
              }
              v24 += v46;
              v56 = &v32[v46];
              v57 = &v50[v767];
              if ((unint64_t)v56 >= v20)
                v58 = v51;
              else
                v58 = 0;
              v50 = &v57[v58];
              v32 = &v56[v58];
              v15 += v768;
              v22 += v46;
              --v52;
            }
            while (v52);
            if (v35)
            {
              v59 = (unint64_t)&v766[v28];
              if (v59 >= v35)
                v60 = v49;
              else
                v60 = 0;
              v19 += 4 * v29 + 4 * v60;
              if (v59 >= v35)
                v61 = v48;
              else
                v61 = 0;
              v32 = (int8x16_t *)(v59 + 16 * v61);
              v20 += 16 * v61 + 16 * v28;
              v50 = (unsigned int *)v19;
              v766 = v32;
            }
            else
            {
              v32 += v28;
              v50 += v29;
            }
            v24 += v40;
            v22 += v41;
            v15 += v765;
            LODWORD(v17) = v17 - 1;
          }
          while ((_DWORD)v17);
        }
        else
        {
          v691 = -(uint64_t)v30;
          v692 = -(v28 * v31);
          do
          {
            v693 = v18;
            do
            {
              v694 = *v24;
              if (*v24)
              {
                if (v694 == 255)
                {
                  v695 = *v32;
                  v696 = 32831;
                }
                else
                {
                  v697 = (float)v694 * 0.0039216;
                  v696 = bswap32(COERCE_UNSIGNED_INT(v697 + (float)((float)(1.0 - v697) * COERCE_FLOAT(bswap32(*v15)))));
                  v695 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v697), (float32x4_t)vrev32q_s8(*v32), v697));
                }
                *v22 = v695;
                *v15 = v696;
              }
              v24 += v46;
              v698 = &v32[v46];
              if ((unint64_t)v698 >= v20)
                v699 = v691;
              else
                v699 = 0;
              v32 = &v698[v699];
              v15 += v768;
              v22 += v46;
              --v693;
            }
            while (v693);
            v24 += v40;
            v22 += v41;
            v700 = v766;
            v15 += v765;
            v701 = (unint64_t)&v766[v28];
            if (v701 >= v35)
              v702 = v692;
            else
              v702 = 0;
            v703 = (int8x16_t *)(v701 + 16 * v702);
            v704 = v20 + 16 * v702 + 16 * v28;
            if (v35)
            {
              v20 = v704;
              v700 = v703;
            }
            v766 = v700;
            if (v35)
              v32 = v703;
            else
              v32 += v28;
            LODWORD(v17) = v17 - 1;
          }
          while ((_DWORD)v17);
        }
      }
      else
      {
        v607 = v34;
        v608 = -(uint64_t)v30;
        v609 = -(v28 * v31);
        v610 = 16 * v34;
        do
        {
          v611 = v18;
          do
          {
            v612 = *v24;
            if (*v24)
            {
              if (v612 == 255)
                v613 = *v32;
              else
                v613 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - (float)((float)v612 * 0.0039216)), (float32x4_t)vrev32q_s8(*v32), (float)v612 * 0.0039216));
              *v22 = v613;
            }
            v24 += v607;
            v614 = &v32[v607];
            if ((unint64_t)v614 >= v20)
              v615 = v608;
            else
              v615 = 0;
            v32 = &v614[v615];
            v22 = (int8x16_t *)((char *)v22 + v610);
            --v611;
          }
          while (v611);
          v24 += v40;
          v22 += v41;
          v616 = v766;
          v617 = (unint64_t)&v766[v28];
          if (v617 >= v35)
            v618 = v609;
          else
            v618 = 0;
          v619 = (int8x16_t *)(v617 + 16 * v618);
          v620 = v20 + 16 * v618 + 16 * v28;
          if (v35)
          {
            v20 = v620;
            v616 = v619;
          }
          v766 = v616;
          if (v35)
            v32 = v619;
          else
            v32 += v28;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 2:
      v62 = v34;
      if (v768)
      {
        v63 = -(uint64_t)v30;
        v64 = v31;
        v65 = -(v28 * v31);
        v66 = -(uint64_t)(v29 * v64);
        v67 = (unsigned int *)v19;
        while (1)
        {
          v68 = v18;
          do
          {
            v69 = *v24;
            if (!*v24)
              goto LABEL_72;
            if (v69 == 255)
            {
              v70 = *v67;
              v71 = COERCE_FLOAT(bswap32(*v67));
              if (v71 >= 1.0)
              {
                v75 = *v32;
                goto LABEL_71;
              }
              if (v71 <= 0.0)
                goto LABEL_72;
              v70 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v15)) * (float)(1.0 - v71))));
              v72 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v32), (float32x4_t)vrev32q_s8(*v22), 1.0 - v71);
            }
            else
            {
              v73 = (float)v69 * 0.0039216;
              v74 = v73 * COERCE_FLOAT(bswap32(*v67));
              if (v74 <= 0.0)
                goto LABEL_72;
              v70 = bswap32(COERCE_UNSIGNED_INT(v74 + (float)(COERCE_FLOAT(bswap32(*v15)) * (float)(1.0 - v74))));
              v72 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v73), (float32x4_t)vrev32q_s8(*v22), 1.0 - v74);
            }
            v75 = vrev32q_s8(v72);
LABEL_71:
            *v22 = v75;
            *v15 = v70;
LABEL_72:
            v24 += v62;
            v76 = &v32[v62];
            v77 = &v67[v767];
            if ((unint64_t)v76 >= v20)
              v78 = v63;
            else
              v78 = 0;
            v67 = &v77[v78];
            v32 = &v76[v78];
            v15 += v768;
            v22 += v62;
            --v68;
          }
          while (v68);
          if (v35)
          {
            v79 = (unint64_t)&v766[v28];
            if (v79 >= v35)
              v80 = v66;
            else
              v80 = 0;
            v19 += 4 * v29 + 4 * v80;
            if (v79 >= v35)
              v81 = v65;
            else
              v81 = 0;
            v32 = (int8x16_t *)(v79 + 16 * v81);
            v20 += 16 * v81 + 16 * v28;
            v67 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v67 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
          if (!(_DWORD)v17)
            return;
        }
      }
      v621 = -(uint64_t)v30;
      v622 = v31;
      v623 = -(v28 * v31);
      v624 = -(uint64_t)(v29 * v622);
      v625 = (unsigned int *)v19;
LABEL_783:
      v626 = v18;
      while (1)
      {
        v627 = *v24;
        if (*v24)
        {
          if (v627 == 255)
          {
            v628 = COERCE_FLOAT(bswap32(*v625));
            if (v628 >= 1.0)
            {
              v629 = *v32;
              goto LABEL_792;
            }
            if (v628 > 0.0)
            {
              v629 = vrev32q_s8((int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v32), (float32x4_t)vrev32q_s8(*v22), 1.0 - v628));
LABEL_792:
              *v22 = v629;
            }
          }
          else
          {
            v630 = (float)v627 * 0.0039216;
            v631 = COERCE_FLOAT(bswap32(*v625));
            if ((float)(v630 * v631) > 0.0)
            {
              v629 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v630), (float32x4_t)vrev32q_s8(*v22), 1.0 - (float)(v630 * v631)));
              goto LABEL_792;
            }
          }
        }
        v24 += v62;
        v632 = &v32[v62];
        v633 = &v625[v767];
        if ((unint64_t)v632 >= v20)
          v634 = v621;
        else
          v634 = 0;
        v625 = &v633[v634];
        v32 = &v632[v634];
        v22 += v62;
        if (!--v626)
        {
          if (v35)
          {
            v635 = (unint64_t)&v766[v28];
            if (v635 >= v35)
              v636 = v624;
            else
              v636 = 0;
            v19 += 4 * v29 + 4 * v636;
            if (v635 >= v35)
              v637 = v623;
            else
              v637 = 0;
            v32 = (int8x16_t *)(v635 + 16 * v637);
            v20 += 16 * v637 + 16 * v28;
            v625 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v625 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
          if (!(_DWORD)v17)
            return;
          goto LABEL_783;
        }
      }
    case 3:
      v82 = v34;
      v83 = v31;
      v84 = -(v28 * v31);
      v85 = -(uint64_t)(v29 * v83);
      v86 = 16 * v34;
      v87 = -(uint64_t)v30;
      v88 = (unsigned int *)v19;
      do
      {
        v89 = v18;
        do
        {
          v90 = *v24;
          if (*v24)
          {
            if (v90 == 255)
            {
              if (v767)
                v91 = COERCE_FLOAT(bswap32(*v88));
              else
                v91 = 1.0;
              v93 = COERCE_FLOAT(bswap32(*v15));
              v94 = bswap32(COERCE_UNSIGNED_INT(v91 * v93));
              v95 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v93);
            }
            else
            {
              if (v767)
                v92 = COERCE_FLOAT(bswap32(*v88));
              else
                v92 = 1.0;
              v96 = (float)v90 * 0.0039216;
              v97 = COERCE_FLOAT(bswap32(*v15));
              v98 = v96 * v97;
              v99 = 1.0 - v96;
              v94 = bswap32(COERCE_UNSIGNED_INT((float)(v99 * v97) + (float)(v92 * v98)));
              v95 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v99), (float32x4_t)vrev32q_s8(*v32), v98);
            }
            *v22 = vrev32q_s8(v95);
            *v15 = v94;
          }
          v24 += v82;
          v100 = &v32[v82];
          v101 = &v88[v767];
          if ((unint64_t)v100 >= v20)
            v102 = v87;
          else
            v102 = 0;
          v88 = &v101[v102];
          v32 = &v100[v102];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v86);
          --v89;
        }
        while (v89);
        if (v35)
        {
          v103 = (unint64_t)&v766[v28];
          if (v103 >= v35)
            v104 = v85;
          else
            v104 = 0;
          v19 += 4 * v29 + 4 * v104;
          if (v103 >= v35)
            v105 = v84;
          else
            v105 = 0;
          v32 = (int8x16_t *)(v103 + 16 * v105);
          v20 += 16 * v105 + 16 * v28;
          v88 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v88 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
      return;
    case 4:
      v106 = v34;
      v107 = v31;
      v108 = -(v28 * v31);
      v109 = -(uint64_t)(v29 * v107);
      v110 = 16 * v34;
      v111 = -(uint64_t)v30;
      v112 = (unsigned int *)v19;
      do
      {
        v113 = v18;
        do
        {
          v114 = *v24;
          if (*v24)
          {
            if (v114 == 255)
            {
              if (v767)
                v115 = COERCE_FLOAT(bswap32(*v112));
              else
                v115 = 1.0;
              v117 = 1.0 - COERCE_FLOAT(bswap32(*v15));
              v118 = bswap32(COERCE_UNSIGNED_INT(v115 * v117));
              v119 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v117);
            }
            else
            {
              if (v767)
                v116 = COERCE_FLOAT(bswap32(*v112));
              else
                v116 = 1.0;
              v120 = (float)v114 * 0.0039216;
              v121 = COERCE_FLOAT(bswap32(*v15));
              v122 = v120 * (float)(1.0 - v121);
              v123 = 1.0 - v120;
              v118 = bswap32(COERCE_UNSIGNED_INT((float)(v123 * v121) + (float)(v116 * v122)));
              v119 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v123), (float32x4_t)vrev32q_s8(*v32), v122);
            }
            *v22 = vrev32q_s8(v119);
            *v15 = v118;
          }
          v24 += v106;
          v124 = &v32[v106];
          v125 = &v112[v767];
          if ((unint64_t)v124 >= v20)
            v126 = v111;
          else
            v126 = 0;
          v112 = &v125[v126];
          v32 = &v124[v126];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v110);
          --v113;
        }
        while (v113);
        if (v35)
        {
          v127 = (unint64_t)&v766[v28];
          if (v127 >= v35)
            v128 = v109;
          else
            v128 = 0;
          v19 += 4 * v29 + 4 * v128;
          if (v127 >= v35)
            v129 = v108;
          else
            v129 = 0;
          v32 = (int8x16_t *)(v127 + 16 * v129);
          v20 += 16 * v129 + 16 * v28;
          v112 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v112 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
      return;
    case 5:
      v130 = v34;
      v131 = v31;
      v132 = -(v28 * v31);
      v133 = -(uint64_t)(v29 * v131);
      v134 = 16 * v34;
      v135 = -(uint64_t)v30;
      v136 = (unsigned int *)v19;
      do
      {
        v137 = v18;
        do
        {
          if (*v24)
          {
            v138 = COERCE_FLOAT(bswap32(*v15));
            v139 = (float)*v24 * 0.0039216;
            v140 = COERCE_FLOAT(bswap32(*v136));
            v141 = 1.0 - (float)(v139 * v140);
            *v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v141), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v139), v138));
            *v15 = bswap32(COERCE_UNSIGNED_INT((float)(v141 * v138) + (float)((float)(v139 * v140) * v138)));
          }
          v24 += v130;
          v142 = &v32[v130];
          v143 = &v136[v767];
          if ((unint64_t)v142 >= v20)
            v144 = v135;
          else
            v144 = 0;
          v136 = &v143[v144];
          v32 = &v142[v144];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v134);
          --v137;
        }
        while (v137);
        if (v35)
        {
          v145 = (unint64_t)&v766[v28];
          if (v145 >= v35)
            v146 = v133;
          else
            v146 = 0;
          v19 += 4 * v29 + 4 * v146;
          if (v145 >= v35)
            v147 = v132;
          else
            v147 = 0;
          v32 = (int8x16_t *)(v145 + 16 * v147);
          v20 += 16 * v147 + 16 * v28;
          v136 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v136 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
      return;
    case 6:
      v148 = v34;
      v149 = v31;
      v150 = -(v28 * v31);
      v151 = -(uint64_t)(v29 * v149);
      v152 = 16 * v34;
      v153 = -(uint64_t)v30;
      v154 = (unsigned int *)v19;
      while (1)
      {
        v155 = v18;
        do
        {
          v156 = *v24;
          if (!*v24)
            goto LABEL_176;
          v157 = COERCE_FLOAT(bswap32(*v15));
          v158 = 1.0 - v157;
          if ((float)(1.0 - v157) >= 1.0)
          {
            if (v767)
              v160 = COERCE_FLOAT(bswap32(*v154));
            else
              v160 = 1.0;
            v161 = (float)v156 * 0.0039216;
            v162 = bswap32(COERCE_UNSIGNED_INT(v161 * v160));
            v163 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v161);
          }
          else
          {
            if (v158 <= 0.0)
              goto LABEL_176;
            if (v767)
              v159 = COERCE_FLOAT(bswap32(*v154));
            else
              v159 = 1.0;
            v164 = (float)((float)v156 * 0.0039216) * v158;
            v162 = bswap32(COERCE_UNSIGNED_INT(v157 + (float)(v159 * v164)));
            v163 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v22), (float32x4_t)vrev32q_s8(*v32), v164);
          }
          *v22 = vrev32q_s8(v163);
          *v15 = v162;
LABEL_176:
          v24 += v148;
          v165 = &v32[v148];
          v166 = &v154[v767];
          if ((unint64_t)v165 >= v20)
            v167 = v153;
          else
            v167 = 0;
          v154 = &v166[v167];
          v32 = &v165[v167];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v152);
          --v155;
        }
        while (v155);
        if (v35)
        {
          v168 = (unint64_t)&v766[v28];
          if (v168 >= v35)
            v169 = v151;
          else
            v169 = 0;
          v19 += 4 * v29 + 4 * v169;
          if (v168 >= v35)
            v170 = v150;
          else
            v170 = 0;
          v32 = (int8x16_t *)(v168 + 16 * v170);
          v20 += 16 * v170 + 16 * v28;
          v154 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v154 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 7:
      v171 = v34;
      if (v768)
      {
        v172 = v31;
        v173 = -(v28 * v31);
        v174 = -(uint64_t)(v29 * v172);
        v175 = -(uint64_t)v30;
        v176 = (unsigned int *)v19;
        do
        {
          v177 = v18;
          do
          {
            v178 = *v24;
            if (*v24)
            {
              if (v178 == 255)
              {
                v179 = COERCE_FLOAT(bswap32(*v176));
                v180 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v179);
                v181 = COERCE_FLOAT(bswap32(*v15)) * v179;
              }
              else
              {
                v182 = (float)v178 * 0.0039216;
                v183 = COERCE_FLOAT(bswap32(*v15));
                v184 = v182 * COERCE_FLOAT(bswap32(*v176));
                v185 = 1.0 - v182;
                v186 = (float32x4_t)vrev32q_s8(*v22);
                v180 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v186, 1.0 - v182), v186, v184);
                v181 = (float)(v185 * v183) + (float)(v183 * v184);
              }
              *v22 = vrev32q_s8(v180);
              *v15 = bswap32(LODWORD(v181));
            }
            v24 += v171;
            v187 = &v32[v171];
            v188 = &v176[v767];
            if ((unint64_t)v187 >= v20)
              v189 = v175;
            else
              v189 = 0;
            v176 = &v188[v189];
            v32 = &v187[v189];
            v15 += v768;
            v22 += v171;
            --v177;
          }
          while (v177);
          if (v35)
          {
            v190 = (unint64_t)&v766[v28];
            if (v190 >= v35)
              v191 = v174;
            else
              v191 = 0;
            v19 += 4 * v29 + 4 * v191;
            if (v190 >= v35)
              v192 = v173;
            else
              v192 = 0;
            v32 = (int8x16_t *)(v190 + 16 * v192);
            v20 += 16 * v192 + 16 * v28;
            v176 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v176 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      else
      {
        v638 = -(uint64_t)v30;
        v639 = v31;
        v640 = -(v28 * v31);
        v641 = -(uint64_t)(v29 * v639);
        v642 = (unsigned int *)v19;
        do
        {
          v643 = v18;
          do
          {
            v644 = *v24;
            if (*v24)
            {
              if (v644 == 255)
              {
                v645 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_n_s32(bswap32(*v642)), (float32x4_t)vrev32q_s8(*v22));
              }
              else
              {
                v646 = (float32x4_t)vrev32q_s8(*v22);
                v645 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v646, 1.0 - (float)((float)v644 * 0.0039216)), v646, (float)((float)v644 * 0.0039216) * COERCE_FLOAT(bswap32(*v642)));
              }
              *v22 = vrev32q_s8(v645);
            }
            v24 += v171;
            v647 = &v32[v171];
            v648 = &v642[v767];
            if ((unint64_t)v647 >= v20)
              v649 = v638;
            else
              v649 = 0;
            v642 = &v648[v649];
            v32 = &v647[v649];
            v22 += v171;
            --v643;
          }
          while (v643);
          if (v35)
          {
            v650 = (unint64_t)&v766[v28];
            if (v650 >= v35)
              v651 = v641;
            else
              v651 = 0;
            v19 += 4 * v29 + 4 * v651;
            if (v650 >= v35)
              v652 = v640;
            else
              v652 = 0;
            v32 = (int8x16_t *)(v650 + 16 * v652);
            v20 += 16 * v652 + 16 * v28;
            v642 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v642 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 8:
      v193 = v34;
      if (v768)
      {
        v194 = -(uint64_t)v30;
        v195 = v31;
        v196 = -(v28 * v31);
        v197 = -(uint64_t)(v29 * v195);
        v198 = (unsigned int *)v19;
        do
        {
          v199 = v18;
          do
          {
            v200 = *v24;
            if (*v24)
            {
              v201 = (float32x4_t)vrev32q_s8(*v22);
              v202 = COERCE_FLOAT(bswap32(*v15));
              if (v200 == 255)
                v203 = 1.0 - COERCE_FLOAT(bswap32(*v198));
              else
                v203 = (float)((float)((float)v200 * -0.0039216) * COERCE_FLOAT(bswap32(*v198))) + 1.0;
              *v22 = vrev32q_s8((int8x16_t)vmulq_n_f32(v201, v203));
              *v15 = bswap32(COERCE_UNSIGNED_INT(v203 * v202));
            }
            v24 += v193;
            v204 = &v32[v193];
            v205 = &v198[v767];
            if ((unint64_t)v204 >= v20)
              v206 = v194;
            else
              v206 = 0;
            v198 = &v205[v206];
            v32 = &v204[v206];
            v15 += v768;
            v22 += v193;
            --v199;
          }
          while (v199);
          if (v35)
          {
            v207 = (unint64_t)&v766[v28];
            if (v207 >= v35)
              v208 = v197;
            else
              v208 = 0;
            v19 += 4 * v29 + 4 * v208;
            if (v207 >= v35)
              v209 = v196;
            else
              v209 = 0;
            v32 = (int8x16_t *)(v207 + 16 * v209);
            v20 += 16 * v209 + 16 * v28;
            v198 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v198 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      else
      {
        v653 = -(uint64_t)v30;
        v654 = v31;
        v655 = -(v28 * v31);
        v656 = -(uint64_t)(v29 * v654);
        v657 = (unsigned int *)v19;
        do
        {
          v658 = v18;
          do
          {
            v659 = *v24;
            if (*v24)
            {
              v660 = (float32x4_t)vrev32q_s8(*v22);
              if (v659 == 255)
                v661 = COERCE_FLOAT(bswap32(*v657));
              else
                v661 = (float)((float)v659 * 0.0039216) * COERCE_FLOAT(bswap32(*v657));
              *v22 = vrev32q_s8((int8x16_t)vmulq_n_f32(v660, 1.0 - v661));
            }
            v24 += v193;
            v662 = &v32[v193];
            v663 = &v657[v767];
            if ((unint64_t)v662 >= v20)
              v664 = v653;
            else
              v664 = 0;
            v657 = &v663[v664];
            v32 = &v662[v664];
            v22 += v193;
            --v658;
          }
          while (v658);
          if (v35)
          {
            v665 = (unint64_t)&v766[v28];
            if (v665 >= v35)
              v666 = v656;
            else
              v666 = 0;
            v19 += 4 * v29 + 4 * v666;
            if (v665 >= v35)
              v667 = v655;
            else
              v667 = 0;
            v32 = (int8x16_t *)(v665 + 16 * v667);
            v20 += 16 * v667 + 16 * v28;
            v657 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v657 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 9:
      v210 = v34;
      v211 = v31;
      v212 = -(v28 * v31);
      v213 = -(uint64_t)(v29 * v211);
      v214 = 16 * v34;
      v215 = -(uint64_t)v30;
      v216 = (unsigned int *)v19;
      do
      {
        v217 = v18;
        do
        {
          if (*v24)
          {
            v218 = COERCE_FLOAT(bswap32(*v15));
            v219 = (float)*v24 * 0.0039216;
            v220 = COERCE_FLOAT(bswap32(*v216));
            v221 = (float)(1.0 - v219) + (float)(v219 * v220);
            *v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), v221), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v219), 1.0 - v218));
            *v15 = bswap32(COERCE_UNSIGNED_INT((float)(v221 * v218) + (float)((float)(v219 * v220) * (float)(1.0 - v218))));
          }
          v24 += v210;
          v222 = &v32[v210];
          v223 = &v216[v767];
          if ((unint64_t)v222 >= v20)
            v224 = v215;
          else
            v224 = 0;
          v216 = &v223[v224];
          v32 = &v222[v224];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v214);
          --v217;
        }
        while (v217);
        if (v35)
        {
          v225 = (unint64_t)&v766[v28];
          if (v225 >= v35)
            v226 = v213;
          else
            v226 = 0;
          v19 += 4 * v29 + 4 * v226;
          if (v225 >= v35)
            v227 = v212;
          else
            v227 = 0;
          v32 = (int8x16_t *)(v225 + 16 * v227);
          v20 += 16 * v227 + 16 * v28;
          v216 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v216 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
      return;
    case 10:
      v228 = v34;
      v229 = v31;
      v230 = -(v28 * v31);
      v231 = -(uint64_t)(v29 * v229);
      v232 = 16 * v34;
      v233 = -(uint64_t)v30;
      v234 = (unsigned int *)v19;
      do
      {
        v235 = v18;
        do
        {
          if (*v24)
          {
            v236 = COERCE_FLOAT(bswap32(*v15));
            v237 = (float)*v24 * 0.0039216;
            v238 = v237 * COERCE_FLOAT(bswap32(*v234));
            *v22 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v22), 1.0 - v238), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v237), 1.0 - v236));
            *v15 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v238) * v236) + (float)(v238 * (float)(1.0 - v236))));
          }
          v24 += v228;
          v239 = &v32[v228];
          v240 = &v234[v767];
          if ((unint64_t)v239 >= v20)
            v241 = v233;
          else
            v241 = 0;
          v234 = &v240[v241];
          v32 = &v239[v241];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v232);
          --v235;
        }
        while (v235);
        if (v35)
        {
          v242 = (unint64_t)&v766[v28];
          if (v242 >= v35)
            v243 = v231;
          else
            v243 = 0;
          v19 += 4 * v29 + 4 * v243;
          if (v242 >= v35)
            v244 = v230;
          else
            v244 = 0;
          v32 = (int8x16_t *)(v242 + 16 * v244);
          v20 += 16 * v244 + 16 * v28;
          v234 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v234 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
      }
      while ((_DWORD)v17);
      return;
    case 11:
      v245 = v34;
      if (v768)
      {
        v246 = v31;
        v247 = -(v28 * v31);
        v248 = -(uint64_t)(v29 * v246);
        v249 = -(uint64_t)v30;
        v250 = (unsigned int *)v19;
        do
        {
          v251 = v18;
          do
          {
            if (*v24)
            {
              if (v767)
                v252 = COERCE_FLOAT(bswap32(*v250));
              else
                v252 = 1.0;
              v253 = (float)*v24 * 0.0039216;
              v254 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v253);
              a5.f32[0] = v253 * v252;
              a7.i32[0] = bswap32(*v15);
              a8.f32[0] = a5.f32[0] + a7.f32[0];
              if ((float)(a5.f32[0] + a7.f32[0]) > 1.0)
                a8.f32[0] = 1.0;
              v255 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
              v256 = bswap32(a8.u32[0]);
              a8 = (float32x4_t)vrev32q_s8(*v22);
              a7 = vsubq_f32(v255, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), a8));
              a5 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v254), a7));
              *v22 = (int8x16_t)a5;
              *v15 = v256;
            }
            v24 += v245;
            v257 = &v32[v245];
            v258 = &v250[v767];
            if ((unint64_t)v257 >= v20)
              v259 = v249;
            else
              v259 = 0;
            v250 = &v258[v259];
            v32 = &v257[v259];
            v15 += v768;
            v22 += v245;
            --v251;
          }
          while (v251);
          if (v35)
          {
            v260 = (unint64_t)&v766[v28];
            if (v260 >= v35)
              v261 = v248;
            else
              v261 = 0;
            v19 += 4 * v29 + 4 * v261;
            if (v260 >= v35)
              v262 = v247;
            else
              v262 = 0;
            v32 = (int8x16_t *)(v260 + 16 * v262);
            v20 += 16 * v262 + 16 * v28;
            v250 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v250 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      else
      {
        v668 = -(uint64_t)v30;
        v669 = v31;
        v670 = -(v28 * v31);
        v671 = -(uint64_t)(v29 * v669);
        v672 = (unsigned int *)v19;
        do
        {
          v673 = v18;
          do
          {
            if (*v24)
            {
              if (v767)
                a4.i32[0] = bswap32(*v672);
              else
                a4.i32[0] = 1.0;
              v674 = (float)*v24 * 0.0039216;
              a4.f32[0] = v674 * a4.f32[0];
              a4 = (float32x4_t)vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v674)), (float32x4_t)vrev32q_s8(*v22)));
              *v22 = (int8x16_t)a4;
            }
            v24 += v245;
            v675 = &v32[v245];
            v676 = &v672[v767];
            if ((unint64_t)v675 >= v20)
              v677 = v668;
            else
              v677 = 0;
            v672 = &v676[v677];
            v32 = &v675[v677];
            v22 += v245;
            --v673;
          }
          while (v673);
          if (v35)
          {
            v678 = (unint64_t)&v766[v28];
            if (v678 >= v35)
              v679 = v671;
            else
              v679 = 0;
            v19 += 4 * v29 + 4 * v679;
            if (v678 >= v35)
              v680 = v670;
            else
              v680 = 0;
            v32 = (int8x16_t *)(v678 + 16 * v680);
            v20 += 16 * v680 + 16 * v28;
            v672 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v672 += v29;
          }
          v24 += v40;
          v22 += v41;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 12:
      v263 = v34;
      if (v768)
      {
        v264 = v31;
        v265 = -(v28 * v31);
        v266 = -(uint64_t)(v29 * v264);
        v267 = -(uint64_t)v30;
        v268 = (unsigned int *)v19;
        do
        {
          v269 = v18;
          do
          {
            if (*v24)
            {
              if (v767)
                v270 = COERCE_FLOAT(bswap32(*v268));
              else
                v270 = 1.0;
              v271 = (float)*v24 * 0.0039216;
              v272 = vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v271);
              v273 = (float)(v271 * v270) + COERCE_FLOAT(bswap32(*v15));
              if (v273 > 1.0)
                v273 = 1.0;
              *v22 = vrev32q_s8((int8x16_t)vaddq_f32(v272, (float32x4_t)vrev32q_s8(*v22)));
              *v15 = bswap32(LODWORD(v273));
            }
            v24 += v263;
            v274 = &v32[v263];
            v275 = &v268[v767];
            if ((unint64_t)v274 >= v20)
              v276 = v267;
            else
              v276 = 0;
            v268 = &v275[v276];
            v32 = &v274[v276];
            v15 += v768;
            v22 += v263;
            --v269;
          }
          while (v269);
          if (v35)
          {
            v277 = (unint64_t)&v766[v28];
            if (v277 >= v35)
              v278 = v266;
            else
              v278 = 0;
            v19 += 4 * v29 + 4 * v278;
            if (v277 >= v35)
              v279 = v265;
            else
              v279 = 0;
            v32 = (int8x16_t *)(v277 + 16 * v279);
            v20 += 16 * v279 + 16 * v28;
            v268 = (unsigned int *)v19;
            v766 = v32;
          }
          else
          {
            v32 += v28;
            v268 += v29;
          }
          v24 += v40;
          v22 += v41;
          v15 += v765;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      else
      {
        v681 = -(uint64_t)v30;
        v682 = -(v28 * v31);
        do
        {
          v683 = v18;
          do
          {
            if (*v24)
              *v22 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), (float)*v24 * 0.0039216), (float32x4_t)vrev32q_s8(*v22)));
            v24 += v263;
            v684 = &v32[v263];
            if ((unint64_t)v684 >= v20)
              v685 = v681;
            else
              v685 = 0;
            v32 = &v684[v685];
            v22 += v263;
            --v683;
          }
          while (v683);
          v24 += v40;
          v22 += v41;
          v686 = v766;
          v687 = (unint64_t)&v766[v28];
          if (v687 >= v35)
            v688 = v682;
          else
            v688 = 0;
          v689 = (int8x16_t *)(v687 + 16 * v688);
          v690 = v20 + 16 * v688 + 16 * v28;
          if (v35)
          {
            v20 = v690;
            v686 = v689;
          }
          v766 = v686;
          if (v35)
            v32 = v689;
          else
            v32 += v28;
          LODWORD(v17) = v17 - 1;
        }
        while ((_DWORD)v17);
      }
      return;
    case 13:
      v280 = v34;
      v281 = v31;
      v282 = -(v28 * v31);
      v283 = -(uint64_t)(v29 * v281);
      v284 = 16 * v34;
      v285 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      v286 = (unsigned int *)v19;
      while (1)
      {
        v287 = v18;
        do
        {
          if (*v24)
          {
            v288 = v767 ? COERCE_FLOAT(bswap32(*v286)) : 1.0;
            v289 = (float)*v24 * 0.0039216;
            a5.f32[0] = v289 * v288;
            if (a5.f32[0] > 0.0)
            {
              v290 = (float32x4_t)vrev32q_s8(*v32);
              v291 = (int8x16_t)vmulq_n_f32(v290, v289);
              if (v768)
              {
                v290.i32[0] = bswap32(*v15);
                if (v290.f32[0] <= 0.0)
                  goto LABEL_337;
              }
              else
              {
                v290.i32[0] = 1.0;
              }
              v292 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v290.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v293 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v291);
              v294 = (int8x16_t)vmulq_f32(v292, v293);
              v295 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v294, v292, 1.0 - a5.f32[0]), v294);
              a5.f32[0] = (float)(v290.f32[0] + a5.f32[0]) - (float)(v290.f32[0] * a5.f32[0]);
              v291 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v290, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v295, v293, 1.0 - v290.f32[0]), v295));
              if (v768)
              {
LABEL_337:
                v296 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v291);
                *v22 = (int8x16_t)a5;
                *v15 = v296;
                goto LABEL_339;
              }
              a5 = (float32x4_t)vrev32q_s8(v291);
              *v22 = (int8x16_t)a5;
            }
          }
LABEL_339:
          v24 += v280;
          v297 = &v32[v280];
          v298 = &v286[v767];
          if ((unint64_t)v297 >= v20)
            v299 = v285;
          else
            v299 = 0;
          v286 = &v298[v299];
          v32 = &v297[v299];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v284);
          --v287;
        }
        while (v287);
        if (v35)
        {
          v300 = (unint64_t)&v766[v28];
          if (v300 >= v35)
            v301 = v283;
          else
            v301 = 0;
          v19 += 4 * v29 + 4 * v301;
          if (v300 >= v35)
            v302 = v282;
          else
            v302 = 0;
          v32 = (int8x16_t *)(v300 + 16 * v302);
          v20 += 16 * v302 + 16 * v28;
          v286 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v286 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 14:
      v303 = v34;
      v304 = v31;
      v305 = -(v28 * v31);
      v306 = -(uint64_t)(v29 * v304);
      v307 = 16 * v34;
      v308 = -(uint64_t)v30;
      __asm { FMOV            V1.4S, #1.0 }
      v314 = (unsigned int *)v19;
      while (1)
      {
        v315 = v18;
        do
        {
          if (*v24)
          {
            v316 = v767 ? COERCE_FLOAT(bswap32(*v314)) : 1.0;
            v317 = (float)*v24 * 0.0039216;
            a5.f32[0] = v317 * v316;
            if (a5.f32[0] > 0.0)
            {
              v318 = (float32x4_t)vrev32q_s8(*v32);
              v319 = (int8x16_t)vmulq_n_f32(v318, v317);
              if (v768)
              {
                v318.i32[0] = bswap32(*v15);
                if (v318.f32[0] <= 0.0)
                  goto LABEL_366;
              }
              else
              {
                v318.i32[0] = 1.0;
              }
              v320 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v318.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v321 = vmlaq_f32(v320, vsubq_f32(_Q1, v320), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v319));
              a5.f32[0] = (float)(a5.f32[0] + v318.f32[0]) - (float)(v318.f32[0] * a5.f32[0]);
              v319 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), v321);
              if (v768)
              {
LABEL_366:
                v322 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v319);
                *v22 = (int8x16_t)a5;
                *v15 = v322;
                goto LABEL_368;
              }
              a5 = (float32x4_t)vrev32q_s8(v319);
              *v22 = (int8x16_t)a5;
            }
          }
LABEL_368:
          v24 += v303;
          v323 = &v32[v303];
          v324 = &v314[v767];
          if ((unint64_t)v323 >= v20)
            v325 = v308;
          else
            v325 = 0;
          v314 = &v324[v325];
          v32 = &v323[v325];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v307);
          --v315;
        }
        while (v315);
        if (v35)
        {
          v326 = (unint64_t)&v766[v28];
          if (v326 >= v35)
            v327 = v306;
          else
            v327 = 0;
          v19 += 4 * v29 + 4 * v327;
          if (v326 >= v35)
            v328 = v305;
          else
            v328 = 0;
          v32 = (int8x16_t *)(v326 + 16 * v328);
          v20 += 16 * v328 + 16 * v28;
          v314 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v314 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 15:
      v329 = v34;
      v706 = -(uint64_t)(v29 * v31);
      v715 = -(v28 * v31);
      v330 = 16 * v34;
      v331 = -(uint64_t)v30;
      v332 = (unsigned int *)v19;
      v724 = v331;
      v733 = v330;
      while (1)
      {
        v747 = v19;
        v756 = v17;
        v333 = v18;
        v334 = v767;
        v335 = v768;
        do
        {
          if (*v24)
          {
            v336 = v334 ? COERCE_FLOAT(bswap32(*v332)) : 1.0;
            v337 = (float)*v24 * 0.0039216;
            a8.f32[0] = v337 * v336;
            if ((float)(v337 * v336) > 0.0)
            {
              v338 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v337);
              if (v335)
              {
                v339 = COERCE_FLOAT(bswap32(*v15));
                if (v339 <= 0.0)
                  goto LABEL_396;
              }
              else
              {
                v339 = 1.0;
              }
              v340 = vrev32q_s8(*v22);
              PDAoverlayPDA((float *)v769.i32, *(float *)v340.i32, *(float *)&v340.i32[1], *(float *)&v340.i32[2], *(float *)&v340.i32[3], v339, *(double *)a8.i64, *(double *)v338.i64, a10, *(float *)v338.i32, *(float *)&v338.i32[1], *(float *)&v338.i32[2], *(float *)&v338.i32[3], a8.f32[0]);
              v335 = v768;
              v338 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v334 = v767;
                v331 = v724;
                v330 = v733;
LABEL_396:
                *v22 = vrev32q_s8(v338);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_398;
              }
              *v22 = vrev32q_s8(v769);
              v334 = v767;
              v331 = v724;
              v330 = v733;
            }
          }
LABEL_398:
          v24 += v329;
          v341 = &v32[v329];
          if ((unint64_t)v341 >= v20)
            v342 = v331;
          else
            v342 = 0;
          v332 += v767 + v342;
          v32 = &v341[v342];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v330);
          --v333;
        }
        while (v333);
        if (v746)
        {
          LODWORD(v18) = v745;
          v343 = &v766[v744];
          v344 = v756;
          v345 = v706;
          if ((unint64_t)v343 < v746)
            v345 = 0;
          v19 = v747 + 4 * v29 + 4 * v345;
          v346 = v715;
          if ((unint64_t)v343 < v746)
            v346 = 0;
          v32 = &v343[v346];
          v20 += 16 * v346 + 16 * v744;
          v332 = (unsigned int *)(v747 + 4 * v29 + 4 * v345);
          v766 = v32;
          v348 = v742;
          v347 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v348 = v742;
          v332 += v29;
          v19 = v747;
          v344 = v756;
          v347 = v743;
        }
        v24 += v347;
        v22 += v348;
        v15 += v765;
        LODWORD(v17) = v344 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 16:
      v349 = v34;
      v350 = v31;
      v351 = -(v28 * v31);
      v352 = -(uint64_t)(v29 * v350);
      v353 = 16 * v34;
      v354 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      v355 = (unsigned int *)v19;
      while (1)
      {
        v356 = v18;
        do
        {
          if (*v24)
          {
            v357 = v767 ? COERCE_FLOAT(bswap32(*v355)) : 1.0;
            v358 = (float)*v24 * 0.0039216;
            a5.f32[0] = v358 * v357;
            if (a5.f32[0] > 0.0)
            {
              v359 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v358);
              if (v768)
              {
                a6.i32[0] = bswap32(*v15);
                if (a6.f32[0] <= 0.0)
                  goto LABEL_423;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v360 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v361 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v359);
              v362 = (int8x16_t)vmulq_n_f32(v360, a5.f32[0]);
              v363 = (int8x16_t)vmulq_n_f32(v361, a6.f32[0]);
              v364 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v362, (float32x4_t)v363), v363, v362);
              v365 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v364, v360, 1.0 - a5.f32[0]), v364);
              v366 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v365, v361, 1.0 - a6.f32[0]), v365);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v359 = (int8x16_t)vsubq_f32(a6, v366);
              if (v768)
              {
LABEL_423:
                v367 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v359);
                *v22 = (int8x16_t)a5;
                *v15 = v367;
                goto LABEL_425;
              }
              a5 = (float32x4_t)vrev32q_s8(v359);
              *v22 = (int8x16_t)a5;
            }
          }
LABEL_425:
          v24 += v349;
          v368 = &v32[v349];
          v369 = &v355[v767];
          if ((unint64_t)v368 >= v20)
            v370 = v354;
          else
            v370 = 0;
          v355 = &v369[v370];
          v32 = &v368[v370];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v353);
          --v356;
        }
        while (v356);
        if (v35)
        {
          v371 = (unint64_t)&v766[v28];
          if (v371 >= v35)
            v372 = v352;
          else
            v372 = 0;
          v19 += 4 * v29 + 4 * v372;
          if (v371 >= v35)
            v373 = v351;
          else
            v373 = 0;
          v32 = (int8x16_t *)(v371 + 16 * v373);
          v20 += 16 * v373 + 16 * v28;
          v355 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v355 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 17:
      v374 = v34;
      v375 = v31;
      v376 = -(v28 * v31);
      v377 = -(uint64_t)(v29 * v375);
      v378 = 16 * v34;
      v379 = -(uint64_t)v30;
      a4.i32[0] = 1.0;
      v380 = (unsigned int *)v19;
      while (1)
      {
        v381 = v18;
        do
        {
          if (*v24)
          {
            v382 = v767 ? COERCE_FLOAT(bswap32(*v380)) : 1.0;
            v383 = (float)*v24 * 0.0039216;
            a5.f32[0] = v383 * v382;
            if (a5.f32[0] > 0.0)
            {
              v384 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v383);
              if (v768)
              {
                a6.i32[0] = bswap32(*v15);
                if (a6.f32[0] <= 0.0)
                  goto LABEL_452;
              }
              else
              {
                a6.i32[0] = 1.0;
              }
              v385 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v386 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v384);
              v387 = (int8x16_t)vmulq_n_f32(v385, a5.f32[0]);
              v388 = (int8x16_t)vmulq_n_f32(v386, a6.f32[0]);
              v389 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v388, (float32x4_t)v387), v388, v387);
              v390 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a5, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v389, v385, 1.0 - a5.f32[0]), v389);
              v391 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(a6, a4)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v390, v386, 1.0 - a6.f32[0]), v390);
              a5.f32[0] = (float)(a6.f32[0] + a5.f32[0]) - (float)(a6.f32[0] * a5.f32[0]);
              a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
              v384 = (int8x16_t)vsubq_f32(a6, v391);
              if (v768)
              {
LABEL_452:
                v392 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v384);
                *v22 = (int8x16_t)a5;
                *v15 = v392;
                goto LABEL_454;
              }
              a5 = (float32x4_t)vrev32q_s8(v384);
              *v22 = (int8x16_t)a5;
            }
          }
LABEL_454:
          v24 += v374;
          v393 = &v32[v374];
          v394 = &v380[v767];
          if ((unint64_t)v393 >= v20)
            v395 = v379;
          else
            v395 = 0;
          v380 = &v394[v395];
          v32 = &v393[v395];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v378);
          --v381;
        }
        while (v381);
        if (v35)
        {
          v396 = (unint64_t)&v766[v28];
          if (v396 >= v35)
            v397 = v377;
          else
            v397 = 0;
          v19 += 4 * v29 + 4 * v397;
          if (v396 >= v35)
            v398 = v376;
          else
            v398 = 0;
          v32 = (int8x16_t *)(v396 + 16 * v398);
          v20 += 16 * v398 + 16 * v28;
          v380 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v380 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 18:
      v399 = v34;
      v707 = -(uint64_t)(v29 * v31);
      v716 = -(v28 * v31);
      v400 = 16 * v34;
      v401 = -(uint64_t)v30;
      v402 = (unsigned int *)v19;
      v725 = v401;
      v734 = v400;
      while (1)
      {
        v748 = v19;
        v757 = v17;
        v403 = v18;
        v404 = v767;
        v405 = v768;
        do
        {
          if (*v24)
          {
            v406 = v404 ? COERCE_FLOAT(bswap32(*v402)) : 1.0;
            v407 = (float)*v24 * 0.0039216;
            a8.f32[0] = v407 * v406;
            if ((float)(v407 * v406) > 0.0)
            {
              v408 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v407);
              if (v405)
              {
                v409 = COERCE_FLOAT(bswap32(*v15));
                if (v409 <= 0.0)
                  goto LABEL_482;
              }
              else
              {
                v409 = 1.0;
              }
              v410 = vrev32q_s8(*v22);
              PDAcolordodgePDA((float *)v769.i32, *(float *)v410.i32, *(float *)&v410.i32[1], *(float *)&v410.i32[2], *(float *)&v410.i32[3], v409, *(double *)a8.i64, *(double *)v408.i64, a10, *(float *)v408.i32, *(float *)&v408.i32[1], *(float *)&v408.i32[2], *(float *)&v408.i32[3], a8.f32[0]);
              v405 = v768;
              v408 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v404 = v767;
                v401 = v725;
                v400 = v734;
LABEL_482:
                *v22 = vrev32q_s8(v408);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_484;
              }
              *v22 = vrev32q_s8(v769);
              v404 = v767;
              v401 = v725;
              v400 = v734;
            }
          }
LABEL_484:
          v24 += v399;
          v411 = &v32[v399];
          if ((unint64_t)v411 >= v20)
            v412 = v401;
          else
            v412 = 0;
          v402 += v767 + v412;
          v32 = &v411[v412];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v400);
          --v403;
        }
        while (v403);
        if (v746)
        {
          LODWORD(v18) = v745;
          v413 = &v766[v744];
          v414 = v757;
          v415 = v707;
          if ((unint64_t)v413 < v746)
            v415 = 0;
          v19 = v748 + 4 * v29 + 4 * v415;
          v416 = v716;
          if ((unint64_t)v413 < v746)
            v416 = 0;
          v32 = &v413[v416];
          v20 += 16 * v416 + 16 * v744;
          v402 = (unsigned int *)(v748 + 4 * v29 + 4 * v415);
          v766 = v32;
          v418 = v742;
          v417 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v418 = v742;
          v402 += v29;
          v19 = v748;
          v414 = v757;
          v417 = v743;
        }
        v24 += v417;
        v22 += v418;
        v15 += v765;
        LODWORD(v17) = v414 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 19:
      v419 = v34;
      v708 = -(uint64_t)(v29 * v31);
      v717 = -(v28 * v31);
      v420 = 16 * v34;
      v421 = -(uint64_t)v30;
      v422 = (unsigned int *)v19;
      v726 = v421;
      v735 = v420;
      while (1)
      {
        v749 = v19;
        v758 = v17;
        v423 = v18;
        v424 = v767;
        v425 = v768;
        do
        {
          if (*v24)
          {
            v426 = v424 ? COERCE_FLOAT(bswap32(*v422)) : 1.0;
            v427 = (float)*v24 * 0.0039216;
            a8.f32[0] = v427 * v426;
            if ((float)(v427 * v426) > 0.0)
            {
              v428 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v427);
              if (v425)
              {
                v429 = COERCE_FLOAT(bswap32(*v15));
                if (v429 <= 0.0)
                  goto LABEL_510;
              }
              else
              {
                v429 = 1.0;
              }
              v430 = vrev32q_s8(*v22);
              PDAcolorburnPDA((float *)v769.i32, *(float *)v430.i32, *(float *)&v430.i32[1], *(float *)&v430.i32[2], *(float *)&v430.i32[3], v429, *(double *)a8.i64, *(double *)v428.i64, a10, *(float *)v428.i32, *(float *)&v428.i32[1], *(float *)&v428.i32[2], *(float *)&v428.i32[3], a8.f32[0]);
              v425 = v768;
              v428 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v424 = v767;
                v421 = v726;
                v420 = v735;
LABEL_510:
                *v22 = vrev32q_s8(v428);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_512;
              }
              *v22 = vrev32q_s8(v769);
              v424 = v767;
              v421 = v726;
              v420 = v735;
            }
          }
LABEL_512:
          v24 += v419;
          v431 = &v32[v419];
          if ((unint64_t)v431 >= v20)
            v432 = v421;
          else
            v432 = 0;
          v422 += v767 + v432;
          v32 = &v431[v432];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v420);
          --v423;
        }
        while (v423);
        if (v746)
        {
          LODWORD(v18) = v745;
          v433 = &v766[v744];
          v434 = v758;
          v435 = v708;
          if ((unint64_t)v433 < v746)
            v435 = 0;
          v19 = v749 + 4 * v29 + 4 * v435;
          v436 = v717;
          if ((unint64_t)v433 < v746)
            v436 = 0;
          v32 = &v433[v436];
          v20 += 16 * v436 + 16 * v744;
          v422 = (unsigned int *)(v749 + 4 * v29 + 4 * v435);
          v766 = v32;
          v438 = v742;
          v437 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v438 = v742;
          v422 += v29;
          v19 = v749;
          v434 = v758;
          v437 = v743;
        }
        v24 += v437;
        v22 += v438;
        v15 += v765;
        LODWORD(v17) = v434 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 20:
      v439 = v34;
      v709 = -(uint64_t)(v29 * v31);
      v718 = -(v28 * v31);
      v440 = 16 * v34;
      v441 = -(uint64_t)v30;
      v442 = (unsigned int *)v19;
      v727 = v441;
      v736 = v440;
      while (1)
      {
        v750 = v19;
        v759 = v17;
        v443 = v18;
        v444 = v767;
        v445 = v768;
        do
        {
          if (*v24)
          {
            v446 = v444 ? COERCE_FLOAT(bswap32(*v442)) : 1.0;
            v447 = (float)*v24 * 0.0039216;
            a8.f32[0] = v447 * v446;
            if ((float)(v447 * v446) > 0.0)
            {
              v448 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v447);
              if (v445)
              {
                a7.i32[0] = bswap32(*v15);
                if (a7.f32[0] <= 0.0)
                  goto LABEL_538;
              }
              else
              {
                a7.i32[0] = 1.0;
              }
              v449 = vrev32q_s8(*v22);
              PDAsoftlightPDA((float32x4_t *)&v769, *(float32x2_t *)v449.i8, *(float32_t *)&v449.i32[1], *(float *)&v449.i32[2], *(float *)&v449.i32[3], *(double *)a7.i64, *(int32x2_t *)a8.f32, *(double *)v448.i64, a10, a2, v17, v18, v28, v40, v41, v35, *(float32x2_t *)v448.i8, *(float *)&v448.i32[2], *(float *)&v448.i32[3],
                a8.f32[0]);
              v445 = v768;
              v448 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v444 = v767;
                v441 = v727;
                v440 = v736;
LABEL_538:
                *v22 = vrev32q_s8(v448);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_540;
              }
              *v22 = vrev32q_s8(v769);
              v444 = v767;
              v441 = v727;
              v440 = v736;
            }
          }
LABEL_540:
          v24 += v439;
          v450 = &v32[v439];
          if ((unint64_t)v450 >= v20)
            v451 = v441;
          else
            v451 = 0;
          v442 += v767 + v451;
          v32 = &v450[v451];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v440);
          --v443;
        }
        while (v443);
        if (v746)
        {
          v18 = v745;
          v452 = &v766[v744];
          v453 = v759;
          v454 = v709;
          if ((unint64_t)v452 < v746)
            v454 = 0;
          v19 = v750 + 4 * v29 + 4 * v454;
          v455 = v718;
          if ((unint64_t)v452 < v746)
            v455 = 0;
          v32 = &v452[v455];
          v20 += 16 * v455 + 16 * v744;
          v442 = (unsigned int *)(v750 + 4 * v29 + 4 * v454);
          v766 = v32;
          v457 = v742;
          v456 = v743;
        }
        else
        {
          v18 = v745;
          v32 += v744;
          v457 = v742;
          v442 += v29;
          v19 = v750;
          v453 = v759;
          v456 = v743;
        }
        v24 += v456;
        v22 += v457;
        v15 += v765;
        v17 = (v453 - 1);
        if (!(_DWORD)v17)
          return;
      }
    case 21:
      v458 = v34;
      v710 = -(uint64_t)(v29 * v31);
      v719 = -(v28 * v31);
      v459 = 16 * v34;
      v460 = -(uint64_t)v30;
      v461 = (unsigned int *)v19;
      v728 = v460;
      v737 = v459;
      while (1)
      {
        v751 = v19;
        v760 = v17;
        v462 = v18;
        v463 = v767;
        v464 = v768;
        do
        {
          if (*v24)
          {
            v465 = v463 ? COERCE_FLOAT(bswap32(*v461)) : 1.0;
            v466 = (float)*v24 * 0.0039216;
            a8.f32[0] = v466 * v465;
            if ((float)(v466 * v465) > 0.0)
            {
              v467 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v466);
              if (v464)
              {
                v468 = COERCE_FLOAT(bswap32(*v15));
                if (v468 <= 0.0)
                  goto LABEL_566;
              }
              else
              {
                v468 = 1.0;
              }
              v469 = vrev32q_s8(*v22);
              PDAhardlightPDA((float *)v769.i32, *(float *)v469.i32, *(float *)&v469.i32[1], *(float *)&v469.i32[2], *(float *)&v469.i32[3], v468, *(double *)a8.i64, *(double *)v467.i64, a10, *(float *)v467.i32, *(float *)&v467.i32[1], *(float *)&v467.i32[2], *(float *)&v467.i32[3], a8.f32[0]);
              v464 = v768;
              v467 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v463 = v767;
                v460 = v728;
                v459 = v737;
LABEL_566:
                *v22 = vrev32q_s8(v467);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_568;
              }
              *v22 = vrev32q_s8(v769);
              v463 = v767;
              v460 = v728;
              v459 = v737;
            }
          }
LABEL_568:
          v24 += v458;
          v470 = &v32[v458];
          if ((unint64_t)v470 >= v20)
            v471 = v460;
          else
            v471 = 0;
          v461 += v767 + v471;
          v32 = &v470[v471];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v459);
          --v462;
        }
        while (v462);
        if (v746)
        {
          LODWORD(v18) = v745;
          v472 = &v766[v744];
          v473 = v760;
          v474 = v710;
          if ((unint64_t)v472 < v746)
            v474 = 0;
          v19 = v751 + 4 * v29 + 4 * v474;
          v475 = v719;
          if ((unint64_t)v472 < v746)
            v475 = 0;
          v32 = &v472[v475];
          v20 += 16 * v475 + 16 * v744;
          v461 = (unsigned int *)(v751 + 4 * v29 + 4 * v474);
          v766 = v32;
          v477 = v742;
          v476 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v477 = v742;
          v461 += v29;
          v19 = v751;
          v473 = v760;
          v476 = v743;
        }
        v24 += v476;
        v22 += v477;
        v15 += v765;
        LODWORD(v17) = v473 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 22:
      v478 = v34;
      v479 = v31;
      v480 = -(v28 * v31);
      v481 = -(uint64_t)(v29 * v479);
      v482 = 16 * v34;
      v483 = -(uint64_t)v30;
      v484 = (unsigned int *)v19;
      while (1)
      {
        v485 = v18;
        do
        {
          if (*v24)
          {
            v486 = v767 ? COERCE_FLOAT(bswap32(*v484)) : 1.0;
            v487 = (float)*v24 * 0.0039216;
            a4.f32[0] = v487 * v486;
            if (a4.f32[0] > 0.0)
            {
              v488 = (float32x4_t)vrev32q_s8(*v32);
              v489 = (int8x16_t)vmulq_n_f32(v488, v487);
              if (v768)
              {
                v488.i32[0] = bswap32(*v15);
                if (v488.f32[0] <= 0.0)
                  goto LABEL_594;
              }
              else
              {
                v488.i32[0] = 1.0;
              }
              v490 = *v22;
              *(float *)v490.i32 = (float)(v488.f32[0] + a4.f32[0]) - (float)(v488.f32[0] * a4.f32[0]);
              v491 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v488.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v492 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), (float32x4_t)v489);
              v493 = vaddq_f32(v491, v492);
              v494 = vmulq_n_f32(v491, a4.f32[0]);
              v495 = vmulq_n_f32(v492, v488.f32[0]);
              v496 = vsubq_f32(v493, v494);
              v497 = (int8x16_t)vsubq_f32(v494, v495);
              v489 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v490.i8, 0), vaddq_f32(vsubq_f32(v496, v495), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v497), (int8x16_t)vnegq_f32((float32x4_t)v497), v497)));
              if (v768)
              {
                a4.i32[0] = v490.i32[0];
LABEL_594:
                v498 = bswap32(a4.u32[0]);
                a4 = (float32x4_t)vrev32q_s8(v489);
                *v22 = (int8x16_t)a4;
                *v15 = v498;
                goto LABEL_596;
              }
              a4 = (float32x4_t)vrev32q_s8(v489);
              *v22 = (int8x16_t)a4;
            }
          }
LABEL_596:
          v24 += v478;
          v499 = &v32[v478];
          v500 = &v484[v767];
          if ((unint64_t)v499 >= v20)
            v501 = v483;
          else
            v501 = 0;
          v484 = &v500[v501];
          v32 = &v499[v501];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v482);
          --v485;
        }
        while (v485);
        if (v35)
        {
          v502 = (unint64_t)&v766[v28];
          if (v502 >= v35)
            v503 = v481;
          else
            v503 = 0;
          v19 += 4 * v29 + 4 * v503;
          if (v502 >= v35)
            v504 = v480;
          else
            v504 = 0;
          v32 = (int8x16_t *)(v502 + 16 * v504);
          v20 += 16 * v504 + 16 * v28;
          v484 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v484 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 23:
      v505 = v34;
      v506 = v31;
      v507 = -(v28 * v31);
      v508 = -(uint64_t)(v29 * v506);
      v509 = 16 * v34;
      v510 = -(uint64_t)v30;
      v511.i64[0] = 0xC0000000C0000000;
      v511.i64[1] = 0xC0000000C0000000;
      v512 = (unsigned int *)v19;
      while (1)
      {
        v513 = v18;
        do
        {
          if (*v24)
          {
            v514 = v767 ? COERCE_FLOAT(bswap32(*v512)) : 1.0;
            v515 = (float)*v24 * 0.0039216;
            a5.f32[0] = v515 * v514;
            if (a5.f32[0] > 0.0)
            {
              v516 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v515);
              if (v768)
              {
                a8.i32[0] = bswap32(*v15);
                if (a8.f32[0] <= 0.0)
                  goto LABEL_624;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v517 = *v22;
              *(float *)v517.i32 = (float)(a8.f32[0] + a5.f32[0]) - (float)(a8.f32[0] * a5.f32[0]);
              a8 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0), (float32x4_t)vrev32q_s8(*v22));
              v518 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0), (float32x4_t)v516);
              v516 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v517.i8, 0), vmlaq_f32(vaddq_f32(a8, v518), v511, vmulq_f32(v518, a8)));
              if (v768)
              {
                a5.i32[0] = v517.i32[0];
LABEL_624:
                v519 = bswap32(a5.u32[0]);
                a5 = (float32x4_t)vrev32q_s8(v516);
                *v22 = (int8x16_t)a5;
                *v15 = v519;
                goto LABEL_626;
              }
              a5 = (float32x4_t)vrev32q_s8(v516);
              *v22 = (int8x16_t)a5;
            }
          }
LABEL_626:
          v24 += v505;
          v520 = &v32[v505];
          v521 = &v512[v767];
          if ((unint64_t)v520 >= v20)
            v522 = v510;
          else
            v522 = 0;
          v512 = &v521[v522];
          v32 = &v520[v522];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v509);
          --v513;
        }
        while (v513);
        if (v35)
        {
          v523 = (unint64_t)&v766[v28];
          if (v523 >= v35)
            v524 = v508;
          else
            v524 = 0;
          v19 += 4 * v29 + 4 * v524;
          if (v523 >= v35)
            v525 = v507;
          else
            v525 = 0;
          v32 = (int8x16_t *)(v523 + 16 * v525);
          v20 += 16 * v525 + 16 * v28;
          v512 = (unsigned int *)v19;
          v766 = v32;
        }
        else
        {
          v32 += v28;
          v512 += v29;
        }
        v24 += v40;
        v22 += v41;
        v15 += v765;
        LODWORD(v17) = v17 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 24:
      v526 = v34;
      v711 = -(uint64_t)(v29 * v31);
      v720 = -(v28 * v31);
      v527 = 16 * v34;
      v528 = -(uint64_t)v30;
      v529 = (unsigned int *)v19;
      v729 = v528;
      v738 = v527;
      while (1)
      {
        v752 = v19;
        v761 = v17;
        v530 = v18;
        v531 = v767;
        v532 = v768;
        do
        {
          if (*v24)
          {
            v533 = v531 ? COERCE_FLOAT(bswap32(*v529)) : 1.0;
            v534 = (float)*v24 * 0.0039216;
            a8.f32[0] = v534 * v533;
            if ((float)(v534 * v533) > 0.0)
            {
              v535 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v534);
              if (v532)
              {
                v536 = COERCE_FLOAT(bswap32(*v15));
                if (v536 <= 0.0)
                  goto LABEL_654;
              }
              else
              {
                v536 = 1.0;
              }
              v537 = vrev32q_s8(*v22);
              PDAhuePDA((float *)v769.i32, *(float *)v537.i32, *(float *)&v537.i32[1], *(float *)&v537.i32[2], *(float *)&v537.i32[3], v536, *(double *)a8.i64, *(double *)v535.i64, a10, *(float *)v535.i32, *(float *)&v535.i32[1], *(float *)&v535.i32[2], *(float *)&v535.i32[3], a8.f32[0]);
              v532 = v768;
              v535 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v531 = v767;
                v528 = v729;
                v527 = v738;
LABEL_654:
                *v22 = vrev32q_s8(v535);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_656;
              }
              *v22 = vrev32q_s8(v769);
              v531 = v767;
              v528 = v729;
              v527 = v738;
            }
          }
LABEL_656:
          v24 += v526;
          v538 = &v32[v526];
          if ((unint64_t)v538 >= v20)
            v539 = v528;
          else
            v539 = 0;
          v529 += v767 + v539;
          v32 = &v538[v539];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v527);
          --v530;
        }
        while (v530);
        if (v746)
        {
          LODWORD(v18) = v745;
          v540 = &v766[v744];
          v541 = v761;
          v542 = v711;
          if ((unint64_t)v540 < v746)
            v542 = 0;
          v19 = v752 + 4 * v29 + 4 * v542;
          v543 = v720;
          if ((unint64_t)v540 < v746)
            v543 = 0;
          v32 = &v540[v543];
          v20 += 16 * v543 + 16 * v744;
          v529 = (unsigned int *)(v752 + 4 * v29 + 4 * v542);
          v766 = v32;
          v545 = v742;
          v544 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v545 = v742;
          v529 += v29;
          v19 = v752;
          v541 = v761;
          v544 = v743;
        }
        v24 += v544;
        v22 += v545;
        v15 += v765;
        LODWORD(v17) = v541 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 25:
      v546 = v34;
      v712 = -(uint64_t)(v29 * v31);
      v721 = -(v28 * v31);
      v547 = 16 * v34;
      v548 = -(uint64_t)v30;
      v549 = (unsigned int *)v19;
      v730 = v548;
      v739 = v547;
      while (1)
      {
        v753 = v19;
        v762 = v17;
        v550 = v18;
        v551 = v767;
        v552 = v768;
        do
        {
          if (*v24)
          {
            v553 = v551 ? COERCE_FLOAT(bswap32(*v549)) : 1.0;
            v554 = (float)*v24 * 0.0039216;
            a8.f32[0] = v554 * v553;
            if ((float)(v554 * v553) > 0.0)
            {
              v555 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v554);
              if (v552)
              {
                v556 = COERCE_FLOAT(bswap32(*v15));
                if (v556 <= 0.0)
                  goto LABEL_682;
              }
              else
              {
                v556 = 1.0;
              }
              v557 = vrev32q_s8(*v22);
              PDAsaturationPDA((float *)v769.i32, *(float *)v557.i32, *(float *)&v557.i32[1], *(float *)&v557.i32[2], *(float *)&v557.i32[3], v556, *(double *)a8.i64, *(double *)v555.i64, a10, *(float *)v555.i32, *(float *)&v555.i32[1], *(float *)&v555.i32[2], *(float *)&v555.i32[3], a8.f32[0]);
              v552 = v768;
              v555 = v769;
              if (v768)
              {
                a8.i32[0] = v770;
                v551 = v767;
                v548 = v730;
                v547 = v739;
LABEL_682:
                *v22 = vrev32q_s8(v555);
                *v15 = bswap32(a8.u32[0]);
                goto LABEL_684;
              }
              *v22 = vrev32q_s8(v769);
              v551 = v767;
              v548 = v730;
              v547 = v739;
            }
          }
LABEL_684:
          v24 += v546;
          v558 = &v32[v546];
          if ((unint64_t)v558 >= v20)
            v559 = v548;
          else
            v559 = 0;
          v549 += v767 + v559;
          v32 = &v558[v559];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v547);
          --v550;
        }
        while (v550);
        if (v746)
        {
          LODWORD(v18) = v745;
          v560 = &v766[v744];
          v561 = v762;
          v562 = v712;
          if ((unint64_t)v560 < v746)
            v562 = 0;
          v19 = v753 + 4 * v29 + 4 * v562;
          v563 = v721;
          if ((unint64_t)v560 < v746)
            v563 = 0;
          v32 = &v560[v563];
          v20 += 16 * v563 + 16 * v744;
          v549 = (unsigned int *)(v753 + 4 * v29 + 4 * v562);
          v766 = v32;
          v565 = v742;
          v564 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v565 = v742;
          v549 += v29;
          v19 = v753;
          v561 = v762;
          v564 = v743;
        }
        v24 += v564;
        v22 += v565;
        v15 += v765;
        LODWORD(v17) = v561 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 26:
      v566 = v34;
      v713 = -(uint64_t)(v29 * v31);
      v722 = -(v28 * v31);
      v567 = 16 * v34;
      v568 = -(uint64_t)v30;
      v569 = (unsigned int *)v19;
      v731 = v568;
      v740 = v567;
      while (1)
      {
        v754 = v19;
        v763 = v17;
        v570 = v18;
        v571 = v767;
        v572 = v768;
        do
        {
          if (*v24)
          {
            v573 = v571 ? COERCE_FLOAT(bswap32(*v569)) : 1.0;
            v574 = (float)*v24 * 0.0039216;
            v575 = v574 * v573;
            if ((float)(v574 * v573) > 0.0)
            {
              v576 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v574);
              if (v572)
              {
                a8.i32[0] = bswap32(*v15);
                if (a8.f32[0] <= 0.0)
                  goto LABEL_710;
              }
              else
              {
                a8.i32[0] = 1.0;
              }
              v705 = vrev32q_s8(*v22);
              PDAluminosityPDA((float *)v769.i32, *(float *)v576.i32, *(float *)&v576.i32[1], *(float *)&v576.i32[2], *(float *)&v576.i32[3], v575, *(double *)a8.i64, *(double *)v705.i64, a10, *(float *)v705.i32, *(float *)&v705.i32[1], *(float *)&v705.i32[2], *(float *)&v705.i32[3], a8.f32[0]);
              v572 = v768;
              v576 = v769;
              if (v768)
              {
                v575 = *(float *)&v770;
                v571 = v767;
                v568 = v731;
                v567 = v740;
LABEL_710:
                *v22 = vrev32q_s8(v576);
                *v15 = bswap32(LODWORD(v575));
                goto LABEL_712;
              }
              *v22 = vrev32q_s8(v769);
              v571 = v767;
              v568 = v731;
              v567 = v740;
            }
          }
LABEL_712:
          v24 += v566;
          v577 = &v32[v566];
          if ((unint64_t)v577 >= v20)
            v578 = v568;
          else
            v578 = 0;
          v569 += v767 + v578;
          v32 = &v577[v578];
          v15 += v768;
          v22 = (int8x16_t *)((char *)v22 + v567);
          --v570;
        }
        while (v570);
        if (v746)
        {
          LODWORD(v18) = v745;
          v579 = &v766[v744];
          v580 = v763;
          v581 = v713;
          if ((unint64_t)v579 < v746)
            v581 = 0;
          v19 = v754 + 4 * v29 + 4 * v581;
          v582 = v722;
          if ((unint64_t)v579 < v746)
            v582 = 0;
          v32 = &v579[v582];
          v20 += 16 * v582 + 16 * v744;
          v569 = (unsigned int *)(v754 + 4 * v29 + 4 * v581);
          v766 = v32;
          v584 = v742;
          v583 = v743;
        }
        else
        {
          LODWORD(v18) = v745;
          v32 += v744;
          v584 = v742;
          v569 += v29;
          v19 = v754;
          v580 = v763;
          v583 = v743;
        }
        v24 += v583;
        v22 += v584;
        v15 += v765;
        LODWORD(v17) = v580 - 1;
        if (!(_DWORD)v17)
          return;
      }
    case 27:
      v585 = v34;
      v714 = -(uint64_t)(v29 * v31);
      v723 = -(v28 * v31);
      v586 = 16 * v34;
      v587 = -(uint64_t)v30;
      v588 = (unsigned int *)v19;
      v732 = v587;
      v741 = v586;
      break;
    default:
      return;
  }
  do
  {
    v755 = v19;
    v764 = v17;
    v589 = v18;
    v590 = v767;
    v591 = v768;
    do
    {
      if (*v24)
      {
        v592 = v590 ? COERCE_FLOAT(bswap32(*v588)) : 1.0;
        v593 = (float)*v24 * 0.0039216;
        a8.f32[0] = v593 * v592;
        if ((float)(v593 * v592) > 0.0)
        {
          v594 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v32), v593);
          if (v591)
          {
            v595 = COERCE_FLOAT(bswap32(*v15));
            if (v595 <= 0.0)
              goto LABEL_738;
          }
          else
          {
            v595 = 1.0;
          }
          v596 = vrev32q_s8(*v22);
          PDAluminosityPDA((float *)v769.i32, *(float *)v596.i32, *(float *)&v596.i32[1], *(float *)&v596.i32[2], *(float *)&v596.i32[3], v595, *(double *)a8.i64, *(double *)v594.i64, a10, *(float *)v594.i32, *(float *)&v594.i32[1], *(float *)&v594.i32[2], *(float *)&v594.i32[3], a8.f32[0]);
          v591 = v768;
          v594 = v769;
          if (v768)
          {
            a8.i32[0] = v770;
            v590 = v767;
            v587 = v732;
            v586 = v741;
LABEL_738:
            *v22 = vrev32q_s8(v594);
            *v15 = bswap32(a8.u32[0]);
            goto LABEL_740;
          }
          *v22 = vrev32q_s8(v769);
          v590 = v767;
          v587 = v732;
          v586 = v741;
        }
      }
LABEL_740:
      v24 += v585;
      v597 = &v32[v585];
      if ((unint64_t)v597 >= v20)
        v598 = v587;
      else
        v598 = 0;
      v588 += v767 + v598;
      v32 = &v597[v598];
      v15 += v768;
      v22 = (int8x16_t *)((char *)v22 + v586);
      --v589;
    }
    while (v589);
    if (v746)
    {
      LODWORD(v18) = v745;
      v599 = &v766[v744];
      v600 = v764;
      v601 = v714;
      if ((unint64_t)v599 < v746)
        v601 = 0;
      v19 = v755 + 4 * v29 + 4 * v601;
      v602 = v723;
      if ((unint64_t)v599 < v746)
        v602 = 0;
      v32 = &v599[v602];
      v20 += 16 * v602 + 16 * v744;
      v588 = (unsigned int *)(v755 + 4 * v29 + 4 * v601);
      v766 = v32;
      v604 = v742;
      v603 = v743;
    }
    else
    {
      LODWORD(v18) = v745;
      v32 += v744;
      v604 = v742;
      v588 += v29;
      v19 = v755;
      v600 = v764;
      v603 = v743;
    }
    v24 += v603;
    v22 += v604;
    v15 += v765;
    LODWORD(v17) = v600 - 1;
  }
  while ((_DWORD)v17);
}

uint64_t CMYKF_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int *v23;
  int v24;
  unint64_t v25;
  void (*v26)(uint64_t, _DWORD *);
  uint64_t v27;
  int v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double);
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _OWORD v36[64];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v36, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)v36) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *(_DWORD *)a3;
  v31 = v19;
  v32 = v18;
  if (v19 != 538985477)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 > 0xB)
      {
LABEL_20:
        v22 = 255;
        v21 = 1;
      }
      else
      {
        v21 = 0;
        v22 = 0;
        switch(v20)
        {
          case 2u:
            if (*((_QWORD *)a2 + 12))
              goto LABEL_20;
            v21 = 0;
            v22 = 16;
            break;
          case 5u:
            v21 = 0;
            v22 = 24;
            break;
          case 6u:
            break;
          case 7u:
            v21 = 0;
            v22 = 32;
            break;
          case 8u:
            v21 = 0;
            v22 = 8;
            break;
          case 9u:
            v21 = 0;
            v22 = 40;
            break;
          default:
            goto LABEL_20;
        }
      }
      v23 = CMYKF_image_sample;
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYKF_image_sample[2 * v20 + 2];
      if (v30)
      {
LABEL_29:
        v31 = *v23;
        if ((v21 & 1) == 0 && (v8 - 1) <= 1 && (v34 & 7) == 3 && (a2[2] == 5 || !a2[2]) && v20 <= 0xB)
        {
          HIDWORD(v25) = v22;
          LODWORD(v25) = v22;
          switch((v25 >> 3))
          {
            case 0u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_RGB32;
              goto LABEL_52;
            case 1u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_RGB32;
              goto LABEL_54;
            case 2u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_W8;
              goto LABEL_52;
            case 3u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_RGB24;
              goto LABEL_52;
            case 4u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_rgb32;
LABEL_52:
              v27 = (uint64_t)a2;
              v28 = v8;
              v29 = 0;
              break;
            case 5u:
              v31 = *(_DWORD *)a3;
              v26 = (void (*)(uint64_t, _DWORD *))CMYKF_image_mark_rgb32;
LABEL_54:
              v27 = (uint64_t)a2;
              v28 = v8;
              v29 = 8;
              break;
            default:
              goto LABEL_37;
          }
          CMYKF_image_mark_image(v27, (uint64_t)&v30, v28, v29, v26);
          return 1;
        }
        goto LABEL_37;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v23 = CMYK8_image_sample;
        v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK8_image_sample[2 * v20 + 2];
        if (v30)
        {
          v24 = 8;
LABEL_28:
          v33 = v24;
          goto LABEL_29;
        }
      }
      v23 = CMYK16_image_sample;
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int, double, double, double, double, double, double, double, double))&CMYK16_image_sample[2 * v20 + 2];
      if (v30)
      {
        v24 = 16;
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v35 && (~v34 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v34 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      CMYKF_mark_inner(*(_QWORD *)(*a1 + 56), v17);
      return 1;
    }
  }
  v30 = CMYKf_sample_CMYKF_inner;
LABEL_37:
  CMYKF_image_mark((uint64_t)a2, (uint64_t)&v30, v8, v17);
  return 1;
}

uint64_t CMYKF_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, int32x4_t _Q0, float32x2_t a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  int8x16_t *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t result;
  float32x2_t v29;
  float v30;
  unsigned int v31;
  int32x2_t v32;
  float32x4_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  int32x4_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  int32x4_t v68;
  unsigned int v69;
  int32x4_t v70;
  int32x4_t v71;
  uint64_t *v72;
  float32x2_t v73;
  float v74;
  unsigned int v75;
  int32x2_t v76;
  float32x4_t v77;
  unsigned __int8 *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  int32x4_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int32x4_t v88;
  unsigned int v89;
  int32x4_t v90;
  int32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  v13 = (int8x16_t *)*((_QWORD *)a2 + 2);
  v14 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v14)
    v96 = *((_QWORD *)a2 + 5) - a5;
  else
    v96 = 0;
  LODWORD(a10) = a2[2];
  v95 = *a2;
  v15 = *((_QWORD *)a2 + 3) - a5;
  v16 = *((_QWORD *)a2 + 17);
  v17 = *((_QWORD *)a2 + 18);
  v18 = *((_QWORD *)a2 + 9);
  v19 = *((_QWORD *)a2 + 11);
  v20 = *((_QWORD *)a2 + 7) + v19 * a4;
  v21 = *(unsigned __int8 **)(a1 + 32);
  v22 = &v21[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  v23 = *(_QWORD *)(a1 + 176);
  __asm { FMOV            V0.2S, #1.0 }
  result = 4 * (v14 != 0);
  if (v23)
  {
    v93 = *((_QWORD *)a2 + 15);
    v94 = *((_QWORD *)a2 + 13);
    a8.i32[0] = 1.0;
    v32 = vdup_lane_s32(*(int32x2_t *)&a10, 0);
    v29 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(a8, *(float32x2_t *)&a10), 0), (int8x8_t)v32, *(int8x8_t *)_Q0.i8);
    v30 = fminf(*(float *)&a10, 1.0);
    v31 = bswap32(LODWORD(v30));
    *(float *)v32.i32 = 1.0 - v30;
    v33 = (float32x4_t)vdupq_lane_s32(v32, 0);
    v92 = v17 + 16 * a3 + 8;
    do
    {
      if (((v93 - v20) | (v20 - v94)) < 0)
      {
        v36 = 0;
        v35 = 0;
      }
      else
      {
        v34 = ((v20 & (unint64_t)~(-1 << v18)) >> (v18 - 4)) & 0xF;
        if (v34 - 7 >= 9)
          v35 = -v16;
        else
          v35 = v16;
        v36 = weights_19497[v34] & 0xF;
      }
      v37 = &v21[(v20 >> v18) * v16];
      if (v95 == 1)
      {
        if (a5 >= 1)
        {
          v38 = (uint64_t *)v92;
          v39 = a5;
          do
          {
            v40 = *(v38 - 1);
            v41 = *v38;
            v42 = &v37[v40];
            if (v22 >= &v37[v40])
              v43 = &v37[v40];
            else
              v43 = v22;
            if (v21 > v43)
              v43 = v21;
            v44 = *v43;
            if ((v41 & 0xF) != 0)
            {
              v45 = &v42[v41 >> 4];
              if (v22 < v45)
                v45 = v22;
              if (v21 > v45)
                v45 = v21;
              v46 = *v45;
              if (v36)
              {
                v47 = &v42[v35];
                if (v22 >= v47)
                  v48 = v47;
                else
                  v48 = v22;
                if (v21 > v48)
                  v48 = v21;
                v49 = *v48;
                v50 = &v47[v41 >> 4];
                if (v22 < v50)
                  v50 = v22;
                if (v21 > v50)
                  v50 = v21;
                v51 = BLEND8_19499[v36];
                v44 = v44 - ((v51 & v44) >> v36) + ((v51 & v49) >> v36);
                v46 = v46 - ((v51 & v46) >> v36) + ((v51 & *v50) >> v36);
              }
              v44 = v44
                  - ((BLEND8_19499[*v38 & 0xF] & v44) >> (*v38 & 0xF))
                  + ((BLEND8_19499[*v38 & 0xF] & v46) >> (*v38 & 0xF));
            }
            else if (v36)
            {
              v52 = &v42[v35];
              if (v22 < &v42[v35])
                v52 = v22;
              if (v21 > v52)
                v52 = v21;
              v44 = v44 - ((BLEND8_19499[v36] & v44) >> v36) + ((BLEND8_19499[v36] & *v52) >> v36);
            }
            a13.i32[0] = _blt_float[v44];
            *(int8x8_t *)a13.i8 = vrev32_s8((int8x8_t)vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(_Q0.u32[1], a13.u32[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v30));
            v53 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v53.i32[2] = a13.i32[0];
            *v13 = (int8x16_t)v53;
            if (v14)
              *v14 = v31;
            v38 += 2;
            ++v13;
            v14 = (unsigned int *)((char *)v14 + result);
            --v39;
          }
          while (v39);
        }
      }
      else if (a5 >= 1)
      {
        v55 = (uint64_t *)v92;
        v54 = a5;
        do
        {
          v56 = *(v55 - 1);
          v57 = *v55;
          v58 = &v37[v56];
          if (v22 >= &v37[v56])
            v59 = &v37[v56];
          else
            v59 = v22;
          if (v21 > v59)
            v59 = v21;
          v60 = *v59;
          if ((v57 & 0xF) != 0)
          {
            v61 = &v58[v57 >> 4];
            if (v22 < v61)
              v61 = v22;
            if (v21 > v61)
              v61 = v21;
            v62 = *v61;
            if (v36)
            {
              if (v22 >= &v58[v35])
                v63 = &v58[v35];
              else
                v63 = v22;
              if (v21 > v63)
                v63 = v21;
              v64 = *v63;
              v65 = &v58[v35 + (v57 >> 4)];
              if (v22 < v65)
                v65 = v22;
              if (v21 > v65)
                v65 = v21;
              v66 = BLEND8_19499[v36];
              v60 = v60 - ((v66 & v60) >> v36) + ((v66 & v64) >> v36);
              v62 = v62 - ((v66 & v62) >> v36) + ((v66 & *v65) >> v36);
            }
            v60 = v60
                - ((BLEND8_19499[*v55 & 0xF] & v60) >> (*v55 & 0xF))
                + ((BLEND8_19499[*v55 & 0xF] & v62) >> (*v55 & 0xF));
          }
          else if (v36)
          {
            v67 = &v58[v35];
            if (v22 < &v58[v35])
              v67 = v22;
            if (v21 > v67)
              v67 = v21;
            v60 = v60 - ((BLEND8_19499[v36] & v60) >> v36) + ((BLEND8_19499[v36] & *v67) >> v36);
          }
          a13.i32[0] = _blt_float[v60];
          v68 = _Q0;
          v68.i32[0] = a13.i32[0];
          *(float32x2_t *)v68.i8 = vmul_f32(vsub_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v29);
          a13 = (int8x16_t)vzip1q_s32(v68, v68);
          a13.i32[2] = v68.i32[0];
          if (v14)
          {
            if (v30 < 1.0)
            {
              if (v30 > 0.0)
              {
                v69 = bswap32(COERCE_UNSIGNED_INT(v30 + (float)(COERCE_FLOAT(bswap32(*v14)) * *(float *)v32.i32)));
                a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v33, (float32x4_t)vrev32q_s8(*v13)));
                *v13 = a13;
                *v14 = v69;
              }
            }
            else
            {
              *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v68.i8);
              v70 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
              v70.i32[2] = a13.i32[0];
              *v13 = (int8x16_t)v70;
              *v14 = v31;
            }
          }
          else if (v30 < 1.0)
          {
            if (v30 > 0.0)
            {
              a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v33, (float32x4_t)vrev32q_s8(*v13)));
              *v13 = a13;
            }
          }
          else
          {
            *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v68.i8);
            v71 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v71.i32[2] = a13.i32[0];
            *v13 = (int8x16_t)v71;
          }
          v55 += 2;
          ++v13;
          v14 = (unsigned int *)((char *)v14 + result);
          --v54;
        }
        while (v54);
      }
      v13 += v15;
      v20 += v19;
      v14 += v96;
      --a6;
    }
    while (a6);
  }
  else
  {
    v72 = (uint64_t *)(v17 + 16 * a3);
    a8.i32[0] = 1.0;
    v76 = vdup_lane_s32(*(int32x2_t *)&a10, 0);
    v73 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(a8, *(float32x2_t *)&a10), 0), (int8x8_t)v76, *(int8x8_t *)_Q0.i8);
    v74 = fminf(*(float *)&a10, 1.0);
    v75 = bswap32(LODWORD(v74));
    *(float *)v76.i32 = 1.0 - v74;
    v77 = (float32x4_t)vdupq_lane_s32(v76, 0);
    do
    {
      v78 = &v21[(v20 >> v18) * v16];
      if (v95 == 1)
      {
        if (a5 >= 1)
        {
          v79 = v72;
          v80 = a5;
          do
          {
            v81 = *v79;
            v79 += 2;
            v82 = &v78[v81];
            if (v22 < &v78[v81])
              v82 = v22;
            if (v21 > v82)
              v82 = v21;
            a13.i32[0] = _blt_float[*v82];
            *(int8x8_t *)a13.i8 = vrev32_s8((int8x8_t)vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(_Q0.u32[1], a13.u32[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v74));
            v83 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
            v83.i32[2] = a13.i32[0];
            *v13 = (int8x16_t)v83;
            if (v14)
              *v14 = v75;
            ++v13;
            v14 = (unsigned int *)((char *)v14 + result);
            --v80;
          }
          while (v80);
        }
      }
      else
      {
        v84 = v72;
        v85 = a5;
        if (a5 >= 1)
        {
          do
          {
            v86 = *v84;
            v84 += 2;
            v87 = &v78[v86];
            if (v22 < &v78[v86])
              v87 = v22;
            if (v21 > v87)
              v87 = v21;
            a13.i32[0] = _blt_float[*v87];
            v88 = _Q0;
            v88.i32[0] = a13.i32[0];
            *(float32x2_t *)v88.i8 = vmul_f32(vsub_f32(*(float32x2_t *)v88.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 0)), v73);
            a13 = (int8x16_t)vzip1q_s32(v88, v88);
            a13.i32[2] = v88.i32[0];
            if (v14)
            {
              if (v74 < 1.0)
              {
                if (v74 > 0.0)
                {
                  v89 = bswap32(COERCE_UNSIGNED_INT(v74 + (float)(COERCE_FLOAT(bswap32(*v14)) * *(float *)v76.i32)));
                  a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v77, (float32x4_t)vrev32q_s8(*v13)));
                  *v13 = a13;
                  *v14 = v89;
                }
              }
              else
              {
                *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v88.i8);
                v90 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
                v90.i32[2] = a13.i32[0];
                *v13 = (int8x16_t)v90;
                *v14 = v75;
              }
            }
            else if (v74 < 1.0)
            {
              if (v74 > 0.0)
              {
                a13 = vrev32q_s8((int8x16_t)vmlaq_f32((float32x4_t)a13, v77, (float32x4_t)vrev32q_s8(*v13)));
                *v13 = a13;
              }
            }
            else
            {
              *(int8x8_t *)a13.i8 = vrev32_s8(*(int8x8_t *)v88.i8);
              v91 = vzip1q_s32((int32x4_t)a13, (int32x4_t)a13);
              v91.i32[2] = a13.i32[0];
              *v13 = (int8x16_t)v91;
            }
            ++v13;
            v14 = (unsigned int *)((char *)v14 + result);
            --v85;
          }
          while (v85);
        }
      }
      v13 += v15;
      v20 += v19;
      v14 += v96;
      --a6;
    }
    while (a6);
  }
  return result;
}

void CMYKF_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  int v41;
  int v42;
  int *v43;
  int v44;
  void *v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD v56[4];
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  int v75;
  int v76[4];

  v56[0] = a3;
  v56[1] = a4;
  v56[2] = *(_DWORD *)(a2 + 184);
  v8 = (unint64_t)*(int *)(a1 + 28) >> 4;
  v58 = v8;
  if (*(_QWORD *)(a1 + 48))
    v9 = (unint64_t)*(int *)(a1 + 32) >> 2;
  else
    v9 = 0;
  v60 = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    v12 = HIBYTE(v11);
    v13 = *(int *)(a2 + 24);
    v14 = (uint64_t *)(a2 + 104);
    v15 = (uint64_t *)(a2 + 72);
    v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    v12 = BYTE2(v11);
    v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v14 = (uint64_t *)(a2 + 96);
    v15 = (uint64_t *)(a2 + 64);
    v16 = (uint64_t *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 112);
  }
  v17 = *v16;
  v18 = *v15;
  v19 = *v14;
  v20 = v12;
  v63 = v12;
  v61 = v19;
  v71 = v13;
  v69 = v17;
  v67 = v18;
  v65 = v10;
  v21 = *(_QWORD *)(a2 + 128);
  v54 = v18;
  v55 = v17;
  if (v21)
  {
    v22 = BYTE2(v11);
    v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v24 = (uint64_t *)(a2 + 96);
    v25 = (uint64_t *)(a2 + 64);
    v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    v22 = HIBYTE(v11);
    v23 = *(int *)(a2 + 24);
    v24 = (uint64_t *)(a2 + 104);
    v25 = (uint64_t *)(a2 + 72);
    v26 = (uint64_t *)(a2 + 88);
    v21 = *(_QWORD *)(a2 + 136);
  }
  v27 = *v26;
  v28 = *v25;
  v29 = *v24;
  v64 = v22;
  v62 = v29;
  v72 = v23;
  v70 = v27;
  v68 = v28;
  v66 = v21;
  v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    v31 = malloc_type_malloc(16 * v30, 0xCA75A918uLL);
    v73 = v31;
    if (v31)
    {
      if (*(_QWORD *)(a2 + 176))
      {
        if ((_DWORD)v30)
        {
          v33 = v31 + 1;
          v34 = v55 - v19;
          do
          {
            if (((v19 - v54) | v34) < 0)
            {
              v37 = 0;
              v38 = 0;
            }
            else
            {
              v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              v36 = weights_19497[v35];
              if (v35 - 7 >= 9)
                v37 = -(uint64_t)v13;
              else
                v37 = v13;
              v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if ((_DWORD)v30)
      {
        v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      v40 = v31;
      v41 = *(_DWORD *)(a1 + 4);
      v42 = *(_DWORD *)(a1 + 8);
      v74 = v42;
      v75 = v41;
      v43 = *(int **)(a1 + 136);
      if (v43)
      {
        v44 = *(_DWORD *)(a1 + 104);
        v76[0] = *(_DWORD *)(a1 + 108);
        v76[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v76[0], v41, v42);
        v46 = v45;
        if (v45)
          goto LABEL_32;
      }
      v47 = 0;
      v48 = 0;
      v46 = 0;
      *(_QWORD *)v76 = 0;
      while (1)
      {
        v49 = *(int *)(a1 + 16) + (uint64_t)v48;
        v50 = *(_QWORD *)(a1 + 48);
        v51 = v47 + *(_DWORD *)(a1 + 12);
        v52 = *(_QWORD *)(a1 + 40) + 16 * v8 * v49 + 16 * v51;
        v53 = v50 + 4 * v9 * v49 + 4 * v51;
        if (!v50)
          v53 = 0;
        v57 = v52;
        v59 = v53;
        a5(a2, v56);
        if (!v46)
          break;
LABEL_32:
        if (!shape_enum_clip_next((uint64_t)v46, &v76[1], v76, &v75, &v74))
        {
          free(v46);
          break;
        }
        v48 = v76[0];
        v47 = v76[1];
        v8 = v58;
        v9 = v60;
      }
      free(v40);
    }
  }
}

unint64_t CMYKF_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  unsigned int *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float32x2_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x2_t v78;
  float v79;
  float v80;
  float v81;
  float32x2_t v82;
  float32x4_t v83;
  float v84;
  unsigned int v85;
  int8x16_t v86;
  unsigned int v87;
  int8x16_t v88;
  _QWORD *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float32x2_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float32x2_t v127;
  float v128;
  float v129;
  float v130;
  float32x2_t v131;
  float32x4_t v132;
  float v133;
  unsigned int v134;
  int8x16_t v135;
  unsigned int v136;
  int8x16_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;

  v6 = *((_QWORD *)a2 + 2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v7)
    v142 = *((_QWORD *)a2 + 5) - a5;
  else
    v142 = 0;
  LODWORD(v8) = a2[2];
  v141 = *a2;
  v140 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 17);
  v10 = *((_QWORD *)a2 + 18);
  v11 = *((_QWORD *)a2 + 9);
  v12 = *((_QWORD *)a2 + 11);
  v13 = *((_QWORD *)a2 + 7) + v12 * a4;
  v14 = *(unsigned __int8 **)(a1 + 32);
  v15 = &v14[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  result = *(_QWORD *)(a1 + 176);
  v17 = 4 * (v7 != 0);
  __asm { FMOV            V1.2S, #1.0 }
  if (result)
  {
    v139 = *((_QWORD *)a2 + 13);
    v23 = *((_QWORD *)a2 + 15);
    v138 = v10 + 16 * a3 + 8;
    while (1)
    {
      result = v13 - v139;
      if (((v23 - v13) | (v13 - v139)) < 0)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v24 = ((v13 & (unint64_t)~(-1 << v11)) >> (v11 - 4)) & 0xF;
        result = weights_19497[v24];
        if (v24 - 7 >= 9)
          v25 = -v9;
        else
          v25 = v9;
        v26 = result & 0xF;
      }
      v27 = &v14[(v13 >> v11) * v9];
      if (v141 == 1)
      {
        if (a5 >= 1)
        {
          result = v26;
          v28 = (uint64_t *)v138;
          v29 = a5;
          do
          {
            v30 = *(v28 - 1);
            v31 = *v28;
            v32 = &v27[v30];
            if (v15 >= &v27[v30])
              v33 = &v27[v30];
            else
              v33 = v15;
            if (v14 > v33)
              v33 = v14;
            v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
            if ((v31 & 0xF) != 0)
            {
              v35 = &v32[v31 >> 4];
              if (v15 < v35)
                v35 = v15;
              if (v14 > v35)
                v35 = v14;
              v36 = (*v35 << 24) | (v35[1] << 16) | (v35[2] << 8);
              if (v26)
              {
                if (v15 >= &v32[v25])
                  v37 = &v32[v25];
                else
                  v37 = v15;
                if (v14 > v37)
                  v37 = v14;
                v38 = (*v37 << 24) | (v37[1] << 16) | (v37[2] << 8);
                v39 = &v32[v25 + (v31 >> 4)];
                if (v15 < v39)
                  v39 = v15;
                if (v14 > v39)
                  v39 = v14;
                v40 = BLEND8_19499[v26];
                v34 = v34 - ((v40 & v34) >> v26) + ((v40 & v38) >> v26);
                v36 = v36 - ((v40 & v36) >> v26) + ((((*v39 << 24) | (v39[1] << 16) | (v39[2] << 8)) & v40) >> v26);
              }
              v34 = v34
                  - ((BLEND8_19499[*v28 & 0xF] & v34) >> (*v28 & 0xF))
                  + ((BLEND8_19499[*v28 & 0xF] & v36) >> (*v28 & 0xF));
            }
            else if (v26)
            {
              v41 = &v32[v25];
              if (v15 < &v32[v25])
                v41 = v15;
              if (v14 > v41)
                v41 = v14;
              v34 = v34
                  - ((BLEND8_19499[v26] & v34) >> v26)
                  + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & BLEND8_19499[v26]) >> v26);
            }
            v42 = *(float *)&_blt_float[HIBYTE(v34)];
            if (v8 >= 1.0)
            {
              v52 = *(float *)&_blt_float[BYTE2(v34)];
              v53 = *(float *)&_blt_float[BYTE1(v34)];
              if (v42 <= v52)
                v54 = *(float *)&_blt_float[BYTE2(v34)];
              else
                v54 = *(float *)&_blt_float[HIBYTE(v34)];
              if (v53 <= v54)
                v55 = v54;
              else
                v55 = *(float *)&_blt_float[BYTE1(v34)];
              v47 = v55 - v42;
              v48 = v55 - v52;
              v49 = v55 - v53;
              v51 = 1.0;
              v50 = 1.0 - v55;
            }
            else
            {
              v43 = v8 * v42;
              v44 = v8 * *(float *)&_blt_float[BYTE2(v34)];
              v45 = v8 * *(float *)&_blt_float[BYTE1(v34)];
              if (v43 <= v44)
                v46 = v8 * *(float *)&_blt_float[BYTE2(v34)];
              else
                v46 = v43;
              if (v45 > v46)
                v46 = v8 * *(float *)&_blt_float[BYTE1(v34)];
              v47 = v46 - v43;
              v48 = v46 - v44;
              v49 = v46 - v45;
              v50 = v8 - v46;
              v51 = LODWORD(v8);
            }
            *(_DWORD *)v6 = bswap32(LODWORD(v47));
            *(_DWORD *)(v6 + 4) = bswap32(LODWORD(v48));
            *(_DWORD *)(v6 + 8) = bswap32(LODWORD(v49));
            *(_DWORD *)(v6 + 12) = bswap32(LODWORD(v50));
            if (v7)
              *v7 = bswap32(v51);
            v28 += 2;
            v6 += 16;
            v7 = (unsigned int *)((char *)v7 + v17);
            --v29;
          }
          while (v29);
        }
        goto LABEL_117;
      }
      if (a5 >= 1)
        break;
LABEL_117:
      v6 += 16 * v140;
      v13 += v12;
      v7 += v142;
      if (!--a6)
        return result;
    }
    v56 = (uint64_t *)v138;
    result = a5;
    while (1)
    {
      v57 = *(v56 - 1);
      v58 = *v56;
      v59 = &v27[v57];
      if (v15 >= &v27[v57])
        v60 = &v27[v57];
      else
        v60 = v15;
      if (v14 > v60)
        v60 = v14;
      v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
      if ((v58 & 0xF) != 0)
      {
        v62 = &v59[v58 >> 4];
        if (v15 < v62)
          v62 = v15;
        if (v14 > v62)
          v62 = v14;
        v63 = (*v62 << 24) | (v62[1] << 16) | (v62[2] << 8);
        if (v26)
        {
          if (v15 >= &v59[v25])
            v64 = &v59[v25];
          else
            v64 = v15;
          if (v14 > v64)
            v64 = v14;
          v65 = (*v64 << 24) | (v64[1] << 16) | (v64[2] << 8);
          v66 = &v59[v25 + (v58 >> 4)];
          if (v15 < v66)
            v66 = v15;
          if (v14 > v66)
            v66 = v14;
          v67 = BLEND8_19499[v26];
          v61 = v61 - ((v67 & v61) >> v26) + ((v67 & v65) >> v26);
          v63 = v63 - ((v67 & v63) >> v26) + ((((*v66 << 24) | (v66[1] << 16) | (v66[2] << 8)) & v67) >> v26);
        }
        v61 = v61
            - ((BLEND8_19499[*v56 & 0xF] & v61) >> (*v56 & 0xF))
            + ((BLEND8_19499[*v56 & 0xF] & v63) >> (*v56 & 0xF));
      }
      else if (v26)
      {
        v68 = &v59[v25];
        if (v15 < &v59[v25])
          v68 = v15;
        if (v14 > v68)
          v68 = v14;
        v61 = v61
            - ((BLEND8_19499[v26] & v61) >> v26)
            + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & BLEND8_19499[v26]) >> v26);
      }
      v69 = *(float *)&_blt_float[HIBYTE(v61)];
      if (v8 >= 1.0)
      {
        v80 = *(float *)&_blt_float[BYTE2(v61)];
        v73.i32[0] = _blt_float[BYTE1(v61)];
        if (v69 <= v80)
          v81 = *(float *)&_blt_float[BYTE2(v61)];
        else
          v81 = *(float *)&_blt_float[HIBYTE(v61)];
        if (v73.f32[0] <= v81)
          v75 = v81;
        else
          v75 = *(float *)&_blt_float[BYTE1(v61)];
        v76 = v75 - v69;
        v77 = v75 - v80;
        v78 = (float32x2_t)__PAIR64__(HIDWORD(_D1), LODWORD(v75));
        v79 = 1.0;
      }
      else
      {
        v70 = v8 * v69;
        v71 = *(float *)&_blt_float[BYTE2(v61)];
        v72 = v8 * v71;
        v73.f32[0] = v8 * *(float *)&_blt_float[BYTE1(v61)];
        if (v70 <= (float)(v8 * v71))
          v74 = v8 * v71;
        else
          v74 = v70;
        if (v73.f32[0] <= v74)
          v75 = v74;
        else
          v75 = v8 * *(float *)&_blt_float[BYTE1(v61)];
        v76 = v75 - v70;
        v77 = v75 - v72;
        v78 = (float32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v75));
        v79 = v8;
      }
      v73.f32[1] = v75;
      v82 = vsub_f32(v78, v73);
      if (!v7)
      {
        if (v79 < 1.0)
        {
          if (v79 > 0.0)
          {
            v84 = 1.0 - v79;
            v85 = bswap32(COERCE_UNSIGNED_INT(v77 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v6 + 4))) * v84)));
            *(_DWORD *)v6 = bswap32(COERCE_UNSIGNED_INT(v76 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v6)) * v84)));
            *(_DWORD *)(v6 + 4) = v85;
            *(int8x8_t *)(v6 + 8) = vrev32_s8((int8x8_t)vmla_n_f32(v82, (float32x2_t)vrev32_s8(*(int8x8_t *)(v6 + 8)), v84));
          }
        }
        else
        {
          v88.u64[1] = (unint64_t)v82;
          v88.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
          *(int8x16_t *)v6 = vrev32q_s8(v88);
        }
        goto LABEL_116;
      }
      if (v79 >= 1.0)
        break;
      if (v79 > 0.0)
      {
        v87 = bswap32(COERCE_UNSIGNED_INT(v79 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v79))));
        *(float32x2_t *)&v83.u32[2] = v82;
        v83.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
        v86 = (int8x16_t)vmlaq_n_f32(v83, (float32x4_t)vrev32q_s8(*(int8x16_t *)v6), 1.0 - v79);
        goto LABEL_115;
      }
LABEL_116:
      v56 += 2;
      v6 += 16;
      v7 = (unsigned int *)((char *)v7 + v17);
      if (!--result)
        goto LABEL_117;
    }
    v86.u64[1] = (unint64_t)v82;
    v86.i64[0] = __PAIR64__(LODWORD(v77), LODWORD(v76));
    v87 = bswap32(LODWORD(v79));
LABEL_115:
    *(int8x16_t *)v6 = vrev32q_s8(v86);
    *v7 = v87;
    goto LABEL_116;
  }
  v89 = (_QWORD *)(v10 + 16 * a3);
  do
  {
    v90 = &v14[(v13 >> v11) * v9];
    if (v141 != 1)
    {
      result = (unint64_t)v89;
      v112 = a5;
      if (a5 < 1)
        goto LABEL_177;
      while (1)
      {
        v113 = *(_QWORD *)result;
        result += 16;
        v114 = &v90[v113];
        if (v15 < &v90[v113])
          v114 = v15;
        if (v14 > v114)
          v114 = v14;
        v115 = *v114;
        v116 = v114[1];
        v117 = v114[2];
        v118 = *(float *)&_blt_float[v115];
        if (v8 >= 1.0)
        {
          v129 = *(float *)&_blt_float[v116];
          v122.i32[0] = _blt_float[v117];
          if (v118 <= v129)
            v130 = *(float *)&_blt_float[v116];
          else
            v130 = *(float *)&_blt_float[v115];
          if (v122.f32[0] <= v130)
            v124 = v130;
          else
            v124 = *(float *)&_blt_float[v117];
          v125 = v124 - v118;
          v126 = v124 - v129;
          v127 = (float32x2_t)__PAIR64__(HIDWORD(_D1), LODWORD(v124));
          v128 = 1.0;
        }
        else
        {
          v119 = v8 * v118;
          v120 = *(float *)&_blt_float[v116];
          v121 = v8 * v120;
          v122.f32[0] = v8 * *(float *)&_blt_float[v117];
          if (v119 <= (float)(v8 * v120))
            v123 = v8 * v120;
          else
            v123 = v119;
          if (v122.f32[0] <= v123)
            v124 = v123;
          else
            v124 = v8 * *(float *)&_blt_float[v117];
          v125 = v124 - v119;
          v126 = v124 - v121;
          v127 = (float32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v124));
          v128 = v8;
        }
        v122.f32[1] = v124;
        v131 = vsub_f32(v127, v122);
        if (!v7)
        {
          if (v128 < 1.0)
          {
            if (v128 > 0.0)
            {
              v133 = 1.0 - v128;
              v134 = bswap32(COERCE_UNSIGNED_INT(v126 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)(v6 + 4))) * v133)));
              *(_DWORD *)v6 = bswap32(COERCE_UNSIGNED_INT(v125 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)v6)) * v133)));
              *(_DWORD *)(v6 + 4) = v134;
              *(int8x8_t *)(v6 + 8) = vrev32_s8((int8x8_t)vmla_n_f32(v131, (float32x2_t)vrev32_s8(*(int8x8_t *)(v6 + 8)), v133));
            }
          }
          else
          {
            v137.u64[1] = (unint64_t)v131;
            v137.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
            *(int8x16_t *)v6 = vrev32q_s8(v137);
          }
          goto LABEL_176;
        }
        if (v128 >= 1.0)
          break;
        if (v128 > 0.0)
        {
          v136 = bswap32(COERCE_UNSIGNED_INT(v128 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v128))));
          *(float32x2_t *)&v132.u32[2] = v131;
          v132.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
          v135 = (int8x16_t)vmlaq_n_f32(v132, (float32x4_t)vrev32q_s8(*(int8x16_t *)v6), 1.0 - v128);
          goto LABEL_175;
        }
LABEL_176:
        v6 += 16;
        v7 = (unsigned int *)((char *)v7 + v17);
        if (!--v112)
          goto LABEL_177;
      }
      v135.u64[1] = (unint64_t)v131;
      v135.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v125));
      v136 = bswap32(LODWORD(v128));
LABEL_175:
      *(int8x16_t *)v6 = vrev32q_s8(v135);
      *v7 = v136;
      goto LABEL_176;
    }
    if (a5 >= 1)
    {
      result = (unint64_t)v89;
      v91 = a5;
      do
      {
        v92 = *(_QWORD *)result;
        result += 16;
        v93 = &v90[v92];
        if (v15 < &v90[v92])
          v93 = v15;
        if (v14 > v93)
          v93 = v14;
        v94 = *v93;
        v95 = v93[1];
        v96 = v93[2];
        v97 = *(float *)&_blt_float[v94];
        if (v8 >= 1.0)
        {
          v108 = *(float *)&_blt_float[v95];
          v109 = *(float *)&_blt_float[v96];
          if (v97 <= v108)
            v110 = *(float *)&_blt_float[v95];
          else
            v110 = *(float *)&_blt_float[v94];
          if (v109 <= v110)
            v111 = v110;
          else
            v111 = *(float *)&_blt_float[v96];
          v103 = v111 - v97;
          v104 = v111 - v108;
          v105 = v111 - v109;
          v107 = 1.0;
          v106 = 1.0 - v111;
        }
        else
        {
          v98 = v8 * v97;
          v99 = v8 * *(float *)&_blt_float[v95];
          v100 = v8 * *(float *)&_blt_float[v96];
          if (v98 <= v99)
            v101 = v8 * *(float *)&_blt_float[v95];
          else
            v101 = v98;
          if (v100 <= v101)
            v102 = v101;
          else
            v102 = v8 * *(float *)&_blt_float[v96];
          v103 = v102 - v98;
          v104 = v102 - v99;
          v105 = v102 - v100;
          v106 = v8 - v102;
          v107 = LODWORD(v8);
        }
        *(_DWORD *)v6 = bswap32(LODWORD(v103));
        *(_DWORD *)(v6 + 4) = bswap32(LODWORD(v104));
        *(_DWORD *)(v6 + 8) = bswap32(LODWORD(v105));
        *(_DWORD *)(v6 + 12) = bswap32(LODWORD(v106));
        if (v7)
          *v7 = bswap32(v107);
        v6 += 16;
        v7 = (unsigned int *)((char *)v7 + v17);
        --v91;
      }
      while (v91);
    }
LABEL_177:
    v6 += 16 * v140;
    v13 += v12;
    v7 += v142;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKF_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  char v6;
  unsigned int *v7;
  unsigned int *v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned __int8 v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned __int8 v62;
  float v63;
  int v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  float v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = -1;
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  v8 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v8)
    v119 = *((_QWORD *)a2 + 5) - a5;
  else
    v119 = 0;
  v9 = *((float *)a2 + 2);
  v10 = a2[1];
  v118 = *a2;
  v117 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v13 = *((_QWORD *)a2 + 9);
  v116 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 7) + v116 * a4;
  v15 = *(unsigned int **)(result + 32);
  v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  v17 = 4 * (v8 != 0);
  if (*(_QWORD *)(result + 176))
  {
    v115 = *((_QWORD *)a2 + 13);
    v113 = ~(-1 << v13);
    v114 = *((_QWORD *)a2 + 15);
    v112 = v13 - 4;
    v111 = v11 + 16 * a3 + 8;
    v18 = *((_QWORD *)a2 + 9);
    while (1)
    {
      if (((v114 - v14) | (v14 - v115)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v14 & (unint64_t)v113) >> v112) & 0xF;
        if ((unint64_t)(v19 - 7) >= 9)
          v20 = -v12;
        else
          v20 = v12;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = (char *)v15 + (v14 >> v13) * v12;
      if (v118 == 1)
      {
        if (a5 >= 1)
        {
          result = v21;
          v23 = (uint64_t *)v111;
          v24 = a5;
          do
          {
            v25 = *(v23 - 1);
            v26 = *v23;
            v27 = &v22[v25];
            if (v16 >= (unsigned int *)&v22[v25])
              v28 = (unsigned int *)&v22[v25];
            else
              v28 = v16;
            if (v15 > v28)
              v28 = v15;
            v29 = bswap32(*v28);
            if ((v26 & 0xF) != 0)
            {
              v30 = (unsigned int *)&v27[v26 >> 4];
              if (v16 < v30)
                v30 = v16;
              if (v15 > v30)
                v30 = v15;
              v31 = bswap32(*v30);
              if (v21)
              {
                v32 = (unsigned int *)&v27[v20];
                if (v16 >= v32)
                  v33 = v32;
                else
                  v33 = v16;
                if (v15 > v33)
                  v33 = v15;
                v34 = bswap32(*v33);
                v35 = (unsigned int *)((char *)v32 + (v26 >> 4));
                if (v16 < v35)
                  v35 = v16;
                if (v15 > v35)
                  v35 = v15;
                v36 = BLEND8_19499[v21];
                v29 = v29 - ((v36 & v29) >> v21) + ((v36 & v34) >> v21);
                v31 = v31 - ((v36 & v31) >> v21) + ((bswap32(*v35) & v36) >> v21);
              }
              v29 = v29
                  - ((BLEND8_19499[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_19499[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v21)
            {
              v37 = (unsigned int *)&v27[v20];
              if (v16 < (unsigned int *)&v27[v20])
                v37 = v16;
              if (v15 > v37)
                v37 = v15;
              v29 = v29 - ((BLEND8_19499[v21] & v29) >> v21) + ((bswap32(*v37) & BLEND8_19499[v21]) >> v21);
            }
            v38 = __ROL4__(v29, v10);
            v39 = v38 | v6;
            v40 = *(float *)&_blt_float[HIBYTE(v38)];
            v41 = BYTE2(v38);
            v42 = BYTE1(v38);
            if (v9 >= 1.0)
            {
              v43 = *(float *)&_blt_float[v41];
              v44 = *(float *)&_blt_float[v42];
              v45 = *(float *)&_blt_float[v39];
            }
            else
            {
              v40 = v9 * v40;
              v43 = v9 * *(float *)&_blt_float[v41];
              v44 = v9 * *(float *)&_blt_float[v42];
              v45 = v9 * *(float *)&_blt_float[v39];
            }
            if (v40 <= v43)
              v46 = v43;
            else
              v46 = v40;
            if (v44 > v46)
              v46 = v44;
            *v7 = bswap32(COERCE_UNSIGNED_INT(v46 - v40));
            v7[1] = bswap32(COERCE_UNSIGNED_INT(v46 - v43));
            v7[2] = bswap32(COERCE_UNSIGNED_INT(v46 - v44));
            v7[3] = bswap32(COERCE_UNSIGNED_INT(v45 - v46));
            if (v8)
              *v8 = bswap32(LODWORD(v45));
            v23 += 2;
            v7 += 4;
            v8 = (unsigned int *)((char *)v8 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_108;
      }
      if (a5 >= 1)
        break;
LABEL_108:
      v7 += 4 * v117;
      v14 += v116;
      v8 += v119;
      --a6;
      LOBYTE(v13) = v18;
      if (!a6)
        return result;
    }
    v47 = (uint64_t *)v111;
    result = a5;
    while (1)
    {
      v48 = *(v47 - 1);
      v49 = *v47;
      v50 = &v22[v48];
      if (v16 >= (unsigned int *)&v22[v48])
        v51 = (unsigned int *)&v22[v48];
      else
        v51 = v16;
      if (v15 > v51)
        v51 = v15;
      v52 = bswap32(*v51);
      if ((v49 & 0xF) != 0)
      {
        v53 = (unsigned int *)&v50[v49 >> 4];
        if (v16 < v53)
          v53 = v16;
        if (v15 > v53)
          v53 = v15;
        v54 = bswap32(*v53);
        if (v21)
        {
          v55 = (unsigned int *)&v50[v20];
          if (v16 >= v55)
            v56 = v55;
          else
            v56 = v16;
          if (v15 > v56)
            v56 = v15;
          v57 = bswap32(*v56);
          v58 = (unsigned int *)((char *)v55 + (v49 >> 4));
          if (v16 < v58)
            v58 = v16;
          if (v15 > v58)
            v58 = v15;
          v59 = BLEND8_19499[v21];
          v52 = v52 - ((v59 & v52) >> v21) + ((v59 & v57) >> v21);
          v54 = v54 - ((v59 & v54) >> v21) + ((bswap32(*v58) & v59) >> v21);
        }
        v52 = v52
            - ((BLEND8_19499[*v47 & 0xF] & v52) >> (*v47 & 0xF))
            + ((BLEND8_19499[*v47 & 0xF] & v54) >> (*v47 & 0xF));
      }
      else if (v21)
      {
        v60 = (unsigned int *)&v50[v20];
        if (v16 < (unsigned int *)&v50[v20])
          v60 = v16;
        if (v15 > v60)
          v60 = v15;
        v52 = v52 - ((BLEND8_19499[v21] & v52) >> v21) + ((bswap32(*v60) & BLEND8_19499[v21]) >> v21);
      }
      v61 = __ROL4__(v52, v10);
      v62 = v61 | v6;
      v63 = *(float *)&_blt_float[HIBYTE(v61)];
      v64 = BYTE2(v61);
      v65 = BYTE1(v61);
      if (v9 >= 1.0)
      {
        v66 = *(float *)&_blt_float[v64];
        v67 = *(float *)&_blt_float[v65];
        v68 = *(float *)&_blt_float[v62];
      }
      else
      {
        v63 = v9 * v63;
        v66 = v9 * *(float *)&_blt_float[v64];
        v67 = v9 * *(float *)&_blt_float[v65];
        v68 = v9 * *(float *)&_blt_float[v62];
      }
      if (v63 <= v66)
        v69 = v66;
      else
        v69 = v63;
      if (v67 <= v69)
        v70 = v69;
      else
        v70 = v67;
      v71 = v70 - v63;
      v72 = v70 - v66;
      v73 = v70 - v67;
      v74 = v68 - v70;
      if (v8)
      {
        if (v68 >= 1.0)
          goto LABEL_101;
        if (v68 > 0.0)
        {
          v71 = v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v68));
          v72 = v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v68));
          v73 = v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v68));
          v74 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v68));
          v68 = v68 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v68));
LABEL_101:
          *v7 = bswap32(LODWORD(v71));
          v7[1] = bswap32(LODWORD(v72));
          v7[2] = bswap32(LODWORD(v73));
          v7[3] = bswap32(LODWORD(v74));
          *v8 = bswap32(LODWORD(v68));
        }
      }
      else
      {
        if (v68 >= 1.0)
        {
          v76 = bswap32(LODWORD(v71));
          v77 = bswap32(LODWORD(v72));
          v78 = bswap32(LODWORD(v73));
          v79 = v68 - v70;
LABEL_106:
          *v7 = v76;
          v7[1] = v77;
          v7[2] = v78;
          v7[3] = bswap32(LODWORD(v79));
          goto LABEL_107;
        }
        if (v68 > 0.0)
        {
          v75 = 1.0 - v68;
          v76 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * v75)));
          v77 = bswap32(COERCE_UNSIGNED_INT(v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v75)));
          v78 = bswap32(COERCE_UNSIGNED_INT(v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v75)));
          v79 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v75);
          goto LABEL_106;
        }
      }
LABEL_107:
      v47 += 2;
      v7 += 4;
      v8 = (unsigned int *)((char *)v8 + v17);
      if (!--result)
        goto LABEL_108;
    }
  }
  v80 = v11 + 16 * a3;
  do
  {
    v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v118 != 1)
    {
      result = v80;
      v92 = a5;
      if (a5 < 1)
        goto LABEL_156;
      while (1)
      {
        v93 = *(_QWORD *)result;
        result += 16;
        v94 = (unsigned int *)&v81[v93];
        if (v16 < (unsigned int *)&v81[v93])
          v94 = v16;
        if (v15 > v94)
          v94 = v15;
        v95 = __ROL4__(bswap32(*v94), v10);
        v96 = *(float *)&_blt_float[HIBYTE(v95)];
        if (v9 >= 1.0)
        {
          v97 = *(float *)&_blt_float[BYTE2(v95)];
          v98 = *(float *)&_blt_float[BYTE1(v95)];
          v99 = *(float *)&_blt_float[(v95 | v6)];
        }
        else
        {
          v96 = v9 * v96;
          v97 = v9 * *(float *)&_blt_float[BYTE2(v95)];
          v98 = v9 * *(float *)&_blt_float[BYTE1(v95)];
          v99 = v9 * *(float *)&_blt_float[(v95 | v6)];
        }
        if (v96 <= v97)
          v100 = v97;
        else
          v100 = v96;
        if (v98 <= v100)
          v101 = v100;
        else
          v101 = v98;
        v102 = v101 - v96;
        v103 = v101 - v97;
        v104 = v101 - v98;
        v105 = v99 - v101;
        if (v8)
        {
          if (v99 >= 1.0)
            goto LABEL_149;
          if (v99 > 0.0)
          {
            v102 = v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v99));
            v103 = v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v99));
            v104 = v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v99));
            v105 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v99));
            v99 = v99 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v99));
LABEL_149:
            *v7 = bswap32(LODWORD(v102));
            v7[1] = bswap32(LODWORD(v103));
            v7[2] = bswap32(LODWORD(v104));
            v7[3] = bswap32(LODWORD(v105));
            *v8 = bswap32(LODWORD(v99));
          }
        }
        else
        {
          if (v99 >= 1.0)
          {
            v107 = bswap32(LODWORD(v102));
            v108 = bswap32(LODWORD(v103));
            v109 = bswap32(LODWORD(v104));
            v110 = v99 - v101;
LABEL_154:
            *v7 = v107;
            v7[1] = v108;
            v7[2] = v109;
            v7[3] = bswap32(LODWORD(v110));
            goto LABEL_155;
          }
          if (v99 > 0.0)
          {
            v106 = 1.0 - v99;
            v107 = bswap32(COERCE_UNSIGNED_INT(v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * v106)));
            v108 = bswap32(COERCE_UNSIGNED_INT(v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v106)));
            v109 = bswap32(COERCE_UNSIGNED_INT(v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v106)));
            v110 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v106);
            goto LABEL_154;
          }
        }
LABEL_155:
        v7 += 4;
        v8 = (unsigned int *)((char *)v8 + v17);
        if (!--v92)
          goto LABEL_156;
      }
    }
    if (a5 >= 1)
    {
      result = v80;
      v82 = a5;
      do
      {
        v83 = *(_QWORD *)result;
        result += 16;
        v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83])
          v84 = v16;
        if (v15 > v84)
          v84 = v15;
        v85 = __ROL4__(bswap32(*v84), v10);
        v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          v87 = *(float *)&_blt_float[BYTE2(v85)];
          v88 = *(float *)&_blt_float[BYTE1(v85)];
          v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          v86 = v9 * v86;
          v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87)
          v90 = v87;
        else
          v90 = v86;
        if (v88 <= v90)
          v91 = v90;
        else
          v91 = v88;
        *v7 = bswap32(COERCE_UNSIGNED_INT(v91 - v86));
        v7[1] = bswap32(COERCE_UNSIGNED_INT(v91 - v87));
        v7[2] = bswap32(COERCE_UNSIGNED_INT(v91 - v88));
        v7[3] = bswap32(COERCE_UNSIGNED_INT(v89 - v91));
        if (v8)
          *v8 = bswap32(LODWORD(v89));
        v7 += 4;
        v8 = (unsigned int *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_156:
    v7 += 4 * v117;
    v14 += v116;
    v8 += v119;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t CMYKF_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  char v6;
  unsigned int *v7;
  unsigned int *v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned __int8 v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned __int8 v62;
  float v63;
  int v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  float v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;

  if (*(_QWORD *)(result + 40))
    v6 = 0;
  else
    v6 = -1;
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  v8 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v8)
    v119 = *((_QWORD *)a2 + 5) - a5;
  else
    v119 = 0;
  v9 = *((float *)a2 + 2);
  v10 = a2[1];
  v118 = *a2;
  v117 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 17);
  v11 = *((_QWORD *)a2 + 18);
  v13 = *((_QWORD *)a2 + 9);
  v116 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 7) + v116 * a4;
  v15 = *(unsigned int **)(result + 32);
  v16 = (unsigned int *)((char *)v15
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  v17 = 4 * (v8 != 0);
  if (*(_QWORD *)(result + 176))
  {
    v115 = *((_QWORD *)a2 + 13);
    v113 = ~(-1 << v13);
    v114 = *((_QWORD *)a2 + 15);
    v112 = v13 - 4;
    v111 = v11 + 16 * a3 + 8;
    v18 = *((_QWORD *)a2 + 9);
    while (1)
    {
      if (((v114 - v14) | (v14 - v115)) < 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v19 = ((v14 & (unint64_t)v113) >> v112) & 0xF;
        if ((unint64_t)(v19 - 7) >= 9)
          v20 = -v12;
        else
          v20 = v12;
        v21 = weights_19497[v19] & 0xF;
      }
      v22 = (char *)v15 + (v14 >> v13) * v12;
      if (v118 == 1)
      {
        if (a5 >= 1)
        {
          result = v21;
          v23 = (uint64_t *)v111;
          v24 = a5;
          do
          {
            v25 = *(v23 - 1);
            v26 = *v23;
            v27 = &v22[v25];
            if (v16 >= (unsigned int *)&v22[v25])
              v28 = (unsigned int *)&v22[v25];
            else
              v28 = v16;
            if (v15 > v28)
              v28 = v15;
            v29 = *v28;
            if ((v26 & 0xF) != 0)
            {
              v30 = (unsigned int *)&v27[v26 >> 4];
              if (v16 < v30)
                v30 = v16;
              if (v15 > v30)
                v30 = v15;
              v31 = *v30;
              if (v21)
              {
                v32 = (unsigned int *)&v27[v20];
                if (v16 >= v32)
                  v33 = v32;
                else
                  v33 = v16;
                if (v15 > v33)
                  v33 = v15;
                v34 = *v33;
                v35 = (unsigned int *)((char *)v32 + (v26 >> 4));
                if (v16 < v35)
                  v35 = v16;
                if (v15 > v35)
                  v35 = v15;
                v36 = BLEND8_19499[v21];
                v29 = v29 - ((v36 & v29) >> v21) + ((v36 & v34) >> v21);
                v31 = v31 - ((v36 & v31) >> v21) + ((v36 & *v35) >> v21);
              }
              v29 = v29
                  - ((BLEND8_19499[*v23 & 0xF] & v29) >> (*v23 & 0xF))
                  + ((BLEND8_19499[*v23 & 0xF] & v31) >> (*v23 & 0xF));
            }
            else if (v21)
            {
              v37 = (unsigned int *)&v27[v20];
              if (v16 < (unsigned int *)&v27[v20])
                v37 = v16;
              if (v15 > v37)
                v37 = v15;
              v29 = v29 - ((BLEND8_19499[v21] & v29) >> v21) + ((BLEND8_19499[v21] & *v37) >> v21);
            }
            v38 = __ROL4__(v29, v10);
            v39 = v38 | v6;
            v40 = *(float *)&_blt_float[HIBYTE(v38)];
            v41 = BYTE2(v38);
            v42 = BYTE1(v38);
            if (v9 >= 1.0)
            {
              v43 = *(float *)&_blt_float[v41];
              v44 = *(float *)&_blt_float[v42];
              v45 = *(float *)&_blt_float[v39];
            }
            else
            {
              v40 = v9 * v40;
              v43 = v9 * *(float *)&_blt_float[v41];
              v44 = v9 * *(float *)&_blt_float[v42];
              v45 = v9 * *(float *)&_blt_float[v39];
            }
            if (v40 <= v43)
              v46 = v43;
            else
              v46 = v40;
            if (v44 > v46)
              v46 = v44;
            *v7 = bswap32(COERCE_UNSIGNED_INT(v46 - v40));
            v7[1] = bswap32(COERCE_UNSIGNED_INT(v46 - v43));
            v7[2] = bswap32(COERCE_UNSIGNED_INT(v46 - v44));
            v7[3] = bswap32(COERCE_UNSIGNED_INT(v45 - v46));
            if (v8)
              *v8 = bswap32(LODWORD(v45));
            v23 += 2;
            v7 += 4;
            v8 = (unsigned int *)((char *)v8 + v17);
            --v24;
          }
          while (v24);
        }
        goto LABEL_108;
      }
      if (a5 >= 1)
        break;
LABEL_108:
      v7 += 4 * v117;
      v14 += v116;
      v8 += v119;
      --a6;
      LOBYTE(v13) = v18;
      if (!a6)
        return result;
    }
    v47 = (uint64_t *)v111;
    result = a5;
    while (1)
    {
      v48 = *(v47 - 1);
      v49 = *v47;
      v50 = &v22[v48];
      if (v16 >= (unsigned int *)&v22[v48])
        v51 = (unsigned int *)&v22[v48];
      else
        v51 = v16;
      if (v15 > v51)
        v51 = v15;
      v52 = *v51;
      if ((v49 & 0xF) != 0)
      {
        v53 = (unsigned int *)&v50[v49 >> 4];
        if (v16 < v53)
          v53 = v16;
        if (v15 > v53)
          v53 = v15;
        v54 = *v53;
        if (v21)
        {
          v55 = (unsigned int *)&v50[v20];
          if (v16 >= v55)
            v56 = v55;
          else
            v56 = v16;
          if (v15 > v56)
            v56 = v15;
          v57 = *v56;
          v58 = (unsigned int *)((char *)v55 + (v49 >> 4));
          if (v16 < v58)
            v58 = v16;
          if (v15 > v58)
            v58 = v15;
          v59 = BLEND8_19499[v21];
          v52 = v52 - ((v59 & v52) >> v21) + ((v59 & v57) >> v21);
          v54 = v54 - ((v59 & v54) >> v21) + ((v59 & *v58) >> v21);
        }
        v52 = v52
            - ((BLEND8_19499[*v47 & 0xF] & v52) >> (*v47 & 0xF))
            + ((BLEND8_19499[*v47 & 0xF] & v54) >> (*v47 & 0xF));
      }
      else if (v21)
      {
        v60 = (unsigned int *)&v50[v20];
        if (v16 < (unsigned int *)&v50[v20])
          v60 = v16;
        if (v15 > v60)
          v60 = v15;
        v52 = v52 - ((BLEND8_19499[v21] & v52) >> v21) + ((BLEND8_19499[v21] & *v60) >> v21);
      }
      v61 = __ROL4__(v52, v10);
      v62 = v61 | v6;
      v63 = *(float *)&_blt_float[HIBYTE(v61)];
      v64 = BYTE2(v61);
      v65 = BYTE1(v61);
      if (v9 >= 1.0)
      {
        v66 = *(float *)&_blt_float[v64];
        v67 = *(float *)&_blt_float[v65];
        v68 = *(float *)&_blt_float[v62];
      }
      else
      {
        v63 = v9 * v63;
        v66 = v9 * *(float *)&_blt_float[v64];
        v67 = v9 * *(float *)&_blt_float[v65];
        v68 = v9 * *(float *)&_blt_float[v62];
      }
      if (v63 <= v66)
        v69 = v66;
      else
        v69 = v63;
      if (v67 <= v69)
        v70 = v69;
      else
        v70 = v67;
      v71 = v70 - v63;
      v72 = v70 - v66;
      v73 = v70 - v67;
      v74 = v68 - v70;
      if (v8)
      {
        if (v68 >= 1.0)
          goto LABEL_101;
        if (v68 > 0.0)
        {
          v71 = v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v68));
          v72 = v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v68));
          v73 = v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v68));
          v74 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v68));
          v68 = v68 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v68));
LABEL_101:
          *v7 = bswap32(LODWORD(v71));
          v7[1] = bswap32(LODWORD(v72));
          v7[2] = bswap32(LODWORD(v73));
          v7[3] = bswap32(LODWORD(v74));
          *v8 = bswap32(LODWORD(v68));
        }
      }
      else
      {
        if (v68 >= 1.0)
        {
          v76 = bswap32(LODWORD(v71));
          v77 = bswap32(LODWORD(v72));
          v78 = bswap32(LODWORD(v73));
          v79 = v68 - v70;
LABEL_106:
          *v7 = v76;
          v7[1] = v77;
          v7[2] = v78;
          v7[3] = bswap32(LODWORD(v79));
          goto LABEL_107;
        }
        if (v68 > 0.0)
        {
          v75 = 1.0 - v68;
          v76 = bswap32(COERCE_UNSIGNED_INT(v71 + (float)(COERCE_FLOAT(bswap32(*v7)) * v75)));
          v77 = bswap32(COERCE_UNSIGNED_INT(v72 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v75)));
          v78 = bswap32(COERCE_UNSIGNED_INT(v73 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v75)));
          v79 = v74 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v75);
          goto LABEL_106;
        }
      }
LABEL_107:
      v47 += 2;
      v7 += 4;
      v8 = (unsigned int *)((char *)v8 + v17);
      if (!--result)
        goto LABEL_108;
    }
  }
  v80 = v11 + 16 * a3;
  do
  {
    v81 = (char *)v15 + (v14 >> v13) * v12;
    if (v118 != 1)
    {
      result = v80;
      v92 = a5;
      if (a5 < 1)
        goto LABEL_156;
      while (1)
      {
        v93 = *(_QWORD *)result;
        result += 16;
        v94 = (unsigned int *)&v81[v93];
        if (v16 < (unsigned int *)&v81[v93])
          v94 = v16;
        if (v15 > v94)
          v94 = v15;
        v95 = __ROL4__(*v94, v10);
        v96 = *(float *)&_blt_float[HIBYTE(v95)];
        if (v9 >= 1.0)
        {
          v97 = *(float *)&_blt_float[BYTE2(v95)];
          v98 = *(float *)&_blt_float[BYTE1(v95)];
          v99 = *(float *)&_blt_float[(v95 | v6)];
        }
        else
        {
          v96 = v9 * v96;
          v97 = v9 * *(float *)&_blt_float[BYTE2(v95)];
          v98 = v9 * *(float *)&_blt_float[BYTE1(v95)];
          v99 = v9 * *(float *)&_blt_float[(v95 | v6)];
        }
        if (v96 <= v97)
          v100 = v97;
        else
          v100 = v96;
        if (v98 <= v100)
          v101 = v100;
        else
          v101 = v98;
        v102 = v101 - v96;
        v103 = v101 - v97;
        v104 = v101 - v98;
        v105 = v99 - v101;
        if (v8)
        {
          if (v99 >= 1.0)
            goto LABEL_149;
          if (v99 > 0.0)
          {
            v102 = v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * (float)(1.0 - v99));
            v103 = v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * (float)(1.0 - v99));
            v104 = v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * (float)(1.0 - v99));
            v105 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * (float)(1.0 - v99));
            v99 = v99 + (float)(COERCE_FLOAT(bswap32(*v8)) * (float)(1.0 - v99));
LABEL_149:
            *v7 = bswap32(LODWORD(v102));
            v7[1] = bswap32(LODWORD(v103));
            v7[2] = bswap32(LODWORD(v104));
            v7[3] = bswap32(LODWORD(v105));
            *v8 = bswap32(LODWORD(v99));
          }
        }
        else
        {
          if (v99 >= 1.0)
          {
            v107 = bswap32(LODWORD(v102));
            v108 = bswap32(LODWORD(v103));
            v109 = bswap32(LODWORD(v104));
            v110 = v99 - v101;
LABEL_154:
            *v7 = v107;
            v7[1] = v108;
            v7[2] = v109;
            v7[3] = bswap32(LODWORD(v110));
            goto LABEL_155;
          }
          if (v99 > 0.0)
          {
            v106 = 1.0 - v99;
            v107 = bswap32(COERCE_UNSIGNED_INT(v102 + (float)(COERCE_FLOAT(bswap32(*v7)) * v106)));
            v108 = bswap32(COERCE_UNSIGNED_INT(v103 + (float)(COERCE_FLOAT(bswap32(v7[1])) * v106)));
            v109 = bswap32(COERCE_UNSIGNED_INT(v104 + (float)(COERCE_FLOAT(bswap32(v7[2])) * v106)));
            v110 = v105 + (float)(COERCE_FLOAT(bswap32(v7[3])) * v106);
            goto LABEL_154;
          }
        }
LABEL_155:
        v7 += 4;
        v8 = (unsigned int *)((char *)v8 + v17);
        if (!--v92)
          goto LABEL_156;
      }
    }
    if (a5 >= 1)
    {
      result = v80;
      v82 = a5;
      do
      {
        v83 = *(_QWORD *)result;
        result += 16;
        v84 = (unsigned int *)&v81[v83];
        if (v16 < (unsigned int *)&v81[v83])
          v84 = v16;
        if (v15 > v84)
          v84 = v15;
        v85 = __ROL4__(*v84, v10);
        v86 = *(float *)&_blt_float[HIBYTE(v85)];
        if (v9 >= 1.0)
        {
          v87 = *(float *)&_blt_float[BYTE2(v85)];
          v88 = *(float *)&_blt_float[BYTE1(v85)];
          v89 = *(float *)&_blt_float[(v85 | v6)];
        }
        else
        {
          v86 = v9 * v86;
          v87 = v9 * *(float *)&_blt_float[BYTE2(v85)];
          v88 = v9 * *(float *)&_blt_float[BYTE1(v85)];
          v89 = v9 * *(float *)&_blt_float[(v85 | v6)];
        }
        if (v86 <= v87)
          v90 = v87;
        else
          v90 = v86;
        if (v88 <= v90)
          v91 = v90;
        else
          v91 = v88;
        *v7 = bswap32(COERCE_UNSIGNED_INT(v91 - v86));
        v7[1] = bswap32(COERCE_UNSIGNED_INT(v91 - v87));
        v7[2] = bswap32(COERCE_UNSIGNED_INT(v91 - v88));
        v7[3] = bswap32(COERCE_UNSIGNED_INT(v89 - v91));
        if (v8)
          *v8 = bswap32(LODWORD(v89));
        v7 += 4;
        v8 = (unsigned int *)((char *)v8 + v17);
        --v82;
      }
      while (v82);
    }
LABEL_156:
    v7 += 4 * v117;
    v14 += v116;
    v8 += v119;
    --a6;
  }
  while (a6);
  return result;
}

void CMYKF_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float32x4_t *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  _BYTE *v64;
  int v65;
  float32x4_t *v66;
  int v67;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  float *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  int v84;
  unsigned __int8 *v85;
  unsigned int v86;
  float v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 v90;
  int8x16_t *v91;
  unsigned int *v92;
  unsigned __int8 *v93;
  unsigned int *v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int8x16_t v99;
  float v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  uint64_t v103;
  _BYTE *v104;
  unsigned int *v105;
  int8x16_t *v106;
  unsigned int v107;
  float v108;
  unsigned int v109;
  int8x16_t v110;
  float v111;
  float v112;
  float *f32;
  int v114;
  unsigned int v115;
  float v116;
  unsigned int v117;
  int8x16_t v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float *v123;
  int v124;
  unsigned int v125;
  float v126;
  unsigned int v127;
  int8x16_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float *v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  float v137;
  float v138;
  float v139;
  float *v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  float v144;
  float v145;
  float v146;
  unsigned int v147;
  int8x16_t v148;
  float v149;
  uint64_t v150;
  float *v151;
  int v152;
  unsigned int v153;
  int8x16_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float32x4_t v160;
  unsigned int v161;
  int8x16_t v162;
  float32x4_t v163;
  uint64_t v164;
  float *v165;
  int v166;
  unsigned int v167;
  float v168;
  int8x16_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float32x4_t v175;
  unsigned int v176;
  int8x16_t v177;
  float32x4_t v178;
  float *v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float *v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  float v191;
  float v192;
  float v193;
  uint64_t v194;
  float *v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  float v199;
  float32x4_t v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  float v204;
  uint64_t v205;
  float *v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  float v210;
  float v211;
  float *v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  float v216;
  int8x16_t v217;
  float32x4_t v218;
  float32x4_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  unsigned int v224;
  float *v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  float v229;
  float32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float32x4_t v237;
  unsigned int v238;
  float *v239;
  int v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unsigned int v243;
  float v244;
  int8x16_t v245;
  float v246;
  int8x16_t v247;
  float *v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  float v252;
  int8x16_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  float32x4_t v261;
  unsigned int v262;
  float *v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  float v267;
  int8x16_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  float32x4_t v276;
  unsigned int v277;
  float *v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  float v282;
  int8x16_t v283;
  float v284;
  int8x16_t v285;
  float *v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  float v290;
  int8x16_t v291;
  float v292;
  int8x16_t v293;
  float *v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  float v298;
  int8x16_t v299;
  int8x16_t v300;
  float *v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  float v305;
  int8x16_t v306;
  float v307;
  int8x16_t v308;
  float *v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  float v313;
  float32x4_t v314;
  int8x16_t v315;
  int8x16_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  int8x16_t v323;
  unsigned int v324;
  float *v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  float v329;
  float32x4_t v330;
  int8x16_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float *v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  float v341;
  int8x16_t v342;
  float v343;
  int8x16_t v344;
  float *v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  float v349;
  int8x16_t v350;
  float v351;
  int8x16_t v352;
  float *v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  float v357;
  float v358;
  int8x16_t v359;
  float *v360;
  int v361;
  int v362;
  unsigned int v363;
  unsigned int v364;
  float v365;
  int8x16_t v366;
  float v367;
  int8x16_t v368;
  unsigned __int8 *v369;
  int8x16_t *v370;
  int v371;
  unsigned int v372;
  int8x16_t v373;
  unsigned __int8 v374;
  unsigned __int8 *v375;
  int v376;
  unsigned int v377;
  float v378;
  float v379;
  float32x4_t v380;
  float v381;
  float v382;
  int8x16_t v383;
  unsigned __int8 v384;
  int v385;
  unsigned __int8 *v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  int8x16_t v390;
  float v391;
  unsigned __int8 v392;
  unsigned __int8 *v393;
  int v394;
  float v395;
  unsigned int v396;
  int8x16_t v397;
  float v398;
  float v399;
  unsigned __int8 v400;
  int8x16_t v401;
  unsigned __int8 v402;
  float v403;
  float v404;
  float32x4_t v405;
  float v406;
  float v407;
  int8x16_t v408;
  unsigned __int8 v409;
  uint64_t v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int8x16_t v415;
  uint64_t v416;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  __n128 v428;
  uint64_t v429;
  int *v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int8x16_t v435;
  float v436;
  uint64_t v437;

  v424 = a3;
  v437 = *MEMORY[0x1E0C80C00];
  v422 = *(unsigned int *)(a1 + 4);
  v421 = (int)v422;
  v4 = ((int)v422 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    v6 = *(int *)(a1 + 28);
    v7 = *(_QWORD *)(a1 + 48);
    v434 = *(_QWORD *)(a1 + 40);
    a4.n128_u32[0] = *(_DWORD *)(a2 + 184);
    v428 = a4;
    v8 = *(int **)(a1 + 136);
    v9 = *(_QWORD *)(a2 + 104);
    v425 = *(_QWORD *)(a2 + 96);
    v11 = *(int *)(a1 + 12);
    v10 = *(int *)(a1 + 16);
    v431 = *(_DWORD *)(a1 + 8);
    v423 = (_QWORD *)a2;
    v12 = *(int *)(a2 + 16);
    v13 = (v12 + 22) * v4;
    if (v13 > 65439)
    {
      v15 = (char *)malloc_type_calloc(1uLL, v13 + 96, 0x5AD56BF5uLL);
      v17 = v15;
      v18 = v423;
      if (!v15)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v15 = (char *)&v416 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      v17 = 0;
      v18 = v423;
    }
    v418 = v17;
    v432 = v9;
    v19 = v6 >> 4;
    v20 = (unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    v21 = v20 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    if ((_DWORD)v12)
      v22 = 20 * v4;
    else
      v22 = 0;
    v23 = v21 + v22;
    v18[18] = v20;
    v18[19] = v21 + v22;
    v18[20] = v21;
    if (v7)
    {
      v24 = (unint64_t)*(int *)(a1 + 32) >> 2;
      v25 = (unsigned int *)(v7 + 4 * (v11 + v24 * v10));
      v26 = v421;
      v429 = v24 - v421;
      v27 = 1;
    }
    else
    {
      v25 = 0;
      v429 = 0;
      v27 = 0;
      v26 = v421;
    }
    v28 = (int8x16_t *)(v434 + 16 * (v11 + v19 * v10));
    v427 = v19 - v26;
    v29 = *(int *)(a1 + 104);
    v30 = *(_DWORD *)(a1 + 108);
    v31 = *(unsigned __int8 *)(a1 + 2);
    if (v31 == 6 || v31 == 1)
    {
      v32 = v424;
      v33 = v423;
      v34 = v425;
      v35 = v432;
      if (v8)
      {
        v417 = v19;
        LODWORD(v434) = 0;
        v36 = *(int *)(a1 + 124);
        v37 = (unsigned __int8 *)v8 + v29 + (int)v36 * (uint64_t)v30;
        v8 = 0;
        v26 = v421;
        v426 = v36 - v421;
        v38 = v422;
        goto LABEL_21;
      }
      goto LABEL_548;
    }
    v417 = v19;
    if (v8)
    {
      v433 = v27;
      shape_enum_clip_alloc(v27, v16, v8, 1, 1, 1, v29, v30, v422, v431);
      if (v39)
      {
        v8 = v39;
        LODWORD(v434) = 0;
        v40 = (int)((v12 * v4 + 15) & 0xFFFFFFF0);
        if (!(_DWORD)v12)
          v40 = 20 * v4;
        v41 = v421;
        v426 = -v421;
        v37 = (unsigned __int8 *)(v23 + v40 + 16);
        v32 = v424;
        v38 = v422;
        v33 = v423;
        v35 = v432;
        goto LABEL_551;
      }
LABEL_548:
      if (v418)
        free(v418);
      return;
    }
    v426 = 0;
    v37 = 0;
    LODWORD(v434) = 0;
    v32 = v424;
    v38 = v422;
    v33 = v423;
    v34 = v425;
    v35 = v432;
LABEL_21:
    v420 = (v38 - 1) + 1;
    v419 = -v26;
    v42 = 4 * v27;
    v43 = v8;
    v433 = v27;
LABEL_22:
    v430 = v43;
    v44 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v33;
    v432 = v35;
    v44(v33, v34, v35, v38);
    v60 = (float32x4_t *)v33[20];
    v61 = (unsigned __int8 *)v33[18];
    v62 = *((_DWORD *)v33 + 2);
    if (v62 == *((_DWORD *)v33 + 3))
    {
      v53 = (float32x4_t)v428;
      if (v428.n128_f32[0] >= 1.0)
      {
        v65 = v433;
      }
      else
      {
        v63 = v38;
        v64 = (_BYTE *)v33[18];
        v65 = v433;
        do
        {
          if (*v64)
          {
            v52 = vmulq_n_f32(*v60, v53.f32[0]);
            *v60 = v52;
            v60[1].f32[0] = v53.f32[0] * v60[1].f32[0];
          }
          ++v64;
          v60 = (float32x4_t *)((char *)v60 + 20);
          --v63;
        }
        while (v63);
        v60 = (float32x4_t *)((char *)v60 + 20 * v419);
        v61 += v420 + v419;
      }
    }
    else
    {
      v66 = (float32x4_t *)v33[19];
      v67 = HIWORD(v62) & 0x3F;
      v54.i64[0] = v428.n128_u64[0];
      if (v67 == 16)
      {
        v65 = v433;
        v72 = 0;
        v73 = &v66->u16[4];
        v74 = &v60->f32[2];
        if (v428.n128_f32[0] >= 1.0)
        {
          do
          {
            if (v61[v72])
            {
              v77 = *v73;
              v78 = *((_QWORD *)v73 - 1);
              *(v74 - 2) = *(float *)&_blt_float[v78 + 256] + *(float *)&_blt_float[BYTE1(v78) + 512];
              *(v74 - 1) = *(float *)&_blt_float[BYTE2(v78) + 256] + *(float *)&_blt_float[BYTE3(v78) | 0x200];
              *v74 = *(float *)&_blt_float[BYTE4(v78) + 256] + *(float *)&_blt_float[BYTE5(v78) + 512];
              v74[1] = *(float *)&_blt_float[BYTE6(v78) + 256] + *(float *)&_blt_float[HIBYTE(v78) + 512];
              v74[2] = *(float *)&_blt_float[v77 + 256]
                     + *(float *)((char *)&_blt_float[512] + ((v77 >> 6) & 0x3FC));
            }
            v73 += 8;
            ++v72;
            v74 += 5;
          }
          while ((_DWORD)v38 != (_DWORD)v72);
        }
        else
        {
          do
          {
            if (v61[v72])
            {
              v75 = *v73;
              v76 = *((_QWORD *)v73 - 1);
              *(v74 - 2) = v54.f32[0]
                         * (float)(*(float *)&_blt_float[v76 + 256]
                                 + *(float *)&_blt_float[BYTE1(v76) + 512]);
              *(v74 - 1) = v54.f32[0]
                         * (float)(*(float *)&_blt_float[BYTE2(v76) + 256] + *(float *)&_blt_float[BYTE3(v76) | 0x200]);
              *v74 = v54.f32[0]
                   * (float)(*(float *)&_blt_float[BYTE4(v76) + 256] + *(float *)&_blt_float[BYTE5(v76) + 512]);
              v74[1] = v54.f32[0]
                     * (float)(*(float *)&_blt_float[BYTE6(v76) + 256] + *(float *)&_blt_float[HIBYTE(v76) + 512]);
              v74[2] = v54.f32[0]
                     * (float)(*(float *)&_blt_float[v75 + 256]
                             + *(float *)((char *)&_blt_float[512] + ((v75 >> 6) & 0x3FC)));
            }
            v73 += 8;
            ++v72;
            v74 += 5;
          }
          while ((_DWORD)v38 != (_DWORD)v72);
        }
      }
      else
      {
        _ZF = v67 == 32;
        v65 = v433;
        v69 = 0;
        if (_ZF)
        {
          v70 = v66 + 1;
          v71 = v60 + 1;
          if (v428.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v61[v69])
              {
                v52 = v70[-1];
                v71[-1] = v52;
                v71->i32[0] = v70->i32[0];
              }
              v70 = (float32x4_t *)((char *)v70 + 20);
              ++v69;
              v71 = (float32x4_t *)((char *)v71 + 20);
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
          else
          {
            do
            {
              if (v61[v69])
              {
                v52 = vmulq_n_f32(v70[-1], v54.f32[0]);
                v71[-1] = v52;
                v71->f32[0] = v54.f32[0] * v70->f32[0];
              }
              v70 = (float32x4_t *)((char *)v70 + 20);
              ++v69;
              v71 = (float32x4_t *)((char *)v71 + 20);
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
        }
        else
        {
          v79 = &v60->f32[2];
          if (v428.n128_f32[0] >= 1.0)
          {
            do
            {
              if (v61[v69])
              {
                v81 = v66->i64[v69];
                *(v79 - 2) = *(float *)&_blt_float[BYTE3(v81)];
                *(v79 - 1) = *(float *)&_blt_float[BYTE2(v81)];
                *v79 = *(float *)&_blt_float[BYTE1(v81)];
                v79[1] = *(float *)&_blt_float[v81];
                v79[2] = *(float *)&_blt_float[BYTE4(v81)];
              }
              ++v69;
              v79 += 5;
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
          else
          {
            do
            {
              if (v61[v69])
              {
                v80 = v66->i64[v69];
                *(v79 - 2) = v54.f32[0] * *(float *)&_blt_float[BYTE3(v80)];
                *(v79 - 1) = v54.f32[0] * *(float *)&_blt_float[BYTE2(v80)];
                *v79 = v54.f32[0] * *(float *)&_blt_float[BYTE1(v80)];
                v79[1] = v54.f32[0] * *(float *)&_blt_float[v80];
                v79[2] = v54.f32[0] * *(float *)&_blt_float[BYTE4(v80)];
              }
              ++v69;
              v79 += 5;
            }
            while ((_DWORD)v38 != (_DWORD)v69);
          }
        }
      }
    }
    v82 = &xmmword_185005000;
    switch(v32)
    {
      case 0:
        v83 = v37 != 0;
        v84 = v38;
        v85 = v37;
        if (v65)
        {
          do
          {
            v86 = *v61;
            if (*v61)
            {
              if (v37)
                v86 = (*v85 * v86 + ((*v85 * v86) >> 8) + 1) >> 8;
              if ((_BYTE)v86)
              {
                if (v86 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                  *v25 = 0;
                }
                else
                {
                  v87 = (float)((float)v86 * -0.0039216) + 1.0;
                  v88 = bswap32(COERCE_UNSIGNED_INT(v87 * COERCE_FLOAT(bswap32(*v25))));
                  *v28 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v87));
                  *v25 = v88;
                }
              }
            }
            ++v61;
            v85 += v83;
            ++v28;
            ++v25;
            --v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            v89 = *v61;
            if (*v61)
            {
              if (v37)
                v89 = (*v85 * v89 + ((*v85 * v89) >> 8) + 1) >> 8;
              if ((_BYTE)v89)
              {
                if (v89 == 255)
                {
                  v28->i64[0] = 0;
                  v28->i64[1] = 0;
                }
                else
                {
                  *v28 = vrev32q_s8((int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), (float)((float)v89 * -0.0039216) + 1.0));
                }
              }
            }
            ++v61;
            v85 += v83;
            ++v28;
            --v84;
          }
          while (v84);
        }
        goto LABEL_398;
      case 1:
        v90 = *v61;
        if (v65)
        {
          v91 = v28 - 1;
          v92 = (unsigned int *)&v60[1];
          v93 = v61 + 1;
          v94 = v25 - 1;
          v95 = v38;
          if (v37)
          {
            v96 = v432;
            do
            {
              if (v90)
              {
                v97 = ((unsigned __int16)(*v37 * v90 + ((*v37 * v90) >> 8) + 1) >> 8);
                if (v97)
                {
                  if (v97 == 255)
                  {
                    v98 = bswap32(*v92);
                    v99 = *((int8x16_t *)v92 - 1);
                  }
                  else
                  {
                    v100 = (float)v97 * 0.0039216;
                    v98 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v100) * COERCE_FLOAT(bswap32(v94[1])))+ (float)(*(float *)v92 * v100)));
                    v99 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v91[1]), 1.0 - v100), *((float32x4_t *)v92 - 1), v100);
                  }
                  v91[1] = vrev32q_s8(v99);
                  v94[1] = v98;
                }
              }
              v101 = *v93++;
              v90 = v101;
              ++v37;
              ++v91;
              v92 += 5;
              ++v94;
              --v95;
            }
            while (v95);
            v37 += v426;
          }
          else
          {
            v96 = v432;
            do
            {
              if (v90)
              {
                if (v90 == 255)
                {
                  v389 = bswap32(*v92);
                  v390 = *((int8x16_t *)v92 - 1);
                }
                else
                {
                  v391 = (float)v90 * 0.0039216;
                  v389 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v391) * COERCE_FLOAT(bswap32(v94[1])))+ (float)(*(float *)v92 * v391)));
                  v390 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v91[1]), 1.0 - v391), *((float32x4_t *)v92 - 1), v391);
                }
                v91[1] = vrev32q_s8(v390);
                v94[1] = v389;
              }
              v392 = *v93++;
              v90 = v392;
              ++v91;
              v92 += 5;
              ++v94;
              --v95;
            }
            while (v95);
            v37 = 0;
          }
          v28 = &v91[v427 + 1];
          v25 = &v94[v429 + 1];
          goto LABEL_465;
        }
        v369 = v61 + 1;
        v370 = v28 - 1;
        v371 = v38;
        if (v37)
        {
          v96 = v432;
          do
          {
            if (v90)
            {
              v372 = ((unsigned __int16)(*v37 * v90 + ((*v37 * v90) >> 8) + 1) >> 8);
              if (v372)
              {
                if (v372 == 255)
                  v373 = *(int8x16_t *)v60;
                else
                  v373 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v370[1]), 1.0 - (float)((float)v372 * 0.0039216)), *v60, (float)v372 * 0.0039216);
                v370[1] = vrev32q_s8(v373);
              }
            }
            v374 = *v369++;
            v90 = v374;
            v60 = (float32x4_t *)((char *)v60 + 20);
            ++v37;
            ++v370;
            --v371;
          }
          while (v371);
          goto LABEL_492;
        }
        v96 = v432;
        do
        {
          if (v90)
          {
            if (v90 == 255)
              v401 = *(int8x16_t *)v60;
            else
              v401 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(v370[1]), 1.0 - (float)((float)v90 * 0.0039216)), *v60, (float)v90 * 0.0039216);
            v370[1] = vrev32q_s8(v401);
          }
          v402 = *v369++;
          v90 = v402;
          v60 = (float32x4_t *)((char *)v60 + 20);
          ++v370;
          --v371;
        }
        while (v371);
        goto LABEL_543;
      case 2:
        v102 = *v61;
        if (v65)
        {
          if (v37)
          {
            v103 = 0;
            v104 = v61 + 1;
            v105 = v25 - 1;
            v106 = v28 - 1;
            v96 = v432;
            while (1)
            {
              if (!v102)
                goto LABEL_103;
              v107 = ((unsigned __int16)(v37[v103] * v102 + ((v37[v103] * v102) >> 8) + 1) >> 8);
              if (!v107)
                goto LABEL_103;
              if (v107 == 255)
              {
                v108 = v60[1].f32[0];
                if (v108 >= 1.0)
                {
                  v109 = bswap32(LODWORD(v108));
                  v110 = *(int8x16_t *)v60;
                  goto LABEL_102;
                }
                if (v108 > 0.0)
                {
                  v109 = bswap32(COERCE_UNSIGNED_INT(v108 + (float)(COERCE_FLOAT(bswap32(v25[v103]))
                                                                  * (float)(1.0 - v108))));
                  v110 = (int8x16_t)vmlaq_n_f32(*v60, (float32x4_t)vrev32q_s8(v28[v103]), 1.0 - v108);
LABEL_102:
                  v28[v103] = vrev32q_s8(v110);
                  v25[v103] = v109;
                }
              }
              else
              {
                v111 = (float)v107 * 0.0039216;
                v112 = v111 * v60[1].f32[0];
                if (v112 > 0.0)
                {
                  v109 = bswap32(COERCE_UNSIGNED_INT(v112 + (float)(COERCE_FLOAT(bswap32(v25[v103]))
                                                                  * (float)(1.0 - v112))));
                  v110 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*v60, v111), (float32x4_t)vrev32q_s8(v28[v103]), 1.0 - v112);
                  goto LABEL_102;
                }
              }
LABEL_103:
              v102 = v104[v103];
              v60 = (float32x4_t *)((char *)v60 + 20);
              ++v103;
              ++v105;
              ++v106;
              if ((_DWORD)v38 == (_DWORD)v103)
              {
                v37 += v103 + v426;
LABEL_522:
                v28 = &v106[v427 + 1];
                v25 = &v105[v429 + 1];
                goto LABEL_465;
              }
            }
          }
          v393 = v61 + 1;
          v105 = v25 - 1;
          v106 = v28 - 1;
          v394 = v38;
          v96 = v432;
          while (1)
          {
            if (v102)
            {
              if (v102 == 255)
              {
                v395 = v60[1].f32[0];
                if (v395 >= 1.0)
                {
                  v396 = bswap32(LODWORD(v395));
                  v397 = *(int8x16_t *)v60;
                  goto LABEL_519;
                }
                if (v395 > 0.0)
                {
                  v396 = bswap32(COERCE_UNSIGNED_INT(v395 + (float)(COERCE_FLOAT(bswap32(v105[1])) * (float)(1.0 - v395))));
                  v397 = (int8x16_t)vmlaq_n_f32(*v60, (float32x4_t)vrev32q_s8(v106[1]), 1.0 - v395);
LABEL_519:
                  v106[1] = vrev32q_s8(v397);
                  v105[1] = v396;
                }
              }
              else
              {
                v398 = (float)v102 * 0.0039216;
                v399 = v398 * v60[1].f32[0];
                if (v399 > 0.0)
                {
                  v396 = bswap32(COERCE_UNSIGNED_INT(v399 + (float)(COERCE_FLOAT(bswap32(v105[1])) * (float)(1.0 - v399))));
                  v397 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*v60, v398), (float32x4_t)vrev32q_s8(v106[1]), 1.0 - v399);
                  goto LABEL_519;
                }
              }
            }
            v400 = *v393++;
            v102 = v400;
            v60 = (float32x4_t *)((char *)v60 + 20);
            ++v105;
            ++v106;
            if (!--v394)
            {
              v37 = 0;
              goto LABEL_522;
            }
          }
        }
        v375 = v61 + 1;
        v370 = v28 - 1;
        v376 = v38;
        if (v37)
        {
          v96 = v432;
          while (1)
          {
            if (!v102)
              goto LABEL_491;
            v377 = ((unsigned __int16)(*v37 * v102 + ((*v37 * v102) >> 8) + 1) >> 8);
            if (!v377)
              goto LABEL_491;
            if (v377 == 255)
            {
              v378 = v60[1].f32[0];
              if (v378 >= 1.0)
              {
                v383 = *(int8x16_t *)v60;
                goto LABEL_490;
              }
              if (v378 > 0.0)
              {
                v379 = 1.0 - v378;
                v380 = *v60;
                goto LABEL_488;
              }
            }
            else
            {
              v381 = (float)v377 * 0.0039216;
              v382 = v381 * v60[1].f32[0];
              if (v382 > 0.0)
              {
                v379 = 1.0 - v382;
                v380 = vmulq_n_f32(*v60, v381);
LABEL_488:
                v383 = (int8x16_t)vmlaq_n_f32(v380, (float32x4_t)vrev32q_s8(v370[1]), v379);
LABEL_490:
                v370[1] = vrev32q_s8(v383);
              }
            }
LABEL_491:
            v384 = *v375++;
            v102 = v384;
            v60 = (float32x4_t *)((char *)v60 + 20);
            ++v37;
            ++v370;
            if (!--v376)
            {
LABEL_492:
              v37 += v426;
              goto LABEL_544;
            }
          }
        }
        v96 = v432;
        while (1)
        {
          if (v102)
          {
            if (v102 == 255)
            {
              v403 = v60[1].f32[0];
              if (v403 >= 1.0)
              {
                v408 = *(int8x16_t *)v60;
                goto LABEL_541;
              }
              if (v403 > 0.0)
              {
                v404 = 1.0 - v403;
                v405 = *v60;
                goto LABEL_539;
              }
            }
            else
            {
              v406 = (float)v102 * 0.0039216;
              v407 = v406 * v60[1].f32[0];
              if (v407 > 0.0)
              {
                v404 = 1.0 - v407;
                v405 = vmulq_n_f32(*v60, v406);
LABEL_539:
                v408 = (int8x16_t)vmlaq_n_f32(v405, (float32x4_t)vrev32q_s8(v370[1]), v404);
LABEL_541:
                v370[1] = vrev32q_s8(v408);
              }
            }
          }
          v409 = *v375++;
          v102 = v409;
          v60 = (float32x4_t *)((char *)v60 + 20);
          ++v370;
          if (!--v376)
          {
LABEL_543:
            v37 = 0;
LABEL_544:
            v28 = &v370[v427 + 1];
            v25 += v429;
LABEL_465:
            if (v431 == 1)
            {
              v8 = v430;
LABEL_546:
              if (v8)
                free(v8);
              goto LABEL_548;
            }
            --v431;
            v43 = 0;
            LODWORD(v434) = v434 + 1;
            v34 += v33[16];
            v35 = v33[17] + v96;
            if (v430)
            {
              v425 = v34;
              v41 = v421;
              v8 = v430;
LABEL_551:
              v410 = v429 + v41;
              while (1)
              {
                while (1)
                {
                  v411 = *((_DWORD *)v37 - 4);
                  v412 = v411 - v434;
                  if (v411 <= (int)v434)
                    break;
                  v431 -= v412;
                  if (v431 < 1)
                    goto LABEL_546;
                  v413 = v33[17];
                  v425 += v33[16] * v412;
                  v35 += v413 * v412;
                  v28 += v417 * v412;
                  v414 = v410 * v412;
                  if (!(_DWORD)v433)
                    v414 = 0;
                  v25 += v414;
                  LODWORD(v434) = v411;
                }
                if ((int)v434 < *((_DWORD *)v37 - 3) + v411)
                  break;
                if (!shape_enum_clip_scan((uint64_t)v8, (_DWORD *)v37 - 4))
                  goto LABEL_546;
              }
              v26 = v421;
              v34 = v425;
              v27 = v433;
              goto LABEL_21;
            }
            goto LABEL_22;
          }
        }
      case 3:
        f32 = v60[1].f32;
        v114 = v38;
        v85 = v37;
        do
        {
          v115 = *v61;
          if (*v61)
          {
            if (v37)
              v115 = (*v85 * v115 + ((*v85 * v115) >> 8) + 1) >> 8;
            if ((_BYTE)v115)
            {
              if (v115 == 255)
              {
                v116 = COERCE_FLOAT(bswap32(*v25));
                v117 = bswap32(COERCE_UNSIGNED_INT(*f32 * v116));
                v118 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(f32 - 4), v116);
              }
              else
              {
                v119 = (float)v115 * 0.0039216;
                v120 = COERCE_FLOAT(bswap32(*v25));
                v121 = v119 * v120;
                v122 = 1.0 - v119;
                v117 = bswap32(COERCE_UNSIGNED_INT((float)(v122 * v120) + (float)(*f32 * v121)));
                v118 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v122), *(float32x4_t *)(f32 - 4), v121);
              }
              *v28 = vrev32q_s8(v118);
              *v25 = v117;
            }
          }
          ++v61;
          v85 += v37 != 0;
          ++v28;
          f32 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          --v114;
        }
        while (v114);
        goto LABEL_398;
      case 4:
        v123 = v60[1].f32;
        v124 = v38;
        v85 = v37;
        do
        {
          v125 = *v61;
          if (*v61)
          {
            if (v37)
              v125 = (*v85 * v125 + ((*v85 * v125) >> 8) + 1) >> 8;
            if ((_BYTE)v125)
            {
              if (v125 == 255)
              {
                v126 = 1.0 - COERCE_FLOAT(bswap32(*v25));
                v127 = bswap32(COERCE_UNSIGNED_INT(*v123 * v126));
                v128 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v123 - 4), v126);
              }
              else
              {
                v129 = (float)v125 * 0.0039216;
                v130 = COERCE_FLOAT(bswap32(*v25));
                v131 = v129 * (float)(1.0 - v130);
                v132 = 1.0 - v129;
                v127 = bswap32(COERCE_UNSIGNED_INT((float)(v132 * v130) + (float)(*v123 * v131)));
                v128 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v132), *(float32x4_t *)(v123 - 4), v131);
              }
              *v28 = vrev32q_s8(v128);
              *v25 = v127;
            }
          }
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v123 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          --v124;
        }
        while (v124);
        goto LABEL_398;
      case 5:
        v133 = v60[1].f32;
        v134 = v38;
        v85 = v37;
        while (1)
        {
          v135 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_132;
            v136 = *v85 * v135 + ((*v85 * v135) >> 8) + 1;
            if (BYTE1(v136))
              break;
          }
LABEL_133:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v133 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v134)
            goto LABEL_398;
        }
        v135 = v136 >> 8;
LABEL_132:
        v137 = COERCE_FLOAT(bswap32(*v25));
        v138 = (float)v135 * 0.0039216;
        v139 = v138 * *v133;
        *v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - v139), vmulq_n_f32(*(float32x4_t *)(v133 - 4), v138), v137));
        *v25 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v139) * v137) + (float)(v139 * v137)));
        goto LABEL_133;
      case 6:
        v140 = v60[1].f32;
        v141 = v38;
        v85 = v37;
        while (1)
        {
          v142 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v143 = *v85 * v142 + ((*v85 * v142) >> 8) + 1;
              if (!BYTE1(v143))
                goto LABEL_145;
              v142 = v143 >> 8;
            }
            v144 = COERCE_FLOAT(bswap32(*v25));
            v145 = 1.0 - v144;
            if ((float)(1.0 - v144) >= 1.0)
            {
              v149 = (float)v142 * 0.0039216;
              v147 = bswap32(COERCE_UNSIGNED_INT(v149 * *v140));
              v148 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v140 - 4), v149);
              goto LABEL_144;
            }
            if (v145 > 0.0)
            {
              v146 = (float)((float)v142 * 0.0039216) * v145;
              v147 = bswap32(COERCE_UNSIGNED_INT(v144 + (float)(*v140 * v146)));
              v148 = (int8x16_t)vmlaq_n_f32((float32x4_t)vrev32q_s8(*v28), *(float32x4_t *)(v140 - 4), v146);
LABEL_144:
              *v28 = vrev32q_s8(v148);
              *v25 = v147;
            }
          }
LABEL_145:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v140 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v141)
            goto LABEL_398;
        }
      case 7:
        v150 = v37 != 0;
        v151 = v60[1].f32;
        v152 = v38;
        v85 = v37;
        if (v65)
        {
          do
          {
            v153 = *v61;
            if (*v61)
            {
              if (v37)
                v153 = (*v85 * v153 + ((*v85 * v153) >> 8) + 1) >> 8;
              if ((_BYTE)v153)
              {
                if (v153 == 255)
                {
                  v154 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), *v151);
                  v155 = *v151 * COERCE_FLOAT(bswap32(*v25));
                }
                else
                {
                  v156 = (float)v153 * 0.0039216;
                  v157 = COERCE_FLOAT(bswap32(*v25));
                  v158 = v156 * *v151;
                  v159 = 1.0 - v156;
                  v160 = (float32x4_t)vrev32q_s8(*v28);
                  v154 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v160, 1.0 - v156), v160, v158);
                  v155 = (float)(v159 * v157) + (float)(v157 * v158);
                }
                *v28 = vrev32q_s8(v154);
                *v25 = bswap32(LODWORD(v155));
              }
            }
            ++v61;
            v85 += v150;
            ++v28;
            ++v25;
            v151 += 5;
            --v152;
          }
          while (v152);
        }
        else
        {
          do
          {
            v161 = *v61;
            if (*v61)
            {
              if (v37)
                v161 = (*v85 * v161 + ((*v85 * v161) >> 8) + 1) >> 8;
              if ((_BYTE)v161)
              {
                if (v161 == 255)
                {
                  v162 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), *v151);
                }
                else
                {
                  v163 = (float32x4_t)vrev32q_s8(*v28);
                  v162 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v163, 1.0 - (float)((float)v161 * 0.0039216)), v163, (float)((float)v161 * 0.0039216) * *v151);
                }
                *v28 = vrev32q_s8(v162);
              }
            }
            ++v61;
            v85 += v150;
            ++v28;
            v151 += 5;
            --v152;
          }
          while (v152);
        }
        goto LABEL_398;
      case 8:
        v164 = v37 != 0;
        v165 = v60[1].f32;
        v166 = v38;
        v85 = v37;
        if (v65)
        {
          do
          {
            v167 = *v61;
            if (*v61)
            {
              if (v37)
                v167 = (*v85 * v167 + ((*v85 * v167) >> 8) + 1) >> 8;
              if ((_BYTE)v167)
              {
                if (v167 == 255)
                {
                  v168 = 1.0 - *v165;
                  v169 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v168);
                  v170 = v168 * COERCE_FLOAT(bswap32(*v25));
                }
                else
                {
                  v171 = (float)v167 * 0.0039216;
                  v172 = COERCE_FLOAT(bswap32(*v25));
                  v173 = v171 * (float)(1.0 - *v165);
                  v174 = 1.0 - v171;
                  v175 = (float32x4_t)vrev32q_s8(*v28);
                  v169 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v175, 1.0 - v171), v175, v173);
                  v170 = (float)(v174 * v172) + (float)(v172 * v173);
                }
                *v28 = vrev32q_s8(v169);
                *v25 = bswap32(LODWORD(v170));
              }
            }
            ++v61;
            v85 += v164;
            ++v28;
            ++v25;
            v165 += 5;
            --v166;
          }
          while (v166);
        }
        else
        {
          do
          {
            v176 = *v61;
            if (*v61)
            {
              if (v37)
                v176 = (*v85 * v176 + ((*v85 * v176) >> 8) + 1) >> 8;
              if ((_BYTE)v176)
              {
                if (v176 == 255)
                {
                  v177 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - *v165);
                }
                else
                {
                  v178 = (float32x4_t)vrev32q_s8(*v28);
                  v177 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v178, 1.0 - (float)((float)v176 * 0.0039216)), v178, (float)((float)v176 * 0.0039216) * (float)(1.0 - *v165));
                }
                *v28 = vrev32q_s8(v177);
              }
            }
            ++v61;
            v85 += v164;
            ++v28;
            v165 += 5;
            --v166;
          }
          while (v166);
        }
        goto LABEL_398;
      case 9:
        v179 = v60[1].f32;
        v180 = v38;
        v85 = v37;
        while (1)
        {
          v181 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_194;
            v182 = *v85 * v181 + ((*v85 * v181) >> 8) + 1;
            if (BYTE1(v182))
              break;
          }
LABEL_195:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v179 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v180)
            goto LABEL_398;
        }
        v181 = v182 >> 8;
LABEL_194:
        v183 = COERCE_FLOAT(bswap32(*v25));
        v184 = (float)v181 * 0.0039216;
        v185 = v184 * *v179;
        v186 = (float)(1.0 - v184) + v185;
        *v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), v186), vmulq_n_f32(*(float32x4_t *)(v179 - 4), v184), 1.0 - v183));
        *v25 = bswap32(COERCE_UNSIGNED_INT((float)(v186 * v183) + (float)(v185 * (float)(1.0 - v183))));
        goto LABEL_195;
      case 10:
        v187 = v60[1].f32;
        v188 = v38;
        v85 = v37;
        while (1)
        {
          v189 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_202;
            v190 = *v85 * v189 + ((*v85 * v189) >> 8) + 1;
            if (BYTE1(v190))
              break;
          }
LABEL_203:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v187 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v188)
            goto LABEL_398;
        }
        v189 = v190 >> 8;
LABEL_202:
        v191 = COERCE_FLOAT(bswap32(*v25));
        v192 = (float)v189 * 0.0039216;
        v193 = v192 * *v187;
        *v28 = vrev32q_s8((int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vrev32q_s8(*v28), 1.0 - v193), vmulq_n_f32(*(float32x4_t *)(v187 - 4), v192), 1.0 - v191));
        *v25 = bswap32(COERCE_UNSIGNED_INT((float)((float)(1.0 - v193) * v191) + (float)(v193 * (float)(1.0 - v191))));
        goto LABEL_203;
      case 11:
        v194 = v37 != 0;
        v195 = v60[1].f32;
        v196 = v38;
        v85 = v37;
        if (v65)
        {
          while (1)
          {
            v197 = *v61;
            if (*v61)
            {
              if (!v37)
                goto LABEL_210;
              v198 = *v85 * v197 + ((*v85 * v197) >> 8) + 1;
              if (BYTE1(v198))
                break;
            }
LABEL_213:
            ++v61;
            v85 += v194;
            ++v28;
            ++v25;
            v195 += 5;
            if (!--v196)
              goto LABEL_398;
          }
          v197 = v198 >> 8;
LABEL_210:
          v199 = (float)v197 * 0.0039216;
          v53.f32[0] = v199 * *v195;
          v54.i32[0] = bswap32(*v25);
          v55.f32[0] = v53.f32[0] + v54.f32[0];
          if ((float)(v53.f32[0] + v54.f32[0]) > 1.0)
            v55.f32[0] = 1.0;
          v200 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
          v201 = bswap32(v55.u32[0]);
          v55 = (float32x4_t)vrev32q_s8(*v28);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0);
          v54 = vsubq_f32(v200, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), v55));
          *v28 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(v53, vmulq_n_f32(*(float32x4_t *)(v195 - 4), v199)), v54));
          *v25 = v201;
          goto LABEL_213;
        }
        while (1)
        {
          v202 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_219;
            v203 = *v85 * v202 + ((*v85 * v202) >> 8) + 1;
            if (BYTE1(v203))
              break;
          }
LABEL_220:
          ++v61;
          v85 += v194;
          ++v28;
          v195 += 5;
          if (!--v196)
            goto LABEL_398;
        }
        v202 = v203 >> 8;
LABEL_219:
        v204 = (float)v202 * 0.0039216;
        v53.f32[0] = v204 * *v195;
        v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0);
        *v28 = vrev32q_s8((int8x16_t)vaddq_f32(vsubq_f32(v53, vmulq_n_f32(*(float32x4_t *)(v195 - 4), v204)), (float32x4_t)vrev32q_s8(*v28)));
        goto LABEL_220;
      case 12:
        v205 = v37 != 0;
        if (v65)
        {
          v206 = v60[1].f32;
          v207 = v38;
          v85 = v37;
          while (1)
          {
            v208 = *v61;
            if (*v61)
            {
              if (!v37)
                goto LABEL_228;
              v209 = *v85 * v208 + ((*v85 * v208) >> 8) + 1;
              if (BYTE1(v209))
                break;
            }
LABEL_231:
            ++v61;
            v85 += v205;
            ++v28;
            ++v25;
            v206 += 5;
            if (!--v207)
              goto LABEL_398;
          }
          v208 = v209 >> 8;
LABEL_228:
          v210 = (float)v208 * 0.0039216;
          v211 = (float)(v210 * *v206) + COERCE_FLOAT(bswap32(*v25));
          if (v211 > 1.0)
            v211 = 1.0;
          *v28 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v206 - 4), v210), (float32x4_t)vrev32q_s8(*v28)));
          *v25 = bswap32(LODWORD(v211));
          goto LABEL_231;
        }
        v385 = v38;
        v386 = v37;
        while (1)
        {
          v387 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_498;
            v388 = *v386 * v387 + ((*v386 * v387) >> 8) + 1;
            if (BYTE1(v388))
              break;
          }
LABEL_499:
          ++v61;
          v60 = (float32x4_t *)((char *)v60 + 20);
          v386 += v205;
          ++v28;
          if (!--v385)
          {
            v37 = &v386[v426];
LABEL_399:
            v28 += v427;
            v25 += v429;
LABEL_464:
            v96 = v432;
            goto LABEL_465;
          }
        }
        v387 = v388 >> 8;
LABEL_498:
        *v28 = vrev32q_s8((int8x16_t)vaddq_f32(vmulq_n_f32(*v60, (float)v387 * 0.0039216), (float32x4_t)vrev32q_s8(*v28)));
        goto LABEL_499;
      case 13:
        v212 = v60[1].f32;
        v213 = v38;
        v85 = v37;
        while (1)
        {
          v214 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_238;
            v215 = *v85 * v214 + ((*v85 * v214) >> 8) + 1;
            if (BYTE1(v215))
              break;
          }
LABEL_244:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v212 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v213)
            goto LABEL_398;
        }
        v214 = v215 >> 8;
LABEL_238:
        v216 = (float)v214 * 0.0039216;
        v52.f32[0] = v216 * *v212;
        if (v52.f32[0] > 0.0)
        {
          v217 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v212 - 4), v216);
          v55.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v65)
          {
            v53.i32[0] = bswap32(*v25);
            if (v53.f32[0] <= 0.0)
              goto LABEL_242;
          }
          v218 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          v219 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), (float32x4_t)v217);
          v220 = (int8x16_t)vmulq_f32(v218, v219);
          v221 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v55)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v220, v218, 1.0 - v52.f32[0]), v220);
          v222 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v55)), 0);
          v223 = (int8x16_t)vmlaq_n_f32((float32x4_t)v221, v219, 1.0 - v53.f32[0]);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v217 = (int8x16_t)vsubq_f32(v53, (float32x4_t)vbslq_s8(v222, v223, v221));
          if (v65)
          {
LABEL_242:
            v224 = bswap32(v52.u32[0]);
            v52 = (float32x4_t)vrev32q_s8(v217);
            *v28 = (int8x16_t)v52;
            *v25 = v224;
          }
          else
          {
            v52 = (float32x4_t)vrev32q_s8(v217);
            *v28 = (int8x16_t)v52;
          }
        }
        goto LABEL_244;
      case 14:
        v225 = v60[1].f32;
        v226 = v38;
        v85 = v37;
        while (1)
        {
          v227 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v228 = *v85 * v227 + ((*v85 * v227) >> 8) + 1;
              if (!BYTE1(v228))
                goto LABEL_259;
              v227 = v228 >> 8;
            }
            v229 = (float)v227 * 0.0039216;
            v52.f32[0] = v229 * *v225;
            if (v52.f32[0] > 0.0)
            {
              v230 = *(float32x4_t *)(v225 - 4);
              v231 = (int8x16_t)vmulq_n_f32(v230, v229);
              if (v65)
              {
                v230.i32[0] = bswap32(*v25);
                if (v230.f32[0] <= 0.0)
                {
LABEL_257:
                  v238 = bswap32(v52.u32[0]);
                  v52 = (float32x4_t)vrev32q_s8(v231);
                  *v28 = (int8x16_t)v52;
                  *v25 = v238;
                  goto LABEL_259;
                }
              }
              else
              {
                v230.i32[0] = 1.0;
              }
              v232 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v230.f32, 0), (float32x4_t)vrev32q_s8(*v28));
              __asm { FMOV            V4.4S, #1.0 }
              v237 = vmlaq_f32(v232, vsubq_f32(_Q4, v232), vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), (float32x4_t)v231));
              v52.f32[0] = (float)(v52.f32[0] + v230.f32[0]) - (float)(v230.f32[0] * v52.f32[0]);
              v231 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v237);
              if (!v65)
              {
                v52 = (float32x4_t)vrev32q_s8(v231);
                *v28 = (int8x16_t)v52;
                goto LABEL_259;
              }
              goto LABEL_257;
            }
          }
LABEL_259:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v225 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v226)
            goto LABEL_398;
        }
      case 15:
        v425 = v34;
        v239 = v60[1].f32;
        v240 = v38;
        v241 = v37;
        while (1)
        {
          v242 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v243 = *v241 * v242 + ((*v241 * v242) >> 8) + 1;
              if (!BYTE1(v243))
                goto LABEL_275;
              v242 = v243 >> 8;
            }
            v244 = (float)v242 * *((float *)v82 + 159);
            *(float *)&v58 = v244 * *v239;
            if (*(float *)&v58 > 0.0)
            {
              v245 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v239 - 4), v244);
              if (v65)
              {
                v246 = COERCE_FLOAT(bswap32(*v25));
                if (v246 <= 0.0)
                {
LABEL_273:
                  *v28 = vrev32q_s8(v245);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_275;
                }
              }
              else
              {
                v246 = 1.0;
              }
              v247 = vrev32q_s8(*v28);
              PDAoverlayPDA((float *)v435.i32, *(float *)v247.i32, *(float *)&v247.i32[1], *(float *)&v247.i32[2], *(float *)&v247.i32[3], v246, *(double *)v245.i64, v58, v59, *(float *)v245.i32, *(float *)&v245.i32[1], *(float *)&v245.i32[2], *(float *)&v245.i32[3], *(float *)&v58);
              v65 = v433;
              v245 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_275;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_273;
            }
          }
LABEL_275:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v239 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v240)
            goto LABEL_463;
        }
      case 16:
        v248 = v60[1].f32;
        v249 = v38;
        v85 = v37;
        while (1)
        {
          v250 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_282;
            v251 = *v85 * v250 + ((*v85 * v250) >> 8) + 1;
            if (BYTE1(v251))
              break;
          }
LABEL_288:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v248 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v249)
            goto LABEL_398;
        }
        v250 = v251 >> 8;
LABEL_282:
        v252 = (float)v250 * 0.0039216;
        v52.f32[0] = v252 * *v248;
        if (v52.f32[0] > 0.0)
        {
          v254 = *(float32x4_t *)(v248 - 4);
          v253 = (int8x16_t)vmulq_n_f32(v254, v252);
          v254.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v65)
          {
            v53.i32[0] = bswap32(*v25);
            if (v53.f32[0] <= 0.0)
              goto LABEL_286;
          }
          v255 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          v256 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), (float32x4_t)v253);
          v257 = (int8x16_t)vmulq_n_f32(v255, v52.f32[0]);
          v258 = (int8x16_t)vmulq_n_f32(v256, v53.f32[0]);
          v259 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v257, (float32x4_t)v258), v258, v257);
          v260 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v254)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v259, v255, 1.0 - v52.f32[0]), v259);
          v261 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v254)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v260, v256, 1.0 - v53.f32[0]), v260);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v253 = (int8x16_t)vsubq_f32(v53, v261);
          if (v65)
          {
LABEL_286:
            v262 = bswap32(v52.u32[0]);
            v52 = (float32x4_t)vrev32q_s8(v253);
            *v28 = (int8x16_t)v52;
            *v25 = v262;
          }
          else
          {
            v52 = (float32x4_t)vrev32q_s8(v253);
            *v28 = (int8x16_t)v52;
          }
        }
        goto LABEL_288;
      case 17:
        v263 = v60[1].f32;
        v264 = v38;
        v85 = v37;
        while (1)
        {
          v265 = *v61;
          if (*v61)
          {
            if (!v37)
              goto LABEL_295;
            v266 = *v85 * v265 + ((*v85 * v265) >> 8) + 1;
            if (BYTE1(v266))
              break;
          }
LABEL_301:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v263 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v264)
            goto LABEL_398;
        }
        v265 = v266 >> 8;
LABEL_295:
        v267 = (float)v265 * 0.0039216;
        v52.f32[0] = v267 * *v263;
        if (v52.f32[0] > 0.0)
        {
          v269 = *(float32x4_t *)(v263 - 4);
          v268 = (int8x16_t)vmulq_n_f32(v269, v267);
          v269.i32[0] = 1.0;
          v53.i32[0] = 1.0;
          if (v65)
          {
            v53.i32[0] = bswap32(*v25);
            if (v53.f32[0] <= 0.0)
              goto LABEL_299;
          }
          v270 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), (float32x4_t)vrev32q_s8(*v28));
          v271 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), (float32x4_t)v268);
          v272 = (int8x16_t)vmulq_n_f32(v270, v52.f32[0]);
          v273 = (int8x16_t)vmulq_n_f32(v271, v53.f32[0]);
          v274 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v273, (float32x4_t)v272), v273, v272);
          v275 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v269)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v274, v270, 1.0 - v52.f32[0]), v274);
          v276 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v53, v269)), 0), (int8x16_t)vmlaq_n_f32((float32x4_t)v275, v271, 1.0 - v53.f32[0]), v275);
          v52.f32[0] = (float)(v53.f32[0] + v52.f32[0]) - (float)(v53.f32[0] * v52.f32[0]);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
          v268 = (int8x16_t)vsubq_f32(v53, v276);
          if (v65)
          {
LABEL_299:
            v277 = bswap32(v52.u32[0]);
            v52 = (float32x4_t)vrev32q_s8(v268);
            *v28 = (int8x16_t)v52;
            *v25 = v277;
          }
          else
          {
            v52 = (float32x4_t)vrev32q_s8(v268);
            *v28 = (int8x16_t)v52;
          }
        }
        goto LABEL_301;
      case 18:
        v425 = v34;
        v278 = v60[1].f32;
        v279 = v38;
        v241 = v37;
        while (1)
        {
          v280 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v281 = *v241 * v280 + ((*v241 * v280) >> 8) + 1;
              if (!BYTE1(v281))
                goto LABEL_317;
              v280 = v281 >> 8;
            }
            v282 = (float)v280 * *((float *)v82 + 159);
            *(float *)&v58 = v282 * *v278;
            if (*(float *)&v58 > 0.0)
            {
              v283 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v278 - 4), v282);
              if (v65)
              {
                v284 = COERCE_FLOAT(bswap32(*v25));
                if (v284 <= 0.0)
                {
LABEL_315:
                  *v28 = vrev32q_s8(v283);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_317;
                }
              }
              else
              {
                v284 = 1.0;
              }
              v285 = vrev32q_s8(*v28);
              PDAcolordodgePDA((float *)v435.i32, *(float *)v285.i32, *(float *)&v285.i32[1], *(float *)&v285.i32[2], *(float *)&v285.i32[3], v284, *(double *)v283.i64, v58, v59, *(float *)v283.i32, *(float *)&v283.i32[1], *(float *)&v283.i32[2], *(float *)&v283.i32[3], *(float *)&v58);
              v65 = v433;
              v283 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_317;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_315;
            }
          }
LABEL_317:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v278 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v279)
            goto LABEL_463;
        }
      case 19:
        v425 = v34;
        v286 = v60[1].f32;
        v287 = v38;
        v241 = v37;
        while (1)
        {
          v288 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v289 = *v241 * v288 + ((*v241 * v288) >> 8) + 1;
              if (!BYTE1(v289))
                goto LABEL_333;
              v288 = v289 >> 8;
            }
            v290 = (float)v288 * *((float *)v82 + 159);
            *(float *)&v58 = v290 * *v286;
            if (*(float *)&v58 > 0.0)
            {
              v291 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v286 - 4), v290);
              if (v65)
              {
                v292 = COERCE_FLOAT(bswap32(*v25));
                if (v292 <= 0.0)
                {
LABEL_331:
                  *v28 = vrev32q_s8(v291);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_333;
                }
              }
              else
              {
                v292 = 1.0;
              }
              v293 = vrev32q_s8(*v28);
              PDAcolorburnPDA((float *)v435.i32, *(float *)v293.i32, *(float *)&v293.i32[1], *(float *)&v293.i32[2], *(float *)&v293.i32[3], v292, *(double *)v291.i64, v58, v59, *(float *)v291.i32, *(float *)&v291.i32[1], *(float *)&v291.i32[2], *(float *)&v291.i32[3], *(float *)&v58);
              v65 = v433;
              v291 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_333;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_331;
            }
          }
LABEL_333:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v286 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v287)
            goto LABEL_463;
        }
      case 20:
        v425 = v34;
        v294 = v60[1].f32;
        v295 = v38;
        v241 = v37;
        while (1)
        {
          v296 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v297 = *v241 * v296 + ((*v241 * v296) >> 8) + 1;
              if (!BYTE1(v297))
                goto LABEL_349;
              v296 = v297 >> 8;
            }
            v298 = (float)v296 * *((float *)v82 + 159);
            *(float *)&v58 = v298 * *v294;
            if (*(float *)&v58 > 0.0)
            {
              v299 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v294 - 4), v298);
              if (v65)
              {
                LODWORD(v56) = bswap32(*v25);
                if (*(float *)&v56 <= 0.0)
                {
LABEL_347:
                  *v28 = vrev32q_s8(v299);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_349;
                }
              }
              else
              {
                LODWORD(v56) = 1.0;
              }
              v300 = vrev32q_s8(*v28);
              PDAsoftlightPDA((float32x4_t *)&v435, *(float32x2_t *)v300.i8, *(float32_t *)&v300.i32[1], *(float *)&v300.i32[2], *(float *)&v300.i32[3], v56, *(int32x2_t *)v299.i8, v58, v59, v45, v46, v47, v48, v49, v50, v51, *(float32x2_t *)v299.i8, *(float *)&v299.i32[2], *(float *)&v299.i32[3],
                *(float *)&v58);
              v65 = v433;
              v299 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_349;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_347;
            }
          }
LABEL_349:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v294 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v295)
            goto LABEL_463;
        }
      case 21:
        v425 = v34;
        v301 = v60[1].f32;
        v302 = v38;
        v241 = v37;
        while (1)
        {
          v303 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v304 = *v241 * v303 + ((*v241 * v303) >> 8) + 1;
              if (!BYTE1(v304))
                goto LABEL_365;
              v303 = v304 >> 8;
            }
            v305 = (float)v303 * *((float *)v82 + 159);
            *(float *)&v58 = v305 * *v301;
            if (*(float *)&v58 > 0.0)
            {
              v306 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v301 - 4), v305);
              if (v65)
              {
                v307 = COERCE_FLOAT(bswap32(*v25));
                if (v307 <= 0.0)
                {
LABEL_363:
                  *v28 = vrev32q_s8(v306);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_365;
                }
              }
              else
              {
                v307 = 1.0;
              }
              v308 = vrev32q_s8(*v28);
              PDAhardlightPDA((float *)v435.i32, *(float *)v308.i32, *(float *)&v308.i32[1], *(float *)&v308.i32[2], *(float *)&v308.i32[3], v307, *(double *)v306.i64, v58, v59, *(float *)v306.i32, *(float *)&v306.i32[1], *(float *)&v306.i32[2], *(float *)&v306.i32[3], *(float *)&v58);
              v65 = v433;
              v306 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_365;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_363;
            }
          }
LABEL_365:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v301 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v302)
            goto LABEL_463;
        }
      case 22:
        v309 = v60[1].f32;
        v310 = v38;
        v85 = v37;
        while (1)
        {
          v311 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v312 = *v85 * v311 + ((*v85 * v311) >> 8) + 1;
              if (!BYTE1(v312))
                goto LABEL_381;
              v311 = v312 >> 8;
            }
            v313 = (float)v311 * 0.0039216;
            v52.f32[0] = v313 * *v309;
            if (v52.f32[0] > 0.0)
            {
              v314 = *(float32x4_t *)(v309 - 4);
              v315 = (int8x16_t)vmulq_n_f32(v314, v313);
              if (v65)
              {
                v314.i32[0] = bswap32(*v25);
                if (v314.f32[0] <= 0.0)
                {
LABEL_379:
                  v324 = bswap32(v52.u32[0]);
                  v52 = (float32x4_t)vrev32q_s8(v315);
                  *v28 = (int8x16_t)v52;
                  *v25 = v324;
                  goto LABEL_381;
                }
              }
              else
              {
                v314.i32[0] = 1.0;
              }
              v316 = *v28;
              *(float *)v316.i32 = (float)(v314.f32[0] + v52.f32[0]) - (float)(v314.f32[0] * v52.f32[0]);
              v317 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v314.f32, 0), (float32x4_t)vrev32q_s8(*v28));
              v318 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), (float32x4_t)v315);
              v319 = vaddq_f32(v317, v318);
              v320 = vmulq_n_f32(v317, v52.f32[0]);
              v321 = vmulq_n_f32(v318, v314.f32[0]);
              v322 = vsubq_f32(v319, v320);
              v323 = (int8x16_t)vsubq_f32(v320, v321);
              v315 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v316.i8, 0), vaddq_f32(vsubq_f32(v322, v321), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32((float32x4_t)v323), (int8x16_t)vnegq_f32((float32x4_t)v323), v323)));
              if (!v65)
              {
                v52 = (float32x4_t)vrev32q_s8(v315);
                *v28 = (int8x16_t)v52;
                goto LABEL_381;
              }
              v52.i32[0] = v316.i32[0];
              goto LABEL_379;
            }
          }
LABEL_381:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v309 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v310)
            goto LABEL_398;
        }
      case 23:
        v325 = v60[1].f32;
        v326 = v38;
        v85 = v37;
        while (1)
        {
          v327 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v328 = *v85 * v327 + ((*v85 * v327) >> 8) + 1;
              if (!BYTE1(v328))
                goto LABEL_397;
              v327 = v328 >> 8;
            }
            v329 = (float)v327 * 0.0039216;
            v53.f32[0] = v329 * *v325;
            if (v53.f32[0] > 0.0)
            {
              v330 = *(float32x4_t *)(v325 - 4);
              v331 = (int8x16_t)vmulq_n_f32(v330, v329);
              if (v65)
              {
                v330.i32[0] = bswap32(*v25);
                if (v330.f32[0] <= 0.0)
                {
LABEL_395:
                  *v28 = vrev32q_s8(v331);
                  *v25 = bswap32(v53.u32[0]);
                  goto LABEL_397;
                }
              }
              else
              {
                v330.i32[0] = 1.0;
              }
              v332 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v330.f32, 0);
              v330.f32[0] = (float)(v330.f32[0] + v53.f32[0]) - (float)(v330.f32[0] * v53.f32[0]);
              v333 = vsubq_f32(v332, (float32x4_t)vrev32q_s8(*v28));
              v334 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), (float32x4_t)v331);
              v335 = vaddq_f32(v333, v334);
              v336 = vmulq_f32(v334, v333);
              v333.i64[0] = 0xC0000000C0000000;
              v333.i64[1] = 0xC0000000C0000000;
              v53 = vmlaq_f32(v335, v333, v336);
              v331 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v330.f32, 0), v53);
              if (!v65)
              {
                *v28 = vrev32q_s8(v331);
                goto LABEL_397;
              }
              v53.i32[0] = v330.i32[0];
              goto LABEL_395;
            }
          }
LABEL_397:
          ++v61;
          v85 += v37 != 0;
          ++v28;
          v325 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v326)
          {
LABEL_398:
            v37 = &v85[v426];
            goto LABEL_399;
          }
        }
      case 24:
        v425 = v34;
        v337 = v60[1].f32;
        v338 = v38;
        v241 = v37;
        while (1)
        {
          v339 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v340 = *v241 * v339 + ((*v241 * v339) >> 8) + 1;
              if (!BYTE1(v340))
                goto LABEL_414;
              v339 = v340 >> 8;
            }
            v341 = (float)v339 * *((float *)v82 + 159);
            *(float *)&v58 = v341 * *v337;
            if (*(float *)&v58 > 0.0)
            {
              v342 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v337 - 4), v341);
              if (v65)
              {
                v343 = COERCE_FLOAT(bswap32(*v25));
                if (v343 <= 0.0)
                {
LABEL_412:
                  *v28 = vrev32q_s8(v342);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_414;
                }
              }
              else
              {
                v343 = 1.0;
              }
              v344 = vrev32q_s8(*v28);
              PDAhuePDA((float *)v435.i32, *(float *)v344.i32, *(float *)&v344.i32[1], *(float *)&v344.i32[2], *(float *)&v344.i32[3], v343, *(double *)v342.i64, v58, v59, *(float *)v342.i32, *(float *)&v342.i32[1], *(float *)&v342.i32[2], *(float *)&v342.i32[3], *(float *)&v58);
              v65 = v433;
              v342 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_414;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_412;
            }
          }
LABEL_414:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v337 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v338)
            goto LABEL_463;
        }
      case 25:
        v425 = v34;
        v345 = v60[1].f32;
        v346 = v38;
        v241 = v37;
        while (1)
        {
          v347 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v348 = *v241 * v347 + ((*v241 * v347) >> 8) + 1;
              if (!BYTE1(v348))
                goto LABEL_430;
              v347 = v348 >> 8;
            }
            v349 = (float)v347 * *((float *)v82 + 159);
            *(float *)&v58 = v349 * *v345;
            if (*(float *)&v58 > 0.0)
            {
              v350 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v345 - 4), v349);
              if (v65)
              {
                v351 = COERCE_FLOAT(bswap32(*v25));
                if (v351 <= 0.0)
                {
LABEL_428:
                  *v28 = vrev32q_s8(v350);
                  *v25 = bswap32(LODWORD(v58));
                  goto LABEL_430;
                }
              }
              else
              {
                v351 = 1.0;
              }
              v352 = vrev32q_s8(*v28);
              PDAsaturationPDA((float *)v435.i32, *(float *)v352.i32, *(float *)&v352.i32[1], *(float *)&v352.i32[2], *(float *)&v352.i32[3], v351, *(double *)v350.i64, v58, v59, *(float *)v350.i32, *(float *)&v350.i32[1], *(float *)&v350.i32[2], *(float *)&v350.i32[3], *(float *)&v58);
              v65 = v433;
              v350 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_430;
              }
              *(float *)&v58 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_428;
            }
          }
LABEL_430:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v345 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v346)
            goto LABEL_463;
        }
      case 26:
        v425 = v34;
        v353 = v60[1].f32;
        v354 = v38;
        v241 = v37;
        while (1)
        {
          v355 = *v61;
          if (*v61)
          {
            if (v37)
            {
              v356 = *v241 * v355 + ((*v241 * v355) >> 8) + 1;
              if (!BYTE1(v356))
                goto LABEL_446;
              v355 = v356 >> 8;
            }
            v357 = (float)v355 * *((float *)v82 + 159);
            v358 = v357 * *v353;
            if (v358 > 0.0)
            {
              v359 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v353 - 4), v357);
              if (v65)
              {
                LODWORD(v57) = bswap32(*v25);
                if (*(float *)&v57 <= 0.0)
                {
LABEL_444:
                  *v28 = vrev32q_s8(v359);
                  *v25 = bswap32(LODWORD(v358));
                  goto LABEL_446;
                }
              }
              else
              {
                LODWORD(v57) = 1.0;
              }
              v415 = vrev32q_s8(*v28);
              PDAluminosityPDA((float *)v435.i32, *(float *)v359.i32, *(float *)&v359.i32[1], *(float *)&v359.i32[2], *(float *)&v359.i32[3], v358, v57, *(double *)v415.i64, v59, *(float *)v415.i32, *(float *)&v415.i32[1], *(float *)&v415.i32[2], *(float *)&v415.i32[3], *(float *)&v57);
              v65 = v433;
              v359 = v435;
              if (!(_DWORD)v433)
              {
                *v28 = vrev32q_s8(v435);
                v82 = &xmmword_185005000;
                goto LABEL_446;
              }
              v358 = v436;
              v82 = &xmmword_185005000;
              goto LABEL_444;
            }
          }
LABEL_446:
          ++v61;
          v241 += v37 != 0;
          ++v28;
          v353 += 5;
          v25 = (unsigned int *)((char *)v25 + v42);
          if (!--v354)
            goto LABEL_463;
        }
      case 27:
        v425 = v34;
        v360 = v60[1].f32;
        v361 = v38;
        v241 = v37;
        v362 = v361;
        break;
      default:
        goto LABEL_464;
    }
    while (1)
    {
      v363 = *v61;
      if (*v61)
      {
        if (v37)
        {
          v364 = *v241 * v363 + ((*v241 * v363) >> 8) + 1;
          if (!BYTE1(v364))
            goto LABEL_462;
          v363 = v364 >> 8;
        }
        v365 = (float)v363 * *((float *)v82 + 159);
        *(float *)&v58 = v365 * *v360;
        if (*(float *)&v58 > 0.0)
        {
          v366 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v360 - 4), v365);
          if (v65)
          {
            v367 = COERCE_FLOAT(bswap32(*v25));
            if (v367 <= 0.0)
            {
LABEL_460:
              *v28 = vrev32q_s8(v366);
              *v25 = bswap32(LODWORD(v58));
              goto LABEL_462;
            }
          }
          else
          {
            v367 = 1.0;
          }
          v368 = vrev32q_s8(*v28);
          PDAluminosityPDA((float *)v435.i32, *(float *)v368.i32, *(float *)&v368.i32[1], *(float *)&v368.i32[2], *(float *)&v368.i32[3], v367, *(double *)v366.i64, v58, v59, *(float *)v366.i32, *(float *)&v366.i32[1], *(float *)&v366.i32[2], *(float *)&v366.i32[3], *(float *)&v58);
          v65 = v433;
          v366 = v435;
          if (!(_DWORD)v433)
          {
            *v28 = vrev32q_s8(v435);
            v82 = &xmmword_185005000;
            goto LABEL_462;
          }
          *(float *)&v58 = v436;
          v82 = &xmmword_185005000;
          goto LABEL_460;
        }
      }
LABEL_462:
      ++v61;
      v241 += v37 != 0;
      ++v28;
      v360 += 5;
      v25 = (unsigned int *)((char *)v25 + v42);
      if (!--v362)
      {
LABEL_463:
        v34 = v425;
        v37 = &v241[v426];
        v28 += v427;
        v25 += v429;
        v32 = v424;
        v38 = v422;
        v33 = v423;
        goto LABEL_464;
      }
    }
  }
}

uint64_t CMYKF_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  int v9;
  __n128 v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[36];
  char v19;
  _QWORD v20[483];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) != 0x4000000)
  {
    if (v13)
      goto LABEL_22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = CMYKf_shade_radial_CMYK;
  }
  else if (*(_QWORD *)(v5 + 24))
  {
    v12 = CMYKf_shade_conic_CMYK;
  }
  else if (v16 < 2)
  {
    v12 = CMYKf_shade_axial_CMYK;
  }
  else
  {
    v12 = CMYKf_shade_custom_CMYK;
  }
  v13 = v12;
LABEL_22:
  v14 = *v7;
  v15 = v14;
  CMYKF_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17))
    free(v17);
  return 1;
}

char *PDFContentStreamCreate(uint64_t a1, const CGRect *a2)
{
  char *v4;
  const CGRect *v5;
  CGSize size;
  _QWORD *v7;

  v4 = (char *)malloc_type_calloc(1uLL, 0xD0uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *(_QWORD *)v4 = a1;
    *((_QWORD *)v4 + 1) = PDFXRefTableAddObject(*(_QWORD **)(a1 + 464));
    v5 = &CGRectInfinite;
    if (a2)
      v5 = a2;
    size = v5->size;
    *(CGPoint *)(v4 + 72) = v5->origin;
    *(CGSize *)(v4 + 88) = size;
    v7 = malloc_type_calloc(1uLL, 0x60uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v7)
    {
      *(_DWORD *)v7 = 1;
      v7[1] = a1;
      *((_DWORD *)v7 + 6) = 1;
      v7[2] = PDFXRefTableAddObject(*(_QWORD **)(a1 + 464));
    }
    *((_QWORD *)v4 + 14) = v7;
    *((_QWORD *)v4 + 23) = -1;
  }
  return v4;
}

void PDFContentStreamRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  BOOL v10;
  const void *v11;
  const void ***v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;

  if (a1)
  {
    if (*(uint64_t *)(a1 + 176) >= 1)
    {
      do
        PDFContentStreamEndTag((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8, v18);
      while (*(uint64_t *)(a1 + 176) > 0);
    }
    v9 = *(_QWORD **)(a1 + 104);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)-- == 1;
      if (v10)
      {
        v11 = (const void *)v9[5];
        if (v11)
          CFRelease(v11);
        gstate_clear((uint64_t)v9);
        free(v9);
      }
    }
    CGPDFAssociationRelease(*(const void ***)(a1 + 64));
    v12 = *(const void ****)(a1 + 112);
    if (v12)
    {
      v10 = (*(_DWORD *)v12)-- == 1;
      if (v10)
      {
        CGOrderedSetRelease(v12[4]);
        CGOrderedSetRelease(v12[5]);
        CGOrderedSetRelease(v12[6]);
        CGOrderedSetRelease(v12[7]);
        CGOrderedSetRelease(v12[8]);
        CGOrderedSetRelease(v12[9]);
        CGOrderedSetRelease(v12[10]);
        CGOrderedSetRelease(v12[11]);
        free(v12);
      }
    }
    v13 = *(const void **)(a1 + 40);
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(a1 + 32);
    if (v14)
      CFRelease(v14);
    v15 = *(const void **)(a1 + 48);
    if (v15)
      CFRelease(v15);
    v16 = *(const void **)(a1 + 56);
    if (v16)
      CFRelease(v16);
    v17 = *(const void **)(a1 + 200);
    if (v17)
      CFRelease(v17);
    free((void *)a1);
  }
}

void PDFContentStreamEndTag(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  const __CFArray *v11;
  CFIndex Count;

  if (a1[22] >= 1)
  {
    v10 = *a1;
    v11 = *(const __CFArray **)(*a1 + 560);
    if (v11)
    {
      if (CFArrayGetCount(v11) >= 2)
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v10 + 560));
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v10 + 560), Count - 1);
      }
    }
    --a1[22];
    PDFWriterPrintf((_BYTE **)a1[8], (uint64_t)"EMC", a3, a4, a5, a6, a7, a8, a9);
  }
}

void PDFContentStreamSetRedactionPath(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 200);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 200) = cf;
    }
  }
}

void PDFContentStreamBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    PDFDocumentBeginObject(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*(_QWORD *)a1, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v22);
    if (*(_BYTE *)(*(_QWORD *)a1 + 73))
      PDFDocumentPrintf(*(_QWORD *)a1, (uint64_t)"/Filter /FlateDecode", v16, v17, v18, v19, v20, v21, a9);
  }
}

void PDFContentStreamBeginData(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFAllocator *v10;
  __CFData *Mutable;
  CGDataConsumerRef Encryptor;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  if (a1)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    a1[4] = (uint64_t)Mutable;
    Encryptor = CGDataConsumerCreateWithCFData(Mutable);
    a1[5] = (uint64_t)Encryptor;
    a1[3] = (uint64_t)Encryptor;
    v13 = *a1;
    v14 = *(_QWORD *)(*a1 + 56);
    if (v14)
    {
      Encryptor = PDFSecurityHandlerCreateEncryptor(v14, (uint64_t)Encryptor, a1[1]);
      a1[7] = (uint64_t)Encryptor;
      a1[3] = (uint64_t)Encryptor;
      v13 = *a1;
    }
    if (*(_BYTE *)(v13 + 73))
    {
      Encryptor = CGDataConsumerCreateFlateEncoder(Encryptor);
      a1[6] = (uint64_t)Encryptor;
      a1[3] = (uint64_t)Encryptor;
    }
    v15 = PDFWriterCreate(Encryptor);
    a1[8] = (uint64_t)v15;
    v16 = *a1;
    v17 = malloc_type_calloc(1uLL, 0x108uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v17)
    {
      *(_DWORD *)v17 = 1;
      v17[1] = v16;
      v17[2] = v15;
      v24 = *(_QWORD **)(v16 + 400);
      if (!v24)
      {
        v24 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (v24)
          *v24 = v16;
        *(_QWORD *)(v16 + 400) = v24;
      }
      v25 = a1[14];
      v17[3] = v24;
      v17[4] = v25;
      v17[5] = CFArrayCreateMutable(v10, 0, 0);
      gstate_init((uint64_t)v17);
    }
    a1[13] = (uint64_t)v17;
    PDFWriterPrintf((_BYTE **)a1[8], (uint64_t)"q", v18, v19, v20, v21, v22, v23, a9);
  }
}

uint64_t PDFContentStreamEndData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v8 = (_QWORD *)result;
    PDFWriterPrintf(*(_BYTE ***)(result + 64), (uint64_t)"Q", a3, a4, a5, a6, a7, a8, v10);
    CGDataConsumerClose(v8[6]);
    result = CGDataConsumerClose(v8[7]);
    v9 = v8[3];
    if (v9)
      v9 = *(_QWORD *)(v9 + 40);
    v8[2] = v9;
  }
  return result;
}

CFDataRef *PDFContentStreamEnd(CFDataRef *result)
{
  CFDataRef *v1;
  uint64_t v2;
  uint64_t v3;
  CFIndex Length;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const UInt8 *BytePtr;
  CFIndex v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (result)
  {
    v1 = result;
    v2 = (uint64_t)*result;
    v3 = *((_QWORD *)*result + 3);
    Length = CFDataGetLength(result[4]);
    PDFDocumentPrintf(v2, (uint64_t)"/Length %O", v5, v6, v7, v8, v9, v10, Length);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)">>\n", v11, v12, v13, v14, v15, v16, v44);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"stream\n", v17, v18, v19, v20, v21, v22, v45);
    BytePtr = CFDataGetBytePtr(v1[4]);
    v24 = CFDataGetLength(v1[4]);
    CGDataConsumerPutBytes(v3, (uint64_t)BytePtr, v24);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"\n", v25, v26, v27, v28, v29, v30, v46);
    PDFDocumentPrintf((uint64_t)*v1, (uint64_t)"endstream\n", v31, v32, v33, v34, v35, v36, v47);
    return (CFDataRef *)PDFDocumentEndObject((uint64_t)*v1, v37, v38, v39, v40, v41, v42, v43);
  }
  return result;
}

void PDFContentStreamDrawImage(uint64_t a1, uint64_t a2, CGImage *cf, double a4, double a5, double a6, double a7)
{
  CGImageRef Image;
  uint64_t v9;
  const CGPath *v10;
  __int128 v11;
  double width;
  double height;
  CGContext *v14;
  CGFloat v15;
  CGFloat v16;
  const CGPath *v17;
  unsigned int v18;
  _QWORD *v19;
  int v20;
  uint64_t NumberOfComponents;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  char *v33;
  uint64_t i;
  uint64_t v35;
  char *v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGDataProvider *v45;
  CGColorSpace *ColorSpace;
  CGImageRef v47;
  CGImageRef v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  uint64_t FillColor;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double Alpha;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  int8x16_t v107;
  float64x2_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CGFloat *decode;
  CGFloat *decodea;
  CGFloat *decodeb;
  size_t v124;
  unsigned int v125;
  uint64_t v126;
  double x;
  uint64_t v128;
  double bytesPerRow;
  size_t bytesPerRowa;
  CGAffineTransform transform;
  CGRect v136;
  CGRect v137;

  if (!a1)
    return;
  Image = cf;
  if (!cf)
    return;
  v9 = a1;
  v10 = *(const CGPath **)(a1 + 200);
  if (!v10)
    goto LABEL_11;
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)&transform.a = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&transform.c = v11;
  *(_OWORD *)&transform.tx = *(_OWORD *)(a2 + 56);
  *(double *)&v11 = a5;
  v136 = CGRectApplyAffineTransform(*(CGRect *)&a4, &transform);
  width = v136.size.width;
  height = v136.size.height;
  x = v136.origin.x;
  bytesPerRow = v136.origin.y;
  if (!CGPathIntersectsRect(v10, v136.origin.x, v136.origin.y, v136.size.width, v136.size.height))
  {
LABEL_11:
    CFRetain(Image);
    goto LABEL_12;
  }
  v14 = (CGContext *)CGBitmapContextCreateForFlatteningImage((uint64_t)Image, 0, 0);
  v15 = (double)*((unint64_t *)Image + 5);
  v16 = (double)*((unint64_t *)Image + 6);
  v137.origin.x = 0.0;
  v137.origin.y = 0.0;
  v137.size.width = v15;
  v137.size.height = v16;
  CGContextDrawImage(v14, v137, Image);
  transform.a = v15 / width;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = v16 / height;
  *(float64x2_t *)&transform.tx = vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)0, (float64x2_t)COERCE_UNSIGNED_INT64(v15 / width), x, 0), *(float64x2_t *)&transform.c, bytesPerRow, 0);
  v17 = CGPathCreateMutableCopyByTransformingPath(v10, &transform);
  CGContextSetRGBFillColor(v14, 0.0, 0.0, 0.0, 1.0);
  CGContextAddPath(v14, v17);
  CGContextDrawPath(v14, kCGPathFill);
  Image = CGBitmapContextCreateImage(v14);
  if (v17)
    CFRelease(v17);
  if (v14)
    CFRelease(v14);
  if (Image)
  {
LABEL_12:
    v18 = *(char *)(*(_QWORD *)(a2 + 120) + 4);
    if ((*((_BYTE *)Image + 39) & 2) != 0)
    {
      if (*((_QWORD *)Image + 7) == 1)
      {
        v19 = PDFDocumentAddImage(*(_QWORD *)v9, (uint64_t)Image, v18);
        v20 = 1;
LABEL_40:
        v49 = *(_QWORD *)(v9 + 112);
        *(_DWORD *)(v49 + 24) |= 0x1Cu;
        v50 = *(const void ***)(v49 + 64);
        if (!v50)
        {
          v50 = CGOrderedSetCreate();
          *(_QWORD *)(v49 + 64) = v50;
        }
        CGOrderedSetAddValue((CFSetRef *)v50, v19);
        v51 = *(_QWORD *)(v49 + 8);
        v52 = *(_QWORD *)(v51 + 584);
        if (v52)
        {
          v53 = v19[2];
          if (v53)
            v53 = *(_QWORD *)(v53 + 8);
          if (*(_DWORD *)(v52 + 16) == 1 && !*(_QWORD *)(v52 + 32))
          {
            *(_QWORD *)(v52 + 32) = v53;
            v54 = *(_QWORD *)(v51 + 592);
            *(_QWORD *)(v51 + 592) = v54 + 1;
            *(_QWORD *)(v52 + 40) = v54;
          }
          else
          {
            v54 = -1;
          }
          v19[13] = v54;
        }
        v55 = *(_BYTE ***)(v9 + 64);
        v56 = *(_QWORD *)(v9 + 104);
        PDFGStateSetClipStack(v56, *(__CFArray **)(a2 + 112));
        v63 = *(_QWORD *)(a2 + 120);
        v64 = *(_DWORD *)(v63 + 4);
        if (((v64 >> 20) & 0xF) != 0)
          v65 = v64 << 8;
        else
          v65 = v64 << 12;
        if (v65 >> 28)
          v66 = v65 >> 28;
        else
          v66 = 2;
        if (*(_DWORD *)(v56 + 80) != v66)
        {
          *(_DWORD *)(v56 + 80) = v66;
          addEmitFunction(v56, emitRenderingIntentChange);
          v63 = *(_QWORD *)(a2 + 120);
        }
        v67 = *(double *)(v63 + 8);
        if (v20)
        {
          FillColor = CGGStateGetFillColor(a2);
          PDFGStateSetFillColor(v56, FillColor);
          v69 = *(_OWORD *)(v9 + 136);
          *(_OWORD *)&transform.a = *(_OWORD *)(v9 + 120);
          *(_OWORD *)&transform.c = v69;
          *(_OWORD *)&transform.tx = *(_OWORD *)(v9 + 152);
          PDFGStateSetPatternMatrix(v56, (uint64_t)&transform, v70, v71, v72, v73, v74, v75, *(double *)(*(_QWORD *)(a2 + 120) + 24), *(double *)(*(_QWORD *)(a2 + 120) + 32));
          v77 = *(double *)(*(_QWORD *)(a2 + 144) + 16);
          if (*(double *)(v56 + 224) != v77)
          {
            *(double *)(v56 + 224) = v77;
            addEmitFunction(v56, emitSmoothnessChange);
          }
          if (FillColor)
          {
            if (FillColor < 0)
              Alpha = CGTaggedColorGetAlpha(FillColor, v76, v57, v58, v59, v60, v61, v62);
            else
              Alpha = *(double *)(FillColor + 8 * *(_QWORD *)(FillColor + 56) + 56);
          }
          else
          {
            Alpha = 0.0;
          }
          v67 = v67 * Alpha;
        }
        if (*(double *)(v56 + 168) != v67)
        {
          *(double *)(v56 + 168) = v67;
          addEmitFunction(v56, emitNonStrokeAlphaChange);
        }
        v79 = *(_QWORD *)(a2 + 144);
        v80 = *(unsigned __int8 *)(v79 + 24);
        if (*(unsigned __int8 *)(v56 + 200) != v80)
        {
          *(_BYTE *)(v56 + 200) = v80;
          addEmitFunction(v56, emitNonStrokeOverprintChange);
          v79 = *(_QWORD *)(a2 + 144);
        }
        PDFGStateSetOverprintMode(v56, *(unsigned int *)(v79 + 28), v57, v58, v59, v60, v61, v62);
        PDFGStateSetBlackGeneration(v56, *(CFTypeRef *)(*(_QWORD *)(a2 + 144) + 32));
        PDFGStateSetUndercolorRemoval(v56, *(CFTypeRef *)(*(_QWORD *)(a2 + 144) + 40));
        PDFGStateSetStyle(v56, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 16));
        PDFGStateSetSoftMask(v56, *(CFTypeRef *)(*(_QWORD *)(a2 + 120) + 40));
        v87 = (int)(*(_DWORD *)(*(_QWORD *)(a2 + 120) + 4) << 16) >> 24;
        if ((v87 - 13) >= 0xF)
          v87 = 2;
        if (*(_DWORD *)(v56 + 248) != v87)
        {
          *(_DWORD *)(v56 + 248) = v87;
          addEmitFunction(v56, emitBlendModeChange);
        }
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"  BEGIN: synchronizing gstate.", v81, v82, v83, v84, v85, v86, (uint64_t)decode);
        PDFGStateEmit((CFArrayRef *)v56);
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"  END: synchronizing gstate.", v88, v89, v90, v91, v92, v93, (uint64_t)decodea);
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"%s: BEGIN: drawing %s.", v94, v95, v96, v97, v98, v99, (uint64_t)"PDFWriteImage");
        v106 = *(float64x2_t *)(a2 + 40);
        *(_OWORD *)&transform.a = *(_OWORD *)(a2 + 24);
        *(float64x2_t *)&transform.c = v106;
        *(_OWORD *)&transform.tx = *(_OWORD *)(a2 + 56);
        *(float64x2_t *)&transform.tx = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&transform.tx, *(float64x2_t *)&transform.a, a4), v106, a5);
        v107 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)&transform.a, a6);
        v108 = vmulq_n_f64(v106, a7);
        *(int8x16_t *)&transform.a = v107;
        *(float64x2_t *)&transform.c = v108;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v107, v107, 8uLL), (float64x2_t)xmmword_185004A20), (int32x4_t)vceqq_f64(v108, (float64x2_t)xmmword_185004A20))))) & 1) == 0&& transform.tx == 0.0&& transform.ty == 0.0)
        {
          PDFWriterPrintf(v55, (uint64_t)"/%N Do", v100, v101, v102, v103, v104, v105, (uint64_t)(v19 + 3));
        }
        else if (vmlad_n_f64(-*(double *)&v107.i64[1] * v108.f64[0], v108.f64[1], *(double *)v107.i64) != 0.0)
        {
          PDFWriterPrintf(v55, (uint64_t)"q %*m cm", v100, v101, v102, v103, v104, v105, (uint64_t)&transform);
          PDFWriterPrintf(v55, (uint64_t)"/%N Do", v109, v110, v111, v112, v113, v114, (uint64_t)(v19 + 3));
          PDFWriterPrintf(v55, (uint64_t)"Q", v115, v116, v117, v118, v119, v120, (uint64_t)decodeb);
        }
        PDFWriterAnnotate((uint64_t)v55, (uint64_t)"%s: END: drawing %s.", v100, v101, v102, v103, v104, v105, (uint64_t)"PDFWriteImage");
        CFRelease(Image);
        return;
      }
      v125 = *(char *)(*(_QWORD *)(a2 + 120) + 4);
      NumberOfComponents = CGGStateGetFillColor(a2);
      v29 = NumberOfComponents;
      v126 = v9;
      if (NumberOfComponents)
      {
        if (NumberOfComponents < 0)
          NumberOfComponents = CGTaggedColorGetNumberOfComponents(NumberOfComponents, v22, v23, v24, v25, v26, v27, v28);
        else
          NumberOfComponents = *(_QWORD *)(NumberOfComponents + 56);
      }
      v30 = NumberOfComponents - 1;
      v128 = (uint64_t)Image;
      v31 = *((_QWORD *)Image + 5);
      v32 = *((_QWORD *)Image + 6);
      bytesPerRowa = (NumberOfComponents - 1) * v31;
      v124 = bytesPerRowa * v32;
      v33 = (char *)malloc_type_malloc(bytesPerRowa * v32, 0xEBF36768uLL);
      if (v32)
      {
        for (i = 0; i != v32; ++i)
        {
          if (v31)
          {
            v35 = 0;
            v36 = &v33[i * bytesPerRowa];
            do
            {
              if (v30)
              {
                for (j = 0; j != v30; ++j)
                  v36[j] = (int)(CGColorGetComponents((CGColorRef)v29)[j] * 255.0 + 0.5);
                v36 += j;
              }
              ++v35;
            }
            while (v35 != v31);
          }
        }
      }
      check_clients_buffer("CGDataProviderCreateWithData", v33, v124);
      v45 = CGDataProviderCreateWithDataInternal(0, (uint64_t)v33, v124, (uint64_t)release_data, 0);
      if (v29)
      {
        v9 = v126;
        if ((v29 & 0x8000000000000000) != 0)
          ColorSpace = CGTaggedColorGetColorSpace(v29, v38, v39, v40, v41, v42, v43, v44);
        else
          ColorSpace = *(CGColorSpace **)(v29 + 24);
      }
      else
      {
        ColorSpace = 0;
        v9 = v126;
      }
      v47 = CGImageCreate(v31, v32, 8uLL, 8 * v30, bytesPerRowa, ColorSpace, 0, v45, 0, 1, kCGRenderingIntentDefault);
      CGDataProviderRelease(v45);
      Image = (CGImageRef)v128;
      v48 = CGImageCreateWithMaskAndMatte((uint64_t)v47, v128, 0);
      if (v47)
        CFRelease(v47);
      v19 = PDFDocumentAddImage(*(_QWORD *)v9, (uint64_t)v48, v125);
      if (v48)
        CFRelease(v48);
    }
    else
    {
      v19 = PDFDocumentAddImage(*(_QWORD *)v9, (uint64_t)Image, v18);
    }
    v20 = 0;
    goto LABEL_40;
  }
}

void release_data(int a1, void *a2)
{
  free(a2);
}

void PDFContentStreamDrawGlyphs(uint64_t a1, uint64_t a2, double *a3, unsigned __int16 *a4, double *a5, unint64_t a6, __n128 a7)
{
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const CGPath *v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGGlyph *v30;
  double *v31;
  unint64_t v32;
  double v33;
  double v34;
  CGFont *v35;
  _DWORD *font_info;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  __int128 v48;
  CGFloat x;
  CGFloat y;
  unsigned int v51;
  uint64_t v52;
  CGTextDrawingMode v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  uint64_t FillColor;
  uint64_t v64;
  uint64_t v65;
  double Alpha;
  char *v67;
  double v68;
  uint64_t v69;
  int v70;
  double v71;
  uint64_t StrokeColor;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  __int16 v87;
  double v88;
  double v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  double v94;
  double v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  uint64_t v115;
  const void **v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  const void *v123;
  double v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  const void *v138;
  _QWORD *v139;
  _BYTE **v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t *v157;
  double v158;
  uint64_t *v159;
  CGAffineTransform *v160;
  double v161;
  double v164;
  double v165;
  double v171;
  double v172;
  BOOL v174;
  double v175;
  _BYTE **v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t **v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  double v223;
  double v224;
  uint64_t v225;
  unsigned __int16 *v226;
  double *v227;
  double *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  CGFloat v234;
  double v235;
  double v236;
  double v237;
  double v238;
  CGFloat v239;
  CGGlyph glyphs;
  CGAffineTransform bboxes;
  CGAffineTransform v242;
  uint64_t v243;
  CGPoint v244;
  CGRect v245;
  CGRect v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;
  CGRect v250;
  CGRect v251;

  v227 = a5;
  v226 = a4;
  v228 = a3;
  v243 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a7);
  v230 = (char *)&v225 - v11;
  if (v10 <= 0x7FFFFFFFFFFFFFFELL)
    v13 = (char *)&v225 - v11;
  else
    v13 = 0;
  if (v10 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000102)
    v13 = (char *)malloc_type_malloc(2 * a6, 0x5DCB0CDAuLL);
  v14 = (char *)MEMORY[0x1E0C80A78](v13, v12);
  v23 = (char *)&v223 - v22 + 1;
  v229 = (char *)&v223 - v22 + 1;
  if (v21 > 0xFFFFFFFFFFFFFFELL)
    v23 = 0;
  v233 = v14;
  if (v21 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000102)
    v232 = (char *)malloc_type_malloc(16 * a6, 0xD81386D7uLL);
  else
    v232 = v23;
  v231 = a1;
  v24 = *(const CGPath **)(a1 + 200);
  v25 = a6;
  if (v24)
  {
    v25 = 0;
    v26 = *v228;
    v27 = v228[1];
    v29 = v228[2];
    v28 = v228[3];
    v30 = v226;
    v31 = v227;
    v32 = a6;
    v237 = v228[4];
    v236 = v228[5];
    v235 = v27;
    do
    {
      v33 = *v31;
      v34 = v31[1];
      glyphs = *v30;
      v35 = *(CGFont **)(*(_QWORD *)(a2 + 136) + 8);
      font_info = get_font_info(v35);
      v239 = v33;
      v238 = v34;
      if (font_info)
        v37 = font_info[2];
      else
        v37 = 0;
      v38 = (double)v37;
      v39 = *(double *)(*(_QWORD *)(a2 + 136) + 16) / (double)v37;
      v40 = v26 * v39;
      v41 = v39 * v27;
      v42 = v26;
      v43 = v39 * v29;
      v44 = v29;
      v45 = v39 * v28;
      memset(&bboxes, 0, 32);
      if (CGFontGetGlyphBBoxes(v35, &glyphs, 1uLL, (CGRect *)&bboxes))
      {
        v46 = v42;
        v234 = v237 + v238 * v44 + v42 * v239;
        v47 = v235;
        v245.origin.x = bboxes.a;
        v245.origin.y = bboxes.b;
        v239 = v236 + v238 * v28 + v235 * v239;
        v245.size.width = bboxes.c;
        v245.size.height = bboxes.d;
        v242.a = v40;
        v242.b = v41;
        v242.c = v43;
        v242.d = v45;
        v242.tx = 0.0;
        v242.ty = 0.0;
        v246 = CGRectApplyAffineTransform(v245, &v242);
        v247 = CGRectOffset(v246, v234, v239);
        v26 = v46;
        v27 = v47;
      }
      else
      {
        v248.origin.x = -v38;
        v248.size.width = v38 + v38;
        v242.a = v40;
        v242.b = v41;
        v242.c = v43;
        v242.d = v45;
        v242.tx = 0.0;
        v242.ty = 0.0;
        v248.origin.y = -v38;
        v248.size.height = v38 + v38;
        v249 = CGRectApplyAffineTransform(v248, &v242);
        v27 = v235;
        v251 = CGRectOffset(v249, v237 + v238 * v44 + v42 * v239, v236 + v238 * v28 + v235 * v239);
        v247 = CGRectUnion(v251, v251);
        v26 = v42;
      }
      v29 = v44;
      v48 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)&v242.a = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v242.c = v48;
      *(_OWORD *)&v242.tx = *(_OWORD *)(a2 + 56);
      v250 = CGRectApplyAffineTransform(v247, &v242);
      x = v250.origin.x;
      y = v250.origin.y;
      if ((CGPathIntersectsRect(v24, v250.origin.x, v250.origin.y, v250.size.width, v250.size.height) & 1) == 0)
      {
        v244.x = x;
        v244.y = y;
        if (!CGPathContainsPoint(v24, 0, v244, 0))
        {
          *(_WORD *)&v233[2 * v25] = *v30;
          *(_OWORD *)&v232[16 * v25++] = *(_OWORD *)v31;
        }
      }
      v31 += 2;
      ++v30;
      --v32;
    }
    while (v32);
  }
  if (!v25)
    goto LABEL_34;
  v51 = *(char *)(*(_QWORD *)(a2 + 136) + 1);
  v52 = v231;
  if (*(_BYTE *)(v231 + 169))
    v51 = 3;
  if (v51 >= 8)
  {
LABEL_34:
    v67 = v232;
    if (v233 != v230)
      free(v233);
    if (v67 != v229)
      free(v67);
    return;
  }
  v53 = dword_185001F98[v51];
  v54 = *(_QWORD *)(v231 + 64);
  v224 = *(double *)&off_1E1661248[v51];
  PDFWriterAnnotate(v54, (uint64_t)"%s: BEGIN: %s", v15, v16, v17, v18, v19, v20, (uint64_t)"PDFContentStreamDrawGlyphs");
  PDFGStateSetClipStack(*(_QWORD *)(v52 + 104), *(__CFArray **)(a2 + 112));
  if (*(_BYTE *)(v52 + 169))
    v61 = 3;
  else
    v61 = v53;
  if ((v61 & 1) == 0)
  {
    v62 = *(double *)(*(_QWORD *)(a2 + 120) + 8);
    FillColor = CGGStateGetFillColor(a2);
    PDFGStateSetFillColor(*(_QWORD *)(v52 + 104), FillColor);
    v65 = *(_QWORD *)(v52 + 104);
    if (FillColor)
    {
      if (FillColor < 0)
        Alpha = CGTaggedColorGetAlpha(FillColor, v64, v55, v56, v57, v58, v59, v60);
      else
        Alpha = *(double *)(FillColor + 8 * *(_QWORD *)(FillColor + 56) + 56);
    }
    else
    {
      Alpha = 0.0;
    }
    v68 = v62 * Alpha;
    if (*(double *)(v65 + 168) != v68)
    {
      *(double *)(v65 + 168) = v68;
      addEmitFunction(v65, emitNonStrokeAlphaChange);
    }
    v69 = *(_QWORD *)(v52 + 104);
    v70 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 144) + 24);
    if (*(unsigned __int8 *)(v69 + 200) != v70)
    {
      *(_BYTE *)(v69 + 200) = v70;
      addEmitFunction(v69, emitNonStrokeOverprintChange);
    }
  }
  if ((v61 - 1) <= 1)
  {
    v71 = *(double *)(*(_QWORD *)(a2 + 120) + 8);
    StrokeColor = CGGStateGetStrokeColor(a2);
    PDFGStateSetStrokeColor(*(_QWORD *)(v52 + 104), StrokeColor);
    v80 = *(_QWORD *)(v52 + 104);
    if (StrokeColor)
    {
      if (StrokeColor < 0)
        v81 = CGTaggedColorGetAlpha(StrokeColor, v73, v74, v75, v76, v77, v78, v79);
      else
        v81 = *(double *)(StrokeColor + 8 * *(_QWORD *)(StrokeColor + 56) + 56);
    }
    else
    {
      v81 = 0.0;
    }
    v83 = v71 * v81;
    if (*(double *)(v80 + 176) != v83)
    {
      *(double *)(v80 + 176) = v83;
      addEmitFunction(v80, emitStrokeAlphaChange);
    }
    PDFGStateSetStrokeOverprint(*(_QWORD *)(v52 + 104), *(unsigned __int8 *)(*(_QWORD *)(a2 + 144) + 25));
    v84 = *(_QWORD *)(v52 + 104);
    v85 = *(_QWORD *)(a2 + 128);
    v86 = *(double *)(v85 + 8);
    if (v86 == -1.0905473e16)
      v86 = 0.0;
    if (*(double *)(v84 + 48) != v86)
    {
      *(double *)(v84 + 48) = v86;
      addEmitFunction(v84, emitLineWidthChange);
      v84 = *(_QWORD *)(v52 + 104);
      v85 = *(_QWORD *)(a2 + 128);
    }
    v87 = *(_WORD *)(v85 + 2);
    if (*(_DWORD *)(v84 + 56) != (char)v87)
    {
      *(_DWORD *)(v84 + 56) = (char)v87;
      addEmitFunction(v84, emitLineCapChange);
      v84 = *(_QWORD *)(v52 + 104);
      v85 = *(_QWORD *)(a2 + 128);
      v87 = *(_WORD *)(v85 + 2);
    }
    if (*(_DWORD *)(v84 + 60) != v87 >> 8)
    {
      *(_DWORD *)(v84 + 60) = v87 >> 8;
      addEmitFunction(v84, emitLineJoinChange);
      v84 = *(_QWORD *)(v52 + 104);
      v85 = *(_QWORD *)(a2 + 128);
    }
    v88 = *(double *)(v85 + 16);
    if (*(double *)(v84 + 64) != v88)
    {
      *(double *)(v84 + 64) = v88;
      addEmitFunction(v84, emitMiterLimitChange);
      v84 = *(_QWORD *)(v52 + 104);
      v85 = *(_QWORD *)(a2 + 128);
    }
    PDFGStateSetLineDash(v84, *(unsigned int **)(v85 + 32));
    v82 = *(_QWORD *)(v52 + 104);
    goto LABEL_66;
  }
  v82 = *(_QWORD *)(v52 + 104);
  if (v61 != 3)
  {
LABEL_66:
    v89 = *(double *)(*(_QWORD *)(a2 + 144) + 8);
    if (*(double *)(v82 + 88) != v89)
    {
      *(double *)(v82 + 88) = v89;
      addEmitFunction(v82, emitFlatnessChange);
      v82 = *(_QWORD *)(v52 + 104);
    }
    v90 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 128) + 1);
    if (*(unsigned __int8 *)(v82 + 96) != v90)
    {
      *(_BYTE *)(v82 + 96) = v90;
      addEmitFunction(v82, emitStrokeAdjustChange);
      v82 = *(_QWORD *)(v52 + 104);
    }
    v91 = *(_QWORD *)(a2 + 120);
    v92 = *(_DWORD *)(v91 + 4);
    if ((v92 & 0xF0000) != 0)
      v93 = v92 << 12 >> 28;
    else
      v93 = 2;
    if (*(_DWORD *)(v82 + 80) != v93)
    {
      *(_DWORD *)(v82 + 80) = v93;
      addEmitFunction(v82, emitRenderingIntentChange);
      v82 = *(_QWORD *)(v52 + 104);
      v91 = *(_QWORD *)(a2 + 120);
    }
    v94 = *(double *)(v91 + 24);
    v95 = *(double *)(v91 + 32);
    v96 = *(_OWORD *)(v52 + 136);
    *(_OWORD *)&v242.a = *(_OWORD *)(v52 + 120);
    *(_OWORD *)&v242.c = v96;
    *(_OWORD *)&v242.tx = *(_OWORD *)(v52 + 152);
    PDFGStateSetPatternMatrix(v82, (uint64_t)&v242, v55, v56, v57, v58, v59, v60, v94, v95);
    v103 = *(_QWORD *)(v52 + 104);
    v104 = *(_QWORD *)(a2 + 144);
    v105 = *(double *)(v104 + 16);
    if (*(double *)(v103 + 224) != v105)
    {
      *(double *)(v103 + 224) = v105;
      addEmitFunction(v103, emitSmoothnessChange);
      v103 = *(_QWORD *)(v52 + 104);
      v104 = *(_QWORD *)(a2 + 144);
    }
    PDFGStateSetOverprintMode(v103, *(unsigned int *)(v104 + 28), v97, v98, v99, v100, v101, v102);
    PDFGStateSetBlackGeneration(*(_QWORD *)(v52 + 104), *(CFTypeRef *)(*(_QWORD *)(a2 + 144) + 32));
    PDFGStateSetUndercolorRemoval(*(_QWORD *)(v52 + 104), *(CFTypeRef *)(*(_QWORD *)(a2 + 144) + 40));
    PDFGStateSetStyle(*(_QWORD *)(v52 + 104), *(_QWORD *)(*(_QWORD *)(a2 + 120) + 16));
    PDFGStateSetSoftMask(*(_QWORD *)(v52 + 104), *(CFTypeRef *)(*(_QWORD *)(a2 + 120) + 40));
    v82 = *(_QWORD *)(v52 + 104);
    v106 = (int)(*(_DWORD *)(*(_QWORD *)(a2 + 120) + 4) << 16) >> 24;
    if ((v106 - 13) >= 0xF)
      v106 = 2;
    if (*(_DWORD *)(v82 + 248) != v106)
    {
      *(_DWORD *)(v82 + 248) = v106;
      addEmitFunction(v82, emitBlendModeChange);
      v82 = *(_QWORD *)(v52 + 104);
    }
    if (*(_DWORD *)(v82 + 184) == v61)
      goto LABEL_84;
    *(_DWORD *)(v82 + 184) = v61;
    goto LABEL_83;
  }
  if (*(_DWORD *)(v82 + 184) != 3)
  {
    *(_DWORD *)(v82 + 184) = 3;
LABEL_83:
    addEmitFunction(v82, emitTextDrawingModeChange);
  }
LABEL_84:
  PDFWriterAnnotate(*(_QWORD *)(v52 + 64), (uint64_t)"  BEGIN: synchronizing gstate.", v55, v56, v57, v58, v59, v60, v225);
  PDFGStateEmit(*(CFArrayRef **)(v52 + 104));
  PDFWriterAnnotate(*(_QWORD *)(v52 + 64), (uint64_t)"  END: synchronizing gstate.", v107, v108, v109, v110, v111, v112, v225);
  v113 = PDFDocumentAddFont(*(_QWORD *)v52, *(_QWORD **)(*(_QWORD *)(a2 + 136) + 8));
  v114 = (const void *)v113;
  if (*(_BYTE *)(v52 + 169))
    *(_BYTE *)(v113 + 56) = 1;
  v115 = *(_QWORD *)(v52 + 112);
  if (v115 && v113)
  {
    *(_DWORD *)(v115 + 24) |= 2u;
    v116 = *(const void ***)(v115 + 48);
    if (!v116)
    {
      v116 = CGOrderedSetCreate();
      *(_QWORD *)(v115 + 48) = v116;
    }
    CGOrderedSetAddValue((CFSetRef *)v116, v114);
  }
  v117 = *(_QWORD *)v52;
  v118 = *(_QWORD *)(v52 + 64);
  v119 = malloc_type_calloc(1uLL, 0x58uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *(_DWORD *)v119 = 1;
  v119[1] = v117;
  v119[2] = v118;
  v119[9] = 0;
  v120 = *(_OWORD *)(a2 + 24);
  v121 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v119 + 7) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v119 + 5) = v121;
  *(_OWORD *)(v119 + 3) = v120;
  v122 = *(_QWORD *)(a2 + 136);
  v123 = *(const void **)(v122 + 8);
  v124 = *(double *)(v122 + 16);
  if (v25 >= a6)
  {
    PDFTextLayoutAddGlyphsWithPositions(v119, v123, (uint64_t)v228, v226, v227, a6, v124);
    v125 = v233;
  }
  else
  {
    v125 = v233;
    PDFTextLayoutAddGlyphsWithPositions(v119, v123, (uint64_t)v228, (unsigned __int16 *)v233, v232, v25, v124);
  }
  v133 = (_QWORD *)v119[10];
  if (v133)
  {
    v134 = 0;
    do
    {
      v135 = v133;
      v133 = (_QWORD *)*v133;
      *v135 = v134;
      v134 = v135;
    }
    while (v133);
    v119[10] = 0;
    v136 = v135;
    do
    {
      v137 = v136[1];
      layout_flush_block(v119, v137, v132);
      if (v137)
      {
        v138 = *(const void **)(v137 + 24);
        if (v138)
          CFRelease(v138);
        free(*(void **)(v137 + 8));
        free(*(void **)(v137 + 16));
        free((void *)v137);
      }
      v136 = (_QWORD *)*v136;
    }
    while (v136);
    do
    {
      v139 = (_QWORD *)*v135;
      free(v135);
      v135 = v139;
    }
    while (v139);
  }
  else
  {
    v119[10] = 0;
  }
  v140 = (_BYTE **)v119[2];
  PDFWriterAnnotate((uint64_t)v140, (uint64_t)"BEGIN: begin text object.", v126, v127, v128, v129, v130, v131, v225);
  if (*((double *)v119 + 3) == 1.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)v119 + 2)), (int32x4_t)vceqq_f64(*((float64x2_t *)v119 + 3), (float64x2_t)xmmword_185004990))))) & 1) == 0&& *((double *)v119 + 8) == 0.0)
  {
    v147 = 1;
  }
  else
  {
    PDFWriterPrintf(v140, (uint64_t)"q %*m cm", v141, v142, v143, v144, v145, v146, (uint64_t)(v119 + 3));
    v147 = 0;
  }
  PDFWriterPrintf(v140, (uint64_t)"BT", v141, v142, v143, v144, v145, v146, v225);
  v154 = (_QWORD *)v119[9];
  if (!v154)
  {
    v119[9] = 0;
    goto LABEL_157;
  }
  LODWORD(v239) = v147;
  v155 = 0;
  do
  {
    v156 = v154;
    v154 = (_QWORD *)*v154;
    *v156 = v155;
    v155 = v156;
  }
  while (v154);
  v157 = 0;
  v119[9] = v156;
  v158 = 0.0;
  do
  {
    v159 = (uint64_t *)v156[1];
    if (!v159[9])
      goto LABEL_150;
    if (*((double *)v159 + 8) != v158)
    {
      PDFWriterPrintf(v140, (uint64_t)"%f Tc", v148, v149, v150, v151, v152, v153, v159[8]);
      v158 = *((double *)v159 + 8);
    }
    if (!v157)
    {
      v161 = *((double *)v159 + 7);
LABEL_133:
      if (v161 == 0.0)
        goto LABEL_136;
LABEL_134:
      v223 = v161;
      v179 = v140;
      v180 = "%*m Tm";
      goto LABEL_135;
    }
    v160 = (CGAffineTransform *)v157[7];
    v161 = *((double *)v159 + 7);
    if (!v160 || v161 == 0.0)
      goto LABEL_133;
    bboxes = *v160;
    CGAffineTransformInvert(&v242, &bboxes);
    _V0.D[1] = v242.b;
    _D2 = **(double **)&v161;
    v164 = *(double *)(*(_QWORD *)&v161 + 16);
    v165 = *(double *)(*(_QWORD *)&v161 + 24);
    __asm { FMLA            D3, D2, V0.D[1] }
    v171 = fabs(_D3);
    v172 = fabs(vmlad_n_f64(v165 * v242.c, v164, v242.a));
    v174 = fabs(vmlad_n_f64(*(double *)(*(_QWORD *)&v161 + 8) * v242.c, **(double **)&v161, v242.a) + -1.0) > 0.00000596046448
        || v171 > 0.00000596046448
        || v172 > 0.00000596046448;
    v175 = fabs(v165 * v242.d + v164 * v242.b + -1.0);
    if (v174 || v175 > 0.00000596046448)
      goto LABEL_134;
    _D3 = *(double *)(*(_QWORD *)&v161 + 32);
    __asm { FMLA            D1, D3, V0.D[1] }
    v223 = v242.tx + vmlad_n_f64(*(double *)(*(_QWORD *)&v161 + 40) * v242.c, _D3, v242.a);
    v224 = _D1 + v242.ty;
    v179 = v140;
    v180 = "%f %f Td";
LABEL_135:
    PDFWriterPrintf(v179, (uint64_t)v180, v148, v149, v150, v151, v152, v153, *(uint64_t *)&v223);
LABEL_136:
    PDFWriterPrintf(v140, (uint64_t)"/%s 1 Tf", v148, v149, v150, v151, v152, v153, *v159);
    v187 = (_QWORD *)v159[9];
    if (*v187 || (v198 = v187[1], *(double *)(v198 + 8) != 0.0))
    {
      PDFWriterPrintf(v140, (uint64_t)"[", v181, v182, v183, v184, v185, v186, v225);
      v194 = (_QWORD *)v159[9];
      if (v194)
      {
        v195 = 0;
        do
        {
          v196 = v194;
          v194 = (_QWORD *)*v194;
          *v196 = v195;
          v195 = v196;
        }
        while (v194);
        v159[9] = (uint64_t)v196;
        do
        {
          v197 = v196[1];
          emit_sequence(v140, v197, v188, v189, v190, v191, v192, v193);
          if (*(double *)(v197 + 8) != 0.0)
            PDFWriterPrintf(v140, (uint64_t)"%f", v188, v189, v190, v191, v192, v193, *(_QWORD *)(v197 + 8));
          v196 = (_QWORD *)*v196;
        }
        while (v196);
      }
      else
      {
        v159[9] = 0;
      }
      v199 = "] TJ";
    }
    else
    {
      emit_sequence(v140, v198, v181, v182, v183, v184, v185, v186);
      v199 = "Tj";
    }
    PDFWriterPrintf(v140, (uint64_t)v199, v188, v189, v190, v191, v192, v193, v225);
    v157 = v159;
LABEL_150:
    v156 = (_QWORD *)*v156;
  }
  while (v156);
  LOBYTE(v147) = LOBYTE(v239);
  if (v158 == 0.0)
    v200 = 0;
  else
    v200 = LODWORD(v239);
  v125 = v233;
  if (v200 == 1)
    PDFWriterPrintf(v140, (uint64_t)"0 Tc", v148, v149, v150, v151, v152, v153, v225);
LABEL_157:
  PDFWriterPrintf(v140, (uint64_t)"ET", v148, v149, v150, v151, v152, v153, v225);
  if ((v147 & 1) == 0)
    PDFWriterPrintf(v140, (uint64_t)"Q", v201, v202, v203, v204, v205, v206, v225);
  PDFWriterAnnotate((uint64_t)v140, (uint64_t)"BEGIN: end text object.", v201, v202, v203, v204, v205, v206, v225);
  do
  {
    v213 = __ldxr((unsigned int *)v119);
    v214 = v213 - 1;
  }
  while (__stxr(v214, (unsigned int *)v119));
  v215 = v231;
  if (!v214)
  {
    v216 = (_QWORD *)v119[9];
    if (v216)
    {
      do
      {
        v217 = (_QWORD *)v216[1];
        v218 = (uint64_t **)v217[9];
        if (v218)
        {
          do
          {
            free(v218[1]);
            v218 = (uint64_t **)*v218;
          }
          while (v218);
          v219 = (_QWORD *)v217[9];
          if (v219)
          {
            do
            {
              v220 = (_QWORD *)*v219;
              free(v219);
              v219 = v220;
            }
            while (v220);
          }
        }
        free(v217);
        v216 = (_QWORD *)*v216;
      }
      while (v216);
      v221 = (_QWORD *)v119[9];
      v215 = v231;
      if (v221)
      {
        do
        {
          v222 = (_QWORD *)*v221;
          free(v221);
          v221 = v222;
        }
        while (v222);
      }
    }
    free(v119);
  }
  if (v125 != v230)
    free(v125);
  if (v232 != v229)
    free(v232);
  PDFWriterAnnotate(*(_QWORD *)(v215 + 64), (uint64_t)"%s: END", v207, v208, v209, v210, v211, v212, (uint64_t)"PDFContentStreamDrawGlyphs");
}

void PDFContentStreamBeginTagWithMCID(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const __CFDictionary *StructureTree;
  const __CFDictionary *v12;
  const __CFArray *v13;
  const __CFDictionary *Value;
  const void *v15;
  const void *v16;
  uint64_t valuePtr;
  CGPDFTagType v18;
  uint64_t v19;
  CFArrayRef theArray;

  v10 = *a1;
  if (*(_DWORD *)(*a1 + 544) != 1)
  {
    *(_DWORD *)(v10 + 544) = 2;
    StructureTree = (const __CFDictionary *)CGPDFTaggedPagePropertiesGetStructureTree(a2);
    if (StructureTree)
    {
      v12 = StructureTree;
      theArray = 0;
      StructureElementPathForMCID(StructureTree, a3, &theArray);
      v13 = theArray;
      if (theArray)
      {
        if (CFArrayGetCount(theArray) >= 1)
        {
          if (!*(_QWORD *)(v10 + 568))
          {
            if (CFDictionaryGetCount(v12) < 1)
            {
              *(_QWORD *)(v10 + 568) = PDFDocumentCreateTagNode((PDFDocument *)v10, 0, 100, 0, 0);
            }
            else
            {
              v19 = -1;
              CGCFDictionaryGetNumber(v12, CFSTR("TagNodeMCID"), kCFNumberSInt64Type, &v19);
              v18 = CGPDFTagTypeDiv;
              CGCFDictionaryGetInteger(v12, CFSTR("TagNodeType"), &v18);
              Value = (const __CFDictionary *)CFDictionaryGetValue(v12, CFSTR("TagNodeProperties"));
              *(_QWORD *)(v10 + 568) = PDFDocumentCreateTagNode((PDFDocument *)v10, v19, v18, Value, 0);
              valuePtr = -1;
              CGCFDictionaryGetNumber(v12, CFSTR("TagNodeObjectRefID"), kCFNumberSInt64Type, &valuePtr);
              CGCFDictionarySetNumber(*(__CFDictionary **)(v10 + 568), CFSTR("TagNodeObjectRefID"), kCFNumberSInt64Type, &valuePtr);
              v15 = CFDictionaryGetValue(v12, CFSTR("ID"));
              if (v15)
              {
                v16 = v15;
                if (CFGetTypeID(v15) == 134217984)
                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v10 + 568), CFSTR("ID"), v16);
              }
            }
          }
          PDFDocumentInsertStructureElementPath((PDFDocument *)v10, v13);
          CFRelease(v13);
        }
      }
    }
  }
  ++a1[22];
  PDFWriterPrintf((_BYTE **)a1[8], (uint64_t)"/P << /MCID %d >> BDC", a3, a4, a5, a6, a7, a8, a3);
}

void PDFContentStreamBeginAccessibilitySpan(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  const void *v7;
  CFTypeID TypeID;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE ***v15;
  _BYTE **v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[13];

  v4 = 0;
  v5 = 0;
  v21[12] = *MEMORY[0x1E0C80C00];
  v21[0] = CFSTR("CGPDFTagPropertyAlternativeText");
  v21[1] = "Alt";
  v21[2] = 0;
  v21[3] = CFSTR("CGPDFTagPropertyActualText");
  v21[4] = "ActualText";
  v21[5] = 0;
  v21[6] = CFSTR("CGPDFTagPropertyLanguageText");
  v21[7] = "Lang";
  v21[8] = 0;
  v21[9] = CFSTR("CGPDFTagPropertyExpansionText");
  v21[10] = "E";
  v21[11] = 0;
LABEL_2:
  v6 = 3 * v4;
  do
  {
    v20 = 0;
    v7 = (const void *)v21[v6];
    TypeID = CFStringGetTypeID();
    if ((CGCFDictionaryGetCFTypeRef(a2, v7, TypeID, &v20) & 1) != 0)
    {
      v21[3 * v4++ + 2] = v20;
      v5 = 1;
      if (v4 != 4)
        goto LABEL_2;
      goto LABEL_9;
    }
    ++v4;
    v6 += 3;
  }
  while (v4 != 4);
  if ((v5 & 1) == 0)
  {
    v15 = (_BYTE ***)(a1 + 64);
    v18 = "/Span BDC";
    goto LABEL_15;
  }
LABEL_9:
  v16 = *(_BYTE ***)(a1 + 64);
  v15 = (_BYTE ***)(a1 + 64);
  PDFWriterPrintf(v16, (uint64_t)"/Span <<", v9, v10, v11, v12, v13, v14, v19);
  v17 = 0;
  v18 = ">> BDC";
  do
  {
    if (v21[v17 + 2])
      PDFWriterPrintf(*v15, (uint64_t)"/%s %T", v9, v10, v11, v12, v13, v14, v21[v17 + 1]);
    v17 += 3;
  }
  while (v17 != 12);
LABEL_15:
  PDFWriterPrintf(*v15, (uint64_t)v18, v9, v10, v11, v12, v13, v14, v19);
}

_QWORD *list_sort_1(_QWORD *result, unint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a2 >= 2)
  {
    v3 = a2 >> 1;
    v4 = result;
    v5 = (a2 >> 1) - 1;
    if (a2 >> 1 != 1)
    {
      v4 = result;
      do
      {
        v4 = (_QWORD *)v4[1];
        --v5;
      }
      while (v5);
    }
    v6 = v4[1];
    v4[1] = 0;
    v7 = (_QWORD *)list_sort_1(result, a2 >> 1);
    result = (_QWORD *)list_sort_1(v6, a2 - v3);
    v8 = *result;
    v9 = *v7;
    if (*result)
      LODWORD(v8) = *(_DWORD *)(v8 + 4);
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    if (v8 <= v9)
    {
      v11 = (_QWORD *)v7[1];
      v10 = result;
      result = v7;
    }
    else
    {
      v10 = (_QWORD *)result[1];
      v11 = v7;
    }
    v12 = v11 != 0;
    if (v11 && v10)
    {
      v13 = result;
      do
      {
        v14 = *v10;
        if (*v10)
          LODWORD(v14) = *(_DWORD *)(v14 + 4);
        v15 = *v11;
        if (*v11)
          LODWORD(v15) = *(_DWORD *)(v15 + 4);
        if (v14 <= v15)
        {
          v13[1] = v11;
          v17 = (_QWORD *)v11[1];
          v16 = v10;
          v13 = v11;
        }
        else
        {
          v13[1] = v10;
          v16 = (_QWORD *)v10[1];
          v17 = v11;
          v13 = v10;
        }
        v12 = v17 != 0;
        if (!v17)
          break;
        v10 = v16;
        v11 = v17;
      }
      while (v16);
    }
    else
    {
      v17 = v11;
      v16 = v10;
      v13 = result;
    }
    if (v12)
      v18 = v17;
    else
      v18 = v16;
    v13[1] = v18;
  }
  return result;
}

uint64_t CGGStateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
  }
  return result;
}

void handle_invalid_context(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  if (handle_invalid_context_predicate != -1)
    dispatch_once(&handle_invalid_context_predicate, &__block_literal_global_17933);
  if (handle_invalid_context_show_log)
  {
    v16 = CGBacktraceCreate(0);
    CGPostError((uint64_t)"%s: invalid context %p. Backtrace:\n%s\n", v9, v10, v11, v12, v13, v14, v15, a1);
    free(v16);
  }
  else
  {
    CGPostError((uint64_t)"%s: invalid context %p. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\n", a2, a3, a4, a5, a6, a7, a8, a1);
  }
}

char *__handle_invalid_context_block_invoke()
{
  char *result;

  result = getenv("CG_CONTEXT_SHOW_BACKTRACE");
  handle_invalid_context_show_log = result != 0;
  return result;
}

char *__handle_invalid_numerics_block_invoke()
{
  char *result;

  result = getenv("CG_NUMERICS_SHOW_BACKTRACE");
  handle_invalid_numerics_show_log = result != 0;
  return result;
}

uint64_t converter_provider_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;

  if (*(_DWORD *)(a1 + 16))
    _CGHandleAssert("converter_provider_finalize", 60, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGConvertColorDataWithFormat.c", "CGAtomicGet(&converter->retain_count) == 0", "retain count %d", a6, a7, a8, *(_DWORD *)(a1 + 16));
  v9 = *(uint64_t **)(a1 + 88);
  if (v9)
    CGAccessSessionRelease(v9);
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
}

CFStringRef converter_copy_format_description_18002(uint64_t a1)
{
  const void *v1;
  CFStringRef v2;
  int v4;
  char *v5;

  v1 = *(const void **)(a1 + 88);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = 0;
  asprintf(&v5, "CGColorDataConverterRef: %p session: %p retain count: %d\n", (const void *)a1, v1, v4);
  v2 = CFStringCreateWithFormat(0, 0, CFSTR("%s\n%@"), v5, &stru_1E1664C98);
  free(v5);
  return v2;
}

uint64_t converter_retain_count(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  const __CFAllocator *v14;

  if (a1 == -1)
  {
    v12 = a2 + 4;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 - 1, v12));
    if (v13 == 1)
    {
      converter_provider_finalize((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v14 = CFGetAllocator(a2);
      CFAllocatorDeallocate(v14, a2);
    }
    return 0;
  }
  if (!a1)
    return a2[4];
  if (a1 != 1)
    return 0;
  v9 = a2 + 4;
  do
  {
    v10 = __ldxr(v9);
    result = v10 + 1;
  }
  while (__stxr(result, v9));
  return result;
}

BOOL CGConvertColorDataWithFormat(size_t width, size_t height, void *dst_data, CGColorDataFormat *dst_format, void *src_data, CGColorDataFormat *src_format, CFDictionaryRef options)
{
  __int128 v7;
  __int128 v8;
  _OWORD v10[3];
  CGFloat *v11;
  _OWORD v12[3];
  CGFloat *decode;

  v7 = *(_OWORD *)&dst_format->bitmap_info;
  v12[0] = *(_OWORD *)&dst_format->version;
  v12[1] = v7;
  v12[2] = *(_OWORD *)&dst_format->bytes_per_row;
  decode = dst_format->decode;
  v8 = *(_OWORD *)&src_format->bitmap_info;
  v10[0] = *(_OWORD *)&src_format->version;
  v10[1] = v8;
  v10[2] = *(_OWORD *)&src_format->bytes_per_row;
  v11 = src_format->decode;
  return convert_color_data_with_format(0, width, (CGDataProvider *)height, (char *)dst_data, (uint64_t)v12, src_data, (uint64_t)v10, options);
}

BOOL convert_color_data_with_format(uint64_t *a1, vImagePixelCount a2, CGDataProvider *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8)
{
  uint64_t v16;
  pthread_mutex_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BOOL8 converted_data;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CGDataProviderRef v28;
  CGDataProvider *v29;
  CGColorSpaceRef v30;
  CGColorSpaceRef v31;
  CFDictionaryRef v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  unsigned int v44;
  CGDataProvider *v45;
  CGDataProvider *v46;
  uint64_t *v47;
  pthread_mutexattr_t v48;
  uint64_t v49;
  pthread_mutexattr_t v50;
  uint64_t v51;
  pthread_mutexattr_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t Instance;
  uint64_t v66;
  _QWORD *v68;
  CFDictionaryRef cf;
  char *v70;
  _OWORD v71[19];
  _OWORD v72[19];
  _OWORD __src[19];
  pthread_mutexattr_t __dst[19];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (a1 && (v16 = *a1) != 0)
  {
    v17 = (pthread_mutex_t *)(v16 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v16 + 24));
    v18 = *(_QWORD *)(v16 + 88);
    v19 = *(_QWORD *)(v16 + 96);
    v20 = *(_QWORD *)(v16 + 104);
    v21 = *(_OWORD *)(a5 + 16);
    __src[0] = *(_OWORD *)a5;
    __src[1] = v21;
    __src[2] = *(_OWORD *)(a5 + 32);
    *(_QWORD *)&__src[3] = *(_QWORD *)(a5 + 48);
    v22 = *(_OWORD *)(a7 + 16);
    v72[0] = *(_OWORD *)a7;
    v72[1] = v22;
    v72[2] = *(_OWORD *)(a7 + 32);
    *(_QWORD *)&v72[3] = *(_QWORD *)(a7 + 48);
    converted_data = session_get_converted_data(v18, a2, (uint64_t)a3, a4, (uint64_t)__src, v19, (uint64_t)v72, v20);
    pthread_mutex_unlock(v17);
  }
  else
  {
    v24 = *(_OWORD *)(a7 + 16);
    __src[0] = *(_OWORD *)a7;
    __src[1] = v24;
    __src[2] = *(_OWORD *)(a7 + 32);
    *(_QWORD *)&__src[3] = *(_QWORD *)(a7 + 48);
    v25 = bits_per_pixel_from_format((uint64_t)__src) * a2 + 7;
    v26 = v25 >> 3;
    if (*(_QWORD *)(a7 + 32))
      v26 = *(_QWORD *)(a7 + 32);
    v27 = v26 * ((_QWORD)a3 - 1) + (v25 >> 3);
    check_clients_buffer("CGDataProviderCreateWithData", a6, v27);
    v28 = CGDataProviderCreateWithDataInternal(0, (uint64_t)a6, v27, 0, 0);
    if (v28)
    {
      v29 = v28;
      v70 = a4;
      v30 = colorspace_from_info(*(CFTypeRef *)(a5 + 8));
      v31 = colorspace_from_info(*(CFTypeRef *)(a7 + 8));
      v32 = CGColorConversionInfoResolveOptions((uint64_t)v31, *(_DWORD *)(a7 + 16), a8);
      if (!a8 || v32)
      {
        cf = v32;
        v33 = color_transform_create(v30, v32);
        if (v33)
        {
          v68 = (_QWORD *)v33;
          memset(__src, 0, sizeof(__src));
          v34 = *(_DWORD *)(a5 + 16);
          v35 = *(_QWORD *)(a5 + 24);
          v36 = component_from_format(v34, v35);
          if (v30)
            v37 = *(_QWORD *)(*((_QWORD *)v30 + 3) + 40);
          else
            v37 = 0;
          CGBitmapPixelInfoInitialize(__src, (char *)__src, v36, v35, v37, v34 & 0x1F, v34 & 0x7000, v34 & 0xF0000, *(_QWORD *)(a5 + 48));
          memset(v72, 0, sizeof(v72));
          v38 = *(_DWORD *)(a7 + 16);
          v39 = *(_QWORD *)(a7 + 24);
          v40 = component_from_format(v38, v39);
          if (v31)
            v41 = *(_QWORD *)(*((_QWORD *)v31 + 3) + 40);
          else
            v41 = 0;
          CGBitmapPixelInfoInitialize(v72, (char *)v72, v40, v39, v41, v38 & 0x1F, v38 & 0x7000, v38 & 0xF0000, *(_QWORD *)(a7 + 48));
          v42 = *(_QWORD *)(a5 + 32);
          v43 = *(_QWORD *)(a7 + 32);
          v44 = *(_DWORD *)(a7 + 40);
          memcpy(__dst, __src, sizeof(__dst));
          memcpy(v71, v72, sizeof(v71));
          v45 = (CGDataProvider *)CGDataProviderCreateForDestination(v68, a2, a3, (uint64_t)__dst, v42, v29, v31, v71, v43, v44);
          if (v45)
          {
            v46 = v45;
            v47 = CGAccessSessionCreate(v45);
            v48 = *(pthread_mutexattr_t *)(a7 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a7;
            __dst[1] = v48;
            __dst[2] = *(pthread_mutexattr_t *)(a7 + 32);
            __dst[3].__sig = *(_QWORD *)(a7 + 48);
            v49 = bits_per_pixel_from_format((uint64_t)__dst);
            v50 = *(pthread_mutexattr_t *)(a5 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a5;
            __dst[1] = v50;
            __dst[2] = *(pthread_mutexattr_t *)(a5 + 32);
            __dst[3].__sig = *(_QWORD *)(a5 + 48);
            v51 = bits_per_pixel_from_format((uint64_t)__dst);
            v52 = *(pthread_mutexattr_t *)(a5 + 16);
            __dst[0] = *(pthread_mutexattr_t *)a5;
            __dst[1] = v52;
            __dst[2] = *(pthread_mutexattr_t *)(a5 + 32);
            __dst[3].__sig = *(_QWORD *)(a5 + 48);
            v53 = *(_OWORD *)(a7 + 16);
            v71[0] = *(_OWORD *)a7;
            v71[1] = v53;
            v71[2] = *(_OWORD *)(a7 + 32);
            v54 = *(_QWORD *)(a7 + 48);
            v55 = v51;
            *(_QWORD *)&v71[3] = v54;
            v56 = a2;
            v57 = v49;
            v58 = session_get_converted_data((_BOOL8)v47, v56, (uint64_t)a3, v70, (uint64_t)__dst, v51, (uint64_t)v71, v49);
            converted_data = v58;
            if (a1)
            {
              if (v58)
              {
                if (kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once != -1)
                  dispatch_once(&kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once, &__block_literal_global_9_17998);
                Instance = CGTypeCreateInstance(CGColorDataConverterGetTypeID_id, 96, v59, v60, v61, v62, v63, v64);
                v66 = Instance;
                if (Instance)
                {
                  *(_QWORD *)(Instance + 88) = v47;
                  *(_QWORD *)(Instance + 96) = v55;
                  *(_QWORD *)(Instance + 104) = v57;
                  *(_DWORD *)(Instance + 16) = 1;
                  __dst[0] = 0uLL;
                  pthread_mutexattr_init(__dst);
                  pthread_mutexattr_settype(__dst, 2);
                  pthread_mutex_init((pthread_mutex_t *)(v66 + 24), __dst);
                  pthread_mutexattr_destroy(__dst);
                }
                *a1 = v66;
              }
            }
            else
            {
              CGAccessSessionRelease(v47);
            }
            CGDataProviderRelease(v46);
          }
          else
          {
            converted_data = 0;
          }
          CFRelease(v68);
        }
        else
        {
          converted_data = 0;
        }
        if (cf)
          CFRelease(cf);
      }
      else
      {
        converted_data = 0;
      }
      CGDataProviderRelease(v29);
    }
    else
    {
      return 0;
    }
  }
  return converted_data;
}

uint64_t bits_per_pixel_from_format(uint64_t a1)
{
  CGColorSpaceRef v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = colorspace_from_info(*(CFTypeRef *)(a1 + 8));
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 == 5)
  {
    if ((v3 & 0xF0000) != 0)
      return 16;
    else
      return 15;
  }
  else
  {
    if (v2)
      v6 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 40);
    else
      v6 = 0;
    if ((v3 & 0x1F) != 0)
      v7 = v6 + 1;
    else
      v7 = v6;
    return v7 * v4;
  }
}

CGColorSpaceRef colorspace_from_info(CFTypeRef cf)
{
  CFTypeID v2;

  if (!cf)
    return (CGColorSpaceRef)cf;
  v2 = CFGetTypeID(cf);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v2 != CGColorSpaceGetTypeID_type_id)
    return CGColorSpaceCreateWithPropertyList(cf);
  else
    return (CGColorSpaceRef)cf;
}

uint64_t component_from_format(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v3;

  result = 0;
  switch(a2)
  {
    case 1:
      result = 7;
      break;
    case 2:
      result = 8;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      result = 9;
      break;
    case 8:
      result = 1;
      break;
    default:
      v3 = 3;
      if (a2 != 32)
        v3 = 0;
      if (a2 == 16)
        result = 2;
      else
        result = v3;
      break;
  }
  return result;
}

BOOL session_get_converted_data(_BOOL8 result, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (result)
  {
    v15 = (uint64_t *)result;
    CGAccessSessionRewind(result);
    v17 = (unint64_t)(a8 * a2 + 7) >> 3;
    v18 = *(_QWORD *)(a7 + 32);
    if (v18)
      v19 = v18 >= v17;
    else
      v19 = 1;
    if (v19 && ((v20 = (unint64_t)(a6 * a2 + 7) >> 3, (v21 = *(_QWORD *)(a5 + 32)) == 0) || v21 >= v20))
    {
      v22 = v18 - v17;
      if (v18)
        v23 = v22;
      else
        v23 = 0;
      if (v21)
        v24 = v21 - v20;
      else
        v24 = 0;
      return CGAccessSessionGetChunksAtPosition(v15, 0, v20, v23, a3, a4, v24, v16) == v20 * a3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CGConvertColorData(uint64_t *a1, vImagePixelCount a2, CGDataProvider *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8)
{
  __int128 v8;
  __int128 v9;
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;

  v8 = *(_OWORD *)(a5 + 16);
  v13[0] = *(_OWORD *)a5;
  v13[1] = v8;
  v13[2] = *(_OWORD *)(a5 + 32);
  v14 = *(_QWORD *)(a5 + 48);
  v9 = *(_OWORD *)(a7 + 16);
  v11[0] = *(_OWORD *)a7;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a7 + 32);
  v12 = *(_QWORD *)(a7 + 48);
  return convert_color_data_with_format(a1, a2, a3, a4, (uint64_t)v13, a6, (uint64_t)v11, a8);
}

void CGColorDataConverterRelease(const void *a1)
{
  CFTypeID v2;

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once != -1)
      dispatch_once(&kCGConvertColorDataUseColorSyncForToneMapping_block_invoke_once, &__block_literal_global_9_17998);
    if (v2 == CGColorDataConverterGetTypeID_id)
      CFRelease(a1);
  }
}

_DWORD *shadingRetain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void shadingRelease(int a1, _QWORD *a2)
{
  PDFShadingRelease(a2);
}

void emitShadingDefinition(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const CGRect *v23;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v27;
  double v28;
  double width;
  PDFDocumentPrivate *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127[4];

  if (!*(_BYTE *)(a1 + 48))
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      if ((*(_DWORD *)(v10 + 20) - 1) <= 3)
      {
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), a3, a4, a5, a6, a7, a8);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v123);
        v23 = &CGRectInfinite;
        p_height = &CGRectInfinite.size.height;
        p_y = &CGRectInfinite.origin.y;
        if (*(_BYTE *)(v10 + 40))
          p_size = (CGSize *)(v10 + 64);
        else
          p_size = &CGRectInfinite.size;
        if (*(_BYTE *)(v10 + 40))
        {
          p_y = (CGFloat *)(v10 + 56);
          v23 = (const CGRect *)(v10 + 48);
          p_height = (CGFloat *)(v10 + 72);
        }
        v27 = *p_height;
        v28 = *p_y;
        width = p_size->width;
        v127[0] = v23->origin.x;
        v127[1] = v28;
        v127[2] = width;
        v127[3] = v27;
        if (v127[0] != -8.98846567e307 || v28 != -8.98846567e307 || width != 1.79769313e308 || v27 != 1.79769313e308)
          PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BBox %r", v17, v18, v19, v20, v21, v22, (uint64_t)v127);
        v33 = PDFDocumentResolveColorSpace(*(_QWORD *)(a1 + 8), *(CGColorSpace **)(v10 + 24));
        v34 = PDFDocumentAddColorSpace(*(_QWORD *)(a1 + 8), v33);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ColorSpace", v35, v36, v37, v38, v39, v40, v124);
        PDFColorSpaceEmitReference(v34, v41, v42, v43, v44, v45, v46, v47);
        if (v33)
          v54 = *(_QWORD *)(*((_QWORD *)v33 + 3) + 40);
        else
          v54 = 0;
        v55 = *(uint64_t **)(v10 + 32);
        if (v55)
        {
          PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Background [", v48, v49, v50, v51, v52, v53, v125);
          if (v54)
          {
            v62 = v54;
            do
            {
              v63 = *v55++;
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%f", v56, v57, v58, v59, v60, v61, v63);
              --v62;
            }
            while (v62);
          }
          PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v56, v57, v58, v59, v60, v61, v126);
        }
        v64 = *(_DWORD *)(v10 + 20);
        switch(v64)
        {
          case 1:
            v73 = *(_QWORD *)(a1 + 16);
            if (v73 && (*(_DWORD *)(v73 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ShadingType 2", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Coords [ %f %f %f %f ]", v74, v75, v76, v77, v78, v79, *(_QWORD *)(v73 + 120));
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Domain [ %f %f ]", v80, v81, v82, v83, v84, v85, *(_QWORD *)(v73 + 168));
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Extend [ %b %b ]", v86, v87, v88, v89, v90, v91, *(unsigned __int8 *)(v73 + 136));
            }
            v72 = (uint64_t *)(v10 + 184);
            break;
          case 2:
            v92 = *(_QWORD *)(a1 + 16);
            if (v92 && (*(_DWORD *)(v92 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ShadingType 3", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Coords [ %f %f %f %f %f %f ]", v93, v94, v95, v96, v97, v98, *(_QWORD *)(v92 + 120));
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Domain [ %f %f ]", v99, v100, v101, v102, v103, v104, *(_QWORD *)(v92 + 184));
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Extend [ %b %b ]", v105, v106, v107, v108, v109, v110, *(unsigned __int8 *)(v92 + 144));
            }
            v72 = (uint64_t *)(v10 + 200);
            break;
          case 4:
            v65 = *(_QWORD *)(a1 + 16);
            if (v65 && (*(_DWORD *)(v65 + 20) - 1) <= 3)
            {
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ShadingType 1", v48, v49, v50, v51, v52, v53, v125);
              PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Domain [ %f %f %f %f ]", v66, v67, v68, v69, v70, v71, *(_QWORD *)(v65 + 120));
            }
            v72 = (uint64_t *)(v10 + 152);
            break;
          default:
LABEL_49:
            PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v48, v49, v50, v51, v52, v53, v125);
            PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v116, v117, v118, v119, v120, v121, v122);
            *(_QWORD *)(a1 + 16) = 0;
            CFRelease((CFTypeRef)v10);
            *(_BYTE *)(a1 + 48) = 1;
            goto LABEL_2;
        }
        v111 = *v72;
        if (*v72)
        {
          v112 = *(_QWORD *)(a1 + 8);
          v113 = v54 - 1;
          v114 = *(uint64_t **)(v112 + 368);
          if (!v114)
          {
            v114 = PDFFunctionSetCreate(*(_QWORD *)(a1 + 8));
            *(_QWORD *)(v112 + 368) = v114;
          }
          v115 = PDFFunctionSetAddFunctionWithRange(v114, v111, v113, 1);
          if (v115)
            PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/Function %R", v115[6], v49, v50, v51, v52, v53);
        }
        goto LABEL_49;
      }
    }
  }
LABEL_2:
  *a2 = 1;
}

_BYTE *emit_empty_image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v9 = *(_QWORD *)(a1 + 16);
  PDFDocumentBeginObject(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(_QWORD *)v9, (uint64_t)"<<", v10, v11, v12, v13, v14, v15, v60);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /XObject", v16, v17, v18, v19, v20, v21, v61);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Subtype /Image", v22, v23, v24, v25, v26, v27, v62);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Width 1", v28, v29, v30, v31, v32, v33, v63);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Height 1", v34, v35, v36, v37, v38, v39, v64);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BitsPerComponent 1", v40, v41, v42, v43, v44, v45, v65);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ColorSpace /DeviceGray", v46, v47, v48, v49, v50, v51, v66);
  if (*(_QWORD *)(a1 + 104) != -1)
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/StructParent %d", v52, v53, v54, v55, v56, v57, *(_QWORD *)(a1 + 104));
  v58 = *(_QWORD *)(a1 + 56);
  if (v58)
    PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/AAPL:EPSData %R", v58, v53, v54, v55, v56, v57);
  if (*(_QWORD *)(a1 + 96))
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/AAPL:ImageTag %T", v58, v53, v54, v55, v56, v57, *(_QWORD *)(a1 + 96));
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  CGDataConsumerPutBytes(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)&unk_185001FC0, 1);
  PDFStreamEndData(*(_QWORD **)(a1 + 16));
  return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
}

void emit_interpolation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v10 + 91))
  {
    v11 = *(_DWORD *)(a1 + 44);
    if ((v11 - 2) >= 2)
    {
      if (v11 == 1 || !CGImageGetShouldInterpolate(*(CGImageRef *)(a1 + 48)))
        return;
      v10 = *(_QWORD *)(a1 + 8);
    }
    PDFDocumentPrintf(v10, (uint64_t)"/Interpolate true", a3, a4, a5, a6, a7, a8, a9);
  }
}

void emit_decode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    v9 = a3;
    v10 = a2;
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Decode [", a3, a4, a5, a6, a7, a8, v19);
    for (; v9; --v9)
    {
      v18 = *v10++;
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%f", v12, v13, v14, v15, v16, v17, v18);
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v12, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t emit_jpeg_data(uint64_t a1)
{
  const __CFData *v2;
  uint64_t v3;
  const UInt8 *BytePtr;
  CFIndex Length;

  PDFStreamSetFilter(*(_QWORD *)(a1 + 16), "DCTDecode");
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  v2 = *(const __CFData **)(a1 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    BytePtr = CFDataGetBytePtr(v2);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 80));
    CGDataConsumerPutBytes(*(_QWORD *)(v3 + 24), (uint64_t)BytePtr, Length);
  }
  return PDFStreamEndData(*(_QWORD **)(a1 + 16));
}

uint64_t emit_jpeg2000_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  _DWORD *v11;
  const __CFData *v12;
  uint64_t v13;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v17;

  if (a2 && (*(_BYTE *)(a2 + 39) & 4) != 0 && !*(_QWORD *)(a2 + 176))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(v9 + 4);
    if (v10 <= 0)
    {
      *(_DWORD *)(v9 + 4) = 1;
      v11 = (_DWORD *)(v9 + 8);
    }
    else
    {
      if (v10 != 1)
        goto LABEL_10;
      v11 = (_DWORD *)(v9 + 8);
      if (*(int *)(v9 + 8) > 4)
        goto LABEL_10;
    }
    *v11 = 5;
    v9 = *(_QWORD *)(a1 + 8);
LABEL_10:
    PDFDocumentPrintf(v9, (uint64_t)"/SMaskInData 1", a3, a4, a5, a6, a7, a8, v17);
  }
  PDFStreamSetFilter(*(_QWORD *)(a1 + 16), "JPXDecode");
  PDFStreamBeginData(*(CGDataConsumerRef *)(a1 + 16));
  v12 = *(const __CFData **)(a1 + 80);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
    BytePtr = CFDataGetBytePtr(v12);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 80));
    CGDataConsumerPutBytes(*(_QWORD *)(v13 + 24), (uint64_t)BytePtr, Length);
  }
  return PDFStreamEndData(*(_QWORD **)(a1 + 16));
}

_BYTE *emit_image(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CGColorSpaceRef ColorSpace;
  uint64_t v57;
  PDFDocumentPrivate *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *Decode;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int32 v87;
  uint64_t v88;
  _QWORD *Mask;
  uint64_t v90;
  CGColorSpaceRef v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  CGColorRef v101;
  uint64_t v102;
  int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  double *MaskingColors;
  CGColorSpaceRef v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  CGFloat components[2];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 16);
  PDFDocumentBeginObject(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf(*(_QWORD *)v10, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v149);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /XObject", v17, v18, v19, v20, v21, v22, v150);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Subtype /Image", v23, v24, v25, v26, v27, v28, v151);
  v35 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    PDFDocumentPrintf(v35, (uint64_t)"/Width %z", v29, v30, v31, v32, v33, v34, a2[5]);
    v42 = a2[6];
  }
  else
  {
    PDFDocumentPrintf(v35, (uint64_t)"/Width %z", v29, v30, v31, v32, v33, v34, 0);
    v42 = 0;
  }
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Height %z", v36, v37, v38, v39, v40, v41, v42);
  emit_interpolation(a1, v43, v44, v45, v46, v47, v48, v49, v152);
  if (*(_QWORD *)(a1 + 104) != -1)
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/StructParent %d", v50, v51, v52, v53, v54, v55, *(_QWORD *)(a1 + 104));
  if (!*(_BYTE *)(a1 + 73) && !*(_BYTE *)(a1 + 74) || (ColorSpace = *(CGColorSpaceRef *)(a1 + 88)) == 0)
    ColorSpace = CGImageGetColorSpace((CGImageRef)a2);
  v57 = *(_QWORD *)(a1 + 8);
  v58 = PDFDocumentResolveColorSpace(v57, ColorSpace);
  v59 = PDFDocumentAddColorSpace(v57, v58);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/ColorSpace", v60, v61, v62, v63, v64, v65, v153);
  PDFColorSpaceEmitReference(v59, v66, v67, v68, v69, v70, v71, v72);
  if (CGImageGetDecode((CGImageRef)a2))
  {
    if (ColorSpace)
      v73 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
    else
      v73 = 0;
    v74 = 2 * v73;
    Decode = (uint64_t *)CGImageGetDecode((CGImageRef)a2);
    emit_decode(a1, Decode, v74, v76, v77, v78, v79, v80, v154);
  }
  v87 = CGImageGetRenderingIntent((CGImageRef)a2) - 1;
  if (v87 <= 3)
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)off_1E1661390[v87], v81, v82, v83, v84, v85, v86, v154);
  v88 = *(_QWORD *)(a1 + 56);
  if (v88)
    PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/AAPL:EPSData %R", v88, v82, v83, v84, v85, v86);
  Mask = CGImageGetMask(a2);
  if (Mask)
  {
    v90 = (uint64_t)Mask;
    if (!CGImageGetMatte(a2))
    {
      v100 = PDFDocumentAddSMask(*(_QWORD *)(a1 + 8), v90, 0, *(_DWORD *)(a1 + 44));
      goto LABEL_32;
    }
    v91 = CGImageGetColorSpace((CGImageRef)a2);
    if (ColorSpace)
    {
      v92 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
      if (v91)
      {
LABEL_23:
        v93 = *(_QWORD *)(*((_QWORD *)v91 + 3) + 40);
        goto LABEL_27;
      }
    }
    else
    {
      v92 = 0;
      if (v91)
        goto LABEL_23;
    }
    v93 = 0;
LABEL_27:
    if (v92 == v93)
    {
      v165 = 0;
      v163 = 0u;
      v164 = 0u;
      v161 = 0u;
      v162 = 0u;
      v159 = 0u;
      v160 = 0u;
      *(_OWORD *)components = 0u;
      v158 = 0u;
      CGImageGetMatte(a2);
      __memcpy_chk();
      components[v92] = 1.0;
      v101 = CGColorCreate(ColorSpace, components);
    }
    else
    {
      v101 = 0;
    }
    v100 = PDFDocumentAddSMask(*(_QWORD *)(a1 + 8), v90, v101, *(_DWORD *)(a1 + 44));
    if (v101)
      CFRelease(v101);
LABEL_32:
    if (!v100)
      goto LABEL_43;
    v102 = *(_QWORD *)(a1 + 8);
    v103 = *(_DWORD *)(v102 + 4);
    if (v103 <= 0)
    {
      *(_DWORD *)(v102 + 4) = 1;
      v104 = (_DWORD *)(v102 + 8);
    }
    else if (v103 != 1 || (v104 = (_DWORD *)(v102 + 8), *(int *)(v102 + 8) > 3))
    {
LABEL_39:
      PDFDocumentPrintf(v102, (uint64_t)"/SMask", v94, v95, v96, v97, v98, v99, v154);
      v110 = v100[2];
      if (v110)
        v111 = *(_QWORD *)(v110 + 8);
      else
        v111 = 0;
      PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"%R", v111, v105, v106, v107, v108, v109);
      goto LABEL_43;
    }
    *v104 = 4;
    v102 = *(_QWORD *)(a1 + 8);
    goto LABEL_39;
  }
LABEL_43:
  if (!CGImageGetMaskingColors(a2))
    goto LABEL_64;
  if (!a2)
  {
    v118 = 0;
LABEL_51:
    v119 = 8;
    goto LABEL_52;
  }
  v118 = a2[7];
  if (v118 - 1 >= 8)
  {
    if (v118 > 0x20)
    {
      if (*(_BYTE *)(a1 + 73))
      {
        v120 = *(_QWORD *)(a1 + 8);
        goto LABEL_66;
      }
      if (*(_BYTE *)(a1 + 74))
      {
        v140 = *(_QWORD *)(a1 + 8);
        goto LABEL_69;
      }
LABEL_76:
      PDFImageEmitData(a1, (CGImage *)a2);
      return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
    }
    goto LABEL_51;
  }
  v119 = qword_185001FC8[v118 - 1];
LABEL_52:
  MaskingColors = (double *)CGImageGetMaskingColors(a2);
  v156 = a2;
  v122 = CGImageGetColorSpace((CGImageRef)a2);
  if (v122)
  {
    v129 = 2 * *(_QWORD *)(*((_QWORD *)v122 + 3) + 40);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Mask [", v123, v124, v125, v126, v127, v128, v154);
    if (v129)
    {
      if (v118 <= v119)
        v136 = 0;
      else
        v136 = v118 - v119;
      do
      {
        v137 = (int)*MaskingColors;
        if (v118 >= v119)
          v138 = (v137 >> v136);
        else
          v138 = (((unint64_t)~(-1 << v118) >> 1) + ~(-1 << v119) * (uint64_t)v137)
               / ~(-1 << v118);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%d", v130, v131, v132, v133, v134, v135, v138);
        ++MaskingColors;
        --v129;
      }
      while (v129);
    }
  }
  else
  {
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Mask [", v123, v124, v125, v126, v127, v128, v154);
  }
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v130, v131, v132, v133, v134, v135, v155);
  a2 = v156;
LABEL_64:
  if (!*(_BYTE *)(a1 + 73))
  {
    if (*(_BYTE *)(a1 + 74))
    {
      v140 = *(_QWORD *)(a1 + 8);
      if (!a2)
      {
        v141 = 0;
        goto LABEL_73;
      }
LABEL_69:
      v141 = a2[7];
LABEL_73:
      PDFDocumentPrintf(v140, (uint64_t)"/BitsPerComponent %z", v112, v113, v114, v115, v116, v117, v141);
      emit_jpeg2000_data(a1, (uint64_t)a2, v142, v143, v144, v145, v146, v147);
      return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
    }
    goto LABEL_76;
  }
  v120 = *(_QWORD *)(a1 + 8);
  if (!a2)
  {
    v139 = 0;
    goto LABEL_71;
  }
LABEL_66:
  v139 = a2[7];
LABEL_71:
  PDFDocumentPrintf(v120, (uint64_t)"/BitsPerComponent %z", v112, v113, v114, v115, v116, v117, v139);
  emit_jpeg_data(a1);
  return PDFStreamEnd(*(CFDataRef **)(a1 + 16));
}

uint64_t Coons(uint64_t result, float64x2_t *a2, double *a3, double a4, double a5)
{
  uint64_t v5;
  double *v6;

  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 352), *(float64x2_t *)(result + 368), a4), *(float64x2_t *)(result + 384), a5), *(float64x2_t *)(result + 400), a4 * a5), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 416), *(float64x2_t *)(result + 448), a5), *(float64x2_t *)(result + 480), a4), *(float64x2_t *)(result + 512), a4 * a5), a4 * a4), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(result + 432), *(float64x2_t *)(result + 464), a4),
              *(float64x2_t *)(result + 496),
              a5),
            *(float64x2_t *)(result + 528),
            a4 * a5),
          a5 * a5);
  v5 = *(_QWORD *)(result + 704);
  if (v5)
  {
    v6 = (double *)(result + 544);
    do
    {
      *a3++ = *v6 + v6[5] * a4 + v6[10] * a5 + v6[15] * (a4 * a5);
      ++v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

void CGGStateTextCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  text_state_release(*(_QWORD **)(a1 + 136), a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a2 + 136);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 4);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 136) = v10;
  *(_BYTE *)(a1 + 20) |= 8u;
  *(_BYTE *)(a2 + 20) |= 8u;
}

double CGGStateGetCharacterSpacing(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 136) + 24);
}

void CGGStateSetTextDrawingMode(uint64_t a1, int a2)
{
  char v2;

  if (*(char *)(*(_QWORD *)(a1 + 136) + 1) != a2)
  {
    v2 = a2;
    maybe_copy_text_state(a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 136) + 1) = v2;
  }
}

double CGGStateGetTextGreekingThreshold(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 136) + 32);
}

uint64_t CGGStateGetTextKnockout(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 1) & 1;
}

uint64_t CGGStateGetFontAntialiasingStyle(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 136) + 48);
}

uint64_t CGGStateGetFontSmoothingStyle(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 136) + 52);
}

uint64_t CGGStateGetFontSubpixelQuantizationStyle(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 136) + 56);
}

uint64_t CGGStateGetShouldAntialiasFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 2) & 1;
}

void CGGStateSetShouldAntialiasFonts(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 4) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 4;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFFFB | v4;
  }
}

uint64_t CGGStateGetShouldSmoothFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 3) & 1;
}

void CGGStateSetShouldSmoothFonts(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 8) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 8;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFFF7 | v4;
  }
}

uint64_t CGGStateGetShouldSubpixelPositionFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 4) & 1;
}

void CGGStateSetShouldSubpixelPositionFonts(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 0x10) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 16;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFFEF | v4;
  }
}

uint64_t CGGStateGetShouldSubpixelQuantizeFonts(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 5) & 1;
}

void CGGStateSetShouldSubpixelQuantizeFonts(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 0x20) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 32;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFFDF | v4;
  }
}

void CGGStateSetShouldUsePlatformNativeGlyphs(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 0x40) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 64;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFFBF | v4;
  }
}

void CGGStateSetShouldDrawBitmapRuns(uint64_t a1, int a2)
{
  __int16 v4;

  if (((((**(_WORD **)(a1 + 136) & 0x80) == 0) ^ a2) & 1) == 0)
  {
    maybe_copy_text_state(a1);
    if (a2)
      v4 = 128;
    else
      v4 = 0;
    **(_WORD **)(a1 + 136) = **(_WORD **)(a1 + 136) & 0xFF7F | v4;
  }
}

double CGGStateGetFontSmoothingContrast(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 136) + 40);
}

void CGGStateSetFontSmoothingBackgroundColor(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 136) + 64) != a2)
  {
    maybe_copy_text_state(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 136) + 64);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 64) = a2;
  }
}

uint64_t CGGStateGetFontSubpixelQuantizationLevel(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 88);
}

uint64_t CGPDFReferenceTypeID()
{
  if (CGPDFReferenceTypeID_onceToken != -1)
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
  return CGPDFReferenceTypeID_id;
}

BOOL CGPDFReferenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4;
  CFTypeID v5;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (CGPDFReferenceTypeID_onceToken != -1)
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
  if (v4 != CGPDFReferenceTypeID_id)
    return 0;
  v5 = CFGetTypeID((CFTypeRef)a2);
  if (CGPDFReferenceTypeID_onceToken != -1)
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
  return v5 == CGPDFReferenceTypeID_id
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24);
}

unint64_t CGPDFReferenceHash(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 24) ^ (unint64_t)(16 * *(_DWORD *)(a1 + 16));
}

CFStringRef CGPDFReferenceDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CGPDFReferenceRef (%d, %d)>"), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

uint64_t CGPDFReferenceCreate(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (CGPDFReferenceTypeID_onceToken != -1)
    dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
  result = pdf_create_cftype();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t CGPDFReferenceGetRef(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t CGPDFNameTypeID()
{
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  return CGPDFNameTypeID_id;
}

void CGPDFNameFinalize(uint64_t a1)
{
  free(*(void **)(a1 + 16));
}

BOOL CGPDFNameEqual(const char **a1, const char **a2)
{
  CFTypeID v4;
  CFTypeID v5;

  v4 = CFGetTypeID(a1);
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  if (v4 != CGPDFNameTypeID_id)
    return 0;
  v5 = CFGetTypeID(a2);
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  return v5 == CGPDFNameTypeID_id && strcmp(a1[2], a2[2]) == 0;
}

uint64_t CGPDFNameHash(uint64_t a1)
{
  _BYTE *v1;
  char v2;
  unsigned __int8 *v3;
  uint64_t result;
  int v5;

  v1 = *(_BYTE **)(a1 + 16);
  v2 = *v1;
  if (!*v1)
    return 5381;
  v3 = v1 + 1;
  result = 5381;
  do
  {
    result = 33 * result + v2;
    v5 = *v3++;
    v2 = v5;
  }
  while (v5);
  return result;
}

CFStringRef CGPDFNameDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CGPDFNameRef (%s)>"), *(_QWORD *)(a1 + 16));
}

uint64_t CGPDFNameCreate(const char *a1)
{
  uint64_t cftype;
  size_t v3;
  char *v4;

  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  cftype = pdf_create_cftype();
  if (*a1 == 47)
  {
    *(_QWORD *)(cftype + 16) = strdup(a1);
  }
  else
  {
    v3 = strlen(a1);
    v4 = (char *)malloc_type_malloc(v3 + 2, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)(cftype + 16) = v4;
    sprintf(v4, "/%s", a1);
  }
  return cftype;
}

unsigned __int8 *CGPDFNameGetString(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;

  v1 = *(unsigned __int8 **)(a1 + 16);
  v3 = *v1;
  v2 = v1 + 1;
  if (v3 == 47)
    return v2;
  else
    return *(unsigned __int8 **)(a1 + 16);
}

uint64_t CGPDFStreamObjectTypeID()
{
  if (CGPDFStreamObjectTypeID_onceToken != -1)
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
  return CGPDFStreamObjectTypeID_id;
}

void CGPDFStreamObjectFinalize(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

CFStringRef CGPDFStreamObjectDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  CFIndex Count;
  CFIndex Length;
  const char *v5;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
  if (*(_BYTE *)(a1 + 32))
    v5 = "will";
  else
    v5 = "will not";
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CGPDFStreamObjectRef: %d key-value pairs, %d data bytes, %s flate compress>"), Count, Length, v5);
}

uint64_t CGPDFStreamObjectCreate(const void *a1, const void *a2)
{
  uint64_t cftype;

  if (CGPDFStreamObjectTypeID_onceToken != -1)
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
  cftype = pdf_create_cftype();
  *(_QWORD *)(cftype + 16) = a1;
  CFRetain(a1);
  *(_QWORD *)(cftype + 24) = a2;
  CFRetain(a2);
  *(_BYTE *)(cftype + 32) = 0;
  return cftype;
}

uint64_t CGPDFStreamObjectGetDictionary(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CGPDFStreamObjectGetData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t CGPDFStreamObjectSetFlateEncoding(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t CGPDFStreamObjectGetFlateEncoding(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t CGPDFHexDataTypeID()
{
  if (CGPDFHexDataTypeID_onceToken != -1)
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_12_18245);
  return CGPDFHexDataTypeID_id;
}

void CGPDFHexDataFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

uint64_t CGPDFHexDataEqual(CFTypeRef *a1, CFTypeRef *a2)
{
  CFTypeID v4;
  CFTypeID v5;

  v4 = CFGetTypeID(a1);
  if (CGPDFHexDataTypeID_onceToken != -1)
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_12_18245);
  if (v4 != CGPDFHexDataTypeID_id)
    return 0;
  v5 = CFGetTypeID(a2);
  if (CGPDFHexDataTypeID_onceToken != -1)
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_12_18245);
  if (v5 == CGPDFHexDataTypeID_id)
    return CFEqual(a1[2], a2[2]);
  else
    return 0;
}

CFHashCode CGPDFHexDataHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef CGPDFHexDataDebugDesc(uint64_t a1)
{
  CFStringRef v2;
  CFStringRef v3;

  v2 = CFCopyDescription(*(CFTypeRef *)(a1 + 16));
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CGPDFHexDataRef %p: data: %@>"), a1, v2);
  CFRelease(v2);
  return v3;
}

uint64_t CGPDFHexDataCreate(const UInt8 *a1, CFIndex a2)
{
  uint64_t cftype;

  if (CGPDFHexDataTypeID_onceToken != -1)
    dispatch_once(&CGPDFHexDataTypeID_onceToken, &__block_literal_global_12_18245);
  cftype = pdf_create_cftype();
  *(_QWORD *)(cftype + 16) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, a2);
  return cftype;
}

uint64_t CGPDFHexDataGetData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFMutableDictionaryRef CGPDFAppenderCreateCFDictionary(CGPDFDictionary *a1)
{
  CFIndex v2;
  CFMutableDictionaryRef Mutable;
  _QWORD block[5];

  if (a1)
    v2 = *((_QWORD *)a1 + 2);
  else
    v2 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CGPDFAppenderCreateCFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_14_18254;
  block[4] = Mutable;
  CGPDFDictionaryApplyBlock(a1, block, 0);
  return Mutable;
}

CFNumberRef CGPDFAppenderCreateCFObject(uint64_t a1, char a2)
{
  int v2;
  int v3;
  uint64_t v4;
  CFNumberRef result;
  const void *v6;
  const __CFAllocator *v7;
  CFNumberType v8;
  uint64_t v9;
  const UInt8 *v10;

  if ((a2 & 1) == 0 && *(_QWORD *)(a1 + 16) | (unsigned __int16)*(_QWORD *)(a1 + 24))
    return (CFNumberRef)CGPDFReferenceCreate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 12)
    v3 = 3;
  else
    v3 = *(_DWORD *)(a1 + 8);
  switch(v3)
  {
    case 1:
      v4 = MEMORY[0x1E0C9B0D0];
      return *(CFNumberRef *)v4;
    case 2:
      v4 = MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(a1 + 32))
        v4 = MEMORY[0x1E0C9AE40];
      return *(CFNumberRef *)v4;
    case 3:
      v6 = (const void *)(a1 + 32);
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v8 = kCFNumberLongType;
      return CFNumberCreate(v7, v8, v6);
    case 4:
      v6 = (const void *)(a1 + 32);
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v8 = kCFNumberCGFloatType;
      return CFNumberCreate(v7, v8, v6);
    case 5:
      if (v2 != 5)
        goto LABEL_28;
      result = (CFNumberRef)CGPDFNameCreate(*(const char **)(a1 + 32));
      break;
    case 6:
      if (v2 != 6)
        goto LABEL_28;
      v9 = *(_QWORD *)(a1 + 32);
      if (v9 && (*(_BYTE *)(v9 + 64) & 2) != 0)
      {
        if (*(_QWORD *)(v9 + 24))
        {
          decrypt_string(*(_QWORD *)(a1 + 32));
          v10 = (const UInt8 *)(v9 + 80);
          if (*(_QWORD *)(v9 + 24))
            decrypt_string(v9);
        }
        else
        {
          v10 = (const UInt8 *)(v9 + 80);
        }
        result = (CFNumberRef)CGPDFHexDataCreate(v10, *(_QWORD *)(v9 + 72));
      }
      else
      {
        result = (CFNumberRef)CGPDFStringCopyTextString(*(CGPDFStringRef *)(a1 + 32));
      }
      break;
    case 7:
      if (v2 != 7)
        goto LABEL_28;
      result = CGPDFAppenderCreateCFArray(*(CGPDFArray **)(a1 + 32));
      break;
    case 8:
      if (v2 != 8)
        goto LABEL_28;
      result = (CFNumberRef)CGPDFAppenderCreateCFDictionary(*(_QWORD *)(a1 + 32));
      break;
    case 9:
      if (v2 != 9)
        goto LABEL_28;
      result = CGPDFAppenderCreateCGPDFStreamObject(*(uint64_t **)(a1 + 32));
      break;
    case 10:
      return (CFNumberRef)CGPDFReferenceCreate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    default:
      pdf_error("Failed to support given object type %d for append mode", v3);
LABEL_28:
      result = 0;
      break;
  }
  return result;
}

void CGPDFAppenderDictionarySetValue(__CFDictionary *a1, const char *a2, const void *a3)
{
  const void *v5;

  if (a2)
  {
    v5 = (const void *)CGPDFNameCreate(a2);
    if (a3)
      CFDictionarySetValue(a1, v5, a3);
    else
      CFDictionaryRemoveValue(a1, v5);
    CFRelease(v5);
  }
}

CFMutableArrayRef CGPDFAppenderCreateCFArray(CGPDFArray *a1)
{
  CFIndex v2;
  __CFArray *Mutable;
  size_t i;
  const void *CFObject;
  CGPDFObjectRef value;

  if (!a1)
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v2 = *((_QWORD *)a1 + 2);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, MEMORY[0x1E0C9B378]);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      value = 0;
      if (CGPDFArrayGetObject(a1, i, &value))
      {
        CFObject = (const void *)CGPDFAppenderCreateCFObject(value, 0);
        CFArrayAppendValue(Mutable, CFObject);
        CFRelease(CFObject);
      }
    }
  }
  return Mutable;
}

const __CFData *CGPDFAppenderCreateCGPDFStreamObject(uint64_t *a1)
{
  uint64_t v1;
  const __CFData *result;
  const __CFData *v3;
  CFMutableDataRef MutableCopy;
  const void *CFDictionary;
  uint64_t v6;

  if (a1)
    v1 = a1[6];
  else
    v1 = 0;
  result = CGPDFStreamCopyRawData(a1);
  if (result)
  {
    v3 = result;
    MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, result);
    CFRelease(v3);
    CFDictionary = (const void *)CGPDFAppenderCreateCFDictionary(v1);
    v6 = CGPDFStreamObjectCreate(CFDictionary, MutableCopy);
    CFRelease(CFDictionary);
    CFRelease(MutableCopy);
    return (const __CFData *)v6;
  }
  return result;
}

uint64_t CGPDFAppenderCGPDFObjectMatchesCFType(uint64_t a1, uint64_t a2)
{
  CFTypeID v4;
  CGPDFObjectType v5;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  const char *v11;
  const char *v12;
  const __CFString *v13;
  const __CFString *v14;
  CGPDFArray *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  size_t i;
  const void *ValueAtIndex;
  const void *v24;
  double v25;
  double value;

  v4 = CFGetTypeID((CFTypeRef)a2);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 12)
      v5 = kCGPDFObjectTypeInteger;
    else
      v5 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = kCGPDFObjectTypeNull;
  }
  if (v4 == CFNullGetTypeID())
    return v5 == kCGPDFObjectTypeNull;
  if (v4 == CFBooleanGetTypeID())
  {
    v7 = 0;
    if (v5 != kCGPDFObjectTypeBoolean || !a1)
      return v7;
    if (*(_DWORD *)(a1 + 8) == 2 && (*(_BYTE *)(a1 + 32) != 1 || *MEMORY[0x1E0C9AE50] == a2))
      return *(_BYTE *)(a1 + 32) || *MEMORY[0x1E0C9AE40] == a2;
    return 0;
  }
  if (v4 == CFNumberGetTypeID())
  {
    if ((v5 - 5) >= 0xFFFFFFFE)
    {
      v25 = 0.0;
      value = 0.0;
      if (CGPDFObjectGetValue((CGPDFObjectRef)a1, v5, &value))
      {
        if (CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v25))
          return vabdd_f64(value, v25) <= 0.00000011920929;
      }
    }
    return 0;
  }
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  if (v4 == CGPDFNameTypeID_id)
  {
    if (v5 == kCGPDFObjectTypeName)
    {
      v8 = *(unsigned __int8 **)(a2 + 16);
      v10 = *v8;
      v9 = v8 + 1;
      v11 = v10 == 47 ? (const char *)v9 : *(const char **)(a2 + 16);
      if (a1)
      {
        if (*(_DWORD *)(a1 + 8) == 5)
        {
          v12 = *(const char **)(a1 + 32);
          if (v12)
            return strcmp(v11, v12) == 0;
        }
      }
    }
    return 0;
  }
  if (v4 == CFStringGetTypeID())
  {
    v7 = 0;
    if (v5 != kCGPDFObjectTypeString || !a1)
      return v7;
    if (*(_DWORD *)(a1 + 8) == 6)
    {
      v13 = CGPDFStringCopyTextString(*(CGPDFStringRef *)(a1 + 32));
      if (v13)
      {
        v14 = v13;
        v7 = CFStringCompare((CFStringRef)a2, v13, 0) == kCFCompareEqualTo;
        CFRelease(v14);
        return v7;
      }
    }
    return 0;
  }
  if (v4 == CFArrayGetTypeID())
  {
    if (a1 && *(_DWORD *)(a1 + 8) == 7)
    {
      v15 = *(CGPDFArray **)(a1 + 32);
      if (v15)
        v16 = *((_QWORD *)v15 + 2);
      else
        v16 = 0;
      Count = CFArrayGetCount((CFArrayRef)a2);
      v7 = 0;
      if ((Count & 0x8000000000000000) == 0 && v16 == Count)
      {
        if (v16)
        {
          v7 = 0;
          for (i = 0; i != v16; v7 = i >= v16)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
            value = 0.0;
            if (!ValueAtIndex)
              break;
            v24 = ValueAtIndex;
            if (!CGPDFArrayGetObject(v15, i, (CGPDFObjectRef *)&value))
              break;
            if ((CGPDFAppenderCGPDFObjectMatchesCFType(*(_QWORD *)&value, v24) & 1) == 0)
              break;
            ++i;
          }
        }
        else
        {
          return 1;
        }
      }
      return v7;
    }
    return 0;
  }
  if (v4 == CFDictionaryGetTypeID())
  {
    if (a1 && *(_DWORD *)(a1 + 8) == 8)
      return AppendModeCGPDFDictionaryMatchesCFDictionary(*(_QWORD *)(a1 + 32), (CFDictionaryRef)a2);
    return 0;
  }
  if (CGPDFStreamObjectTypeID_onceToken != -1)
    dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
  if (v4 != CGPDFStreamObjectTypeID_id)
  {
    if (CGPDFReferenceTypeID_onceToken != -1)
      dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
    v7 = 0;
    if (v4 != CGPDFReferenceTypeID_id || v5 != (kCGPDFObjectTypeDictionary|kCGPDFObjectTypeBoolean) || !a1)
      return v7;
    if (*(_DWORD *)(a1 + 8) == 10)
    {
      if (a2)
        v20 = *(_QWORD *)(a2 + 16);
      else
        v20 = 0;
      return *(_QWORD *)(a1 + 16) == v20;
    }
    return 0;
  }
  v7 = 0;
  if (v5 != kCGPDFObjectTypeStream || !a1)
    return v7;
  if (*(_DWORD *)(a1 + 8) != 9)
    return 0;
  v18 = *(_QWORD *)(a1 + 32);
  if (v18)
    v19 = *(_QWORD *)(v18 + 48);
  else
    v19 = 0;
  return AppendModeCGPDFDictionaryMatchesCFDictionary(v19, *(CFDictionaryRef *)(a2 + 16));
}

uint64_t AppendModeCGPDFDictionaryMatchesCFDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  unint64_t v4;
  CFIndex Count;
  uint64_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  CFTypeID v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  void *UnresolvedObject;
  uint64_t v18;

  if (a1)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = 0;
  Count = CFDictionaryGetCount(theDict);
  v6 = 0;
  if ((Count & 0x8000000000000000) == 0 && v4 == Count)
  {
    v7 = (const void **)malloc_type_malloc(8 * v4, 0xC0040B8AA526DuLL);
    v8 = (const void **)malloc_type_malloc(8 * v4, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(theDict, v7, v8);
    if (v4)
    {
      v9 = 0;
      while (1)
      {
        v10 = v7[v9];
        v11 = v8[v9];
        v12 = CFGetTypeID(v10);
        if (CGPDFNameTypeID_onceToken != -1)
          dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
        if (v12 != CGPDFNameTypeID_id)
          break;
        v13 = (unsigned __int8 *)v10[2];
        v15 = *v13;
        v14 = v13 + 1;
        v16 = v15 == 47 ? v14 : (unsigned __int8 *)v10[2];
        UnresolvedObject = CGPDFDictionaryGetUnresolvedObject(a1, v16);
        if (!UnresolvedObject)
          break;
        v18 = CGPDFAppenderCGPDFObjectMatchesCFType(UnresolvedObject, v11);
        v6 = v18;
        if (++v9 >= v4 || (v18 & 1) == 0)
          goto LABEL_20;
      }
      v6 = 0;
    }
    else
    {
      v6 = 1;
    }
LABEL_20:
    free(v7);
    free(v8);
  }
  return v6;
}

void CGPDFAppenderDictionarySetInt32(__CFDictionary *a1, const char *a2, int a3)
{
  const void *v4;
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  if (a2)
  {
    v4 = (const void *)CGPDFNameCreate(a2);
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(a1, v4, v5);
    CFRelease(v5);
    CFRelease(v4);
  }
}

void CGPDFAppenderDictionarySetCGPDFName(__CFDictionary *a1, const char *a2, const char *a3)
{
  const void *v5;
  const void *v6;

  if (a2)
  {
    if (a3)
    {
      v5 = (const void *)CGPDFNameCreate(a2);
      v6 = (const void *)CGPDFNameCreate(a3);
      CFDictionarySetValue(a1, v5, v6);
      CFRelease(v6);
      CFRelease(v5);
    }
  }
}

void CGPDFAppenderDictionarySetCGPDFReference(__CFDictionary *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const void *v7;
  const void *v8;

  if (a2)
  {
    if (a3 | (unsigned __int16)a4)
    {
      v7 = (const void *)CGPDFNameCreate(a2);
      v8 = (const void *)CGPDFReferenceCreate(a3, a4);
      CFDictionarySetValue(a1, v7, v8);
      CFRelease(v8);
      CFRelease(v7);
    }
  }
}

void CGPDFAppenderArrayAppendCGPDFReference(__CFArray *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;

  v4 = (const void *)CGPDFReferenceCreate(a2, a3);
  CFArrayAppendValue(a1, v4);
  CFRelease(v4);
}

const void *CGPDFAppenderDictionaryGetValue(const __CFDictionary *a1, const char *a2)
{
  const void *v3;
  const void *Value;

  if (!a2)
    return 0;
  v3 = (const void *)CGPDFNameCreate(a2);
  Value = CFDictionaryGetValue(a1, v3);
  CFRelease(v3);
  return Value;
}

void CGPDFAppenderDictionarySetReferenceToReference(__CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v8;
  const void *v9;

  v8 = (const void *)CGPDFReferenceCreate(a2, a3);
  v9 = (const void *)CGPDFReferenceCreate(a4, a5);
  CFDictionarySetValue(a1, v8, v9);
  CFRelease(v9);
  CFRelease(v8);
}

uint64_t CGPDFAppenderDictionaryCreateHash(const __CFString *a1)
{
  CC_MD5_CTX *v2;
  uint64_t v3;
  char *v4;
  char v6;
  uint64_t v7;
  unsigned __int8 md[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v2);
  AppendModeDigestCFType(v2, a1);
  if (v2)
    CC_MD5_Final(md, v2);
  free(v2);
  v3 = 0;
  v4 = (char *)&v7;
  do
  {
    sprintf(v4, "%02X", md[v3++]);
    v4 += 2;
  }
  while (v3 != 16);
  return CGPDFNameCreate(&v6);
}

void AppendModeDigestCFType(CC_MD5_CTX *a1, const __CFString *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  char *v6;
  CC_MD5_CTX *v7;
  CC_LONG v8;
  CFTypeID v9;
  CFTypeID v10;
  char *v11;
  const char *v12;
  int v13;
  const char *v14;
  size_t v15;
  size_t v16;
  CFTypeID v17;
  CFIndex Length;
  CFIndex v19;
  CFIndex i;
  CFTypeID v21;
  CFIndex Count;
  unint64_t v23;
  const void *ValueAtIndex;
  CFTypeID v25;
  CFIndex v26;
  const void **v27;
  unint64_t v28;
  CFTypeID v29;
  const __CFData *v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex j;
  CFTypeID v34;
  __int128 v35;
  __int128 v36;
  CFTypeID data;
  CFRange v38;

  v4 = CFGetTypeID(a2);
  data = v4;
  if (a1)
  {
    CC_MD5_Update(a1, &data, 8u);
    v5 = data;
  }
  else
  {
    v5 = v4;
  }
  if (v5 == CFBooleanGetTypeID())
  {
    LOBYTE(v36) = *MEMORY[0x1E0C9AE50] == (_QWORD)a2;
    if (!a1)
      return;
    v6 = (char *)&v36;
    v7 = a1;
    v8 = 1;
    goto LABEL_10;
  }
  v9 = data;
  if (v9 == CFNumberGetTypeID())
  {
    *(_QWORD *)&v36 = 0;
    CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v36);
    if (!a1)
      return;
    v6 = (char *)&v36;
    v7 = a1;
    v8 = 8;
    goto LABEL_10;
  }
  v10 = data;
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  if (v10 == CGPDFNameTypeID_id)
  {
    v11 = a2->data;
    v13 = *v11;
    v12 = v11 + 1;
    if (v13 == 47)
      v14 = v12;
    else
      v14 = a2->data;
    v15 = strlen(v14);
    if (v15)
    {
      v16 = v15;
      do
      {
        if (a1)
          CC_MD5_Update(a1, v14, 1u);
        ++v14;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v17 = data;
    if (v17 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(a2);
      if (Length)
      {
        v19 = Length;
        for (i = 0; i != v19; ++i)
        {
          LOWORD(v36) = 0;
          LOWORD(v36) = CFStringGetCharacterAtIndex(a2, i);
          if (a1)
            CC_MD5_Update(a1, &v36, 2u);
        }
      }
    }
    else
    {
      v21 = data;
      if (v21 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount((CFArrayRef)a2);
        *(_QWORD *)&v36 = Count;
        if (a1)
        {
          CC_MD5_Update(a1, &v36, 8u);
          Count = v36;
        }
        if (Count)
        {
          v23 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v23);
            AppendModeDigestCFType(a1, ValueAtIndex);
            ++v23;
          }
          while (v23 < (unint64_t)v36);
        }
      }
      else
      {
        v25 = data;
        if (v25 == CFDictionaryGetTypeID())
        {
          v26 = CFDictionaryGetCount((CFDictionaryRef)a2);
          *(_QWORD *)&v36 = v26;
          if (a1)
          {
            CC_MD5_Update(a1, &v36, 8u);
            v26 = v36;
          }
          v27 = (const void **)malloc_type_malloc(8 * v26, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, 0, v27);
          if ((_QWORD)v36)
          {
            v28 = 0;
            do
              AppendModeDigestCFType(a1, v27[v28++]);
            while (v28 < (unint64_t)v36);
          }
          free(v27);
        }
        else
        {
          v29 = data;
          if (CGPDFStreamObjectTypeID_onceToken != -1)
            dispatch_once(&CGPDFStreamObjectTypeID_onceToken, &__block_literal_global_9_18226);
          if (v29 == CGPDFStreamObjectTypeID_id)
          {
            AppendModeDigestCFType(a1, a2->data);
            v30 = (const __CFData *)a2->length;
            if (v30)
            {
              v31 = CFDataGetLength(v30);
              if (v31)
              {
                v32 = v31;
                for (j = 0; j != v32; ++j)
                {
                  LOBYTE(v36) = 0;
                  v38.location = j;
                  v38.length = 1;
                  CFDataGetBytes(v30, v38, (UInt8 *)&v36);
                  if (a1)
                    CC_MD5_Update(a1, &v36, 1u);
                }
              }
            }
          }
          else
          {
            v34 = data;
            if (CGPDFReferenceTypeID_onceToken != -1)
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
            if (v34 == CGPDFReferenceTypeID_id)
            {
              v35 = a2 ? *(_OWORD *)&a2->data : 0;
              v36 = v35;
              if (a1)
              {
                CC_MD5_Update(a1, &v36, 8u);
                v7 = a1;
                v6 = (char *)&v36 + 8;
                v8 = 2;
LABEL_10:
                CC_MD5_Update(v7, v6, v8);
              }
            }
          }
        }
      }
    }
  }
}

void provider_with_masking_colors_release_info(uint64_t a1)
{
  vImageConverter *v2;
  void *v3;

  if (!*(_BYTE *)(a1 + 8))
    CGDataProviderUnlock(*(_QWORD *)a1);
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  v2 = *(vImageConverter **)(a1 + 928);
  if (v2)
    vImageConverter_Release(v2);
  v3 = *(void **)(a1 + 936);
  if (v3)
    free(v3);
  free((void *)a1);
}

unint64_t provider_with_masking_colors_get_bytes_at_position(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!*(_BYTE *)(a1 + 8))
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position", 269, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "info->src_provider_uses_random_access == true", "", a6, a7, a8, vars0);
  return provider_with_masking_colors_get_bytes_at_position_inner(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t provider_with_masking_colors_retain_data(uint64_t *a1)
{
  CGDataProviderRetainBytePtr(*a1);
  return CGDataProviderRetainData(*a1);
}

uint64_t provider_with_masking_colors_release_data(uint64_t *a1)
{
  CGDataProviderReleaseBytePtr(*a1);
  return CGDataProviderReleaseData(*a1);
}

uint64_t provider_with_masking_colors_get_bytes_per_row_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 648);
}

uint64_t provider_with_masking_colors_get_work_buffer_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 944);
}

unint64_t provider_with_masking_colors_get_bytes_at_position_inner(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t BitsPerPixel;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  size_t BytesAtPositionInternal;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  vImageConverter *v59;
  _BOOL4 v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int16 *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  double *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  double *v90;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  unsigned int v105;
  _BYTE *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  unsigned __int8 *v112;
  unsigned int v113;
  uint64_t i;
  int v115;
  uint64_t v116;
  unint64_t result;
  unint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  _QWORD v124[2];
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  _BYTE v133[272];
  _BYTE __dst[344];
  _BYTE v135[272];
  uint64_t v136;
  int v137;
  _BYTE __src[304];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x8000000000000000) != 0)
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 191, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "pos >= 0", "position is negative %lld", a6, a7, a8, a3);
  v13 = (const void *)(a1 + 16);
  memcpy(__dst, (const void *)(a1 + 16), 0x130uLL);
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v14, v15, v16, v17, v18, v19, v20);
  memcpy(__dst, (const void *)(a1 + 344), 0x130uLL);
  v29 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v22, v23, v24, v25, v26, v27, v28);
  v30 = *(_QWORD *)(a1 + 936);
  memcpy(__src, v13, sizeof(__src));
  v36 = destination_position_to_source_position(v29, *(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 656), BitsPerPixel, *(_QWORD *)(a1 + 320), a3, v31, v32);
  if (v36 >= 0x7FFFFFFF)
    _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 219, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "src_pos >= 0 && src_pos < INT_MAX", "src position %lld", v33, v34, v35, v36);
  v121 = a4;
  v37 = 8 * a4;
  v122 = a5;
  v123 = *(_DWORD *)(a1 + 344);
  v136 = *(_QWORD *)(a1 + 348);
  v137 = *(_DWORD *)(a1 + 356);
  v38 = *(_QWORD *)(a1 + 360);
  v39 = *(_DWORD *)(a1 + 368);
  v119 = *(_DWORD *)(a1 + 372);
  v40 = v29;
  v120 = v37;
  v41 = v37 / v29;
  memcpy(v135, (const void *)(a1 + 376), sizeof(v135));
  v49 = *(_QWORD **)a1;
  v118 = BitsPerPixel;
  v50 = (v41 * BitsPerPixel + 7) >> 3;
  if (v50 > *(_QWORD *)(a1 + 944))
  {
    CGPostError((uint64_t)"%s: bytes_to_read %zd > work_buffer_size %zd", v42, v43, v44, v45, v46, v47, v48, (char)"provider_with_masking_colors_get_bytes_at_position_inner");
    if (v50 > *(_QWORD *)(a1 + 944))
      _CGHandleAssert("provider_with_masking_colors_get_bytes_at_position_inner", 231, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "bytes_to_read <= info->work_buffer_size", "bytes to read %zu  buffer size %zu", v46, v47, v48, v50);
  }
  v51 = *(char **)(a1 + 936);
  v52 = v49;
  v53 = v50;
  if (*(_BYTE *)(a1 + 8))
    BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v52, v51, v36, v50, v45, v46, v47, v48);
  else
    BytesAtPositionInternal = CGDataProviderSequentialGetBytesInternal((uint64_t)v52, (uint64_t)v51, v50);
  v58 = BytesAtPositionInternal;
  v59 = *(vImageConverter **)(a1 + 928);
  if (v59)
  {
    *(_QWORD *)__dst = v30;
    *(_QWORD *)&__dst[8] = v41;
    *(_OWORD *)&__dst[16] = xmmword_184E39160;
    *(_QWORD *)&__dst[32] = 0;
    memcpy(&__dst[40], __src, 0x130uLL);
    v124[0] = a2;
    v124[1] = v41;
    v125 = xmmword_184E39160;
    v126 = 0;
    v127 = v123;
    v128 = v136;
    v129 = v137;
    v130 = v38;
    v131 = v39;
    v132 = v119;
    memcpy(v133, v135, sizeof(v133));
    vImageConverterConvert(v59, (uint64_t)__dst, (uint64_t)v124, 0);
  }
  v60 = 1;
  if (v39 != 9)
  {
    if (v39 == 8)
    {
      LOBYTE(v39) = 1;
    }
    else
    {
      v60 = v39 == 3;
      if ((v39 - 5) > 0xFFFFFFFD)
        goto LABEL_13;
    }
    _CGHandleAssert("mask_colors", 156, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "alpha_info == kCGImageAlphaFirst || alpha_info == kCGImageAlphaLast", "alpha info %d", v55, v56, v57, v39);
  }
LABEL_13:
  v61 = 1;
  switch(v123)
  {
    case 1:
      if (v40 > v120)
        goto LABEL_109;
      v62 = 0;
      v63 = (v119 == 0x2000) ^ v60;
      if (v63)
        v64 = v38;
      else
        v64 = 0;
      v65 = &a2[v64];
      v66 = &a2[v63 ^ 1];
      v67 = v38 + 1;
      do
      {
        if (v38)
        {
          v68 = 0;
          v69 = (unsigned __int8 *)(a1 + 673);
          while (1)
          {
            v70 = v66[v68];
            if (v70 < *(v69 - 1) || v70 > *v69)
              break;
            ++v68;
            v69 += 2;
            if (v38 == v68)
              goto LABEL_24;
          }
        }
        else
        {
LABEL_24:
          *v65 = 0;
        }
        v66 += v67;
        v65 += v67;
        ++v62;
      }
      while (v62 != v41);
      goto LABEL_109;
    case 2:
      if (v40 > v120)
        goto LABEL_109;
      v71 = 0;
      if (v60)
        v72 = v38;
      else
        v72 = 0;
      v73 = &a2[2 * v72];
      v74 = &a2[2 * !v60];
      do
      {
        if (v38)
        {
          v75 = 0;
          v76 = (unsigned __int16 *)(a1 + 674);
          while (1)
          {
            v77 = *(unsigned __int16 *)&v74[2 * v75];
            if (v77 < *(v76 - 1) || v77 > *v76)
              break;
            ++v75;
            v76 += 2;
            if (v38 == v75)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          *(_WORD *)v73 = 0;
        }
        v73 += 2 * v38 + 2;
        ++v71;
        v74 += 2 * v38 + 2;
      }
      while (v71 != v41);
      goto LABEL_109;
    case 4:
      if (v40 > v120)
        goto LABEL_109;
      v78 = 0;
      if (v60)
        v79 = v38;
      else
        v79 = 0;
      v80 = &a2[4 * v79];
      v81 = &a2[4 * !v60];
      do
      {
        if (v38)
        {
          v82 = 0;
          v83 = (double *)(a1 + 680);
          while (1)
          {
            v84 = *(float *)&v81[4 * v82];
            if (*(v83 - 1) > v84 || *v83 < v84)
              break;
            ++v82;
            v83 += 2;
            if (v38 == v82)
              goto LABEL_51;
          }
        }
        else
        {
LABEL_51:
          *(_DWORD *)v80 = 0;
        }
        v80 += 4 * v38 + 4;
        ++v78;
        v81 += 4 * v38 + 4;
      }
      while (v78 != v41);
      goto LABEL_109;
    case 5:
      if (v40 > v120)
        goto LABEL_109;
      v85 = 0;
      if (v60)
        v86 = v38;
      else
        v86 = 0;
      v87 = &a2[2 * v86];
      v88 = &a2[2 * !v60];
      do
      {
        if (v38)
        {
          v89 = 0;
          v90 = (double *)(a1 + 680);
          while (1)
          {
            _H1 = *(_WORD *)&v88[2 * v89];
            __asm { FCVT            D1, H1 }
            if (*(v90 - 1) > _D1 || *v90 < _D1)
              break;
            ++v89;
            v90 += 2;
            if (v38 == v89)
              goto LABEL_64;
          }
        }
        else
        {
LABEL_64:
          *(_WORD *)v87 = 0;
        }
        v87 += 2 * v38 + 2;
        ++v85;
        v88 += 2 * v38 + 2;
      }
      while (v85 != v41);
      goto LABEL_109;
    case 7:
      goto LABEL_68;
    case 8:
      v61 = 2;
      goto LABEL_68;
    case 9:
      v61 = 4;
LABEL_68:
      if (v40 > v120)
        goto LABEL_109;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v102 = ~(-1 << v61);
      v103 = a2;
      break;
    default:
      goto LABEL_109;
  }
  do
  {
    if (v60)
    {
      v104 = 1;
      if (!v38)
        goto LABEL_80;
LABEL_76:
      v106 = __dst;
      v107 = v38;
      do
      {
        if (v61 > v100)
        {
          v100 += 8;
          v108 = *v103++;
          v101 = v108 | (v101 << 8);
        }
        v100 -= v61;
        *v106++ = (v101 >> v100) & v102;
        --v107;
      }
      while (v107);
      goto LABEL_80;
    }
    if (v61 > v100)
    {
      v100 += 8;
      v105 = *v103++;
      v101 = v105 | (v101 << 8);
    }
    v100 -= v61;
    v104 = (v101 >> v100) & v102;
    if (v38)
      goto LABEL_76;
LABEL_80:
    if (v60)
    {
      if (v61 > v100)
      {
        v100 += 8;
        v109 = *v103++;
        v101 = v109 | (v101 << 8);
      }
      v100 -= v61;
      v104 = (v101 >> v100) & v102;
    }
    if (v38)
    {
      v110 = 0;
      v111 = 1;
LABEL_86:
      v112 = (unsigned __int8 *)(a1 + 673 + 2 * v110);
      do
      {
        v113 = __dst[v110];
        if (v113 < *(v112 - 1) || v113 > *v112)
        {
          v111 = 0;
          if (++v110 != v38)
            goto LABEL_86;
          goto LABEL_95;
        }
        ++v110;
        v112 += 2;
      }
      while (v38 != v110);
      if ((v111 & 1) == 0)
        goto LABEL_95;
    }
    v104 = 0;
LABEL_95:
    if (!v60)
    {
      if (v98 >= 8)
      {
        v98 -= 8;
        *a2++ = v99 >> v98;
      }
      v99 = (v99 << v61) | v104 & v102;
      v98 += v61;
    }
    if (v38)
    {
      for (i = 0; i != v38; ++i)
      {
        v115 = __dst[i];
        v116 = v98 - 8;
        if (v98 >= 8)
        {
          do
          {
            *a2++ = v99 >> v116;
            v116 -= 8;
            v98 -= 8;
          }
          while (v98 > 7);
        }
        v99 = (v99 << v61) | v115 & v102;
        v98 += v61;
      }
    }
    if (v60)
    {
      if (v98 >= 8)
      {
        v98 -= 8;
        *a2++ = v99 >> v98;
      }
      v99 = (v99 << v61) | v104 & v102;
      v98 += v61;
    }
    ++v97;
  }
  while (v97 != v41);
LABEL_109:
  result = v121;
  if (v58 < v53)
    result = byte_count_to_byte_count(v118, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336), v40, *(_QWORD *)(a1 + 648), v58, v57);
  if (v122)
  {
    *(_QWORD *)(a1 + 336) += v58;
    *(_QWORD *)(a1 + 664) += result;
  }
  return result;
}

unint64_t provider_with_masking_colors_get_bytes(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*(_BYTE *)(a1 + 8))
    _CGHandleAssert("provider_with_masking_colors_get_bytes", 277, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  return provider_with_masking_colors_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

unint64_t provider_with_masking_colors_skip_forward(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t BitsPerPixel;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE __dst[304];

  v4 = *(_QWORD *)a1;
  memcpy(__dst, (const void *)(a1 + 16), sizeof(__dst));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  memcpy(__dst, (const void *)(a1 + 344), sizeof(__dst));
  v20 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v13, v14, v15, v16, v17, v18, v19);
  if ((a2 & 0x8000000000000000) != 0)
    _CGHandleAssert("provider_with_masking_colors_skip_forward", 290, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "count >= 0", "count = %lld", v21, v22, v23, a2);
  v24 = v20;
  v25 = byte_count_to_byte_count(v20, *(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 664), BitsPerPixel, *(_QWORD *)(a1 + 320), a2, v23);
  v26 = CGDataProviderSkipForwardInternal(v4, v25);
  v30 = v26;
  if (v26 < 0)
    _CGHandleAssert("provider_with_masking_colors_skip_forward", 303, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "skipped >= 0", "skipped %lld", v27, v28, v29, v26);
  if (v26 != v25)
    a2 = byte_count_to_byte_count(BitsPerPixel, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336), v24, *(_QWORD *)(a1 + 648), v26, v29);
  *(_QWORD *)(a1 + 336) += v30;
  *(_QWORD *)(a1 + 664) += a2;
  return a2;
}

void provider_with_masking_colors_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  v9 = *a1;
  if (!v9)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v10);
  if ((*(_DWORD *)(v9 + 20) | 2) != 3)
    _CGHandleAssert("provider_with_masking_colors_rewind", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "", "Unimplemented", a6, a7, a8, v10);
  CGDataProviderRewind(v9);
  a1[83] = 0;
  a1[42] = 0;
}

uint64_t provider_with_masking_colors_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

uint64_t provider_with_masking_colors_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

void PBPageLayoutPkg::PBCharacterStyle::~PBCharacterStyle(PBPageLayoutPkg::PBCharacterStyle *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E1628E08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E1628E08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::readFrom(PBPageLayoutPkg::PBCharacterStyle *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_53;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_47:
            v25 = 0;
            goto LABEL_53;
          }
          v32 = 0;
          v33 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v34 = v20 + 1;
              v35 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v34;
              v25 |= (unint64_t)(v35 & 0x7F) << v32;
              if (v35 < 0)
              {
                v32 += 7;
                v20 = v34;
                v14 = v33++ > 8;
                if (v14)
                  goto LABEL_47;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_53:
          *((_QWORD *)this + 2) = v25;
          goto LABEL_54;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_49;
        case 3u:
          v29 = (_QWORD *)operator new();
          *v29 = &off_1E1628EB0;
          v29[1] = 0;
          v30 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v29;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v29 = (_QWORD *)*((_QWORD *)this + 1);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v29 + 16))(v29, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v31);
LABEL_49:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_40:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_54;
        default:
          goto LABEL_19;
      }
      goto LABEL_54;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_54:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

uint64_t PBPageLayoutPkg::PBCharacterStyle::formatText(PBPageLayoutPkg::PBCharacterStyle *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "baselineOffset", *((float *)this + 6));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "fillColor");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "fontDataIndex");
    v6 = *((_BYTE *)this + 32);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "fontSize", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL __lookup_pattern_entry_block_invoke(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v2 = *(double **)(a1 + 32);
  result = 0;
  if (*(double *)(a2 + 96) == *v2
    && *(double *)(a2 + 104) == v2[1]
    && *(double *)(a2 + 112) == v2[2]
    && *(double *)(a2 + 120) == v2[3])
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a2 + 64) == *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32)
      && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 48))
    {
      if (*(_DWORD *)(a2 + 76) == *(_DWORD *)(v3 + 132))
        return 1;
      v5 = *(_QWORD *)(v3 + 136);
      v4 = *(_QWORD *)(v3 + 144);
      if (*(_QWORD *)(a2 + 80) == v5 && *(_QWORD *)(a2 + 88) == v4)
        return 1;
    }
  }
  return result;
}

char *create_pattern_tile_pattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;
  CGRect v35;

  if (a4 < 1)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a4 + 32);
  v18 = *(double *)(v16 + 104);
  v17 = *(double *)(v16 + 112);
  v20 = *(double *)(v16 + 120);
  v19 = *(double *)(v16 + 128);
  if (v20 < 0.0 || v19 < 0.0)
  {
    v35 = CGRectStandardize(*(CGRect *)(v16 + 104));
    v21 = fabs(v35.size.width);
    v35.origin.x = v18;
    v35.origin.y = v17;
    v35.size.width = v20;
    v35.size.height = v19;
    *(CGRect *)(&v22 - 3) = CGRectStandardize(v35);
  }
  else
  {
    v21 = fabs(v20);
    v22 = *(double *)(v16 + 128);
  }
  if (*(_DWORD *)(v16 + 20) == 1)
    goto LABEL_9;
  if (v18 == INFINITY || v17 == INFINITY)
    return 0;
  v32 = 0;
  if (v20 != 0.0 && v19 != 0.0)
  {
LABEL_9:
    v23 = fabs(v22);
    v24 = fabs(*(double *)(v16 + 136));
    v25 = fabs(*(double *)(v16 + 144));
    if (a9 >= 1.0 && *(_BYTE *)(v16 + 186) != 0 && v21 == v24 && v23 == v25)
      v29 = 32;
    else
      v29 = 33;
    if (a2)
      v30 = *(unsigned int *)(a2 + 4);
    else
      v30 = 3;
    v33 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)a5, v29, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32), v30, (uint64_t)a6, a7, a8);
    v32 = v33;
    if (v33)
      build_tile((uint64_t)v33, a1, a2, a3, a4, 0, a6, (double)*a5, (double)a5[1], (double)a5[2], (double)a5[3], a9);
  }
  return v32;
}

uint64_t ripc_size()
{
  return 160;
}

CGDataProvider *CGDataProviderCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t provider;
  CGDataProvider *v10;
  const __CFData *v11;
  CGDataProviderRef v12;

  if (!a2 || !*(_QWORD *)a2)
    return 0;
  provider = create_provider(a1, 3, a3, a4, a5, a6, a7, a8);
  v10 = (CGDataProvider *)provider;
  if (provider)
  {
    *(_QWORD *)(provider + 40) = *(_QWORD *)a2;
    *(_OWORD *)(provider + 56) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(provider + 72) = *(_QWORD *)(a2 + 24);
    if (!CGDataProviderIsRewindable(provider))
    {
      v11 = CGDataProviderCopyData(v10);
      v12 = CGDataProviderCreateWithCFData(v11);
      if (v11)
        CFRelease(v11);
      CFRelease(v10);
      return v12;
    }
  }
  return v10;
}

uint64_t CGDataProviderGetSize(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 32);
  else
    return -1;
}

uint64_t CGDataProviderGetSize2(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 32);
  else
    return -1;
}

CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
{
  unint64_t v2;
  const UniChar *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t i;
  int v7;
  unsigned int v8;
  __int16 v9;
  const __CFString *v10;
  void *v11;
  CFStringRef result;
  unint64_t v13;
  CFStringRef v14;
  CFIndex v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  if (!string)
  {
    v3 = (const UniChar *)malloc_type_malloc(0, 0x1000040BDFB0063uLL);
    v2 = 0;
    goto LABEL_20;
  }
  if (*((_QWORD *)string + 3))
  {
    decrypt_string((uint64_t)string);
    v2 = *((_QWORD *)string + 9);
    if (*((_QWORD *)string + 3))
      decrypt_string((uint64_t)string);
  }
  else
  {
    v2 = *((_QWORD *)string + 9);
  }
  v4 = (unsigned __int8 *)string + 80;
  if (v2 < 2)
  {
    v3 = (const UniChar *)malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
    if (v2)
    {
LABEL_13:
      for (i = 0; i != v2; ++i)
      {
        v7 = CGPDFUnicodeVectorPDFDoc[v4[i]];
        v3[i] = v7;
        if (!v7)
        {
          v8 = v4[i] - 9;
          if (v8 > 4)
            v9 = 32;
          else
            v9 = asc_185003E9C[(char)v8];
          v3[i] = v9;
        }
      }
    }
LABEL_20:
    v10 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, v2);
    v11 = (void *)v3;
LABEL_21:
    free(v11);
    return v10;
  }
  v5 = *v4;
  if (v5 == 255)
  {
    if (*((unsigned __int8 *)string + 81) != 254)
    {
LABEL_11:
      v3 = (const UniChar *)malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
      goto LABEL_13;
    }
  }
  else if (v5 != 254 || *((unsigned __int8 *)string + 81) != 255)
  {
    goto LABEL_11;
  }
  if ((v2 & 1) != 0)
  {
    pdf_error("suspicious Unicode text string: length is not a multiple of 2.");
    --v2;
  }
  v13 = 0;
  while (*((_BYTE *)string + v13 + 80) || *((_BYTE *)string + v13 + 81) != 27)
  {
    v13 += 2;
    if (v13 >= v2)
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)string + 80, v2, 0x100u, 1u);
  }
  result = (CFStringRef)malloc_type_malloc(v2, 0x863C6011uLL);
  if (result)
  {
    v14 = result;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v16 + 1;
      if (v4[v16] || v4[v17] != 27)
      {
        v20 = (char *)result + v15;
        *v20 = v4[v16];
        v15 += 2;
        v20[1] = v4[v17];
      }
      else if (v16 + 2 >= v2)
      {
        v16 += 2;
      }
      else
      {
        while (*((_BYTE *)string + v16 + 82) || *((_BYTE *)string + v16 + 83) != 27)
        {
          v18 = v16 + 2;
          v19 = v16 + 4;
          v16 += 2;
          if (v19 >= v2)
          {
            v16 = v18 + 2;
            goto LABEL_41;
          }
        }
        v16 += 2;
      }
LABEL_41:
      v16 += 2;
    }
    while (v16 < v2);
    v10 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)result, v15, 0x100u, 1u);
    v11 = (void *)v14;
    goto LABEL_21;
  }
  return result;
}

unint64_t get_font_stream_18376(uint64_t a1, int *a2)
{
  unint64_t result;
  unint64_t v4;
  CGPDFStreamRef v5;
  _BOOL4 Name;
  const char *v7;
  int v8;
  CGPDFStreamRef value;

  result = CGPDFFontGetFontDescriptor(a1);
  if (result)
  {
    v4 = result;
    value = 0;
    if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(result + 32), "FontFile", &value))
      result = (unint64_t)value;
    else
      result = 0;
    if (result)
    {
      *a2 = 2;
      return result;
    }
    value = 0;
    if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(v4 + 32), "FontFile3", &value))
      v5 = value;
    else
      v5 = 0;
    if (!v5)
      return 0;
    value = 0;
    Name = CGPDFDictionaryGetName(*((CGPDFDictionaryRef *)v5 + 6), "Subtype", (const char **)&value);
    result = 0;
    if (!Name)
      return result;
    v7 = (const char *)value;
    if (!strcmp((const char *)value, "Type1C"))
    {
      v8 = 3;
    }
    else
    {
      if (strcmp(v7, "OpenType"))
      {
        return 0;
      }
      v8 = 6;
    }
    *a2 = v8;
    return (unint64_t)v5;
  }
  return result;
}

void type1_free(int a1, void *a2)
{
  free(a2);
}

uint64_t CGPDFShadingType6Init(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  int v8;
  CGPDFDictionary *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  CGPDFStream *v13;
  CGPDFDataFormat format;
  CGPDFObjectRef v15;
  CGPDFInteger value;

  if (type6_info_getTypeID_onceToken != -1)
    dispatch_once(&type6_info_getTypeID_onceToken, &__block_literal_global_18389);
  result = pdf_create_cftype();
  if (!result)
    return result;
  v7 = (_QWORD *)result;
  v15 = 0;
  value = 0;
  format = CGPDFDataFormatRaw;
  *a2 = result;
  *a3 = CGPDFShadingType6Init_type6_callbacks;
  if (a1)
  {
    v8 = *(_DWORD *)(a1 + 16);
    v9 = *(CGPDFDictionary **)(a1 + 24);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(result + 16) = v8;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerCoordinate", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
  {
    return 0;
  }
  v7[4] = value;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerComponent", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
  {
    return 0;
  }
  v7[5] = value;
  if (!CGPDFDictionaryGetInteger(v9, "BitsPerFlag", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 8 || ((1 << value) & 0x114) == 0)
  {
    return 0;
  }
  v7[6] = value;
  v7[12] = 0;
  if (!CGPDFDictionaryGetObject(v9, "Function", &v15)
    || (result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v15, 1uLL), (v7[12] = result) != 0))
  {
    if (a1)
      v10 = *(_QWORD **)(a1 + 40);
    else
      v10 = 0;
    if (v7[12] && CGColorSpaceGetType(v10) == 7)
    {
      return 0;
    }
    if (v10)
    {
      CFRetain(v10);
      v7[3] = v10;
      if (v7[12])
        v11 = 2;
      else
        v11 = 2 * *(_QWORD *)(v10[3] + 40);
    }
    else
    {
      v7[3] = 0;
      v11 = 2 * (v7[12] != 0);
    }
    v12 = malloc_type_malloc(8 * (v11 + 4), 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    if (!v12)
      return 0;
    if (!CGPDFDictionaryGetNumbers(v9, "Decode", (uint64_t)v12, (CGPDFArray *)(v11 + 4)))
    {
      free(v12);
      return 0;
    }
    v7[7] = *v12;
    v7[9] = v12[1];
    v7[8] = v12[2];
    v7[10] = v12[3];
    memmove(v12, v12 + 4, 8 * v11);
    v7[11] = v12;
    if (a1)
      v13 = *(CGPDFStream **)(a1 + 32);
    else
      v13 = 0;
    result = (uint64_t)CGPDFStreamCopyData(v13, &format);
    v7[13] = result;
    if (result)
    {
      if (format == CGPDFDataFormatRaw)
        return 1;
      pdf_error("invalid shading data format.");
      return 0;
    }
  }
  return result;
}

uint64_t type6_create_shading(CGRect *a1, const void *a2)
{
  const CGRect *v3;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v7;
  double x;
  double v9;
  double width;
  CGFloat y;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const CGFloat *Components;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD v21[4];

  v3 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (a1)
  {
    p_size = &a1[2].size;
    p_y = &a1[2].origin.y;
    v3 = a1 + 2;
    p_height = &a1[2].size.height;
  }
  v7 = *p_height;
  x = v3->origin.x;
  v9 = *p_y;
  width = p_size->width;
  v21[0] = *(_QWORD *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307)
    v17 = 0;
  if (width != 1.79769313e308)
    v17 = 0;
  v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0)
      return 0;
  }
  else
  {
    result = 0;
    if (y == 0.0)
      return result;
  }
  if (v18)
    v20 = 0;
  else
    v20 = v21;
  result = CGShadingCreateEmpty(0, *(_QWORD **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(_QWORD *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type6_create_shading_type6_drawing_callbacks;
  *(_QWORD *)(result + 112) = cg_shading_type6_release;
  return result;
}

void type6_release_info(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void cg_shading_type6_draw(uint64_t a1, CGContextRef c)
{
  CGContext *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  char *v8;
  double v9;
  double v10;
  char v11;
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  char v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  char v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  char v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  char v99;
  double v100;
  uint64_t v101;
  unint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  char v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  int v145;
  double v146;
  double v147;
  double v148;
  double v149;
  char v150;
  int v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  uint64_t i;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  int v174;
  unint64_t v175;
  int v176;
  const CGFloat *v177;
  CGFloat *v178;
  uint64_t v179;
  double *v180;
  double v181;
  double *v182;
  uint64_t v183;
  uint64_t m;
  uint64_t n;
  uint64_t v186;
  double v187;
  CGFloat *v188;
  double v189;
  double v190;
  uint64_t v191;
  CGFloat *v192;
  double v193;
  CGFloat v194;
  double v195;
  double v196;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  CGFloat v212;
  double v213;
  CGFloat width;
  CGFloat height;
  CGFloat v217;
  CGFloat v218;
  CGFloat v219;
  CGFloat v220;
  double v221;
  CGFloat v222;
  CGFloat v223;
  CGFloat v224;
  CGFloat v225;
  double v226;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  double *v232;
  double v233;
  double v234;
  double v235;
  float64x2_t *v236;
  int v240;
  _QWORD *v241;
  _QWORD *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t j;
  uint64_t v248;
  void *v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  unint64_t v267;
  float64x2_t *v268;
  CGAffineTransform *p_src;
  double *v270;
  unint64_t v271;
  double v272;
  uint64_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  char *v286;
  float64x2_t *v287;
  CGAffineTransform *v288;
  float64x2_t *v289;
  unint64_t v290;
  double v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  int v300;
  double v301;
  double v302;
  char *v303;
  float64x2_t *v304;
  unsigned int *v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _DWORD *v315;
  int v316;
  _DWORD *v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  _DWORD *v322;
  int v323;
  int v324;
  _DWORD *v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  _DWORD *v330;
  int v331;
  int v332;
  unsigned int v333;
  _DWORD *v334;
  uint64_t v335;
  _DWORD *v336;
  int v337;
  int v338;
  int v339;
  unsigned int v340;
  _DWORD *v341;
  _DWORD *v342;
  signed int v343;
  uint64_t v344;
  int *v345;
  uint64_t v346;
  double *v347;
  signed int v348;
  double *v349;
  double v350;
  double v351;
  double *v352;
  uint64_t v353;
  char v354;
  unint64_t v355;
  int *v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  double *v362;
  double v363;
  double v364;
  unsigned int v365;
  unsigned int v366;
  double *v367;
  double v368;
  double v369;
  double *v370;
  double v371;
  double v372;
  int v373;
  double *v374;
  double v375;
  double v376;
  double v377;
  uint64_t v378;
  double v379;
  uint64_t v380;
  double *v381;
  uint64_t v382;
  double *v383;
  uint64_t v384;
  double v385;
  double v386;
  double v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  uint64_t v391;
  uint64_t v392;
  double *v393;
  double *v394;
  uint64_t v395;
  double v396;
  double v397;
  double v398;
  double v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  unsigned int v407;
  uint64_t v408;
  char v409;
  char v410;
  _OWORD *CoonsMeshTriangle;
  uint64_t v412;
  int v413;
  uint64_t v414;
  char v415;
  char v416;
  _OWORD *v417;
  uint64_t v418;
  float64x2_t v419;
  unsigned int v420;
  char *v421;
  float64x2_t *v422;
  uint64_t v423;
  uint64_t v424;
  CGAffineTransform *v425;
  CGFloat a;
  uint64_t v427;
  uint64_t v428;
  char v429;
  char v430;
  _QWORD *v431;
  uint64_t v432;
  int v433;
  _DWORD *v434;
  int v435;
  uint64_t v436;
  int v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  char v442;
  uint64_t v443;
  int v444;
  int v445;
  char v446;
  uint64_t v447;
  char v448;
  uint64_t v449;
  int v450;
  int v451;
  char v452;
  int v453;
  unint64_t v454;
  int *v455;
  int *v456;
  int *v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  int v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  int v475;
  int v476;
  uint64_t v477;
  int v478;
  int v479;
  int v480;
  int v481;
  uint64_t v482;
  int v483;
  _DWORD *v484;
  int v485;
  _DWORD *v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  _BYTE *v491;
  char v492;
  int v493;
  uint64_t v494;
  _DWORD *v495;
  int v496;
  int v497;
  uint64_t v498;
  int v499;
  int v500;
  int v501;
  _DWORD *v502;
  int v503;
  int v504;
  int v505;
  _DWORD *v506;
  int v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int *v512;
  int v513;
  int v514;
  uint64_t v515;
  int v516;
  int v517;
  float64_t v518;
  int v519;
  int v520;
  int v521;
  char v522;
  unsigned int v523;
  uint64_t v524;
  _DWORD *v525;
  int v526;
  int v527;
  uint64_t v528;
  int v529;
  int v530;
  float64_t v531;
  int v532;
  int v533;
  char v534;
  uint64_t v535;
  uint64_t v536;
  unsigned int v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  unsigned int v541;
  uint64_t v542;
  int *v543;
  int v544;
  int v545;
  uint64_t v546;
  int v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int *v558;
  int v559;
  int **v560;
  uint64_t v561;
  int v562;
  int *v563;
  void *v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  int *v571;
  int *v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  _DWORD *v577;
  _DWORD *v578;
  void *v579;
  void *v580;
  uint64_t v581;
  _DWORD *v582;
  uint64_t v583;
  uint64_t v584;
  _DWORD *v585;
  _QWORD *v586;
  unint64_t v587;
  uint64_t v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  CGFloat v599;
  CGFloat v600;
  CGFloat v601;
  CGFloat v602;
  size_t v603;
  double v604;
  uint64_t v605;
  double tx;
  int **v607;
  unint64_t v608;
  int *v609;
  uint64_t v610;
  int *v611;
  int *v612;
  _BOOL4 v613;
  int *v614;
  int **v615;
  uint64_t v616;
  int *v617;
  int **v618;
  int *v619;
  int *v620;
  int **v621;
  int *v622;
  int *v623;
  unint64_t v624;
  unint64_t v625;
  CGAffineTransform *v626;
  void *v627;
  void *v628;
  size_t v629;
  size_t v630;
  uint64_t v631;
  unint64_t v632;
  CGDataProvider *v633;
  CGImageRef v634;
  void *v635;
  size_t v636;
  uint64_t v637;
  uint64_t v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  _QWORD *v642;
  double *v643;
  uint64_t v644;
  uint64_t v645;
  CGContext *ca;
  unint64_t v647;
  float64x2_t v648;
  _QWORD *CoonsMeshEdge;
  float64x2_t *v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  int *v656;
  float64x2_t v657;
  int *v658;
  int v659;
  char *v660;
  int v661;
  float64x2_t *v662;
  int v663;
  uint64_t size;
  unsigned __int8 *v665;
  char v666;
  _DWORD *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  __int128 v674;
  int v675;
  int v676;
  unint64_t v677;
  unsigned __int8 *v678;
  float64x2_t v679;
  unint64_t v680;
  CGAffineTransform *v681;
  float64x2_t v682;
  int v683;
  int **v684;
  float64x2_t v685;
  float64x2_t v686;
  int **v687;
  float64x2_t v688;
  uint64_t v689;
  signed int v690;
  int v691;
  unint64_t v692;
  CGFloat k;
  CGFloat rect;
  unsigned int *recta;
  unsigned int *rectb;
  float64x2_t v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  double v704;
  double v705;
  double v706;
  double v707;
  double v708;
  double v709;
  double v710;
  double v711;
  double v712;
  double v713;
  double v714;
  double v715;
  double v716;
  double v717;
  double v718;
  double v719;
  _QWORD v720[20];
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  uint64_t v733;
  unint64_t v734;
  const void *v735;
  CGRect v736;
  float64x2_t v737;
  CGFloat x;
  CGFloat y;
  CGFloat cp1x;
  CGFloat cp1y;
  CGFloat cp2x;
  CGFloat cp2y;
  CGFloat v744;
  CGFloat v745;
  CGFloat v746;
  CGFloat v747;
  CGFloat v748;
  CGFloat v749;
  CGFloat v750;
  CGFloat v751;
  CGFloat v752;
  CGFloat v753;
  CGFloat v754;
  CGFloat v755;
  CGFloat v756;
  CGFloat v757;
  CGFloat v758;
  CGFloat v759;
  CGFloat v760;
  CGFloat v761;
  int v762;
  int v763;
  _DWORD v764[2];
  uint64_t v765;
  _DWORD v766[2];
  uint64_t v767;
  _DWORD v768[2];
  float64x2_t v769[2];
  CGAffineTransform __src;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  CGRect ClipBoundingBox;
  CGRect v802;
  CGRect v803;
  CGRect v804;
  CGRect v805;
  CGRect v806;
  CGRect v807;
  CGRect v808;

  v2 = c;
  v3 = a1;
  v800 = *MEMORY[0x1E0C80C00];
  CGContextSetFillColorSpace(c, *(CGColorSpaceRef *)(a1 + 24));
  CGContextSetStrokeColorSpace(v2, *(CGColorSpaceRef *)(v3 + 24));
  if (!*(_QWORD *)(v3 + 96))
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = v4 ? *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40) : 0;
    v6 = (double *)malloc_type_malloc(32 * v5 + 32, 0x100004000313F17uLL);
    if (v6)
    {
      v7 = v6;
      v642 = &v720[v5];
      v8 = (char *)&v697.f64[v5];
      v640 = v8 + 272;
      v641 = v8 + 232;
      v639 = v8 + 312;
      v647 = v5 + 1;
      v636 = 8 * (v5 + 1);
      v673 = 8 * v5;
      size = 8 * v5 + 8;
      ca = v2;
      v637 = 2 * v5;
      v638 = 3 * v5;
      v9 = 1.0;
      v10 = 0.25;
      v11 = 1;
      v644 = v5;
      v645 = v3;
      v643 = v6;
      while (1)
      {
        v666 = v11;
        BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v3 + 104));
        Length = CFDataGetLength(*(CFDataRef *)(v3 + 104));
        if (!Length)
          goto LABEL_734;
        v14 = BytePtr;
        v15 = 0;
        v16 = 0;
        v17 = (unsigned __int8 *)&v14[Length];
        v665 = v17;
        do
        {
          v18 = *(_QWORD *)(v3 + 48);
          if (*(_DWORD *)(v3 + 16) == 6)
          {
            if (v18 < 0x19)
            {
              LOBYTE(v24) = 0;
              if (!v18)
              {
LABEL_38:
                LOBYTE(v26) = 0;
LABEL_39:
                v31 = *(_QWORD *)(v3 + 32);
                v30 = *(_QWORD *)(v3 + 40);
                v32 = (double)(0xFFFFFFFF >> -(char)v31);
                v33 = v26 | v24;
                v34 = (double)(0xFFFFFFFF >> -(char)v30);
                if ((v33 & 3) != 0)
                {
                  v35 = 0;
                  v36 = 3 * (v33 & 3u);
                  do
                  {
                    *(_OWORD *)((char *)&x + v35) = *(_OWORD *)((char *)&x + 48 * (v33 & 3) + v35 + -192 * (v36 / 0xC));
                    v35 += 16;
                    ++v36;
                  }
                  while (v35 != 64);
                  v37 = *(double *)(v3 + 56);
                  v38 = *(double *)(v3 + 64);
                  v39 = *(double *)(v3 + 72) - v37;
                  v40 = *(double *)(v3 + 80) - v38;
                  v41 = v31 - 24;
                  v42 = 4;
                  while (1)
                  {
                    if (v31 < 0x19)
                    {
                      v45 = 0;
                      v46 = v31;
                      if (!v31)
                        goto LABEL_59;
                    }
                    else
                    {
                      if (v15 > 0x17)
                      {
                        v44 = v15;
                      }
                      else
                      {
                        do
                        {
                          v16 <<= 8;
                          if (v14 < v17)
                          {
                            v43 = *v14++;
                            v16 |= v43;
                          }
                          v44 = v15 + 8;
                          _CF = v15 >= 0x10;
                          v15 += 8;
                        }
                        while (!_CF);
                      }
                      v15 = v44 - 24;
                      v45 = ((v16 >> (v44 - 24)) & 0xFFFFFF) << v41;
                      v46 = v31 - 24;
                    }
                    while (v15 < v46)
                    {
                      v16 <<= 8;
                      if (v14 < v17)
                      {
                        v47 = *v14++;
                        v16 |= v47;
                      }
                      v15 += 8;
                    }
                    v15 -= v46;
                    LODWORD(v46) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v46);
LABEL_59:
                    *(&x + 2 * v42) = v37 + v39 * (double)(v46 | v45) / v32;
                    if (v31 >= 0x19)
                    {
                      if (v15 > 0x17)
                      {
                        v49 = v15;
                      }
                      else
                      {
                        do
                        {
                          v16 <<= 8;
                          if (v14 < v17)
                          {
                            v48 = *v14++;
                            v16 |= v48;
                          }
                          v49 = v15 + 8;
                          _CF = v15 >= 0x10;
                          v15 += 8;
                        }
                        while (!_CF);
                      }
                      v15 = v49 - 24;
                      v50 = ((v16 >> (v49 - 24)) & 0xFFFFFF) << v41;
                      v51 = v31 - 24;
LABEL_73:
                      while (v15 < v51)
                      {
                        v16 <<= 8;
                        if (v14 < v17)
                        {
                          v52 = *v14++;
                          v16 |= v52;
                        }
                        v15 += 8;
                      }
                      v15 -= v51;
                      LODWORD(v51) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v51);
                      goto LABEL_75;
                    }
                    v50 = 0;
                    v51 = v31;
                    if (v31)
                      goto LABEL_73;
LABEL_75:
                    *(&x + 2 * v42++ + 1) = v38 + v40 * (double)(v51 | v50) / v32;
                    if (v42 == 12)
                    {
                      v53 = 0;
                      v54 = 1;
                      do
                      {
                        v55 = v54;
                        if (v5)
                        {
                          v56 = ((_BYTE)v53 + v33) & 3;
                          v57 = (_QWORD *)((char *)v7 + v673 * v53);
                          v58 = (uint64_t *)((char *)v7 + v673 * v56);
                          v59 = v5;
                          do
                          {
                            v60 = *v58++;
                            *v57++ = v60;
                            --v59;
                          }
                          while (v59);
                        }
                        v54 = 0;
                        v53 = 1;
                      }
                      while ((v55 & 1) != 0);
                      v61 = 0;
                      v62 = 2;
                      while (1)
                      {
                        v63 = v61;
                        if (v5)
                          break;
LABEL_101:
                        v61 = 1;
                        v62 = 3;
                        if ((v63 & 1) != 0)
                          goto LABEL_347;
                      }
                      v64 = 0;
                      v65 = *(_QWORD *)(v3 + 88);
                      v66 = v62 * v5;
                      while (2)
                      {
                        if (v30 < 0x19)
                        {
                          v69 = 0;
                          v70 = v30;
                          if (v30)
                            goto LABEL_95;
                        }
                        else
                        {
                          if (v15 > 0x17)
                          {
                            v68 = v15;
                          }
                          else
                          {
                            do
                            {
                              v16 <<= 8;
                              if (v14 < v17)
                              {
                                v67 = *v14++;
                                v16 |= v67;
                              }
                              v68 = v15 + 8;
                              _CF = v15 >= 0x10;
                              v15 += 8;
                            }
                            while (!_CF);
                          }
                          v15 = v68 - 24;
                          v69 = ((v16 >> (v68 - 24)) & 0xFFFFFF) << (v30 - 24);
                          v70 = v30 - 24;
LABEL_95:
                          while (v15 < v70)
                          {
                            v16 <<= 8;
                            if (v14 < v17)
                            {
                              v71 = *v14++;
                              v16 |= v71;
                            }
                            v15 += 8;
                          }
                          v15 -= v70;
                          LODWORD(v70) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v70);
                        }
                        v7[v64 + v66] = *(double *)(v65 + 16 * v64)
                                      + (*(double *)(v65 + 16 * v64 + 8) - *(double *)(v65 + 16 * v64))
                                      * (double)(v70 | v69)
                                      / v34;
                        if (++v64 == v5)
                          goto LABEL_101;
                        continue;
                      }
                    }
                  }
                }
                v72 = 0;
                v73 = *(double *)(v3 + 56);
                v74 = *(double *)(v3 + 64);
                v75 = *(double *)(v3 + 72) - v73;
                v76 = *(double *)(v3 + 80) - v74;
                v77 = v31 - 24;
                while (1)
                {
                  if (v31 < 0x19)
                  {
                    v80 = 0;
                    v81 = v31;
                    if (!v31)
                      goto LABEL_120;
                  }
                  else
                  {
                    if (v15 > 0x17)
                    {
                      v79 = v15;
                    }
                    else
                    {
                      do
                      {
                        v16 <<= 8;
                        if (v14 < v17)
                        {
                          v78 = *v14++;
                          v16 |= v78;
                        }
                        v79 = v15 + 8;
                        _CF = v15 >= 0x10;
                        v15 += 8;
                      }
                      while (!_CF);
                    }
                    v15 = v79 - 24;
                    v80 = ((v16 >> (v79 - 24)) & 0xFFFFFF) << v77;
                    v81 = v31 - 24;
                  }
                  while (v15 < v81)
                  {
                    v16 <<= 8;
                    if (v14 < v17)
                    {
                      v82 = *v14++;
                      v16 |= v82;
                    }
                    v15 += 8;
                  }
                  v15 -= v81;
                  LODWORD(v81) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v81);
LABEL_120:
                  *(&x + 2 * v72) = v73 + v75 * (double)(v81 | v80) / v32;
                  if (v31 >= 0x19)
                  {
                    if (v15 > 0x17)
                    {
                      v84 = v15;
                    }
                    else
                    {
                      do
                      {
                        v16 <<= 8;
                        if (v14 < v17)
                        {
                          v83 = *v14++;
                          v16 |= v83;
                        }
                        v84 = v15 + 8;
                        _CF = v15 >= 0x10;
                        v15 += 8;
                      }
                      while (!_CF);
                    }
                    v15 = v84 - 24;
                    v85 = ((v16 >> (v84 - 24)) & 0xFFFFFF) << v77;
                    v86 = v31 - 24;
LABEL_131:
                    while (v15 < v86)
                    {
                      v16 <<= 8;
                      if (v14 < v17)
                      {
                        v87 = *v14++;
                        v16 |= v87;
                      }
                      v15 += 8;
                    }
                    v15 -= v86;
                    LODWORD(v86) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v86);
                    goto LABEL_136;
                  }
                  v85 = 0;
                  v86 = v31;
                  if (v31)
                    goto LABEL_131;
LABEL_136:
                  *(&x + 2 * v72++ + 1) = v74 + v76 * (double)(v86 | v85) / v32;
                  if (v72 == 12)
                  {
                    v88 = 0;
                    while (!v5)
                    {
LABEL_157:
                      if (++v88 == 4)
                        goto LABEL_347;
                    }
                    v89 = 0;
                    v90 = *(_QWORD *)(v3 + 88);
                    while (2)
                    {
                      if (v30 < 0x19)
                      {
                        v93 = 0;
                        v94 = v30;
                        if (v30)
                          goto LABEL_151;
                      }
                      else
                      {
                        if (v15 > 0x17)
                        {
                          v92 = v15;
                        }
                        else
                        {
                          do
                          {
                            v16 <<= 8;
                            if (v14 < v17)
                            {
                              v91 = *v14++;
                              v16 |= v91;
                            }
                            v92 = v15 + 8;
                            _CF = v15 >= 0x10;
                            v15 += 8;
                          }
                          while (!_CF);
                        }
                        v15 = v92 - 24;
                        v93 = ((v16 >> (v92 - 24)) & 0xFFFFFF) << (v30 - 24);
                        v94 = v30 - 24;
LABEL_151:
                        while (v15 < v94)
                        {
                          v16 <<= 8;
                          if (v14 < v17)
                          {
                            v95 = *v14++;
                            v16 |= v95;
                          }
                          v15 += 8;
                        }
                        v15 -= v94;
                        LODWORD(v94) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v94);
                      }
                      v7[v89 + v88 * v5] = *(double *)(v90 + 16 * v89)
                                         + (*(double *)(v90 + 16 * v89 + 8) - *(double *)(v90 + 16 * v89))
                                         * (double)(v94 | v93)
                                         / v34;
                      if (++v89 == v5)
                        goto LABEL_157;
                      continue;
                    }
                  }
                }
              }
            }
            else
            {
              if (v15 > 0x17)
              {
                v20 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v19 = *v14++;
                    v16 |= v19;
                  }
                  v20 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v18 -= 24;
              v15 = v20 - 24;
              v24 = ((v16 >> (v20 - 24)) & 0xFFFFFF) << v18;
              if (!v18)
                goto LABEL_38;
            }
            while (v15 < v18)
            {
              v16 <<= 8;
              if (v14 < v17)
              {
                v25 = *v14++;
                v16 |= v25;
              }
              v15 += 8;
            }
            v15 -= v18;
            v26 = (v16 >> v15) & (0xFFFFFFFF >> -(char)v18);
            goto LABEL_39;
          }
          if (v18 < 0x19)
          {
            LOBYTE(v27) = 0;
            if (v18)
              goto LABEL_31;
          }
          else
          {
            if (v15 > 0x17)
            {
              v23 = v15;
            }
            else
            {
              do
              {
                v16 <<= 8;
                if (v14 < v17)
                {
                  v22 = *v14++;
                  v16 |= v22;
                }
                v23 = v15 + 8;
                _CF = v15 >= 0x10;
                v15 += 8;
              }
              while (!_CF);
            }
            v18 -= 24;
            v15 = v23 - 24;
            v27 = ((v16 >> (v23 - 24)) & 0xFFFFFF) << v18;
            if (v18)
            {
LABEL_31:
              while (v15 < v18)
              {
                v16 <<= 8;
                if (v14 < v17)
                {
                  v28 = *v14++;
                  v16 |= v28;
                }
                v15 += 8;
              }
              v15 -= v18;
              v29 = (v16 >> v15) & (0xFFFFFFFF >> -(char)v18);
              goto LABEL_162;
            }
          }
          LOBYTE(v29) = 0;
LABEL_162:
          v97 = *(_QWORD *)(v3 + 32);
          v96 = *(_QWORD *)(v3 + 40);
          v98 = (double)(0xFFFFFFFF >> -(char)v97);
          v99 = v29 | v27;
          v100 = (double)(0xFFFFFFFF >> -(char)v96);
          v101 = 0;
          if ((v99 & 3) != 0)
          {
            v102 = 3 * (v99 & 3u);
            do
            {
              *(_OWORD *)((char *)&x + v101) = *(_OWORD *)((char *)&x + 48 * (v99 & 3) + v101 + -192 * (v102 / 0xC));
              v101 += 16;
              ++v102;
            }
            while (v101 != 64);
            v103 = *(double *)(v3 + 56);
            v104 = *(double *)(v3 + 64);
            v105 = *(double *)(v3 + 72) - v103;
            v106 = *(double *)(v3 + 80) - v104;
            v107 = v97 - 24;
            v108 = 4;
            while (1)
            {
              if (v97 < 0x19)
              {
                v111 = 0;
                v112 = v97;
                if (!v97)
                  goto LABEL_182;
              }
              else
              {
                if (v15 > 0x17)
                {
                  v110 = v15;
                }
                else
                {
                  do
                  {
                    v16 <<= 8;
                    if (v14 < v17)
                    {
                      v109 = *v14++;
                      v16 |= v109;
                    }
                    v110 = v15 + 8;
                    _CF = v15 >= 0x10;
                    v15 += 8;
                  }
                  while (!_CF);
                }
                v15 = v110 - 24;
                v111 = ((v16 >> (v110 - 24)) & 0xFFFFFF) << v107;
                v112 = v97 - 24;
              }
              while (v15 < v112)
              {
                v16 <<= 8;
                if (v14 < v17)
                {
                  v113 = *v14++;
                  v16 |= v113;
                }
                v15 += 8;
              }
              v15 -= v112;
              LODWORD(v112) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v112);
LABEL_182:
              *(&x + 2 * v108) = v103 + v105 * (double)(v112 | v111) / v98;
              if (v97 >= 0x19)
              {
                if (v15 > 0x17)
                {
                  v115 = v15;
                }
                else
                {
                  do
                  {
                    v16 <<= 8;
                    if (v14 < v17)
                    {
                      v114 = *v14++;
                      v16 |= v114;
                    }
                    v115 = v15 + 8;
                    _CF = v15 >= 0x10;
                    v15 += 8;
                  }
                  while (!_CF);
                }
                v15 = v115 - 24;
                v116 = ((v16 >> (v115 - 24)) & 0xFFFFFF) << v107;
                v117 = v97 - 24;
LABEL_196:
                while (v15 < v117)
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v118 = *v14++;
                    v16 |= v118;
                  }
                  v15 += 8;
                }
                v15 -= v117;
                LODWORD(v117) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v117);
                goto LABEL_198;
              }
              v116 = 0;
              v117 = v97;
              if (v97)
                goto LABEL_196;
LABEL_198:
              *(&x + 2 * v108++ + 1) = v104 + v106 * (double)(v117 | v116) / v98;
              if (v108 == 12)
              {
                while (1)
                {
                  if (v97 < 0x19)
                  {
                    v121 = v97;
                    if (!v97)
                      goto LABEL_215;
                  }
                  else
                  {
                    if (v15 > 0x17)
                    {
                      v120 = v15;
                    }
                    else
                    {
                      do
                      {
                        v16 <<= 8;
                        if (v14 < v17)
                        {
                          v119 = *v14++;
                          v16 |= v119;
                        }
                        v120 = v15 + 8;
                        _CF = v15 >= 0x10;
                        v15 += 8;
                      }
                      while (!_CF);
                    }
                    v15 = v120 - 24;
                    v121 = v97 - 24;
                  }
                  while (v15 < v121)
                  {
                    v16 <<= 8;
                    if (v14 < v17)
                    {
                      v122 = *v14++;
                      v16 |= v122;
                    }
                    v15 += 8;
                  }
                  v15 -= v121;
LABEL_215:
                  if (v97 >= 0x19)
                  {
                    if (v15 > 0x17)
                    {
                      v124 = v15;
                    }
                    else
                    {
                      do
                      {
                        v16 <<= 8;
                        if (v14 < v17)
                        {
                          v123 = *v14++;
                          v16 |= v123;
                        }
                        v124 = v15 + 8;
                        _CF = v15 >= 0x10;
                        v15 += 8;
                      }
                      while (!_CF);
                    }
                    v15 = v124 - 24;
                    v125 = v97 - 24;
LABEL_229:
                    while (v15 < v125)
                    {
                      v16 <<= 8;
                      if (v14 < v17)
                      {
                        v126 = *v14++;
                        v16 |= v126;
                      }
                      v15 += 8;
                    }
                    v15 -= v125;
                    goto LABEL_231;
                  }
                  v125 = v97;
                  if (v97)
                    goto LABEL_229;
LABEL_231:
                  if (++v108 == 16)
                  {
                    v127 = 0;
                    v128 = 1;
                    do
                    {
                      v129 = v128;
                      if (v5)
                      {
                        v130 = ((_BYTE)v127 + v99) & 3;
                        v131 = (_QWORD *)((char *)v7 + v673 * v127);
                        v132 = (uint64_t *)((char *)v7 + v673 * v130);
                        v133 = v5;
                        do
                        {
                          v134 = *v132++;
                          *v131++ = v134;
                          --v133;
                        }
                        while (v133);
                      }
                      v128 = 0;
                      v127 = 1;
                    }
                    while ((v129 & 1) != 0);
                    v135 = 0;
                    v136 = 2;
                    while (1)
                    {
                      v137 = v135;
                      if (v5)
                        break;
LABEL_257:
                      v135 = 1;
                      v136 = 3;
                      if ((v137 & 1) != 0)
                        goto LABEL_347;
                    }
                    v138 = 0;
                    v139 = *(_QWORD *)(v3 + 88);
                    v140 = v136 * v5;
                    while (2)
                    {
                      if (v96 < 0x19)
                      {
                        v143 = 0;
                        v144 = v96;
                        if (v96)
                          goto LABEL_251;
                      }
                      else
                      {
                        if (v15 > 0x17)
                        {
                          v142 = v15;
                        }
                        else
                        {
                          do
                          {
                            v16 <<= 8;
                            if (v14 < v17)
                            {
                              v141 = *v14++;
                              v16 |= v141;
                            }
                            v142 = v15 + 8;
                            _CF = v15 >= 0x10;
                            v15 += 8;
                          }
                          while (!_CF);
                        }
                        v15 = v142 - 24;
                        v143 = ((v16 >> (v142 - 24)) & 0xFFFFFF) << (v96 - 24);
                        v144 = v96 - 24;
LABEL_251:
                        while (v15 < v144)
                        {
                          v16 <<= 8;
                          if (v14 < v17)
                          {
                            v145 = *v14++;
                            v16 |= v145;
                          }
                          v15 += 8;
                        }
                        v15 -= v144;
                        LODWORD(v144) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v144);
                      }
                      v7[v138 + v140] = *(double *)(v139 + 16 * v138)
                                      + (*(double *)(v139 + 16 * v138 + 8) - *(double *)(v139 + 16 * v138))
                                      * (double)(v144 | v143)
                                      / v100;
                      if (++v138 == v5)
                        goto LABEL_257;
                      continue;
                    }
                  }
                }
              }
            }
          }
          v146 = *(double *)(v3 + 56);
          v147 = *(double *)(v3 + 64);
          v148 = *(double *)(v3 + 72) - v146;
          v149 = *(double *)(v3 + 80) - v147;
          v150 = v97 - 24;
          do
          {
            if (v97 < 0x19)
            {
              v153 = 0;
              v154 = v97;
              if (!v97)
                goto LABEL_276;
            }
            else
            {
              if (v15 > 0x17)
              {
                v152 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v151 = *v14++;
                    v16 |= v151;
                  }
                  v152 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v15 = v152 - 24;
              v153 = ((v16 >> (v152 - 24)) & 0xFFFFFF) << v150;
              v154 = v97 - 24;
            }
            while (v15 < v154)
            {
              v16 <<= 8;
              if (v14 < v17)
              {
                v155 = *v14++;
                v16 |= v155;
              }
              v15 += 8;
            }
            v15 -= v154;
            LODWORD(v154) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v154);
LABEL_276:
            *(&x + 2 * v101) = v146 + v148 * (double)(v154 | v153) / v98;
            if (v97 < 0x19)
            {
              v158 = 0;
              v159 = v97;
              if (!v97)
                goto LABEL_292;
            }
            else
            {
              if (v15 > 0x17)
              {
                v157 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v156 = *v14++;
                    v16 |= v156;
                  }
                  v157 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v15 = v157 - 24;
              v158 = ((v16 >> (v157 - 24)) & 0xFFFFFF) << v150;
              v159 = v97 - 24;
            }
            while (v15 < v159)
            {
              v16 <<= 8;
              if (v14 < v17)
              {
                v160 = *v14++;
                v16 |= v160;
              }
              v15 += 8;
            }
            v15 -= v159;
            LODWORD(v159) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v159);
LABEL_292:
            *(&x + 2 * v101++ + 1) = v147 + v149 * (double)(v159 | v158) / v98;
          }
          while (v101 != 12);
          do
          {
            if (v97 < 0x19)
            {
              v163 = v97;
              if (!v97)
                goto LABEL_309;
            }
            else
            {
              if (v15 > 0x17)
              {
                v162 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v161 = *v14++;
                    v16 |= v161;
                  }
                  v162 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v15 = v162 - 24;
              v163 = v97 - 24;
            }
            while (v15 < v163)
            {
              v16 <<= 8;
              if (v14 < v17)
              {
                v164 = *v14++;
                v16 |= v164;
              }
              v15 += 8;
            }
            v15 -= v163;
LABEL_309:
            if (v97 < 0x19)
            {
              v167 = v97;
              if (!v97)
                goto LABEL_325;
            }
            else
            {
              if (v15 > 0x17)
              {
                v166 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v165 = *v14++;
                    v16 |= v165;
                  }
                  v166 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v15 = v166 - 24;
              v167 = v97 - 24;
            }
            while (v15 < v167)
            {
              v16 <<= 8;
              if (v14 < v17)
              {
                v168 = *v14++;
                v16 |= v168;
              }
              v15 += 8;
            }
            v15 -= v167;
LABEL_325:
            ++v101;
          }
          while (v101 != 16);
          for (i = 0; i != 4; ++i)
          {
            if (v5)
            {
              v170 = 0;
              v171 = *(_QWORD *)(v3 + 88);
              while (v96 < 0x19)
              {
                v174 = 0;
                v175 = v96;
                if (v96)
                  goto LABEL_340;
LABEL_345:
                v7[v170 + i * v5] = *(double *)(v171 + 16 * v170)
                                  + (*(double *)(v171 + 16 * v170 + 8) - *(double *)(v171 + 16 * v170))
                                  * (double)(v175 | v174)
                                  / v100;
                if (++v170 == v5)
                  goto LABEL_346;
              }
              if (v15 > 0x17)
              {
                v173 = v15;
              }
              else
              {
                do
                {
                  v16 <<= 8;
                  if (v14 < v17)
                  {
                    v172 = *v14++;
                    v16 |= v172;
                  }
                  v173 = v15 + 8;
                  _CF = v15 >= 0x10;
                  v15 += 8;
                }
                while (!_CF);
              }
              v15 = v173 - 24;
              v174 = ((v16 >> (v173 - 24)) & 0xFFFFFF) << (v96 - 24);
              v175 = v96 - 24;
LABEL_340:
              while (v15 < v175)
              {
                v16 <<= 8;
                if (v14 < v17)
                {
                  v176 = *v14++;
                  v16 |= v176;
                }
                v15 += 8;
              }
              v15 -= v175;
              LODWORD(v175) = (v16 >> v15) & (0xFFFFFFFF >> -(char)v175);
              goto LABEL_345;
            }
LABEL_346:
            ;
          }
LABEL_347:
          v678 = (unsigned __int8 *)v14;
          if ((v666 & 1) == 0)
          {
            v204 = 0;
            v205 = x;
            v206 = y;
            v207 = x;
            v208 = y;
            do
            {
              v210 = *(CGFloat *)((char *)&cp1x + v204);
              v209 = *(CGFloat *)((char *)&cp1y + v204);
              if (v210 > v207)
                v211 = *(CGFloat *)((char *)&cp1x + v204);
              else
                v211 = v207;
              if (v210 < v205)
                v205 = *(CGFloat *)((char *)&cp1x + v204);
              else
                v207 = v211;
              if (v209 >= v206)
              {
                if (v209 > v208)
                  v208 = *(CGFloat *)((char *)&cp1y + v204);
              }
              else
              {
                v206 = *(CGFloat *)((char *)&cp1y + v204);
              }
              v204 += 16;
            }
            while (v204 != 176);
            ClipBoundingBox = CGContextGetClipBoundingBox(v2);
            v802 = CGRectIntegral(ClipBoundingBox);
            v212 = v802.origin.x;
            v213 = v802.origin.y;
            width = v802.size.width;
            height = v802.size.height;
            v736 = v802;
            if (v802.size.height < 0.0 || v802.size.width < 0.0)
            {
              rect = v802.origin.y;
              v803 = CGRectStandardize(v802);
              v217 = rect;
              if (v205 <= v803.origin.x + v803.size.width)
              {
                v218 = v212;
                v219 = width;
                v220 = height;
                v221 = COERCE_DOUBLE(CGRectStandardize(*(CGRect *)(&v217 - 1)));
                v222 = rect;
                if (v207 >= v221)
                {
                  v223 = v212;
                  v224 = width;
                  v225 = height;
                  v804 = CGRectStandardize(*(CGRect *)(&v222 - 1));
                  if (v206 <= v804.origin.y + v804.size.height)
                  {
                    v805.origin.x = v212;
                    v805.origin.y = rect;
                    v805.size.width = width;
                    v805.size.height = height;
                    v806 = CGRectStandardize(v805);
                    v213 = v806.origin.y;
                    goto LABEL_397;
                  }
                }
              }
              goto LABEL_731;
            }
            v226 = v802.origin.y + v802.size.height;
            if (v205 > v802.origin.x + v802.size.width || v207 < v802.origin.x || v206 > v226)
              goto LABEL_731;
LABEL_397:
            if (v208 < v213)
              goto LABEL_731;
            v735 = 0;
            memset(v720, 0, sizeof(v720));
            v721 = 0u;
            v722 = 0u;
            v723 = 0u;
            v724 = 0u;
            v725 = 0u;
            v726 = 0u;
            v727 = 0u;
            v728 = 0u;
            v729 = 0u;
            v730 = 0u;
            CGContextGetCTM(&__src, v2);
            v697.f64[0] = __src.tx + __src.c * y + __src.a * x;
            v697.f64[1] = __src.ty + __src.d * y + __src.b * x;
            v698 = __src.tx + __src.c * cp1y + __src.a * cp1x;
            v699 = __src.ty + __src.d * cp1y + __src.b * cp1x;
            v700 = __src.tx + __src.c * cp2y + __src.a * cp2x;
            v701 = __src.ty + __src.d * cp2y + __src.b * cp2x;
            v702 = __src.tx + __src.c * v745 + __src.a * v744;
            v703 = __src.ty + __src.d * v745 + __src.b * v744;
            v704 = __src.tx + __src.c * v747 + __src.a * v746;
            v705 = __src.ty + __src.d * v747 + __src.b * v746;
            v706 = __src.tx + __src.c * v749 + __src.a * v748;
            v707 = __src.ty + __src.d * v749 + __src.b * v748;
            v708 = __src.tx + __src.c * v751 + __src.a * v750;
            v709 = __src.ty + __src.d * v751 + __src.b * v750;
            v710 = __src.tx + __src.c * v753 + __src.a * v752;
            v711 = __src.ty + __src.d * v753 + __src.b * v752;
            v712 = __src.tx + __src.c * v755 + __src.a * v754;
            v713 = __src.ty + __src.d * v755 + __src.b * v754;
            v714 = __src.tx + __src.c * v757 + __src.a * v756;
            v715 = __src.ty + __src.d * v757 + __src.b * v756;
            v716 = __src.tx + __src.c * v759 + __src.a * v758;
            v717 = __src.ty + __src.d * v759 + __src.b * v758;
            v718 = __src.tx + __src.c * v761 + __src.a * v760;
            v719 = __src.ty + __src.d * v761 + __src.b * v760;
            if (v647 > 5)
            {
LABEL_731:
              v9 = 1.0;
              v10 = 0.25;
              goto LABEL_732;
            }
            if (v5)
            {
              v229 = v720;
              v230 = v5;
              do
              {
                *v229 = *(_QWORD *)v7;
                v229[5] = *(_QWORD *)&v7[v5];
                v229[10] = *(_QWORD *)&v7[v637];
                v229[15] = *(_QWORD *)&v7[v638];
                ++v7;
                ++v229;
                --v230;
              }
              while (v230);
            }
            *v642 = 0x3FF0000000000000;
            *v641 = 0x3FF0000000000000;
            *v640 = 0x3FF0000000000000;
            *v639 = 0x3FF0000000000000;
            v722.f64[0] = (v718 - v697.f64[0]) * 3.0;
            v722.f64[1] = (v719 - v697.f64[1]) * 3.0;
            v723.f64[0] = (v698 - v697.f64[0]) * 3.0;
            v723.f64[1] = (v699 - v697.f64[1]) * 3.0;
            v724.f64[0] = (v704 - v718 + v712 - v698) * 3.0 + v697.f64[0] * 5.0 + (v702 + v714) * -2.0 - v708;
            v724.f64[1] = (v705 - v719 + v713 - v699) * 3.0 + v697.f64[1] * 5.0 + (v703 + v715) * -2.0 - v709;
            v725.f64[0] = (v697.f64[0] + v716 + v718 * -2.0) * 3.0;
            v725.f64[1] = (v697.f64[1] + v717 + v719 * -2.0) * 3.0;
            v726.f64[0] = (v697.f64[0] + v700 + v698 * -2.0) * 3.0;
            v726.f64[1] = (v697.f64[1] + v701 + v699 * -2.0) * 3.0;
            v727.f64[0] = (v702 + v706 - v716 - v697.f64[0] + (v718 - v704) * 2.0) * 3.0;
            v727.f64[1] = (v703 + v707 - v717 - v697.f64[1] + (v719 - v705) * 2.0) * 3.0;
            v728.f64[0] = (v714 + v710 - v700 - v697.f64[0] + (v698 - v712) * 2.0) * 3.0;
            v728.f64[1] = (v715 + v711 - v701 - v697.f64[1] + (v699 - v713) * 2.0) * 3.0;
            v729.f64[0] = v714 - v697.f64[0] + (v718 - v716) * 3.0;
            v729.f64[1] = v715 - v697.f64[1] + (v719 - v717) * 3.0;
            v734 = v647;
            v721 = v697;
            v730.f64[0] = v702 - v697.f64[0] + (v698 - v700) * 3.0;
            v730.f64[1] = v703 - v697.f64[1] + (v699 - v701) * 3.0;
            v731.f64[0] = v697.f64[0] + v708 - v702 - v714 + (v704 + v716 - v718 - v706) * 3.0;
            v731.f64[1] = v697.f64[1] + v709 - v703 - v715 + (v705 + v717 - v719 - v707) * 3.0;
            v732.f64[0] = v697.f64[0] + v708 - v714 - v702 + (v712 + v700 - v698 - v710) * 3.0;
            v732.f64[1] = v697.f64[1] + v709 - v715 - v703 + (v713 + v701 - v699 - v711) * 3.0;
            v231 = v647;
            if (v647)
            {
              v232 = (double *)&v697;
              do
              {
                v233 = v232[24];
                v232[68] = v233;
                v234 = v232[39];
                v232[73] = v234 - v233;
                v235 = v232[29];
                v232[78] = v235 - v233;
                v232[83] = v233 + v232[34] - v235 - v234;
                ++v232;
                --v231;
              }
              while (v231);
            }
            v236 = (float64x2_t *)malloc_type_malloc(0x30uLL, 0x1000040451B5BE8uLL);
            __asm { FMOV            V0.2D, #0.5 }
            v648 = _Q0;
            v662 = v236;
            if (v236)
            {
              v660 = (char *)malloc_type_malloc(0x78uLL, 0xABFEB9F6uLL);
              if (v660)
              {
                v240 = v734;
                v241 = malloc_type_calloc(1uLL, 0x50uLL, 0x1020040AF517F5CuLL);
                if (v241)
                {
                  v242 = v241;
                  v241[1] = 0;
                  v241[3] = 0;
                  v241[5] = 0;
                  *(_DWORD *)v241 = v240;
                  v243 = malloc_type_malloc(0x1098uLL, 0x1000040FF89C88EuLL);
                  v242[1] = v243;
                  if (v243)
                  {
                    v244 = -4248;
                    do
                    {
                      v245 = v242[1] + v244;
                      *(_QWORD *)(v245 + 4312) = 0;
                      *(_OWORD *)(v245 + 4280) = 0uLL;
                      *(_OWORD *)(v245 + 4296) = 0uLL;
                      *(_OWORD *)(v245 + 4248) = 0uLL;
                      *(_OWORD *)(v245 + 4264) = 0uLL;
                      v244 += 72;
                    }
                    while (v244);
                    v242[2] = 0x3B00000000;
                    v246 = malloc_type_malloc(0x528uLL, 0x1000040A86A77D5uLL);
                    v242[3] = v246;
                    if (v246)
                    {
                      for (j = 0; j != 1320; j += 20)
                      {
                        v248 = v242[3] + j;
                        *(_DWORD *)(v248 + 16) = -1;
                        *(_QWORD *)v248 = -1;
                        *(_QWORD *)(v248 + 8) = -1;
                      }
                      v242[4] = 0x4200000000;
                      v249 = malloc_type_malloc(0xAE0uLL, 0x1000040EED21634uLL);
                      v242[5] = v249;
                      if (v249)
                      {
                        v251 = 0;
                        *(_QWORD *)&v252 = -1;
                        *((_QWORD *)&v252 + 1) = -1;
                        do
                        {
                          v253 = v242[5] + v251;
                          *(_OWORD *)v253 = v252;
                          *(_OWORD *)(v253 + 16) = v252;
                          *(_QWORD *)(v253 + 32) = -1;
                          *(_QWORD *)(v253 + 40) = 1;
                          v251 += 48;
                        }
                        while (v251 != 2784);
                        v254 = 0;
                        v242[7] = -1;
                        v242[8] = -1;
                        *((_DWORD *)v242 + 4) = 9;
                        *((_DWORD *)v242 + 8) = 16;
                        v667 = v242 + 7;
                        v242[6] = 0x3A00000008;
                        *(_QWORD *)&v250 = 0;
                        recta = (unsigned int *)v242;
                        while (1)
                        {
                          v669 = v254;
                          v256 = v727;
                          v255 = v728;
                          v258 = v731;
                          v257 = v732;
                          v260 = v721;
                          v259 = v722;
                          v261 = v723;
                          v262 = v724;
                          v263 = v725;
                          v264 = v726;
                          v265 = v729;
                          v266 = v730;
                          v267 = v734;
                          if (v734)
                          {
                            v268 = v769;
                            p_src = &__src;
                            v270 = (double *)&v733;
                            v271 = v734;
                            do
                            {
                              v272 = v270[5] + v270[15] * *(double *)&v250;
                              p_src->a = *v270 + v270[10] * *(double *)&v250 + v272 * 0.0;
                              p_src = (CGAffineTransform *)((char *)p_src + 8);
                              v268->f64[0] = v272 * 0.5;
                              v268 = (float64x2_t *)((char *)v268 + 8);
                              ++v270;
                              --v271;
                            }
                            while (v271);
                          }
                          v273 = 0;
                          v274 = vmlaq_n_f64(v265, v258, *(double *)&v250);
                          v275 = vmlaq_n_f64(v263, v256, *(double *)&v250);
                          v276 = vmlaq_n_f64(v259, vmlaq_n_f64(v262, vmlaq_n_f64(v255, v257, *(double *)&v250), *(double *)&v250), *(double *)&v250);
                          v277 = vmlaq_n_f64(v260, vmlaq_n_f64(v261, vmlaq_n_f64(v264, v266, *(double *)&v250), *(double *)&v250), *(double *)&v250);
                          __asm { FMOV            V3.2D, #3.0 }
                          v279 = vmulq_f64(vmulq_f64(v274, _Q3), v648);
                          __asm { FMOV            V4.2D, #2.0 }
                          v281 = vmulq_f64(vmlaq_f64(v279, _Q4, v275), v648);
                          v282 = vmulq_f64(vaddq_f64(v279, v279), v648);
                          v283 = vmlaq_f64(v277, (float64x2_t)0, vmlaq_f64(v276, (float64x2_t)0, vmlaq_f64(v275, (float64x2_t)0, v274)));
                          v284 = vmlaq_f64(vmulq_f64(vmlaq_f64(v276, v648, vmlaq_f64(v275, v648, v274)), v648), (float64x2_t)0, vmlaq_f64(v281, (float64x2_t)0, v279));
                          v285 = vmlaq_f64(vmulq_f64(vmlaq_f64(v281, v648, v279), v648), (float64x2_t)0, v282);
                          v679 = vmulq_f64(v282, v648);
                          v286 = v660;
                          v287 = v662;
                          v674 = v250;
                          do
                          {
                            *v287 = v283;
                            if (v267)
                            {
                              v288 = &__src;
                              v685 = v284;
                              v688 = v283;
                              v682 = v285;
                              memcpy(v286, &__src, 8 * v267);
                              v285 = v682;
                              v284 = v685;
                              v283 = v688;
                              v250 = v674;
                              v289 = v769;
                              v290 = v267;
                              do
                              {
                                v291 = v289->f64[0];
                                v289 = (float64x2_t *)((char *)v289 + 8);
                                v288->a = v291 + v288->a;
                                v288 = (CGAffineTransform *)((char *)v288 + 8);
                                --v290;
                              }
                              while (v290);
                            }
                            v283 = vaddq_f64(v283, v284);
                            v284 = vaddq_f64(v284, v285);
                            v285 = vaddq_f64(v679, v285);
                            ++v273;
                            ++v287;
                            v286 += 40;
                          }
                          while (v273 != 3);
                          v292 = 0;
                          v293 = v669;
                          v294 = 3 * v669;
                          v295 = 2 * v669;
                          v296 = 3 * v669 + 1;
                          v297 = 2 * v669 + 2;
                          v298 = 3 * v669 + 3;
                          v689 = 2 * v669 + 12;
                          v299 = 2 * v669 + 4;
                          v300 = 2 * (v669 + 1);
                          v301 = *(double *)&v250 <= 1.0 ? *(double *)&v250 : 1.0;
                          v302 = 0.0;
                          v303 = v660;
                          v304 = v662;
                          v305 = recta;
                          while (1)
                          {
                            v306 = v292 + v294;
                            v307 = *((_QWORD *)v305 + 1) + 72 * (v292 + v294);
                            *(float64x2_t *)v307 = *v304;
                            if (v302 <= 1.0)
                              v308 = v302;
                            else
                              v308 = 1.0;
                            *(double *)(v307 + 16) = v308;
                            *(double *)(v307 + 24) = v301;
                            v309 = *v305;
                            if ((_DWORD)v309)
                            {
                              v310 = 0;
                              v311 = 8 * v309;
                              v312 = v307 + 32;
                              do
                              {
                                *(_QWORD *)(v312 + v310) = *(_QWORD *)&v303[v310];
                                v310 += 8;
                              }
                              while (v311 != v310);
                            }
                            if (v292 == 2)
                              break;
                            v313 = *((_QWORD *)v305 + 3);
                            v314 = v292 + v295;
                            v315 = (_DWORD *)(v313 + 20 * (v292 + v295));
                            v316 = v296 + v292;
                            *v315 = v306;
                            v315[1] = v296 + v292;
                            v317 = v315 + 2;
                            if (v293 == 2)
                            {
                              *v317 = -1;
                              *(_DWORD *)(v313 + 20 * v314 + 12) = 3 * (v292 + v297);
                              v318 = v292 + 1;
                            }
                            else
                            {
                              v319 = 3 * v314;
                              *v317 = 3 * v314;
                              if (v293)
                                *(_DWORD *)(v313 + 20 * v314 + 12) = 3 * (v292 + v297);
                              else
                                *(_DWORD *)(v313 + 20 * v314 + 12) = -1;
                              v320 = 20 * (v306 + 6);
                              v321 = v292 + v298;
                              *(_DWORD *)(v313 + v320) = v292 + v298;
                              v322 = (_DWORD *)(v313 + v320);
                              v322[1] = v306;
                              v322[2] = v319 + 2;
                              v323 = v319 + 11;
                              v324 = 3 * v292 + 12;
                              v293 = v669;
                              if (!v669)
                                v324 = -1;
                              if (!v292)
                                v323 = -1;
                              v322[3] = v323;
                              v325 = (_DWORD *)(v313 + 20 * (v689 + v292));
                              *v325 = v316;
                              v325[1] = v321;
                              v326 = v319 + 1;
                              v327 = v292 + v299;
                              v328 = 3 * (v292 + v299) + 1;
                              v325[2] = v326;
                              v325[3] = v328;
                              v329 = *((_QWORD *)recta + 5);
                              v330 = (_DWORD *)(v329 + 48 * v314);
                              *v330 = v306;
                              v330[1] = v316;
                              v330[2] = v321;
                              v330[3] = 2 * v314;
                              v331 = 2 * (v689 + v292);
                              v330[4] = v331;
                              v330[5] = 2 * v306 + 12;
                              v330[6] = v324;
                              v330[7] = v328;
                              if (v292)
                                v332 = 3 * v299 + 2;
                              else
                                v332 = -1;
                              v330[8] = v332;
                              v333 = recta[14];
                              if (v333 == -1)
                                recta[15] = v314;
                              v334 = (_DWORD *)(v329 + 48 * v314);
                              v334[9] = v333;
                              recta[14] = v314;
                              v334[10] = 1;
                              v334[11] = 7 - v314;
                              v335 = *((_QWORD *)recta + 5);
                              v336 = (_DWORD *)(v335 + 48 * v327);
                              v318 = v292 + 1;
                              *v336 = v292 + 1 + v298;
                              v336[1] = v292 + v298;
                              v337 = v292 + 1 + v294;
                              v336[2] = v337;
                              v336[3] = (2 * (v292 + v300)) | 1;
                              v336[4] = v331 | 1;
                              v336[5] = 2 * v337 + 13;
                              v338 = 3 * (v292 + v300);
                              if (v669 == 1)
                                v338 = -1;
                              v336[6] = v338;
                              v336[7] = v326;
                              if (v292 == 1)
                                v339 = -1;
                              else
                                v339 = 3 * (v318 + v295) + 2;
                              v336[8] = v339;
                              v340 = recta[14];
                              if (v340 == -1)
                                recta[15] = v327;
                              v341 = (_DWORD *)(v335 + 48 * v327);
                              v341[9] = v340;
                              *v667 = v327;
                              v341[10] = 1;
                              v341[11] = 7 - v327;
                              v305 = recta;
                            }
                            v302 = v302 + 0.5;
                            ++v304;
                            v303 += 40;
                            v292 = v318;
                          }
                          if (v293 == 2)
                            break;
                          v342 = (_DWORD *)(*((_QWORD *)v305 + 3) + 20 * v306);
                          v342[30] = v294 + 5;
                          v342[31] = v306;
                          v342[32] = -1;
                          v342[33] = 3 * v297 + 11;
                          *(double *)&v250 = *(double *)&v250 + 0.5;
                          v254 = v669 + 1;
                        }
                        free(v660);
                        free(v662);
LABEL_466:
                        *((_QWORD *)v305 + 9) = 0;
                        v343 = v305[14];
                        rectb = v305;
                        if (v343 != -1)
                        {
                          while (1)
                          {
                            v344 = *((_QWORD *)v305 + 5);
                            v345 = (int *)(v344 + 48 * v343);
                            v305[14] = v345[9];
                            v346 = *((_QWORD *)v305 + 1);
                            v347 = (double *)(v346 + 72 * *v345);
                            v348 = v343;
                            v349 = (double *)(v346 + 72 * v345[1]);
                            v350 = *v349;
                            v351 = v349[1];
                            v352 = (double *)(v346 + 72 * v345[2]);
                            if (fabs(((v350 - *v347) * (v351 - v347[1])+ (*v352 - v350) * (v351 - v347[1] + v352[1] - v347[1])+ (*v347 - *v352) * (v352[1] - v347[1]))* 0.5) >= 8.0)
                            {
                              v353 = 0;
                              v354 = 0;
                              do
                              {
                                v354 |= *(_DWORD *)(v344 + 48 * v348 + 24 + v353) == -1;
                                v353 += 4;
                              }
                              while (v353 != 12);
                              if ((*(char *)(v344 + 48 * v348 + 41) < 7) | v354 & 1)
                              {
                                v355 = 0;
                                v769[0] = 0uLL;
                                v356 = v345;
                                do
                                {
                                  v357 = v356[6];
                                  if (v357 != -1)
                                  {
                                    v358 = v357 / 3;
                                    v359 = v357 % 3;
                                    v360 = v344 + 48 * v358;
                                    v361 = (v355 - 1);
                                    if (!v355)
                                      v361 = 2;
                                    v362 = (double *)(v346 + 72 * v345[v361]);
                                    v363 = *v362;
                                    v364 = v362[1];
                                    v365 = v359 + 2;
                                    v366 = v359 - 1;
                                    if (v365 < 3)
                                      v366 = v365;
                                    v367 = (double *)(v346 + 72 * *(int *)(v360 + 4 * v366));
                                    v368 = *v367;
                                    v369 = v367[1];
                                    v370 = (double *)(v346 + 72 * *v356);
                                    v371 = *v370;
                                    v372 = v370[1];
                                    if (v355 > 1)
                                      v373 = -2;
                                    else
                                      v373 = 1;
                                    v374 = (double *)(v346 + 72 * v345[(v373 + v355)]);
                                    v375 = *v374 - v371;
                                    v376 = v374[1] - v372;
                                    v377 = v364 - v372;
                                    if (fabs((v363 - v371) * (v369 - v372 - v376)+ v375 * (v377 - (v369 - v372))+ (v368 - v371) * (v376 - v377)) <= 2.22507386e-308)goto LABEL_512;
                                    if ((v368 - v371) * v376 - (v369 - v372) * v375 < 0.0 == v375 * v377
                                                                                            - v376 * (v363 - v371) >= 0.0)
                                    {
                                      ++rectb[19];
                                      goto LABEL_508;
                                    }
                                  }
                                  ++v356;
                                  ++v355;
                                }
                                while (v355 != 3);
                                v690 = v348;
                                v378 = 0;
                                LODWORD(v355) = -1;
                                v379 = 0.0;
                                do
                                {
                                  v380 = *((_QWORD *)rectb + 1);
                                  v381 = (double *)(v380 + 72 * v345[v378]);
                                  if (v378 == 2)
                                    v382 = 0;
                                  else
                                    v382 = v378 + 1;
                                  v383 = (double *)(v380 + 72 * v345[v382]);
                                  v384 = v378 + 1;
                                  v385 = (*v381 + *v383) * 0.5;
                                  v386 = (v381[1] + v383[1]) * 0.5;
                                  Coons((uint64_t)&v697, v769, &__src.a, (v381[2] + v383[2]) * 0.5, (v381[3] + v383[3]) * 0.5);
                                  v387 = (v769[0].f64[1] - v386) * (v769[0].f64[1] - v386);
                                  if (v387 + (v769[0].f64[0] - v385) * (v769[0].f64[0] - v385) >= v379)
                                  {
                                    LODWORD(v355) = v378;
                                    v379 = v387 + (v769[0].f64[0] - v385) * (v769[0].f64[0] - v385);
                                  }
                                  ++v378;
                                }
                                while (v384 != 3);
                                if ((_DWORD)v355 != -1 && v379 > 0.49)
                                {
                                  ++rectb[18];
                                  v348 = v690;
                                  break;
                                }
                                v388 = 0;
                                v389 = *((_QWORD *)rectb + 1) + 32;
                                LODWORD(v355) = -1;
                                v390 = 0.0;
                                do
                                {
                                  v391 = v388 + 1;
                                  if (v388 == 2)
                                    v392 = 0;
                                  else
                                    v392 = v388 + 1;
                                  if (*rectb)
                                  {
                                    v393 = (double *)(v389 + 72 * v345[v392]);
                                    v394 = (double *)(v389 + 72 * v345[v388]);
                                    v395 = *rectb;
                                    do
                                    {
                                      v396 = *v394++;
                                      v397 = v396;
                                      v398 = *v393++;
                                      v399 = v397 - v398;
                                      if (v399 < 0.0)
                                        v399 = -v399;
                                      if (v399 >= v390)
                                      {
                                        LODWORD(v355) = v388;
                                        v390 = v399;
                                      }
                                      --v395;
                                    }
                                    while (v395);
                                  }
                                  ++v388;
                                }
                                while (v391 != 3);
                                v348 = v690;
                                if ((_DWORD)v355 != -1 && v390 > 0.1)
                                  break;
                              }
                            }
LABEL_512:
                            *(_BYTE *)(v344 + 48 * v348 + 40) = 0;
                            v305 = rectb;
LABEL_513:
                            v343 = v305[14];
                            if (v343 == -1)
                              goto LABEL_646;
                          }
LABEL_508:
                          v683 = v345[(int)v355];
                          v400 = ((int)v355 + 1) % 3;
                          v401 = v345[v400];
                          v402 = ((int)v355 + 2) % 3;
                          v659 = v345[v402];
                          v737 = 0uLL;
                          v403 = *((_QWORD *)rectb + 5);
                          v404 = *(_DWORD *)(v344 + 48 * v348 + 4 * (int)v355 + 24);
                          v675 = v404;
                          if (v404 == -1)
                          {
                            v651 = 0;
                            v670 = 0;
                            v655 = -1;
                            v661 = -1;
                          }
                          else
                          {
                            v405 = v404 / 3;
                            v406 = v404 % 3;
                            v661 = v405;
                            v407 = v406 + 2;
                            v651 = v406;
                            if ((v406 + 2) >= 3)
                              v407 = v406 - 1;
                            v670 = v403 + 48 * v405;
                            v655 = *(_DWORD *)(v670 + 4 * v407);
                          }
                          v654 = (int)v355;
                          v653 = v400;
                          v663 = v401;
                          v652 = v402;
                          v680 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v345 - v403) >> 4);
                          v686 = vmulq_f64(vaddq_f64(*(float64x2_t *)(*((_QWORD *)rectb + 1) + 72 * v683 + 16), *(float64x2_t *)(*((_QWORD *)rectb + 1) + 72 * v401 + 16)), v648);
                          Coons((uint64_t)&v697, &v737, &__src.a, v686.f64[0], v686.f64[1]);
                          v408 = 0;
                          v409 = 1;
                          do
                          {
                            v410 = v409;
                            CoonsMeshTriangle = AllocateCoonsMeshTriangle((uint64_t)rectb);
                            v409 = 0;
                            v412 = *((_QWORD *)rectb + 5);
                            v768[v408] = -1431655765 * (((unint64_t)CoonsMeshTriangle - v412) >> 4);
                            v408 = 1;
                          }
                          while ((v410 & 1) != 0);
                          v769[0] = 0uLL;
                          v413 = v675;
                          if (v675 == -1)
                          {
                            v767 = -1;
                          }
                          else
                          {
                            v414 = 0;
                            v415 = 1;
                            do
                            {
                              v416 = v415;
                              v417 = AllocateCoonsMeshTriangle((uint64_t)rectb);
                              v415 = 0;
                              *(_QWORD *)&v769[0].f64[v414] = v417;
                              v412 = *((_QWORD *)rectb + 5);
                              v768[v414 - 2] = -1431655765 * (((unint64_t)v417 - v412) >> 4);
                              v414 = 1;
                            }
                            while ((v416 & 1) != 0);
                            v413 = v675;
                          }
                          v691 = v768[0];
                          v668 = v768[1];
                          v418 = v670;
                          if (v413 != -1)
                          {
                            *(_QWORD *)&v769[0].f64[0] = v412 + 48 * (int)v767;
                            *(_QWORD *)&v769[0].f64[1] = v412 + 48 * SHIDWORD(v767);
                            v418 = v412 + 48 * v661;
                          }
                          v419 = v737;
                          v420 = rectb[4];
                          v421 = (char *)*((_QWORD *)rectb + 1);
                          v671 = v418;
                          if (v420 == rectb[5])
                          {
                            v657 = v737;
                            v421 = (char *)malloc_type_realloc(v421, 72 * (v420 + 50), 0x1000040FF89C88EuLL);
                            *((_QWORD *)rectb + 1) = v421;
                            if (v421)
                            {
                              v420 = rectb[4];
                              rectb[5] += 50;
                              v419 = v657;
                              goto LABEL_528;
                            }
                            v650 = 0;
                          }
                          else
                          {
LABEL_528:
                            rectb[4] = v420 + 1;
                            v422 = (float64x2_t *)&v421[72 * v420];
                            *v422 = v419;
                            v422[1] = v686;
                            v423 = *rectb;
                            v650 = v422;
                            if ((_DWORD)v423)
                            {
                              v424 = 72 * v420 + 32;
                              v425 = &__src;
                              do
                              {
                                a = v425->a;
                                v425 = (CGAffineTransform *)((char *)v425 + 8);
                                *(CGFloat *)&v421[v424] = a;
                                v424 += 8;
                                --v423;
                              }
                              while (v423);
                            }
                          }
                          v656 = (int *)(v412 + 48 * v691);
                          v658 = (int *)(v412 + 48 * v668);
                          CoonsMeshEdge = AllocateCoonsMeshEdge((uint64_t)rectb);
                          v427 = 0;
                          v428 = *((_QWORD *)rectb + 3);
                          v429 = 1;
                          do
                          {
                            v430 = v429;
                            v431 = AllocateCoonsMeshEdge((uint64_t)rectb);
                            v429 = 0;
                            v432 = *((_QWORD *)rectb + 3);
                            v766[v427] = -858993459 * (((unint64_t)v431 - v432) >> 2);
                            v427 = 1;
                          }
                          while ((v430 & 1) != 0);
                          v433 = v675;
                          if (v675 == -1)
                          {
                            v435 = 0;
                            v434 = 0;
                          }
                          else
                          {
                            v434 = AllocateCoonsMeshEdge((uint64_t)rectb);
                            v432 = *((_QWORD *)rectb + 3);
                            v433 = v675;
                            v435 = -858993459 * (((unint64_t)v434 - v432) >> 2);
                          }
                          v436 = v671;
                          v437 = v766[0];
                          v438 = v766[1];
                          if (v433 != -1)
                            v434 = (_DWORD *)(v432 + 20 * v435);
                          v676 = v435;
                          if (v671)
                          {
                            if (*(int *)(v412 + 48 * (int)v680 + 4 * v654 + 12) >= 0)
                              v439 = *(_DWORD *)(v412 + 48 * (int)v680 + 4 * v654 + 12) & 1;
                            else
                              v439 = -(*(_DWORD *)(v412 + 48 * (int)v680 + 4 * v654 + 12) & 1);
                            if (*(int *)(v671 + 4 * v651 + 12) >= 0)
                              v440 = *(_DWORD *)(v671 + 4 * v651 + 12) & 1;
                            else
                              v440 = -(*(_DWORD *)(v671 + 4 * v651 + 12) & 1);
                            if (v439 == v440)
                            {
                              v441 = 0;
                              v442 = 1;
                              do
                              {
                                v443 = v671 + 4 * ((v651 + 2 - (int)v441) % 3);
                                v444 = *(_DWORD *)(v443 + 12);
                                if (v444 >= 0)
                                  v445 = *(_DWORD *)(v443 + 12);
                                else
                                  v445 = v444 + 1;
                                v766[v441 - 2] = v445 >> 1;
                                v764[v441] = (v445 & 0xFFFFFFFE) - v444 + 1;
                                v446 = v442;
                                *(&v762 + v441) = *(_DWORD *)(v443 + 24);
                                v441 = 1;
                                v442 = 0;
                              }
                              while ((v446 & 1) != 0);
                            }
                            else
                            {
                              v447 = 0;
                              v448 = 1;
                              do
                              {
                                v449 = v671 + 4 * ((v651 + 1 + (int)v447) % 3);
                                v450 = *(_DWORD *)(v449 + 12);
                                if (v450 >= 0)
                                  v451 = *(_DWORD *)(v449 + 12);
                                else
                                  v451 = v450 + 1;
                                v766[v447 - 2] = v451 >> 1;
                                v764[v447] = v450 - (v451 & 0xFFFFFFFE);
                                v452 = v448;
                                *(&v762 + v447) = *(_DWORD *)(v449 + 24);
                                v447 = 1;
                                v448 = 0;
                              }
                              while ((v452 & 1) != 0);
                            }
                          }
                          else
                          {
                            v765 = -1;
                          }
                          v453 = 954437177 * ((unint64_t)((char *)v650 - v421) >> 3);
                          v454 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)CoonsMeshEdge - v428) >> 2);
                          v455 = (int *)(v432 + 20 * v437);
                          v456 = (int *)(v432 + 20 * v438);
                          v457 = (int *)(v432 + 20 * (int)v454);
                          v458 = v412 + 48 * (int)v680;
                          v459 = v458 + 12;
                          v460 = *(_DWORD *)(v458 + 12 + 4 * v652);
                          if (v460 >= 0)
                            v461 = *(_DWORD *)(v458 + 12 + 4 * v652);
                          else
                            v461 = v460 + 1;
                          v462 = v458 + 24;
                          v463 = *(_DWORD *)(v462 + 4 * v652);
                          v464 = *(_DWORD *)(v459 + 4 * v653);
                          if (v464 >= 0)
                            v465 = v464;
                          else
                            v465 = v464 + 1;
                          v466 = *(_DWORD *)(v462 + 4 * v653);
                          *v457 = v453;
                          v457[1] = v659;
                          v467 = 3 * v691;
                          v468 = 3 * v691 + 1;
                          v469 = v432 + 20 * (int)v454;
                          v470 = 3 * v668;
                          v471 = 3 * v668 + 1;
                          *(_DWORD *)(v469 + 8) = v468;
                          *(_DWORD *)(v469 + 12) = v471;
                          *v455 = v683;
                          v455[1] = v453;
                          v472 = v432 + 20 * v437;
                          v473 = HIDWORD(v767);
                          v474 = 3 * v767;
                          if ((_DWORD)v767 == -1)
                            v475 = -1;
                          else
                            v475 = v474 + 1;
                          *(_DWORD *)(v472 + 8) = v467;
                          *(_DWORD *)(v472 + 12) = v475;
                          *v456 = v453;
                          v456[1] = v663;
                          v476 = v470 + 2;
                          v477 = v432 + 20 * v438;
                          v478 = 3 * v473;
                          if (v473 == -1)
                            v479 = -1;
                          else
                            v479 = v478 + 1;
                          *(_DWORD *)(v477 + 8) = v476;
                          *(_DWORD *)(v477 + 12) = v479;
                          if (v671)
                          {
                            *v434 = v655;
                            v434[1] = v453;
                            v434[2] = v474;
                            v434[3] = v478 + 2;
                          }
                          v480 = v461 >> 1;
                          *v656 = v683;
                          v656[1] = v453;
                          v656[2] = v659;
                          v481 = 2 * v437;
                          v482 = v412 + 48 * v691;
                          v483 = -1717986918 * (((uint64_t)CoonsMeshEdge - v428) >> 2);
                          *(_DWORD *)(v482 + 12) = v481;
                          *(_DWORD *)(v482 + 16) = v483;
                          v484 = (_DWORD *)(v432 + 20 * (v461 >> 1));
                          if (*v484 == v659)
                          {
                            v485 = 2 * v480;
                            goto LABEL_578;
                          }
                          if (v484[1] == v659)
                          {
                            v485 = (2 * v480) | 1;
LABEL_578:
                            *(_DWORD *)(v412 + 48 * v691 + 20) = v485;
                          }
                          v486 = (_DWORD *)(v412 + 48 * v691);
                          v486[6] = v475;
                          v486[7] = v471;
                          v486[8] = v463;
                          v487 = *((_QWORD *)rectb + 5);
                          v488 = -1431655765 * (((unint64_t)v656 - v487) >> 4);
                          v486[9] = -1;
                          if (rectb[14] == -1)
                            rectb[14] = v488;
                          else
                            *(_DWORD *)(v487 + 48 * (int)rectb[15] + 36) = v488;
                          rectb[15] = v488;
                          v489 = v412 + 48 * v691;
                          *(_BYTE *)(v489 + 40) = 1;
                          v490 = v412 + 48 * (int)v680;
                          v492 = *(_BYTE *)(v490 + 41);
                          v491 = (_BYTE *)(v490 + 41);
                          *(_BYTE *)(v489 + 41) = v492 + 1;
                          *(_WORD *)(v489 + 42) += 1 << (15 - v492);
                          if (v463 != -1)
                            *(_DWORD *)(v487 + 48 * (v463 / 3) + 4 * (v463 % 3) + 24) = v467 + 2;
                          v493 = v480;
                          v494 = v432 + 20 * v480;
                          v497 = *(_DWORD *)(v494 + 8);
                          v495 = (_DWORD *)(v494 + 8);
                          v496 = v497;
                          if (v497 != -1 && v496 / 3 == (_DWORD)v680
                            || (v498 = v432 + 20 * v493,
                                v500 = *(_DWORD *)(v498 + 12),
                                v495 = (_DWORD *)(v498 + 12),
                                v499 = v500,
                                v500 != -1)
                            && v499 / 3 == (_DWORD)v680)
                          {
                            *v495 = v467 + 2;
                          }
                          v501 = v465 >> 1;
                          *v658 = v663;
                          v658[1] = v659;
                          v658[2] = v453;
                          v502 = (_DWORD *)(v432 + 20 * v501);
                          if (*v502 == v663)
                          {
                            v503 = 2 * v501;
                            v305 = rectb;
                            v504 = v668;
                            goto LABEL_593;
                          }
                          v305 = rectb;
                          v504 = v668;
                          if (v502[1] == v663)
                          {
                            v503 = (2 * v501) | 1;
LABEL_593:
                            *(_DWORD *)(v412 + 48 * v504 + 12) = v503;
                          }
                          v505 = v483 | 1;
                          v506 = (_DWORD *)(v412 + 48 * v504);
                          v507 = 2 * v438;
                          v506[4] = v505;
                          v506[5] = v507;
                          v506[6] = v466;
                          v506[7] = v468;
                          v508 = -1431655765 * (((unint64_t)v658 - v487) >> 4);
                          v506[8] = v479;
                          v506[9] = -1;
                          if (v305[14] == -1)
                            v305[14] = v508;
                          else
                            *(_DWORD *)(v487 + 48 * (int)v305[15] + 36) = v508;
                          v305[15] = v508;
                          v509 = v412 + 48 * v504;
                          *(_BYTE *)(v509 + 40) = 1;
                          *(_BYTE *)(v509 + 41) = *v491 + 1;
                          if (v466 != -1)
                            *(_DWORD *)(v487 + 48 * (v466 / 3) + 4 * (v466 % 3) + 24) = v470;
                          v510 = *((_QWORD *)v305 + 3);
                          v511 = v510 + 20 * v501;
                          v514 = *(_DWORD *)(v511 + 8);
                          v512 = (int *)(v511 + 8);
                          v513 = v514;
                          if (v514 != -1 && v513 / 3 == (_DWORD)v680
                            || (v515 = v510 + 20 * v501,
                                v517 = *(_DWORD *)(v515 + 12),
                                v512 = (int *)(v515 + 12),
                                v516 = v517,
                                v517 != -1)
                            && v516 / 3 == (_DWORD)v680)
                          {
                            *v512 = v470;
                          }
                          v518 = v769[0].f64[0];
                          if (*(_QWORD *)&v769[0].f64[0])
                          {
                            **(_DWORD **)&v769[0].f64[0] = v655;
                            *(_DWORD *)(*(_QWORD *)&v518 + 4) = v453;
                            *(_DWORD *)(*(_QWORD *)&v518 + 8) = v683;
                            *(_DWORD *)(*(_QWORD *)&v518 + 12) = 2 * v676;
                            v519 = v765;
                            v520 = v764[0] + 2 * v765;
                            *(_DWORD *)(*(_QWORD *)&v518 + 16) = v481 | 1;
                            *(_DWORD *)(*(_QWORD *)&v518 + 20) = v520;
                            *(_DWORD *)(*(_QWORD *)&v518 + 24) = v478 + 2;
                            *(_DWORD *)(*(_QWORD *)&v518 + 28) = v467;
                            v521 = v762;
                            *(_DWORD *)(*(_QWORD *)&v518 + 32) = v762;
                            v522 = *(_BYTE *)(v671 + 40);
                            if (v522)
                            {
                              v523 = -1431655765 * ((unint64_t)(*(_QWORD *)&v518 - v487) >> 4);
                              *(_DWORD *)(*(_QWORD *)&v518 + 36) = -1;
                              if (v305[14] == -1)
                                v305[14] = v523;
                              else
                                *(_DWORD *)(v487 + 48 * (int)v305[15] + 36) = v523;
                              v305[15] = v523;
                              v522 = 1;
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)&v518 + 36) = -1;
                            }
                            *(_BYTE *)(*(_QWORD *)&v518 + 40) = v522;
                            *(_BYTE *)(*(_QWORD *)&v518 + 41) = *(_BYTE *)(v671 + 41) + 1;
                            if (v521 != -1)
                              *(_DWORD *)(v487 + 48 * (v521 / 3) + 4 * (v521 % 3) + 24) = v474 + 2;
                            v524 = v510 + 20 * v519;
                            v527 = *(_DWORD *)(v524 + 8);
                            v525 = (_DWORD *)(v524 + 8);
                            v526 = v527;
                            if (v527 != -1 && v526 / 3 == v661
                              || (v528 = v510 + 20 * v519,
                                  v530 = *(_DWORD *)(v528 + 12),
                                  v525 = (_DWORD *)(v528 + 12),
                                  v529 = v530,
                                  v530 != -1)
                              && v529 / 3 == v661)
                            {
                              *v525 = v474 + 2;
                            }
                          }
                          v531 = v769[0].f64[1];
                          if (*(_QWORD *)&v769[0].f64[1])
                          {
                            **(_DWORD **)&v769[0].f64[1] = v655;
                            *(_DWORD *)(*(_QWORD *)&v531 + 4) = v663;
                            *(_DWORD *)(*(_QWORD *)&v531 + 8) = v453;
                            v532 = HIDWORD(v765);
                            *(_DWORD *)(*(_QWORD *)&v531 + 12) = v764[1] + 2 * HIDWORD(v765);
                            *(_DWORD *)(*(_QWORD *)&v531 + 16) = v507 | 1;
                            *(_DWORD *)(*(_QWORD *)&v531 + 20) = (2 * v676) | 1;
                            v533 = v763;
                            *(_DWORD *)(*(_QWORD *)&v531 + 24) = v763;
                            *(_DWORD *)(*(_QWORD *)&v531 + 28) = v476;
                            *(_DWORD *)(*(_QWORD *)&v531 + 32) = v474;
                            v534 = *(_BYTE *)(v671 + 40);
                            v535 = v412 + 48 * (int)v680;
                            if (v534)
                            {
                              v536 = *((_QWORD *)v305 + 5);
                              v537 = -1431655765 * ((unint64_t)(*(_QWORD *)&v531 - v536) >> 4);
                              *(_DWORD *)(*(_QWORD *)&v531 + 36) = -1;
                              if (v305[14] == -1)
                                v305[14] = v537;
                              else
                                *(_DWORD *)(v536 + 48 * (int)v305[15] + 36) = v537;
                              v305[15] = v537;
                              v534 = 1;
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)&v531 + 36) = -1;
                            }
                            *(_BYTE *)(*(_QWORD *)&v531 + 40) = v534;
                            *(_BYTE *)(*(_QWORD *)&v531 + 41) = *(_BYTE *)(v671 + 41) + 1;
                            if (v533 != -1)
                              *(_DWORD *)(*((_QWORD *)v305 + 5) + 48 * (v533 / 3) + 4 * (v533 % 3) + 24) = v478;
                            v542 = v510 + 20 * v532;
                            v545 = *(_DWORD *)(v542 + 8);
                            v543 = (int *)(v542 + 8);
                            v544 = v545;
                            if (v545 != -1 && v544 / 3 == v661
                              || (v546 = v510 + 20 * v532,
                                  v548 = *(_DWORD *)(v546 + 12),
                                  v543 = (int *)(v546 + 12),
                                  v547 = v548,
                                  v548 != -1)
                              && v547 / 3 == v661)
                            {
                              *v543 = v478;
                            }
LABEL_634:
                            v549 = *((_QWORD *)v305 + 5);
                            v541 = -1431655765 * ((unint64_t)(v671 - v549) >> 4);
                            v550 = v305[14];
                            if ((_DWORD)v550 != -1)
                            {
                              v551 = 0xFFFFFFFFLL;
                              do
                              {
                                v552 = v550;
                                v550 = *(unsigned int *)(v549 + 48 * (int)v550 + 36);
                                if ((_DWORD)v552 == v541)
                                {
                                  if ((_DWORD)v551 == -1)
                                    v305[14] = v550;
                                  else
                                    *(_DWORD *)(v549 + 48 * (int)v551 + 36) = v550;
                                  if (v305[15] == v541)
                                    v305[15] = v551;
                                  v552 = v551;
                                }
                                v551 = v552;
                              }
                              while ((_DWORD)v550 != -1);
                            }
                            v553 = v412 + 48 * (int)v680;
                            v554 = *(_DWORD *)(v553 + 4 * v654 + 12) / 2;
                            v555 = v510 + 20 * v554;
                            *(_DWORD *)(v555 + 16) = v305[17];
                            v305[17] = v554;
                            *(_QWORD *)v555 = 0xC0000000CLL;
                            *(_DWORD *)(v553 + 36) = v305[16];
                            v305[16] = -1431655765 * ((unint64_t)(v535 - v549) >> 4);
                            *(_DWORD *)(v535 + 8) = -13;
                            *(_QWORD *)v535 = 0xC0000000CLL;
                            *(_DWORD *)(v671 + 36) = v305[16];
                          }
                          else
                          {
                            v535 = v412 + 48 * (int)v680;
                            if (v671)
                              goto LABEL_634;
                            v538 = v412 + 48 * (int)v680;
                            v539 = *(_DWORD *)(v538 + 4 * v654 + 12) / 2;
                            v540 = v510 + 20 * v539;
                            *(_DWORD *)(v540 + 16) = v305[17];
                            v305[17] = v539;
                            *(_QWORD *)v540 = 0xC0000000CLL;
                            v541 = -1431655765 * ((unint64_t)(v538 - *((_QWORD *)v305 + 5)) >> 4);
                            *(_DWORD *)(v538 + 36) = v305[16];
                            v436 = v538;
                          }
                          v305[16] = v541;
                          *(_DWORD *)(v436 + 8) = -13;
                          *(_QWORD *)v436 = 0xC0000000CLL;
                          goto LABEL_513;
                        }
LABEL_646:
                        v556 = v305[12];
                        if ((_DWORD)v556)
                        {
                          LODWORD(v557) = 0;
                          v558 = (int *)*((_QWORD *)v305 + 5);
                          do
                          {
                            v559 = *v558;
                            v558 += 12;
                            if (v559 == -13)
                              v557 = v557;
                            else
                              v557 = (v557 + 1);
                            --v556;
                          }
                          while (v556);
                          v560 = (int **)malloc_type_malloc(8 * v557, 0x2004093837F09uLL);
                          if (v560)
                          {
                            v561 = v305[12];
                            if ((_DWORD)v561)
                            {
                              v562 = 0;
                              v563 = (int *)*((_QWORD *)v305 + 5);
                              do
                              {
                                if (*v563 != -13)
                                  v560[v562++] = v563;
                                v563 += 12;
                                --v561;
                              }
                              while (v561);
                            }
                            v677 = (unint64_t)v560;
                            v799 = 0uLL;
                            v798 = 0uLL;
                            v797 = 0uLL;
                            v796 = 0uLL;
                            v795 = 0uLL;
                            v794 = 0uLL;
                            v793 = 0uLL;
                            v792 = 0uLL;
                            v791 = 0uLL;
                            v790 = 0uLL;
                            v789 = 0uLL;
                            v788 = 0uLL;
                            v787 = 0uLL;
                            v786 = 0uLL;
                            v785 = 0uLL;
                            v784 = 0uLL;
                            v783 = 0uLL;
                            v782 = 0uLL;
                            v781 = 0uLL;
                            v780 = 0uLL;
                            v779 = 0uLL;
                            v778 = 0uLL;
                            v777 = 0uLL;
                            v776 = 0uLL;
                            v775 = 0uLL;
                            v774 = 0uLL;
                            v773 = 0uLL;
                            v772 = 0uLL;
                            v771 = 0uLL;
                            memset(&__src, 0, sizeof(__src));
                            v672 = v557;
                            if (v557 >= 0xB)
                            {
                              v605 = (uint64_t)&v560[v557 - 1];
                              v681 = &__src;
                              tx = *(double *)&v560;
LABEL_690:
                              while (2)
                              {
                                v684 = (int **)(*(_QWORD *)&tx + 16);
                                v607 = (int **)v605;
                                for (k = tx; ; tx = k)
                                {
                                  while (1)
                                  {
                                    v608 = (4
                                          * ((((uint64_t)v607 - *(_QWORD *)&tx) >> 3)
                                           + (((uint64_t)v607 - *(_QWORD *)&tx) >> 3 < 0))) & 0xFFFFFFFFFFFFFFF8;
                                    v609 = *(int **)(*(_QWORD *)&tx + 8);
                                    *(_QWORD *)(*(_QWORD *)&tx + 8) = *(_QWORD *)(*(_QWORD *)&tx + v608);
                                    *(_QWORD *)(*(_QWORD *)&tx + v608) = v609;
                                    v610 = *((_QWORD *)v305 + 1);
                                    v611 = **(int ***)&tx;
                                    v612 = *(int **)(*(_QWORD *)&tx + 8);
                                    v613 = TriangleGreater(v610, **(int ***)&tx, v612);
                                    v614 = *v607;
                                    if (v613)
                                    {
                                      if (TriangleGreater(v610, *v607, v612))
                                      {
                                        if (TriangleGreater(v610, v611, v614))
                                        {
                                          *v607 = v611;
                                          **(_QWORD **)&tx = *(_QWORD *)(*(_QWORD *)&tx + 8);
                                          *(_QWORD *)(*(_QWORD *)&tx + 8) = v614;
                                        }
                                        else
                                        {
                                          **(_OWORD **)&tx = vextq_s8(**(int8x16_t **)&tx, **(int8x16_t **)&tx, 8uLL);
                                        }
                                      }
                                      else
                                      {
                                        *v607 = v611;
                                        **(_QWORD **)&tx = v614;
                                      }
                                    }
                                    else if (TriangleGreater(v610, v612, *v607))
                                    {
                                      if (TriangleGreater(v610, v611, v614))
                                      {
                                        **(_QWORD **)&tx = v614;
                                        *v607 = v611;
                                        *v607 = *(int **)(*(_QWORD *)&tx + 8);
                                        *(_QWORD *)(*(_QWORD *)&tx + 8) = v611;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(*(_QWORD *)&tx + 8) = v614;
                                        *v607 = v612;
                                      }
                                    }
                                    v615 = v684;
                                    v687 = v607;
                                    while (1)
                                    {
                                      v616 = *((_QWORD *)rectb + 1);
                                      v617 = *(int **)(*(_QWORD *)&tx + 8);
                                      do
                                      {
                                        v618 = v615;
                                        v620 = *v615++;
                                        v619 = v620;
                                      }
                                      while (TriangleGreater(v616, v617, v620));
                                      do
                                      {
                                        v621 = v607;
                                        v623 = *--v607;
                                        v622 = v623;
                                      }
                                      while (TriangleGreater(v616, v623, v617));
                                      if (v607 < v615)
                                        break;
                                      *v618 = v622;
                                      *v607 = v619;
                                      tx = k;
                                    }
                                    *(_QWORD *)(*(_QWORD *)&k + 8) = v622;
                                    *v607 = v617;
                                    v624 = ((unint64_t)v607 - *(_QWORD *)&k) >> 3;
                                    v605 = (uint64_t)v687;
                                    v625 = (unint64_t)((char *)v687 - (char *)v618 + 8) >> 3;
                                    v607 = v621 - 2;
                                    if ((int)v624 <= (int)v625)
                                      break;
                                    v305 = rectb;
                                    if ((int)v624 <= 10)
                                      goto LABEL_714;
                                    tx = k;
                                    if ((int)v625 >= 11)
                                    {
                                      v681->a = k;
                                      *(_QWORD *)&v681->b = v607;
                                      tx = *(double *)&v618;
                                      v681 = (CGAffineTransform *)((char *)v681 + 16);
                                      goto LABEL_690;
                                    }
                                  }
                                  v305 = rectb;
                                  if ((int)v625 <= 10)
                                    break;
                                  if ((int)v624 < 11)
                                  {
                                    tx = *(double *)&v618;
                                    goto LABEL_690;
                                  }
                                  *(_QWORD *)&v681->a = v618;
                                  *(_QWORD *)&v681->b = v687;
                                  v681 = (CGAffineTransform *)((char *)v681 + 16);
                                }
LABEL_714:
                                v626 = v681;
                                if (v681 != &__src)
                                {
                                  tx = v681[-1].tx;
                                  v681 = (CGAffineTransform *)((char *)v681 - 16);
                                  v605 = *(_QWORD *)&v626[-1].ty;
                                  continue;
                                }
                                break;
                              }
                            }
                            v564 = (void *)v677;
                            v565 = v672;
                            v692 = v677 + 8 * v672;
                            v566 = v692 - 8;
                            if (v692 - 8 > v677)
                            {
                              v567 = -1;
                              do
                              {
                                v568 = 0;
                                v569 = v567;
                                v570 = v566;
                                --v567;
                                v572 = *(int **)(v566 - 8);
                                v566 -= 8;
                                v571 = v572;
                                v573 = *((_QWORD *)rectb + 1);
                                while (TriangleGreater(v573, v571, *(int **)(v570 + 8 * v568)))
                                {
                                  ++v568;
                                  if (!(v569 + v568))
                                  {
                                    v574 = v677 + 8 * v672;
                                    goto LABEL_666;
                                  }
                                }
                                v574 = v692 + 8 * (v569 + v568);
LABEL_666:
                                v564 = (void *)v677;
                                v565 = v672;
                                if (v566 != v574 - 8)
                                {
                                  if (v570 < v574)
                                  {
                                    v575 = 0;
                                    do
                                    {
                                      v576 = v570 + v575;
                                      *(_QWORD *)(v576 - 8) = *(_QWORD *)(v570 + v575);
                                      v575 += 8;
                                    }
                                    while (v576 + 8 < v574);
                                  }
                                  *(_QWORD *)(v574 - 8) = v571;
                                }
                              }
                              while (v566 > v677);
                            }
                            v577 = malloc_type_malloc(0x28uLL, 0x102004050851865uLL);
                            if (v577)
                            {
                              v578 = v577;
                              v305 = rectb;
                              *v577 = *rectb;
                              v577[4] = rectb[4];
                              v577[8] = v565;
                              v579 = malloc_type_malloc(16 * v565, 0x1000040451B5BE8uLL);
                              if (!v579)
                              {
                                v627 = v564;
                                goto LABEL_727;
                              }
                              v580 = v579;
                              *((_QWORD *)v578 + 3) = v579;
                              if ((_DWORD)v565)
                              {
                                v581 = 0;
                                v582 = v579;
                                do
                                {
                                  v583 = 0;
                                  v584 = *((_QWORD *)v564 + v581);
                                  v582[3] = 0;
                                  do
                                  {
                                    v585 = (_DWORD *)(v584 + 4 * v583);
                                    v582[v583] = *v585;
                                    if (v585[6] == -1)
                                      v582[3] |= 1 << v583;
                                    ++v583;
                                  }
                                  while (v583 != 3);
                                  ++v581;
                                  v582 += 4;
                                }
                                while (v581 != v565);
                              }
                              v586 = malloc_type_malloc(72 * rectb[4], 0x1000040FF89C88EuLL);
                              if (!v586)
                              {
                                free(v564);
                                free(v578);
                                v628 = v580;
                                goto LABEL_729;
                              }
                              *((_QWORD *)v578 + 1) = v586;
                              if (rectb[4])
                              {
                                v587 = 0;
                                v588 = *((_QWORD *)rectb + 1);
                                do
                                {
                                  *(_OWORD *)v586 = *(_OWORD *)v588;
                                  v589 = *(_OWORD *)(v588 + 16);
                                  v590 = *(_OWORD *)(v588 + 32);
                                  v591 = *(_OWORD *)(v588 + 48);
                                  v586[8] = *(_QWORD *)(v588 + 64);
                                  *((_OWORD *)v586 + 2) = v590;
                                  *((_OWORD *)v586 + 3) = v591;
                                  *((_OWORD *)v586 + 1) = v589;
                                  ++v587;
                                  v586 += 9;
                                  v588 += 72;
                                }
                                while (v587 < rectb[4]);
                              }
                              free(v564);
                              if (RenderTriangleMesh(*((double **)v578 + 1), v578[4], *((int **)v578 + 3), v578[8], v647, (uint64_t *)&v735, &v736.origin.x))
                              {
                                CGContextSaveGState(ca);
                                CGContextResetCTM((uint64_t)ca, v592, v593, v594, v595, v596, v597, v598);
                                v599 = v736.size.width;
                                v600 = v736.size.height;
                                v601 = v736.origin.x;
                                v602 = v736.origin.y;
                                if (v736.size.width < 0.0 || v736.size.height < 0.0)
                                {
                                  v807 = CGRectStandardize(v736);
                                  v603 = (unint64_t)v807.size.width;
                                  v807.origin.x = v601;
                                  v807.origin.y = v602;
                                  v807.size.width = v599;
                                  v807.size.height = v600;
                                  *(CGRect *)(&v604 - 3) = CGRectStandardize(v807);
                                }
                                else
                                {
                                  v603 = (unint64_t)v736.size.width;
                                  v604 = v736.size.height;
                                }
                                v629 = (unint64_t)v604;
                                v630 = (v636 * v603) >> 3;
                                v631 = (uint64_t)v735;
                                v632 = v630 * (unint64_t)v604;
                                check_clients_buffer("CGDataProviderCreateWithData", v735, v632);
                                v633 = CGDataProviderCreateWithDataInternal(0, v631, v632, (uint64_t)patch_data_release_18404, 0);
                                v634 = CGImageCreate(v603, v629, 8uLL, v636, v630, *(CGColorSpaceRef *)(v645 + 24), 3u, v633, 0, 0, kCGRenderingIntentDefault);
                                CGDataProviderRelease(v633);
                                CGImageSetCachingFlags(v634, 1);
                                v808.origin.x = v601;
                                v808.origin.y = v602;
                                v808.size.width = v599;
                                v808.size.height = v600;
                                CGContextDrawImage(ca, v808, v634);
                                CGContextRestoreGState(ca);
                                if (v634)
                                  CFRelease(v634);
                                v635 = (void *)*((_QWORD *)v578 + 1);
                                v305 = rectb;
                                if (v635)
                                  free(v635);
                                v627 = (void *)*((_QWORD *)v578 + 3);
                                if (v627)
LABEL_727:
                                  free(v627);
                                v628 = v578;
LABEL_729:
                                free(v628);
                              }
                            }
                            else
                            {
                              free(v564);
                              v305 = rectb;
                            }
                          }
                        }
                        CoonsMeshFree((void **)v305);
                        v3 = v645;
                        v2 = ca;
                        v7 = v643;
                        v5 = v644;
                        goto LABEL_731;
                      }
                    }
                  }
                  CoonsMeshFree((void **)v242);
                }
                free(v660);
              }
              free(v662);
            }
            v305 = 0;
            goto LABEL_466;
          }
          v177 = (const CGFloat *)malloc_type_malloc(size, 0x100004000313F17uLL);
          v178 = (CGFloat *)v177;
          if (v5)
          {
            v179 = 0;
            v180 = v7;
            do
            {
              v177[v179] = 0.0;
              v181 = 0.0;
              v182 = v180;
              v183 = 4;
              do
              {
                v181 = v181 + *v182;
                v177[v179] = v181;
                v182 = (double *)((char *)v182 + v673);
                --v183;
              }
              while (v183);
              v177[v179++] = v181 * v10;
              ++v180;
            }
            while (v179 != v5);
          }
          v177[v5] = 1.0;
          CGContextSetFillColor(v2, v177);
          CGContextMoveToPoint(v2, x, y);
          CGContextAddCurveToPoint(v2, cp1x, cp1y, cp2x, cp2y, v744, v745);
          CGContextAddCurveToPoint(v2, v746, v747, v748, v749, v750, v751);
          CGContextAddCurveToPoint(v2, v752, v753, v754, v755, v756, v757);
          CGContextAddCurveToPoint(v2, v758, v759, v760, v761, x, y);
          CGContextDrawPath(v2, kCGPathFill);
          for (m = 0; m != 4; ++m)
          {
            if (v5)
            {
              for (n = 0; n != v5; ++n)
              {
                v186 = 0;
                v178[n] = 0.0;
                v187 = 0.0;
                do
                {
                  v187 = v187 + v7[n + (((_BYTE)m + (_BYTE)v186) & 3) * v5];
                  v178[n] = v187;
                  ++v186;
                }
                while (v186 != 2);
                v178[n] = v187 * 0.5;
              }
            }
            v178[v5] = 1.0;
            CGContextSetStrokeColor(v2, v178);
            CGContextSaveGState(v2);
            CGContextSetLineWidth(v2, 2.0);
            v188 = &x + 6 * m;
            v189 = *v188;
            v190 = v188[1];
            v191 = 3 * m + 3;
            if (3 * m == 9)
              v191 = 0;
            v192 = &x + 2 * v191;
            v194 = *v192;
            v193 = v192[1];
            v195 = vabdd_f64(v189, *v192);
            v196 = vabdd_f64(v190, v193);
            CGContextMoveToPoint(v2, v189, v190);
            if (v195 < v9 && v196 < v9)
              CGContextAddLineToPoint(v2, v194, v193);
            else
              CGContextAddCurveToPoint(v2, v188[2], v188[3], v188[4], v188[5], v194, v193);
            CGContextSetCTM((uint64_t)v2, (__int128 *)&CGAffineTransformIdentity, v198, v199, v200, v201, v202, v203);
            CGContextDrawPath(v2, kCGPathStroke);
            CGContextRestoreGState(v2);
          }
          free(v178);
LABEL_732:
          v14 = v678;
          v17 = v665;
        }
        while (v15 || v678 != v665);
LABEL_734:
        v11 = 0;
        if ((v666 & 1) == 0)
        {
          free(v7);
          return;
        }
      }
    }
  }
}

void cg_shading_type6_release(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void patch_data_release_18404(int a1, void *a2)
{
  free(a2);
}

uint64_t __type6_info_getTypeID_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&type6_info_getTypeID_class);
  type6_info_getTypeID_id = result;
  return result;
}

void type6_info_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 104);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  v3 = *(const void **)(a1 + 96);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 88));
}

uint64_t peephole_add(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  int v4;

  if (a2 < 3)
  {
    if (a2 != 2)
      return 0;
    v4 = *(_DWORD *)(a1 - 16);
LABEL_7:
    if (v4 == 258)
    {
      if (*(double *)(a1 - 8) == 0.0)
        goto LABEL_12;
    }
    else if (v4 == 257 && !*(_DWORD *)(a1 - 8))
    {
      goto LABEL_12;
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 - 16);
  if ((v4 - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    goto LABEL_7;
  type4_value_add((double *)(a1 - 32), a1 - 32, (double *)(a1 - 16));
LABEL_12:
  *a3 = -2;
  return 1;
}

uint64_t peephole_sub(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  int v4;

  if (a2 < 3)
  {
    if (a2 != 2)
      return 0;
    v4 = *(_DWORD *)(a1 - 16);
LABEL_7:
    if (v4 == 258)
    {
      if (*(double *)(a1 - 8) == 0.0)
        goto LABEL_12;
    }
    else if (v4 == 257 && !*(_DWORD *)(a1 - 8))
    {
      goto LABEL_12;
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 - 16);
  if ((v4 - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    goto LABEL_7;
  type4_value_sub((double *)(a1 - 32), (double *)(a1 - 32), a1 - 16);
LABEL_12:
  *a3 = -2;
  return 1;
}

uint64_t peephole_mul(uint64_t a1, unint64_t a2, int *a3)
{
  int v4;
  int v5;
  double v6;

  if (a2 < 3)
  {
    if (a2 != 2)
      return 0;
    v4 = *(_DWORD *)(a1 - 16);
  }
  else
  {
    v4 = *(_DWORD *)(a1 - 16);
    if ((v4 - 257) <= 1 && (*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      type4_value_mul(a1 - 32, a1 - 32, a1 - 16);
LABEL_15:
      v5 = -2;
      goto LABEL_16;
    }
  }
  if (v4 == 258)
  {
    v6 = *(double *)(a1 - 8);
    if (v6 == 0.0)
    {
      v5 = 0;
      *(_DWORD *)(a1 - 16) = 260;
      *(_QWORD *)(a1 - 8) = type4_op_pop;
      *(_DWORD *)a1 = 258;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_16;
    }
    if (v6 == 1.0)
      goto LABEL_15;
  }
  else if (v4 == 257)
  {
    v5 = *(_DWORD *)(a1 - 8);
    if (v5 == 1)
      goto LABEL_15;
    if (!v5)
    {
      *(_DWORD *)(a1 - 16) = 260;
      *(_QWORD *)(a1 - 8) = type4_op_pop;
      *(_DWORD *)a1 = 257;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_16:
      *a3 = v5;
      return 1;
    }
  }
  return 0;
}

uint64_t peephole_cvi(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  int v7;
  uint64_t result;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 2)
    return 0;
  v11 = v3;
  v12 = v4;
  v5 = (_OWORD *)(a1 - 16);
  if ((*(_DWORD *)(a1 - 16) - 257) > 1)
    return 0;
  v10 = 0uLL;
  v9 = 0;
  v7 = type4_value_cvi((uint64_t)&v10, (uint64_t)v5, &v9);
  result = 0;
  if (v7)
  {
    if (!v9)
    {
      *v5 = v10;
      *a3 = -1;
      return 1;
    }
  }
  return result;
}

uint64_t peephole_cvr(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  double v5;

  if (a2 < 2)
    return 0;
  v3 = *(_DWORD *)(a1 - 16);
  if ((v3 - 257) > 1)
    return 0;
  if (v3 == 258)
  {
    v4 = *(_DWORD *)(a1 - 12);
    v5 = *(double *)(a1 - 8);
    goto LABEL_8;
  }
  if (v3 != 257)
    return 0;
  v4 = 0;
  v5 = (double)*(int *)(a1 - 8);
LABEL_8:
  *(_DWORD *)(a1 - 16) = 258;
  *(_DWORD *)(a1 - 12) = v4;
  *(double *)(a1 - 8) = v5;
  *a3 = -1;
  return 1;
}

uint64_t peephole_roll(uint64_t a1, unint64_t a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v7;
  int v8;
  int v9;

  if (a2 < 3)
    return 0;
  v3 = *(_DWORD *)(a1 - 32);
  if (v3 == 257 && *(_DWORD *)(a1 - 24) == 1)
    goto LABEL_4;
  if (*(_DWORD *)(a1 - 16) != 257)
    return 0;
  v5 = *(_DWORD *)(a1 - 8);
  if (v3 == 257 && v5 == 1)
  {
    v8 = *(_DWORD *)(a1 - 24);
    if (v8 == 2)
    {
      *(_DWORD *)(a1 - 32) = 260;
      *(_QWORD *)(a1 - 24) = type4_op_exch;
      v4 = -2;
      goto LABEL_15;
    }
    if (a2 < 6)
      return 0;
    goto LABEL_17;
  }
  v7 = 0;
  if (a2 >= 6 && v3 == 257)
  {
    v8 = *(_DWORD *)(a1 - 24);
LABEL_17:
    if (*(_DWORD *)(a1 - 48) == 260
      && *(uint64_t (**)(uint64_t *))(a1 - 40) == type4_op_roll
      && *(_DWORD *)(a1 - 64) == 257
      && *(_DWORD *)(a1 - 80) == 257
      && *(_DWORD *)(a1 - 72) == v8)
    {
      v9 = *(_DWORD *)(a1 - 56) + v5;
      *(_DWORD *)(a1 - 64) = 257;
      *(_DWORD *)(a1 - 56) = v9;
LABEL_4:
      v4 = -3;
LABEL_15:
      *a3 = v4;
      return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t peephole_pop(uint64_t a1, unint64_t a2, int *a3)
{
  int v3;
  int v4;
  uint64_t (*v6)(uint64_t);
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  char v10;

  if (a2 < 2)
    return 0;
  v3 = *(_DWORD *)(a1 - 16);
  if ((v3 - 257) < 2)
    goto LABEL_3;
  if (v3 != 260)
    return 0;
  v6 = *(uint64_t (**)(uint64_t))(a1 - 8);
  if (v6 == type4_op_dup)
  {
LABEL_3:
    v4 = -2;
    goto LABEL_4;
  }
  if (a2 <= 2)
    return 0;
  if (v6 == type4_op_copy)
  {
    if (*(_DWORD *)(a1 - 32) == 257 && *(_DWORD *)(a1 - 24) == 1)
      goto LABEL_23;
LABEL_24:
    v7 = a2 > 3;
    v8 = (char *)v6 == (char *)type4_op_pop;
    goto LABEL_25;
  }
  if (v6 == type4_op_index)
  {
    if (*(_DWORD *)(a1 - 32) == 257)
    {
LABEL_23:
      v4 = -3;
      goto LABEL_4;
    }
    goto LABEL_24;
  }
  v7 = a2 > 3;
  v8 = (char *)v6 == (char *)type4_op_pop;
  if (a2 >= 4 && (char *)v6 == (char *)type4_op_pop)
  {
    if (*(_DWORD *)(a1 - 32) == 260
      && *(uint64_t (**)(uint64_t))(a1 - 24) == type4_op_copy
      && *(_DWORD *)(a1 - 48) == 257
      && *(_DWORD *)(a1 - 40) == 2)
    {
      v4 = -4;
      goto LABEL_4;
    }
    v9 = (char *)v6 == (char *)type4_op_exch;
LABEL_46:
    if (v9
      && v7
      && *(_DWORD *)(a1 - 32) == 260
      && *(uint64_t (**)(uint64_t))(a1 - 24) == type4_op_copy
      && *(_DWORD *)(a1 - 48) == 257
      && *(_DWORD *)(a1 - 40) == 2)
    {
      *(_DWORD *)(a1 - 48) = 260;
      *(_QWORD *)(a1 - 40) = type4_op_dup;
      goto LABEL_23;
    }
    goto LABEL_26;
  }
LABEL_25:
  v9 = (char *)v6 == (char *)type4_op_exch;
  if ((char *)v6 == (char *)type4_op_exch)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      *(_OWORD *)(a1 - 16) = *(_OWORD *)(a1 - 32);
      *(_DWORD *)(a1 - 32) = 260;
      *(_QWORD *)(a1 - 24) = type4_op_pop;
      goto LABEL_44;
    }
    goto LABEL_46;
  }
LABEL_26:
  if (v6 == type4_op_copy && *(_DWORD *)(a1 - 32) == 257 && *(_DWORD *)(a1 - 24) == 2)
  {
    *(_DWORD *)(a1 - 16) = 260;
    *(_QWORD *)(a1 - 8) = type4_op_index;
    *(_DWORD *)(a1 - 32) = 257;
    *(_DWORD *)(a1 - 24) = 1;
LABEL_44:
    v4 = -1;
    goto LABEL_4;
  }
  v10 = !v8;
  if (a2 < 5)
    v10 = 1;
  if ((v10 & 1) != 0
    || *(_DWORD *)(a1 - 32) != 260
    || *(uint64_t (**)(uint64_t *))(a1 - 24) != type4_op_roll
    || *(_DWORD *)(a1 - 48) != 257
    || *(_DWORD *)(a1 - 40) != 1
    || *(_DWORD *)(a1 - 64) != 257
    || *(_DWORD *)(a1 - 56) != 3)
  {
    return 0;
  }
  *(_DWORD *)(a1 - 16) = 260;
  *(_QWORD *)(a1 - 8) = type4_op_pop;
  *(_DWORD *)(a1 - 32) = 260;
  *(_QWORD *)(a1 - 24) = type4_op_exch;
  *(_DWORD *)(a1 - 48) = 260;
  *(_QWORD *)(a1 - 40) = type4_op_pop;
  *(_DWORD *)(a1 - 64) = 260;
  v4 = -1;
  *(_QWORD *)(a1 - 56) = type4_op_exch;
LABEL_4:
  *a3 = v4;
  return 1;
}

uint64_t peephole_exch(uint64_t a1, unint64_t a2, int *a3)
{
  __int128 *v3;
  int v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  int v8;
  __int128 v9;

  if (a2 < 2)
    return 0;
  v3 = (__int128 *)(a1 - 16);
  v4 = *(_DWORD *)(a1 - 16);
  if (v4 == 260)
  {
    if (*(BOOL (**)(uint64_t))(a1 - 8) == type4_op_exch)
    {
      v5 = -2;
LABEL_10:
      *a3 = v5;
      return 1;
    }
    return 0;
  }
  v6 = 0;
  if (a2 >= 3 && (v4 - 257) <= 1)
  {
    v8 = *(_DWORD *)(a1 - 32);
    v7 = (__int128 *)(a1 - 32);
    if ((v8 - 257) <= 1)
    {
      v9 = *v7;
      *v7 = *v3;
      *v3 = v9;
      v5 = -1;
      goto LABEL_10;
    }
    return 0;
  }
  return v6;
}

uint64_t peephole_index(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t (**v4)(uint64_t);
  int v5;
  _OWORD *v6;
  int v7;
  int v8;
  uint64_t (**v9)(uint64_t);
  int v10;
  uint64_t v11;
  int v13;
  int v14;

  if (a2 < 3)
  {
    if (a2 != 2)
      return 0;
    v3 = (_DWORD *)(a1 - 16);
    if (*(_DWORD *)(a1 - 16) != 257)
      return 0;
    v10 = *(_DWORD *)(a1 - 8);
    v9 = (uint64_t (**)(uint64_t))(a1 - 8);
    if (v10)
      return 0;
    v4 = v9;
LABEL_16:
    *v3 = 260;
    *v4 = type4_op_dup;
LABEL_24:
    *a3 = -1;
    return 1;
  }
  v3 = (_DWORD *)(a1 - 16);
  if (*(_DWORD *)(a1 - 16) != 257)
    return 0;
  v4 = (uint64_t (**)(uint64_t))(a1 - 8);
  v5 = *(_DWORD *)(a1 - 8);
  if (!v5)
  {
    v13 = *(_DWORD *)(a1 - 32);
    v6 = (_OWORD *)(a1 - 32);
    if ((v13 - 257) <= 1)
      goto LABEL_23;
    goto LABEL_16;
  }
  if (a2 < 4)
    return 0;
  if (v5 == 1)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1)
    {
      v8 = *(_DWORD *)(a1 - 48);
      v6 = (_OWORD *)(a1 - 48);
      v7 = v8;
      goto LABEL_22;
    }
    return 0;
  }
  v11 = 0;
  if (a2 >= 5 && v5 == 2)
  {
    if ((*(_DWORD *)(a1 - 32) - 257) <= 1 && (*(_DWORD *)(a1 - 48) - 257) <= 1)
    {
      v14 = *(_DWORD *)(a1 - 64);
      v6 = (_OWORD *)(a1 - 64);
      v7 = v14;
LABEL_22:
      if ((v7 - 257) <= 1)
      {
LABEL_23:
        *(_OWORD *)v3 = *v6;
        goto LABEL_24;
      }
    }
    return 0;
  }
  return v11;
}

uint64_t peephole_dup(_OWORD *a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2 || (*((_DWORD *)a1 - 4) - 257) > 1)
    return 0;
  *a1 = *(a1 - 1);
  *a3 = 0;
  return 1;
}

uint64_t peephole_copy(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 2 || *(_DWORD *)(a1 - 16) != 257 || *(_DWORD *)(a1 - 8) != 1)
    return 0;
  *(_DWORD *)(a1 - 16) = 260;
  *(_QWORD *)(a1 - 8) = type4_op_dup;
  *a3 = -1;
  return 1;
}

uint64_t peephole_eq(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 == 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_ne(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 != 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_gt(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 > 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_ge(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 >= 0;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_lt(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare((int *)&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 >> 31;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_le(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 3)
    return 0;
  v11 = v3;
  v12 = v4;
  if ((*(_DWORD *)(a1 - 16) - 257) > 1 || (*(_DWORD *)(a1 - 32) - 257) > 1)
    return 0;
  v10 = 0;
  v7 = type4_value_compare(&v10, a1 - 32, (double *)(a1 - 16));
  result = 0;
  if (v7)
  {
    v9 = v10 < 1;
    *(_DWORD *)(a1 - 32) = 256;
    *(_BYTE *)(a1 - 24) = v9;
    *a3 = -2;
    return 1;
  }
  return result;
}

uint64_t peephole_if (uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t *v4;

  if (a2 < 3)
    return 0;
  if (*(_DWORD *)(a1 - 16) != 259 || *(_DWORD *)(a1 - 32) != 256 || *(_BYTE *)(a1 - 24))
    return 0;
  v4 = *(unint64_t **)(a1 - 8);
  *a3 = -3;
  type4_program_release(v4);
  return 1;
}

void deZoneDescendantsOf(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  objc_msgSend(a1, "childrenOfClass:into:", objc_opt_class(), v2);
  v3 = objc_msgSend(v2, "count");
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (void *)objc_msgSend(v2, "objectAtIndex:", i);
      if ((objc_msgSend(v5, "hasRotatedCharacters") & 1) == 0)
      {
        deZoneDescendantsOf(v5);
        objc_msgSend(v5, "promoteChildren");
        objc_msgSend(v5, "remove");
      }
    }
  }

  deZoneTablesIn(a1);
}

void deZoneTablesIn(void *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t i;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  id v9;

  v2 = objc_msgSend(a1, "countOfClass:", objc_opt_class());
  if (v2)
  {
    v3 = v2;
    v9 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v2);
    objc_msgSend(a1, "childrenOfClass:into:", objc_opt_class(), v9);
    for (i = 0; i != v3; ++i)
    {
      v5 = (void *)objc_msgSend(v9, "objectAtIndex:", i);
      v6 = objc_msgSend(v5, "count");
      if (v6)
      {
        v7 = v6;
        v8 = 0;
        do
        {
          deZoneDescendantsOf(objc_msgSend(v5, "childAtIndex:", v8));
          v8 = (v8 + 1);
        }
        while (v7 != (_DWORD)v8);
      }
    }

  }
}

uint64_t CGPDFShadingType4Init(_QWORD *a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  CGPDFDictionary *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  CGPDFStream *v15;
  CGPDFDataFormat format;
  CGPDFObjectRef v17;
  CGPDFInteger value;

  if (type4_info_getTypeID_onceToken != -1)
    dispatch_once(&type4_info_getTypeID_onceToken, &__block_literal_global_18454);
  result = pdf_create_cftype();
  if (!result)
    return result;
  v7 = (_QWORD *)result;
  v17 = 0;
  value = 0;
  format = CGPDFDataFormatRaw;
  *a2 = result;
  *a3 = CGPDFShadingType4Init_type4_callbacks;
  if (a1)
    v8 = (CGPDFDictionary *)a1[3];
  else
    v8 = 0;
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerCoordinate", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
  {
    return 0;
  }
  v7[3] = value;
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerComponent", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
  {
    return 0;
  }
  v7[4] = value;
  if (!CGPDFDictionaryGetInteger(v8, "BitsPerFlag", &value))
  {
    return 0;
  }
  if ((unint64_t)value > 8 || ((1 << value) & 0x114) == 0)
  {
    return 0;
  }
  v7[5] = value;
  v7[11] = 0;
  if (!CGPDFDictionaryGetObject(v8, "Function", &v17)
    || (result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v17, 1uLL), (v7[11] = result) != 0))
  {
    if (a1)
      v9 = (_QWORD *)a1[5];
    else
      v9 = 0;
    v10 = v7[11];
    if (v10)
    {
      if (CGColorSpaceGetType(v9) == 7)
      {
        return 0;
      }
      v10 = v7[11];
      if (v10)
        v11 = *(_QWORD *)(v10 + 48);
      else
        v11 = 0;
      if (v9)
        v12 = *(_QWORD *)(v9[3] + 40);
      else
        v12 = 0;
      if (v11 != v12)
      {
        pdf_error("invalid function for type 4 shading");
        return 0;
      }
    }
    if (v9)
    {
      CFRetain(v9);
      v7[2] = v9;
      if (v7[11])
        v13 = 2;
      else
        v13 = 2 * *(_QWORD *)(v9[3] + 40);
    }
    else
    {
      v7[2] = 0;
      v13 = 2 * (v10 != 0);
    }
    v14 = malloc_type_malloc(8 * (v13 + 4), 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    if (!v14)
      return 0;
    if (!CGPDFDictionaryGetNumbers(v8, "Decode", (uint64_t)v14, (CGPDFArray *)(v13 + 4)))
    {
      free(v14);
      return 0;
    }
    v7[6] = *v14;
    v7[8] = v14[1];
    v7[7] = v14[2];
    v7[9] = v14[3];
    memmove(v14, v14 + 4, 8 * v13);
    v7[10] = v14;
    if (a1)
      v15 = (CGPDFStream *)a1[4];
    else
      v15 = 0;
    result = (uint64_t)CGPDFStreamCopyData(v15, &format);
    v7[12] = result;
    if (result)
    {
      if (format == CGPDFDataFormatRaw)
        return 1;
      pdf_error("invalid shading data format.");
      return 0;
    }
  }
  return result;
}

uint64_t type4_create_shading(CGRect *a1, const void *a2)
{
  const CGRect *v3;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v7;
  double x;
  double v9;
  double width;
  CGFloat y;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const CGFloat *Components;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD v21[4];

  v3 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (a1)
  {
    p_size = &a1[2].size;
    p_y = &a1[2].origin.y;
    v3 = a1 + 2;
    p_height = &a1[2].size.height;
  }
  v7 = *p_height;
  x = v3->origin.x;
  v9 = *p_y;
  width = p_size->width;
  v21[0] = *(_QWORD *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307)
    v17 = 0;
  if (width != 1.79769313e308)
    v17 = 0;
  v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0)
      return 0;
  }
  else
  {
    result = 0;
    if (y == 0.0)
      return result;
  }
  if (v18)
    v20 = 0;
  else
    v20 = v21;
  result = CGShadingCreateEmpty(0, *(_QWORD **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(_QWORD *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type4_create_shading_type4_drawing_callbacks;
  *(_QWORD *)(result + 112) = cg_shading_type4_release;
  return result;
}

void type4_release_info(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void cg_shading_type4_draw(uint64_t a1, CGContextRef c)
{
  CGColorSpace *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *BytePtr;
  CFIndex Length;
  __n128 v11;
  uint64_t v12;
  double *v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t *v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  CGContext *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGSize size;
  CGPoint origin;
  size_t width;
  double height;
  int *v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  unint64_t v60;
  CGDataProvider *v61;
  CGImageRef v62;
  CGContextRef v63;
  int *v64;
  double *v65;
  CGContextRef *v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  _QWORD *v70;
  int *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CGAffineTransform v75;
  unsigned __int8 *v76[2];
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  CGRect v81;
  uint64_t v82;
  _QWORD v83[4];
  CGRect v84;
  CGRect v85;

  v83[3] = *MEMORY[0x1E0C80C00];
  v74 = a1;
  v3 = *(CGColorSpace **)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 40);
    v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) > 5)
      return;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  v82 = 0;
  memset(v83, 0, 24);
  memset(&v81, 0, sizeof(v81));
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v76[1] = 0;
  memset(&v75, 0, sizeof(v75));
  CGContextSetFillColorSpace(c, v3);
  CGContextSetStrokeColorSpace(c, *(CGColorSpaceRef *)(v74 + 16));
  CGContextGetCTM(&v75, c);
  v6 = CGTriangleMeshCreate(*(_QWORD **)(v74 + 16), *(const void **)(v74 + 88));
  v7 = v6;
  if (v6)
    v8 = v6[1];
  else
    v8 = 0;
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(*(CFDataRef *)(v74 + 96));
  Length = CFDataGetLength(*(CFDataRef *)(v74 + 96));
  v76[0] = BytePtr;
  v77 = &BytePtr[Length];
  LODWORD(v78) = 0;
  v79 = 0;
  while (v76[0] != v77)
  {
    do
      type4_read_triangle(v74, v76, (float64x2_t *)&v75, (uint64_t)v7, v8, v11);
    while (v79);
  }
  if (v7)
  {
    v12 = v7[9];
    if (v12)
    {
      v66 = &v63;
      is_mul_ok(3 * v12, 0x48uLL);
      v13 = (double *)MEMORY[0x1E0C80A78](216 * v12, v11);
      v17 = (double *)((char *)&v63 - v16);
      v65 = v17;
      if (v14 <= 0x38E38E38E38E38DLL)
        v18 = v17;
      else
        v18 = 0;
      if (v14 - 0x38E38E38E38E38ELL >= 0xFC71C71C71C71CF3)
      {
        v13 = (double *)malloc_type_malloc((size_t)v13, 0x7316D395uLL);
        v18 = v13;
      }
      v67 = v5;
      MEMORY[0x1E0C80A78](v13, v15);
      v64 = (int *)((char *)&v63 - v19 - 15);
      if (v20 <= 0xFFFFFFFFFFFFFFELL)
        v21 = (int *)((char *)&v63 - v19 - 15);
      else
        v21 = 0;
      v63 = c;
      if (v20 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000082)
        v21 = (int *)malloc_type_malloc(16 * v12, 0xD96E95FAuLL);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v68 = v18 + 4;
      v71 = v21;
      v70 = v7;
      v69 = v12;
      do
      {
        v25 = &v21[4 * v24];
        v25[3] = 0;
        v26 = v7[9];
        v72 = v24;
        if (v26 > v24)
        {
          v27 = 0;
          v28 = v7[4];
          v29 = v7[7];
          v30 = v7[10] + v22;
          do
          {
            v83[v27] = v29 + v28 * *(_QWORD *)(v30 + v27 * 8);
            ++v27;
          }
          while (v27 != 3);
        }
        v73 = v22;
        v31 = 0;
        v32 = &v68[9 * v23];
        do
        {
          v33 = v23;
          v25[v31] = v23;
          v34 = v83[v31];
          v35 = &v18[9 * v23];
          *(_OWORD *)v35 = *(_OWORD *)v34;
          v35[2] = 0.0;
          v35[3] = 0.0;
          v36 = *(_QWORD *)(v74 + 88);
          if (v36)
          {
            v82 = *(_QWORD *)(v34 + 16);
            CGFunctionEvaluate(v36, (char *)&v82, &v18[9 * v23 + 4]);
          }
          else if (v4)
          {
            v37 = (uint64_t *)(v34 + 16);
            v38 = v32;
            v39 = v4;
            do
            {
              v40 = *v37++;
              *(_QWORD *)v38++ = v40;
              --v39;
            }
            while (v39);
          }
          ++v23;
          v18[9 * v33 + 4 + v4] = 1.0;
          ++v31;
          v32 += 9;
        }
        while (v31 != 3);
        v24 = v72 + 1;
        v22 = v73 + 24;
        v41 = v69;
        v21 = v71;
        v7 = v70;
      }
      while (v72 + 1 != v69);
      CGTriangleMeshRelease((uint64_t)v70);
      v42 = v23;
      v43 = v67;
      if ((RenderTriangleMesh(v18, v42, v21, v41, v67, (uint64_t *)&v80, &v81.origin.x) & 1) != 0)
      {
        v44 = v63;
        CGContextSaveGState(v63);
        CGContextResetCTM((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51);
        size = v81.size;
        origin = v81.origin;
        if (v81.size.width < 0.0 || v81.size.height < 0.0)
        {
          v84 = CGRectStandardize(v81);
          width = (unint64_t)v84.size.width;
          v84.origin = origin;
          v84.size = size;
          *(CGRect *)(&height - 3) = CGRectStandardize(v84);
        }
        else
        {
          width = (unint64_t)v81.size.width;
          height = v81.size.height;
        }
        v57 = (unint64_t)height;
        v58 = (8 * v43 * width) >> 3;
        v59 = (uint64_t)v80;
        v60 = v58 * (unint64_t)height;
        check_clients_buffer("CGDataProviderCreateWithData", v80, v60);
        v61 = CGDataProviderCreateWithDataInternal(0, v59, v60, (uint64_t)patch_data_release_18470, 0);
        v62 = CGImageCreate(width, v57, 8uLL, 8 * v43, v58, *(CGColorSpaceRef *)(v74 + 16), 3u, v61, 0, 0, kCGRenderingIntentDefault);
        CGDataProviderRelease(v61);
        CGImageSetCachingFlags(v62, 1);
        v85.origin = origin;
        v85.size = size;
        CGContextDrawImage(v44, v85, v62);
        CGContextRestoreGState(v44);
        if (v62)
          CFRelease(v62);
        v56 = v71;
        if (v71 == v64)
          goto LABEL_47;
      }
      else
      {
        if (v21 == v64)
          goto LABEL_47;
        v56 = v21;
      }
      free(v56);
LABEL_47:
      if (v18 != v65)
        free(v18);
    }
  }
}

void cg_shading_type4_release(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void type4_read_triangle(uint64_t a1, unsigned __int8 **a2, float64x2_t *a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  int v16;
  float64_t v17;
  float64_t v18;
  _QWORD *v19;
  float64x2_t *v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26[3];

  v26[2] = *(double *)MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a6);
  v14 = (double *)((char *)&v22 - v13);
  if (v12 <= 0x1FFFFFFFFFFFFFFELL)
    v15 = (double *)((char *)&v22 - v13);
  else
    v15 = 0;
  if (v12 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082)
    v15 = (double *)malloc_type_malloc(8 * v11, 0x1664EC1FuLL);
  v16 = type4_read_vertex(a1, a2, &v23, v15, a5);
  if (v16 == 2)
  {
    v17 = v23;
    v18 = v24;
    v19 = (_QWORD *)a4;
    v20 = a3;
    v21 = 1;
  }
  else
  {
    if (v16 != 1)
    {
      if (v16)
      {
        pdf_error("invalid shading flag value.");
      }
      else
      {
        type4_read_vertex(a1, a2, &v25, &v15[a5], a5);
        type4_read_vertex(a1, a2, v26, &v15[2 * a5], a5);
        CGTriangleMeshAddTriangle(a4, a3, (uint64_t)&v23, (uint64_t)v15);
      }
      goto LABEL_14;
    }
    v17 = v23;
    v18 = v24;
    v19 = (_QWORD *)a4;
    v20 = a3;
    v21 = 0;
  }
  CGTriangleMeshAddTriangleWithRelativePoint(v19, v20, v21, (uint64_t *)v15, v17, v18);
LABEL_14:
  if (v15 != v14)
    free(v15);
}

void patch_data_release_18470(int a1, void *a2)
{
  free(a2);
}

uint64_t type4_read_vertex(uint64_t a1, unsigned __int8 **a2, double *a3, double *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  double v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5 < 0x19)
  {
    v12 = 0;
    if (!v5)
      goto LABEL_21;
    goto LABEL_13;
  }
  v5 -= 24;
  v6 = (unint64_t)a2[4];
  if (v6 >= 0x18)
  {
    v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    v7 = (unint64_t)a2[2];
    v8 = *((_DWORD *)a2 + 6);
    v9 = (unint64_t)a2[4];
    v10 = *a2;
    do
    {
      v8 <<= 8;
      *((_DWORD *)a2 + 6) = v8;
      if ((unint64_t)v10 < v7)
      {
        *a2 = v10 + 1;
        v8 |= *v10;
        *((_DWORD *)a2 + 6) = v8;
        ++v10;
      }
      v6 = v9 + 8;
      a2[4] = (unsigned __int8 *)(v9 + 8);
      v11 = v9 >= 0x10;
      v9 += 8;
    }
    while (!v11);
  }
  a2[4] = (unsigned __int8 *)(v6 - 24);
  v12 = ((v8 >> (v6 - 24)) & 0xFFFFFF) << v5;
  if (v5)
  {
LABEL_13:
    v13 = (unint64_t)a2[4];
    if (v13 >= v5)
    {
      v15 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v14 = (unint64_t)a2[2];
      v15 = *((_DWORD *)a2 + 6);
      v16 = *a2;
      do
      {
        v15 <<= 8;
        *((_DWORD *)a2 + 6) = v15;
        if ((unint64_t)v16 < v14)
        {
          *a2 = v16 + 1;
          v15 |= *v16;
          *((_DWORD *)a2 + 6) = v15;
          ++v16;
        }
        v13 += 8;
        a2[4] = (unsigned __int8 *)v13;
      }
      while (v13 < v5);
    }
    v17 = (unsigned __int8 *)(v13 - v5);
    a2[4] = v17;
    LODWORD(v5) = (v15 >> (char)v17) & (0xFFFFFFFF >> -(char)v5);
  }
LABEL_21:
  v18 = 0;
  v19 = *(_QWORD *)(a1 + 24);
  v20 = v19;
  if (v19 >= 0x19)
  {
    v20 = v19 - 24;
    v21 = (unint64_t)a2[4];
    if (v21 >= 0x18)
    {
      v23 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v22 = (unint64_t)a2[2];
      v23 = *((_DWORD *)a2 + 6);
      v24 = (unint64_t)a2[4];
      v25 = *a2;
      do
      {
        v23 <<= 8;
        *((_DWORD *)a2 + 6) = v23;
        if ((unint64_t)v25 < v22)
        {
          *a2 = v25 + 1;
          v23 |= *v25;
          *((_DWORD *)a2 + 6) = v23;
          ++v25;
        }
        v21 = v24 + 8;
        a2[4] = (unsigned __int8 *)(v24 + 8);
        v11 = v24 >= 0x10;
        v24 += 8;
      }
      while (!v11);
    }
    a2[4] = (unsigned __int8 *)(v21 - 24);
    v18 = ((v23 >> (v21 - 24)) & 0xFFFFFF) << v20;
  }
  v26 = (double)(0xFFFFFFFF >> -(char)v19);
  if (v20)
  {
    v27 = a2[4];
    if ((unint64_t)v27 >= v20)
    {
      v29 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v28 = (unint64_t)a2[2];
      v29 = *((_DWORD *)a2 + 6);
      v30 = *a2;
      do
      {
        v29 <<= 8;
        *((_DWORD *)a2 + 6) = v29;
        if ((unint64_t)v30 < v28)
        {
          *a2 = v30 + 1;
          v29 |= *v30;
          *((_DWORD *)a2 + 6) = v29;
          ++v30;
        }
        v27 += 8;
        a2[4] = v27;
      }
      while ((unint64_t)v27 < v20);
    }
    v31 = &v27[-v20];
    a2[4] = v31;
    LODWORD(v20) = (v29 >> (char)v31) & (0xFFFFFFFF >> -(char)v20);
  }
  *a3 = *(double *)(a1 + 48) + (*(double *)(a1 + 64) - *(double *)(a1 + 48)) * (double)(v20 | v18) / v26;
  if (v19 < 0x19)
  {
    v37 = 0;
    if (!v19)
      goto LABEL_60;
    goto LABEL_52;
  }
  v19 -= 24;
  v32 = (unint64_t)a2[4];
  if (v32 >= 0x18)
  {
    v34 = *((_DWORD *)a2 + 6);
  }
  else
  {
    v33 = (unint64_t)a2[2];
    v34 = *((_DWORD *)a2 + 6);
    v35 = (unint64_t)a2[4];
    v36 = *a2;
    do
    {
      v34 <<= 8;
      *((_DWORD *)a2 + 6) = v34;
      if ((unint64_t)v36 < v33)
      {
        *a2 = v36 + 1;
        v34 |= *v36;
        *((_DWORD *)a2 + 6) = v34;
        ++v36;
      }
      v32 = v35 + 8;
      a2[4] = (unsigned __int8 *)(v35 + 8);
      v11 = v35 >= 0x10;
      v35 += 8;
    }
    while (!v11);
  }
  a2[4] = (unsigned __int8 *)(v32 - 24);
  v37 = ((v34 >> (v32 - 24)) & 0xFFFFFF) << v19;
  if (v19)
  {
LABEL_52:
    v38 = (unint64_t)a2[4];
    if (v38 >= v19)
    {
      v40 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v39 = (unint64_t)a2[2];
      v40 = *((_DWORD *)a2 + 6);
      v41 = *a2;
      do
      {
        v40 <<= 8;
        *((_DWORD *)a2 + 6) = v40;
        if ((unint64_t)v41 < v39)
        {
          *a2 = v41 + 1;
          v40 |= *v41;
          *((_DWORD *)a2 + 6) = v40;
          ++v41;
        }
        v38 += 8;
        a2[4] = (unsigned __int8 *)v38;
      }
      while (v38 < v19);
    }
    v42 = (unsigned __int8 *)(v38 - v19);
    a2[4] = v42;
    LODWORD(v19) = (v40 >> (char)v42) & (0xFFFFFFFF >> -(char)v19);
  }
LABEL_60:
  a3[1] = *(double *)(a1 + 56) + (*(double *)(a1 + 72) - *(double *)(a1 + 56)) * (double)(v19 | v37) / v26;
  if (a5)
  {
    v43 = 0;
    v44 = *(_QWORD *)(a1 + 32);
    v45 = *(_QWORD *)(a1 + 80);
    while (v44 < 0x19)
    {
      v51 = 0;
      v52 = v44;
      if (v44)
        goto LABEL_74;
LABEL_82:
      *a4++ = *(double *)(v45 + 16 * v43)
            + (*(double *)(v45 + 16 * v43 + 8) - *(double *)(v45 + 16 * v43))
            * (double)(v52 | v51)
            / (double)(0xFFFFFFFF >> -(char)v44);
      if (++v43 == a5)
        goto LABEL_83;
    }
    v46 = (unint64_t)a2[4];
    if (v46 >= 0x18)
    {
      v48 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v47 = (unint64_t)a2[2];
      v48 = *((_DWORD *)a2 + 6);
      v49 = (unint64_t)a2[4];
      v50 = *a2;
      do
      {
        v48 <<= 8;
        *((_DWORD *)a2 + 6) = v48;
        if ((unint64_t)v50 < v47)
        {
          *a2 = v50 + 1;
          v48 |= *v50;
          *((_DWORD *)a2 + 6) = v48;
          ++v50;
        }
        v46 = v49 + 8;
        a2[4] = (unsigned __int8 *)(v49 + 8);
        v11 = v49 >= 0x10;
        v49 += 8;
      }
      while (!v11);
    }
    a2[4] = (unsigned __int8 *)(v46 - 24);
    v51 = ((v48 >> (v46 - 24)) & 0xFFFFFF) << (v44 - 24);
    v52 = v44 - 24;
LABEL_74:
    v53 = a2[4];
    if ((unint64_t)v53 >= v52)
    {
      v55 = *((_DWORD *)a2 + 6);
    }
    else
    {
      v54 = (unint64_t)a2[2];
      v55 = *((_DWORD *)a2 + 6);
      v56 = *a2;
      do
      {
        v55 <<= 8;
        *((_DWORD *)a2 + 6) = v55;
        if ((unint64_t)v56 < v54)
        {
          *a2 = v56 + 1;
          v55 |= *v56;
          *((_DWORD *)a2 + 6) = v55;
          ++v56;
        }
        v53 += 8;
        a2[4] = v53;
      }
      while ((unint64_t)v53 < v52);
    }
    v57 = &v53[-v52];
    a2[4] = v57;
    LODWORD(v52) = (v55 >> (char)v57) & (0xFFFFFFFF >> -(char)v52);
    goto LABEL_82;
  }
LABEL_83:
  v58 = a2[4];
  if ((v58 & 7) != 0)
    a2[4] = (unsigned __int8 *)((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8);
  return (v5 | v12) & 3;
}

