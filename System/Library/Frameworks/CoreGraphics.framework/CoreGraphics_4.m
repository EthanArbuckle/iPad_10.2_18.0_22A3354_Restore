uint64_t PDAdifferencePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  int8x8_t v5;
  uint32x2_t v6;
  int8x8_t v7;
  uint32x2_t v8;
  int32x2_t v9;
  uint32x2_t v10;
  uint32x2_t v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  __int32 v22;
  __int32 v23;
  int v24;
  BOOL v25;
  int v26;
  __int32 v27;
  int v28;
  int v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int32x2_t v37;
  uint32x2_t v38;
  uint32x2_t v39;
  int v40;
  int8x8_t v41;

  v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x1F00007C00);
  v5.i32[0] = vshl_u32(v4, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v5.i32[1] = vshl_u32(v4, (uint32x2_t)0x30000000CLL).i32[1];
  v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x1F00007C00);
  v7.i32[0] = vshl_u32(v6, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v7.i32[1] = vshl_u32(v6, (uint32x2_t)0x30000000CLL).i32[1];
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v7);
  v7.i32[0] = a4 & 0xFFFFFFF8;
  v7.i32[1] = a2 & 0xFFFFFFF8;
  v9 = (int32x2_t)vsra_n_u32((uint32x2_t)v7, (uint32x2_t)__PAIR64__(a2, a4), 5uLL);
  v10 = (uint32x2_t)vand_s8((int8x8_t)__PAIR64__(a1, a3), (int8x8_t)vdup_n_s32(0x3E0u));
  v11 = vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFF9FFFFFFFELL)), (uint32x2_t)v9);
  v12 = v11.i32[1];
  v13 = v11.i32[0];
  v14 = v11.i32[0] + v11.i32[1];
  v15 = v9.i32[1];
  v16 = (int32x2_t)vmin_u32(v8, (uint32x2_t)vdup_lane_s32(v9, 0));
  v17 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v5), (uint32x2_t)vdup_lane_s32(v9, 1));
  v18 = vadd_s32(v16, v17);
  v19 = (int32x2_t)__PAIR64__(v17.u32[1], v16.u32[0]);
  v20 = vrev64_s32(v9);
  v17.i32[1] = v16.i32[1];
  v21 = vmul_s32(v9, v17);
  v22 = v9.i32[0];
  v23 = v9.i32[0] * v12;
  v24 = v13 * v9.i32[1];
  v26 = v23 - v24;
  v25 = v23 - v24 < 0;
  v27 = 255 * v14 - v24 - v23;
  if (v25)
    v28 = -v26;
  else
    v28 = v26;
  v29 = v27 + v28;
  v30 = vmul_s32(v19, v20);
  v31 = (int32x2_t)__PAIR64__(v21.u32[1], v30.u32[0]);
  v32 = vneg_s32(v21);
  v21.i32[1] = v30.i32[1];
  v33 = vaba_s32(vsub_s32(vmla_s32(v32, v18, (int32x2_t)0xFF000000FFLL), v30), v21, v31);
  v34 = 255 * (v22 + v15) - v22 * v15;
  if (v29 >= 65152)
    v35 = 65152;
  else
    v35 = v29 + 128;
  v36 = v35 + (v35 >> 8);
  v37 = vdup_n_s32(0xFE80u);
  v38 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v37, v33), (int8x8_t)vadd_s32(v33, (int32x2_t)0x8000000080), (int8x8_t)v37);
  v39 = vsra_n_u32(v38, v38, 8uLL);
  if (v34 >= 65152)
    v40 = 65152;
  else
    v40 = v34 + 128;
  v41 = vand_s8((int8x8_t)vshl_u32(v39, (uint32x2_t)0xFFFFFFF5FFFFFFFFLL), (int8x8_t)0x1F00007C00);
  return ((v40 + (v40 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v40 + (v40 >> 8)) >> 8) >> 5 << 24) | (v36 >> 6) & 0x3E0 | v41.i32[0] | v41.i32[1];
}

uint64_t PDAexclusionPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint32x2_t v5;
  int8x8_t v6;
  unsigned int v7;
  unsigned int v8;
  uint32x2_t v9;
  int8x8_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  uint32x2_t v23;
  int8x8_t v24;

  v4 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  v5 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x1F00007C00);
  v6.i32[0] = vshl_u32(v5, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v6.i32[1] = vshl_u32(v5, (uint32x2_t)0x30000000CLL).i32[1];
  v7 = a2 & 0xF8 | (a2 >> 5);
  v8 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x1F00007C00);
  v10.i32[0] = vshl_u32(v9, (uint32x2_t)0xFFFFFFFDFFFFFFF4).u32[0];
  v10.i32[1] = vshl_u32(v9, (uint32x2_t)0x30000000CLL).i32[1];
  v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11)
    v8 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v7)
    v4 = a2 & 0xF8 | (a2 >> 5);
  v12 = 255 * (v8 + v4) - 2 * v4 * v8;
  v13 = 255 * (v11 + v7) - v11 * v7;
  if (v12 >= 65152)
    v14 = 65152;
  else
    v14 = v12 + 128;
  v15 = v14 + (v14 >> 8);
  if (v13 >= 65152)
    v16 = 65152;
  else
    v16 = v13 + 128;
  v17 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v10), (uint32x2_t)vdup_n_s32(v11));
  v18 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFFEFFFFFFF9), v6), (uint32x2_t)vdup_n_s32(v7));
  v19 = vmul_s32(vadd_s32(v17, v18), (int32x2_t)0xFF000000FFLL);
  v20 = vmul_s32(v18, v17);
  v21 = vsub_s32(v19, vadd_s32(v20, v20));
  v22 = vdup_n_s32(0xFE80u);
  v23 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v22, v21), (int8x8_t)vadd_s32(v21, (int32x2_t)0x8000000080), (int8x8_t)v22);
  v24 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v23, v23, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFFLL), (int8x8_t)0x1F00007C00);
  return v24.i32[0] | (v15 >> 6) & 0x3E0 | v24.i32[1] | (((v16 + (v16 >> 8)) >> 8) >> 3 << 27) | ((v16 + (v16 >> 8)) >> 8 << 19) & 0x7000000;
}

uint64_t PDAhuePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  uint32x2_t v5;
  unsigned int v6;
  uint32x2_t v7;
  unsigned int v8;
  int32x2_t v9;
  double v10;
  int32x2_t v11;
  int32x2_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  uint32x2_t v17;
  double v18;
  uint32x2_t v19;
  int32x2_t v20;
  signed int v21;
  int32x2_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int32 v28;
  __int32 v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned __int32 v33;
  unsigned int v34;
  __int32 v35;
  signed int v36;
  int32x2_t v37;
  signed __int32 v38;
  int32x2_t v39;
  signed int v40;
  unsigned __int8 v41;
  __int32 v42;
  signed int v43;
  signed int v44;
  unsigned int v45;
  signed __int32 v46;
  int v47;
  int32x2_t v48;
  unsigned int v49;
  unsigned int v50;
  int8x8_t v51;
  uint32x2_t v52;
  int8x8_t v53;
  int32x2_t v55;
  signed int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  v5 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  v6 = a2 & 0xF8 | (a2 >> 5);
  v7 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  v8 = a4 & 0xF8 | (a4 >> 5);
  v9 = vdup_n_s32(v8);
  v10 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v7, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v7, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (uint32x2_t)v9));
  v11 = vdup_n_s32(v6);
  v12 = (int32x2_t)vmin_u32(v5, (uint32x2_t)v11);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v8)
    v13 = a4 & 0xF8 | (a4 >> 5);
  else
    v13 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v6)
    v14 = a2 & 0xF8 | (a2 >> 5);
  else
    v14 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  if (v8 == 255)
  {
    v15 = 0;
    v16 = 0.0;
  }
  else
  {
    v16 = COERCE_DOUBLE(vmul_s32(vdup_n_s32(v8 ^ 0xFF), v12));
    v17 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v9, v12);
    v12 = (int32x2_t)vshr_n_u32(vsra_n_u32(v17, v17, 8uLL), 8uLL);
    v15 = (v8 ^ 0xFF) * v14;
    v14 = (v8 * v14 + 128 + ((v8 * v14 + 128) >> 8)) >> 8;
  }
  v18 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v16, *(int32x2_t *)&v10, vdup_n_s32(v6 ^ 0xFF)));
  v19 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v10, v11);
  v20 = (int32x2_t)vshr_n_u32(vsra_n_u32(v19, v19, 8uLL), 8uLL);
  if (v6 == 255)
  {
    v21 = v13;
  }
  else
  {
    v15 += v13 * (v6 ^ 0xFF);
    v21 = (v13 * v6 + 128 + ((v13 * v6 + 128) >> 8)) >> 8;
  }
  if (v6 == 255)
  {
    *(double *)&v20 = v10;
    *(double *)&v22 = v16;
  }
  else
  {
    *(double *)&v22 = v18;
  }
  v55 = v20;
  v56 = v21;
  v23 = vcge_u32((uint32x2_t)v20, (uint32x2_t)vdup_lane_s32(v20, 1)).u8[0];
  v24 = v23 & 1;
  v25 = (v23 & 1) == 0;
  if (v21 >= *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * v24)))
  {
    v27 = v21 <= *(_DWORD *)((unint64_t)&v55 | (4 * v25));
    v26 = v23 & 1;
    if (v27)
      v24 = 2;
    else
      v24 = (v23 & 1) == 0;
    if (!v27)
      v25 = 2;
  }
  else
  {
    v26 = 2;
  }
  v28 = v55.i32[v25];
  v29 = v55.i32[v26];
  v30 = __OFSUB__(v28, v29);
  v31 = v28 - v29;
  if ((v31 < 0) ^ v30 | (v31 == 0))
  {
    v55.i32[v25] = 0;
    v55.i32[v24] = 0;
  }
  else
  {
    v32 = v12.i32[0];
    if (v12.i32[0] >= (unsigned __int32)v12.i32[1])
      v33 = v12.u32[1];
    else
      v33 = v12.i32[0];
    if (v12.i32[0] <= (unsigned __int32)v12.i32[1])
      v32 = v12.u32[1];
    if (v14 <= v32)
      v34 = v32;
    else
      v34 = v14;
    if (v14 >= v33)
      v32 = v34;
    else
      v33 = v14;
    v35 = v32 - v33;
    v55.i32[v25] = v35;
    v55.i32[v24] = ((v55.i32[v24] - v55.i32[v26]) * ((v35 << 16) / v31) + 0x8000) >> 16;
  }
  v36 = (v8 * v6 + 128 + ((v8 * v6 + 128) >> 8)) >> 8;
  v55.i32[v26] = 0;
  v37 = vmul_s32(vsub_s32(v12, v55), (int32x2_t)0x970000004DLL);
  v38 = vadd_s32(vdup_lane_s32(v37, 1), v37).u32[0] + 28 * (v14 - v56);
  v39 = vadd_s32(vdup_n_s32((v38 + 128) >> 8), v55);
  v40 = v56 + ((v38 + 128) >> 8);
  if (v38 != (char)v38)
  {
    v41 = vcgt_s32(vdup_lane_s32(v55, 1), v55).u8[0];
    v42 = (v41 & 1) != 0 ? v39.i32[0] : v39.i32[1];
    v43 = (v41 & 1) != 0 ? v39.i32[1] : v39.i32[0];
    v44 = v40 <= v43 ? v43 : v56 + ((v38 + 128) >> 8);
    if (v40 >= v42)
      v43 = v44;
    else
      v42 = v56 + ((v38 + 128) >> 8);
    if (v43 > v36 || v42 < 0)
    {
      v45 = (77 * v39.i32[0] + 151 * v39.i32[1] + 28 * v40 + 128) >> 8;
      if (v38 > -129)
      {
        v46 = v43 - v45;
        if (v43 == v45)
          goto LABEL_58;
        v47 = v36 - v45;
      }
      else
      {
        v46 = v45 - v42;
        if (v45 == v42)
          goto LABEL_58;
        v47 = (77 * v39.i32[0] + 151 * v39.i32[1] + 28 * v40 + 128) >> 8;
      }
      v48 = vdup_n_s32(v45);
      v49 = (v47 << 16) / v46;
      v40 = v45 + ((int)(v49 * (v40 - v45) + 0x8000) >> 16);
      v39 = vsra_n_s32(v48, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v49), vsub_s32(v39, v48)), 0x10uLL);
    }
  }
LABEL_58:
  v50 = v15 + 128;
  if (v15 >> 7 >= 0x1FD)
    v50 = 65152;
  v51 = (int8x8_t)vdup_n_s32(0xFE80u);
  v52 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v51, (uint32x2_t)v22), (int8x8_t)vadd_s32(v22, (int32x2_t)0x8000000080), v51);
  v53 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v39, vsra_n_u32(v52, v52, 8uLL), 8uLL), (uint32x2_t)0x200000007), (int8x8_t)0x3E000007C00);
  return ((v8 + v6 - v36) << 24) & 0xF8000000 | ((v8 + v6 - v36) >> 5 << 24) | ((v40 + ((unsigned __int16)(v50 + (v50 >> 8)) >> 8)) >> 3) | v53.i32[0] | v53.i32[1];
}

uint64_t PDAsaturationPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  unsigned int v5;
  uint32x2_t v6;
  unsigned int v7;
  int32x2_t v8;
  double v9;
  int32x2_t v10;
  int32x2_t v11;
  int v12;
  signed int v13;
  unsigned int v14;
  int32x2_t v15;
  uint32x2_t v16;
  double v17;
  double v18;
  uint32x2_t v19;
  double v20;
  unsigned int v21;
  int32x2_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int32 v27;
  __int32 v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int32 v34;
  signed int v35;
  int32x2_t v36;
  signed __int32 v37;
  int32x2_t v38;
  int32x2_t v39;
  signed int v40;
  unsigned __int8 v41;
  __int32 v42;
  signed int v43;
  signed int v44;
  unsigned int v45;
  signed __int32 v46;
  int v47;
  int32x2_t v48;
  unsigned int v49;
  unsigned int v50;
  int8x8_t v51;
  uint32x2_t v52;
  int8x8_t v53;
  int32x2_t v55;
  signed int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  v5 = a2 & 0xF8 | (a2 >> 5);
  v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  v7 = a4 & 0xF8 | (a4 >> 5);
  v8 = vdup_n_s32(v7);
  v9 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v8));
  v10 = vdup_n_s32(v5);
  v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (uint32x2_t)v10);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v7)
    v12 = a4 & 0xF8 | (a4 >> 5);
  else
    v12 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v5)
    v13 = a2 & 0xF8 | (a2 >> 5);
  else
    v13 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  if (v7 == 255)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v15 = vmul_s32(vdup_n_s32(v7 ^ 0xFF), v11);
    v16 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v8, v11);
    v11 = (int32x2_t)vshr_n_u32(vsra_n_u32(v16, v16, 8uLL), 8uLL);
    v14 = (v7 ^ 0xFF) * v13;
    v13 = (v7 * v13 + 128 + ((v7 * v13 + 128) >> 8)) >> 8;
  }
  v17 = COERCE_DOUBLE(vrev64_s32(v15));
  v18 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v17, *(int32x2_t *)&v9, vdup_n_s32(v5 ^ 0xFF)));
  v19 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v9, v10);
  v20 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v19, v19, 8uLL), 8uLL));
  if (v5 == 255)
  {
    v21 = v12;
  }
  else
  {
    v14 += v12 * (v5 ^ 0xFF);
    v21 = (v12 * v5 + 128 + ((v12 * v5 + 128) >> 8)) >> 8;
  }
  if (v5 == 255)
  {
    v20 = v9;
    *(double *)&v22 = v17;
  }
  else
  {
    *(double *)&v22 = v18;
  }
  v55 = v11;
  v56 = v13;
  v23 = vcge_u32((uint32x2_t)v11, (uint32x2_t)vdup_lane_s32(v11, 1)).u8[0];
  v24 = v23 & 1;
  v25 = (v23 & 1) == 0;
  if (v13 >= *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * v24)))
  {
    v26 = v23 & 1;
    if (v13 <= *(_DWORD *)((unint64_t)&v55 | (4 * v25)))
      v24 = 2;
    else
      v24 = (v23 & 1) == 0;
    if (v13 > *(_DWORD *)((unint64_t)&v55 | (4 * v25)))
      v25 = 2;
  }
  else
  {
    v26 = 2;
  }
  v27 = v55.i32[v25];
  v28 = v55.i32[v26];
  v29 = __OFSUB__(v27, v28);
  v30 = v27 - v28;
  if ((v30 < 0) ^ v29 | (v30 == 0))
  {
    v55.i32[v25] = 0;
    v55.i32[v24] = 0;
  }
  else
  {
    v31 = LODWORD(v20);
    if (HIDWORD(v20) >= LODWORD(v20))
      v32 = LODWORD(v20);
    else
      v32 = HIDWORD(v20);
    if (HIDWORD(v20) > LODWORD(v20))
      v31 = HIDWORD(v20);
    if (v21 <= v31)
      v33 = v31;
    else
      v33 = v21;
    if (v21 >= v32)
    {
      v21 = v32;
      v31 = v33;
    }
    v34 = v31 - v21;
    v55.i32[v25] = v34;
    v55.i32[v24] = ((v55.i32[v24] - v55.i32[v26]) * ((v34 << 16) / v30) + 0x8000) >> 16;
  }
  v35 = (v7 * v5 + 128 + ((v7 * v5 + 128) >> 8)) >> 8;
  v55.i32[v26] = 0;
  v36 = vmul_s32(vsub_s32(v11, v55), (int32x2_t)0x970000004DLL);
  v37 = vadd_s32(vdup_lane_s32(v36, 1), v36).u32[0] + 28 * (v13 - v56);
  v38 = vadd_s32(vdup_n_s32((v37 + 128) >> 8), v55);
  v39 = vrev64_s32(v38);
  v40 = v56 + ((v37 + 128) >> 8);
  if (v37 != (char)v37)
  {
    v41 = vcgt_s32(vdup_lane_s32(v55, 1), v55).u8[0];
    v42 = (v41 & 1) != 0 ? v38.i32[0] : v38.i32[1];
    v43 = (v41 & 1) != 0 ? v38.i32[1] : v38.i32[0];
    v44 = v40 <= v43 ? v43 : v56 + ((v37 + 128) >> 8);
    if (v40 >= v42)
      v43 = v44;
    else
      v42 = v56 + ((v37 + 128) >> 8);
    if (v43 > v35 || v42 < 0)
    {
      v45 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v40 + 128) >> 8;
      if (v37 > -129)
      {
        v46 = v43 - v45;
        if (v43 == v45)
          goto LABEL_57;
        v47 = v35 - v45;
      }
      else
      {
        v46 = v45 - v42;
        if (v45 == v42)
          goto LABEL_57;
        v47 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v40 + 128) >> 8;
      }
      v48 = vdup_n_s32(v45);
      v49 = (v47 << 16) / v46;
      v40 = v45 + ((int)(v49 * (v40 - v45) + 0x8000) >> 16);
      v39 = vsra_n_s32(v48, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v49), vsub_s32(v39, v48)), 0x10uLL);
    }
  }
LABEL_57:
  v50 = v14 + 128;
  if (v14 >> 7 >= 0x1FD)
    v50 = 65152;
  v51 = (int8x8_t)vdup_n_s32(0xFE80u);
  v52 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v51, (uint32x2_t)v22), (int8x8_t)vadd_s32(v22, (int32x2_t)0x8000000080), v51);
  v53 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v39, vsra_n_u32(v52, v52, 8uLL), 8uLL), (uint32x2_t)0x700000002), (int8x8_t)0x7C00000003E0);
  return ((v7 + v5 - v35) << 24) & 0xF8000000 | ((v7 + v5 - v35) >> 5 << 24) | ((v40 + ((unsigned __int16)(v50 + (v50 >> 8)) >> 8)) >> 3) | v53.i32[0] | v53.i32[1];
}

uint64_t PDAluminosityPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint32x2_t v5;
  uint32x2_t v6;
  uint32x2_t v7;
  unsigned int v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int32x2_t v15;
  uint32x2_t v16;
  int32x2_t v17;
  uint32x2_t v18;
  int32x2_t v19;
  signed int v20;
  int v21;
  int32x2_t v22;
  signed int v23;
  unsigned __int8 v24;
  __int32 v25;
  signed int v26;
  signed int v27;
  unsigned int v28;
  signed __int32 v29;
  int v30;
  int32x2_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int8x8_t v35;
  uint32x2_t v36;
  int8x8_t v37;

  v4 = a2 & 0xF8 | (a2 >> 5);
  v5 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  v6 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v6, (uint32x2_t)0xFFFFFFF4FFFFFFF9));
  v8 = a4 & 0xF8 | (a4 >> 5);
  v9 = vdup_n_s32(v8);
  v10 = vdup_n_s32(v4);
  v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v5, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  if (((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) >= v8)
    v12 = a4 & 0xF8 | (a4 >> 5);
  else
    v12 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if (((a1 >> 2) & 7 | (8 * (a1 & 0x1F))) >= v4)
    v13 = a2 & 0xF8 | (a2 >> 5);
  else
    v13 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  if (v8 == 255)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v15 = vmul_s32(vdup_n_s32(v8 ^ 0xFF), v11);
    v16 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v9, v11);
    v11 = (int32x2_t)vshr_n_u32(vsra_n_u32(v16, v16, 8uLL), 8uLL);
    v14 = (v8 ^ 0xFF) * v13;
    v13 = (v8 * v13 + 128 + ((v8 * v13 + 128) >> 8)) >> 8;
  }
  v17 = (int32x2_t)vmin_u32(v7, (uint32x2_t)v9);
  if (v4 != 255)
  {
    v15 = vmla_s32(v15, v17, vdup_n_s32(v4 ^ 0xFF));
    v18 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v17, v10);
    v17 = (int32x2_t)vshr_n_u32(vsra_n_u32(v18, v18, 8uLL), 8uLL);
    v14 += v12 * (v4 ^ 0xFF);
    v12 = (v12 * v4 + 128 + ((v12 * v4 + 128) >> 8)) >> 8;
  }
  v19 = vmul_s32(vsub_s32(v17, v11), (int32x2_t)0x4D00000097);
  v20 = (v8 * v4 + 128 + ((v8 * v4 + 128) >> 8)) >> 8;
  v21 = v19.i32[0] + 28 * (v12 - v13) + v19.i32[1];
  v22 = vadd_s32(vdup_n_s32((v21 + 128) >> 8), v11);
  v23 = v13 + ((v21 + 128) >> 8);
  if (v21 != (char)v21)
  {
    v24 = vcgt_u32((uint32x2_t)v11, (uint32x2_t)vdup_lane_s32(v11, 1)).u8[0];
    v25 = (v24 & 1) != 0 ? v22.i32[1] : v22.i32[0];
    v26 = (v24 & 1) != 0 ? v22.i32[0] : v22.i32[1];
    v27 = v23 <= v26 ? v26 : v23;
    if (v23 >= v25)
      v26 = v27;
    else
      v25 = v23;
    if (v26 > v20 || v25 < 0)
    {
      v28 = (77 * v22.i32[1] + 151 * v22.i32[0] + 28 * v23 + 128) >> 8;
      if (v21 > -129)
      {
        v29 = v26 - v28;
        if (v26 == v28)
          goto LABEL_33;
        v30 = v20 - v28;
      }
      else
      {
        v29 = v28 - v25;
        if (v28 == v25)
          goto LABEL_33;
        v30 = (77 * v22.i32[1] + 151 * v22.i32[0] + 28 * v23 + 128) >> 8;
      }
      v31 = vdup_n_s32(v28);
      v32 = (v30 << 16) / v29;
      v23 = v28 + ((int)(v32 * (v23 - v28) + 0x8000) >> 16);
      v22 = vsra_n_s32(v31, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v32), vsub_s32(v22, v31)), 0x10uLL);
    }
  }
LABEL_33:
  v33 = v8 + v4 - v20;
  v34 = v14 + 128;
  if (v14 >> 7 >= 0x1FD)
    v34 = 65152;
  v35 = (int8x8_t)vdup_n_s32(0xFE80u);
  v36 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v35, (uint32x2_t)v15), (int8x8_t)vadd_s32(v15, (int32x2_t)0x8000000080), v35);
  v37 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32((uint32x2_t)v22, vsra_n_u32(v36, v36, 8uLL), 8uLL), (uint32x2_t)0x700000002), (int8x8_t)0x7C00000003E0);
  return (v33 << 24) & 0xF8000000 | (v33 >> 5 << 24) | ((v23
                                                                                         + ((unsigned __int16)(v34 + (v34 >> 8)) >> 8)) >> 3) | v37.i32[0] | v37.i32[1];
}

uint64_t rgb555_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int32x2_t v18;
  int32x4_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  char v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int v78;
  unint64_t v79;
  unsigned __int8 *v80;
  int32x2_t v81;
  unsigned __int8 *v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  uint32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v135;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = (_WORD *)*((_QWORD *)a2 + 2);
  v8 = (char *)*((_QWORD *)a2 + 4);
  if (v8)
    v126 = *((_QWORD *)a2 + 5) - a5;
  else
    v126 = 0;
  v125 = *a2;
  v124 = *((_QWORD *)a2 + 3) - a5;
  v135 = v8 != 0;
  v10 = *((_QWORD *)a2 + 19);
  v9 = *((_QWORD *)a2 + 20);
  v11 = *((_QWORD *)a2 + 11);
  v121 = *((_QWORD *)a2 + 13);
  v12 = *((_QWORD *)a2 + 9) + v121 * a4;
  v117 = *((_QWORD *)a2 + 6);
  v128 = *((_QWORD *)a2 + 7);
  v13 = *(unsigned __int8 **)(a1 + 32);
  v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  result = *(_QWORD *)(a1 + 168);
  v118 = a5;
  v122 = v11;
  v123 = v10;
  v120 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176))
  {
    v132 = 0;
    v16 = 0;
    v116 = *((_QWORD *)a2 + 15);
    v115 = *((_QWORD *)a2 + 17);
    v114 = ~(-1 << v11);
    v112 = -v10;
    v113 = v11 - 4;
    v17 = v14 - 4;
    v18 = vdup_n_s32(v6);
    v111 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x7000000F8000000;
    while ((((v115 - v12) | (v12 - v116)) & 0x8000000000000000) == 0)
    {
      v20 = ((v12 & (unint64_t)v114) >> v113) & 0xF;
      v21 = weights_19497[v20];
      v22 = (unint64_t)(v20 - 7) >= 9;
      v23 = v112;
      if (!v22)
        v23 = v10;
      v133 = v23;
      v24 = v21 & 0xF;
      if (result)
        goto LABEL_10;
LABEL_13:
      v27 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
      v129 = a6;
      v127 = v12;
      if (v125 != 1)
      {
        if (a5 < 1)
          goto LABEL_112;
        v53 = (uint64_t *)v111;
        v54 = v118;
        while (2)
        {
          v55 = *(v53 - 1);
          v56 = *v53;
          v57 = v27 + v55;
          if ((unint64_t)v17 >= v27 + v55)
            v58 = (unsigned __int8 *)(v27 + v55);
          else
            v58 = v17;
          if (v58 < v13)
            v58 = v13;
          v59 = *v58;
          v60 = v56 & 0xF;
          if ((v56 & 0xF) != 0)
          {
            v61 = (unsigned __int8 *)(v57 + (v56 >> 4));
            if (v17 < v61)
              v61 = v17;
            if (v61 < v13)
              v61 = v13;
            v62 = *v61;
            if (v24)
            {
              v63 = (unsigned __int8 *)(v57 + v133);
              if (v17 >= v63)
                v64 = v63;
              else
                v64 = v17;
              if (v64 < v13)
                v64 = v13;
              v65 = *v64;
              v66 = &v63[v56 >> 4];
              if (v17 < v66)
                v66 = v17;
              if (v66 < v13)
                v66 = v13;
              v67 = BLEND8_19499[v24];
              v59 = v59 - ((v67 & v59) >> v24) + ((v67 & v65) >> v24);
              v62 = v62 - ((v67 & v62) >> v24) + ((v67 & *v66) >> v24);
            }
            v68 = BLEND8_19499[*v53 & 0xF];
            v59 -= (v68 & v59) >> v60;
            v69 = (v68 & v62) >> v60;
            goto LABEL_89;
          }
          if (v24)
          {
            v70 = (unsigned __int8 *)(v57 + v133);
            if ((unint64_t)v17 < v57 + v133)
              v70 = v17;
            if (v70 < v13)
              v70 = v13;
            v71 = BLEND8_19499[v24];
            v59 -= (v71 & v59) >> v24;
            v69 = (v71 & *v70) >> v24;
LABEL_89:
            LOBYTE(v59) = v59 + v69;
          }
          if (v16)
          {
            v72 = *v16;
            if ((unint64_t)(v16 + 1) < v132)
              ++v16;
            else
              v16 -= 15;
            v73 = (16843008 * v59) | 0xFF;
            if (v6 == 255)
            {
              v74 = DITHERRGBA32(v73, v72);
              if (v8)
                goto LABEL_96;
            }
            else
            {
              v74 = DITHERRGBA32M(v73, v72, v6);
              if (v8)
              {
LABEL_96:
                if (HIBYTE(v74) < 0xF8u)
                {
                  if (HIBYTE(v74) >= 8u)
                  {
                    v78 = PDAplusDAM((unsigned __int16)v74, SHIBYTE(v74), (unsigned __int16)*v7, *v8, HIBYTE(v74) ^ 0xFF);
                    *v7 = v78;
                    *v8 = HIBYTE(v78);
                  }
                }
                else
                {
                  *v7 = v74;
                  *v8 = HIBYTE(v74);
                }
                goto LABEL_108;
              }
            }
          }
          else if (v6 == 255)
          {
            v16 = 0;
            v74 = (v59 >> 3) & 0xFFFF801F | (32 * (v59 >> 3)) & 0x83FF | (v59 >> 3 << 10) | 0xFF000000;
            if (v8)
              goto LABEL_96;
          }
          else
          {
            v16 = 0;
            *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v59 << 16), (int8x8_t)(v59 | 0xFF00000000)), v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v75 = (uint32x4_t)vzip1q_s32(v19, v19);
            v76.i64[0] = vshlq_u32(v75, (uint32x4_t)xmmword_185004B70).u64[0];
            v76.i64[1] = vshlq_u32(v75, (uint32x4_t)xmmword_185004B80).i64[1];
            v77 = vandq_s8(v76, (int8x16_t)xmmword_185004B90);
            *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
            v74 = v77.i32[0] | v77.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            if (v8)
              goto LABEL_96;
          }
          if (HIBYTE(v74) < 0xF8u)
          {
            if (HIBYTE(v74) >= 8u)
              *v7 = PDplusDM(v74, (unsigned __int16)*v7, ~v74 >> 24);
          }
          else
          {
            *v7 = v74;
          }
LABEL_108:
          v53 += 2;
          ++v7;
          v8 += v135;
          if (!--v54)
            goto LABEL_112;
          continue;
        }
      }
      if (a5 >= 1)
      {
        v28 = (uint64_t *)v111;
        v29 = v118;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned __int8 *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v13)
            v33 = v13;
          v34 = *v33;
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if (v24)
          {
            v45 = (unsigned __int8 *)(v32 + v133);
            if ((unint64_t)v17 < v32 + v133)
              v45 = v17;
            if (v45 < v13)
              v45 = v13;
            v46 = BLEND8_19499[v24];
            v34 -= (v46 & v34) >> v24;
            v44 = (v46 & *v45) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          if (v16)
          {
            v47 = *v16;
            if ((unint64_t)(v16 + 1) < v132)
              ++v16;
            else
              v16 -= 15;
            v48 = (16843008 * v34) | 0xFF;
            if (v6 == 255)
              v49 = DITHERRGBA32(v48, v47);
            else
              v49 = DITHERRGBA32M(v48, v47, v6);
          }
          else
          {
            v16 = 0;
            if (v6 == 255)
            {
              v49 = (v34 >> 3) & 0xFFFF801F | (32 * (v34 >> 3)) & 0x83FF | (v34 >> 3 << 10) | 0xFF000000;
            }
            else
            {
              *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v34 << 16), (int8x8_t)(v34 | 0xFF00000000)), v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v50 = (uint32x4_t)vzip1q_s32(v19, v19);
              v51.i64[0] = vshlq_u32(v50, (uint32x4_t)xmmword_185004B70).u64[0];
              v51.i64[1] = vshlq_u32(v50, (uint32x4_t)xmmword_185004B80).i64[1];
              v52 = vandq_s8(v51, (int8x16_t)xmmword_185004B90);
              *(int8x8_t *)v52.i8 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
              v49 = v52.i32[0] | v52.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            }
          }
          *v7 = v49;
          if (v8)
            *v8 = HIBYTE(v49);
          v28 += 2;
          ++v7;
          v8 += v135;
          if (!--v29)
            goto LABEL_112;
        }
        v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v13)
          v36 = v13;
        v37 = *v36;
        if (v24)
        {
          v38 = (unsigned __int8 *)(v32 + v133);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v13)
            v39 = v13;
          v40 = *v39;
          v41 = &v38[v31 >> 4];
          if (v17 < v41)
            v41 = v17;
          if (v41 < v13)
            v41 = v13;
          v42 = BLEND8_19499[v24];
          v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          v37 = v37 - ((v42 & v37) >> v24) + ((v42 & *v41) >> v24);
        }
        v43 = BLEND8_19499[*v28 & 0xF];
        v34 -= (v43 & v34) >> v35;
        v44 = (v43 & v37) >> v35;
LABEL_44:
        LOBYTE(v34) = v34 + v44;
        goto LABEL_45;
      }
LABEL_112:
      v10 = v123;
      v7 += v124;
      v8 += v126;
      LOBYTE(v11) = v122;
      v12 = v127 + v121;
      a6 = v129 - 1;
      result = v120;
      if (v129 == 1)
        return result;
    }
    v24 = 0;
    v133 = 0;
    if (!result)
      goto LABEL_13;
LABEL_10:
    v25 = result + 16 * v128;
    v132 = v25 + 16;
    v16 = (unsigned __int8 *)(v25 + v117);
    v26 = (v128 + 1) & 0xF;
    if (v128 + 1 <= 0)
      v26 = -(-(v128 + 1) & 0xF);
    v128 = v26;
    goto LABEL_13;
  }
  v79 = 0;
  v80 = 0;
  v81 = vdup_n_s32(v6);
  v82 = v14 - 4;
  v131 = (uint64_t *)(v9 + 16 * a3);
  v83.i64[1] = 0x7000000F8000000;
  do
  {
    if (result)
    {
      v84 = result + 16 * v128;
      v79 = v84 + 16;
      v80 = (unsigned __int8 *)(v84 + v117);
      v85 = (v128 + 1) & 0xF;
      if (v128 + 1 <= 0)
        v85 = -(-(v128 + 1) & 0xF);
      v128 = v85;
    }
    v86 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
    v130 = a6;
    if (v125 != 1)
    {
      v87 = v12;
      v99 = v131;
      v100 = v118;
      if (a5 < 1)
        goto LABEL_169;
      while (1)
      {
        v101 = *v99;
        v99 += 2;
        v102 = (unsigned __int8 *)(v86 + v101);
        if ((unint64_t)v82 < v86 + v101)
          v102 = v82;
        if ((unint64_t)v102 < *(_QWORD *)(a1 + 32))
          v102 = *(unsigned __int8 **)(a1 + 32);
        v103 = *v102;
        if (v80)
        {
          v104 = *v80;
          if ((unint64_t)(v80 + 1) < v79)
            ++v80;
          else
            v80 -= 15;
          v105 = (16843008 * v103) | 0xFF;
          if (v6 == 255)
          {
            v106 = DITHERRGBA32(v105, v104);
            if (v8)
              goto LABEL_153;
          }
          else
          {
            v106 = DITHERRGBA32M(v105, v104, v6);
            if (v8)
              goto LABEL_153;
          }
        }
        else if (v6 == 255)
        {
          v80 = 0;
          v106 = (v103 >> 3) & 0xFFFF801F | (32 * (v103 >> 3)) & 0x83FF | (v103 >> 3 << 10) | 0xFF000000;
          if (v8)
          {
LABEL_153:
            if (HIBYTE(v106) < 0xF8u)
            {
              if (HIBYTE(v106) >= 8u)
              {
                v110 = PDAplusDAM((unsigned __int16)v106, SHIBYTE(v106), (unsigned __int16)*v7, *v8, HIBYTE(v106) ^ 0xFF);
                *v7 = v110;
                *v8 = HIBYTE(v110);
              }
            }
            else
            {
              *v7 = v106;
              *v8 = HIBYTE(v106);
            }
            goto LABEL_163;
          }
        }
        else
        {
          v80 = 0;
          *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v103 << 16), (int8x8_t)(v103 | 0xFF00000000)), v81);
          *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v107 = (uint32x4_t)vzip1q_s32(v83, v83);
          v108.i64[0] = vshlq_u32(v107, (uint32x4_t)xmmword_185004B70).u64[0];
          v108.i64[1] = vshlq_u32(v107, (uint32x4_t)xmmword_185004B80).i64[1];
          v109 = vandq_s8(v108, (int8x16_t)xmmword_185004B90);
          *(int8x8_t *)v109.i8 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
          v106 = v109.i32[0] | v109.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          if (v8)
            goto LABEL_153;
        }
        if (HIBYTE(v106) >= 0xF8u)
          goto LABEL_160;
        if (HIBYTE(v106) >= 8u)
          break;
LABEL_163:
        ++v7;
        v8 += v135;
        if (!--v100)
          goto LABEL_169;
      }
      LOWORD(v106) = PDplusDM(v106, (unsigned __int16)*v7, ~v106 >> 24);
LABEL_160:
      *v7 = v106;
      goto LABEL_163;
    }
    v87 = v12;
    if (a5 >= 1)
    {
      v88 = v131;
      v89 = v118;
      do
      {
        v90 = *v88;
        v88 += 2;
        v91 = (unsigned __int8 *)(v86 + v90);
        if ((unint64_t)v82 < v86 + v90)
          v91 = v82;
        if ((unint64_t)v91 < *(_QWORD *)(a1 + 32))
          v91 = *(unsigned __int8 **)(a1 + 32);
        v92 = *v91;
        if (v80)
        {
          v93 = *v80;
          if ((unint64_t)(v80 + 1) < v79)
            ++v80;
          else
            v80 -= 15;
          v94 = (16843008 * v92) | 0xFF;
          if (v6 == 255)
            v95 = DITHERRGBA32(v94, v93);
          else
            v95 = DITHERRGBA32M(v94, v93, v6);
        }
        else
        {
          v80 = 0;
          if (v6 == 255)
          {
            v95 = (v92 >> 3) & 0xFFFF801F | (32 * (v92 >> 3)) & 0x83FF | (v92 >> 3 << 10) | 0xFF000000;
          }
          else
          {
            *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v92 << 16), (int8x8_t)(v92 | 0xFF00000000)), v81);
            *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v96 = (uint32x4_t)vzip1q_s32(v83, v83);
            v97.i64[0] = vshlq_u32(v96, (uint32x4_t)xmmword_185004B70).u64[0];
            v97.i64[1] = vshlq_u32(v96, (uint32x4_t)xmmword_185004B80).i64[1];
            v98 = vandq_s8(v97, (int8x16_t)xmmword_185004B90);
            *(int8x8_t *)v98.i8 = vorr_s8(*(int8x8_t *)v98.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
            v95 = v98.i32[0] | v98.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          }
        }
        *v7 = v95;
        if (v8)
          *v8 = HIBYTE(v95);
        ++v7;
        v8 += v135;
        --v89;
      }
      while (v89);
    }
LABEL_169:
    v10 = v123;
    v7 += v124;
    v8 += v126;
    LOBYTE(v11) = v122;
    v12 = v87 + v121;
    a6 = v130 - 1;
    result = v120;
  }
  while (v130 != 1);
  return result;
}

void rgb555_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(_QWORD, _QWORD))
{
  __n128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  int v49;
  int v50;
  int *v51;
  int v52;
  void *v53;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD);
  char *v69;
  uint64_t *v70;
  _DWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  int v83;
  _QWORD v84[3];

  v84[1] = *MEMORY[0x1E0C80C00];
  v8.n128_u32[1] = 0;
  v8.n128_u64[1] = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v81 = 0u;
  v80 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v75 = 0u;
  v8.n128_f32[0] = (float)(*(float *)(a2 + 184) * 255.0) + 0.5;
  v71[0] = a3;
  v71[1] = a4;
  LOBYTE(v72) = (int)v8.n128_f32[0];
  v9 = (unint64_t)*(int *)(a1 + 28) >> 1;
  *(_QWORD *)&v73 = v9;
  if (*(_QWORD *)(a1 + 48))
    v10 = *(int *)(a1 + 32);
  else
    v10 = 0;
  *(_QWORD *)&v75 = 0;
  v74 = v10;
  v11 = *(_QWORD *)(a2 + 120);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = HIBYTE(v12);
  v14 = BYTE2(v12);
  if (v11)
  {
    v15 = *(int *)(a2 + 24);
    v16 = (uint64_t *)(a2 + 104);
    v17 = (uint64_t *)(a2 + 72);
    v18 = (uint64_t *)(a2 + 88);
    v19 = v13;
  }
  else
  {
    v15 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v16 = (uint64_t *)(a2 + 96);
    v17 = (uint64_t *)(a2 + 64);
    v18 = (uint64_t *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 112);
    v19 = v14;
  }
  v20 = *v18;
  v21 = *v17;
  v22 = *v16;
  v23 = v19;
  *((_QWORD *)&v76 + 1) = v19;
  *((_QWORD *)&v75 + 1) = v22;
  *((_QWORD *)&v80 + 1) = v15;
  *((_QWORD *)&v79 + 1) = v20;
  *((_QWORD *)&v78 + 1) = v21;
  *((_QWORD *)&v77 + 1) = v11;
  v24 = *(_QWORD *)(a2 + 128);
  if (v24)
  {
    v25 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v26 = (uint64_t *)(a2 + 96);
    v27 = (uint64_t *)(a2 + 64);
    v28 = (uint64_t *)(a2 + 80);
    v13 = v14;
  }
  else
  {
    v25 = *(int *)(a2 + 24);
    v26 = (uint64_t *)(a2 + 104);
    v27 = (uint64_t *)(a2 + 72);
    v28 = (uint64_t *)(a2 + 88);
    v24 = *(_QWORD *)(a2 + 136);
  }
  v70 = &v66;
  v29 = *v28;
  v30 = *v27;
  v31 = *v26;
  *(_QWORD *)&v77 = v13;
  *(_QWORD *)&v76 = v31;
  *(_QWORD *)&v81 = v25;
  *(_QWORD *)&v80 = v29;
  *(_QWORD *)&v79 = v30;
  *(_QWORD *)&v78 = v24;
  v32 = *(int *)(a1 + 4);
  MEMORY[0x1E0C80A78](a1, v8);
  v69 = (char *)&v66 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL)
    v37 = (char *)&v66 - v34 - 15;
  else
    v37 = 0;
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    v67 = v33;
    v68 = a5;
    v38 = v36;
    v37 = (char *)malloc_type_malloc(16 * v32, 0x1B1F656EuLL);
    v33 = v67;
    v36 = v38;
    a5 = v68;
  }
  *((_QWORD *)&v81 + 1) = v37;
  if (v37)
  {
    v39 = v32;
    if (*(_QWORD *)(a2 + 176))
    {
      if ((int)v32 >= 1)
      {
        v40 = (uint64_t *)(v37 + 8);
        v41 = -v33;
        v42 = v36 - v22;
        do
        {
          if (((v41 + v22) | v42) < 0)
          {
            v45 = 0;
            v46 = 0;
          }
          else
          {
            v43 = ((v22 & (unint64_t)~(-1 << v23)) >> (v23 - 4)) & 0xF;
            v44 = weights_19497[v43];
            if (v43 - 7 >= 9)
              v45 = -(uint64_t)v15;
            else
              v45 = v15;
            v46 = v44 & 0xF;
          }
          v33 = v15 * (v22 >> v23);
          *(v40 - 1) = v33;
          *v40 = v46 | (16 * v45);
          v40 += 2;
          v22 += v11;
          v42 -= v11;
          --v39;
        }
        while (v39);
      }
    }
    else if ((int)v32 >= 1)
    {
      v47 = v37 + 8;
      do
      {
        *(v47 - 1) = v15 * (v22 >> v23);
        *v47 = 0;
        v47 += 2;
        v22 += v11;
        --v39;
      }
      while (v39);
    }
    v48 = v37;
    v49 = *(_DWORD *)(a1 + 4);
    v50 = *(_DWORD *)(a1 + 8);
    v82 = v50;
    v83 = v49;
    v51 = *(int **)(a1 + 136);
    if (v51)
    {
      v52 = *(_DWORD *)(a1 + 104);
      LODWORD(v84[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v84[0]) = v52;
      shape_enum_clip_alloc((uint64_t)v37, v33, v51, 1, 1, 1, v52, v84[0], v49, v50);
      v54 = v53;
      if (v53)
        goto LABEL_42;
    }
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v84[0] = 0;
    while (1)
    {
      v57 = *(int *)(a1 + 16) + (uint64_t)v56;
      v58 = *(_QWORD *)(a1 + 48);
      v59 = *(int *)(a1 + 12) + (uint64_t)v55;
      v60 = v58 + v10 * v57 + v59;
      if (!v58)
        v60 = 0;
      *((_QWORD *)&v72 + 1) = *(_QWORD *)(a1 + 40) + 2 * v9 * v57 + 2 * v59;
      *((_QWORD *)&v73 + 1) = v60;
      if (*(_QWORD *)(a2 + 168))
      {
        v61 = -(int)v59 < 0;
        v62 = -(int)v59 & 0xF;
        v63 = v59 & 0xF;
        if (!v61)
          v63 = -v62;
        v61 = -(int)v57 < 0;
        v64 = -(int)v57 & 0xF;
        v65 = v57 & 0xF;
        if (!v61)
          v65 = -v64;
        *((_QWORD *)&v74 + 1) = v63;
        *(_QWORD *)&v75 = v65;
      }
      a5(a2, v71);
      if (!v54)
        break;
LABEL_42:
      if (!shape_enum_clip_next((uint64_t)v54, (int *)v84 + 1, v84, &v83, &v82))
      {
        free(v54);
        break;
      }
      v56 = v84[0];
      v55 = HIDWORD(v84[0]);
      v9 = v73;
      v10 = v74;
    }
    if (v48 != v69)
      free(v48);
  }
}

uint64_t rgb555_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int32x2_t v18;
  int32x4_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint32x4_t v51;
  int v52;
  uint32x4_t v53;
  int8x16_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint32x4_t v78;
  int v79;
  uint32x4_t v80;
  int8x16_t v81;
  int v82;
  unint64_t v83;
  unsigned __int8 *v84;
  int32x2_t v85;
  unsigned __int8 *v86;
  int32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint32x4_t v103;
  int v104;
  uint32x4_t v105;
  int8x16_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  uint32x4_t v118;
  int v119;
  uint32x4_t v120;
  int8x16_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v147;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = (_WORD *)*((_QWORD *)a2 + 2);
  v8 = (char *)*((_QWORD *)a2 + 4);
  if (v8)
    v138 = *((_QWORD *)a2 + 5) - a5;
  else
    v138 = 0;
  v137 = *a2;
  v136 = *((_QWORD *)a2 + 3) - a5;
  v147 = v8 != 0;
  v10 = *((_QWORD *)a2 + 19);
  v9 = *((_QWORD *)a2 + 20);
  v11 = *((_QWORD *)a2 + 11);
  v133 = *((_QWORD *)a2 + 13);
  v12 = *((_QWORD *)a2 + 9) + v133 * a4;
  v129 = *((_QWORD *)a2 + 6);
  v140 = *((_QWORD *)a2 + 7);
  v13 = *(unsigned __int8 **)(a1 + 32);
  v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  result = *(_QWORD *)(a1 + 168);
  v130 = a5;
  v134 = v11;
  v135 = v10;
  v132 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176))
  {
    v144 = 0;
    v16 = 0;
    v128 = *((_QWORD *)a2 + 15);
    v127 = *((_QWORD *)a2 + 17);
    v126 = ~(-1 << v11);
    v124 = -v10;
    v125 = v11 - 4;
    v17 = v14 - 3;
    v18 = vdup_n_s32(v6);
    v123 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x3E007000000;
    while ((((v127 - v12) | (v12 - v128)) & 0x8000000000000000) == 0)
    {
      v20 = ((v12 & (unint64_t)v126) >> v125) & 0xF;
      v21 = weights_19497[v20];
      v22 = (unint64_t)(v20 - 7) >= 9;
      v23 = v124;
      if (!v22)
        v23 = v10;
      v145 = v23;
      v24 = v21 & 0xF;
      if (result)
        goto LABEL_10;
LABEL_13:
      v27 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
      v141 = a6;
      v139 = v12;
      if (v137 != 1)
      {
        if (a5 < 1)
          goto LABEL_111;
        v55 = (uint64_t *)v123;
        v56 = v130;
        while (2)
        {
          v57 = *(v55 - 1);
          v58 = *v55;
          v59 = v27 + v57;
          if ((unint64_t)v17 >= v27 + v57)
            v60 = (unsigned __int8 *)(v27 + v57);
          else
            v60 = v17;
          if (v60 < v13)
            v60 = v13;
          v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          v62 = v58 & 0xF;
          if ((v58 & 0xF) != 0)
          {
            v63 = (unsigned __int8 *)(v59 + (v58 >> 4));
            if (v17 < v63)
              v63 = v17;
            if (v63 < v13)
              v63 = v13;
            v64 = (*v63 << 24) | (v63[1] << 16) | (v63[2] << 8);
            if (v24)
            {
              v65 = (unsigned __int8 *)(v59 + v145);
              if (v17 >= v65)
                v66 = v65;
              else
                v66 = v17;
              if (v66 < v13)
                v66 = v13;
              v67 = (*v66 << 24) | (v66[1] << 16) | (v66[2] << 8);
              v68 = &v65[v58 >> 4];
              if (v17 < v68)
                v68 = v17;
              if (v68 < v13)
                v68 = v13;
              v69 = BLEND8_19499[v24];
              v61 = v61 - ((v69 & v61) >> v24) + ((v69 & v67) >> v24);
              v64 = v64 - ((v69 & v64) >> v24) + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & v69) >> v24);
            }
            v74 = BLEND8_19499[*v55 & 0xF];
            v72 = v61 - ((v74 & v61) >> v62);
            v73 = (v74 & v64) >> v62;
            goto LABEL_89;
          }
          if (v24)
          {
            v70 = (unsigned __int8 *)(v59 + v145);
            if ((unint64_t)v17 < v59 + v145)
              v70 = v17;
            if (v70 < v13)
              v70 = v13;
            v71 = BLEND8_19499[v24];
            v72 = v61 - ((v71 & v61) >> v24);
            v73 = (((*v70 << 24) | (v70[1] << 16) | (v70[2] << 8)) & v71) >> v24;
LABEL_89:
            v61 = v72 + v73;
          }
          v75 = v61 | 0xFF;
          if (v16)
          {
            v76 = *v16;
            if ((unint64_t)(v16 + 1) < v144)
              ++v16;
            else
              v16 -= 15;
            if (v6 == 255)
            {
              v77 = DITHERRGBA32(v75, v76);
              if (!v8)
                goto LABEL_106;
            }
            else
            {
              v77 = DITHERRGBA32M(v75, v76, v6);
              if (!v8)
                goto LABEL_106;
            }
LABEL_101:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) >= 8u)
              {
                v82 = PDAplusDAM((unsigned __int16)v77, SHIBYTE(v77), (unsigned __int16)*v7, *v8, HIBYTE(v77) ^ 0xFF);
                *v7 = v82;
                *v8 = HIBYTE(v82);
              }
            }
            else
            {
              *v7 = v77;
              *v8 = HIBYTE(v77);
            }
          }
          else
          {
            if (v6 == 255)
            {
              v16 = 0;
              v77 = (v61 >> 17) & 0x7C00 | (v61 >> 14) & 0x3E0 | ((unsigned __int16)v61 >> 11) | 0xFF000000;
              if (!v8)
                goto LABEL_106;
              goto LABEL_101;
            }
            v16 = 0;
            v19.i16[0] = BYTE1(v61);
            v19.i16[1] = v61 >> 8 >> 16;
            v19.i32[1] = v61 & 0xFF0000 | 0xFF;
            *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v78 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
            v79 = (unsigned __int16)v19.i16[0] >> 11;
            v80 = vshlq_u32(v78, (uint32x4_t)xmmword_185004BA0);
            v81 = (int8x16_t)vshlq_u32(v78, (uint32x4_t)xmmword_185004BB0);
            v81.i32[0] = v80.i32[0];
            v81.i32[3] = v80.i32[3];
            v19 = (int32x4_t)vandq_s8(v81, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
            v77 = v19.i32[0] | v79 | v19.i32[1];
            if (v8)
              goto LABEL_101;
LABEL_106:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) < 8u)
                goto LABEL_110;
              LOWORD(v77) = PDplusDM(v77, (unsigned __int16)*v7, ~v77 >> 24);
            }
            *v7 = v77;
          }
LABEL_110:
          v55 += 2;
          ++v7;
          v8 += v147;
          if (!--v56)
            goto LABEL_111;
          continue;
        }
      }
      if (a5 >= 1)
      {
        v28 = (uint64_t *)v123;
        v29 = v130;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned __int8 *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v13)
            v33 = v13;
          v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if (v24)
          {
            v43 = (unsigned __int8 *)(v32 + v145);
            if ((unint64_t)v17 < v32 + v145)
              v43 = v17;
            if (v43 < v13)
              v43 = v13;
            v44 = BLEND8_19499[v24];
            v45 = v34 - ((v44 & v34) >> v24);
            v46 = (((*v43 << 24) | (v43[1] << 16) | (v43[2] << 8)) & v44) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          v48 = v34 | 0xFF;
          if (v16)
          {
            v49 = *v16;
            if ((unint64_t)(v16 + 1) < v144)
              ++v16;
            else
              v16 -= 15;
            if (v6 == 255)
              v50 = DITHERRGBA32(v48, v49);
            else
              v50 = DITHERRGBA32M(v48, v49, v6);
          }
          else
          {
            v16 = 0;
            if (v6 == 255)
            {
              v50 = (v34 >> 17) & 0x7C00 | (v34 >> 14) & 0x3E0 | ((unsigned __int16)v34 >> 11) | 0xFF000000;
            }
            else
            {
              v19.i16[0] = BYTE1(v34);
              v19.i16[1] = v34 >> 8 >> 16;
              v19.i32[1] = v34 & 0xFF0000 | 0xFF;
              *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v51 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
              v52 = (unsigned __int16)v19.i16[0] >> 11;
              v53 = vshlq_u32(v51, (uint32x4_t)xmmword_185004BA0);
              v54 = (int8x16_t)vshlq_u32(v51, (uint32x4_t)xmmword_185004BB0);
              v54.i32[0] = v53.i32[0];
              v54.i32[3] = v53.i32[3];
              v19 = (int32x4_t)vandq_s8(v54, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
              v50 = v19.i32[0] | v52 | v19.i32[1];
            }
          }
          *v7 = v50;
          if (v8)
            *v8 = HIBYTE(v50);
          v28 += 2;
          ++v7;
          v8 += v147;
          if (!--v29)
            goto LABEL_111;
        }
        v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v13)
          v36 = v13;
        v37 = (*v36 << 24) | (v36[1] << 16) | (v36[2] << 8);
        if (v24)
        {
          v38 = (unsigned __int8 *)(v32 + v145);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v13)
            v39 = v13;
          v40 = (*v39 << 24) | (v39[1] << 16) | (v39[2] << 8);
          v41 = &v38[v31 >> 4];
          if (v17 < v41)
            v41 = v17;
          if (v41 < v13)
            v41 = v13;
          v42 = BLEND8_19499[v24];
          v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          v37 = v37 - ((v42 & v37) >> v24) + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & v42) >> v24);
        }
        v47 = BLEND8_19499[*v28 & 0xF];
        v45 = v34 - ((v47 & v34) >> v35);
        v46 = (v47 & v37) >> v35;
LABEL_44:
        v34 = v45 + v46;
        goto LABEL_45;
      }
LABEL_111:
      v10 = v135;
      v7 += v136;
      v8 += v138;
      LOBYTE(v11) = v134;
      v12 = v139 + v133;
      a6 = v141 - 1;
      result = v132;
      if (v141 == 1)
        return result;
    }
    v24 = 0;
    v145 = 0;
    if (!result)
      goto LABEL_13;
LABEL_10:
    v25 = result + 16 * v140;
    v144 = v25 + 16;
    v16 = (unsigned __int8 *)(v25 + v129);
    v26 = (v140 + 1) & 0xF;
    if (v140 + 1 <= 0)
      v26 = -(-(v140 + 1) & 0xF);
    v140 = v26;
    goto LABEL_13;
  }
  v83 = 0;
  v84 = 0;
  v85 = vdup_n_s32(v6);
  v86 = v14 - 3;
  v143 = (uint64_t *)(v9 + 16 * a3);
  v87.i64[1] = 0x3E007000000;
  do
  {
    if (result)
    {
      v88 = result + 16 * v140;
      v83 = v88 + 16;
      v84 = (unsigned __int8 *)(v88 + v129);
      v89 = (v140 + 1) & 0xF;
      if (v140 + 1 <= 0)
        v89 = -(-(v140 + 1) & 0xF);
      v140 = v89;
    }
    v90 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
    v142 = a6;
    if (v137 != 1)
    {
      v91 = v12;
      v107 = v143;
      v108 = v130;
      if (a5 < 1)
        goto LABEL_167;
      while (1)
      {
        v109 = *v107;
        v107 += 2;
        v110 = (unsigned __int8 *)(v90 + v109);
        if ((unint64_t)v86 < v90 + v109)
          v110 = v86;
        if ((unint64_t)v110 < *(_QWORD *)(a1 + 32))
          v110 = *(unsigned __int8 **)(a1 + 32);
        v111 = *v110;
        v112 = v110[1];
        v113 = v110[2];
        v114 = (v111 << 24) | (v112 << 16) | (v113 << 8);
        v115 = v114 | 0xFF;
        if (v84)
        {
          v116 = *v84;
          if ((unint64_t)(v84 + 1) < v83)
            ++v84;
          else
            v84 -= 15;
          if (v6 == 255)
          {
            v117 = DITHERRGBA32(v115, v116);
            if (v8)
              goto LABEL_157;
          }
          else
          {
            v117 = DITHERRGBA32M(v115, v116, v6);
            if (v8)
              goto LABEL_157;
          }
        }
        else if (v6 == 255)
        {
          v84 = 0;
          v117 = (4 * v112) & 0x3E0 | (v111 >> 3 << 10) | (v113 >> 3) | 0xFF000000;
          if (v8)
          {
LABEL_157:
            if (HIBYTE(v117) < 0xF8u)
            {
              if (HIBYTE(v117) >= 8u)
              {
                v122 = PDAplusDAM((unsigned __int16)v117, SHIBYTE(v117), (unsigned __int16)*v7, *v8, HIBYTE(v117) ^ 0xFF);
                *v7 = v122;
                *v8 = HIBYTE(v122);
              }
            }
            else
            {
              *v7 = v117;
              *v8 = HIBYTE(v117);
            }
            goto LABEL_166;
          }
        }
        else
        {
          v84 = 0;
          v87.i16[0] = v113;
          v87.i16[1] = v114 >> 8 >> 16;
          v87.i32[1] = (v112 << 16) & 0xFF0000 | (v113 << 8) & 0xFF0000 | 0xFF;
          *(int32x2_t *)v87.i8 = vmul_s32(*(int32x2_t *)v87.i8, v85);
          *(int32x2_t *)v87.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v87.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v87.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v118 = (uint32x4_t)vzip1q_s32(v87, vdupq_lane_s32(*(int32x2_t *)v87.i8, 1));
          v119 = (unsigned __int16)v87.i16[0] >> 11;
          v120 = vshlq_u32(v118, (uint32x4_t)xmmword_185004BA0);
          v121 = (int8x16_t)vshlq_u32(v118, (uint32x4_t)xmmword_185004BB0);
          v121.i32[0] = v120.i32[0];
          v121.i32[3] = v120.i32[3];
          v87 = (int32x4_t)vandq_s8(v121, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v87.i8 = vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
          v117 = v87.i32[0] | v119 | v87.i32[1];
          if (v8)
            goto LABEL_157;
        }
        if (HIBYTE(v117) >= 0xF8u)
          goto LABEL_165;
        if (HIBYTE(v117) >= 8u)
          break;
LABEL_166:
        ++v7;
        v8 += v147;
        if (!--v108)
          goto LABEL_167;
      }
      LOWORD(v117) = PDplusDM(v117, (unsigned __int16)*v7, ~v117 >> 24);
LABEL_165:
      *v7 = v117;
      goto LABEL_166;
    }
    v91 = v12;
    if (a5 >= 1)
    {
      v92 = v143;
      v93 = v130;
      do
      {
        v94 = *v92;
        v92 += 2;
        v95 = (unsigned __int8 *)(v90 + v94);
        if ((unint64_t)v86 < v90 + v94)
          v95 = v86;
        if ((unint64_t)v95 < *(_QWORD *)(a1 + 32))
          v95 = *(unsigned __int8 **)(a1 + 32);
        v96 = *v95;
        v97 = v95[1];
        v98 = v95[2];
        v99 = (v96 << 24) | (v97 << 16) | (v98 << 8);
        v100 = v99 | 0xFF;
        if (v84)
        {
          v101 = *v84;
          if ((unint64_t)(v84 + 1) < v83)
            ++v84;
          else
            v84 -= 15;
          if (v6 == 255)
            v102 = DITHERRGBA32(v100, v101);
          else
            v102 = DITHERRGBA32M(v100, v101, v6);
        }
        else
        {
          v84 = 0;
          if (v6 == 255)
          {
            v102 = (4 * v97) & 0x3E0 | (v96 >> 3 << 10) | (v98 >> 3) | 0xFF000000;
          }
          else
          {
            v87.i16[0] = v98;
            v87.i16[1] = v99 >> 8 >> 16;
            v87.i32[1] = (v97 << 16) & 0xFF0000 | (v98 << 8) & 0xFF0000 | 0xFF;
            *(int32x2_t *)v87.i8 = vmul_s32(*(int32x2_t *)v87.i8, v85);
            *(int32x2_t *)v87.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v87.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v87.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v103 = (uint32x4_t)vzip1q_s32(v87, vdupq_lane_s32(*(int32x2_t *)v87.i8, 1));
            v104 = (unsigned __int16)v87.i16[0] >> 11;
            v105 = vshlq_u32(v103, (uint32x4_t)xmmword_185004BA0);
            v106 = (int8x16_t)vshlq_u32(v103, (uint32x4_t)xmmword_185004BB0);
            v106.i32[0] = v105.i32[0];
            v106.i32[3] = v105.i32[3];
            v87 = (int32x4_t)vandq_s8(v106, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v87.i8 = vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            v102 = v87.i32[0] | v104 | v87.i32[1];
          }
        }
        *v7 = v102;
        if (v8)
          *v8 = HIBYTE(v102);
        ++v7;
        v8 += v147;
        --v93;
      }
      while (v93);
    }
LABEL_167:
    v10 = v135;
    v7 += v136;
    v8 += v138;
    LOBYTE(v11) = v134;
    v12 = v91 + v133;
    a6 = v142 - 1;
    result = v132;
  }
  while (v142 != 1);
  return result;
}

uint64_t rgb555_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  _WORD *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  int32x2_t v20;
  int32x4_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint32x4_t v54;
  int v55;
  uint32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint32x4_t v82;
  int v83;
  uint32x4_t v84;
  int8x16_t v85;
  int v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int *v89;
  int32x2_t v90;
  char v91;
  int32x4_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  uint32x4_t v106;
  int v107;
  uint32x4_t v108;
  int8x16_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  uint32x4_t v119;
  int v120;
  uint32x4_t v121;
  int8x16_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char v150;
  char v151;
  uint64_t v152;
  int v153;

  v6 = *((unsigned __int8 *)a2 + 8);
  if (*(_QWORD *)(a1 + 40))
    v7 = 0;
  else
    v7 = 255;
  v153 = v7;
  v8 = (_WORD *)*((_QWORD *)a2 + 2);
  v9 = (char *)*((_QWORD *)a2 + 4);
  if (v9)
    v139 = *((_QWORD *)a2 + 5) - a5;
  else
    v139 = 0;
  v10 = a2[1];
  v138 = *a2;
  v137 = *((_QWORD *)a2 + 3) - a5;
  v152 = v9 != 0;
  v12 = *((_QWORD *)a2 + 19);
  v11 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 11);
  v134 = *((_QWORD *)a2 + 13);
  result = *((_QWORD *)a2 + 9) + v134 * a4;
  v131 = *((_QWORD *)a2 + 6);
  v140 = *((_QWORD *)a2 + 7);
  v15 = *(unsigned int **)(a1 + 32);
  v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v17 = *(_QWORD *)(a1 + 168);
  v151 = v10;
  v135 = v13;
  v136 = v12;
  v133 = v17;
  if (*(_QWORD *)(a1 + 176))
  {
    v147 = 0;
    v18 = 0;
    v130 = *((_QWORD *)a2 + 15);
    v129 = *((_QWORD *)a2 + 17);
    v128 = ~(-1 << v13);
    v127 = v13 - 4;
    v126 = -v12;
    v19 = (unsigned int *)(v16 - 4);
    v150 = 32 - v10;
    v20 = vdup_n_s32(v6);
    v124 = v11 + 16 * a3 + 8;
    v125 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v129 - result) | (result - v130)) < 0)
      {
        v26 = 0;
        v148 = 0;
      }
      else
      {
        v22 = ((result & (unint64_t)v128) >> v127) & 0xF;
        v23 = weights_19497[v22];
        v24 = (unint64_t)(v22 - 7) >= 9;
        v25 = v126;
        if (!v24)
          v25 = v12;
        v148 = v25;
        v26 = v23 & 0xF;
      }
      if (v17)
      {
        v27 = v17 + 16 * v140;
        v147 = v27 + 16;
        v18 = (unsigned __int8 *)(v27 + v131);
        v28 = (v140 + 1) & 0xF;
        if (v140 + 1 <= 0)
          v28 = -(-(v140 + 1) & 0xF);
        v140 = v28;
      }
      v29 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
      v143 = a6;
      v141 = result;
      if (v138 != 1)
        break;
      if (a5 >= 1)
      {
        v31 = (uint64_t *)v124;
        v30 = v125;
        while (1)
        {
          v32 = *(v31 - 1);
          v33 = *v31;
          v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32)
            v35 = (unsigned int *)(v29 + v32);
          else
            v35 = v19;
          if (v35 < v15)
            v35 = v15;
          v36 = bswap32(*v35);
          v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0)
            break;
          if (v26)
          {
            v48 = (unsigned int *)(v34 + v148);
            if ((unint64_t)v19 < v34 + v148)
              v48 = v19;
            if (v48 < v15)
              v48 = v15;
            v49 = BLEND8_19499[v26];
            v46 = v36 - ((v49 & v36) >> v26);
            v47 = (bswap32(*v48) & v49) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          v50 = (v36 << v151) | (v36 >> v150);
          v51 = v50 | v153;
          if (v18)
          {
            v52 = *v18;
            if ((unint64_t)(v18 + 1) < v147)
              ++v18;
            else
              v18 -= 15;
            if (v6 == 255)
              v53 = DITHERRGBA32(v51, v52);
            else
              v53 = DITHERRGBA32M(v51, v52, v6);
          }
          else
          {
            v18 = 0;
            if (v6 == 255)
            {
              v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              v55 = (unsigned __int16)v21.i16[0] >> 11;
              v56 = vshlq_u32(v54, (uint32x4_t)xmmword_185004BA0);
              v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_185004BB0);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *v8 = v53;
          if (v9)
            *v9 = HIBYTE(v53);
          v31 += 2;
          ++v8;
          v9 += v152;
          if (!--v30)
            goto LABEL_117;
        }
        v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38)
          v38 = v19;
        if (v38 < v15)
          v38 = v15;
        v39 = bswap32(*v38);
        if (v26)
        {
          v40 = (unsigned int *)(v34 + v148);
          if (v19 >= v40)
            v41 = v40;
          else
            v41 = v19;
          if (v41 < v15)
            v41 = v15;
          v42 = bswap32(*v41);
          v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43)
            v43 = v19;
          if (v43 < v15)
            v43 = v15;
          v44 = BLEND8_19499[v26];
          v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          v39 = v39 - ((v44 & v39) >> v26) + ((bswap32(*v43) & v44) >> v26);
        }
        v45 = BLEND8_19499[*v31 & 0xF];
        v46 = v36 - ((v45 & v36) >> v37);
        v47 = (v45 & v39) >> v37;
LABEL_49:
        v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      v12 = v136;
      v8 += v137;
      v9 += v139;
      LOBYTE(v13) = v135;
      result = v141 + v134;
      a6 = v143 - 1;
      v17 = v133;
      if (v143 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_117;
    v59 = (uint64_t *)v124;
    v58 = v125;
    while (1)
    {
      v60 = *(v59 - 1);
      v61 = *v59;
      v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60)
        v63 = (unsigned int *)(v29 + v60);
      else
        v63 = v19;
      if (v63 < v15)
        v63 = v15;
      v64 = bswap32(*v63);
      v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66)
          v66 = v19;
        if (v66 < v15)
          v66 = v15;
        v67 = bswap32(*v66);
        if (v26)
        {
          v68 = (unsigned int *)(v62 + v148);
          if (v19 >= v68)
            v69 = v68;
          else
            v69 = v19;
          if (v69 < v15)
            v69 = v15;
          v70 = bswap32(*v69);
          v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71)
            v71 = v19;
          if (v71 < v15)
            v71 = v15;
          v72 = BLEND8_19499[v26];
          v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
        }
        v73 = BLEND8_19499[*v59 & 0xF];
        v74 = v64 - ((v73 & v64) >> v65);
        v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26)
          goto LABEL_95;
        v76 = (unsigned int *)(v62 + v148);
        if ((unint64_t)v19 < v62 + v148)
          v76 = v19;
        if (v76 < v15)
          v76 = v15;
        v77 = BLEND8_19499[v26];
        v74 = v64 - ((v77 & v64) >> v26);
        v75 = (bswap32(*v76) & v77) >> v26;
      }
      v64 = v74 + v75;
LABEL_95:
      v78 = (v64 << v151) | (v64 >> v150);
      v79 = v78 | v153;
      if (v18)
      {
        v80 = *v18;
        if ((unint64_t)(v18 + 1) < v147)
          ++v18;
        else
          v18 -= 15;
        if (v6 == 255)
        {
          v81 = DITHERRGBA32(v79, v80);
          if (!v9)
            goto LABEL_105;
        }
        else
        {
          v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9)
            goto LABEL_105;
        }
      }
      else if (v6 == 255)
      {
        v18 = 0;
        v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u)
              *v8 = PDplusDM(v81, (unsigned __int16)*v8, ~v81 >> 24);
          }
          else
          {
            *v8 = v81;
          }
          goto LABEL_113;
        }
      }
      else
      {
        v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        v83 = (unsigned __int16)v21.i16[0] >> 11;
        v84 = vshlq_u32(v82, (uint32x4_t)xmmword_185004BA0);
        v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_185004BB0);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_185004BC0);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9)
          goto LABEL_105;
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), (unsigned __int16)*v8, *v9, HIBYTE(v81) ^ 0xFF);
          *v8 = v86;
          *v9 = HIBYTE(v86);
        }
      }
      else
      {
        *v8 = v81;
        *v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v152;
      if (!--v58)
        goto LABEL_117;
    }
  }
  v87 = 0;
  v88 = 0;
  v89 = (unsigned int *)(v16 - 4);
  v90 = vdup_n_s32(v6);
  v146 = (uint64_t *)(v11 + 16 * a3);
  v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  v145 = a5;
  v93 = v10;
  do
  {
    if (v17)
    {
      v94 = v17 + 16 * v140;
      v87 = v94 + 16;
      v88 = (unsigned __int8 *)(v94 + v131);
      v95 = (v140 + 1) & 0xF;
      if (v140 + 1 <= 0)
        v95 = -(-(v140 + 1) & 0xF);
      v140 = v95;
    }
    v96 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
    v144 = a6;
    v142 = result;
    if (v138 != 1)
    {
      v110 = v146;
      v111 = v145;
      if (a5 < 1)
        goto LABEL_173;
      while (1)
      {
        v112 = *v110;
        v110 += 2;
        v113 = (unsigned int *)(v96 + v112);
        if ((unint64_t)v89 < v96 + v112)
          v113 = v89;
        if ((unint64_t)v113 < *(_QWORD *)(a1 + 32))
          v113 = *(unsigned int **)(a1 + 32);
        v114 = bswap32(*v113);
        v115 = (v114 << v93) | (v114 >> v91);
        v116 = v115 | v153;
        if (v88)
        {
          v117 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
          {
            v118 = DITHERRGBA32(v116, v117);
            if (v9)
              goto LABEL_157;
          }
          else
          {
            v118 = DITHERRGBA32M(v116, v117, v6);
            if (v9)
              goto LABEL_157;
          }
        }
        else if (v6 == 255)
        {
          v88 = 0;
          v118 = (v115 >> 17) & 0x7C00 | (v115 >> 14) & 0x3E0 | ((unsigned __int16)v115 >> 11) & 0xFFFFFF | ((v116 >> 3) << 27) | (v116 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                v123 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), (unsigned __int16)*v8, *v9, HIBYTE(v118) ^ 0xFF);
                *v8 = v123;
                *v9 = HIBYTE(v123);
              }
            }
            else
            {
              *v8 = v118;
              *v9 = HIBYTE(v118);
            }
            goto LABEL_167;
          }
        }
        else
        {
          v88 = 0;
          v92.i16[0] = BYTE1(v115);
          v92.i16[1] = v115 >> 8 >> 16;
          v92.i32[1] = v116 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v119 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          v120 = (unsigned __int16)v92.i16[0] >> 11;
          v121 = vshlq_u32(v119, (uint32x4_t)xmmword_185004BA0);
          v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_185004BB0);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          v92 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          v118 = v92.i32[0] | v120 | v92.i32[1];
          if (v9)
            goto LABEL_157;
        }
        if (HIBYTE(v118) >= 0xF8u)
          goto LABEL_164;
        if (HIBYTE(v118) >= 8u)
          break;
LABEL_167:
        ++v8;
        v9 += v152;
        --v111;
        v93 = v151;
        if (!v111)
          goto LABEL_173;
      }
      LOWORD(v118) = PDplusDM(v118, (unsigned __int16)*v8, ~v118 >> 24);
LABEL_164:
      *v8 = v118;
      goto LABEL_167;
    }
    if (a5 >= 1)
    {
      v97 = v146;
      v98 = v145;
      do
      {
        v99 = *v97;
        v97 += 2;
        v100 = (unsigned int *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99)
          v100 = v89;
        if ((unint64_t)v100 < *(_QWORD *)(a1 + 32))
          v100 = *(unsigned int **)(a1 + 32);
        v101 = bswap32(*v100);
        v102 = (v101 << v93) | (v101 >> v91);
        v103 = v102 | v153;
        if (v88)
        {
          v104 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
            v105 = DITHERRGBA32(v103, v104);
          else
            v105 = DITHERRGBA32M(v103, v104, v6);
          v93 = v151;
        }
        else
        {
          v88 = 0;
          if (v6 == 255)
          {
            v105 = (v102 >> 17) & 0x7C00 | (v102 >> 14) & 0x3E0 | ((unsigned __int16)v102 >> 11) & 0xFFFFFF | ((v103 >> 3) << 27) | (v103 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v102);
            v92.i16[1] = v102 >> 8 >> 16;
            v92.i32[1] = v103 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v106 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            v107 = (unsigned __int16)v92.i16[0] >> 11;
            v108 = vshlq_u32(v106, (uint32x4_t)xmmword_185004BA0);
            v109 = (int8x16_t)vshlq_u32(v106, (uint32x4_t)xmmword_185004BB0);
            v109.i32[0] = v108.i32[0];
            v109.i32[3] = v108.i32[3];
            v92 = (int32x4_t)vandq_s8(v109, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            v105 = v92.i32[0] | v107 | v92.i32[1];
          }
        }
        *v8 = v105;
        if (v9)
          *v9 = HIBYTE(v105);
        ++v8;
        v9 += v152;
        --v98;
      }
      while (v98);
    }
LABEL_173:
    v12 = v136;
    v8 += v137;
    v9 += v139;
    LOBYTE(v13) = v135;
    result = v142 + v134;
    a6 = v144 - 1;
    v17 = v133;
  }
  while (v144 != 1);
  return result;
}

uint64_t rgb555_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  _WORD *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  int32x2_t v20;
  int32x4_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint32x4_t v54;
  int v55;
  uint32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint32x4_t v82;
  int v83;
  uint32x4_t v84;
  int8x16_t v85;
  int v86;
  unint64_t v87;
  unsigned __int8 *v88;
  char *v89;
  int32x2_t v90;
  char v91;
  int32x4_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  uint32x4_t v105;
  int v106;
  uint32x4_t v107;
  int8x16_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  uint32x4_t v117;
  int v118;
  uint32x4_t v119;
  int8x16_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  char v148;
  char v149;
  uint64_t v150;
  int v151;

  v6 = *((unsigned __int8 *)a2 + 8);
  if (*(_QWORD *)(a1 + 40))
    v7 = 0;
  else
    v7 = 255;
  v151 = v7;
  v8 = (_WORD *)*((_QWORD *)a2 + 2);
  v9 = (char *)*((_QWORD *)a2 + 4);
  if (v9)
    v137 = *((_QWORD *)a2 + 5) - a5;
  else
    v137 = 0;
  v10 = a2[1];
  v136 = *a2;
  v135 = *((_QWORD *)a2 + 3) - a5;
  v150 = v9 != 0;
  v12 = *((_QWORD *)a2 + 19);
  v11 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 11);
  v132 = *((_QWORD *)a2 + 13);
  result = *((_QWORD *)a2 + 9) + v132 * a4;
  v129 = *((_QWORD *)a2 + 6);
  v138 = *((_QWORD *)a2 + 7);
  v15 = *(unsigned int **)(a1 + 32);
  v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v17 = *(_QWORD *)(a1 + 168);
  v149 = v10;
  v133 = v13;
  v134 = v12;
  v131 = v17;
  if (*(_QWORD *)(a1 + 176))
  {
    v145 = 0;
    v18 = 0;
    v128 = *((_QWORD *)a2 + 15);
    v127 = *((_QWORD *)a2 + 17);
    v126 = ~(-1 << v13);
    v125 = v13 - 4;
    v124 = -v12;
    v19 = (unsigned int *)(v16 - 4);
    v148 = 32 - v10;
    v20 = vdup_n_s32(v6);
    v122 = v11 + 16 * a3 + 8;
    v123 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v127 - result) | (result - v128)) < 0)
      {
        v26 = 0;
        v146 = 0;
      }
      else
      {
        v22 = ((result & (unint64_t)v126) >> v125) & 0xF;
        v23 = weights_19497[v22];
        v24 = (unint64_t)(v22 - 7) >= 9;
        v25 = v124;
        if (!v24)
          v25 = v12;
        v146 = v25;
        v26 = v23 & 0xF;
      }
      if (v17)
      {
        v27 = v17 + 16 * v138;
        v145 = v27 + 16;
        v18 = (unsigned __int8 *)(v27 + v129);
        v28 = (v138 + 1) & 0xF;
        if (v138 + 1 <= 0)
          v28 = -(-(v138 + 1) & 0xF);
        v138 = v28;
      }
      v29 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
      v141 = a6;
      v139 = result;
      if (v136 != 1)
        break;
      if (a5 >= 1)
      {
        v31 = (uint64_t *)v122;
        v30 = v123;
        while (1)
        {
          v32 = *(v31 - 1);
          v33 = *v31;
          v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32)
            v35 = (unsigned int *)(v29 + v32);
          else
            v35 = v19;
          if (v35 < v15)
            v35 = v15;
          v36 = *v35;
          v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0)
            break;
          if (v26)
          {
            v48 = (unsigned int *)(v34 + v146);
            if ((unint64_t)v19 < v34 + v146)
              v48 = v19;
            if (v48 < v15)
              v48 = v15;
            v49 = BLEND8_19499[v26];
            v46 = v36 - ((v49 & v36) >> v26);
            v47 = (v49 & *v48) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          v50 = (v36 << v149) | (v36 >> v148);
          v51 = v50 | v151;
          if (v18)
          {
            v52 = *v18;
            if ((unint64_t)(v18 + 1) < v145)
              ++v18;
            else
              v18 -= 15;
            if (v6 == 255)
              v53 = DITHERRGBA32(v51, v52);
            else
              v53 = DITHERRGBA32M(v51, v52, v6);
          }
          else
          {
            v18 = 0;
            if (v6 == 255)
            {
              v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              v55 = (unsigned __int16)v21.i16[0] >> 11;
              v56 = vshlq_u32(v54, (uint32x4_t)xmmword_185004BA0);
              v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_185004BB0);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *v8 = v53;
          if (v9)
            *v9 = HIBYTE(v53);
          v31 += 2;
          ++v8;
          v9 += v150;
          if (!--v30)
            goto LABEL_117;
        }
        v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38)
          v38 = v19;
        if (v38 < v15)
          v38 = v15;
        v39 = *v38;
        if (v26)
        {
          v40 = (unsigned int *)(v34 + v146);
          if (v19 >= v40)
            v41 = v40;
          else
            v41 = v19;
          if (v41 < v15)
            v41 = v15;
          v42 = *v41;
          v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43)
            v43 = v19;
          if (v43 < v15)
            v43 = v15;
          v44 = BLEND8_19499[v26];
          v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          v39 = v39 - ((v44 & v39) >> v26) + ((v44 & *v43) >> v26);
        }
        v45 = BLEND8_19499[*v31 & 0xF];
        v46 = v36 - ((v45 & v36) >> v37);
        v47 = (v45 & v39) >> v37;
LABEL_49:
        v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      v12 = v134;
      v8 += v135;
      v9 += v137;
      LOBYTE(v13) = v133;
      result = v139 + v132;
      a6 = v141 - 1;
      v17 = v131;
      if (v141 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_117;
    v59 = (uint64_t *)v122;
    v58 = v123;
    while (1)
    {
      v60 = *(v59 - 1);
      v61 = *v59;
      v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60)
        v63 = (unsigned int *)(v29 + v60);
      else
        v63 = v19;
      if (v63 < v15)
        v63 = v15;
      v64 = *v63;
      v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66)
          v66 = v19;
        if (v66 < v15)
          v66 = v15;
        v67 = *v66;
        if (v26)
        {
          v68 = (unsigned int *)(v62 + v146);
          if (v19 >= v68)
            v69 = v68;
          else
            v69 = v19;
          if (v69 < v15)
            v69 = v15;
          v70 = *v69;
          v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71)
            v71 = v19;
          if (v71 < v15)
            v71 = v15;
          v72 = BLEND8_19499[v26];
          v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          v67 = v67 - ((v72 & v67) >> v26) + ((v72 & *v71) >> v26);
        }
        v73 = BLEND8_19499[*v59 & 0xF];
        v74 = v64 - ((v73 & v64) >> v65);
        v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26)
          goto LABEL_95;
        v76 = (unsigned int *)(v62 + v146);
        if ((unint64_t)v19 < v62 + v146)
          v76 = v19;
        if (v76 < v15)
          v76 = v15;
        v77 = BLEND8_19499[v26];
        v74 = v64 - ((v77 & v64) >> v26);
        v75 = (v77 & *v76) >> v26;
      }
      v64 = v74 + v75;
LABEL_95:
      v78 = (v64 << v149) | (v64 >> v148);
      v79 = v78 | v151;
      if (v18)
      {
        v80 = *v18;
        if ((unint64_t)(v18 + 1) < v145)
          ++v18;
        else
          v18 -= 15;
        if (v6 == 255)
        {
          v81 = DITHERRGBA32(v79, v80);
          if (!v9)
            goto LABEL_105;
        }
        else
        {
          v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9)
            goto LABEL_105;
        }
      }
      else if (v6 == 255)
      {
        v18 = 0;
        v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u)
              *v8 = PDplusDM(v81, (unsigned __int16)*v8, ~v81 >> 24);
          }
          else
          {
            *v8 = v81;
          }
          goto LABEL_113;
        }
      }
      else
      {
        v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        v83 = (unsigned __int16)v21.i16[0] >> 11;
        v84 = vshlq_u32(v82, (uint32x4_t)xmmword_185004BA0);
        v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_185004BB0);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_185004BC0);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9)
          goto LABEL_105;
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), (unsigned __int16)*v8, *v9, HIBYTE(v81) ^ 0xFF);
          *v8 = v86;
          *v9 = HIBYTE(v86);
        }
      }
      else
      {
        *v8 = v81;
        *v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v150;
      if (!--v58)
        goto LABEL_117;
    }
  }
  v87 = 0;
  v88 = 0;
  v89 = v16 - 4;
  v90 = vdup_n_s32(v6);
  v144 = (uint64_t *)(v11 + 16 * a3);
  v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  v143 = a5;
  v93 = v10;
  do
  {
    if (v17)
    {
      v94 = v17 + 16 * v138;
      v87 = v94 + 16;
      v88 = (unsigned __int8 *)(v94 + v129);
      v95 = (v138 + 1) & 0xF;
      if (v138 + 1 <= 0)
        v95 = -(-(v138 + 1) & 0xF);
      v138 = v95;
    }
    v96 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
    v142 = a6;
    v140 = result;
    if (v136 != 1)
    {
      v109 = v144;
      v110 = v143;
      if (a5 < 1)
        goto LABEL_173;
      while (1)
      {
        v111 = *v109;
        v109 += 2;
        v112 = (char *)(v96 + v111);
        if ((unint64_t)v89 < v96 + v111)
          v112 = v89;
        if ((unint64_t)v112 < *(_QWORD *)(a1 + 32))
          v112 = *(char **)(a1 + 32);
        v113 = (*(_DWORD *)v112 << v93) | (*(_DWORD *)v112 >> v91);
        v114 = v113 | v151;
        if (v88)
        {
          v115 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
          {
            v116 = DITHERRGBA32(v114, v115);
            if (v9)
              goto LABEL_157;
          }
          else
          {
            v116 = DITHERRGBA32M(v114, v115, v6);
            if (v9)
              goto LABEL_157;
          }
        }
        else if (v6 == 255)
        {
          v88 = 0;
          v116 = (v113 >> 17) & 0x7C00 | (v113 >> 14) & 0x3E0 | ((unsigned __int16)v113 >> 11) & 0xFFFFFF | ((v114 >> 3) << 27) | (v114 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v116) < 0xF8u)
            {
              if (HIBYTE(v116) >= 8u)
              {
                v121 = PDAplusDAM((unsigned __int16)v116, SHIBYTE(v116), (unsigned __int16)*v8, *v9, HIBYTE(v116) ^ 0xFF);
                *v8 = v121;
                *v9 = HIBYTE(v121);
              }
            }
            else
            {
              *v8 = v116;
              *v9 = HIBYTE(v116);
            }
            goto LABEL_167;
          }
        }
        else
        {
          v88 = 0;
          v92.i16[0] = BYTE1(v113);
          v92.i16[1] = v113 >> 8 >> 16;
          v92.i32[1] = v114 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v117 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          v118 = (unsigned __int16)v92.i16[0] >> 11;
          v119 = vshlq_u32(v117, (uint32x4_t)xmmword_185004BA0);
          v120 = (int8x16_t)vshlq_u32(v117, (uint32x4_t)xmmword_185004BB0);
          v120.i32[0] = v119.i32[0];
          v120.i32[3] = v119.i32[3];
          v92 = (int32x4_t)vandq_s8(v120, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          v116 = v92.i32[0] | v118 | v92.i32[1];
          if (v9)
            goto LABEL_157;
        }
        if (HIBYTE(v116) >= 0xF8u)
          goto LABEL_164;
        if (HIBYTE(v116) >= 8u)
          break;
LABEL_167:
        ++v8;
        v9 += v150;
        --v110;
        v93 = v149;
        if (!v110)
          goto LABEL_173;
      }
      LOWORD(v116) = PDplusDM(v116, (unsigned __int16)*v8, ~v116 >> 24);
LABEL_164:
      *v8 = v116;
      goto LABEL_167;
    }
    if (a5 >= 1)
    {
      v97 = v144;
      v98 = v143;
      do
      {
        v99 = *v97;
        v97 += 2;
        v100 = (char *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99)
          v100 = v89;
        if ((unint64_t)v100 < *(_QWORD *)(a1 + 32))
          v100 = *(char **)(a1 + 32);
        v101 = (*(_DWORD *)v100 << v93) | (*(_DWORD *)v100 >> v91);
        v102 = v101 | v151;
        if (v88)
        {
          v103 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
            v104 = DITHERRGBA32(v102, v103);
          else
            v104 = DITHERRGBA32M(v102, v103, v6);
          v93 = v149;
        }
        else
        {
          v88 = 0;
          if (v6 == 255)
          {
            v104 = (v101 >> 17) & 0x7C00 | (v101 >> 14) & 0x3E0 | ((unsigned __int16)v101 >> 11) & 0xFFFFFF | ((v102 >> 3) << 27) | (v102 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v101);
            v92.i16[1] = v101 >> 8 >> 16;
            v92.i32[1] = v102 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v105 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            v106 = (unsigned __int16)v92.i16[0] >> 11;
            v107 = vshlq_u32(v105, (uint32x4_t)xmmword_185004BA0);
            v108 = (int8x16_t)vshlq_u32(v105, (uint32x4_t)xmmword_185004BB0);
            v108.i32[0] = v107.i32[0];
            v108.i32[3] = v107.i32[3];
            v92 = (int32x4_t)vandq_s8(v108, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            v104 = v92.i32[0] | v106 | v92.i32[1];
          }
        }
        *v8 = v104;
        if (v9)
          *v9 = HIBYTE(v104);
        ++v8;
        v9 += v150;
        --v98;
      }
      while (v98);
    }
LABEL_173:
    v12 = v134;
    v8 += v135;
    v9 += v137;
    LOBYTE(v13) = v133;
    result = v140 + v132;
    a6 = v142 - 1;
    v17 = v131;
  }
  while (v142 != 1);
  return result;
}

uint64_t rgb555_colorlookup(int a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  if (a1 == 3)
  {
    v4 = *(_QWORD *)a2;
  }
  else
  {
    if (a3)
      v5 = (unint64_t)*a3 << 24;
    else
      v5 = 4278190080;
    v4 = v5 | *a2;
  }
  pthread_mutex_lock(&rgb555_cacheColorLock);
  v6 = (char *)rgb555_cacheColor;
  if (rgb555_cacheColor && *(_QWORD *)(rgb555_cacheColor + 16) == v4)
  {
    v7 = (char *)rgb555_cacheColor;
  }
  else
  {
    v7 = 0;
    while (1)
    {
      if (!v6)
        goto LABEL_15;
      v8 = v7;
      v7 = v6;
      if (*((_QWORD *)v6 + 2) == v4)
        break;
      v6 = *(char **)v6;
      if (!*(_QWORD *)v7)
      {
        if (rgb555_cacheColorCount > 6)
        {
          *(_QWORD *)v8 = 0;
        }
        else
        {
LABEL_15:
          v9 = (char *)rgb555_cacheColorBase;
          if (rgb555_cacheColorBase)
          {
            v10 = rgb555_cacheColorCount;
          }
          else
          {
            v9 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x1020040A1C41DBCuLL);
            v10 = 0;
            rgb555_cacheColorBase = (uint64_t)v9;
          }
          v7 = &v9[24 * v10];
          *((_QWORD *)v7 + 1) = &v9[1024 * (unint64_t)v10 + 168];
          rgb555_cacheColorCount = v10 + 1;
        }
        *(_QWORD *)v7 = rgb555_cacheColor;
        rgb555_cacheColor = (uint64_t)v7;
        *((_QWORD *)v7 + 2) = v4;
        v11 = *((_QWORD *)v7 + 1);
        if (a1 == 3)
        {
          v12 = 0;
          v13 = 244;
          v14 = 188;
          do
          {
            v15 = pixel_dither_noise[v12 + 1];
            *(_DWORD *)(v11 + 4 * v12) = (4 * (v14 + HIDWORD(v4))) & 0x7C00 | ((v14 + WORD1(v4)) >> 3) & 0x3E0 | ((v14 + v4) >> 8) & 0x1F | ((((v13 + WORD1(v4)) >> 8) & 0x1F) << 21) & 0x83E0FFFF | ((((v13 + HIDWORD(v4)) >> 8) & 0x1F) << 26) | ((((v13 + v4) >> 8) & 0x1F) << 16);
            *(_WORD *)(v11 + 2 * v12 + 512) = ((v14 + HIWORD(v4)) >> 5) & 0xF8 | ((v14 + HIWORD(v4)) >> 10) & 7 | ((v13 + HIWORD(v4)) >> 2) & 0x700 | ((((v13 + HIWORD(v4)) >> 8) & 0x1F) << 11);
            v13 = v15;
            v14 = v15 >> 8;
            ++v12;
          }
          while ((_DWORD)v12 != 128);
        }
        else
        {
          v16 = 0;
          do
          {
            *(_DWORD *)(v11 + 4 * v16) = PDAM((unsigned __int16)v4, SBYTE3(v4), v16);
            ++v16;
          }
          while ((_DWORD)v16 != 256);
        }
        goto LABEL_28;
      }
    }
    if (v8)
    {
      *(_QWORD *)v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = rgb555_cacheColor;
      rgb555_cacheColor = (uint64_t)v6;
    }
  }
LABEL_28:
  pthread_mutex_unlock(&rgb555_cacheColorLock);
  return *((_QWORD *)v7 + 1);
}

uint64_t rgb555_mark_constmask(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char v30;
  unsigned int *v31;
  char *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  __int16 *v38;
  char *v39;
  char v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  char v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unint64_t v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  char v143;
  int v144;
  unsigned int *v145;
  int16x4_t *v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  char v151;
  int v152;
  unsigned int *v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  char v162;
  int v163;
  int v164;
  unint64_t v165;
  int v166;
  int v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  char v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int16x4_t v193;
  unint64_t v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  __int16 v198;
  unsigned __int16 v199;
  int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  unsigned int v206;
  __int16 v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  unsigned int v227;
  int v228;
  int v229;
  int v230;

  v4 = *(_DWORD *)(a1 + 8);
  v225 = *(_DWORD *)(a1 + 4);
  v5 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 136);
  result = rgb555_colorlookup(4, *(unsigned __int16 **)(a1 + 88), *(unsigned __int8 **)(a1 + 96));
  v11 = result;
  v12 = *(unsigned int *)(result + 1020);
  v14 = *(int *)(a1 + 12);
  v13 = *(int *)(a1 + 16);
  v230 = v4;
  if (v6)
  {
    v15 = *(int *)(a1 + 32);
    v16 = (char *)(v6 + v14 + (int)v15 * (uint64_t)(int)v13);
    v17 = 1;
    if (!v8)
      return result;
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v17 = 0;
    if (!v8)
      return result;
  }
  v18 = v15 - v225;
  if (v6)
    v15 -= v225;
  v222 = v15;
  v19 = v5 >> 1;
  v20 = BYTE3(v12);
  v21 = (__int16 *)(v7 + 2 * (v14 + v19 * v13));
  v22 = *(int *)(a1 + 124);
  v23 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v22;
  v24 = v22 - v225;
  v218 = v19 - v225;
  switch(a2)
  {
    case 0:
      if (v6)
      {
        while (1)
        {
          v25 = v225;
          do
          {
            v26 = *(unsigned __int8 *)v23;
            if (v26 < 0xF8)
            {
              if (v26 < 8)
                goto LABEL_15;
              result = PDAM((unsigned __int16)*v21, *v16, ~(_BYTE)v26);
              *v21 = result;
              v27 = BYTE3(result);
            }
            else
            {
              LOBYTE(v27) = 0;
              *v21 = 0;
            }
            *v16 = v27;
LABEL_15:
            ++v23;
            ++v21;
            v16 += v17;
            --v25;
          }
          while (v25);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230)
            return result;
        }
      }
LABEL_312:
      v139 = v225;
      v140 = v230;
      while (1)
      {
        v141 = *(unsigned __int8 *)v23;
        if (v141 > 0xF7)
          break;
        if (v141 >= 8)
        {
          result = PDM((unsigned __int16)*v21, ~(_BYTE)v141);
          goto LABEL_317;
        }
LABEL_318:
        ++v23;
        ++v21;
        if (!--v139)
        {
          v23 += v24;
          v21 += v218;
          --v230;
          if (v140 == 1)
            return result;
          goto LABEL_312;
        }
      }
      result = 0;
LABEL_317:
      *v21 = result;
      goto LABEL_318;
    case 1:
      v28 = v23 & 3;
      if (v6)
      {
        v29 = v28 + v225;
        if ((v23 & 3) != 0)
          v30 = v23 & 0xFC;
        else
          v30 = v23;
        if ((v23 & 3) != 0)
          result = (-1 << (8 * v28));
        else
          result = 0xFFFFFFFFLL;
        if ((v23 & 3) != 0)
          v31 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        else
          v31 = (unsigned int *)v23;
        if ((v23 & 3) != 0)
          v32 = &v16[-(v23 & 3)];
        else
          v32 = v16;
        if ((v23 & 3) != 0)
          v21 -= v23 & 3;
        else
          v29 = v225;
        if ((((_BYTE)v29 + v30) & 3) != 0)
        {
          v33 = 4 - (((_BYTE)v29 + v30) & 3);
          v28 += v33;
          v34 = 0xFFFFFFFF >> (8 * v33);
          if (v29 >= 4)
            v35 = 0xFFFFFFFF >> (8 * v33);
          else
            v35 = 0;
          if (v29 >= 4)
            v34 = -1;
          result = v34 & result;
          v226 = result;
        }
        else
        {
          v226 = result;
          v35 = 0;
        }
        v223 = v24 - v28;
        v219 = v218 - v28;
        v215 = v29 >> 2;
        v212 = v18 - v28;
LABEL_384:
        v170 = *v31 & v226;
        v171 = v215;
        v172 = v35;
        if (!v170)
          goto LABEL_406;
LABEL_385:
        if (v170 == -1)
        {
          *v21 = v12;
          *v32 = BYTE3(v12);
          v21[1] = v12;
          v32[1] = BYTE3(v12);
          v21[2] = v12;
          v32[2] = BYTE3(v12);
LABEL_403:
          v21[3] = v12;
          v32[3] = BYTE3(v12);
          goto LABEL_406;
        }
        while (1)
        {
          if (v170 < 0xF8u)
          {
            if (v170 < 8u)
              goto LABEL_392;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v170), HIBYTE(*(_DWORD *)(v11 + 4 * v170)), (unsigned __int16)*v21, *v32, ~(_BYTE)v170);
            *v21 = result;
            v173 = BYTE3(result);
          }
          else
          {
            *v21 = v12;
            v173 = BYTE3(v12);
          }
          *v32 = v173;
LABEL_392:
          if (BYTE1(v170) < 0xF8u)
          {
            if (BYTE1(v170) < 8u)
              goto LABEL_397;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v170))), (unsigned __int16)v21[1], v32[1], ~(v170 >> 8));
            v21[1] = result;
            v174 = BYTE3(result);
          }
          else
          {
            v21[1] = v12;
            v174 = BYTE3(v12);
          }
          v32[1] = v174;
LABEL_397:
          if (BYTE2(v170) < 0xF8u)
          {
            if (BYTE2(v170) < 8u)
              goto LABEL_402;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v170))), (unsigned __int16)v21[2], v32[2], ~HIWORD(v170));
            v21[2] = result;
            v175 = BYTE3(result);
          }
          else
          {
            v21[2] = v12;
            v175 = BYTE3(v12);
          }
          v32[2] = v175;
LABEL_402:
          if (v170 >> 27 == 31)
            goto LABEL_403;
          if (v170 >> 27)
          {
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v170)), HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v170))), (unsigned __int16)v21[3], v32[3], ~v170 >> 24);
            v21[3] = result;
            v32[3] = BYTE3(result);
          }
LABEL_406:
          while (1)
          {
            v176 = v171;
            v21 += 4;
            v32 += 4;
            --v171;
            ++v31;
            if (v176 < 2)
              break;
            v170 = *v31;
            if (*v31)
              goto LABEL_385;
          }
          if (!v172)
          {
            v31 = (unsigned int *)((char *)v31 + v223);
            v21 += v219;
            v32 += v212;
            if (!--v230)
              return result;
            goto LABEL_384;
          }
          v172 = 0;
          v170 = *v31 & v35;
        }
      }
      v142 = v28 + v225;
      if ((v23 & 3) != 0)
        v143 = v23 & 0xFC;
      else
        v143 = v23;
      if ((v23 & 3) != 0)
        v144 = -1 << (8 * v28);
      else
        v144 = -1;
      if ((v23 & 3) != 0)
        v145 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v145 = (unsigned int *)v23;
      if ((v23 & 3) != 0)
        v146 = (int16x4_t *)&v21[-(v23 & 3)];
      else
        v146 = (int16x4_t *)v21;
      if ((v23 & 3) == 0)
        v142 = v225;
      if ((((_BYTE)v142 + v143) & 3) != 0)
      {
        v147 = 4 - (((_BYTE)v142 + v143) & 3);
        v28 += v147;
        v148 = 0xFFFFFFFF >> (8 * v147);
        if (v142 >= 4)
          v149 = 0xFFFFFFFF >> (8 * v147);
        else
          v149 = 0;
        if (v142 >= 4)
          v148 = -1;
        v228 = v148 & v144;
      }
      else
      {
        v228 = v144;
        v149 = 0;
      }
      v224 = v24 - v28;
      v216 = v142 >> 2;
      v193 = vdup_n_s16(v12);
      v194 = v218 - v28;
      do
      {
        v195 = *v145 & v228;
        v196 = v216;
        v197 = v149;
        if (!v195)
          goto LABEL_455;
LABEL_437:
        if (v195 == -1)
        {
          *v146 = v193;
          goto LABEL_455;
        }
        while (1)
        {
          v198 = v12;
          if (v195 <= 0xF7u)
          {
            if (v195 < 8u)
              goto LABEL_443;
            v198 = PDplusDM(*(_WORD *)(v11 + 4 * v195), v146->u16[0], ~(_BYTE)v195);
          }
          v146->i16[0] = v198;
LABEL_443:
          v199 = v12;
          if (BYTE1(v195) <= 0xF7u)
          {
            if (BYTE1(v195) < 8u)
              goto LABEL_447;
            v199 = PDplusDM(*(_WORD *)(v11 + 4 * BYTE1(v195)), v146->u16[1], ~(v195 >> 8));
          }
          v146->i16[1] = v199;
LABEL_447:
          result = v12;
          if (BYTE2(v195) <= 0xF7u)
          {
            if (BYTE2(v195) < 8u)
              goto LABEL_451;
            result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE2(v195)), v146->u16[2], ~HIWORD(v195));
          }
          v146->i16[2] = result;
LABEL_451:
          if (v195 >> 27 == 31)
          {
            v146->i16[3] = v12;
          }
          else if (v195 >> 27)
          {
            result = PDplusDM(*(_WORD *)(v11 + 4 * HIBYTE(v195)), v146->u16[3], ~v195 >> 24);
            v146->i16[3] = result;
          }
LABEL_455:
          while (1)
          {
            v200 = v196;
            ++v146;
            --v196;
            ++v145;
            if (v200 < 2)
              break;
            v195 = *v145;
            if (*v145)
              goto LABEL_437;
          }
          if (!v197)
            break;
          v197 = 0;
          v195 = *v145 & v149;
        }
        v145 = (unsigned int *)((char *)v145 + v224);
        v146 = (int16x4_t *)((char *)v146 + 2 * v194);
        --v230;
      }
      while (v230);
      return result;
    case 2:
      v36 = v23 & 3;
      if (v6)
      {
        v37 = v36 + v225;
        v38 = &v21[-(v23 & 3)];
        v39 = &v16[-(v23 & 3)];
        if ((v23 & 3) != 0)
          v40 = v23 & 0xFC;
        else
          v40 = v23;
        if ((v23 & 3) != 0)
          result = (-1 << (8 * v36));
        else
          result = 0xFFFFFFFFLL;
        if ((v23 & 3) != 0)
        {
          v23 &= 0xFFFFFFFFFFFFFFFCLL;
          v16 = v39;
          v21 = v38;
        }
        else
        {
          v37 = v225;
        }
        if ((((_BYTE)v37 + v40) & 3) != 0)
        {
          v41 = 4 - (((_BYTE)v37 + v40) & 3);
          v36 += v41;
          v42 = 0xFFFFFFFF >> (8 * v41);
          if (v37 >= 4)
            v43 = 0xFFFFFFFF >> (8 * v41);
          else
            v43 = 0;
          v227 = v43;
          if (v37 >= 4)
            v42 = -1;
          result = v42 & result;
          v214 = result;
        }
        else
        {
          v214 = result;
          v227 = 0;
        }
        v213 = v24 - v36;
        v220 = v218 - v36;
        v211 = v37 >> 2;
        v210 = v18 - v36;
        v177 = v227;
        while (1)
        {
          v178 = *(_DWORD *)v23 & v214;
          v179 = v211;
          v180 = v177;
          if (!v178)
            goto LABEL_427;
LABEL_416:
          if (v178 == -1)
            break;
          while (1)
          {
            if ((v178 & 0xF8) != 0)
            {
              v189 = HIBYTE(*(_DWORD *)(v11 + 4 * v178));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v178), v189, (unsigned __int16)*v21, *v16, v189 ^ 0xFFu);
              *v21 = result;
              *v16 = BYTE3(result);
            }
            if ((v178 & 0xF800) != 0)
            {
              v190 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v178)));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v178)), v190, (unsigned __int16)v21[1], v16[1], v190 ^ 0xFFu);
              v21[1] = result;
              v16[1] = BYTE3(result);
            }
            if ((v178 & 0xF80000) != 0)
            {
              v191 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v178)));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v178)), v191, (unsigned __int16)v21[2], v16[2], v191 ^ 0xFFu);
              v21[2] = result;
              v16[2] = BYTE3(result);
            }
            if (v178 >> 27)
            {
              v187 = HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v178)));
              v184 = (unsigned __int16)v21[3];
              v185 = v16[3];
              v186 = (unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v178));
              v188 = v187 ^ 0xFF;
              goto LABEL_426;
            }
LABEL_427:
            while (1)
            {
              v192 = v179;
              v21 += 4;
              v16 += 4;
              --v179;
              v23 += 4;
              if (v192 < 2)
                break;
              v178 = *(_DWORD *)v23;
              if (*(_DWORD *)v23)
                goto LABEL_416;
            }
            if (!v180)
              break;
            v180 = 0;
            v178 = *(_DWORD *)v23 & v177;
          }
          v23 += v213;
          v21 += v220;
          v16 += v210;
          if (!--v230)
            return result;
        }
        v181 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)*v21, *v16, ~BYTE3(v12));
        *v21 = v181;
        *v16 = BYTE3(v181);
        v182 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)v21[1], v16[1], ~BYTE3(v12));
        v21[1] = v182;
        v16[1] = BYTE3(v182);
        v183 = PDAplusDAM((unsigned __int16)v12, SBYTE3(v12), (unsigned __int16)v21[2], v16[2], ~BYTE3(v12));
        v21[2] = v183;
        v16[2] = HIBYTE(v183);
        v184 = (unsigned __int16)v21[3];
        v185 = v16[3];
        v186 = (unsigned __int16)v12;
        v187 = BYTE3(v12);
        v188 = ~BYTE3(v12);
        v177 = v227;
LABEL_426:
        result = PDAplusDAM(v186, v187, v184, v185, v188);
        v21[3] = result;
        v16[3] = BYTE3(result);
        goto LABEL_427;
      }
      v150 = v36 + v225;
      if ((v23 & 3) != 0)
        v151 = v23 & 0xFC;
      else
        v151 = v23;
      if ((v23 & 3) != 0)
        v152 = -1 << (8 * v36);
      else
        v152 = -1;
      if ((v23 & 3) != 0)
        v153 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v153 = (unsigned int *)v23;
      if ((v23 & 3) != 0)
        v21 -= v23 & 3;
      else
        v150 = v225;
      if ((((_BYTE)v150 + v151) & 3) != 0)
      {
        v154 = 4 - (((_BYTE)v150 + v151) & 3);
        v36 += v154;
        v155 = 0xFFFFFFFF >> (8 * v154);
        if (v150 >= 4)
          v156 = -1;
        else
          v156 = 0xFFFFFFFF >> (8 * v154);
        v229 = v156 & v152;
        if (v150 >= 4)
          v157 = v155;
        else
          v157 = 0;
      }
      else
      {
        v229 = v152;
        v157 = 0;
      }
      v201 = v24 - v36;
      v202 = v150 >> 2;
      v217 = v201;
      v221 = v218 - v36;
LABEL_464:
      v203 = *v153 & v229;
      v204 = v157;
      v205 = v202;
      if (!v203)
        goto LABEL_476;
LABEL_465:
      if (v203 == -1)
      {
        *v21 = PDplusDM(v12, (unsigned __int16)*v21, ~BYTE3(v12));
        v21[1] = PDplusDM(v12, (unsigned __int16)v21[1], ~BYTE3(v12));
        v21[2] = PDplusDM(v12, (unsigned __int16)v21[2], ~BYTE3(v12));
        v206 = (unsigned __int16)v21[3];
        v207 = v12;
        v208 = ~BYTE3(v12);
      }
      else
      {
        while (1)
        {
          if ((v203 & 0xF8) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * v203), (unsigned __int16)*v21, ~*(_DWORD *)(v11 + 4 * v203) >> 24);
            *v21 = result;
          }
          if ((v203 & 0xF800) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE1(v203)), (unsigned __int16)v21[1], ~*(_DWORD *)(v11 + 4 * BYTE1(v203)) >> 24);
            v21[1] = result;
          }
          if ((v203 & 0xF80000) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE2(v203)), (unsigned __int16)v21[2], ~*(_DWORD *)(v11 + 4 * BYTE2(v203)) >> 24);
            v21[2] = result;
          }
          if (v203 >> 27)
            break;
LABEL_476:
          while (1)
          {
            v209 = v205;
            v21 += 4;
            --v205;
            ++v153;
            if (v209 < 2)
              break;
            v203 = *v153;
            if (*v153)
              goto LABEL_465;
          }
          if (!v204)
          {
            v153 = (unsigned int *)((char *)v153 + v217);
            v21 += v221;
            if (!--v230)
              return result;
            goto LABEL_464;
          }
          v204 = 0;
          v203 = *v153 & v157;
        }
        v206 = (unsigned __int16)v21[3];
        v207 = *(_DWORD *)(v11 + 4 * HIBYTE(v203));
        v208 = ~*(_DWORD *)(v11 + 4 * HIBYTE(v203)) >> 24;
      }
      result = PDplusDM(v207, v206, v208);
      v21[3] = result;
      goto LABEL_476;
    case 3:
      while (1)
      {
        v44 = v225;
        do
        {
          v45 = *(unsigned __int8 *)v23;
          if (v45 < 0xF8)
          {
            if (v45 < 8)
              goto LABEL_64;
            v46 = *v16;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * ((v46 * v45 + ((v46 * v45) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * ((v46 * v45 + ((v46 * v45) >> 8) + 1) >> 8))), (unsigned __int16)*v21, v46, v45 ^ 0xFF);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * *v16);
          }
          *v21 = result;
          *v16 = BYTE3(result);
LABEL_64:
          ++v23;
          ++v21;
          v16 += v17;
          --v44;
        }
        while (v44);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230)
          return result;
      }
    case 4:
      while (1)
      {
        v47 = v225;
        do
        {
          v48 = *(unsigned __int8 *)v23;
          if (v48 < 0xF8)
          {
            if (v48 < 8)
              goto LABEL_73;
            v49 = *v16;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11+ 4 * (((v49 ^ 0xFF) * v48 + (((v49 ^ 0xFF) * v48) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * (((v49 ^ 0xFF) * v48 + (((v49 ^ 0xFF) * v48) >> 8) + 1) >> 8))), (unsigned __int16)*v21, v49, v48 ^ 0xFF);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * ~*v16);
          }
          *v21 = result;
          *v16 = BYTE3(result);
LABEL_73:
          ++v23;
          ++v21;
          v16 += v17;
          --v47;
        }
        while (v47);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230)
          return result;
      }
    case 5:
      do
      {
        v50 = v225;
        do
        {
          v51 = *(unsigned __int8 *)v23;
          if (v51 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v51), HIBYTE(*(_DWORD *)(v11 + 4 * v51)), *v16, (unsigned __int16)*v21, *v16, HIBYTE(*(_DWORD *)(v11 + 4 * v51)) ^ 0xFFu);
            *v21 = result;
            *v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v50;
        }
        while (v50);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 6:
      while (1)
      {
        v52 = v225;
        do
        {
          v53 = *(unsigned __int8 *)v23;
          if (v53 < 8)
            goto LABEL_89;
          v54 = *v16;
          if (v54 > 7)
          {
            if (v54 > 0xF7)
              goto LABEL_89;
            result = PDAplusDAM((unsigned __int16)*v21, v54, (unsigned __int16)*(_DWORD *)(v11 + 4 * v53), HIBYTE(*(_DWORD *)(v11 + 4 * v53)), ~(_BYTE)v54);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * v53);
          }
          *v21 = result;
          *v16 = BYTE3(result);
LABEL_89:
          ++v23;
          ++v21;
          v16 += v17;
          --v52;
        }
        while (v52);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        if (!--v230)
          return result;
      }
    case 7:
      if (v6)
      {
        while (1)
        {
          v55 = v225;
          do
          {
            v56 = *(unsigned __int8 *)v23;
            if (v56 < 0xF8)
            {
              if (v56 < 8)
                goto LABEL_99;
              v57 = (unsigned __int16)*v21;
              v58 = *v16;
              LOBYTE(v59) = ~(_BYTE)v56 + ((unsigned __int16)(v20 * v56 + ((v20 * v56) >> 8) + 1) >> 8);
            }
            else
            {
              v57 = (unsigned __int16)*v21;
              v58 = *v16;
              v59 = BYTE3(v12);
            }
            result = PDAM(v57, v58, v59);
            *v21 = result;
            *v16 = BYTE3(result);
LABEL_99:
            ++v23;
            ++v21;
            v16 += v17;
            --v55;
          }
          while (v55);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230)
            return result;
        }
      }
LABEL_361:
      v158 = v225;
      v159 = v230;
      while (1)
      {
        v160 = *(unsigned __int8 *)v23;
        if (v160 >= 0xF8)
          break;
        if (v160 >= 8)
        {
          v161 = (unsigned __int16)*v21;
          v162 = ~(_BYTE)v160 + ((unsigned __int16)(v20 * v160 + ((v20 * v160) >> 8) + 1) >> 8);
          goto LABEL_366;
        }
LABEL_367:
        ++v23;
        ++v21;
        if (!--v158)
        {
          v23 += v24;
          v21 += v218;
          --v230;
          if (v159 == 1)
            return result;
          goto LABEL_361;
        }
      }
      v161 = (unsigned __int16)*v21;
      v162 = BYTE3(v12);
LABEL_366:
      result = PDM(v161, v162);
      *v21 = result;
      goto LABEL_367;
    case 8:
      v60 = ~BYTE3(v12);
      if (v6)
      {
        while (1)
        {
          v61 = v225;
          do
          {
            v62 = *(unsigned __int8 *)v23;
            if (v62 < 0xF8)
            {
              if (v62 < 8)
                goto LABEL_109;
              v63 = (unsigned __int16)*v21;
              v64 = *v16;
              v65 = ~((v20 * v62 + ((v20 * v62) >> 8) + 1) >> 8);
            }
            else
            {
              v63 = (unsigned __int16)*v21;
              v64 = *v16;
              v65 = v60;
            }
            result = PDAM(v63, v64, v65);
            *v21 = result;
            *v16 = BYTE3(result);
LABEL_109:
            ++v23;
            ++v21;
            v16 += v17;
            --v61;
          }
          while (v61);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          if (!--v230)
            return result;
        }
      }
      break;
    case 9:
      do
      {
        v71 = v225;
        do
        {
          v72 = *(unsigned __int8 *)v23;
          if (v72 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v72), HIBYTE(*(_DWORD *)(v11 + 4 * v72)), *v16 ^ 0xFFu, (unsigned __int16)*v21, *v16, (~(_BYTE)v72 + HIBYTE(*(_DWORD *)(v11 + 4 * v72))));
            *v21 = result;
            *v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v71;
        }
        while (v71);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 10:
      do
      {
        v73 = v225;
        do
        {
          v74 = *(unsigned __int8 *)v23;
          if (v74 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v74), HIBYTE(*(_DWORD *)(v11 + 4 * v74)), *v16 ^ 0xFFu, (unsigned __int16)*v21, *v16, HIBYTE(*(_DWORD *)(v11 + 4 * v74)) ^ 0xFFu);
            *v21 = result;
            *v16 = BYTE3(result);
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v73;
        }
        while (v73);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 11:
      if (v6)
      {
        do
        {
          v75 = v225;
          do
          {
            v76 = *(unsigned __int8 *)v23;
            if (v76 >= 8)
            {
              result = PDAplusdDA(*v21, *v16, *(_DWORD *)(v11 + 4 * v76), HIBYTE(*(_DWORD *)(v11 + 4 * v76)));
              *v21 = result;
              *v16 = BYTE3(result);
            }
            ++v23;
            ++v21;
            v16 += v17;
            --v75;
          }
          while (v75);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          --v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          v163 = v225;
          v164 = v230;
          do
          {
            v165 = *(unsigned __int8 *)v23;
            if (v165 >= 8)
            {
              result = PDplusdDA((unsigned __int16)*v21, *(_DWORD *)(v11 + 4 * v165), HIBYTE(*(_DWORD *)(v11 + 4 * v165)));
              *v21 = result;
            }
            ++v23;
            ++v21;
            --v163;
          }
          while (v163);
          v23 += v24;
          v21 += v218;
          --v230;
        }
        while (v164 != 1);
      }
      return result;
    case 12:
      if (v6)
      {
        do
        {
          v77 = v225;
          do
          {
            v78 = *(unsigned __int8 *)v23;
            if (v78 >= 8)
            {
              result = PDApluslDA((unsigned __int16)*v21, *v16, (unsigned __int16)*(_DWORD *)(v11 + 4 * v78), HIBYTE(*(_DWORD *)(v11 + 4 * v78)));
              *v21 = result;
              *v16 = BYTE3(result);
            }
            ++v23;
            ++v21;
            v16 += v17;
            --v77;
          }
          while (v77);
          v23 += v24;
          v21 += v218;
          v16 += v222;
          --v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          v166 = v225;
          v167 = v230;
          do
          {
            v168 = *(unsigned __int8 *)v23;
            if (v168 >= 8)
            {
              v169 = (((unsigned __int16)*v21 | ((unsigned __int16)*v21 << 15)) & 0x1F07C1F)
                   + (*(_DWORD *)(result + 4 * v168) & 0x7C1F | (((*(_DWORD *)(result + 4 * v168) >> 5) & 0x1F) << 20));
              *v21 = (((30 * ((v169 >> 5) & 0x100401)) | (15 * ((v169 >> 5) & 0x100401)) | v169) >> 15) & 0x3E0 | ((30 * ((v169 >> 5) & 0x401)) | (15 * ((v169 >> 5) & 0x401)) | v169) & 0x7C1F;
            }
            ++v23;
            ++v21;
            --v166;
          }
          while (v166);
          v23 += v24;
          v21 += v218;
          --v230;
        }
        while (v167 != 1);
      }
      return result;
    case 13:
      do
      {
        v79 = v225;
        do
        {
          v80 = *(unsigned __int8 *)v23;
          if (v80 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v80);
            v81 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v82 = *v16;
                if (v82 >= 8)
                {
                  result = PDAmultiplyPDA((unsigned __int16)*v21, v82, (unsigned __int16)*(_DWORD *)(v11 + 4 * v80), v81, v10);
                  v81 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v81;
              }
              else
              {
                result = PDAmultiplyPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v80), v81, v10);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v79;
        }
        while (v79);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 14:
      do
      {
        v83 = v225;
        do
        {
          v84 = *(unsigned __int8 *)v23;
          if (v84 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v84);
            v85 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v86 = *v16;
                if (v86 >= 8)
                {
                  result = PDAscreenPDA((unsigned __int16)*v21, v86, (unsigned __int16)*(_DWORD *)(v11 + 4 * v84), v85);
                  v85 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v85;
              }
              else
              {
                result = PDAscreenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v84), v85);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v83;
        }
        while (v83);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 15:
      do
      {
        v87 = v225;
        do
        {
          v88 = *(unsigned __int8 *)v23;
          if (v88 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v88);
            v89 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v90 = *v16;
                if (v90 >= 8)
                {
                  result = PDAoverlayPDA((unsigned __int16)*v21, v90, (unsigned __int16)*(_DWORD *)(v11 + 4 * v88), v89);
                  v89 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v89;
              }
              else
              {
                result = PDAoverlayPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v88), v89);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v87;
        }
        while (v87);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 16:
      do
      {
        v91 = v225;
        do
        {
          v92 = *(unsigned __int8 *)v23;
          if (v92 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v92);
            v93 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v94 = *v16;
                if (v94 >= 8)
                {
                  result = PDAdarkenPDA((unsigned __int16)*v21, v94, (unsigned __int16)*(_DWORD *)(v11 + 4 * v92), v93);
                  v93 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v93;
              }
              else
              {
                result = PDAdarkenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v92), v93);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v91;
        }
        while (v91);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 17:
      do
      {
        v95 = v225;
        do
        {
          v96 = *(unsigned __int8 *)v23;
          if (v96 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v96);
            v97 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v98 = *v16;
                if (v98 >= 8)
                {
                  result = PDAlightenPDA((unsigned __int16)*v21, v98, (unsigned __int16)*(_DWORD *)(v11 + 4 * v96), v97);
                  v97 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v97;
              }
              else
              {
                result = PDAlightenPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v96), v97);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v95;
        }
        while (v95);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 18:
      do
      {
        v99 = v225;
        do
        {
          v100 = *(unsigned __int8 *)v23;
          if (v100 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v100);
            v101 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v102 = *v16;
                if (v102 >= 8)
                {
                  result = PDAcolordodgePDA((unsigned __int16)*v21, v102, (unsigned __int16)*(_DWORD *)(v11 + 4 * v100), v101);
                  v101 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v101;
              }
              else
              {
                result = PDAcolordodgePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v100), v101);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v99;
        }
        while (v99);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 19:
      do
      {
        v103 = v225;
        do
        {
          v104 = *(unsigned __int8 *)v23;
          if (v104 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v104);
            v105 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v106 = *v16;
                if (v106 >= 8)
                {
                  result = PDAcolorburnPDA((unsigned __int16)*v21, v106, (unsigned __int16)*(_DWORD *)(v11 + 4 * v104), v105);
                  v105 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v105;
              }
              else
              {
                result = PDAcolorburnPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v104), v105);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v103;
        }
        while (v103);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 20:
      do
      {
        v107 = v225;
        do
        {
          v108 = *(unsigned __int8 *)v23;
          if (v108 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v108);
            v109 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v110 = *v16;
                if (v110 >= 8)
                {
                  result = PDAsoftlightPDA((unsigned __int16)*v21, v110, (unsigned __int16)*(_DWORD *)(v11 + 4 * v108), v109);
                  v109 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v109;
              }
              else
              {
                result = PDAsoftlightPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v108), v109);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v107;
        }
        while (v107);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 21:
      do
      {
        v111 = v225;
        do
        {
          v112 = *(unsigned __int8 *)v23;
          if (v112 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v112);
            v113 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v114 = *v16;
                if (v114 >= 8)
                {
                  result = PDAhardlightPDA((unsigned __int16)*v21, v114, (unsigned __int16)*(_DWORD *)(v11 + 4 * v112), v113);
                  v113 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v113;
              }
              else
              {
                result = PDAhardlightPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v112), v113);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v111;
        }
        while (v111);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 22:
      do
      {
        v115 = v225;
        do
        {
          v116 = *(unsigned __int8 *)v23;
          if (v116 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v116);
            v117 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v118 = *v16;
                if (v118 >= 8)
                {
                  result = PDAdifferencePDA((unsigned __int16)*v21, v118, (unsigned __int16)*(_DWORD *)(v11 + 4 * v116), v117);
                  v117 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v117;
              }
              else
              {
                result = PDAdifferencePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v116), v117);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v115;
        }
        while (v115);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 23:
      do
      {
        v119 = v225;
        do
        {
          v120 = *(unsigned __int8 *)v23;
          if (v120 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v120);
            v121 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v122 = *v16;
                if (v122 >= 8)
                {
                  result = PDAexclusionPDA((unsigned __int16)*v21, v122, (unsigned __int16)*(_DWORD *)(v11 + 4 * v120), v121);
                  v121 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v121;
              }
              else
              {
                result = PDAexclusionPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v120), v121);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v119;
        }
        while (v119);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 24:
      do
      {
        v123 = v225;
        do
        {
          v124 = *(unsigned __int8 *)v23;
          if (v124 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v124);
            v125 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v126 = *v16;
                if (v126 >= 8)
                {
                  result = PDAhuePDA((unsigned __int16)*v21, v126, (unsigned __int16)*(_DWORD *)(v11 + 4 * v124), v125);
                  v125 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v125;
              }
              else
              {
                result = PDAhuePDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v124), v125);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v123;
        }
        while (v123);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 25:
      do
      {
        v127 = v225;
        do
        {
          v128 = *(unsigned __int8 *)v23;
          if (v128 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v128);
            v129 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v130 = *v16;
                if (v130 >= 8)
                {
                  result = PDAsaturationPDA((unsigned __int16)*v21, v130, (unsigned __int16)*(_DWORD *)(v11 + 4 * v128), v129);
                  v129 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v129;
              }
              else
              {
                result = PDAsaturationPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v128), v129);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v127;
        }
        while (v127);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 26:
      do
      {
        v131 = v225;
        do
        {
          v132 = *(unsigned __int8 *)v23;
          if (v132 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v132);
            v133 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v134 = *v16;
                if (v134 >= 8)
                {
                  result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v132), v133, (unsigned __int16)*v21, v134);
                  v133 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v133;
              }
              else
              {
                result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v132), v133, (unsigned __int16)*v21, 0xFFu);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v131;
        }
        while (v131);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    case 27:
      do
      {
        v135 = v225;
        do
        {
          v136 = *(unsigned __int8 *)v23;
          if (v136 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v136);
            v137 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v138 = *v16;
                if (v138 >= 8)
                {
                  result = PDAluminosityPDA((unsigned __int16)*v21, v138, (unsigned __int16)*(_DWORD *)(v11 + 4 * v136), v137);
                  v137 = BYTE3(result);
                }
                *v21 = result;
                *v16 = v137;
              }
              else
              {
                result = PDAluminosityPDA((unsigned __int16)*v21, 0xFFu, (unsigned __int16)*(_DWORD *)(v11 + 4 * v136), v137);
                *v21 = result;
              }
            }
          }
          ++v23;
          ++v21;
          v16 += v17;
          --v135;
        }
        while (v135);
        v23 += v24;
        v21 += v218;
        v16 += v222;
        --v230;
      }
      while (v230);
      return result;
    default:
      return result;
  }
LABEL_112:
  v66 = v225;
  v67 = v230;
  while (1)
  {
    v68 = *(unsigned __int8 *)v23;
    if (v68 >= 0xF8)
      break;
    if (v68 >= 8)
    {
      v69 = (unsigned __int16)*v21;
      v70 = ~((v20 * v68 + ((v20 * v68) >> 8) + 1) >> 8);
      goto LABEL_117;
    }
LABEL_118:
    ++v23;
    ++v21;
    if (!--v66)
    {
      v23 += v24;
      v21 += v218;
      --v230;
      if (v67 == 1)
        return result;
      goto LABEL_112;
    }
  }
  v69 = (unsigned __int16)*v21;
  v70 = v60;
LABEL_117:
  result = PDM(v69, v70);
  *v21 = result;
  goto LABEL_118;
}

uint64_t rgb555_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  __int16 *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  char v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  char v92;
  char v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  char v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  unsigned int v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  char v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  int v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  unsigned int v195;
  char v196;
  unsigned int v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unsigned int v210;
  char v211;
  unsigned int v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 *v220;
  uint64_t v221;
  int v222;
  unint64_t v223;
  unsigned int v224;
  char v225;
  int8x16_t v226;
  unsigned int v227;
  unsigned int v228;
  char *v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 *v236;
  uint64_t v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  char v241;
  unsigned int v242;
  unsigned int v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  unsigned int v255;
  char v256;
  unsigned int v257;
  unsigned int v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  int v268;
  unint64_t v269;
  unsigned int v270;
  char v271;
  unsigned int v272;
  unsigned int v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int8 *v281;
  uint64_t v282;
  int v283;
  unint64_t v284;
  unsigned int v285;
  char v286;
  unsigned int v287;
  unsigned int v288;
  char *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  int v298;
  unint64_t v299;
  unsigned int v300;
  char v301;
  unsigned int v302;
  unsigned int v303;
  char *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int8 *v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  unsigned int v315;
  char v316;
  unsigned int v317;
  unsigned int v318;
  char *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned __int8 *v326;
  uint64_t v327;
  int v328;
  unint64_t v329;
  unsigned int v330;
  char v331;
  unsigned int v332;
  unsigned int v333;
  char *v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int8 *v341;
  uint64_t v342;
  int v343;
  unint64_t v344;
  unsigned int v345;
  char v346;
  unsigned int v347;
  unsigned int v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int8 *v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  unsigned int v360;
  char v361;
  unsigned int v362;
  unsigned int v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned __int8 *v371;
  uint64_t v372;
  int v373;
  unint64_t v374;
  unsigned int v375;
  char v376;
  unsigned int v377;
  unsigned int v378;
  char *v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned __int8 *v386;
  uint64_t v387;
  int v388;
  unint64_t v389;
  unsigned int v390;
  char v391;
  unsigned int v392;
  unsigned int v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned __int8 *v401;
  uint64_t v402;
  int v403;
  unint64_t v404;
  unsigned int v405;
  char v406;
  unsigned int v407;
  unsigned int v408;
  char *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned __int8 *v416;
  uint64_t v417;
  int v418;
  unint64_t v419;
  unsigned int v420;
  char v421;
  unsigned int v422;
  unsigned int v423;
  char *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned __int8 *v431;
  uint64_t v432;
  int v433;
  unint64_t v434;
  unsigned int v435;
  char v436;
  unsigned int v437;
  unsigned int v438;
  char *v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  unsigned int v451;
  unint64_t v452;
  char *v453;
  uint64_t v454;
  char *v455;
  char *v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  int v463;
  unint64_t v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  char *v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  int v477;
  unint64_t v478;
  unsigned int v479;
  char *v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unsigned __int8 *v487;
  int v488;
  unint64_t v489;
  unsigned int v490;
  unsigned int v491;
  char *v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  int v499;
  unint64_t v500;
  unsigned int v501;
  char v502;
  unsigned int v503;
  char *v504;
  uint64_t v505;
  char *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  unsigned int v512;
  unint64_t v513;
  unsigned int v514;
  char *v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  unint64_t v527;
  char *v528;
  uint64_t v529;
  char *v530;
  char *v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unsigned __int8 *v599;
  char *v600;
  int v601;
  int v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  char *v624;

  v3 = *(_QWORD *)(result + 48);
  v4 = *(_QWORD *)(result + 136);
  v6 = *(int *)(result + 12);
  v5 = *(int *)(result + 16);
  if (v3)
  {
    v7 = *(int *)(result + 32);
    v8 = (char *)(v3 + v6 + (int)v7 * (uint64_t)(int)v5);
    v602 = -1;
    if (!v4)
      return result;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v602 = 0;
    if (!v4)
      return result;
  }
  v9 = *(_DWORD *)(result + 4);
  v10 = *(_DWORD *)(result + 8);
  v12 = *(_QWORD *)(result + 88);
  v11 = *(unsigned __int8 **)(result + 96);
  v13 = (unint64_t)*(int *)(result + 28) >> 1;
  v14 = (__int16 *)(*(_QWORD *)(result + 40) + 2 * (v6 + v13 * v5));
  v15 = *(int *)(result + 124);
  v16 = (char *)(v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v15);
  v17 = *(int *)(result + 56);
  v18 = *(int *)(result + 60);
  v19 = BYTE1(*(_DWORD *)result);
  if (v19 == 3)
  {
    v623 = *(int *)(result + 124);
    v598 = *(_QWORD *)(result + 96);
    v22 = rgb555_colorlookup(3, (unsigned __int16 *)v12, v11);
    v15 = v623;
    v12 = v22;
    v23 = (unsigned __int8 *)(v22 + 512);
    result = v598;
    if (v598)
      v11 = v23;
    else
      v11 = 0;
    if (v598)
      v24 = 16;
    else
      v24 = 0;
    v575 = v24;
    v20 = 16;
    v21 = v598 != 0;
    v25 = 16;
    v26 = 16;
    goto LABEL_26;
  }
  if (v19 != 1)
  {
    v26 = *(_DWORD *)(result + 64);
    v25 = *(_DWORD *)(result + 68);
    v20 = (unint64_t)*(int *)(result + 76) >> 1;
    if (v11)
    {
      v575 = *(int *)(result + 80);
      v21 = 1;
    }
    else
    {
      v575 = 0;
      v21 = 0;
    }
LABEL_26:
    v31 = v12 + 2 * v20 * v25;
    v602 &= 1u;
    v30 = 1;
    v600 = (char *)v12;
    v624 = (char *)v12;
    goto LABEL_27;
  }
  v20 = (unint64_t)*(int *)(result + 76) >> 1;
  if (v11)
  {
    v575 = *(int *)(result + 80);
    v11 += v17 + (int)v575 * (uint64_t)(int)v18;
    v21 = -1;
  }
  else
  {
    v575 = 0;
    v21 = 0;
  }
  v624 = (char *)(v12 + 2 * (v17 + v20 * v18));
  if (v20 == v13 && (char *)v14 - v624 >= 1)
  {
    if (v9 >= (uint64_t)((unint64_t)((char *)v14 - v624) >> 1))
    {
      v14 += v9 - 1;
      v624 += 2 * v9 - 2;
      v16 += v9 - 1;
      v8 += v602 & (v9 - 1);
      v30 = -1;
      v20 = (unint64_t)*(int *)(result + 28) >> 1;
      v11 += v21 & (v9 - 1);
      goto LABEL_24;
    }
    v27 = v10 - 1;
    v28 = v13 * v27;
    v29 = &v624[2 * v13 * v27];
    if (v14 <= (__int16 *)&v29[2 * v9 - 2])
    {
      v20 = -(uint64_t)v13;
      v16 += v15 * v27;
      v15 = -v15;
      v8 += v7 * v27;
      v7 = -v7;
      v602 &= 1u;
      v11 += v575 * v27;
      v575 = -v575;
      v21 &= 1u;
      v30 = 1;
      v624 = v29;
      v13 = -(uint64_t)v13;
      v14 += v28;
      goto LABEL_24;
    }
  }
  v602 &= 1u;
  v21 &= 1u;
  v30 = 1;
LABEL_24:
  v31 = 0;
  v600 = 0;
  v12 = -1;
  v25 = v575;
  v26 = v20;
LABEL_27:
  v32 = v30 * v9;
  v576 = v9;
  v577 = v31;
  v601 = v10;
  v612 = v21;
  if (v31)
  {
    v33 = (int)v18 % v25;
    v572 = v20;
    v34 = &v624[2 * v20 * v33];
    v35 = (int)v17 % v26;
    v12 = (unint64_t)&v34[2 * v26];
    v36 = &v11[v575 * v33 + v35];
    if ((v21 & 1) != 0)
      v11 = v36;
    v599 = v11;
    v600 = &v34[2 * v35];
    v624 = v600;
  }
  else
  {
    v599 = v11;
    v572 = v20 - v32;
    v575 -= v21 * v9;
  }
  v573 = v13 - v32;
  v574 = v15 - v32;
  v571 = v7 - v602 * v9;
  switch(a2)
  {
    case 0:
      v37 = v30;
      if (v602)
      {
        while (1)
        {
          v38 = v576;
          do
          {
            v39 = *v16;
            if (v39 < 0xF8)
            {
              if (v39 < 8)
                goto LABEL_40;
              result = PDAM((unsigned __int16)*v14, *v8, ~(_BYTE)v39);
              *v14 = result;
              v40 = BYTE3(result);
            }
            else
            {
              LOBYTE(v40) = 0;
              *v14 = 0;
            }
            *v8 = v40;
LABEL_40:
            v16 += v37;
            v8 += v602;
            v14 += v37;
            --v38;
          }
          while (v38);
          v16 += v574;
          v14 += v573;
          v8 += v571;
          if (!--v601)
            return result;
        }
      }
LABEL_682:
      v444 = v9;
      while (1)
      {
        v445 = *v16;
        if (v445 > 0xF7)
          break;
        if (v445 >= 8)
        {
          result = PDM((unsigned __int16)*v14, ~(_BYTE)v445);
          goto LABEL_687;
        }
LABEL_688:
        v16 += v37;
        v14 += v37;
        if (!--v444)
        {
          v16 += v574;
          v14 += v573;
          if (!--v601)
            return result;
          goto LABEL_682;
        }
      }
      result = 0;
LABEL_687:
      *v14 = result;
      goto LABEL_688;
    case 1:
      if (v602)
      {
        v41 = v30;
        v42 = v602;
        if (v21)
        {
          v43 = v21;
          v44 = -(uint64_t)v26;
          v613 = -(uint64_t)(v572 * v25);
          v589 = -(v575 * v25);
          v45 = (char *)v599;
          while (1)
          {
            v46 = v577;
            v47 = v576;
            do
            {
              v48 = *v16;
              if (v48 < 0xF8)
              {
                if (v48 < 8)
                  goto LABEL_53;
                v50 = v12;
                result = PDAMplusDAM(*(unsigned __int16 *)v624, *v45, v48, (unsigned __int16)*v14, *v8, v48 ^ 0xFF);
                v42 = v602;
                v12 = v50;
                v46 = v577;
                *v14 = result;
                v49 = BYTE3(result);
              }
              else
              {
                *v14 = *(_WORD *)v624;
                LOBYTE(v49) = *v45;
              }
              *v8 = v49;
LABEL_53:
              v16 += v41;
              v8 += v42;
              v51 = &v624[2 * v41];
              if ((unint64_t)v51 >= v12)
                v52 = v44;
              else
                v52 = 0;
              v45 += v43 + v52;
              v624 = &v51[2 * v52];
              v14 += v41;
              --v47;
            }
            while (v47);
            if (v46)
            {
              v53 = &v600[2 * v572];
              v54 = v589;
              if ((unint64_t)v53 < v46)
                v54 = 0;
              v45 = (char *)&v599[v575 + v54];
              v55 = v613;
              if ((unint64_t)v53 < v46)
                v55 = 0;
              v12 += 2 * v55 + 2 * v572;
              v599 += v575 + v54;
              v600 = &v53[2 * v55];
              v624 = v600;
            }
            else
            {
              v624 += 2 * v572;
              v45 += v575;
            }
            v16 += v574;
            v14 += v573;
            v8 += v571;
            if (!--v601)
              return result;
          }
        }
        v522 = -(uint64_t)v26;
        v523 = -(uint64_t)(v572 * v25);
LABEL_814:
        v524 = v576;
        while (1)
        {
          v525 = *v16;
          if (v525 >= 0xF8)
            break;
          if (v525 >= 8)
          {
            v527 = v12;
            result = PDAMplusDAM(*(unsigned __int16 *)v624, 255, v525, (unsigned __int16)*v14, *v8, v525 ^ 0xFF);
            v42 = v602;
            v12 = v527;
            *v14 = result;
            v526 = BYTE3(result);
            goto LABEL_819;
          }
LABEL_820:
          v16 += v41;
          v8 += v42;
          v528 = &v624[2 * v41];
          if ((unint64_t)v528 >= v12)
            v529 = v522;
          else
            v529 = 0;
          v624 = &v528[2 * v529];
          v14 += v41;
          if (!--v524)
          {
            v16 += v574;
            v14 += v573;
            v8 += v571;
            v530 = v600;
            v531 = &v600[2 * v572];
            if ((unint64_t)v531 >= v577)
              v532 = v523;
            else
              v532 = 0;
            v533 = &v531[2 * v532];
            v534 = v12 + 2 * v532 + 2 * v572;
            if (v577)
            {
              v12 = v534;
              v530 = v533;
            }
            v600 = v530;
            if (!v577)
              v533 = &v624[2 * v572];
            v624 = v533;
            if (!--v601)
              return result;
            goto LABEL_814;
          }
        }
        *v14 = *(_WORD *)v624;
        LOBYTE(v526) = -1;
LABEL_819:
        *v8 = v526;
        goto LABEL_820;
      }
      v446 = v30;
      v447 = -(uint64_t)v26;
      v448 = -(uint64_t)(v572 * v25);
      v449 = 2 * v30;
LABEL_692:
      v450 = v576;
      while (1)
      {
        v451 = *v16;
        if (v451 >= 0xF8)
          break;
        if (v451 >= 8)
        {
          v452 = v12;
          result = PDMplusDM(*(unsigned __int16 *)v624, v451, (unsigned __int16)*v14, v451 ^ 0xFF);
          v12 = v452;
          goto LABEL_697;
        }
LABEL_698:
        v16 += v446;
        v453 = &v624[2 * v446];
        if ((unint64_t)v453 >= v12)
          v454 = v447;
        else
          v454 = 0;
        v624 = &v453[2 * v454];
        v14 = (__int16 *)((char *)v14 + v449);
        if (!--v450)
        {
          v16 += v574;
          v14 += v573;
          v455 = v600;
          v456 = &v600[2 * v572];
          if ((unint64_t)v456 >= v577)
            v457 = v448;
          else
            v457 = 0;
          v458 = &v456[2 * v457];
          v459 = v12 + 2 * v457 + 2 * v572;
          if (v577)
          {
            v12 = v459;
            v455 = v458;
          }
          v600 = v455;
          if (!v577)
            v458 = &v624[2 * v572];
          v624 = v458;
          if (!--v601)
            return result;
          goto LABEL_692;
        }
      }
      result = *(unsigned __int16 *)v624;
LABEL_697:
      *v14 = result;
      goto LABEL_698;
    case 2:
      v56 = v30;
      if (v602)
      {
        v57 = v602;
        v58 = v21;
        v590 = -(uint64_t)(v572 * v25);
        v578 = -(v575 * v25);
        v59 = (char *)v599;
        v60 = -(uint64_t)v26;
        v614 = v602;
        while (1)
        {
          v61 = v576;
          v603 = v12;
          do
          {
            v62 = *v16;
            if (v62 < 0xF8)
            {
              if (v62 < 8)
                goto LABEL_79;
              result = PDAM(*(unsigned __int16 *)v624, *v59, v62);
              v12 = v603;
              v57 = v614;
              v63 = BYTE3(result);
              if (BYTE3(result) < 8u)
                goto LABEL_79;
              v64 = (unsigned __int16)*v14;
              v65 = *v8;
              LODWORD(result) = (unsigned __int16)result;
LABEL_77:
              result = PDAplusDAM(result, v63, v64, v65, v63 ^ 0xFF);
              v12 = v603;
              v57 = v614;
              *v14 = result;
              v63 = BYTE3(result);
              goto LABEL_78;
            }
            v63 = *v59;
            if (v63 < 0xF8)
            {
              if (v63 < 8)
                goto LABEL_79;
              LODWORD(result) = *(unsigned __int16 *)v624;
              v64 = (unsigned __int16)*v14;
              v65 = *v8;
              goto LABEL_77;
            }
            *v14 = *(_WORD *)v624;
LABEL_78:
            *v8 = v63;
LABEL_79:
            v16 += v56;
            v8 += v57;
            v66 = &v624[2 * v56];
            if ((unint64_t)v66 >= v12)
              v67 = v60;
            else
              v67 = 0;
            v59 += v58 + v67;
            v624 = &v66[2 * v67];
            v14 += v56;
            --v61;
          }
          while (v61);
          if (v577)
          {
            v68 = &v600[2 * v572];
            v69 = v578;
            if ((unint64_t)v68 < v577)
              v69 = 0;
            v59 = (char *)&v599[v575 + v69];
            v70 = v590;
            if ((unint64_t)v68 < v577)
              v70 = 0;
            v12 += 2 * v70 + 2 * v572;
            v599 += v575 + v69;
            v600 = &v68[2 * v70];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v59 += v575;
          }
          v16 += v574;
          v14 += v573;
          v8 += v571;
          if (!--v601)
            return result;
        }
      }
      v460 = v21;
      v461 = -(uint64_t)v26;
      v620 = -(uint64_t)(v572 * v25);
      v608 = -(v575 * v25);
      v462 = (char *)v599;
LABEL_712:
      v463 = v576;
      v464 = v12;
      while (1)
      {
        v465 = *v16;
        if (v465 < 0xF8)
        {
          if (v465 >= 8)
          {
            result = PDAM(*(unsigned __int16 *)v624, *v462, v465);
            v12 = v464;
            if (BYTE3(result) >= 8u)
            {
              v467 = (unsigned __int16)*v14;
              v468 = ~(_DWORD)result >> 24;
              goto LABEL_721;
            }
          }
        }
        else
        {
          v466 = *v462;
          if (v466 >= 0xF8)
          {
            result = *(unsigned __int16 *)v624;
            goto LABEL_722;
          }
          if (v466 >= 8)
          {
            LOWORD(result) = *(_WORD *)v624;
            v467 = (unsigned __int16)*v14;
            v468 = v466 ^ 0xFF;
LABEL_721:
            result = PDplusDM(result, v467, v468);
            v12 = v464;
LABEL_722:
            *v14 = result;
          }
        }
        v16 += v56;
        v469 = &v624[2 * v56];
        if ((unint64_t)v469 >= v12)
          v470 = v461;
        else
          v470 = 0;
        v462 += v460 + v470;
        v624 = &v469[2 * v470];
        v14 += v56;
        if (!--v463)
        {
          if (v577)
          {
            v471 = &v600[2 * v572];
            v472 = v608;
            if ((unint64_t)v471 < v577)
              v472 = 0;
            v462 = (char *)&v599[v575 + v472];
            v473 = v620;
            if ((unint64_t)v471 < v577)
              v473 = 0;
            v12 += 2 * v473 + 2 * v572;
            v599 += v575 + v472;
            v600 = &v471[2 * v473];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v462 += v575;
          }
          v16 += v574;
          v14 += v573;
          if (!--v601)
            return result;
          goto LABEL_712;
        }
      }
    case 3:
      v71 = v30;
      v579 = -(uint64_t)(v572 * v25);
      v550 = -(v575 * v25);
      v72 = 2 * v30;
      v73 = (char *)v599;
      v74 = -(uint64_t)v26;
      while (1)
      {
        v75 = v576;
        v76 = v12;
        do
        {
          v77 = *v16;
          if (v77 < 0xF8)
          {
            if (v77 < 8)
              goto LABEL_105;
            if (v612)
              v79 = *v73;
            else
              v79 = -1;
            result = PDAMplusDAM(*(unsigned __int16 *)v624, v79, ((unsigned __int16)(*v8 * (_WORD)v77+ ((*v8 * v77) >> 8)+ 1) >> 8), (unsigned __int16)*v14, *v8, v77 ^ 0xFF);
          }
          else
          {
            if (v612)
              v78 = *v73;
            else
              v78 = -1;
            result = PDAM(*(unsigned __int16 *)v624, v78, *v8);
          }
          *v14 = result;
          *v8 = BYTE3(result);
          v12 = v76;
LABEL_105:
          v16 += v71;
          v8 += v602;
          v80 = &v624[2 * v71];
          if ((unint64_t)v80 >= v12)
            v81 = v74;
          else
            v81 = 0;
          v73 += v612 + v81;
          v624 = &v80[2 * v81];
          v14 = (__int16 *)((char *)v14 + v72);
          --v75;
        }
        while (v75);
        if (v577)
        {
          v82 = &v600[2 * v572];
          v83 = v550;
          if ((unint64_t)v82 < v577)
            v83 = 0;
          v73 = (char *)&v599[v575 + v83];
          v84 = v579;
          if ((unint64_t)v82 < v577)
            v84 = 0;
          v12 += 2 * v84 + 2 * v572;
          v599 += v575 + v83;
          v600 = &v82[2 * v84];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v73 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        if (!--v601)
          return result;
      }
    case 4:
      v85 = v30;
      v580 = -(uint64_t)(v572 * v25);
      v551 = -(v575 * v25);
      v86 = 2 * v30;
      v87 = (char *)v599;
      v88 = -(uint64_t)v26;
      while (1)
      {
        v89 = v576;
        v90 = v12;
        do
        {
          v91 = *v16;
          if (v91 < 0xF8)
          {
            if (v91 < 8)
              goto LABEL_131;
            if (v612)
              v93 = *v87;
            else
              v93 = -1;
            result = PDAMplusDAM(*(unsigned __int16 *)v624, v93, ((unsigned __int16)((*v8 ^ 0xFF) * v91+ (((*v8 ^ 0xFF) * v91) >> 8)+ 1) >> 8), (unsigned __int16)*v14, *v8, v91 ^ 0xFF);
          }
          else
          {
            if (v612)
              v92 = *v87;
            else
              v92 = -1;
            result = PDAM(*(unsigned __int16 *)v624, v92, ~*v8);
          }
          *v14 = result;
          *v8 = BYTE3(result);
          v12 = v90;
LABEL_131:
          v16 += v85;
          v8 += v602;
          v94 = &v624[2 * v85];
          if ((unint64_t)v94 >= v12)
            v95 = v88;
          else
            v95 = 0;
          v87 += v612 + v95;
          v624 = &v94[2 * v95];
          v14 = (__int16 *)((char *)v14 + v86);
          --v89;
        }
        while (v89);
        if (v577)
        {
          v96 = &v600[2 * v572];
          v97 = v551;
          if ((unint64_t)v96 < v577)
            v97 = 0;
          v87 = (char *)&v599[v575 + v97];
          v98 = v580;
          if ((unint64_t)v96 < v577)
            v98 = 0;
          v12 += 2 * v98 + 2 * v572;
          v599 += v575 + v97;
          v600 = &v96[2 * v98];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v87 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        if (!--v601)
          return result;
      }
    case 5:
      v99 = v30;
      v100 = v602;
      v615 = v21;
      v581 = -(v575 * v25);
      v591 = -(uint64_t)(v572 * v25);
      v101 = 2 * v30;
      v102 = (char *)v599;
      v103 = -(uint64_t)v26;
      do
      {
        v104 = v576;
        v604 = v12;
        do
        {
          v105 = *v16;
          if (v105 >= 8)
          {
            v106 = *v8;
            v107 = v101;
            v108 = PDAM(*(unsigned __int16 *)v624, *v102, v105);
            result = PDAMplusDAM((unsigned __int16)v108, SHIBYTE(v108), v106, (unsigned __int16)*v14, v106, HIBYTE(v108) ^ 0xFF);
            v101 = v107;
            v12 = v604;
            *v14 = result;
            *v8 = BYTE3(result);
          }
          v16 += v99;
          v8 += v100;
          v109 = &v624[2 * v99];
          if ((unint64_t)v109 >= v12)
            v110 = v103;
          else
            v110 = 0;
          v102 += v615 + v110;
          v624 = &v109[2 * v110];
          v14 = (__int16 *)((char *)v14 + v101);
          --v104;
        }
        while (v104);
        if (v577)
        {
          v111 = &v600[2 * v572];
          v112 = v581;
          if ((unint64_t)v111 < v577)
            v112 = 0;
          v102 = (char *)&v599[v575 + v112];
          v113 = v591;
          if ((unint64_t)v111 < v577)
            v113 = 0;
          v12 += 2 * v113 + 2 * v572;
          v599 += v575 + v112;
          v600 = &v111[2 * v113];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v102 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 6:
      v114 = v30;
      v115 = v602;
      v582 = -(uint64_t)(v572 * v25);
      v592 = v602;
      v552 = -(v575 * v25);
      v116 = 2 * v30;
      v117 = (char *)v599;
      v118 = -(uint64_t)v26;
      while (1)
      {
        v119 = v576;
        v605 = v12;
        do
        {
          v120 = *v16;
          if (v120 < 8)
            goto LABEL_175;
          v121 = *v8;
          if (v121 > 7)
          {
            if (v121 > 0xF7)
              goto LABEL_175;
            if (v612)
              v123 = *v117;
            else
              v123 = -1;
            result = PDAplusDAM((unsigned __int16)*v14, v121, *(unsigned __int16 *)v624, v123, ((unsigned __int16)(~(_BYTE)v121 * (_WORD)v120+ ((~(_BYTE)v121 * v120) >> 8)+ 1) >> 8));
          }
          else
          {
            if (v612)
              v122 = *v117;
            else
              v122 = -1;
            result = PDAM(*(unsigned __int16 *)v624, v122, v120);
          }
          *v14 = result;
          *v8 = BYTE3(result);
          v12 = v605;
          v115 = v592;
LABEL_175:
          v16 += v114;
          v8 += v115;
          v124 = &v624[2 * v114];
          if ((unint64_t)v124 >= v12)
            v125 = v118;
          else
            v125 = 0;
          v117 += v612 + v125;
          v624 = &v124[2 * v125];
          v14 = (__int16 *)((char *)v14 + v116);
          --v119;
        }
        while (v119);
        if (v577)
        {
          v126 = &v600[2 * v572];
          v127 = v552;
          if ((unint64_t)v126 < v577)
            v127 = 0;
          v117 = (char *)&v599[v575 + v127];
          v128 = v582;
          if ((unint64_t)v126 < v577)
            v128 = 0;
          v12 += 2 * v128 + 2 * v572;
          v599 += v575 + v127;
          v600 = &v126[2 * v128];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v117 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        if (!--v601)
          return result;
      }
    case 7:
      v129 = v30;
      if (v602)
      {
        v616 = v21;
        v593 = -(uint64_t)(v572 * v25);
        v583 = -(v575 * v25);
        v130 = (char *)v599;
        v131 = -(uint64_t)v26;
        while (1)
        {
          v132 = v576;
          v133 = v12;
          do
          {
            v134 = *v16;
            if (v134 < 0xF8)
            {
              if (v134 < 8)
                goto LABEL_196;
              result = PDAMplusDAM((unsigned __int16)*v14, *v8, ((unsigned __int16)(*v130 * (_WORD)v134+ ((*v130 * v134) >> 8)+ 1) >> 8), (unsigned __int16)*v14, *v8, v134 ^ 0xFF);
            }
            else
            {
              result = PDAM((unsigned __int16)*v14, *v8, *v130);
            }
            v12 = v133;
            *v14 = result;
            *v8 = BYTE3(result);
LABEL_196:
            v16 += v129;
            v8 += v602;
            v135 = &v624[2 * v129];
            if ((unint64_t)v135 >= v12)
              v136 = v131;
            else
              v136 = 0;
            v130 += v616 + v136;
            v624 = &v135[2 * v136];
            v14 += v129;
            --v132;
          }
          while (v132);
          if (v577)
          {
            v137 = &v600[2 * v572];
            v138 = v583;
            if ((unint64_t)v137 < v577)
              v138 = 0;
            v130 = (char *)&v599[v575 + v138];
            v139 = v593;
            if ((unint64_t)v137 < v577)
              v139 = 0;
            v12 += 2 * v139 + 2 * v572;
            v599 += v575 + v138;
            v600 = &v137[2 * v139];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v130 += v575;
          }
          v16 += v574;
          v14 += v573;
          v8 += v571;
          if (!--v601)
            return result;
        }
      }
      v474 = v21;
      v475 = -(uint64_t)v26;
      v621 = -(uint64_t)(v572 * v25);
      v609 = -(v575 * v25);
      v476 = (char *)v599;
LABEL_737:
      v477 = v576;
      v478 = v12;
      while (1)
      {
        v479 = *v16;
        if (v479 == 248)
          break;
        if (v479 >= 8)
        {
          result = PDMplusDM((unsigned __int16)*v14, ((unsigned __int16)(*v476 * (_WORD)v479+ ((*v476 * v479) >> 8)+ 1) >> 8), (unsigned __int16)*v14, v479 ^ 0xFF);
          goto LABEL_742;
        }
LABEL_743:
        v16 += v129;
        v480 = &v624[2 * v129];
        if ((unint64_t)v480 >= v12)
          v481 = v475;
        else
          v481 = 0;
        v476 += v474 + v481;
        v624 = &v480[2 * v481];
        v14 += v129;
        if (!--v477)
        {
          if (v577)
          {
            v482 = &v600[2 * v572];
            v483 = v609;
            if ((unint64_t)v482 < v577)
              v483 = 0;
            v476 = (char *)&v599[v575 + v483];
            v484 = v621;
            if ((unint64_t)v482 < v577)
              v484 = 0;
            v12 += 2 * v484 + 2 * v572;
            v599 += v575 + v483;
            v600 = &v482[2 * v484];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v476 += v575;
          }
          v16 += v574;
          v14 += v573;
          if (!--v601)
            return result;
          goto LABEL_737;
        }
      }
      result = PDM((unsigned __int16)*v14, *v476);
LABEL_742:
      v12 = v478;
      *v14 = result;
      goto LABEL_743;
    case 8:
      v140 = v30;
      if (v602)
      {
        v617 = v21;
        v594 = -(uint64_t)(v572 * v25);
        v584 = -(v575 * v25);
        v141 = v599;
        v142 = -(uint64_t)v26;
        while (1)
        {
          v143 = v576;
          v144 = v12;
          do
          {
            v145 = *v16;
            if (v145 < 0xF8)
            {
              if (v145 < 8)
                goto LABEL_217;
              v146 = (unsigned __int16)*v14;
              v147 = *v8;
              v148 = ~((*v141 * v145 + ((*v141 * v145) >> 8) + 1) >> 8);
            }
            else
            {
              v146 = (unsigned __int16)*v14;
              v147 = *v8;
              v148 = ~*v141;
            }
            result = PDAM(v146, v147, v148);
            *v14 = result;
            *v8 = BYTE3(result);
            v12 = v144;
LABEL_217:
            v16 += v140;
            v8 += v602;
            v149 = &v624[2 * v140];
            if ((unint64_t)v149 >= v12)
              v150 = v142;
            else
              v150 = 0;
            v141 += v617 + v150;
            v624 = &v149[2 * v150];
            v14 += v140;
            --v143;
          }
          while (v143);
          if (v577)
          {
            v151 = &v600[2 * v572];
            v152 = v584;
            if ((unint64_t)v151 < v577)
              v152 = 0;
            v141 = &v599[v575 + v152];
            v153 = v594;
            if ((unint64_t)v151 < v577)
              v153 = 0;
            v12 += 2 * v153 + 2 * v572;
            v599 += v575 + v152;
            v600 = &v151[2 * v153];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v141 += v575;
          }
          v16 += v574;
          v14 += v573;
          v8 += v571;
          if (!--v601)
            return result;
        }
      }
      v485 = v21;
      v486 = -(uint64_t)v26;
      v622 = -(uint64_t)(v572 * v25);
      v610 = -(v575 * v25);
      v487 = v599;
      break;
    case 9:
      v154 = v30;
      v155 = v602;
      v156 = v21;
      v585 = -(uint64_t)(v572 * v25);
      v595 = v602;
      v553 = -(v575 * v25);
      v157 = 2 * v30;
      v158 = (char *)v599;
      result = -(uint64_t)v26;
      v618 = result;
      do
      {
        v159 = v576;
        v606 = v12;
        do
        {
          v160 = *v16;
          if (v160 >= 8)
          {
            v161 = *v8;
            v162 = v154;
            v163 = PDAM(*(unsigned __int16 *)v624, *v158, *v16);
            v164 = PDAMplusDAM((unsigned __int16)v163, SBYTE3(v163), v161 ^ 0xFFu, (unsigned __int16)*v14, v161, (~(_BYTE)v160 + BYTE3(v163)));
            v154 = v162;
            v155 = v595;
            *v14 = v164;
            v165 = HIBYTE(v164);
            v12 = v606;
            result = v618;
            *v8 = v165;
          }
          v16 += v154;
          v8 += v155;
          v166 = &v624[2 * v154];
          if ((unint64_t)v166 >= v12)
            v167 = result;
          else
            v167 = 0;
          v158 += v156 + v167;
          v624 = &v166[2 * v167];
          v14 = (__int16 *)((char *)v14 + v157);
          --v159;
        }
        while (v159);
        if (v577)
        {
          v168 = &v600[2 * v572];
          v169 = v553;
          if ((unint64_t)v168 < v577)
            v169 = 0;
          v158 = (char *)&v599[v575 + v169];
          v170 = v585;
          if ((unint64_t)v168 < v577)
            v170 = 0;
          v12 += 2 * v170 + 2 * v572;
          v599 += v575 + v169;
          v600 = &v168[2 * v170];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v158 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 10:
      v171 = v30;
      v172 = v602;
      v173 = v612;
      v586 = -(v575 * v25);
      v596 = -(uint64_t)(v572 * v25);
      v174 = 2 * v30;
      v175 = (char *)v599;
      result = -(uint64_t)v26;
      v619 = result;
      do
      {
        v176 = v576;
        v607 = v12;
        do
        {
          v177 = *v16;
          if (v177 >= 8)
          {
            v178 = *v8;
            v179 = v171;
            v180 = PDAM(*(unsigned __int16 *)v624, *v175, v177);
            v181 = PDAMplusDAM((unsigned __int16)v180, SHIBYTE(v180), v178 ^ 0xFFu, (unsigned __int16)*v14, v178, HIBYTE(v180) ^ 0xFF);
            v171 = v179;
            *v14 = v181;
            v182 = HIBYTE(v181);
            v12 = v607;
            result = v619;
            *v8 = v182;
          }
          v16 += v171;
          v8 += v172;
          v183 = &v624[2 * v171];
          if ((unint64_t)v183 >= v12)
            v184 = result;
          else
            v184 = 0;
          v175 += v173 + v184;
          v624 = &v183[2 * v184];
          v14 = (__int16 *)((char *)v14 + v174);
          --v176;
        }
        while (v176);
        if (v577)
        {
          v185 = &v600[2 * v572];
          v186 = v586;
          if ((unint64_t)v185 < v577)
            v186 = 0;
          v175 = (char *)&v599[v575 + v186];
          v187 = v596;
          if ((unint64_t)v185 < v577)
            v187 = 0;
          v12 += 2 * v187 + 2 * v572;
          v599 += v575 + v186;
          v600 = &v185[2 * v187];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v175 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 11:
      v188 = v30;
      if (v602)
      {
        v189 = v602;
        v190 = v21;
        v587 = -(uint64_t)(v572 * v25);
        v554 = -(v575 * v25);
        v191 = (char *)v599;
        v192 = -(uint64_t)v26;
        do
        {
          v193 = v576;
          v194 = v12;
          do
          {
            v195 = *v16;
            if (v195 >= 8)
            {
              if (v612)
                v196 = *v191;
              else
                v196 = -1;
              v197 = PDAM(*(unsigned __int16 *)v624, v196, v195);
              result = PDAplusdDA(*v14, *v8, v197, HIBYTE(v197));
              *v14 = result;
              *v8 = BYTE3(result);
              v12 = v194;
              v189 = v602;
              v190 = v612;
            }
            v16 += v188;
            v8 += v189;
            v198 = &v624[2 * v188];
            if ((unint64_t)v198 >= v12)
              v199 = v192;
            else
              v199 = 0;
            v191 += v190 + v199;
            v624 = &v198[2 * v199];
            v14 += v188;
            --v193;
          }
          while (v193);
          if (v577)
          {
            v200 = &v600[2 * v572];
            v201 = v554;
            if ((unint64_t)v200 < v577)
              v201 = 0;
            v191 = (char *)&v599[v575 + v201];
            v202 = v587;
            if ((unint64_t)v200 < v577)
              v202 = 0;
            v12 += 2 * v202 + 2 * v572;
            v599 += v575 + v201;
            v600 = &v200[2 * v202];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v191 += v575;
          }
          v16 += v574;
          v14 += v573;
          v8 += v571;
          --v601;
        }
        while (v601);
      }
      else
      {
        v497 = -(uint64_t)v26;
        v611 = -(uint64_t)(v572 * v25);
        v597 = -(v575 * v25);
        v498 = (char *)v599;
        do
        {
          v499 = v576;
          v500 = v12;
          do
          {
            v501 = *v16;
            if (v501 >= 8)
            {
              if (v612)
                v502 = *v498;
              else
                v502 = -1;
              v503 = PDAM(*(unsigned __int16 *)v624, v502, v501);
              result = PDplusdDA((unsigned __int16)*v14, v503, HIBYTE(v503));
              *v14 = result;
              v12 = v500;
            }
            v16 += v188;
            v504 = &v624[2 * v188];
            if ((unint64_t)v504 >= v12)
              v505 = v497;
            else
              v505 = 0;
            v498 += v612 + v505;
            v624 = &v504[2 * v505];
            v14 += v188;
            --v499;
          }
          while (v499);
          if (v577)
          {
            v506 = &v600[2 * v572];
            v507 = v597;
            if ((unint64_t)v506 < v577)
              v507 = 0;
            v498 = (char *)&v599[v575 + v507];
            v508 = v611;
            if ((unint64_t)v506 < v577)
              v508 = 0;
            v12 += 2 * v508 + 2 * v572;
            v599 += v575 + v507;
            v600 = &v506[2 * v508];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v498 += v575;
          }
          v16 += v574;
          v14 += v573;
          --v601;
        }
        while (v601);
      }
      return result;
    case 12:
      v203 = v30;
      if (v602)
      {
        v204 = v602;
        v205 = v21;
        v588 = -(uint64_t)(v572 * v25);
        v555 = -(v575 * v25);
        v206 = (char *)v599;
        v207 = -(uint64_t)v26;
        do
        {
          v208 = v576;
          v209 = v12;
          do
          {
            v210 = *v16;
            if (v210 >= 8)
            {
              if (v612)
                v211 = *v206;
              else
                v211 = -1;
              v212 = PDAM(*(unsigned __int16 *)v624, v211, v210);
              result = PDApluslDA((unsigned __int16)*v14, *v8, (unsigned __int16)v212, HIBYTE(v212));
              *v14 = result;
              *v8 = BYTE3(result);
              v12 = v209;
              v204 = v602;
              v205 = v612;
            }
            v16 += v203;
            v8 += v204;
            v213 = &v624[2 * v203];
            if ((unint64_t)v213 >= v12)
              v214 = v207;
            else
              v214 = 0;
            v206 += v205 + v214;
            v624 = &v213[2 * v214];
            v14 += v203;
            --v208;
          }
          while (v208);
          if (v577)
          {
            v215 = &v600[2 * v572];
            v216 = v555;
            if ((unint64_t)v215 < v577)
              v216 = 0;
            v206 = (char *)&v599[v575 + v216];
            v217 = v588;
            if ((unint64_t)v215 < v577)
              v217 = 0;
            v12 += 2 * v217 + 2 * v572;
            v599 += v575 + v216;
            v600 = &v215[2 * v217];
            v624 = v600;
          }
          else
          {
            v624 += 2 * v572;
            v206 += v575;
          }
          v16 += v574;
          v14 += v573;
          v8 += v571;
          --v601;
        }
        while (v601);
      }
      else
      {
        v509 = -(uint64_t)v26;
        v510 = -(uint64_t)(v572 * v25);
        do
        {
          v511 = v9;
          do
          {
            v512 = *v16;
            if (v512 >= 8)
            {
              v513 = v12;
              result = PDM(*(unsigned __int16 *)v624, v512);
              v12 = v513;
              v514 = (((unsigned __int16)*v14 | ((unsigned __int16)*v14 << 15)) & 0x1F07C1F)
                   + ((result | ((_DWORD)result << 15)) & 0x1F07C1F);
              *v14 = (((30 * ((v514 >> 5) & 0x100401)) | (15 * ((v514 >> 5) & 0x100401)) | v514) >> 15) & 0x3E0 | ((30 * ((v514 >> 5) & 0x401)) | (15 * ((v514 >> 5) & 0x401)) | v514) & 0x7C1F;
            }
            v16 += v203;
            v515 = &v624[2 * v203];
            if ((unint64_t)v515 >= v12)
              v516 = v509;
            else
              v516 = 0;
            v624 = &v515[2 * v516];
            v14 += v203;
            --v511;
          }
          while (v511);
          v16 += v574;
          v14 += v573;
          v517 = v600;
          v518 = &v600[2 * v572];
          if ((unint64_t)v518 >= v577)
            v519 = v510;
          else
            v519 = 0;
          v520 = &v518[2 * v519];
          v521 = v12 + 2 * v519 + 2 * v572;
          if (v577)
          {
            v12 = v521;
            v517 = v520;
          }
          v600 = v517;
          if (!v577)
            v520 = &v624[2 * v572];
          v624 = v520;
          --v601;
        }
        while (v601);
      }
      return result;
    case 13:
      v218 = v30;
      v535 = -(v575 * v25);
      v556 = -(uint64_t)(v572 * v25);
      v219 = 2 * v30;
      v220 = v599;
      v221 = -(uint64_t)v26;
      do
      {
        v222 = v576;
        v223 = v12;
        do
        {
          v224 = *v16;
          if (v224 >= 8)
          {
            v225 = v612 ? *v220 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v225, v224);
            v227 = BYTE3(result);
            v12 = v223;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v228 = *v8;
                if (v228 >= 8)
                {
                  result = PDAmultiplyPDA((unsigned __int16)*v14, v228, (unsigned __int16)result, v227, v226);
                  v12 = v223;
                  v227 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v227;
              }
              else
              {
                result = PDAmultiplyPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v227, v226);
                v12 = v223;
                *v14 = result;
              }
            }
          }
          v16 += v218;
          v8 += v602;
          v229 = &v624[2 * v218];
          if ((unint64_t)v229 >= v12)
            v230 = v221;
          else
            v230 = 0;
          v220 += v612 + v230;
          v624 = &v229[2 * v230];
          v14 = (__int16 *)((char *)v14 + v219);
          --v222;
        }
        while (v222);
        if (v577)
        {
          v231 = &v600[2 * v572];
          v232 = v535;
          if ((unint64_t)v231 < v577)
            v232 = 0;
          v220 = &v599[v575 + v232];
          v233 = v556;
          if ((unint64_t)v231 < v577)
            v233 = 0;
          v12 += 2 * v233 + 2 * v572;
          v599 += v575 + v232;
          v600 = &v231[2 * v233];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v220 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 14:
      v234 = v30;
      v536 = -(v575 * v25);
      v557 = -(uint64_t)(v572 * v25);
      v235 = 2 * v30;
      v236 = v599;
      v237 = -(uint64_t)v26;
      do
      {
        v238 = v576;
        v239 = v12;
        do
        {
          v240 = *v16;
          if (v240 >= 8)
          {
            v241 = v612 ? *v236 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v241, v240);
            v242 = BYTE3(result);
            v12 = v239;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v243 = *v8;
                if (v243 >= 8)
                {
                  result = PDAscreenPDA((unsigned __int16)*v14, v243, (unsigned __int16)result, v242);
                  v12 = v239;
                  v242 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v242;
              }
              else
              {
                result = PDAscreenPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v242);
                v12 = v239;
                *v14 = result;
              }
            }
          }
          v16 += v234;
          v8 += v602;
          v244 = &v624[2 * v234];
          if ((unint64_t)v244 >= v12)
            v245 = v237;
          else
            v245 = 0;
          v236 += v612 + v245;
          v624 = &v244[2 * v245];
          v14 = (__int16 *)((char *)v14 + v235);
          --v238;
        }
        while (v238);
        if (v577)
        {
          v246 = &v600[2 * v572];
          v247 = v536;
          if ((unint64_t)v246 < v577)
            v247 = 0;
          v236 = &v599[v575 + v247];
          v248 = v557;
          if ((unint64_t)v246 < v577)
            v248 = 0;
          v12 += 2 * v248 + 2 * v572;
          v599 += v575 + v247;
          v600 = &v246[2 * v248];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v236 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 15:
      v249 = v30;
      v537 = -(v575 * v25);
      v558 = -(uint64_t)(v572 * v25);
      v250 = 2 * v30;
      v251 = v599;
      v252 = -(uint64_t)v26;
      do
      {
        v253 = v576;
        v254 = v12;
        do
        {
          v255 = *v16;
          if (v255 >= 8)
          {
            v256 = v612 ? *v251 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v256, v255);
            v257 = BYTE3(result);
            v12 = v254;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v258 = *v8;
                if (v258 >= 8)
                {
                  result = PDAoverlayPDA((unsigned __int16)*v14, v258, (unsigned __int16)result, v257);
                  v12 = v254;
                  v257 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v257;
              }
              else
              {
                result = PDAoverlayPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v257);
                v12 = v254;
                *v14 = result;
              }
            }
          }
          v16 += v249;
          v8 += v602;
          v259 = &v624[2 * v249];
          if ((unint64_t)v259 >= v12)
            v260 = v252;
          else
            v260 = 0;
          v251 += v612 + v260;
          v624 = &v259[2 * v260];
          v14 = (__int16 *)((char *)v14 + v250);
          --v253;
        }
        while (v253);
        if (v577)
        {
          v261 = &v600[2 * v572];
          v262 = v537;
          if ((unint64_t)v261 < v577)
            v262 = 0;
          v251 = &v599[v575 + v262];
          v263 = v558;
          if ((unint64_t)v261 < v577)
            v263 = 0;
          v12 += 2 * v263 + 2 * v572;
          v599 += v575 + v262;
          v600 = &v261[2 * v263];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v251 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 16:
      v264 = v30;
      v538 = -(v575 * v25);
      v559 = -(uint64_t)(v572 * v25);
      v265 = 2 * v30;
      v266 = v599;
      v267 = -(uint64_t)v26;
      do
      {
        v268 = v576;
        v269 = v12;
        do
        {
          v270 = *v16;
          if (v270 >= 8)
          {
            v271 = v612 ? *v266 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v271, v270);
            v272 = BYTE3(result);
            v12 = v269;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v273 = *v8;
                if (v273 >= 8)
                {
                  result = PDAdarkenPDA((unsigned __int16)*v14, v273, (unsigned __int16)result, v272);
                  v12 = v269;
                  v272 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v272;
              }
              else
              {
                result = PDAdarkenPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v272);
                v12 = v269;
                *v14 = result;
              }
            }
          }
          v16 += v264;
          v8 += v602;
          v274 = &v624[2 * v264];
          if ((unint64_t)v274 >= v12)
            v275 = v267;
          else
            v275 = 0;
          v266 += v612 + v275;
          v624 = &v274[2 * v275];
          v14 = (__int16 *)((char *)v14 + v265);
          --v268;
        }
        while (v268);
        if (v577)
        {
          v276 = &v600[2 * v572];
          v277 = v538;
          if ((unint64_t)v276 < v577)
            v277 = 0;
          v266 = &v599[v575 + v277];
          v278 = v559;
          if ((unint64_t)v276 < v577)
            v278 = 0;
          v12 += 2 * v278 + 2 * v572;
          v599 += v575 + v277;
          v600 = &v276[2 * v278];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v266 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 17:
      v279 = v30;
      v539 = -(v575 * v25);
      v560 = -(uint64_t)(v572 * v25);
      v280 = 2 * v30;
      v281 = v599;
      v282 = -(uint64_t)v26;
      do
      {
        v283 = v576;
        v284 = v12;
        do
        {
          v285 = *v16;
          if (v285 >= 8)
          {
            v286 = v612 ? *v281 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v286, v285);
            v287 = BYTE3(result);
            v12 = v284;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v288 = *v8;
                if (v288 >= 8)
                {
                  result = PDAlightenPDA((unsigned __int16)*v14, v288, (unsigned __int16)result, v287);
                  v12 = v284;
                  v287 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v287;
              }
              else
              {
                result = PDAlightenPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v287);
                v12 = v284;
                *v14 = result;
              }
            }
          }
          v16 += v279;
          v8 += v602;
          v289 = &v624[2 * v279];
          if ((unint64_t)v289 >= v12)
            v290 = v282;
          else
            v290 = 0;
          v281 += v612 + v290;
          v624 = &v289[2 * v290];
          v14 = (__int16 *)((char *)v14 + v280);
          --v283;
        }
        while (v283);
        if (v577)
        {
          v291 = &v600[2 * v572];
          v292 = v539;
          if ((unint64_t)v291 < v577)
            v292 = 0;
          v281 = &v599[v575 + v292];
          v293 = v560;
          if ((unint64_t)v291 < v577)
            v293 = 0;
          v12 += 2 * v293 + 2 * v572;
          v599 += v575 + v292;
          v600 = &v291[2 * v293];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v281 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 18:
      v294 = v30;
      v540 = -(v575 * v25);
      v561 = -(uint64_t)(v572 * v25);
      v295 = 2 * v30;
      v296 = v599;
      v297 = -(uint64_t)v26;
      do
      {
        v298 = v576;
        v299 = v12;
        do
        {
          v300 = *v16;
          if (v300 >= 8)
          {
            v301 = v612 ? *v296 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v301, v300);
            v302 = BYTE3(result);
            v12 = v299;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v303 = *v8;
                if (v303 >= 8)
                {
                  result = PDAcolordodgePDA((unsigned __int16)*v14, v303, (unsigned __int16)result, v302);
                  v12 = v299;
                  v302 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v302;
              }
              else
              {
                result = PDAcolordodgePDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v302);
                v12 = v299;
                *v14 = result;
              }
            }
          }
          v16 += v294;
          v8 += v602;
          v304 = &v624[2 * v294];
          if ((unint64_t)v304 >= v12)
            v305 = v297;
          else
            v305 = 0;
          v296 += v612 + v305;
          v624 = &v304[2 * v305];
          v14 = (__int16 *)((char *)v14 + v295);
          --v298;
        }
        while (v298);
        if (v577)
        {
          v306 = &v600[2 * v572];
          v307 = v540;
          if ((unint64_t)v306 < v577)
            v307 = 0;
          v296 = &v599[v575 + v307];
          v308 = v561;
          if ((unint64_t)v306 < v577)
            v308 = 0;
          v12 += 2 * v308 + 2 * v572;
          v599 += v575 + v307;
          v600 = &v306[2 * v308];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v296 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 19:
      v309 = v30;
      v541 = -(v575 * v25);
      v562 = -(uint64_t)(v572 * v25);
      v310 = 2 * v30;
      v311 = v599;
      v312 = -(uint64_t)v26;
      do
      {
        v313 = v576;
        v314 = v12;
        do
        {
          v315 = *v16;
          if (v315 >= 8)
          {
            v316 = v612 ? *v311 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v316, v315);
            v317 = BYTE3(result);
            v12 = v314;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v318 = *v8;
                if (v318 >= 8)
                {
                  result = PDAcolorburnPDA((unsigned __int16)*v14, v318, (unsigned __int16)result, v317);
                  v12 = v314;
                  v317 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v317;
              }
              else
              {
                result = PDAcolorburnPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v317);
                v12 = v314;
                *v14 = result;
              }
            }
          }
          v16 += v309;
          v8 += v602;
          v319 = &v624[2 * v309];
          if ((unint64_t)v319 >= v12)
            v320 = v312;
          else
            v320 = 0;
          v311 += v612 + v320;
          v624 = &v319[2 * v320];
          v14 = (__int16 *)((char *)v14 + v310);
          --v313;
        }
        while (v313);
        if (v577)
        {
          v321 = &v600[2 * v572];
          v322 = v541;
          if ((unint64_t)v321 < v577)
            v322 = 0;
          v311 = &v599[v575 + v322];
          v323 = v562;
          if ((unint64_t)v321 < v577)
            v323 = 0;
          v12 += 2 * v323 + 2 * v572;
          v599 += v575 + v322;
          v600 = &v321[2 * v323];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v311 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 20:
      v324 = v30;
      v542 = -(v575 * v25);
      v563 = -(uint64_t)(v572 * v25);
      v325 = 2 * v30;
      v326 = v599;
      v327 = -(uint64_t)v26;
      do
      {
        v328 = v576;
        v329 = v12;
        do
        {
          v330 = *v16;
          if (v330 >= 8)
          {
            v331 = v612 ? *v326 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v331, v330);
            v332 = BYTE3(result);
            v12 = v329;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v333 = *v8;
                if (v333 >= 8)
                {
                  result = PDAsoftlightPDA((unsigned __int16)*v14, v333, (unsigned __int16)result, v332);
                  v12 = v329;
                  v332 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v332;
              }
              else
              {
                result = PDAsoftlightPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v332);
                v12 = v329;
                *v14 = result;
              }
            }
          }
          v16 += v324;
          v8 += v602;
          v334 = &v624[2 * v324];
          if ((unint64_t)v334 >= v12)
            v335 = v327;
          else
            v335 = 0;
          v326 += v612 + v335;
          v624 = &v334[2 * v335];
          v14 = (__int16 *)((char *)v14 + v325);
          --v328;
        }
        while (v328);
        if (v577)
        {
          v336 = &v600[2 * v572];
          v337 = v542;
          if ((unint64_t)v336 < v577)
            v337 = 0;
          v326 = &v599[v575 + v337];
          v338 = v563;
          if ((unint64_t)v336 < v577)
            v338 = 0;
          v12 += 2 * v338 + 2 * v572;
          v599 += v575 + v337;
          v600 = &v336[2 * v338];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v326 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 21:
      v339 = v30;
      v543 = -(v575 * v25);
      v564 = -(uint64_t)(v572 * v25);
      v340 = 2 * v30;
      v341 = v599;
      v342 = -(uint64_t)v26;
      do
      {
        v343 = v576;
        v344 = v12;
        do
        {
          v345 = *v16;
          if (v345 >= 8)
          {
            v346 = v612 ? *v341 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v346, v345);
            v347 = BYTE3(result);
            v12 = v344;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v348 = *v8;
                if (v348 >= 8)
                {
                  result = PDAhardlightPDA((unsigned __int16)*v14, v348, (unsigned __int16)result, v347);
                  v12 = v344;
                  v347 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v347;
              }
              else
              {
                result = PDAhardlightPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v347);
                v12 = v344;
                *v14 = result;
              }
            }
          }
          v16 += v339;
          v8 += v602;
          v349 = &v624[2 * v339];
          if ((unint64_t)v349 >= v12)
            v350 = v342;
          else
            v350 = 0;
          v341 += v612 + v350;
          v624 = &v349[2 * v350];
          v14 = (__int16 *)((char *)v14 + v340);
          --v343;
        }
        while (v343);
        if (v577)
        {
          v351 = &v600[2 * v572];
          v352 = v543;
          if ((unint64_t)v351 < v577)
            v352 = 0;
          v341 = &v599[v575 + v352];
          v353 = v564;
          if ((unint64_t)v351 < v577)
            v353 = 0;
          v12 += 2 * v353 + 2 * v572;
          v599 += v575 + v352;
          v600 = &v351[2 * v353];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v341 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 22:
      v354 = v30;
      v544 = -(v575 * v25);
      v565 = -(uint64_t)(v572 * v25);
      v355 = 2 * v30;
      v356 = v599;
      v357 = -(uint64_t)v26;
      do
      {
        v358 = v576;
        v359 = v12;
        do
        {
          v360 = *v16;
          if (v360 >= 8)
          {
            v361 = v612 ? *v356 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v361, v360);
            v362 = BYTE3(result);
            v12 = v359;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v363 = *v8;
                if (v363 >= 8)
                {
                  result = PDAdifferencePDA((unsigned __int16)*v14, v363, (unsigned __int16)result, v362);
                  v12 = v359;
                  v362 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v362;
              }
              else
              {
                result = PDAdifferencePDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v362);
                v12 = v359;
                *v14 = result;
              }
            }
          }
          v16 += v354;
          v8 += v602;
          v364 = &v624[2 * v354];
          if ((unint64_t)v364 >= v12)
            v365 = v357;
          else
            v365 = 0;
          v356 += v612 + v365;
          v624 = &v364[2 * v365];
          v14 = (__int16 *)((char *)v14 + v355);
          --v358;
        }
        while (v358);
        if (v577)
        {
          v366 = &v600[2 * v572];
          v367 = v544;
          if ((unint64_t)v366 < v577)
            v367 = 0;
          v356 = &v599[v575 + v367];
          v368 = v565;
          if ((unint64_t)v366 < v577)
            v368 = 0;
          v12 += 2 * v368 + 2 * v572;
          v599 += v575 + v367;
          v600 = &v366[2 * v368];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v356 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 23:
      v369 = v30;
      v545 = -(v575 * v25);
      v566 = -(uint64_t)(v572 * v25);
      v370 = 2 * v30;
      v371 = v599;
      v372 = -(uint64_t)v26;
      do
      {
        v373 = v576;
        v374 = v12;
        do
        {
          v375 = *v16;
          if (v375 >= 8)
          {
            v376 = v612 ? *v371 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v376, v375);
            v377 = BYTE3(result);
            v12 = v374;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v378 = *v8;
                if (v378 >= 8)
                {
                  result = PDAexclusionPDA((unsigned __int16)*v14, v378, (unsigned __int16)result, v377);
                  v12 = v374;
                  v377 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v377;
              }
              else
              {
                result = PDAexclusionPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v377);
                v12 = v374;
                *v14 = result;
              }
            }
          }
          v16 += v369;
          v8 += v602;
          v379 = &v624[2 * v369];
          if ((unint64_t)v379 >= v12)
            v380 = v372;
          else
            v380 = 0;
          v371 += v612 + v380;
          v624 = &v379[2 * v380];
          v14 = (__int16 *)((char *)v14 + v370);
          --v373;
        }
        while (v373);
        if (v577)
        {
          v381 = &v600[2 * v572];
          v382 = v545;
          if ((unint64_t)v381 < v577)
            v382 = 0;
          v371 = &v599[v575 + v382];
          v383 = v566;
          if ((unint64_t)v381 < v577)
            v383 = 0;
          v12 += 2 * v383 + 2 * v572;
          v599 += v575 + v382;
          v600 = &v381[2 * v383];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v371 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 24:
      v384 = v30;
      v546 = -(v575 * v25);
      v567 = -(uint64_t)(v572 * v25);
      v385 = 2 * v30;
      v386 = v599;
      v387 = -(uint64_t)v26;
      do
      {
        v388 = v576;
        v389 = v12;
        do
        {
          v390 = *v16;
          if (v390 >= 8)
          {
            v391 = v612 ? *v386 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v391, v390);
            v392 = BYTE3(result);
            v12 = v389;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v393 = *v8;
                if (v393 >= 8)
                {
                  result = PDAhuePDA((unsigned __int16)*v14, v393, (unsigned __int16)result, v392);
                  v12 = v389;
                  v392 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v392;
              }
              else
              {
                result = PDAhuePDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v392);
                v12 = v389;
                *v14 = result;
              }
            }
          }
          v16 += v384;
          v8 += v602;
          v394 = &v624[2 * v384];
          if ((unint64_t)v394 >= v12)
            v395 = v387;
          else
            v395 = 0;
          v386 += v612 + v395;
          v624 = &v394[2 * v395];
          v14 = (__int16 *)((char *)v14 + v385);
          --v388;
        }
        while (v388);
        if (v577)
        {
          v396 = &v600[2 * v572];
          v397 = v546;
          if ((unint64_t)v396 < v577)
            v397 = 0;
          v386 = &v599[v575 + v397];
          v398 = v567;
          if ((unint64_t)v396 < v577)
            v398 = 0;
          v12 += 2 * v398 + 2 * v572;
          v599 += v575 + v397;
          v600 = &v396[2 * v398];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v386 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 25:
      v399 = v30;
      v547 = -(v575 * v25);
      v568 = -(uint64_t)(v572 * v25);
      v400 = 2 * v30;
      v401 = v599;
      v402 = -(uint64_t)v26;
      do
      {
        v403 = v576;
        v404 = v12;
        do
        {
          v405 = *v16;
          if (v405 >= 8)
          {
            v406 = v612 ? *v401 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v406, v405);
            v407 = BYTE3(result);
            v12 = v404;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v408 = *v8;
                if (v408 >= 8)
                {
                  result = PDAsaturationPDA((unsigned __int16)*v14, v408, (unsigned __int16)result, v407);
                  v12 = v404;
                  v407 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v407;
              }
              else
              {
                result = PDAsaturationPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v407);
                v12 = v404;
                *v14 = result;
              }
            }
          }
          v16 += v399;
          v8 += v602;
          v409 = &v624[2 * v399];
          if ((unint64_t)v409 >= v12)
            v410 = v402;
          else
            v410 = 0;
          v401 += v612 + v410;
          v624 = &v409[2 * v410];
          v14 = (__int16 *)((char *)v14 + v400);
          --v403;
        }
        while (v403);
        if (v577)
        {
          v411 = &v600[2 * v572];
          v412 = v547;
          if ((unint64_t)v411 < v577)
            v412 = 0;
          v401 = &v599[v575 + v412];
          v413 = v568;
          if ((unint64_t)v411 < v577)
            v413 = 0;
          v12 += 2 * v413 + 2 * v572;
          v599 += v575 + v412;
          v600 = &v411[2 * v413];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v401 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 26:
      v414 = v30;
      v548 = -(v575 * v25);
      v569 = -(uint64_t)(v572 * v25);
      v415 = 2 * v30;
      v416 = v599;
      v417 = -(uint64_t)v26;
      do
      {
        v418 = v576;
        v419 = v12;
        do
        {
          v420 = *v16;
          if (v420 >= 8)
          {
            v421 = v612 ? *v416 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v421, v420);
            v422 = BYTE3(result);
            v12 = v419;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v423 = *v8;
                if (v423 >= 8)
                {
                  result = PDAluminosityPDA((unsigned __int16)result, v422, (unsigned __int16)*v14, v423);
                  v12 = v419;
                  v422 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v422;
              }
              else
              {
                result = PDAluminosityPDA((unsigned __int16)result, v422, (unsigned __int16)*v14, 0xFFu);
                v12 = v419;
                *v14 = result;
              }
            }
          }
          v16 += v414;
          v8 += v602;
          v424 = &v624[2 * v414];
          if ((unint64_t)v424 >= v12)
            v425 = v417;
          else
            v425 = 0;
          v416 += v612 + v425;
          v624 = &v424[2 * v425];
          v14 = (__int16 *)((char *)v14 + v415);
          --v418;
        }
        while (v418);
        if (v577)
        {
          v426 = &v600[2 * v572];
          v427 = v548;
          if ((unint64_t)v426 < v577)
            v427 = 0;
          v416 = &v599[v575 + v427];
          v428 = v569;
          if ((unint64_t)v426 < v577)
            v428 = 0;
          v12 += 2 * v428 + 2 * v572;
          v599 += v575 + v427;
          v600 = &v426[2 * v428];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v416 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    case 27:
      v429 = v30;
      v549 = -(v575 * v25);
      v570 = -(uint64_t)(v572 * v25);
      v430 = 2 * v30;
      v431 = v599;
      v432 = -(uint64_t)v26;
      do
      {
        v433 = v576;
        v434 = v12;
        do
        {
          v435 = *v16;
          if (v435 >= 8)
          {
            v436 = v612 ? *v431 : -1;
            result = PDAM(*(unsigned __int16 *)v624, v436, v435);
            v437 = BYTE3(result);
            v12 = v434;
            if (BYTE3(result) >= 8u)
            {
              if (v602)
              {
                v438 = *v8;
                if (v438 >= 8)
                {
                  result = PDAluminosityPDA((unsigned __int16)*v14, v438, (unsigned __int16)result, v437);
                  v12 = v434;
                  v437 = BYTE3(result);
                }
                *v14 = result;
                *v8 = v437;
              }
              else
              {
                result = PDAluminosityPDA((unsigned __int16)*v14, 0xFFu, (unsigned __int16)result, v437);
                v12 = v434;
                *v14 = result;
              }
            }
          }
          v16 += v429;
          v8 += v602;
          v439 = &v624[2 * v429];
          if ((unint64_t)v439 >= v12)
            v440 = v432;
          else
            v440 = 0;
          v431 += v612 + v440;
          v624 = &v439[2 * v440];
          v14 = (__int16 *)((char *)v14 + v430);
          --v433;
        }
        while (v433);
        if (v577)
        {
          v441 = &v600[2 * v572];
          v442 = v549;
          if ((unint64_t)v441 < v577)
            v442 = 0;
          v431 = &v599[v575 + v442];
          v443 = v570;
          if ((unint64_t)v441 < v577)
            v443 = 0;
          v12 += 2 * v443 + 2 * v572;
          v599 += v575 + v442;
          v600 = &v441[2 * v443];
          v624 = v600;
        }
        else
        {
          v624 += 2 * v572;
          v431 += v575;
        }
        v16 += v574;
        v14 += v573;
        v8 += v571;
        --v601;
      }
      while (v601);
      return result;
    default:
      return result;
  }
  do
  {
    v488 = v576;
    v489 = v12;
    do
    {
      v490 = *v16;
      if (v490 < 0xF8)
      {
        if (v490 < 8)
          goto LABEL_763;
        v491 = (*v487 * v490 + ((*v487 * v490) >> 8) + 1) >> 8;
      }
      else
      {
        LOBYTE(v491) = *v487;
      }
      result = PDM((unsigned __int16)*v14, ~(_BYTE)v491);
      *v14 = result;
      v12 = v489;
LABEL_763:
      v16 += v140;
      v492 = &v624[2 * v140];
      if ((unint64_t)v492 >= v12)
        v493 = v486;
      else
        v493 = 0;
      v487 += v485 + v493;
      v624 = &v492[2 * v493];
      v14 += v140;
      --v488;
    }
    while (v488);
    if (v577)
    {
      v494 = &v600[2 * v572];
      v495 = v610;
      if ((unint64_t)v494 < v577)
        v495 = 0;
      v487 = &v599[v575 + v495];
      v496 = v622;
      if ((unint64_t)v494 < v577)
        v496 = 0;
      v12 += 2 * v496 + 2 * v572;
      v599 += v575 + v495;
      v600 = &v494[2 * v496];
      v624 = v600;
    }
    else
    {
      v624 += 2 * v572;
      v487 += v575;
    }
    v16 += v574;
    v14 += v573;
    --v601;
  }
  while (v601);
  return result;
}

_QWORD *RGB555_pattern(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, float *a5, int a6, float a7)
{
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  int v52;

  v11 = *(float **)(*(_QWORD *)a1 + 64);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    v15 = v13;
    if (v13 >= a7)
    {
      v15 = a7;
      if (v12 > a7)
        v15 = v12;
    }
    v16 = v15 * v11[2];
    if (a5)
      v17 = a4;
    else
      v17 = 0;
    if (v17 == 1)
    {
      if (*a5 < v12)
        v30 = v12;
      else
        v30 = *a5;
      if (*a5 <= v13)
        v31 = v30;
      else
        v31 = v13;
      v18 = (int)(float)(v14 + (float)(v31 * v16));
      v19 = (int)(float)(v14 + (float)(v31 * v16));
      v20 = v19;
      goto LABEL_74;
    }
    if (v17 == 4)
    {
      v32 = a5[4];
      v33 = *a5;
      v34 = a5[1];
      v35 = a5[2];
      if (v32 < v12)
        v36 = v12;
      else
        v36 = a5[4];
      if (v32 <= v13)
        v37 = v36;
      else
        v37 = v13;
      if (v33 < v12)
        v38 = v12;
      else
        v38 = *a5;
      if (v33 <= v13)
        v39 = v38;
      else
        v39 = v13;
      if (v34 < v12)
        v40 = v12;
      else
        v40 = a5[1];
      if (v34 <= v13)
        v41 = v40;
      else
        v41 = v13;
      if (v35 < v12)
        v42 = v12;
      else
        v42 = a5[2];
      if (v35 <= v13)
        v43 = v42;
      else
        v43 = v13;
      v44 = (float)(v13 - v39) - v37;
      v45 = (float)(v13 - v41) - v37;
      v46 = (float)(v13 - v43) - v37;
      if (v44 >= v12)
        v47 = v14 + (float)(v44 * v16);
      else
        v47 = v12;
      if (v45 >= v12)
        v48 = v14 + (float)(v45 * v16);
      else
        v48 = v12;
      if (v46 >= v12)
        v29 = v14 + (float)(v46 * v16);
      else
        v29 = v12;
      v18 = (int)v47;
      v19 = (int)v48;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (v17 != 3)
      {
LABEL_74:
        v49 = (int)(float)(v14 + v16);
        if (a6 && (v18 | v49) | (v19 | v20))
        {
          *(_OWORD *)a2 = xmmword_185004A90;
          a2[2] = 0x2000000010;
          a2[6] = (v18 << 32) | (v49 << 48) | ((uint64_t)v19 << 16) | v20;
          *((_DWORD *)a2 + 6) = 16 * ((int)v49 < 7936);
          if ((int)v49 >= 7936)
            v50 = 0;
          else
            v50 = (char *)(a2 + 6);
          a2[4] = a2 + 6;
          a2[5] = v50;
        }
        else
        {
          v51 = (4 * (_WORD)v18 + 512) & 0x7C00 | ((v19 + 128) >> 3) & 0x3FF;
          v52 = ((_WORD)v20 + 128) & 0x1F00 | (((v51 >> 5) & 0x3FF) << 13);
          *(_OWORD *)a2 = xmmword_185004AA0;
          *((_DWORD *)a2 + 6) = 0;
          a2[2] = 1;
          *((_DWORD *)a2 + 12) = v52 | (v51 >> 8) | ((v52 | (v51 >> 8)) << 16);
          a2[4] = a2 + 6;
          if ((int)v49 > 7807)
          {
            a2[5] = 0;
          }
          else
          {
            *((_DWORD *)a2 + 13) = 16843009
                                 * (((v49 + 128) >> 5) & 0xF8 | ((v49 + 128) >> 10) & 7);
            a2[5] = (char *)a2 + 52;
          }
        }
        return a2;
      }
      v21 = a5[1];
      v22 = a5[2];
      if (*a5 < v12)
        v23 = v12;
      else
        v23 = *a5;
      if (*a5 <= v13)
        v24 = v23;
      else
        v24 = v13;
      if (v21 < v12)
        v25 = v12;
      else
        v25 = a5[1];
      if (v21 <= v13)
        v26 = v25;
      else
        v26 = v13;
      if (v22 < v12)
        v27 = v12;
      else
        v27 = a5[2];
      if (v22 <= v13)
        v28 = v27;
      else
        v28 = v13;
      v18 = (int)(float)(v14 + (float)(v24 * v16));
      v19 = (int)(float)(v14 + (float)(v26 * v16));
      v29 = v14 + (float)(v28 * v16);
    }
    v20 = (int)v29;
    goto LABEL_74;
  }
  return a2;
}

uint64_t RGB555_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint16x4_t *v14;
  int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  size_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint16x4_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  char *v42;
  char *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int v85;
  int *v86;
  int v87;
  int *v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  int v193;
  int v194;
  int v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  _BYTE *v204;
  int v205;
  uint64_t v206;
  char *v207;
  int v208;
  uint64_t v209;
  unsigned __int8 *v210;
  char *v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  int v215;
  int v216;
  uint8x8_t v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unint64_t v227;
  unsigned int v228;
  unsigned __int16 *v229;
  uint64_t v230;
  unsigned __int16 *v231;
  BOOL v232;
  uint64_t v233;
  unsigned __int16 *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unsigned __int16 *v246;
  uint64_t v247;
  unsigned __int16 *v248;
  BOOL v249;
  uint64_t v250;
  unsigned __int16 *v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  unsigned int v263;
  unsigned __int16 *v264;
  uint64_t v265;
  unsigned __int16 *v266;
  BOOL v267;
  uint64_t v268;
  unsigned __int16 *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned __int8 *v282;
  unsigned __int16 *v283;
  uint64_t v284;
  unsigned __int16 *v285;
  BOOL v286;
  uint64_t v287;
  unsigned __int16 *v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  unsigned __int16 *v301;
  uint64_t v302;
  unsigned __int16 *v303;
  BOOL v304;
  uint64_t v305;
  unsigned __int16 *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  unsigned int v314;
  unsigned int v315;
  unint64_t v316;
  unsigned int v317;
  unsigned __int16 *v318;
  uint64_t v319;
  unsigned __int16 *v320;
  BOOL v321;
  uint64_t v322;
  unsigned __int16 *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  unint64_t v333;
  unsigned int v334;
  unsigned __int16 *v335;
  uint64_t v336;
  unsigned __int16 *v337;
  BOOL v338;
  uint64_t v339;
  unsigned __int16 *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  unint64_t v348;
  unsigned int v349;
  unsigned __int16 *v350;
  uint64_t v351;
  unsigned __int16 *v352;
  BOOL v353;
  uint64_t v354;
  unsigned __int16 *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  unsigned int v367;
  unsigned __int16 *v368;
  uint64_t v369;
  unsigned __int16 *v370;
  BOOL v371;
  uint64_t v372;
  unsigned __int16 *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  unint64_t v379;
  unsigned int v380;
  unsigned int v381;
  unsigned __int16 *v382;
  uint64_t v383;
  unsigned __int16 *v384;
  BOOL v385;
  uint64_t v386;
  unsigned __int16 *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  unint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unsigned __int16 *v396;
  uint64_t v397;
  unsigned __int16 *v398;
  BOOL v399;
  uint64_t v400;
  unsigned __int16 *v401;
  unint64_t v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned __int16 *v413;
  uint64_t v414;
  unsigned __int16 *v415;
  BOOL v416;
  uint64_t v417;
  unsigned __int16 *v418;
  unint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  unsigned int v426;
  unint64_t v427;
  unsigned int v428;
  unsigned int v429;
  unsigned __int16 *v430;
  uint64_t v431;
  unsigned __int16 *v432;
  BOOL v433;
  uint64_t v434;
  unsigned __int16 *v435;
  unint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  unsigned int v443;
  unint64_t v444;
  unsigned int v445;
  unsigned int v446;
  unsigned __int16 *v447;
  uint64_t v448;
  unsigned __int16 *v449;
  BOOL v450;
  uint64_t v451;
  unsigned __int16 *v452;
  unint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  unsigned int v460;
  unint64_t v461;
  unsigned int v462;
  unsigned int v463;
  unsigned __int16 *v464;
  uint64_t v465;
  unsigned __int16 *v466;
  BOOL v467;
  uint64_t v468;
  unsigned __int16 *v469;
  unint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  unint64_t v478;
  unsigned int v479;
  unsigned int v480;
  unsigned __int16 *v481;
  uint64_t v482;
  unsigned __int16 *v483;
  BOOL v484;
  uint64_t v485;
  unsigned __int16 *v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  unsigned int v494;
  unint64_t v495;
  unsigned int v496;
  unsigned int v497;
  unsigned __int16 *v498;
  uint64_t v499;
  unsigned __int16 *v500;
  BOOL v501;
  uint64_t v502;
  unsigned __int16 *v503;
  unint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  unsigned int v511;
  unint64_t v512;
  unsigned int v513;
  unsigned int v514;
  unsigned __int16 *v515;
  uint64_t v516;
  unsigned __int16 *v517;
  BOOL v518;
  uint64_t v519;
  unsigned __int16 *v520;
  unint64_t v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  unint64_t v529;
  unsigned int v530;
  unsigned int v531;
  unsigned __int16 *v532;
  uint64_t v533;
  unsigned __int16 *v534;
  BOOL v535;
  uint64_t v536;
  unsigned __int16 *v537;
  unint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  unsigned int v545;
  unint64_t v546;
  unsigned int v547;
  unsigned int v548;
  unsigned __int16 *v549;
  uint64_t v550;
  unsigned __int16 *v551;
  BOOL v552;
  uint64_t v553;
  unsigned __int16 *v554;
  unint64_t v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  unsigned int v562;
  unint64_t v563;
  unsigned int v564;
  unsigned int v565;
  unsigned __int16 *v566;
  uint64_t v567;
  unsigned __int16 *v568;
  BOOL v569;
  uint64_t v570;
  unsigned __int16 *v571;
  unint64_t v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  unsigned int v579;
  unint64_t v580;
  unsigned int v581;
  unsigned int v582;
  unsigned __int16 *v583;
  uint64_t v584;
  unsigned __int16 *v585;
  BOOL v586;
  uint64_t v587;
  unsigned __int16 *v588;
  unint64_t v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  unsigned int v596;
  unint64_t v597;
  unsigned int v598;
  unsigned int v599;
  unsigned __int16 *v600;
  uint64_t v601;
  unsigned __int16 *v602;
  BOOL v603;
  uint64_t v604;
  unsigned __int16 *v605;
  unint64_t v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  unsigned int v613;
  unint64_t v614;
  unsigned int v615;
  unsigned int v616;
  unsigned __int16 *v617;
  uint64_t v618;
  unsigned __int16 *v619;
  BOOL v620;
  uint64_t v621;
  unsigned __int16 *v622;
  unint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  unsigned int v630;
  unint64_t v631;
  unsigned int v632;
  unsigned int v633;
  unsigned __int16 *v634;
  uint64_t v635;
  unsigned __int16 *v636;
  BOOL v637;
  uint64_t v638;
  unsigned __int16 *v639;
  unint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  unsigned int v647;
  unint64_t v648;
  unsigned int v649;
  unsigned int v650;
  unsigned __int16 *v651;
  uint64_t v652;
  unsigned __int16 *v653;
  BOOL v654;
  uint64_t v655;
  unsigned __int16 *v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  unsigned __int16 *v661;
  uint64_t v662;
  _BYTE *v663;
  int v664;
  uint64_t v665;
  char *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  unsigned __int16 *v673;
  uint64_t v674;
  unsigned __int16 *v675;
  BOOL v676;
  uint64_t v677;
  unsigned __int16 *v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  int v684;
  unsigned int v685;
  unsigned __int16 v686;
  unint64_t v687;
  unsigned int v688;
  unsigned __int16 *v689;
  uint64_t v690;
  unsigned __int16 *v691;
  BOOL v692;
  uint64_t v693;
  unsigned __int16 *v694;
  unint64_t v695;
  uint64_t v696;
  int v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  unint64_t v701;
  unsigned int v702;
  unsigned __int16 *v703;
  uint64_t v704;
  unsigned __int16 *v705;
  BOOL v706;
  uint64_t v707;
  unsigned __int16 *v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned __int16 *v712;
  uint64_t v713;
  unsigned __int8 *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  int v721;
  unsigned int v722;
  __int16 v723;
  unint64_t v724;
  unsigned int v725;
  unsigned __int16 *v726;
  uint64_t v727;
  unsigned __int16 *v728;
  BOOL v729;
  uint64_t v730;
  unsigned __int16 *v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  uint64_t v736;
  int v737;
  unsigned int v738;
  __int16 v739;
  unint64_t v740;
  unsigned int v741;
  unsigned __int16 *v742;
  uint64_t v743;
  unsigned __int16 *v744;
  BOOL v745;
  uint64_t v746;
  unsigned __int16 *v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  int v755;
  unint64_t v756;
  unsigned int v757;
  unsigned __int16 *v758;
  uint64_t v759;
  unsigned __int16 *v760;
  BOOL v761;
  uint64_t v762;
  unsigned __int16 *v763;
  unint64_t v764;
  uint64_t v765;
  int v766;
  uint64_t v767;
  int v768;
  unsigned int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned __int16 *v772;
  uint64_t v773;
  unsigned __int16 *v774;
  BOOL v775;
  uint64_t v776;
  unsigned __int16 *v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  uint64_t v782;
  int v783;
  unsigned __int16 *v784;
  uint64_t v785;
  unsigned __int16 *v786;
  BOOL v787;
  uint64_t v788;
  unsigned __int16 *v789;
  unint64_t v790;
  uint64_t v791;
  int v792;
  unsigned __int16 *v793;
  uint64_t v794;
  unsigned __int16 *v795;
  BOOL v796;
  uint64_t v797;
  unsigned __int16 *v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unsigned __int8 *v802;
  uint64_t v803;
  char *v804;
  uint64_t v805;
  uint64_t v806;
  char *v807;
  uint64_t v808;
  uint64_t v809;
  int v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  int v845;
  int v846;
  unint64_t v847;
  int v848;
  uint64_t v849;
  char *v850;
  uint64_t v851;
  unsigned __int8 *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  unint64_t v858;
  unint64_t v859;
  int v860;
  int v861;
  int v862;
  int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unsigned int v886;
  unint64_t v887;
  unint64_t v888;
  int v889;
  unsigned int v890;
  unint64_t v891;
  unsigned int v892;
  uint64_t v893;
  char *v894;
  unsigned __int16 *v895;
  char *v896;
  char *v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  char *v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  char *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  int v927;
  unsigned __int16 *v928;
  uint64_t v929;
  uint64_t v930;
  _BYTE *v931;
  uint64_t v932;
  int v933[4];
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  _DWORD v943[1024];
  uint64_t v944;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v944 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)v3;
  v6 = *(unsigned __int8 **)(v3 + 96);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                 + 16 * *(_DWORD *)v3
                 + 8 * (v6 == 0)
                 + 4 * (v7 == 0));
  if (v8 > 27)
    return 0xFFFFFFFFLL;
  v10 = *(unsigned int *)(v3 + 4);
  v11 = v10 - 1;
  if ((int)v10 < 1)
    return 0;
  v12 = *(_DWORD *)(v3 + 8);
  v13 = (v12 - 1);
  if (v12 < 1)
    return 0;
  v14 = *(uint16x4_t **)(v3 + 136);
  v851 = v3;
  if ((v5 & 0xFF0000) != 0x50000 && v14)
  {
    v15 = *(_DWORD *)(v3 + 128);
    if ((v15 | 8) == 8)
    {
      if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
        RGB555_mark_constmask(v3, v8);
      else
        RGB555_mark_pixelmask(v3, v8);
    }
    else
    {
      v22 = *(_DWORD *)(v3 + 112);
      v23 = *(_DWORD *)(v3 + 116);
      v24 = (v22 + 15) & 0xFFFFFFF0;
      v25 = v24 * v23;
      if ((int)v25 <= 4096)
      {
        v27 = v943;
        v28 = v3;
      }
      else
      {
        v26 = malloc_type_malloc(v25, 0x8303D2FuLL);
        if (!v26)
          return 1;
        v27 = v26;
        v28 = v851;
        v14 = *(uint16x4_t **)(v851 + 136);
        v15 = *(_DWORD *)(v851 + 128);
      }
      CGSConvertBitsToMask(v14, *(_DWORD *)(v28 + 124), v27, v24, v22, v23, v15);
      v48 = *(_OWORD *)(v28 + 112);
      v939 = *(_OWORD *)(v28 + 96);
      v940 = v48;
      v49 = *(_OWORD *)(v28 + 144);
      v941 = *(_OWORD *)(v28 + 128);
      v942 = v49;
      v50 = *(_OWORD *)(v28 + 48);
      v935 = *(_OWORD *)(v28 + 32);
      v936 = v50;
      v51 = *(_OWORD *)(v28 + 80);
      v937 = *(_OWORD *)(v28 + 64);
      v938 = v51;
      v52 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v933 = *(_OWORD *)v28;
      v934 = v52;
      HIDWORD(v940) = (v22 + 15) & 0xFFFFFFF0;
      *((_QWORD *)&v941 + 1) = v27;
      if (BYTE1(v933[0]) << 8 == 1024)
        RGB555_mark_constmask((uint64_t)v933, v8);
      else
        RGB555_mark_pixelmask((uint64_t)v933, v8);
      if (v27 != (_BYTE *)v943)
      {
        v57 = v27;
        goto LABEL_1119;
      }
    }
    return 1;
  }
  v848 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                   + 16 * *(_DWORD *)v3
                   + 8 * (v6 == 0)
                   + 4 * (v7 == 0));
  if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
  {
    v943[0] = *(_DWORD *)(v3 + 4);
    v933[0] = v12;
    if (v6)
      v16 = *v6;
    else
      v16 = 255;
    v890 = **(unsigned __int16 **)(v3 + 88);
    v29 = __rev16(v890);
    v31 = *(int *)(v3 + 12);
    v30 = *(int *)(v3 + 16);
    v924 = (unint64_t)*(int *)(v3 + 28) >> 1;
    if (v7)
    {
      v898 = *(int *)(v3 + 32);
      v896 = (char *)(v7 + v31 + (int)v898 * (uint64_t)(int)v30);
      v892 = 1;
    }
    else
    {
      v896 = 0;
      v898 = 0;
      v892 = 0;
    }
    v41 = ~(_BYTE)v16;
    v42 = (char *)(*(_QWORD *)(v3 + 40) + 2 * (v31 + v30 * v924));
    v894 = v42;
    if (v14)
    {
      shape_enum_clip_alloc(v2, v3, (int *)v14, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v10, v12);
      v43 = v896;
      v930 = v898;
      v44 = v890;
      v926 = v45;
      if (v45)
        goto LABEL_375;
      return 1;
    }
    v926 = 0;
    if (v7)
      v46 = v10;
    else
      v46 = 0;
    v43 = v896;
    v930 = v898 - v46;
    v47 = v10;
    v44 = **(_WORD **)(v3 + 88);
LABEL_77:
    v929 = v924 - v47;
    switch(v8)
    {
      case 0:
        v75 = v929 + (int)v10;
        v76 = v933[0];
        v77 = v933[0] - 1;
        v78 = &v42[2 * ((v75 * v77) & (v75 >> 63))];
        if (v75 < 0)
          v75 = -v75;
        CGBlt_fillBytes(2 * v10, v933[0], 0, v78, 2 * v75);
        if (!v7)
          goto LABEL_107;
        v79 = v930 + (int)v10;
        v43 += (v79 * v77) & (v79 >> 63);
        if (v79 >= 0)
          v80 = v930 + (int)v10;
        else
          v80 = -v79;
        v81 = v10;
        v82 = v76;
        v83 = 0;
        goto LABEL_96;
      case 1:
        v84 = v929 + (int)v10;
        if (v84 < 0)
        {
          v42 += 2 * v84 * (v933[0] - 1);
          v84 = -v84;
        }
        v85 = 0;
        v86 = *(int **)(v851 + 88);
        if (v86)
          v85 = *v86;
        v87 = v933[0];
        CGBlt_fillBytes(2 * v10, v933[0], v85, v42, 2 * v84);
        if (v7)
        {
          v82 = v87;
          v88 = *(int **)(v851 + 96);
          if (!v88)
            v88 = (int *)&PIXELALPHAPLANARCONSTANT_15938;
          v43 += ((v930 + (int)v10) * (v87 - 1)) & ((v930 + (int)v10) >> 63);
          if (v930 + (int)v10 >= 0)
            v80 = v930 + (int)v10;
          else
            v80 = -(v930 + (int)v10);
          v83 = *v88;
          v81 = v10;
LABEL_96:
          v930 = v80;
          CGBlt_fillBytes(v81, v82, v83, v43, v80);
        }
        goto LABEL_107;
      case 2:
        if (!v7)
        {
          v183 = v933[0];
          v889 = v10 & 3;
          v886 = (v10 >> 2) + 1;
          v860 = v10;
          do
          {
            if ((int)v10 >= 4)
            {
              v184 = v886;
              do
              {
                *(_WORD *)v42 = __rev16(PDplusDM(v29, bswap32(*(unsigned __int16 *)v42) >> 16, ~(_BYTE)v16));
                *((_WORD *)v42 + 1) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v42 + 1)) >> 16, ~(_BYTE)v16));
                *((_WORD *)v42 + 2) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v42 + 2)) >> 16, ~(_BYTE)v16));
                *((_WORD *)v42 + 3) = __rev16(PDplusDM(v29, bswap32(*((unsigned __int16 *)v42 + 3)) >> 16, ~(_BYTE)v16));
                v42 += 8;
                v43 += 4 * v892;
                --v184;
              }
              while (v184 > 1);
              LODWORD(v10) = v889;
              v44 = v890;
            }
            if ((int)v10 >= 1)
            {
              v185 = v10 + 1;
              do
              {
                *(_WORD *)v42 = __rev16(PDplusDM(v29, bswap32(*(unsigned __int16 *)v42) >> 16, ~(_BYTE)v16));
                v42 += 2;
                --v185;
              }
              while (v185 > 1);
              v43 += v10 * v892;
              v44 = v890;
            }
            v42 += 2 * v929;
            v43 += v930;
            --v183;
            LODWORD(v10) = v860;
          }
          while (v183);
          goto LABEL_372;
        }
        do
        {
          v89 = v943[0];
          if (v943[0] >= 4)
          {
            v90 = (v943[0] >> 2) + 1;
            do
            {
              v91 = PDAplusDAM(v29, v16, bswap32(*(unsigned __int16 *)v42) >> 16, *v43, ~(_BYTE)v16);
              *(_WORD *)v42 = bswap32(v91) >> 16;
              *v43 = HIBYTE(v91);
              v92 = PDAplusDAM(v29, v16, bswap32(*((unsigned __int16 *)v42 + 1)) >> 16, v43[1], ~(_BYTE)v16);
              *((_WORD *)v42 + 1) = bswap32(v92) >> 16;
              v43[1] = HIBYTE(v92);
              v93 = PDAplusDAM(v29, v16, bswap32(*((unsigned __int16 *)v42 + 2)) >> 16, v43[2], ~(_BYTE)v16);
              *((_WORD *)v42 + 2) = bswap32(v93) >> 16;
              v43[2] = HIBYTE(v93);
              v94 = PDAplusDAM(v29, v16, bswap32(*((unsigned __int16 *)v42 + 3)) >> 16, v43[3], ~(_BYTE)v16);
              *((_WORD *)v42 + 3) = bswap32(v94) >> 16;
              v43[3] = HIBYTE(v94);
              v42 += 8;
              v43 += 4 * v892;
              --v90;
            }
            while (v90 > 1);
            v89 = v943[0] & 3;
          }
          if (v89 >= 1)
          {
            v95 = v89 + 1;
            do
            {
              v96 = PDAplusDAM(v29, v16, bswap32(*(unsigned __int16 *)v42) >> 16, *v43, ~(_BYTE)v16);
              *(_WORD *)v42 = bswap32(v96) >> 16;
              v42 += 2;
              *v43 = HIBYTE(v96);
              v43 += v892;
              --v95;
            }
            while (v95 > 1);
          }
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        v8 = v848;
LABEL_107:
        v44 = v890;
        goto LABEL_373;
      case 3:
        do
        {
          v97 = v943[0];
          do
          {
            v98 = *v43;
            if (v98 > 7)
            {
              if (v98 < 0xF8)
              {
                v100 = PDAM(v29, v16, v98);
                *(_WORD *)v42 = bswap32(v100) >> 16;
                v99 = HIBYTE(v100);
              }
              else
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v99) = v16;
              }
            }
            else
            {
              LOBYTE(v99) = 0;
              *(_WORD *)v42 = 0;
            }
            *v43 = v99;
            v42 += 2;
            v43 += v892;
            --v97;
          }
          while (v97);
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_373;
      case 4:
        do
        {
          v101 = v943[0];
          do
          {
            v102 = *v43;
            if (v102 < 0xF8)
            {
              if (v102 > 7)
              {
                v104 = PDAM(v29, v16, ~(_BYTE)v102);
                *(_WORD *)v42 = bswap32(v104) >> 16;
                v103 = HIBYTE(v104);
              }
              else
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v103) = v16;
              }
            }
            else
            {
              LOBYTE(v103) = 0;
              *(_WORD *)v42 = 0;
            }
            *v43 = v103;
            v42 += 2;
            v43 += v892;
            --v101;
          }
          while (v101);
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_373;
      case 5:
        do
        {
          v105 = v943[0];
          do
          {
            v106 = PDAMplusDAM(v29, v16, *v43, bswap32(*(unsigned __int16 *)v42) >> 16, *v43, ~(_BYTE)v16);
            *(_WORD *)v42 = bswap32(v106) >> 16;
            v42 += 2;
            *v43 = HIBYTE(v106);
            v43 += v892;
            --v105;
          }
          while (v105);
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_373;
      case 6:
        while (1)
        {
          v107 = v943[0];
          do
          {
            v108 = *v43;
            if (v108 > 7)
            {
              if (v108 > 0xF7)
                goto LABEL_136;
              v110 = PDAplusDAM(bswap32(*(unsigned __int16 *)v42) >> 16, v108, v29, v16, ~(_BYTE)v108);
              *(_WORD *)v42 = bswap32(v110) >> 16;
              v109 = HIBYTE(v110);
            }
            else
            {
              *(_WORD *)v42 = v44;
              LOBYTE(v109) = v16;
            }
            *v43 = v109;
LABEL_136:
            v42 += 2;
            v43 += v892;
            --v107;
          }
          while (v107);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 7:
        if (v7)
        {
          do
          {
            v111 = v943[0];
            do
            {
              v112 = PDAM(bswap32(*(unsigned __int16 *)v42) >> 16, *v43, v16);
              *(_WORD *)v42 = bswap32(v112) >> 16;
              v42 += 2;
              *v43 = HIBYTE(v112);
              v43 += v892;
              --v111;
            }
            while (v111);
            v42 += 2 * v929;
            v43 += v930;
            --v933[0];
          }
          while (v933[0]);
          goto LABEL_373;
        }
        v186 = v10;
        v187 = v933[0];
        v861 = v186;
        v188 = v892 + v892 * (unint64_t)(v186 - 1);
        do
        {
          v189 = v861;
          do
          {
            *(_WORD *)v42 = __rev16(PDM(bswap32(*(unsigned __int16 *)v42) >> 16, v16));
            v42 += 2;
            --v189;
          }
          while (v189);
          v42 += 2 * v929;
          v43 += v188 + v930;
          --v187;
        }
        while (v187);
        goto LABEL_372;
      case 8:
        if (v7)
        {
          do
          {
            v113 = v943[0];
            do
            {
              v114 = PDAM(bswap32(*(unsigned __int16 *)v42) >> 16, *v43, v41);
              *(_WORD *)v42 = bswap32(v114) >> 16;
              v42 += 2;
              *v43 = HIBYTE(v114);
              v43 += v892;
              --v113;
            }
            while (v113);
            v42 += 2 * v929;
            v43 += v930;
            --v933[0];
          }
          while (v933[0]);
          goto LABEL_373;
        }
        v190 = v10;
        v191 = v933[0];
        v862 = v190;
        v192 = v892 + v892 * (unint64_t)(v190 - 1);
        do
        {
          v193 = v862;
          do
          {
            *(_WORD *)v42 = __rev16(PDM(bswap32(*(unsigned __int16 *)v42) >> 16, v41));
            v42 += 2;
            --v193;
          }
          while (v193);
          v42 += 2 * v929;
          v43 += v192 + v930;
          --v191;
        }
        while (v191);
        goto LABEL_372;
      case 9:
        do
        {
          v115 = v943[0];
          do
          {
            v116 = PDAMplusDAM(v29, v16, *v43 ^ 0xFFu, bswap32(*(unsigned __int16 *)v42) >> 16, *v43, v16);
            *(_WORD *)v42 = bswap32(v116) >> 16;
            v42 += 2;
            *v43 = HIBYTE(v116);
            v43 += v892;
            --v115;
          }
          while (v115);
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_373;
      case 10:
        do
        {
          v117 = v943[0];
          do
          {
            v118 = PDAMplusDAM(v29, v16, *v43 ^ 0xFFu, bswap32(*(unsigned __int16 *)v42) >> 16, *v43, ~(_BYTE)v16);
            *(_WORD *)v42 = bswap32(v118) >> 16;
            v42 += 2;
            *v43 = HIBYTE(v118);
            v43 += v892;
            --v117;
          }
          while (v117);
          v42 += 2 * v929;
          v43 += v930;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_373;
      case 11:
        if (v7)
        {
          do
          {
            v119 = v943[0];
            do
            {
              v120 = PDAplusdDA(bswap32(*(unsigned __int16 *)v42) >> 16, *v43, v29, v16);
              *(_WORD *)v42 = bswap32(v120) >> 16;
              v42 += 2;
              *v43 = HIBYTE(v120);
              v43 += v892;
              --v119;
            }
            while (v119);
            v42 += 2 * v929;
            v43 += v930;
            --v933[0];
          }
          while (v933[0]);
        }
        else
        {
          v194 = v10;
          v195 = v933[0];
          v863 = v194;
          v196 = v892 + v892 * (unint64_t)(v194 - 1);
          do
          {
            v197 = v863;
            do
            {
              *(_WORD *)v42 = __rev16(PDplusdDA(bswap32(*(unsigned __int16 *)v42) >> 16, v29, v16));
              v42 += 2;
              --v197;
            }
            while (v197);
            v42 += 2 * v929;
            v43 += v196 + v930;
            --v195;
          }
          while (v195);
LABEL_372:
          v933[0] = 0;
          v8 = v848;
        }
        goto LABEL_373;
      case 12:
        if (v7)
        {
          do
          {
            v121 = v943[0];
            do
            {
              v122 = PDApluslDA(bswap32(*(unsigned __int16 *)v42) >> 16, *v43, v29, v16);
              *(_WORD *)v42 = bswap32(v122) >> 16;
              v42 += 2;
              *v43 = HIBYTE(v122);
              v43 += v892;
              --v121;
            }
            while (v121);
            v42 += 2 * v929;
            v43 += v930;
            --v933[0];
          }
          while (v933[0]);
        }
        else
        {
          v199 = v933[0];
          do
          {
            v200 = v10;
            do
            {
              v201 = bswap32(*(unsigned __int16 *)v42);
              v202 = (((HIWORD(v201) << 15) | HIWORD(v201)) & 0x1F07C1F) + ((v29 | (v29 << 15)) & 0x1F07C1F);
              *(_WORD *)v42 = __rev16((((15 * ((v202 >> 5) & 0x100401)) | v202 | (30 * ((v202 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v202 >> 5) & 0x100401)) | v202 | (30 * ((v202 >> 5) & 0x100401))) & 0x7C1F);
              v42 += 2;
              --v200;
            }
            while (v200);
            v42 += 2 * v929;
            v43 += v892 + v892 * (unint64_t)(v10 - 1) + v930;
            --v199;
          }
          while (v199);
          v933[0] = 0;
        }
        goto LABEL_373;
      case 13:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v123 = v943[0];
          do
          {
            if (v7)
            {
              v124 = *v43;
              if (v124 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v125) = v16;
                goto LABEL_175;
              }
            }
            else
            {
              v124 = 255;
            }
            v126 = PDAmultiplyPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v124, v29, v16, v4);
            *(_WORD *)v42 = bswap32(v126) >> 16;
            if (!v7)
              goto LABEL_176;
            v125 = HIBYTE(v126);
LABEL_175:
            *v43 = v125;
LABEL_176:
            v42 += 2;
            v43 += v892;
            --v123;
          }
          while (v123);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 14:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v127 = v943[0];
          do
          {
            if (v7)
            {
              v128 = *v43;
              if (v128 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v129) = v16;
                goto LABEL_187;
              }
            }
            else
            {
              v128 = 255;
            }
            v130 = PDAscreenPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v128, v29, v16);
            *(_WORD *)v42 = bswap32(v130) >> 16;
            if (!v7)
              goto LABEL_188;
            v129 = HIBYTE(v130);
LABEL_187:
            *v43 = v129;
LABEL_188:
            v42 += 2;
            v43 += v892;
            --v127;
          }
          while (v127);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 15:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v131 = v943[0];
          do
          {
            if (v7)
            {
              v132 = *v43;
              if (v132 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v133) = v16;
                goto LABEL_199;
              }
            }
            else
            {
              v132 = 255;
            }
            v134 = PDAoverlayPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v132, v29, v16);
            *(_WORD *)v42 = bswap32(v134) >> 16;
            if (!v7)
              goto LABEL_200;
            v133 = HIBYTE(v134);
LABEL_199:
            *v43 = v133;
LABEL_200:
            v42 += 2;
            v43 += v892;
            --v131;
          }
          while (v131);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 16:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v135 = v943[0];
          do
          {
            if (v7)
            {
              v136 = *v43;
              if (v136 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v137) = v16;
                goto LABEL_211;
              }
            }
            else
            {
              v136 = 255;
            }
            v138 = PDAdarkenPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v136, v29, v16);
            *(_WORD *)v42 = bswap32(v138) >> 16;
            if (!v7)
              goto LABEL_212;
            v137 = HIBYTE(v138);
LABEL_211:
            *v43 = v137;
LABEL_212:
            v42 += 2;
            v43 += v892;
            --v135;
          }
          while (v135);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 17:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v139 = v943[0];
          do
          {
            if (v7)
            {
              v140 = *v43;
              if (v140 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v141) = v16;
                goto LABEL_223;
              }
            }
            else
            {
              v140 = 255;
            }
            v142 = PDAlightenPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v140, v29, v16);
            *(_WORD *)v42 = bswap32(v142) >> 16;
            if (!v7)
              goto LABEL_224;
            v141 = HIBYTE(v142);
LABEL_223:
            *v43 = v141;
LABEL_224:
            v42 += 2;
            v43 += v892;
            --v139;
          }
          while (v139);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 18:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v143 = v943[0];
          do
          {
            if (v7)
            {
              v144 = *v43;
              if (v144 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v145) = v16;
                goto LABEL_235;
              }
            }
            else
            {
              v144 = 255;
            }
            v146 = PDAcolordodgePDA(bswap32(*(unsigned __int16 *)v42) >> 16, v144, v29, v16);
            *(_WORD *)v42 = bswap32(v146) >> 16;
            if (!v7)
              goto LABEL_236;
            v145 = HIBYTE(v146);
LABEL_235:
            *v43 = v145;
LABEL_236:
            v42 += 2;
            v43 += v892;
            --v143;
          }
          while (v143);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 19:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v147 = v943[0];
          do
          {
            if (v7)
            {
              v148 = *v43;
              if (v148 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v149) = v16;
                goto LABEL_247;
              }
            }
            else
            {
              v148 = 255;
            }
            v150 = PDAcolorburnPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v148, v29, v16);
            *(_WORD *)v42 = bswap32(v150) >> 16;
            if (!v7)
              goto LABEL_248;
            v149 = HIBYTE(v150);
LABEL_247:
            *v43 = v149;
LABEL_248:
            v42 += 2;
            v43 += v892;
            --v147;
          }
          while (v147);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 20:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v151 = v943[0];
          do
          {
            if (v7)
            {
              v152 = *v43;
              if (v152 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v153) = v16;
                goto LABEL_259;
              }
            }
            else
            {
              v152 = 255;
            }
            v154 = PDAsoftlightPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v152, v29, v16);
            *(_WORD *)v42 = bswap32(v154) >> 16;
            if (!v7)
              goto LABEL_260;
            v153 = HIBYTE(v154);
LABEL_259:
            *v43 = v153;
LABEL_260:
            v42 += 2;
            v43 += v892;
            --v151;
          }
          while (v151);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 21:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v155 = v943[0];
          do
          {
            if (v7)
            {
              v156 = *v43;
              if (v156 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v157) = v16;
                goto LABEL_271;
              }
            }
            else
            {
              v156 = 255;
            }
            v158 = PDAhardlightPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v156, v29, v16);
            *(_WORD *)v42 = bswap32(v158) >> 16;
            if (!v7)
              goto LABEL_272;
            v157 = HIBYTE(v158);
LABEL_271:
            *v43 = v157;
LABEL_272:
            v42 += 2;
            v43 += v892;
            --v155;
          }
          while (v155);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 22:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v159 = v943[0];
          do
          {
            if (v7)
            {
              v160 = *v43;
              if (v160 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v161) = v16;
                goto LABEL_283;
              }
            }
            else
            {
              v160 = 255;
            }
            v162 = PDAdifferencePDA(bswap32(*(unsigned __int16 *)v42) >> 16, v160, v29, v16);
            *(_WORD *)v42 = bswap32(v162) >> 16;
            if (!v7)
              goto LABEL_284;
            v161 = HIBYTE(v162);
LABEL_283:
            *v43 = v161;
LABEL_284:
            v42 += 2;
            v43 += v892;
            --v159;
          }
          while (v159);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 23:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v163 = v943[0];
          do
          {
            if (v7)
            {
              v164 = *v43;
              if (v164 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v165) = v16;
                goto LABEL_295;
              }
            }
            else
            {
              v164 = 255;
            }
            v166 = PDAexclusionPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v164, v29, v16);
            *(_WORD *)v42 = bswap32(v166) >> 16;
            if (!v7)
              goto LABEL_296;
            v165 = HIBYTE(v166);
LABEL_295:
            *v43 = v165;
LABEL_296:
            v42 += 2;
            v43 += v892;
            --v163;
          }
          while (v163);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 24:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v167 = v943[0];
          do
          {
            if (v7)
            {
              v168 = *v43;
              if (v168 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v169) = v16;
                goto LABEL_307;
              }
            }
            else
            {
              v168 = 255;
            }
            v170 = PDAhuePDA(bswap32(*(unsigned __int16 *)v42) >> 16, v168, v29, v16);
            *(_WORD *)v42 = bswap32(v170) >> 16;
            if (!v7)
              goto LABEL_308;
            v169 = HIBYTE(v170);
LABEL_307:
            *v43 = v169;
LABEL_308:
            v42 += 2;
            v43 += v892;
            --v167;
          }
          while (v167);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 25:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v171 = v943[0];
          do
          {
            if (v7)
            {
              v172 = *v43;
              if (v172 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v173) = v16;
                goto LABEL_319;
              }
            }
            else
            {
              v172 = 255;
            }
            v174 = PDAsaturationPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v172, v29, v16);
            *(_WORD *)v42 = bswap32(v174) >> 16;
            if (!v7)
              goto LABEL_320;
            v173 = HIBYTE(v174);
LABEL_319:
            *v43 = v173;
LABEL_320:
            v42 += 2;
            v43 += v892;
            --v171;
          }
          while (v171);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 26:
        if (v16 < 8)
          goto LABEL_373;
        while (1)
        {
          v175 = v943[0];
          do
          {
            if (v7)
            {
              v176 = *v43;
              if (v176 <= 7)
              {
                *(_WORD *)v42 = v44;
                LOBYTE(v177) = v16;
                goto LABEL_331;
              }
            }
            else
            {
              v176 = 255;
            }
            v178 = PDAluminosityPDA(v29, v16, bswap32(*(unsigned __int16 *)v42) >> 16, v176);
            *(_WORD *)v42 = bswap32(v178) >> 16;
            if (!v7)
              goto LABEL_332;
            v177 = HIBYTE(v178);
LABEL_331:
            *v43 = v177;
LABEL_332:
            v42 += 2;
            v43 += v892;
            --v175;
          }
          while (v175);
          v42 += 2 * v929;
          v43 += v930;
          if (!--v933[0])
            goto LABEL_373;
        }
      case 27:
        if (v16 < 8)
          goto LABEL_373;
        break;
      default:
        goto LABEL_373;
    }
LABEL_336:
    v179 = v943[0];
    while (1)
    {
      if (v7)
      {
        v180 = *v43;
        if (v180 <= 7)
        {
          *(_WORD *)v42 = v44;
          LOBYTE(v181) = v16;
LABEL_343:
          *v43 = v181;
          goto LABEL_344;
        }
      }
      else
      {
        v180 = 255;
      }
      v182 = PDAluminosityPDA(bswap32(*(unsigned __int16 *)v42) >> 16, v180, v29, v16);
      *(_WORD *)v42 = bswap32(v182) >> 16;
      if (v7)
      {
        v181 = HIBYTE(v182);
        goto LABEL_343;
      }
LABEL_344:
      v42 += 2;
      v43 += v892;
      if (!--v179)
      {
        v42 += 2 * v929;
        v43 += v930;
        if (!--v933[0])
        {
LABEL_373:
          v42 = v894;
          if (!v926)
            return 1;
          v932 = 0;
LABEL_375:
          if (!shape_enum_clip_next(v926, (int *)&v932 + 1, &v932, v943, v933))
          {
            v57 = (void *)v926;
            goto LABEL_1119;
          }
          v42 += 2 * v924 * (int)v932 + 2 * SHIDWORD(v932);
          v47 = v943[0];
          if (v7)
            v43 = &v896[(int)v898 * (uint64_t)(int)v932 + SHIDWORD(v932)];
          v198 = v930;
          if (v7)
            v198 = v898 - v943[0];
          v930 = v198;
          LODWORD(v10) = v943[0];
          goto LABEL_77;
        }
        goto LABEL_336;
      }
    }
  }
  v859 = *(unsigned int *)(v3 + 4);
  v943[0] = *(_DWORD *)(v3 + 4);
  v933[0] = v12;
  v17 = *(unsigned __int16 **)(v3 + 88);
  v19 = *(int *)(v3 + 12);
  v18 = *(int *)(v3 + 16);
  v20 = (unint64_t)*(int *)(v3 + 28) >> 1;
  if (v7)
  {
    v849 = *(int *)(v3 + 32);
    v850 = (char *)(v7 + v19 + (int)v849 * (uint64_t)(int)v18);
    v21 = 0xFFFFFFFFLL;
  }
  else
  {
    v849 = 0;
    v850 = 0;
    v21 = 0;
  }
  v32 = v14;
  v847 = *(_QWORD *)(v3 + 40) + 2 * (v19 + v18 * v20);
  v34 = *(_DWORD *)(v3 + 104);
  v33 = *(_DWORD *)(v3 + 108);
  v35 = *(_DWORD *)(v3 + 56);
  v36 = BYTE1(v5);
  v37 = *(_QWORD *)(v3 + 88);
  v810 = v35;
  v811 = *(_DWORD *)(v3 + 60);
  if (v36 == 3)
  {
    v53 = v21;
    v2 = RGB555_colorlookup(3, v17, v6);
    v37 = v2;
    if (v6)
    {
      v54 = 0;
      v6 = (unsigned __int8 *)(v2 + 512);
      v40 = 1;
      v55 = 16;
      v56 = 16;
      v893 = 16;
    }
    else
    {
      v893 = 0;
      v40 = 0;
      v55 = 16;
      v54 = 1;
      v56 = 16;
    }
    LODWORD(v858) = 16;
    LOBYTE(v21) = v53;
  }
  else
  {
    if (v36 == 1)
    {
      v38 = *(int *)(v3 + 60);
      v858 = (unint64_t)*(int *)(v3 + 76) >> 1;
      if (v6)
      {
        v39 = *(int *)(v3 + 80);
        v6 += v35 + (int)v39 * (uint64_t)(int)v38;
        v40 = -1;
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      v928 = &v17[v35 + v38 * v858];
      if (v858 == v20 && (uint64_t)(v847 - (_QWORD)v928) >= 1)
      {
        if (v859 >= (v847 - (unint64_t)v928) >> 1)
        {
          v847 += 2 * v11;
          v850 += v21 & v11;
          v6 += v40 & v11;
          v60 = 0xFFFFFFFFLL;
          v858 = (unint64_t)*(int *)(v3 + 28) >> 1;
          v928 += v11;
          goto LABEL_52;
        }
        v58 = v20 * v13;
        v59 = &v928[v20 * v13];
        if (v847 <= (unint64_t)&v59[v11])
        {
          v20 = -(uint64_t)v20;
          v74 = (unsigned __int8 *)&v850[v849 * v13];
          v849 = -v849;
          v850 = (char *)v74;
          v21 &= 1u;
          v6 += v39 * v13;
          v39 = -v39;
          v40 &= 1u;
          v60 = 1;
          v928 = v59;
          v858 = v20;
          v847 += 2 * v58;
          goto LABEL_52;
        }
      }
      v21 &= 1u;
      v40 &= 1u;
      v60 = 1;
LABEL_52:
      if (v14)
      {
        v925 = v21;
        v927 = v40;
        v893 = v39;
        v895 = 0;
        v37 = -1;
        v888 = 0;
        v891 = v858;
        goto LABEL_61;
      }
      v61 = v60;
      v55 = v858;
      v62 = v859;
      v63 = (int)v60 * (int)v859;
      v885 = v849 - (int)v21 * (int)v859;
      v64 = -1;
      v65 = v39;
LABEL_74:
      v857 = 0;
      v888 = 0;
      v891 = v55 - v63;
      v893 = v65 - v40 * v62;
      v895 = 0;
      v37 = (uint64_t)v928;
      v68 = (char *)v6;
      v897 = (char *)v6;
      v69 = v850;
      v931 = (_BYTE *)v847;
      goto LABEL_388;
    }
    LODWORD(v858) = *(_DWORD *)(v3 + 64);
    v55 = (unint64_t)*(int *)(v3 + 76) >> 1;
    if (v6)
    {
      v54 = 0;
      v893 = *(int *)(v3 + 80);
      v40 = 1;
    }
    else
    {
      v893 = 0;
      v40 = 0;
      v54 = 1;
    }
    v56 = *(unsigned int *)(v3 + 68);
  }
  v14 = v32;
  v39 = v56;
  v888 = v37 + 2 * v55 * (int)v56;
  v21 &= 1u;
  if (v32)
  {
    v891 = v55;
    v925 = v21;
    v927 = v40;
    v60 = 1;
    v895 = (unsigned __int16 *)v37;
    v928 = (unsigned __int16 *)v37;
LABEL_61:
    v899 = v37;
    shape_enum_clip_alloc(v2, v3, (int *)v14, v60, v20, 1, v34, v33, v859, v12);
    v67 = v66;
    v37 = (uint64_t)v928;
    v68 = (char *)v6;
    v897 = (char *)v6;
    v69 = v850;
    v885 = v849;
    v61 = v60;
    if (v66)
      goto LABEL_1092;
    return 1;
  }
  v62 = v859;
  v885 = v849 - (v21 * v859);
  if (!v37)
  {
    v928 = 0;
    v64 = 0;
    v61 = 1;
    v63 = v859;
    v65 = v893;
    goto LABEL_74;
  }
  v70 = v811 % (int)v56;
  v71 = v810 % (int)v858;
  v891 = v55;
  v72 = v37 + 2 * v55 * v70;
  v64 = v72 + 2 * (int)v858;
  v61 = 1;
  if ((v54 & 1) == 0)
    v40 = 1;
  v857 = 0;
  if ((v54 & 1) != 0)
    v68 = (char *)v6;
  else
    v68 = (char *)&v6[(int)v893 * (uint64_t)v70 + v71];
  if ((v54 & 1) != 0)
    v73 = (uint64_t)v6;
  else
    v73 = (uint64_t)&v6[(int)v893 * (uint64_t)v70 + v71];
  v895 = (unsigned __int16 *)(v72 + 2 * v71);
  v897 = (char *)v73;
  v69 = v850;
  v928 = v895;
  v931 = (_BYTE *)v847;
  v63 = v859;
LABEL_387:
  v810 = v71;
  v811 = v70;
LABEL_388:
  v925 = v21;
  v927 = v40;
  v887 = v20 - v63;
  v852 = v6;
  v853 = v61;
  v855 = v39;
  v856 = v20;
  v854 = v37;
  switch(v8)
  {
    case 0:
      v899 = v64;
      v203 = v887 - (int)v859;
      v204 = &v931[-2 * (int)v859 + 2];
      if ((int)v61 >= 0)
      {
        v204 = v931;
        v203 = v887 + (int)v859;
      }
      v205 = v933[0];
      v206 = v933[0] - 1;
      v207 = &v204[2 * ((v203 * v206) & (v203 >> 63))];
      if (v203 < 0)
        v203 = -v203;
      v208 = v21;
      CGBlt_fillBytes(2 * v859, v933[0], 0, v207, 2 * v203);
      if (!v208)
        goto LABEL_1089;
      v209 = v885 - (int)v859;
      v210 = (unsigned __int8 *)&v69[-(int)v859 + 1];
      if ((int)v61 >= 0)
      {
        v210 = (unsigned __int8 *)v69;
        v209 = v885 + (int)v859;
      }
      v211 = (char *)&v210[(v209 * v206) & (v209 >> 63)];
      if (v209 >= 0)
        v212 = v209;
      else
        v212 = -v209;
      v213 = v859;
      v214 = v205;
      v215 = 0;
      goto LABEL_400;
    case 1:
      v216 = *(unsigned __int8 *)(v851 + 1);
      if ((v216 - 2) >= 2)
      {
        if (v216 != 1)
          goto LABEL_1031;
        v899 = v64;
        v659 = v891 - (int)v859;
        v660 = v859 - 1;
        v661 = &v928[-(int)v859 + 1];
        v662 = v887 - (int)v859;
        v663 = &v931[-2 * (int)v859 + 2];
        if ((int)v61 >= 0)
        {
          v661 = v928;
          v663 = v931;
          v659 = v891 + (int)v859;
          v662 = v887 + (int)v859;
        }
        v664 = v933[0];
        v665 = v933[0] - 1;
        v666 = (char *)&v661[(v659 * v665) & (v659 >> 63)];
        if (v659 >= 0)
          v667 = v659;
        else
          v667 = -v659;
        if (v662 >= 0)
          LODWORD(v668) = v662;
        else
          v668 = -v662;
        v891 = v667;
        CGBlt_copyBytes(2 * v859, v933[0], v666, &v663[2 * ((v662 * v665) & (v662 >> 63))], 2 * v667, 2 * v668);
        if ((_DWORD)v925)
        {
          if (v927)
          {
            if ((v61 & 0x80000000) != 0)
            {
              v669 = v893 - (int)v859;
              v68 -= v660;
              v670 = v885 - (int)v859;
              v69 -= v660;
            }
            else
            {
              v669 = v893 + (int)v859;
              v670 = v885 + (int)v859;
            }
            v20 = v856;
            v803 = (v669 * v665) & (v669 >> 63);
            v804 = &v68[v803];
            if (v669 >= 0)
              v805 = v669;
            else
              v805 = -v669;
            v806 = (v670 * v665) & (v670 >> 63);
            v807 = &v69[v806];
            if (v670 >= 0)
              v808 = v670;
            else
              v808 = -v670;
            v68 += v803;
            v69 += v806;
            v893 = v805;
            v885 = v808;
            CGBlt_copyBytes(v859, v664, v804, v807, v805, v808);
            goto LABEL_402;
          }
          v213 = v859;
          v801 = v885 - (int)v859;
          v802 = (unsigned __int8 *)&v69[-v660];
          if ((int)v61 >= 0)
          {
            v802 = (unsigned __int8 *)v69;
            v801 = v885 + (int)v859;
          }
          v211 = (char *)&v802[(v801 * v665) & (v801 >> 63)];
          if (v801 >= 0)
            v212 = v801;
          else
            v212 = -v801;
          v214 = v664;
          v215 = -1;
LABEL_400:
          v69 = v211;
          v885 = v212;
          CGBlt_fillBytes(v213, v214, v215, v211, v212);
        }
        v20 = v856;
LABEL_402:
        v39 = v855;
        goto LABEL_1090;
      }
      if ((int)v859 < 16
        || (2 * v858) > 0x40
        || (v4.i32[0] = 2 * v858,
            v217 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8),
            v217.i16[0] = vaddlv_u8(v217),
            v217.i32[0] > 1u))
      {
LABEL_1031:
        if ((_DWORD)v21)
        {
          v671 = (int)v21;
          if (v40)
          {
            do
            {
              v672 = v943[0];
              do
              {
                *(_WORD *)v931 = *v928;
                *v69 = *v68;
                v69 += v671;
                v673 = &v928[(int)v61];
                if ((unint64_t)v673 >= v64)
                  v674 = -(uint64_t)(int)v858;
                else
                  v674 = 0;
                v68 += v40 + v674;
                v928 = &v673[v674];
                v931 += 2 * (int)v61;
                --v672;
              }
              while (v672);
              if (v888)
              {
                v675 = &v895[v891];
                v676 = (unint64_t)v675 >= v888;
                if ((unint64_t)v675 >= v888)
                  v677 = -(uint64_t)(v891 * (int)v39);
                else
                  v677 = 0;
                v678 = &v675[v677];
                v679 = v64 + 2 * v677;
                if (v676)
                  v680 = -(v893 * (int)v39);
                else
                  v680 = 0;
                v64 = v679 + 2 * v891;
                v928 = v678;
                v895 = v678;
                v897 += v893 + v680;
                v68 = v897;
              }
              else
              {
                v928 += v891;
                v68 += v893;
              }
              v931 += 2 * v887;
              v69 += v885;
              --v933[0];
            }
            while (v933[0]);
          }
          else
          {
            do
            {
              v792 = v943[0];
              do
              {
                *(_WORD *)v931 = *v928;
                *v69 = -1;
                v69 += v671;
                v793 = &v928[(int)v61];
                if ((unint64_t)v793 >= v64)
                  v794 = -(uint64_t)(int)v858;
                else
                  v794 = 0;
                v68 += v794;
                v928 = &v793[v794];
                v931 += 2 * (int)v61;
                --v792;
              }
              while (v792);
              if (v888)
              {
                v795 = &v895[v891];
                v796 = (unint64_t)v795 >= v888;
                if ((unint64_t)v795 >= v888)
                  v797 = -(uint64_t)(v891 * (int)v39);
                else
                  v797 = 0;
                v798 = &v795[v797];
                v799 = v64 + 2 * v797;
                if (v796)
                  v800 = -(v893 * (int)v39);
                else
                  v800 = 0;
                v64 = v799 + 2 * v891;
                v928 = v798;
                v895 = v798;
                v897 += v893 + v800;
                v68 = v897;
              }
              else
              {
                v928 += v891;
                v68 += v893;
              }
              v931 += 2 * v887;
              v69 += v885;
              --v933[0];
            }
            while (v933[0]);
          }
LABEL_1230:
          v899 = v64;
        }
        else
        {
          v780 = v40;
          v781 = v933[0];
          v782 = (v933[0] - 1) + 1;
          do
          {
            v783 = v859;
            do
            {
              *(_WORD *)v931 = *v928;
              v784 = &v928[(int)v61];
              if ((unint64_t)v784 >= v64)
                v785 = -(uint64_t)(int)v858;
              else
                v785 = 0;
              v68 += v780 + v785;
              v928 = &v784[v785];
              v931 += 2 * (int)v61;
              --v783;
            }
            while (v783);
            if (v888)
            {
              v786 = &v895[v891];
              v787 = (unint64_t)v786 >= v888;
              if ((unint64_t)v786 >= v888)
                v788 = -(uint64_t)(v891 * (int)v39);
              else
                v788 = 0;
              v789 = &v786[v788];
              v790 = v64 + 2 * v788;
              if (v787)
                v791 = -(v893 * (int)v39);
              else
                v791 = 0;
              v64 = v790 + 2 * v891;
              v928 = v789;
              v895 = v789;
              v897 += v893 + v791;
              v68 = v897;
            }
            else
            {
              v928 += v891;
              v68 += v893;
            }
            v931 += 2 * v887;
            --v781;
          }
          while (v781);
          v899 = v64;
          v69 += v885 * v782;
LABEL_1214:
          v933[0] = 0;
        }
        goto LABEL_1090;
      }
      v899 = v64;
      v218 = v933[0];
      CGSFillDRAM64(v931, 2 * (v859 + v887), 2 * v859, v933[0], v37, 2 * v891, 2 * v858, v39, 2 * v810, v811);
      if (!(_DWORD)v925)
        goto LABEL_1090;
      v219 = v218;
      v67 = v857;
      if (v927)
      {
        CGSFillDRAM64(v69, v859 + v885, v859, v219, (uint64_t)v6, v893, v858, v39, v810, v811);
        if (v857)
          goto LABEL_1091;
      }
      else
      {
        CGBlt_fillBytes(v859, v219, -1, v69, v859 + v885);
        if (v857)
          goto LABEL_1091;
      }
      return 1;
    case 2:
      v220 = (int)v61;
      v816 = -(v893 * (int)v39);
      v821 = -(uint64_t)(v891 * (int)v39);
      v900 = (int)v61;
      if ((_DWORD)v21)
      {
        v221 = (int)v21;
        v222 = v40;
        v223 = 2 * (int)v61;
        while (1)
        {
          v224 = v943[0];
          do
          {
            v225 = *v68;
            if (v225 < 0xF8)
            {
              if (v225 < 8)
                goto LABEL_419;
              v227 = v64;
              v228 = PDAplusDAM(bswap32(*v928) >> 16, v225, bswap32(*(unsigned __int16 *)v931) >> 16, *v69, v225 ^ 0xFF);
              v220 = v900;
              v64 = v227;
              *(_WORD *)v931 = bswap32(v228) >> 16;
              v226 = HIBYTE(v228);
            }
            else
            {
              *(_WORD *)v931 = *v928;
              LOBYTE(v226) = *v68;
            }
            *v69 = v226;
LABEL_419:
            v69 += v221;
            v229 = &v928[v220];
            if ((unint64_t)v229 >= v64)
              v230 = -(uint64_t)(int)v858;
            else
              v230 = 0;
            v68 += v222 + v230;
            v928 = &v229[v230];
            v931 += v223;
            --v224;
          }
          while (v224);
          if (v888)
          {
            v231 = &v895[v891];
            v232 = (unint64_t)v231 >= v888;
            v233 = v821;
            if ((unint64_t)v231 < v888)
              v233 = 0;
            v234 = &v231[v233];
            v235 = v64 + 2 * v233;
            v236 = v816;
            if (!v232)
              v236 = 0;
            v64 = v235 + 2 * v891;
            v928 = v234;
            v895 = v234;
            v897 += v893 + v236;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          if (!--v933[0])
            goto LABEL_1087;
        }
      }
      v681 = v40;
      v682 = v933[0];
      v815 = (v933[0] - 1) + 1;
      v683 = 2 * (int)v61;
LABEL_1050:
      v684 = v859;
      while (1)
      {
        v685 = *v68;
        if (v685 >= 0xF8)
          break;
        if (v685 >= 8)
        {
          v687 = v64;
          v688 = PDplusDM(bswap32(*v928) >> 16, bswap32(*(unsigned __int16 *)v931) >> 16, v685 ^ 0xFF);
          v220 = v900;
          v64 = v687;
          v686 = __rev16(v688);
          goto LABEL_1055;
        }
LABEL_1056:
        v689 = &v928[v220];
        if ((unint64_t)v689 >= v64)
          v690 = -(uint64_t)(int)v858;
        else
          v690 = 0;
        v68 += v681 + v690;
        v928 = &v689[v690];
        v931 += v683;
        if (!--v684)
        {
          if (v888)
          {
            v691 = &v895[v891];
            v692 = (unint64_t)v691 >= v888;
            v693 = v821;
            if ((unint64_t)v691 < v888)
              v693 = 0;
            v694 = &v691[v693];
            v695 = v64 + 2 * v693;
            v696 = v816;
            if (!v692)
              v696 = 0;
            v64 = v695 + 2 * v891;
            v928 = v694;
            v895 = v694;
            v897 += v893 + v696;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v933[0] = --v682;
          if (!v682)
          {
LABEL_1178:
            v899 = v64;
            v750 = v885;
            v751 = v815;
LABEL_1179:
            v69 += v750 * v751;
LABEL_1088:
            v8 = v848;
            v6 = v852;
LABEL_1089:
            v39 = v855;
            v20 = v856;
            v61 = v853;
            v37 = v854;
LABEL_1090:
            v67 = v857;
            if (!v857)
              return 1;
LABEL_1091:
            v932 = 0;
LABEL_1092:
            if (!shape_enum_clip_next(v67, (int *)&v932 + 1, &v932, v943, v933))
            {
              v57 = (void *)v67;
LABEL_1119:
              free(v57);
              return 1;
            }
            v857 = v67;
            if (v888)
            {
              v931 = (_BYTE *)(v847 + 2 * v20 * (int)v932 + 2 * SHIDWORD(v932));
              v70 = ((int)v932 + *(_DWORD *)(v851 + 60)) % (int)v39;
              v63 = v943[0];
              v71 = (HIDWORD(v932) + *(_DWORD *)(v851 + 56)) % (int)v858;
              v711 = v37 + 2 * v891 * v70;
              v712 = (unsigned __int16 *)(v711 + 2 * v71);
              v64 = v711 + 2 * (int)v858;
              v21 = v925;
              if ((_DWORD)v925)
                v69 = &v850[v849 * (int)v932 + SHIDWORD(v932)];
              v713 = v885;
              if ((_DWORD)v925)
                v713 = v849 - v943[0];
              v885 = v713;
              if (v927)
                v40 = v927;
              else
                v40 = 0;
              if (v927)
                v68 = (char *)&v6[v893 * v70 + v71];
              v714 = (unsigned __int8 *)v897;
              if (v927)
                v714 = &v6[v893 * v70 + v71];
              v895 = v712;
              v897 = (char *)v714;
              LODWORD(v859) = v943[0];
              v928 = v712;
              goto LABEL_387;
            }
            v715 = SHIDWORD(v932) * (uint64_t)(int)v61;
            LODWORD(v859) = v943[0];
            v931 = (_BYTE *)(v847 + 2 * v20 * (int)v932 + 2 * v715);
            v63 = v943[0] * (int)v61;
            v928 = (unsigned __int16 *)(v37 + 2 * (int)v932 * (int)v858 + 2 * v715);
            v891 = (int)v858 - v943[0] * (int)v61;
            v21 = v925;
            if ((_DWORD)v925)
              v69 = &v850[v849 * (int)v932 + v715];
            v716 = v885;
            if ((_DWORD)v925)
              v716 = v849 - v943[0] * (int)v61;
            v885 = v716;
            if (v927)
              v40 = v927;
            else
              v40 = 0;
            v888 = 0;
            if (v927)
              v68 = (char *)&v6[(int)v932 * (int)v39 + v715];
            v717 = v893;
            if (v927)
              v717 = (int)v39 - (int)v63;
            v893 = v717;
            v64 = v899;
            goto LABEL_388;
          }
          goto LABEL_1050;
        }
      }
      v686 = *v928;
LABEL_1055:
      *(_WORD *)v931 = v686;
      goto LABEL_1056;
    case 3:
      v61 = (int)v61;
      v237 = (int)v21;
      v812 = -(v893 * (int)v39);
      v817 = -(uint64_t)(v891 * (int)v39);
      if (v40)
      {
        v238 = v40;
        v239 = 2 * (int)v61;
        v901 = (int)v21;
        do
        {
          v240 = v943[0];
          do
          {
            v241 = *v69;
            if (v241 > 7)
            {
              v242 = *v928;
              if (v241 < 0xF8)
              {
                v243 = v61;
                v244 = v64;
                v245 = PDAM(__rev16(v242), *v68, v241);
                v64 = v244;
                v61 = v243;
                v237 = v901;
                *(_WORD *)v931 = bswap32(v245) >> 16;
                v242 = HIBYTE(v245);
              }
              else
              {
                *(_WORD *)v931 = v242;
                LOBYTE(v242) = *v68;
              }
            }
            else
            {
              LOBYTE(v242) = 0;
              *(_WORD *)v931 = 0;
            }
            *v69 = v242;
            v69 += v237;
            v246 = &v928[v61];
            if ((unint64_t)v246 >= v64)
              v247 = -(uint64_t)(int)v858;
            else
              v247 = 0;
            v68 += v238 + v247;
            v928 = &v246[v247];
            v931 += v239;
            --v240;
          }
          while (v240);
          if (v888)
          {
            v248 = &v895[v891];
            v249 = (unint64_t)v248 >= v888;
            v250 = v817;
            if ((unint64_t)v248 < v888)
              v250 = 0;
            v251 = &v248[v250];
            v252 = v64 + 2 * v250;
            v253 = v812;
            if (!v249)
              v253 = 0;
            v64 = v252 + 2 * v891;
            v928 = v251;
            v895 = v251;
            v897 += v893 + v253;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          --v933[0];
        }
        while (v933[0]);
      }
      else
      {
        v697 = v933[0];
        do
        {
          v844 = v697;
          v698 = v859;
          do
          {
            v699 = *v69;
            if (v699 >= 8)
            {
              v700 = *v928;
              if (v699 <= 0xF7)
              {
                v701 = v64;
                v702 = PDM(__rev16(v700), v699);
                v64 = v701;
                LOWORD(v700) = __rev16(v702);
              }
            }
            else
            {
              LOWORD(v700) = 0;
            }
            *(_WORD *)v931 = v700;
            v69 += v237;
            v703 = &v928[(int)v61];
            if ((unint64_t)v703 >= v64)
              v704 = -(uint64_t)(int)v858;
            else
              v704 = 0;
            v68 += v704;
            v928 = &v703[v704];
            v931 += 2 * (int)v61;
            --v698;
          }
          while (v698);
          if (v888)
          {
            v705 = &v895[v891];
            v706 = (unint64_t)v705 >= v888;
            v707 = v817;
            if ((unint64_t)v705 < v888)
              v707 = 0;
            v708 = &v705[v707];
            v709 = v64 + 2 * v707;
            v710 = v812;
            if (!v706)
              v710 = 0;
            v64 = v709 + 2 * v891;
            v928 = v708;
            v895 = v708;
            v897 += v893 + v710;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          v697 = v844 - 1;
          v933[0] = v844 - 1;
        }
        while (v844 != 1);
      }
      goto LABEL_1087;
    case 4:
      v254 = v61;
      v255 = (int)v61;
      v256 = (int)v21;
      v257 = v40;
      v864 = -(uint64_t)(v891 * (int)v39);
      v822 = -(v893 * (int)v39);
      v258 = 2 * v254;
      do
      {
        v259 = v943[0];
        v902 = v64;
        do
        {
          v260 = *v69;
          if (v260 < 0xF8)
          {
            if (v260 > 7)
            {
              if (v40)
                v262 = *v68;
              else
                v262 = -1;
              v263 = PDAM(bswap32(*v928) >> 16, v262, ~(_BYTE)v260);
              *(_WORD *)v931 = bswap32(v263) >> 16;
              v261 = HIBYTE(v263);
              v40 = v927;
              v64 = v902;
            }
            else if (v40)
            {
              LOBYTE(v261) = *v68;
            }
            else
            {
              LOBYTE(v261) = -1;
            }
          }
          else
          {
            LOBYTE(v261) = 0;
            *(_WORD *)v931 = 0;
          }
          *v69 = v261;
          v69 += v256;
          v264 = &v928[v255];
          if ((unint64_t)v264 >= v64)
            v265 = -(uint64_t)(int)v858;
          else
            v265 = 0;
          v68 += v257 + v265;
          v928 = &v264[v265];
          v931 += v258;
          --v259;
        }
        while (v259);
        if (v888)
        {
          v266 = &v895[v891];
          v267 = (unint64_t)v266 >= v888;
          v268 = v864;
          if ((unint64_t)v266 < v888)
            v268 = 0;
          v269 = &v266[v268];
          v270 = v64 + 2 * v268;
          v271 = v822;
          if (!v267)
            v271 = 0;
          v64 = v270 + 2 * v891;
          v928 = v269;
          v895 = v269;
          v897 += v893 + v271;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        --v933[0];
      }
      while (v933[0]);
      goto LABEL_1087;
    case 5:
      v272 = (int)v61;
      v273 = (int)v21;
      v274 = v40;
      v865 = -(uint64_t)(v891 * (int)v39);
      v823 = -(v893 * (int)v39);
      v275 = 2 * (int)v61;
      v276 = -(uint64_t)(int)v858;
      do
      {
        v277 = v943[0];
        do
        {
          v903 = v68;
          v278 = *v68;
          v279 = v64;
          v280 = v276;
          v281 = PDAMplusDAM(bswap32(*v928) >> 16, v278, *v69, bswap32(*(unsigned __int16 *)v931) >> 16, *v69, v278 ^ 0xFFu);
          v276 = v280;
          v64 = v279;
          *(_WORD *)v931 = bswap32(v281) >> 16;
          *v69 = HIBYTE(v281);
          v282 = (unsigned __int8 *)&v69[v273];
          v283 = &v928[v272];
          v69 += v273;
          if ((unint64_t)v283 >= v279)
            v284 = v280;
          else
            v284 = 0;
          v68 = &v903[v274 + v284];
          v928 = &v283[v284];
          v931 += v275;
          --v277;
        }
        while (v277);
        if (v888)
        {
          v285 = &v895[v891];
          v286 = (unint64_t)v285 >= v888;
          v287 = v865;
          if ((unint64_t)v285 < v888)
            v287 = 0;
          v288 = &v285[v287];
          v289 = v279 + 2 * v287;
          v290 = v823;
          if (!v286)
            v290 = 0;
          v64 = v289 + 2 * v891;
          v928 = v288;
          v895 = v288;
          v897 += v893 + v290;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 = (char *)&v282[v885];
        --v933[0];
      }
      while (v933[0]);
      goto LABEL_1087;
    case 6:
      v291 = v61;
      v292 = (int)v61;
      v293 = (int)v21;
      v294 = v40;
      v866 = -(uint64_t)(v891 * (int)v39);
      v824 = -(v893 * (int)v39);
      v295 = 2 * v291;
      while (1)
      {
        v296 = v943[0];
        v904 = v64;
        do
        {
          v297 = *v69;
          if (v297 > 7)
          {
            if (v297 > 0xF7)
              goto LABEL_505;
            if (v40)
              v299 = *v68;
            else
              v299 = -1;
            v300 = PDAplusDAM(bswap32(*(unsigned __int16 *)v931) >> 16, v297, bswap32(*v928) >> 16, v299, ~(_BYTE)v297);
            *(_WORD *)v931 = bswap32(v300) >> 16;
            v298 = HIBYTE(v300);
            v40 = v927;
            v64 = v904;
          }
          else
          {
            *(_WORD *)v931 = *v928;
            if (v40)
              LOBYTE(v298) = *v68;
            else
              LOBYTE(v298) = -1;
          }
          *v69 = v298;
LABEL_505:
          v69 += v293;
          v301 = &v928[v292];
          if ((unint64_t)v301 >= v64)
            v302 = -(uint64_t)(int)v858;
          else
            v302 = 0;
          v68 += v294 + v302;
          v928 = &v301[v302];
          v931 += v295;
          --v296;
        }
        while (v296);
        if (v888)
        {
          v303 = &v895[v891];
          v304 = (unint64_t)v303 >= v888;
          v305 = v866;
          if ((unint64_t)v303 < v888)
            v305 = 0;
          v306 = &v303[v305];
          v307 = v64 + 2 * v305;
          v308 = v824;
          if (!v304)
            v308 = 0;
          v64 = v307 + 2 * v891;
          v928 = v306;
          v895 = v306;
          v897 += v893 + v308;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
        {
LABEL_1087:
          v899 = v64;
          goto LABEL_1088;
        }
      }
    case 7:
      v309 = (int)v61;
      v813 = -(v893 * (int)v39);
      v818 = -(uint64_t)(v891 * (int)v39);
      if ((_DWORD)v21)
      {
        v310 = (int)v21;
        v311 = v40;
        v312 = 2 * (int)v61;
        v905 = v309;
        while (1)
        {
          v313 = v943[0];
          do
          {
            v314 = *v68;
            if (v314 > 7)
            {
              if (v314 > 0xF7)
                goto LABEL_526;
              v316 = v64;
              v317 = PDAM(bswap32(*(unsigned __int16 *)v931) >> 16, *v69, v314);
              v64 = v316;
              v309 = v905;
              *(_WORD *)v931 = bswap32(v317) >> 16;
              v315 = HIBYTE(v317);
            }
            else
            {
              LOBYTE(v315) = 0;
              *(_WORD *)v931 = 0;
            }
            *v69 = v315;
LABEL_526:
            v69 += v310;
            v318 = &v928[v309];
            if ((unint64_t)v318 >= v64)
              v319 = -(uint64_t)(int)v858;
            else
              v319 = 0;
            v68 += v311 + v319;
            v928 = &v318[v319];
            v931 += v312;
            --v313;
          }
          while (v313);
          if (v888)
          {
            v320 = &v895[v891];
            v321 = (unint64_t)v320 >= v888;
            v322 = v818;
            if ((unint64_t)v320 < v888)
              v322 = 0;
            v323 = &v320[v322];
            v324 = v64 + 2 * v322;
            v325 = v813;
            if (!v321)
              v325 = 0;
            v64 = v324 + 2 * v891;
            v928 = v323;
            v895 = v323;
            v897 += v893 + v325;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          if (!--v933[0])
            goto LABEL_1087;
        }
      }
      v718 = v40;
      v719 = v933[0];
      v809 = (v933[0] - 1) + 1;
      v720 = 2 * (int)v61;
LABEL_1122:
      v845 = v719;
      v721 = v859;
      while (1)
      {
        v722 = *v68;
        if (v722 < 8)
          break;
        if (v722 <= 0xF7)
        {
          v724 = v64;
          v725 = PDM(bswap32(*(unsigned __int16 *)v931) >> 16, v722);
          v64 = v724;
          v723 = __rev16(v725);
          goto LABEL_1127;
        }
LABEL_1128:
        v726 = &v928[v309];
        if ((unint64_t)v726 >= v64)
          v727 = -(uint64_t)(int)v858;
        else
          v727 = 0;
        v68 += v718 + v727;
        v928 = &v726[v727];
        v931 += v720;
        if (!--v721)
        {
          if (v888)
          {
            v728 = &v895[v891];
            v729 = (unint64_t)v728 >= v888;
            v730 = v818;
            if ((unint64_t)v728 < v888)
              v730 = 0;
            v731 = &v728[v730];
            v732 = v64 + 2 * v730;
            v733 = v813;
            if (!v729)
              v733 = 0;
            v64 = v732 + 2 * v891;
            v928 = v731;
            v895 = v731;
            v897 += v893 + v733;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v719 = v845 - 1;
          v933[0] = v845 - 1;
          if (v845 == 1)
          {
LABEL_1160:
            v899 = v64;
            v750 = v885;
            v751 = v809;
            goto LABEL_1179;
          }
          goto LABEL_1122;
        }
      }
      v723 = 0;
LABEL_1127:
      *(_WORD *)v931 = v723;
      goto LABEL_1128;
    case 8:
      v326 = (int)v61;
      v814 = -(v893 * (int)v39);
      v819 = -(uint64_t)(v891 * (int)v39);
      if ((_DWORD)v21)
      {
        v327 = (int)v21;
        v328 = v40;
        v329 = 2 * (int)v61;
        v906 = v326;
        while (1)
        {
          v330 = v943[0];
          do
          {
            v331 = *v68;
            if (v331 < 0xF8)
            {
              if (v331 < 8)
                goto LABEL_547;
              v333 = v64;
              v334 = PDAM(bswap32(*(unsigned __int16 *)v931) >> 16, *v69, ~(_BYTE)v331);
              v64 = v333;
              v326 = v906;
              *(_WORD *)v931 = bswap32(v334) >> 16;
              v332 = HIBYTE(v334);
            }
            else
            {
              LOBYTE(v332) = 0;
              *(_WORD *)v931 = 0;
            }
            *v69 = v332;
LABEL_547:
            v69 += v327;
            v335 = &v928[v326];
            if ((unint64_t)v335 >= v64)
              v336 = -(uint64_t)(int)v858;
            else
              v336 = 0;
            v68 += v328 + v336;
            v928 = &v335[v336];
            v931 += v329;
            --v330;
          }
          while (v330);
          if (v888)
          {
            v337 = &v895[v891];
            v338 = (unint64_t)v337 >= v888;
            v339 = v819;
            if ((unint64_t)v337 < v888)
              v339 = 0;
            v340 = &v337[v339];
            v341 = v64 + 2 * v339;
            v342 = v814;
            if (!v338)
              v342 = 0;
            v64 = v341 + 2 * v891;
            v928 = v340;
            v895 = v340;
            v897 += v893 + v342;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          if (!--v933[0])
            goto LABEL_1087;
        }
      }
      v734 = v40;
      v735 = v933[0];
      v809 = (v933[0] - 1) + 1;
      v736 = 2 * (int)v61;
LABEL_1142:
      v846 = v735;
      v737 = v859;
      while (1)
      {
        v738 = *v68;
        if (v738 > 0xF7)
          break;
        if (v738 >= 8)
        {
          v740 = v64;
          v741 = PDM(bswap32(*(unsigned __int16 *)v931) >> 16, ~(_BYTE)v738);
          v64 = v740;
          v739 = __rev16(v741);
          goto LABEL_1147;
        }
LABEL_1148:
        v742 = &v928[v326];
        if ((unint64_t)v742 >= v64)
          v743 = -(uint64_t)(int)v858;
        else
          v743 = 0;
        v68 += v734 + v743;
        v928 = &v742[v743];
        v931 += v736;
        if (!--v737)
        {
          if (v888)
          {
            v744 = &v895[v891];
            v745 = (unint64_t)v744 >= v888;
            v746 = v819;
            if ((unint64_t)v744 < v888)
              v746 = 0;
            v747 = &v744[v746];
            v748 = v64 + 2 * v746;
            v749 = v814;
            if (!v745)
              v749 = 0;
            v64 = v748 + 2 * v891;
            v928 = v747;
            v895 = v747;
            v897 += v893 + v749;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v735 = v846 - 1;
          v933[0] = v846 - 1;
          if (v846 == 1)
            goto LABEL_1160;
          goto LABEL_1142;
        }
      }
      v739 = 0;
LABEL_1147:
      *(_WORD *)v931 = v739;
      goto LABEL_1148;
    case 9:
      v343 = (int)v61;
      v344 = (int)v21;
      v345 = v40;
      v867 = -(uint64_t)(v891 * (int)v39);
      v825 = -(v893 * (int)v39);
      v346 = 2 * (int)v61;
      do
      {
        v347 = v943[0];
        do
        {
          v348 = v64;
          v349 = PDAMplusDAM(bswap32(*v928) >> 16, *v68, *v69 ^ 0xFFu, bswap32(*(unsigned __int16 *)v931) >> 16, *v69, *v68);
          v64 = v348;
          *(_WORD *)v931 = bswap32(v349) >> 16;
          *v69 = HIBYTE(v349);
          v69 += v344;
          v350 = &v928[v343];
          if ((unint64_t)v350 >= v348)
            v351 = -(uint64_t)(int)v858;
          else
            v351 = 0;
          v68 += v345 + v351;
          v928 = &v350[v351];
          v931 += v346;
          --v347;
        }
        while (v347);
        if (v888)
        {
          v352 = &v895[v891];
          v353 = (unint64_t)v352 >= v888;
          v354 = v867;
          if ((unint64_t)v352 < v888)
            v354 = 0;
          v355 = &v352[v354];
          v356 = v348 + 2 * v354;
          v357 = v825;
          if (!v353)
            v357 = 0;
          v64 = v356 + 2 * v891;
          v928 = v355;
          v895 = v355;
          v897 += v893 + v357;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        --v933[0];
      }
      while (v933[0]);
      goto LABEL_1087;
    case 10:
      v358 = (int)v61;
      v359 = (int)v21;
      v360 = v40;
      v868 = -(uint64_t)(v891 * (int)v39);
      v826 = -(v893 * (int)v39);
      v361 = 2 * (int)v61;
      v362 = -(uint64_t)(int)v858;
      do
      {
        v363 = v943[0];
        do
        {
          v907 = v68;
          v364 = *v68;
          v365 = v64;
          v366 = v362;
          v367 = PDAMplusDAM(bswap32(*v928) >> 16, v364, *v69 ^ 0xFFu, bswap32(*(unsigned __int16 *)v931) >> 16, *v69, v364 ^ 0xFFu);
          v362 = v366;
          v64 = v365;
          *(_WORD *)v931 = bswap32(v367) >> 16;
          *v69 = HIBYTE(v367);
          v69 += v359;
          v368 = &v928[v358];
          if ((unint64_t)v368 >= v365)
            v369 = v366;
          else
            v369 = 0;
          v68 = &v907[v360 + v369];
          v928 = &v368[v369];
          v931 += v361;
          --v363;
        }
        while (v363);
        if (v888)
        {
          v370 = &v895[v891];
          v371 = (unint64_t)v370 >= v888;
          v372 = v868;
          if ((unint64_t)v370 < v888)
            v372 = 0;
          v373 = &v370[v372];
          v374 = v365 + 2 * v372;
          v375 = v826;
          if (!v371)
            v375 = 0;
          v64 = v374 + 2 * v891;
          v928 = v373;
          v895 = v373;
          v897 += v893 + v375;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        --v933[0];
      }
      while (v933[0]);
      goto LABEL_1087;
    case 11:
      v820 = -(v893 * (int)v39);
      v827 = -(uint64_t)(v891 * (int)v39);
      v908 = (int)v61;
      if ((_DWORD)v21)
      {
        v376 = (int)v21;
        v377 = v40;
        do
        {
          v378 = v943[0];
          v379 = v64;
          do
          {
            if (v40)
              v380 = *v68;
            else
              v380 = 255;
            v381 = PDAplusdDA(bswap32(*(unsigned __int16 *)v931) >> 16, *v69, bswap32(*v928) >> 16, v380);
            *(_WORD *)v931 = bswap32(v381) >> 16;
            *v69 = HIBYTE(v381);
            v69 += v376;
            v382 = &v928[(int)v61];
            if ((unint64_t)v382 >= v379)
              v383 = -(uint64_t)(int)v858;
            else
              v383 = 0;
            v68 += v377 + v383;
            v928 = &v382[v383];
            v931 += 2 * (int)v61;
            --v378;
            v40 = v927;
          }
          while (v378);
          v64 = v379;
          if (v888)
          {
            v384 = &v895[v891];
            v385 = (unint64_t)v384 >= v888;
            v386 = v827;
            if ((unint64_t)v384 < v888)
              v386 = 0;
            v387 = &v384[v386];
            v388 = v379 + 2 * v386;
            v389 = v820;
            if (!v385)
              v389 = 0;
            v64 = v388 + 2 * v891;
            v928 = v387;
            v895 = v387;
            v897 += v893 + v389;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          v69 += v885;
          --v933[0];
        }
        while (v933[0]);
        goto LABEL_1087;
      }
      v752 = v40;
      v753 = v933[0];
      v815 = (v933[0] - 1) + 1;
      v754 = 2 * (int)v61;
      do
      {
        v755 = v859;
        v756 = v64;
        do
        {
          if (v40)
            v757 = *v68;
          else
            v757 = 255;
          *(_WORD *)v931 = __rev16(PDplusdDA(bswap32(*(unsigned __int16 *)v931) >> 16, bswap32(*v928) >> 16, v757));
          v758 = &v928[v908];
          if ((unint64_t)v758 >= v756)
            v759 = -(uint64_t)(int)v858;
          else
            v759 = 0;
          v68 += v752 + v759;
          v928 = &v758[v759];
          v931 += v754;
          --v755;
          v40 = v927;
        }
        while (v755);
        v64 = v756;
        if (v888)
        {
          v760 = &v895[v891];
          v761 = (unint64_t)v760 >= v888;
          v762 = v827;
          if ((unint64_t)v760 < v888)
            v762 = 0;
          v763 = &v760[v762];
          v764 = v756 + 2 * v762;
          v765 = v820;
          if (!v761)
            v765 = 0;
          v64 = v764 + 2 * v891;
          v928 = v763;
          v895 = v763;
          v897 += v893 + v765;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v933[0] = --v753;
      }
      while (v753);
      goto LABEL_1178;
    case 12:
      if (!(_DWORD)v21)
      {
        v766 = v933[0];
        v767 = (v933[0] - 1) + 1;
        do
        {
          v768 = v859;
          do
          {
            v769 = bswap32(*(unsigned __int16 *)v931);
            v770 = bswap32(*v928);
            v771 = (((HIWORD(v770) << 15) | HIWORD(v770)) & 0x1F07C1F)
                 + (((HIWORD(v769) << 15) | HIWORD(v769)) & 0x1F07C1F);
            *(_WORD *)v931 = __rev16((((15 * ((v771 >> 5) & 0x100401)) | v771 | (30 * ((v771 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v771 >> 5) & 0x100401)) | v771 | (30 * ((v771 >> 5) & 0x100401))) & 0x7C1F);
            v772 = &v928[(int)v61];
            if ((unint64_t)v772 >= v64)
              v773 = -(uint64_t)(int)v858;
            else
              v773 = 0;
            v68 += v40 + v773;
            v928 = &v772[v773];
            v931 += 2 * (int)v61;
            --v768;
          }
          while (v768);
          if (v888)
          {
            v774 = &v895[v891];
            v775 = (unint64_t)v774 >= v888;
            if ((unint64_t)v774 >= v888)
              v776 = -(uint64_t)(v891 * (int)v39);
            else
              v776 = 0;
            v777 = &v774[v776];
            v778 = v64 + 2 * v776;
            if (v775)
              v779 = -(v893 * (int)v39);
            else
              v779 = 0;
            v64 = v778 + 2 * v891;
            v928 = v777;
            v895 = v777;
            v897 += v893 + v779;
            v68 = v897;
          }
          else
          {
            v928 += v891;
            v68 += v893;
          }
          v931 += 2 * v887;
          --v766;
        }
        while (v766);
        v899 = v64;
        v69 += v885 * v767;
        goto LABEL_1214;
      }
      v390 = (int)v21;
      v391 = v40;
      v869 = -(uint64_t)(v891 * (int)v39);
      v828 = -(v893 * (int)v39);
      do
      {
        v392 = v943[0];
        v393 = v64;
        do
        {
          if (v40)
            v394 = *v68;
          else
            v394 = 255;
          v395 = PDApluslDA(bswap32(*(unsigned __int16 *)v931) >> 16, *v69, bswap32(*v928) >> 16, v394);
          *(_WORD *)v931 = bswap32(v395) >> 16;
          *v69 = HIBYTE(v395);
          v69 += v390;
          v396 = &v928[(int)v61];
          if ((unint64_t)v396 >= v393)
            v397 = -(uint64_t)(int)v858;
          else
            v397 = 0;
          v68 += v391 + v397;
          v928 = &v396[v397];
          v931 += 2 * (int)v61;
          --v392;
          v40 = v927;
        }
        while (v392);
        v64 = v393;
        if (v888)
        {
          v398 = &v895[v891];
          v399 = (unint64_t)v398 >= v888;
          v400 = v869;
          if ((unint64_t)v398 < v888)
            v400 = 0;
          v401 = &v398[v400];
          v402 = v393 + 2 * v400;
          v403 = v828;
          if (!v399)
            v403 = 0;
          v64 = v402 + 2 * v891;
          v928 = v401;
          v895 = v401;
          v897 += v893 + v403;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        --v933[0];
      }
      while (v933[0]);
      goto LABEL_1087;
    case 13:
      v404 = v61;
      v909 = (int)v61;
      v405 = (int)v21;
      v406 = v40;
      v870 = -(uint64_t)(v891 * (int)v39);
      v829 = -(v893 * (int)v39);
      v407 = 2 * v404;
      while (1)
      {
        v408 = v943[0];
        do
        {
          if (!v40)
          {
            v409 = 255;
LABEL_634:
            v410 = v64;
            if ((_DWORD)v21)
            {
              v411 = *v69;
              if (v411 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_640:
                *v69 = v409;
                goto LABEL_641;
              }
            }
            else
            {
              v411 = 255;
            }
            v412 = PDAmultiplyPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v411, bswap32(*v928) >> 16, v409, v4);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v412) >> 16;
            v64 = v410;
            if (!(_DWORD)v925)
              goto LABEL_641;
            v409 = HIBYTE(v412);
            goto LABEL_640;
          }
          v409 = *v68;
          if (v409 >= 8)
            goto LABEL_634;
LABEL_641:
          v69 += v405;
          v413 = &v928[v909];
          if ((unint64_t)v413 >= v64)
            v414 = -(uint64_t)(int)v858;
          else
            v414 = 0;
          v68 += v406 + v414;
          v928 = &v413[v414];
          v931 += v407;
          --v408;
        }
        while (v408);
        if (v888)
        {
          v415 = &v895[v891];
          v416 = (unint64_t)v415 >= v888;
          v417 = v870;
          if ((unint64_t)v415 < v888)
            v417 = 0;
          v418 = &v415[v417];
          v419 = v64 + 2 * v417;
          v420 = v829;
          if (!v416)
            v420 = 0;
          v64 = v419 + 2 * v891;
          v928 = v418;
          v895 = v418;
          v897 += v893 + v420;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 14:
      v421 = v61;
      v910 = (int)v61;
      v422 = (int)v21;
      v423 = v40;
      v871 = -(uint64_t)(v891 * (int)v39);
      v830 = -(v893 * (int)v39);
      v424 = 2 * v421;
      while (1)
      {
        v425 = v943[0];
        do
        {
          if (!v40)
          {
            v426 = 255;
LABEL_660:
            v427 = v64;
            if ((_DWORD)v21)
            {
              v428 = *v69;
              if (v428 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_666:
                *v69 = v426;
                goto LABEL_667;
              }
            }
            else
            {
              v428 = 255;
            }
            v429 = PDAscreenPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v428, bswap32(*v928) >> 16, v426);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v429) >> 16;
            v64 = v427;
            if (!(_DWORD)v925)
              goto LABEL_667;
            v426 = HIBYTE(v429);
            goto LABEL_666;
          }
          v426 = *v68;
          if (v426 >= 8)
            goto LABEL_660;
LABEL_667:
          v69 += v422;
          v430 = &v928[v910];
          if ((unint64_t)v430 >= v64)
            v431 = -(uint64_t)(int)v858;
          else
            v431 = 0;
          v68 += v423 + v431;
          v928 = &v430[v431];
          v931 += v424;
          --v425;
        }
        while (v425);
        if (v888)
        {
          v432 = &v895[v891];
          v433 = (unint64_t)v432 >= v888;
          v434 = v871;
          if ((unint64_t)v432 < v888)
            v434 = 0;
          v435 = &v432[v434];
          v436 = v64 + 2 * v434;
          v437 = v830;
          if (!v433)
            v437 = 0;
          v64 = v436 + 2 * v891;
          v928 = v435;
          v895 = v435;
          v897 += v893 + v437;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 15:
      v438 = v61;
      v911 = (int)v61;
      v439 = (int)v21;
      v440 = v40;
      v872 = -(uint64_t)(v891 * (int)v39);
      v831 = -(v893 * (int)v39);
      v441 = 2 * v438;
      while (1)
      {
        v442 = v943[0];
        do
        {
          if (!v40)
          {
            v443 = 255;
LABEL_686:
            v444 = v64;
            if ((_DWORD)v21)
            {
              v445 = *v69;
              if (v445 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_692:
                *v69 = v443;
                goto LABEL_693;
              }
            }
            else
            {
              v445 = 255;
            }
            v446 = PDAoverlayPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v445, bswap32(*v928) >> 16, v443);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v446) >> 16;
            v64 = v444;
            if (!(_DWORD)v925)
              goto LABEL_693;
            v443 = HIBYTE(v446);
            goto LABEL_692;
          }
          v443 = *v68;
          if (v443 >= 8)
            goto LABEL_686;
LABEL_693:
          v69 += v439;
          v447 = &v928[v911];
          if ((unint64_t)v447 >= v64)
            v448 = -(uint64_t)(int)v858;
          else
            v448 = 0;
          v68 += v440 + v448;
          v928 = &v447[v448];
          v931 += v441;
          --v442;
        }
        while (v442);
        if (v888)
        {
          v449 = &v895[v891];
          v450 = (unint64_t)v449 >= v888;
          v451 = v872;
          if ((unint64_t)v449 < v888)
            v451 = 0;
          v452 = &v449[v451];
          v453 = v64 + 2 * v451;
          v454 = v831;
          if (!v450)
            v454 = 0;
          v64 = v453 + 2 * v891;
          v928 = v452;
          v895 = v452;
          v897 += v893 + v454;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 16:
      v455 = v61;
      v912 = (int)v61;
      v456 = (int)v21;
      v457 = v40;
      v873 = -(uint64_t)(v891 * (int)v39);
      v832 = -(v893 * (int)v39);
      v458 = 2 * v455;
      while (1)
      {
        v459 = v943[0];
        do
        {
          if (!v40)
          {
            v460 = 255;
LABEL_712:
            v461 = v64;
            if ((_DWORD)v21)
            {
              v462 = *v69;
              if (v462 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_718:
                *v69 = v460;
                goto LABEL_719;
              }
            }
            else
            {
              v462 = 255;
            }
            v463 = PDAdarkenPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v462, bswap32(*v928) >> 16, v460);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v463) >> 16;
            v64 = v461;
            if (!(_DWORD)v925)
              goto LABEL_719;
            v460 = HIBYTE(v463);
            goto LABEL_718;
          }
          v460 = *v68;
          if (v460 >= 8)
            goto LABEL_712;
LABEL_719:
          v69 += v456;
          v464 = &v928[v912];
          if ((unint64_t)v464 >= v64)
            v465 = -(uint64_t)(int)v858;
          else
            v465 = 0;
          v68 += v457 + v465;
          v928 = &v464[v465];
          v931 += v458;
          --v459;
        }
        while (v459);
        if (v888)
        {
          v466 = &v895[v891];
          v467 = (unint64_t)v466 >= v888;
          v468 = v873;
          if ((unint64_t)v466 < v888)
            v468 = 0;
          v469 = &v466[v468];
          v470 = v64 + 2 * v468;
          v471 = v832;
          if (!v467)
            v471 = 0;
          v64 = v470 + 2 * v891;
          v928 = v469;
          v895 = v469;
          v897 += v893 + v471;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 17:
      v472 = v61;
      v913 = (int)v61;
      v473 = (int)v21;
      v474 = v40;
      v874 = -(uint64_t)(v891 * (int)v39);
      v833 = -(v893 * (int)v39);
      v475 = 2 * v472;
      while (1)
      {
        v476 = v943[0];
        do
        {
          if (!v40)
          {
            v477 = 255;
LABEL_738:
            v478 = v64;
            if ((_DWORD)v21)
            {
              v479 = *v69;
              if (v479 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_744:
                *v69 = v477;
                goto LABEL_745;
              }
            }
            else
            {
              v479 = 255;
            }
            v480 = PDAlightenPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v479, bswap32(*v928) >> 16, v477);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v480) >> 16;
            v64 = v478;
            if (!(_DWORD)v925)
              goto LABEL_745;
            v477 = HIBYTE(v480);
            goto LABEL_744;
          }
          v477 = *v68;
          if (v477 >= 8)
            goto LABEL_738;
LABEL_745:
          v69 += v473;
          v481 = &v928[v913];
          if ((unint64_t)v481 >= v64)
            v482 = -(uint64_t)(int)v858;
          else
            v482 = 0;
          v68 += v474 + v482;
          v928 = &v481[v482];
          v931 += v475;
          --v476;
        }
        while (v476);
        if (v888)
        {
          v483 = &v895[v891];
          v484 = (unint64_t)v483 >= v888;
          v485 = v874;
          if ((unint64_t)v483 < v888)
            v485 = 0;
          v486 = &v483[v485];
          v487 = v64 + 2 * v485;
          v488 = v833;
          if (!v484)
            v488 = 0;
          v64 = v487 + 2 * v891;
          v928 = v486;
          v895 = v486;
          v897 += v893 + v488;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 18:
      v489 = v61;
      v914 = (int)v61;
      v490 = (int)v21;
      v491 = v40;
      v875 = -(uint64_t)(v891 * (int)v39);
      v834 = -(v893 * (int)v39);
      v492 = 2 * v489;
      while (1)
      {
        v493 = v943[0];
        do
        {
          if (!v40)
          {
            v494 = 255;
LABEL_764:
            v495 = v64;
            if ((_DWORD)v21)
            {
              v496 = *v69;
              if (v496 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_770:
                *v69 = v494;
                goto LABEL_771;
              }
            }
            else
            {
              v496 = 255;
            }
            v497 = PDAcolordodgePDA(bswap32(*(unsigned __int16 *)v931) >> 16, v496, bswap32(*v928) >> 16, v494);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v497) >> 16;
            v64 = v495;
            if (!(_DWORD)v925)
              goto LABEL_771;
            v494 = HIBYTE(v497);
            goto LABEL_770;
          }
          v494 = *v68;
          if (v494 >= 8)
            goto LABEL_764;
LABEL_771:
          v69 += v490;
          v498 = &v928[v914];
          if ((unint64_t)v498 >= v64)
            v499 = -(uint64_t)(int)v858;
          else
            v499 = 0;
          v68 += v491 + v499;
          v928 = &v498[v499];
          v931 += v492;
          --v493;
        }
        while (v493);
        if (v888)
        {
          v500 = &v895[v891];
          v501 = (unint64_t)v500 >= v888;
          v502 = v875;
          if ((unint64_t)v500 < v888)
            v502 = 0;
          v503 = &v500[v502];
          v504 = v64 + 2 * v502;
          v505 = v834;
          if (!v501)
            v505 = 0;
          v64 = v504 + 2 * v891;
          v928 = v503;
          v895 = v503;
          v897 += v893 + v505;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 19:
      v506 = v61;
      v915 = (int)v61;
      v507 = (int)v21;
      v508 = v40;
      v876 = -(uint64_t)(v891 * (int)v39);
      v835 = -(v893 * (int)v39);
      v509 = 2 * v506;
      while (1)
      {
        v510 = v943[0];
        do
        {
          if (!v40)
          {
            v511 = 255;
LABEL_790:
            v512 = v64;
            if ((_DWORD)v21)
            {
              v513 = *v69;
              if (v513 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_796:
                *v69 = v511;
                goto LABEL_797;
              }
            }
            else
            {
              v513 = 255;
            }
            v514 = PDAcolorburnPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v513, bswap32(*v928) >> 16, v511);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v514) >> 16;
            v64 = v512;
            if (!(_DWORD)v925)
              goto LABEL_797;
            v511 = HIBYTE(v514);
            goto LABEL_796;
          }
          v511 = *v68;
          if (v511 >= 8)
            goto LABEL_790;
LABEL_797:
          v69 += v507;
          v515 = &v928[v915];
          if ((unint64_t)v515 >= v64)
            v516 = -(uint64_t)(int)v858;
          else
            v516 = 0;
          v68 += v508 + v516;
          v928 = &v515[v516];
          v931 += v509;
          --v510;
        }
        while (v510);
        if (v888)
        {
          v517 = &v895[v891];
          v518 = (unint64_t)v517 >= v888;
          v519 = v876;
          if ((unint64_t)v517 < v888)
            v519 = 0;
          v520 = &v517[v519];
          v521 = v64 + 2 * v519;
          v522 = v835;
          if (!v518)
            v522 = 0;
          v64 = v521 + 2 * v891;
          v928 = v520;
          v895 = v520;
          v897 += v893 + v522;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 20:
      v523 = v61;
      v916 = (int)v61;
      v524 = (int)v21;
      v525 = v40;
      v877 = -(uint64_t)(v891 * (int)v39);
      v836 = -(v893 * (int)v39);
      v526 = 2 * v523;
      while (1)
      {
        v527 = v943[0];
        do
        {
          if (!v40)
          {
            v528 = 255;
LABEL_816:
            v529 = v64;
            if ((_DWORD)v21)
            {
              v530 = *v69;
              if (v530 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_822:
                *v69 = v528;
                goto LABEL_823;
              }
            }
            else
            {
              v530 = 255;
            }
            v531 = PDAsoftlightPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v530, bswap32(*v928) >> 16, v528);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v531) >> 16;
            v64 = v529;
            if (!(_DWORD)v925)
              goto LABEL_823;
            v528 = HIBYTE(v531);
            goto LABEL_822;
          }
          v528 = *v68;
          if (v528 >= 8)
            goto LABEL_816;
LABEL_823:
          v69 += v524;
          v532 = &v928[v916];
          if ((unint64_t)v532 >= v64)
            v533 = -(uint64_t)(int)v858;
          else
            v533 = 0;
          v68 += v525 + v533;
          v928 = &v532[v533];
          v931 += v526;
          --v527;
        }
        while (v527);
        if (v888)
        {
          v534 = &v895[v891];
          v535 = (unint64_t)v534 >= v888;
          v536 = v877;
          if ((unint64_t)v534 < v888)
            v536 = 0;
          v537 = &v534[v536];
          v538 = v64 + 2 * v536;
          v539 = v836;
          if (!v535)
            v539 = 0;
          v64 = v538 + 2 * v891;
          v928 = v537;
          v895 = v537;
          v897 += v893 + v539;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 21:
      v540 = v61;
      v917 = (int)v61;
      v541 = (int)v21;
      v542 = v40;
      v878 = -(uint64_t)(v891 * (int)v39);
      v837 = -(v893 * (int)v39);
      v543 = 2 * v540;
      while (1)
      {
        v544 = v943[0];
        do
        {
          if (!v40)
          {
            v545 = 255;
LABEL_842:
            v546 = v64;
            if ((_DWORD)v21)
            {
              v547 = *v69;
              if (v547 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_848:
                *v69 = v545;
                goto LABEL_849;
              }
            }
            else
            {
              v547 = 255;
            }
            v548 = PDAhardlightPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v547, bswap32(*v928) >> 16, v545);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v548) >> 16;
            v64 = v546;
            if (!(_DWORD)v925)
              goto LABEL_849;
            v545 = HIBYTE(v548);
            goto LABEL_848;
          }
          v545 = *v68;
          if (v545 >= 8)
            goto LABEL_842;
LABEL_849:
          v69 += v541;
          v549 = &v928[v917];
          if ((unint64_t)v549 >= v64)
            v550 = -(uint64_t)(int)v858;
          else
            v550 = 0;
          v68 += v542 + v550;
          v928 = &v549[v550];
          v931 += v543;
          --v544;
        }
        while (v544);
        if (v888)
        {
          v551 = &v895[v891];
          v552 = (unint64_t)v551 >= v888;
          v553 = v878;
          if ((unint64_t)v551 < v888)
            v553 = 0;
          v554 = &v551[v553];
          v555 = v64 + 2 * v553;
          v556 = v837;
          if (!v552)
            v556 = 0;
          v64 = v555 + 2 * v891;
          v928 = v554;
          v895 = v554;
          v897 += v893 + v556;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 22:
      v557 = v61;
      v918 = (int)v61;
      v558 = (int)v21;
      v559 = v40;
      v879 = -(uint64_t)(v891 * (int)v39);
      v838 = -(v893 * (int)v39);
      v560 = 2 * v557;
      while (1)
      {
        v561 = v943[0];
        do
        {
          if (!v40)
          {
            v562 = 255;
LABEL_868:
            v563 = v64;
            if ((_DWORD)v21)
            {
              v564 = *v69;
              if (v564 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_874:
                *v69 = v562;
                goto LABEL_875;
              }
            }
            else
            {
              v564 = 255;
            }
            v565 = PDAdifferencePDA(bswap32(*(unsigned __int16 *)v931) >> 16, v564, bswap32(*v928) >> 16, v562);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v565) >> 16;
            v64 = v563;
            if (!(_DWORD)v925)
              goto LABEL_875;
            v562 = HIBYTE(v565);
            goto LABEL_874;
          }
          v562 = *v68;
          if (v562 >= 8)
            goto LABEL_868;
LABEL_875:
          v69 += v558;
          v566 = &v928[v918];
          if ((unint64_t)v566 >= v64)
            v567 = -(uint64_t)(int)v858;
          else
            v567 = 0;
          v68 += v559 + v567;
          v928 = &v566[v567];
          v931 += v560;
          --v561;
        }
        while (v561);
        if (v888)
        {
          v568 = &v895[v891];
          v569 = (unint64_t)v568 >= v888;
          v570 = v879;
          if ((unint64_t)v568 < v888)
            v570 = 0;
          v571 = &v568[v570];
          v572 = v64 + 2 * v570;
          v573 = v838;
          if (!v569)
            v573 = 0;
          v64 = v572 + 2 * v891;
          v928 = v571;
          v895 = v571;
          v897 += v893 + v573;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 23:
      v574 = v61;
      v919 = (int)v61;
      v575 = (int)v21;
      v576 = v40;
      v880 = -(uint64_t)(v891 * (int)v39);
      v839 = -(v893 * (int)v39);
      v577 = 2 * v574;
      while (1)
      {
        v578 = v943[0];
        do
        {
          if (!v40)
          {
            v579 = 255;
LABEL_894:
            v580 = v64;
            if ((_DWORD)v21)
            {
              v581 = *v69;
              if (v581 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_900:
                *v69 = v579;
                goto LABEL_901;
              }
            }
            else
            {
              v581 = 255;
            }
            v582 = PDAexclusionPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v581, bswap32(*v928) >> 16, v579);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v582) >> 16;
            v64 = v580;
            if (!(_DWORD)v925)
              goto LABEL_901;
            v579 = HIBYTE(v582);
            goto LABEL_900;
          }
          v579 = *v68;
          if (v579 >= 8)
            goto LABEL_894;
LABEL_901:
          v69 += v575;
          v583 = &v928[v919];
          if ((unint64_t)v583 >= v64)
            v584 = -(uint64_t)(int)v858;
          else
            v584 = 0;
          v68 += v576 + v584;
          v928 = &v583[v584];
          v931 += v577;
          --v578;
        }
        while (v578);
        if (v888)
        {
          v585 = &v895[v891];
          v586 = (unint64_t)v585 >= v888;
          v587 = v880;
          if ((unint64_t)v585 < v888)
            v587 = 0;
          v588 = &v585[v587];
          v589 = v64 + 2 * v587;
          v590 = v839;
          if (!v586)
            v590 = 0;
          v64 = v589 + 2 * v891;
          v928 = v588;
          v895 = v588;
          v897 += v893 + v590;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 24:
      v591 = v61;
      v920 = (int)v61;
      v592 = (int)v21;
      v593 = v40;
      v881 = -(uint64_t)(v891 * (int)v39);
      v840 = -(v893 * (int)v39);
      v594 = 2 * v591;
      while (1)
      {
        v595 = v943[0];
        do
        {
          if (!v40)
          {
            v596 = 255;
LABEL_920:
            v597 = v64;
            if ((_DWORD)v21)
            {
              v598 = *v69;
              if (v598 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_926:
                *v69 = v596;
                goto LABEL_927;
              }
            }
            else
            {
              v598 = 255;
            }
            v599 = PDAhuePDA(bswap32(*(unsigned __int16 *)v931) >> 16, v598, bswap32(*v928) >> 16, v596);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v599) >> 16;
            v64 = v597;
            if (!(_DWORD)v925)
              goto LABEL_927;
            v596 = HIBYTE(v599);
            goto LABEL_926;
          }
          v596 = *v68;
          if (v596 >= 8)
            goto LABEL_920;
LABEL_927:
          v69 += v592;
          v600 = &v928[v920];
          if ((unint64_t)v600 >= v64)
            v601 = -(uint64_t)(int)v858;
          else
            v601 = 0;
          v68 += v593 + v601;
          v928 = &v600[v601];
          v931 += v594;
          --v595;
        }
        while (v595);
        if (v888)
        {
          v602 = &v895[v891];
          v603 = (unint64_t)v602 >= v888;
          v604 = v881;
          if ((unint64_t)v602 < v888)
            v604 = 0;
          v605 = &v602[v604];
          v606 = v64 + 2 * v604;
          v607 = v840;
          if (!v603)
            v607 = 0;
          v64 = v606 + 2 * v891;
          v928 = v605;
          v895 = v605;
          v897 += v893 + v607;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 25:
      v608 = v61;
      v921 = (int)v61;
      v609 = (int)v21;
      v610 = v40;
      v882 = -(uint64_t)(v891 * (int)v39);
      v841 = -(v893 * (int)v39);
      v611 = 2 * v608;
      while (1)
      {
        v612 = v943[0];
        do
        {
          if (!v40)
          {
            v613 = 255;
LABEL_946:
            v614 = v64;
            if ((_DWORD)v21)
            {
              v615 = *v69;
              if (v615 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_952:
                *v69 = v613;
                goto LABEL_953;
              }
            }
            else
            {
              v615 = 255;
            }
            v616 = PDAsaturationPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v615, bswap32(*v928) >> 16, v613);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v616) >> 16;
            v64 = v614;
            if (!(_DWORD)v925)
              goto LABEL_953;
            v613 = HIBYTE(v616);
            goto LABEL_952;
          }
          v613 = *v68;
          if (v613 >= 8)
            goto LABEL_946;
LABEL_953:
          v69 += v609;
          v617 = &v928[v921];
          if ((unint64_t)v617 >= v64)
            v618 = -(uint64_t)(int)v858;
          else
            v618 = 0;
          v68 += v610 + v618;
          v928 = &v617[v618];
          v931 += v611;
          --v612;
        }
        while (v612);
        if (v888)
        {
          v619 = &v895[v891];
          v620 = (unint64_t)v619 >= v888;
          v621 = v882;
          if ((unint64_t)v619 < v888)
            v621 = 0;
          v622 = &v619[v621];
          v623 = v64 + 2 * v621;
          v624 = v841;
          if (!v620)
            v624 = 0;
          v64 = v623 + 2 * v891;
          v928 = v622;
          v895 = v622;
          v897 += v893 + v624;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 26:
      v625 = v61;
      v922 = (int)v61;
      v626 = (int)v21;
      v627 = v40;
      v883 = -(uint64_t)(v891 * (int)v39);
      v842 = -(v893 * (int)v39);
      v628 = 2 * v625;
      while (1)
      {
        v629 = v943[0];
        do
        {
          if (!v40)
          {
            v630 = 255;
LABEL_972:
            v631 = v64;
            if ((_DWORD)v21)
            {
              v632 = *v69;
              if (v632 <= 7)
              {
                *(_WORD *)v931 = *v928;
                v40 = v927;
LABEL_978:
                *v69 = v630;
                goto LABEL_979;
              }
            }
            else
            {
              v632 = 255;
            }
            v633 = PDAluminosityPDA(bswap32(*v928) >> 16, v630, bswap32(*(unsigned __int16 *)v931) >> 16, v632);
            LODWORD(v21) = v925;
            v40 = v927;
            *(_WORD *)v931 = bswap32(v633) >> 16;
            v64 = v631;
            if (!(_DWORD)v925)
              goto LABEL_979;
            v630 = HIBYTE(v633);
            goto LABEL_978;
          }
          v630 = *v68;
          if (v630 >= 8)
            goto LABEL_972;
LABEL_979:
          v69 += v626;
          v634 = &v928[v922];
          if ((unint64_t)v634 >= v64)
            v635 = -(uint64_t)(int)v858;
          else
            v635 = 0;
          v68 += v627 + v635;
          v928 = &v634[v635];
          v931 += v628;
          --v629;
        }
        while (v629);
        if (v888)
        {
          v636 = &v895[v891];
          v637 = (unint64_t)v636 >= v888;
          v638 = v883;
          if ((unint64_t)v636 < v888)
            v638 = 0;
          v639 = &v636[v638];
          v640 = v64 + 2 * v638;
          v641 = v842;
          if (!v637)
            v641 = 0;
          v64 = v640 + 2 * v891;
          v928 = v639;
          v895 = v639;
          v897 += v893 + v641;
          v68 = v897;
        }
        else
        {
          v928 += v891;
          v68 += v893;
        }
        v931 += 2 * v887;
        v69 += v885;
        if (!--v933[0])
          goto LABEL_1087;
      }
    case 27:
      v642 = v61;
      v923 = (int)v61;
      v643 = (int)v21;
      v644 = v40;
      v884 = -(uint64_t)(v891 * (int)v39);
      v843 = -(v893 * (int)v39);
      v645 = 2 * v642;
      break;
    default:
      goto LABEL_1230;
  }
LABEL_993:
  v646 = v943[0];
  while (1)
  {
    if (v40)
    {
      v647 = *v68;
      if (v647 < 8)
        goto LABEL_1005;
    }
    else
    {
      v647 = 255;
    }
    v648 = v64;
    if ((_DWORD)v21)
    {
      v649 = *v69;
      if (v649 <= 7)
      {
        *(_WORD *)v931 = *v928;
        v40 = v927;
LABEL_1004:
        *v69 = v647;
        goto LABEL_1005;
      }
    }
    else
    {
      v649 = 255;
    }
    v650 = PDAluminosityPDA(bswap32(*(unsigned __int16 *)v931) >> 16, v649, bswap32(*v928) >> 16, v647);
    LODWORD(v21) = v925;
    v40 = v927;
    *(_WORD *)v931 = bswap32(v650) >> 16;
    v64 = v648;
    if ((_DWORD)v925)
    {
      v647 = HIBYTE(v650);
      goto LABEL_1004;
    }
LABEL_1005:
    v69 += v643;
    v651 = &v928[v923];
    if ((unint64_t)v651 >= v64)
      v652 = -(uint64_t)(int)v858;
    else
      v652 = 0;
    v68 += v644 + v652;
    v928 = &v651[v652];
    v931 += v645;
    if (!--v646)
    {
      if (v888)
      {
        v653 = &v895[v891];
        v654 = (unint64_t)v653 >= v888;
        v655 = v884;
        if ((unint64_t)v653 < v888)
          v655 = 0;
        v656 = &v653[v655];
        v657 = v64 + 2 * v655;
        v658 = v843;
        if (!v654)
          v658 = 0;
        v64 = v657 + 2 * v891;
        v928 = v656;
        v895 = v656;
        v897 += v893 + v658;
        v68 = v897;
      }
      else
      {
        v928 += v891;
        v68 += v893;
      }
      v931 += 2 * v887;
      v69 += v885;
      if (!--v933[0])
        goto LABEL_1087;
      goto LABEL_993;
    }
  }
}

uint64_t RGB555_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, int *, int, int, int, int);
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[64];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v47, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)v47) < 1)
    return 0xFFFFFFFFLL;
  v18 = *(_DWORD *)a3;
  *((_QWORD *)&v30 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 != 67449668)
  {
    v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
    if (!v19)
      return 0xFFFFFFFFLL;
    if (v19 > 0xB)
    {
LABEL_20:
      v21 = 255;
      v20 = 1;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      switch(v19)
      {
        case 2u:
          if (*((_QWORD *)a2 + 12))
            goto LABEL_20;
          v20 = 0;
          v21 = 16;
          break;
        case 5u:
          v20 = 0;
          v21 = 24;
          break;
        case 6u:
          break;
        case 7u:
          v20 = 0;
          v21 = 32;
          break;
        case 8u:
          v20 = 0;
          v21 = 8;
          break;
        case 9u:
          v20 = 0;
          v21 = 40;
          break;
        default:
          goto LABEL_20;
      }
    }
    *(_QWORD *)&v30 = rgb555_image_sample[v19 + 1];
    if ((_QWORD)v30)
    {
      if (!*(_BYTE *)(a3 + 5) || (v22 = *(_DWORD *)a3, (HIWORD(*(_DWORD *)a3) & 0x3Fu) <= (*(_WORD *)(v6 + 2) & 0x3Fu)))
      {
        DWORD2(v30) = 67449684;
        goto LABEL_37;
      }
    }
    else
    {
      v22 = *(_DWORD *)a3;
    }
    if ((HIWORD(v22) & 0x3F) > 8u)
    {
      if ((v22 & 0x3F0000) >> 16 > 0x10)
      {
LABEL_32:
        v23 = RGBF_image_sample;
        *(_QWORD *)&v30 = *(_QWORD *)&RGBF_image_sample[2 * v19 + 2];
        if ((_QWORD)v30)
        {
          v24 = 16;
          goto LABEL_34;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v23 = RGB8_image_sample;
      *(_QWORD *)&v30 = *(_QWORD *)&RGB8_image_sample[2 * v19 + 2];
      if ((_QWORD)v30)
        goto LABEL_35;
    }
    v23 = RGB16_image_sample;
    *(_QWORD *)&v30 = *(_QWORD *)&RGB16_image_sample[2 * v19 + 2];
    if ((_QWORD)v30)
    {
      v24 = 8;
LABEL_34:
      LODWORD(v31) = v24;
LABEL_35:
      DWORD2(v30) = *v23;
      if (*(_BYTE *)(a3 + 5))
        *((_QWORD *)&v40 + 1) = pixel_dither_noise;
LABEL_37:
      if ((v20 & 1) == 0
        && (v8 - 1) <= 1
        && (BYTE4(v31) & 7) == 3
        && (a2[2] == 5 || !a2[2])
        && v19 <= 0xB)
      {
        HIDWORD(v25) = v21;
        LODWORD(v25) = v21;
        switch((v25 >> 3))
        {
          case 0u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_RGB32;
            goto LABEL_59;
          case 1u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_RGB32;
            goto LABEL_61;
          case 2u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_W8;
            goto LABEL_59;
          case 3u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_RGB24;
            goto LABEL_59;
          case 4u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_rgb32;
LABEL_59:
            v27 = (uint64_t)a2;
            v28 = v8;
            v29 = 0;
            break;
          case 5u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = RGB555_image_mark_rgb32;
LABEL_61:
            v27 = (uint64_t)a2;
            v28 = v8;
            v29 = 8;
            break;
          default:
            goto LABEL_38;
        }
        rgb555_image_mark_image(v27, (uint64_t)&v30, v28, v29, (void (*)(_QWORD, _QWORD))v26);
        return 1;
      }
      goto LABEL_38;
    }
    goto LABEL_32;
  }
  if (!(_QWORD)v41 && (~DWORD1(v31) & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v31) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      RGB555_mark((uint64_t)a1, v17);
      return 1;
    }
  }
  *(_QWORD *)&v30 = rgb555_sample_RGB555;
LABEL_38:
  RGB555_image_mark((uint64_t)a2, (uint64_t)&v30, v8, v17);
  return 1;
}

uint64_t RGB555_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = rgb555_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = rgb555_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = rgb555_shade_axial_RGB;
    }
    else
    {
      v14 = rgb555_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 1, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 1, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  RGB555_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void RGB555_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int32x2_t v56;
  void *v57;
  void (*v58)(_QWORD *, uint64_t, uint64_t, uint64_t);
  int32x4_t v59;
  unsigned __int16 *v60;
  unsigned __int8 *v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  int v105;
  float v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int32 v113;
  unsigned int v114;
  int8x16_t v115;
  uint64_t v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  float v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  _BYTE *v139;
  _WORD *v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  _BYTE *v146;
  _WORD *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned __int8 *v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  unsigned __int8 *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned __int8 *v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  unsigned int v189;
  char v190;
  unsigned int v191;
  unsigned __int8 *v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  int8x16_t v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  float *v300;
  float v301;
  float v302;
  float v303;
  float v304;
  int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  __int16 v316;
  unsigned __int8 *v317;
  int v318;
  unsigned int v319;
  _WORD *v320;
  _WORD *v321;
  unsigned int v322;
  unsigned int v323;
  unsigned __int8 *v324;
  _WORD *v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned __int8 *v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned __int8 *v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  char v357;
  unsigned int v358;
  unsigned int v359;
  _WORD *v360;
  unsigned __int8 *v361;
  int v362;
  _WORD *v363;
  unsigned int v364;
  unsigned int v365;
  unsigned __int8 *v366;
  int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  int v378;
  int8x16_t v379;
  uint32x4_t v380;
  uint32x4_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  int *v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;

  v378 = a3;
  v396 = *MEMORY[0x1E0C80C00];
  v394 = *(unsigned int *)(a1 + 4);
  v377 = (int)v394;
  v4 = ((int)v394 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(float *)(a2 + 184);
    v391 = *(int **)(a1 + 136);
    v392 = v6;
    v9 = *(_QWORD *)(a2 + 104);
    v388 = *(_QWORD *)(a2 + 96);
    v389 = v9;
    v11 = *(int *)(a1 + 24);
    v10 = *(int *)(a1 + 28);
    v12 = *(int *)(a1 + 16);
    v13 = *(int *)(a1 + 20);
    v14 = *(int *)(a1 + 12);
    v387 = *(_DWORD *)(a1 + 8);
    v386 = (_QWORD *)a2;
    v15 = *(int *)(a2 + 16);
    v16 = (v15 + 6) * v4;
    if (v16 > 65439)
    {
      v19 = (char *)malloc_type_calloc(1uLL, v16 + 96, 0x3023562EuLL);
      v18 = v19;
      v21 = v19;
      v22 = v386;
      if (!v19)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v18 = (char *)&v371 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v18, v17);
      v21 = 0;
      v22 = v386;
    }
    v23 = v13;
    v373 = v21;
    v393 = (int)(float)((float)(v8 * 255.0) + 0.5);
    v24 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    v25 = v24 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22[20] = v25;
    if ((_DWORD)v15)
      v26 = 4 * v4;
    else
      v26 = 0;
    v27 = v25 + v26;
    v28 = v7 + (v11 - 1) * v10;
    v29 = v10 >> 1;
    v22[18] = v24;
    v22[19] = v27;
    if (v392)
    {
      v30 = *(int *)(a1 + 32);
      v31 = a1;
      v32 = (char *)(v392 + v14 + (int)v30 * (uint64_t)(int)v12);
      v385 = v30 - v377;
      v33 = v377;
      v395 = 1;
    }
    else
    {
      v31 = a1;
      v32 = 0;
      v385 = 0;
      v395 = 0;
      v33 = v377;
    }
    v34 = v28 + 2 * v23;
    v35 = (_WORD *)(v7 + 2 * (v14 + v29 * v12));
    v384 = v29 - v33;
    v36 = *(int *)(v31 + 104);
    v37 = *(_DWORD *)(v31 + 108);
    v382 = v31;
    v38 = *(unsigned __int8 *)(v31 + 2);
    v39 = v378;
    if (v38 == 6 || v38 == 1)
    {
      v40 = v386;
      v41 = v388;
      v42 = v389;
      if (!v391)
        goto LABEL_717;
      v371 = v29;
      v43 = 0;
      v44 = 0;
      v45 = *(int *)(v382 + 124);
      v46 = (unsigned __int8 *)v391 + v36 + (int)v45 * (uint64_t)v37;
      v33 = v377;
      v383 = v45 - v377;
      goto LABEL_21;
    }
    v41 = v388;
    v42 = v389;
    if (!v391)
    {
      v371 = v29;
      v46 = 0;
      v43 = 0;
      v383 = 0;
      v44 = 0;
      v40 = v386;
LABEL_21:
      v51 = v394;
LABEL_32:
      v56 = vdup_n_s32(v393);
      v375 = (v51 - 1) + 1;
      v374 = -v33;
      v372 = v34;
      v376 = v34 - 2;
      v381 = (uint32x4_t)xmmword_185004AE0;
      v380 = (uint32x4_t)xmmword_185004AF0;
      v379 = (int8x16_t)xmmword_185004B00;
      v57 = v43;
      while (2)
      {
        v43 = v57;
        v58 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v40;
        v388 = v41;
        v389 = v42;
        v58(v40, v41, v42, v51);
        v60 = (unsigned __int16 *)v40[20];
        v61 = (unsigned __int8 *)v40[18];
        v63 = *((_DWORD *)v40 + 2);
        v62 = *((_DWORD *)v40 + 3);
        v390 = v43;
        LODWORD(v391) = v44;
        if (v63 == v62)
        {
          if (v393 > 0xF7)
            goto LABEL_165;
          v64 = v51;
          v65 = v61;
          do
          {
            if (*v65 >= 8u)
              *(_DWORD *)v60 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v393);
            ++v65;
            v60 += 2;
            --v64;
          }
          while (v64);
          v60 += 2 * v374;
          v61 += v375 + v374;
          goto LABEL_40;
        }
        v66 = v44;
        v67 = v40[19];
        v68 = *(_DWORD *)(v382 + 12);
        v69 = *(_DWORD *)(v382 + 16) + v66;
        v70 = HIWORD(v63) & 0x3F;
        if (v70 == 16)
        {
          v88 = v40[21];
          if (!v88)
          {
            if (v393 >= 0xF8)
            {
              v310 = 0;
              do
              {
                if (v61[v310] >= 8u)
                {
                  v311 = *(_QWORD *)(v67 + 8 * v310);
                  *(_DWORD *)&v60[2 * v310] = (v311 >> 1) & 0x7C00 | (32 * (v311 >> 27)) & 0xFFFFFF | (v311 >> 43) & 0x1F | (HIBYTE(v311) >> 3 << 27) | (((HIBYTE(v311) >> 5) & 7) << 24);
                }
                ++v310;
              }
              while ((_DWORD)v51 != (_DWORD)v310);
            }
            else
            {
              v111 = 0;
              do
              {
                if (v61[v111] >= 8u)
                  *(_DWORD *)&v60[2 * v111] = PDAM((*(_QWORD *)(v67 + 8 * v111) >> 1) & 0x7C00 | (32 * (*(_QWORD *)(v67 + 8 * v111) >> 27)) | (*(_QWORD *)(v67 + 8 * v111) >> 43) & 0x1F, HIBYTE(*(_QWORD *)(v67 + 8 * v111)), v393);
                ++v111;
              }
              while ((_DWORD)v51 != (_DWORD)v111);
              v40 = v386;
            }
            goto LABEL_164;
          }
          if (v68 <= 0)
            v89 = -(-v68 & 0xF);
          else
            v89 = *(_DWORD *)(v382 + 12) & 0xF;
          v73 = -v69 < 0;
          v90 = -v69 & 0xF;
          v91 = v69 & 0xF;
          if (!v73)
            v91 = -v90;
          v92 = v88 + 16 * v91;
          if (v393 >= 0xF8)
          {
            v127 = 0;
            do
            {
              if (v61[v127] >= 8u)
                *(_DWORD *)&v60[2 * v127] = DITHERRGBA32((HIBYTE(*(_QWORD *)(v67 + 8 * v127)) | (BYTE3(*(_QWORD *)(v67 + 8 * v127)) << 16)) & 0xFFFFFF | (BYTE1(*(_QWORD *)(v67 + 8 * v127)) << 24) | HIDWORD(*(_QWORD *)(v67 + 8 * v127)) & 0xFF00, *(unsigned __int8 *)(v92 + v89));
              v89 = ((_BYTE)v89 + 1) & 0xF;
              ++v127;
            }
            while ((_DWORD)v394 != (_DWORD)v127);
          }
          else
          {
            v93 = 0;
            do
            {
              if (v61[v93] >= 8u)
                *(_DWORD *)&v60[2 * v93] = DITHERRGBA32M((HIBYTE(*(_QWORD *)(v67 + 8 * v93)) | (BYTE3(*(_QWORD *)(v67 + 8 * v93)) << 16)) & 0xFFFFFF | (BYTE1(*(_QWORD *)(v67 + 8 * v93)) << 24) | HIDWORD(*(_QWORD *)(v67 + 8 * v93)) & 0xFF00, *(unsigned __int8 *)(v92 + v89), v393);
              v89 = ((_BYTE)v89 + 1) & 0xF;
              ++v93;
            }
            while ((_DWORD)v394 != (_DWORD)v93);
          }
        }
        else
        {
          if (v70 != 32)
          {
            v94 = v40[21];
            if (!v94)
            {
              if (v393 >= 0xF8)
              {
                v312 = 0;
                do
                {
                  if (v61[v312] >= 8u)
                  {
                    v313 = *(_DWORD *)(v67 + 4 * v312);
                    *(_DWORD *)&v60[2 * v312] = (v313 >> 17) & 0x7C00 | (v313 >> 14) & 0x3E0 | ((unsigned __int16)v313 >> 11) & 0xFFFFFF | ((v313 >> 3) << 27) | (v313 >> 5 << 24);
                  }
                  ++v312;
                }
                while ((_DWORD)v51 != (_DWORD)v312);
              }
              else
              {
                v112 = 0;
                do
                {
                  if (v61[v112] >= 8u)
                  {
                    v59.i16[0] = *(_DWORD *)(v67 + 4 * v112);
                    v59.i16[1] = BYTE2(*(_DWORD *)(v67 + 4 * v112));
                    v59.i16[2] = BYTE1(*(_DWORD *)(v67 + 4 * v112));
                    v59.i16[3] = (*(_DWORD *)(v67 + 4 * v112) >> 8 >> 16);
                    *(int32x2_t *)v59.i8 = vmul_s32(*(int32x2_t *)v59.i8, v56);
                    *(int32x2_t *)v59.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v59.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
                    v113 = vshlq_u32((uint32x4_t)v59, v381).u32[0];
                    v114 = (unsigned __int32)v59.i32[0] >> 11;
                    v115 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v59, v59), v380);
                    v115.i32[0] = v113;
                    v59 = (int32x4_t)vandq_s8(v115, v379);
                    *(int8x8_t *)v59.i8 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL));
                    *(_DWORD *)&v60[2 * v112] = v59.i32[0] | v59.i32[1] | (v114 << 27);
                  }
                  ++v112;
                }
                while ((_DWORD)v51 != (_DWORD)v112);
              }
              goto LABEL_164;
            }
            if (v68 <= 0)
              v95 = -(-v68 & 0xF);
            else
              v95 = *(_DWORD *)(v382 + 12) & 0xF;
            v73 = -v69 < 0;
            v96 = -v69 & 0xF;
            v97 = v69 & 0xF;
            if (!v73)
              v97 = -v96;
            v98 = v94 + 16 * v97;
            if (v393 >= 0xF8)
            {
              v128 = 0;
              do
              {
                if (v61[v128] >= 8u)
                  *(_DWORD *)&v60[2 * v128] = DITHERRGBA32(*(_DWORD *)(v67 + 4 * v128), *(unsigned __int8 *)(v98 + v95));
                v95 = (v95 + 1) & 0xF;
                ++v128;
              }
              while ((_DWORD)v51 != (_DWORD)v128);
            }
            else
            {
              v99 = 0;
              do
              {
                if (v61[v99] >= 8u)
                  *(_DWORD *)&v60[2 * v99] = DITHERRGBA32M(*(_DWORD *)(v67 + 4 * v99), *(unsigned __int8 *)(v98 + v95), v393);
                v95 = (v95 + 1) & 0xF;
                ++v99;
              }
              while ((_DWORD)v51 != (_DWORD)v99);
            }
            v39 = v378;
            v40 = v386;
LABEL_163:
            v43 = v390;
LABEL_164:
            v44 = (int)v391;
            goto LABEL_165;
          }
          v71 = v40[21];
          if (!v71)
          {
            if (v393 < 0xF8)
            {
              v100 = 0;
              v101 = (float *)(v67 + 8);
              v44 = (int)v391;
              do
              {
                if (v61[v100] >= 8u)
                {
                  v102 = v101[1];
                  if (v102 <= 0.0)
                  {
                    v110 = 0;
                  }
                  else
                  {
                    v103 = *(v101 - 2);
                    v104 = *(v101 - 1);
                    v105 = (int)(float)((float)(v102 * 255.0) + 0.5);
                    v106 = *v101;
                    if (v102 > 1.0)
                    {
                      v105 = 255;
                      v102 = 1.0;
                    }
                    v107 = (int)(float)((float)(v103 * 255.0) + 0.5);
                    if (v103 < 0.0)
                      v107 = 0;
                    if (v103 > v102)
                      v107 = v105;
                    v108 = (int)(float)((float)(v104 * 255.0) + 0.5);
                    if (v104 < 0.0)
                      LOWORD(v108) = 0;
                    if (v104 > v102)
                      LOWORD(v108) = v105;
                    v109 = (int)(float)((float)(v106 * 255.0) + 0.5);
                    if (v106 < 0.0)
                      LOBYTE(v109) = 0;
                    if (v106 > v102)
                      LOBYTE(v109) = v105;
                    v110 = PDAM((v107 << 7) & 0x7C00 | (4 * (_WORD)v108) & 0x3E0 | (v109 >> 3), v105, v393);
                  }
                  *(_DWORD *)&v60[2 * v100] = v110;
                }
                ++v100;
                v101 += 4;
              }
              while ((_DWORD)v51 != (_DWORD)v100);
LABEL_40:
              v40 = v386;
              v43 = v390;
              goto LABEL_165;
            }
            v299 = 0;
            v300 = (float *)(v67 + 8);
            v44 = (int)v391;
            do
            {
              if (v61[v299] >= 8u)
              {
                v301 = v300[1];
                if (v301 <= 0.0)
                {
                  v309 = 0;
                }
                else
                {
                  v302 = *(v300 - 2);
                  v303 = *(v300 - 1);
                  v304 = *v300;
                  v305 = (int)(float)((float)(v301 * 255.0) + 0.5);
                  if (v301 > 1.0)
                  {
                    v301 = 1.0;
                    v305 = 255;
                  }
                  v306 = (int)(float)((float)(v302 * 255.0) + 0.5);
                  if (v302 < 0.0)
                    v306 = 0;
                  if (v302 > v301)
                    v306 = v305;
                  v307 = (int)(float)((float)(v303 * 255.0) + 0.5);
                  if (v303 < 0.0)
                    v307 = 0;
                  if (v303 > v301)
                    v307 = v305;
                  v308 = (int)(float)((float)(v304 * 255.0) + 0.5);
                  if (v304 < 0.0)
                    LOBYTE(v308) = 0;
                  if (v304 > v301)
                    LOBYTE(v308) = v305;
                  v309 = (v305 << 24) & 0xF8000000 | (v305 >> 5 << 24) | (v306 << 7) & 0x7C00 | (4 * v307) & 0x3E0 | (v308 >> 3);
                }
                *(_DWORD *)&v60[2 * v299] = v309;
              }
              ++v299;
              v300 += 4;
            }
            while ((_DWORD)v51 != (_DWORD)v299);
LABEL_165:
            switch(v39)
            {
              case 0:
                v129 = v46 != 0;
                if (v392)
                {
                  v130 = v51;
                  v131 = v46;
                  while (1)
                  {
                    v132 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v132 = (*v131 * v132 + ((*v131 * v132) >> 8) + 1) >> 8;
                      if (v132 >= 0xF8u)
                      {
                        LOBYTE(v133) = 0;
                        *v35 = 0;
LABEL_175:
                        *v32 = v133;
                        goto LABEL_176;
                      }
                      if (v132 >= 8u)
                      {
                        v134 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v132);
                        *v35 = bswap32(v134) >> 16;
                        v133 = HIBYTE(v134);
                        goto LABEL_175;
                      }
                    }
LABEL_176:
                    ++v61;
                    v131 += v129;
                    ++v35;
                    ++v32;
                    if (!--v130)
                      goto LABEL_588;
                  }
                }
                v314 = v51;
                v131 = v46;
                while (1)
                {
                  v315 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v315 = (*v131 * v315 + ((*v131 * v315) >> 8) + 1) >> 8;
                    if (v315 > 0xF7u)
                    {
                      v316 = 0;
LABEL_586:
                      *v35 = v316;
                      goto LABEL_587;
                    }
                    if (v315 >= 8u)
                    {
                      v316 = __rev16(PDM(bswap32((unsigned __int16)*v35) >> 16, ~(_BYTE)v315));
                      goto LABEL_586;
                    }
                  }
LABEL_587:
                  ++v61;
                  v131 += v129;
                  ++v35;
                  if (!--v314)
                  {
LABEL_588:
                    v46 = &v131[v383];
                    v35 += v384;
                    goto LABEL_696;
                  }
                }
              case 1:
                v137 = *v61;
                if (v392)
                {
                  if (v46)
                  {
                    v138 = 0;
                    v139 = v61 + 1;
                    v140 = v35 - 1;
                    while (1)
                    {
                      if (v137)
                      {
                        v141 = v137 * v46[v138] + ((v137 * v46[v138]) >> 8) + 1;
                        if (BYTE1(v141) >= 0xF8u)
                        {
                          v142 = *(_DWORD *)&v60[2 * v138];
LABEL_187:
                          v35[v138] = bswap32(v142) >> 16;
                          v32[v138] = HIBYTE(v142);
                          goto LABEL_188;
                        }
                        if (BYTE1(v141) >= 8u)
                        {
                          v142 = PDAMplusDAM((unsigned __int16)*(_DWORD *)&v60[2 * v138], HIBYTE(*(_DWORD *)&v60[2 * v138]), BYTE1(v141), bswap32((unsigned __int16)v35[v138]) >> 16, v32[v138], ~(v141 >> 8));
                          goto LABEL_187;
                        }
                      }
LABEL_188:
                      v137 = v139[v138++];
                      ++v140;
                      if ((_DWORD)v51 == (_DWORD)v138)
                      {
                        v143 = (uint64_t)&v32[v138 - 1];
                        v46 += v138 + v383;
                        v136 = v389;
LABEL_667:
                        v35 = &v140[v384 + 1];
                        v32 = (char *)(v143 + v385 + 1);
                        v40 = v386;
                        goto LABEL_714;
                      }
                    }
                  }
                  v348 = v61 + 1;
                  v143 = (uint64_t)(v32 - 1);
                  v140 = v35 - 1;
                  v349 = v51;
                  v136 = v389;
                  while (v137 < 0xF8)
                  {
                    if (v137 >= 8)
                    {
                      v350 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v137, bswap32((unsigned __int16)v140[1]) >> 16, *(_BYTE *)(v143 + 1), ~(_BYTE)v137);
                      goto LABEL_664;
                    }
LABEL_665:
                    v351 = *v348++;
                    v137 = v351;
                    v60 += 2;
                    ++v143;
                    ++v140;
                    if (!--v349)
                    {
                      v46 = 0;
                      goto LABEL_667;
                    }
                  }
                  v350 = *(_DWORD *)v60;
LABEL_664:
                  v140[1] = bswap32(v350) >> 16;
                  *(_BYTE *)(v143 + 1) = HIBYTE(v350);
                  goto LABEL_665;
                }
                if (v46)
                {
                  v317 = v61 + 1;
                  v318 = v51;
                  while (1)
                  {
                    if (v137)
                    {
                      v319 = v137 * *v46 + ((v137 * *v46) >> 8) + 1;
                      v320 = (_WORD *)v376;
                      if (v376 >= (unint64_t)v35)
                        v320 = v35;
                      if ((unint64_t)v320 >= *(_QWORD *)(v382 + 40))
                        v321 = v320;
                      else
                        v321 = *(_WORD **)(v382 + 40);
                      if (BYTE1(v319) >= 0xF8u)
                      {
                        v322 = *(_DWORD *)v60;
LABEL_602:
                        *v321 = bswap32(v322) >> 16;
                        goto LABEL_603;
                      }
                      if (BYTE1(v319) >= 8u)
                      {
                        v322 = PDMplusDM(*v60, BYTE1(v319), bswap32((unsigned __int16)*v321) >> 16, ~(v319 >> 8));
                        goto LABEL_602;
                      }
                    }
                    else
                    {
                      v321 = v35;
                    }
LABEL_603:
                    v323 = *v317++;
                    v137 = v323;
                    v60 += 2;
                    ++v46;
                    v35 = v321 + 1;
                    if (!--v318)
                    {
                      v46 += v383;
                      goto LABEL_695;
                    }
                  }
                }
                v360 = *(_WORD **)(v382 + 40);
                v361 = v61 + 1;
                v362 = v51;
                do
                {
                  v363 = (_WORD *)v376;
                  if (v376 >= (unint64_t)v35)
                    v363 = v35;
                  if (v363 >= v360)
                    v321 = v363;
                  else
                    v321 = v360;
                  if (v137 < 0xF8)
                  {
                    if (v137 < 8)
                      goto LABEL_693;
                    v364 = PDMplusDM(*v60, v137, bswap32((unsigned __int16)*v321) >> 16, ~(_BYTE)v137);
                  }
                  else
                  {
                    v364 = *(_DWORD *)v60;
                  }
                  *v321 = bswap32(v364) >> 16;
LABEL_693:
                  v365 = *v361++;
                  v137 = v365;
                  v60 += 2;
                  v35 = v321 + 1;
                  --v362;
                }
                while (v362);
                v46 = 0;
LABEL_695:
                v35 = &v321[v384 + 1];
LABEL_696:
                v40 = v386;
                v32 += v385;
LABEL_697:
                v135 = v388;
                v136 = v389;
LABEL_698:
                v43 = v390;
LABEL_699:
                if (!--v387)
                {
LABEL_715:
                  if (v43)
                    free(v43);
                  goto LABEL_717;
                }
                v57 = 0;
                ++v44;
                v41 = v40[16] + v135;
                v42 = v40[17] + v136;
                if (!v43)
                  continue;
                v48 = v44;
                v50 = v377;
LABEL_22:
                v52 = v385 + v50;
                while (1)
                {
                  while (1)
                  {
                    v53 = *((_DWORD *)v46 - 4);
                    v54 = v53 - v48;
                    if (v53 <= v48)
                      break;
                    v387 -= v54;
                    if (v387 < 1)
                      goto LABEL_715;
                    v41 += v386[16] * v54;
                    v42 += v386[17] * v54;
                    v35 += v371 * v54;
                    v55 = v52 * v54;
                    if (!v392)
                      v55 = 0;
                    v32 += v55;
                    v48 = v53;
                  }
                  if (v48 < *((_DWORD *)v46 - 3) + v53)
                    break;
                  if (!shape_enum_clip_scan((uint64_t)v43, (_DWORD *)v46 - 4))
                    goto LABEL_715;
                }
                v40 = v386;
                v33 = v377;
                v34 = v372;
                v44 = v48;
                v39 = v378;
                goto LABEL_32;
              case 2:
                v144 = *v61;
                if (v392)
                {
                  if (v46)
                  {
                    v145 = 0;
                    v146 = v61 + 1;
                    v147 = v35 - 1;
                    while (1)
                    {
                      if (v144)
                      {
                        v148 = ((unsigned __int16)(v144 * v46[v145] + ((v144 * v46[v145]) >> 8) + 1) >> 8);
                        if (v148 < 0xF8)
                        {
                          if (v148 < 8)
                            goto LABEL_204;
                          v151 = PDAM((unsigned __int16)*(_DWORD *)&v60[2 * v145], HIBYTE(*(_DWORD *)&v60[2 * v145]), v148);
                          v150 = HIBYTE(v151);
                          if (HIBYTE(v151) < 8u)
                            goto LABEL_204;
                          v152 = bswap32((unsigned __int16)v35[v145]) >> 16;
                          v153 = v32[v145];
                          v151 = (unsigned __int16)v151;
LABEL_202:
                          v154 = PDAplusDAM(v151, v150, v152, v153, v150 ^ 0xFF);
                          v35[v145] = bswap32(v154) >> 16;
                          v150 = HIBYTE(v154);
LABEL_203:
                          v32[v145] = v150;
                          goto LABEL_204;
                        }
                        v149 = *(_DWORD *)&v60[2 * v145];
                        v150 = HIBYTE(v149);
                        if (HIBYTE(v149) >= 0xF8u)
                        {
                          v35[v145] = bswap32(v149) >> 16;
                          goto LABEL_203;
                        }
                        if (v150 >= 8)
                        {
                          v152 = bswap32((unsigned __int16)v35[v145]) >> 16;
                          v153 = v32[v145];
                          v151 = (unsigned __int16)*(_DWORD *)&v60[2 * v145];
                          goto LABEL_202;
                        }
                      }
LABEL_204:
                      v144 = v146[v145++];
                      ++v147;
                      if ((_DWORD)v394 == (_DWORD)v145)
                      {
                        v155 = (uint64_t)&v32[v145 - 1];
                        v46 += v145 + v383;
                        v51 = v394;
LABEL_681:
                        v35 = &v147[v384 + 1];
                        v32 = (char *)(v155 + v385 + 1);
                        goto LABEL_697;
                      }
                    }
                  }
                  v352 = v61 + 1;
                  v155 = (uint64_t)(v32 - 1);
                  v147 = v35 - 1;
                  v353 = v51;
                  while (v144 >= 0xF8)
                  {
                    v354 = HIBYTE(*(_DWORD *)v60);
                    if (v354 >= 0xF8)
                    {
                      v147[1] = bswap32(*(_DWORD *)v60) >> 16;
                      goto LABEL_678;
                    }
                    if (v354 >= 8)
                    {
                      v356 = bswap32((unsigned __int16)v147[1]) >> 16;
                      v357 = *(_BYTE *)(v155 + 1);
                      v355 = (unsigned __int16)*(_DWORD *)v60;
                      goto LABEL_677;
                    }
LABEL_679:
                    v359 = *v352++;
                    v144 = v359;
                    v60 += 2;
                    ++v155;
                    ++v147;
                    if (!--v353)
                    {
                      v46 = 0;
                      v40 = v386;
                      goto LABEL_681;
                    }
                  }
                  if (v144 < 8)
                    goto LABEL_679;
                  v355 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v144);
                  v354 = HIBYTE(v355);
                  if (HIBYTE(v355) < 8u)
                    goto LABEL_679;
                  v356 = bswap32((unsigned __int16)v147[1]) >> 16;
                  v357 = *(_BYTE *)(v155 + 1);
                  v355 = (unsigned __int16)v355;
LABEL_677:
                  v358 = PDAplusDAM(v355, v354, v356, v357, v354 ^ 0xFF);
                  v147[1] = bswap32(v358) >> 16;
                  v354 = HIBYTE(v358);
LABEL_678:
                  *(_BYTE *)(v155 + 1) = v354;
                  goto LABEL_679;
                }
                if (v46)
                {
                  v324 = v61 + 1;
                  v325 = v35 - 1;
                  v326 = v51;
                  while (1)
                  {
                    if (v144)
                    {
                      v327 = ((unsigned __int16)(v144 * *v46 + ((v144 * *v46) >> 8) + 1) >> 8);
                      if (v327 < 0xF8)
                      {
                        if (v327 < 8)
                          goto LABEL_616;
                        v328 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v327);
                        v329 = HIBYTE(v328);
                      }
                      else
                      {
                        v328 = *(_DWORD *)v60;
                        v329 = HIBYTE(*(_DWORD *)v60);
                        if (v329 >= 0xF8)
                          goto LABEL_615;
                      }
                      if (v329 >= 8)
                      {
                        v328 = PDplusDM(v328, bswap32((unsigned __int16)v325[1]) >> 16, ~v328 >> 24);
LABEL_615:
                        v325[1] = bswap32(v328) >> 16;
                      }
                    }
LABEL_616:
                    v330 = *v324++;
                    v144 = v330;
                    v60 += 2;
                    ++v46;
                    ++v325;
                    if (!--v326)
                    {
                      v46 += v383;
                      v136 = v389;
                      goto LABEL_713;
                    }
                  }
                }
                v366 = v61 + 1;
                v325 = v35 - 1;
                v367 = v51;
                v136 = v389;
                while (1)
                {
                  if (v144 < 0xF8)
                  {
                    if (v144 < 8)
                      goto LABEL_711;
                    v368 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v144);
                    v369 = HIBYTE(v368);
                  }
                  else
                  {
                    v368 = *(_DWORD *)v60;
                    v369 = HIBYTE(*(_DWORD *)v60);
                    if (v369 >= 0xF8)
                      goto LABEL_710;
                  }
                  if (v369 >= 8)
                  {
                    v368 = PDplusDM(v368, bswap32((unsigned __int16)v325[1]) >> 16, ~v368 >> 24);
LABEL_710:
                    v325[1] = bswap32(v368) >> 16;
                  }
LABEL_711:
                  v370 = *v366++;
                  v144 = v370;
                  v60 += 2;
                  ++v325;
                  if (!--v367)
                  {
                    v46 = 0;
                    v40 = v386;
LABEL_713:
                    v35 = &v325[v384 + 1];
                    v32 += v385;
LABEL_714:
                    v135 = v388;
                    goto LABEL_698;
                  }
                }
              case 3:
                v156 = v46;
                while (1)
                {
                  v157 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v157 = (*v156 * v157 + ((*v156 * v157) >> 8) + 1) >> 8;
                    if (v157 >= 0xF8u)
                    {
                      v158 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), *v32);
LABEL_214:
                      *v35 = bswap32(v158) >> 16;
                      *v32 = HIBYTE(v158);
                      goto LABEL_215;
                    }
                    if (v157 >= 8u)
                    {
                      v158 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)(*v32 * v157+ ((*v32* v157) >> 8)+ 1) >> 8), bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v157);
                      goto LABEL_214;
                    }
                  }
LABEL_215:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!(_DWORD)v51)
                    goto LABEL_247;
                }
              case 4:
                v156 = v46;
                while (1)
                {
                  v159 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v159 = (*v156 * v159 + ((*v156 * v159) >> 8) + 1) >> 8;
                    if (v159 >= 0xF8u)
                    {
                      v160 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ~*v32);
LABEL_225:
                      *v35 = bswap32(v160) >> 16;
                      *v32 = HIBYTE(v160);
                      goto LABEL_226;
                    }
                    if (v159 >= 8u)
                    {
                      v160 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)((*v32 ^ 0xFF)* v159+ (((*v32 ^ 0xFF)* v159) >> 8)+ 1) >> 8), bswap32((unsigned __int16)*v35) >> 16, *v32, ~(_BYTE)v159);
                      goto LABEL_225;
                    }
                  }
LABEL_226:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!(_DWORD)v51)
                    goto LABEL_247;
                }
              case 5:
                v161 = v51;
                v162 = v46;
                do
                {
                  v163 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v163 = (*v162 * v163 + ((*v162 * v163) >> 8) + 1) >> 8;
                    if (v163 >= 8u)
                    {
                      v164 = *v32;
                      v165 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v163);
                      v166 = v164;
                      v167 = v164;
                      v44 = (int)v391;
                      v168 = PDAMplusDAM((unsigned __int16)v165, SHIBYTE(v165), v166, bswap32((unsigned __int16)*v35) >> 16, v167, HIBYTE(v165) ^ 0xFF);
                      *v35 = bswap32(v168) >> 16;
                      *v32 = HIBYTE(v168);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v162 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  --v161;
                }
                while (v161);
                v46 = &v162[v383];
                goto LABEL_657;
              case 6:
                v156 = v46;
                while (1)
                {
                  v169 = *v61;
                  if (!*v61)
                    goto LABEL_246;
                  if (v46)
                    v169 = (*v156 * v169 + ((*v156 * v169) >> 8) + 1) >> 8;
                  if (v169 < 8u)
                    goto LABEL_246;
                  v170 = *v32;
                  if (v170 <= 7)
                    break;
                  if (v170 <= 0xF7)
                  {
                    v171 = PDAplusDAM(bswap32((unsigned __int16)*v35) >> 16, v170, (unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), ((unsigned __int16)(~(_BYTE)v170 * v169+ ((~(_BYTE)v170* v169) >> 8)+ 1) >> 8));
                    goto LABEL_245;
                  }
LABEL_246:
                  ++v61;
                  v60 += 2;
                  v156 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                  if (!(_DWORD)v51)
                  {
LABEL_247:
                    v46 = &v156[v383];
LABEL_640:
                    v35 += v384;
                    v32 += v385;
                    v51 = v394;
                    v135 = v388;
                    v136 = v389;
                    v43 = v390;
                    v44 = (int)v391;
                    goto LABEL_699;
                  }
                }
                v171 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v169);
LABEL_245:
                *v35 = bswap32(v171) >> 16;
                *v32 = HIBYTE(v171);
                goto LABEL_246;
              case 7:
                v172 = v46 != 0;
                if (v392)
                {
                  v173 = v51;
                  v174 = v46;
                  while (1)
                  {
                    v175 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v175 = (*v174 * v175 + ((*v174 * v175) >> 8) + 1) >> 8;
                      if (v175 >= 0xF8u)
                      {
                        v176 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, *((_BYTE *)v60 + 3));
LABEL_257:
                        *v35 = bswap32(v176) >> 16;
                        *v32 = HIBYTE(v176);
                        goto LABEL_258;
                      }
                      if (v175 >= 8u)
                      {
                        v177 = *((unsigned __int8 *)v60 + 3) * v175;
                        v178 = bswap32((unsigned __int16)*v35) >> 16;
                        v176 = PDAMplusDAM(v178, *v32, ((unsigned __int16)(v177 + (v177 >> 8) + 1) >> 8), v178, *v32, ~(_BYTE)v175);
                        goto LABEL_257;
                      }
                    }
LABEL_258:
                    ++v61;
                    v60 += 2;
                    v174 += v172;
                    ++v35;
                    ++v32;
                    if (!--v173)
                      goto LABEL_639;
                  }
                }
                v331 = v51;
                v174 = v46;
                while (1)
                {
                  v332 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v332 = (*v174 * v332 + ((*v174 * v332) >> 8) + 1) >> 8;
                    if (v332 >= 0xF8u)
                    {
                      v333 = PDM(bswap32((unsigned __int16)*v35) >> 16, *((_BYTE *)v60 + 3));
LABEL_626:
                      *v35 = __rev16(v333);
                      goto LABEL_627;
                    }
                    if (v332 >= 8u)
                    {
                      v334 = *((unsigned __int8 *)v60 + 3) * v332;
                      v335 = bswap32((unsigned __int16)*v35) >> 16;
                      v333 = PDMplusDM(v335, ((unsigned __int16)(v334 + (v334 >> 8) + 1) >> 8), v335, ~(_BYTE)v332);
                      goto LABEL_626;
                    }
                  }
LABEL_627:
                  ++v61;
                  v60 += 2;
                  v174 += v172;
                  ++v35;
                  if (!--v331)
                    goto LABEL_639;
                }
              case 8:
                v179 = v46 != 0;
                if (v392)
                {
                  v180 = v51;
                  v174 = v46;
                  while (1)
                  {
                    v181 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v181 = (*v174 * v181 + ((*v174 * v181) >> 8) + 1) >> 8;
                      if (v181 >= 0xF8u)
                      {
                        v182 = PDAM(bswap32((unsigned __int16)*v35) >> 16, *v32, ~*((_BYTE *)v60 + 3));
LABEL_269:
                        *v35 = bswap32(v182) >> 16;
                        *v32 = HIBYTE(v182);
                        goto LABEL_270;
                      }
                      if (v181 >= 8u)
                      {
                        v183 = (~*(_DWORD *)v60 >> 24) * v181;
                        v184 = bswap32((unsigned __int16)*v35) >> 16;
                        v182 = PDAMplusDAM(v184, *v32, ((unsigned __int16)(v183 + (v183 >> 8) + 1) >> 8), v184, *v32, ~(_BYTE)v181);
                        goto LABEL_269;
                      }
                    }
LABEL_270:
                    ++v61;
                    v60 += 2;
                    v174 += v179;
                    ++v35;
                    ++v32;
                    if (!--v180)
                      goto LABEL_639;
                  }
                }
                v336 = v51;
                v174 = v46;
                while (1)
                {
                  v337 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v337 = (*v174 * v337 + ((*v174 * v337) >> 8) + 1) >> 8;
                    if (v337 >= 0xF8u)
                    {
                      v338 = PDM(bswap32((unsigned __int16)*v35) >> 16, ~*((_BYTE *)v60 + 3));
LABEL_637:
                      *v35 = __rev16(v338);
                      goto LABEL_638;
                    }
                    if (v337 >= 8u)
                    {
                      v339 = (~*(_DWORD *)v60 >> 24) * v337;
                      v340 = bswap32((unsigned __int16)*v35) >> 16;
                      v338 = PDMplusDM(v340, ((unsigned __int16)(v339 + (v339 >> 8) + 1) >> 8), v340, ~(_BYTE)v337);
                      goto LABEL_637;
                    }
                  }
LABEL_638:
                  ++v61;
                  v60 += 2;
                  v174 += v179;
                  ++v35;
                  if (!--v336)
                    goto LABEL_639;
                }
              case 9:
                v185 = v46;
                do
                {
                  v186 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v186 = (*v185 * v186 + ((*v185 * v186) >> 8) + 1) >> 8;
                    if (v186 >= 8u)
                    {
                      v187 = *v32;
                      v188 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v186);
                      v189 = v187 ^ 0xFF;
                      v190 = v187;
                      v44 = (int)v391;
                      v191 = PDAMplusDAM((unsigned __int16)v188, SBYTE3(v188), v189, bswap32((unsigned __int16)*v35) >> 16, v190, (~(_BYTE)v186 + BYTE3(v188)));
                      *v35 = bswap32(v191) >> 16;
                      *v32 = HIBYTE(v191);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v185 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                }
                while ((_DWORD)v51);
                v46 = &v185[v383];
                v35 += v384;
                v32 += v385;
                v39 = v378;
                goto LABEL_658;
              case 10:
                v192 = v46;
                do
                {
                  v193 = *v61;
                  if (*v61)
                  {
                    if (v46)
                      v193 = (*v192 * v193 + ((*v192 * v193) >> 8) + 1) >> 8;
                    if (v193 >= 8u)
                    {
                      v194 = *v32;
                      v195 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v193);
                      v196 = v194 ^ 0xFF;
                      v197 = v194;
                      v44 = (int)v391;
                      v198 = PDAMplusDAM((unsigned __int16)v195, SHIBYTE(v195), v196, bswap32((unsigned __int16)*v35) >> 16, v197, HIBYTE(v195) ^ 0xFF);
                      *v35 = bswap32(v198) >> 16;
                      *v32 = HIBYTE(v198);
                    }
                  }
                  ++v61;
                  v60 += 2;
                  v192 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  LODWORD(v51) = v51 - 1;
                }
                while ((_DWORD)v51);
                goto LABEL_656;
              case 11:
                v199 = v46 != 0;
                if (v392)
                {
                  v192 = v46;
                  do
                  {
                    v200 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v200 = (*v192 * v200 + ((*v192 * v200) >> 8) + 1) >> 8;
                      if (v200 >= 8u)
                      {
                        v201 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v200);
                        v202 = PDAplusdDA(bswap32((unsigned __int16)*v35) >> 16, *v32, v201, HIBYTE(v201));
                        *v35 = bswap32(v202) >> 16;
                        *v32 = HIBYTE(v202);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v199;
                    ++v35;
                    ++v32;
                    LODWORD(v51) = v51 - 1;
                  }
                  while ((_DWORD)v51);
                }
                else
                {
                  v192 = v46;
                  do
                  {
                    v341 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v341 = (*v192 * v341 + ((*v192 * v341) >> 8) + 1) >> 8;
                      if (v341 >= 8u)
                      {
                        v342 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v341);
                        *v35 = __rev16(PDplusdDA(bswap32((unsigned __int16)*v35) >> 16, v342, HIBYTE(v342)));
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v199;
                    ++v35;
                    LODWORD(v51) = v51 - 1;
                  }
                  while ((_DWORD)v51);
                }
                goto LABEL_656;
              case 12:
                v203 = v46 != 0;
                if (v392)
                {
                  v192 = v46;
                  v204 = v394;
                  do
                  {
                    v205 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v205 = (*v192 * v205 + ((*v192 * v205) >> 8) + 1) >> 8;
                      if (v205 >= 8u)
                      {
                        v206 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v205);
                        v207 = PDApluslDA(bswap32((unsigned __int16)*v35) >> 16, *v32, (unsigned __int16)v206, HIBYTE(v206));
                        *v35 = bswap32(v207) >> 16;
                        *v32 = HIBYTE(v207);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v203;
                    ++v35;
                    ++v32;
                    --v204;
                  }
                  while (v204);
                }
                else
                {
                  v192 = v46;
                  v343 = v394;
                  do
                  {
                    v344 = *v61;
                    if (*v61)
                    {
                      if (v46)
                        v344 = (*v192 * v344 + ((*v192 * v344) >> 8) + 1) >> 8;
                      if (v344 >= 8u)
                      {
                        v345 = PDM(*v60, v344);
                        v346 = bswap32((unsigned __int16)*v35);
                        v347 = (((HIWORD(v346) << 15) | HIWORD(v346)) & 0x1F07C1F) + ((v345 | (v345 << 15)) & 0x1F07C1F);
                        *v35 = __rev16((((30 * ((v347 >> 5) & 0x100401)) | (15 * ((v347 >> 5) & 0x100401)) | v347) >> 15) & 0x3E0 | ((30 * ((v347 >> 5) & 0x100401)) | (15 * ((v347 >> 5) & 0x100401)) | v347) & 0x7C1F);
                      }
                    }
                    ++v61;
                    v60 += 2;
                    v192 += v203;
                    ++v35;
                    --v343;
                  }
                  while (v343);
                }
LABEL_656:
                v46 = &v192[v383];
LABEL_657:
                v35 += v384;
                v32 += v385;
LABEL_658:
                v40 = v386;
                v51 = v394;
                goto LABEL_697;
              case 13:
                v208 = v51;
                v174 = v46;
                v209 = v208;
                while (1)
                {
                  v210 = *v61;
                  if (!*v61)
                    goto LABEL_320;
                  if (v46)
                    v210 = (*v174 * v210 + ((*v174 * v210) >> 8) + 1) >> 8;
                  if (v210 < 8u)
                    goto LABEL_320;
                  v211 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v210);
                  v213 = HIBYTE(v211);
                  if (HIBYTE(v211) < 8u)
                    goto LABEL_320;
                  if (v392)
                  {
                    v214 = *v32;
                    if (v214 < 8)
                      goto LABEL_318;
                  }
                  else
                  {
                    v214 = 255;
                  }
                  v211 = PDAmultiplyPDA(bswap32((unsigned __int16)*v35) >> 16, v214, (unsigned __int16)v211, v213, v212);
                  if (!v392)
                  {
                    *v35 = bswap32(v211) >> 16;
                    goto LABEL_320;
                  }
                  v213 = HIBYTE(v211);
LABEL_318:
                  *v35 = bswap32(v211) >> 16;
                  *v32 = v213;
LABEL_320:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v209)
                    goto LABEL_639;
                }
              case 14:
                v215 = v51;
                v174 = v46;
                v216 = v215;
                while (1)
                {
                  v217 = *v61;
                  if (!*v61)
                    goto LABEL_336;
                  if (v46)
                    v217 = (*v174 * v217 + ((*v174 * v217) >> 8) + 1) >> 8;
                  if (v217 < 8u)
                    goto LABEL_336;
                  v218 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v217);
                  v219 = HIBYTE(v218);
                  if (HIBYTE(v218) < 8u)
                    goto LABEL_336;
                  if (v392)
                  {
                    v220 = *v32;
                    if (v220 < 8)
                      goto LABEL_334;
                  }
                  else
                  {
                    v220 = 255;
                  }
                  v218 = PDAscreenPDA(bswap32((unsigned __int16)*v35) >> 16, v220, (unsigned __int16)v218, v219);
                  if (!v392)
                  {
                    *v35 = bswap32(v218) >> 16;
                    goto LABEL_336;
                  }
                  v219 = HIBYTE(v218);
LABEL_334:
                  *v35 = bswap32(v218) >> 16;
                  *v32 = v219;
LABEL_336:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v216)
                    goto LABEL_639;
                }
              case 15:
                v221 = v51;
                v174 = v46;
                v222 = v221;
                while (1)
                {
                  v223 = *v61;
                  if (!*v61)
                    goto LABEL_352;
                  if (v46)
                    v223 = (*v174 * v223 + ((*v174 * v223) >> 8) + 1) >> 8;
                  if (v223 < 8u)
                    goto LABEL_352;
                  v224 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v223);
                  v225 = HIBYTE(v224);
                  if (HIBYTE(v224) < 8u)
                    goto LABEL_352;
                  if (v392)
                  {
                    v226 = *v32;
                    if (v226 < 8)
                      goto LABEL_350;
                  }
                  else
                  {
                    v226 = 255;
                  }
                  v224 = PDAoverlayPDA(bswap32((unsigned __int16)*v35) >> 16, v226, (unsigned __int16)v224, v225);
                  if (!v392)
                  {
                    *v35 = bswap32(v224) >> 16;
                    goto LABEL_352;
                  }
                  v225 = HIBYTE(v224);
LABEL_350:
                  *v35 = bswap32(v224) >> 16;
                  *v32 = v225;
LABEL_352:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v222)
                    goto LABEL_639;
                }
              case 16:
                v227 = v51;
                v174 = v46;
                v228 = v227;
                while (1)
                {
                  v229 = *v61;
                  if (!*v61)
                    goto LABEL_368;
                  if (v46)
                    v229 = (*v174 * v229 + ((*v174 * v229) >> 8) + 1) >> 8;
                  if (v229 < 8u)
                    goto LABEL_368;
                  v230 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v229);
                  v231 = HIBYTE(v230);
                  if (HIBYTE(v230) < 8u)
                    goto LABEL_368;
                  if (v392)
                  {
                    v232 = *v32;
                    if (v232 < 8)
                      goto LABEL_366;
                  }
                  else
                  {
                    v232 = 255;
                  }
                  v230 = PDAdarkenPDA(bswap32((unsigned __int16)*v35) >> 16, v232, (unsigned __int16)v230, v231);
                  if (!v392)
                  {
                    *v35 = bswap32(v230) >> 16;
                    goto LABEL_368;
                  }
                  v231 = HIBYTE(v230);
LABEL_366:
                  *v35 = bswap32(v230) >> 16;
                  *v32 = v231;
LABEL_368:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v228)
                    goto LABEL_639;
                }
              case 17:
                v233 = v51;
                v174 = v46;
                v234 = v233;
                while (1)
                {
                  v235 = *v61;
                  if (!*v61)
                    goto LABEL_384;
                  if (v46)
                    v235 = (*v174 * v235 + ((*v174 * v235) >> 8) + 1) >> 8;
                  if (v235 < 8u)
                    goto LABEL_384;
                  v236 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v235);
                  v237 = HIBYTE(v236);
                  if (HIBYTE(v236) < 8u)
                    goto LABEL_384;
                  if (v392)
                  {
                    v238 = *v32;
                    if (v238 < 8)
                      goto LABEL_382;
                  }
                  else
                  {
                    v238 = 255;
                  }
                  v236 = PDAlightenPDA(bswap32((unsigned __int16)*v35) >> 16, v238, (unsigned __int16)v236, v237);
                  if (!v392)
                  {
                    *v35 = bswap32(v236) >> 16;
                    goto LABEL_384;
                  }
                  v237 = HIBYTE(v236);
LABEL_382:
                  *v35 = bswap32(v236) >> 16;
                  *v32 = v237;
LABEL_384:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v234)
                    goto LABEL_639;
                }
              case 18:
                v239 = v51;
                v174 = v46;
                v240 = v239;
                while (1)
                {
                  v241 = *v61;
                  if (!*v61)
                    goto LABEL_400;
                  if (v46)
                    v241 = (*v174 * v241 + ((*v174 * v241) >> 8) + 1) >> 8;
                  if (v241 < 8u)
                    goto LABEL_400;
                  v242 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v241);
                  v243 = HIBYTE(v242);
                  if (HIBYTE(v242) < 8u)
                    goto LABEL_400;
                  if (v392)
                  {
                    v244 = *v32;
                    if (v244 < 8)
                      goto LABEL_398;
                  }
                  else
                  {
                    v244 = 255;
                  }
                  v242 = PDAcolordodgePDA(bswap32((unsigned __int16)*v35) >> 16, v244, (unsigned __int16)v242, v243);
                  if (!v392)
                  {
                    *v35 = bswap32(v242) >> 16;
                    goto LABEL_400;
                  }
                  v243 = HIBYTE(v242);
LABEL_398:
                  *v35 = bswap32(v242) >> 16;
                  *v32 = v243;
LABEL_400:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v240)
                    goto LABEL_639;
                }
              case 19:
                v245 = v51;
                v174 = v46;
                v246 = v245;
                while (1)
                {
                  v247 = *v61;
                  if (!*v61)
                    goto LABEL_416;
                  if (v46)
                    v247 = (*v174 * v247 + ((*v174 * v247) >> 8) + 1) >> 8;
                  if (v247 < 8u)
                    goto LABEL_416;
                  v248 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v247);
                  v249 = HIBYTE(v248);
                  if (HIBYTE(v248) < 8u)
                    goto LABEL_416;
                  if (v392)
                  {
                    v250 = *v32;
                    if (v250 < 8)
                      goto LABEL_414;
                  }
                  else
                  {
                    v250 = 255;
                  }
                  v248 = PDAcolorburnPDA(bswap32((unsigned __int16)*v35) >> 16, v250, (unsigned __int16)v248, v249);
                  if (!v392)
                  {
                    *v35 = bswap32(v248) >> 16;
                    goto LABEL_416;
                  }
                  v249 = HIBYTE(v248);
LABEL_414:
                  *v35 = bswap32(v248) >> 16;
                  *v32 = v249;
LABEL_416:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v246)
                    goto LABEL_639;
                }
              case 20:
                v251 = v51;
                v174 = v46;
                v252 = v251;
                while (1)
                {
                  v253 = *v61;
                  if (!*v61)
                    goto LABEL_432;
                  if (v46)
                    v253 = (*v174 * v253 + ((*v174 * v253) >> 8) + 1) >> 8;
                  if (v253 < 8u)
                    goto LABEL_432;
                  v254 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v253);
                  v255 = HIBYTE(v254);
                  if (HIBYTE(v254) < 8u)
                    goto LABEL_432;
                  if (v392)
                  {
                    v256 = *v32;
                    if (v256 < 8)
                      goto LABEL_430;
                  }
                  else
                  {
                    v256 = 255;
                  }
                  v254 = PDAsoftlightPDA(bswap32((unsigned __int16)*v35) >> 16, v256, (unsigned __int16)v254, v255);
                  if (!v392)
                  {
                    *v35 = bswap32(v254) >> 16;
                    goto LABEL_432;
                  }
                  v255 = HIBYTE(v254);
LABEL_430:
                  *v35 = bswap32(v254) >> 16;
                  *v32 = v255;
LABEL_432:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v252)
                    goto LABEL_639;
                }
              case 21:
                v257 = v51;
                v174 = v46;
                v258 = v257;
                while (1)
                {
                  v259 = *v61;
                  if (!*v61)
                    goto LABEL_448;
                  if (v46)
                    v259 = (*v174 * v259 + ((*v174 * v259) >> 8) + 1) >> 8;
                  if (v259 < 8u)
                    goto LABEL_448;
                  v260 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v259);
                  v261 = HIBYTE(v260);
                  if (HIBYTE(v260) < 8u)
                    goto LABEL_448;
                  if (v392)
                  {
                    v262 = *v32;
                    if (v262 < 8)
                      goto LABEL_446;
                  }
                  else
                  {
                    v262 = 255;
                  }
                  v260 = PDAhardlightPDA(bswap32((unsigned __int16)*v35) >> 16, v262, (unsigned __int16)v260, v261);
                  if (!v392)
                  {
                    *v35 = bswap32(v260) >> 16;
                    goto LABEL_448;
                  }
                  v261 = HIBYTE(v260);
LABEL_446:
                  *v35 = bswap32(v260) >> 16;
                  *v32 = v261;
LABEL_448:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v258)
                    goto LABEL_639;
                }
              case 22:
                v263 = v51;
                v174 = v46;
                v264 = v263;
                while (1)
                {
                  v265 = *v61;
                  if (!*v61)
                    goto LABEL_464;
                  if (v46)
                    v265 = (*v174 * v265 + ((*v174 * v265) >> 8) + 1) >> 8;
                  if (v265 < 8u)
                    goto LABEL_464;
                  v266 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v265);
                  v267 = HIBYTE(v266);
                  if (HIBYTE(v266) < 8u)
                    goto LABEL_464;
                  if (v392)
                  {
                    v268 = *v32;
                    if (v268 < 8)
                      goto LABEL_462;
                  }
                  else
                  {
                    v268 = 255;
                  }
                  v266 = PDAdifferencePDA(bswap32((unsigned __int16)*v35) >> 16, v268, (unsigned __int16)v266, v267);
                  if (!v392)
                  {
                    *v35 = bswap32(v266) >> 16;
                    goto LABEL_464;
                  }
                  v267 = HIBYTE(v266);
LABEL_462:
                  *v35 = bswap32(v266) >> 16;
                  *v32 = v267;
LABEL_464:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v264)
                    goto LABEL_639;
                }
              case 23:
                v269 = v51;
                v174 = v46;
                v270 = v269;
                while (1)
                {
                  v271 = *v61;
                  if (!*v61)
                    goto LABEL_480;
                  if (v46)
                    v271 = (*v174 * v271 + ((*v174 * v271) >> 8) + 1) >> 8;
                  if (v271 < 8u)
                    goto LABEL_480;
                  v272 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v271);
                  v273 = HIBYTE(v272);
                  if (HIBYTE(v272) < 8u)
                    goto LABEL_480;
                  if (v392)
                  {
                    v274 = *v32;
                    if (v274 < 8)
                      goto LABEL_478;
                  }
                  else
                  {
                    v274 = 255;
                  }
                  v272 = PDAexclusionPDA(bswap32((unsigned __int16)*v35) >> 16, v274, (unsigned __int16)v272, v273);
                  if (!v392)
                  {
                    *v35 = bswap32(v272) >> 16;
                    goto LABEL_480;
                  }
                  v273 = HIBYTE(v272);
LABEL_478:
                  *v35 = bswap32(v272) >> 16;
                  *v32 = v273;
LABEL_480:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v270)
                    goto LABEL_639;
                }
              case 24:
                v275 = v51;
                v174 = v46;
                v276 = v275;
                while (1)
                {
                  v277 = *v61;
                  if (!*v61)
                    goto LABEL_496;
                  if (v46)
                    v277 = (*v174 * v277 + ((*v174 * v277) >> 8) + 1) >> 8;
                  if (v277 < 8u)
                    goto LABEL_496;
                  v278 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v277);
                  v279 = HIBYTE(v278);
                  if (HIBYTE(v278) < 8u)
                    goto LABEL_496;
                  if (v392)
                  {
                    v280 = *v32;
                    if (v280 < 8)
                      goto LABEL_494;
                  }
                  else
                  {
                    v280 = 255;
                  }
                  v278 = PDAhuePDA(bswap32((unsigned __int16)*v35) >> 16, v280, (unsigned __int16)v278, v279);
                  if (!v392)
                  {
                    *v35 = bswap32(v278) >> 16;
                    goto LABEL_496;
                  }
                  v279 = HIBYTE(v278);
LABEL_494:
                  *v35 = bswap32(v278) >> 16;
                  *v32 = v279;
LABEL_496:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v276)
                    goto LABEL_639;
                }
              case 25:
                v281 = v51;
                v174 = v46;
                v282 = v281;
                while (1)
                {
                  v283 = *v61;
                  if (!*v61)
                    goto LABEL_512;
                  if (v46)
                    v283 = (*v174 * v283 + ((*v174 * v283) >> 8) + 1) >> 8;
                  if (v283 < 8u)
                    goto LABEL_512;
                  v284 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v283);
                  v285 = HIBYTE(v284);
                  if (HIBYTE(v284) < 8u)
                    goto LABEL_512;
                  if (v392)
                  {
                    v286 = *v32;
                    if (v286 < 8)
                      goto LABEL_510;
                  }
                  else
                  {
                    v286 = 255;
                  }
                  v284 = PDAsaturationPDA(bswap32((unsigned __int16)*v35) >> 16, v286, (unsigned __int16)v284, v285);
                  if (!v392)
                  {
                    *v35 = bswap32(v284) >> 16;
                    goto LABEL_512;
                  }
                  v285 = HIBYTE(v284);
LABEL_510:
                  *v35 = bswap32(v284) >> 16;
                  *v32 = v285;
LABEL_512:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v282)
                    goto LABEL_639;
                }
              case 26:
                v287 = v51;
                v174 = v46;
                v288 = v287;
                while (1)
                {
                  v289 = *v61;
                  if (!*v61)
                    goto LABEL_528;
                  if (v46)
                    v289 = (*v174 * v289 + ((*v174 * v289) >> 8) + 1) >> 8;
                  if (v289 < 8u)
                    goto LABEL_528;
                  v290 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v289);
                  v291 = HIBYTE(v290);
                  if (HIBYTE(v290) < 8u)
                    goto LABEL_528;
                  if (v392)
                  {
                    v292 = *v32;
                    if (v292 < 8)
                      goto LABEL_526;
                  }
                  else
                  {
                    v292 = 255;
                  }
                  v290 = PDAluminosityPDA((unsigned __int16)v290, v291, bswap32((unsigned __int16)*v35) >> 16, v292);
                  if (!v392)
                  {
                    *v35 = bswap32(v290) >> 16;
                    goto LABEL_528;
                  }
                  v291 = HIBYTE(v290);
LABEL_526:
                  *v35 = bswap32(v290) >> 16;
                  *v32 = v291;
LABEL_528:
                  ++v61;
                  v60 += 2;
                  v174 += v46 != 0;
                  ++v35;
                  v32 += v395;
                  if (!--v288)
                    goto LABEL_639;
                }
              case 27:
                v293 = v51;
                v174 = v46;
                v294 = v293;
                break;
              default:
                v135 = v388;
                v136 = v389;
                goto LABEL_699;
            }
            while (1)
            {
              v295 = *v61;
              if (!*v61)
                goto LABEL_544;
              if (v46)
                v295 = (*v174 * v295 + ((*v174 * v295) >> 8) + 1) >> 8;
              if (v295 < 8u)
                goto LABEL_544;
              v296 = PDAM((unsigned __int16)*(_DWORD *)v60, HIBYTE(*(_DWORD *)v60), v295);
              v297 = HIBYTE(v296);
              if (HIBYTE(v296) < 8u)
                goto LABEL_544;
              if (v392)
              {
                v298 = *v32;
                if (v298 < 8)
                  goto LABEL_542;
              }
              else
              {
                v298 = 255;
              }
              v296 = PDAluminosityPDA(bswap32((unsigned __int16)*v35) >> 16, v298, (unsigned __int16)v296, v297);
              if (!v392)
              {
                *v35 = bswap32(v296) >> 16;
                goto LABEL_544;
              }
              v297 = HIBYTE(v296);
LABEL_542:
              *v35 = bswap32(v296) >> 16;
              *v32 = v297;
LABEL_544:
              ++v61;
              v60 += 2;
              v174 += v46 != 0;
              ++v35;
              v32 += v395;
              if (!--v294)
              {
LABEL_639:
                v46 = &v174[v383];
                goto LABEL_640;
              }
            }
          }
          if (v68 <= 0)
            v72 = -(-v68 & 0xF);
          else
            v72 = *(_DWORD *)(v382 + 12) & 0xF;
          v73 = -v69 < 0;
          v74 = -v69 & 0xF;
          v75 = v69 & 0xF;
          if (!v73)
            v75 = -v74;
          v76 = v71 + 16 * v75;
          if (v393 >= 0xF8)
          {
            v116 = 0;
            v117 = (float *)(v67 + 8);
            do
            {
              if (v61[v116] >= 8u)
              {
                v118 = v117[1];
                if (v118 <= 0.0)
                {
                  v126 = 0;
                }
                else
                {
                  v119 = *(v117 - 2);
                  v120 = *(v117 - 1);
                  v121 = *v117;
                  v122 = (int)(float)((float)(v118 * 255.0) + 0.5);
                  if (v118 > 1.0)
                  {
                    v122 = 255;
                    v118 = 1.0;
                  }
                  v123 = (int)(float)((float)(v119 * 255.0) + 0.5);
                  if (v119 < 0.0)
                    v123 = 0;
                  if (v119 > v118)
                    v123 = v122;
                  v124 = (int)(float)((float)(v120 * 255.0) + 0.5);
                  if (v120 < 0.0)
                    v124 = 0;
                  if (v120 > v118)
                    v124 = v122;
                  v125 = (int)(float)((float)(v121 * 255.0) + 0.5);
                  if (v121 < 0.0)
                    v125 = 0;
                  if (v121 > v118)
                    v125 = v122;
                  v126 = DITHERRGBA32((v123 << 24) | (v124 << 16) | (v125 << 8) | v122, *(unsigned __int8 *)(v76 + v72));
                }
                *(_DWORD *)&v60[2 * v116] = v126;
              }
              v72 = ((_BYTE)v72 + 1) & 0xF;
              ++v116;
              v117 += 4;
            }
            while ((_DWORD)v394 != (_DWORD)v116);
          }
          else
          {
            v77 = 0;
            v78 = (float *)(v67 + 8);
            do
            {
              if (v61[v77] >= 8u)
              {
                v79 = v78[1];
                if (v79 <= 0.0)
                {
                  v87 = 0;
                }
                else
                {
                  v80 = *(v78 - 2);
                  v81 = *(v78 - 1);
                  v82 = *v78;
                  v83 = (int)(float)((float)(v79 * 255.0) + 0.5);
                  if (v79 > 1.0)
                  {
                    v83 = 255;
                    v79 = 1.0;
                  }
                  v84 = (int)(float)((float)(v80 * 255.0) + 0.5);
                  if (v80 < 0.0)
                    v84 = 0;
                  if (v80 > v79)
                    v84 = v83;
                  v85 = (int)(float)((float)(v81 * 255.0) + 0.5);
                  if (v81 < 0.0)
                    v85 = 0;
                  if (v81 > v79)
                    v85 = v83;
                  v86 = (int)(float)((float)(v82 * 255.0) + 0.5);
                  if (v82 < 0.0)
                    v86 = 0;
                  if (v82 > v79)
                    v86 = v83;
                  v87 = DITHERRGBA32M((v84 << 24) | (v85 << 16) | (v86 << 8) | v83, *(unsigned __int8 *)(v76 + v72), v393);
                }
                *(_DWORD *)&v60[2 * v77] = v87;
              }
              v72 = ((_BYTE)v72 + 1) & 0xF;
              ++v77;
              v78 += 4;
            }
            while ((_DWORD)v394 != (_DWORD)v77);
          }
        }
        break;
      }
      v40 = v386;
      v51 = v394;
      goto LABEL_163;
    }
    v372 = v34;
    shape_enum_clip_alloc((uint64_t)v19, v20, v391, 1, 1, 1, v36, v37, v394, v387);
    if (v47)
    {
      v371 = v29;
      v48 = 0;
      v49 = (int)((v15 * v4 + 15) & 0xFFFFFFF0);
      if (!(_DWORD)v15)
        v49 = 4 * v4;
      v50 = v377;
      v383 = -v377;
      v46 = (unsigned __int8 *)(v27 + v49 + 16);
      v51 = v394;
      v43 = v47;
      goto LABEL_22;
    }
LABEL_717:
    if (v373)
      free(v373);
  }
}

uint64_t RGB555_image_mark_W8(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int32x2_t v18;
  int32x4_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  char v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  unsigned int v78;
  unint64_t v79;
  unsigned __int8 *v80;
  int32x2_t v81;
  unsigned __int8 *v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v136;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = (_WORD *)*((_QWORD *)a2 + 2);
  v8 = (char *)*((_QWORD *)a2 + 4);
  if (v8)
    v127 = *((_QWORD *)a2 + 5) - a5;
  else
    v127 = 0;
  v126 = *a2;
  v125 = *((_QWORD *)a2 + 3) - a5;
  v136 = v8 != 0;
  v10 = *((_QWORD *)a2 + 19);
  v9 = *((_QWORD *)a2 + 20);
  v11 = *((_QWORD *)a2 + 11);
  v122 = *((_QWORD *)a2 + 13);
  v12 = *((_QWORD *)a2 + 9) + v122 * a4;
  v118 = *((_QWORD *)a2 + 6);
  v129 = *((_QWORD *)a2 + 7);
  v13 = *(unsigned __int8 **)(a1 + 32);
  v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  result = *(_QWORD *)(a1 + 168);
  v119 = a5;
  v123 = v11;
  v124 = v10;
  v121 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176))
  {
    v133 = 0;
    v16 = 0;
    v117 = *((_QWORD *)a2 + 15);
    v116 = *((_QWORD *)a2 + 17);
    v115 = ~(-1 << v11);
    v113 = -v10;
    v114 = v11 - 4;
    v17 = v14 - 4;
    v18 = vdup_n_s32(v6);
    v112 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x7000000F8000000;
    while ((((v116 - v12) | (v12 - v117)) & 0x8000000000000000) == 0)
    {
      v20 = ((v12 & (unint64_t)v115) >> v114) & 0xF;
      v21 = weights_19497[v20];
      v22 = (unint64_t)(v20 - 7) >= 9;
      v23 = v113;
      if (!v22)
        v23 = v10;
      v134 = v23;
      v24 = v21 & 0xF;
      if (result)
        goto LABEL_10;
LABEL_13:
      v27 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
      v130 = a6;
      v128 = v12;
      if (v126 != 1)
      {
        if (a5 < 1)
          goto LABEL_112;
        v53 = (uint64_t *)v112;
        v54 = v119;
        while (2)
        {
          v55 = *(v53 - 1);
          v56 = *v53;
          v57 = v27 + v55;
          if ((unint64_t)v17 >= v27 + v55)
            v58 = (unsigned __int8 *)(v27 + v55);
          else
            v58 = v17;
          if (v58 < v13)
            v58 = v13;
          v59 = *v58;
          v60 = v56 & 0xF;
          if ((v56 & 0xF) != 0)
          {
            v61 = (unsigned __int8 *)(v57 + (v56 >> 4));
            if (v17 < v61)
              v61 = v17;
            if (v61 < v13)
              v61 = v13;
            v62 = *v61;
            if (v24)
            {
              v63 = (unsigned __int8 *)(v57 + v134);
              if (v17 >= v63)
                v64 = v63;
              else
                v64 = v17;
              if (v64 < v13)
                v64 = v13;
              v65 = *v64;
              v66 = &v63[v56 >> 4];
              if (v17 < v66)
                v66 = v17;
              if (v66 < v13)
                v66 = v13;
              v67 = BLEND8_19499[v24];
              v59 = v59 - ((v67 & v59) >> v24) + ((v67 & v65) >> v24);
              v62 = v62 - ((v67 & v62) >> v24) + ((v67 & *v66) >> v24);
            }
            v68 = BLEND8_19499[*v53 & 0xF];
            v59 -= (v68 & v59) >> v60;
            v69 = (v68 & v62) >> v60;
            goto LABEL_89;
          }
          if (v24)
          {
            v70 = (unsigned __int8 *)(v57 + v134);
            if ((unint64_t)v17 < v57 + v134)
              v70 = v17;
            if (v70 < v13)
              v70 = v13;
            v71 = BLEND8_19499[v24];
            v59 -= (v71 & v59) >> v24;
            v69 = (v71 & *v70) >> v24;
LABEL_89:
            LOBYTE(v59) = v59 + v69;
          }
          if (v16)
          {
            v72 = *v16;
            if ((unint64_t)(v16 + 1) < v133)
              ++v16;
            else
              v16 -= 15;
            v73 = (16843008 * v59) | 0xFF;
            if (v6 == 255)
            {
              v74 = DITHERRGBA32(v73, v72);
              if (v8)
                goto LABEL_96;
            }
            else
            {
              v74 = DITHERRGBA32M(v73, v72, v6);
              if (v8)
              {
LABEL_96:
                if (HIBYTE(v74) < 0xF8u)
                {
                  if (HIBYTE(v74) >= 8u)
                  {
                    v78 = PDAplusDAM((unsigned __int16)v74, SHIBYTE(v74), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v74) ^ 0xFF);
                    *v7 = bswap32(v78) >> 16;
                    *v8 = HIBYTE(v78);
                  }
                }
                else
                {
                  *v7 = bswap32(v74) >> 16;
                  *v8 = HIBYTE(v74);
                }
                goto LABEL_108;
              }
            }
          }
          else if (v6 == 255)
          {
            v16 = 0;
            v74 = (v59 >> 3) & 0xFFFF801F | (32 * (v59 >> 3)) & 0x83FF | (v59 >> 3 << 10) | 0xFF000000;
            if (v8)
              goto LABEL_96;
          }
          else
          {
            v16 = 0;
            *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v59 << 16), (int8x8_t)(v59 | 0xFF00000000)), v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v75 = (uint32x4_t)vzip1q_s32(v19, v19);
            v76.i64[0] = vshlq_u32(v75, (uint32x4_t)xmmword_185004B70).u64[0];
            v76.i64[1] = vshlq_u32(v75, (uint32x4_t)xmmword_185004B80).i64[1];
            v77 = vandq_s8(v76, (int8x16_t)xmmword_185004B90);
            *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
            v74 = v77.i32[0] | v77.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            if (v8)
              goto LABEL_96;
          }
          if (HIBYTE(v74) < 0xF8u)
          {
            if (HIBYTE(v74) >= 8u)
              *v7 = __rev16(PDplusDM(v74, bswap32((unsigned __int16)*v7) >> 16, ~v74 >> 24));
          }
          else
          {
            *v7 = bswap32(v74) >> 16;
          }
LABEL_108:
          v53 += 2;
          ++v7;
          v8 += v136;
          if (!--v54)
            goto LABEL_112;
          continue;
        }
      }
      if (a5 >= 1)
      {
        v28 = (uint64_t *)v112;
        v29 = v119;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned __int8 *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v13)
            v33 = v13;
          v34 = *v33;
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if (v24)
          {
            v45 = (unsigned __int8 *)(v32 + v134);
            if ((unint64_t)v17 < v32 + v134)
              v45 = v17;
            if (v45 < v13)
              v45 = v13;
            v46 = BLEND8_19499[v24];
            v34 -= (v46 & v34) >> v24;
            v44 = (v46 & *v45) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          if (v16)
          {
            v47 = *v16;
            if ((unint64_t)(v16 + 1) < v133)
              ++v16;
            else
              v16 -= 15;
            v48 = (16843008 * v34) | 0xFF;
            if (v6 == 255)
              v49 = DITHERRGBA32(v48, v47);
            else
              v49 = DITHERRGBA32M(v48, v47, v6);
          }
          else
          {
            v16 = 0;
            if (v6 == 255)
            {
              v49 = (v34 >> 3) & 0xFFFF801F | (32 * (v34 >> 3)) & 0x83FF | (v34 >> 3 << 10) | 0xFF000000;
            }
            else
            {
              *(int32x2_t *)v19.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v34 << 16), (int8x8_t)(v34 | 0xFF00000000)), v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v50 = (uint32x4_t)vzip1q_s32(v19, v19);
              v51.i64[0] = vshlq_u32(v50, (uint32x4_t)xmmword_185004B70).u64[0];
              v51.i64[1] = vshlq_u32(v50, (uint32x4_t)xmmword_185004B80).i64[1];
              v52 = vandq_s8(v51, (int8x16_t)xmmword_185004B90);
              *(int8x8_t *)v52.i8 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
              v49 = v52.i32[0] | v52.i32[1] | (32 * ((unsigned __int32)v19.i32[1] >> 27));
            }
          }
          *v7 = bswap32(v49) >> 16;
          if (v8)
            *v8 = HIBYTE(v49);
          v28 += 2;
          ++v7;
          v8 += v136;
          if (!--v29)
            goto LABEL_112;
        }
        v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v13)
          v36 = v13;
        v37 = *v36;
        if (v24)
        {
          v38 = (unsigned __int8 *)(v32 + v134);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v13)
            v39 = v13;
          v40 = *v39;
          v41 = &v38[v31 >> 4];
          if (v17 < v41)
            v41 = v17;
          if (v41 < v13)
            v41 = v13;
          v42 = BLEND8_19499[v24];
          v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          v37 = v37 - ((v42 & v37) >> v24) + ((v42 & *v41) >> v24);
        }
        v43 = BLEND8_19499[*v28 & 0xF];
        v34 -= (v43 & v34) >> v35;
        v44 = (v43 & v37) >> v35;
LABEL_44:
        LOBYTE(v34) = v34 + v44;
        goto LABEL_45;
      }
LABEL_112:
      v10 = v124;
      v7 += v125;
      v8 += v127;
      LOBYTE(v11) = v123;
      v12 = v128 + v122;
      a6 = v130 - 1;
      result = v121;
      if (v130 == 1)
        return result;
    }
    v24 = 0;
    v134 = 0;
    if (!result)
      goto LABEL_13;
LABEL_10:
    v25 = result + 16 * v129;
    v133 = v25 + 16;
    v16 = (unsigned __int8 *)(v25 + v118);
    v26 = (v129 + 1) & 0xF;
    if (v129 + 1 <= 0)
      v26 = -(-(v129 + 1) & 0xF);
    v129 = v26;
    goto LABEL_13;
  }
  v79 = 0;
  v80 = 0;
  v81 = vdup_n_s32(v6);
  v82 = v14 - 4;
  v132 = (uint64_t *)(v9 + 16 * a3);
  v83.i64[1] = 0x7000000F8000000;
  do
  {
    if (result)
    {
      v84 = result + 16 * v129;
      v79 = v84 + 16;
      v80 = (unsigned __int8 *)(v84 + v118);
      v85 = (v129 + 1) & 0xF;
      if (v129 + 1 <= 0)
        v85 = -(-(v129 + 1) & 0xF);
      v129 = v85;
    }
    v86 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
    v131 = a6;
    if (v126 != 1)
    {
      v87 = v12;
      v99 = v132;
      v100 = v119;
      if (a5 < 1)
        goto LABEL_170;
      while (1)
      {
        v101 = *v99;
        v99 += 2;
        v102 = (unsigned __int8 *)(v86 + v101);
        if ((unint64_t)v82 < v86 + v101)
          v102 = v82;
        if ((unint64_t)v102 < *(_QWORD *)(a1 + 32))
          v102 = *(unsigned __int8 **)(a1 + 32);
        v103 = *v102;
        if (v80)
        {
          v104 = *v80;
          if ((unint64_t)(v80 + 1) < v79)
            ++v80;
          else
            v80 -= 15;
          v105 = (16843008 * v103) | 0xFF;
          if (v6 == 255)
          {
            v106 = DITHERRGBA32(v105, v104);
            if (v8)
              goto LABEL_153;
          }
          else
          {
            v106 = DITHERRGBA32M(v105, v104, v6);
            if (v8)
              goto LABEL_153;
          }
        }
        else if (v6 == 255)
        {
          v80 = 0;
          v106 = (v103 >> 3) & 0xFFFF801F | (32 * (v103 >> 3)) & 0x83FF | (v103 >> 3 << 10) | 0xFF000000;
          if (v8)
          {
LABEL_153:
            if (HIBYTE(v106) < 0xF8u)
            {
              if (HIBYTE(v106) >= 8u)
              {
                v111 = PDAplusDAM((unsigned __int16)v106, SHIBYTE(v106), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v106) ^ 0xFF);
                *v7 = bswap32(v111) >> 16;
                *v8 = HIBYTE(v111);
              }
            }
            else
            {
              *v7 = bswap32(v106) >> 16;
              *v8 = HIBYTE(v106);
            }
            goto LABEL_166;
          }
        }
        else
        {
          v80 = 0;
          *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v103 << 16), (int8x8_t)(v103 | 0xFF00000000)), v81);
          *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v107 = (uint32x4_t)vzip1q_s32(v83, v83);
          v108.i64[0] = vshlq_u32(v107, (uint32x4_t)xmmword_185004B70).u64[0];
          v108.i64[1] = vshlq_u32(v107, (uint32x4_t)xmmword_185004B80).i64[1];
          v109 = vandq_s8(v108, (int8x16_t)xmmword_185004B90);
          *(int8x8_t *)v109.i8 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
          v106 = v109.i32[0] | v109.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          if (v8)
            goto LABEL_153;
        }
        if (HIBYTE(v106) >= 0xF8u)
          break;
        if (HIBYTE(v106) >= 8u)
        {
          LOWORD(v110) = __rev16(PDplusDM(v106, bswap32((unsigned __int16)*v7) >> 16, ~v106 >> 24));
          goto LABEL_165;
        }
LABEL_166:
        ++v7;
        v8 += v136;
        if (!--v100)
          goto LABEL_170;
      }
      v110 = bswap32(v106) >> 16;
LABEL_165:
      *v7 = v110;
      goto LABEL_166;
    }
    v87 = v12;
    if (a5 >= 1)
    {
      v88 = v132;
      v89 = v119;
      do
      {
        v90 = *v88;
        v88 += 2;
        v91 = (unsigned __int8 *)(v86 + v90);
        if ((unint64_t)v82 < v86 + v90)
          v91 = v82;
        if ((unint64_t)v91 < *(_QWORD *)(a1 + 32))
          v91 = *(unsigned __int8 **)(a1 + 32);
        v92 = *v91;
        if (v80)
        {
          v93 = *v80;
          if ((unint64_t)(v80 + 1) < v79)
            ++v80;
          else
            v80 -= 15;
          v94 = (16843008 * v92) | 0xFF;
          if (v6 == 255)
            v95 = DITHERRGBA32(v94, v93);
          else
            v95 = DITHERRGBA32M(v94, v93, v6);
        }
        else
        {
          v80 = 0;
          if (v6 == 255)
          {
            v95 = (v92 >> 3) & 0xFFFF801F | (32 * (v92 >> 3)) & 0x83FF | (v92 >> 3 << 10) | 0xFF000000;
          }
          else
          {
            *(int32x2_t *)v83.i8 = vmul_s32((int32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v92 << 16), (int8x8_t)(v92 | 0xFF00000000)), v81);
            *(int32x2_t *)v83.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v83.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v83.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v96 = (uint32x4_t)vzip1q_s32(v83, v83);
            v97.i64[0] = vshlq_u32(v96, (uint32x4_t)xmmword_185004B70).u64[0];
            v97.i64[1] = vshlq_u32(v96, (uint32x4_t)xmmword_185004B80).i64[1];
            v98 = vandq_s8(v97, (int8x16_t)xmmword_185004B90);
            *(int8x8_t *)v98.i8 = vorr_s8(*(int8x8_t *)v98.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
            v95 = v98.i32[0] | v98.i32[1] | (32 * ((unsigned __int32)v83.i32[1] >> 27));
          }
        }
        *v7 = bswap32(v95) >> 16;
        if (v8)
          *v8 = HIBYTE(v95);
        ++v7;
        v8 += v136;
        --v89;
      }
      while (v89);
    }
LABEL_170:
    v10 = v124;
    v7 += v125;
    v8 += v127;
    LOBYTE(v11) = v123;
    v12 = v87 + v122;
    a6 = v131 - 1;
    result = v121;
  }
  while (v131 != 1);
  return result;
}

uint64_t RGB555_image_mark_RGB24(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int32x2_t v18;
  int32x4_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint32x4_t v51;
  int v52;
  uint32x4_t v53;
  int8x16_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint32x4_t v78;
  int v79;
  uint32x4_t v80;
  int8x16_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  int32x2_t v86;
  unsigned __int8 *v87;
  int32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  uint32x4_t v104;
  int v105;
  uint32x4_t v106;
  int8x16_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  uint32x4_t v119;
  int v120;
  uint32x4_t v121;
  int8x16_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v149;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = (_WORD *)*((_QWORD *)a2 + 2);
  v8 = (char *)*((_QWORD *)a2 + 4);
  if (v8)
    v140 = *((_QWORD *)a2 + 5) - a5;
  else
    v140 = 0;
  v139 = *a2;
  v138 = *((_QWORD *)a2 + 3) - a5;
  v149 = v8 != 0;
  v10 = *((_QWORD *)a2 + 19);
  v9 = *((_QWORD *)a2 + 20);
  v11 = *((_QWORD *)a2 + 11);
  v135 = *((_QWORD *)a2 + 13);
  v12 = *((_QWORD *)a2 + 9) + v135 * a4;
  v131 = *((_QWORD *)a2 + 6);
  v142 = *((_QWORD *)a2 + 7);
  v13 = *(unsigned __int8 **)(a1 + 32);
  v14 = &v13[(*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
           + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3)];
  result = *(_QWORD *)(a1 + 168);
  v132 = a5;
  v136 = v11;
  v137 = v10;
  v134 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176))
  {
    v146 = 0;
    v16 = 0;
    v130 = *((_QWORD *)a2 + 15);
    v129 = *((_QWORD *)a2 + 17);
    v128 = ~(-1 << v11);
    v126 = -v10;
    v127 = v11 - 4;
    v17 = v14 - 3;
    v18 = vdup_n_s32(v6);
    v125 = v9 + 16 * a3 + 8;
    v19.i64[1] = 0x3E007000000;
    while ((((v129 - v12) | (v12 - v130)) & 0x8000000000000000) == 0)
    {
      v20 = ((v12 & (unint64_t)v128) >> v127) & 0xF;
      v21 = weights_19497[v20];
      v22 = (unint64_t)(v20 - 7) >= 9;
      v23 = v126;
      if (!v22)
        v23 = v10;
      v147 = v23;
      v24 = v21 & 0xF;
      if (result)
        goto LABEL_10;
LABEL_13:
      v27 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
      v143 = a6;
      v141 = v12;
      if (v139 != 1)
      {
        if (a5 < 1)
          goto LABEL_112;
        v55 = (uint64_t *)v125;
        v56 = v132;
        while (2)
        {
          v57 = *(v55 - 1);
          v58 = *v55;
          v59 = v27 + v57;
          if ((unint64_t)v17 >= v27 + v57)
            v60 = (unsigned __int8 *)(v27 + v57);
          else
            v60 = v17;
          if (v60 < v13)
            v60 = v13;
          v61 = (*v60 << 24) | (v60[1] << 16) | (v60[2] << 8);
          v62 = v58 & 0xF;
          if ((v58 & 0xF) != 0)
          {
            v63 = (unsigned __int8 *)(v59 + (v58 >> 4));
            if (v17 < v63)
              v63 = v17;
            if (v63 < v13)
              v63 = v13;
            v64 = (*v63 << 24) | (v63[1] << 16) | (v63[2] << 8);
            if (v24)
            {
              v65 = (unsigned __int8 *)(v59 + v147);
              if (v17 >= v65)
                v66 = v65;
              else
                v66 = v17;
              if (v66 < v13)
                v66 = v13;
              v67 = (*v66 << 24) | (v66[1] << 16) | (v66[2] << 8);
              v68 = &v65[v58 >> 4];
              if (v17 < v68)
                v68 = v17;
              if (v68 < v13)
                v68 = v13;
              v69 = BLEND8_19499[v24];
              v61 = v61 - ((v69 & v61) >> v24) + ((v69 & v67) >> v24);
              v64 = v64 - ((v69 & v64) >> v24) + ((((*v68 << 24) | (v68[1] << 16) | (v68[2] << 8)) & v69) >> v24);
            }
            v74 = BLEND8_19499[*v55 & 0xF];
            v72 = v61 - ((v74 & v61) >> v62);
            v73 = (v74 & v64) >> v62;
            goto LABEL_89;
          }
          if (v24)
          {
            v70 = (unsigned __int8 *)(v59 + v147);
            if ((unint64_t)v17 < v59 + v147)
              v70 = v17;
            if (v70 < v13)
              v70 = v13;
            v71 = BLEND8_19499[v24];
            v72 = v61 - ((v71 & v61) >> v24);
            v73 = (((*v70 << 24) | (v70[1] << 16) | (v70[2] << 8)) & v71) >> v24;
LABEL_89:
            v61 = v72 + v73;
          }
          v75 = v61 | 0xFF;
          if (v16)
          {
            v76 = *v16;
            if ((unint64_t)(v16 + 1) < v146)
              ++v16;
            else
              v16 -= 15;
            if (v6 == 255)
            {
              v77 = DITHERRGBA32(v75, v76);
              if (!v8)
                goto LABEL_106;
            }
            else
            {
              v77 = DITHERRGBA32M(v75, v76, v6);
              if (!v8)
                goto LABEL_106;
            }
LABEL_101:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) >= 8u)
              {
                v82 = PDAplusDAM((unsigned __int16)v77, SHIBYTE(v77), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v77) ^ 0xFF);
                *v7 = bswap32(v82) >> 16;
                *v8 = HIBYTE(v82);
              }
            }
            else
            {
              *v7 = bswap32(v77) >> 16;
              *v8 = HIBYTE(v77);
            }
          }
          else
          {
            if (v6 == 255)
            {
              v16 = 0;
              v77 = (v61 >> 17) & 0x7C00 | (v61 >> 14) & 0x3E0 | ((unsigned __int16)v61 >> 11) | 0xFF000000;
              if (!v8)
                goto LABEL_106;
              goto LABEL_101;
            }
            v16 = 0;
            v19.i16[0] = BYTE1(v61);
            v19.i16[1] = v61 >> 8 >> 16;
            v19.i32[1] = v61 & 0xFF0000 | 0xFF;
            *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
            *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v78 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
            v79 = (unsigned __int16)v19.i16[0] >> 11;
            v80 = vshlq_u32(v78, (uint32x4_t)xmmword_185004BA0);
            v81 = (int8x16_t)vshlq_u32(v78, (uint32x4_t)xmmword_185004BB0);
            v81.i32[0] = v80.i32[0];
            v81.i32[3] = v80.i32[3];
            v19 = (int32x4_t)vandq_s8(v81, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
            v77 = v19.i32[0] | v79 | v19.i32[1];
            if (v8)
              goto LABEL_101;
LABEL_106:
            if (HIBYTE(v77) < 0xF8u)
            {
              if (HIBYTE(v77) < 8u)
                goto LABEL_111;
              LOWORD(v83) = __rev16(PDplusDM(v77, bswap32((unsigned __int16)*v7) >> 16, ~v77 >> 24));
            }
            else
            {
              v83 = bswap32(v77) >> 16;
            }
            *v7 = v83;
          }
LABEL_111:
          v55 += 2;
          ++v7;
          v8 += v149;
          if (!--v56)
            goto LABEL_112;
          continue;
        }
      }
      if (a5 >= 1)
      {
        v28 = (uint64_t *)v125;
        v29 = v132;
        while (1)
        {
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v27 + v30;
          if ((unint64_t)v17 >= v27 + v30)
            v33 = (unsigned __int8 *)(v27 + v30);
          else
            v33 = v17;
          if (v33 < v13)
            v33 = v13;
          v34 = (*v33 << 24) | (v33[1] << 16) | (v33[2] << 8);
          v35 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
            break;
          if (v24)
          {
            v43 = (unsigned __int8 *)(v32 + v147);
            if ((unint64_t)v17 < v32 + v147)
              v43 = v17;
            if (v43 < v13)
              v43 = v13;
            v44 = BLEND8_19499[v24];
            v45 = v34 - ((v44 & v34) >> v24);
            v46 = (((*v43 << 24) | (v43[1] << 16) | (v43[2] << 8)) & v44) >> v24;
            goto LABEL_44;
          }
LABEL_45:
          v48 = v34 | 0xFF;
          if (v16)
          {
            v49 = *v16;
            if ((unint64_t)(v16 + 1) < v146)
              ++v16;
            else
              v16 -= 15;
            if (v6 == 255)
              v50 = DITHERRGBA32(v48, v49);
            else
              v50 = DITHERRGBA32M(v48, v49, v6);
          }
          else
          {
            v16 = 0;
            if (v6 == 255)
            {
              v50 = (v34 >> 17) & 0x7C00 | (v34 >> 14) & 0x3E0 | ((unsigned __int16)v34 >> 11) | 0xFF000000;
            }
            else
            {
              v19.i16[0] = BYTE1(v34);
              v19.i16[1] = v34 >> 8 >> 16;
              v19.i32[1] = v34 & 0xFF0000 | 0xFF;
              *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, v18);
              *(int32x2_t *)v19.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v19.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v51 = (uint32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1));
              v52 = (unsigned __int16)v19.i16[0] >> 11;
              v53 = vshlq_u32(v51, (uint32x4_t)xmmword_185004BA0);
              v54 = (int8x16_t)vshlq_u32(v51, (uint32x4_t)xmmword_185004BB0);
              v54.i32[0] = v53.i32[0];
              v54.i32[3] = v53.i32[3];
              v19 = (int32x4_t)vandq_s8(v54, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
              v50 = v19.i32[0] | v52 | v19.i32[1];
            }
          }
          *v7 = bswap32(v50) >> 16;
          if (v8)
            *v8 = HIBYTE(v50);
          v28 += 2;
          ++v7;
          v8 += v149;
          if (!--v29)
            goto LABEL_112;
        }
        v36 = (unsigned __int8 *)(v32 + (v31 >> 4));
        if (v17 < v36)
          v36 = v17;
        if (v36 < v13)
          v36 = v13;
        v37 = (*v36 << 24) | (v36[1] << 16) | (v36[2] << 8);
        if (v24)
        {
          v38 = (unsigned __int8 *)(v32 + v147);
          if (v17 >= v38)
            v39 = v38;
          else
            v39 = v17;
          if (v39 < v13)
            v39 = v13;
          v40 = (*v39 << 24) | (v39[1] << 16) | (v39[2] << 8);
          v41 = &v38[v31 >> 4];
          if (v17 < v41)
            v41 = v17;
          if (v41 < v13)
            v41 = v13;
          v42 = BLEND8_19499[v24];
          v34 = v34 - ((v42 & v34) >> v24) + ((v42 & v40) >> v24);
          v37 = v37 - ((v42 & v37) >> v24) + ((((*v41 << 24) | (v41[1] << 16) | (v41[2] << 8)) & v42) >> v24);
        }
        v47 = BLEND8_19499[*v28 & 0xF];
        v45 = v34 - ((v47 & v34) >> v35);
        v46 = (v47 & v37) >> v35;
LABEL_44:
        v34 = v45 + v46;
        goto LABEL_45;
      }
LABEL_112:
      v10 = v137;
      v7 += v138;
      v8 += v140;
      LOBYTE(v11) = v136;
      v12 = v141 + v135;
      a6 = v143 - 1;
      result = v134;
      if (v143 == 1)
        return result;
    }
    v24 = 0;
    v147 = 0;
    if (!result)
      goto LABEL_13;
LABEL_10:
    v25 = result + 16 * v142;
    v146 = v25 + 16;
    v16 = (unsigned __int8 *)(v25 + v131);
    v26 = (v142 + 1) & 0xF;
    if (v142 + 1 <= 0)
      v26 = -(-(v142 + 1) & 0xF);
    v142 = v26;
    goto LABEL_13;
  }
  v84 = 0;
  v85 = 0;
  v86 = vdup_n_s32(v6);
  v87 = v14 - 3;
  v145 = (uint64_t *)(v9 + 16 * a3);
  v88.i64[1] = 0x3E007000000;
  do
  {
    if (result)
    {
      v89 = result + 16 * v142;
      v84 = v89 + 16;
      v85 = (unsigned __int8 *)(v89 + v131);
      v90 = (v142 + 1) & 0xF;
      if (v142 + 1 <= 0)
        v90 = -(-(v142 + 1) & 0xF);
      v142 = v90;
    }
    v91 = *(_QWORD *)(a1 + 32) + (v12 >> v11) * v10;
    v144 = a6;
    if (v139 != 1)
    {
      v92 = v12;
      v108 = v145;
      v109 = v132;
      if (a5 < 1)
        goto LABEL_169;
      while (1)
      {
        v110 = *v108;
        v108 += 2;
        v111 = (unsigned __int8 *)(v91 + v110);
        if ((unint64_t)v87 < v91 + v110)
          v111 = v87;
        if ((unint64_t)v111 < *(_QWORD *)(a1 + 32))
          v111 = *(unsigned __int8 **)(a1 + 32);
        v112 = *v111;
        v113 = v111[1];
        v114 = v111[2];
        v115 = (v112 << 24) | (v113 << 16) | (v114 << 8);
        v116 = v115 | 0xFF;
        if (v85)
        {
          v117 = *v85;
          if ((unint64_t)(v85 + 1) < v84)
            ++v85;
          else
            v85 -= 15;
          if (v6 == 255)
          {
            v118 = DITHERRGBA32(v116, v117);
            if (v8)
              goto LABEL_158;
          }
          else
          {
            v118 = DITHERRGBA32M(v116, v117, v6);
            if (v8)
              goto LABEL_158;
          }
        }
        else if (v6 == 255)
        {
          v85 = 0;
          v118 = (4 * v113) & 0x3E0 | (v112 >> 3 << 10) | (v114 >> 3) | 0xFF000000;
          if (v8)
          {
LABEL_158:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                v123 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), bswap32((unsigned __int16)*v7) >> 16, *v8, HIBYTE(v118) ^ 0xFF);
                *v7 = bswap32(v123) >> 16;
                *v8 = HIBYTE(v123);
              }
            }
            else
            {
              *v7 = bswap32(v118) >> 16;
              *v8 = HIBYTE(v118);
            }
            goto LABEL_168;
          }
        }
        else
        {
          v85 = 0;
          v88.i16[0] = v114;
          v88.i16[1] = v115 >> 8 >> 16;
          v88.i32[1] = (v113 << 16) & 0xFF0000 | (v114 << 8) & 0xFF0000 | 0xFF;
          *(int32x2_t *)v88.i8 = vmul_s32(*(int32x2_t *)v88.i8, v86);
          *(int32x2_t *)v88.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v88.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v119 = (uint32x4_t)vzip1q_s32(v88, vdupq_lane_s32(*(int32x2_t *)v88.i8, 1));
          v120 = (unsigned __int16)v88.i16[0] >> 11;
          v121 = vshlq_u32(v119, (uint32x4_t)xmmword_185004BA0);
          v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_185004BB0);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          v88 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v88.i8 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
          v118 = v88.i32[0] | v120 | v88.i32[1];
          if (v8)
            goto LABEL_158;
        }
        if (HIBYTE(v118) >= 0xF8u)
          break;
        if (HIBYTE(v118) >= 8u)
        {
          LOWORD(v124) = __rev16(PDplusDM(v118, bswap32((unsigned __int16)*v7) >> 16, ~v118 >> 24));
          goto LABEL_167;
        }
LABEL_168:
        ++v7;
        v8 += v149;
        if (!--v109)
          goto LABEL_169;
      }
      v124 = bswap32(v118) >> 16;
LABEL_167:
      *v7 = v124;
      goto LABEL_168;
    }
    v92 = v12;
    if (a5 >= 1)
    {
      v93 = v145;
      v94 = v132;
      do
      {
        v95 = *v93;
        v93 += 2;
        v96 = (unsigned __int8 *)(v91 + v95);
        if ((unint64_t)v87 < v91 + v95)
          v96 = v87;
        if ((unint64_t)v96 < *(_QWORD *)(a1 + 32))
          v96 = *(unsigned __int8 **)(a1 + 32);
        v97 = *v96;
        v98 = v96[1];
        v99 = v96[2];
        v100 = (v97 << 24) | (v98 << 16) | (v99 << 8);
        v101 = v100 | 0xFF;
        if (v85)
        {
          v102 = *v85;
          if ((unint64_t)(v85 + 1) < v84)
            ++v85;
          else
            v85 -= 15;
          if (v6 == 255)
            v103 = DITHERRGBA32(v101, v102);
          else
            v103 = DITHERRGBA32M(v101, v102, v6);
        }
        else
        {
          v85 = 0;
          if (v6 == 255)
          {
            v103 = (4 * v98) & 0x3E0 | (v97 >> 3 << 10) | (v99 >> 3) | 0xFF000000;
          }
          else
          {
            v88.i16[0] = v99;
            v88.i16[1] = v100 >> 8 >> 16;
            v88.i32[1] = (v98 << 16) & 0xFF0000 | (v99 << 8) & 0xFF0000 | 0xFF;
            *(int32x2_t *)v88.i8 = vmul_s32(*(int32x2_t *)v88.i8, v86);
            *(int32x2_t *)v88.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v88.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v104 = (uint32x4_t)vzip1q_s32(v88, vdupq_lane_s32(*(int32x2_t *)v88.i8, 1));
            v105 = (unsigned __int16)v88.i16[0] >> 11;
            v106 = vshlq_u32(v104, (uint32x4_t)xmmword_185004BA0);
            v107 = (int8x16_t)vshlq_u32(v104, (uint32x4_t)xmmword_185004BB0);
            v107.i32[0] = v106.i32[0];
            v107.i32[3] = v106.i32[3];
            v88 = (int32x4_t)vandq_s8(v107, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v88.i8 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
            v103 = v88.i32[0] | v105 | v88.i32[1];
          }
        }
        *v7 = bswap32(v103) >> 16;
        if (v8)
          *v8 = HIBYTE(v103);
        ++v7;
        v8 += v149;
        --v94;
      }
      while (v94);
    }
LABEL_169:
    v10 = v137;
    v7 += v138;
    v8 += v140;
    LOBYTE(v11) = v136;
    v12 = v92 + v135;
    a6 = v144 - 1;
    result = v134;
  }
  while (v144 != 1);
  return result;
}

uint64_t RGB555_image_mark_RGB32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  _WORD *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  int32x2_t v20;
  int32x4_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint32x4_t v54;
  int v55;
  uint32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint32x4_t v82;
  int v83;
  uint32x4_t v84;
  int8x16_t v85;
  unsigned int v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int *v89;
  int32x2_t v90;
  char v91;
  int32x4_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  uint32x4_t v106;
  int v107;
  uint32x4_t v108;
  int8x16_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  uint32x4_t v119;
  int v120;
  uint32x4_t v121;
  int8x16_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  char v151;
  char v152;
  uint64_t v153;
  int v154;

  v6 = *((unsigned __int8 *)a2 + 8);
  if (*(_QWORD *)(a1 + 40))
    v7 = 0;
  else
    v7 = 255;
  v154 = v7;
  v8 = (_WORD *)*((_QWORD *)a2 + 2);
  v9 = (char *)*((_QWORD *)a2 + 4);
  if (v9)
    v140 = *((_QWORD *)a2 + 5) - a5;
  else
    v140 = 0;
  v10 = a2[1];
  v139 = *a2;
  v138 = *((_QWORD *)a2 + 3) - a5;
  v153 = v9 != 0;
  v12 = *((_QWORD *)a2 + 19);
  v11 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 11);
  v135 = *((_QWORD *)a2 + 13);
  result = *((_QWORD *)a2 + 9) + v135 * a4;
  v132 = *((_QWORD *)a2 + 6);
  v141 = *((_QWORD *)a2 + 7);
  v15 = *(unsigned int **)(a1 + 32);
  v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v17 = *(_QWORD *)(a1 + 168);
  v152 = v10;
  v136 = v13;
  v137 = v12;
  v134 = v17;
  if (*(_QWORD *)(a1 + 176))
  {
    v148 = 0;
    v18 = 0;
    v131 = *((_QWORD *)a2 + 15);
    v130 = *((_QWORD *)a2 + 17);
    v129 = ~(-1 << v13);
    v128 = v13 - 4;
    v127 = -v12;
    v19 = (unsigned int *)(v16 - 4);
    v151 = 32 - v10;
    v20 = vdup_n_s32(v6);
    v125 = v11 + 16 * a3 + 8;
    v126 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v130 - result) | (result - v131)) < 0)
      {
        v26 = 0;
        v149 = 0;
      }
      else
      {
        v22 = ((result & (unint64_t)v129) >> v128) & 0xF;
        v23 = weights_19497[v22];
        v24 = (unint64_t)(v22 - 7) >= 9;
        v25 = v127;
        if (!v24)
          v25 = v12;
        v149 = v25;
        v26 = v23 & 0xF;
      }
      if (v17)
      {
        v27 = v17 + 16 * v141;
        v148 = v27 + 16;
        v18 = (unsigned __int8 *)(v27 + v132);
        v28 = (v141 + 1) & 0xF;
        if (v141 + 1 <= 0)
          v28 = -(-(v141 + 1) & 0xF);
        v141 = v28;
      }
      v29 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
      v144 = a6;
      v142 = result;
      if (v139 != 1)
        break;
      if (a5 >= 1)
      {
        v31 = (uint64_t *)v125;
        v30 = v126;
        while (1)
        {
          v32 = *(v31 - 1);
          v33 = *v31;
          v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32)
            v35 = (unsigned int *)(v29 + v32);
          else
            v35 = v19;
          if (v35 < v15)
            v35 = v15;
          v36 = bswap32(*v35);
          v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0)
            break;
          if (v26)
          {
            v48 = (unsigned int *)(v34 + v149);
            if ((unint64_t)v19 < v34 + v149)
              v48 = v19;
            if (v48 < v15)
              v48 = v15;
            v49 = BLEND8_19499[v26];
            v46 = v36 - ((v49 & v36) >> v26);
            v47 = (bswap32(*v48) & v49) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          v50 = (v36 << v152) | (v36 >> v151);
          v51 = v50 | v154;
          if (v18)
          {
            v52 = *v18;
            if ((unint64_t)(v18 + 1) < v148)
              ++v18;
            else
              v18 -= 15;
            if (v6 == 255)
              v53 = DITHERRGBA32(v51, v52);
            else
              v53 = DITHERRGBA32M(v51, v52, v6);
          }
          else
          {
            v18 = 0;
            if (v6 == 255)
            {
              v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              v55 = (unsigned __int16)v21.i16[0] >> 11;
              v56 = vshlq_u32(v54, (uint32x4_t)xmmword_185004BA0);
              v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_185004BB0);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *v8 = bswap32(v53) >> 16;
          if (v9)
            *v9 = HIBYTE(v53);
          v31 += 2;
          ++v8;
          v9 += v153;
          if (!--v30)
            goto LABEL_117;
        }
        v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38)
          v38 = v19;
        if (v38 < v15)
          v38 = v15;
        v39 = bswap32(*v38);
        if (v26)
        {
          v40 = (unsigned int *)(v34 + v149);
          if (v19 >= v40)
            v41 = v40;
          else
            v41 = v19;
          if (v41 < v15)
            v41 = v15;
          v42 = bswap32(*v41);
          v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43)
            v43 = v19;
          if (v43 < v15)
            v43 = v15;
          v44 = BLEND8_19499[v26];
          v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          v39 = v39 - ((v44 & v39) >> v26) + ((bswap32(*v43) & v44) >> v26);
        }
        v45 = BLEND8_19499[*v31 & 0xF];
        v46 = v36 - ((v45 & v36) >> v37);
        v47 = (v45 & v39) >> v37;
LABEL_49:
        v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      v12 = v137;
      v8 += v138;
      v9 += v140;
      LOBYTE(v13) = v136;
      result = v142 + v135;
      a6 = v144 - 1;
      v17 = v134;
      if (v144 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_117;
    v59 = (uint64_t *)v125;
    v58 = v126;
    while (1)
    {
      v60 = *(v59 - 1);
      v61 = *v59;
      v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60)
        v63 = (unsigned int *)(v29 + v60);
      else
        v63 = v19;
      if (v63 < v15)
        v63 = v15;
      v64 = bswap32(*v63);
      v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66)
          v66 = v19;
        if (v66 < v15)
          v66 = v15;
        v67 = bswap32(*v66);
        if (v26)
        {
          v68 = (unsigned int *)(v62 + v149);
          if (v19 >= v68)
            v69 = v68;
          else
            v69 = v19;
          if (v69 < v15)
            v69 = v15;
          v70 = bswap32(*v69);
          v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71)
            v71 = v19;
          if (v71 < v15)
            v71 = v15;
          v72 = BLEND8_19499[v26];
          v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          v67 = v67 - ((v72 & v67) >> v26) + ((bswap32(*v71) & v72) >> v26);
        }
        v73 = BLEND8_19499[*v59 & 0xF];
        v74 = v64 - ((v73 & v64) >> v65);
        v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26)
          goto LABEL_95;
        v76 = (unsigned int *)(v62 + v149);
        if ((unint64_t)v19 < v62 + v149)
          v76 = v19;
        if (v76 < v15)
          v76 = v15;
        v77 = BLEND8_19499[v26];
        v74 = v64 - ((v77 & v64) >> v26);
        v75 = (bswap32(*v76) & v77) >> v26;
      }
      v64 = v74 + v75;
LABEL_95:
      v78 = (v64 << v152) | (v64 >> v151);
      v79 = v78 | v154;
      if (v18)
      {
        v80 = *v18;
        if ((unint64_t)(v18 + 1) < v148)
          ++v18;
        else
          v18 -= 15;
        if (v6 == 255)
        {
          v81 = DITHERRGBA32(v79, v80);
          if (!v9)
            goto LABEL_105;
        }
        else
        {
          v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9)
            goto LABEL_105;
        }
      }
      else if (v6 == 255)
      {
        v18 = 0;
        v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u)
              *v8 = __rev16(PDplusDM(v81, bswap32((unsigned __int16)*v8) >> 16, ~v81 >> 24));
          }
          else
          {
            *v8 = bswap32(v81) >> 16;
          }
          goto LABEL_113;
        }
      }
      else
      {
        v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        v83 = (unsigned __int16)v21.i16[0] >> 11;
        v84 = vshlq_u32(v82, (uint32x4_t)xmmword_185004BA0);
        v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_185004BB0);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_185004BC0);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9)
          goto LABEL_105;
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v81) ^ 0xFF);
          *v8 = bswap32(v86) >> 16;
          *v9 = HIBYTE(v86);
        }
      }
      else
      {
        *v8 = bswap32(v81) >> 16;
        *v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v153;
      if (!--v58)
        goto LABEL_117;
    }
  }
  v87 = 0;
  v88 = 0;
  v89 = (unsigned int *)(v16 - 4);
  v90 = vdup_n_s32(v6);
  v147 = (uint64_t *)(v11 + 16 * a3);
  v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  v146 = a5;
  v93 = v10;
  do
  {
    if (v17)
    {
      v94 = v17 + 16 * v141;
      v87 = v94 + 16;
      v88 = (unsigned __int8 *)(v94 + v132);
      v95 = (v141 + 1) & 0xF;
      if (v141 + 1 <= 0)
        v95 = -(-(v141 + 1) & 0xF);
      v141 = v95;
    }
    v96 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
    v145 = a6;
    v143 = result;
    if (v139 != 1)
    {
      v110 = v147;
      v111 = v146;
      if (a5 < 1)
        goto LABEL_174;
      while (1)
      {
        v112 = *v110;
        v110 += 2;
        v113 = (unsigned int *)(v96 + v112);
        if ((unint64_t)v89 < v96 + v112)
          v113 = v89;
        if ((unint64_t)v113 < *(_QWORD *)(a1 + 32))
          v113 = *(unsigned int **)(a1 + 32);
        v114 = bswap32(*v113);
        v115 = (v114 << v93) | (v114 >> v91);
        v116 = v115 | v154;
        if (v88)
        {
          v117 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
          {
            v118 = DITHERRGBA32(v116, v117);
            if (v9)
              goto LABEL_157;
          }
          else
          {
            v118 = DITHERRGBA32M(v116, v117, v6);
            if (v9)
              goto LABEL_157;
          }
        }
        else if (v6 == 255)
        {
          v88 = 0;
          v118 = (v115 >> 17) & 0x7C00 | (v115 >> 14) & 0x3E0 | ((unsigned __int16)v115 >> 11) & 0xFFFFFF | ((v116 >> 3) << 27) | (v116 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v118) < 0xF8u)
            {
              if (HIBYTE(v118) >= 8u)
              {
                v124 = PDAplusDAM((unsigned __int16)v118, SHIBYTE(v118), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v118) ^ 0xFF);
                *v8 = bswap32(v124) >> 16;
                *v9 = HIBYTE(v124);
              }
            }
            else
            {
              *v8 = bswap32(v118) >> 16;
              *v9 = HIBYTE(v118);
            }
            goto LABEL_170;
          }
        }
        else
        {
          v88 = 0;
          v92.i16[0] = BYTE1(v115);
          v92.i16[1] = v115 >> 8 >> 16;
          v92.i32[1] = v116 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v119 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          v120 = (unsigned __int16)v92.i16[0] >> 11;
          v121 = vshlq_u32(v119, (uint32x4_t)xmmword_185004BA0);
          v122 = (int8x16_t)vshlq_u32(v119, (uint32x4_t)xmmword_185004BB0);
          v122.i32[0] = v121.i32[0];
          v122.i32[3] = v121.i32[3];
          v92 = (int32x4_t)vandq_s8(v122, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          v118 = v92.i32[0] | v120 | v92.i32[1];
          if (v9)
            goto LABEL_157;
        }
        if (HIBYTE(v118) >= 0xF8u)
          break;
        if (HIBYTE(v118) >= 8u)
        {
          LOWORD(v123) = __rev16(PDplusDM(v118, bswap32((unsigned __int16)*v8) >> 16, ~v118 >> 24));
          goto LABEL_169;
        }
LABEL_170:
        ++v8;
        v9 += v153;
        --v111;
        v93 = v152;
        if (!v111)
          goto LABEL_174;
      }
      v123 = bswap32(v118) >> 16;
LABEL_169:
      *v8 = v123;
      goto LABEL_170;
    }
    if (a5 >= 1)
    {
      v97 = v147;
      v98 = v146;
      do
      {
        v99 = *v97;
        v97 += 2;
        v100 = (unsigned int *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99)
          v100 = v89;
        if ((unint64_t)v100 < *(_QWORD *)(a1 + 32))
          v100 = *(unsigned int **)(a1 + 32);
        v101 = bswap32(*v100);
        v102 = (v101 << v93) | (v101 >> v91);
        v103 = v102 | v154;
        if (v88)
        {
          v104 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
            v105 = DITHERRGBA32(v103, v104);
          else
            v105 = DITHERRGBA32M(v103, v104, v6);
          v93 = v152;
        }
        else
        {
          v88 = 0;
          if (v6 == 255)
          {
            v105 = (v102 >> 17) & 0x7C00 | (v102 >> 14) & 0x3E0 | ((unsigned __int16)v102 >> 11) & 0xFFFFFF | ((v103 >> 3) << 27) | (v103 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v102);
            v92.i16[1] = v102 >> 8 >> 16;
            v92.i32[1] = v103 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v106 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            v107 = (unsigned __int16)v92.i16[0] >> 11;
            v108 = vshlq_u32(v106, (uint32x4_t)xmmword_185004BA0);
            v109 = (int8x16_t)vshlq_u32(v106, (uint32x4_t)xmmword_185004BB0);
            v109.i32[0] = v108.i32[0];
            v109.i32[3] = v108.i32[3];
            v92 = (int32x4_t)vandq_s8(v109, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            v105 = v92.i32[0] | v107 | v92.i32[1];
          }
        }
        *v8 = bswap32(v105) >> 16;
        if (v9)
          *v9 = HIBYTE(v105);
        ++v8;
        v9 += v153;
        --v98;
      }
      while (v98);
    }
LABEL_174:
    v12 = v137;
    v8 += v138;
    v9 += v140;
    LOBYTE(v13) = v136;
    result = v143 + v135;
    a6 = v145 - 1;
    v17 = v134;
  }
  while (v145 != 1);
  return result;
}

uint64_t RGB555_image_mark_rgb32(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  _WORD *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  int32x2_t v20;
  int32x4_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint32x4_t v54;
  int v55;
  uint32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint32x4_t v82;
  int v83;
  uint32x4_t v84;
  int8x16_t v85;
  unsigned int v86;
  unint64_t v87;
  unsigned __int8 *v88;
  char *v89;
  int32x2_t v90;
  char v91;
  int32x4_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint32x4_t v105;
  int v106;
  uint32x4_t v107;
  int8x16_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  uint32x4_t v117;
  int v118;
  uint32x4_t v119;
  int8x16_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char v149;
  char v150;
  uint64_t v151;
  int v152;

  v6 = *((unsigned __int8 *)a2 + 8);
  if (*(_QWORD *)(a1 + 40))
    v7 = 0;
  else
    v7 = 255;
  v152 = v7;
  v8 = (_WORD *)*((_QWORD *)a2 + 2);
  v9 = (char *)*((_QWORD *)a2 + 4);
  if (v9)
    v138 = *((_QWORD *)a2 + 5) - a5;
  else
    v138 = 0;
  v10 = a2[1];
  v137 = *a2;
  v136 = *((_QWORD *)a2 + 3) - a5;
  v151 = v9 != 0;
  v12 = *((_QWORD *)a2 + 19);
  v11 = *((_QWORD *)a2 + 20);
  v13 = *((_QWORD *)a2 + 11);
  v133 = *((_QWORD *)a2 + 13);
  result = *((_QWORD *)a2 + 9) + v133 * a4;
  v130 = *((_QWORD *)a2 + 6);
  v139 = *((_QWORD *)a2 + 7);
  v15 = *(unsigned int **)(a1 + 32);
  v16 = (char *)v15
      + (*(_DWORD *)(a1 + 260) - 1) * *(_DWORD *)(a1 + 24)
      + (((*(_DWORD *)(a1 + 8) >> 22) * *(_DWORD *)(a1 + 256)) >> 3);
  v17 = *(_QWORD *)(a1 + 168);
  v150 = v10;
  v134 = v13;
  v135 = v12;
  v132 = v17;
  if (*(_QWORD *)(a1 + 176))
  {
    v146 = 0;
    v18 = 0;
    v129 = *((_QWORD *)a2 + 15);
    v128 = *((_QWORD *)a2 + 17);
    v127 = ~(-1 << v13);
    v126 = v13 - 4;
    v125 = -v12;
    v19 = (unsigned int *)(v16 - 4);
    v149 = 32 - v10;
    v20 = vdup_n_s32(v6);
    v123 = v11 + 16 * a3 + 8;
    v124 = a5;
    v21.i64[1] = 0x3E007000000;
    while (1)
    {
      if (((v128 - result) | (result - v129)) < 0)
      {
        v26 = 0;
        v147 = 0;
      }
      else
      {
        v22 = ((result & (unint64_t)v127) >> v126) & 0xF;
        v23 = weights_19497[v22];
        v24 = (unint64_t)(v22 - 7) >= 9;
        v25 = v125;
        if (!v24)
          v25 = v12;
        v147 = v25;
        v26 = v23 & 0xF;
      }
      if (v17)
      {
        v27 = v17 + 16 * v139;
        v146 = v27 + 16;
        v18 = (unsigned __int8 *)(v27 + v130);
        v28 = (v139 + 1) & 0xF;
        if (v139 + 1 <= 0)
          v28 = -(-(v139 + 1) & 0xF);
        v139 = v28;
      }
      v29 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
      v142 = a6;
      v140 = result;
      if (v137 != 1)
        break;
      if (a5 >= 1)
      {
        v31 = (uint64_t *)v123;
        v30 = v124;
        while (1)
        {
          v32 = *(v31 - 1);
          v33 = *v31;
          v34 = v29 + v32;
          if ((unint64_t)v19 >= v29 + v32)
            v35 = (unsigned int *)(v29 + v32);
          else
            v35 = v19;
          if (v35 < v15)
            v35 = v15;
          v36 = *v35;
          v37 = v33 & 0xF;
          if ((v33 & 0xF) != 0)
            break;
          if (v26)
          {
            v48 = (unsigned int *)(v34 + v147);
            if ((unint64_t)v19 < v34 + v147)
              v48 = v19;
            if (v48 < v15)
              v48 = v15;
            v49 = BLEND8_19499[v26];
            v46 = v36 - ((v49 & v36) >> v26);
            v47 = (v49 & *v48) >> v26;
            goto LABEL_49;
          }
LABEL_50:
          v50 = (v36 << v150) | (v36 >> v149);
          v51 = v50 | v152;
          if (v18)
          {
            v52 = *v18;
            if ((unint64_t)(v18 + 1) < v146)
              ++v18;
            else
              v18 -= 15;
            if (v6 == 255)
              v53 = DITHERRGBA32(v51, v52);
            else
              v53 = DITHERRGBA32M(v51, v52, v6);
          }
          else
          {
            v18 = 0;
            if (v6 == 255)
            {
              v53 = (v50 >> 17) & 0x7C00 | (v50 >> 14) & 0x3E0 | ((unsigned __int16)v50 >> 11) & 0xFFFFFF | ((v51 >> 3) << 27) | (v51 >> 5 << 24);
            }
            else
            {
              v21.i16[0] = BYTE1(v50);
              v21.i16[1] = v50 >> 8 >> 16;
              v21.i32[1] = v51 & 0xFF00FF;
              *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
              *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
              v54 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
              v55 = (unsigned __int16)v21.i16[0] >> 11;
              v56 = vshlq_u32(v54, (uint32x4_t)xmmword_185004BA0);
              v57 = (int8x16_t)vshlq_u32(v54, (uint32x4_t)xmmword_185004BB0);
              v57.i32[0] = v56.i32[0];
              v57.i32[3] = v56.i32[3];
              v21 = (int32x4_t)vandq_s8(v57, (int8x16_t)xmmword_185004BC0);
              *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
              v53 = v21.i32[0] | v55 | v21.i32[1];
            }
          }
          *v8 = bswap32(v53) >> 16;
          if (v9)
            *v9 = HIBYTE(v53);
          v31 += 2;
          ++v8;
          v9 += v151;
          if (!--v30)
            goto LABEL_117;
        }
        v38 = (unsigned int *)(v34 + (v33 >> 4));
        if (v19 < v38)
          v38 = v19;
        if (v38 < v15)
          v38 = v15;
        v39 = *v38;
        if (v26)
        {
          v40 = (unsigned int *)(v34 + v147);
          if (v19 >= v40)
            v41 = v40;
          else
            v41 = v19;
          if (v41 < v15)
            v41 = v15;
          v42 = *v41;
          v43 = (unsigned int *)((char *)v40 + (v33 >> 4));
          if (v19 < v43)
            v43 = v19;
          if (v43 < v15)
            v43 = v15;
          v44 = BLEND8_19499[v26];
          v36 = v36 - ((v44 & v36) >> v26) + ((v44 & v42) >> v26);
          v39 = v39 - ((v44 & v39) >> v26) + ((v44 & *v43) >> v26);
        }
        v45 = BLEND8_19499[*v31 & 0xF];
        v46 = v36 - ((v45 & v36) >> v37);
        v47 = (v45 & v39) >> v37;
LABEL_49:
        v36 = v46 + v47;
        goto LABEL_50;
      }
LABEL_117:
      v12 = v135;
      v8 += v136;
      v9 += v138;
      LOBYTE(v13) = v134;
      result = v140 + v133;
      a6 = v142 - 1;
      v17 = v132;
      if (v142 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_117;
    v59 = (uint64_t *)v123;
    v58 = v124;
    while (1)
    {
      v60 = *(v59 - 1);
      v61 = *v59;
      v62 = v29 + v60;
      if ((unint64_t)v19 >= v29 + v60)
        v63 = (unsigned int *)(v29 + v60);
      else
        v63 = v19;
      if (v63 < v15)
        v63 = v15;
      v64 = *v63;
      v65 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        v66 = (unsigned int *)(v62 + (v61 >> 4));
        if (v19 < v66)
          v66 = v19;
        if (v66 < v15)
          v66 = v15;
        v67 = *v66;
        if (v26)
        {
          v68 = (unsigned int *)(v62 + v147);
          if (v19 >= v68)
            v69 = v68;
          else
            v69 = v19;
          if (v69 < v15)
            v69 = v15;
          v70 = *v69;
          v71 = (unsigned int *)((char *)v68 + (v61 >> 4));
          if (v19 < v71)
            v71 = v19;
          if (v71 < v15)
            v71 = v15;
          v72 = BLEND8_19499[v26];
          v64 = v64 - ((v72 & v64) >> v26) + ((v72 & v70) >> v26);
          v67 = v67 - ((v72 & v67) >> v26) + ((v72 & *v71) >> v26);
        }
        v73 = BLEND8_19499[*v59 & 0xF];
        v74 = v64 - ((v73 & v64) >> v65);
        v75 = (v73 & v67) >> v65;
      }
      else
      {
        if (!v26)
          goto LABEL_95;
        v76 = (unsigned int *)(v62 + v147);
        if ((unint64_t)v19 < v62 + v147)
          v76 = v19;
        if (v76 < v15)
          v76 = v15;
        v77 = BLEND8_19499[v26];
        v74 = v64 - ((v77 & v64) >> v26);
        v75 = (v77 & *v76) >> v26;
      }
      v64 = v74 + v75;
LABEL_95:
      v78 = (v64 << v150) | (v64 >> v149);
      v79 = v78 | v152;
      if (v18)
      {
        v80 = *v18;
        if ((unint64_t)(v18 + 1) < v146)
          ++v18;
        else
          v18 -= 15;
        if (v6 == 255)
        {
          v81 = DITHERRGBA32(v79, v80);
          if (!v9)
            goto LABEL_105;
        }
        else
        {
          v81 = DITHERRGBA32M(v79, v80, v6);
          if (!v9)
            goto LABEL_105;
        }
      }
      else if (v6 == 255)
      {
        v18 = 0;
        v81 = (v78 >> 17) & 0x7C00 | (v78 >> 14) & 0x3E0 | ((unsigned __int16)v78 >> 11) & 0xFFFFFF | ((v79 >> 3) << 27) | (v79 >> 5 << 24);
        if (!v9)
        {
LABEL_105:
          if (HIBYTE(v81) < 0xF8u)
          {
            if (HIBYTE(v81) >= 8u)
              *v8 = __rev16(PDplusDM(v81, bswap32((unsigned __int16)*v8) >> 16, ~v81 >> 24));
          }
          else
          {
            *v8 = bswap32(v81) >> 16;
          }
          goto LABEL_113;
        }
      }
      else
      {
        v18 = 0;
        v21.i16[0] = BYTE1(v78);
        v21.i16[1] = v78 >> 8 >> 16;
        v21.i32[1] = v79 & 0xFF00FF;
        *(int32x2_t *)v21.i8 = vmul_s32(*(int32x2_t *)v21.i8, v20);
        *(int32x2_t *)v21.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v21.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
        v82 = (uint32x4_t)vzip1q_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
        v83 = (unsigned __int16)v21.i16[0] >> 11;
        v84 = vshlq_u32(v82, (uint32x4_t)xmmword_185004BA0);
        v85 = (int8x16_t)vshlq_u32(v82, (uint32x4_t)xmmword_185004BB0);
        v85.i32[0] = v84.i32[0];
        v85.i32[3] = v84.i32[3];
        v21 = (int32x4_t)vandq_s8(v85, (int8x16_t)xmmword_185004BC0);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
        v81 = v21.i32[0] | v83 | v21.i32[1];
        if (!v9)
          goto LABEL_105;
      }
      if (HIBYTE(v81) < 0xF8u)
      {
        if (HIBYTE(v81) >= 8u)
        {
          v86 = PDAplusDAM((unsigned __int16)v81, SHIBYTE(v81), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v81) ^ 0xFF);
          *v8 = bswap32(v86) >> 16;
          *v9 = HIBYTE(v86);
        }
      }
      else
      {
        *v8 = bswap32(v81) >> 16;
        *v9 = HIBYTE(v81);
      }
LABEL_113:
      v59 += 2;
      ++v8;
      v9 += v151;
      if (!--v58)
        goto LABEL_117;
    }
  }
  v87 = 0;
  v88 = 0;
  v89 = v16 - 4;
  v90 = vdup_n_s32(v6);
  v145 = (uint64_t *)(v11 + 16 * a3);
  v91 = 32 - v10;
  v92.i64[1] = 0x3E007000000;
  v144 = a5;
  v93 = v10;
  do
  {
    if (v17)
    {
      v94 = v17 + 16 * v139;
      v87 = v94 + 16;
      v88 = (unsigned __int8 *)(v94 + v130);
      v95 = (v139 + 1) & 0xF;
      if (v139 + 1 <= 0)
        v95 = -(-(v139 + 1) & 0xF);
      v139 = v95;
    }
    v96 = *(_QWORD *)(a1 + 32) + (result >> v13) * v12;
    v143 = a6;
    v141 = result;
    if (v137 != 1)
    {
      v109 = v145;
      v110 = v144;
      if (a5 < 1)
        goto LABEL_174;
      while (1)
      {
        v111 = *v109;
        v109 += 2;
        v112 = (char *)(v96 + v111);
        if ((unint64_t)v89 < v96 + v111)
          v112 = v89;
        if ((unint64_t)v112 < *(_QWORD *)(a1 + 32))
          v112 = *(char **)(a1 + 32);
        v113 = (*(_DWORD *)v112 << v93) | (*(_DWORD *)v112 >> v91);
        v114 = v113 | v152;
        if (v88)
        {
          v115 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
          {
            v116 = DITHERRGBA32(v114, v115);
            if (v9)
              goto LABEL_157;
          }
          else
          {
            v116 = DITHERRGBA32M(v114, v115, v6);
            if (v9)
              goto LABEL_157;
          }
        }
        else if (v6 == 255)
        {
          v88 = 0;
          v116 = (v113 >> 17) & 0x7C00 | (v113 >> 14) & 0x3E0 | ((unsigned __int16)v113 >> 11) & 0xFFFFFF | ((v114 >> 3) << 27) | (v114 >> 5 << 24);
          if (v9)
          {
LABEL_157:
            if (HIBYTE(v116) < 0xF8u)
            {
              if (HIBYTE(v116) >= 8u)
              {
                v122 = PDAplusDAM((unsigned __int16)v116, SHIBYTE(v116), bswap32((unsigned __int16)*v8) >> 16, *v9, HIBYTE(v116) ^ 0xFF);
                *v8 = bswap32(v122) >> 16;
                *v9 = HIBYTE(v122);
              }
            }
            else
            {
              *v8 = bswap32(v116) >> 16;
              *v9 = HIBYTE(v116);
            }
            goto LABEL_170;
          }
        }
        else
        {
          v88 = 0;
          v92.i16[0] = BYTE1(v113);
          v92.i16[1] = v113 >> 8 >> 16;
          v92.i32[1] = v114 & 0xFF00FF;
          *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
          *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
          v117 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
          v118 = (unsigned __int16)v92.i16[0] >> 11;
          v119 = vshlq_u32(v117, (uint32x4_t)xmmword_185004BA0);
          v120 = (int8x16_t)vshlq_u32(v117, (uint32x4_t)xmmword_185004BB0);
          v120.i32[0] = v119.i32[0];
          v120.i32[3] = v119.i32[3];
          v92 = (int32x4_t)vandq_s8(v120, (int8x16_t)xmmword_185004BC0);
          *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
          v116 = v92.i32[0] | v118 | v92.i32[1];
          if (v9)
            goto LABEL_157;
        }
        if (HIBYTE(v116) >= 0xF8u)
          break;
        if (HIBYTE(v116) >= 8u)
        {
          LOWORD(v121) = __rev16(PDplusDM(v116, bswap32((unsigned __int16)*v8) >> 16, ~v116 >> 24));
          goto LABEL_169;
        }
LABEL_170:
        ++v8;
        v9 += v151;
        --v110;
        v93 = v150;
        if (!v110)
          goto LABEL_174;
      }
      v121 = bswap32(v116) >> 16;
LABEL_169:
      *v8 = v121;
      goto LABEL_170;
    }
    if (a5 >= 1)
    {
      v97 = v145;
      v98 = v144;
      do
      {
        v99 = *v97;
        v97 += 2;
        v100 = (char *)(v96 + v99);
        if ((unint64_t)v89 < v96 + v99)
          v100 = v89;
        if ((unint64_t)v100 < *(_QWORD *)(a1 + 32))
          v100 = *(char **)(a1 + 32);
        v101 = (*(_DWORD *)v100 << v93) | (*(_DWORD *)v100 >> v91);
        v102 = v101 | v152;
        if (v88)
        {
          v103 = *v88;
          if ((unint64_t)(v88 + 1) < v87)
            ++v88;
          else
            v88 -= 15;
          if (v6 == 255)
            v104 = DITHERRGBA32(v102, v103);
          else
            v104 = DITHERRGBA32M(v102, v103, v6);
          v93 = v150;
        }
        else
        {
          v88 = 0;
          if (v6 == 255)
          {
            v104 = (v101 >> 17) & 0x7C00 | (v101 >> 14) & 0x3E0 | ((unsigned __int16)v101 >> 11) & 0xFFFFFF | ((v102 >> 3) << 27) | (v102 >> 5 << 24);
          }
          else
          {
            v92.i16[0] = BYTE1(v101);
            v92.i16[1] = v101 >> 8 >> 16;
            v92.i32[1] = v102 & 0xFF00FF;
            *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, v90);
            *(int32x2_t *)v92.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v92.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v92.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v105 = (uint32x4_t)vzip1q_s32(v92, vdupq_lane_s32(*(int32x2_t *)v92.i8, 1));
            v106 = (unsigned __int16)v92.i16[0] >> 11;
            v107 = vshlq_u32(v105, (uint32x4_t)xmmword_185004BA0);
            v108 = (int8x16_t)vshlq_u32(v105, (uint32x4_t)xmmword_185004BB0);
            v108.i32[0] = v107.i32[0];
            v108.i32[3] = v107.i32[3];
            v92 = (int32x4_t)vandq_s8(v108, (int8x16_t)xmmword_185004BC0);
            *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL));
            v104 = v92.i32[0] | v106 | v92.i32[1];
          }
        }
        *v8 = bswap32(v104) >> 16;
        if (v9)
          *v9 = HIBYTE(v104);
        ++v8;
        v9 += v151;
        --v98;
      }
      while (v98);
    }
LABEL_174:
    v12 = v135;
    v8 += v136;
    v9 += v138;
    LOBYTE(v13) = v134;
    result = v141 + v133;
    a6 = v143 - 1;
    v17 = v132;
  }
  while (v143 != 1);
  return result;
}

uint64_t RGB555_colorlookup(int a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a1 == 3)
  {
    v4 = *(_QWORD *)a2;
  }
  else
  {
    if (a3)
      v5 = (unint64_t)*a3 << 24;
    else
      v5 = 4278190080;
    v4 = v5 | (bswap32(*a2) >> 16);
  }
  pthread_mutex_lock(&RGB555_cacheColorLock);
  v6 = (char *)RGB555_cacheColor;
  if (RGB555_cacheColor && *(_QWORD *)(RGB555_cacheColor + 16) == v4)
  {
    v7 = (char *)RGB555_cacheColor;
  }
  else
  {
    v7 = 0;
    while (1)
    {
      if (!v6)
        goto LABEL_15;
      v8 = v7;
      v7 = v6;
      if (*((_QWORD *)v6 + 2) == v4)
        break;
      v6 = *(char **)v6;
      if (!*(_QWORD *)v7)
      {
        if (RGB555_cacheColorCount > 6)
        {
          *(_QWORD *)v8 = 0;
        }
        else
        {
LABEL_15:
          v9 = (char *)RGB555_cacheColorBase;
          if (RGB555_cacheColorBase)
          {
            v10 = RGB555_cacheColorCount;
          }
          else
          {
            v9 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x1020040A1C41DBCuLL);
            v10 = 0;
            RGB555_cacheColorBase = (uint64_t)v9;
          }
          v7 = &v9[24 * v10];
          *((_QWORD *)v7 + 1) = &v9[1024 * (unint64_t)v10 + 168];
          RGB555_cacheColorCount = v10 + 1;
        }
        *(_QWORD *)v7 = RGB555_cacheColor;
        RGB555_cacheColor = (uint64_t)v7;
        *((_QWORD *)v7 + 2) = v4;
        v11 = *((_QWORD *)v7 + 1);
        if (a1 == 3)
        {
          v12 = 0;
          v14 = 244;
          v15 = 188;
          do
          {
            v16 = pixel_dither_noise[v12 + 1];
            v13 = HIDWORD(v4);
            *(_DWORD *)(v11 + 4 * v12) = ((((v15 + WORD1(v4)) >> 3) & 0x3E0 | ((((v15 + v13) >> 8) & 0x1F) << 10) & 0xFC00FFFF | ((((v14 + WORD1(v4)) >> 8) & 0x1F) << 21) | ((((v14 + v4) >> 8) & 0x1F) << 16)) << 8) & 0xFF00FFFF | (v15 + v4) & 0x1F00 | ((((v15 + WORD1(v4)) >> 3) & 0x3E0 | ((((v15 + v13) >> 8) & 0x1F) << 10) & 0x801FFFFF | ((((v14 + WORD1(v4)) >> 8) & 0x1F) << 21) & 0x83FFFFFF | ((((v14 + v13) >> 8) & 0x1F) << 26)) >> 8) & 0x7F007F;
            *(_WORD *)(v11 + 2 * v12 + 512) = ((v15 + HIWORD(v4)) >> 5) & 0xF8 | ((v15 + HIWORD(v4)) >> 10) & 7 | ((v14 + HIWORD(v4)) >> 2) & 0x700 | ((((v14 + HIWORD(v4)) >> 8) & 0x1F) << 11);
            v14 = v16;
            v15 = v16 >> 8;
            ++v12;
          }
          while ((_DWORD)v12 != 128);
        }
        else
        {
          v17 = 0;
          do
          {
            *(_DWORD *)(v11 + 4 * v17) = PDAM((unsigned __int16)v4, SBYTE3(v4), v17);
            ++v17;
          }
          while ((_DWORD)v17 != 256);
        }
        goto LABEL_28;
      }
    }
    if (v8)
    {
      *(_QWORD *)v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = RGB555_cacheColor;
      RGB555_cacheColor = (uint64_t)v6;
    }
  }
LABEL_28:
  pthread_mutex_unlock(&RGB555_cacheColorLock);
  return *((_QWORD *)v7 + 1);
}

uint64_t RGB555_mark_constmask(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int16x4_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  __int16 v104;
  unsigned int v105;
  int v106;
  char v107;
  unsigned int *v108;
  char *v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned __int16 *v115;
  char *v116;
  char v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  char v124;
  char v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  char v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  int v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  int v145;
  char v146;
  int v147;
  unsigned int *v148;
  int16x4_t *v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned __int16 *v154;
  char v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  char v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int16x4_t v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  __int16 v194;
  unsigned __int16 v195;
  unsigned __int16 v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  __int16 v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;

  v4 = *(_DWORD *)(a1 + 8);
  v224 = *(_DWORD *)(a1 + 4);
  v5 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 136);
  result = RGB555_colorlookup(4, *(unsigned __int16 **)(a1 + 88), *(unsigned __int8 **)(a1 + 96));
  v11 = result;
  v214 = *(_DWORD *)(result + 1020);
  v13 = *(int *)(a1 + 12);
  v12 = *(int *)(a1 + 16);
  if (v6)
  {
    v14 = *(int *)(a1 + 32);
    v15 = (char *)(v6 + v13 + (int)v14 * (uint64_t)(int)v12);
    v16 = 1;
    if (!v8)
      return result;
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v16 = 0;
    if (!v8)
      return result;
  }
  v17 = v14 - v224;
  if (v6)
    v14 -= v224;
  v216 = v14;
  v18 = v5 >> 1;
  v19 = HIBYTE(v214);
  v20 = (int16x4_t *)(v7 + 2 * (v13 + v18 * v12));
  v21 = *(int *)(a1 + 124);
  v22 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v21;
  v23 = v21 - v224;
  v219 = v18 - v224;
  switch(a2)
  {
    case 0:
      if (v6)
      {
        while (1)
        {
          v24 = v224;
          do
          {
            v25 = *(unsigned __int8 *)v22;
            if (v25 < 0xF8)
            {
              if (v25 < 8)
                goto LABEL_15;
              result = PDAM(bswap32(v20->u16[0]) >> 16, *v15, ~(_BYTE)v25);
              v20->i16[0] = bswap32(result) >> 16;
              v26 = BYTE3(result);
            }
            else
            {
              LOBYTE(v26) = 0;
              v20->i16[0] = 0;
            }
            *v15 = v26;
LABEL_15:
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v24;
          }
          while (v24);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4)
            return result;
        }
      }
LABEL_274:
      v102 = v224;
      while (1)
      {
        v103 = *(unsigned __int8 *)v22;
        if (v103 > 0xF7)
          break;
        if (v103 >= 8)
        {
          result = PDM(bswap32(v20->u16[0]) >> 16, ~(_BYTE)v103);
          v104 = __rev16(result);
          goto LABEL_279;
        }
LABEL_280:
        ++v22;
        v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v102)
        {
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4)
            return result;
          goto LABEL_274;
        }
      }
      v104 = 0;
LABEL_279:
      v20->i16[0] = v104;
      goto LABEL_280;
    case 1:
      v105 = v22 & 3;
      if (v6)
      {
        v106 = v105 + v224;
        if ((v22 & 3) != 0)
          v107 = v22 & 0xFC;
        else
          v107 = v22;
        if ((v22 & 3) != 0)
          result = (-1 << (8 * v105));
        else
          result = 0xFFFFFFFFLL;
        if ((v22 & 3) != 0)
          v108 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        else
          v108 = (unsigned int *)v22;
        if ((v22 & 3) != 0)
          v109 = &v15[-(v22 & 3)];
        else
          v109 = v15;
        if ((v22 & 3) != 0)
          v20 = (int16x4_t *)((char *)v20 - 2 * (v22 & 3));
        else
          v106 = v224;
        if ((((_BYTE)v106 + v107) & 3) != 0)
        {
          v110 = 4 - (((_BYTE)v106 + v107) & 3);
          v105 += v110;
          v111 = 0xFFFFFFFF >> (8 * v110);
          if (v106 >= 4)
            v112 = 0xFFFFFFFF >> (8 * v110);
          else
            v112 = 0;
          v225 = v112;
          if (v106 >= 4)
            v111 = -1;
          result = v111 & result;
          v217 = result;
        }
        else
        {
          v217 = result;
          v225 = 0;
        }
        v211 = v23 - v105;
        v220 = v219 - v105;
        v208 = v106 >> 2;
        v165 = bswap32(v214) >> 16;
        v215 = v17 - v105;
LABEL_426:
        v166 = *v108 & v217;
        v167 = v208;
        v168 = v225;
        if (!v166)
          goto LABEL_448;
LABEL_427:
        if (v166 == -1)
        {
          v20->i16[0] = v165;
          *v109 = v19;
          v20->i16[1] = v165;
          v109[1] = v19;
          v20->i16[2] = v165;
          v109[2] = v19;
LABEL_445:
          v20->i16[3] = v165;
          v109[3] = v19;
          goto LABEL_448;
        }
        while (1)
        {
          if (v166 < 0xF8u)
          {
            if (v166 < 8u)
              goto LABEL_434;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v166), HIBYTE(*(_DWORD *)(v11 + 4 * v166)), bswap32(v20->u16[0]) >> 16, *v109, ~(_BYTE)v166);
            v20->i16[0] = bswap32(result) >> 16;
            v169 = BYTE3(result);
          }
          else
          {
            v20->i16[0] = v165;
            LOBYTE(v169) = v19;
          }
          *v109 = v169;
LABEL_434:
          if (BYTE1(v166) < 0xF8u)
          {
            if (BYTE1(v166) < 8u)
              goto LABEL_439;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v166))), bswap32(v20->u16[1]) >> 16, v109[1], ~(v166 >> 8));
            v20->i16[1] = bswap32(result) >> 16;
            v170 = BYTE3(result);
          }
          else
          {
            v20->i16[1] = v165;
            LOBYTE(v170) = v19;
          }
          v109[1] = v170;
LABEL_439:
          if (BYTE2(v166) < 0xF8u)
          {
            if (BYTE2(v166) < 8u)
              goto LABEL_444;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v166))), bswap32(v20->u16[2]) >> 16, v109[2], ~HIWORD(v166));
            v20->i16[2] = bswap32(result) >> 16;
            v171 = BYTE3(result);
          }
          else
          {
            v20->i16[2] = v165;
            LOBYTE(v171) = v19;
          }
          v109[2] = v171;
LABEL_444:
          if (v166 >> 27 == 31)
            goto LABEL_445;
          if (v166 >> 27)
          {
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v166)), HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v166))), bswap32(v20->u16[3]) >> 16, v109[3], ~v166 >> 24);
            v20->i16[3] = bswap32(result) >> 16;
            v109[3] = BYTE3(result);
          }
LABEL_448:
          while (1)
          {
            v172 = v167;
            ++v20;
            v109 += 4;
            --v167;
            ++v108;
            if (v172 < 2)
              break;
            v166 = *v108;
            if (*v108)
              goto LABEL_427;
          }
          if (!v168)
          {
            v108 = (unsigned int *)((char *)v108 + v211);
            v20 = (int16x4_t *)((char *)v20 + 2 * v220);
            v109 += v215;
            if (!--v4)
              return result;
            goto LABEL_426;
          }
          v168 = 0;
          v166 = *v108 & v225;
        }
      }
      v145 = v105 + v224;
      if ((v22 & 3) != 0)
        v146 = v22 & 0xFC;
      else
        v146 = v22;
      if ((v22 & 3) != 0)
        v147 = -1 << (8 * v105);
      else
        v147 = -1;
      if ((v22 & 3) != 0)
        v148 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v148 = (unsigned int *)v22;
      if ((v22 & 3) != 0)
        v149 = (int16x4_t *)((char *)v20 - 2 * (v22 & 3));
      else
        v149 = v20;
      if ((v22 & 3) == 0)
        v145 = v224;
      if ((((_BYTE)v145 + v146) & 3) != 0)
      {
        v150 = 4 - (((_BYTE)v145 + v146) & 3);
        v105 += v150;
        v151 = 0xFFFFFFFF >> (8 * v150);
        if (v145 >= 4)
          v152 = 0xFFFFFFFF >> (8 * v150);
        else
          v152 = 0;
        if (v145 >= 4)
          v151 = -1;
        v227 = v151 & v147;
      }
      else
      {
        v227 = v147;
        v152 = 0;
      }
      v218 = v23 - v105;
      v222 = v219 - v105;
      v212 = v145 >> 2;
      v189 = bswap32(v214) >> 16;
      v190 = vdup_n_s16(v189);
      do
      {
        v191 = *v148 & v227;
        v192 = v212;
        v193 = v152;
        if (!v191)
          goto LABEL_497;
LABEL_479:
        if (v191 == -1)
        {
          *v149 = v190;
          goto LABEL_497;
        }
        while (1)
        {
          v194 = v189;
          if (v191 <= 0xF7u)
          {
            if (v191 < 8u)
              goto LABEL_485;
            result = PDplusDM(*(_WORD *)(v11 + 4 * v191), bswap32(v149->u16[0]) >> 16, ~(_BYTE)v191);
            v194 = __rev16(result);
          }
          v149->i16[0] = v194;
LABEL_485:
          v195 = v189;
          if (BYTE1(v191) <= 0xF7u)
          {
            if (BYTE1(v191) < 8u)
              goto LABEL_489;
            result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE1(v191)), bswap32(v149->u16[1]) >> 16, ~(v191 >> 8));
            v195 = __rev16(result);
          }
          v149->i16[1] = v195;
LABEL_489:
          v196 = v189;
          if (BYTE2(v191) <= 0xF7u)
          {
            if (BYTE2(v191) < 8u)
              goto LABEL_493;
            result = PDplusDM(*(_WORD *)(v11 + 4 * BYTE2(v191)), bswap32(v149->u16[2]) >> 16, ~HIWORD(v191));
            v196 = __rev16(result);
          }
          v149->i16[2] = v196;
LABEL_493:
          if (v191 >> 27 == 31)
          {
            v149->i16[3] = v189;
          }
          else if (v191 >> 27)
          {
            result = PDplusDM(*(_WORD *)(v11 + 4 * HIBYTE(v191)), bswap32(v149->u16[3]) >> 16, ~v191 >> 24);
            v149->i16[3] = __rev16(result);
          }
LABEL_497:
          while (1)
          {
            v197 = v192;
            ++v149;
            --v192;
            ++v148;
            if (v197 < 2)
              break;
            v191 = *v148;
            if (*v148)
              goto LABEL_479;
          }
          if (!v193)
            break;
          v193 = 0;
          v191 = *v148 & v152;
        }
        v148 = (unsigned int *)((char *)v148 + v218);
        v149 = (int16x4_t *)((char *)v149 + 2 * v222);
        --v4;
      }
      while (v4);
      return result;
    case 2:
      v113 = v22 & 3;
      if (v6)
      {
        v114 = v113 + v224;
        v115 = (unsigned __int16 *)v20 - (v22 & 3);
        v116 = &v15[-(v22 & 3)];
        if ((v22 & 3) != 0)
          v117 = v22 & 0xFC;
        else
          v117 = v22;
        if ((v22 & 3) != 0)
          result = (-1 << (8 * v113));
        else
          result = 0xFFFFFFFFLL;
        if ((v22 & 3) != 0)
        {
          v22 &= 0xFFFFFFFFFFFFFFFCLL;
          v15 = v116;
          v20 = (int16x4_t *)v115;
        }
        else
        {
          v114 = v224;
        }
        if ((((_BYTE)v114 + v117) & 3) != 0)
        {
          v118 = 4 - (((_BYTE)v114 + v117) & 3);
          v113 += v118;
          v119 = 0xFFFFFFFF >> (8 * v118);
          if (v114 >= 4)
            v120 = 0xFFFFFFFF >> (8 * v118);
          else
            v120 = 0;
          v226 = v120;
          if (v114 >= 4)
            v119 = -1;
          result = v119 & result;
          v210 = result;
        }
        else
        {
          v210 = result;
          v226 = 0;
        }
        v209 = v23 - v113;
        v221 = v219 - v113;
        v207 = v114 >> 2;
        v206 = v17 - v113;
        v173 = v226;
        while (1)
        {
          v174 = *(_DWORD *)v22 & v210;
          v175 = v207;
          v176 = v173;
          if (!v174)
            goto LABEL_469;
LABEL_458:
          if (v174 == -1)
            break;
          while (1)
          {
            if ((v174 & 0xF8) != 0)
            {
              v185 = HIBYTE(*(_DWORD *)(v11 + 4 * v174));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v174), v185, bswap32(v20->u16[0]) >> 16, *v15, v185 ^ 0xFFu);
              v20->i16[0] = bswap32(result) >> 16;
              *v15 = BYTE3(result);
            }
            if ((v174 & 0xF800) != 0)
            {
              v186 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE1(v174)));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE1(v174)), v186, bswap32(v20->u16[1]) >> 16, v15[1], v186 ^ 0xFFu);
              v20->i16[1] = bswap32(result) >> 16;
              v15[1] = BYTE3(result);
            }
            if ((v174 & 0xF80000) != 0)
            {
              v187 = HIBYTE(*(_DWORD *)(v11 + 4 * BYTE2(v174)));
              result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * BYTE2(v174)), v187, bswap32(v20->u16[2]) >> 16, v15[2], v187 ^ 0xFFu);
              v20->i16[2] = bswap32(result) >> 16;
              v15[2] = BYTE3(result);
            }
            if (v174 >> 27)
            {
              v183 = HIBYTE(*(_DWORD *)(v11 + 4 * HIBYTE(v174)));
              v180 = bswap32(v20->u16[3]) >> 16;
              v181 = v15[3];
              v182 = (unsigned __int16)*(_DWORD *)(v11 + 4 * HIBYTE(v174));
              v184 = v183 ^ 0xFF;
              goto LABEL_468;
            }
LABEL_469:
            while (1)
            {
              v188 = v175;
              ++v20;
              v15 += 4;
              --v175;
              v22 += 4;
              if (v188 < 2)
                break;
              v174 = *(_DWORD *)v22;
              if (*(_DWORD *)v22)
                goto LABEL_458;
            }
            if (!v176)
              break;
            v176 = 0;
            v174 = *(_DWORD *)v22 & v173;
          }
          v22 += v209;
          v20 = (int16x4_t *)((char *)v20 + 2 * v221);
          v15 += v206;
          if (!--v4)
            return result;
        }
        v177 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[0]) >> 16, *v15, ~HIBYTE(v214));
        v20->i16[0] = bswap32(v177) >> 16;
        *v15 = HIBYTE(v177);
        v178 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[1]) >> 16, v15[1], ~HIBYTE(v214));
        v20->i16[1] = bswap32(v178) >> 16;
        v15[1] = HIBYTE(v178);
        v179 = PDAplusDAM((unsigned __int16)v214, SHIBYTE(v214), bswap32(v20->u16[2]) >> 16, v15[2], ~HIBYTE(v214));
        v20->i16[2] = bswap32(v179) >> 16;
        v15[2] = HIBYTE(v179);
        v180 = bswap32(v20->u16[3]) >> 16;
        v181 = v15[3];
        v182 = (unsigned __int16)v214;
        v173 = v226;
        LOBYTE(v183) = HIBYTE(v214);
        v184 = ~HIBYTE(v214);
LABEL_468:
        result = PDAplusDAM(v182, v183, v180, v181, v184);
        v20->i16[3] = bswap32(result) >> 16;
        v15[3] = BYTE3(result);
        goto LABEL_469;
      }
      v153 = v113 + v224;
      v154 = (unsigned __int16 *)v20 - (v22 & 3);
      if ((v22 & 3) != 0)
        v155 = v22 & 0xFC;
      else
        v155 = v22;
      if ((v22 & 3) != 0)
        v156 = -1 << (8 * v113);
      else
        v156 = -1;
      if ((v22 & 3) != 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFFCLL;
        v20 = (int16x4_t *)v154;
      }
      else
      {
        v153 = v224;
      }
      if ((((_BYTE)v153 + v155) & 3) != 0)
      {
        v157 = 4 - (((_BYTE)v153 + v155) & 3);
        v113 += v157;
        v158 = 0xFFFFFFFF >> (8 * v157);
        if (v153 >= 4)
          v159 = -1;
        else
          v159 = 0xFFFFFFFF >> (8 * v157);
        v228 = v159 & v156;
        if (v153 >= 4)
          v160 = v158;
        else
          v160 = 0;
      }
      else
      {
        v228 = v156;
        v160 = 0;
      }
      v213 = v23 - v113;
      v198 = v153 >> 2;
      v223 = v219 - v113;
LABEL_506:
      v199 = *(_DWORD *)v22 & v228;
      v200 = v160;
      v201 = v198;
      if (!v199)
        goto LABEL_518;
LABEL_507:
      if (v199 == -1)
      {
        v20->i16[0] = __rev16(PDplusDM(v214, bswap32(v20->u16[0]) >> 16, ~HIBYTE(v214)));
        v20->i16[1] = __rev16(PDplusDM(v214, bswap32(v20->u16[1]) >> 16, ~HIBYTE(v214)));
        v20->i16[2] = __rev16(PDplusDM(v214, bswap32(v20->u16[2]) >> 16, ~HIBYTE(v214)));
        v202 = bswap32(v20->u16[3]) >> 16;
        v203 = v214;
        v204 = ~HIBYTE(v214);
      }
      else
      {
        while (1)
        {
          if ((v199 & 0xF8) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * v199), bswap32(v20->u16[0]) >> 16, ~*(_DWORD *)(v11 + 4 * v199) >> 24);
            v20->i16[0] = __rev16(result);
          }
          if ((v199 & 0xF800) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE1(v199)), bswap32(v20->u16[1]) >> 16, ~*(_DWORD *)(v11 + 4 * BYTE1(v199)) >> 24);
            v20->i16[1] = __rev16(result);
          }
          if ((v199 & 0xF80000) != 0)
          {
            result = PDplusDM(*(_DWORD *)(v11 + 4 * BYTE2(v199)), bswap32(v20->u16[2]) >> 16, ~*(_DWORD *)(v11 + 4 * BYTE2(v199)) >> 24);
            v20->i16[2] = __rev16(result);
          }
          if (v199 >> 27)
            break;
LABEL_518:
          while (1)
          {
            v205 = v201;
            ++v20;
            --v201;
            v22 += 4;
            if (v205 < 2)
              break;
            v199 = *(_DWORD *)v22;
            if (*(_DWORD *)v22)
              goto LABEL_507;
          }
          if (!v200)
          {
            v22 += v213;
            v20 = (int16x4_t *)((char *)v20 + 2 * v223);
            if (!--v4)
              return result;
            goto LABEL_506;
          }
          v200 = 0;
          v199 = *(_DWORD *)v22 & v160;
        }
        v202 = bswap32(v20->u16[3]) >> 16;
        v203 = *(_DWORD *)(v11 + 4 * HIBYTE(v199));
        v204 = ~*(_DWORD *)(v11 + 4 * HIBYTE(v199)) >> 24;
      }
      result = PDplusDM(v203, v202, v204);
      v20->i16[3] = __rev16(result);
      goto LABEL_518;
    case 3:
      while (1)
      {
        v27 = v224;
        do
        {
          v28 = *(unsigned __int8 *)v22;
          if (v28 < 0xF8)
          {
            if (v28 < 8)
              goto LABEL_24;
            v29 = *v15;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * ((v29 * v28 + ((v29 * v28) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * ((v29 * v28 + ((v29 * v28) >> 8) + 1) >> 8))), bswap32(v20->u16[0]) >> 16, v29, v28 ^ 0xFF);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * *v15);
          }
          v20->i16[0] = bswap32(result) >> 16;
          *v15 = BYTE3(result);
LABEL_24:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v27;
        }
        while (v27);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 4:
      while (1)
      {
        v30 = v224;
        do
        {
          v31 = *(unsigned __int8 *)v22;
          if (v31 < 0xF8)
          {
            if (v31 < 8)
              goto LABEL_33;
            v32 = *v15;
            result = PDAplusDAM((unsigned __int16)*(_DWORD *)(v11+ 4 * (((v32 ^ 0xFF) * v31 + (((v32 ^ 0xFF) * v31) >> 8) + 1) >> 8)), HIBYTE(*(_DWORD *)(v11 + 4 * (((v32 ^ 0xFF) * v31 + (((v32 ^ 0xFF) * v31) >> 8) + 1) >> 8))), bswap32(v20->u16[0]) >> 16, v32, v31 ^ 0xFF);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * ~*v15);
          }
          v20->i16[0] = bswap32(result) >> 16;
          *v15 = BYTE3(result);
LABEL_33:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v30;
        }
        while (v30);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 5:
      do
      {
        v33 = v224;
        do
        {
          v34 = *(unsigned __int8 *)v22;
          if (v34 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v34), HIBYTE(*(_DWORD *)(v11 + 4 * v34)), *v15, bswap32(v20->u16[0]) >> 16, *v15, HIBYTE(*(_DWORD *)(v11 + 4 * v34)) ^ 0xFFu);
            v20->i16[0] = bswap32(result) >> 16;
            *v15 = BYTE3(result);
          }
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v33;
        }
        while (v33);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 6:
      while (1)
      {
        v35 = v224;
        do
        {
          v36 = *(unsigned __int8 *)v22;
          if (v36 < 8)
            goto LABEL_49;
          v37 = *v15;
          if (v37 > 7)
          {
            if (v37 > 0xF7)
              goto LABEL_49;
            result = PDAplusDAM(bswap32(v20->u16[0]) >> 16, v37, (unsigned __int16)*(_DWORD *)(v11 + 4 * v36), HIBYTE(*(_DWORD *)(v11 + 4 * v36)), ~(_BYTE)v37);
          }
          else
          {
            result = *(unsigned int *)(v11 + 4 * v36);
          }
          v20->i16[0] = bswap32(result) >> 16;
          *v15 = BYTE3(result);
LABEL_49:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v35;
        }
        while (v35);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 7:
      if (v6)
      {
        while (1)
        {
          v121 = v224;
          do
          {
            v122 = *(unsigned __int8 *)v22;
            if (v122 < 0xF8)
            {
              if (v122 < 8)
                goto LABEL_330;
              v123 = bswap32(v20->u16[0]) >> 16;
              v124 = *v15;
              v125 = ~(_BYTE)v122 + ((unsigned __int16)(v19 * v122 + ((v19 * v122) >> 8) + 1) >> 8);
            }
            else
            {
              v123 = bswap32(v20->u16[0]) >> 16;
              v124 = *v15;
              v125 = HIBYTE(v214);
            }
            result = PDAM(v123, v124, v125);
            v20->i16[0] = bswap32(result) >> 16;
            *v15 = BYTE3(result);
LABEL_330:
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v121;
          }
          while (v121);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4)
            return result;
        }
      }
LABEL_333:
      v126 = v224;
      while (1)
      {
        v127 = *(unsigned __int8 *)v22;
        if (v127 >= 0xF8)
          break;
        if (v127 >= 8)
        {
          v128 = bswap32(v20->u16[0]) >> 16;
          v129 = ~(_BYTE)v127 + ((unsigned __int16)(v19 * v127 + ((v19 * v127) >> 8) + 1) >> 8);
          goto LABEL_338;
        }
LABEL_339:
        ++v22;
        v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v126)
        {
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4)
            return result;
          goto LABEL_333;
        }
      }
      v128 = bswap32(v20->u16[0]) >> 16;
      v129 = HIBYTE(v214);
LABEL_338:
      result = PDM(v128, v129);
      v20->i16[0] = __rev16(result);
      goto LABEL_339;
    case 8:
      if (v6)
      {
        while (1)
        {
          v130 = v224;
          do
          {
            v131 = *(unsigned __int8 *)v22;
            if (v131 < 0xF8)
            {
              if (v131 < 8)
                goto LABEL_349;
              v132 = bswap32(v20->u16[0]) >> 16;
              v133 = *v15;
              v134 = ~((v19 * v131 + ((v19 * v131) >> 8) + 1) >> 8);
            }
            else
            {
              v132 = bswap32(v20->u16[0]) >> 16;
              v133 = *v15;
              v134 = ~HIBYTE(v214);
            }
            result = PDAM(v132, v133, v134);
            v20->i16[0] = bswap32(result) >> 16;
            *v15 = BYTE3(result);
LABEL_349:
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v130;
          }
          while (v130);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          if (!--v4)
            return result;
        }
      }
LABEL_352:
      v135 = v224;
      while (1)
      {
        v136 = *(unsigned __int8 *)v22;
        if (v136 >= 0xF8)
          break;
        if (v136 >= 8)
        {
          v137 = bswap32(v20->u16[0]) >> 16;
          v138 = ~((v19 * v136 + ((v19 * v136) >> 8) + 1) >> 8);
          goto LABEL_357;
        }
LABEL_358:
        ++v22;
        v20 = (int16x4_t *)((char *)v20 + 2);
        if (!--v135)
        {
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          if (!--v4)
            return result;
          goto LABEL_352;
        }
      }
      v137 = bswap32(v20->u16[0]) >> 16;
      v138 = ~HIBYTE(v214);
LABEL_357:
      result = PDM(v137, v138);
      v20->i16[0] = __rev16(result);
      goto LABEL_358;
    case 9:
      do
      {
        v38 = v224;
        do
        {
          v39 = *(unsigned __int8 *)v22;
          if (v39 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v39), HIBYTE(*(_DWORD *)(v11 + 4 * v39)), *v15 ^ 0xFFu, bswap32(v20->u16[0]) >> 16, *v15, (~(_BYTE)v39 + HIBYTE(*(_DWORD *)(v11 + 4 * v39))));
            v20->i16[0] = bswap32(result) >> 16;
            *v15 = BYTE3(result);
          }
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v38;
        }
        while (v38);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 10:
      do
      {
        v40 = v224;
        do
        {
          v41 = *(unsigned __int8 *)v22;
          if (v41 >= 8)
          {
            result = PDAMplusDAM((unsigned __int16)*(_DWORD *)(v11 + 4 * v41), HIBYTE(*(_DWORD *)(v11 + 4 * v41)), *v15 ^ 0xFFu, bswap32(v20->u16[0]) >> 16, *v15, HIBYTE(*(_DWORD *)(v11 + 4 * v41)) ^ 0xFFu);
            v20->i16[0] = bswap32(result) >> 16;
            *v15 = BYTE3(result);
          }
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v40;
        }
        while (v40);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        --v4;
      }
      while (v4);
      return result;
    case 11:
      if (v6)
      {
        do
        {
          v139 = v224;
          do
          {
            v140 = *(unsigned __int8 *)v22;
            if (v140 >= 8)
            {
              result = PDAplusdDA(bswap32(v20->u16[0]) >> 16, *v15, *(_DWORD *)(v11 + 4 * v140), HIBYTE(*(_DWORD *)(v11 + 4 * v140)));
              v20->i16[0] = bswap32(result) >> 16;
              *v15 = BYTE3(result);
            }
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v139;
          }
          while (v139);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          --v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v141 = v224;
          do
          {
            v142 = *(unsigned __int8 *)v22;
            if (v142 >= 8)
            {
              result = PDplusdDA(bswap32(v20->u16[0]) >> 16, *(_DWORD *)(v11 + 4 * v142), HIBYTE(*(_DWORD *)(v11 + 4 * v142)));
              v20->i16[0] = __rev16(result);
            }
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            --v141;
          }
          while (v141);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          --v4;
        }
        while (v4);
      }
      return result;
    case 12:
      if (v6)
      {
        do
        {
          v143 = v224;
          do
          {
            v144 = *(unsigned __int8 *)v22;
            if (v144 >= 8)
            {
              result = PDApluslDA(bswap32(v20->u16[0]) >> 16, *v15, (unsigned __int16)*(_DWORD *)(v11 + 4 * v144), HIBYTE(*(_DWORD *)(v11 + 4 * v144)));
              v20->i16[0] = bswap32(result) >> 16;
              *v15 = BYTE3(result);
            }
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            v15 += v16;
            --v143;
          }
          while (v143);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          v15 += v216;
          --v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v161 = v224;
          do
          {
            v162 = *(unsigned __int8 *)v22;
            if (v162 >= 8)
            {
              v163 = bswap32(v20->u16[0]);
              v164 = (((HIWORD(v163) << 15) | HIWORD(v163)) & 0x1F07C1F)
                   + (*(_DWORD *)(result + 4 * v162) & 0x7C1F | (((*(_DWORD *)(result + 4 * v162) >> 5) & 0x1F) << 20));
              v20->i16[0] = __rev16((((30 * ((v164 >> 5) & 0x100401)) | (15 * ((v164 >> 5) & 0x100401)) | v164) >> 15) & 0x3E0 | ((30 * ((v164 >> 5) & 0x100401)) | (15 * ((v164 >> 5) & 0x100401)) | v164) & 0x7C1F);
            }
            ++v22;
            v20 = (int16x4_t *)((char *)v20 + 2);
            --v161;
          }
          while (v161);
          v22 += v23;
          v20 = (int16x4_t *)((char *)v20 + 2 * v219);
          --v4;
        }
        while (v4);
      }
      return result;
    case 13:
      while (1)
      {
        v42 = v224;
        do
        {
          v43 = *(unsigned __int8 *)v22;
          if (v43 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v43);
            v44 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v45 = *v15;
                if (v45 < 8)
                  goto LABEL_73;
              }
              else
              {
                v45 = 255;
              }
              result = PDAmultiplyPDA(bswap32(v20->u16[0]) >> 16, v45, (unsigned __int16)*(_DWORD *)(v11 + 4 * v43), v44, v10);
              if (v6)
              {
                v44 = BYTE3(result);
LABEL_73:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v44;
                goto LABEL_75;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_75:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v42;
        }
        while (v42);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 14:
      while (1)
      {
        v46 = v224;
        do
        {
          v47 = *(unsigned __int8 *)v22;
          if (v47 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v47);
            v48 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v49 = *v15;
                if (v49 < 8)
                  goto LABEL_87;
              }
              else
              {
                v49 = 255;
              }
              result = PDAscreenPDA(bswap32(v20->u16[0]) >> 16, v49, (unsigned __int16)*(_DWORD *)(v11 + 4 * v47), v48);
              if (v6)
              {
                v48 = BYTE3(result);
LABEL_87:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v48;
                goto LABEL_89;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_89:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v46;
        }
        while (v46);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 15:
      while (1)
      {
        v50 = v224;
        do
        {
          v51 = *(unsigned __int8 *)v22;
          if (v51 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v51);
            v52 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v53 = *v15;
                if (v53 < 8)
                  goto LABEL_101;
              }
              else
              {
                v53 = 255;
              }
              result = PDAoverlayPDA(bswap32(v20->u16[0]) >> 16, v53, (unsigned __int16)*(_DWORD *)(v11 + 4 * v51), v52);
              if (v6)
              {
                v52 = BYTE3(result);
LABEL_101:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v52;
                goto LABEL_103;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_103:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v50;
        }
        while (v50);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 16:
      while (1)
      {
        v54 = v224;
        do
        {
          v55 = *(unsigned __int8 *)v22;
          if (v55 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v55);
            v56 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v57 = *v15;
                if (v57 < 8)
                  goto LABEL_115;
              }
              else
              {
                v57 = 255;
              }
              result = PDAdarkenPDA(bswap32(v20->u16[0]) >> 16, v57, (unsigned __int16)*(_DWORD *)(v11 + 4 * v55), v56);
              if (v6)
              {
                v56 = BYTE3(result);
LABEL_115:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v56;
                goto LABEL_117;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_117:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v54;
        }
        while (v54);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 17:
      while (1)
      {
        v58 = v224;
        do
        {
          v59 = *(unsigned __int8 *)v22;
          if (v59 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v59);
            v60 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v61 = *v15;
                if (v61 < 8)
                  goto LABEL_129;
              }
              else
              {
                v61 = 255;
              }
              result = PDAlightenPDA(bswap32(v20->u16[0]) >> 16, v61, (unsigned __int16)*(_DWORD *)(v11 + 4 * v59), v60);
              if (v6)
              {
                v60 = BYTE3(result);
LABEL_129:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v60;
                goto LABEL_131;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_131:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v58;
        }
        while (v58);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 18:
      while (1)
      {
        v62 = v224;
        do
        {
          v63 = *(unsigned __int8 *)v22;
          if (v63 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v63);
            v64 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v65 = *v15;
                if (v65 < 8)
                  goto LABEL_143;
              }
              else
              {
                v65 = 255;
              }
              result = PDAcolordodgePDA(bswap32(v20->u16[0]) >> 16, v65, (unsigned __int16)*(_DWORD *)(v11 + 4 * v63), v64);
              if (v6)
              {
                v64 = BYTE3(result);
LABEL_143:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v64;
                goto LABEL_145;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_145:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v62;
        }
        while (v62);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 19:
      while (1)
      {
        v66 = v224;
        do
        {
          v67 = *(unsigned __int8 *)v22;
          if (v67 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v67);
            v68 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v69 = *v15;
                if (v69 < 8)
                  goto LABEL_157;
              }
              else
              {
                v69 = 255;
              }
              result = PDAcolorburnPDA(bswap32(v20->u16[0]) >> 16, v69, (unsigned __int16)*(_DWORD *)(v11 + 4 * v67), v68);
              if (v6)
              {
                v68 = BYTE3(result);
LABEL_157:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v68;
                goto LABEL_159;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_159:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v66;
        }
        while (v66);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 20:
      while (1)
      {
        v70 = v224;
        do
        {
          v71 = *(unsigned __int8 *)v22;
          if (v71 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v71);
            v72 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v73 = *v15;
                if (v73 < 8)
                  goto LABEL_171;
              }
              else
              {
                v73 = 255;
              }
              result = PDAsoftlightPDA(bswap32(v20->u16[0]) >> 16, v73, (unsigned __int16)*(_DWORD *)(v11 + 4 * v71), v72);
              if (v6)
              {
                v72 = BYTE3(result);
LABEL_171:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v72;
                goto LABEL_173;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_173:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v70;
        }
        while (v70);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 21:
      while (1)
      {
        v74 = v224;
        do
        {
          v75 = *(unsigned __int8 *)v22;
          if (v75 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v75);
            v76 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v77 = *v15;
                if (v77 < 8)
                  goto LABEL_185;
              }
              else
              {
                v77 = 255;
              }
              result = PDAhardlightPDA(bswap32(v20->u16[0]) >> 16, v77, (unsigned __int16)*(_DWORD *)(v11 + 4 * v75), v76);
              if (v6)
              {
                v76 = BYTE3(result);
LABEL_185:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v76;
                goto LABEL_187;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_187:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v74;
        }
        while (v74);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 22:
      while (1)
      {
        v78 = v224;
        do
        {
          v79 = *(unsigned __int8 *)v22;
          if (v79 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v79);
            v80 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v81 = *v15;
                if (v81 < 8)
                  goto LABEL_199;
              }
              else
              {
                v81 = 255;
              }
              result = PDAdifferencePDA(bswap32(v20->u16[0]) >> 16, v81, (unsigned __int16)*(_DWORD *)(v11 + 4 * v79), v80);
              if (v6)
              {
                v80 = BYTE3(result);
LABEL_199:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v80;
                goto LABEL_201;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_201:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v78;
        }
        while (v78);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 23:
      while (1)
      {
        v82 = v224;
        do
        {
          v83 = *(unsigned __int8 *)v22;
          if (v83 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v83);
            v84 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v85 = *v15;
                if (v85 < 8)
                  goto LABEL_213;
              }
              else
              {
                v85 = 255;
              }
              result = PDAexclusionPDA(bswap32(v20->u16[0]) >> 16, v85, (unsigned __int16)*(_DWORD *)(v11 + 4 * v83), v84);
              if (v6)
              {
                v84 = BYTE3(result);
LABEL_213:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v84;
                goto LABEL_215;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_215:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v82;
        }
        while (v82);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 24:
      while (1)
      {
        v86 = v224;
        do
        {
          v87 = *(unsigned __int8 *)v22;
          if (v87 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v87);
            v88 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v89 = *v15;
                if (v89 < 8)
                  goto LABEL_227;
              }
              else
              {
                v89 = 255;
              }
              result = PDAhuePDA(bswap32(v20->u16[0]) >> 16, v89, (unsigned __int16)*(_DWORD *)(v11 + 4 * v87), v88);
              if (v6)
              {
                v88 = BYTE3(result);
LABEL_227:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v88;
                goto LABEL_229;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_229:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v86;
        }
        while (v86);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 25:
      while (1)
      {
        v90 = v224;
        do
        {
          v91 = *(unsigned __int8 *)v22;
          if (v91 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v91);
            v92 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v93 = *v15;
                if (v93 < 8)
                  goto LABEL_241;
              }
              else
              {
                v93 = 255;
              }
              result = PDAsaturationPDA(bswap32(v20->u16[0]) >> 16, v93, (unsigned __int16)*(_DWORD *)(v11 + 4 * v91), v92);
              if (v6)
              {
                v92 = BYTE3(result);
LABEL_241:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v92;
                goto LABEL_243;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_243:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v90;
        }
        while (v90);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 26:
      while (1)
      {
        v94 = v224;
        do
        {
          v95 = *(unsigned __int8 *)v22;
          if (v95 >= 8)
          {
            result = *(unsigned int *)(v11 + 4 * v95);
            v96 = BYTE3(result);
            if (BYTE3(result) >= 8u)
            {
              if (v6)
              {
                v97 = *v15;
                if (v97 < 8)
                  goto LABEL_255;
              }
              else
              {
                v97 = 255;
              }
              result = PDAluminosityPDA((unsigned __int16)*(_DWORD *)(v11 + 4 * v95), v96, bswap32(v20->u16[0]) >> 16, v97);
              if (v6)
              {
                v96 = BYTE3(result);
LABEL_255:
                v20->i16[0] = bswap32(result) >> 16;
                *v15 = v96;
                goto LABEL_257;
              }
              v20->i16[0] = bswap32(result) >> 16;
            }
          }
LABEL_257:
          ++v22;
          v20 = (int16x4_t *)((char *)v20 + 2);
          v15 += v16;
          --v94;
        }
        while (v94);
        v22 += v23;
        v20 = (int16x4_t *)((char *)v20 + 2 * v219);
        v15 += v216;
        if (!--v4)
          return result;
      }
    case 27:
      break;
    default:
      return result;
  }
LABEL_260:
  v98 = v224;
  while (1)
  {
    v99 = *(unsigned __int8 *)v22;
    if (v99 < 8)
      goto LABEL_271;
    result = *(unsigned int *)(v11 + 4 * v99);
    v100 = BYTE3(result);
    if (BYTE3(result) < 8u)
      goto LABEL_271;
    if (v6)
    {
      v101 = *v15;
      if (v101 < 8)
        goto LABEL_269;
    }
    else
    {
      v101 = 255;
    }
    result = PDAluminosityPDA(bswap32(v20->u16[0]) >> 16, v101, (unsigned __int16)*(_DWORD *)(v11 + 4 * v99), v100);
    if (!v6)
    {
      v20->i16[0] = bswap32(result) >> 16;
      goto LABEL_271;
    }
    v100 = BYTE3(result);
LABEL_269:
    v20->i16[0] = bswap32(result) >> 16;
    *v15 = v100;
LABEL_271:
    ++v22;
    v20 = (int16x4_t *)((char *)v20 + 2);
    v15 += v16;
    if (!--v98)
    {
      v22 += v23;
      v20 = (int16x4_t *)((char *)v20 + 2 * v219);
      v15 += v216;
      if (!--v4)
        return result;
      goto LABEL_260;
    }
  }
}

uint64_t RGB555_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  char v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  char v92;
  char v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  char v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  char v148;
  char v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  char v195;
  unsigned int v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  char v208;
  unsigned int v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  unsigned int v221;
  char v222;
  int8x16_t v223;
  unsigned int v224;
  unsigned int v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  unsigned int v237;
  char v238;
  unsigned int v239;
  unsigned int v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  char v253;
  unsigned int v254;
  unsigned int v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 *v263;
  uint64_t v264;
  int v265;
  unint64_t v266;
  unsigned int v267;
  char v268;
  unsigned int v269;
  unsigned int v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 *v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  unsigned int v282;
  char v283;
  unsigned int v284;
  unsigned int v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned __int8 *v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  unsigned int v297;
  char v298;
  unsigned int v299;
  unsigned int v300;
  char *v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned __int8 *v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  unsigned int v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 *v323;
  uint64_t v324;
  int v325;
  unint64_t v326;
  unsigned int v327;
  char v328;
  unsigned int v329;
  unsigned int v330;
  char *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int8 *v338;
  uint64_t v339;
  int v340;
  unint64_t v341;
  unsigned int v342;
  char v343;
  unsigned int v344;
  unsigned int v345;
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned __int8 *v353;
  uint64_t v354;
  int v355;
  unint64_t v356;
  unsigned int v357;
  char v358;
  unsigned int v359;
  unsigned int v360;
  char *v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 *v368;
  uint64_t v369;
  int v370;
  unint64_t v371;
  unsigned int v372;
  char v373;
  unsigned int v374;
  unsigned int v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 *v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  unsigned int v387;
  char v388;
  unsigned int v389;
  unsigned int v390;
  char *v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned __int8 *v398;
  uint64_t v399;
  int v400;
  unint64_t v401;
  unsigned int v402;
  char v403;
  unsigned int v404;
  unsigned int v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned __int8 *v413;
  uint64_t v414;
  int v415;
  unint64_t v416;
  unsigned int v417;
  char v418;
  unsigned int v419;
  unsigned int v420;
  char *v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned __int8 *v428;
  uint64_t v429;
  int v430;
  unint64_t v431;
  unsigned int v432;
  char v433;
  unsigned int v434;
  unsigned int v435;
  char *v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  unsigned int v442;
  __int16 v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unsigned int v449;
  __int16 v450;
  unint64_t v451;
  char *v452;
  uint64_t v453;
  char *v454;
  char *v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  int v462;
  unint64_t v463;
  unsigned int v464;
  unsigned int v465;
  __int16 v466;
  unsigned int v467;
  unsigned int v468;
  char *v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  int v477;
  unint64_t v478;
  unsigned int v479;
  unsigned int v480;
  char *v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unsigned __int8 *v488;
  int v489;
  unint64_t v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  char *v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  int v501;
  unint64_t v502;
  unsigned int v503;
  char v504;
  unsigned int v505;
  char *v506;
  uint64_t v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  unsigned int v514;
  unint64_t v515;
  unsigned int v516;
  unsigned int v517;
  char *v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  unint64_t v530;
  char *v531;
  uint64_t v532;
  char *v533;
  char *v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned __int8 *v604;
  char *v605;
  int v606;
  int v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  char *v631;

  v3 = *(_QWORD *)(result + 48);
  v4 = *(_QWORD *)(result + 136);
  v6 = *(int *)(result + 12);
  v5 = *(int *)(result + 16);
  if (v3)
  {
    v7 = *(int *)(result + 32);
    v8 = (char *)(v3 + v6 + (int)v7 * (uint64_t)(int)v5);
    v607 = -1;
    if (!v4)
      return result;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v607 = 0;
    if (!v4)
      return result;
  }
  v9 = *(_DWORD *)(result + 4);
  v10 = *(_DWORD *)(result + 8);
  v12 = *(_QWORD *)(result + 88);
  v11 = *(unsigned __int8 **)(result + 96);
  v13 = (unint64_t)*(int *)(result + 28) >> 1;
  v14 = (char *)(*(_QWORD *)(result + 40) + 2 * (v6 + v13 * v5));
  v15 = *(int *)(result + 124);
  v16 = (char *)(v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v15);
  v17 = *(int *)(result + 56);
  v18 = *(int *)(result + 60);
  v19 = BYTE1(*(_DWORD *)result);
  if (v19 == 3)
  {
    v630 = *(int *)(result + 124);
    v603 = *(_QWORD *)(result + 96);
    v22 = RGB555_colorlookup(3, (unsigned __int16 *)v12, v11);
    v15 = v630;
    v12 = v22;
    v23 = (unsigned __int8 *)(v22 + 512);
    result = v603;
    if (v603)
      v11 = v23;
    else
      v11 = 0;
    if (v603)
      v24 = 16;
    else
      v24 = 0;
    v578 = v24;
    v20 = 16;
    v21 = v603 != 0;
    v25 = 16;
    v26 = 16;
    goto LABEL_26;
  }
  if (v19 != 1)
  {
    v26 = *(_DWORD *)(result + 64);
    v25 = *(_DWORD *)(result + 68);
    v20 = (unint64_t)*(int *)(result + 76) >> 1;
    if (v11)
    {
      v578 = *(int *)(result + 80);
      v21 = 1;
    }
    else
    {
      v578 = 0;
      v21 = 0;
    }
LABEL_26:
    v31 = v12 + 2 * v20 * v25;
    v607 &= 1u;
    v30 = 1;
    v605 = (char *)v12;
    v631 = (char *)v12;
    goto LABEL_27;
  }
  v20 = (unint64_t)*(int *)(result + 76) >> 1;
  if (v11)
  {
    v578 = *(int *)(result + 80);
    v11 += v17 + (int)v578 * (uint64_t)(int)v18;
    v21 = -1;
  }
  else
  {
    v578 = 0;
    v21 = 0;
  }
  v631 = (char *)(v12 + 2 * (v17 + v20 * v18));
  if (v20 == v13 && v14 - v631 >= 1)
  {
    if (v9 >= (uint64_t)((unint64_t)(v14 - v631) >> 1))
    {
      v14 += 2 * v9 - 2;
      v631 += 2 * v9 - 2;
      v16 += v9 - 1;
      v8 += v607 & (v9 - 1);
      v30 = -1;
      v20 = (unint64_t)*(int *)(result + 28) >> 1;
      v11 += v21 & (v9 - 1);
      goto LABEL_24;
    }
    v27 = v10 - 1;
    v28 = v13 * v27;
    v29 = &v631[2 * v13 * v27];
    if (v14 <= &v29[2 * v9 - 2])
    {
      v20 = -(uint64_t)v13;
      v16 += v15 * v27;
      v15 = -v15;
      v8 += v7 * v27;
      v7 = -v7;
      v607 &= 1u;
      v11 += v578 * v27;
      v578 = -v578;
      v21 &= 1u;
      v30 = 1;
      v631 = v29;
      v13 = -(uint64_t)v13;
      v14 += 2 * v28;
      goto LABEL_24;
    }
  }
  v607 &= 1u;
  v21 &= 1u;
  v30 = 1;
LABEL_24:
  v31 = 0;
  v605 = 0;
  v12 = -1;
  v25 = v578;
  v26 = v20;
LABEL_27:
  v32 = v30 * v9;
  v579 = v9;
  v580 = v31;
  v606 = v10;
  v619 = v21;
  if (v31)
  {
    v33 = (int)v18 % v25;
    v575 = v20;
    v34 = &v631[2 * v20 * v33];
    v35 = (int)v17 % v26;
    v12 = (unint64_t)&v34[2 * v26];
    v36 = &v11[v578 * v33 + v35];
    if ((v21 & 1) != 0)
      v11 = v36;
    v604 = v11;
    v605 = &v34[2 * v35];
    v631 = v605;
  }
  else
  {
    v604 = v11;
    v575 = v20 - v32;
    v578 -= v21 * v9;
  }
  v576 = v13 - v32;
  v577 = v15 - v32;
  v574 = v7 - v607 * v9;
  switch(a2)
  {
    case 0:
      v37 = v30;
      if (v607)
      {
        while (1)
        {
          v38 = v579;
          do
          {
            v39 = *v16;
            if (v39 < 0xF8)
            {
              if (v39 < 8)
                goto LABEL_40;
              result = PDAM(bswap32(*(unsigned __int16 *)v14) >> 16, *v8, ~(_BYTE)v39);
              *(_WORD *)v14 = bswap32(result) >> 16;
              v40 = BYTE3(result);
            }
            else
            {
              LOBYTE(v40) = 0;
              *(_WORD *)v14 = 0;
            }
            *v8 = v40;
LABEL_40:
            v16 += v37;
            v8 += v607;
            v14 += 2 * v37;
            --v38;
          }
          while (v38);
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          if (!--v606)
            return result;
        }
      }
LABEL_727:
      v441 = v9;
      while (1)
      {
        v442 = *v16;
        if (v442 > 0xF7)
          break;
        if (v442 >= 8)
        {
          result = PDM(bswap32(*(unsigned __int16 *)v14) >> 16, ~(_BYTE)v442);
          v443 = __rev16(result);
          goto LABEL_732;
        }
LABEL_733:
        v16 += v37;
        v14 += 2 * v37;
        if (!--v441)
        {
          v16 += v577;
          v14 += 2 * v576;
          if (!--v606)
            return result;
          goto LABEL_727;
        }
      }
      v443 = 0;
LABEL_732:
      *(_WORD *)v14 = v443;
      goto LABEL_733;
    case 1:
      if (v607)
      {
        v41 = v30;
        v42 = v607;
        if (v21)
        {
          v43 = v21;
          v44 = -(uint64_t)v26;
          v620 = -(uint64_t)(v575 * v25);
          v592 = -(v578 * v25);
          v45 = (char *)v604;
          while (1)
          {
            v46 = v580;
            v47 = v579;
            do
            {
              v48 = *v16;
              if (v48 < 0xF8)
              {
                if (v48 < 8)
                  goto LABEL_53;
                v50 = v12;
                result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v45, v48, bswap32(*(unsigned __int16 *)v14) >> 16, *v8, v48 ^ 0xFF);
                v42 = v607;
                v12 = v50;
                v46 = v580;
                *(_WORD *)v14 = bswap32(result) >> 16;
                v49 = BYTE3(result);
              }
              else
              {
                *(_WORD *)v14 = *(_WORD *)v631;
                LOBYTE(v49) = *v45;
              }
              *v8 = v49;
LABEL_53:
              v16 += v41;
              v8 += v42;
              v51 = &v631[2 * v41];
              if ((unint64_t)v51 >= v12)
                v52 = v44;
              else
                v52 = 0;
              v45 += v43 + v52;
              v631 = &v51[2 * v52];
              v14 += 2 * v41;
              --v47;
            }
            while (v47);
            if (v46)
            {
              v53 = &v605[2 * v575];
              v54 = v592;
              if ((unint64_t)v53 < v46)
                v54 = 0;
              v45 = (char *)&v604[v578 + v54];
              v55 = v620;
              if ((unint64_t)v53 < v46)
                v55 = 0;
              v12 += 2 * v55 + 2 * v575;
              v604 += v578 + v54;
              v605 = &v53[2 * v55];
              v631 = v605;
            }
            else
            {
              v631 += 2 * v575;
              v45 += v578;
            }
            v16 += v577;
            v14 += 2 * v576;
            v8 += v574;
            if (!--v606)
              return result;
          }
        }
        v525 = -(uint64_t)v26;
        v526 = -(uint64_t)(v575 * v25);
LABEL_859:
        v527 = v579;
        while (1)
        {
          v528 = *v16;
          if (v528 >= 0xF8)
            break;
          if (v528 >= 8)
          {
            v530 = v12;
            result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v631) >> 16, 255, v528, bswap32(*(unsigned __int16 *)v14) >> 16, *v8, v528 ^ 0xFF);
            v42 = v607;
            v12 = v530;
            *(_WORD *)v14 = bswap32(result) >> 16;
            v529 = BYTE3(result);
            goto LABEL_864;
          }
LABEL_865:
          v16 += v41;
          v8 += v42;
          v531 = &v631[2 * v41];
          if ((unint64_t)v531 >= v12)
            v532 = v525;
          else
            v532 = 0;
          v631 = &v531[2 * v532];
          v14 += 2 * v41;
          if (!--v527)
          {
            v16 += v577;
            v14 += 2 * v576;
            v8 += v574;
            v533 = v605;
            v534 = &v605[2 * v575];
            if ((unint64_t)v534 >= v580)
              v535 = v526;
            else
              v535 = 0;
            v536 = &v534[2 * v535];
            v537 = v12 + 2 * v535 + 2 * v575;
            if (v580)
            {
              v12 = v537;
              v533 = v536;
            }
            v605 = v533;
            if (!v580)
              v536 = &v631[2 * v575];
            v631 = v536;
            if (!--v606)
              return result;
            goto LABEL_859;
          }
        }
        *(_WORD *)v14 = *(_WORD *)v631;
        LOBYTE(v529) = -1;
LABEL_864:
        *v8 = v529;
        goto LABEL_865;
      }
      v444 = v30;
      v445 = -(uint64_t)v26;
      v446 = -(uint64_t)(v575 * v25);
      v447 = 2 * v30;
LABEL_737:
      v448 = v579;
      while (1)
      {
        v449 = *v16;
        if (v449 >= 0xF8)
          break;
        if (v449 >= 8)
        {
          v451 = v12;
          result = PDMplusDM(bswap32(*(unsigned __int16 *)v631) >> 16, v449, bswap32(*(unsigned __int16 *)v14) >> 16, v449 ^ 0xFF);
          v12 = v451;
          v450 = __rev16(result);
          goto LABEL_742;
        }
LABEL_743:
        v16 += v444;
        v452 = &v631[2 * v444];
        if ((unint64_t)v452 >= v12)
          v453 = v445;
        else
          v453 = 0;
        v631 = &v452[2 * v453];
        v14 += v447;
        if (!--v448)
        {
          v16 += v577;
          v14 += 2 * v576;
          v454 = v605;
          v455 = &v605[2 * v575];
          if ((unint64_t)v455 >= v580)
            v456 = v446;
          else
            v456 = 0;
          v457 = &v455[2 * v456];
          v458 = v12 + 2 * v456 + 2 * v575;
          if (v580)
          {
            v12 = v458;
            v454 = v457;
          }
          v605 = v454;
          if (!v580)
            v457 = &v631[2 * v575];
          v631 = v457;
          if (!--v606)
            return result;
          goto LABEL_737;
        }
      }
      v450 = *(_WORD *)v631;
LABEL_742:
      *(_WORD *)v14 = v450;
      goto LABEL_743;
    case 2:
      v56 = v30;
      if (v607)
      {
        v57 = v607;
        v58 = v21;
        v593 = -(uint64_t)(v575 * v25);
        v581 = -(v578 * v25);
        v59 = (char *)v604;
        v60 = -(uint64_t)v26;
        v621 = v607;
        while (1)
        {
          v61 = v579;
          v608 = v12;
          do
          {
            v62 = *v16;
            if (v62 < 0xF8)
            {
              if (v62 < 8)
                goto LABEL_79;
              result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v59, v62);
              v12 = v608;
              v57 = v621;
              v63 = BYTE3(result);
              if (BYTE3(result) < 8u)
                goto LABEL_79;
              v64 = bswap32(*(unsigned __int16 *)v14) >> 16;
              v65 = *v8;
              LODWORD(result) = (unsigned __int16)result;
LABEL_77:
              result = PDAplusDAM(result, v63, v64, v65, v63 ^ 0xFF);
              v12 = v608;
              v57 = v621;
              *(_WORD *)v14 = bswap32(result) >> 16;
              v63 = BYTE3(result);
              goto LABEL_78;
            }
            v63 = *v59;
            if (v63 < 0xF8)
            {
              if (v63 < 8)
                goto LABEL_79;
              LODWORD(result) = bswap32(*(unsigned __int16 *)v631) >> 16;
              v64 = bswap32(*(unsigned __int16 *)v14) >> 16;
              v65 = *v8;
              goto LABEL_77;
            }
            *(_WORD *)v14 = *(_WORD *)v631;
LABEL_78:
            *v8 = v63;
LABEL_79:
            v16 += v56;
            v8 += v57;
            v66 = &v631[2 * v56];
            if ((unint64_t)v66 >= v12)
              v67 = v60;
            else
              v67 = 0;
            v59 += v58 + v67;
            v631 = &v66[2 * v67];
            v14 += 2 * v56;
            --v61;
          }
          while (v61);
          if (v580)
          {
            v68 = &v605[2 * v575];
            v69 = v581;
            if ((unint64_t)v68 < v580)
              v69 = 0;
            v59 = (char *)&v604[v578 + v69];
            v70 = v593;
            if ((unint64_t)v68 < v580)
              v70 = 0;
            v12 += 2 * v70 + 2 * v575;
            v604 += v578 + v69;
            v605 = &v68[2 * v70];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v59 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          if (!--v606)
            return result;
        }
      }
      v459 = v21;
      v460 = -(uint64_t)v26;
      v627 = -(uint64_t)(v575 * v25);
      v615 = -(v578 * v25);
      v461 = (char *)v604;
LABEL_757:
      v462 = v579;
      v463 = v12;
      while (1)
      {
        v464 = *v16;
        if (v464 < 0xF8)
        {
          if (v464 >= 8)
          {
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v461, v464);
            v12 = v463;
            if (BYTE3(result) >= 8u)
            {
              v467 = bswap32(*(unsigned __int16 *)v14) >> 16;
              v468 = ~(_DWORD)result >> 24;
              goto LABEL_766;
            }
          }
        }
        else
        {
          v465 = *v461;
          if (v465 >= 0xF8)
          {
            v466 = *(_WORD *)v631;
            goto LABEL_767;
          }
          if (v465 >= 8)
          {
            LODWORD(result) = bswap32(*(unsigned __int16 *)v631) >> 16;
            v467 = bswap32(*(unsigned __int16 *)v14) >> 16;
            v468 = v465 ^ 0xFF;
LABEL_766:
            result = PDplusDM(result, v467, v468);
            v12 = v463;
            v466 = __rev16(result);
LABEL_767:
            *(_WORD *)v14 = v466;
          }
        }
        v16 += v56;
        v469 = &v631[2 * v56];
        if ((unint64_t)v469 >= v12)
          v470 = v460;
        else
          v470 = 0;
        v461 += v459 + v470;
        v631 = &v469[2 * v470];
        v14 += 2 * v56;
        if (!--v462)
        {
          if (v580)
          {
            v471 = &v605[2 * v575];
            v472 = v615;
            if ((unint64_t)v471 < v580)
              v472 = 0;
            v461 = (char *)&v604[v578 + v472];
            v473 = v627;
            if ((unint64_t)v471 < v580)
              v473 = 0;
            v12 += 2 * v473 + 2 * v575;
            v604 += v578 + v472;
            v605 = &v471[2 * v473];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v461 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          if (!--v606)
            return result;
          goto LABEL_757;
        }
      }
    case 3:
      v71 = v30;
      v582 = -(uint64_t)(v575 * v25);
      v553 = -(v578 * v25);
      v72 = 2 * v30;
      v73 = (char *)v604;
      v74 = -(uint64_t)v26;
      while (1)
      {
        v75 = v579;
        v76 = v12;
        do
        {
          v77 = *v16;
          if (v77 < 0xF8)
          {
            if (v77 < 8)
              goto LABEL_105;
            if (v619)
              v79 = *v73;
            else
              v79 = -1;
            result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v79, ((unsigned __int16)(*v8 * (_WORD)v77+ ((*v8 * v77) >> 8)+ 1) >> 8), bswap32(*(unsigned __int16 *)v14) >> 16, *v8, v77 ^ 0xFF);
          }
          else
          {
            if (v619)
              v78 = *v73;
            else
              v78 = -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v78, *v8);
          }
          *(_WORD *)v14 = bswap32(result) >> 16;
          *v8 = BYTE3(result);
          v12 = v76;
LABEL_105:
          v16 += v71;
          v8 += v607;
          v80 = &v631[2 * v71];
          if ((unint64_t)v80 >= v12)
            v81 = v74;
          else
            v81 = 0;
          v73 += v619 + v81;
          v631 = &v80[2 * v81];
          v14 += v72;
          --v75;
        }
        while (v75);
        if (v580)
        {
          v82 = &v605[2 * v575];
          v83 = v553;
          if ((unint64_t)v82 < v580)
            v83 = 0;
          v73 = (char *)&v604[v578 + v83];
          v84 = v582;
          if ((unint64_t)v82 < v580)
            v84 = 0;
          v12 += 2 * v84 + 2 * v575;
          v604 += v578 + v83;
          v605 = &v82[2 * v84];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v73 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 4:
      v85 = v30;
      v583 = -(uint64_t)(v575 * v25);
      v554 = -(v578 * v25);
      v86 = 2 * v30;
      v87 = (char *)v604;
      v88 = -(uint64_t)v26;
      while (1)
      {
        v89 = v579;
        v90 = v12;
        do
        {
          v91 = *v16;
          if (v91 < 0xF8)
          {
            if (v91 < 8)
              goto LABEL_131;
            if (v619)
              v93 = *v87;
            else
              v93 = -1;
            result = PDAMplusDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v93, ((unsigned __int16)((*v8 ^ 0xFF) * v91+ (((*v8 ^ 0xFF) * v91) >> 8)+ 1) >> 8), bswap32(*(unsigned __int16 *)v14) >> 16, *v8, v91 ^ 0xFF);
          }
          else
          {
            if (v619)
              v92 = *v87;
            else
              v92 = -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v92, ~*v8);
          }
          *(_WORD *)v14 = bswap32(result) >> 16;
          *v8 = BYTE3(result);
          v12 = v90;
LABEL_131:
          v16 += v85;
          v8 += v607;
          v94 = &v631[2 * v85];
          if ((unint64_t)v94 >= v12)
            v95 = v88;
          else
            v95 = 0;
          v87 += v619 + v95;
          v631 = &v94[2 * v95];
          v14 += v86;
          --v89;
        }
        while (v89);
        if (v580)
        {
          v96 = &v605[2 * v575];
          v97 = v554;
          if ((unint64_t)v96 < v580)
            v97 = 0;
          v87 = (char *)&v604[v578 + v97];
          v98 = v583;
          if ((unint64_t)v96 < v580)
            v98 = 0;
          v12 += 2 * v98 + 2 * v575;
          v604 += v578 + v97;
          v605 = &v96[2 * v98];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v87 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 5:
      v99 = v30;
      v100 = v607;
      v622 = v21;
      v584 = -(v578 * v25);
      v594 = -(uint64_t)(v575 * v25);
      v101 = 2 * v30;
      v102 = (char *)v604;
      v103 = -(uint64_t)v26;
      do
      {
        v104 = v579;
        v609 = v12;
        do
        {
          v105 = *v16;
          if (v105 >= 8)
          {
            v106 = *v8;
            v107 = v101;
            v108 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v102, v105);
            result = PDAMplusDAM((unsigned __int16)v108, SHIBYTE(v108), v106, bswap32(*(unsigned __int16 *)v14) >> 16, v106, HIBYTE(v108) ^ 0xFF);
            v101 = v107;
            v12 = v609;
            *(_WORD *)v14 = bswap32(result) >> 16;
            *v8 = BYTE3(result);
          }
          v16 += v99;
          v8 += v100;
          v109 = &v631[2 * v99];
          if ((unint64_t)v109 >= v12)
            v110 = v103;
          else
            v110 = 0;
          v102 += v622 + v110;
          v631 = &v109[2 * v110];
          v14 += v101;
          --v104;
        }
        while (v104);
        if (v580)
        {
          v111 = &v605[2 * v575];
          v112 = v584;
          if ((unint64_t)v111 < v580)
            v112 = 0;
          v102 = (char *)&v604[v578 + v112];
          v113 = v594;
          if ((unint64_t)v111 < v580)
            v113 = 0;
          v12 += 2 * v113 + 2 * v575;
          v604 += v578 + v112;
          v605 = &v111[2 * v113];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v102 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 6:
      v114 = v30;
      v115 = v607;
      v585 = -(uint64_t)(v575 * v25);
      v595 = v607;
      v555 = -(v578 * v25);
      v116 = 2 * v30;
      v117 = (char *)v604;
      v118 = -(uint64_t)v26;
      while (1)
      {
        v119 = v579;
        v610 = v12;
        do
        {
          v120 = *v16;
          if (v120 < 8)
            goto LABEL_175;
          v121 = *v8;
          if (v121 > 7)
          {
            if (v121 > 0xF7)
              goto LABEL_175;
            if (v619)
              v123 = *v117;
            else
              v123 = -1;
            result = PDAplusDAM(bswap32(*(unsigned __int16 *)v14) >> 16, v121, bswap32(*(unsigned __int16 *)v631) >> 16, v123, ((unsigned __int16)(~(_BYTE)v121 * (_WORD)v120+ ((~(_BYTE)v121 * v120) >> 8)+ 1) >> 8));
          }
          else
          {
            if (v619)
              v122 = *v117;
            else
              v122 = -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v122, v120);
          }
          *(_WORD *)v14 = bswap32(result) >> 16;
          *v8 = BYTE3(result);
          v12 = v610;
          v115 = v595;
LABEL_175:
          v16 += v114;
          v8 += v115;
          v124 = &v631[2 * v114];
          if ((unint64_t)v124 >= v12)
            v125 = v118;
          else
            v125 = 0;
          v117 += v619 + v125;
          v631 = &v124[2 * v125];
          v14 += v116;
          --v119;
        }
        while (v119);
        if (v580)
        {
          v126 = &v605[2 * v575];
          v127 = v555;
          if ((unint64_t)v126 < v580)
            v127 = 0;
          v117 = (char *)&v604[v578 + v127];
          v128 = v585;
          if ((unint64_t)v126 < v580)
            v128 = 0;
          v12 += 2 * v128 + 2 * v575;
          v604 += v578 + v127;
          v605 = &v126[2 * v128];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v117 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 7:
      v129 = v30;
      if (v607)
      {
        v623 = v21;
        v596 = -(uint64_t)(v575 * v25);
        v586 = -(v578 * v25);
        v130 = (char *)v604;
        v131 = -(uint64_t)v26;
        while (1)
        {
          v132 = v579;
          v133 = v12;
          do
          {
            v134 = *v16;
            if (v134 < 0xF8)
            {
              if (v134 < 8)
                goto LABEL_196;
              v135 = bswap32(*(unsigned __int16 *)v14) >> 16;
              result = PDAMplusDAM(v135, *v8, ((unsigned __int16)(*v130 * (_WORD)v134+ ((*v130 * v134) >> 8)+ 1) >> 8), v135, *v8, v134 ^ 0xFF);
            }
            else
            {
              result = PDAM(bswap32(*(unsigned __int16 *)v14) >> 16, *v8, *v130);
            }
            v12 = v133;
            *(_WORD *)v14 = bswap32(result) >> 16;
            *v8 = BYTE3(result);
LABEL_196:
            v16 += v129;
            v8 += v607;
            v136 = &v631[2 * v129];
            if ((unint64_t)v136 >= v12)
              v137 = v131;
            else
              v137 = 0;
            v130 += v623 + v137;
            v631 = &v136[2 * v137];
            v14 += 2 * v129;
            --v132;
          }
          while (v132);
          if (v580)
          {
            v138 = &v605[2 * v575];
            v139 = v586;
            if ((unint64_t)v138 < v580)
              v139 = 0;
            v130 = (char *)&v604[v578 + v139];
            v140 = v596;
            if ((unint64_t)v138 < v580)
              v140 = 0;
            v12 += 2 * v140 + 2 * v575;
            v604 += v578 + v139;
            v605 = &v138[2 * v140];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v130 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          if (!--v606)
            return result;
        }
      }
      v474 = v21;
      v475 = -(uint64_t)v26;
      v628 = -(uint64_t)(v575 * v25);
      v616 = -(v578 * v25);
      v476 = (char *)v604;
LABEL_782:
      v477 = v579;
      v478 = v12;
      while (1)
      {
        v479 = *v16;
        if (v479 == 248)
          break;
        if (v479 >= 8)
        {
          v480 = bswap32(*(unsigned __int16 *)v14) >> 16;
          result = PDMplusDM(v480, ((unsigned __int16)(*v476 * (_WORD)v479+ ((*v476 * v479) >> 8)+ 1) >> 8), v480, v479 ^ 0xFF);
          goto LABEL_787;
        }
LABEL_788:
        v16 += v129;
        v481 = &v631[2 * v129];
        if ((unint64_t)v481 >= v12)
          v482 = v475;
        else
          v482 = 0;
        v476 += v474 + v482;
        v631 = &v481[2 * v482];
        v14 += 2 * v129;
        if (!--v477)
        {
          if (v580)
          {
            v483 = &v605[2 * v575];
            v484 = v616;
            if ((unint64_t)v483 < v580)
              v484 = 0;
            v476 = (char *)&v604[v578 + v484];
            v485 = v628;
            if ((unint64_t)v483 < v580)
              v485 = 0;
            v12 += 2 * v485 + 2 * v575;
            v604 += v578 + v484;
            v605 = &v483[2 * v485];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v476 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          if (!--v606)
            return result;
          goto LABEL_782;
        }
      }
      result = PDM(bswap32(*(unsigned __int16 *)v14) >> 16, *v476);
LABEL_787:
      v12 = v478;
      *(_WORD *)v14 = __rev16(result);
      goto LABEL_788;
    case 8:
      v141 = v30;
      if (v607)
      {
        v624 = v21;
        v597 = -(uint64_t)(v575 * v25);
        v587 = -(v578 * v25);
        v142 = v604;
        v143 = -(uint64_t)v26;
        while (1)
        {
          v144 = v579;
          v145 = v12;
          do
          {
            v146 = *v16;
            if (v146 < 0xF8)
            {
              if (v146 < 8)
                goto LABEL_217;
              v147 = bswap32(*(unsigned __int16 *)v14) >> 16;
              v148 = *v8;
              v149 = ~((*v142 * v146 + ((*v142 * v146) >> 8) + 1) >> 8);
            }
            else
            {
              v147 = bswap32(*(unsigned __int16 *)v14) >> 16;
              v148 = *v8;
              v149 = ~*v142;
            }
            result = PDAM(v147, v148, v149);
            *(_WORD *)v14 = bswap32(result) >> 16;
            *v8 = BYTE3(result);
            v12 = v145;
LABEL_217:
            v16 += v141;
            v8 += v607;
            v150 = &v631[2 * v141];
            if ((unint64_t)v150 >= v12)
              v151 = v143;
            else
              v151 = 0;
            v142 += v624 + v151;
            v631 = &v150[2 * v151];
            v14 += 2 * v141;
            --v144;
          }
          while (v144);
          if (v580)
          {
            v152 = &v605[2 * v575];
            v153 = v587;
            if ((unint64_t)v152 < v580)
              v153 = 0;
            v142 = &v604[v578 + v153];
            v154 = v597;
            if ((unint64_t)v152 < v580)
              v154 = 0;
            v12 += 2 * v154 + 2 * v575;
            v604 += v578 + v153;
            v605 = &v152[2 * v154];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v142 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          if (!--v606)
            return result;
        }
      }
      v486 = v21;
      v487 = -(uint64_t)v26;
      v629 = -(uint64_t)(v575 * v25);
      v617 = -(v578 * v25);
      v488 = v604;
LABEL_802:
      v489 = v579;
      v490 = v12;
      while (1)
      {
        v491 = *v16;
        if (v491 >= 0xF8)
          break;
        if (v491 >= 8)
        {
          v492 = bswap32(*(unsigned __int16 *)v14) >> 16;
          v493 = (*v488 * v491 + ((*v488 * v491) >> 8) + 1) >> 8;
          goto LABEL_807;
        }
LABEL_808:
        v16 += v141;
        v494 = &v631[2 * v141];
        if ((unint64_t)v494 >= v12)
          v495 = v487;
        else
          v495 = 0;
        v488 += v486 + v495;
        v631 = &v494[2 * v495];
        v14 += 2 * v141;
        if (!--v489)
        {
          if (v580)
          {
            v496 = &v605[2 * v575];
            v497 = v617;
            if ((unint64_t)v496 < v580)
              v497 = 0;
            v488 = &v604[v578 + v497];
            v498 = v629;
            if ((unint64_t)v496 < v580)
              v498 = 0;
            v12 += 2 * v498 + 2 * v575;
            v604 += v578 + v497;
            v605 = &v496[2 * v498];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v488 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          if (!--v606)
            return result;
          goto LABEL_802;
        }
      }
      v492 = bswap32(*(unsigned __int16 *)v14) >> 16;
      LOBYTE(v493) = *v488;
LABEL_807:
      result = PDM(v492, ~(_BYTE)v493);
      *(_WORD *)v14 = __rev16(result);
      v12 = v490;
      goto LABEL_808;
    case 9:
      v155 = v30;
      v156 = v607;
      v157 = v21;
      v588 = -(uint64_t)(v575 * v25);
      v598 = v607;
      v556 = -(v578 * v25);
      v158 = 2 * v30;
      v159 = (char *)v604;
      result = -(uint64_t)v26;
      v625 = result;
      do
      {
        v160 = v579;
        v611 = v12;
        do
        {
          v161 = *v16;
          if (v161 >= 8)
          {
            v162 = *v8;
            v163 = v155;
            v164 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v159, *v16);
            v165 = PDAMplusDAM((unsigned __int16)v164, SBYTE3(v164), v162 ^ 0xFFu, bswap32(*(unsigned __int16 *)v14) >> 16, v162, (~(_BYTE)v161 + BYTE3(v164)));
            v155 = v163;
            v156 = v598;
            *(_WORD *)v14 = bswap32(v165) >> 16;
            v166 = HIBYTE(v165);
            v12 = v611;
            result = v625;
            *v8 = v166;
          }
          v16 += v155;
          v8 += v156;
          v167 = &v631[2 * v155];
          if ((unint64_t)v167 >= v12)
            v168 = result;
          else
            v168 = 0;
          v159 += v157 + v168;
          v631 = &v167[2 * v168];
          v14 += v158;
          --v160;
        }
        while (v160);
        if (v580)
        {
          v169 = &v605[2 * v575];
          v170 = v556;
          if ((unint64_t)v169 < v580)
            v170 = 0;
          v159 = (char *)&v604[v578 + v170];
          v171 = v588;
          if ((unint64_t)v169 < v580)
            v171 = 0;
          v12 += 2 * v171 + 2 * v575;
          v604 += v578 + v170;
          v605 = &v169[2 * v171];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v159 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 10:
      v172 = v30;
      v173 = v607;
      v174 = v619;
      v589 = -(v578 * v25);
      v599 = -(uint64_t)(v575 * v25);
      v175 = 2 * v30;
      v176 = (char *)v604;
      result = -(uint64_t)v26;
      v626 = result;
      do
      {
        v177 = v579;
        v612 = v12;
        do
        {
          v178 = *v16;
          if (v178 >= 8)
          {
            v179 = *v8;
            v180 = v172;
            v181 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, *v176, v178);
            v182 = PDAMplusDAM((unsigned __int16)v181, SHIBYTE(v181), v179 ^ 0xFFu, bswap32(*(unsigned __int16 *)v14) >> 16, v179, HIBYTE(v181) ^ 0xFF);
            v172 = v180;
            *(_WORD *)v14 = bswap32(v182) >> 16;
            v183 = HIBYTE(v182);
            v12 = v612;
            result = v626;
            *v8 = v183;
          }
          v16 += v172;
          v8 += v173;
          v184 = &v631[2 * v172];
          if ((unint64_t)v184 >= v12)
            v185 = result;
          else
            v185 = 0;
          v176 += v174 + v185;
          v631 = &v184[2 * v185];
          v14 += v175;
          --v177;
        }
        while (v177);
        if (v580)
        {
          v186 = &v605[2 * v575];
          v187 = v589;
          if ((unint64_t)v186 < v580)
            v187 = 0;
          v176 = (char *)&v604[v578 + v187];
          v188 = v599;
          if ((unint64_t)v186 < v580)
            v188 = 0;
          v12 += 2 * v188 + 2 * v575;
          v604 += v578 + v187;
          v605 = &v186[2 * v188];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v176 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        --v606;
      }
      while (v606);
      return result;
    case 11:
      v189 = v30;
      if (v607)
      {
        v190 = v607;
        v590 = -(uint64_t)(v575 * v25);
        v600 = v607;
        v557 = -(v578 * v25);
        v191 = (char *)v604;
        v192 = -(uint64_t)v26;
        do
        {
          v193 = v579;
          v613 = v12;
          do
          {
            v194 = *v16;
            if (v194 >= 8)
            {
              if (v619)
                v195 = *v191;
              else
                v195 = -1;
              v196 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v195, v194);
              result = PDAplusdDA(bswap32(*(unsigned __int16 *)v14) >> 16, *v8, v196, HIBYTE(v196));
              *(_WORD *)v14 = bswap32(result) >> 16;
              *v8 = BYTE3(result);
              v12 = v613;
              v190 = v600;
            }
            v16 += v189;
            v8 += v190;
            v197 = &v631[2 * v189];
            if ((unint64_t)v197 >= v12)
              v198 = v192;
            else
              v198 = 0;
            v191 += v619 + v198;
            v631 = &v197[2 * v198];
            v14 += 2 * v189;
            --v193;
          }
          while (v193);
          if (v580)
          {
            v199 = &v605[2 * v575];
            v200 = v557;
            if ((unint64_t)v199 < v580)
              v200 = 0;
            v191 = (char *)&v604[v578 + v200];
            v201 = v590;
            if ((unint64_t)v199 < v580)
              v201 = 0;
            v12 += 2 * v201 + 2 * v575;
            v604 += v578 + v200;
            v605 = &v199[2 * v201];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v191 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          --v606;
        }
        while (v606);
      }
      else
      {
        v499 = -(uint64_t)v26;
        v618 = -(uint64_t)(v575 * v25);
        v602 = -(v578 * v25);
        v500 = (char *)v604;
        do
        {
          v501 = v579;
          v502 = v12;
          do
          {
            v503 = *v16;
            if (v503 >= 8)
            {
              if (v619)
                v504 = *v500;
              else
                v504 = -1;
              v505 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v504, v503);
              result = PDplusdDA(bswap32(*(unsigned __int16 *)v14) >> 16, v505, HIBYTE(v505));
              *(_WORD *)v14 = __rev16(result);
              v12 = v502;
            }
            v16 += v189;
            v506 = &v631[2 * v189];
            if ((unint64_t)v506 >= v12)
              v507 = v499;
            else
              v507 = 0;
            v500 += v619 + v507;
            v631 = &v506[2 * v507];
            v14 += 2 * v189;
            --v501;
          }
          while (v501);
          if (v580)
          {
            v508 = &v605[2 * v575];
            v509 = v602;
            if ((unint64_t)v508 < v580)
              v509 = 0;
            v500 = (char *)&v604[v578 + v509];
            v510 = v618;
            if ((unint64_t)v508 < v580)
              v510 = 0;
            v12 += 2 * v510 + 2 * v575;
            v604 += v578 + v509;
            v605 = &v508[2 * v510];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v500 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          --v606;
        }
        while (v606);
      }
      return result;
    case 12:
      v202 = v30;
      if (v607)
      {
        v203 = v607;
        v591 = -(uint64_t)(v575 * v25);
        v601 = v607;
        v558 = -(v578 * v25);
        v204 = (char *)v604;
        v205 = -(uint64_t)v26;
        do
        {
          v206 = v579;
          v614 = v12;
          do
          {
            v207 = *v16;
            if (v207 >= 8)
            {
              if (v619)
                v208 = *v204;
              else
                v208 = -1;
              v209 = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v208, v207);
              result = PDApluslDA(bswap32(*(unsigned __int16 *)v14) >> 16, *v8, (unsigned __int16)v209, HIBYTE(v209));
              *(_WORD *)v14 = bswap32(result) >> 16;
              *v8 = BYTE3(result);
              v12 = v614;
              v203 = v601;
            }
            v16 += v202;
            v8 += v203;
            v210 = &v631[2 * v202];
            if ((unint64_t)v210 >= v12)
              v211 = v205;
            else
              v211 = 0;
            v204 += v619 + v211;
            v631 = &v210[2 * v211];
            v14 += 2 * v202;
            --v206;
          }
          while (v206);
          if (v580)
          {
            v212 = &v605[2 * v575];
            v213 = v558;
            if ((unint64_t)v212 < v580)
              v213 = 0;
            v204 = (char *)&v604[v578 + v213];
            v214 = v591;
            if ((unint64_t)v212 < v580)
              v214 = 0;
            v12 += 2 * v214 + 2 * v575;
            v604 += v578 + v213;
            v605 = &v212[2 * v214];
            v631 = v605;
          }
          else
          {
            v631 += 2 * v575;
            v204 += v578;
          }
          v16 += v577;
          v14 += 2 * v576;
          v8 += v574;
          --v606;
        }
        while (v606);
      }
      else
      {
        v511 = -(uint64_t)v26;
        v512 = -(uint64_t)(v575 * v25);
        do
        {
          v513 = v9;
          do
          {
            v514 = *v16;
            if (v514 >= 8)
            {
              v515 = v12;
              result = PDM(bswap32(*(unsigned __int16 *)v631) >> 16, v514);
              v12 = v515;
              v516 = bswap32(*(unsigned __int16 *)v14);
              v517 = (((HIWORD(v516) << 15) | HIWORD(v516)) & 0x1F07C1F)
                   + ((result | ((_DWORD)result << 15)) & 0x1F07C1F);
              *(_WORD *)v14 = __rev16((((30 * ((v517 >> 5) & 0x100401)) | (15 * ((v517 >> 5) & 0x100401)) | v517) >> 15) & 0x3E0 | ((30 * ((v517 >> 5) & 0x100401)) | (15 * ((v517 >> 5) & 0x100401)) | v517) & 0x7C1F);
            }
            v16 += v202;
            v518 = &v631[2 * v202];
            if ((unint64_t)v518 >= v12)
              v519 = v511;
            else
              v519 = 0;
            v631 = &v518[2 * v519];
            v14 += 2 * v202;
            --v513;
          }
          while (v513);
          v16 += v577;
          v14 += 2 * v576;
          v520 = v605;
          v521 = &v605[2 * v575];
          if ((unint64_t)v521 >= v580)
            v522 = v512;
          else
            v522 = 0;
          v523 = &v521[2 * v522];
          v524 = v12 + 2 * v522 + 2 * v575;
          if (v580)
          {
            v12 = v524;
            v520 = v523;
          }
          v605 = v520;
          if (!v580)
            v523 = &v631[2 * v575];
          v631 = v523;
          --v606;
        }
        while (v606);
      }
      return result;
    case 13:
      v215 = v30;
      v538 = -(v578 * v25);
      v559 = -(uint64_t)(v575 * v25);
      v216 = 2 * v30;
      v217 = v604;
      v218 = -(uint64_t)v26;
      while (1)
      {
        v219 = v579;
        v220 = v12;
        do
        {
          v221 = *v16;
          if (v221 >= 8)
          {
            v222 = v619 ? *v217 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v222, v221);
            v224 = BYTE3(result);
            v12 = v220;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v225 = *v8;
                if (v225 < 8)
                  goto LABEL_319;
              }
              else
              {
                v225 = 255;
              }
              result = PDAmultiplyPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v225, (unsigned __int16)result, v224, v223);
              if (v607)
              {
                v224 = BYTE3(result);
                v12 = v220;
LABEL_319:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v224;
                goto LABEL_321;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v220;
            }
          }
LABEL_321:
          v16 += v215;
          v8 += v607;
          v226 = &v631[2 * v215];
          if ((unint64_t)v226 >= v12)
            v227 = v218;
          else
            v227 = 0;
          v217 += v619 + v227;
          v631 = &v226[2 * v227];
          v14 += v216;
          --v219;
        }
        while (v219);
        if (v580)
        {
          v228 = &v605[2 * v575];
          v229 = v538;
          if ((unint64_t)v228 < v580)
            v229 = 0;
          v217 = &v604[v578 + v229];
          v230 = v559;
          if ((unint64_t)v228 < v580)
            v230 = 0;
          v12 += 2 * v230 + 2 * v575;
          v604 += v578 + v229;
          v605 = &v228[2 * v230];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v217 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 14:
      v231 = v30;
      v539 = -(v578 * v25);
      v560 = -(uint64_t)(v575 * v25);
      v232 = 2 * v30;
      v233 = v604;
      v234 = -(uint64_t)v26;
      while (1)
      {
        v235 = v579;
        v236 = v12;
        do
        {
          v237 = *v16;
          if (v237 >= 8)
          {
            v238 = v619 ? *v233 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v238, v237);
            v239 = BYTE3(result);
            v12 = v236;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v240 = *v8;
                if (v240 < 8)
                  goto LABEL_347;
              }
              else
              {
                v240 = 255;
              }
              result = PDAscreenPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v240, (unsigned __int16)result, v239);
              if (v607)
              {
                v239 = BYTE3(result);
                v12 = v236;
LABEL_347:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v239;
                goto LABEL_349;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v236;
            }
          }
LABEL_349:
          v16 += v231;
          v8 += v607;
          v241 = &v631[2 * v231];
          if ((unint64_t)v241 >= v12)
            v242 = v234;
          else
            v242 = 0;
          v233 += v619 + v242;
          v631 = &v241[2 * v242];
          v14 += v232;
          --v235;
        }
        while (v235);
        if (v580)
        {
          v243 = &v605[2 * v575];
          v244 = v539;
          if ((unint64_t)v243 < v580)
            v244 = 0;
          v233 = &v604[v578 + v244];
          v245 = v560;
          if ((unint64_t)v243 < v580)
            v245 = 0;
          v12 += 2 * v245 + 2 * v575;
          v604 += v578 + v244;
          v605 = &v243[2 * v245];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v233 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 15:
      v246 = v30;
      v540 = -(v578 * v25);
      v561 = -(uint64_t)(v575 * v25);
      v247 = 2 * v30;
      v248 = v604;
      v249 = -(uint64_t)v26;
      while (1)
      {
        v250 = v579;
        v251 = v12;
        do
        {
          v252 = *v16;
          if (v252 >= 8)
          {
            v253 = v619 ? *v248 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v253, v252);
            v254 = BYTE3(result);
            v12 = v251;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v255 = *v8;
                if (v255 < 8)
                  goto LABEL_375;
              }
              else
              {
                v255 = 255;
              }
              result = PDAoverlayPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v255, (unsigned __int16)result, v254);
              if (v607)
              {
                v254 = BYTE3(result);
                v12 = v251;
LABEL_375:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v254;
                goto LABEL_377;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v251;
            }
          }
LABEL_377:
          v16 += v246;
          v8 += v607;
          v256 = &v631[2 * v246];
          if ((unint64_t)v256 >= v12)
            v257 = v249;
          else
            v257 = 0;
          v248 += v619 + v257;
          v631 = &v256[2 * v257];
          v14 += v247;
          --v250;
        }
        while (v250);
        if (v580)
        {
          v258 = &v605[2 * v575];
          v259 = v540;
          if ((unint64_t)v258 < v580)
            v259 = 0;
          v248 = &v604[v578 + v259];
          v260 = v561;
          if ((unint64_t)v258 < v580)
            v260 = 0;
          v12 += 2 * v260 + 2 * v575;
          v604 += v578 + v259;
          v605 = &v258[2 * v260];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v248 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 16:
      v261 = v30;
      v541 = -(v578 * v25);
      v562 = -(uint64_t)(v575 * v25);
      v262 = 2 * v30;
      v263 = v604;
      v264 = -(uint64_t)v26;
      while (1)
      {
        v265 = v579;
        v266 = v12;
        do
        {
          v267 = *v16;
          if (v267 >= 8)
          {
            v268 = v619 ? *v263 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v268, v267);
            v269 = BYTE3(result);
            v12 = v266;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v270 = *v8;
                if (v270 < 8)
                  goto LABEL_403;
              }
              else
              {
                v270 = 255;
              }
              result = PDAdarkenPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v270, (unsigned __int16)result, v269);
              if (v607)
              {
                v269 = BYTE3(result);
                v12 = v266;
LABEL_403:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v269;
                goto LABEL_405;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v266;
            }
          }
LABEL_405:
          v16 += v261;
          v8 += v607;
          v271 = &v631[2 * v261];
          if ((unint64_t)v271 >= v12)
            v272 = v264;
          else
            v272 = 0;
          v263 += v619 + v272;
          v631 = &v271[2 * v272];
          v14 += v262;
          --v265;
        }
        while (v265);
        if (v580)
        {
          v273 = &v605[2 * v575];
          v274 = v541;
          if ((unint64_t)v273 < v580)
            v274 = 0;
          v263 = &v604[v578 + v274];
          v275 = v562;
          if ((unint64_t)v273 < v580)
            v275 = 0;
          v12 += 2 * v275 + 2 * v575;
          v604 += v578 + v274;
          v605 = &v273[2 * v275];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v263 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 17:
      v276 = v30;
      v542 = -(v578 * v25);
      v563 = -(uint64_t)(v575 * v25);
      v277 = 2 * v30;
      v278 = v604;
      v279 = -(uint64_t)v26;
      while (1)
      {
        v280 = v579;
        v281 = v12;
        do
        {
          v282 = *v16;
          if (v282 >= 8)
          {
            v283 = v619 ? *v278 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v283, v282);
            v284 = BYTE3(result);
            v12 = v281;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v285 = *v8;
                if (v285 < 8)
                  goto LABEL_431;
              }
              else
              {
                v285 = 255;
              }
              result = PDAlightenPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v285, (unsigned __int16)result, v284);
              if (v607)
              {
                v284 = BYTE3(result);
                v12 = v281;
LABEL_431:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v284;
                goto LABEL_433;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v281;
            }
          }
LABEL_433:
          v16 += v276;
          v8 += v607;
          v286 = &v631[2 * v276];
          if ((unint64_t)v286 >= v12)
            v287 = v279;
          else
            v287 = 0;
          v278 += v619 + v287;
          v631 = &v286[2 * v287];
          v14 += v277;
          --v280;
        }
        while (v280);
        if (v580)
        {
          v288 = &v605[2 * v575];
          v289 = v542;
          if ((unint64_t)v288 < v580)
            v289 = 0;
          v278 = &v604[v578 + v289];
          v290 = v563;
          if ((unint64_t)v288 < v580)
            v290 = 0;
          v12 += 2 * v290 + 2 * v575;
          v604 += v578 + v289;
          v605 = &v288[2 * v290];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v278 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 18:
      v291 = v30;
      v543 = -(v578 * v25);
      v564 = -(uint64_t)(v575 * v25);
      v292 = 2 * v30;
      v293 = v604;
      v294 = -(uint64_t)v26;
      while (1)
      {
        v295 = v579;
        v296 = v12;
        do
        {
          v297 = *v16;
          if (v297 >= 8)
          {
            v298 = v619 ? *v293 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v298, v297);
            v299 = BYTE3(result);
            v12 = v296;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v300 = *v8;
                if (v300 < 8)
                  goto LABEL_459;
              }
              else
              {
                v300 = 255;
              }
              result = PDAcolordodgePDA(bswap32(*(unsigned __int16 *)v14) >> 16, v300, (unsigned __int16)result, v299);
              if (v607)
              {
                v299 = BYTE3(result);
                v12 = v296;
LABEL_459:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v299;
                goto LABEL_461;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v296;
            }
          }
LABEL_461:
          v16 += v291;
          v8 += v607;
          v301 = &v631[2 * v291];
          if ((unint64_t)v301 >= v12)
            v302 = v294;
          else
            v302 = 0;
          v293 += v619 + v302;
          v631 = &v301[2 * v302];
          v14 += v292;
          --v295;
        }
        while (v295);
        if (v580)
        {
          v303 = &v605[2 * v575];
          v304 = v543;
          if ((unint64_t)v303 < v580)
            v304 = 0;
          v293 = &v604[v578 + v304];
          v305 = v564;
          if ((unint64_t)v303 < v580)
            v305 = 0;
          v12 += 2 * v305 + 2 * v575;
          v604 += v578 + v304;
          v605 = &v303[2 * v305];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v293 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 19:
      v306 = v30;
      v544 = -(v578 * v25);
      v565 = -(uint64_t)(v575 * v25);
      v307 = 2 * v30;
      v308 = v604;
      v309 = -(uint64_t)v26;
      while (1)
      {
        v310 = v579;
        v311 = v12;
        do
        {
          v312 = *v16;
          if (v312 >= 8)
          {
            v313 = v619 ? *v308 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v313, v312);
            v314 = BYTE3(result);
            v12 = v311;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v315 = *v8;
                if (v315 < 8)
                  goto LABEL_487;
              }
              else
              {
                v315 = 255;
              }
              result = PDAcolorburnPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v315, (unsigned __int16)result, v314);
              if (v607)
              {
                v314 = BYTE3(result);
                v12 = v311;
LABEL_487:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v314;
                goto LABEL_489;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v311;
            }
          }
LABEL_489:
          v16 += v306;
          v8 += v607;
          v316 = &v631[2 * v306];
          if ((unint64_t)v316 >= v12)
            v317 = v309;
          else
            v317 = 0;
          v308 += v619 + v317;
          v631 = &v316[2 * v317];
          v14 += v307;
          --v310;
        }
        while (v310);
        if (v580)
        {
          v318 = &v605[2 * v575];
          v319 = v544;
          if ((unint64_t)v318 < v580)
            v319 = 0;
          v308 = &v604[v578 + v319];
          v320 = v565;
          if ((unint64_t)v318 < v580)
            v320 = 0;
          v12 += 2 * v320 + 2 * v575;
          v604 += v578 + v319;
          v605 = &v318[2 * v320];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v308 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 20:
      v321 = v30;
      v545 = -(v578 * v25);
      v566 = -(uint64_t)(v575 * v25);
      v322 = 2 * v30;
      v323 = v604;
      v324 = -(uint64_t)v26;
      while (1)
      {
        v325 = v579;
        v326 = v12;
        do
        {
          v327 = *v16;
          if (v327 >= 8)
          {
            v328 = v619 ? *v323 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v328, v327);
            v329 = BYTE3(result);
            v12 = v326;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v330 = *v8;
                if (v330 < 8)
                  goto LABEL_515;
              }
              else
              {
                v330 = 255;
              }
              result = PDAsoftlightPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v330, (unsigned __int16)result, v329);
              if (v607)
              {
                v329 = BYTE3(result);
                v12 = v326;
LABEL_515:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v329;
                goto LABEL_517;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v326;
            }
          }
LABEL_517:
          v16 += v321;
          v8 += v607;
          v331 = &v631[2 * v321];
          if ((unint64_t)v331 >= v12)
            v332 = v324;
          else
            v332 = 0;
          v323 += v619 + v332;
          v631 = &v331[2 * v332];
          v14 += v322;
          --v325;
        }
        while (v325);
        if (v580)
        {
          v333 = &v605[2 * v575];
          v334 = v545;
          if ((unint64_t)v333 < v580)
            v334 = 0;
          v323 = &v604[v578 + v334];
          v335 = v566;
          if ((unint64_t)v333 < v580)
            v335 = 0;
          v12 += 2 * v335 + 2 * v575;
          v604 += v578 + v334;
          v605 = &v333[2 * v335];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v323 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 21:
      v336 = v30;
      v546 = -(v578 * v25);
      v567 = -(uint64_t)(v575 * v25);
      v337 = 2 * v30;
      v338 = v604;
      v339 = -(uint64_t)v26;
      while (1)
      {
        v340 = v579;
        v341 = v12;
        do
        {
          v342 = *v16;
          if (v342 >= 8)
          {
            v343 = v619 ? *v338 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v343, v342);
            v344 = BYTE3(result);
            v12 = v341;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v345 = *v8;
                if (v345 < 8)
                  goto LABEL_543;
              }
              else
              {
                v345 = 255;
              }
              result = PDAhardlightPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v345, (unsigned __int16)result, v344);
              if (v607)
              {
                v344 = BYTE3(result);
                v12 = v341;
LABEL_543:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v344;
                goto LABEL_545;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v341;
            }
          }
LABEL_545:
          v16 += v336;
          v8 += v607;
          v346 = &v631[2 * v336];
          if ((unint64_t)v346 >= v12)
            v347 = v339;
          else
            v347 = 0;
          v338 += v619 + v347;
          v631 = &v346[2 * v347];
          v14 += v337;
          --v340;
        }
        while (v340);
        if (v580)
        {
          v348 = &v605[2 * v575];
          v349 = v546;
          if ((unint64_t)v348 < v580)
            v349 = 0;
          v338 = &v604[v578 + v349];
          v350 = v567;
          if ((unint64_t)v348 < v580)
            v350 = 0;
          v12 += 2 * v350 + 2 * v575;
          v604 += v578 + v349;
          v605 = &v348[2 * v350];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v338 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 22:
      v351 = v30;
      v547 = -(v578 * v25);
      v568 = -(uint64_t)(v575 * v25);
      v352 = 2 * v30;
      v353 = v604;
      v354 = -(uint64_t)v26;
      while (1)
      {
        v355 = v579;
        v356 = v12;
        do
        {
          v357 = *v16;
          if (v357 >= 8)
          {
            v358 = v619 ? *v353 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v358, v357);
            v359 = BYTE3(result);
            v12 = v356;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v360 = *v8;
                if (v360 < 8)
                  goto LABEL_571;
              }
              else
              {
                v360 = 255;
              }
              result = PDAdifferencePDA(bswap32(*(unsigned __int16 *)v14) >> 16, v360, (unsigned __int16)result, v359);
              if (v607)
              {
                v359 = BYTE3(result);
                v12 = v356;
LABEL_571:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v359;
                goto LABEL_573;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v356;
            }
          }
LABEL_573:
          v16 += v351;
          v8 += v607;
          v361 = &v631[2 * v351];
          if ((unint64_t)v361 >= v12)
            v362 = v354;
          else
            v362 = 0;
          v353 += v619 + v362;
          v631 = &v361[2 * v362];
          v14 += v352;
          --v355;
        }
        while (v355);
        if (v580)
        {
          v363 = &v605[2 * v575];
          v364 = v547;
          if ((unint64_t)v363 < v580)
            v364 = 0;
          v353 = &v604[v578 + v364];
          v365 = v568;
          if ((unint64_t)v363 < v580)
            v365 = 0;
          v12 += 2 * v365 + 2 * v575;
          v604 += v578 + v364;
          v605 = &v363[2 * v365];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v353 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 23:
      v366 = v30;
      v548 = -(v578 * v25);
      v569 = -(uint64_t)(v575 * v25);
      v367 = 2 * v30;
      v368 = v604;
      v369 = -(uint64_t)v26;
      while (1)
      {
        v370 = v579;
        v371 = v12;
        do
        {
          v372 = *v16;
          if (v372 >= 8)
          {
            v373 = v619 ? *v368 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v373, v372);
            v374 = BYTE3(result);
            v12 = v371;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v375 = *v8;
                if (v375 < 8)
                  goto LABEL_599;
              }
              else
              {
                v375 = 255;
              }
              result = PDAexclusionPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v375, (unsigned __int16)result, v374);
              if (v607)
              {
                v374 = BYTE3(result);
                v12 = v371;
LABEL_599:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v374;
                goto LABEL_601;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v371;
            }
          }
LABEL_601:
          v16 += v366;
          v8 += v607;
          v376 = &v631[2 * v366];
          if ((unint64_t)v376 >= v12)
            v377 = v369;
          else
            v377 = 0;
          v368 += v619 + v377;
          v631 = &v376[2 * v377];
          v14 += v367;
          --v370;
        }
        while (v370);
        if (v580)
        {
          v378 = &v605[2 * v575];
          v379 = v548;
          if ((unint64_t)v378 < v580)
            v379 = 0;
          v368 = &v604[v578 + v379];
          v380 = v569;
          if ((unint64_t)v378 < v580)
            v380 = 0;
          v12 += 2 * v380 + 2 * v575;
          v604 += v578 + v379;
          v605 = &v378[2 * v380];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v368 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 24:
      v381 = v30;
      v549 = -(v578 * v25);
      v570 = -(uint64_t)(v575 * v25);
      v382 = 2 * v30;
      v383 = v604;
      v384 = -(uint64_t)v26;
      while (1)
      {
        v385 = v579;
        v386 = v12;
        do
        {
          v387 = *v16;
          if (v387 >= 8)
          {
            v388 = v619 ? *v383 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v388, v387);
            v389 = BYTE3(result);
            v12 = v386;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v390 = *v8;
                if (v390 < 8)
                  goto LABEL_627;
              }
              else
              {
                v390 = 255;
              }
              result = PDAhuePDA(bswap32(*(unsigned __int16 *)v14) >> 16, v390, (unsigned __int16)result, v389);
              if (v607)
              {
                v389 = BYTE3(result);
                v12 = v386;
LABEL_627:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v389;
                goto LABEL_629;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v386;
            }
          }
LABEL_629:
          v16 += v381;
          v8 += v607;
          v391 = &v631[2 * v381];
          if ((unint64_t)v391 >= v12)
            v392 = v384;
          else
            v392 = 0;
          v383 += v619 + v392;
          v631 = &v391[2 * v392];
          v14 += v382;
          --v385;
        }
        while (v385);
        if (v580)
        {
          v393 = &v605[2 * v575];
          v394 = v549;
          if ((unint64_t)v393 < v580)
            v394 = 0;
          v383 = &v604[v578 + v394];
          v395 = v570;
          if ((unint64_t)v393 < v580)
            v395 = 0;
          v12 += 2 * v395 + 2 * v575;
          v604 += v578 + v394;
          v605 = &v393[2 * v395];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v383 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 25:
      v396 = v30;
      v550 = -(v578 * v25);
      v571 = -(uint64_t)(v575 * v25);
      v397 = 2 * v30;
      v398 = v604;
      v399 = -(uint64_t)v26;
      while (1)
      {
        v400 = v579;
        v401 = v12;
        do
        {
          v402 = *v16;
          if (v402 >= 8)
          {
            v403 = v619 ? *v398 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v403, v402);
            v404 = BYTE3(result);
            v12 = v401;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v405 = *v8;
                if (v405 < 8)
                  goto LABEL_655;
              }
              else
              {
                v405 = 255;
              }
              result = PDAsaturationPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v405, (unsigned __int16)result, v404);
              if (v607)
              {
                v404 = BYTE3(result);
                v12 = v401;
LABEL_655:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v404;
                goto LABEL_657;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v401;
            }
          }
LABEL_657:
          v16 += v396;
          v8 += v607;
          v406 = &v631[2 * v396];
          if ((unint64_t)v406 >= v12)
            v407 = v399;
          else
            v407 = 0;
          v398 += v619 + v407;
          v631 = &v406[2 * v407];
          v14 += v397;
          --v400;
        }
        while (v400);
        if (v580)
        {
          v408 = &v605[2 * v575];
          v409 = v550;
          if ((unint64_t)v408 < v580)
            v409 = 0;
          v398 = &v604[v578 + v409];
          v410 = v571;
          if ((unint64_t)v408 < v580)
            v410 = 0;
          v12 += 2 * v410 + 2 * v575;
          v604 += v578 + v409;
          v605 = &v408[2 * v410];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v398 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 26:
      v411 = v30;
      v551 = -(v578 * v25);
      v572 = -(uint64_t)(v575 * v25);
      v412 = 2 * v30;
      v413 = v604;
      v414 = -(uint64_t)v26;
      while (1)
      {
        v415 = v579;
        v416 = v12;
        do
        {
          v417 = *v16;
          if (v417 >= 8)
          {
            v418 = v619 ? *v413 : -1;
            result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v418, v417);
            v419 = BYTE3(result);
            v12 = v416;
            if (BYTE3(result) >= 8u)
            {
              if (v607)
              {
                v420 = *v8;
                if (v420 < 8)
                  goto LABEL_683;
              }
              else
              {
                v420 = 255;
              }
              result = PDAluminosityPDA((unsigned __int16)result, v419, bswap32(*(unsigned __int16 *)v14) >> 16, v420);
              if (v607)
              {
                v419 = BYTE3(result);
                v12 = v416;
LABEL_683:
                *(_WORD *)v14 = bswap32(result) >> 16;
                *v8 = v419;
                goto LABEL_685;
              }
              *(_WORD *)v14 = bswap32(result) >> 16;
              v12 = v416;
            }
          }
LABEL_685:
          v16 += v411;
          v8 += v607;
          v421 = &v631[2 * v411];
          if ((unint64_t)v421 >= v12)
            v422 = v414;
          else
            v422 = 0;
          v413 += v619 + v422;
          v631 = &v421[2 * v422];
          v14 += v412;
          --v415;
        }
        while (v415);
        if (v580)
        {
          v423 = &v605[2 * v575];
          v424 = v551;
          if ((unint64_t)v423 < v580)
            v424 = 0;
          v413 = &v604[v578 + v424];
          v425 = v572;
          if ((unint64_t)v423 < v580)
            v425 = 0;
          v12 += 2 * v425 + 2 * v575;
          v604 += v578 + v424;
          v605 = &v423[2 * v425];
          v631 = v605;
        }
        else
        {
          v631 += 2 * v575;
          v413 += v578;
        }
        v16 += v577;
        v14 += 2 * v576;
        v8 += v574;
        if (!--v606)
          return result;
      }
    case 27:
      v426 = v30;
      v552 = -(v578 * v25);
      v573 = -(uint64_t)(v575 * v25);
      v427 = 2 * v30;
      v428 = v604;
      v429 = -(uint64_t)v26;
      break;
    default:
      return result;
  }
  do
  {
    v430 = v579;
    v431 = v12;
    do
    {
      v432 = *v16;
      if (v432 >= 8)
      {
        v433 = v619 ? *v428 : -1;
        result = PDAM(bswap32(*(unsigned __int16 *)v631) >> 16, v433, v432);
        v434 = BYTE3(result);
        v12 = v431;
        if (BYTE3(result) >= 8u)
        {
          if (v607)
          {
            v435 = *v8;
            if (v435 < 8)
              goto LABEL_711;
          }
          else
          {
            v435 = 255;
          }
          result = PDAluminosityPDA(bswap32(*(unsigned __int16 *)v14) >> 16, v435, (unsigned __int16)result, v434);
          if (v607)
          {
            v434 = BYTE3(result);
            v12 = v431;
LABEL_711:
            *(_WORD *)v14 = bswap32(result) >> 16;
            *v8 = v434;
            goto LABEL_713;
          }
          *(_WORD *)v14 = bswap32(result) >> 16;
          v12 = v431;
        }
      }
LABEL_713:
      v16 += v426;
      v8 += v607;
      v436 = &v631[2 * v426];
      if ((unint64_t)v436 >= v12)
        v437 = v429;
      else
        v437 = 0;
      v428 += v619 + v437;
      v631 = &v436[2 * v437];
      v14 += v427;
      --v430;
    }
    while (v430);
    if (v580)
    {
      v438 = &v605[2 * v575];
      v439 = v552;
      if ((unint64_t)v438 < v580)
        v439 = 0;
      v428 = &v604[v578 + v439];
      v440 = v573;
      if ((unint64_t)v438 < v580)
        v440 = 0;
      v12 += 2 * v440 + 2 * v575;
      v604 += v578 + v439;
      v605 = &v438[2 * v440];
      v631 = v605;
    }
    else
    {
      v631 += 2 * v575;
      v428 += v578;
    }
    v16 += v577;
    v14 += 2 * v576;
    v8 += v574;
    --v606;
  }
  while (v606);
  return result;
}

CFStringRef image_provider_copy_format_description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (os_variant_has_internal_content())
    return create_debug_string(a1, v2, v3, v4, v5, v6, v7, v8);
  else
    return 0;
}

CFStringRef image_provider_copy_debug_description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (os_variant_has_internal_content())
    return create_debug_string(a1, v2, v3, v4, v5, v6, v7, v8);
  else
    return 0;
}

uint64_t CGImageProviderGetTypeID()
{
  if (kCGImageProviderContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGImageProviderContentHeadroom_block_invoke_once, &__block_literal_global_69_3132);
  return CGImageProviderGetTypeID_image_provider_type_id;
}

CFTypeRef CGImageProviderRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t copy_with_options_copy_block_set(uint64_t a1)
{
  return CGImageProviderCopyImageBlockSetWithOptions(*(_QWORD *)(a1 + 144), 0);
}

void copy_with_options_release_info(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 144);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 160);
  if (v3)
    CFRelease(v3);
}

uint64_t copy_with_options_copy_block_set_with_options(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v5;
  void *v6;
  CFTypeID v7;
  int IsMutable;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 152))
  {
    v12 = *(_QWORD *)(a1 + 144);
    v13 = (uint64_t)a3;
    return CGImageProviderCopyImageBlockSetWithOptions(v12, v13);
  }
  if (!a3)
  {
    v13 = *(_QWORD *)(a1 + 160);
    v12 = *(_QWORD *)(a1 + 144);
    return CGImageProviderCopyImageBlockSetWithOptions(v12, v13);
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  if (!MutableCopy)
  {
    v12 = *(_QWORD *)(a1 + 144);
    v13 = 0;
    return CGImageProviderCopyImageBlockSetWithOptions(v12, v13);
  }
  v5 = MutableCopy;
  v6 = *(void **)(a1 + 160);
  v7 = CFGetTypeID(MutableCopy);
  if (v7 == CFDictionaryGetTypeID())
  {
    IsMutable = _CFDictionaryIsMutable();
    if (v6)
    {
      if (IsMutable)
      {
        v9 = CFGetTypeID(v5);
        if (v9 == CFDictionaryGetTypeID())
          CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)add_keys_and_values, v6);
      }
    }
  }
  v10 = CGImageProviderCopyImageBlockSetWithOptions(*(_QWORD *)(a1 + 144), (uint64_t)v5);
  CFRelease(v5);
  return v10;
}

void find_supported_options(void *key, void *value, uint64_t a3)
{
  uint64_t v6;
  const void *Property;
  uint64_t v8;

  if (*(_QWORD *)(a3 + 16))
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
      Property = 0;
      if (key)
      {
        v8 = *(_QWORD *)(v6 + 120);
        if (v8)
          Property = CGPropertiesGetProperty(v8, key);
      }
    }
    else
    {
      Property = 0;
    }
    if (Property == (const void *)*MEMORY[0x1E0C9AE50])
    {
      *(_BYTE *)a3 = 1;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), key, value);
    }
  }
}

uint64_t CGImageProviderCopyImageBlockSet(uint64_t a1)
{
  return CGImageProviderCopyImageBlockSetWithOptions(a1, 0);
}

uint64_t CGImageProviderCopyIOSurfaceSet(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && *(_DWORD *)(a1 + 64) == 3 && (v1 = *(uint64_t (**)(_QWORD))(a1 + 88)) != 0)
    return v1(*(_QWORD *)(a1 + 56));
  else
    return 0;
}

uint64_t CGImageProviderSetContentHeadroom(uint64_t result, float a2)
{
  uint64_t v2;
  float v3;
  _BYTE *v4;

  if (result)
  {
    v2 = *(_QWORD *)(result + 40);
    v3 = 1.0;
    if (v2)
    {
      v4 = *(_BYTE **)(v2 + 24);
      if (v4[16] || v4[17] || v4[13])
      {
        if (a2 >= 1.0)
          v3 = a2;
        if (a2 == 0.0)
          v3 = 0.0;
      }
    }
    *(float *)(result + 132) = v3;
  }
  return result;
}

float CGImageProviderGetContentHeadroom(uint64_t a1)
{
  float result;
  _QWORD *v2;
  _BYTE *v3;

  if (!a1)
    return 0.0;
  result = *(float *)(a1 + 132);
  if (result == 0.0)
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2)
    {
      v3 = (_BYTE *)v2[3];
      if (v3[16] || v3[17])
      {
        return CGColorSpaceGetHeadroomInfo(v2, 0);
      }
      else if (!v3[13])
      {
        return 1.0;
      }
    }
    else
    {
      return 1.0;
    }
  }
  return result;
}

uint64_t CPPDFStyleEqual(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result;
  void *v7;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    if ((a3 & 0x800) != 0 && *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
    if ((a3 & 0x400) != 0)
    {
      v7 = *(void **)(a1 + 64);
      if (v7 != *(void **)(a2 + 64))
      {
        result = objc_msgSend(v7, "isSameFontAs:");
        if (!(_DWORD)result)
          return result;
      }
    }
    if ((a3 & 1) != 0)
    {
      result = CGColorEqualToColor(*(CGColorRef *)a1, *(CGColorRef *)a2);
      if (!(_DWORD)result)
        return result;
    }
    if ((a3 & 2) != 0 && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
    if ((a3 & 4) == 0
      || (result = CGColorEqualToColor(*(CGColorRef *)(a1 + 16), *(CGColorRef *)(a2 + 16)), (_DWORD)result))
    {
      if ((a3 & 8) != 0 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24)
        || (a3 & 0x10) != 0 && *(double *)(a1 + 32) != *(double *)(a2 + 32)
        || (a3 & 0x20) != 0 && *(double *)(a1 + 40) != *(double *)(a2 + 40)
        || (a3 & 0x200) != 0 && *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
        || (a3 & 0x40) != 0 && *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
        || (a3 & 0x100) != 0 && *(double *)(a1 + 56) != *(double *)(a2 + 56)
        || (a3 & 0x1000) != 0 && *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80)
        || (a3 & 0x2000) != 0 && *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      {
        return 0;
      }
      if ((a3 & 0x4000) == 0)
        return 1;
      result = CGColorEqualToColor(*(CGColorRef *)(a1 + 96), *(CGColorRef *)(a2 + 96));
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t markSplitByGuide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(int *)(a2 + 8) >= 2
    && (isSplitByStripArray(a1, a2, *(void **)a4, 1)
     || isSplitByStripArray(a1, a2, *(void **)(a4 + 8), 0)
     || isSplitByStripArray(a1, a2, *(void **)(a4 + 16), 0)
     || (*(_BYTE *)(a1 + 12) & 0xA) != 0
     || (*(_BYTE *)(a2 + 12) & 5) != 0))
  {
    *(_QWORD *)(a4 + 24) = a2;
  }
  return 1;
}

uint64_t hasConsistentSpacing(uint64_t a1, unsigned int *a2, void *a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  void *v17;

  v4 = *a4 | a2[3];
  *a4 = v4;
  v5 = v4 & 0x45;
  v6 = v4 & 0x8A;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(a1 + 12) & 0xAA) == 0 && (a2[3] & 0x55) == 0)
    return 1;
  v10 = *(_DWORD *)(a1 + 4);
  if (!v10)
    return 1;
  if (!a2[1])
    return 1;
  v11 = objc_msgSend(a3, "charAtIndex:", (v10 + *(_DWORD *)a1 - 1));
  v12 = objc_msgSend(a3, "charAtIndex:", *a2);
  v13 = *(_QWORD *)(v11 + 160);
  v14 = *(_QWORD *)(v12 + 160);
  if (v13 == v14)
    return 1;
  if (v13)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    return 0;
  v17 = *(void **)(v13 + 64);
  if (v17 == *(void **)(v14 + 64))
    return 1;
  result = objc_msgSend(v17, "isSameFontAs:");
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL isSplitByStripArray(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  double v11;
  double v12;
  int v14;
  int v15;
  CGSize size;
  CGPoint origin;
  CGPoint v18;
  CGSize v19;

  v8 = objc_msgSend(a3, "count");
  if (v8)
  {
    v9 = 0;
    v10 = 1;
    size = CGRectNull.size;
    origin = CGRectNull.origin;
    while (1)
    {
      v18 = origin;
      v19 = size;
      objc_msgSend((id)objc_msgSend(a3, "objectAtIndex:", v9, size, origin), "getValue:", &v18);
      if (v18.x + v19.width <= *(double *)(a2 + 16) && *(double *)(a1 + 16) + *(double *)(a1 + 32) <= v18.x)
      {
        v11 = *(double *)(a1 + 24);
        v12 = *(double *)(a2 + 24);
        if (v18.y <= fmax(v11 + *(double *)(a1 + 40), v12 + *(double *)(a2 + 40))
          && v18.y + v19.height >= fmin(v11, v12))
        {
          break;
        }
      }
      v10 = ++v9 < v8;
      if (v8 == v9)
        return 0;
    }
    if (a4)
      v14 = 128;
    else
      v14 = 32;
    if (a4)
      v15 = 64;
    else
      v15 = 16;
    *(_DWORD *)(a1 + 12) |= v14;
    *(_DWORD *)(a2 + 12) |= v15;
  }
  else
  {
    return 0;
  }
  return v10;
}

BOOL isSplitByGuide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t *v7;
  _BOOL4 v8;

  if (*(int *)(a2 + 8) < 2)
    return 0;
  v7 = (uint64_t *)(a3 + 24);
  result = canSplitWithoutNarrowColumn(a1, a2, (_QWORD *)(a3 + 24));
  if (result)
  {
    if (isSplitByStripArray(a1, a2, *(void **)a3, 1)
      || isSplitByStripArray(a1, a2, *(void **)(a3 + 8), 0)
      || (v8 = isSplitByStripArray(a1, a2, *(void **)(a3 + 16), 0), result = 0, v8))
    {
      *v7 = a2;
      return 1;
    }
  }
  return result;
}

BOOL canSplitWithoutNarrowColumn(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v3;
  int v5;

  v3 = *(_DWORD *)(a1 + 12);
  if ((v3 & 5) != 0 || *a3 == a1)
    return 0;
  v5 = (v3 >> 3) & 1;
  if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a2 + 8))
    v5 = 1;
  return (v5 | ((*(_DWORD *)(a2 + 12) & 4u) >> 2)) == 1 && (*(_DWORD *)(a2 + 12) & 0xA) == 0 && a3[1] != a2;
}

BOOL isAlignedWithGuide(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 12) & 0xA) == 0 && (*(_BYTE *)(a2 + 12) & 5) == 0)
    return 0;
  result = canSplitWithoutNarrowColumn(a1, a2, a3);
  if (result)
  {
    *a3 = a2;
    return 1;
  }
  return result;
}

uint64_t accumulateRightGuideIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  double *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  double *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (!a2)
LABEL_19:
    __assert_rtn("accumulateRightGuideIntersections", "CPGuideFinder.m", 178, "wordInfo1");
  v8 = a2;
  v9 = (uint64_t *)(a6 + 8);
  v10 = a1 + 1;
  while (1)
  {
    v11 = *((_DWORD *)v8 + 1);
    if (!v11)
      return 1;
    v12 = a3;
    v13 = a5;
    v14 = objc_msgSend(a4, "charAtIndex:", *(unsigned int *)v8);
    v15 = objc_msgSend(a4, "charAtIndex:", v11 + *(_DWORD *)v8 - 1);
    v16 = *(double *)(v14 + 80);
    v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    v18 = *(double *)(a6 + 32);
    if (v17 <= v18)
    {
      v19 = (uint64_t *)a6;
      if (v17 < *(double *)(a6 + 24))
        goto LABEL_17;
    }
    else
    {
      v19 = v9;
      if (v16 > v18)
        goto LABEL_17;
    }
    v20 = *v19;
    *v19 += 56;
    if (v20)
    {
      *(double *)v20 = v16;
      *(double *)(v20 + 8) = v17;
      v21 = v8[3];
      v22 = v21 + v8[5];
      *(double *)(v20 + 16) = v21;
      *(double *)(v20 + 24) = v22;
      *(_DWORD *)(v20 + 32) = 0;
      v23 = *(_QWORD *)(v15 + 160);
      *(_QWORD *)(v20 + 40) = (char *)v8 + 12;
      *(_QWORD *)(v20 + 48) = v23;
      v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        v25 = 3;
        if (!v12)
        {
LABEL_16:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_17;
        }
      }
      else
      {
        v25 = 2;
        if (!v12)
          goto LABEL_16;
      }
      v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_17:
    if (++v10 != *(_DWORD *)(a6 + 16))
      return 1;
    a5 = 0;
    a3 = 0;
    a4 = v13;
    v8 = v12;
    if (!v12)
      goto LABEL_19;
  }
}

uint64_t accumulateLeftGuideIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  double *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  double *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (!a2)
LABEL_19:
    __assert_rtn("accumulateLeftGuideIntersections", "CPGuideFinder.m", 129, "wordInfo1");
  v8 = a2;
  v9 = (uint64_t *)(a6 + 8);
  v10 = a1 + 1;
  while (1)
  {
    v11 = *((_DWORD *)v8 + 1);
    if (!v11)
      return 1;
    v12 = a3;
    v13 = a5;
    v14 = objc_msgSend(a4, "charAtIndex:", *(unsigned int *)v8);
    v15 = objc_msgSend(a4, "charAtIndex:", v11 + *(_DWORD *)v8 - 1);
    v16 = *(double *)(v14 + 80);
    v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    v18 = *(double *)(a6 + 40);
    if (v16 >= v18)
    {
      v19 = (uint64_t *)a6;
      if (v16 > *(double *)(a6 + 48))
        goto LABEL_17;
    }
    else
    {
      v19 = v9;
      if (v17 < v18)
        goto LABEL_17;
    }
    v20 = *v19;
    *v19 += 56;
    if (v20)
    {
      *(double *)v20 = v16;
      *(double *)(v20 + 8) = v17;
      v21 = v8[3];
      v22 = v21 + v8[5];
      *(double *)(v20 + 16) = v21;
      *(double *)(v20 + 24) = v22;
      *(_DWORD *)(v20 + 32) = 0;
      v23 = *(_QWORD *)(v14 + 160);
      *(_QWORD *)(v20 + 40) = (char *)v8 + 12;
      *(_QWORD *)(v20 + 48) = v23;
      v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        v25 = 3;
        if (!v12)
        {
LABEL_16:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_17;
        }
      }
      else
      {
        v25 = 2;
        if (!v12)
          goto LABEL_16;
      }
      v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_17:
    if (++v10 != *(_DWORD *)(a6 + 16))
      return 1;
    a5 = 0;
    a3 = 0;
    a4 = v13;
    v8 = v12;
    if (!v12)
      goto LABEL_19;
  }
}

uint64_t accumulateGutterIntersections(int a1, double *a2, double *a3, void *a4, void *a5, uint64_t a6)
{
  double *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  double *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  int v25;
  int v26;

  if (!a2)
LABEL_23:
    __assert_rtn("accumulateGutterIntersections", "CPGuideFinder.m", 64, "wordInfo1");
  v8 = a2;
  v9 = (uint64_t *)(a6 + 8);
  v10 = a1 + 1;
  while (1)
  {
    v11 = *((_DWORD *)v8 + 1);
    if (!v11)
      return 1;
    v12 = a3;
    v13 = a5;
    v14 = objc_msgSend(a4, "charAtIndex:", *(unsigned int *)v8);
    v15 = objc_msgSend(a4, "charAtIndex:", v11 + *(_DWORD *)v8 - 1);
    v16 = *(double *)(v14 + 80);
    v17 = *(double *)(v15 + 80) + *(double *)(v15 + 144);
    v18 = *(double *)(a6 + 32);
    if (v16 >= v18)
    {
      if (v16 < *(double *)(a6 + 40))
      {
        v19 = v9;
        goto LABEL_13;
      }
      v19 = (uint64_t *)a6;
      if (v16 <= *(double *)(a6 + 48))
        goto LABEL_13;
    }
    else if (v17 >= *(double *)(a6 + 24))
    {
      if (v17 <= v18)
        v19 = (uint64_t *)a6;
      else
        v19 = v9;
      v14 = v15;
LABEL_13:
      v20 = *v19;
      *v19 += 56;
      v21 = *(_QWORD *)(v14 + 160);
      *(double *)v20 = v16;
      *(double *)(v20 + 8) = v17;
      v22 = v8[3];
      v23 = v22 + v8[5];
      *(double *)(v20 + 16) = v22;
      *(double *)(v20 + 24) = v23;
      *(_DWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 40) = (char *)v8 + 12;
      *(_QWORD *)(v20 + 48) = v21;
      v24 = *((_DWORD *)v8 + 2);
      if (v24 == -1 || v24 >= 2)
      {
        *(_DWORD *)(v20 + 32) = 1;
        v25 = 3;
        if (!v12)
        {
LABEL_20:
          *(_DWORD *)(v20 + 32) = v25;
          goto LABEL_21;
        }
      }
      else
      {
        v25 = 2;
        if (!v12)
          goto LABEL_20;
      }
      v26 = *((_DWORD *)v12 + 2);
      if (v26 != -1 && v26 < 2)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_21:
    if (++v10 != *(_DWORD *)(a6 + 16))
      return 1;
    a5 = 0;
    a3 = 0;
    a4 = v13;
    v8 = v12;
    if (!v12)
      goto LABEL_23;
  }
}

uint64_t compareWordExtentBottomAscendingLeftDescending(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  if (*a1 <= *a2)
    return *a1 < *a2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t accumulateWordAlignmentData(unsigned int a1, unsigned int *a2, void *a3, _QWORD *a4)
{
  unsigned int v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  if (v4)
  {
    v9 = objc_msgSend(a3, "charAtIndex:", *a2);
    v10 = objc_msgSend(a3, "charAtIndex:", v4 + *a2 - 1);
    v11 = a4[1];
    *(_QWORD *)(*a4 + 8 * a1) = *(_QWORD *)(v9 + 80);
    *(double *)(v11 + 8 * a1) = *(double *)(v10 + 80) + *(double *)(v10 + 144);
    v12 = a4[3];
    *(_QWORD *)(a4[2] + 8 * a1) = *(_QWORD *)(*(_QWORD *)(v9 + 160) + 72);
    *(_QWORD *)(v12 + 8 * a1) = *(_QWORD *)(*(_QWORD *)(v10 + 160) + 72);
  }
  return 1;
}

CGDataProviderRef CGDataProviderCreateWithSwappedProvider(CGDataProviderRef provider, int a2)
{
  CGDataProvider *v3;
  _QWORD *v4;
  CGDataProviderSequentialCallbacks callbacks;

  if (provider)
  {
    v3 = provider;
    provider = 0;
    switch(a2)
    {
      case 1:
        provider = CGDataProviderRetain(v3);
        break;
      case 2:
      case 4:
      case 8:
        *(_QWORD *)&callbacks.version = 0;
        v4 = malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
        *(_DWORD *)v4 = a2;
        CGDataProviderRetain(v3);
        v4[1] = v3;
        v4[2] = 0;
        callbacks.getBytes = (CGDataProviderGetBytesCallback)get_swapped_bytes;
        callbacks.skipForward = (CGDataProviderSkipForwardCallback)skip_swapped_bytes;
        callbacks.rewind = (CGDataProviderRewindCallback)rewind_swapped_bytes;
        callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)release_swap_info;
        provider = CGDataProviderCreateSequential(v4, &callbacks);
        break;
      default:
        return provider;
    }
  }
  return provider;
}

unint64_t get_swapped_bytes(int *a1, int8x16_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  unint64_t result;
  uint64_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int v17;
  unint64_t i;
  unint64_t j;

  v11 = (uint64_t *)*((_QWORD *)a1 + 2);
  if (!v11)
  {
    v11 = CGAccessSessionCreate(*((CGDataProvider **)a1 + 1));
    *((_QWORD *)a1 + 2) = v11;
  }
  result = CGAccessSessionGetBytes(v11, a2->i8, a3, a4, a5, a6, a7, a8);
  if (result < 8)
  {
    v14 = result;
  }
  else
  {
    v13 = *a1;
    v14 = (result + v13 - 1) & -v13;
    v15.i64[1] = 0xF0E0D0C0B0A0908;
    v16 = veorq_s8(vdupq_n_s8((int)v13 - 1), (int8x16_t)xmmword_185004BD0);
    if (v14 >= 0x20)
    {
      do
      {
        v15 = vqtbl1q_s8(a2[1], v16);
        *a2 = vqtbl1q_s8(*a2, v16);
        a2[1] = v15;
        a2 += 2;
        v14 -= 32;
      }
      while (v14 > 0x1F);
    }
    if (v14 >= 8)
    {
      do
      {
        v15.i64[0] = a2->i64[0];
        *(int8x8_t *)a2->i8 = vqtbl1_s8(v15, *(int8x8_t *)v16.i8);
        a2 = (int8x16_t *)((char *)a2 + 8);
        v14 -= 8;
      }
      while (v14 > 7);
    }
  }
  v17 = *a1;
  if (*a1 == 2)
  {
    if (v14)
    {
      for (i = 0; i < v14; i += 2)
        a2->i16[i / 2] = bswap32(a2->u16[i / 2]) >> 16;
    }
  }
  else if (v17 == 4)
  {
    if (v14)
    {
      for (j = 0; j < v14; j += 4)
        a2->i32[j / 4] = bswap32(a2->u32[j / 4]);
    }
  }
  else
  {
    if (v17 != 8)
      abort();
    if (v14)
      a2->i64[0] = bswap64(a2->i64[0]);
  }
  return result;
}

uint64_t skip_swapped_bytes(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a1 + 16);
  if (!v4)
  {
    v4 = CGAccessSessionCreate(*(CGDataProvider **)(a1 + 8));
    *(_QWORD *)(a1 + 16) = v4;
  }
  return CGAccessSessionSkipForward((uint64_t)v4, a2);
}

void rewind_swapped_bytes(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void release_swap_info(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    CGAccessSessionRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 8));
  free((void *)a1);
}

uint64_t CPOrdinalLexerTestNone()
{
  return 1;
}

BOOL CPOrdinalLexerTestDecimal(int a1)
{
  return (a1 - 48) < 0xA;
}

BOOL CPOrdinalLexerTestLeadingZero(int a1)
{
  return a1 == 48;
}

uint64_t CPOrdinalLexerTestLowerRoman(int a1)
{
  return ((a1 - 99) < 0x16) & (0x280643u >> (a1 - 99));
}

uint64_t CPOrdinalLexerTestUpperRoman(int a1)
{
  return ((a1 - 67) < 0x16) & (0x280643u >> (a1 - 67));
}

BOOL CPOrdinalLexerTestLowerLatin(int a1)
{
  return (a1 - 97) < 0x1A;
}

BOOL CPOrdinalLexerTestUpperLatin(int a1)
{
  return (a1 - 65) < 0x1A;
}

BOOL CPOrdinalLexerTestLowerGreek(int a1)
{
  return (a1 - 945) < 0x19;
}

BOOL CPOrdinalLexerTestUpperGreek(int a1)
{
  return (a1 - 913) < 0x19;
}

uint64_t CPOrdinalStateDoneI()
{
  return 0;
}

BOOL CPOrdinalStateII(unsigned __int16 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = CPOrdinalStateDoneI;
  }
  return v1 == 105;
}

uint64_t CPOrdinalStateI(unsigned __int16 *a1)
{
  int v1;
  void *v2;
  int v3;

  v1 = *a1;
  switch(v1)
  {
    case 'i':
      v2 = CPOrdinalStateII;
      v3 = 1;
      goto LABEL_7;
    case 'x':
      v2 = CPOrdinalStateDoneI;
      v3 = 8;
      goto LABEL_7;
    case 'v':
      v2 = CPOrdinalStateDoneI;
      v3 = 3;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((_QWORD *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

BOOL CPOrdinalStateVI(unsigned __int16 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = CPOrdinalStateII;
  }
  return v1 == 105;
}

BOOL CPOrdinalStateV(unsigned __int16 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 105)
  {
    ++*((_DWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = CPOrdinalStateVI;
  }
  return v1 == 105;
}

uint64_t CPOrdinalStateDoneX(unsigned __int16 *a1)
{
  int v1;
  void *v2;
  int v3;

  v1 = *a1;
  if (v1 == 105)
  {
    v2 = CPOrdinalStateI;
    v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 118)
  {
    v2 = CPOrdinalStateV;
    v3 = 5;
LABEL_5:
    *((_DWORD *)a1 + 1) += v3;
    *((_QWORD *)a1 + 1) = v2;
    return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateXX(unsigned __int16 *a1)
{
  int v1;
  void *v2;
  int v3;

  v1 = *a1;
  switch(v1)
  {
    case 'i':
      v2 = CPOrdinalStateI;
      v3 = 1;
      goto LABEL_7;
    case 'x':
      v2 = CPOrdinalStateDoneX;
      v3 = 10;
      goto LABEL_7;
    case 'v':
      v2 = CPOrdinalStateV;
      v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((_QWORD *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateX(unsigned __int16 *a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  int v4;

  v1 = 0;
  v2 = *a1;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      v3 = CPOrdinalStateDoneX;
      v4 = 80;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      v3 = CPOrdinalStateI;
      v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        v3 = CPOrdinalStateDoneX;
        v4 = 30;
        goto LABEL_12;
      case 'x':
        v3 = CPOrdinalStateXX;
        v4 = 10;
        goto LABEL_12;
      case 'v':
        v3 = CPOrdinalStateV;
        v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((_QWORD *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateLX(unsigned __int16 *a1)
{
  int v1;
  void *v2;
  int v3;

  v1 = *a1;
  switch(v1)
  {
    case 'i':
      v2 = CPOrdinalStateI;
      v3 = 1;
      goto LABEL_7;
    case 'x':
      v2 = CPOrdinalStateXX;
      v3 = 10;
      goto LABEL_7;
    case 'v':
      v2 = CPOrdinalStateV;
      v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((_QWORD *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateL(unsigned __int16 *a1)
{
  int v1;
  void *v2;
  int v3;

  v1 = *a1;
  switch(v1)
  {
    case 'i':
      v2 = CPOrdinalStateI;
      v3 = 1;
      goto LABEL_7;
    case 'x':
      v2 = CPOrdinalStateLX;
      v3 = 10;
      goto LABEL_7;
    case 'v':
      v2 = CPOrdinalStateV;
      v3 = 5;
LABEL_7:
      *((_DWORD *)a1 + 1) += v3;
      *((_QWORD *)a1 + 1) = v2;
      return 1;
  }
  return 0;
}

uint64_t CPOrdinalStateDoneC(unsigned __int16 *a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  int v4;

  v1 = 0;
  v2 = *a1;
  if (v2 > 0x75)
  {
    if (v2 == 120)
    {
      v3 = CPOrdinalStateX;
      v4 = 10;
      goto LABEL_10;
    }
    if (v2 == 118)
    {
      v3 = CPOrdinalStateV;
      v4 = 5;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 == 105)
    {
      v3 = CPOrdinalStateI;
      v4 = 1;
      goto LABEL_10;
    }
    if (v2 == 108)
    {
      v3 = CPOrdinalStateL;
      v4 = 50;
LABEL_10:
      *((_DWORD *)a1 + 1) += v4;
      *((_QWORD *)a1 + 1) = v3;
      return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateCC(unsigned __int16 *a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  int v4;

  v1 = 0;
  v2 = *a1;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      v3 = CPOrdinalStateDoneC;
      v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      v3 = CPOrdinalStateI;
      v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        v3 = CPOrdinalStateL;
        v4 = 50;
        goto LABEL_12;
      case 'x':
        v3 = CPOrdinalStateX;
        v4 = 10;
        goto LABEL_12;
      case 'v':
        v3 = CPOrdinalStateV;
        v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((_QWORD *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v1 = 0;
  v2 = CPOrdinalStateI;
  v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      v2 = CPOrdinalStateCC;
      v3 = 100;
      goto LABEL_10;
    case 'd':
      v2 = CPOrdinalStateDoneC;
      v3 = 300;
      goto LABEL_10;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return v1;
    case 'i':
      goto LABEL_10;
    case 'l':
      v2 = CPOrdinalStateL;
      v3 = 50;
      goto LABEL_10;
    case 'm':
      v2 = CPOrdinalStateDoneC;
      v3 = 800;
      goto LABEL_10;
    default:
      if (CPOrdinalStateI == 120)
      {
        v2 = CPOrdinalStateX;
        v3 = 10;
      }
      else
      {
        if (CPOrdinalStateI != 118)
          return v1;
        v2 = CPOrdinalStateV;
        v3 = 5;
      }
LABEL_10:
      *(_DWORD *)(a1 + 4) += v3;
      *(_QWORD *)(a1 + 8) = v2;
      return 1;
  }
}

uint64_t CPOrdinalStateDC(unsigned __int16 *a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  int v4;

  v1 = 0;
  v2 = *a1;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      v3 = CPOrdinalStateCC;
      v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      v3 = CPOrdinalStateI;
      v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        v3 = CPOrdinalStateL;
        v4 = 50;
        goto LABEL_12;
      case 'x':
        v3 = CPOrdinalStateX;
        v4 = 10;
        goto LABEL_12;
      case 'v':
        v3 = CPOrdinalStateV;
        v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((_QWORD *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateD(unsigned __int16 *a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  int v4;

  v1 = 0;
  v2 = *a1;
  if (v2 <= 0x6B)
  {
    if (v2 == 99)
    {
      v3 = CPOrdinalStateDC;
      v4 = 100;
      goto LABEL_12;
    }
    if (v2 == 105)
    {
      v3 = CPOrdinalStateI;
      v4 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(v2)
    {
      case 'l':
        v3 = CPOrdinalStateL;
        v4 = 50;
        goto LABEL_12;
      case 'x':
        v3 = CPOrdinalStateX;
        v4 = 10;
        goto LABEL_12;
      case 'v':
        v3 = CPOrdinalStateV;
        v4 = 5;
LABEL_12:
        *((_DWORD *)a1 + 1) += v4;
        *((_QWORD *)a1 + 1) = v3;
        return 1;
    }
  }
  return v1;
}

uint64_t CPOrdinalStateDoneM(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v1 = 0;
  v2 = CPOrdinalStateI;
  v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      v2 = CPOrdinalStateC;
      v3 = 100;
      goto LABEL_9;
    case 'd':
      v2 = CPOrdinalStateD;
      v3 = 500;
      goto LABEL_9;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return v1;
    case 'i':
      goto LABEL_9;
    case 'l':
      v2 = CPOrdinalStateL;
      v3 = 50;
      goto LABEL_9;
    default:
      if (CPOrdinalStateI == 120)
      {
        v2 = CPOrdinalStateX;
        v3 = 10;
      }
      else
      {
        if (CPOrdinalStateI != 118)
          return v1;
        v2 = CPOrdinalStateV;
        v3 = 5;
      }
LABEL_9:
      *(_DWORD *)(a1 + 4) += v3;
      *(_QWORD *)(a1 + 8) = v2;
      return 1;
  }
}

uint64_t CPOrdinalStateMM(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v1 = 0;
  v2 = CPOrdinalStateI;
  v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      v2 = CPOrdinalStateC;
      v3 = 100;
      goto LABEL_10;
    case 'd':
      v2 = CPOrdinalStateD;
      v3 = 500;
      goto LABEL_10;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return v1;
    case 'i':
      goto LABEL_10;
    case 'l':
      v2 = CPOrdinalStateL;
      v3 = 50;
      goto LABEL_10;
    case 'm':
      v2 = CPOrdinalStateDoneM;
      v3 = 1000;
      goto LABEL_10;
    default:
      if (CPOrdinalStateI == 120)
      {
        v2 = CPOrdinalStateX;
        v3 = 10;
      }
      else
      {
        if (CPOrdinalStateI != 118)
          return v1;
        v2 = CPOrdinalStateV;
        v3 = 5;
      }
LABEL_10:
      *(_DWORD *)(a1 + 4) += v3;
      *(_QWORD *)(a1 + 8) = v2;
      return 1;
  }
}

uint64_t CPOrdinalStateM(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v1 = 0;
  v2 = CPOrdinalStateI;
  v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      v2 = CPOrdinalStateC;
      v3 = 100;
      goto LABEL_10;
    case 'd':
      v2 = CPOrdinalStateD;
      v3 = 500;
      goto LABEL_10;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return v1;
    case 'i':
      goto LABEL_10;
    case 'l':
      v2 = CPOrdinalStateL;
      v3 = 50;
      goto LABEL_10;
    case 'm':
      v2 = CPOrdinalStateMM;
      v3 = 1000;
      goto LABEL_10;
    default:
      if (CPOrdinalStateI == 120)
      {
        v2 = CPOrdinalStateX;
        v3 = 10;
      }
      else
      {
        if (CPOrdinalStateI != 118)
          return v1;
        v2 = CPOrdinalStateV;
        v3 = 5;
      }
LABEL_10:
      *(_DWORD *)(a1 + 4) += v3;
      *(_QWORD *)(a1 + 8) = v2;
      return 1;
  }
}

uint64_t CPOrdinalStateLowerRoman(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v1 = 0;
  v2 = CPOrdinalStateI;
  v3 = 1;
  switch(*(_WORD *)a1)
  {
    case 'c':
      v2 = CPOrdinalStateC;
      v3 = 100;
      goto LABEL_10;
    case 'd':
      v2 = CPOrdinalStateD;
      v3 = 500;
      goto LABEL_10;
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return v1;
    case 'i':
      goto LABEL_10;
    case 'l':
      v2 = CPOrdinalStateL;
      v3 = 50;
      goto LABEL_10;
    case 'm':
      v2 = CPOrdinalStateM;
      v3 = 1000;
      goto LABEL_10;
    default:
      if (CPOrdinalStateI == 120)
      {
        v2 = CPOrdinalStateX;
        v3 = 10;
      }
      else
      {
        if (CPOrdinalStateI != 118)
          return v1;
        v2 = CPOrdinalStateV;
        v3 = 5;
      }
LABEL_10:
      *(_DWORD *)(a1 + 4) += v3;
      *(_QWORD *)(a1 + 8) = v2;
      return 1;
  }
}

uint64_t CPOrdinalLexerConvertFromBase(const __CFString *a1, unsigned int *a2, unsigned int a3, unsigned int a4, int a5)
{
  CFIndex Length;
  CFIndex v11;
  CFIndex v12;
  unsigned int v13;
  int v14;
  unsigned int CharacterAtIndex;
  uint64_t result;

  Length = CFStringGetLength(a1);
  if (Length < 1)
    return 0;
  v11 = Length;
  v12 = 0;
  v13 = 0;
  v14 = a5 - a3;
  while (1)
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v12);
    result = 0;
    if (CharacterAtIndex < a3 || CharacterAtIndex > a4)
      break;
    v13 = v14 + v13 * (a4 - a3 + 1) + CharacterAtIndex;
    if (v11 == ++v12)
    {
      if (a2)
        *a2 = v13;
      return 1;
    }
  }
  return result;
}

uint64_t CPOrdinalLexerGetCharacterType(int a1)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  if ((a1 - 48) > 9)
  {
    if ((a1 - 945) >= 0x19)
      v2 = 8 * ((a1 - 913) < 0x19);
    else
      v2 = 7;
    if (((1 << (a1 - 67)) & 0x280643) != 0)
      v3 = 4;
    else
      v3 = 6;
    if ((a1 - 67) <= 0x15)
      v4 = v3;
    else
      v4 = 6;
    if ((a1 - 65) <= 0x19)
      v5 = v4;
    else
      v5 = v2;
    if (((1 << (a1 - 99)) & 0x280643) != 0)
      v6 = 3;
    else
      v6 = 5;
    if ((a1 - 99) <= 0x15)
      v7 = v6;
    else
      v7 = 5;
    if ((a1 - 97) <= 0x19)
      return v7;
    else
      return v5;
  }
  else if (a1 == 48)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t CPOrdinalLexerStringToInt(const __CFString *a1, unsigned int *a2)
{
  CFIndex Length;
  unint64_t v5;
  int CharacterAtIndex;
  uint64_t CharacterType;
  CFIndex i;
  int v9;

  Length = CFStringGetLength(a1);
  if (Length < 1)
  {
LABEL_17:
    CharacterType = 0;
  }
  else
  {
    v5 = Length;
    CharacterAtIndex = CFStringGetCharacterAtIndex(a1, 0);
    CharacterType = CPOrdinalLexerGetCharacterType(CharacterAtIndex);
    if ((_DWORD)CharacterType && v5 >= 2)
    {
      for (i = 1; v5 != i; ++i)
      {
        v9 = CFStringGetCharacterAtIndex(a1, i);
        if ((CPOrdinalLexerTestCharacterType[CharacterType]() & 1) == 0)
        {
          if ((_DWORD)CharacterType == 2)
          {
            if ((v9 - 48) > 9)
              goto LABEL_17;
            CharacterType = 2;
          }
          else if ((_DWORD)CharacterType == 4)
          {
            if ((v9 - 65) >= 0x1A)
              goto LABEL_17;
            CharacterType = 6;
          }
          else
          {
            if ((_DWORD)CharacterType != 3 || (v9 - 97) >= 0x1A)
              goto LABEL_17;
            CharacterType = 5;
          }
        }
      }
    }
  }
  if ((CPOrdinalLexerTypedStringToInt(a1, CharacterType, a2) & 1) == 0)
  {
    if ((_DWORD)CharacterType == 3)
    {
      if (CPOrdinalLexerConvertFromBase(a1, a2, 0x61u, 0x7Au, 1))
        return CharacterType;
      return 0;
    }
    if ((_DWORD)CharacterType != 4 || (CPOrdinalLexerConvertFromBase(a1, a2, 0x41u, 0x5Au, 1) & 1) == 0)
      return 0;
  }
  return CharacterType;
}

uint64_t CPOrdinalLexerTypedStringToInt(CFStringRef theString, int a2, unsigned int *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  CFIndex Length;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  __int128 v16;

  switch(a2)
  {
    case 1:
    case 2:
      v5 = a3;
      v6 = 48;
      v7 = 57;
      v8 = 0;
      return CPOrdinalLexerConvertFromBase(theString, v5, v6, v7, v8);
    case 3:
      v16 = xmmword_1E1643C68;
      Length = CFStringGetLength(theString);
      if (Length < 1)
        return 0;
      v10 = Length;
      v11 = 0;
      while (1)
      {
        LOWORD(v16) = CFStringGetCharacterAtIndex(theString, v11);
        if (((*((uint64_t (**)(__int128 *))&v16 + 1))(&v16) & 1) == 0)
          return 0;
        if (v10 == ++v11)
          goto LABEL_12;
      }
    case 4:
      v16 = xmmword_1E1643C68;
      v12 = CFStringGetLength(theString);
      if (v12 < 1)
        return 0;
      v13 = v12;
      v14 = 0;
      break;
    case 5:
      v5 = a3;
      v6 = 97;
      v7 = 122;
      goto LABEL_21;
    case 6:
      v5 = a3;
      v6 = 65;
      v7 = 90;
      goto LABEL_21;
    case 7:
      v5 = a3;
      v6 = 945;
      v7 = 969;
      goto LABEL_21;
    case 8:
      v5 = a3;
      v6 = 913;
      v7 = 937;
LABEL_21:
      v8 = 1;
      return CPOrdinalLexerConvertFromBase(theString, v5, v6, v7, v8);
    default:
      return 0;
  }
  do
  {
    LOWORD(v16) = CFStringGetCharacterAtIndex(theString, v14) + 32;
    if (((*((uint64_t (**)(__int128 *))&v16 + 1))(&v16) & 1) == 0)
      return 0;
    ++v14;
  }
  while (v13 != v14);
LABEL_12:
  if (a3)
    *a3 = DWORD1(v16);
  return 1;
}

void type4_release(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 8));
    free(*(void **)(a1 + 24));
    evaluation_release(*(void ***)(a1 + 48));
    evaluation_release(*(void ***)(a1 + 40));
    type4_program_release(*(unint64_t **)(a1 + 32));
    free((void *)a1);
  }
}

_DWORD *evaluation_create(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double *v7;

  v2 = malloc_type_malloc(0x18uLL, 0x1080040C4643742uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = 0;
    v4 = malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1) = v4;
    if (v4 && (v5 = malloc_type_malloc(8 * a1[2], 0x100004000313F17uLL), (*((_QWORD *)v3 + 2) = v5) != 0))
    {
      v6 = (uint64_t)v5;
      v7 = (double *)*((_QWORD *)v3 + 1);
      if (*a1)
        bzero(*((void **)v3 + 1), 8 * *a1);
      evaluate((uint64_t)a1, v7, v6);
    }
    else
    {
      evaluation_release((void **)v3);
      return 0;
    }
  }
  return v3;
}

__CFDictionary *copy_pdf_description(_QWORD *a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  CFMutableArrayRef v4;
  __CFArray *v5;
  unint64_t v6;
  CFMutableArrayRef v7;
  __CFArray *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t program_string_length;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  CFDataRef v19;
  CFDataRef v20;

  if (!a1)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (Mutable)
  {
    CGCFDictionarySetInteger(Mutable, CFSTR("/FunctionType"), 4);
    v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v4)
    {
      v5 = v4;
      if ((*a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v6 = 0;
        do
          CGCFArrayAppendCGFloat(v5, *(double *)(a1[1] + 8 * v6++));
        while (v6 < 2 * *a1);
      }
      CFDictionarySetValue(v3, CFSTR("/Domain"), v5);
      CFRelease(v5);
      v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (v7)
      {
        v8 = v7;
        if ((a1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v9 = 0;
          do
            CGCFArrayAppendCGFloat(v8, *(double *)(a1[3] + 8 * v9++));
          while (v9 < 2 * a1[2]);
        }
        CFDictionarySetValue(v3, CFSTR("/Range"), v8);
        CFRelease(v8);
        v10 = (uint64_t *)a1[4];
        program_string_length = get_program_string_length(v10);
        v12 = (char *)malloc_type_malloc(program_string_length + 1, 0xA63D43F3uLL);
        if (v12)
        {
          v13 = v12;
          v14 = print_program(v12, (unint64_t *)v10);
          if (v14 > program_string_length)
            _CGHandleAssert("type4_program_create_string", 237, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Functions/type4-program.c", "size <= length", "size of program (%lu) overflowed length (%lu)", v15, v16, v17, v14);
          v18 = strlen(v13);
          v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v13, v18);
          if (v19)
          {
            v20 = v19;
            CFDictionarySetValue(v3, CFSTR("/%Stream"), v19);
            CFRelease(v20);
            free(v13);
            return v3;
          }
          free(v13);
        }
      }
    }
    CFRelease(v3);
    return 0;
  }
  return v3;
}

void type4_evaluate(unint64_t *a1, double *a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  int v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  double *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;

  if (!a1)
    return;
  v3 = (uint64_t *)a3;
  v5 = *a1;
  if (!*a1)
    goto LABEL_14;
  v6 = a2;
  if (*a2 == 0.0)
  {
    v10 = 0;
    while (v5 - 1 != v10)
    {
      v11 = a2[++v10];
      if (v11 != 0.0)
      {
        if (v10 >= v5)
          return;
        goto LABEL_4;
      }
    }
LABEL_14:
    v12 = a1[2];
    if (v12)
    {
      v13 = *(uint64_t **)(a1[5] + 16);
      do
      {
        v14 = *v13++;
        *v3++ = v14;
        --v12;
      }
      while (v12);
    }
    return;
  }
LABEL_4:
  v7 = a1[6];
  while (!__ldxr((unsigned int *)v7))
  {
    v9 = 1;
    if (!__stxr(1u, (unsigned int *)v7))
    {
      if (!v7)
        goto LABEL_32;
      goto LABEL_19;
    }
  }
  v9 = 0;
  __clrex();
  if (!v7)
    goto LABEL_32;
LABEL_19:
  if (v9)
  {
    v15 = *a1;
    if (!*a1)
    {
LABEL_24:
      v18 = a1[2];
      if (v18)
      {
        v19 = *(uint64_t **)(v7 + 16);
        do
        {
          v20 = *v19++;
          *v3++ = v20;
          --v18;
        }
        while (v18);
      }
      while (1)
      {
        v21 = __ldxr((unsigned int *)v7);
        if (v21 != 1)
          break;
        if (!__stxr(0, (unsigned int *)v7))
          return;
      }
LABEL_48:
      __clrex();
      abort();
    }
    v16 = *(double **)(v7 + 8);
    v17 = a2;
    while (*v17 == *v16)
    {
      ++v16;
      ++v17;
      if (!--v15)
        goto LABEL_24;
    }
    do
    {
      v22 = __ldxr((unsigned int *)v7);
      if (v22 != 1)
        goto LABEL_48;
    }
    while (__stxr(0, (unsigned int *)v7));
  }
LABEL_32:
  evaluate((uint64_t)a1, a2, a3);
  v23 = a1[6];
  do
  {
    if (__ldxr((unsigned int *)v23))
    {
      v25 = 0;
      __clrex();
      if (v23)
        goto LABEL_38;
      return;
    }
    v25 = 1;
  }
  while (__stxr(1u, (unsigned int *)v23));
  if (!v23)
    return;
LABEL_38:
  if (v25)
  {
    v26 = *a1;
    if (*a1)
    {
      v27 = *(_QWORD **)(v23 + 8);
      do
      {
        v28 = *(_QWORD *)v6++;
        *v27++ = v28;
        --v26;
      }
      while (v26);
    }
    v29 = a1[2];
    if (v29)
    {
      v30 = *(_QWORD **)(v23 + 16);
      do
      {
        v31 = *v3++;
        *v30++ = v31;
        --v29;
      }
      while (v29);
    }
    while (1)
    {
      v32 = __ldxr((unsigned int *)v23);
      if (v32 != 1)
        break;
      if (!__stxr(0, (unsigned int *)v23))
        return;
    }
    goto LABEL_48;
  }
}

void evaluate(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  double v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  double v15;
  _OWORD v16[201];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, 512);
  if (*(_QWORD *)a1)
  {
    v5 = 0;
    for (i = *(_QWORD *)a1 - 1; ; --i)
    {
      v7 = *a2;
      if (v5 == 200)
      {
        v17 = 3;
        if (!i)
          goto LABEL_9;
      }
      else
      {
        *(_QWORD *)&v16[0] = v5 + 1;
        v8 = &v16[v5];
        *((_QWORD *)v8 + 2) = 258;
        *((double *)v8 + 3) = v7;
        if (!i)
          goto LABEL_9;
      }
      v5 = *(_QWORD *)&v16[0];
      ++a2;
    }
  }
  v7 = 0.0;
LABEL_9:
  type4_program_execute(*(_QWORD **)(a1 + 32), (uint64_t *)v16);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = 258;
    v12 = -1;
    do
    {
      v13 = *(_QWORD *)&v16[0];
      if (*(_QWORD *)&v16[0])
      {
        --*(_QWORD *)&v16[0];
        v14 = &v16[v13 - 1];
        v11 = *((_DWORD *)v14 + 4);
        v7 = *((double *)v14 + 3);
      }
      else
      {
        v17 = 4;
      }
      if (v11 == 258)
      {
        v15 = v7;
      }
      else if (v11 == 257)
      {
        v15 = (double)SLODWORD(v7);
      }
      else
      {
        pdf_error("error evaluating Type 4 function: typecheck.");
        v9 = *(_QWORD *)(a1 + 16);
        v15 = 0.0;
      }
      *(double *)(a3 + 8 * (v9 + v12)) = v15;
      ++v10;
      --v12;
    }
    while (v10 < v9);
  }
}

void evaluation_release(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    free(a1[2]);
    free(a1);
  }
}

uint64_t CGPDFLayoutGetTypeID()
{
  uint64_t result;

  result = CGPDFLayoutGetTypeID_id;
  if (!CGPDFLayoutGetTypeID_id)
  {
    result = _CFRuntimeRegisterClass();
    CGPDFLayoutGetTypeID_id = result;
  }
  return result;
}

uint64_t _CGPDFLayoutFinalize(uint64_t a1)
{
  const void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  _QWORD *v7;
  const void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;

  CGPDFNodeRelease(*(_QWORD *)(a1 + 104));
  v2 = *(const void **)(a1 + 112);
  if (v2)
    CFRelease(v2);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      v5 = 0;
      for (i = 0; i < v4; ++i)
      {
        v7 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + v5);
        if (v7)
        {
          if ((*v7)-- == 1)
          {
            free(v7);
            v4 = *(_QWORD *)(a1 + 48);
          }
        }
        v5 += 24;
      }
      v3 = *(void **)(a1 + 24);
    }
    free(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v9 = *(const void **)(a1 + 80);
  if (v9)
    CFRelease(v9);
  v10 = *(void **)(a1 + 88);
  if (v10)
    free(v10);
  v11 = *(void **)(a1 + 56);
  if (v11)
    CPMultiUnicodesRelease(v11);
  v12 = *(_QWORD **)(a1 + 64);
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)v12[1];
      CGPDFTextStyleRelease((_QWORD *)*v12);
      free(v12);
      v12 = v13;
    }
    while (v13);
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 120));
}

CFStringRef _CGPDFLayoutCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CGPDFLayout (%p)>"), a1);
}

CGPDFLayout *CGPDFLayoutCreateWithPage(uint64_t a1)
{
  void *v2;
  CPPage *v3;
  CGPDFLayout *v4;
  CGPDFLayout *v5;

  v2 = (void *)MEMORY[0x186DC2BD4]();
  v3 = -[CPPage initWithPDFPage:]([CPPage alloc], "initWithPDFPage:", a1);
  -[CPPage reconstruct](v3, "reconstruct");
  v4 = -[CPPage layout](v3, "layout");
  v5 = v4;
  if (v4)
    CFRetain(v4);
  -[CPPage dispose](v3, "dispose");

  objc_autoreleasePoolPop(v2);
  return v5;
}

CFTypeRef CGPDFLayoutRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void CGPDFLayoutRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGPDFLayoutSetHasRTL(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 72) = a2;
  return result;
}

uint64_t CGPDFLayoutHasRTL(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t CGPDFLayoutAppendTextElement(uint64_t result, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result)
  {
    if (a2)
    {
      if (a4 <= 0x400)
      {
        v6 = (_QWORD *)result;
        if (*(_QWORD *)(result + 32) < *(_QWORD *)(result + 40))
        {
          if (a3)
          {
            v8 = *(uint64_t **)(result + 64);
            if (v8)
            {
              while (1)
              {
                v9 = v8;
                v10 = *v8;
                result = CGPDFTextStyleEqualToPDFTextStyle(*v8, (uint64_t)a3);
                if ((result & 1) != 0)
                  break;
                v8 = (uint64_t *)v9[1];
                if (!v8)
                  goto LABEL_13;
              }
              if (v10)
                goto LABEL_17;
LABEL_13:
              result = (uint64_t)malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              if (result)
              {
                ++*a3;
                *(_QWORD *)result = a3;
                *(_QWORD *)(result + 8) = 0;
                goto LABEL_15;
              }
            }
            else
            {
              result = (uint64_t)malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              if (result)
              {
                v9 = (_QWORD *)result;
                result = 0;
                v6[8] = v9;
                ++*a3;
                *v9 = a3;
LABEL_15:
                v9[1] = result;
                v10 = (uint64_t)a3;
LABEL_17:
                ++*a2;
                v11 = v6[3];
                v12 = v6[4];
                v6[4] = v12 + 1;
                v13 = v11 + 24 * v12;
                *(_QWORD *)v13 = a2;
                *(_QWORD *)(v13 + 8) = v10;
                *(_DWORD *)(v13 + 16) = a4;
                *(_DWORD *)(v13 + 20) = 0;
                ++v6[6];
                return result;
              }
            }
          }
          v10 = 0;
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetPage(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t CGPDFLayoutGetRootNode(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

_QWORD *CGPDFLayoutGetRootTaggedNode(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)result[14];
    if (!result)
    {
      result = CGPDFPageCopyRootTaggedNode(v1[2]);
      v1[14] = result;
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetNumberOfTextElements(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

uint64_t CGPDFLayoutGetCharacterMarker(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a1 + 48) > a2 && (v4 = *(_QWORD *)(a1 + 24)) != 0)
      return *(unsigned int *)(v4 + 24 * a2 + 16);
    else
      return 0;
  }
  return result;
}

void CGPDFLayoutGetTextMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat width;
  CGFloat v13;
  uint64_t v14;
  CGRect v15;
  CGRect v16;

  *(CGAffineTransform *)a3 = CGAffineTransformIdentity;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > a2)
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (v4)
      {
        v5 = (uint64_t *)(v4 + 24 * a2);
        v6 = *v5;
        if (*v5)
        {
          v7 = v5[1];
          v9 = *(double *)(v6 + 32);
          v8 = *(double *)(v6 + 40);
          v10 = *(double *)(v6 + 16);
          v11 = *(double *)(v6 + 24);
          if (v7 && *(__int16 *)(v6 + 8) != -4)
          {
            width = *(double *)(v7 + 16);
            v13 = width;
          }
          else if (v9 < 0.0 || (width = *(double *)(v6 + 32), v13 = *(double *)(v6 + 40), v8 < 0.0))
          {
            v15 = CGRectStandardize(*(CGRect *)(v6 + 16));
            width = v15.size.width;
            v15.origin.x = v10;
            v15.origin.y = v11;
            v15.size.width = v9;
            v15.size.height = v8;
            *(CGRect *)(&v13 - 3) = CGRectStandardize(v15);
          }
          *(CGFloat *)a3 = width;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(CGFloat *)(a3 + 24) = v13;
          if (v9 < 0.0 || v8 < 0.0)
          {
            v16.origin.x = v10;
            v16.origin.y = v11;
            v16.size.width = v9;
            v16.size.height = v8;
            *(_QWORD *)&v10 = (unint64_t)CGRectStandardize(v16);
          }
          v14 = *(_QWORD *)(v6 + 88);
          *(CGFloat *)(a3 + 32) = v10;
          *(_QWORD *)(a3 + 40) = v14;
        }
      }
    }
  }
}

uint64_t CGPDFLayoutGetCGFont(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(_QWORD *)(a1 + 48) > a2
    && (v2 = *(_QWORD *)(a1 + 24)) != 0
    && (v3 = *(_QWORD *)(v2 + 24 * a2 + 8)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    return CGPDFFontGetFont(v4);
  }
  else
  {
    return 0;
  }
}

uint64_t CGPDFLayoutGetGlyph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v7;
  uint64_t v8;
  unint64_t *Encoding;
  unsigned __int16 v10;
  __int16 *CIDToGlyphMap;
  _QWORD *Font;
  _QWORD *v13;
  int GlyphsForCIDs;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;

  v18 = 0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > a2)
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2)
      {
        v3 = (uint64_t *)(v2 + 24 * a2);
        v5 = *v3;
        v4 = v3[1];
        if (v5 && v4 != 0)
        {
          v19 = *(_WORD *)(v5 + 80);
          v7 = v19;
          if (v19)
          {
            v8 = *(_QWORD *)(v4 + 8);
            if (v8)
            {
              Encoding = CGPDFFontGetEncoding(*(unint64_t **)(v4 + 8));
              if (Encoding)
                return *((unsigned __int16 *)CGPDFEncodingGetGlyphVector((size_t)Encoding) + v19);
              CIDToGlyphMap = (__int16 *)CGPDFFontGetCIDToGlyphMap(v8);
              if (CIDToGlyphMap)
              {
                CGFontIndexMapGetValues(CIDToGlyphMap, &v19, 1, &v18);
                return v18;
              }
              Font = (_QWORD *)CGPDFFontGetFont(v8);
              if (Font)
              {
                v13 = Font;
                if ((CGFontGetGlyphsForCIDs(Font, &v19, 1, &v18) & 1) != 0)
                {
                  if (CGPDFFontIsEmbedded(v8))
                    return v18;
                  v17 = 1;
                  v16 = 0;
                  GlyphsForCIDs = CGFontGetGlyphsForCIDs(v13, &v17, 1, &v16);
                  v10 = v16;
                  if (!GlyphsForCIDs)
                    return 0;
                  return v10;
                }
                return v19;
              }
              return v7;
            }
          }
        }
      }
    }
  }
  return v18;
}

double CGPDFLayoutGetCharacterBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(_QWORD *)(a1 + 48) > a2
    && (v2 = *(_QWORD *)(a1 + 24)) != 0
    && (v3 = *(_QWORD *)(v2 + 24 * a2)) != 0)
  {
    return *(double *)(v3 + 16);
  }
  else
  {
    return INFINITY;
  }
}

double CGPDFLayoutGetCharacterBBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1
    && (a2 & 0x8000000000000000) == 0
    && *(_QWORD *)(a1 + 48) > a2
    && (v2 = *(_QWORD *)(a1 + 24)) != 0
    && (v3 = *(_QWORD *)(v2 + 24 * a2)) != 0)
  {
    return *(double *)(v3 + 48);
  }
  else
  {
    return INFINITY;
  }
}

double CGPDFLayoutGetCharacterRotation(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  result = 0.0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > a2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24 * a2 + 8);
        if (v4)
          return *(double *)(v4 + 40);
      }
    }
  }
  return result;
}

double CGPDFLayoutGetCharacterAnchorY(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  result = 0.0;
  if (a1)
  {
    if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > a2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24 * a2);
        if (v4)
          return *(double *)(v4 + 88);
      }
    }
  }
  return result;
}

uint64_t CGPDFLayoutGetCharacterUnicode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a1 + 48) > a2 && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 24 * a2)) != 0)
      return *(unsigned __int16 *)(v5 + 8);
    else
      return 0;
  }
  return result;
}

BOOL CGPDFLayoutIsAttachmentCharacter(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
    return *(_QWORD *)(a1 + 48) > a2
        && (v4 = *(_QWORD *)(a1 + 24)) != 0
        && (v5 = *(_QWORD *)(v4 + 24 * a2)) != 0
        && *(__int16 *)(v5 + 8) == -4;
  return result;
}

uint64_t CGPDFLayoutIsWhiteSpaceCharacter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a1 + 48) > a2 && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 24 * a2)) != 0)
    {
      result = *(unsigned __int16 *)(v5 + 8);
      if (*(_WORD *)(v5 + 8))
      {
        if (result > 0x7F)
          v6 = __maskrune(result, 0x4000uLL);
        else
          v6 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x4000;
        return v6 != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CGPDFLayoutBufferUnicodeAndBoundsForRange(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  CGSize **v11;
  _WORD *v12;
  uint64_t v13;
  CGSize *v14;
  CGFloat *p_height;
  CGSize *p_size;
  CGFloat *p_y;
  CGSize *v18;
  const CGRect *v19;
  double height;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    v5 = a4;
    if ((a4 & 0x8000000000000000) == 0)
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (a4 + a5 <= v6)
      {
        v7 = *(_QWORD *)(a1 + 24);
        if (v7)
        {
          if (a5 >= 1)
          {
            if (a4 + a5 >= v6)
              v10 = *(_QWORD *)(a1 + 48);
            else
              v10 = a4 + a5;
            v11 = (CGSize **)(v7 + 24 * a4);
            v12 = a2;
            v13 = a3;
            do
            {
              if (a2)
              {
                v14 = *v11;
                if (*v11)
                  LOWORD(v14) = LOWORD(v14->height);
                *v12++ = (_WORD)v14;
              }
              if (a3)
              {
                p_height = &CGRectNull.size.height;
                p_size = &CGRectNull.size;
                p_y = &CGRectNull.origin.y;
                v18 = v11[1];
                if (*v11)
                {
                  p_y = &(*v11)[1].height;
                  p_size = *v11 + 2;
                  p_height = &(*v11)[2].height;
                  v19 = (const CGRect *)&(*v11)[1];
                }
                else
                {
                  v19 = &CGRectNull;
                }
                if (v18)
                  height = v18[2].height;
                else
                  height = 0.0;
                *(CGFloat *)v13 = CGRectUprightBoundsForRotation(v19->origin.x, *p_y, p_size->width, *p_height, height);
                *(_QWORD *)(v13 + 8) = v21;
                *(_QWORD *)(v13 + 16) = v22;
                *(_QWORD *)(v13 + 24) = v23;
                v13 += 32;
              }
              ++v5;
              v11 += 3;
            }
            while (v5 < v10);
          }
        }
      }
    }
  }
}

CGFloat CGRectUprightBoundsForRotation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  __double2 v9;
  CGAffineTransform v11;
  CGRect v12;

  if (a5 != 0.0)
  {
    v9 = __sincos_stret(a5);
    v11.a = v9.__cosval;
    v11.b = v9.__sinval;
    v11.c = -v9.__sinval;
    v11.d = v9.__cosval;
    v11.tx = 0.0;
    v11.ty = 0.0;
    v12.origin.x = a1;
    v12.origin.y = a2;
    v12.size.width = a3;
    v12.size.height = a4;
    *(_QWORD *)&a1 = (unint64_t)CGRectApplyAffineTransform(v12, &v11);
  }
  return a1;
}

double CGPDFLayoutIntersectionPoint()
{
  return 0.0;
}

char *CreateSelectionBetweenPoints(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  __n64 *v10;
  uint64_t v11;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int64x2_t *IndexSet;
  uint64_t *v18;
  uint64_t TextRange;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t LastIndex;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t StringRangeFromCursorRange;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int64x2_t *IndexSetForStringRange;
  int64x2_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t j;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t Range;
  int v75;
  __n64 *v76;
  char v77;
  __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t RangeFromStringRange;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  double v86;
  double v87;
  double v88;
  double v89;

  v88 = a4;
  v89 = a5;
  v86 = a6;
  v87 = a7;
  if (!a2)
    return CreateCharacterSelectionBetweenPoints(a1, a3, a4, a5, a6, a7);
  if (!a1)
    return 0;
  v10 = *(__n64 **)(a1 + 104);
  if (a2 > 4)
    v11 = 0;
  else
    v11 = dword_1850051E0[a2 - 1];
  v85 = 0;
  v83 = 0;
  v84 = 0;
  if (a2 == 1)
    v13 = 1.0;
  else
    v13 = 2.0;
  RangeFromStringRange = 0;
  v82 = 0;
  CGPDFNodeGetNodeRangeBetweenPoints(v10, v11, a3, &v84, &v83, &v85, &RangeFromStringRange, a4, a5, a6, a7, v13);
  v15 = v83;
  v14 = v84;
  if (v84 == v83)
  {
    if (v84)
    {
      TextRange = CGPDFNodeGetTextRange(v84);
      v21 = CPRangeUnion(TextRange, v20, RangeFromStringRange, v82);
    }
    else
    {
      v21 = RangeFromStringRange;
      v22 = v82;
    }
    if (v22 < 1)
      return 0;
    IndexSet = CPIndexSetCreateWithRange(v21, v22);
    if (!IndexSet)
      return 0;
  }
  else
  {
    v16 = v11;
    if (v85)
    {
      IndexSet = CreateIndexSet(v84, v83, v11, a3);
      v18 = &v83;
    }
    else
    {
      IndexSet = CreateIndexSet(v83, v84, v11, a3);
      v18 = &v84;
      v14 = v15;
    }
    v23 = CGPDFNodeGetTextRange(v14);
    v24 = CGPDFNodeGetTextRange(*v18);
    if (!IndexSet)
      return 0;
    v26 = v24;
    v27 = v25;
    v76 = v10;
    if (IndexSet[2].i8[8])
      CPIndexSetNormalize((uint64_t)IndexSet);
    v28 = IndexSet[1].i64[0];
    if (v28 < 1)
    {
      v10 = v76;
      LODWORD(v11) = v16;
    }
    else
    {
      v75 = v16;
      Range = CPIndexSetGetRange((uint64_t)IndexSet, 0);
      v30 = v29;
      v31 = CPIndexSetGetRange((uint64_t)IndexSet, v28 - 1);
      v32 = RangeFromStringRange;
      if (v23 <= RangeFromStringRange)
      {
        LODWORD(v11) = v75;
      }
      else
      {
        if (IndexSet[1].i64[0] >= 1)
        {
          v33 = Range + v30 - RangeFromStringRange;
          v34 = (_QWORD *)IndexSet[2].i64[0];
          *v34 = RangeFromStringRange;
          v34[1] = v33;
          IndexSet[2].i8[8] = 1;
        }
        if (v28 == 1)
          v31 = v32;
        v32 = RangeFromStringRange;
        LODWORD(v11) = v75;
      }
      v36 = v82 + v32;
      if (v26 + v27 < v36 && IndexSet[1].i64[0] >= v28)
      {
        v37 = (uint64_t *)(IndexSet[2].i64[0] + 16 * (v28 - 1));
        *v37 = v31;
        v37[1] = v36 - v31;
        IndexSet[2].i8[8] = 1;
      }
      v10 = v76;
    }
  }
  if (IndexSet[2].i8[8])
    CPIndexSetNormalize((uint64_t)IndexSet);
  if (IndexSet[1].i64[0] < 1)
    v38 = -1;
  else
    v38 = *(_QWORD *)IndexSet[2].i64[0];
  LastIndex = CPIndexSetGetLastIndex((uint64_t)IndexSet);
  v35 = 0;
  if (v38 == -1)
    goto LABEL_87;
  v40 = LastIndex;
  if (LastIndex == -1)
    goto LABEL_87;
  if (v82 < 1
    || !*(_BYTE *)(a1 + 72)
    || (v78 = 0, v79 = 0, v80 = 0, CGPDFLayoutGetRTLData(&v78, a1), v40 >= (int)v80))
  {
LABEL_84:
    if (a2 == 1 && !CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)IndexSet, RangeFromStringRange, v82))
      v35 = 0;
    else
      v35 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), IndexSet);
LABEL_87:
    CFRelease(IndexSet);
    return v35;
  }
  CFRelease(IndexSet);
  if (!v85)
  {
    v51 = v83;
    if (v83
      && (v52 = CGPDFNodeGetTextRange(v83), v54 = v52 + v53, RangeFromStringRange >= v52 + v53)
      && CGPDFNodeIsHitByPoint(v51, v86, v87, v13))
    {
      v45 = 0;
      v55 = RangeFromStringRange - v54 + v82 + 1;
      RangeFromStringRange = v54 - 1;
      v82 = v55;
    }
    else
    {
      v45 = &v86;
    }
    v56 = v84;
    if (!v84
      || (v57 = CGPDFNodeGetTextRange(v84), v82 + RangeFromStringRange > v57)
      || (v49 = v57, !CGPDFNodeIsHitByPoint(v56, v88, v89, v13)))
    {
      v50 = &v88;
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  v41 = v84;
  if (v84
    && (v42 = CGPDFNodeGetTextRange(v84), v44 = v42 + v43, RangeFromStringRange >= v42 + v43)
    && CGPDFNodeIsHitByPoint(v41, v88, v89, v13))
  {
    v45 = 0;
    v46 = RangeFromStringRange - v44 + v82 + 1;
    RangeFromStringRange = v44 - 1;
    v82 = v46;
  }
  else
  {
    v45 = &v88;
  }
  v47 = v83;
  if (v83)
  {
    v48 = CGPDFNodeGetTextRange(v83);
    if (v82 + RangeFromStringRange <= v48)
    {
      v49 = v48;
      if (CGPDFNodeIsHitByPoint(v47, v86, v87, v13))
      {
LABEL_64:
        v50 = 0;
        v82 = v49 - RangeFromStringRange + 1;
        goto LABEL_66;
      }
    }
  }
  v50 = &v86;
LABEL_66:
  v77 = 0;
  StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, RangeFromStringRange, v82, v45, v50, a3, &v77, v13);
  if ((StringRangeFromCursorRange & 0x8000000000000000) == 0)
  {
    v60 = StringRangeFromCursorRange;
    v61 = v59;
    IndexSetForStringRange = CGPDFLayoutCreateIndexSetForStringRange(a1, StringRangeFromCursorRange, v59);
    v63 = IndexSetForStringRange;
    if ((a3 & 1) != 0)
    {
      IndexSet = IndexSetForStringRange;
    }
    else
    {
      IndexSet = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
      if (v63)
        CFRelease(v63);
    }
    if (IndexSet)
    {
      RangeFromStringRange = CGPDFLayoutGetRangeFromStringRange(a1, v60, v61);
      v82 = v64;
      v65 = *(int *)(v79 + 4 * v60);
      v66 = *(int *)(v79 + 4 * (v61 + v60) - 4);
      for (i = CGPDFNodeGetNodeContainingTextRange((uint64_t)v10, v65, 1); i; i = *(_QWORD *)(i + 8))
      {
        if (*(_DWORD *)i == (_DWORD)v11)
          break;
      }
      v84 = i;
      for (j = CGPDFNodeGetNodeContainingTextRange((uint64_t)v10, v66, 1); j; j = *(_QWORD *)(j + 8))
      {
        if (*(_DWORD *)j == (_DWORD)v11)
          break;
      }
      v83 = j;
      if (i)
      {
        v69 = CGPDFNodeGetTextRange(i);
        CPIndexSetAddRange((uint64_t)IndexSet, v69, v70);
        j = v83;
        v71 = v84;
      }
      else
      {
        v71 = 0;
      }
      if (j && j != v71)
      {
        v72 = CGPDFNodeGetTextRange(j);
        CPIndexSetAddRange((uint64_t)IndexSet, v72, v73);
      }
      goto LABEL_84;
    }
  }
  return 0;
}

char *CreateCharacterSelectionBetweenPoints(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  __n64 *v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t *IndexSet;
  uint64_t v13;
  uint64_t Range;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t LastIndex;
  double *v29;
  double *v30;
  CFIndex StringRangeFromCursorRange;
  CFIndex v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int64x2_t *IndexSetForStringRange;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _QWORD v43[2];
  _QWORD v44[2];

  *(double *)v44 = a3;
  *(double *)&v44[1] = a4;
  *(double *)v43 = a5;
  *(double *)&v43[1] = a6;
  if (!a1)
    return 0;
  if (vabdd_f64(a3, a5) + vabdd_f64(a4, a6) < 0.1)
    return 0;
  v8 = *(__n64 **)(a1 + 104);
  v42 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  CGPDFNodeGetNodeRangeBetweenPoints(v8, 1, a2, &v41, &v40, &v42, &v38, a3, a4, a5, a6, 0.0);
  if (v39 < 1)
    return 0;
  v9 = v40;
  if (v41 != v40)
  {
    if (v42)
    {
      v10 = v41;
    }
    else
    {
      v10 = v40;
      v9 = v41;
    }
    IndexSet = CreateIndexSet(v10, v9, 1, a2);
    v11 = IndexSet;
    if (IndexSet)
    {
      if (IndexSet[2].i8[8])
        CPIndexSetNormalize((uint64_t)IndexSet);
      v13 = v11[1].i64[0];
      if (v13 >= 1)
      {
        Range = CPIndexSetGetRange((uint64_t)v11, 0);
        v16 = v15;
        v17 = CPIndexSetGetRange((uint64_t)v11, v13 - 1);
        v19 = v38;
        if (Range != v38)
        {
          v20 = Range + v16 - v38;
          if (v20 < 1)
          {
            v19 = -1;
            v20 = 0;
          }
          if (v11[1].i64[0] >= 1)
          {
            v21 = (uint64_t *)v11[2].i64[0];
            *v21 = v19;
            v21[1] = v20;
            v11[2].i8[8] = 1;
          }
          if (v13 == 1)
          {
            v17 = v19;
            v18 = v20;
          }
        }
        if ((v17 & 0x8000000000000000) == 0 && v18 + v17 != v39 + v38 && v11[1].i64[0] >= v13)
        {
          v22 = v39 + v38 - v17;
          if (v22 >= 1)
          {
            v23 = v17;
          }
          else
          {
            v22 = 0;
            v23 = -1;
          }
          v24 = (uint64_t *)(v11[2].i64[0] + 16 * (v13 - 1));
          *v24 = v23;
          v24[1] = v22;
          v11[2].i8[8] = 1;
        }
      }
      goto LABEL_28;
    }
    return 0;
  }
  v11 = CPIndexSetCreateWithRange(v38, v39);
  if (!v11)
    return 0;
LABEL_28:
  if (v11[2].i8[8])
    CPIndexSetNormalize((uint64_t)v11);
  if (v11[1].i64[0] < 1)
    v25 = -1;
  else
    v25 = *(_QWORD *)v11[2].i64[0];
  LastIndex = CPIndexSetGetLastIndex((uint64_t)v11);
  v26 = 0;
  if (v25 == -1 || LastIndex == -1)
    goto LABEL_53;
  if (!*(_BYTE *)(a1 + 72))
  {
    v35 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v11);
    goto LABEL_48;
  }
  if (v42)
    v29 = (double *)v44;
  else
    v29 = (double *)v43;
  if (v42)
    v30 = (double *)v43;
  else
    v30 = (double *)v44;
  v37 = 0;
  StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, v25, LastIndex - v25 + 1, v29, v30, a2, &v37, 0.0);
  if (StringRangeFromCursorRange < 0)
  {
    v26 = 0;
    goto LABEL_53;
  }
  v33 = StringRangeFromCursorRange;
  v34 = v32;
  if ((_DWORD)a2)
  {
    v35 = (char *)CGPDFSelectionCreateForStringRange(*(_QWORD *)(a1 + 16), StringRangeFromCursorRange, v32);
LABEL_48:
    v26 = v35;
LABEL_53:
    CFRelease(v11);
    return v26;
  }
  CFRelease(v11);
  IndexSetForStringRange = CGPDFLayoutCreateIndexSetForStringRange(a1, v33, v34);
  v11 = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
  if (IndexSetForStringRange)
    CFRelease(IndexSetForStringRange);
  v26 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v11);
  if (v11)
    goto LABEL_53;
  return v26;
}

int64x2_t *CreateIndexSet(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  void **IteratorToNode;
  uint64_t TextRange;
  uint64_t v9;
  uint64_t v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v26;
  int v27;

  v27 = 1;
  v6 = (a3 - 514) < 3 || a3 == 1;
  if (!v6 && a3 != 1537)
    v27 = 0;
  IteratorToNode = (void **)CGPDFNodeCreateIteratorToNode(a1, a2, a3, a4);
  TextRange = CGPDFNodeGetTextRange(a1);
  v10 = v9;
  Node = CGPDFNodeIteratorNextNode((uint64_t)IteratorToNode);
  v26 = 0;
LABEL_7:
  v12 = TextRange;
  for (i = v10; ; i = v23 - v12)
  {
    v14 = Node;
    v15 = CGPDFNodeIteratorNextNode((uint64_t)IteratorToNode);
    if (!v15)
      break;
    Node = v15;
    v16 = CGPDFNodeGetTextRange(v15);
    TextRange = v16;
    v10 = v17;
    v18 = v27;
    if (v27)
    {
      if (v14)
      {
        if (*(_DWORD *)v14 == 513)
          v19 = 1;
        else
          v19 = (*(_DWORD *)v14 >> 8) & 1;
      }
      else
      {
        v19 = 0;
      }
      v18 = v19 ^ 1;
    }
    v20 = i + v12 + v18;
    if (a3 != 1 || v20 >= v16)
      goto LABEL_25;
    v21 = Node;
    while (*(_DWORD *)v21 != 1537)
    {
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_25;
    }
    if (*(double *)(v21 + 112) == 0.0)
    {
LABEL_25:
      if (v20 < v16)
        goto LABEL_32;
    }
    else
    {
      if (v14)
        v22 = *(_QWORD *)(v14 + 8);
      else
        v22 = 0;
      v24 = *(_QWORD *)(Node + 8);
      if (v22 != v24 && v20 < CGPDFNodeGetTextRange(v24))
      {
LABEL_32:
        if (v26)
          CPIndexSetAddRange((uint64_t)v26, v12, i);
        else
          v26 = CPIndexSetCreateWithRange(v12, i);
        goto LABEL_7;
      }
    }
    v23 = TextRange + v10;
    if (TextRange + v10 <= i + v12)
      v23 = i + v12;
  }
  CGPDFNodeIteratorRelease(IteratorToNode);
  if (!v26)
    return CPIndexSetCreateWithRange(v12, i);
  CPIndexSetAddRange((uint64_t)v26, v12, i);
  return v26;
}

uint64_t CGPDFLayoutGetRTLData(__CFString **a1, uint64_t a2)
{
  __CFString **v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *Mutable;
  uint64_t appended;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  __CFString *v21;
  _DWORD *v22;
  uint64_t j;
  void *v24;
  uint64_t v25;
  uint64_t v27;
  pthread_mutex_t *v28;
  __CFString **v29;
  UniChar chars;
  int v31;
  void *ptr;

  v3 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (pthread_mutex_t *)(a2 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 120));
  v5 = a2 + 80;
  if (*(_QWORD *)(a2 + 80))
  {
    *(_OWORD *)v3 = *(_OWORD *)v5;
    v3[2] = *(__CFString **)(a2 + 96);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      v27 = a2 + 80;
      v28 = v4;
      v29 = v3;
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      appended = 0;
      v9 = 0;
      v10 = 0;
      ptr = 0;
      v31 = 0;
      v11 = v6;
      while (1)
      {
        v12 = appended;
        appended = CPTextServicesAppendTextLine(Mutable, (_QWORD *)a2, appended, v11, &ptr, &v31);
        v11 = v6 - appended;
        if (v6 <= appended)
          break;
        v13 = v31;
        if (v9)
        {
          v14 = v31 + v10;
          v9 = malloc_type_realloc(v9, 4 * (v31 + v10 + 1), 0x100004052888210uLL);
          v15 = ptr;
          if (v31 >= 1)
          {
            for (i = 0; i < v31; ++i)
              *((_DWORD *)v9 + v10 + i) = v15[i] + v12;
          }
          *((_DWORD *)v9 + v14) = appended - 1;
          free(v15);
          ptr = 0;
          v10 = v14 + 1;
        }
        else
        {
          v17 = ptr;
          ptr = 0;
          v10 = v31 + 1;
          v9 = malloc_type_realloc(v17, 4 * (v31 + 1), 0x100004052888210uLL);
          *((_DWORD *)v9 + v13) = appended - 1;
        }
        LOWORD(v18) = 0;
        if (a2 && appended >= 1)
        {
          if (*(_QWORD *)(a2 + 48) < appended)
          {
            LOWORD(v18) = 0;
          }
          else
          {
            v18 = *(_QWORD *)(a2 + 24);
            if (v18)
            {
              v18 = *(_QWORD *)(v18 + 24 * (appended - 1));
              if (v18)
                LOWORD(v18) = *(_WORD *)(v18 + 8);
            }
          }
        }
        chars = v18;
        CFStringAppendCharacters(Mutable, &chars, 1);
      }
      if (v9)
      {
        v19 = v31 + v10;
        v20 = v31 + v10 + 1;
        v21 = (__CFString *)malloc_type_realloc(v9, 4 * v20, 0x100004052888210uLL);
        v22 = ptr;
        if (v31 >= 1)
        {
          for (j = 0; j < v31; ++j)
            *((_DWORD *)&v21->isa + v10 + j) = v22[j] + v12;
        }
        *((_DWORD *)&v21->isa + v19) = appended - 1;
        v3 = v29;
        *((_DWORD *)v29 + 4) = v20;
        free(v22);
      }
      else
      {
        v24 = ptr;
        v25 = v31;
        v3 = v29;
        *((_DWORD *)v29 + 4) = v31;
        v21 = (__CFString *)malloc_type_realloc(v24, 4 * ((int)v25 + 1), 0x100004052888210uLL);
        *((_DWORD *)&v21->isa + v25) = appended - 1;
      }
      v5 = v27;
      v4 = v28;
      v3[1] = v21;
    }
    else
    {
      Mutable = 0;
    }
    *v3 = Mutable;
    *(_QWORD *)(v5 + 16) = v3[2];
    *(_OWORD *)v5 = *(_OWORD *)v3;
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CGPDFLayoutGetStringRangeFromCursorRange(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, uint64_t a6, _BYTE *a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v18;
  uint64_t PairedIndexForCursor;
  int v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  char v27;
  uint64_t StringRangeFromRange;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  CGFloat *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  CGFloat *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  __CFString *v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a2;
  *a7 = 1;
  v9 = -1;
  if ((a2 & 0x8000000000000000) == 0 && (a3 & 0x8000000000000000) == 0)
  {
    v12 = a2 + a3;
    if (a2 + a3 <= *(_QWORD *)(a1 + 48))
    {
      if (!*(_BYTE *)(a1 + 72))
        return CGPDFLayoutGetStringRangeFromRange(a1, v8, a3);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      CGPDFLayoutGetRTLData(&v84, a1);
      if ((int)v86 <= 0)
        return CGPDFLayoutGetStringRangeFromRange(a1, v8, a3);
      v18 = v12 - 1;
      v82 = v12 - 1;
      v83 = v8;
      if (v12)
      {
        if (v8 != *(_QWORD *)(a1 + 48))
        {
          v75 = (int)v86;
          v81 = 0;
          v80 = 0;
          if (a4)
          {
            PairedIndexForCursor = CGPDFLayoutGetPairedIndexForCursor(a1, &v83, 1, a6, (_BYTE *)&v81 + 1, (BOOL *)&v80 + 1, *a4, a4[1], a8);
            v20 = HIBYTE(v80);
            v8 = v83;
            v79 = PairedIndexForCursor;
            if (HIBYTE(v80))
              v21 = PairedIndexForCursor == v83;
            else
              v21 = 0;
            v22 = v21;
            if (a5)
            {
LABEL_16:
              v23 = CGPDFLayoutGetPairedIndexForCursor(a1, &v82, 0, a6, &v81, (BOOL *)&v80, *a5, a5[1], a8);
              v24 = v80;
              v18 = v82;
              if ((_BYTE)v80)
                v25 = v23 == v82;
              else
                v25 = 0;
              v26 = v25;
              if (v25)
                v27 = 1;
              else
                v27 = v22;
              if ((v27 & 1) == 0)
              {
                if (v79 == v82 && v23 == v8)
                  return -1;
                v26 = 0;
                if (v8 == v82 && v79 == v23)
                  return -1;
              }
LABEL_35:
              v70 = v20;
              v76 = v26;
              v74 = v23;
              StringRangeFromRange = CGPDFLayoutGetStringRangeFromRange(a1, v8, 1);
              v31 = v30;
              if (v8 == v18)
              {
                v32 = CGPDFLayoutReadsLeftToRightAtIndex(a1, v8);
                v33 = StringRangeFromRange;
                v34 = v31;
                v35 = StringRangeFromRange;
              }
              else
              {
                v33 = CGPDFLayoutGetStringRangeFromRange(a1, v18, 1);
                v34 = v36;
                v35 = StringRangeFromRange;
                if (StringRangeFromRange <= v33)
                {
                  v38 = StringRangeFromRange;
                  v35 = v33;
                  goto LABEL_41;
                }
                v32 = 0;
              }
              v37 = v34;
              *a7 = v32;
              v38 = v33;
              v34 = v31;
              v31 = v37;
              v33 = v35;
LABEL_41:
              v9 = -1;
              if ((v38 & 0x8000000000000000) == 0 && (v33 & 0x8000000000000000) == 0)
              {
                if ((v22 & 1) != 0)
                  goto LABEL_44;
                if (HIBYTE(v81) && v70)
                {
                  v39 = 0;
                  goto LABEL_48;
                }
                if (v8 == v18)
                {
LABEL_44:
                  v39 = 1;
LABEL_48:
                  v40 = v8;
                  goto LABEL_49;
                }
                v72 = v34;
                v58 = v35;
                v59 = v38;
                v60 = CGPDFLayoutGetStringRangeFromRange(a1, v79, 1);
                v38 = v59;
                if (v60 < v59)
                {
                  v40 = v8;
                  v35 = v58;
                  v34 = v72;
                }
                else
                {
                  v35 = v58;
                  v34 = v72;
                  if (v60 <= v58)
                  {
                    if (*a7)
                    {
                      v31 = v61;
                    }
                    else
                    {
                      v34 = v61;
                      v35 = v60;
                    }
                    if (*a7)
                      v38 = v60;
                    v39 = 1;
                    v40 = v79;
                    v79 = v8;
LABEL_49:
                    if ((v76 & 1) != 0)
                    {
                      v41 = 1;
                    }
                    else
                    {
                      if (!(_BYTE)v81 || !v24)
                      {
                        if (v8 == v18)
                        {
                          v41 = 1;
                        }
                        else
                        {
                          v62 = v39;
                          v73 = v34;
                          v78 = v40;
                          v63 = v35;
                          v41 = 1;
                          v64 = v38;
                          v65 = CGPDFLayoutGetStringRangeFromRange(a1, v74, 1);
                          v38 = v64;
                          if (v65 < v64)
                          {
                            v8 = v18;
                            v35 = v63;
                            v40 = v78;
                            v34 = v73;
                            v39 = v62;
                          }
                          else
                          {
                            v35 = v63;
                            v40 = v78;
                            v34 = v73;
                            v39 = v62;
                            if (v65 > v63)
                              goto LABEL_54;
                            if (*a7)
                            {
                              v34 = v66;
                              v35 = v65;
                            }
                            else
                            {
                              v31 = v66;
                            }
                            if (!*a7)
                              v38 = v65;
                            v41 = 1;
                            v8 = v74;
                            v74 = v18;
                          }
                        }
LABEL_55:
                        if (*a7)
                          v42 = v41;
                        else
                          v42 = v39;
                        v43 = v35 + v34;
                        v44 = v35 + v34 - 1;
                        v9 = v38 + v31;
                        if (v38 + v31 > v35)
                        {
                          v9 = v38;
                          goto LABEL_121;
                        }
                        if (*a7)
                          v45 = v39;
                        else
                          v45 = v41;
                        if ((v45 & 1) == 0)
                        {
                          v46 = *(int *)(v85 + 4 * v9);
                          if ((_DWORD)v46 != -1)
                          {
                            if (*a7)
                              v47 = a4;
                            else
                              v47 = a5;
                            if (*a7)
                              v48 = v79;
                            else
                              v48 = v74;
                            if (*a7)
                              v49 = v40;
                            else
                              v49 = v8;
                            if (v48 == v46)
                            {
LABEL_83:
                              if ((v42 & 1) == 0)
                              {
                                v53 = *(int *)(v85 + 4 * (v35 - 1));
                                if ((_DWORD)v53 != -1)
                                {
                                  v54 = *a7 == 0;
                                  if (*a7)
                                    v55 = a5;
                                  else
                                    v55 = a4;
                                  if (*a7)
                                    v56 = v74;
                                  else
                                    v56 = v79;
                                  if (v54)
                                    v57 = v40;
                                  else
                                    v57 = v8;
                                  if (v56 == v53)
                                  {
                                    v44 = v35 - 1;
                                  }
                                  else if (v43 < v75)
                                  {
                                    v67 = *(int *)(v85 + 4 * v43);
                                    if ((_DWORD)v67 != -1
                                      && v56 != v67
                                      && !CGPDFLayoutPointSelectsFirstIndex(a1, v57, v56, *v55, v55[1], a8))
                                    {
                                      v68 = CGPDFLayoutGetStringRangeFromRange(a1, v56, 1);
                                      if ((v68 & 0x8000000000000000) == 0)
                                        v44 = v69 + v68 - 1;
                                    }
                                  }
                                }
                              }
LABEL_121:
                              if (v44 >= v9)
                                return v9;
                              return -1;
                            }
                            if (v38 >= 1)
                            {
                              v50 = *(int *)(v85 + 4 * v38 - 4);
                              if ((_DWORD)v50 != -1 && v48 != v50)
                              {
                                v71 = v42;
                                v77 = v40;
                                v9 = v38;
                                v51 = v35;
                                if (!CGPDFLayoutPointSelectsFirstIndex(a1, v49, v48, *v47, v47[1], a8))
                                {
                                  v52 = CGPDFLayoutGetStringRangeFromRange(a1, v48, 1);
                                  if (v52 >= 0)
                                    v9 = v52;
                                }
                                v35 = v51;
                                v40 = v77;
                                v42 = v71;
                                goto LABEL_83;
                              }
                            }
                          }
                        }
                        v9 = v38;
                        goto LABEL_83;
                      }
                      v41 = 0;
                    }
LABEL_54:
                    v8 = v18;
                    goto LABEL_55;
                  }
                  v40 = v8;
                }
                v39 = 1;
                goto LABEL_49;
              }
              return v9;
            }
          }
          else
          {
            v20 = 1;
            HIBYTE(v81) = 1;
            v79 = v8;
            v22 = 1;
            if (a5)
              goto LABEL_16;
          }
          v24 = 1;
          LOBYTE(v81) = 1;
          v26 = 1;
          v23 = v18;
          goto LABEL_35;
        }
      }
    }
  }
  return v9;
}

int64x2_t *CGPDFLayoutCreateIndexSetForStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int64x2_t *v3;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t CharacterIndexAtUnicodeIndex;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = 0;
  if (!a1 || (a2 & 0x8000000000000000) != 0)
    return v3;
  if (!*(_BYTE *)(a1 + 72))
  {
    v3 = 0;
    v7 = a2 + a3;
LABEL_34:
    CharacterIndexAtUnicodeIndex = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(_QWORD *)(a1 + 56), a2);
    v22 = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(_QWORD *)(a1 + 56), v7);
    if ((CharacterIndexAtUnicodeIndex & 0x8000000000000000) == 0 && v22 <= *(_QWORD *)(a1 + 48))
    {
      v23 = v22 - CharacterIndexAtUnicodeIndex;
      if (v22 > CharacterIndexAtUnicodeIndex)
      {
        v24 = CharacterIndexAtUnicodeIndex;
        return CPIndexSetCreateWithRange(v24, v23);
      }
      if (v22 == CharacterIndexAtUnicodeIndex)
      {
        v24 = CharacterIndexAtUnicodeIndex;
        v23 = 1;
        return CPIndexSetCreateWithRange(v24, v23);
      }
    }
    return v3;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  CGPDFLayoutGetRTLData(&v26, a1);
  v3 = 0;
  v7 = a2 + a3;
  v8 = (int)v28;
  v9 = a3 - 1;
  if (a3 >= 1 && v7 <= (int)v28)
  {
    v10 = *(int *)(v27 + 4 * a2);
    v11 = -v10;
    if ((unint64_t)a3 >= 2)
    {
      v3 = 0;
      v12 = (int *)(v27 + 4 * a2 + 4);
      v13 = *(int *)(v27 + 4 * a2);
      while (1)
      {
        v15 = *v12++;
        v14 = v15;
        v16 = v10 + 1;
        if (v13 - 1 > v15 || v16 < v14)
        {
          if (v13 < 0 || v10 >= *(_QWORD *)(a1 + 48))
            return v3;
          v18 = v11 + v10;
          if (v3)
            CPIndexSetAddRange((uint64_t)v3, v13, v18 + 1);
          else
            v3 = CPIndexSetCreateWithRange(v13, v18 + 1);
          v10 = v14;
        }
        else
        {
          if (v16 == v14)
            v19 = v14;
          else
            v19 = v10;
          if (v13 - 1 != v14)
          {
            v14 = v13;
            v10 = v19;
          }
        }
        v11 = -v14;
        v13 = v14;
        if (!--v9)
          goto LABEL_28;
      }
    }
    v3 = 0;
    v14 = *(int *)(v27 + 4 * a2);
LABEL_28:
    if (v14 < 0 || v10 >= *(_QWORD *)(a1 + 48))
      return v3;
    v20 = v11 + v10;
    if (v3)
      CPIndexSetAddRange((uint64_t)v3, v14, v20 + 1);
    else
      v3 = CPIndexSetCreateWithRange(v14, v20 + 1);
  }
  if (v7 > v8)
    goto LABEL_34;
  return v3;
}

int64x2_t *CGPDFLayoutCopyIndexSetRemovingGraphics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Range;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a2 + 40))
    CPIndexSetNormalize(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  do
  {
    Range = CPIndexSetGetRange(a2, v7);
    if (v10 < 1)
      goto LABEL_35;
    v11 = Range + v10;
    v12 = 1;
    while (2)
    {
      v13 = 24 * Range;
      v14 = Range;
      while (1)
      {
        if (a1)
        {
          if ((v14 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > v14)
          {
            v15 = *(_QWORD *)(a1 + 24);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + v13);
              if (v16)
              {
                if (*(__int16 *)(v16 + 8) == -4)
                  break;
              }
            }
          }
        }
LABEL_17:
        if ((v12 & 1) != 0)
          v6 = v14;
        v8 = v14;
        v13 += 24;
        ++v14;
        v12 = 0;
        if (v14 >= v11)
        {
          if (v11 <= Range + 1)
            v18 = Range + 1;
          else
            v18 = v11;
          v8 = v18 - 1;
          goto LABEL_32;
        }
      }
      v17 = *(_DWORD *)(v15 + v13 + 16);
      if (((v17 | v12) & 1) != 0)
      {
        if ((v17 & 1) == 0)
          goto LABEL_25;
        goto LABEL_17;
      }
      if (v5)
        CPIndexSetAddRange((uint64_t)v5, v6, v8 - v6 + 1);
      else
        v5 = CPIndexSetCreateWithRange(v6, v8 - v6 + 1);
      v12 = 1;
LABEL_25:
      Range = v14 + 1;
      if (v14 + 1 < v11)
        continue;
      break;
    }
    if ((v12 & 1) == 0)
    {
      v18 = v8 + 1;
LABEL_32:
      if (v5)
        CPIndexSetAddRange((uint64_t)v5, v6, v18 - v6);
      else
        v5 = CPIndexSetCreateWithRange(v6, v18 - v6);
    }
LABEL_35:
    ++v7;
  }
  while (v7 != v4);
  return v5;
}

uint64_t CGPDFLayoutGetRangeFromStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t CharacterIndexAtUnicodeIndex;
  uint64_t v16;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3 - 1;
  if (a3 < 1)
    return -1;
  if (*(_BYTE *)(a1 + 72))
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    CGPDFLayoutGetRTLData(&v18, a1);
    v7 = a2 + a3;
    if ((uint64_t)(a2 + a3) <= (int)v20)
    {
      v8 = *(int *)(v19 + 4 * a2);
      if ((unint64_t)a3 >= 2)
      {
        v9 = (int *)(v19 + 4 * a2 + 4);
        v10 = *(int *)(v19 + 4 * a2);
        do
        {
          v12 = *v9++;
          v11 = v12;
          if (v8 <= v12)
            v13 = v11;
          else
            v13 = v8;
          v14 = v10 <= v11;
          if (v10 >= v11)
            v10 = v11;
          if (v14)
            v8 = v13;
          --v3;
        }
        while (v3);
        if (v10 < 0)
          return -1;
        goto LABEL_23;
      }
      v10 = *(int *)(v19 + 4 * a2);
      if ((v8 & 0x8000000000000000) == 0)
      {
LABEL_23:
        if (v8 < *(_QWORD *)(a1 + 48))
          return v10;
        else
          return -1;
      }
      return -1;
    }
  }
  else
  {
    v7 = a2 + a3;
  }
  CharacterIndexAtUnicodeIndex = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(_QWORD *)(a1 + 56), a2);
  v16 = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(_QWORD *)(a1 + 56), v7);
  if (CharacterIndexAtUnicodeIndex < 0)
    return -1;
  if (v16 <= *(_QWORD *)(a1 + 48) && v16 > CharacterIndexAtUnicodeIndex)
    return CharacterIndexAtUnicodeIndex;
  else
    return -1;
}

BOOL CGPDFLayoutExtendRangeToWordBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t Range;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t FirstIndex;
  uint64_t LastIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t StringRangeFromRange;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *StringForRanges;
  const __CFString *v26;
  CFIndex Length;
  __CFStringTokenizer *v28;
  __CFStringTokenizer *v29;
  CFStringTokenizerTokenType v30;
  CFIndex location;
  BOOL v32;
  int v33;
  CFStringTokenizerTokenType v34;
  CFRange CurrentTokenRange;
  uint64_t v36;
  uint64_t RangeFromStringRange;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  CFIndex v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFRange v62;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a2 + 40))
    CPIndexSetNormalize(a2);
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    return 0;
  Range = CPIndexSetGetRange(a2, 0);
  v58 = v10;
  v59 = Range;
  v11 = CPIndexSetGetRange(a2, v8 - 1);
  v13 = v12;
  FirstIndex = CPIndexSetGetFirstIndex(a2);
  LastIndex = CPIndexSetGetLastIndex(a2);
  v16 = 0;
  if (LastIndex != -1 && FirstIndex != -1 && FirstIndex <= LastIndex)
  {
    v56 = v13;
    v17 = LastIndex + 1 - FirstIndex;
    v60 = FirstIndex;
    v61 = v17;
    v18 = a4 ? a3 : a3 - (a3 - FirstIndex > LastIndex + 1 - a3);
    v19 = a4 ? a4 : 1;
    StringRangeFromRange = CGPDFLayoutGetStringRangeFromRange(a1, v18, v19);
    v57 = v21;
    v22 = CGPDFLayoutGetStringRangeFromRange(a1, FirstIndex, v17);
    v24 = v23;
    v16 = 1;
    StringForRanges = CGPDFLayoutCreateStringForRanges(a1, (uint64_t)&v60, 1);
    if (StringForRanges)
    {
      v26 = StringForRanges;
      v55 = v11;
      if (StringRangeFromRange < 0)
        goto LABEL_44;
      if (v24 < 1)
        goto LABEL_44;
      Length = CFStringGetLength(StringForRanges);
      v62.location = 0;
      v62.length = Length;
      v28 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, v62, 4uLL, 0);
      if (!v28)
        goto LABEL_44;
      v29 = v28;
      v54 = Length;
      v30 = CFStringTokenizerGoToTokenAtIndex(v28, StringRangeFromRange - v22);
      location = CFStringTokenizerGetCurrentTokenRange(v29).location;
      if (v30)
        v32 = location < 1;
      else
        v32 = 1;
      v33 = v32;
      if (!v32)
      {
        v32 = v24 <= location;
        v24 -= location;
        if (v32)
        {
          CFRelease(v29);
          goto LABEL_44;
        }
        v22 += location;
      }
      if ((v22 & 0x8000000000000000) != 0
        || (v34 = CFStringTokenizerGoToTokenAtIndex(v29, ~(v22 + v24) + v57 + StringRangeFromRange + v54),
            CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v29),
            !v34)
        || (v36 = v54 - (CurrentTokenRange.length + CurrentTokenRange.location), v36 < 1))
      {
        CFRelease(v29);
        if (v33)
          goto LABEL_44;
      }
      else
      {
        v24 -= v36;
        CFRelease(v29);
        if (v24 < 1)
          goto LABEL_44;
      }
      RangeFromStringRange = CGPDFLayoutGetRangeFromStringRange(a1, v22, v24);
      if ((RangeFromStringRange & 0x8000000000000000) == 0)
      {
        v39 = RangeFromStringRange - v60;
        if (RangeFromStringRange - v60 < 1)
        {
          v42 = v55;
          v43 = v56;
        }
        else
        {
          v40 = v39 + v59;
          v41 = v58 - v39;
          if (v58 - v39 < 1)
          {
            v40 = -1;
            v41 = 0;
          }
          v42 = v55;
          v43 = v56;
          if (*(uint64_t *)(a2 + 16) >= 1)
          {
            v44 = *(uint64_t **)(a2 + 32);
            *v44 = v40;
            v44[1] = v41;
            *(_BYTE *)(a2 + 40) = 1;
          }
          if (v8 == 1)
          {
            v42 = v40;
            v43 = v41;
          }
        }
        if (v42 < 0 || (v46 = v60 - (RangeFromStringRange + v38) + v61, v46 < 1))
        {
          CFRelease(v26);
          if (v39 < 1)
            return 1;
        }
        else
        {
          if (*(_QWORD *)(a2 + 16) >= v8)
          {
            v47 = v43 - v46;
            if (v47 >= 1)
            {
              v48 = v42;
            }
            else
            {
              v47 = 0;
              v48 = -1;
            }
            v49 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 16 * (v8 - 1));
            *v49 = v48;
            v49[1] = v47;
            *(_BYTE *)(a2 + 40) = 1;
          }
          CFRelease(v26);
        }
        v50 = CPIndexSetGetFirstIndex(a2);
        v51 = CPIndexSetGetLastIndex(a2);
        return v50 != -1 && v50 <= v51 && v51 != -1;
      }
LABEL_44:
      CFRelease(v26);
      return 1;
    }
  }
  return v16;
}

uint64_t CGPDFLayoutGetStringRangeFromRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t UnicodeRangeAtCharacterIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 < 1)
    return -1;
  v23 = v3;
  v24 = v4;
  if (*(_BYTE *)(a1 + 72)
    && (v20 = 0, v21 = 0, v22 = 0, CGPDFLayoutGetRTLData(&v20, a1), v8 = v22, (int)v22 >= 1))
  {
    v9 = 0;
    v10 = a2 + a3;
    while (1)
    {
      v11 = *(int *)(v21 + 4 * v9);
      if (a2 <= v11 && v10 > v11)
        break;
      if (v22 == ++v9)
      {
        v13 = (v22 - 1);
        goto LABEL_25;
      }
    }
    v13 = (v22 - 1);
    if (v9 < v13)
    {
      while (1)
      {
        v18 = *(int *)(v21 + 4 * v13);
        if (a2 <= v18 && v10 > v18)
          break;
        if ((uint64_t)--v13 <= (uint64_t)v9)
        {
          v8 = v9;
          v13 = v9;
          goto LABEL_25;
        }
      }
    }
    v8 = v9;
LABEL_25:
    if ((uint64_t)v13 < v8)
      return -1;
    else
      return v8;
  }
  else
  {
    UnicodeRangeAtCharacterIndex = CPMultiUnicodesGetUnicodeRangeAtCharacterIndex(*(_QWORD *)(a1 + 56), a2);
    v15 = CPMultiUnicodesGetUnicodeRangeAtCharacterIndex(*(_QWORD *)(a1 + 56), a2 + a3 - 1);
    if (UnicodeRangeAtCharacterIndex >= 0 && v15 + v16 > UnicodeRangeAtCharacterIndex)
      return UnicodeRangeAtCharacterIndex;
    else
      return -1;
  }
}

__CFString *CGPDFLayoutCreateStringForRanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *Mutable;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t appended;
  uint64_t v12;
  uint64_t v13;
  uint64_t RangeInCharacterRange;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  CFIndex v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFArray *v23;
  uint64_t *ValueAtIndex;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const UniChar *v28;
  uint64_t v29;
  const __CFArray *v30;
  _QWORD *v31;
  uint64_t v32;
  const UniChar *v33;
  const UniChar *v34;
  int v35;
  const UniChar *v36;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  UniChar v46;
  __int16 v47;
  UniChar chars;

  Mutable = 0;
  v47 = 32;
  if (a1)
  {
    v4 = a2;
    if (a2)
    {
      v41 = a3 - 1;
      if (a3 >= 1)
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        if (Mutable)
        {
          v6 = 0;
          v39 = *(unsigned __int8 *)(a1 + 72);
          v46 = 13;
          v40 = v4;
          do
          {
            v43 = v6;
            v7 = (uint64_t *)(v4 + 16 * v6);
            v8 = *v7;
            v9 = v7[1];
            if (v39)
            {
              if (v9)
              {
                v10 = v8 + v9;
                while (1)
                {
                  appended = CPTextServicesAppendTextLine(Mutable, (_QWORD *)a1, v8, v9, 0, 0);
                  v9 = v10 - appended;
                  if (v10 <= appended)
                    break;
                  v8 = appended;
                  if (appended >= 1 && *(_QWORD *)(a1 + 48) >= appended && (v12 = *(_QWORD *)(a1 + 24)) != 0)
                  {
                    v13 = *(_QWORD *)(v12 + 24 * (appended - 1));
                    if (v13)
                      LOWORD(v13) = *(_WORD *)(v13 + 8);
                  }
                  else
                  {
                    LOWORD(v13) = 0;
                  }
                  chars = v13;
                  CFStringAppendCharacters(Mutable, &chars, 1);
                }
              }
            }
            else
            {
              RangeInCharacterRange = CPMultiUnicodesGetRangeInCharacterRange(*(_QWORD *)(a1 + 56), v8, v9);
              v16 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
              v17 = v15 == 0;
              if (v16 && v17)
                v18 = 0;
              else
                v18 = RangeInCharacterRange;
              if (v16 && v17)
                v19 = 0;
              else
                v19 = RangeInCharacterRange + v15;
              if (v18 <= v19)
              {
                v20 = v8 - 1;
                v44 = v9 + v8;
                do
                {
                  v21 = v20;
                  v20 = v44;
                  if (v18 < v19)
                  {
                    v22 = *(_QWORD *)(a1 + 56);
                    if (v22
                      && (v23 = *(const __CFArray **)(v22 + 24)) != 0
                      && (ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v23, v18)) != 0)
                    {
                      v20 = *ValueAtIndex;
                    }
                    else
                    {
                      v20 = 0;
                    }
                  }
                  v25 = v21 + 1;
                  if (v21 + 1 < v20)
                  {
                    v26 = 24 * v21 + 24;
                    do
                    {
                      if (v25 >= *(_QWORD *)(a1 + 48))
                        break;
                      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v26);
                      if (v27)
                      {
                        v45 = *(_WORD *)(v27 + 8);
                        v28 = v45 == 65532 ? (const UniChar *)&v47 : &v45;
                      }
                      else
                      {
                        v45 = 0;
                        v28 = &v45;
                      }
                      CFStringAppendCharacters(Mutable, v28, 1);
                      ++v25;
                      v26 += 24;
                    }
                    while (v20 != v25);
                  }
                  if (v18 < v19)
                  {
                    v29 = *(_QWORD *)(a1 + 56);
                    if (v29)
                    {
                      v30 = *(const __CFArray **)(v29 + 24);
                      if (v30)
                      {
                        v31 = CFArrayGetValueAtIndex(v30, v18);
                        if (v31)
                        {
                          v32 = v31[2];
                          if (v32)
                          {
                            v33 = (const UniChar *)v31[3];
                            v34 = v33;
                            do
                            {
                              v35 = *(__int16 *)v34++;
                              if (v35 == -4)
                                v36 = (const UniChar *)&v47;
                              else
                                v36 = v33;
                              CFStringAppendCharacters(Mutable, v36, 1);
                              v33 = v34;
                              --v32;
                            }
                            while (v32);
                          }
                        }
                      }
                    }
                  }
                }
                while (v18++ != v19);
              }
            }
            if (v43 < v41)
              CFStringAppendCharacters(Mutable, &v46, 1);
            v6 = v43 + 1;
            v4 = v40;
          }
          while (v43 + 1 != a3);
        }
      }
    }
  }
  return Mutable;
}

uint64_t CGPDFLayoutGetPairedIndexForCursor(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, _BYTE *a5, BOOL *a6, double a7, double a8, double a9)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t NodeContainingTextRange;
  uint64_t v26;
  uint64_t IndexFromStringIndex;
  double HitTestRect;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double Rotation;
  double v37;
  double v38;
  __double2 v39;
  uint64_t TextRange;
  uint64_t v42;
  uint64_t v43;
  char StringDirectionFromCursorRange;
  int64_t v45;
  _DWORD *NodeBefore;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  __double2 v61;
  double v62;
  double v63;
  double v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t StringRangeFromRange;
  uint64_t v69;
  uint64_t NodeAfter;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double CharacterBounds;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  __double2 v87;
  double v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  double v100;

  v18 = *a2;
  if (v18 < 0 || *(_QWORD *)(a1 + 48) <= v18)
  {
    LOWORD(v19) = 0;
    if (a3)
      goto LABEL_6;
LABEL_18:
    if ((v19 & 8) != 0)
      goto LABEL_25;
    if ((v19 & 0x400) == 0)
      goto LABEL_31;
    v20 = v18 - 1;
    if (v18 < 1)
      goto LABEL_31;
    if (*(_QWORD *)(a1 + 48) < v18)
      goto LABEL_31;
    v23 = *(_QWORD *)(a1 + 24);
    if (!v23 || (*(_BYTE *)(v23 + 24 * v20 + 16) & 8) == 0)
      goto LABEL_31;
    goto LABEL_24;
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (v19)
    LODWORD(v19) = *(_DWORD *)(v19 + 24 * v18 + 16);
  if (!a3)
    goto LABEL_18;
LABEL_6:
  if ((v19 & 0x404) == 0x400)
  {
    v20 = v18 + 1;
    if (v18 < -1 || v20 >= *(_QWORD *)(a1 + 48))
      goto LABEL_30;
    v22 = *(_QWORD *)(a1 + 24);
    if (!v22 || (*(_BYTE *)(v22 + 24 * v20 + 16) & 4) == 0)
      goto LABEL_30;
LABEL_24:
    *a2 = v20;
    v18 = v20;
    goto LABEL_25;
  }
  if ((v19 & 4) == 0)
    goto LABEL_30;
LABEL_25:
  v24 = *(_DWORD **)(a1 + 104);
  NodeContainingTextRange = CGPDFNodeGetNodeContainingTextRange((uint64_t)v24, v18, 1);
  if (!NodeContainingTextRange)
  {
LABEL_29:
    v18 = *a2;
    if (a3)
    {
LABEL_30:
      IndexFromStringIndex = v18 - (v18 > 0);
LABEL_34:
      *a5 = 1;
LABEL_35:
      *a6 = 1;
      return IndexFromStringIndex;
    }
LABEL_31:
    if (v18 + 1 >= *(_QWORD *)(a1 + 48))
      IndexFromStringIndex = v18;
    else
      IndexFromStringIndex = v18 + 1;
    goto LABEL_34;
  }
  v26 = NodeContainingTextRange;
  while (*(_DWORD *)v26 != 514)
  {
    v26 = *(_QWORD *)(v26 + 8);
    if (!v26)
      goto LABEL_29;
  }
  HitTestRect = CGPDFNodeGetHitTestRect(v26, a9);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  Rotation = CGPDFNodeGetRotation(v26);
  v37 = a8;
  v38 = a7;
  if (Rotation != 0.0)
  {
    v39 = __sincos_stret(Rotation);
    v38 = a8 * v39.__sinval + v39.__cosval * a7 + 0.0;
    v37 = a8 * v39.__cosval - v39.__sinval * a7 + 0.0;
  }
  if (v31 > v37 || v37 > v31 + v35)
  {
    *a5 = 0;
    goto LABEL_45;
  }
  if (a3 && v38 <= HitTestRect + v33)
  {
    *a5 = 1;
  }
  else
  {
    *a5 = (v38 >= HitTestRect) & ~(_BYTE)a3;
    if (((v38 >= HitTestRect) & ~(_BYTE)a3) == 0)
      goto LABEL_45;
  }
  IndexFromStringIndex = *a2;
  CharacterBounds = CGPDFLayoutGetCharacterBounds(a1, *a2);
  if (a3 && v38 >= CharacterBounds - a9 || (a3 & 1) == 0 && v38 <= CharacterBounds + v78 + a9)
    goto LABEL_35;
LABEL_45:
  TextRange = CGPDFNodeGetTextRange(v26);
  v43 = v42;
  StringDirectionFromCursorRange = CGPDFLayoutGetStringDirectionFromCursorRange(a1, TextRange, v42);
  if (a3)
  {
    if ((StringDirectionFromCursorRange & 1) != 0 || !*a5)
      goto LABEL_54;
LABEL_70:
    if (*(_BYTE *)(a1 + 72))
    {
      StringRangeFromRange = CGPDFLayoutGetStringRangeFromRange(a1, TextRange, v43);
      *a2 = CGPDFLayoutGetIndexFromStringIndex(a1, v69 + StringRangeFromRange - 1);
    }
    NodeAfter = CGPDFNodeGetNodeAfter(v24, (_DWORD *)v26, 514, a4);
    if (!NodeAfter)
      goto LABEL_75;
    v71 = (_DWORD *)NodeAfter;
    IndexFromStringIndex = CGPDFNodeGetTextRange(NodeAfter);
    v73 = v72;
    v74 = CGPDFLayoutGetStringRangeFromRange(a1, IndexFromStringIndex, v72);
    v76 = v74;
    if (a3)
    {
      *a6 = 0;
LABEL_100:
      v94 = a1;
      v93 = v76;
      return CGPDFLayoutGetIndexFromStringIndex(v94, v93);
    }
    v96 = v75;
    v79 = v74;
    v98 = HitTestRect;
    v100 = CGPDFNodeGetHitTestRect((uint64_t)v71, a9);
    v81 = v80;
    v83 = v82;
    v85 = v84;
    v86 = CGPDFNodeGetRotation((uint64_t)v71);
    if (v86 != 0.0)
    {
      v87 = __sincos_stret(v86);
      v88 = a8 * v87.__cosval - v87.__sinval * a7;
      a7 = a8 * v87.__sinval + v87.__cosval * a7 + 0.0;
      a8 = v88 + 0.0;
    }
    if (v81 <= a8 && a8 <= v81 + v85)
    {
      *a6 = a7 <= v100 + v83;
      if (a7 > v100 + v83)
        goto LABEL_99;
      if (a7 >= CGPDFLayoutGetCharacterBounds(a1, IndexFromStringIndex) - a9)
        goto LABEL_102;
      if (!*a5)
        goto LABEL_92;
      if (vabdd_f64(v38 - v98, v33) > vabdd_f64(v100, a7))
      {
        *a5 = 0;
        if (*a6)
        {
LABEL_92:
          v89 = CGPDFLayoutGetStringDirectionFromCursorRange(a1, IndexFromStringIndex, v73);
          v76 = v79;
          if ((v89 & 1) == 0)
          {
            IndexFromStringIndex = CGPDFLayoutGetIndexFromStringIndex(a1, v96 + v79 - 1);
            *a2 = IndexFromStringIndex;
            *a5 = 1;
            v90 = CGPDFNodeGetNodeAfter(v24, v71, 514, a4);
            *a6 = 0;
            if (!v90)
              return IndexFromStringIndex;
            v91 = CGPDFNodeGetTextRange(v90);
            v76 = CGPDFLayoutGetStringRangeFromRange(a1, v91, v92);
          }
          goto LABEL_100;
        }
LABEL_99:
        v76 = v79;
        goto LABEL_100;
      }
    }
    *a6 = 0;
    goto LABEL_99;
  }
  if ((StringDirectionFromCursorRange & 1) != 0 || !*a5)
    goto LABEL_70;
LABEL_54:
  if (*(_BYTE *)(a1 + 72))
  {
    v45 = CGPDFLayoutGetStringRangeFromRange(a1, TextRange, v43);
    *a2 = CGPDFLayoutGetIndexFromStringIndex(a1, v45);
  }
  NodeBefore = CGPDFNodeGetNodeBefore(v24, (_DWORD *)v26, 514, a4);
  if (!NodeBefore)
  {
LABEL_75:
    IndexFromStringIndex = *a2;
    *a6 = 0;
    return IndexFromStringIndex;
  }
  v47 = NodeBefore;
  v48 = CGPDFNodeGetTextRange((uint64_t)NodeBefore);
  v99 = v49;
  v51 = CGPDFLayoutGetStringRangeFromRange(a1, v48, v49);
  if (a3)
  {
    v52 = v50;
    v97 = HitTestRect;
    v53 = CGPDFNodeGetHitTestRect((uint64_t)v47, a9);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v60 = CGPDFNodeGetRotation((uint64_t)v47);
    if (v60 != 0.0)
    {
      v61 = __sincos_stret(v60);
      v62 = a8 * v61.__cosval - v61.__sinval * a7;
      a7 = a8 * v61.__sinval + v61.__cosval * a7 + 0.0;
      a8 = v62 + 0.0;
    }
    if (v55 > a8 || a8 > v55 + v59)
      goto LABEL_95;
    *a6 = a7 >= v53;
    if (a7 < v53)
      goto LABEL_96;
    v95 = v51;
    IndexFromStringIndex = v99 + v48 - 1;
    v63 = CGPDFLayoutGetCharacterBounds(a1, IndexFromStringIndex);
    if (a7 > v63 + v64 + a9)
    {
      v51 = v95;
      if (!*a5)
        goto LABEL_67;
      if (vabdd_f64(v97, v38) > vabdd_f64(a7 - v53, v57))
      {
        *a5 = 0;
        if (*a6)
        {
LABEL_67:
          if ((CGPDFLayoutGetStringDirectionFromCursorRange(a1, v48, v99) & 1) == 0)
          {
            IndexFromStringIndex = CGPDFLayoutGetIndexFromStringIndex(a1, v95);
            *a2 = IndexFromStringIndex;
            *a5 = 1;
            v65 = CGPDFNodeGetNodeBefore(v24, v47, 514, a4);
            *a6 = 0;
            if (!v65)
              return IndexFromStringIndex;
            v66 = CGPDFNodeGetTextRange((uint64_t)v65);
            v51 = CGPDFLayoutGetStringRangeFromRange(a1, v66, v67);
            goto LABEL_97;
          }
        }
LABEL_96:
        v50 = v52;
        goto LABEL_97;
      }
LABEL_95:
      *a6 = 0;
      goto LABEL_96;
    }
LABEL_102:
    *a2 = IndexFromStringIndex;
    goto LABEL_34;
  }
  *a6 = 0;
LABEL_97:
  v93 = v51 + v50 - 1;
  v94 = a1;
  return CGPDFLayoutGetIndexFromStringIndex(v94, v93);
}

uint64_t CGPDFLayoutReadsLeftToRightAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t StringRangeFromRange;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 < 0)
    return 1;
  if (*(_QWORD *)(a1 + 48) <= a2)
    return 1;
  if (!*(_BYTE *)(a1 + 72))
    return 1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  CGPDFLayoutGetRTLData(&v18, a1);
  v4 = (int)v20;
  if ((int)v20 < 1)
    return 1;
  v5 = 1;
  StringRangeFromRange = CGPDFLayoutGetStringRangeFromRange(a1, a2, 1);
  if ((StringRangeFromRange & 0x8000000000000000) == 0)
  {
    v8 = a2;
    if (StringRangeFromRange)
      v8 = *(int *)(v19 + 4 * StringRangeFromRange - 4);
    v9 = a2;
    if (StringRangeFromRange + v7 < v4)
      v9 = *(int *)(v19 + 4 * (StringRangeFromRange + v7));
    if (v8 == a2)
    {
      return v9 >= a2;
    }
    else
    {
      v11 = __OFSUB__(v9, a2);
      v12 = v9 - a2;
      if (v12)
      {
        if ((v12 < 0) ^ v11 | (v12 == 0))
          v13 = 0;
        else
          v13 = 1;
        v14 = v8 - a2 < 0;
        v15 = v8 < a2;
        v16 = v8 - a2;
        v17 = v15;
        if (v14)
          v16 = -(uint64_t)v16;
        if (v12 < 0)
          v12 = -v12;
        if (v16 >= v12)
          return v13;
        else
          return v17;
      }
      else
      {
        return v8 < a2;
      }
    }
  }
  return v5;
}

BOOL CGPDFLayoutPointSelectsFirstIndex(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6)
{
  double HitTestRectAtIndex;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  __double2 v24;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  __double2 v36;
  CGFloat v37;
  CGPoint v38;
  CGRect v39;
  CGRect v40;

  HitTestRectAtIndex = CGPDFLayoutGetHitTestRectAtIndex(a1, a2, a6);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = a5;
  v20 = a4;
  if (a1)
  {
    v19 = a5;
    v20 = a4;
    if ((a2 & 0x8000000000000000) == 0)
    {
      v19 = a5;
      v20 = a4;
      if (*(_QWORD *)(a1 + 48) > a2)
      {
        v21 = *(_QWORD *)(a1 + 24);
        v19 = a5;
        v20 = a4;
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 24 * a2 + 8);
          v19 = a5;
          v20 = a4;
          if (v22)
          {
            v23 = *(double *)(v22 + 40);
            v19 = a5;
            v20 = a4;
            if (v23 != 0.0)
            {
              v24 = __sincos_stret(v23);
              v20 = a5 * v24.__sinval + v24.__cosval * a4 + 0.0;
              v19 = a5 * v24.__cosval - v24.__sinval * a4 + 0.0;
            }
          }
        }
      }
    }
  }
  v39.origin.x = HitTestRectAtIndex;
  v39.origin.y = v14;
  v39.size.width = v16;
  v39.size.height = v18;
  if (CGRectContainsPoint(v39, *(CGPoint *)&v20))
    return 1;
  v26 = CGPDFLayoutGetHitTestRectAtIndex(a1, a3, a6);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  if (a1)
  {
    if ((a3 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 48) > a3)
    {
      v33 = *(_QWORD *)(a1 + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 24 * a3 + 8);
        if (v34)
        {
          v35 = *(double *)(v34 + 40);
          if (v35 != 0.0)
          {
            v36 = __sincos_stret(v35);
            v37 = a5 * v36.__cosval - v36.__sinval * a4;
            a4 = a5 * v36.__sinval + v36.__cosval * a4 + 0.0;
            a5 = v37 + 0.0;
          }
        }
      }
    }
  }
  v40.origin.x = v26;
  v40.origin.y = v28;
  v40.size.width = v30;
  v40.size.height = v32;
  v38.x = a4;
  v38.y = a5;
  return !CGRectContainsPoint(v40, v38);
}

double CGPDFLayoutGetHitTestRectAtIndex(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  uint64_t NodeContainingTextRange;
  CGRect v9;

  v9.origin.x = CGPDFLayoutGetCharacterBounds(a1, a2);
  *(_QWORD *)&v6 = (unint64_t)CGRectInset(v9, -a3, -a3);
  NodeContainingTextRange = CGPDFNodeGetNodeContainingTextRange(*(_QWORD *)(a1 + 104), a2, 1);
  if (NodeContainingTextRange)
  {
    while (*(_DWORD *)NodeContainingTextRange != 514)
    {
      NodeContainingTextRange = *(_QWORD *)(NodeContainingTextRange + 8);
      if (!NodeContainingTextRange)
        return v6;
    }
    CGPDFNodeGetHitTestRect(NodeContainingTextRange, a3);
  }
  return v6;
}

uint64_t CGPDFLayoutGetStringDirectionFromCursorRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t StringRangeFromRange;
  uint64_t v9;
  __CFString *v11[2];
  uint64_t v12;

  v3 = 1;
  if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
  {
    v6 = a2 + a3;
    if (a2 + a3 > *(_QWORD *)(a1 + 48))
      return 1;
    if (!*(_BYTE *)(a1 + 72))
      return 1;
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    CGPDFLayoutGetRTLData(v11, a1);
    if ((int)v12 < 1)
      return 1;
    v7 = v6 - 1;
    if (a2 == v6 - 1)
      return CGPDFLayoutReadsLeftToRightAtIndex(a1, a2);
    v3 = 1;
    StringRangeFromRange = CGPDFLayoutGetStringRangeFromRange(a1, a2, 1);
    v9 = CGPDFLayoutGetStringRangeFromRange(a1, v7, 1);
    if ((StringRangeFromRange & 0x8000000000000000) == 0 && (v9 & 0x8000000000000000) == 0)
      return StringRangeFromRange <= v9;
  }
  return v3;
}

uint64_t CGPDFLayoutGetIndexFromStringIndex(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == -1)
    return -1;
  v11 = v2;
  v12 = v3;
  if (*(_BYTE *)(a1 + 72))
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    CGPDFLayoutGetRTLData(&v8, a1);
    if ((int)v10 > a2)
    {
      v6 = *(unsigned int *)(v9 + 4 * a2);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_QWORD *)(a1 + 48) <= v6)
          return -1;
        else
          return *(unsigned int *)(v9 + 4 * a2);
      }
      return -1;
    }
  }
  result = CPMultiUnicodesGetCharacterIndexAtUnicodeIndex(*(_QWORD *)(a1 + 56), a2);
  if (result < 0)
    return -1;
  if (result >= *(_QWORD *)(a1 + 48))
    return -1;
  return result;
}

char *CGPDFLayoutCreateSelectionBetweenPoints(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  return CreateSelectionBetweenPoints(a1, a2, 1, a3, a4, a5, a6);
}

char *CGPDFLayoutCreateSelectionBetweenPointsWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6, double a7)
{
  return CreateSelectionBetweenPoints(a1, a2, a3 == 1, a4, a5, a6, a7);
}

char *CGPDFLayoutCreateDirectionalSelection(uint64_t a1, double a2, double a3, double a4, double a5)
{
  __n64 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!a1)
    __assert_rtn("CGPDFLayoutCreateDirectionalSelection", "CGPDFLayout.m", 1496, "layout");
  v10 = *(__n64 **)(a1 + 104);
  v16 = 0;
  v14 = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v12 = 0;
    v13 = 0;
    CGPDFNodeGetNodeRangeBetweenPoints(v10, 1, 1, &v15, &v14, &v16, &v12, a2, a3, a4, a5, 0.0);
    if ((CGPDFLayoutGetStringDirectionFromCursorRange(a1, v12, v13) & 1) == 0)
      v16 ^= 1u;
  }
  else
  {
    CGPDFNodeGetNodeRangeBetweenPoints(v10, 1, 1, &v15, &v14, &v16, 0, a2, a3, a4, a5, 0.0);
  }
  if (v16)
    return CreateCharacterSelectionBetweenPoints(a1, 1, a2, a3, a4, a5);
  else
    return 0;
}

void *CGPDFLayoutCreateSelectionBetweenIndexAndPoint(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  int v5;
  __n64 *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __n64 *v14;
  __n64 *v15;
  int64x2_t *IndexSet;
  uint64_t v17;
  uint64_t v18;
  uint64_t Range;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t LastIndex;
  double *v33;
  double *v34;
  CFIndex StringRangeFromCursorRange;
  CFIndex v36;
  void *v37;
  char v38;
  uint64_t v39;
  __n64 *v40;
  __n64 *v41;
  _QWORD v42[2];

  *(double *)v42 = a4;
  *(double *)&v42[1] = a5;
  if (!a1)
    return 0;
  v5 = a3;
  v10 = *(__n64 **)(a1 + 104);
  v40 = 0;
  v41 = 0;
  v39 = 0;
  CGPDFNodeGetNodeRangeFromIndexToPoint(v10, 1, a2, a3, 1, &v41, &v40, &v39, a4, a5, 0.0);
  if (v39 >= a2)
    v11 = a2;
  else
    v11 = v39;
  if (v39 >= a2)
    v12 = v39 - a2 + 1;
  else
    v12 = a2 + 1 - v39;
  if (*(_BYTE *)(a1 + 72) && (CGPDFLayoutGetStringDirectionFromCursorRange(a1, v11, v12) & 1) == 0)
  {
    v5 ^= 1u;
    CGPDFNodeGetNodeRangeFromIndexToPoint(v10, 1, a2, v5, 1, &v41, &v40, &v39, a4, a5, 0.0);
    if (v39 >= a2)
      v12 = v39 - a2 + 1;
    else
      v12 = a2 + 1 - v39;
    if (v39 >= a2)
      v11 = a2;
    else
      v11 = v39;
  }
  v13 = 0;
  v14 = v41;
  if (v41 && v40)
  {
    if (v5)
    {
      if (v39 >= a2)
      {
        v15 = v41;
        v14 = v40;
        goto LABEL_23;
      }
    }
    else if (v39 <= a2)
    {
      v15 = v40;
LABEL_23:
      IndexSet = CreateIndexSet((uint64_t)v15, (uint64_t)v14, 1, 1);
      v17 = (uint64_t)IndexSet;
      if (IndexSet)
      {
        if (IndexSet[2].i8[8])
          CPIndexSetNormalize((uint64_t)IndexSet);
        v18 = *(_QWORD *)(v17 + 16);
        if (v18 < 1)
          goto LABEL_64;
        Range = CPIndexSetGetRange(v17, 0);
        v21 = v20;
        v22 = CPIndexSetGetRange(v17, v18 - 1);
        if (Range != v11)
        {
          v24 = v21 - v11 + Range;
          if (v24 < 1)
            v25 = -1;
          else
            v25 = v11;
          if (v24 < 1)
            v24 = 0;
          if (*(uint64_t *)(v17 + 16) >= 1)
          {
            v26 = *(uint64_t **)(v17 + 32);
            *v26 = v25;
            v26[1] = v24;
            *(_BYTE *)(v17 + 40) = 1;
          }
          if (v18 == 1)
          {
            v22 = v25;
            v23 = v24;
          }
        }
        if (v22 < 0 || v23 + v22 == v11 + v12 || *(_QWORD *)(v17 + 16) < v18)
        {
          if (!*(_BYTE *)(v17 + 40))
            goto LABEL_49;
        }
        else
        {
          v28 = v11 + v12 - v22;
          if (v28 >= 1)
          {
            v29 = v22;
          }
          else
          {
            v28 = 0;
            v29 = -1;
          }
          v30 = (uint64_t *)(*(_QWORD *)(v17 + 32) + 16 * (v18 - 1));
          *v30 = v29;
          v30[1] = v28;
          *(_BYTE *)(v17 + 40) = 1;
        }
        CPIndexSetNormalize(v17);
LABEL_49:
        if (*(uint64_t *)(v17 + 16) < 1)
          v31 = -1;
        else
          v31 = **(_QWORD **)(v17 + 32);
        LastIndex = CPIndexSetGetLastIndex(v17);
        v13 = 0;
        if (LastIndex == -1 || v31 == -1 || LastIndex < v31)
          goto LABEL_67;
        if (!*(_BYTE *)(a1 + 72))
        {
          v37 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), (_BYTE *)v17);
          goto LABEL_66;
        }
        if (v5)
          v33 = 0;
        else
          v33 = (double *)v42;
        if (v5)
          v34 = (double *)v42;
        else
          v34 = 0;
        v38 = 0;
        StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, v31, LastIndex - v31 + 1, v33, v34, 1, &v38, 0.0);
        if ((StringRangeFromCursorRange & 0x8000000000000000) == 0)
        {
          v37 = CGPDFSelectionCreateForStringRange(*(_QWORD *)(a1 + 16), StringRangeFromCursorRange, v36);
LABEL_66:
          v13 = v37;
          goto LABEL_67;
        }
LABEL_64:
        v13 = 0;
LABEL_67:
        CFRelease((CFTypeRef)v17);
        return v13;
      }
    }
    return 0;
  }
  return v13;
}

void *CGPDFLayoutCreateSelectionFromIndexToPoint(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 1, a3, a4);
}

void *CGPDFLayoutCreateSelectionFromPointToIndex(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 0, a3, a4);
}

char *CGPDFLayoutCreateSelectionBetweenRangeAndPoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  _DWORD *v12;
  unsigned int v13;
  char *v14;
  char *SelectionBetweenIndexAndPoint;
  uint64_t LastIndex;
  _DWORD *NodePrecedingTextIndex;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t *v21;
  uint64_t TextRange;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  uint64_t v27;
  _DWORD *NodeFollowingTextIndex;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t *v35;
  uint64_t FirstIndex;

  if (!a1)
    return 0;
  v12 = *(_DWORD **)(a1 + 104);
  if ((a4 - 1) > 3)
    v13 = 0;
  else
    v13 = dword_1850051E0[a4 - 1];
  SelectionBetweenIndexAndPoint = (char *)CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a2, 1, a5, a6);
  if (SelectionBetweenIndexAndPoint)
  {
    v14 = SelectionBetweenIndexAndPoint;
    if (a4)
    {
      LastIndex = CGPDFSelectionGetLastIndex((uint64_t)SelectionBetweenIndexAndPoint);
      NodePrecedingTextIndex = CGPDFNodeGetNodePrecedingTextIndex(v12, LastIndex);
      if (NodePrecedingTextIndex)
      {
        while (*NodePrecedingTextIndex != v13)
        {
          NodePrecedingTextIndex = (_DWORD *)*((_QWORD *)NodePrecedingTextIndex + 1);
          if (!NodePrecedingTextIndex)
            return v14;
        }
        TextRange = CGPDFNodeGetTextRange((uint64_t)NodePrecedingTextIndex);
        v24 = v23 + ~LastIndex + TextRange;
        if (a4 == 1 && (v24 & 0x8000000000000000) == 0)
        {
          v25 = TextRange;
          v26 = CPIndexSetCreateWithRange(TextRange, v23);
          if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v26, LastIndex, 1))
          {
            v27 = CPIndexSetGetLastIndex((uint64_t)v26);
            if (v27 != -1 && v27 >= v25)
              v24 = v27 - LastIndex;
          }
          if (v26)
            CFRelease(v26);
        }
        if (v24)
          CGPDFSelectionExtendAtEnd((uint64_t)v14, v24);
      }
    }
  }
  else
  {
    v18 = (char *)CGPDFLayoutCreateSelectionBetweenIndexAndPoint(a1, a3 + a2 - 1, 0, a5, a6);
    if (v18)
    {
      v14 = v18;
      if (a4)
      {
        v19 = *((_QWORD *)v18 + 23);
        v20 = *((_QWORD *)v18 + 24) == v19 ? -1 : *(_QWORD *)(v19 + 8);
        NodeFollowingTextIndex = CGPDFNodeGetNodeFollowingTextIndex(v12, v20);
        if (NodeFollowingTextIndex)
        {
          while (*NodeFollowingTextIndex != v13)
          {
            NodeFollowingTextIndex = (_DWORD *)*((_QWORD *)NodeFollowingTextIndex + 1);
            if (!NodeFollowingTextIndex)
              return v14;
          }
          v30 = CGPDFNodeGetTextRange((uint64_t)NodeFollowingTextIndex);
          v32 = v20 - v30;
          if (a4 == 1 && (v32 & 0x8000000000000000) == 0)
          {
            v33 = v30;
            v34 = v31;
            v35 = CPIndexSetCreateWithRange(v30, v31);
            if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v35, v20, 1))
            {
              FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v35);
              if (FirstIndex != -1 && FirstIndex < v33 + v34)
                v32 = v20 - FirstIndex;
            }
            if (v35)
              CFRelease(v35);
          }
          if (v32)
            CGPDFSelectionExtendAtStart((uint64_t)v14, v32);
        }
      }
    }
    else
    {
      v21 = CPIndexSetCreateWithRange(a2, a3);
      v14 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v21);
      if (v21)
        CFRelease(v21);
    }
  }
  return v14;
}

char *CGPDFLayoutCreateSelectionFromPointWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5)
{
  double v10;
  double v11;
  _DWORD *v12;
  uint64_t v13;
  __n64 *NodeAfterPoint;
  __n64 *NodeBefore;
  uint64_t TextRange;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  char *v20;
  BOOL v21;
  int64x2_t *IndexSet;
  int64x2_t *v23;
  uint64_t TextIndexAfterPoint;
  uint64_t Range;
  uint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t FirstIndex;
  uint64_t LastIndex;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t *v51;
  _QWORD v52[3];

  *(double *)v52 = a4;
  *(double *)&v52[1] = a5;
  if (!a1)
    return 0;
  if (a2 == 1)
    v10 = 1.0;
  else
    v10 = 2.0;
  if (a2)
    v11 = v10;
  else
    v11 = 0.0;
  v12 = *(_DWORD **)(a1 + 104);
  if (a2)
  {
    if (a2 > 4)
      v13 = 0;
    else
      v13 = dword_1850051E0[a2 - 1];
  }
  else
  {
    v13 = 1;
  }
  NodeAfterPoint = CGPDFNodeGetNodeAfterPoint(*(__n64 **)(a1 + 104), v13, a3 == 1, a4, a5, v11);
  NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(v12, NodeAfterPoint, v13, a3 == 1);
  if (CGPDFNodeIsHitByPoint((uint64_t)NodeBefore, a4, a5, v11))
    NodeAfterPoint = NodeBefore;
  TextRange = CGPDFNodeGetTextRange((uint64_t)NodeAfterPoint);
  v18 = v17;
  v19 = CGPDFNodeGetNodeBefore(v12, 0, v13, a3 == 1);
  v20 = 0;
  if (NodeAfterPoint)
    v21 = v19 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    IndexSet = CreateIndexSet((uint64_t)NodeAfterPoint, (uint64_t)v19, v13, a3 == 1);
    v51 = IndexSet;
    if (IndexSet)
    {
      v23 = IndexSet;
      if (IndexSet[2].i8[8])
        CPIndexSetNormalize((uint64_t)IndexSet);
      if (v23[1].i64[0] < 1)
        goto LABEL_40;
      v44 = v18;
      TextIndexAfterPoint = CGPDFNodeGetTextIndexAfterPoint(NodeAfterPoint, a4, a5, v11);
      Range = CPIndexSetGetRange((uint64_t)v23, 0);
      v27 = TextRange < TextIndexAfterPoint && a2 == 0;
      v28 = TextRange <= TextIndexAfterPoint && !v27;
      if (!v28 && v23[1].i64[0] >= 1)
      {
        v29 = v26 - TextIndexAfterPoint + Range;
        if (v29 >= 1)
        {
          v30 = TextIndexAfterPoint;
        }
        else
        {
          v29 = 0;
          v30 = -1;
        }
        v31 = (uint64_t *)v23[2].i64[0];
        *v31 = v30;
        v31[1] = v29;
        v23[2].i8[8] = 1;
      }
      FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v23);
      LastIndex = CPIndexSetGetLastIndex((uint64_t)v23);
      if (FirstIndex == -1 || LastIndex == -1)
      {
LABEL_40:
        v20 = 0;
LABEL_41:
        CFRelease(v23);
        return v20;
      }
      v49 = TextIndexAfterPoint;
      v50 = LastIndex - TextIndexAfterPoint + 1;
      if (!*(_BYTE *)(a1 + 72)
        || (v47 = 0uLL, v48 = 0, CGPDFLayoutGetRTLData((__CFString **)&v47, a1), v35 = v48 - 2, (int)v48 < 2))
      {
LABEL_64:
        if (a2 == 1 && !CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v23, v49, v50))
        {
          v20 = 0;
          if (!v23)
            return v20;
        }
        else
        {
          v20 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v23);
          if (!v23)
            return v20;
        }
        goto LABEL_41;
      }
      CFRelease(v23);
      v36 = *(int *)(*((_QWORD *)&v47 + 1) + 4 * v35);
      if (a2)
      {
        v37 = TextRange + v44;
        v38 = (double *)v52;
        if (TextIndexAfterPoint >= v37 && CGPDFNodeIsHitByPoint((uint64_t)NodeAfterPoint, a4, a5, v10))
        {
          TextIndexAfterPoint = v37 - 1;
          v38 = 0;
        }
      }
      else
      {
        v38 = (double *)v52;
      }
      if (TextIndexAfterPoint <= v36)
        v39 = TextIndexAfterPoint;
      else
        v39 = v36;
      if (TextIndexAfterPoint > v36)
        v40 = TextIndexAfterPoint - v36 + 1;
      else
        v40 = v36 - TextIndexAfterPoint + 1;
      if (TextIndexAfterPoint <= v36)
        v41 = v38;
      else
        v41 = 0;
      if (TextIndexAfterPoint <= v36)
        v42 = 0;
      else
        v42 = v38;
      v49 = v39;
      v50 = v40;
      v45 = v47;
      v46 = v48;
      if (LayoutCreateSelectionSupport(a1, &v49, v41, v42, a3 == 1, &v51, a2, (uint64_t)&v45, v11, (uint64_t)v12, v13))
      {
        v23 = v51;
        goto LABEL_64;
      }
    }
    return 0;
  }
  return v20;
}

uint64_t LayoutCreateSelectionSupport(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t a5, int64x2_t **a6, int a7, uint64_t a8, double a9, uint64_t a10, int a11)
{
  char v14;
  unint64_t StringRangeFromCursorRange;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64x2_t *IndexSetForStringRange;
  int64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t j;
  uint64_t v28;
  uint64_t TextRange;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v14 = a5;
  v35 = 0;
  StringRangeFromCursorRange = CGPDFLayoutGetStringRangeFromCursorRange(a1, *a2, a2[1], a3, a4, a5, &v35, a9);
  if ((StringRangeFromCursorRange & 0x8000000000000000) != 0)
    return 0;
  v19 = StringRangeFromCursorRange;
  v20 = v18;
  IndexSetForStringRange = CGPDFLayoutCreateIndexSetForStringRange(a1, StringRangeFromCursorRange, v18);
  *a6 = IndexSetForStringRange;
  if ((v14 & 1) == 0)
  {
    v22 = CGPDFLayoutCopyIndexSetRemovingGraphics(a1, (uint64_t)IndexSetForStringRange);
    *a6 = v22;
    if (!IndexSetForStringRange)
    {
      if (v22)
        goto LABEL_6;
      return 0;
    }
    CFRelease(IndexSetForStringRange);
    IndexSetForStringRange = *a6;
  }
  if (!IndexSetForStringRange)
    return 0;
LABEL_6:
  if (!a7)
    return 1;
  *a2 = CGPDFLayoutGetRangeFromStringRange(a1, v19, v20);
  a2[1] = v23;
  v24 = *(_QWORD *)(a8 + 8);
  v25 = *(int *)(v24 + 4 * (v20 + v19) - 4);
  for (i = CGPDFNodeGetNodeContainingTextRange(a10, *(int *)(v24 + 4 * v19), 1); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)i == a11)
      break;
  }
  for (j = CGPDFNodeGetNodeContainingTextRange(a10, v25, 1); j; j = *(_QWORD *)(j + 8))
  {
    if (*(_DWORD *)j == a11)
      break;
  }
  if (i)
  {
    v28 = (uint64_t)*a6;
    TextRange = CGPDFNodeGetTextRange(i);
    CPIndexSetAddRange(v28, TextRange, v30);
  }
  result = 1;
  if (j && j != i)
  {
    v32 = (uint64_t)*a6;
    v33 = CGPDFNodeGetTextRange(j);
    CPIndexSetAddRange(v32, v33, v34);
    return 1;
  }
  return result;
}

char *CGPDFLayoutCreateSelectionToPointWithOptions(uint64_t a1, unsigned int a2, int a3, double a4, double a5)
{
  double v10;
  double v11;
  _DWORD *v12;
  uint64_t v13;
  __n64 *NodeAfterPoint;
  __n64 *NodeBefore;
  uint64_t TextRange;
  uint64_t v17;
  uint64_t v18;
  uint64_t NodeAfter;
  char *v20;
  BOOL v21;
  int64x2_t *IndexSet;
  int64x2_t *v23;
  uint64_t v24;
  uint64_t TextIndexBeforePoint;
  uint64_t Range;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t FirstIndex;
  uint64_t LastIndex;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double *v39;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t *v49;
  _QWORD v50[3];

  *(double *)v50 = a4;
  *(double *)&v50[1] = a5;
  if (!a1)
    return 0;
  v10 = 2.0;
  if (a2 == 1)
    v10 = 1.0;
  if (a2)
    v11 = v10;
  else
    v11 = 0.0;
  v12 = *(_DWORD **)(a1 + 104);
  if (a2)
  {
    if (a2 > 4)
      v13 = 0;
    else
      v13 = dword_1850051E0[a2 - 1];
  }
  else
  {
    v13 = 1;
  }
  NodeAfterPoint = CGPDFNodeGetNodeAfterPoint(*(__n64 **)(a1 + 104), v13, a3 == 1, a4, a5, v11);
  NodeBefore = (__n64 *)CGPDFNodeGetNodeBefore(v12, NodeAfterPoint, v13, a3 == 1);
  if (CGPDFNodeIsHitByPoint((uint64_t)NodeAfterPoint, a4, a5, v11))
    NodeBefore = NodeAfterPoint;
  TextRange = CGPDFNodeGetTextRange((uint64_t)NodeBefore);
  v18 = v17;
  NodeAfter = CGPDFNodeGetNodeAfter(v12, 0, v13, a3 == 1);
  v20 = 0;
  if (NodeBefore)
    v21 = NodeAfter == 0;
  else
    v21 = 1;
  if (v21)
    return v20;
  IndexSet = CreateIndexSet(NodeAfter, (uint64_t)NodeBefore, v13, a3 == 1);
  v49 = IndexSet;
  if (!IndexSet)
    return 0;
  v23 = IndexSet;
  v42 = TextRange;
  if (IndexSet[2].i8[8])
    CPIndexSetNormalize((uint64_t)IndexSet);
  v24 = v23[1].i64[0];
  if (v24 < 1)
  {
    v20 = 0;
    goto LABEL_61;
  }
  v41 = a3;
  TextIndexBeforePoint = CGPDFNodeGetTextIndexBeforePoint(NodeBefore, a4, a5, v11);
  Range = CPIndexSetGetRange((uint64_t)v23, v24 - 1);
  if (a2)
    v27 = 1;
  else
    v27 = v42 + v18 - 1 <= TextIndexBeforePoint;
  v28 = !v27;
  v29 = v42 + v18 > TextIndexBeforePoint && v28 == 0;
  if (!v29 && v23[1].i64[0] >= v24)
  {
    v30 = TextIndexBeforePoint - Range + 1;
    if (v30 >= 1)
      v31 = TextIndexBeforePoint - Range + 1;
    else
      v31 = 0;
    if (v30 < 1)
      v32 = -1;
    else
      v32 = Range;
    v33 = (uint64_t *)(v23[2].i64[0] + 16 * (v24 - 1));
    *v33 = v32;
    v33[1] = v31;
    v23[2].i8[8] = 1;
  }
  FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v23);
  LastIndex = CPIndexSetGetLastIndex((uint64_t)v23);
  v20 = 0;
  if (FirstIndex == -1 || LastIndex == -1)
    goto LABEL_61;
  v47 = FirstIndex;
  v48 = TextIndexBeforePoint - FirstIndex + 1;
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_55;
  v45 = 0uLL;
  v46 = 0;
  CGPDFLayoutGetRTLData((__CFString **)&v45, a1);
  if ((int)v46 < 2)
    goto LABEL_55;
  CFRelease(v23);
  v36 = (int)**((_DWORD **)&v45 + 1);
  v37 = (double *)v50;
  if (a2 && TextIndexBeforePoint < v42)
  {
    if (CGPDFNodeIsHitByPoint((uint64_t)NodeBefore, a4, a5, v11))
    {
      TextIndexBeforePoint = v42;
      v37 = 0;
    }
    else
    {
      v37 = (double *)v50;
    }
  }
  if (TextIndexBeforePoint >= v36)
  {
    v39 = 0;
    v38 = TextIndexBeforePoint - v36 + 1;
    TextIndexBeforePoint = v36;
  }
  else
  {
    v38 = v36 - TextIndexBeforePoint + 1;
    v39 = v37;
    v37 = 0;
  }
  v47 = TextIndexBeforePoint;
  v48 = v38;
  v43 = v45;
  v44 = v46;
  if (!LayoutCreateSelectionSupport(a1, &v47, v39, v37, v41 == 1, &v49, a2, (uint64_t)&v43, v11, (uint64_t)v12, v13))return 0;
  v23 = v49;
LABEL_55:
  if (a2 != 1 || CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v23, v47, v48))
  {
    v20 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v23);
    if (!v23)
      return v20;
    goto LABEL_61;
  }
  v20 = 0;
  if (v23)
LABEL_61:
    CFRelease(v23);
  return v20;
}

char *CGPDFLayoutCreateSelectionAtPoint(uint64_t a1, int a2, double a3, double a4)
{
  return CGPDFLayoutCreateSelectionAtPointWithOptions(a1, a2, 1, a3, a4);
}

char *CGPDFLayoutCreateSelectionAtPointWithOptions(uint64_t a1, int a2, int a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t BestNodeContainingPoint;
  uint64_t TextRange;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat *v17;
  CGSize *v18;
  const CGRect *v19;
  CGSize *v20;
  CGFloat *v21;
  BOOL v22;
  CGFloat *v23;
  const CGRect *v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  __double2 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat *p_height;
  CGSize *p_size;
  const CGRect *v47;
  CGSize *v48;
  CGFloat *v49;
  BOOL v50;
  CGFloat *p_y;
  const CGRect *v52;
  double x;
  double v54;
  double width;
  CGFloat v56;
  double v57;
  double v58;
  __double2 v59;
  __n64 *TopmostContentNodeAtPoint;
  __n64 *v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t *v64;
  int64x2_t *v65;
  uint64_t v67;
  char v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 104);
    switch(a2)
    {
      case 0:
        v68 = 0;
        v67 = 0;
        BestNodeContainingPoint = CGPDFNodeGetBestNodeContainingPoint(v9, 514, 0, &v67, &v68, a4, a5, 0.0);
        if (!BestNodeContainingPoint)
          return 0;
        TextRange = CGPDFNodeGetTextRange(BestNodeContainingPoint);
        if (v12 < 1)
          return 0;
        v13 = TextRange;
        v14 = TextRange + v12;
        v15 = *(_QWORD *)(a1 + 24) + 24 * TextRange + 8;
        break;
      case 1:
        v33 = 1;
        goto LABEL_29;
      case 2:
        v33 = 514;
        goto LABEL_29;
      case 3:
        v33 = 1537;
        goto LABEL_29;
      case 4:
        v33 = 515;
        goto LABEL_29;
      case 5:
        LOBYTE(v67) = 0;
        TopmostContentNodeAtPoint = CGPDFNodeGetTopmostContentNodeAtPoint(v9, (char *)&v67, a4, a5);
        if (!TopmostContentNodeAtPoint)
          return 0;
        v61 = TopmostContentNodeAtPoint;
        v62 = CGPDFNodeGetTextRange((uint64_t)TopmostContentNodeAtPoint);
        v64 = CPIndexSetCreateWithRange(v62, v63);
        if (!v64)
          return 0;
        v41 = v64;
        v32 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v64);
        pthread_mutex_lock((pthread_mutex_t *)(v32 + 96));
        *((_QWORD *)v32 + 5) = v61;
        pthread_mutex_unlock((pthread_mutex_t *)(v32 + 96));
        goto LABEL_61;
      default:
        v33 = 0;
LABEL_29:
        v68 = 0;
        v67 = 0;
        v34 = CGPDFNodeGetBestNodeContainingPoint(v9, v33, a3 == 1, &v67, &v68, a4, a5, 0.0);
        if (!v34)
          return 0;
        v35 = CGPDFNodeGetTextRange(v34);
        v37 = v36;
        v38 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "persistentDomainForName:", CFSTR("com.apple.CorePDF"));
        if (v38
          && objc_msgSend((id)objc_msgSend(v38, "objectForKey:", CFSTR("ShowRange")), "isEqualToString:", CFSTR("YES")))
        {
          NSLog(CFSTR("range = %d,%d"), v35, v37);
        }
        v39 = v37 - 1;
        if (v37 < 1)
          return 0;
        v40 = CPIndexSetCreateWithRange(v35, v37);
        if (!v40)
          return 0;
        v41 = v40;
        if (a2 != 1)
          goto LABEL_60;
        v42 = v37 + v35 - 1;
        if (v35 >= v42)
          goto LABEL_53;
        v43 = *(_QWORD *)(a1 + 24) + 24 * v35 + 8;
        while (1)
        {
          v44 = *(_QWORD *)(v43 - 8);
          p_height = &CGRectNull.size.height;
          p_size = &CGRectNull.size;
          v47 = (const CGRect *)(v44 + 16);
          v48 = (CGSize *)(v44 + 32);
          v49 = (CGFloat *)(v44 + 40);
          v50 = v44 == 0;
          if (v44)
            p_y = (CGFloat *)(v44 + 24);
          else
            p_y = &CGRectNull.origin.y;
          if (v50)
          {
            v52 = &CGRectNull;
          }
          else
          {
            p_size = v48;
            p_height = v49;
            v52 = v47;
          }
          x = v52->origin.x;
          v54 = *p_height;
          width = p_size->width;
          v56 = *p_y;
          v57 = a4;
          if (*(_QWORD *)v43)
          {
            v58 = *(double *)(*(_QWORD *)v43 + 40);
            v57 = a4;
            if (v58 != 0.0)
            {
              v59 = __sincos_stret(v58);
              v57 = a5 * v59.__sinval + v59.__cosval * a4 + 0.0;
            }
          }
          if (width < 0.0 || v54 < 0.0)
          {
            v72.origin.x = x;
            v72.origin.y = v56;
            v72.size.width = width;
            v72.size.height = v54;
            v73 = CGRectStandardize(v72);
            x = v73.origin.x;
            width = v73.size.width;
          }
          if (v57 <= x + width)
            break;
          ++v35;
          v43 += 24;
          if (!--v39)
          {
            v35 = v42;
            break;
          }
        }
LABEL_53:
        if (CGPDFLayoutExtendRangeToWordBoundaries(a1, (uint64_t)v41, v35, 1))
LABEL_60:
          v32 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v41);
        else
          v32 = 0;
LABEL_61:
        CFRelease(v41);
        return v32;
    }
    while (1)
    {
      v16 = *(_QWORD *)(v15 - 8);
      v17 = &CGRectNull.size.height;
      v18 = &CGRectNull.size;
      v19 = (const CGRect *)(v16 + 16);
      v20 = (CGSize *)(v16 + 32);
      v21 = (CGFloat *)(v16 + 40);
      v22 = v16 == 0;
      if (v16)
        v23 = (CGFloat *)(v16 + 24);
      else
        v23 = &CGRectNull.origin.y;
      if (v22)
      {
        v24 = &CGRectNull;
      }
      else
      {
        v18 = v20;
        v17 = v21;
        v24 = v19;
      }
      v25 = v24->origin.x;
      v26 = *v17;
      v27 = v18->width;
      v28 = *v23;
      v29 = a4;
      if (*(_QWORD *)v15)
      {
        v30 = *(double *)(*(_QWORD *)v15 + 40);
        v29 = a4;
        if (v30 != 0.0)
        {
          v31 = __sincos_stret(v30);
          v29 = a5 * v31.__sinval + v31.__cosval * a4 + 0.0;
        }
      }
      if (v27 < 0.0 || v26 < 0.0)
      {
        v69.origin.x = v25;
        v69.origin.y = v28;
        v69.size.width = v27;
        v69.size.height = v26;
        if (COERCE_DOUBLE(CGRectStandardize(v69)) <= v29)
        {
          v70.origin.x = v25;
          v70.origin.y = v28;
          v70.size.width = v27;
          v70.size.height = v26;
          v71 = CGRectStandardize(v70);
          v25 = v71.origin.x;
          v27 = v71.size.width;
LABEL_21:
          if (v29 <= v25 + v27 + 0.0)
          {
            v65 = CPIndexSetCreateWithRange(v13, 1);
            if (!v65)
              return 0;
            v41 = v65;
            goto LABEL_60;
          }
        }
      }
      else if (v25 <= v29)
      {
        goto LABEL_21;
      }
      v32 = 0;
      ++v13;
      v15 += 24;
      if (v13 >= v14)
        return v32;
    }
  }
  return 0;
}

char *CGPDFLayoutCreateSelectionContainingSelection(char *a1, uint64_t a2, int a3)
{
  char *v3;
  int v6;
  _DWORD *v7;
  uint64_t ContainingNode;
  uint64_t TextRange;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  uint64_t FirstIndex;
  uint64_t LastIndex;

  v3 = a1;
  if (a1)
  {
    if ((a3 - 1) >= 5)
    {
      ContainingNode = CGPDFSelectionGetContainingNode(a2);
      v6 = 0;
      goto LABEL_9;
    }
    v6 = dword_184F7A340[a3 - 1];
    v7 = (_DWORD *)CGPDFSelectionGetContainingNode(a2);
    ContainingNode = (uint64_t)v7;
    if (a3 != 5)
      goto LABEL_9;
    if (!v7)
      return 0;
    if (*v7 != 513 && (*v7 & 0x100) == 0)
    {
      while (*(_DWORD *)ContainingNode != v6)
      {
        ContainingNode = *(_QWORD *)(ContainingNode + 8);
LABEL_9:
        if (!ContainingNode)
          return 0;
      }
    }
    TextRange = CGPDFNodeGetTextRange(ContainingNode);
    v11 = CPIndexSetCreateWithRange(TextRange, v10);
    if (v11)
    {
      v12 = v11;
      if (a3 == 1
        && (FirstIndex = CGPDFSelectionGetFirstIndex(a2),
            LastIndex = CGPDFSelectionGetLastIndex(a2),
            !CGPDFLayoutExtendRangeToWordBoundaries((uint64_t)v3, (uint64_t)v12, FirstIndex, LastIndex - FirstIndex + 1)))
      {
        v3 = 0;
      }
      else
      {
        v3 = CGPDFSelectionCreateWithIndexSet(*((const void **)v3 + 2), v12);
        pthread_mutex_lock((pthread_mutex_t *)(v3 + 96));
        *((_QWORD *)v3 + 5) = ContainingNode;
        pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
      }
      CFRelease(v12);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

char *CGPDFLayoutCreateSelectionForRect(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat v5;
  CGFloat v6;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat *p_height;
  CGSize *p_size;
  const CGRect *v22;
  CGSize *v23;
  CGFloat *v24;
  BOOL v25;
  CGFloat *p_y;
  const CGRect *v27;
  double x;
  double v29;
  double width;
  double y;
  uint64_t v32;
  double v33;
  uint64_t v34;
  __double2 v35;
  _BOOL4 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char *v46;
  CGPoint v52;
  CGPoint v53;
  CGPoint v54;
  CGPoint v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  if (!a1)
    return 0;
  v5 = a3;
  v6 = a2;
  if (a2 == INFINITY || a3 == INFINITY)
    return 0;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 < 1)
    return 0;
  v10 = a5;
  v11 = a4;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  v16 = 1;
  v17 = -1;
  do
  {
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(v18 + v12);
    p_height = &CGRectNull.size.height;
    p_size = &CGRectNull.size;
    v22 = (const CGRect *)(v19 + 16);
    v23 = (CGSize *)(v19 + 32);
    v24 = (CGFloat *)(v19 + 40);
    v25 = v19 == 0;
    if (v19)
      p_y = (CGFloat *)(v19 + 24);
    else
      p_y = &CGRectNull.origin.y;
    if (v25)
    {
      v27 = &CGRectNull;
    }
    else
    {
      p_size = v23;
      p_height = v24;
      v27 = v22;
    }
    x = v27->origin.x;
    v29 = *p_height;
    width = p_size->width;
    y = *p_y;
    v32 = *(_QWORD *)(v18 + v12 + 8);
    if (!v32 || (v33 = *(double *)(v32 + 40), v33 == 0.0))
    {
      v56.origin.x = v6;
      v56.origin.y = v5;
      v56.size.width = v11;
      v56.size.height = v10;
      v71.origin.x = v27->origin.x;
      v71.origin.y = *p_y;
      v71.size.width = p_size->width;
      v71.size.height = *p_height;
      if (!CGRectContainsRect(v56, v71))
        goto LABEL_41;
LABEL_17:
      v34 = v16 - 1;
      if (v15 != -1)
      {
        if (v34 == v17)
        {
          v13 = v16 - v15;
          v34 = v15;
LABEL_35:
          v9 = *(_QWORD *)(a1 + 48);
          v17 = v16;
          v15 = v34;
          goto LABEL_41;
        }
        if (v14)
          CPIndexSetAddRange((uint64_t)v14, v15, v13);
        else
          v14 = CPIndexSetCreateWithRange(v15, v13);
      }
      v13 = 1;
      goto LABEL_35;
    }
    v35 = __sincos_stret(v33);
    v36 = v29 < 0.0 || width < 0.0;
    v37 = x;
    v38 = y;
    if (v36)
    {
      v57.origin.x = x;
      v57.origin.y = y;
      v57.size.width = width;
      v57.size.height = v29;
      *(_QWORD *)&v37 = (unint64_t)CGRectStandardize(v57);
      v58.origin.x = x;
      v58.origin.y = y;
      v58.size.width = width;
      v58.size.height = v29;
      *(CGRect *)(&v38 - 1) = CGRectStandardize(v58);
    }
    v39 = -v35.__sinval;
    v52.x = v38 * -v35.__sinval + v35.__cosval * v37 + 0.0;
    v52.y = v35.__cosval * v38 + v35.__sinval * v37 + 0.0;
    v59.origin.x = a2;
    v59.origin.y = a3;
    v59.size.width = a4;
    v10 = a5;
    v59.size.height = a5;
    if (!CGRectContainsPoint(v59, v52))
      goto LABEL_40;
    v40 = x;
    v41 = y;
    v42 = v29;
    if (v36)
    {
      v60.origin.x = x;
      v60.origin.y = y;
      v60.size.width = width;
      v60.size.height = v29;
      *(_QWORD *)&v40 = (unint64_t)CGRectStandardize(v60);
      v61.origin.x = x;
      v61.origin.y = y;
      v61.size.width = width;
      v61.size.height = v29;
      *(CGRect *)(&v41 - 1) = CGRectStandardize(v61);
    }
    v53.x = (v41 + v42) * v39 + v35.__cosval * v40 + 0.0;
    v53.y = v35.__cosval * (v41 + v42) + v35.__sinval * v40 + 0.0;
    v62.origin.x = a2;
    v62.origin.y = a3;
    v62.size.width = a4;
    v10 = a5;
    v62.size.height = a5;
    if (!CGRectContainsPoint(v62, v53))
      goto LABEL_40;
    if (v36)
    {
      v63.origin.x = x;
      v63.origin.y = y;
      v63.size.width = width;
      v63.size.height = v29;
      v64 = CGRectStandardize(v63);
      v43 = v64.origin.x + v64.size.width;
      v64.origin.x = x;
      v64.origin.y = y;
      v64.size.width = width;
      v64.size.height = v29;
      v65 = CGRectStandardize(v64);
    }
    else
    {
      v43 = x + width;
      v65.origin.y = y;
      v65.size.height = v29;
    }
    v54.x = (v65.origin.y + v65.size.height) * v39 + v35.__cosval * v43 + 0.0;
    v54.y = v35.__cosval * (v65.origin.y + v65.size.height) + v35.__sinval * v43 + 0.0;
    v66.origin.x = a2;
    v66.origin.y = a3;
    v66.size.width = a4;
    v10 = a5;
    v66.size.height = a5;
    if (CGRectContainsPoint(v66, v54))
    {
      if (v36)
      {
        v67.origin.x = x;
        v67.origin.y = y;
        v67.size.width = width;
        v67.size.height = v29;
        v68 = CGRectStandardize(v67);
        v44 = v68.origin.x + v68.size.width;
        v68.origin.x = x;
        v68.origin.y = y;
        v68.size.width = width;
        v68.size.height = v29;
        v69 = CGRectStandardize(v68);
        y = v69.origin.y;
      }
      else
      {
        v44 = x + width;
      }
      v55.x = y * v39 + v35.__cosval * v44 + 0.0;
      v55.y = v35.__cosval * y + v35.__sinval * v44 + 0.0;
      v6 = a2;
      v5 = a3;
      v70.origin.x = a2;
      v70.origin.y = a3;
      v11 = a4;
      v70.size.width = a4;
      v10 = a5;
      v70.size.height = a5;
      if (CGRectContainsPoint(v70, v55))
        goto LABEL_17;
    }
    else
    {
LABEL_40:
      v5 = a3;
      v11 = a4;
      v6 = a2;
    }
LABEL_41:
    v12 += 24;
  }
  while (v16++ < v9);
  if (v15 != -1)
  {
    if (v14)
    {
      CPIndexSetAddRange((uint64_t)v14, v15, v13);
      goto LABEL_51;
    }
    v14 = CPIndexSetCreateWithRange(v15, v13);
  }
  if (v14)
  {
LABEL_51:
    v46 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v14);
    CFRelease(v14);
    return v46;
  }
  return 0;
}

char *CGPDFLayoutCreateSelectionForPath(uint64_t a1, CGPathRef path, unsigned __int8 a3)
{
  char *v3;
  __n64 *v4;
  uint64_t v5;
  int64x2_t *v6;
  _QWORD v8[3];
  CGRect PathBoundingBox;
  int64x2_t *cf_8;
  __int128 v11;
  uint64_t v12;

  v3 = (char *)a1;
  if (!a1)
    return v3;
  v4 = *(__n64 **)(a1 + 104);
  v12 = 0;
  v8[0] = a1;
  v8[1] = path;
  v8[2] = a3;
  PathBoundingBox = CGPathGetPathBoundingBox(path);
  cf_8 = 0;
  v11 = CPRangeNull;
  CGPDFFindContainedRanges(v5, v4, (uint64_t)v8);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_5:
    v6 = cf_8;
    if (cf_8)
      goto LABEL_6;
    return 0;
  }
  if (cf_8)
  {
    CPIndexSetAddRange((uint64_t)cf_8, v11, *((uint64_t *)&v11 + 1));
    goto LABEL_5;
  }
  v6 = CPIndexSetCreateWithRange(v11, *((uint64_t *)&v11 + 1));
  cf_8 = v6;
  if (!v6)
    return 0;
LABEL_6:
  v3 = CGPDFSelectionCreateWithIndexSet(*((const void **)v3 + 2), v6);
  if (cf_8)
    CFRelease(cf_8);
  return v3;
}

BOOL CGPDFFindContainedRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  const CGPath *v5;
  __int128 v6;
  __n64 v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double Rotation;
  __double2 v15;
  const CGPath *v16;
  int v17;
  unsigned __int32 v18;
  _BOOL8 v19;
  uint64_t TextRange;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  const CGRect *v26;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  double x;
  double v31;
  double width;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  const void *v42;
  __int128 v43;
  CGAffineTransform v45;
  __int128 v46;
  __int128 v47;
  CGPoint v48;
  CGPoint v49;
  CGPoint v50;
  CGPoint v51;
  CGRect v52;
  CGRect v53;

  v5 = *(const CGPath **)(a3 + 8);
  v6 = *(_OWORD *)(a3 + 40);
  v46 = *(_OWORD *)(a3 + 24);
  v47 = v6;
  v7.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (a2 && a2->n64_u32[0] == 516 && (Rotation = CGPDFNodeGetRotation((uint64_t)a2), Rotation != 0.0))
  {
    v15 = __sincos_stret(Rotation);
    v45.a = v15.__cosval;
    v45.b = -v15.__sinval;
    *(__double2 *)&v45.c = v15;
    v45.tx = 0.0;
    v45.ty = 0.0;
    v16 = CGPathCreateMutableCopyByTransformingPath(v5, &v45);
    *(_QWORD *)(a3 + 8) = v16;
    *(CGRect *)(a3 + 24) = CGPathGetBoundingBox(v16);
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  v52.origin.x = v7.n64_f64[0];
  v52.origin.y = v9;
  v52.size.width = v11;
  v52.size.height = v13;
  if (!CGRectIntersectsRect(*(CGRect *)(a3 + 24), v52))
  {
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_38;
  }
  if (!a2
    || (v18 = a2->n64_u32[0], (a2->n64_u32[0] & 0x200) == 0)
    || !a2[5].n64_u32[1]
    || v18 == 513
    || (v18 & 0x100) != 0)
  {
    TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
    v22 = TextRange + v21;
    if (TextRange + v21 > TextRange)
    {
      v23 = TextRange;
      v24 = TextRange + 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 24 * v23);
        if (v25)
        {
          v26 = (const CGRect *)(v25 + 16);
          p_y = (CGFloat *)(v25 + 24);
          p_size = (CGSize *)(v25 + 32);
          p_height = (CGFloat *)(v25 + 40);
        }
        else
        {
          p_height = &CGRectNull.size.height;
          p_size = &CGRectNull.size;
          p_y = &CGRectNull.origin.y;
          v26 = &CGRectNull;
        }
        x = v26->origin.x;
        v31 = *p_height;
        width = p_size->width;
        v33 = *p_y;
        v53.origin.x = v26->origin.x;
        v53.origin.y = *p_y;
        v53.size.width = p_size->width;
        v53.size.height = *p_height;
        if (CGRectContainsRect(*(CGRect *)(a3 + 24), v53))
        {
          v48.x = x;
          v48.y = v33;
          if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v48, *(_BYTE *)(a3 + 16)))
          {
            v34 = x + width;
            v49.x = v34;
            v49.y = v33;
            if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v49, *(_BYTE *)(a3 + 16)))
            {
              v35 = v33 + v31;
              v50.x = v34;
              v50.y = v35;
              if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v50, *(_BYTE *)(a3 + 16)))
              {
                v51.x = v34 - width;
                v51.y = v35;
                if (CGPathContainsPoint(*(CGPathRef *)(a3 + 8), 0, v51, *(_BYTE *)(a3 + 16)))
                  break;
              }
            }
          }
        }
        v39 = 0;
LABEL_28:
        *(_BYTE *)(a3 + 80) = v39;
        v23 = v24;
        if (v22 <= v24++)
          goto LABEL_38;
      }
      v36 = *(_QWORD *)(a3 + 64);
      v37 = *(_QWORD *)(a3 + 72);
      if (v36 != 0x7FFFFFFFFFFFFFFFLL || v37)
      {
        if (*(_BYTE *)(a3 + 80))
        {
          v38 = v24 - v36;
          goto LABEL_33;
        }
        v41 = *(_QWORD *)(a3 + 56);
        if (v41)
          CPIndexSetAddRange(v41, v36, v37);
        else
          *(_QWORD *)(a3 + 56) = CPIndexSetCreateWithRange(*(_QWORD *)(a3 + 64), *(_QWORD *)(a3 + 72));
      }
      *(_QWORD *)(a3 + 64) = v23;
      v38 = 1;
LABEL_33:
      *(_QWORD *)(a3 + 72) = v38;
      v39 = 1;
      goto LABEL_28;
    }
LABEL_38:
    v19 = 1;
    if (!v17)
      return v19;
    goto LABEL_39;
  }
  v19 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t))CGPDFFindContainedRanges, a3);
  if (!v17)
    return v19;
LABEL_39:
  v42 = *(const void **)(a3 + 8);
  if (v42)
    CFRelease(v42);
  *(_QWORD *)(a3 + 8) = v5;
  v43 = v47;
  *(_OWORD *)(a3 + 24) = v46;
  *(_OWORD *)(a3 + 40) = v43;
  return v19;
}

char *CGPDFLayoutCreateSelectionForQuadPoints(uint64_t a1, double *a2, int a3)
{
  char *v3;
  int v4;
  __n64 *v5;
  double *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v13;
  double *v14;
  CGRect v15;
  CFTypeRef cf;
  __int128 v17;
  uint64_t v18;

  v3 = (char *)a1;
  if (a1)
  {
    v4 = a3;
    v5 = *(__n64 **)(a1 + 104);
    v18 = 0;
    v13 = a1;
    v14 = a2;
    v15 = CGRectNull;
    cf = 0;
    v17 = CPRangeNull;
    if (!a3)
      return 0;
    do
    {
      v6 = CPPolygonBounds(a2);
      v15.origin.x = v7;
      v15.origin.y = v8;
      v15.size.width = v9;
      v15.size.height = v10;
      CGPDFFindQuadrangleRanges((uint64_t)v6, v5, (uint64_t)&v13);
      if ((_QWORD)v17 != 0x7FFFFFFFFFFFFFFFLL || *((_QWORD *)&v17 + 1) != 0)
      {
        if (cf)
          CPIndexSetAddRange((uint64_t)cf, v17, *((uint64_t *)&v17 + 1));
        else
          cf = CPIndexSetCreateWithRange(v17, *((uint64_t *)&v17 + 1));
      }
      v17 = CPRangeNull;
      LOBYTE(v18) = 0;
      a2 = v14 + 8;
      v14 += 8;
      --v4;
    }
    while (v4);
    if (cf)
    {
      v3 = CGPDFSelectionCreateWithIndexSet(*((const void **)v3 + 2), cf);
      if (cf)
        CFRelease(cf);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL CGPDFFindQuadrangleRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  uint64_t v5;
  __n64 v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double Rotation;
  double v14;
  double *v15;
  float64x2_t v16;
  __double2 v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int32 v24;
  int v25;
  _BOOL8 v26;
  uint64_t TextRange;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  const CGRect *v33;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  double x;
  double v38;
  double width;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  double y;
  double v47;
  double height;
  uint64_t v49;
  double v50;
  double v51;
  char v52;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v60;
  __int128 v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v5 = *(_QWORD *)(a3 + 8);
  v60 = *(_OWORD *)(a3 + 16);
  v61 = *(_OWORD *)(a3 + 32);
  v6.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  v8 = v7;
  v10 = v9;
  v12 = v11;
  if (a2 && a2->n64_u32[0] == 516 && (Rotation = CGPDFNodeGetRotation((uint64_t)a2), Rotation != 0.0))
  {
    v14 = Rotation;
    v15 = (double *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
    *(_QWORD *)(a3 + 8) = v15;
    v17 = __sincos_stret(v14);
    v16.f64[0] = v17.__cosval;
    for (i = 0; i != 8; i += 2)
    {
      v16.f64[1] = -v17.__sinval;
      *(float64x2_t *)&v15[i] = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v17, *(double *)(v5 + i * 8 + 8)), v16, *(double *)(v5 + i * 8)), (float64x2_t)0);
    }
    CPPolygonBounds(v15);
    *(_QWORD *)(a3 + 16) = v19;
    *(_QWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v21;
    *(_QWORD *)(a3 + 40) = v22;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v65.origin.x = v6.n64_f64[0];
  v65.origin.y = v8;
  v65.size.width = v10;
  v65.size.height = v12;
  if (!CGRectIntersectsRect(*(CGRect *)(a3 + 16), v65))
  {
    *(_BYTE *)(a3 + 72) = 0;
    goto LABEL_46;
  }
  if (!a2)
    goto LABEL_17;
  v24 = a2->n64_u32[0];
  v25 = 1;
  if (a2->n64_u32[0] != 513 && (v24 & 0x100) == 0)
  {
    if ((v24 & 0x200) != 0 && a2[5].n64_u32[1])
    {
      v26 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t))CGPDFFindQuadrangleRanges, a3);
      if (!v23)
        return v26;
      goto LABEL_47;
    }
LABEL_17:
    v25 = 0;
  }
  TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
  v29 = TextRange + v28;
  if (TextRange + v28 > TextRange)
  {
    v30 = TextRange;
    v31 = TextRange + 1;
    do
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 24 * v30);
      if (v32)
      {
        v33 = (const CGRect *)(v32 + 16);
        p_y = (CGFloat *)(v32 + 24);
        p_size = (CGSize *)(v32 + 32);
        p_height = (CGFloat *)(v32 + 40);
      }
      else
      {
        v33 = &CGRectNull;
        p_height = &CGRectNull.size.height;
        p_size = &CGRectNull.size;
        p_y = &CGRectNull.origin.y;
      }
      x = v33->origin.x;
      v38 = *p_height;
      width = p_size->width;
      v40 = *p_y;
      v42 = *(double *)(a3 + 16);
      v41 = *(double *)(a3 + 24);
      v44 = *(double *)(a3 + 32);
      v43 = *(double *)(a3 + 40);
      v62.origin.x = v42;
      v62.origin.y = v41;
      v62.size.width = v44;
      v62.size.height = v43;
      v66.origin.x = v33->origin.x;
      v66.origin.y = *p_y;
      v66.size.width = p_size->width;
      v66.size.height = *p_height;
      if (CGRectIntersectsRect(v62, v66))
      {
        if (v25)
        {
          v63.origin.x = x;
          v63.origin.y = v40;
          v63.size.width = width;
          v63.size.height = v38;
          v64 = CGRectInset(v63, width * 0.1, v38 * 0.1);
          v45 = v64.origin.x;
          y = v64.origin.y;
          v47 = v64.size.width;
          height = v64.size.height;
          v49 = *(_QWORD *)(a3 + 8);
          if (CPPointIsInsidePolygonWithBounds(v49, v64.origin.x, v64.origin.y, v42, v41, v44, v43))
          {
            v50 = v45 + v47;
            if (CPPointIsInsidePolygonWithBounds(v49, v50, y, v42, v41, v44, v43))
            {
              v51 = y + height;
              if (CPPointIsInsidePolygonWithBounds(v49, v50, v51, v42, v41, v44, v43)
                && CPPointIsInsidePolygonWithBounds(v49, v50 - v47, v51, v42, v41, v44, v43))
              {
                goto LABEL_35;
              }
            }
          }
        }
        else
        {
          if (v32)
            v54 = *(double *)(v32 + 88);
          else
            v54 = 0.0;
          if (CPPointIsInsidePolygonWithBounds(*(_QWORD *)(a3 + 8), x + width * 0.5, v54, v42, v41, v44, v43))
          {
LABEL_35:
            v55 = *(_QWORD *)(a3 + 56);
            v56 = *(_QWORD *)(a3 + 64);
            if (v55 != 0x7FFFFFFFFFFFFFFFLL || v56)
            {
              if (!*(_BYTE *)(a3 + 72))
              {
                v58 = *(_QWORD *)(a3 + 48);
                if (v58)
                  CPIndexSetAddRange(v58, v55, v56);
                else
                  *(_QWORD *)(a3 + 48) = CPIndexSetCreateWithRange(*(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64));
                goto LABEL_37;
              }
              v57 = v31 - v55;
            }
            else
            {
LABEL_37:
              *(_QWORD *)(a3 + 56) = v30;
              v57 = 1;
            }
            *(_QWORD *)(a3 + 64) = v57;
            v52 = 1;
            goto LABEL_29;
          }
        }
      }
      v52 = 0;
LABEL_29:
      *(_BYTE *)(a3 + 72) = v52;
      v30 = v31;
    }
    while (v29 > v31++);
  }
LABEL_46:
  v26 = 1;
  if (v23)
  {
LABEL_47:
    free(*(void **)(a3 + 8));
    *(_QWORD *)(a3 + 8) = v5;
    *(_OWORD *)(a3 + 16) = v60;
    *(_OWORD *)(a3 + 32) = v61;
  }
  return v26;
}

char *CGPDFLayoutCreateSelectionForIntersectingRect(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  return CGPDFLayoutCreateSelectionForIntersectingRectWithOptions(a1, a2, 1, a3, a4, a5, a6);
}

char *CGPDFLayoutCreateSelectionForIntersectingRectWithOptions(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  unsigned int v8;
  __n64 *v9;
  _QWORD v11[6];
  unsigned int v12;
  _BYTE v13[12];

  v7 = (char *)a1;
  if (a1)
  {
    if ((a2 - 1) > 3)
      v8 = 0;
    else
      v8 = dword_1850051E0[a2 - 1];
    v9 = *(__n64 **)(a1 + 104);
    *(_DWORD *)&v13[8] = 0;
    *(double *)v11 = a4;
    *(double *)&v11[1] = a5;
    *(double *)&v11[2] = a6;
    *(double *)&v11[3] = a7;
    v11[4] = 0;
    v11[5] = 0;
    v12 = v8;
    *(_QWORD *)v13 = a3 == 1;
    CGPDFFindIntersectionRanges(a1, v9, (uint64_t)v11);
    if (*(_QWORD *)&v13[4])
    {
      v7 = CGPDFSelectionCreateWithIndexSet(*((const void **)v7 + 2), *(_BYTE **)&v13[4]);
      if (*(_QWORD *)&v13[4])
        CFRelease(*(CFTypeRef *)&v13[4]);
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

BOOL CGPDFFindIntersectionRanges(uint64_t a1, __n64 *a2, uint64_t a3)
{
  __n64 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  void **v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  double Rotation;
  _BOOL4 v18;
  double v19;
  double *v20;
  void *v21;
  uint64_t v22;
  uint64_t TextRange;
  uint64_t v24;
  _BOOL8 v25;
  double v27[9];
  CGRect v28;

  v27[8] = *(double *)MEMORY[0x1E0C80C00];
  v5.n64_u64[0] = CGPDFNodeGetBounds(a2).n64_u64[0];
  v7 = v6;
  v9 = v8;
  v11 = v10;
  if (!a2)
  {
    v12 = 0;
    v18 = 0;
    v13 = (void **)(a3 + 40);
    v14 = *(void **)(a3 + 40);
    v15 = (_QWORD *)(a3 + 32);
    v16 = *(_QWORD *)(a3 + 32);
    goto LABEL_10;
  }
  v12 = a2->n64_u32[0];
  v13 = (void **)(a3 + 40);
  v14 = *(void **)(a3 + 40);
  v15 = (_QWORD *)(a3 + 32);
  v16 = *(_QWORD *)(a3 + 32);
  if (a2->n64_u32[0] != 516)
  {
    v18 = 0;
LABEL_10:
    v21 = v14;
    if (!v14)
      goto LABEL_6;
LABEL_11:
    if (!CGPDFRectIntersectsQuadrangleSide((uint64_t)v21, v5.n64_f64[0], v7, v9, v11))
    {
      CGPDFGetVerticesFromRotatedRect(v27, v5.n64_f64[0], v7, v9, v11, *(double *)(a3 + 32));
      if (!CGPDFRectIntersectsQuadrangleSide((uint64_t)v27, *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16), *(double *)(a3 + 24)))goto LABEL_23;
    }
    goto LABEL_13;
  }
  Rotation = CGPDFNodeGetRotation((uint64_t)a2);
  v18 = Rotation != 0.0;
  if (Rotation != 0.0)
  {
    v19 = Rotation;
    *(double *)(a3 + 32) = Rotation;
    v20 = (double *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
    *(_QWORD *)(a3 + 40) = v20;
    CGPDFGetVerticesFromRotatedRect(v20, *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16), *(double *)(a3 + 24), -v19);
  }
  v21 = *v13;
  v12 = 516;
  if (*v13)
    goto LABEL_11;
LABEL_6:
  v28.origin.x = v5.n64_f64[0];
  v28.origin.y = v7;
  v28.size.width = v9;
  v28.size.height = v11;
  if (!CGRectIntersectsRect(v28, *(CGRect *)a3))
    goto LABEL_23;
LABEL_13:
  if (v12 != *(_DWORD *)(a3 + 48)
    && (!*(_BYTE *)(a3 + 52) || !a2 || a2->n64_u32[0] != 513 && (a2->n64_u32[0] & 0x100) == 0))
  {
    v25 = CGPDFNodeMap((uint64_t)a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t))CGPDFFindIntersectionRanges, a3);
    if (!v18)
      return v25;
    goto LABEL_24;
  }
  TextRange = CGPDFNodeGetTextRange((uint64_t)a2);
  v24 = *(_QWORD *)(a3 + 56);
  if (v24)
    CPIndexSetAddRange(v24, TextRange, v22);
  else
    *(_QWORD *)(a3 + 56) = CPIndexSetCreateWithRange(TextRange, v22);
LABEL_23:
  v25 = 1;
  if (v18)
  {
LABEL_24:
    *v15 = v16;
    free(*v13);
    *v13 = v14;
  }
  return v25;
}

double CGPDFGetVerticesFromRotatedRect(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  __double2 v11;
  double v12;
  double v13;
  double result;

  v11 = __sincos_stret(a6);
  *a1 = v11.__cosval * a2 - v11.__sinval * a3 + 0.0;
  a1[1] = a3 * v11.__cosval + v11.__sinval * a2 + 0.0;
  a1[2] = v11.__cosval * (a2 + a4) - v11.__sinval * a3 + 0.0;
  a1[3] = a3 * v11.__cosval + v11.__sinval * (a2 + a4) + 0.0;
  v12 = (a3 + a5) * v11.__cosval;
  a1[4] = v11.__cosval * (a2 + a4) - v11.__sinval * (a3 + a5) + 0.0;
  a1[5] = v12 + v11.__sinval * (a2 + a4) + 0.0;
  v13 = a2 + a4 - a4;
  result = v12 + v11.__sinval * v13 + 0.0;
  a1[6] = v11.__cosval * v13 - v11.__sinval * (a3 + a5) + 0.0;
  a1[7] = result;
  return result;
}

BOOL CGPDFRectIntersectsQuadrangleSide(uint64_t a1, double a2, double a3, double a4, double a5)
{
  unint64_t v8;
  double *i;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v8 = 0;
  for (i = (double *)(a1 + 8); v8 != 4; i += 2)
  {
    v10 = v8 == 3 ? 0 : v8 + 1;
    v11 = (double *)(a1 + 16 * v10);
    v13 = *(i - 1);
    v12 = *i;
    v14 = *v11 - v13;
    v15 = CGIntervalIntersection(v13, v14, a2, a4);
    v17 = v16;
    if (fabs(v15) != INFINITY)
    {
      v18 = v11[1] - v12;
      v19 = CGIntervalIntersection(v12, v18, a3, a5);
      if (fabs(v19) != INFINITY
        && (v14 == 0.0
         || v18 == 0.0
         || fabs(CGIntervalIntersection(v18 * (v15 - v13), v18 * v17, v14 * (v19 - v12), v14 * v20)) != INFINITY))
      {
        break;
      }
    }
    ++v8;
  }
  return v8 < 4;
}

char *CGPDFLayoutCreateSelectionForEntireLayout(uint64_t a1)
{
  char *v1;
  uint64_t TextRange;
  uint64_t v3;
  int64x2_t *v4;

  v1 = (char *)a1;
  if (a1)
  {
    TextRange = CGPDFNodeGetTextRange(*(_QWORD *)(a1 + 104));
    if (v3 < 1)
    {
      return 0;
    }
    else
    {
      v4 = CPIndexSetCreateWithRange(TextRange, v3);
      v1 = CGPDFSelectionCreateWithIndexSet(*((const void **)v1 + 2), v4);
      if (v4)
        CFRelease(v4);
    }
  }
  return v1;
}

int64x2_t *CGPDFLayoutCreateSelectionForStringRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int64x2_t *result;
  int64x2_t *v5;
  char *v6;

  result = CGPDFLayoutCreateIndexSetForStringRange(a1, a2, a3);
  if (result)
  {
    v5 = result;
    v6 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), result);
    CFRelease(v5);
    return (int64x2_t *)v6;
  }
  return result;
}

char *CGPDFLayoutCreateSelectionForRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  int64x2_t *v5;

  if (!a1)
    return 0;
  v3 = 0;
  if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
  {
    if (a2 + a3 > *(_QWORD *)(a1 + 48))
      return 0;
    v5 = CPIndexSetCreateWithRange(a2, a3);
    v3 = CGPDFSelectionCreateWithIndexSet(*(const void **)(a1 + 16), v5);
    if (v5)
      CFRelease(v5);
  }
  return v3;
}

double CGPDFLayoutGetBoundsForTextRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGFloat height;
  uint64_t v4;
  uint64_t v5;
  double x;
  uint64_t v8;
  uint64_t v9;
  CGFloat width;
  CGFloat y;
  uint64_t v12;
  CGFloat *p_height;
  CGSize *p_size;
  const CGRect *v15;
  CGSize *v16;
  CGFloat *v17;
  BOOL v18;
  CGFloat *p_y;
  const CGRect *v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  height = 0.0;
  if (!a1)
    return INFINITY;
  v4 = a2;
  if (a2 < 0)
    return INFINITY;
  v5 = *(_QWORD *)(a1 + 48);
  if (a2 >= v5 || a3 < 1)
    return INFINITY;
  if (v5 >= a2 + a3)
    v8 = a2 + a3;
  else
    v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 24) + 24 * a2 + 8;
  width = 0.0;
  x = INFINITY;
  y = INFINITY;
  do
  {
    v12 = *(_QWORD *)(v9 - 8);
    p_height = &CGRectNull.size.height;
    p_size = &CGRectNull.size;
    v15 = (const CGRect *)(v12 + 16);
    v16 = (CGSize *)(v12 + 32);
    v17 = (CGFloat *)(v12 + 40);
    v18 = v12 == 0;
    if (v12)
      p_y = (CGFloat *)(v12 + 24);
    else
      p_y = &CGRectNull.origin.y;
    if (v18)
    {
      v20 = &CGRectNull;
    }
    else
    {
      p_size = v16;
      p_height = v17;
      v20 = v15;
    }
    v21 = 0.0;
    if (*(_QWORD *)v9)
      v21 = *(double *)(*(_QWORD *)v9 + 40);
    v28.origin.x = CGRectUprightBoundsForRotation(v20->origin.x, *p_y, p_size->width, *p_height, v21);
    v28.origin.y = v22;
    v28.size.width = v23;
    v28.size.height = v24;
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    v27 = CGRectUnion(v26, v28);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
    ++v4;
    v9 += 24;
  }
  while (v4 < v8);
  return x;
}

__n64 CGPDFLayoutGetRectForTextRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n64 result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat *p_height;
  CGSize *p_size;
  const CGRect *v15;
  CGFloat *v16;
  CGSize *v17;
  CGFloat *v18;
  BOOL v19;
  CGFloat *p_y;
  const CGRect *v21;
  CGRect v22;

  if (a1)
  {
    v3 = a2;
    if (a2 < 0)
      return (__n64)0x7FF0000000000000;
    v4 = *(_QWORD *)(a1 + 48);
    if (a2 >= v4 || a3 < 1)
    {
      return (__n64)0x7FF0000000000000;
    }
    else
    {
      if (v4 >= a2 + a3)
        v7 = a2 + a3;
      else
        v7 = *(_QWORD *)(a1 + 48);
      v8 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 24 * a2);
      v9 = 0;
      result.n64_u64[0] = 0x7FF0000000000000;
      v10 = 0x7FF0000000000000;
      v11 = 0;
      do
      {
        v12 = *v8;
        v8 += 3;
        p_height = &CGRectNull.size.height;
        p_size = &CGRectNull.size;
        v15 = (const CGRect *)(v12 + 16);
        v16 = (CGFloat *)(v12 + 24);
        v17 = (CGSize *)(v12 + 32);
        v18 = (CGFloat *)(v12 + 40);
        v19 = v12 == 0;
        if (v12)
          p_y = v16;
        else
          p_y = &CGRectNull.origin.y;
        if (v19)
        {
          v21 = &CGRectNull;
        }
        else
        {
          p_size = v17;
          p_height = v18;
          v21 = v15;
        }
        v22.origin.x = v21->origin.x;
        v22.size.height = *p_height;
        v22.size.width = p_size->width;
        v22.origin.y = *p_y;
        *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, v22);
        ++v3;
      }
      while (v3 < v7);
    }
  }
  else
  {
    return (__n64)0x7FF0000000000000;
  }
  return result;
}

CFMutableStringRef CGPDFLayoutCreateString(uint64_t a1)
{
  CFMutableStringRef Mutable;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t length;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *p_data;
  uint64_t v13;
  const __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  _QWORD *ValueAtIndex;
  const void *v23;
  uint64_t v24;
  CFTypeRef *v26;
  CFTypeRef *v27;
  __CFString *v28;
  CFTypeRef cf[3];

  Mutable = (CFMutableStringRef)a1;
  if (!a1)
    return Mutable;
  if (!*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      v4 = v2 + 8;
      v2 = *(_QWORD *)(v2 + 8);
      v3 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      v3 = 0;
    }
    v5 = (char *)malloc_type_malloc(2 * (*(_QWORD *)(a1 + 48) + v3 - v2), 0x1000040BDFB0063uLL);
    length = Mutable[1].length;
    if (length && (v7 = *(const __CFArray **)(length + 24)) != 0)
    {
      Count = CFArrayGetCount(v7);
      if (Count < 0)
      {
        Mutable = CFStringCreateMutable(0, 0);
LABEL_43:
        free(v5);
        return Mutable;
      }
    }
    else
    {
      Count = 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = -1;
    do
    {
      p_data = (uint64_t *)&Mutable[1].data;
      if (v9 >= Count
        || (v13 = Mutable[1].length) != 0
        && (v14 = *(const __CFArray **)(v13 + 24)) != 0
        && (p_data = (uint64_t *)CFArrayGetValueAtIndex(v14, v9)) != 0)
      {
        v15 = *p_data;
      }
      else
      {
        v15 = 0;
      }
      if (v11 + 1 >= v15)
      {
        v19 = v10;
      }
      else
      {
        v16 = ~v11 + v15;
        v17 = (uint64_t *)(Mutable->length + 24 * v11 + 24);
        do
        {
          v18 = *v17;
          if (*v17)
            LOWORD(v18) = *(_WORD *)(v18 + 8);
          v19 = v10 + 1;
          *(_WORD *)&v5[2 * v10] = v18;
          v17 += 3;
          ++v10;
          --v16;
        }
        while (v16);
      }
      if (v9 >= Count)
      {
        v10 = v19;
      }
      else
      {
        v20 = Mutable[1].length;
        if (v20
          && (v21 = *(const __CFArray **)(v20 + 24)) != 0
          && (ValueAtIndex = CFArrayGetValueAtIndex(v21, v9)) != 0)
        {
          v24 = ValueAtIndex[2];
          v23 = (const void *)ValueAtIndex[3];
        }
        else
        {
          v24 = 0;
          v23 = 0;
        }
        memcpy(&v5[2 * v19], v23, 2 * v24);
        v10 = v24 + v19;
      }
      v11 = v15;
    }
    while (v9++ != Count);
    Mutable = CFStringCreateMutable(0, 0);
    if (v10 >= 1)
    {
      v26 = (CFTypeRef *)v5;
      do
      {
        if (*(__int16 *)v26 == -4)
        {
          LOWORD(cf[0]) = 32;
          v27 = cf;
          v28 = Mutable;
        }
        else
        {
          v28 = Mutable;
          v27 = v26;
        }
        CFStringAppendCharacters(v28, (const UniChar *)v27, 1);
        v26 = (CFTypeRef *)((char *)v26 + 2);
        --v10;
      }
      while (v10);
    }
    goto LABEL_43;
  }
  memset(cf, 0, sizeof(cf));
  CGPDFLayoutGetRTLData((__CFString **)cf, a1);
  Mutable = (CFMutableStringRef)cf[0];
  if (cf[0])
    CFRetain(cf[0]);
  return Mutable;
}

const __CFAttributedString *CGPDFLayoutCreateAttributedStringForRanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *String;
  CFMutableStringRef MutableCopy;
  uint64_t v11;
  uint64_t appended;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex Length;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  const __CFString *v34;
  CFMutableStringRef v35;
  __CFString *StringForRanges;
  const __CFString *v37;
  CFIndex v38;
  CFIndex v39;
  const __CFAllocator *v40;
  const __CFAttributedString *v41;
  const __CFAllocator *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t RangeInCharacterRange;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  _BOOL4 v56;
  CFIndex v57;
  CFIndex v58;
  uint64_t v59;
  CFIndex v60;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  uint64_t v64;
  const __CFArray *v65;
  uint64_t *ValueAtIndex;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const __CFArray *v72;
  _QWORD *v73;
  uint64_t v76;
  const __CFAllocator *alloc;
  CFAllocatorRef alloca;
  uint64_t v79;
  const __CFString *v80;
  uint64_t v83;
  uint64_t v84;
  __CFString *v85;
  uint64_t v86;
  const __CFAttributedString *aStr;
  UniChar chars;
  UniChar v89[2];
  void *v90;
  CFRange v91;
  CFRange v92;

  aStr = 0;
  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v76 = a3 - 1;
      if (a3 >= 1)
      {
        if (*(_BYTE *)(a1 + 72))
        {
          alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          v5 = 0;
          do
          {
            v6 = (uint64_t *)(v3 + 16 * v5);
            v7 = v6[1];
            if (v7)
            {
              v79 = v5;
              v8 = *v6;
              String = CFAttributedStringGetString(aStr);
              MutableCopy = CFStringCreateMutableCopy(alloc, 0, String);
              v90 = 0;
              v11 = v8 + v7;
              v83 = v8 + v7;
              v85 = MutableCopy;
              do
              {
                *(_DWORD *)v89 = 0;
                appended = CPTextServicesAppendTextLine(MutableCopy, (_QWORD *)a1, v8, v7, &v90, (int *)v89);
                v13 = appended;
                if (v11 > appended)
                {
                  if (appended >= 1 && *(_QWORD *)(a1 + 48) >= appended && (v14 = *(_QWORD *)(a1 + 24)) != 0)
                  {
                    v15 = *(_QWORD *)(v14 + 24 * (appended - 1));
                    if (v15)
                      LOWORD(v15) = *(_WORD *)(v15 + 8);
                  }
                  else
                  {
                    LOWORD(v15) = 0;
                  }
                  chars = v15;
                  CFStringAppendCharacters(MutableCopy, &chars, 1);
                }
                Length = CFAttributedStringGetLength(aStr);
                v91.location = 0;
                v91.length = Length;
                CFAttributedStringReplaceString(aStr, v91, MutableCopy);
                v17 = CFStringGetLength(MutableCopy);
                if (v11 <= v13)
                  v22 = 0;
                else
                  v22 = -1;
                v23 = v22 - Length + v17;
                if (*(int *)v89 >= v23)
                  v24 = v23;
                else
                  v24 = *(int *)v89;
                if (v24 < 1)
                {
                  v24 = 0;
                  v26 = 0;
                  v25 = 0;
                }
                else
                {
                  v25 = 0;
                  v26 = 0;
                  v27 = 0;
                  v28 = (int *)v90;
                  do
                  {
                    v29 = v28[v27];
                    if ((v29 & 0x80000000) == 0 && v13 + ~v8 > v29)
                    {
                      v30 = v8 + v29;
                      if (v30 >= 0 && *(_QWORD *)(a1 + 48) > v30 && (v31 = *(_QWORD *)(a1 + 24)) != 0)
                        v32 = *(_QWORD *)(v31 + 24 * v30 + 8);
                      else
                        v32 = 0;
                      if (v32 != v26)
                      {
                        if (v27)
                        {
                          CGPDFLayoutApplyStyleToStringForRange(v26, aStr, v25 + Length, v27 - v25, v18, v19, v20, v21);
                          v26 = v32;
                          v25 = v27;
                        }
                        else
                        {
                          v25 = 0;
                          v26 = v32;
                        }
                      }
                    }
                    ++v27;
                  }
                  while (v24 != v27);
                  v11 = v83;
                  MutableCopy = v85;
                }
                CGPDFLayoutApplyStyleToStringForRange(v26, aStr, v25 + Length, v24 - v25, v18, v19, v20, v21);
                free(v90);
                v90 = 0;
                v8 = v13;
                v33 = __OFSUB__(v11, v13);
                v7 = v11 - v13;
              }
              while (!((v7 < 0) ^ v33 | (v7 == 0)));
              CFRelease(MutableCopy);
              v5 = v79;
              if (v79 < v76)
              {
                v34 = CFAttributedStringGetString(aStr);
                v35 = CFStringCreateMutableCopy(alloc, 0, v34);
                v89[0] = 10;
                CFStringAppendCharacters(v35, v89, 1);
                v92.length = CFAttributedStringGetLength(aStr);
                v92.location = 0;
                CFAttributedStringReplaceString(aStr, v92, v35);
                CFRelease(v35);
              }
              v3 = a2;
            }
            ++v5;
          }
          while (v5 != a3);
        }
        else
        {
          StringForRanges = CGPDFLayoutCreateStringForRanges(a1, a2, a3);
          if (StringForRanges)
          {
            v37 = StringForRanges;
            v38 = CFStringGetLength(StringForRanges);
            if (v38 >= 1
              && (v39 = v38,
                  v40 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
                  (v41 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v37, 0)) != 0))
            {
              v42 = v41;
              aStr = CFAttributedStringCreateMutableCopy(v40, v39, v41);
              if (aStr)
              {
                alloca = v42;
                v80 = v37;
                v43 = 0;
                v44 = 0;
                v45 = 0;
                do
                {
                  v84 = v43;
                  v46 = (uint64_t *)(a2 + 16 * v43);
                  v48 = *v46;
                  v47 = v46[1];
                  RangeInCharacterRange = CPMultiUnicodesGetRangeInCharacterRange(*(_QWORD *)(a1 + 56), *v46, v47);
                  v55 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
                  v56 = v50 == 0;
                  if (v55 && v56)
                    v57 = 0;
                  else
                    v57 = RangeInCharacterRange;
                  if (v55 && v56)
                    v58 = 0;
                  else
                    v58 = RangeInCharacterRange + v50;
                  if (v57 <= v58)
                  {
                    v60 = v58;
                    v59 = 0;
                    v86 = v47 + v48;
                    v61 = 1;
                    v62 = v58;
                    do
                    {
                      v63 = v48;
                      v48 = v86;
                      if (v57 < v62)
                      {
                        v64 = *(_QWORD *)(a1 + 56);
                        if (v64
                          && (v65 = *(const __CFArray **)(v64 + 24)) != 0
                          && (ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v65, v57)) != 0)
                        {
                          v48 = *ValueAtIndex;
                        }
                        else
                        {
                          v48 = 0;
                        }
                      }
                      v67 = v48 - v63;
                      if (v48 <= v63)
                      {
                        v70 = v61;
                      }
                      else
                      {
                        v68 = 24 * v63 + 8;
                        v69 = v59;
                        do
                        {
                          v59 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v68);
                          if (v59 == v69)
                          {
                            v59 = v69;
                          }
                          else
                          {
                            if (v45 >= 1)
                              CGPDFLayoutApplyStyleToStringForRange(v69, aStr, v44, v45 - v44, v51, v52, v53, v54);
                            v44 = v45;
                          }
                          v45 += v61;
                          v68 += 24;
                          v61 = 1;
                          v69 = v59;
                          v70 = 1;
                          --v67;
                        }
                        while (v67);
                      }
                      v61 = v70;
                      v62 = v60;
                      if (v57 < v60)
                      {
                        v71 = *(_QWORD *)(a1 + 56);
                        if (v71
                          && (v72 = *(const __CFArray **)(v71 + 24)) != 0
                          && (v73 = CFArrayGetValueAtIndex(v72, v57)) != 0)
                        {
                          v61 = v73[2];
                        }
                        else
                        {
                          v61 = 0;
                        }
                      }
                    }
                    while (v57++ != v60);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  CGPDFLayoutApplyStyleToStringForRange(v59, aStr, v44, v45 - v44, v51, v52, v53, v54);
                  ++v45;
                  v43 = v84 + 1;
                }
                while (v84 + 1 != a3);
                v42 = alloca;
                v37 = v80;
              }
              else
              {
                aStr = 0;
              }
              CFRelease(v37);
            }
            else
            {
              aStr = 0;
              v42 = (const __CFAllocator *)v37;
            }
            CFRelease(v42);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return aStr;
}

void CGPDFLayoutApplyStyleToStringForRange(uint64_t a1, __CFAttributedString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorSpace **v12;
  CGColorSpace *ColorSpace;
  int v14;
  CGColorRef v15;
  const __CFAllocator *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  uint64_t v19;
  UInt8 bytes[8];
  CGFloat components[2];
  __int128 v22;
  void *keys[5];
  void *values;
  CFTypeRef cf[2];
  CFTypeRef v26[2];
  uint64_t v27;
  CFRange v28;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)cf = 0u;
  keys[0] = (void *)kCGPDFTextStyleFont;
  keys[1] = (void *)kCGPDFTextStyleFontSize;
  keys[2] = (void *)kCGPDFTextStyleFillColor;
  keys[3] = (void *)kCGPDFTextStyleFillColorSpace;
  keys[4] = (void *)kCGPDFTextStyleBaseLineOffset;
  *(_QWORD *)bytes = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  v12 = *(CGColorSpace ***)(a1 + 24);
  if (v12)
  {
    if (((unint64_t)v12 & 0x8000000000000000) != 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(*(_QWORD *)(a1 + 24), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (ColorSpace)
      {
LABEL_5:
        v14 = 0;
LABEL_9:
        v15 = (CGColorRef)v12;
        goto LABEL_10;
      }
    }
    else
    {
      ColorSpace = v12[3];
      if (ColorSpace)
        goto LABEL_5;
    }
    v14 = 1;
    ColorSpace = CGColorSpaceCreateDeviceRGB();
    goto LABEL_9;
  }
  ColorSpace = CGColorSpaceCreateDeviceRGB();
  *(_OWORD *)components = xmmword_1850022A8;
  v22 = unk_1850022B8;
  v15 = CGColorCreate(ColorSpace, components);
  v14 = 1;
LABEL_10:
  components[0] = *(CGFloat *)(a1 + 48);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 8);
  cf[0] = CFDataCreate(v16, (const UInt8 *)&v19, 8);
  cf[1] = v15;
  v26[0] = ColorSpace;
  v26[1] = CFDataCreate(v16, (const UInt8 *)components, 8);
  v17 = CFDictionaryCreate(v16, (const void **)keys, (const void **)&values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v17)
  {
    v18 = v17;
    v28.location = a3;
    v28.length = a4;
    CFAttributedStringSetAttributes(a2, v28, v17, 0);
    CFRelease(v18);
  }
  if (v14)
    CGColorSpaceRelease(ColorSpace);
  if (!v12 && v15)
    CFRelease(v15);
  if (cf[0])
    CFRelease(cf[0]);
  if (values)
    CFRelease(values);
  if (v26[1])
    CFRelease(v26[1]);
}

uint64_t CGPDFLayoutGetLineRangesForTextRange(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  int *NodeContainingTextRange;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  if (a5)
  {
    v6 = *a5;
    *a5 = 0;
    if (result)
    {
      if ((a2 & 0x8000000000000000) == 0 && a3 >= 1)
      {
        NodeContainingTextRange = (int *)CGPDFNodeGetNodeContainingTextRange(*(_QWORD *)(result + 104), a2, a3);
        v14[0] = a2;
        v14[1] = a3;
        v14[2] = a4;
        v14[3] = a5;
        v14[4] = v6;
        if (NodeContainingTextRange)
          v11 = *NodeContainingTextRange;
        else
          v11 = 0;
        v12 = 1;
        while (kCGPDFNodeTypeOrder[v12] != v11)
        {
          if (++v12 == 12)
          {
            v13 = 0;
            return ((uint64_t (*)(_QWORD, int *, _QWORD *))lineRangeFuncArray[v13])(0, NodeContainingTextRange, v14);
          }
        }
        v13 = v12;
        return ((uint64_t (*)(_QWORD, int *, _QWORD *))lineRangeFuncArray[v13])(0, NodeContainingTextRange, v14);
      }
    }
  }
  return result;
}

BOOL mapLineRangeStop(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t TextRange;
  uint64_t v5;

  TextRange = CGPDFNodeGetTextRange(a2);
  return *a3 + (a3[1] & ~((uint64_t)a3[1] >> 63)) > TextRange + (v5 & (v5 >> 63));
}

uint64_t mapLineRangeFetch(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t TextRange;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  TextRange = CGPDFNodeGetTextRange(a2);
  v6 = v5;
  v7 = a3[1];
  if (v7 <= 0)
    v8 = *a3 + v7;
  else
    v8 = *a3;
  if (v7 <= 0)
    v9 = *a3;
  else
    v9 = *a3 + v7;
  v10 = TextRange + v6;
  if (v6 <= 0)
    v11 = TextRange + v6;
  else
    v11 = TextRange;
  if (v6 <= 0)
    v10 = TextRange;
  v12 = v9 > v11 && v10 <= v8;
  v13 = v12;
  if (!v12 && v9 > v11)
  {
    v15 = a3[2];
    v14 = (uint64_t *)a3[3];
    v16 = *v14;
    if (v15 && v16 < a3[4])
    {
      v17 = CPRangeIntersection(*a3, v7, TextRange, v6);
      v18 = (uint64_t *)(v15 + 16 * v16);
      *v18 = v17;
      v18[1] = v19;
      v16 = *v14;
    }
    *v14 = v16 + 1;
    return 1;
  }
  return v13;
}

BOOL mapLineRangeRecurse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t TextRange;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL8 result;

  TextRange = CGPDFNodeGetTextRange(a2);
  v7 = *a3;
  v8 = a3[1];
  if (v8 <= 0)
    v9 = *a3 + v8;
  else
    v9 = *a3;
  if (v8 > 0)
    v7 = *a3 + v8;
  v10 = TextRange + v6;
  if (v6 <= 0)
    v11 = TextRange + v6;
  else
    v11 = TextRange;
  if (v6 <= 0)
    v10 = TextRange;
  v12 = v7 > v11 && v10 <= v9;
  result = v12;
  if (!v12 && v7 > v11)
    return CGPDFNodeMapByType(a2, (uint64_t)lineRangeFuncArray);
  return result;
}

uint64_t CGPDFLayoutRangeIsOfType(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *NodeContainingTextRange;
  uint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t TextRange;
  uint64_t v33;
  uint64_t v34;
  int64x2_t *v36;
  uint64_t FirstIndex;
  uint64_t LastIndex;
  int v39;
  int v40;
  int v41;
  int v42;

  if (!a1)
    return 0;
  v5 = 1;
  if (a3 && a4)
  {
    v9 = a3;
    v11 = a4 - 1;
    if ((a4 - 1) > 4)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = dword_184F7A354[v11];
      v13 = dword_184F7A368[v11];
    }
    if (a2 < 0 || a1[6] <= a2 || (v14 = a1[3]) == 0)
      v15 = 0;
    else
      v15 = *(_DWORD *)(v14 + 24 * a2 + 16);
    if ((v15 & v13) != 0 || (CGPDFLayoutIsWhiteSpaceCharacter((uint64_t)a1, a2) & 1) != 0)
    {
      v16 = 1;
    }
    else
    {
      if (a2 < 0 || a1[6] <= a2)
      {
        LODWORD(v23) = 0;
      }
      else
      {
        v23 = a1[3];
        if (v23)
        {
          v23 = *(_QWORD *)(v23 + 24 * a2);
          if (v23)
            LODWORD(v23) = *(__int16 *)(v23 + 8) == -4;
        }
      }
      v16 = (v15 & 1) != 0 ? 0 : v23;
    }
    v17 = a2 + a3;
    v18 = a2 + a3 - 1;
    if (a2 + a3 >= 1 && a1[6] >= v17 && (v19 = a1[3]) != 0)
      v20 = *(_DWORD *)(v19 + 24 * v18 + 16);
    else
      v20 = 0;
    if ((v20 & v12) != 0)
    {
      LODWORD(v21) = 1;
    }
    else
    {
      v22 = v16;
      if ((CGPDFLayoutIsWhiteSpaceCharacter((uint64_t)a1, a2 + a3 - 1) & 1) != 0)
      {
        LODWORD(v21) = 1;
        v16 = v22;
      }
      else
      {
        if (v17 < 1 || a1[6] < v17)
        {
          LODWORD(v21) = 0;
          v16 = v22;
        }
        else
        {
          v21 = a1[3];
          v16 = v22;
          if (v21)
          {
            v21 = *(_QWORD *)(v21 + 24 * v18);
            if (v21)
              LODWORD(v21) = *(__int16 *)(v21 + 8) == -4;
          }
        }
        if ((v20 & 2) != 0)
          LODWORD(v21) = 0;
      }
    }
    v5 = v16 & v21;
    if (a4 == 1 && (v16 & v21 & 1) == 0)
    {
      v41 = v21;
      v42 = v16;
      v24 = a2;
      v25 = a1[13];
      NodeContainingTextRange = (int *)CGPDFNodeGetNodeContainingTextRange(v25, a2, 1);
      v27 = (uint64_t)NodeContainingTextRange;
      if (NodeContainingTextRange)
        v28 = *NodeContainingTextRange;
      else
        v28 = 0;
      v29 = (int *)CGPDFNodeGetNodeContainingTextRange(v25, a2 + a3 - 1, 1);
      v30 = (uint64_t)v29;
      if (v29)
        v31 = *v29;
      else
        v31 = 0;
      if (v28 == 1)
      {
        TextRange = CGPDFNodeGetTextRange(v27);
        if (TextRange >= a2)
          v24 = a2;
        else
          v24 = TextRange;
        if (TextRange >= a2)
          v9 = a3;
        else
          v9 = v17 - TextRange;
      }
      if (v31 == 1)
      {
        v33 = CGPDFNodeGetTextRange(v30);
        if (v33 + v34 > v17)
          v9 = v33 + v34 - v24;
      }
      if (v24 == a2 && v9 == a3)
        return 0;
      v36 = CPIndexSetCreateWithRange(v24, v9);
      if (CGPDFLayoutExtendRangeToWordBoundaries((uint64_t)a1, (uint64_t)v36, a2, a3))
      {
        FirstIndex = CPIndexSetGetFirstIndex((uint64_t)v36);
        LastIndex = CPIndexSetGetLastIndex((uint64_t)v36);
        v39 = v42;
        if (FirstIndex == a2)
          v39 = 1;
        v40 = v41;
        if (LastIndex + 1 == v17)
          v40 = 1;
        v5 = v40 & v39;
      }
      else
      {
        v5 = 0;
      }
      if (v36)
        CFRelease(v36);
    }
  }
  return v5;
}

uint64_t CGPDFLayoutGetOffsetInLine(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t RangeInCharacterRange;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  CFIndex v12;
  CFIndex v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t *ValueAtIndex;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFArray *v27;
  _QWORD *v28;

  if (!*(_BYTE *)(a1 + 72))
  {
    RangeInCharacterRange = CPMultiUnicodesGetRangeInCharacterRange(*(_QWORD *)(a1 + 56), a2, a3);
    v9 = 0;
    v10 = RangeInCharacterRange == 0x7FFFFFFFFFFFFFFFLL;
    v11 = v8 == 0;
    if (v10 && v11)
      v12 = 0;
    else
      v12 = RangeInCharacterRange;
    if (v10 && v11)
      v13 = 0;
    else
      v13 = RangeInCharacterRange + v8;
    if (v12 <= v13)
    {
      v9 = 0;
      v14 = 0;
      v15 = a2 - 1;
      v16 = a2 + a3;
      do
      {
        v17 = v16;
        if (v12 < v13)
        {
          v18 = *(_QWORD *)(a1 + 56);
          if (v18
            && (v19 = *(const __CFArray **)(v18 + 24)) != 0
            && (ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v19, v12)) != 0)
          {
            v17 = *ValueAtIndex;
          }
          else
          {
            v17 = 0;
          }
        }
        v21 = ~v14 + a4;
        if (v21 >= v17 - v15 - 2)
          v21 = v17 - v15 - 2;
        v22 = v9 + v21;
        v23 = v14 + v21;
        if (v14 < a4)
          v24 = v23 + 1;
        else
          v24 = v14;
        if (v14 < a4)
          v25 = v22 + 1;
        else
          v25 = v9;
        if (v15 + 1 < v17)
        {
          v14 = v24;
          v9 = v25;
        }
        if (v12 < v13)
        {
          v26 = *(_QWORD *)(a1 + 56);
          if (v26)
          {
            v27 = *(const __CFArray **)(v26 + 24);
            if (v27 && (v28 = CFArrayGetValueAtIndex(v27, v12)) != 0)
              v26 = v28[2];
            else
              v26 = 0;
          }
          v14 += v26;
          if (v14 >= (unint64_t)a4)
            return v9 + a2;
          ++v9;
        }
        ++v12;
        v15 = v17;
      }
      while (v13 + 1 != v12);
    }
    return v9 + a2;
  }
  return a4;
}

uint64_t CGPDFLayoutDebugLineElement()
{
  return 0;
}

void CGPDFSoftMaskFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CGPDFGroupRelease(*(CGColorSpaceRef **)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
}

void upsample_provider_release_info(uint64_t a1)
{
  void *v2;

  if (!*(_BYTE *)(a1 + 8))
    CGDataProviderUnlock(*(_QWORD *)a1);
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  v2 = *(void **)(a1 + 136);
  if (v2)
    free(v2);
  free((void *)a1);
}

unint64_t upsample_provider_get_bytes(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*(_BYTE *)(a1 + 8))
    _CGHandleAssert("upsample_provider_get_bytes", 361, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "info->src_provider_uses_random_access == false", "", a6, a7, a8, vars0);
  return upsample_provider_get_bytes_at_position_inner(a1, a2, 0, a3, 1, a6, a7, a8);
}

unint64_t upsample_provider_skip_forward(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;

  v2 = a2;
  v4 = *a1;
  v5 = upsample_provider_destination_byte_count_to_source_byte_count((uint64_t)a1, a2);
  v6 = CGDataProviderSkipForwardInternal(v4, v5);
  if ((v6 & 0x8000000000000000) != 0)
    _CGHandleAssert("upsample_provider_skip_forward", 375, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "skipped >= 0", "", v7, v8, v9, v12);
  v10 = v6;
  if (v6 != v5)
    v2 = upsample_provider_source_byte_count_to_destination_byte_count((uint64_t)a1, v6);
  a1[11] += v10;
  a1[6] += v2;
  return v2;
}

void upsample_provider_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  v9 = *a1;
  if (!v9)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, v10);
  if ((*(_DWORD *)(v9 + 20) | 2) != 3)
    _CGHandleAssert("upsample_provider_rewind", 400, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "", "Unimplemented", a6, a7, a8, v10);
  CGDataProviderRewind(v9);
  a1[6] = 0;
  a1[11] = 0;
}

uint64_t upsample_provider_lock(uint64_t *a1)
{
  return CGDataProviderLock(*a1);
}

uint64_t upsample_provider_unlock(uint64_t *a1)
{
  return CGDataProviderUnlock(*a1);
}

uint64_t upsample_provider_get_bytes_per_row_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t upsample_provider_get_work_buffer_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

unint64_t upsample_provider_destination_byte_count_to_source_byte_count(uint64_t a1, unint64_t a2)
{
  return upsample_provider_byte_count_to_byte_count(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2);
}

unint64_t upsample_provider_source_byte_count_to_destination_byte_count(uint64_t a1, unint64_t a2)
{
  return upsample_provider_byte_count_to_byte_count(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2);
}

unint64_t upsample_provider_byte_count_to_byte_count(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (!a4)
    _CGHandleAssert("upsample_provider_byte_count_to_byte_count", 177, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "input_bytes_per_row != 0", "rowbytes %zu", a6, a7, a8, 0);
  if (!a10)
    return 0;
  if (a4 == a5 || !a9)
  {
    v12 = a10 / a1 / a2;
    v13 = a10 / a1 % a2;
    if (a10 / a1 >= a2 && v12 != 1)
    {
      v12 = vcvtas_u32_f32((float)((float)(unint64_t)a8 * (float)v12) / (float)a3);
      if (a8 - 1 < v12)
        v12 = a8 - 1;
    }
    if (v13 >= 2)
    {
      v13 = vcvtas_u32_f32((float)((float)(unint64_t)a7 * (float)v13) / (float)a2);
      if (a7 - 1 < v13)
        v13 = a7 - 1;
    }
    return (v13 + v12 * a7) * a1;
  }
  else
  {
    if (a10 >= a4)
      v10 = a10 / a4;
    else
      v10 = 0;
    v14 = a10 - v10 * a4;
    v15 = v14 + a6 % a4;
    if (v15 >= a4)
    {
      ++v10;
      v14 = v15 - a4;
      v15 -= a4;
    }
    v16 = v15 >= a5;
    v17 = v15 - a5;
    if (v16)
      v14 = v17;
    if (v16)
      v18 = a5;
    else
      v18 = 0;
    v19 = v18 / a1;
    if (v10 >= 2)
    {
      v10 = vcvtas_u32_f32((float)((float)(unint64_t)a8 * (float)v10) / (float)a3);
      if (a8 - 1 < v10)
        v10 = a8 - 1;
    }
    if (v19 != 1 && v18 >= a1)
    {
      v19 = vcvtas_u32_f32((float)((float)(unint64_t)a7 * (float)v19) / (float)a2);
      if (a7 - 1 < v19)
        v19 = a7 - 1;
    }
    return v14 + v10 * a9 + v19 * a1;
  }
}

unint64_t upsample_provider_get_bytes_at_position_inner(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  unint64_t BytesAtPositionInternal;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v52;
  _WORD *v53;
  uint64_t v54;
  __int16 v55;
  char v57;

  if ((a3 & 0x8000000000000000) != 0)
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 290, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "pos >= 0", "pos %lld", a6, a7, a8, a3);
  v9 = a4;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 < a4)
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 296, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "length <= dst_scaline_size", "length %zu size %zu", a6, a7, a8, a4);
  v14 = upsample_provider_destination_byte_count_to_source_byte_count(a1, a4);
  v22 = upsample_provider_byte_count_to_byte_count(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a3);
  if (v22 >= 0x7FFFFFFF)
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 314, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "src_pos >= 0 && src_pos < INT_MAX", "pos %lld", v19, v20, v21, v22);
  v23 = *(_QWORD **)a1;
  if (v14 > *(_QWORD *)(a1 + 144))
  {
    CGPostError((uint64_t)"%s: bytes_to_read %zd > work_buffer_size %zd", v15, v16, v17, v18, v19, v20, v21, (char)"upsample_provider_get_bytes_at_position_inner");
    if (v14 > *(_QWORD *)(a1 + 144))
      _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 322, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "bytes_to_read <= info->work_buffer_size", "bytes to read %zu  buffer size %zu", v19, v20, v21, v14);
  }
  v24 = *(char **)(a1 + 136);
  if (*(_BYTE *)(a1 + 8))
    BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v23, v24, v22, v14, v18, v19, v20, v21);
  else
    BytesAtPositionInternal = CGDataProviderSequentialGetBytesInternal((uint64_t)v23, (uint64_t)v24, v14);
  v29 = BytesAtPositionInternal;
  if (BytesAtPositionInternal)
  {
    v30 = *(_QWORD *)(a1 + 136);
    v31 = *(_QWORD *)(a1 + 96);
    switch(v31)
    {
      case 32:
        if (v11 >= 4)
        {
          v38 = 0;
          v39 = *(_QWORD *)(a1 + 120);
          v40 = v39 >> 1;
          v41 = *(_QWORD *)(a1 + 104);
          v42 = 4 * v41;
          do
          {
            if (v41)
            {
              v43 = (int *)(v30 + v42 * (v40 >> 16));
              v44 = a2;
              v45 = v41;
              do
              {
                v46 = *v43++;
                *v44++ = v46;
                --v45;
              }
              while (v45);
            }
            v40 += v39;
            v38 += v41;
            a2 = (_DWORD *)((char *)a2 + v42);
          }
          while (v38 < v11 >> 2);
        }
        break;
      case 16:
        if (v11 >= 2)
        {
          v47 = 0;
          v48 = *(_QWORD *)(a1 + 120);
          v49 = v48 >> 1;
          v50 = *(_QWORD *)(a1 + 104);
          v51 = 2 * v50;
          do
          {
            if (v50)
            {
              v52 = (__int16 *)(v30 + v51 * (v49 >> 16));
              v53 = a2;
              v54 = v50;
              do
              {
                v55 = *v52++;
                *v53++ = v55;
                --v54;
              }
              while (v54);
            }
            v49 += v48;
            v47 += v50;
            a2 = (_DWORD *)((char *)a2 + v51);
          }
          while (v47 < v11 >> 1);
        }
        break;
      case 8:
        if (v11)
        {
          v32 = 0;
          v33 = *(_QWORD *)(a1 + 120);
          v34 = v33 >> 1;
          v35 = *(_QWORD *)(a1 + 104);
          do
          {
            if (v35)
            {
              v36 = 0;
              v37 = v30 + (v34 >> 16) * v35;
              do
              {
                *((_BYTE *)a2 + v32 + v36) = *(_BYTE *)(v37 + v36);
                ++v36;
                v35 = *(_QWORD *)(a1 + 104);
              }
              while (v36 < v35);
              v33 = *(_QWORD *)(a1 + 120);
            }
            v34 += v33;
            v32 += v35;
          }
          while (v32 < v11);
        }
        break;
      default:
        _CGHandleAssert("upsample_data", 159, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "", "Unimplemented", v26, v27, v28, v57);
    }
  }
  if (v14 < BytesAtPositionInternal)
    _CGHandleAssert("upsample_provider_get_bytes_at_position_inner", 336, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "src_length >= bytes_read", "length %zu  to read %zu", v26, v27, v28, v14);
  if (BytesAtPositionInternal < v14)
    v9 = upsample_provider_source_byte_count_to_destination_byte_count(a1, BytesAtPositionInternal);
  if (a5)
  {
    *(_QWORD *)(a1 + 88) += v29;
    *(_QWORD *)(a1 + 48) += v9;
  }
  return v9;
}

unint64_t upsample_provider_get_bytes_at_position(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!*(_BYTE *)(a1 + 8))
    _CGHandleAssert("upsample_provider_get_bytes_at_position", 353, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "info->src_provider_uses_random_access == true", "", a6, a7, a8, vars0);
  return upsample_provider_get_bytes_at_position_inner(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t upsample_provider_retain_data(uint64_t *a1)
{
  CGDataProviderRetainBytePtr(*a1);
  return CGDataProviderRetainData(*a1);
}

uint64_t upsample_provider_release_data(uint64_t *a1)
{
  CGDataProviderReleaseBytePtr(*a1);
  return CGDataProviderReleaseData(*a1);
}

uint64_t cmap_bf_set_release(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (result)
  {
    v1 = result;
    free(*(void **)(result + 8));
    free(*(void **)(v1 + 32));
    v2 = *(_QWORD **)(v1 + 64);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    if (v4)
      operator delete(v4);
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

void cmap_bf_set_add_range(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unsigned __int16 *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  void **v22;
  _QWORD *v23;
  unint64_t v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v46;

  if (!a1 || a4 > 0x400)
    return;
  if (*(_QWORD *)(a1 + 40) < a4)
    *(_QWORD *)(a1 + 40) = a4;
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v12 = a4 + v10 + 1;
  if (v12 <= v11)
  {
    v13 = *(_WORD **)(a1 + 32);
  }
  else
  {
    do
      v11 = 2 * v11 + 10;
    while (v11 < v12);
    v13 = malloc_type_realloc(*(void **)(a1 + 32), 2 * v11, 0x1000040BDFB0063uLL);
    if (!v13)
      return;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 16) = v11;
    v10 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 24) = v10 + 1;
  v13[v10] = a4;
  memcpy(&v13[v10 + 1], a5, 2 * a4);
  *(_QWORD *)(a1 + 24) += a4;
  if (*(_DWORD *)a1 > a3)
  {
    if (a2 > a3)
      goto LABEL_17;
    goto LABEL_15;
  }
  v14 = grow_code_map((void **)a1, a3);
  if (a2 <= a3 && (v14 & 1) != 0)
  {
LABEL_15:
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 8);
    do
    {
      v17 = (_DWORD *)(v16 + 8 * (a2 + v15));
      *v17 = v10;
      v17[1] = v15++;
    }
    while (a2 + v15 <= a3);
  }
LABEL_17:
  if (a4 == 1 && a2 <= a3)
  {
    v18 = (_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 56);
    while (1)
    {
      v20 = *a5;
      if (v19)
      {
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          v10 = *a5;
          if (v19 <= v20)
            v10 = v20 % v19;
        }
        else
        {
          v10 = ((_DWORD)v19 - 1) & v20;
        }
        v22 = *(void ***)(*(_QWORD *)(a1 + 48) + 8 * v10);
        if (v22)
        {
          v23 = *v22;
          if (*v22)
          {
            do
            {
              v24 = v23[1];
              if (v24 == v20)
              {
                if (*((unsigned __int16 *)v23 + 8) == (_DWORD)v20)
                  goto LABEL_92;
              }
              else
              {
                if (v21.u32[0] > 1uLL)
                {
                  if (v24 >= v19)
                    v24 %= v19;
                }
                else
                {
                  v24 &= v19 - 1;
                }
                if (v24 != v10)
                  break;
              }
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
        }
      }
      v23 = operator new(0x18uLL);
      *v23 = 0;
      v23[1] = v20;
      *((_WORD *)v23 + 8) = v20;
      *((_WORD *)v23 + 9) = 0;
      v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
      v26 = *(float *)(a1 + 80);
      if (!v19 || (float)(v26 * (float)v19) < v25)
        break;
LABEL_82:
      v43 = *(_QWORD *)(a1 + 48);
      v44 = *(_QWORD **)(v43 + 8 * v10);
      if (v44)
      {
        *v23 = *v44;
      }
      else
      {
        *v23 = *v18;
        *v18 = v23;
        *(_QWORD *)(v43 + 8 * v10) = v18;
        if (!*v23)
          goto LABEL_91;
        v45 = *(_QWORD *)(*v23 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v45 >= v19)
            v45 %= v19;
        }
        else
        {
          v45 &= v19 - 1;
        }
        v44 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v45);
      }
      *v44 = v23;
LABEL_91:
      ++*(_QWORD *)(a1 + 72);
LABEL_92:
      *((_WORD *)v23 + 9) = a2++;
      if (a2 > a3)
        return;
    }
    v27 = (v19 & (v19 - 1)) != 0;
    if (v19 < 3)
      v27 = 1;
    v28 = v27 | (2 * v19);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = (int8x8_t)v29;
    else
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v19 = *(_QWORD *)(a1 + 56);
    }
    if (*(_QWORD *)&prime > v19)
      goto LABEL_48;
    if (*(_QWORD *)&prime < v19)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v19 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (*(_QWORD *)&prime <= v37)
        prime = (int8x8_t)v37;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_48:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v31 = operator new(8 * *(_QWORD *)&prime);
          v32 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v31;
          if (v32)
            operator delete(v32);
          v33 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v33++) = 0;
          while (*(_QWORD *)&prime != v33);
          v34 = (_QWORD *)*v18;
          if (*v18)
          {
            v35 = v34[1];
            v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&prime)
                v35 %= *(_QWORD *)&prime;
            }
            else
            {
              v35 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v35) = v18;
            v40 = (_QWORD *)*v34;
            if (*v34)
            {
              do
              {
                v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(_QWORD *)&prime)
                    v41 %= *(_QWORD *)&prime;
                }
                else
                {
                  v41 &= *(_QWORD *)&prime - 1;
                }
                if (v41 != v35)
                {
                  v42 = *(_QWORD *)(a1 + 48);
                  if (!*(_QWORD *)(v42 + 8 * v41))
                  {
                    *(_QWORD *)(v42 + 8 * v41) = v34;
                    goto LABEL_73;
                  }
                  *v34 = *v40;
                  *v40 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v41);
                  **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v41) = v40;
                  v40 = v34;
                }
                v41 = v35;
LABEL_73:
                v34 = v40;
                v40 = (_QWORD *)*v40;
                v35 = v41;
              }
              while (v40);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_77;
        }
        v46 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v46)
          operator delete(v46);
        v19 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_77:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v19 <= v20)
        v10 = v20 % v19;
      else
        v10 = v20;
    }
    else
    {
      v10 = ((_DWORD)v19 - 1) & v20;
    }
    goto LABEL_82;
  }
}

void sub_184B4C954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t grow_code_map(void **a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  LODWORD(v2) = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > a2)
    return 1;
  do
    v2 = (2 * v2 + 10);
  while (v2 <= a2);
  result = (uint64_t)malloc_type_realloc(a1[1], 8 * v2, 0x100004000313F17uLL);
  if (result)
  {
    v5 = *(unsigned int *)a1;
    if (v5 < v2)
    {
      v6 = v2 - v5;
      v7 = (_QWORD *)(result + 8 * v5);
      do
      {
        *v7++ = 0xFFFFFFFFLL;
        --v6;
      }
      while (v6);
    }
    a1[1] = (void *)result;
    *(_DWORD *)a1 = v2;
    return 1;
  }
  return result;
}

unint64_t cmap_bf_set_get_unichars(unint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  if (result)
  {
    v8 = result;
    if (*(_DWORD *)result <= a2)
      return 0;
    v9 = *(_QWORD *)(result + 8);
    v10 = *(unsigned int *)(v9 + 8 * a2);
    if ((_DWORD)v10 == -1)
    {
      return 0;
    }
    else
    {
      v11 = (_WORD *)(*(_QWORD *)(result + 32) + 2 * v10);
      result = (unsigned __int16)*v11;
      if (a3 && *v11)
      {
        v12 = *(_DWORD *)(v9 + 8 * a2 + 4);
        v13 = result;
        do
        {
          v14 = v12 + (unsigned __int16)v11[v13];
          v12 = HIWORD(v14);
          *(_WORD *)(a3 - 2 + v13 * 2) = v14;
          --v13;
        }
        while (v13 * 2);
      }
      if (*(_QWORD *)(v8 + 40) < result)
        _CGHandleAssert("cmap_bf_set_get_unichars", 242, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/CMaps/cmap-bf-set.cpp", "n <= set->max_unichar_length", "n (%lu) overflowed unichar length (%lu)", a6, a7, a8, result);
    }
  }
  return result;
}

void CG::DisplayListXMLSerializer::~DisplayListXMLSerializer(CG::DisplayListXMLSerializer *this)
{
  CG::DisplayListXMLSerializer::~DisplayListXMLSerializer(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E1629380;
  xmlFreeTextWriter(*((xmlTextWriterPtr *)this + 4));
  xmlBufferFree(*((xmlBufferPtr *)this + 3));
  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 12));
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 9));
  CG::DisplayListSerializer::~DisplayListSerializer(this);
}

uint64_t CG::DisplayListXMLSerializer::serialize(CG::DisplayListXMLSerializer *this)
{
  int Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFURLRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFURL *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFURL *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const CGRect *v46;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  uint64_t result;
  uint64_t v51;
  float64_t v52;
  CGFloat width;
  uint64_t v54;
  float64_t v55;
  uint64_t i;
  uint64_t v57;
  const void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t *v94;
  _QWORD *v95[2];
  const __CFBoolean *propertyValueTypeRefPtr;
  float64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t *);
  void *v100;
  float64x2_t *v101;
  CG::DisplayListXMLSerializer *v102;
  float64x2_t v103;
  __int128 v104;
  void (*v105)(uint64_t);
  void *__p;
  void *v107;
  uint64_t v108;
  _QWORD v109[2];
  void (*v110)(uint64_t, uint64_t *);
  void *v111;
  CG::DisplayListXMLSerializer *v112;
  _QWORD v113[2];
  void (*v114)(uint64_t, uint64_t *);
  void *v115;
  CG::DisplayListXMLSerializer *v116;

  propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(*((CFURLRef *)this + 2), (CFStringRef)*MEMORY[0x1E0C9B4E0], &propertyValueTypeRefPtr, 0))
  {
    Value = CFBooleanGetValue(propertyValueTypeRefPtr);
    CFRelease(propertyValueTypeRefPtr);
    if (!Value)
    {
      CGPostError((uint64_t)"%s: The destination is not an existing directory", v3, v4, v5, v6, v7, v8, v9, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
      return 0;
    }
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFURLRef *)this + 2), CFSTR("Resources"), 1u);
  *((_QWORD *)this + 5) = v11;
  if (!v11)
  {
    CGPostError((uint64_t)"%s: Failed to create URL for Resources directory", v12, v13, v14, v15, v16, v17, v18, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
    return 0;
  }
  v19 = CFURLCreateCopyAppendingPathComponent(v10, *((CFURLRef *)this + 2), CFSTR("displayList.xml"), 0);
  if (v19)
  {
    v27 = v19;
    *((_QWORD *)this + 6) = CGDataConsumerCreateWithURL(v19);
    CFRelease(v27);
  }
  if (!*((_QWORD *)this + 6))
  {
    CGPostError((uint64_t)"%s: Failed to create a data consumer from given URL", v20, v21, v22, v23, v24, v25, v26, (char)"virtual BOOL CG::DisplayListXMLSerializer::serialize()");
    return 0;
  }
  xmlTextWriterSetIndent(*((xmlTextWriterPtr *)this + 4), 2);
  xmlTextWriterSetIndentString(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)" ");
  if (xmlTextWriterStartDocument(*((xmlTextWriterPtr *)this + 4), 0, "UTF-8", 0) < 0)
    return 0;
  if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"dl") & 0x80000000) == 0)
  {
    v95[0] = 0;
    v95[1] = 0;
    v94 = (uint64_t *)v95;
    v33 = *((_QWORD *)this + 1);
    v34 = *(_OWORD *)(v33 + 40);
    v103 = *(float64x2_t *)(v33 + 24);
    v104 = v34;
    CG::DisplayListXMLHelper::addRectToAttributes(&v94, "frame", &v103, v28, v29, v30, v31, v32);
    CG::DisplayListXMLHelper::addFormatToAttributes(&v94, "flags", "0x%.8X", v35, v36, v37, v38, v39, *(_DWORD *)(*((_QWORD *)this + 1) + 64));
    v45 = *((_QWORD *)this + 1);
    if (*(_QWORD *)(v45 + 576) == *(_QWORD *)(v45 + 584))
    {
      v46 = &CGRectNull;
      p_height = &CGRectNull.size.height;
      p_y = &CGRectNull.origin.y;
      p_size = &CGRectNull.size;
    }
    else
    {
      v46 = (const CGRect *)(v45 + 72);
      p_y = (CGFloat *)(v45 + 80);
      p_size = (CGSize *)(v45 + 88);
      p_height = (CGFloat *)(v45 + 96);
    }
    v51 = *(_QWORD *)p_height;
    v52 = *p_y;
    width = p_size->width;
    v103.f64[0] = v46->origin.x;
    v103.f64[1] = v52;
    *(CGFloat *)&v104 = width;
    *((_QWORD *)&v104 + 1) = v51;
    CG::DisplayListXMLHelper::addRectToAttributes(&v94, "bounds", &v103, v40, v41, v42, v43, v44);
    CG::DisplayListXMLHelper::writeAttributes(&v94, *((xmlTextWriterPtr *)this + 4));
    v103.f64[0] = 0.0;
    *(_QWORD *)&v103.f64[1] = &v103;
    *(_QWORD *)&v104 = 0x4002000000;
    *((_QWORD *)&v104 + 1) = __Block_byref_object_copy__3515;
    v105 = __Block_byref_object_dispose__3516;
    v107 = 0;
    v108 = 0;
    __p = 0;
    v54 = *((_QWORD *)this + 1);
    v55 = MEMORY[0x1E0C809B0];
    v97 = MEMORY[0x1E0C809B0];
    v98 = 0x40000000;
    v99 = ___ZN2CG24DisplayListXMLSerializer14writeResourcesEv_block_invoke;
    v100 = &unk_1E1643CC0;
    v101 = &v103;
    v102 = this;
    CG::DisplayList::enumerateAllResourcesWithBlock(v54, 0, (uint64_t)&v97);
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"resources") & 0x80000000) == 0)
    {
      v57 = *(_QWORD *)(*(_QWORD *)&v103.f64[1] + 40);
      for (i = *(_QWORD *)(*(_QWORD *)&v103.f64[1] + 48); v57 != i; v57 += 8)
      {
        v58 = *(const void **)v57;
        switch(*(_BYTE *)(*(_QWORD *)v57 + 11))
        {
          case 0:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v59;
            v113[0] = &off_1E16283C8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 1:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v60;
            v113[0] = &off_1E1628568;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 2:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v61;
            v113[0] = &off_1E1628AB8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 3:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v62;
            v113[0] = &off_1E1628400;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 4:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v63;
            v113[0] = &off_1E1628438;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 5:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v64;
            v113[0] = &off_1E16285A0;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 6:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v65;
            v113[0] = &off_1E1628710;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 7:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v66;
            v113[0] = &off_1E16286D8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 8:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v67;
            v113[0] = &off_1E16285D8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 9:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v68;
            v113[0] = &off_1E1628918;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xA:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v69;
            v113[0] = &off_1E16288A8;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xB:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v70;
            v113[0] = &off_1E1628B20;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xC:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v71;
            v113[0] = &off_1E1628A50;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          case 0xD:
            v114 = (void (*)(uint64_t, uint64_t *))this;
            v115 = v72;
            v113[0] = &off_1E16288E0;
            DisplayListXMLWriterResource::write((DisplayListXMLWriterResource *)v113, *((xmlTextWriterPtr *)this + 4));
            break;
          default:
            continue;
        }
      }
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    _Block_object_dispose(&v103, 8);
    if (__p)
    {
      v107 = __p;
      operator delete(__p);
    }
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"entryStates") & 0x80000000) == 0)
    {
      v73 = (_QWORD *)*((_QWORD *)this + 1);
      v103.f64[0] = v55;
      *(_QWORD *)&v103.f64[1] = 0x40000000;
      *(_QWORD *)&v104 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke;
      *((_QWORD *)&v104 + 1) = &__block_descriptor_tmp_19_3505;
      v105 = (void (*)(uint64_t))this;
      v74 = (_QWORD *)v73[60];
      v75 = v73 + 61;
      if (v74 != v73 + 61)
      {
        do
        {
          ((void (*)(float64x2_t *, _QWORD))v104)(&v103, v74[4]);
          v76 = (_QWORD *)v74[1];
          if (v76)
          {
            do
            {
              v77 = v76;
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
          else
          {
            do
            {
              v77 = (_QWORD *)v74[2];
              v78 = *v77 == (_QWORD)v74;
              v74 = v77;
            }
            while (!v78);
          }
          v74 = v77;
        }
        while (v77 != v75);
        v73 = (_QWORD *)*((_QWORD *)this + 1);
      }
      v97 = v55;
      v98 = 0x40000000;
      v99 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_2;
      v100 = &__block_descriptor_tmp_21;
      v101 = (float64x2_t *)this;
      v79 = (_QWORD *)v73[63];
      v80 = v73 + 64;
      if (v79 != v73 + 64)
      {
        do
        {
          v99((uint64_t)&v97, (uint64_t *)v79[4]);
          v81 = (_QWORD *)v79[1];
          if (v81)
          {
            do
            {
              v82 = v81;
              v81 = (_QWORD *)*v81;
            }
            while (v81);
          }
          else
          {
            do
            {
              v82 = (_QWORD *)v79[2];
              v78 = *v82 == (_QWORD)v79;
              v79 = v82;
            }
            while (!v78);
          }
          v79 = v82;
        }
        while (v82 != v80);
        v73 = (_QWORD *)*((_QWORD *)this + 1);
      }
      *(float64_t *)v113 = v55;
      v113[1] = 0x40000000;
      v114 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_3;
      v115 = &__block_descriptor_tmp_23_3506;
      v116 = this;
      v83 = (_QWORD *)v73[66];
      v84 = v73 + 67;
      if (v83 != v73 + 67)
      {
        do
        {
          v114((uint64_t)v113, (uint64_t *)v83[4]);
          v85 = (_QWORD *)v83[1];
          if (v85)
          {
            do
            {
              v86 = v85;
              v85 = (_QWORD *)*v85;
            }
            while (v85);
          }
          else
          {
            do
            {
              v86 = (_QWORD *)v83[2];
              v78 = *v86 == (_QWORD)v83;
              v83 = v86;
            }
            while (!v78);
          }
          v83 = v86;
        }
        while (v86 != v84);
        v73 = (_QWORD *)*((_QWORD *)this + 1);
      }
      *(float64_t *)v109 = v55;
      v109[1] = 0x40000000;
      v110 = ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_4;
      v111 = &__block_descriptor_tmp_25_3507;
      v112 = this;
      v87 = (_QWORD *)v73[69];
      v88 = v73 + 70;
      if (v87 != v73 + 70)
      {
        do
        {
          v110((uint64_t)v109, (uint64_t *)v87[4]);
          v89 = (_QWORD *)v87[1];
          if (v89)
          {
            do
            {
              v90 = v89;
              v89 = (_QWORD *)*v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              v90 = (_QWORD *)v87[2];
              v78 = *v90 == (_QWORD)v87;
              v87 = v90;
            }
            while (!v78);
          }
          v87 = v90;
        }
        while (v90 != v88);
      }
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 4), (const xmlChar *)"entries") & 0x80000000) == 0)
    {
      v91 = *((_QWORD *)this + 1);
      v103.f64[0] = v55;
      *(_QWORD *)&v103.f64[1] = 0x40000000;
      *(_QWORD *)&v104 = ___ZN2CG24DisplayListXMLSerializer12writeEntriesEv_block_invoke;
      *((_QWORD *)&v104 + 1) = &__block_descriptor_tmp_28_3490;
      v105 = (void (*)(uint64_t))this;
      CG::DisplayList::enumerateEntriesWithBlock(v91, 0, (uint64_t)&v103);
      xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    }
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 4));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v95[0]);
  }
  if (xmlTextWriterEndDocument(*((xmlTextWriterPtr *)this + 4)) < 0)
    return 0;
  result = CGDataConsumerPutBytes(*((_QWORD *)this + 6), **((_QWORD **)this + 3), *(unsigned int *)(*((_QWORD *)this + 3) + 8));
  if (result)
  {
    v92 = *((_QWORD *)this + 6);
    if (v92 && !*(_BYTE *)(v92 + 56))
    {
      v93 = *(void (**)(_QWORD))(v92 + 80);
      if (v93)
        v93(*(_QWORD *)(v92 + 16));
    }
    return 1;
  }
  return result;
}

void sub_184B4D3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:se180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:se180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (a1)
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    __break(1u);
  }
}

void ___ZN2CG24DisplayListXMLSerializer12writeEntriesEv_block_invoke(uint64_t a1, void *lpsrc)
{
  uint64_t v2;
  void *v3;
  void (**v4)(DisplayListXMLWriterEntryAction *__hidden);
  _QWORD v5[4];

  v2 = *(_QWORD *)(a1 + 32);
  switch(*((_BYTE *)lpsrc + 8))
  {
    case 0:
      v4 = &off_1E1628158;
      goto LABEL_11;
    case 1:
      v4 = &off_1E1628298;
      goto LABEL_11;
    case 2:
      v4 = &off_1E1628090;
      goto LABEL_11;
    case 3:
      v4 = &off_1E16281C8;
      goto LABEL_11;
    case 4:
      v4 = &off_1E1628190;
      goto LABEL_11;
    case 5:
      v4 = &off_1E1628390;
      goto LABEL_11;
    case 6:
      v4 = &off_1E1628530;
      goto LABEL_11;
    case 7:
      v4 = &off_1E1628838;
      goto LABEL_11;
    case 8:
      v4 = &off_1E1628260;
LABEL_11:
      v5[0] = v4;
      v5[1] = v2;
      v5[3] = v3;
      DisplayListXMLWriterEntry::write((DisplayListXMLWriterEntry *)v5, *(xmlTextWriterPtr *)(v2 + 32));
      break;
    default:
      return;
  }
}

void DisplayListXMLWriterEntry::write(DisplayListXMLWriterEntry *this, xmlTextWriterPtr writer)
{
  _QWORD **v3;
  _QWORD *v4[2];

  *((_QWORD *)this + 2) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"entry") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    (*(void (**)(DisplayListXMLWriterEntry *, _QWORD ***))(*(_QWORD *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 2));
    (*(void (**)(DisplayListXMLWriterEntry *))(*(_QWORD *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184B4D73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void DisplayListXMLWriterEntryAction::~DisplayListXMLWriterEntryAction(DisplayListXMLWriterEntryAction *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryAction::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  return 1;
}

uint64_t DisplayListXMLWriterEntryAction::writeChildElements(DisplayListXMLWriterEntryAction *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryAction::getEntry(DisplayListXMLWriterEntryAction *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntry::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char ElementIDForEntryState;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float64x2_t v52[2];

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 > 8u)
    v6 = 0;
  else
    v6 = (&off_1E1662B20)[(char)v5];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", v6);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flags", "0x%.6X", v7, v8, v9, v10, v11, BYTE1(*(_DWORD *)(v4 + 8)));
  v12 = *(float64x2_t *)(v4 + 32);
  v52[0] = *(float64x2_t *)(v4 + 16);
  v52[1] = v12;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "boundingBox", v52, v13, v14, v15, v16, v17);
  v24 = *(_QWORD *)(v4 + 48);
  if (v24)
  {
    ElementIDForEntryState = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v24, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "drawState", "%llu", v26, v27, v28, v29, v30, ElementIDForEntryState);
  }
  v31 = *(_QWORD *)(v4 + 56);
  if (v31)
  {
    v32 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v31, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fillState", "%llu", v33, v34, v35, v36, v37, v32);
  }
  v38 = *(_QWORD *)(v4 + 64);
  if (v38)
  {
    v39 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v38, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "strokeState", "%llu", v40, v41, v42, v43, v44, v39);
  }
  v45 = *(_QWORD *)(v4 + 72);
  if (v45)
  {
    v46 = CG::DisplayListXMLSerializer::getElementIDForEntryState(a1[1], v45, v18, v19, v20, v21, v22, v23);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "patternState", "%llu", v47, v48, v49, v50, v51, v46);
  }
}

uint64_t CG::DisplayListXMLSerializer::getElementIDForEntryState(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;

  v10 = *(_QWORD **)(a1 + 96);
  v8 = (_QWORD *)(a1 + 96);
  v9 = v10;
  if (v10)
  {
    v11 = v8;
    do
    {
      v12 = v9[4];
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = v9;
      else
        v14 = v9 + 1;
      if (v13)
        v11 = v9;
      v9 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != v8 && v11[4] <= a2)
      return v11[5];
  }
  CGPostError((uint64_t)"%s: Failed to find ID of entryState: %p", a2, a3, a4, a5, a6, a7, a8, (char)"DisplayListElementID CG::DisplayListXMLSerializer::getElementIDForEntryState(const DisplayListEntryState *)");
  return -1;
}

void DisplayListXMLWriterEntryDisplayList::~DisplayListXMLWriterEntryDisplayList(DisplayListXMLWriterEntryDisplayList *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryDisplayList::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "displayList", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 136);
  if (v18 > 4)
    v19 = 0;
  else
    v19 = off_1E1661D80[v18];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  v20 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 140);
  if (v20 > 4)
    v21 = 0;
  else
    v21 = off_1E1661BE0[v20];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v21);
  return 1;
}

uint64_t DisplayListXMLWriterEntryDisplayList::writeChildElements(DisplayListXMLWriterEntryDisplayList *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryDisplayList::getEntry(DisplayListXMLWriterEntryDisplayList *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t CG::DisplayListXMLSerializer::getElementIDForResource(CG::DisplayListXMLSerializer *this, const CG::DisplayListResource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;

  v10 = (_QWORD *)*((_QWORD *)this + 9);
  v8 = (char *)this + 72;
  v9 = v10;
  if (v10)
  {
    v11 = v8;
    do
    {
      v12 = v9[4];
      v13 = v12 >= (unint64_t)a2;
      if (v12 >= (unint64_t)a2)
        v14 = v9;
      else
        v14 = v9 + 1;
      if (v13)
        v11 = (char *)v9;
      v9 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != v8 && *((_QWORD *)v11 + 4) <= (unint64_t)a2)
      return *((_QWORD *)v11 + 5);
  }
  CGPostError((uint64_t)"%s: Failed to find ID of resource: %p", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"DisplayListElementID CG::DisplayListXMLSerializer::getElementIDForResource(const DisplayListResource *)");
  return -1;
}

void DisplayListXMLWriterEntryGradient::~DisplayListXMLWriterEntryGradient(DisplayListXMLWriterEntryGradient *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryGradient::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v69;

  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "gradient", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "options", "%d", v18, v19, v20, v21, v22, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 140));
  v30 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 136);
  switch(v30)
  {
    case 3:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "conic");
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "center", "{%.17lg, %.17lg}", v43, v44, v45, v46, v47, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 224));
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "angle", "%g", v48, v49, v50, v51, v52, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 240));
      break;
    case 2:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "radial");
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startCenter", "{%.17lg, %.17lg}", v53, v54, v55, v56, v57, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 176));
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "endCenter", "{%.17lg, %.17lg}", v58, v59, v60, v61, v62, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 192));
      v31 = "%g";
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startRadius", "%g", v63, v64, v65, v66, v67, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 208));
      *(_QWORD *)&v69 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 216);
      v42 = "endRadius";
      goto LABEL_9;
    case 1:
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "gradientType", "linear");
      v31 = "{%.17lg, %.17lg}";
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, "startPt", "{%.17lg, %.17lg}", v32, v33, v34, v35, v36, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 144));
      v69 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 160);
      v42 = "endPt";
LABEL_9:
      CG::DisplayListXMLHelper::addFormatToAttributes(a2, v42, v31, v37, v38, v39, v40, v41, v69);
      return 1;
    default:
      CGPostError((uint64_t)"%s: Invalid gradient type", v23, v24, v25, v26, v27, v28, v29, (char)"virtual BOOL DisplayListXMLWriterEntryGradient::writeAttributes(DLXMLAttributes &)");
      break;
  }
  return 1;
}

uint64_t DisplayListXMLWriterEntryGradient::writeChildElements(DisplayListXMLWriterEntryGradient *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryGradient::getEntry(DisplayListXMLWriterEntryGradient *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryShading::~DisplayListXMLWriterEntryShading(DisplayListXMLWriterEntryShading *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryShading::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "shading", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 136);
  if (v18 > 4)
    v19 = 0;
  else
    v19 = off_1E1661D80[v18];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  v20 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 140);
  if (v20 > 4)
    v21 = 0;
  else
    v21 = off_1E1661BE0[v20];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v21);
  return 1;
}

uint64_t DisplayListXMLWriterEntryShading::writeChildElements(DisplayListXMLWriterEntryShading *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryShading::getEntry(DisplayListXMLWriterEntryShading *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryLines::~DisplayListXMLWriterEntryLines(DisplayListXMLWriterEntryLines *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryLines::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v4, v5, v6, v7, v8, *(_OWORD *)(a1[3] + 80));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v9, v10, v11, v12, v13, *(_QWORD *)(a1[3] + 136));
  return 1;
}

BOOL DisplayListXMLWriterEntryLines::writeChildElements(xmlTextWriterPtr *this)
{
  int started;
  uint64_t v3;
  unint64_t v4;
  double *v5;

  started = xmlTextWriterStartElement(this[2], (const xmlChar *)"lines");
  if ((started & 0x80000000) == 0)
  {
    if (*((_QWORD *)this[3] + 17))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"line") & 0x80000000) == 0)
        {
          v5 = (double *)(*((_QWORD *)this[3] + 16) + v3);
          xmlTextWriterWriteFormatRaw(this[2], "{%.17lg, %.17lg}", *v5, v5[1]);
          xmlTextWriterEndElement(this[2]);
        }
        ++v4;
        v3 += 16;
      }
      while (v4 < *((_QWORD *)this[3] + 17));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

uint64_t DisplayListXMLWriterEntryLines::getEntry(DisplayListXMLWriterEntryLines *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryRects::~DisplayListXMLWriterEntryRects(DisplayListXMLWriterEntryRects *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryRects::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  v4 = *(unsigned int *)(a1[3] + 80);
  if (v4 > 4)
    v5 = 0;
  else
    v5 = off_1E1661CE8[v4];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawingMode", v5);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v6, v7, v8, v9, v10, *(_OWORD *)(a1[3] + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v11, v12, v13, v14, v15, *(_QWORD *)(a1[3] + 144));
  return 1;
}

BOOL DisplayListXMLWriterEntryRects::writeChildElements(xmlTextWriterPtr *this)
{
  int started;
  uint64_t v3;
  unint64_t v4;
  double *v5;

  started = xmlTextWriterStartElement(this[2], (const xmlChar *)"rects");
  if ((started & 0x80000000) == 0)
  {
    if (*((_QWORD *)this[3] + 18))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"rect") & 0x80000000) == 0)
        {
          v5 = (double *)(*((_QWORD *)this[3] + 17) + v3);
          xmlTextWriterWriteFormatRaw(this[2], "{%.17lg, %.17lg}, {%.17lg, %.17lg}", *v5, v5[1], v5[2], v5[3]);
          xmlTextWriterEndElement(this[2]);
        }
        ++v4;
        v3 += 32;
      }
      while (v4 < *((_QWORD *)this[3] + 18));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

uint64_t DisplayListXMLWriterEntryRects::getEntry(DisplayListXMLWriterEntryRects *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryPath::~DisplayListXMLWriterEntryPath(DisplayListXMLWriterEntryPath *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryPath::writeAttributes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  DisplayListXMLWriterEntry::writeAttributes(a1, a2);
  v4 = *(unsigned int *)(a1[3] + 80);
  if (v4 > 4)
    v5 = 0;
  else
    v5 = off_1E1661CE8[v4];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawingMode", v5);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "direct", *(unsigned __int8 *)(a1[3] + 84));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v6, v7, v8, v9, v10, *(_OWORD *)(a1[3] + 96));
  return 1;
}

BOOL DisplayListXMLWriterEntryPath::writeChildElements(xmlTextWriterPtr *this)
{
  _xmlTextWriter *v2;
  _BOOL8 v3;

  if (xmlTextWriterStartElement(this[2], (const xmlChar *)"cgpath") < 0)
    return 0;
  v3 = CG::DisplayListXMLHelper::writeCGPath(*((CG::DisplayListXMLHelper **)this[3] + 11), this[2], v2);
  xmlTextWriterEndElement(this[2]);
  return v3;
}

uint64_t DisplayListXMLWriterEntryPath::getEntry(DisplayListXMLWriterEntryPath *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryGlyphs::~DisplayListXMLWriterEntryGlyphs(DisplayListXMLWriterEntryGlyphs *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryGlyphs::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const CG::DisplayListResource *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "font", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ftm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v18, v19, v20, v21, v22, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 136));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "scale", "%.17lg", v23, v24, v25, v26, v27, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 184));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "dilation", "{%.17lg, %.17lg}", v28, v29, v30, v31, v32, *(_OWORD *)(*(_QWORD *)(a1 + 24) + 192));
  v39 = *(_QWORD *)(a1 + 24);
  v40 = *(const CG::DisplayListResource **)(v39 + 208);
  if (v40)
  {
    v41 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v40, v33, v34, v35, v36, v37, v38);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fontSmoothingBGColor", "%llu", v42, v43, v44, v45, v46, v41);
    v39 = *(_QWORD *)(a1 + 24);
  }
  v47 = *(unsigned int *)(v39 + 216);
  if (v47 > 7)
    v48 = 0;
  else
    v48 = off_1E1661D10[v47];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "textDrawingMode", v48);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "fontRenderingStyle", "0x%.8X", v49, v50, v51, v52, v53, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 220));
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "shouldDrawBMRuns", *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 224));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v54, v55, v56, v57, v58, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 248));
  return 1;
}

BOOL DisplayListXMLWriterEntryGlyphs::writeChildElements(xmlTextWriterPtr *this)
{
  int started;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  _QWORD *v17[2];

  started = xmlTextWriterStartElement(this[2], (const xmlChar *)"glyphs");
  if ((started & 0x80000000) == 0)
  {
    if (*((_QWORD *)this[3] + 31))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        if ((xmlTextWriterStartElement(this[2], (const xmlChar *)"glyph") & 0x80000000) == 0)
        {
          v17[0] = 0;
          v17[1] = 0;
          v16 = (uint64_t *)v17;
          CG::DisplayListXMLHelper::addFormatToAttributes(&v16, "position", "{%.17lg, %.17lg}", v5, v6, v7, v8, v9, *(_QWORD *)(*((_QWORD *)this[3] + 30) + v3));
          CG::DisplayListXMLHelper::addFormatToAttributes(&v16, "glyph", "%d", v10, v11, v12, v13, v14, *(_WORD *)(*((_QWORD *)this[3] + 29) + 2 * v4));
          CG::DisplayListXMLHelper::writeAttributes(&v16, this[2]);
          xmlTextWriterEndElement(this[2]);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17[0]);
        }
        ++v4;
        v3 += 16;
      }
      while (v4 < *((_QWORD *)this[3] + 31));
    }
    xmlTextWriterEndElement(this[2]);
  }
  return started >= 0;
}

void sub_184B4E604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a13);
  _Unwind_Resume(a1);
}

uint64_t DisplayListXMLWriterEntryGlyphs::getEntry(DisplayListXMLWriterEntryGlyphs *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryImage::~DisplayListXMLWriterEntryImage(DisplayListXMLWriterEntryImage *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryImage::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  DisplayListXMLWriterEntry::writeAttributes((uint64_t *)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 80);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "image", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ctm", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v5, v6, v7, v8, v9, *(_OWORD *)(v10 + 88));
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 136);
  if (v18 > 4)
    v19 = 0;
  else
    v19 = off_1E1661D80[v18];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationQuality", v19);
  v20 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 140);
  if (v20 > 4)
    v21 = 0;
  else
    v21 = off_1E1661D80[v20];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationMin", v21);
  v22 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 144);
  if (v22 > 4)
    v23 = 0;
  else
    v23 = off_1E1661D80[v22];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "interpolationMax", v23);
  v24 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 148);
  if (v24 > 4)
    v25 = 0;
  else
    v25 = off_1E1661BE0[v24];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "renderingIntent", v25);
  return 1;
}

uint64_t DisplayListXMLWriterEntry::writeChildElements(DisplayListXMLWriterEntry *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryImage::getEntry(DisplayListXMLWriterEntryImage *this)
{
  return *((_QWORD *)this + 3);
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5[4];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&off_1E16289E0;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5[4];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&off_1E1628640;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5[4];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&off_1E1628870;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

void ___ZN2CG24DisplayListXMLSerializer16writeEntryStatesEv_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5[4];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = (char *)v4 + 1;
  v5[0] = a2;
  std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>((uint64_t **)(v3 + 88), (unint64_t)a2, v5)[5] = v4;
  v5[0] = (uint64_t *)&off_1E1628A18;
  v5[1] = (uint64_t *)v3;
  v5[3] = a2;
  DisplayListXMLWriterEntryState::write((DisplayListXMLWriterEntryState *)v5, *(xmlTextWriterPtr *)(v3 + 32));
}

uint64_t **std::__tree<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::__map_value_compare<CG::DisplayListEntryState const*,std::__value_type<CG::DisplayListEntryState const*,unsigned long long>,std::less<CG::DisplayListEntryState const*>,true>,std::allocator<std::__value_type<CG::DisplayListEntryState const*,unsigned long long>>>::__emplace_unique_key_args<CG::DisplayListEntryState const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListEntryState const*&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void DisplayListXMLWriterEntryState::write(DisplayListXMLWriterEntryState *this, xmlTextWriterPtr writer)
{
  _QWORD **v3;
  _QWORD *v4[2];

  *((_QWORD *)this + 2) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"entryState") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    (*(void (**)(DisplayListXMLWriterEntryState *, _QWORD ***))(*(_QWORD *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 2));
    (*(void (**)(DisplayListXMLWriterEntryState *))(*(_QWORD *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184B4EAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void DisplayListXMLWriterEntryStatePattern::~DisplayListXMLWriterEntryStatePattern(DisplayListXMLWriterEntryStatePattern *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryStatePattern::writeAttributes(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DisplayListXMLWriterEntryState::writeAttributes(a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "pattern");
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "baseCTM", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v4, v5, v6, v7, v8, *(_OWORD *)(a1[3] + 8));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "phase", "{%.17lg, %.17lg}", v9, v10, v11, v12, v13, *(_OWORD *)(a1[3] + 56));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "smoothness", "%.17lg", v14, v15, v16, v17, v18, *(_QWORD *)(a1[3] + 72));
  return 1;
}

uint64_t DisplayListXMLWriterEntryState::writeChildElements(DisplayListXMLWriterEntryState *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterEntryStatePattern::getEntryState(DisplayListXMLWriterEntryStatePattern *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t DisplayListXMLWriterEntryState::writeAttributes(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char ElementIDForEntryState;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[1];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  ElementIDForEntryState = CG::DisplayListXMLSerializer::getElementIDForEntryState(v3, v4, v5, v6, v7, v8, v9, v10);
  return CG::DisplayListXMLHelper::addFormatToAttributes(a2, "_id", "%llu", v12, v13, v14, v15, v16, ElementIDForEntryState);
}

void DisplayListXMLWriterEntryStateStroke::~DisplayListXMLWriterEntryStateStroke(DisplayListXMLWriterEntryStateStroke *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryStateStroke::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const CG::DisplayListResource *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char *v43;
  unsigned int v44;
  char *v45;

  DisplayListXMLWriterEntryState::writeAttributes((_QWORD *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "stroke");
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 8);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "color", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "width", "%.17lg", v5, v6, v7, v8, v9, *(_QWORD *)(v10 + 16));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "thresh", "%.17lg", v18, v19, v20, v21, v22, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "limit", "%.17lg", v23, v24, v25, v26, v27, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32));
  v34 = *(_QWORD *)(a1 + 24);
  v35 = *(const CG::DisplayListResource **)(v34 + 40);
  if (v35)
  {
    v36 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v35, v28, v29, v30, v31, v32, v33);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "dash", "%llu", v37, v38, v39, v40, v41, v36);
    v34 = *(_QWORD *)(a1 + 24);
  }
  v42 = *(_WORD *)(v34 + 48) << 8;
  if ((v42 & 0xFF00u) > 0x2FF)
    v43 = 0;
  else
    v43 = off_1E1661D50[v42 >> 8];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "cap", v43);
  v44 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 48);
  if (v44 > 0x2FF)
    v45 = 0;
  else
    v45 = off_1E1661D68[(__int16)v44 >> 8];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "join", v45);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "adjust", *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 50));
  return 1;
}

uint64_t DisplayListXMLWriterEntryStateStroke::getEntryState(DisplayListXMLWriterEntryStateStroke *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryStateFill::~DisplayListXMLWriterEntryStateFill(DisplayListXMLWriterEntryStateFill *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryStateFill::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const CG::DisplayListResource *v10;
  char ElementIDForResource;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DisplayListXMLWriterEntryState::writeAttributes((_QWORD *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "fill");
  v10 = *(const CG::DisplayListResource **)(*(_QWORD *)(a1 + 24) + 8);
  if (v10)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v10, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "color", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  }
  return 1;
}

uint64_t DisplayListXMLWriterEntryStateFill::getEntryState(DisplayListXMLWriterEntryStateFill *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterEntryStateDrawing::~DisplayListXMLWriterEntryStateDrawing(DisplayListXMLWriterEntryStateDrawing *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterEntryStateDrawing::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const CG::DisplayListResource *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const CG::DisplayListResource *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const CG::DisplayListResource *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const CG::DisplayListResource *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  DisplayListXMLWriterEntryState::writeAttributes((_QWORD *)a1, a2);
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", "drawing");
  v10 = *(_QWORD **)(a1 + 24);
  v11 = (const CG::DisplayListResource *)v10[1];
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "clip", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v18 = (const CG::DisplayListResource *)v10[2];
  if (v18)
  {
    v19 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v18, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "softMask", "%llu", v20, v21, v22, v23, v24, v19);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v25 = (const CG::DisplayListResource *)v10[3];
  if (v25)
  {
    v26 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v25, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "style", "%llu", v27, v28, v29, v30, v31, v26);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v32 = (const CG::DisplayListResource *)v10[4];
  if (v32)
  {
    v33 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v32, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "BG", "%llu", v34, v35, v36, v37, v38, v33);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v39 = (const CG::DisplayListResource *)v10[5];
  if (v39)
  {
    v40 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 8), v39, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "UCR", "%llu", v41, v42, v43, v44, v45, v40);
    v10 = *(_QWORD **)(a1 + 24);
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flatness", "%.17lg", v5, v6, v7, v8, v9, v10[6]);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "alpha", "%.17lg", v46, v47, v48, v49, v50, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56));
  v51 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 96);
  if (((v51 >> 2) & 0xF) > 6)
    v52 = "Unknown";
  else
    v52 = off_1E1661C08[(int)(v51 << 26) >> 26];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "compositeOp", v52);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "antialias", (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 96) >> 6) & 1);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "alphaIsShape", (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 96) >> 7) & 1);
  v53 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 96);
  if (((v53 >> 8) & 0x3F) > 4)
    v54 = 0;
  else
    v54 = off_1E1661BE0[(int)(v53 << 18) >> 26];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "intent", v54);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "fillOverprint", (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 96) >> 14) & 1);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "strokeOverprint", (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 96) >> 15) & 1);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "overprintMode", "%d", v55, v56, v57, v58, v59, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 100));
  return 1;
}

uint64_t DisplayListXMLWriterEntryStateDrawing::getEntryState(DisplayListXMLWriterEntryStateDrawing *this)
{
  return *((_QWORD *)this + 3);
}

__n128 __Block_byref_object_copy__3515(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3516(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN2CG24DisplayListXMLSerializer14writeResourcesEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t **v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *__p;
  uint64_t **v40;
  uint64_t *v41;

  v4 = *(_QWORD *)(a1 + 40);
  v41 = a2;
  (*(void (**)(void **__return_ptr, uint64_t *))(*a2 + 16))(&__p, a2);
  v5 = (uint64_t **)__p;
  v6 = v40;
  if (__p != v40)
  {
    v7 = (_QWORD *)(v4 + 72);
    do
    {
      v8 = *v5;
      v38 = *v5;
      v9 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_14;
      v10 = (_QWORD *)(v4 + 72);
      do
      {
        v11 = v9[4];
        v12 = v11 >= (unint64_t)v8;
        if (v11 >= (unint64_t)v8)
          v13 = v9;
        else
          v13 = v9 + 1;
        if (v12)
          v10 = v9;
        v9 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v10 == v7 || (unint64_t)v8 < v10[4])
      {
LABEL_14:
        v14 = *(uint64_t **)(v4 + 56);
        *(_QWORD *)(v4 + 56) = (char *)v14 + 1;
        v15 = std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>((uint64_t **)(v4 + 64), (unint64_t)v8, &v38);
        v15[5] = v14;
        *((_BYTE *)v15 + 48) = 0;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v16 = *(_QWORD **)(v4 + 72);
  if (!v16)
    goto LABEL_27;
  v17 = (_QWORD *)(v4 + 72);
  do
  {
    v18 = v16[4];
    v19 = v18 >= (unint64_t)a2;
    if (v18 >= (unint64_t)a2)
      v20 = v16;
    else
      v20 = v16 + 1;
    if (v19)
      v17 = v16;
    v16 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 == (_QWORD *)(v4 + 72) || v17[4] > (unint64_t)a2)
  {
LABEL_27:
    v21 = *(uint64_t **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = (char *)v21 + 1;
    v22 = std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>((uint64_t **)(v4 + 64), (unint64_t)a2, &v41);
    v22[5] = v21;
    *((_BYTE *)v22 + 48) = 0;
  }
  if (__p)
  {
    v40 = (uint64_t **)__p;
    operator delete(__p);
  }
  v23 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v25 = (uint64_t **)v23[6];
  v24 = v23[7];
  if ((unint64_t)v25 >= v24)
  {
    v27 = v23[5];
    v28 = ((uint64_t)v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v29 = v24 - v27;
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v31);
    else
      v32 = 0;
    v33 = (uint64_t **)(v31 + 8 * v28);
    v34 = v31 + 8 * v32;
    *v33 = a2;
    v26 = v33 + 1;
    v36 = (char *)v23[5];
    v35 = (char *)v23[6];
    if (v35 != v36)
    {
      do
      {
        v37 = (uint64_t *)*((_QWORD *)v35 - 1);
        v35 -= 8;
        *--v33 = v37;
      }
      while (v35 != v36);
      v35 = (char *)v23[5];
    }
    v23[5] = v33;
    v23[6] = v26;
    v23[7] = v34;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v25 = a2;
    v26 = v25 + 1;
  }
  v23[6] = v26;
}

void sub_184B4F358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DisplayListXMLWriterResource::write(DisplayListXMLWriterResource *this, xmlTextWriterPtr writer)
{
  _QWORD **v3;
  _QWORD *v4[2];

  *((_QWORD *)this + 1) = writer;
  if ((xmlTextWriterStartElement(writer, (const xmlChar *)"resource") & 0x80000000) == 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    (*(void (**)(DisplayListXMLWriterResource *, _QWORD ***))(*(_QWORD *)this + 16))(this, &v3);
    CG::DisplayListXMLHelper::writeAttributes(&v3, *((xmlTextWriterPtr *)this + 1));
    (*(void (**)(DisplayListXMLWriterResource *))(*(_QWORD *)this + 24))(this);
    xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4[0]);
  }
}

void sub_184B4F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void DisplayListXMLWriterResourceCFTypeRef::~DisplayListXMLWriterResourceCFTypeRef(DisplayListXMLWriterResourceCFTypeRef *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResource::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char ElementIDForResource;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (char *)(*((uint64_t (**)(CG::DisplayListXMLSerializer **))*a1 + 4))(a1);
  ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], (const CG::DisplayListResource *)v4, v5, v6, v7, v8, v9, v10);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "_id", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  v17 = *((_DWORD *)v4 + 2);
  if (v17 >> 25 > 6)
    v18 = 0;
  else
    v18 = (&off_1E1662B68)[v17 >> 24];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "type", v18);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "flags", "0x%.6X", v19, v20, v21, v22, v23, v4[8]);
  return 1;
}

uint64_t DisplayListXMLWriterResource::writeChildElements(DisplayListXMLWriterResource *this)
{
  return 1;
}

uint64_t DisplayListXMLWriterResourceCFTypeRef::getResource(DisplayListXMLWriterResourceCFTypeRef *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceDisplayList::~DisplayListXMLWriterResourceDisplayList(DisplayListXMLWriterResourceDisplayList *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceDisplayList::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ElementIDForResource;
  CFStringRef v12;
  const __CFString *v13;
  const __CFURL *ResourcesDirectory;
  const __CFURL *v15;
  const __CFDictionary *v16;
  const __CFURL *v17;
  uint64_t v18;
  const __CFURL *v19;
  const __CFURL *v20;
  const __CFString *PathComponent;
  char buffer[1024];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v5, v6, v7, v8, v9, v10);
  v12 = CFStringCreateWithFormat(v4, 0, CFSTR("DisplayList-%llu.dlist"), ElementIDForResource);
  if (v12)
  {
    v13 = v12;
    ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
    if (ResourcesDirectory)
    {
      v15 = CFURLCreateCopyAppendingPathComponent(v4, ResourcesDirectory, v13, 0);
      if (v15)
      {
        v17 = v15;
        v18 = *((_QWORD *)a1[3] + 2);
        if (v18)
        {
          v19 = CG::DisplayList::serializeToURL((CG::DisplayList *)(v18 + 16), v15, v16);
          if (v19)
          {
            v20 = v19;
            PathComponent = CFURLCopyLastPathComponent(v19);
            if (PathComponent)
            {
              CFStringGetCString(PathComponent, buffer, 1024, 0x8000100u);
              CG::DisplayListXMLHelper::addStringToAttributes(a2, "fileName", buffer);
            }
            CFRelease(v20);
          }
        }
        CFRelease(v17);
      }
    }
    CFRelease(v13);
  }
  return 1;
}

uint64_t DisplayListXMLWriterResourceDisplayList::getResource(DisplayListXMLWriterResourceDisplayList *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t CG::DisplayListXMLSerializer::getResourcesDirectory(CG::DisplayListXMLSerializer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UInt8 buffer[1025];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (CFURLGetFileSystemRepresentation(*((CFURLRef *)this + 5), 1u, buffer, 1025)
    && (!mkdir((const char *)buffer, 0x1FFu) || *__error() == 17))
  {
    return *((_QWORD *)this + 5);
  }
  CGPostError((uint64_t)"%s: Failed to create Resources directory", v2, v3, v4, v5, v6, v7, v8, (char)"CFURLRef CG::DisplayListXMLSerializer::getResourcesDirectory(BOOL)");
  return 0;
}

void DisplayListXMLWriterResourceFunction::~DisplayListXMLWriterResourceFunction(DisplayListXMLWriterResourceFunction *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceFunction::getResource(DisplayListXMLWriterResourceFunction *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceSoftMask::~DisplayListXMLWriterResourceSoftMask(DisplayListXMLWriterResourceSoftMask *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLWriterResourceSoftMask::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  const CGRect *v13;
  uint64_t v14;
  float64_t v15;
  CGFloat width;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const CGAffineTransform *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const CG::DisplayListResource **v29;
  char ElementIDForResource;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFAllocator *v36;
  uint64_t v37;
  CFStringRef v38;
  const __CFString *v39;
  const __CFURL *ResourcesDirectory;
  CFURLRef v41;
  const CGRect *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFURL *v48;
  CGFloat *v49;
  CGFloat *v50;
  CGSize *v51;
  const CGRect *v52;
  uint64_t v53;
  float64_t v54;
  CGFloat v55;
  char *CGDisplayList;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  const __CFDictionary *v66;
  const void *v67;
  void (*v68)(_QWORD, uint64_t);
  const __CFURL *v69;
  const __CFURL *v70;
  const __CFString *PathComponent;
  _BOOL8 v72;
  __int128 v74;
  __int128 v75;
  CGFloat tx;
  CGFloat ty;
  float64x2_t buffer;
  CGFloat v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  v13 = (const CGRect *)(v9 + 72);
  if (v9)
  {
    p_size = (CGSize *)(v9 + 88);
    p_y = (CGFloat *)(v9 + 80);
    p_height = (CGFloat *)(v9 + 96);
  }
  else
  {
    v13 = &CGRectNull;
  }
  v14 = *(_QWORD *)p_height;
  v15 = *p_y;
  width = p_size->width;
  buffer.f64[0] = v13->origin.x;
  buffer.f64[1] = v15;
  v79 = width;
  v80 = v14;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "bbox", &buffer, v4, v5, v6, v7, v8);
  v22 = (const CGAffineTransform *)(v9 + 24);
  if (!v9)
    v22 = &CGAffineTransformIdentity;
  tx = v22->tx;
  ty = v22->ty;
  v74 = *(_OWORD *)&v22->a;
  v75 = *(_OWORD *)&v22->c;
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "matrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v17, v18, v19, v20, v21, *(_OWORD *)&v22->a);
  v29 = *(const CG::DisplayListResource ***)(a1 + 24);
  if (v29[3])
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v29[3], v23, v24, v25, v26, v27, v28);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "bg", "%llu", v31, v32, v33, v34, v35, ElementIDForResource);
    v29 = *(const CG::DisplayListResource ***)(a1 + 24);
  }
  v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v37 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), (const CG::DisplayListResource *)v29, v23, v24, v25, v26, v27, v28);
  v38 = CFStringCreateWithFormat(v36, 0, CFSTR("SoftMask-%llu.dlist"), v37, *((_QWORD *)&v74 + 1), v75, *(_QWORD *)&tx, *(_QWORD *)&ty);
  if (!v38)
    return 0;
  v39 = v38;
  ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(*(CG::DisplayListXMLSerializer **)(a1 + 16));
  if (ResourcesDirectory && (v41 = CFURLCreateCopyAppendingPathComponent(v36, ResourcesDirectory, v39, 0)) != 0)
  {
    v48 = v41;
    v49 = &CGRectNull.size.height;
    v50 = &CGRectNull.origin.y;
    v51 = &CGRectNull.size;
    v52 = (const CGRect *)(v9 + 72);
    if (v9)
    {
      v51 = (CGSize *)(v9 + 88);
      v50 = (CGFloat *)(v9 + 80);
      v49 = (CGFloat *)(v9 + 96);
    }
    else
    {
      v52 = &CGRectNull;
    }
    v53 = *(_QWORD *)v49;
    v54 = *v50;
    v55 = v51->width;
    buffer.f64[0] = v52->origin.x;
    buffer.f64[1] = v54;
    v79 = v55;
    v80 = v53;
    CGDisplayList = (char *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&buffer, v42, v43, v44, v45, v46, v47);
    if (CGDisplayList)
    {
      v64 = CGDisplayList;
      v65 = CGDisplayListContextCreate(CGDisplayList, v57, v58, v59, v60, v61, v62, v63);
      if (v65)
      {
        v67 = (const void *)v65;
        if (v9)
        {
          v68 = *(void (**)(_QWORD, uint64_t))(v9 + 136);
          if (v68)
            v68(*(_QWORD *)(v9 + 120), v65);
        }
        v69 = CG::DisplayList::serializeToURL((CG::DisplayList *)(v64 + 16), v48, v66);
        if (v69)
        {
          v70 = v69;
          PathComponent = CFURLCopyLastPathComponent(v69);
          v72 = PathComponent != 0;
          if (PathComponent)
          {
            CFStringGetCString(PathComponent, (char *)&buffer, 1024, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "dl", (char *)&buffer);
          }
          CFRelease(v70);
        }
        else
        {
          v72 = 0;
        }
        CFRelease(v67);
      }
      else
      {
        v72 = 0;
      }
      CFRelease(v64);
    }
    else
    {
      v72 = 0;
    }
    CFRelease(v48);
  }
  else
  {
    v72 = 0;
  }
  CFRelease(v39);
  return v72;
}

uint64_t DisplayListXMLWriterResourceSoftMask::getResource(DisplayListXMLWriterResourceSoftMask *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceStyle::~DisplayListXMLWriterResourceStyle(DisplayListXMLWriterResourceStyle *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceStyle::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const CG::DisplayListResource *v76;
  char ElementIDForResource;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v84;
  uint64_t v85;

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v11)
  {
    switch(*(_DWORD *)(v11 + 20))
    {
      case 1:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "shadow");
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "elevation", "%.17lg", v12, v13, v14, v15, v16, *(_QWORD *)(v11 + 40));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "azimuth", "%.17lg", v17, v18, v19, v20, v21, *(_QWORD *)(v11 + 48));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "ambient", "%.17lg", v22, v23, v24, v25, v26, *(_QWORD *)(v11 + 56));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "height", "%.17lg", v27, v28, v29, v30, v31, *(_QWORD *)(v11 + 64));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "radius", "%.17lg", v32, v33, v34, v35, v36, *(_QWORD *)(v11 + 72));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "saturation", "%.17lg", v37, v38, v39, v40, v41, *(_QWORD *)(v11 + 80));
        break;
      case 2:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "focusRing");
        v42 = *(_DWORD *)(v11 + 36);
        v43 = "graphite";
        if (v42 != 1)
          v43 = 0;
        if (v42)
          v44 = (char *)v43;
        else
          v44 = "blue";
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "tint", v44);
        v45 = 0;
        v46 = *(unsigned int *)(v11 + 40);
        if (v46 <= 2)
          v45 = off_1E1661DA8[v46];
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "ordering", v45);
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "alpha", "%.17lg", v47, v48, v49, v50, v51, *(_QWORD *)(v11 + 48));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "radius", "%.17lg", v52, v53, v54, v55, v56, *(_QWORD *)(v11 + 56));
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, "threshold", "%.17lg", v57, v58, v59, v60, v61, *(_QWORD *)(v11 + 64));
        CG::DisplayListXMLHelper::addRectToAttributes(a2, "bounds", (float64x2_t *)(v11 + 72), v62, v63, v64, v65, v66);
        v72 = "accumulate";
        LODWORD(v85) = *(_DWORD *)(v11 + 104);
        v73 = "%d";
        goto LABEL_13;
      case 3:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "gaussianBlur");
        v72 = "radius";
        v85 = *(_QWORD *)(v11 + 40);
        v73 = "%.17lg";
LABEL_13:
        CG::DisplayListXMLHelper::addFormatToAttributes(a2, v72, v73, v67, v68, v69, v70, v71, v85);
        break;
      case 4:
        CG::DisplayListXMLHelper::addStringToAttributes(a2, "styleType", "colorMatrix");
        v74 = 0;
        v75 = v11 + 40;
        do
        {
          CG::DisplayListXMLHelper::addFormatToAttributes(a2, CG::DisplayListXMLHelper::colorMatrixIndexKey::keys[v74], "%.17lg", v6, v7, v8, v9, v10, *(_QWORD *)(v75 + v74 * 8));
          ++v74;
        }
        while (v74 != 20);
        break;
      default:
        CGPostError((uint64_t)"Unknown CGStyleType", v4, v5, v6, v7, v8, v9, v10, v84);
        break;
    }
  }
  v76 = *(const CG::DisplayListResource **)(*(_QWORD *)(a1 + 24) + 24);
  if (v76)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v76, v5, v6, v7, v8, v9, v10);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v78, v79, v80, v81, v82, ElementIDForResource);
  }
  return 1;
}

uint64_t DisplayListXMLWriterResourceStyle::getResource(DisplayListXMLWriterResourceStyle *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourcePattern::~DisplayListXMLWriterResourcePattern(DisplayListXMLWriterResourcePattern *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLWriterResourcePattern::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  const __CFAllocator *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ElementIDForResource;
  CFStringRef v34;
  const __CFString *v35;
  const __CFURL *ResourcesDirectory;
  CFURLRef v37;
  const CGRect *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFURL *v44;
  CG::DisplayList *v45;
  _BOOL8 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t CGDisplayList;
  uint64_t v56;
  const __CFDictionary *v57;
  const void *v58;
  void (*v59)(_QWORD, uint64_t);
  const __CFURL *v60;
  const __CFURL *v61;
  const __CFString *PathComponent;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *keys[2];
  __int128 v69;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  v4 = *((_QWORD *)a1[3] + 2);
  v5 = *(_DWORD *)(v4 + 20);
  v6 = "shading";
  if (v5 != 1)
    v6 = 0;
  if (v5)
    v7 = (char *)v6;
  else
    v7 = "tiling";
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "patternType", v7);
  v8 = *(_OWORD *)(v4 + 120);
  *(_OWORD *)keys = *(_OWORD *)(v4 + 104);
  v69 = v8;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "patternBounds", (float64x2_t *)keys, v9, v10, v11, v12, v13);
  v66 = *(_QWORD *)(v4 + 56);
  v67 = *(_QWORD *)(v4 + 64);
  v65 = *(_OWORD *)(v4 + 40);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "patternMatrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v14, v15, v16, v17, v18, *(_OWORD *)(v4 + 24));
  v64 = *(_QWORD *)(v4 + 144);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "step", "{%.17lg, %.17lg}", v19, v20, v21, v22, v23, *(_QWORD *)(v4 + 136));
  v24 = 0;
  v25 = *(unsigned int *)(v4 + 152);
  if (v25 <= 2)
    v24 = off_1E1661E28[v25];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "tiling", v24);
  CG::DisplayListXMLHelper::addBoolToAttributes(a2, "isColored", *(unsigned __int8 *)(v4 + 185));
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v27, v28, v29, v30, v31, v32);
  v34 = CFStringCreateWithFormat(v26, 0, CFSTR("PatternCell-%llu.dlist"), ElementIDForResource, v64, v65, v66, v67);
  if (!v34)
    return 0;
  v35 = v34;
  ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
  if (ResourcesDirectory && (v37 = CFURLCreateCopyAppendingPathComponent(v26, ResourcesDirectory, v35, 0)) != 0)
  {
    v44 = v37;
    if (*(_BYTE *)(v4 + 185))
    {
      v45 = 0;
    }
    else
    {
      keys[0] = CFSTR("trackColors");
      values[0] = *(void **)MEMORY[0x1E0C9AE40];
      v45 = CFDictionaryCreate(v26, (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    v47 = *(_OWORD *)(v4 + 120);
    *(_OWORD *)keys = *(_OWORD *)(v4 + 104);
    v69 = v47;
    CGDisplayList = CG::DisplayList::createCGDisplayList(v45, (const __CFDictionary *)keys, v38, v39, v40, v41, v42, v43);
    if (v45)
      CFRelease(v45);
    if (CGDisplayList)
    {
      v56 = CGDisplayListContextCreate((const void *)CGDisplayList, v48, v49, v50, v51, v52, v53, v54);
      if (v56)
      {
        v58 = (const void *)v56;
        v59 = *(void (**)(_QWORD, uint64_t))(v4 + 168);
        if (v59)
          v59(*(_QWORD *)(v4 + 80), v56);
        v60 = CG::DisplayList::serializeToURL((CG::DisplayList *)(CGDisplayList + 16), v44, v57);
        if (v60)
        {
          v61 = v60;
          PathComponent = CFURLCopyLastPathComponent(v60);
          v46 = PathComponent != 0;
          if (PathComponent)
          {
            CFStringGetCString(PathComponent, (char *)keys, 1024, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "drawCell", (char *)keys);
          }
          CFRelease(v61);
        }
        else
        {
          v46 = 0;
        }
        CFRelease(v58);
      }
      else
      {
        v46 = 0;
      }
      CFRelease((CFTypeRef)CGDisplayList);
    }
    else
    {
      v46 = 0;
    }
    CFRelease(v44);
  }
  else
  {
    v46 = 0;
  }
  CFRelease(v35);
  return v46;
}

uint64_t DisplayListXMLWriterResourcePattern::getResource(DisplayListXMLWriterResourcePattern *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceGradient::~DisplayListXMLWriterResourceGradient(DisplayListXMLWriterResourceGradient *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceGradient::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(const CG::DisplayListResource **)(v10 + 24);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD *)(a1 + 24);
  }
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
    v18 = *(_QWORD *)(v18 + 48);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v5, v6, v7, v8, v9, v18);
  return 1;
}

BOOL DisplayListXMLWriterResourceGradient::writeChildElements(DisplayListXMLWriterResourceGradient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _QWORD v7[7];
  uint64_t v8;
  double **v9;
  uint64_t v10;
  __n128 (*v11)(_QWORD *, uint64_t);
  void (*v12)(uint64_t);
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double **v17;
  uint64_t v18;
  __n128 (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (!v2)
    return 0;
  v16 = 0;
  v17 = (double **)&v16;
  v18 = 0x4002000000;
  v19 = __Block_byref_object_copy__67;
  v20 = __Block_byref_object_dispose__68;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v8 = 0;
  v9 = (double **)&v8;
  v10 = 0x4002000000;
  v11 = __Block_byref_object_copy__67;
  v12 = __Block_byref_object_dispose__68;
  v14 = 0;
  v15 = 0;
  __p = 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 1;
  else
    v4 = 1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN36DisplayListXMLWriterResourceGradient18writeChildElementsEv_block_invoke;
  v7[3] = &unk_1E1643D88;
  v7[5] = &v8;
  v7[6] = v4;
  v7[4] = &v16;
  CGGradientApplyWithBlock(v2, (uint64_t)v7);
  v5 = CG::DisplayListXMLHelper::writeCGFloatArray((xmlChar *)"locations", v17 + 5, *((xmlTextWriterPtr *)this + 1))
    && CG::DisplayListXMLHelper::writeCGFloatArray((xmlChar *)"components", v9 + 5, *((xmlTextWriterPtr *)this + 1));
  _Block_object_dispose(&v8, 8);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v16, 8);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v5;
}

void sub_184B50254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v23 - 80), 8);
  v25 = *(void **)(v23 - 40);
  if (v25)
  {
    *(_QWORD *)(v23 - 32) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t DisplayListXMLWriterResourceGradient::getResource(DisplayListXMLWriterResourceGradient *this)
{
  return *((_QWORD *)this + 3);
}

__n128 __Block_byref_object_copy__67(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN36DisplayListXMLWriterResourceGradient18writeChildElementsEv_block_invoke(_QWORD *a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  double *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = *(_QWORD **)(a1[4] + 8);
  v8 = (double *)v6[6];
  v7 = v6[7];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (double *)v6[5];
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
LABEL_36:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15)
    {
      v15 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v15);
      v10 = (double *)v6[5];
      v8 = (double *)v6[6];
    }
    else
    {
      v16 = 0;
    }
    v17 = (double *)(v15 + 8 * v11);
    v18 = v15 + 8 * v16;
    *v17 = a3;
    v9 = v17 + 1;
    while (v8 != v10)
    {
      v19 = *((_QWORD *)v8-- - 1);
      *((_QWORD *)v17-- - 1) = v19;
    }
    v6[5] = v17;
    v6[6] = v9;
    v6[7] = v18;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a3;
    v9 = v8 + 1;
  }
  v6[6] = v9;
  if (a1[6])
  {
    v20 = 0;
    do
    {
      v21 = *(_QWORD **)(a1[5] + 8);
      v23 = (char *)v21[6];
      v22 = v21[7];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (char *)v21[5];
        v26 = (v23 - v25) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_36;
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v29 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v29);
          v25 = (char *)v21[5];
          v23 = (char *)v21[6];
        }
        else
        {
          v30 = 0;
        }
        v31 = (_QWORD *)(v29 + 8 * v26);
        *v31 = *(_QWORD *)(a2 + 8 * v20);
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v31 = v32;
        }
        v21[5] = v31;
        v21[6] = v24;
        v21[7] = v29 + 8 * v30;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v23 = *(_QWORD *)(a2 + 8 * v20);
        v24 = v23 + 8;
      }
      v21[6] = v24;
      ++v20;
    }
    while (v20 < a1[6]);
  }
}

void DisplayListXMLWriterResourceShading::~DisplayListXMLWriterResourceShading(DisplayListXMLWriterResourceShading *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceShading::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const CG::DisplayListResource *v10;
  char ElementIDForResource;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v10 = *(const CG::DisplayListResource **)(*(_QWORD *)(a1 + 24) + 32);
  if (v10)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v10, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v12, v13, v14, v15, v16, ElementIDForResource);
  }
  return 1;
}

uint64_t DisplayListXMLWriterResourceShading::getResource(DisplayListXMLWriterResourceShading *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceImage::~DisplayListXMLWriterResourceImage(DisplayListXMLWriterResourceImage *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceImage::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CG::DisplayListXMLSerializer *v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const __CFAllocator *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __CFString *v55;
  const __CFURL *ResourcesDirectory;
  const __CFURL *v57;
  const __CFURL *v58;
  const __CFString *FileNameForBufferReader;
  const __CFString *v60;
  char *v61;
  char *v62;
  char *CStringPtr;
  char __s[1025];
  UInt8 buffer[1025];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  v10 = a1[3];
  v11 = (const CG::DisplayListResource *)*((_QWORD *)v10 + 5);
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = a1[3];
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "width", "%zu", v5, v6, v7, v8, v9, *((_QWORD *)v10 + 3));
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "height", "%zu", v18, v19, v20, v21, v22, *((_QWORD *)a1[3] + 4));
  if ((16 * *((_BYTE *)a1[3] + 48)) > 0x4Fu)
    LOBYTE(v28) = 0;
  else
    v28 = off_1E1661BE0[(char)(16 * *((_BYTE *)a1[3] + 48)) >> 4];
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "renderingIntent", "%s", v23, v24, v25, v26, v27, (char)v28);
  if ((*((_BYTE *)a1[3] + 48) & 0x10) != 0)
    v34 = "true";
  else
    v34 = "false";
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "interpolate", "%s", v29, v30, v31, v32, v33, (char)v34);
  if ((*((_BYTE *)a1[3] + 48) & 0x20) != 0)
    v40 = "true";
  else
    v40 = "false";
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "isMask", "%s", v35, v36, v37, v38, v39, (char)v40);
  if ((*((_BYTE *)a1[3] + 48) & 0x40) != 0)
    v46 = "true";
  else
    v46 = "false";
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "isTransparent", "%s", v41, v42, v43, v44, v45, (char)v46);
  v47 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v54 = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v48, v49, v50, v51, v52, v53);
  v55 = CFStringCreateWithFormat(v47, 0, CFSTR("Image-%llu.br2"), v54);
  ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
  if (ResourcesDirectory)
  {
    v57 = CFURLCreateCopyAppendingPathComponent(v47, ResourcesDirectory, v55, 0);
    if (v57)
    {
      v58 = v57;
      CFURLGetFileSystemRepresentation(v57, 1u, buffer, 1025);
      FileNameForBufferReader = CGImageCreateFileNameForBufferReader(*((CGImage **)a1[3] + 2), (char *)buffer);
      if (FileNameForBufferReader)
      {
        v60 = FileNameForBufferReader;
        CFStringGetCString(FileNameForBufferReader, __s, 1025, 0x8000100u);
        CGImageDumpToFile(*((_QWORD *)a1[3] + 2), __s);
        v61 = strrchr(__s, 47);
        if (v61)
        {
          v62 = v61;
          if (v55)
            CFRelease(v55);
          v55 = CFStringCreateWithCString(v47, v62 + 1, 0x8000100u);
        }
        CFRelease(v60);
      }
      CFRelease(v58);
    }
  }
  if (v55)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(v55, 0x8000100u);
    CG::DisplayListXMLHelper::addStringToAttributes(a2, "imageName", CStringPtr);
    CFRelease(v55);
  }
  return 1;
}

uint64_t DisplayListXMLWriterResourceImage::getResource(DisplayListXMLWriterResourceImage *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceFont::~DisplayListXMLWriterResourceFont(DisplayListXMLWriterResourceFont *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceFont::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFString *v6;
  char *CStringPtr;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFData *Property;
  const __CFData *v17;
  CFTypeID v18;
  uint64_t v19;
  const char *v20;
  const __CFAllocator *v22;
  uint64_t ElementIDForResource;
  const __CFString *v24;
  const __CFURL *ResourcesDirectory;
  const __CFURL *v26;
  const __CFURL *v27;
  CGDataConsumerRef v28;
  uint64_t v29;
  const UInt8 *BytePtr;
  CFIndex Length;
  void (*v32)(_QWORD);
  char *v33;
  int v34;

  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  v4 = CGFontCopyURL(*((const __CFURL **)a1[3] + 2));
  if (v4)
  {
    v5 = v4;
    v6 = CFURLGetString(v4);
    if (v6)
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v6, 0x8000100u);
      CG::DisplayListXMLHelper::addStringToAttributes(a2, "fontURL", CStringPtr);
    }
    v8 = (const __CFString *)v5;
LABEL_5:
    CFRelease(v8);
    goto LABEL_13;
  }
  v34 = 0;
  if (CGFontGetIntProperty(*((_QWORD *)a1[3] + 2), CFSTR("com.apple.CoreGraphics.CGPDFFontFormat"), &v34))
  {
    v14 = *((_QWORD *)a1[3] + 2);
    if (v14)
    {
      v15 = atomic_load((unint64_t *)(v14 + 88));
      if (v15)
      {
        Property = (const __CFData *)CGPropertiesGetProperty(v15, CFSTR("com.apple.CoreGraphics.CGPDFFontData"));
        if (Property)
        {
          v17 = Property;
          v18 = CFGetTypeID(Property);
          if (v18 == CFDataGetTypeID())
          {
            if ((v34 - 1) > 5)
              v20 = "font";
            else
              v20 = off_1E1643DA8[v34 - 1];
            v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v19, v9, v10, v11, v12, v13);
            v24 = CFStringCreateWithFormat(v22, 0, CFSTR("Font-%llu.%s"), ElementIDForResource, v20);
            ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(a1[2]);
            if (ResourcesDirectory)
            {
              v26 = CFURLCreateCopyAppendingPathComponent(v22, ResourcesDirectory, v24, 0);
              if (v26)
              {
                v27 = v26;
                v28 = CGDataConsumerCreateWithURL(v26);
                if (v28)
                {
                  v29 = (uint64_t)v28;
                  BytePtr = CFDataGetBytePtr(v17);
                  Length = CFDataGetLength(v17);
                  CGDataConsumerPutBytes(v29, (uint64_t)BytePtr, Length);
                  if (!*(_BYTE *)(v29 + 56))
                  {
                    v32 = *(void (**)(_QWORD))(v29 + 80);
                    if (v32)
                      v32(*(_QWORD *)(v29 + 16));
                  }
                  CFRelease((CFTypeRef)v29);
                }
                CFRelease(v27);
              }
            }
            v33 = (char *)CFStringGetCStringPtr(v24, 0x8000100u);
            CG::DisplayListXMLHelper::addStringToAttributes(a2, "fontResourceURL", v33);
            v8 = v24;
            goto LABEL_5;
          }
        }
      }
    }
  }
LABEL_13:
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "em", "%.17lg", v9, v10, v11, v12, v13, *((_QWORD *)a1[3] + 3));
  return 1;
}

uint64_t DisplayListXMLWriterResourceFont::getResource(DisplayListXMLWriterResourceFont *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceDash::~DisplayListXMLWriterResourceDash(DisplayListXMLWriterResourceDash *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceDash::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v10) = 0;
  }
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "phase", "%.17lg", v4, v5, v6, v7, v8, v10);
  CG::DisplayListXMLHelper::addFormatToAttributes(a2, "count", "%zu", v12, v13, v14, v15, v16, v11);
  return 1;
}

BOOL DisplayListXMLWriterResourceDash::writeChildElements(xmlTextWriterPtr *this)
{
  int started;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string v17;

  started = xmlTextWriterStartElement(this[1], (const xmlChar *)"pattern");
  if (started < 1)
  {
    v5 = started;
  }
  else
  {
    v3 = *((_QWORD *)this[3] + 2);
    if (v3)
      v4 = *(_QWORD *)(v3 + 16);
    else
      v4 = 0;
    if (v3)
      v6 = v3 + 24;
    else
      v6 = 0;
    memset(&v17, 0, sizeof(v17));
    std::string::append(&v17, "[", 1uLL);
    if (v4)
    {
      v14 = 0;
      do
      {
        CG::DisplayListXMLHelper::appendFormatToString(&v17, v7, v8, v9, v10, v11, v12, v13, *(_QWORD *)(v6 + 8 * v14++));
        if (v14 < v4)
          std::string::append(&v17, " ", 1uLL);
      }
      while (v4 != v14);
    }
    std::string::append(&v17, "]", 1uLL);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v17;
    else
      v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
    xmlTextWriterWriteRaw(this[1], (const xmlChar *)v15);
    v5 = xmlTextWriterEndElement(this[1]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v5 >= 0;
}

void sub_184B50C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DisplayListXMLWriterResourceDash::getResource(DisplayListXMLWriterResourceDash *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceColorSpace::~DisplayListXMLWriterResourceColorSpace(DisplayListXMLWriterResourceColorSpace *this)
{
  JUMPOUT(0x186DC23C4);
}

const __CFString *DisplayListXMLWriterResourceColorSpace::writeAttributes(CG::DisplayListXMLSerializer **a1, uint64_t **a2)
{
  CGColorSpace *v4;
  unsigned int v5;
  char *v6;
  const __CFString *v7;
  char *CStringPtr;
  char *v9;
  const __CFString *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int Type;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const __CFAllocator *v22;
  uint64_t ElementIDForResource;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFData *v31;
  CG::DisplayListXMLSerializer *v32;
  const __CFURL *ResourcesDirectory;
  const __CFURL *v34;
  const __CFURL *v35;
  CGDataConsumerRef v36;
  uint64_t v37;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v40;
  CFIndex v41;
  BOOL v43;
  void (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  DisplayListXMLWriterResource::writeAttributes(a1, a2);
  v4 = (CGColorSpace *)*((_QWORD *)a1[3] + 2);
  v5 = CGColorSpaceGetType(v4) + 1;
  if (v5 > 0xC)
    v6 = 0;
  else
    v6 = off_1E1661DC0[v5];
  CG::DisplayListXMLHelper::addStringToAttributes(a2, "csType", v6);
  if (!v4)
  {
    if (CGColorSpaceGetType(0) == 9)
      return 0;
    goto LABEL_17;
  }
  v7 = *(const __CFString **)(*((_QWORD *)v4 + 3) + 72);
  if (v7)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(v7, 0x8000100u);
    v9 = "name";
LABEL_7:
    CG::DisplayListXMLHelper::addStringToAttributes(a2, v9, CStringPtr);
    return (const __CFString *)1;
  }
  Type = CGColorSpaceGetType(v4);
  v19 = *((_QWORD *)v4 + 3);
  if (Type != 9)
  {
    v21 = *(_DWORD *)(v19 + 20);
    if (v21 <= 0xB && ((0xC78u >> v21) & 1) != 0)
    {
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(a1[2], a1[3], v12, v13, v14, v15, v16, v17);
      v24 = CFStringCreateWithFormat(v22, 0, CFSTR("ColorSpace-%llu.icc"), ElementIDForResource);
      v31 = CGColorSpaceCopyICCData(v4);
      v32 = a1[2];
      if (v31)
      {
        ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(v32);
        if (ResourcesDirectory)
        {
          v34 = CFURLCreateCopyAppendingPathComponent(v22, ResourcesDirectory, v24, 0);
          if (v34)
          {
            v35 = v34;
            v36 = CGDataConsumerCreateWithURL(v34);
            if (v36)
            {
              v37 = (uint64_t)v36;
              BytePtr = CFDataGetBytePtr(v31);
              Length = CFDataGetLength(v31);
              v40 = CGDataConsumerPutBytes(v37, (uint64_t)BytePtr, Length);
              v41 = CFDataGetLength(v31);
              v43 = v41 < 0 || v40 != v41;
              if (!*(_BYTE *)(v37 + 56))
              {
                v44 = *(void (**)(_QWORD))(v37 + 80);
                if (v44)
                  v44(*(_QWORD *)(v37 + 16));
              }
              CFRelease((CFTypeRef)v37);
              CFRelease(v35);
              CFRelease(v31);
              if (!v43)
              {
                CStringPtr = (char *)CFStringGetCStringPtr(v24, 0x8000100u);
                v9 = "profile";
                goto LABEL_7;
              }
              return 0;
            }
            CFRelease(v35);
          }
        }
        CFRelease(v31);
      }
      else
      {
        CG::DisplayListXMLSerializer::getElementIDForResource(v32, a1[3], v25, v26, v27, v28, v29, v30);
        CGPostError((uint64_t)"%s: CGColorSpaceCopyICCData() returned NULL for ColorSpaceResource with id = %llu", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLWriterResourceColorSpace::writeAttributes(DLXMLAttributes &)");
      }
      return 0;
    }
LABEL_17:
    CGPostError((uint64_t)"%s: Unhanded colorspace kind", v11, v12, v13, v14, v15, v16, v17, (char)"virtual BOOL DisplayListXMLWriterResourceColorSpace::writeAttributes(DLXMLAttributes &)");
    return 0;
  }
  if ((*(_DWORD *)(v19 + 24) - 5) > 1)
    return 0;
  v20 = **(_QWORD **)(v19 + 88);
  if (!v20)
    return 0;
  result = *(const __CFString **)(*(_QWORD *)(v20 + 24) + 72);
  if (result)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(result, 0x8000100u);
    v9 = "patternBaseName";
    goto LABEL_7;
  }
  return result;
}

uint64_t DisplayListXMLWriterResourceColorSpace::getResource(DisplayListXMLWriterResourceColorSpace *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceColor::~DisplayListXMLWriterResourceColor(DisplayListXMLWriterResourceColor *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceColor::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const CG::DisplayListResource *v11;
  char ElementIDForResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const CG::DisplayListResource *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const CGFloat *Components;
  unint64_t NumberOfComponents;
  __CFString *Mutable;
  __CFString *v36;
  unint64_t v37;
  char *CStringPtr;

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v10 = *(_QWORD **)(a1 + 24);
  v11 = (const CG::DisplayListResource *)v10[3];
  if (v11)
  {
    ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v11, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "colorSpace", "%llu", v13, v14, v15, v16, v17, ElementIDForResource);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v18 = (const CG::DisplayListResource *)v10[4];
  if (v18)
  {
    v19 = CG::DisplayListXMLSerializer::getElementIDForResource(*(CG::DisplayListXMLSerializer **)(a1 + 16), v18, v4, v5, v6, v7, v8, v9);
    CG::DisplayListXMLHelper::addFormatToAttributes(a2, "pattern", "%llu", v20, v21, v22, v23, v24, v19);
    v10 = *(_QWORD **)(a1 + 24);
  }
  v25 = v10[2];
  Components = CGColorGetComponents((CGColorRef)v25);
  if (v25)
  {
    if (v25 < 0)
      NumberOfComponents = CGTaggedColorGetNumberOfComponents(v25, v26, v27, v28, v29, v30, v31, v32);
    else
      NumberOfComponents = *(_QWORD *)(v25 + 56);
  }
  else
  {
    NumberOfComponents = 0;
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v36 = Mutable;
    CFStringAppend(Mutable, CFSTR("("));
    if (NumberOfComponents)
    {
      v37 = 0;
      do
      {
        CFStringAppendFormat(v36, 0, CFSTR("%.17lg"), *(_QWORD *)&Components[v37++]);
        if (v37 < NumberOfComponents)
          CFStringAppendCString(v36, " ", 0x8000100u);
      }
      while (NumberOfComponents != v37);
    }
    CFStringAppend(v36, CFSTR(")"));
    CStringPtr = (char *)CFStringGetCStringPtr(v36, 0x8000100u);
    CG::DisplayListXMLHelper::addStringToAttributes(a2, "components", CStringPtr);
    CFRelease(v36);
  }
  return 1;
}

uint64_t DisplayListXMLWriterResourceColor::getResource(DisplayListXMLWriterResourceColor *this)
{
  return *((_QWORD *)this + 3);
}

void DisplayListXMLWriterResourceClip::~DisplayListXMLWriterResourceClip(DisplayListXMLWriterResourceClip *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLWriterResourceClip::writeAttributes(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v12[2];

  DisplayListXMLWriterResource::writeAttributes((CG::DisplayListXMLSerializer **)a1, a2);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(float64x2_t *)(v4 + 40);
  v12[0] = *(float64x2_t *)(v4 + 24);
  v12[1] = v5;
  CG::DisplayListXMLHelper::addRectToAttributes(a2, "bbox", v12, v6, v7, v8, v9, v10);
  return 1;
}

BOOL DisplayListXMLWriterResourceClip::writeChildElements(DisplayListXMLWriterResourceClip *this)
{
  uint64_t v1;
  uint64_t v2;
  int started;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const CGRect *v25;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ElementIDForResource;
  const __CFString *v43;
  const __CFURL *ResourcesDirectory;
  const __CFURL *v45;
  const __CFURL *v46;
  char *CStringPtr;
  CGFloat v48;
  uint64_t v49;
  CGFloat width;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  CG::DisplayListXMLHelper *v59;
  _xmlTextWriter *v60;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  const __CFAllocator *alloc;
  uint64_t *v67;
  _QWORD *v68[2];
  UInt8 buffer[16];
  CGFloat v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 1;
  started = xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"stack");
  if ((started & 0x80000000) == 0)
  {
    xmlTextWriterWriteFormatAttribute(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"count", "%zu", v2);
    v12 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = 16;
    do
    {
      v14 = *(_QWORD **)(*((_QWORD *)this + 3) + 16);
      if (v14 && v14[15] > v12)
      {
        if (v14[14] == 3)
          v15 = &v14[v13];
        else
          v15 = (uint64_t *)(v14[16] + 8 * v12);
        v16 = *v15;
      }
      else
      {
        v16 = 0;
      }
      v17 = *(char *)(v16 + 8);
      if (v17 > 4 || v17 == 1)
      {
        CGPostError((uint64_t)"%s: Unexpected clip type (%d) encountered,", v5, v6, v7, v8, v9, v10, v11, (char)"virtual BOOL DisplayListXMLWriterResourceClip::writeChildElements()");
      }
      else if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"clip") & 0x80000000) == 0)
      {
        v68[0] = 0;
        v68[1] = 0;
        v67 = (uint64_t *)v68;
        v19 = *(unsigned __int8 *)(v16 + 8);
        switch((char)v19)
        {
          case 0:
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", "rect");
            if (*(_BYTE *)(v16 + 8))
            {
              v25 = &CGRectNull;
              p_height = &CGRectNull.size.height;
              p_y = &CGRectNull.origin.y;
              p_size = &CGRectNull.size;
            }
            else
            {
              v25 = (const CGRect *)(v16 + 24);
              p_y = (CGFloat *)(v16 + 32);
              p_size = (CGSize *)(v16 + 40);
              p_height = (CGFloat *)(v16 + 48);
            }
            v48 = *p_height;
            v49 = *(_QWORD *)p_y;
            width = p_size->width;
            *(CGFloat *)buffer = v25->origin.x;
            *(_QWORD *)&buffer[8] = v49;
            v70[0] = width;
            v70[1] = v48;
            CG::DisplayListXMLHelper::addRectToAttributes(&v67, "rect", (float64x2_t *)buffer, v20, v21, v22, v23, v24);
            break;
          case 2:
          case 4:
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", off_1E1661BB0[(char)v19 + 1]);
            break;
          case 3:
            if (v19 == 3)
            {
              v29 = *(_QWORD *)(v16 + 24);
              if (v29)
              {
                v30 = *(_OWORD *)(v29 + 80);
                *(_OWORD *)buffer = *(_OWORD *)(v29 + 64);
                *(_OWORD *)v70 = v30;
                CG::DisplayListXMLHelper::addRectToAttributes(&v67, "rect", (float64x2_t *)buffer, v7, v8, v9, v10, v11);
                v63 = *(_QWORD *)(v29 + 40);
                v64 = *(_QWORD *)(v29 + 48);
                v62 = *(_OWORD *)(v29 + 24);
                CG::DisplayListXMLHelper::addFormatToAttributes(&v67, "matrix", "[%.17lg %.17lg %.17lg %.17lg %.17lg %.17lg]", v31, v32, v33, v34, v35, *(_OWORD *)(v29 + 8));
                v65 = *(const void **)(v29 + 56);
                if (v65)
                {
                  ElementIDForResource = CG::DisplayListXMLSerializer::getElementIDForResource(*((CG::DisplayListXMLSerializer **)this + 2), *((const CG::DisplayListResource **)this + 3), v36, v37, v38, v39, v40, v41);
                  v43 = CFStringCreateWithFormat(alloc, 0, CFSTR("Clip-%llu_Mask-%lu.tiff"), ElementIDForResource, v12 + 1, v62, v63, v64);
                  ResourcesDirectory = (const __CFURL *)CG::DisplayListXMLSerializer::getResourcesDirectory(*((CG::DisplayListXMLSerializer **)this + 2));
                  if (ResourcesDirectory)
                  {
                    v45 = CFURLCreateCopyAppendingPathComponent(alloc, ResourcesDirectory, v43, 0);
                    v46 = v45;
                    if (v45)
                    {
                      CFURLGetFileSystemRepresentation(v45, 1u, buffer, 1025);
                      CGImageWriteToFile(v65, (char *)buffer);
                      CFRelease(v46);
                    }
                  }
                  CStringPtr = (char *)CFStringGetCStringPtr(v43, 0x8000100u);
                  CG::DisplayListXMLHelper::addStringToAttributes(&v67, "maskImage", CStringPtr);
                }
              }
            }
            CG::DisplayListXMLHelper::addStringToAttributes(&v67, "type", "mask");
            break;
          default:
            break;
        }
        CG::DisplayListXMLHelper::writeAttributes(&v67, *((xmlTextWriterPtr *)this + 1));
        v58 = *(unsigned __int8 *)(v16 + 8);
        if (v58 == 4)
        {
          CGPostError((uint64_t)"%s: kCGClipTypeTextClipping is unimplemented", v51, v52, v53, v54, v55, v56, v57, (char)"virtual BOOL DisplayListXMLWriterResourceClip::writeChildElements()");
        }
        else if ((char)v58 == 2 && v58 == 2)
        {
          v59 = *(CG::DisplayListXMLHelper **)(v16 + 24);
          if (v59)
          {
            if ((xmlTextWriterStartElement(*((xmlTextWriterPtr *)this + 1), (const xmlChar *)"cgpath") & 0x80000000) == 0)
            {
              CG::DisplayListXMLHelper::writeCGPath(v59, *((const CGPath **)this + 1), v60);
              xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
            }
          }
        }
        xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v68[0]);
      }
      ++v12;
      ++v13;
    }
    while (v2 != v12);
    started = xmlTextWriterEndElement(*((xmlTextWriterPtr *)this + 1));
  }
  return started >= 0;
}

void sub_184B51504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a19);
  _Unwind_Resume(a1);
}

uint64_t DisplayListXMLWriterResourceClip::getResource(DisplayListXMLWriterResourceClip *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t **std::__tree<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::__map_value_compare<CG::DisplayListResource const*,std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>,std::less<CG::DisplayListResource const*>,true>,std::allocator<std::__value_type<CG::DisplayListResource const*,std::pair<unsigned long long,BOOL>>>>::__emplace_unique_key_args<CG::DisplayListResource const*,std::piecewise_construct_t const&,std::tuple<CG::DisplayListResource const* const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *((_BYTE *)v7 + 48) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void CG::DisplayListSerializer::~DisplayListSerializer(CG::DisplayListSerializer *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E1629130;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t CGFontGetGlyphPaths(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  float64x2_t *v13;
  unsigned __int16 *v14;
  uint64_t result;
  BOOL v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  const CGPath *v28;
  const CGPath *v29;
  void (*v30)(uint64_t, _QWORD);
  float64x2_t v31;
  _QWORD info[2];
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v37;

  v12 = a4;
  v13 = (float64x2_t *)a3;
  v14 = (unsigned __int16 *)a2;
  if ((CGFontGetGlyphPaths_warned & 1) == 0)
  {
    CGFontGetGlyphPaths_warned = 1;
  }
  if (!a1)
    return 0;
  result = 0;
  if (v12)
    v17 = v14 == 0;
  else
    v17 = 0;
  if (!v17 && a8)
  {
    if (!v12)
      return 1;
    info[0] = a7;
    info[1] = a8;
    result = (uint64_t)get_font_info(a1);
    if (!result)
      return result;
    v18 = *(_DWORD *)(result + 8);
    if (v18)
    {
      v19 = 1.0 / (double)v18;
      if (a6 && *a6 != 72.0)
        v19 = v19 * (72.0 / *a6);
      v33 = v19;
      v34 = 0.0;
      v35 = 0.0;
      v36 = v19;
      v37 = 0uLL;
      if (a5)
      {
        v20 = a5[1];
        v21 = a5[2];
        v22 = a5[3];
        v23 = a5[5];
        v24 = v21 * 0.0;
        v25 = v21 * 0.0 + v19 * *a5;
        v26 = v19 * v21 + *a5 * 0.0;
        v27 = a5[4] + v24 + *a5 * 0.0;
        v33 = v25;
        v34 = v22 * 0.0 + v19 * v20;
        v35 = v26;
        v36 = v19 * v22 + v20 * 0.0;
        v37.f64[0] = v27;
        v37.f64[1] = v22 * 0.0 + v20 * 0.0 + v23;
      }
      do
      {
        if (*(_QWORD *)a8)
          (*(void (**)(uint64_t, _QWORD))a8)(a7, *v14);
        v28 = (const CGPath *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[2] + 400))(a1[14], 0, *v14);
        if (v28)
        {
          v29 = v28;
          CGPathApply(v28, info, (CGPathApplierFunction)process_path_element);
          CFRelease(v29);
        }
        else
        {
          CGPathApply(0, info, (CGPathApplierFunction)process_path_element);
        }
        v30 = *(void (**)(uint64_t, _QWORD))(a8 + 48);
        if (v30)
          v30(a7, *v14);
        if (v13)
        {
          v31 = *v13++;
          v37 = vaddq_f64(v31, v37);
        }
        ++v14;
        --v12;
      }
      while (v12);
      return 1;
    }
    return 0;
  }
  return result;
}

float64x2_t *process_path_element(float64x2_t *result, uint64_t a2)
{
  float64_t v2;
  uint64_t (*v3)(_QWORD, __n128, double);
  __n128 v4;
  uint64_t (*v5)(_QWORD, double, double, double, double);
  double *v6;
  uint64_t (*v7)(_QWORD, double, double, double, double, double, double);
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t (*v15)(_QWORD);

  v2 = result->f64[1];
  switch(*(_DWORD *)a2)
  {
    case 0:
      v3 = *(uint64_t (**)(_QWORD, __n128, double))(*(_QWORD *)&v2 + 8);
      if (!v3)
        return result;
      goto LABEL_5;
    case 1:
      v3 = *(uint64_t (**)(_QWORD, __n128, double))(*(_QWORD *)&v2 + 16);
      if (v3)
      {
LABEL_5:
        v4 = (__n128)vaddq_f64(result[3], vmlaq_n_f64(vmulq_n_f64(result[2], *(double *)(*(_QWORD *)(a2 + 8) + 8)), result[1], **(double **)(a2 + 8)));
        result = (float64x2_t *)v3(*(_QWORD *)&result->f64[0], v4, v4.n128_f64[1]);
      }
      break;
    case 2:
      v5 = *(uint64_t (**)(_QWORD, double, double, double, double))(*(_QWORD *)&v2 + 24);
      if (v5)
      {
        v6 = *(double **)(a2 + 8);
        result = (float64x2_t *)v5(*(_QWORD *)&result->f64[0], result[3].f64[0] + v6[1] * result[2].f64[0] + result[1].f64[0] * *v6, result[3].f64[1] + v6[1] * result[2].f64[1] + result[1].f64[1] * *v6, result[3].f64[0] + result[2].f64[0] * v6[3] + result[1].f64[0] * v6[2], result[3].f64[1] + result[2].f64[1] * v6[3] + result[1].f64[1] * v6[2]);
      }
      break;
    case 3:
      v7 = *(uint64_t (**)(_QWORD, double, double, double, double, double, double))(*(_QWORD *)&v2 + 32);
      if (v7)
      {
        v8 = *(double **)(a2 + 8);
        v9 = result[1].f64[0];
        v10 = result[1].f64[1];
        v11 = result[2].f64[0];
        v12 = result[2].f64[1];
        v13 = result[3].f64[0];
        v14 = result[3].f64[1];
        result = (float64x2_t *)v7(*(_QWORD *)&result->f64[0], v13 + v8[1] * v11 + v9 * *v8, v14 + v8[1] * v12 + v10 * *v8, v13 + v11 * v8[3] + v9 * v8[2], v14 + v12 * v8[3] + v10 * v8[2], v13 + v11 * v8[5] + v9 * v8[4], v14 + v12 * v8[5] + v10 * v8[4]);
      }
      break;
    case 4:
      v15 = *(uint64_t (**)(_QWORD))(*(_QWORD *)&v2 + 40);
      if (v15)
        result = (float64x2_t *)v15(*(_QWORD *)&result->f64[0]);
      break;
    default:
      abort();
  }
  return result;
}

_QWORD *CGPDFXRefStreamCreate(const void **a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a2;
  v23 = a2;
  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v6)
  {
    *v6 = a1;
    v6[3] = v4;
    v7 = pdf_object_scanner_create_with_xref(a1, 0);
    v6[2] = v7;
    if (v7)
    {
      v14 = v6 + 1;
      while (1)
      {
        v15 = xref_stream_create(v7, v4, v8, v9, v10, v11, v12, v13);
        if (!v15)
          break;
        v16 = v15;
        v17 = (_QWORD *)*v14;
        v18 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
        *v18 = v17;
        v18[1] = v16;
        *v14 = v18;
        if (!a3)
          goto LABEL_16;
        if (!CGPDFDictionaryGetOffset(*((CGPDFDictionary **)v16 + 1), "Prev", &v23))
        {
          v18 = (_QWORD *)*v14;
          if (*v14)
          {
LABEL_16:
            v21 = 0;
            do
            {
              v22 = v18;
              v18 = (_QWORD *)*v18;
              *v22 = v21;
              v21 = v22;
            }
            while (v18);
          }
          else
          {
            v22 = 0;
          }
          *v14 = v22;
          return v6;
        }
        v4 = v23;
        if (!v23)
          break;
        v19 = v6 + 1;
        while (1)
        {
          v19 = (_QWORD *)*v19;
          if (!v19)
            break;
          if (*(_QWORD *)v19[1] == v23)
            goto LABEL_13;
        }
        v7 = (uint64_t *)v6[2];
      }
    }
LABEL_13:
    CGPDFXRefStreamRelease((uint64_t)v6);
    return 0;
  }
  return v6;
}

void CGPDFXRefStreamRelease(uint64_t a1)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a1)
  {
    v2 = *(uint64_t ***)(a1 + 8);
    if (v2)
    {
      do
      {
        xref_stream_release(v2[1]);
        v2 = (uint64_t **)*v2;
      }
      while (v2);
      v3 = *(_QWORD **)(a1 + 8);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          free(v3);
          v3 = v4;
        }
        while (v4);
      }
    }
    pdf_object_scanner_release(*(uint64_t **)(a1 + 16));
    free((void *)a1);
  }
}

char *xref_stream_create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CGPDFDictionary *v17;
  char *v18;
  uint64_t v20;
  __CFArray *description;
  __CFArray *v22;
  const void *v23;
  size_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  _QWORD *section;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _OWORD v38[2];
  uint64_t v39;
  char *value;
  _QWORD v41[5];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  CGPDFInteger v46;
  CGPDFInteger v47;
  CGPDFInteger v48;
  int v49;
  CGPDFArrayRef v50;
  _QWORD v51[4];

  v51[3] = *MEMORY[0x1E0C80C00];
  v39 = 0;
  value = 0;
  memset(v38, 0, sizeof(v38));
  CGPDFSourceSetPosition(a1[1], a2, a3, a4, a5, a6, a7, a8);
  if ((pdf_object_scanner_read_indirect_object(a1, (uint64_t)v38, v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    pdf_error("missing or invalid cross-reference stream.");
    return 0;
  }
  if (DWORD2(v38[0]) != 9)
  {
    pdf_error("missing or invalid cross-reference stream.");
LABEL_11:
    if ((DWORD2(v38[0]) - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)v38);
    return 0;
  }
  v15 = v39;
  if (v39)
    *(_BYTE *)(v39 + 41) = 1;
  v16 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v16)
    goto LABEL_11;
  if (v15)
  {
    v17 = *(CGPDFDictionary **)(v15 + 48);
    if (v17)
      CFRetain(*(CFTypeRef *)(v15 + 48));
  }
  else
  {
    v17 = 0;
  }
  *((_QWORD *)v16 + 1) = v17;
  if (!CGPDFDictionaryGetName(v17, "Type", (const char **)&value))
  {
LABEL_18:
    pdf_error(v18);
    goto LABEL_19;
  }
  if (strcmp(value, "XRef"))
  {
LABEL_19:
    if ((DWORD2(v38[0]) - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)v38);
    xref_stream_release(v16);
    return 0;
  }
  v50 = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  if (!CGPDFDictionaryGetInteger(*((CGPDFDictionaryRef *)v16 + 1), "Size", &v48))
  {
    goto LABEL_19;
  }
  if (!CGPDFDictionaryGetIntegers(*((CGPDFDictionary **)v16 + 1), "W", (uint64_t)v51, (CGPDFArray *)3))
  {
    goto LABEL_19;
  }
  v20 = 0;
  do
  {
    if (v51[v20] > 8uLL)
      goto LABEL_18;
    ++v20;
  }
  while (v20 != 3);
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  description = pdf_filter_chain_create_description(v15, *(unsigned __int8 *)(v15 + 40));
  if (description)
  {
    v22 = description;
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 0x40000000;
    v41[2] = __xref_stream_read_sections_block_invoke;
    v41[3] = &unk_1E1643DE0;
    v41[4] = &v42;
    CGCFArrayApplyBlock(description, v41);
    CFRelease(v22);
  }
  if (*((_BYTE *)v43 + 24))
  {
LABEL_53:
    _Block_object_dispose(&v42, 8);
    goto LABEL_19;
  }
  v23 = (const void *)CGPDFStreamCreateFilterChain(v15, &v49);
  if (!v23 || v49)
  {
    if (!v23)
      goto LABEL_53;
    goto LABEL_52;
  }
  if (CGPDFDictionaryGetArray(*((CGPDFDictionaryRef *)v16 + 1), "Index", &v50))
  {
    if (v50)
    {
      v24 = *((_QWORD *)v50 + 2);
      if ((v24 & 1) != 0)
      {
LABEL_51:
        goto LABEL_52;
      }
      v25 = v16 + 16;
      if (v24)
      {
        v26 = 0;
        while (CGPDFArrayGetInteger(v50, v26, &v47))
        {
          v27 = v26 + 1;
          if (!CGPDFArrayGetInteger(v50, v27, &v46))
            break;
          section = xref_stream_read_section((uint64_t)v23, v51, v47, v46);
          if (!section)
            goto LABEL_52;
          v29 = section;
          v30 = (_QWORD *)*v25;
          v31 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
          *v31 = v30;
          v31[1] = v29;
          *v25 = v31;
          v26 = v27 + 1;
          if (v26 >= v24)
            goto LABEL_56;
        }
        goto LABEL_51;
      }
    }
    else
    {
      v25 = v16 + 16;
    }
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
LABEL_56:
      v36 = 0;
      do
      {
        v37 = v31;
        v31 = (_QWORD *)*v31;
        *v37 = v36;
        v36 = v37;
      }
      while (v31);
    }
    else
    {
      v37 = 0;
    }
    *v25 = v37;
  }
  else
  {
    v32 = xref_stream_read_section((uint64_t)v23, v51, 0, v48);
    if (!v32)
    {
LABEL_52:
      CFRelease(v23);
      goto LABEL_53;
    }
    v33 = v32;
    v34 = *((_QWORD *)v16 + 2);
    v35 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *v35 = v34;
    v35[1] = v33;
    *((_QWORD *)v16 + 2) = v35;
  }
  CFRelease(v23);
  _Block_object_dispose(&v42, 8);
  if ((DWORD2(v38[0]) - 5) <= 4)
    pdf_object_release_compound_value((uint64_t)v38);
  return v16;
}

void xref_stream_release(_QWORD *a1)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;

  if (a1)
  {
    v2 = (uint64_t **)a1[2];
    if (v2)
    {
      do
      {
        free(v2[1]);
        v2 = (uint64_t **)*v2;
      }
      while (v2);
      v3 = (_QWORD *)a1[2];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          free(v3);
          v3 = v4;
        }
        while (v4);
      }
    }
    v5 = (const void *)a1[1];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

uint64_t __xref_stream_read_sections_block_invoke(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t result;
  int valuePtr;

  v4 = CFGetTypeID(cf);
  result = CFNumberGetTypeID();
  if (v4 == result)
  {
    valuePtr = 0;
    result = CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      if (valuePtr == 6)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

_QWORD *xref_stream_read_section(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  _QWORD *v25;
  char v26;
  __int16 v27;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a4 > 0x155555555555555)
    return 0;
  v8 = malloc_type_calloc(1uLL, 24 * a4 + 16, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v8)
  {
    *v8 = a3;
    v8[1] = a4;
    if (a4)
    {
      v16 = 0;
      v29 = a4;
      while (2)
      {
        v17 = 0;
        v30 = &v8[3 * v16 + 2];
        do
        {
          v18 = a2[v17];
          if (v18)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            while (1)
            {
              v22 = CGPDFSourceGetc(a1, v9, v10, v11, v12, v13, v14, v15);
              if (v22 == -1)
                break;
              v20 = v22 | (unint64_t)(v20 << 8);
              v19 = ++v21 >= v18;
              if (v18 == v21)
                goto LABEL_12;
            }
            if (!v19)
              goto LABEL_26;
          }
          else
          {
            v20 = 0;
LABEL_12:
            *(&v31 + v17) = v20;
          }
          ++v17;
        }
        while (v17 != 3);
        if (*a2)
          v23 = v31;
        else
          v23 = 1;
        if (v23 == 2)
        {
          *v30 = v32;
          v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = 0;
          v26 = *((_BYTE *)v25 + 34) | 3;
        }
        else if (v23 == 1)
        {
          v27 = WORD4(v32);
          *(_QWORD *)v30 = v32;
          v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = v27;
          v26 = *((_BYTE *)v25 + 34) & 0xFC | 1;
        }
        else
        {
          if (v23)
          {
LABEL_26:
            free(v8);
            return 0;
          }
          v24 = WORD4(v32);
          *(_QWORD *)v30 = v32;
          v25 = &v8[3 * v16];
          *((_WORD *)v25 + 16) = v24;
          v26 = *((_BYTE *)v25 + 34) & 0xFC;
        }
        *((_BYTE *)v25 + 34) = v26;
        if (++v16 != v29)
          continue;
        break;
      }
    }
  }
  return v8;
}

uint64_t CGPDFXRefStreamGetObject(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *entry;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t Object;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = a1 + 1;
  do
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      return 0;
    entry = xref_stream_get_entry(*(_QWORD **)(v8[1] + 16), a2, a3);
  }
  while (!entry);
  v16 = *entry;
  if ((*((_BYTE *)entry + 18) & 2) == 0)
  {
    if (v16)
    {
      CGPDFSourceSetPosition(*(_QWORD *)(a1[2] + 8), v16, v10, v11, v12, v13, v14, v15);
      return pdf_object_scanner_read_indirect_object((uint64_t *)a1[2], a4, v17, v18, v19, v20, v21, v22);
    }
    return 0;
  }
  if (v16)
  {
    v24 = (const void **)*a1;
    v25 = pdf_xref_resolve(*a1, v16, 0);
    if (v25)
    {
      v26 = v25;
      v27 = CGPDFObjectCopyAssociation(v25, "ObjectStream");
      if (v27)
      {
        v32 = v27;
        Object = CGPDFObjectStreamGetObject((uint64_t)v27, a2, a3, a4, v28, v29, v30, v31);
        goto LABEL_11;
      }
      if (*(_DWORD *)(v26 + 8) == 9)
      {
        v34 = (const void *)CGPDFObjectStreamCreate(v24, *(_QWORD *)(v26 + 32));
        if (v34)
        {
          v32 = (const void *)CGPDFObjectSetAssociation(v26, v34, "ObjectStream");
          Object = CGPDFObjectStreamGetObject((uint64_t)v32, a2, a3, a4, v35, v36, v37, v38);
          if (!v32)
            return Object;
LABEL_11:
          CFRelease(v32);
          return Object;
        }
      }
    }
  }
  return 0;
}

_QWORD *xref_stream_get_entry(_QWORD *result, unint64_t a2, unsigned __int16 a3)
{
  _QWORD *v3;
  unint64_t v4;

  if (result)
  {
    while (1)
    {
      v3 = (_QWORD *)result[1];
      v4 = a2 - *v3;
      if (a2 >= *v3 && a2 < v3[1] + *v3 && LOWORD(v3[3 * v4 + 4]) == a3)
        break;
      result = (_QWORD *)*result;
      if (!result)
        return result;
    }
    return &v3[3 * v4 + 2];
  }
  return result;
}

BOOL CGPDFXRefStreamGetEntry(uint64_t a1, unint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *entry;

  v7 = (_QWORD *)(a1 + 8);
  while (1)
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    entry = xref_stream_get_entry(*(_QWORD **)(v7[1] + 16), a2, a3);
    if (entry)
    {
      if ((*((_BYTE *)entry + 18) & 2) != 0)
      {
        *(_DWORD *)a4 = 1;
        *(_QWORD *)(a4 + 8) = *entry;
        *(_QWORD *)(a4 + 16) = entry[1];
      }
      else
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = *entry;
      }
      *(_BYTE *)(a4 + 24) = *((_BYTE *)entry + 18) & 1;
      *(_WORD *)(a4 + 26) = *((_WORD *)entry + 8);
      return v7 != 0;
    }
  }
  return v7 != 0;
}

uint64_t CGPDFXRefStreamPrint(uint64_t result, uint64_t a2)
{
  FILE *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  const char *v10;
  _QWORD *v11;

  if (result)
  {
    v2 = (FILE *)(a2 ? a2 : *MEMORY[0x1E0C80C20]);
    v3 = *(_QWORD **)(result + 8);
    if (v3)
    {
      do
      {
        v11 = v3;
        v4 = (_QWORD *)v3[1];
        result = fprintf(v2, "xref stream %p:\n", v4);
        v5 = (_QWORD *)v4[2];
        if (v5)
        {
          v6 = 0;
          do
          {
            v7 = (_QWORD *)v5[1];
            fprintf(v2, "  Section %zu\n", v6);
            fprintf(v2, "    start = %ld\n", *v7);
            result = fprintf(v2, "    count = %ld\n", v7[1]);
            if ((uint64_t)v7[1] >= 1)
            {
              v8 = 0;
              v9 = (char *)v7 + 34;
              do
              {
                if ((*v9 & 1) != 0)
                  v10 = "used";
                else
                  v10 = "free";
                fprintf(v2, "    Entry %ld %hu (%s)\n", v8 + *v7, *((unsigned __int16 *)v9 - 1), v10);
                if ((*v9 & 2) != 0)
                  result = fprintf(v2, "      Stream: %lu index: %ld\n");
                else
                  result = fprintf(v2, "      Offset: %lld\n");
                v9 += 24;
                ++v8;
              }
              while (v8 < v7[1]);
            }
            ++v6;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        v3 = (_QWORD *)*v11;
      }
      while (*v11);
    }
  }
  return result;
}

void PBPageLayoutPkg::PBTextLine::~PBTextLine(PBPageLayoutPkg::PBTextLine *this)
{
  PBPageLayoutPkg::PBTextLine::~PBTextLine(this);
  JUMPOUT(0x186DC23C4);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E1628D98;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t PBPageLayoutPkg::PBTextLine::readFrom(PBPageLayoutPkg::PBTextLine *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_DWORD *)operator new();
          *(_QWORD *)v20 = &off_1E1628EE8;
          v20[6] = 0;
          v21 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = (_DWORD *)*((_QWORD *)this + 2);
          }
          goto LABEL_34;
        case 2u:
          *((_BYTE *)this + 36) |= 1u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_51;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_46:
            v27 = 0;
            goto LABEL_51;
          }
          v32 = 0;
          v33 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v34 = v22 + 1;
              v35 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v34;
              v27 |= (unint64_t)(v35 & 0x7F) << v32;
              if (v35 < 0)
              {
                v32 += 7;
                v22 = v34;
                v14 = v33++ > 8;
                if (v14)
                  goto LABEL_46;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v27 = 0;
            }
            break;
          }
LABEL_51:
          *((_QWORD *)this + 3) = v27;
          goto LABEL_52;
        case 3u:
          v20 = (_DWORD *)operator new();
          *(_QWORD *)v20 = &off_1E1628E78;
          v20[10] = 0;
          v30 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v20;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v20 = (_DWORD *)*((_QWORD *)this + 1);
          }
LABEL_34:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 4u:
          *((_BYTE *)this + 36) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v31);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_52;
        default:
          goto LABEL_19;
      }
      goto LABEL_52;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_52:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t PBPageLayoutPkg::PBTextLine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  return this;
}

uint64_t PBPageLayoutPkg::PBTextLine::formatText(PBPageLayoutPkg::PBTextLine *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bbox");
  if ((*((_BYTE *)this + 36) & 2) != 0)
    PB::TextFormatter::format(a2, "rotation", *((float *)this + 8));
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "textRange");
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "uniCharStart");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CGPDFFontCreateWithObject(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 8) == 8)
    return CGPDFFontCreate(*(CGPDFDictionary **)(a1 + 32));
  else
    return 0;
}

uint64_t CGPDFFontCreate(CGPDFDictionary *a1)
{
  char *v2;
  uint64_t cftype;
  unsigned int font_subtype;
  int v6;
  char *v7;
  int base14_name;
  int v9;
  uint64_t v10;
  __int128 v11;
  const char *v12;
  CGPDFDictionaryRef v13;
  pthread_mutexattr_t v14;
  CGPDFArrayRef value[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (char *)CGPDFDictionaryCopyAssociation((uint64_t)a1, "Font");
  if (v2)
    return (uint64_t)v2;
  if (CGPDFFontGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFFontGetTypeID_onceToken, &__block_literal_global_3634);
  cftype = pdf_create_cftype();
  v2 = (char *)cftype;
  if (!cftype)
    return (uint64_t)v2;
  v12 = 0;
  *(_QWORD *)(cftype + 16) = a1;
  v14.__sig = 0;
  *(_QWORD *)v14.__opaque = 0;
  pthread_mutexattr_init(&v14);
  pthread_mutexattr_settype(&v14, 2);
  pthread_mutex_init((pthread_mutex_t *)(v2 + 136), &v14);
  pthread_mutexattr_destroy(&v14);
  font_subtype = get_font_subtype(a1);
  *((_DWORD *)v2 + 50) = font_subtype;
  if (font_subtype > 7)
    goto LABEL_10;
  if (((1 << font_subtype) & 0x3C) != 0)
    goto LABEL_11;
  if (((1 << font_subtype) & 0xC2) != 0)
  {
    v2[24] = 1;
  }
  else
  {
LABEL_10:
    *((_DWORD *)v2 + 50) = 2;
  }
LABEL_11:
  if (CGPDFDictionaryGetName(a1, "BaseFont", &v12))
    *((_QWORD *)v2 + 4) = v12;
  *((_DWORD *)v2 + 10) = 0;
  v6 = *((_DWORD *)v2 + 50);
  if (v6 == 4 || v6 == 2)
  {
    v7 = (char *)*((_QWORD *)v2 + 4);
    if (!v7)
    {
LABEL_33:
      *((_QWORD *)v2 + 7) = 0x3F50624DD2F1A9FCLL;
      *((_QWORD *)v2 + 8) = 0;
      *((_QWORD *)v2 + 9) = 0;
      *((_QWORD *)v2 + 10) = 0x3F50624DD2F1A9FCLL;
      *((_QWORD *)v2 + 11) = 0;
      *((_QWORD *)v2 + 12) = 0;
      *(CGRect *)(v2 + 104) = CGRectNull;
      return CGPDFDictionarySetAssociation((uint64_t)a1, v2, "Font");
    }
    base14_name = get_base14_name(v7);
    if (base14_name >= 15)
      v9 = 0;
    else
      v9 = base14_name;
    *((_DWORD *)v2 + 10) = v9;
    v6 = *((_DWORD *)v2 + 50);
  }
  if (v6 == 1)
  {
    value[0] = 0;
    v13 = 0;
    if (CGPDFDictionaryGetArray(*((CGPDFDictionaryRef *)v2 + 2), "DescendantFonts", value))
    {
      if (value[0] && *((_QWORD *)value[0] + 2) == 1)
      {
        if (!CGPDFArrayGetDictionary(value[0], 0, &v13))
        {
          pdf_error("invalid descendant font for Type0 font.", v12);
          goto LABEL_41;
        }
        if ((~get_font_subtype(v13) & 6) != 0)
        {
          pdf_error("invalid descendant font subtype for Type0 font.", v12);
          goto LABEL_41;
        }
        v10 = CGPDFFontCreate(v13);
        *((_QWORD *)v2 + 6) = v10;
        if (v10)
        {
          v6 = *((_DWORD *)v2 + 50);
          goto LABEL_28;
        }
      }
      else
      {
      }
    }
    else
    {
    }
LABEL_41:
    CFRelease(v2);
    return 0;
  }
LABEL_28:
  if (v6 != 5)
    goto LABEL_33;
  if (!CGPDFDictionaryGetNumbers(a1, "FontMatrix", (uint64_t)value, (CGPDFArray *)6))
  {
    goto LABEL_41;
  }
  v11 = v16;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)value;
  *(_OWORD *)(v2 + 72) = v11;
  *(_OWORD *)(v2 + 88) = v17;
  if (!CGPDFDictionaryGetRect(a1, "FontBBox", (double *)v2 + 13))
  {
    goto LABEL_41;
  }
  if (*((_DWORD *)v2 + 50) != 5)
    return CGPDFDictionarySetAssociation((uint64_t)a1, v2, "Font");
  return (uint64_t)v2;
}

uint64_t get_font_subtype(CGPDFDictionary *a1)
{
  char *v1;
  char *value;

  value = 0;
  if (CGPDFDictionaryGetName(a1, "Subtype", (const char **)&value))
  {
    v1 = value;
    if (!strcmp(value, "Type1"))
    {
      return 2;
    }
    else if (!strcmp(v1, "MMType1"))
    {
      return 3;
    }
    else if (!strcmp(v1, "TrueType"))
    {
      return 4;
    }
    else if (!strcmp(v1, "Type3"))
    {
      return 5;
    }
    else if (!strcmp(v1, "Type0"))
    {
      return 1;
    }
    else if (!strcmp(v1, "CIDFontType0"))
    {
      return 6;
    }
    else if (!strcmp(v1, "CIDFontType2"))
    {
      return 7;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

void CGPDFFontFinalize(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 136));
  CGPDFAdvancesRelease(*(void ****)(a1 + 208));
  v2 = *(const void **)(a1 + 224);
  if (v2)
    CFRelease(v2);
  CGPDFEncodingRelease(*(_QWORD *)(a1 + 216));
  v3 = *(_QWORD *)(a1 + 232);
  if (v3)
  {
    v4 = *(const void **)(v3 + 24);
    if (v4)
      CFRelease(v4);
    free(*(void **)v3);
    free(*(void **)(v3 + 8));
    free((void *)v3);
  }
  v5 = *(const void **)(a1 + 240);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 248);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 48);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 288);
  if (v8)
    CFRelease(v8);
  CGFontIndexMapRelease(*(char **)(a1 + 264));
  CGPDFFontMutatorRelease(*(char **)(a1 + 296));
  free(*(void **)(a1 + 272));
}

void CGPDFFontRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFTypeRef CGPDFFontRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t CGPDFFontGetDictionary(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t CGPDFFontGetType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 200);
  return result;
}

uint64_t CGPDFFontGetName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t CGPDFFontIsBase14(uint64_t result, _DWORD *a2)
{
  int v2;

  if (result)
  {
    v2 = *(_DWORD *)(result + 40);
    if (v2)
    {
      if (a2)
        *a2 = v2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ***CGPDFFontGetAdvances(void ***result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  if (result)
  {
    v1 = (uint64_t)result;
    while (*(_DWORD *)(v1 + 200) == 1)
    {
      v1 = *(_QWORD *)(v1 + 48);
      if (!v1)
        return 0;
    }
    v2 = (unint64_t *)(v1 + 208);
    result = (void ***)atomic_load((unint64_t *)(v1 + 208));
    if (!result)
    {
      result = CGPDFAdvancesCreate(v1);
      while (1)
      {
        v3 = __ldaxr(v2);
        if (v3)
          break;
        if (!__stlxr((unint64_t)result, v2))
          return result;
      }
      __clrex();
      CGPDFAdvancesRelease(result);
      return (void ***)v3;
    }
  }
  return result;
}

__n128 CGPDFFontGetFontMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const CGAffineTransform *v2;
  __int128 v3;
  __n128 result;

  v2 = (const CGAffineTransform *)(a1 + 56);
  if (!a1)
    v2 = &CGAffineTransformIdentity;
  v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

CGFloat CGPDFFontGetFontBBox(uint64_t a1)
{
  unint64_t FontDescriptor;
  const CGRect *v3;

  if (!a1)
    return INFINITY;
  if (*(_DWORD *)(a1 + 200) == 5)
    return *(double *)(a1 + 104);
  FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  v3 = &CGRectNull;
  if (FontDescriptor)
    v3 = (const CGRect *)(FontDescriptor + 48);
  return v3->origin.x;
}

unint64_t CGPDFFontGetFontDescriptor(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t cftype;
  unsigned int v5;
  char *v6;
  __int128 v7;
  unint64_t v8;
  CGPDFDictionaryRef dict;
  CGPDFInteger value;

  if (!a1)
    return 0;
  v1 = a1;
  while (*(_DWORD *)(v1 + 200) == 1)
  {
    v1 = *(_QWORD *)(v1 + 48);
    if (!v1)
      return 0;
  }
  v3 = (unint64_t *)(v1 + 248);
  v2 = atomic_load((unint64_t *)(v1 + 248));
  if (!v2)
  {
    if (CGPDFFontDescriptorGetTypeID_onceToken != -1)
      dispatch_once(&CGPDFFontDescriptorGetTypeID_onceToken, &__block_literal_global_15386);
    cftype = pdf_create_cftype();
    v2 = cftype;
    if (cftype)
    {
      dict = 0;
      value = 0;
      *(_QWORD *)(cftype + 16) = v1;
      *(_QWORD *)(cftype + 24) = 0;
      if (CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(v1 + 16), "FontDescriptor", &dict))
      {
        if (!CGPDFDictionaryGetRect(dict, "FontBBox", (double *)(v2 + 48)))
          *(CGRect *)(v2 + 48) = CGRectNull;
        *(_DWORD *)(v2 + 40) = 0;
        if (CGPDFDictionaryGetInteger(dict, "Flags", &value))
          *(_DWORD *)(v2 + 40) = value;
        *(_QWORD *)(v2 + 32) = dict;
      }
      else
      {
        v5 = *(_DWORD *)(v1 + 40);
        if (v5)
        {
          if (v5 <= 0xE)
          {
            v6 = off_1E162FC40[v5 - 1];
            v7 = *(_OWORD *)(v6 + 24);
            *(_OWORD *)(v2 + 48) = *(_OWORD *)(v6 + 8);
            *(_OWORD *)(v2 + 64) = v7;
            *(_DWORD *)(v2 + 40) = *((_DWORD *)v6 + 10);
            goto LABEL_21;
          }
        }
        else
        {
          CFRelease((CFTypeRef)v2);
        }
        v2 = 0;
      }
    }
LABEL_21:
    while (1)
    {
      v8 = __ldaxr(v3);
      if (v8)
        break;
      if (!__stlxr(v2, v3))
        return v2;
    }
    __clrex();
    if (v2)
      CFRelease((CFTypeRef)v2);
    return v8;
  }
  return v2;
}

uint64_t CGPDFFontCreateToUnicodeCMap(uint64_t result)
{
  _BOOL4 Object;
  CGPDFObjectRef value;

  if (result)
  {
    value = 0;
    Object = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(result + 16), "ToUnicode", &value);
    result = 0;
    if (Object)
      return CGPDFCMapCreate((uint64_t)value);
  }
  return result;
}

uint64_t CGPDFFontGetToUnicodeCMap(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v2 = (pthread_mutex_t *)(a1 + 136);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 240);
  if (!v3)
  {
    v3 = CGPDFFontCreateToUnicodeCMap(a1);
    *(_QWORD *)(a1 + 240) = v3;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

unint64_t *CGPDFFontGetEncoding(unint64_t *result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  if (result)
  {
    v1 = (uint64_t)result;
    if (*((_DWORD *)result + 50) == 1)
    {
      return 0;
    }
    else
    {
      v2 = result + 27;
      result = (unint64_t *)atomic_load(result + 27);
      if (!result)
      {
        result = (unint64_t *)CGPDFEncodingCreate(v1);
        while (1)
        {
          v3 = __ldaxr(v2);
          if (v3)
            break;
          if (!__stlxr((unint64_t)result, v2))
            return result;
        }
        __clrex();
        CGPDFEncodingRelease((uint64_t)result);
        return (unint64_t *)v3;
      }
    }
  }
  return result;
}

uint64_t CGPDFFontGetDescendant(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

_QWORD *CGPDFFontGetCIDSystemInfo(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  CGPDFStringRef v4;
  char *v5;
  CGPDFStringRef v6;
  CGPDFStringRef v7;
  size_t v8;
  char *v10;
  CGPDFStringRef v11;
  CGPDFDictionaryRef dict;
  CGPDFStringRef v13;
  CGPDFStringRef value;
  CGPDFInteger v15;

  if (a1)
  {
    v1 = a1;
    while (*(_DWORD *)(v1 + 200) == 1)
    {
      v1 = *(_QWORD *)(v1 + 48);
      if (!v1)
        return 0;
    }
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
    v2 = *(_QWORD **)(v1 + 232);
    if (v2)
      goto LABEL_24;
    if ((*(_DWORD *)(v1 + 200) & 0xFFFFFFFE) == 6)
    {
      value = 0;
      v15 = 0;
      dict = 0;
      v13 = 0;
      v2 = 0;
      if (!CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(v1 + 16), "CIDSystemInfo", &dict))
      {
LABEL_23:
        *(_QWORD *)(v1 + 232) = v2;
LABEL_24:
        pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
        return v2;
      }
      if (CGPDFDictionaryGetString(dict, "Registry", &value)
        && CGPDFDictionaryGetString(dict, "Ordering", &v13)
        && CGPDFDictionaryGetInteger(dict, "Supplement", &v15))
      {
        v3 = 1;
        v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        v4 = value;
        if (value)
        {
          if (*((_QWORD *)value + 3))
            decrypt_string((uint64_t)value);
          v3 = *((_QWORD *)v4 + 9) + 1;
        }
        v5 = (char *)malloc_type_malloc(v3, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        *v2 = v5;
        v6 = value;
        if (*((_QWORD *)value + 3))
          decrypt_string((uint64_t)value);
        strcpy(v5, (const char *)v6 + 80);
        v7 = v13;
        if (v13)
        {
          if (*((_QWORD *)v13 + 3))
            decrypt_string((uint64_t)v13);
          v8 = *((_QWORD *)v7 + 9) + 1;
        }
        else
        {
          v8 = 1;
        }
        v10 = (char *)malloc_type_malloc(v8, 0x566C45D1uLL);
        __CFSetLastAllocationEventName();
        v2[1] = v10;
        v11 = v13;
        if (*((_QWORD *)v13 + 3))
          decrypt_string((uint64_t)v13);
        strcpy(v10, (const char *)v11 + 80);
        *((_DWORD *)v2 + 4) = v15;
        *((_DWORD *)v2 + 8) = 0;
        goto LABEL_23;
      }
    }
    v2 = 0;
    goto LABEL_23;
  }
  return 0;
}

unint64_t CGPDFFontGetCMap(unint64_t result)
{
  unint64_t v1;
  unint64_t *v2;
  _BOOL4 Object;
  unint64_t v4;
  char v5;
  CGPDFObjectRef value;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 200) == 1)
    {
      v2 = (unint64_t *)(result + 224);
      result = atomic_load((unint64_t *)(result + 224));
      if (!result)
      {
        value = 0;
        Object = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v1 + 16), "Encoding", &value);
        result = 0;
        if (Object)
        {
          result = CGPDFCMapCreate((uint64_t)value);
          while (1)
          {
            v4 = __ldaxr(v2);
            if (v4)
              break;
            if (!__stlxr(result, v2))
            {
              v5 = 1;
              goto LABEL_12;
            }
          }
          v5 = 0;
          __clrex();
LABEL_12:
          if ((v5 & 1) == 0)
          {
            if (result)
              CFRelease((CFTypeRef)result);
            return v4;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *CGPDFFontGetROSUnicodeCMap(char *result)
{
  const char **v1;
  size_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;

  if (result)
  {
    while (1)
    {
      if (!result[24])
        return 0;
      if (*((_DWORD *)result + 50) != 1)
        break;
      result = (char *)*((_QWORD *)result + 6);
      if (!result)
        return result;
    }
    result = (char *)CGPDFFontGetCIDSystemInfo((uint64_t)result);
    if (result)
    {
      v1 = (const char **)result;
      result = (char *)*((_QWORD *)result + 3);
      if (!result)
      {
        os_unfair_lock_lock((os_unfair_lock_t)v1 + 8);
        if (v1[3])
        {
LABEL_11:
          os_unfair_lock_unlock((os_unfair_lock_t)v1 + 8);
          return (char *)v1[3];
        }
        v2 = strlen(*v1);
        v3 = strlen(v1[1]);
        v4 = (char *)malloc_type_malloc(v2 + v3 + 35, 0x7BD994B3uLL);
        sprintf_l(v4, 0, "%s-%s-UCS2", *v1, v1[1]);
        v5 = CGPDFCMapCreateWithName((uint64_t)v4);
        v1[3] = (const char *)v5;
        if (v5)
        {
          free(v4);
          goto LABEL_11;
        }
        free(v4);
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 8);
        return 0;
      }
    }
  }
  return result;
}

uint64_t CGPDFFontGetCIDToGlyphMap(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (result)
  {
    v1 = result;
    while (1)
    {
      if (!*(_BYTE *)(v1 + 24))
        return 0;
      v2 = *(_DWORD *)(v1 + 200);
      if (v2 != 1)
        break;
      v1 = *(_QWORD *)(v1 + 48);
      if (!v1)
        return 0;
    }
    if (v2 != 7)
      return 0;
    result = *(_QWORD *)(v1 + 264);
    if (!result)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
      if (!*(_QWORD *)(v1 + 264) && !*(_BYTE *)(v1 + 256))
      {
        *(_QWORD *)(v1 + 264) = CGPDFCIDToGlyphMapCreate((char *)v1);
        *(_BYTE *)(v1 + 256) = 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
      return *(_QWORD *)(v1 + 264);
    }
  }
  return result;
}

BOOL CGPDFFontIsEmbedded(uint64_t a1)
{
  int v1;
  _BOOL8 v2;
  unint64_t font_stream_18376;
  int v5;
  int v6;

  if (!a1)
    return 0;
  while (1)
  {
    v1 = *(_DWORD *)(a1 + 200);
    if (v1 != 1)
      break;
    a1 = *(_QWORD *)(a1 + 48);
    if (!a1)
      return 0;
  }
  v2 = 0;
  switch(v1)
  {
    case 2:
    case 3:
      font_stream_18376 = get_font_stream_18376(a1, &v5);
      goto LABEL_10;
    case 4:
      font_stream_18376 = (unint64_t)get_font_stream(a1);
      goto LABEL_10;
    case 6:
      font_stream_18376 = get_font_stream_7680(a1, &v6);
      goto LABEL_10;
    case 7:
      font_stream_18376 = (unint64_t)get_font_stream_18624(a1);
LABEL_10:
      v2 = font_stream_18376 != 0;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t CGPDFFontGetFont(uint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  v1 = a1;
  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 136);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    if (!*(_BYTE *)(v1 + 280))
      load_font(v1);
    v1 = *(_QWORD *)(v1 + 288);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

void load_font(uint64_t a1)
{
  _QWORD *font_stream_18376;
  uint64_t v3;
  int v4;
  CGPDFDictionary *v5;
  size_t v6;
  void *v7;
  uint64_t Data;
  uint64_t v9;
  CGPDFInteger v10;
  __int128 v11;
  CGPDFInteger v12;
  CGDataProvider *v13;
  CGFont *v14;
  CGFontRef v15;
  CFDataRef v16;
  CFDataRef v17;
  CFDataRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGPDFStreamRef font_stream;
  uint64_t DataProvider;
  CGDataProvider *v25;
  _QWORD *v26;
  _QWORD *v27;
  CFDataRef v28;
  CFDataRef v29;
  uint64_t v30;
  int v31;
  const void *font_stream_7680;
  uint64_t v33;
  uint64_t (*v34)(_QWORD);
  const void *v35;
  CGPDFStreamRef font_stream_18624;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  const void *v39;
  uint64_t v40;
  CGFont *v41;
  CFDataRef v42;
  CFDataRef v43;
  _QWORD *TrueTypeOrCIDType2;
  char *v45;
  char *v46;
  const void *Font;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  CFDataRef v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  CGFontRef v55;
  const char *v56;
  CFDataRef v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t FontDescriptor;
  unint64_t Style;
  uint64_t v62;
  unint64_t *Encoding;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  CGFontRef v68;
  int v69;
  const char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  int v74;
  CGPDFInteger v75;
  int v76;
  CGPDFInteger value;

  if (!*(_BYTE *)(a1 + 280))
  {
    switch(*(_DWORD *)(a1 + 200))
    {
      case 1:
        v19 = *(_QWORD *)(a1 + 48);
        if (v19)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v19 + 136));
          v20 = *(_QWORD *)(a1 + 48);
          if (!*(_QWORD *)(v20 + 240))
          {
            v21 = CGPDFFontCreateToUnicodeCMap(a1);
            v20 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(v20 + 240) = v21;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(v20 + 136));
          v22 = *(_QWORD *)(a1 + 48);
        }
        else
        {
          v22 = 0;
        }
        Font = (const void *)CGPDFFontGetFont(v22);
        if (!Font)
        {
          *(_QWORD *)(a1 + 288) = 0;
          goto LABEL_98;
        }
        v48 = (uint64_t)Font;
        CFRetain(Font);
        *(_QWORD *)(a1 + 288) = v48;
        v49 = *(const void **)(*(_QWORD *)(a1 + 48) + 240);
        if (!v49)
          goto LABEL_98;
        v50 = v48;
        goto LABEL_97;
      case 2:
      case 3:
        value = 0;
        v75 = 0;
        v74 = 0;
        font_stream_18376 = (_QWORD *)get_font_stream_18376(a1, &v74);
        if (!font_stream_18376)
          goto LABEL_53;
        v3 = (uint64_t)font_stream_18376;
        v4 = v74;
        if (v74 == 2)
        {
          v5 = (CGPDFDictionary *)font_stream_18376[6];
          if (CGPDFDictionaryGetInteger(v5, "Length1", &value)
            && CGPDFDictionaryGetInteger(v5, "Length2", &v75)
            && !((unint64_t)value >> 62)
            && (v75 & 0x8000000000000000) == 0
            && !((unint64_t)v75 >> 62))
          {
            v6 = value + v75 + 540;
            v7 = malloc_type_malloc(v6, 0x566C45D1uLL);
            __CFSetLastAllocationEventName();
            if (v7)
            {
              Data = CGPDFStreamGetData(v3, (uint64_t)v7, v75 + value);
              if (Data == v75 + value)
              {
                v9 = 0;
                v10 = (CGPDFInteger)v7 + value + v75;
                *(_QWORD *)&v11 = 0x3030303030303030;
                *((_QWORD *)&v11 + 1) = 0x3030303030303030;
                do
                {
                  v12 = v10 + v9;
                  *(_OWORD *)v12 = v11;
                  *(_OWORD *)(v12 + 16) = v11;
                  *(_BYTE *)(v12 + 32) = 10;
                  v9 += 33;
                }
                while (v9 != 528);
                *(_DWORD *)(v10 + 536) = 174813793;
                *(_QWORD *)(v10 + 528) = *(_QWORD *)"cleartomark\n";
                v13 = CGDataProviderCreateWithData(0, v7, v6, (CGDataProviderReleaseDataCallback)type1_free);
                v14 = (CGFont *)CGFontCreateWithDataProviderAndData((uint64_t)v13, 0);
                if (v14)
                {
                  v15 = v14;
                  v16 = CGDataProviderCopyData(v13);
                  if (v16)
                  {
                    v17 = v16;
                    CGFontSetIntProperty((uint64_t)v15, 2);
                    CGFontSetProperty((uint64_t)v15, CFSTR("com.apple.CoreGraphics.CGPDFFontData"), v17);
                    v18 = v17;
LABEL_48:
                    CFRelease(v18);
                    goto LABEL_49;
                  }
                  goto LABEL_49;
                }
                CGDataProviderRelease(v13);
                if (!a1)
                  goto LABEL_94;
              }
              else
              {
                free(v7);
              }
            }
          }
        }
        else
        {
          v76 = 0;
          v40 = CGPDFStreamCreateDataProvider(font_stream_18376, &v76);
          v13 = (CGDataProvider *)v40;
          if (v40)
          {
            if (!v76)
            {
              v41 = (CGFont *)CGFontCreateWithDataProviderAndData(v40, 0);
              if (v41)
              {
                v15 = v41;
                v42 = CGDataProviderCopyData(v13);
                if (v42)
                {
                  v43 = v42;
                  CGFontSetIntProperty((uint64_t)v15, v4);
                  CGFontSetProperty((uint64_t)v15, CFSTR("com.apple.CoreGraphics.CGPDFFontData"), v43);
                  v18 = v43;
                  goto LABEL_48;
                }
LABEL_49:
                CGDataProviderRelease(v13);
                goto LABEL_95;
              }
            }
          }
          CGDataProviderRelease(v13);
        }
LABEL_53:
        v45 = *(char **)(a1 + 32);
        if (!v45)
        {
LABEL_94:
          v15 = 0;
LABEL_95:
          *(_QWORD *)(a1 + 288) = v15;
          v58 = CGPDFFontCreateToUnicodeCMap(a1);
          *(_QWORD *)(a1 + 240) = v58;
          if (v58)
          {
            v49 = (const void *)v58;
            v50 = *(_QWORD *)(a1 + 288);
LABEL_97:
            CGFontSetProperty(v50, CFSTR("com.apple.CoreGraphics.CGPDFFontToUnicodeCMap"), v49);
          }
LABEL_98:
          if (*(_QWORD *)(a1 + 288))
            goto LABEL_137;
          if ((*(_DWORD *)(a1 + 200) - 2) > 2)
            goto LABEL_109;
          v59 = malloc_type_calloc(1uLL, 0x1228uLL, 0x33BCE901uLL);
          __CFSetLastAllocationEventName();
          if (!v59)
            goto LABEL_109;
          *v59 = a1;
          FontDescriptor = CGPDFFontGetFontDescriptor(a1);
          Style = CGPDFFontDescriptorGetStyle(FontDescriptor);
          pthread_once(&choose_font_for_style_once, (void (*)(void))create_agars);
          if (Style)
          {
            if (*(_BYTE *)(Style + 18))
            {
              v62 = agar_TimesLTMM;
              if (agar_TimesLTMM)
                goto LABEL_104;
            }
            else
            {
              v62 = agar_HelveticaLTMM;
              if (agar_HelveticaLTMM)
              {
LABEL_104:
                v59[3] = v62;
                *((_DWORD *)v59 + 2) = (int)*(double *)Style;
                *((double *)v59 + 2) = *(double *)(Style + 8) * -3.14159265 / 180.0;
                Encoding = CGPDFFontGetEncoding((unint64_t *)*v59);
                if (CGPDFEncodingGetGlyphVectorWithFont((size_t)Encoding, *(_QWORD *)(v59[3] + 64), *(unsigned __int8 *)(Style + 20), (_OWORD *)v59 + 2))
                {
                  *((_DWORD *)v59 + 1160) = 0;
                  *(_QWORD *)(a1 + 296) = v59;
LABEL_137:
                  *(_BYTE *)(a1 + 280) = 1;
                  return;
                }
                goto LABEL_108;
              }
            }
          }
          v59[3] = 0;
LABEL_108:
          CGPDFFontMutatorRelease((char *)v59);
LABEL_109:
          *(_QWORD *)(a1 + 296) = 0;
          v64 = CGPDFFontGetFontDescriptor(a1);
          v65 = CGPDFFontDescriptorGetStyle(v64);
          if (v65)
          {
            v66 = v65;
            v67 = *(const char **)(a1 + 32);
            if (v67 && !strcmp(v67, "LucidaConsole") || *(_BYTE *)(v66 + 19))
            {
              if (*(_BYTE *)(v66 + 17) || *(double *)v66 > 78.0)
              {
                v69 = *(unsigned __int8 *)(v66 + 16);
                v70 = "Courier-BoldOblique";
                v71 = "Courier-Bold";
              }
              else
              {
                v69 = *(unsigned __int8 *)(v66 + 16);
                v70 = "Courier-Oblique";
                v71 = "Courier";
              }
            }
            else if (*(_BYTE *)(v66 + 18))
            {
              if (*(_BYTE *)(v66 + 17) || *(double *)v66 > 111.0)
              {
                v69 = *(unsigned __int8 *)(v66 + 16);
                v70 = "Times-BoldItalic";
                v71 = "Times-Bold";
              }
              else
              {
                v69 = *(unsigned __int8 *)(v66 + 16);
                v70 = "Times-Italic";
                v71 = "Times-Roman";
              }
            }
            else if (*(_BYTE *)(v66 + 17) || *(double *)v66 > 114.0)
            {
              v69 = *(unsigned __int8 *)(v66 + 16);
              v70 = "Helvetica-BoldOblique";
              v71 = "Helvetica-Bold";
            }
            else
            {
              v69 = *(unsigned __int8 *)(v66 + 16);
              v70 = "Helvetica-Oblique";
              v71 = "Helvetica";
            }
            if (v69)
              v72 = (char *)v70;
            else
              v72 = (char *)v71;
            v68 = CGFontCreateWithName(v72);
            if (v68)
            {
              if (*(_DWORD *)(a1 + 200) == 4)
                v73 = "TrueType";
              else
                v73 = "Type1";
            }
          }
          else
          {
            v68 = 0;
          }
          *(_QWORD *)(a1 + 288) = v68;
          *(_BYTE *)(a1 + 304) = 1;
          goto LABEL_137;
        }
        value = 0;
        v15 = 0;
        if (!CGPDFFontNameHasAlias(v45, (char **)&value))
          goto LABEL_95;
        v15 = CGFontCreateWithName((char *)value);
        if (!v15)
          goto LABEL_58;
        *(_DWORD *)(a1 + 200) = 4;
        v46 = (char *)value;
        if (strcmp(v45, (const char *)value))
        {
LABEL_58:
          v46 = (char *)value;
        }
        free(v46);
        goto LABEL_95;
      case 4:
        font_stream = get_font_stream(a1);
        if (!font_stream)
          goto LABEL_51;
        LODWORD(value) = 0;
        DataProvider = CGPDFStreamCreateDataProvider(font_stream, (int *)&value);
        v25 = (CGDataProvider *)DataProvider;
        if (!DataProvider || (_DWORD)value || (v26 = CGFontCreateWithDataProviderAndData(DataProvider, 0)) == 0)
        {
          CGDataProviderRelease(v25);
LABEL_51:
          TrueTypeOrCIDType2 = CGPDFFontFindTrueTypeOrCIDType2(a1);
          goto LABEL_90;
        }
        v27 = v26;
        v28 = CGDataProviderCopyData(v25);
        if (!v28)
          goto LABEL_86;
        v29 = v28;
        v30 = (uint64_t)v27;
        v31 = 1;
        goto LABEL_85;
      case 5:
        goto LABEL_98;
      case 6:
        LODWORD(value) = 0;
        LODWORD(v75) = 0;
        font_stream_7680 = (const void *)get_font_stream_7680(a1, (int *)&value);
        if (!font_stream_7680)
          goto LABEL_70;
        v25 = (CGDataProvider *)CGPDFStreamCreateDataProvider(font_stream_7680, (int *)&v75);
        if (v25 && !(_DWORD)v75)
        {
          v33 = CGPDFFontGetToUnicodeCMap(a1);
          if (v33 && cmap_vtable && (v34 = *(uint64_t (**)(_QWORD))(cmap_vtable + 80)) != 0)
          {
            v35 = (const void *)v34(*(_QWORD *)(v33 + 16));
            v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, (uint64_t)v35);
            if (v35)
              CFRelease(v35);
          }
          else
          {
            v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, 0);
          }
          if (v27)
          {
            v51 = CGDataProviderCopyData(v25);
            if (!v51)
              goto LABEL_86;
            v29 = v51;
            v31 = value;
            v30 = (uint64_t)v27;
            goto LABEL_85;
          }
        }
        CGDataProviderRelease(v25);
LABEL_70:
        v52 = *(char **)(a1 + 32);
        if (!v52)
          goto LABEL_89;
        v53 = 0;
        while (v52[v53] - 91 >= 0xFFFFFFE6)
        {
          if (++v53 == 6)
          {
            v54 = 7;
            if (v52[6] != 43)
              v54 = 0;
            v52 += v54;
            break;
          }
        }
        v55 = CGFontCreateWithName(v52);
        if (!v55)
          goto LABEL_89;
        v27 = v55;
        v56 = (const char *)(*(uint64_t (**)(_QWORD))(*((_QWORD *)v55 + 2) + 144))(*((_QWORD *)v55 + 14));
        if (!strcmp(v56, ".PhoneFallback") || (CGPDFFontHasMatchingROS(a1, v27) & 1) == 0)
        {
          CFRelease(v27);
          goto LABEL_89;
        }
LABEL_91:
        *(_QWORD *)(a1 + 288) = v27;
        goto LABEL_98;
      case 7:
        font_stream_18624 = get_font_stream_18624(a1);
        if (!font_stream_18624)
          goto LABEL_88;
        LODWORD(value) = 0;
        v25 = (CGDataProvider *)CGPDFStreamCreateDataProvider(font_stream_18624, (int *)&value);
        if (!v25 || (_DWORD)value)
          goto LABEL_87;
        v37 = CGPDFFontGetToUnicodeCMap(a1);
        if (v37 && cmap_vtable && (v38 = *(uint64_t (**)(_QWORD))(cmap_vtable + 80)) != 0)
        {
          v39 = (const void *)v38(*(_QWORD *)(v37 + 16));
          v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, (uint64_t)v39);
          if (v39)
            CFRelease(v39);
        }
        else
        {
          v27 = CGFontCreateWithDataProviderAndData((uint64_t)v25, 0);
        }
        if (v27)
        {
          v57 = CGDataProviderCopyData(v25);
          if (v57)
          {
            v29 = v57;
            v30 = (uint64_t)v27;
            v31 = 5;
LABEL_85:
            CGFontSetIntProperty(v30, v31);
            CGFontSetProperty((uint64_t)v27, CFSTR("com.apple.CoreGraphics.CGPDFFontData"), v29);
            CFRelease(v29);
          }
LABEL_86:
          CGDataProviderRelease(v25);
        }
        else
        {
LABEL_87:
          CGDataProviderRelease(v25);
LABEL_88:
          v27 = CGPDFFontFindTrueTypeOrCIDType2(a1);
          if (!v27)
          {
LABEL_89:
            TrueTypeOrCIDType2 = CGPDFFontMatchCID(a1);
LABEL_90:
            v27 = TrueTypeOrCIDType2;
          }
        }
        goto LABEL_91;
      default:
        abort();
    }
  }
}

uint64_t CGPDFFontGetMutator(uint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  v1 = a1;
  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 136);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    if (!*(_BYTE *)(v1 + 280))
      load_font(v1);
    v1 = *(_QWORD *)(v1 + 296);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

_QWORD *CGPDFFontGetProcedures(uint64_t a1)
{
  _QWORD *v2;
  CGPDFDictionary *v3;
  unint64_t *Encoding;
  uint64_t v5;
  unint64_t i;
  const char *NameForIndex;
  CGPDFStreamRef v9;
  CGPDFDictionaryRef value;

  if (!a1 || *(_DWORD *)(a1 + 200) != 5)
    return 0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 272);
  if (!v2)
  {
    v3 = *(CGPDFDictionary **)(a1 + 16);
    value = 0;
    if (CGPDFDictionaryGetDictionary(v3, "CharProcs", &value))
    {
      Encoding = CGPDFFontGetEncoding((unint64_t *)a1);
      if (Encoding)
      {
        v5 = (uint64_t)Encoding;
        v2 = malloc_type_calloc(1uLL, 0x800uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        if (v2)
        {
          for (i = 0; i != 256; ++i)
          {
            NameForIndex = (const char *)CGPDFEncodingGetNameForIndex(v5, i);
            v9 = 0;
            if (NameForIndex && CGPDFDictionaryGetStream(value, NameForIndex, &v9))
              v2[i] = v9;
          }
          *(_QWORD *)(a1 + 272) = v2;
          goto LABEL_4;
        }
      }
      else
      {
      }
    }
    else
    {
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
    return 0;
  }
LABEL_4:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  return v2;
}

_QWORD *PDFFunctionSetCreate(uint64_t a1)
{
  _QWORD *v2;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
    *v2 = a1;
  return v2;
}

void *PDFFunctionSetAddFunctionWithRange(uint64_t *a1, uint64_t a2, unint64_t a3, char a4)
{
  void *result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void **v15;
  void *value;

  result = 0;
  if (a1 && a2)
  {
    if (!a1[1])
      a1[1] = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callbacks_3701);
    if (*(_QWORD *)(a2 + 48) > a3
      && (v9 = *a1, v10 = malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL), __CFSetLastAllocationEventName(), v10))
    {
      *(_DWORD *)v10 = 1;
      v10[1] = v9;
      *((_DWORD *)v10 + 6) = *(_DWORD *)(a2 + 16);
      v10[4] = 0;
      v10[5] = a3;
      *((_BYTE *)v10 + 56) = a4;
      v11 = *(uint64_t (**)(_QWORD))(a2 + 88);
      if (v11 && (v12 = v11(*(_QWORD *)(a2 + 24))) != 0)
      {
        v13 = (const void *)v12;
        if (v9)
          v14 = *(_QWORD *)(v9 + 40);
        else
          v14 = 0;
        v10[6] = PDFMetaSetAddDictionary(v14, v13);
        CFRelease(v13);
        v10[2] = 0;
        *((_BYTE *)v10 + 57) = 1;
      }
      else
      {
        CFRetain((CFTypeRef)a2);
        v10[2] = a2;
        v10[6] = PDFXRefTableAddObject(*(_QWORD **)(v10[1] + 464));
      }
      value = 0;
      if (!CFSetGetValueIfPresent((CFSetRef)a1[1], v10, (const void **)&value))
      {
        CFSetAddValue((CFMutableSetRef)a1[1], v10);
        value = v10;
      }
      PDFShadingRelease(v10);
      v15 = (const void **)a1[2];
      if (!v15)
      {
        v15 = CGOrderedSetCreate();
        a1[2] = (uint64_t)v15;
      }
      CGOrderedSetAddValue((CFSetRef *)v15, value);
      return value;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *function_retain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void function_release(int a1, _QWORD *a2)
{
  PDFShadingRelease(a2);
}

BOOL function_equal(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
  {
    return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  return 0;
}

uint64_t function_hash(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

BOOL PDFFunctionSetEmitDefinitions(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;
  const __CFArray *v3;
  char context;
  CFRange v5;

  context = 0;
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      do
      {
        *(_QWORD *)(v1 + 16) = 0;
        v3 = *(const __CFArray **)(v2 + 8);
        v5.length = CFArrayGetCount(v3);
        v5.location = 0;
        CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)emit_function_definition, &context);
        CGOrderedSetRelease((const void **)v2);
        v2 = *(_QWORD *)(v1 + 16);
      }
      while (v2);
      return context != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void emit_function_definition(uint64_t a1, _BYTE *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _OWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x2_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x16_t *v41;
  unint64_t v42;
  void *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t *v99;
  _BYTE *v100;
  unint64_t v101[3];
  uint64_t *v102;
  uint64_t v103;
  _OWORD *v104;
  void *v105;
  void *v106;

  if (!*(_BYTE *)(a1 + 57))
  {
    v4 = PDFStreamCreateWithObjectNumber(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 48));
    PDFDocumentBeginObject(*v4, v4[1], v5, v6, v7, v8, v9, v10);
    PDFDocumentPrintf(*v4, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v91);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/FunctionType 0", v17, v18, v19, v20, v21, v22, v92);
    v23 = *(_QWORD **)(a1 + 16);
    v100 = a2;
    if (v23)
    {
      v24 = v23[4];
      v25 = v23[6];
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v103 = v25;
    v26 = v24 + v24 * (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
    if (v26 <= 0x100)
      v27 = 0x1000 / v26;
    else
      v27 = 16;
    v101[0] = v27;
    v101[1] = 8;
    v101[2] = v24;
    if (v23)
    {
      v28 = (uint64_t *)v23[5];
      v102 = v28;
      v29 = (_OWORD *)v23[7];
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v102 = 0;
    }
    v104 = v29;
    v30 = malloc_type_malloc(8 * v24, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    v105 = v30;
    v31 = malloc_type_malloc(8 * v25, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    v106 = v31;
    if (v28)
    {
      v99 = 0;
    }
    else
    {
      v28 = (uint64_t *)malloc_type_malloc(16 * v24, 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (v24)
      {
        v38 = vdup_n_s32(*(_BYTE *)(a1 + 56) == 0);
        v39.i64[0] = v38.u32[0];
        v39.i64[1] = v38.u32[1];
        v40 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v39, 0x3FuLL)), (int8x16_t)xmmword_185004BE0, (int8x16_t)xmmword_185004A20);
        v41 = (int8x16_t *)v28;
        v42 = v24;
        do
        {
          *v41++ = v40;
          --v42;
        }
        while (v42);
      }
      v102 = v28;
      v99 = v28;
    }
    v43 = v30;
    if (v29)
    {
      v98 = 0;
    }
    else
    {
      v29 = malloc_type_malloc(16 * v25, 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (v25)
      {
        v44 = v29;
        do
        {
          *v44++ = xmmword_185004BF0;
          --v25;
        }
        while (v25);
      }
      evaluate_range(a1, v24 - 1, v101, (uint64_t)v29);
      v104 = v29;
      v98 = v29;
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BitsPerSample %d", v32, v33, v34, v35, v36, v37, 8);
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Size [", v45, v46, v47, v48, v49, v50, v93);
    if (v24)
    {
      v57 = v24;
      do
      {
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%d", v51, v52, v53, v54, v55, v56, v27);
        --v57;
      }
      while (v57);
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v51, v52, v53, v54, v55, v56, v94);
    if (v24 && v28)
    {
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Domain [", v58, v59, v60, v61, v62, v63, v95);
      v70 = 2 * v24;
      if (2 * v24)
      {
        do
        {
          v71 = *v28++;
          PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%f", v64, v65, v66, v67, v68, v69, v71);
          --v70;
        }
        while (v70);
      }
      PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v64, v65, v66, v67, v68, v69, v96);
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Range [", v58, v59, v60, v61, v62, v63, v95);
    v78 = *(_QWORD *)(a1 + 32);
    if (v78 <= *(_QWORD *)(a1 + 40))
    {
      v79 = (double *)&v29[v78] + 1;
      do
      {
        v80 = *(v79 - 1);
        if (fabs(v80) == INFINITY)
          v80 = -2.0;
        v81 = *v79;
        v79 += 2;
        v82 = v81;
        if (fabs(v81) == INFINITY)
          v83 = 3.0;
        else
          v83 = v82;
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%f", v72, v73, v74, v75, v76, v77, *(uint64_t *)&v80);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%f", v84, v85, v86, v87, v88, v89, *(uint64_t *)&v83);
        ++v78;
      }
      while (v78 <= *(_QWORD *)(a1 + 40));
    }
    PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v72, v73, v74, v75, v76, v77, v97);
    PDFStreamBeginData((CGDataConsumerRef)v4);
    emit_samples((uint64_t *)a1, (uint64_t)v4, v24 - 1, v101);
    PDFStreamEndData(v4);
    free(v31);
    free(v43);
    free(v99);
    free(v98);
    PDFStreamEnd((CFDataRef *)v4);
    PDFStreamRelease((uint64_t)v4);
    v90 = *(const void **)(a1 + 16);
    if (v90)
      CFRelease(v90);
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 57) = 1;
    a2 = v100;
  }
  *a2 = 1;
}

_BYTE *ToUnicode::write_epilog(ToUnicode *this, CGDataConsumer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  char v30;
  char v31;

  CGDataConsumerPrintf(this, "endcmap\n", a3, a4, a5, a6, a7, a8, v29);
  CGDataConsumerPrintf(this, "CMapName currentdict /CMap defineresource pop\n", v10, v11, v12, v13, v14, v15, v30);
  CGDataConsumerPrintf(this, "end\n", v16, v17, v18, v19, v20, v21, v31);
  return CGDataConsumerPrintf(this, "end\n", v22, v23, v24, v25, v26, v27, a9);
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<ToUnicode::bfrange>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(6 * a1);
}

void ToUnicode::write<std::set<unsigned short>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __CFData *Mutable;
  __CFData *v7;
  CGDataConsumerRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ToUnicode *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  CGDataConsumer *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *Property;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unsigned int CIDsForGlyphs;
  uint64_t (*v141)(_QWORD, _QWORD);
  uint64_t UnicharsForGlyph;
  unsigned __int16 v143;
  uint64_t (*v144)(_QWORD, _QWORD);
  unsigned __int16 *v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  BOOL v174;
  uint64_t *v175;
  char *v176;
  char *v177;
  unint64_t v178;
  unsigned __int16 v179;
  int v180;
  int v181;
  uint64_t *v182;
  uint64_t *v183;
  __int16 v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  int v189;
  __int16 v190;
  char *v191;
  char *v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const UInt8 *BytePtr;
  CFIndex Length;
  char v216;
  char v217;
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  char v234;
  char v235;
  char v236;
  char v237;
  char v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const __CFData *v243;
  unsigned __int16 v244;
  unsigned __int16 v245;
  unsigned __int16 v246;
  void *__p;
  _BYTE *v248;
  uint64_t *v249;
  _QWORD *v250[2];

  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
    return;
  v7 = Mutable;
  v8 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v8)
  {
LABEL_91:
    CFRelease(v7);
    return;
  }
  v15 = v8;
  CGDataConsumerPrintf(v8, "/CIDInit /ProcSet findresource begin\n", v9, v10, v11, v12, v13, v14, v216);
  CGDataConsumerPrintf(v15, "12 dict begin\n", v16, v17, v18, v19, v20, v21, v217);
  CGDataConsumerPrintf(v15, "begincmap\n", v22, v23, v24, v25, v26, v27, v218);
  CGDataConsumerPrintf(v15, "/CIDSystemInfo <<\n", v28, v29, v30, v31, v32, v33, v219);
  CGDataConsumerPrintf(v15, "  /Registry (Adobe)\n", v34, v35, v36, v37, v38, v39, v220);
  CGDataConsumerPrintf(v15, "  /Ordering (UCS)\n", v40, v41, v42, v43, v44, v45, v221);
  CGDataConsumerPrintf(v15, "  /Supplement 0\n", v46, v47, v48, v49, v50, v51, v222);
  CGDataConsumerPrintf(v15, ">> def\n", v52, v53, v54, v55, v56, v57, v223);
  CGDataConsumerPrintf(v15, "/CMapName /Adobe-Identity-UCS def\n", v58, v59, v60, v61, v62, v63, v224);
  CGDataConsumerPrintf(v15, "/CMapType 2 def\n", v64, v65, v66, v67, v68, v69, v225);
  CGDataConsumerPrintf(v15, "1 begincodespacerange\n", v70, v71, v72, v73, v74, v75, v226);
  CGDataConsumerPrintf(v15, "<", v76, v77, v78, v79, v80, v81, v227);
  CGDataConsumerPrintf(v15, "00", v82, v83, v84, v85, v86, v87, v228);
  CGDataConsumerPrintf(v15, "00", v88, v89, v90, v91, v92, v93, v229);
  CGDataConsumerPrintf(v15, "><", v94, v95, v96, v97, v98, v99, v230);
  CGDataConsumerPrintf(v15, "FF", v100, v101, v102, v103, v104, v105, v231);
  CGDataConsumerPrintf(v15, "FF", v106, v107, v108, v109, v110, v111, v232);
  CGDataConsumerPrintf(v15, ">\n", v112, v113, v114, v115, v116, v117, v233);
  CGDataConsumerPrintf(v15, "endcodespacerange\n", v118, v119, v120, v121, v122, v123, v234);
  v250[0] = 0;
  v250[1] = 0;
  v249 = (uint64_t *)v250;
  v124 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  if (v124)
  {
    get_unimap(v124);
    v125 = 256;
  }
  else
  {
    v125 = 0;
  }
  std::vector<unsigned short>::vector(&__p, v125);
  v133 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  v242 = a2;
  v243 = v7;
  v241 = a1;
  if (v133 && (v134 = atomic_load(v133 + 11)) != 0)
    Property = CGPropertiesGetProperty(v134, CFSTR("com.apple.CoreGraphics.CGPDFFontToUnicodeCMap"));
  else
    Property = 0;
  v138 = (_QWORD *)*a3;
  v137 = a3 + 1;
  v136 = v138;
  if (v138 == v137)
  {
LABEL_45:
    v175 = v249;
    if (v249 == (uint64_t *)v250)
    {
      v176 = 0;
      v177 = 0;
      v191 = 0;
    }
    else
    {
      v176 = 0;
      v177 = 0;
      v178 = 0;
      do
      {
        v179 = 0;
        v180 = *((unsigned __int16 *)v175 + 13);
        v181 = *((unsigned __int16 *)v175 + 14);
        while (v180 + v179 == *((unsigned __int16 *)v175 + 13) && v181 + v179 == *((unsigned __int16 *)v175 + 14))
        {
          v182 = (uint64_t *)v175[1];
          if (v182)
          {
            do
            {
              v183 = v182;
              v182 = (uint64_t *)*v182;
            }
            while (v182);
          }
          else
          {
            do
            {
              v183 = (uint64_t *)v175[2];
              v174 = *v183 == (_QWORD)v175;
              v175 = v183;
            }
            while (!v174);
          }
          ++v179;
          v175 = v183;
          if (v183 == (uint64_t *)v250)
          {
            v175 = (uint64_t *)v250;
            break;
          }
        }
        v184 = v179 + v180 - 1;
        if ((unint64_t)v177 >= v178)
        {
          v185 = 0xAAAAAAAAAAAAAAABLL * ((v177 - v176) >> 1) + 1;
          if (v185 > 0x2AAAAAAAAAAAAAAALL)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          if (0x5555555555555556 * ((uint64_t)(v178 - (_QWORD)v176) >> 1) > v185)
            v185 = 0x5555555555555556 * ((uint64_t)(v178 - (_QWORD)v176) >> 1);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (_QWORD)v176) >> 1) >= 0x1555555555555555)
            v186 = 0x2AAAAAAAAAAAAAAALL;
          else
            v186 = v185;
          if (v186)
            v186 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<ToUnicode::bfrange>>(v186);
          else
            v126 = 0;
          v187 = (char *)(v186 + 2 * ((v177 - v176) >> 1));
          *(_WORD *)v187 = v180;
          *((_WORD *)v187 + 1) = v184;
          *((_WORD *)v187 + 2) = v181;
          v188 = v187;
          while (v177 != v176)
          {
            v189 = *(_DWORD *)(v177 - 6);
            v177 -= 6;
            v190 = *((_WORD *)v177 + 2);
            *(_DWORD *)(v188 - 6) = v189;
            v188 -= 6;
            *((_WORD *)v188 + 2) = v190;
          }
          v178 = v186 + 6 * (_QWORD)v126;
          v177 = v187 + 6;
          if (v176)
            operator delete(v176);
          v176 = v188;
        }
        else
        {
          *(_WORD *)v177 = v180;
          *((_WORD *)v177 + 1) = v184;
          *((_WORD *)v177 + 2) = v181;
          v177 += 6;
        }
      }
      while (v175 != (uint64_t *)v250);
      v191 = v176;
    }
    while (v177 != v191)
    {
      v192 = v191;
      v193 = 0;
      do
      {
        v194 = v191;
        v191 += 6;
        if (v193 > 0x30)
          break;
        ++v193;
      }
      while (v191 != v177);
      if (v192 != v191)
      {
        CGDataConsumerPrintf(v15, "%d beginbfrange\n", (uint64_t)v127, v128, v129, v130, v131, v132, -85 * ((v191 - v192) >> 1));
        do
        {
          CGDataConsumerPrintf(v15, "<%0*x><%0*x><%04x>\n", v195, v196, v197, v198, v199, v200, 4);
          v174 = v192 == v194;
          v192 += 6;
        }
        while (!v174);
        CGDataConsumerPrintf(v15, "endbfrange\n", v195, v196, v197, v198, v199, v200, v239);
      }
    }
    if (v176)
      operator delete(v176);
    ToUnicode::write_epilog(v15, v126, (uint64_t)v127, v128, v129, v130, v131, v132, v235);
    v7 = v243;
    if (__p)
    {
      v248 = __p;
      operator delete(__p);
    }
    std::__tree<unsigned long>::destroy(v250[0]);
    CGDataConsumerClose((uint64_t)v15);
    CFRelease(v15);
    v201 = PDFStreamCreateWithObjectNumber(**(_QWORD **)(*(_QWORD *)v241 + 8), v242);
    PDFDocumentBeginObject(*v201, v201[1], v202, v203, v204, v205, v206, v207);
    PDFDocumentPrintf(*v201, (uint64_t)"<<", v208, v209, v210, v211, v212, v213, v240);
    PDFStreamBeginData((CGDataConsumerRef)v201);
    BytePtr = CFDataGetBytePtr(v243);
    Length = CFDataGetLength(v243);
    CGDataConsumerPutBytes(v201[3], (uint64_t)BytePtr, Length);
    PDFStreamEndData(v201);
    PDFStreamEnd((CFDataRef *)v201);
    PDFStreamRelease((uint64_t)v201);
    goto LABEL_91;
  }
  while (1)
  {
    v139 = *((unsigned __int16 *)v136 + 13);
    v246 = *((_WORD *)v136 + 13);
    if (Property)
    {
      v244 = 0;
      CIDsForGlyphs = CGFontGetCIDsForGlyphs(v133, &v246, 1, &v244);
      v127 = __p;
      if (CIDsForGlyphs)
      {
        if (v248 == __p)
          goto LABEL_93;
        if (cmap_vtable && (v141 = *(uint64_t (**)(_QWORD, _QWORD))(cmap_vtable + 64)) != 0)
          UnicharsForGlyph = v141(Property[2], v244);
        else
          UnicharsForGlyph = 0;
        v145 = &v244;
      }
      else
      {
        if (v248 == __p)
          goto LABEL_93;
        if (cmap_vtable && (v144 = *(uint64_t (**)(_QWORD, _QWORD))(cmap_vtable + 64)) != 0)
          UnicharsForGlyph = v144(Property[2], v246);
        else
          UnicharsForGlyph = 0;
        v145 = &v246;
      }
      v143 = *v145;
    }
    else
    {
      if (v248 == __p)
        goto LABEL_93;
      UnicharsForGlyph = CGFontGetUnicharsForGlyph((uint64_t)v133, v139, __p);
      v143 = v246;
    }
    v245 = v143;
    if (!UnicharsForGlyph)
      goto LABEL_39;
    if (UnicharsForGlyph != 1)
      break;
    if (v248 == __p)
      goto LABEL_93;
    v146 = *(_WORD *)__p;
    *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v249, v143, &v245)+ 14) = v146;
LABEL_39:
    v172 = (_QWORD *)v136[1];
    if (v172)
    {
      do
      {
        v173 = v172;
        v172 = (_QWORD *)*v172;
      }
      while (v172);
    }
    else
    {
      do
      {
        v173 = (_QWORD *)v136[2];
        v174 = *v173 == (_QWORD)v136;
        v136 = v173;
      }
      while (!v174);
    }
    v136 = v173;
    if (v173 == v137)
      goto LABEL_45;
  }
  CGDataConsumerPrintf(v15, "1 beginbfchar\n", (uint64_t)v127, v128, v129, v130, v131, v132, v235);
  CGDataConsumerPrintf(v15, "<%0*x>", v147, v148, v149, v150, v151, v152, 4);
  CGDataConsumerPrintf(v15, "<", v153, v154, v155, v156, v157, v158, v236);
  v165 = 0;
  while (1)
  {
    if (v165)
      CGDataConsumerPrintf(v15, " ", v159, v160, v161, v162, v163, v164, v237);
    if (v165 >= (v248 - (_BYTE *)__p) >> 1)
      break;
    CGDataConsumerPrintf(v15, "%04x", v159, v160, v161, v162, v163, v164, *((_WORD *)__p + v165++));
    if (UnicharsForGlyph == v165)
    {
      CGDataConsumerPrintf(v15, ">\n", v159, v160, v161, v162, v163, v164, v237);
      CGDataConsumerPrintf(v15, "endbfchar\n", v166, v167, v168, v169, v170, v171, v238);
      goto LABEL_39;
    }
  }
LABEL_93:
  __break(1u);
}

void sub_184B55384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  std::__tree<unsigned long>::destroy(a23);
  _Unwind_Resume(a1);
}

void ToUnicode::write<std::vector<unsigned short>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __CFData *Mutable;
  __CFData *v6;
  CGDataConsumerRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ToUnicode *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  CGDataConsumer *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *Property;
  unint64_t i;
  void *v123;
  uint64_t (*v124)(_QWORD, _QWORD);
  uint64_t UnicharsForGlyph;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  char *v154;
  char *v155;
  unint64_t v156;
  unsigned __int16 v157;
  int v158;
  int v159;
  uint64_t *v160;
  uint64_t *v161;
  BOOL v162;
  __int16 v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  int v168;
  __int16 v169;
  char *v170;
  char *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const UInt8 *BytePtr;
  CFIndex Length;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  char v214;
  char v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  const __CFData *v219;
  unsigned __int16 v221;
  void *__p;
  _BYTE *v223;
  uint64_t *v224;
  _QWORD *v225[2];

  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
    return;
  v6 = Mutable;
  v7 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v7)
    goto LABEL_77;
  v14 = v7;
  CGDataConsumerPrintf(v7, "/CIDInit /ProcSet findresource begin\n", v8, v9, v10, v11, v12, v13, v195);
  CGDataConsumerPrintf(v14, "12 dict begin\n", v15, v16, v17, v18, v19, v20, v196);
  CGDataConsumerPrintf(v14, "begincmap\n", v21, v22, v23, v24, v25, v26, v197);
  CGDataConsumerPrintf(v14, "/CIDSystemInfo <<\n", v27, v28, v29, v30, v31, v32, v198);
  CGDataConsumerPrintf(v14, "  /Registry (Adobe)\n", v33, v34, v35, v36, v37, v38, v199);
  CGDataConsumerPrintf(v14, "  /Ordering (UCS)\n", v39, v40, v41, v42, v43, v44, v200);
  CGDataConsumerPrintf(v14, "  /Supplement 0\n", v45, v46, v47, v48, v49, v50, v201);
  CGDataConsumerPrintf(v14, ">> def\n", v51, v52, v53, v54, v55, v56, v202);
  CGDataConsumerPrintf(v14, "/CMapName /Adobe-Identity-UCS def\n", v57, v58, v59, v60, v61, v62, v203);
  CGDataConsumerPrintf(v14, "/CMapType 2 def\n", v63, v64, v65, v66, v67, v68, v204);
  CGDataConsumerPrintf(v14, "1 begincodespacerange\n", v69, v70, v71, v72, v73, v74, v205);
  CGDataConsumerPrintf(v14, "<", v75, v76, v77, v78, v79, v80, v206);
  CGDataConsumerPrintf(v14, "00", v81, v82, v83, v84, v85, v86, v207);
  CGDataConsumerPrintf(v14, "><", v87, v88, v89, v90, v91, v92, v208);
  CGDataConsumerPrintf(v14, "FF", v93, v94, v95, v96, v97, v98, v209);
  CGDataConsumerPrintf(v14, ">\n", v99, v100, v101, v102, v103, v104, v210);
  CGDataConsumerPrintf(v14, "endcodespacerange\n", v105, v106, v107, v108, v109, v110, v211);
  v225[0] = 0;
  v225[1] = 0;
  v224 = (uint64_t *)v225;
  v111 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  if (v111)
  {
    get_unimap(v111);
    v112 = 256;
  }
  else
  {
    v112 = 0;
  }
  std::vector<unsigned short>::vector(&__p, v112);
  v119 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v218 = a2;
  v219 = v6;
  if (v119 && (v120 = atomic_load((unint64_t *)(v119 + 88))) != 0)
    Property = CGPropertiesGetProperty(v120, CFSTR("com.apple.CoreGraphics.CGPDFFontToUnicodeCMap"));
  else
    Property = 0;
  for (i = 0; i != 256; ++i)
  {
    if (Property)
    {
      v123 = __p;
      if (v223 == __p)
        goto LABEL_79;
      if (!cmap_vtable)
        continue;
      v124 = *(uint64_t (**)(_QWORD, _QWORD))(cmap_vtable + 64);
      if (!v124)
        continue;
      UnicharsForGlyph = v124(Property[2], (unsigned __int16)i);
    }
    else
    {
      if (i >= (uint64_t)(a3[1] - *a3) >> 1 || v223 == __p)
        goto LABEL_79;
      UnicharsForGlyph = CGFontGetUnicharsForGlyph(*(_QWORD *)(*(_QWORD *)a1 + 16), *(unsigned __int16 *)(*a3 + 2 * i), __p);
    }
    v126 = UnicharsForGlyph;
    v221 = i;
    if (UnicharsForGlyph)
    {
      if (UnicharsForGlyph != 1)
      {
        CGDataConsumerPrintf(v14, "1 beginbfchar\n", (uint64_t)v123, v114, v115, v116, v117, v118, v212);
        CGDataConsumerPrintf(v14, "<%0*x>", v128, v129, v130, v131, v132, v133, 2);
        CGDataConsumerPrintf(v14, "<", v134, v135, v136, v137, v138, v139, v213);
        v146 = 0;
        while (1)
        {
          if (v146)
            CGDataConsumerPrintf(v14, " ", v140, v141, v142, v143, v144, v145, v214);
          if (v146 >= (v223 - (_BYTE *)__p) >> 1)
            break;
          CGDataConsumerPrintf(v14, "%04x", v140, v141, v142, v143, v144, v145, *((_WORD *)__p + v146++));
          if (v126 == v146)
          {
            CGDataConsumerPrintf(v14, ">\n", v140, v141, v142, v143, v144, v145, v214);
            CGDataConsumerPrintf(v14, "endbfchar\n", v147, v148, v149, v150, v151, v152, v215);
            goto LABEL_30;
          }
        }
LABEL_79:
        __break(1u);
        return;
      }
      if (v223 == __p)
        goto LABEL_79;
      v127 = *(_WORD *)__p;
      *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v224, i, &v221)+ 14) = v127;
    }
LABEL_30:
    ;
  }
  v153 = v224;
  if (v224 == (uint64_t *)v225)
  {
    v154 = 0;
    v155 = 0;
    v170 = 0;
  }
  else
  {
    v154 = 0;
    v155 = 0;
    v156 = 0;
    do
    {
      v157 = 0;
      v158 = *((unsigned __int16 *)v153 + 13);
      v159 = *((unsigned __int16 *)v153 + 14);
      while (v158 + v157 == *((unsigned __int16 *)v153 + 13) && v159 + v157 == *((unsigned __int16 *)v153 + 14))
      {
        v160 = (uint64_t *)v153[1];
        if (v160)
        {
          do
          {
            v161 = v160;
            v160 = (uint64_t *)*v160;
          }
          while (v160);
        }
        else
        {
          do
          {
            v161 = (uint64_t *)v153[2];
            v162 = *v161 == (_QWORD)v153;
            v153 = v161;
          }
          while (!v162);
        }
        ++v157;
        v153 = v161;
        if (v161 == (uint64_t *)v225)
        {
          v153 = (uint64_t *)v225;
          break;
        }
      }
      v163 = v157 + v158 - 1;
      if ((unint64_t)v155 >= v156)
      {
        v164 = 0xAAAAAAAAAAAAAAABLL * ((v155 - v154) >> 1) + 1;
        if (v164 > 0x2AAAAAAAAAAAAAAALL)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        if (0x5555555555555556 * ((uint64_t)(v156 - (_QWORD)v154) >> 1) > v164)
          v164 = 0x5555555555555556 * ((uint64_t)(v156 - (_QWORD)v154) >> 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v154) >> 1) >= 0x1555555555555555)
          v165 = 0x2AAAAAAAAAAAAAAALL;
        else
          v165 = v164;
        if (v165)
          v165 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<ToUnicode::bfrange>>(v165);
        else
          v113 = 0;
        v166 = (char *)(v165 + 2 * ((v155 - v154) >> 1));
        *(_WORD *)v166 = v158;
        *((_WORD *)v166 + 1) = v163;
        *((_WORD *)v166 + 2) = v159;
        v167 = v166;
        while (v155 != v154)
        {
          v168 = *(_DWORD *)(v155 - 6);
          v155 -= 6;
          v169 = *((_WORD *)v155 + 2);
          *(_DWORD *)(v167 - 6) = v168;
          v167 -= 6;
          *((_WORD *)v167 + 2) = v169;
        }
        v156 = v165 + 6 * (_QWORD)v113;
        v155 = v166 + 6;
        if (v154)
          operator delete(v154);
        v154 = v167;
      }
      else
      {
        *(_WORD *)v155 = v158;
        *((_WORD *)v155 + 1) = v163;
        *((_WORD *)v155 + 2) = v159;
        v155 += 6;
      }
    }
    while (v153 != (uint64_t *)v225);
    v170 = v154;
  }
  while (v155 != v170)
  {
    v171 = v170;
    v172 = 0;
    do
    {
      v173 = v170;
      v170 += 6;
      if (v172 > 0x30)
        break;
      ++v172;
    }
    while (v170 != v155);
    if (v171 != v170)
    {
      CGDataConsumerPrintf(v14, "%d beginbfrange\n", (uint64_t)v123, v114, v115, v116, v117, v118, -85 * ((v170 - v171) >> 1));
      do
      {
        CGDataConsumerPrintf(v14, "<%0*x><%0*x><%04x>\n", v174, v175, v176, v177, v178, v179, 2);
        v162 = v171 == v173;
        v171 += 6;
      }
      while (!v162);
      CGDataConsumerPrintf(v14, "endbfrange\n", v174, v175, v176, v177, v178, v179, v216);
    }
  }
  if (v154)
    operator delete(v154);
  ToUnicode::write_epilog(v14, v113, (uint64_t)v123, v114, v115, v116, v117, v118, v212);
  v6 = v219;
  if (__p)
  {
    v223 = __p;
    operator delete(__p);
  }
  std::__tree<unsigned long>::destroy(v225[0]);
  CGDataConsumerClose((uint64_t)v14);
  CFRelease(v14);
  v180 = PDFStreamCreateWithObjectNumber(**(_QWORD **)(*(_QWORD *)a1 + 8), v218);
  PDFDocumentBeginObject(*v180, v180[1], v181, v182, v183, v184, v185, v186);
  PDFDocumentPrintf(*v180, (uint64_t)"<<", v187, v188, v189, v190, v191, v192, v217);
  PDFStreamBeginData((CGDataConsumerRef)v180);
  BytePtr = CFDataGetBytePtr(v219);
  Length = CFDataGetLength(v219);
  CGDataConsumerPutBytes(v180[3], (uint64_t)BytePtr, Length);
  PDFStreamEndData(v180);
  PDFStreamEnd((CFDataRef *)v180);
  PDFStreamRelease((uint64_t)v180);
LABEL_77:
  CFRelease(v6);
}

void sub_184B55A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  std::__tree<unsigned long>::destroy(a23);
  _Unwind_Resume(a1);
}

void **PDFEStateCreate(void *a1, const char *a2)
{
  void **v4;
  size_t v5;
  char *v6;

  v4 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *(_DWORD *)v4 = 1;
    v4[1] = a1;
    v5 = strlen(a2);
    v6 = (char *)malloc_type_malloc(v5 + 1, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    v4[7] = v6;
    if (v6)
    {
      strcpy(v6, a2);
    }
    else
    {
      PDFEStateRelease(v4);
      return 0;
    }
  }
  return v4;
}

void PDFEStateRelease(void **a1)
{
  const void *v3;

  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      switch(*((_DWORD *)a1 + 11))
      {
        case 3:
          free(a1[6]);
          break;
        case 4:
        case 5:
        case 6:
          v3 = a1[6];
          if (v3)
            CFRelease(v3);
          break;
        case 7:
          PDFClipMaskRelease((unsigned int **)a1[6]);
          break;
        default:
          break;
      }
      free(a1[7]);
      free(a1);
    }
  }
}

uint64_t type4_op_abs(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  int v10;
  double v11;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v1 - 1;
    v4 = &a1[2 * v1 - 2];
    v5 = v4 + 2;
    v6 = *((_DWORD *)v4 + 4);
    if (v6 == 258)
    {
      v11 = fabs(*((double *)v4 + 3));
      *a1 = v1;
      *v5 = 258;
      *((double *)v4 + 3) = v11;
    }
    else
    {
      if (v6 != 257)
      {
        v2 = 0;
        v3 = 2;
        goto LABEL_9;
      }
      v7 = &a1[2 * v1 - 2];
      v10 = *((_DWORD *)v7 + 6);
      v8 = v7 + 3;
      v9 = v10;
      if (v10 == 0x80000000)
      {
        *a1 = v1;
        *v5 = 258;
        *v8 = 0x41E0000000000000;
      }
      else
      {
        if (v9 < 0)
          v9 = -v9;
        *a1 = v1;
        *v5 = 257;
        *(_DWORD *)v8 = v9;
      }
    }
    return 1;
  }
  v2 = 0;
  v3 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_add(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if ((type4_value_add((double *)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]) & 1) != 0)
      return 1;
    v3 = 2;
  }
  else
  {
    v3 = 4;
  }
  result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_atan(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;
  double v13;
  double v14;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    result = 0;
    v4 = 4;
LABEL_15:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  v5 = v2 - 1;
  *a1 = v2 - 1;
  v6 = &a1[2 * v2 - 2];
  v7 = *((_DWORD *)v6 + 4);
  if (v7 == 258)
  {
    v8 = *((double *)v6 + 3);
  }
  else
  {
    if (v7 != 257)
      goto LABEL_10;
    v8 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  v9 = v2 - 2;
  *a1 = v2 - 2;
  v10 = &a1[2 * v2 - 4];
  v12 = v10 + 2;
  v11 = *((_DWORD *)v10 + 4);
  if (v11 == 258)
  {
    v13 = *((double *)v10 + 3);
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    result = 0;
    v4 = 2;
    goto LABEL_15;
  }
  v13 = (double)SLODWORD(a1[2 * v9 + 3]);
LABEL_12:
  if (v8 == 0.0 && v13 == 0.0)
  {
    result = 0;
    v4 = 5;
    goto LABEL_15;
  }
  v14 = atan2(v13, v8) * 180.0 / 3.14159265;
  if (v14 < 0.0)
    v14 = v14 + 360.0;
  *a1 = v5;
  *v12 = 258;
  *(double *)&a1[2 * v9 + 3] = v14;
  return 1;
}

uint64_t type4_op_ceiling(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  double v7;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    v2 = 0;
    v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  v4 = &a1[2 * v1 - 2];
  v5 = v4 + 2;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 == 258)
  {
    v7 = ceil(*((double *)v4 + 3));
    *a1 = v1;
    *v5 = 258;
    *((double *)v4 + 3) = v7;
  }
  else
  {
    if (v6 != 257)
    {
      v2 = 0;
      v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *v5 = 257;
  }
  return 1;
}

uint64_t type4_op_cos(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _DWORD *v8;
  int v9;
  double v10;
  long double v11;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    v5 = v2 - 1;
    *a1 = v2 - 1;
    v6 = &a1[2 * v2 - 2];
    v9 = *((_DWORD *)v6 + 4);
    v8 = v6 + 2;
    v7 = v9;
    if (v9 == 258)
    {
      v10 = *(double *)&a1[2 * v2 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        result = 0;
        v4 = 2;
        goto LABEL_9;
      }
      v10 = (double)SLODWORD(a1[2 * v5 + 3]);
    }
    v11 = cos(v10 * 3.14159265 / 180.0);
    *a1 = v2;
    *v8 = 258;
    *(long double *)&a1[2 * v5 + 3] = v11;
    return 1;
  }
  result = 0;
  v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_cvi(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 *v4;
  char v5;
  __int128 v6;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) < 2)
  {
    LODWORD(result) = 4;
    goto LABEL_7;
  }
  v5 = 0;
  *a1 = v2 - 1;
  v4 = (__int128 *)&a1[2 * v2];
  v6 = *v4;
  *a1 = v2;
  if (!type4_value_cvi((uint64_t)v4, (uint64_t)&v6, &v5))
  {
    LODWORD(result) = 2;
    goto LABEL_7;
  }
  result = 1;
  if (v5)
  {
LABEL_7:
    *((_DWORD *)a1 + 804) = result;
    return 0;
  }
  return result;
}

uint64_t type4_op_cvr(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) < 2)
  {
    v2 = 4;
LABEL_9:
    v8 = 0;
    *((_DWORD *)a1 + 804) = v2;
    return v8;
  }
  *a1 = v1 - 1;
  v3 = &a1[2 * v1 - 2];
  v5 = *((_DWORD *)v3 + 4);
  v6 = *((_DWORD *)v3 + 5);
  v4 = v3 + 2;
  v7 = v4[1];
  *a1 = v1;
  if (v5 == 258)
  {
    *(_DWORD *)v4 = 258;
    *((_DWORD *)v4 + 1) = v6;
    v4[1] = v7;
  }
  else
  {
    if (v5 != 257)
    {
      v2 = 2;
      goto LABEL_9;
    }
    *(_DWORD *)v4 = 258;
    *(double *)&a1[2 * v1 + 1] = (double)(int)v7;
  }
  return 1;
}

uint64_t type4_op_div(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  _DWORD *v10;
  int v11;
  int v12;
  double v13;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
    goto LABEL_14;
  }
  v4 = v1 - 1;
  *a1 = v1 - 1;
  v5 = &a1[2 * v1 - 2];
  v6 = *((_DWORD *)v5 + 4);
  if (v6 == 258)
  {
    v7 = *((double *)v5 + 3);
  }
  else
  {
    if (v6 != 257)
      goto LABEL_10;
    v7 = (double)SLODWORD(a1[2 * v4 + 3]);
  }
  v8 = v1 - 2;
  *a1 = v8;
  v9 = &a1[2 * v8];
  v12 = *((_DWORD *)v9 + 4);
  v10 = v9 + 2;
  v11 = v12;
  if (v12 == 258)
  {
    v13 = *(double *)&a1[2 * v8 + 3];
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    v2 = 0;
    v3 = 2;
    goto LABEL_14;
  }
  v13 = (double)SLODWORD(a1[2 * v8 + 3]);
LABEL_12:
  if (v7 != 0.0)
  {
    *a1 = v4;
    *v10 = 258;
    *(double *)&a1[2 * v8 + 3] = v13 / v7;
    return 1;
  }
  v2 = 0;
  v3 = 5;
LABEL_14:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_exp(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;
  double v13;
  long double v14;
  long double __y;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    result = 0;
    v4 = 4;
LABEL_15:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  v5 = v2 - 1;
  *a1 = v2 - 1;
  v6 = &a1[2 * v2 - 2];
  v7 = *((_DWORD *)v6 + 4);
  if (v7 == 258)
  {
    v8 = *((double *)v6 + 3);
  }
  else
  {
    if (v7 != 257)
      goto LABEL_10;
    v8 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  v9 = v2 - 2;
  *a1 = v2 - 2;
  v10 = &a1[2 * v2 - 4];
  v12 = v10 + 2;
  v11 = *((_DWORD *)v10 + 4);
  if (v11 == 258)
  {
    v13 = *((double *)v10 + 3);
    goto LABEL_12;
  }
  if (v11 != 257)
  {
LABEL_10:
    result = 0;
    v4 = 2;
    goto LABEL_15;
  }
  v13 = (double)SLODWORD(a1[2 * v9 + 3]);
LABEL_12:
  if (v13 < 0.0 && modf(v8, &__y) != 0.0)
  {
    result = 0;
    v4 = 5;
    goto LABEL_15;
  }
  v14 = pow(v13, v8);
  *a1 = v5;
  *v12 = 258;
  *(long double *)&a1[2 * v9 + 3] = v14;
  return 1;
}

uint64_t type4_op_floor(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  double v8;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    v2 = 0;
    v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  v4 = &a1[2 * v1 - 2];
  v7 = *((_DWORD *)v4 + 4);
  v5 = v4 + 2;
  v6 = v7;
  v8 = *((double *)v5 + 1);
  if (v7 == 258)
  {
    *a1 = v1;
    *(_DWORD *)v5 = 258;
    *(double *)&a1[2 * v1 + 1] = floor(v8);
  }
  else
  {
    if (v6 != 257)
    {
      v2 = 0;
      v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *(_DWORD *)v5 = 257;
    LODWORD(a1[2 * v1 + 1]) = LODWORD(v8);
  }
  return 1;
}

uint64_t type4_op_idiv(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    v2 = 0;
    v3 = 2;
    goto LABEL_8;
  }
  v7 = a1[2 * v4 + 3];
  if (!v7)
  {
    v2 = 0;
    v3 = 5;
    goto LABEL_8;
  }
  v8 = &a1[2 * v5];
  v9 = *((_DWORD *)v8 + 6) / v7;
  *a1 = v4;
  *(_DWORD *)v6 = 257;
  *((_DWORD *)v8 + 6) = v9;
  return 1;
}

uint64_t type4_op_ln(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _DWORD *v8;
  int v9;
  double v10;
  long double v11;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    result = 0;
    v4 = 4;
LABEL_10:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  v5 = v2 - 1;
  *a1 = v2 - 1;
  v6 = &a1[2 * v2 - 2];
  v9 = *((_DWORD *)v6 + 4);
  v8 = v6 + 2;
  v7 = v9;
  if (v9 == 258)
  {
    v10 = *(double *)&a1[2 * v2 + 1];
  }
  else
  {
    if (v7 != 257)
    {
      result = 0;
      v4 = 2;
      goto LABEL_10;
    }
    v10 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  if (v10 < 0.0)
  {
    result = 0;
    v4 = 1;
    goto LABEL_10;
  }
  v11 = log(v10);
  *a1 = v2;
  *v8 = 258;
  *(long double *)&a1[2 * v5 + 3] = v11;
  return 1;
}

uint64_t type4_op_log(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _DWORD *v8;
  int v9;
  double v10;
  long double v11;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    result = 0;
    v4 = 4;
LABEL_10:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  v5 = v2 - 1;
  *a1 = v2 - 1;
  v6 = &a1[2 * v2 - 2];
  v9 = *((_DWORD *)v6 + 4);
  v8 = v6 + 2;
  v7 = v9;
  if (v9 == 258)
  {
    v10 = *(double *)&a1[2 * v2 + 1];
  }
  else
  {
    if (v7 != 257)
    {
      result = 0;
      v4 = 2;
      goto LABEL_10;
    }
    v10 = (double)SLODWORD(a1[2 * v5 + 3]);
  }
  if (v10 < 0.0)
  {
    result = 0;
    v4 = 1;
    goto LABEL_10;
  }
  v11 = log10(v10);
  *a1 = v2;
  *v8 = 258;
  *(long double *)&a1[2 * v5 + 3] = v11;
  return 1;
}

uint64_t type4_op_mod(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    v2 = 0;
    v3 = 2;
    goto LABEL_8;
  }
  v7 = a1[2 * v4 + 3];
  if (!v7)
  {
    v2 = 0;
    v3 = 5;
    goto LABEL_8;
  }
  v8 = &a1[2 * v5];
  v9 = *((_DWORD *)v8 + 6);
  *a1 = v4;
  *(_DWORD *)v6 = 257;
  *((_DWORD *)v8 + 6) = v9 % v7;
  return 1;
}

uint64_t type4_op_mul(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if ((type4_value_mul((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]) & 1) != 0)
      return 1;
    v3 = 2;
  }
  else
  {
    v3 = 4;
  }
  result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_neg(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  int v10;
  double v11;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v1 - 1;
    v4 = &a1[2 * v1 - 2];
    v5 = v4 + 2;
    v6 = *((_DWORD *)v4 + 4);
    if (v6 == 258)
    {
      v11 = -*((double *)v4 + 3);
      *a1 = v1;
      *v5 = 258;
      *((double *)v4 + 3) = v11;
    }
    else
    {
      if (v6 != 257)
      {
        v2 = 0;
        v3 = 2;
        goto LABEL_9;
      }
      v7 = &a1[2 * v1 - 2];
      v10 = *((_DWORD *)v7 + 6);
      v8 = v7 + 3;
      v9 = v10;
      *a1 = v1;
      if (v10 == 0x80000000)
      {
        *v5 = 258;
        *v8 = 0x41E0000000000000;
      }
      else
      {
        *v5 = 257;
        *(_DWORD *)v8 = -v9;
      }
    }
    return 1;
  }
  v2 = 0;
  v3 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_round(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  double v7;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    v2 = 0;
    v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  v4 = &a1[2 * v1 - 2];
  v5 = v4 + 2;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 == 258)
  {
    v7 = round(*((double *)v4 + 3));
    *a1 = v1;
    *v5 = 258;
    *((double *)v4 + 3) = v7;
  }
  else
  {
    if (v6 != 257)
    {
      v2 = 0;
      v3 = 2;
      goto LABEL_9;
    }
    *a1 = v1;
    *v5 = 257;
  }
  return 1;
}

uint64_t type4_op_sin(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _DWORD *v8;
  int v9;
  double v10;
  long double v11;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    v5 = v2 - 1;
    *a1 = v2 - 1;
    v6 = &a1[2 * v2 - 2];
    v9 = *((_DWORD *)v6 + 4);
    v8 = v6 + 2;
    v7 = v9;
    if (v9 == 258)
    {
      v10 = *(double *)&a1[2 * v2 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        result = 0;
        v4 = 2;
        goto LABEL_9;
      }
      v10 = (double)SLODWORD(a1[2 * v5 + 3]);
    }
    v11 = sin(v10 * 3.14159265 / 180.0);
    *a1 = v2;
    *v8 = 258;
    *(long double *)&a1[2 * v5 + 3] = v11;
    return 1;
  }
  result = 0;
  v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_sqrt(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  int v8;
  double v9;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    v4 = v1 - 1;
    *a1 = v1 - 1;
    v5 = &a1[2 * v1 - 2];
    v8 = *((_DWORD *)v5 + 4);
    v6 = v5 + 2;
    v7 = v8;
    if (v8 == 258)
    {
      v9 = *(double *)&a1[2 * v1 + 1];
    }
    else
    {
      if (v7 != 257)
      {
        v2 = 0;
        v3 = 2;
        goto LABEL_10;
      }
      v9 = (double)SLODWORD(a1[2 * v4 + 3]);
    }
    if (v9 >= 0.0)
    {
      *a1 = v1;
      *v6 = 258;
      *(double *)&a1[2 * v4 + 3] = sqrt(v9);
      return 1;
    }
    v2 = 0;
    v3 = 1;
  }
  else
  {
    v2 = 0;
    v3 = 4;
  }
LABEL_10:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_sub(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) >= 3)
  {
    *a1 = v2 - 1;
    if ((type4_value_sub((double *)&a1[2 * v2 - 2], (double *)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]) & 1) != 0)
      return 1;
    v3 = 2;
  }
  else
  {
    v3 = 4;
  }
  result = 0;
  *((_DWORD *)a1 + 804) = v3;
  return result;
}

uint64_t type4_op_truncate(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t *v5;
  int v6;
  _DWORD *v7;
  long double v8;
  double __y;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 1)
  {
    *a1 = v2 - 1;
    v5 = &a1[2 * v2 - 2];
    v7 = v5 + 2;
    v6 = *((_DWORD *)v5 + 4);
    if (v6 == 258)
    {
      __y = 0.0;
      modf(*((long double *)v5 + 3), &__y);
      v8 = __y;
      *a1 = v2;
      *v7 = 258;
      *((long double *)v5 + 3) = v8;
    }
    else
    {
      if (v6 != 257)
      {
        result = 0;
        v4 = 2;
        goto LABEL_9;
      }
      *a1 = v2;
      *v7 = 257;
    }
    return 1;
  }
  result = 0;
  v4 = 4;
LABEL_9:
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_and(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL *v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
LABEL_13:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  v4 = v1 - 1;
  v5 = v1 - 2;
  *a1 = v1 - 2;
  v6 = &a1[2 * v1];
  v7 = &a1[2 * v1 - 2];
  if (*(_DWORD *)v7 != 257)
  {
    if (*(_DWORD *)v7 == 256 && *(_DWORD *)v6 == 256)
    {
      v8 = &a1[2 * v5];
      v11 = *((unsigned __int8 *)v8 + 24);
      v9 = (BOOL *)(v8 + 3);
      v10 = v11;
      if (v11)
        v10 = LOBYTE(a1[2 * v4 + 3]) != 0;
      *a1 = v4;
      *(_DWORD *)v7 = 256;
      *v9 = v10;
      return 1;
    }
LABEL_12:
    v2 = 0;
    v3 = 2;
    goto LABEL_13;
  }
  if (*(_DWORD *)v6 != 257)
    goto LABEL_12;
  *a1 = v4;
  v12 = a1 + 2;
  v13 = &v12[2 * v5];
  v14 = LODWORD(v12[2 * v4 + 1]) & v13[1];
  *(_DWORD *)v7 = 257;
  *((_DWORD *)v13 + 2) = v14;
  return 1;
}

uint64_t type4_op_bitshift(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int *v9;
  int v10;
  int v11;
  int v12;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
LABEL_8:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  v4 = v1 - 1;
  *a1 = v1 - 1;
  if (LODWORD(a1[2 * v1]) != 257 || (v5 = v1 - 2, *a1 = v1 - 2, v6 = &a1[2 * v1 - 2], *(_DWORD *)v6 != 257))
  {
    v2 = 0;
    v3 = 2;
    goto LABEL_8;
  }
  v7 = a1[2 * v4 + 3];
  v8 = &a1[2 * v5];
  v11 = *((_DWORD *)v8 + 6);
  v9 = (int *)(v8 + 3);
  v10 = v11;
  if (v7 < 0)
    v12 = v10 >> -(char)v7;
  else
    v12 = v10 << v7;
  *a1 = v4;
  *(_DWORD *)v6 = 257;
  *v9 = v12;
  return 1;
}

uint64_t type4_op_eq(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_equal((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]))
    {
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = 0;
      return 1;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_ge(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v8 = 0;
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if ((type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]) & 1) != 0)
    {
      v7 = v8;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7 >= 0;
      return 1;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_gt(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v8 = 0;
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if ((type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]) & 1) != 0)
    {
      v7 = v8 > 0;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7;
      return 1;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_le(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v8 = 0;
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if ((type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]) & 1) != 0)
    {
      v7 = v8 < 1;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7;
      return 1;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_lt(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v8 = 0;
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if ((type4_value_compare(&v8, (uint64_t)&a1[2 * v2 - 2], (double *)&a1[2 * v2]) & 1) != 0)
    {
      v7 = v8;
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      LOBYTE(a1[2 * v6 + 3]) = v7 < 0;
      return 1;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_ne(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v5 = v2 - 1;
    v6 = v2 - 2;
    *a1 = v2 - 2;
    if (type4_value_equal((uint64_t)&a1[2 * v2 - 2], (uint64_t)&a1[2 * v2]))
    {
      *a1 = v5;
      LODWORD(a1[2 * v6 + 2]) = 256;
      result = 1;
      LOBYTE(a1[2 * v6 + 3]) = 1;
      return result;
    }
    result = 0;
    v4 = 2;
  }
  else
  {
    result = 0;
    v4 = 4;
  }
  *((_DWORD *)a1 + 804) = v4;
  return result;
}

uint64_t type4_op_not(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;
  uint64_t *v7;
  char v8;
  int v9;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 1)
  {
    v2 = 0;
    v3 = 4;
LABEL_9:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  *a1 = v1 - 1;
  v4 = &a1[2 * v1 - 2];
  v5 = v4 + 2;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 == 257)
  {
    v9 = ~*((_DWORD *)v4 + 6);
    *a1 = v1;
    *v5 = 257;
    *((_DWORD *)v4 + 6) = v9;
  }
  else
  {
    if (v6 != 256)
    {
      v2 = 0;
      v3 = 2;
      goto LABEL_9;
    }
    v7 = &a1[2 * v1 - 2];
    v8 = *((_BYTE *)v7 + 24);
    *a1 = v1;
    *v5 = 256;
    *((_BYTE *)v7 + 24) = v8 ^ 1;
  }
  return 1;
}

uint64_t type4_op_or(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) > 2)
  {
    v4 = v1 - 1;
    v5 = v1 - 2;
    *a1 = v1 - 2;
    v6 = &a1[2 * v1];
    v7 = &a1[2 * v1 - 2];
    if (*(_DWORD *)v7 == 257)
    {
      if (*(_DWORD *)v6 == 257)
      {
        *a1 = v4;
        v12 = a1 + 2;
        v13 = &v12[2 * v5];
        v14 = LODWORD(v12[2 * v4 + 1]) | *((_DWORD *)v13 + 2);
        *(_DWORD *)v7 = 257;
        *((_DWORD *)v13 + 2) = v14;
        return 1;
      }
    }
    else if (*(_DWORD *)v7 == 256 && *(_DWORD *)v6 == 256)
    {
      v8 = &a1[2 * v5];
      v10 = *((unsigned __int8 *)v8 + 24);
      v9 = (BOOL *)(v8 + 3);
      if (v10)
        v11 = 1;
      else
        v11 = LOBYTE(a1[2 * v4 + 3]) != 0;
      *a1 = v4;
      *(_DWORD *)v7 = 256;
      *v9 = v11;
      return 1;
    }
    v2 = 0;
    v3 = 2;
    goto LABEL_11;
  }
  v2 = 0;
  v3 = 4;
LABEL_11:
  *((_DWORD *)a1 + 804) = v3;
  return v2;
}

uint64_t type4_op_xor(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;

  v1 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
  {
    v2 = 0;
    v3 = 4;
LABEL_11:
    *((_DWORD *)a1 + 804) = v3;
    return v2;
  }
  v4 = v1 - 1;
  v5 = v1 - 2;
  *a1 = v1 - 2;
  v6 = &a1[2 * v1];
  v7 = &a1[2 * v1 - 2];
  if (*(_DWORD *)v7 == 257)
  {
    if (*(_DWORD *)v6 == 257)
    {
      *a1 = v4;
      v11 = a1 + 2;
      v12 = &v11[2 * v5];
      v13 = LODWORD(v11[2 * v4 + 1]) ^ *((_DWORD *)v12 + 2);
      *(_DWORD *)v7 = 257;
      *((_DWORD *)v12 + 2) = v13;
      return 1;
    }
LABEL_10:
    v2 = 0;
    v3 = 2;
    goto LABEL_11;
  }
  if (*(_DWORD *)v7 != 256 || *(_DWORD *)v6 != 256)
    goto LABEL_10;
  *a1 = v4;
  v8 = a1 + 2;
  v9 = &v8[2 * v5];
  v10 = *((unsigned __int8 *)v9 + 8) != LOBYTE(v8[2 * v4 + 1]);
  *(_DWORD *)v7 = 256;
  *((_BYTE *)v9 + 8) = v10;
  return 1;
}

uint64_t type4_op_if (uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  v2 = *(_QWORD *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 1) <= 2)
  {
    result = 0;
    v4 = 4;
LABEL_8:
    *(_DWORD *)(a1 + 3216) = v4;
    return result;
  }
  *(_QWORD *)a1 = v2 - 1;
  if (*(_DWORD *)(a1 + 16 * (v2 - 1) + 16) != 259
    || (*(_QWORD *)a1 = v2 - 2, *(_DWORD *)(a1 + 16 + 16 * (v2 - 2)) != 256))
  {
    result = 0;
    v4 = 2;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 16 * (v2 - 2) + 24))
    return type4_program_execute(*(_QWORD **)(a1 + 16 + 16 * (v2 - 1) + 8), (uint64_t *)a1);
  else
    return 1;
}

uint64_t type4_op_ifelse(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;

  v2 = *(_QWORD *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 1) <= 3)
  {
    v3 = 4;
LABEL_10:
    *(_DWORD *)(a1 + 3216) = v3;
    return 0;
  }
  *(_QWORD *)a1 = v2 - 1;
  if (*(_DWORD *)(a1 + 16 * (v2 - 1) + 16) != 259
    || (*(_QWORD *)a1 = v2 - 2, *(_DWORD *)(a1 + 16 + 16 * (v2 - 2)) != 259)
    || (v4 = *(_QWORD **)(a1 + 16 + 16 * (v2 - 1) + 8),
        *(_QWORD *)a1 = v2 - 3,
        *(_DWORD *)(a1 + 16 + 16 * (v2 - 3)) != 256))
  {
    v3 = 2;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 16 * (v2 - 3) + 24))
    v4 = *(_QWORD **)(a1 + 16 + 16 * (v2 - 2) + 8);
  return type4_program_execute(v4, (uint64_t *)a1);
}

uint64_t type4_op_copy(uint64_t a1)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 1) < 2)
    goto LABEL_2;
  *(_QWORD *)a1 = v1 - 1;
  v3 = a1 + 16 * (v1 - 1);
  if (*(_DWORD *)(v3 + 16) != 257)
  {
    v2 = 2;
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 + 24);
  if ((v4 & 0x80000000) != 0)
  {
    v2 = 1;
    goto LABEL_11;
  }
  if (!(_DWORD)v4)
    return 1;
  if (v1 < v4 + 1)
  {
LABEL_2:
    v2 = 4;
LABEL_11:
    v5 = 0;
    *(_DWORD *)(a1 + 3216) = v2;
    return v5;
  }
  if (v1 - 1 + v4 > 0xC8)
  {
    v2 = 3;
    goto LABEL_11;
  }
  v7 = -(uint64_t)(int)v4;
  do
  {
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)a1 + v7;
    ++*(_QWORD *)a1;
    *(_OWORD *)(a1 + 16 + 16 * v8) = *(_OWORD *)(a1 + 16 + 16 * v9);
    v5 = 1;
    LODWORD(v4) = v4 - 1;
  }
  while ((_DWORD)v4);
  return v5;
}

uint64_t type4_op_dup(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  int v4;
  _OWORD *v5;

  v2 = *(_QWORD *)a1 + 1;
  if (v2 <= 1)
  {
    result = 0;
    v4 = 4;
LABEL_5:
    *(_DWORD *)(a1 + 3216) = v4;
    return result;
  }
  if (v2 >= 0xC9)
  {
    result = 0;
    v4 = 3;
    goto LABEL_5;
  }
  v5 = (_OWORD *)(a1 + 16 * *(_QWORD *)a1);
  *(_QWORD *)a1 = v2;
  v5[1] = *v5;
  return 1;
}

BOOL type4_op_exch(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)a1 - 2;
  if (v1 >= 0xFFFFFFFFFFFFFFFDLL)
  {
    *(_DWORD *)(a1 + 3216) = 4;
  }
  else
  {
    v2 = *(_QWORD *)a1 - 1;
    *(_QWORD *)a1 = v2;
    v3 = *(_OWORD *)(a1 + 16 + 16 * v2);
    *(_QWORD *)a1 = v1;
    v4 = *(_OWORD *)(a1 + 16 + 16 * v1);
    *(_QWORD *)a1 = v2;
    *(_OWORD *)(a1 + 16 + 16 * v1) = v3;
    v5 = (*(_QWORD *)a1)++;
    *(_OWORD *)(a1 + 16 + 16 * v5) = v4;
  }
  return v1 < 0xFFFFFFFFFFFFFFFDLL;
}

uint64_t type4_op_index(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _OWORD *v5;
  int v6;
  uint64_t v7;

  v1 = *(_QWORD *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 1) <= 1)
    goto LABEL_2;
  *(_QWORD *)a1 = v1 - 1;
  v4 = a1 + 16 * (v1 - 1);
  v6 = *(_DWORD *)(v4 + 16);
  v5 = (_OWORD *)(v4 + 16);
  if (v6 != 257)
  {
    v2 = 0;
    v3 = 2;
    goto LABEL_9;
  }
  v7 = *(unsigned int *)(a1 + 16 * (v1 - 1) + 24);
  if ((v7 & 0x80000000) != 0)
  {
    v2 = 0;
    v3 = 1;
    goto LABEL_9;
  }
  if (v1 < v7 + 2)
  {
LABEL_2:
    v2 = 0;
    v3 = 4;
LABEL_9:
    *(_DWORD *)(a1 + 3216) = v3;
    return v2;
  }
  *(_QWORD *)a1 = v1;
  *v5 = *(_OWORD *)(a1 + 16 * (v1 - 1 + ~(_DWORD)v7) + 16);
  return 1;
}

BOOL type4_op_pop(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)a1 - 1;
  if (v1 >= 0xFFFFFFFFFFFFFFFELL)
    *(_DWORD *)(a1 + 3216) = 4;
  else
    *(_QWORD *)a1 = v1;
  return v1 < 0xFFFFFFFFFFFFFFFELL;
}

uint64_t type4_op_roll(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  int v18;
  _OWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v25[402];

  v25[401] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if ((unint64_t)(*a1 + 1) <= 2)
    goto LABEL_2;
  v5 = v2 - 1;
  *a1 = v2 - 1;
  if (LODWORD(a1[2 * v2]) != 257 || (v6 = v2 - 2, *a1 = v2 - 2, LODWORD(a1[2 * v2 - 2]) != 257))
  {
    result = 0;
    v4 = 2;
    goto LABEL_22;
  }
  v7 = LODWORD(a1[2 * v6 + 3]);
  if ((int)v7 <= 0)
  {
    result = 0;
    v4 = 1;
    goto LABEL_22;
  }
  if (v5 < v7 + 1)
  {
LABEL_2:
    result = 0;
    v4 = 4;
LABEL_22:
    *((_DWORD *)a1 + 804) = v4;
    return result;
  }
  if ((_DWORD)v7 != 1)
  {
    v8 = a1[2 * v5 + 3];
    if (v8 <= -(int)v7 || v8 >= (int)v7)
      v8 %= (int)v7;
    v10 = v7 & (v8 >> 31);
    v11 = (v10 + v8);
    if (v10 + v8)
    {
      v12 = &a1[2 * (v6 - v7) + 2];
      if ((int)v11 <= (int)(v7 >> 1))
      {
        v18 = v7 - v11;
        if ((int)v11 >= 1)
        {
          v19 = v25;
          v20 = v7 - v11;
          v21 = v11;
          do
          {
            *v19++ = *(_OWORD *)&v12[2 * v20++];
            --v21;
          }
          while (v21);
        }
        if (v18 >= 1)
        {
          v22 = -(uint64_t)v18;
          v23 = v7 - 1;
          do
          {
            *(_OWORD *)&v12[2 * v23] = *(_OWORD *)&v12[2 * (v23 - (int)v11)];
            --v23;
          }
          while (!__CFADD__(v22++, 1));
        }
        if ((int)v11 < 1)
          return 1;
        v17 = 16 * (v11 - 1) + 16;
        v16 = v12;
      }
      else
      {
        if ((int)v7 - (int)v11 >= 1)
          memcpy(v25, v12, 16 * (v7 + ~(_DWORD)v11) + 16);
        v13 = v7 - v11;
        v14 = v12;
        v15 = v11;
        do
        {
          *(_OWORD *)v14 = *(_OWORD *)&v12[2 * v13];
          v14 += 2;
          ++v13;
          --v15;
        }
        while (v15);
        if ((int)v7 - (int)v11 < 1)
          return 1;
        v16 = &a1[2 * v2 - 2 + 2 * v11 + -2 * v7];
        v17 = 16 * (v7 - v11);
      }
      memcpy(v16, v25, v17);
    }
  }
  return 1;
}

CGPDFStringRef CGPDFNameTreeGetValue(CGPDFDictionary *a1, uint64_t a2)
{
  CGPDFStringRef value_in_kid;
  int v4;
  const char *v5;
  _OWORD v7[2];
  int v8;

  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  value_in_kid = get_value_in_kid(a1, (size_t *)a2, (uint64_t)v7);
  if (!value_in_kid)
  {
    if (a2)
    {
      if (*(_QWORD *)(a2 + 24))
      {
        decrypt_string(a2);
        v4 = *(_DWORD *)(a2 + 72);
        if (*(_QWORD *)(a2 + 24))
          decrypt_string(a2);
      }
      else
      {
        v4 = *(_DWORD *)(a2 + 72);
      }
      v5 = (const char *)(a2 + 80);
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v7);
  return value_in_kid;
}

void sub_184B57718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

CGPDFStringRef get_value_in_kid(CGPDFDictionary *a1, size_t *a2, uint64_t a3)
{
  CGPDFArray *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  size_t v14;
  int8x8_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t ***v21;
  uint64_t **i;
  unint64_t v23;
  _BOOL4 v24;
  char *v25;
  _BOOL4 String;
  _BOOL4 v27;
  CGPDFStringRef result;
  CGPDFArrayRef array;
  CGPDFArrayRef v30;
  CGPDFDictionaryRef dict;
  CGPDFStringRef v32;
  CGPDFStringRef __s1;
  CGPDFStringRef value;

  v30 = 0;
  dict = a1;
  array = 0;
  if (CGPDFDictionaryGetArray(a1, "Names", &array))
  {
    v6 = array;
    if (!array)
      return 0;
    v7 = *((_QWORD *)array + 2);
    if ((v7 & 1) == 0)
    {
      if (v7 < 2)
        return 0;
      v8 = 0;
      __s1 = 0;
      value = 0;
      while (1)
      {
        v9 = v8 + (v7 >> 2);
        if (!CGPDFArrayGetString(v6, 2 * v9, &value))
          break;
        v10 = string_compare(a2, value);
        if (!v10)
        {
          if (!CGPDFArrayGetObject(v6, (2 * v9) | 1, &__s1))
            break;
          return __s1;
        }
        v11 = v7 >> 1;
        v12 = v10 > 0;
        if (v10 > 0)
          v8 = v9 + 1;
        v7 = v11 - v12;
        if (v11 - v12 <= 1)
          return 0;
      }
    }
    pdf_error("invalid name table: invalid /Names entry.");
    return 0;
  }
  if (CGPDFDictionaryGetArray(a1, "Kids", &v30))
  {
    if (!v30)
      return 0;
    v13 = *((_QWORD *)v30 + 2);
    if (!v13)
      return 0;
    v14 = 0;
    while (1)
    {
      if (!CGPDFArrayGetDictionary(v30, v14, &dict))
      {
        pdf_error("missing or invalid name table dictionary.");
        return 0;
      }
      v15 = *(int8x8_t *)(a3 + 8);
      if (v15)
      {
        v16 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)dict) + 8) ^ ((unint64_t)dict >> 32));
        v17 = 0x9DDFEA08EB382D69 * (((unint64_t)dict >> 32) ^ (v16 >> 47) ^ v16);
        v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
        v19 = (uint8x8_t)vcnt_s8(v15);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          v20 = v18;
          if (v18 >= *(_QWORD *)&v15)
            v20 = v18 % *(_QWORD *)&v15;
        }
        else
        {
          v20 = v18 & (*(_QWORD *)&v15 - 1);
        }
        v21 = *(uint64_t ****)(*(_QWORD *)a3 + 8 * v20);
        if (v21)
        {
          for (i = *v21; i; i = (uint64_t **)*i)
          {
            v23 = (unint64_t)i[1];
            if (v23 == v18)
            {
              if (i[2] == (uint64_t *)dict)
              {
                pdf_error("cycle in name tree.");
                return 0;
              }
            }
            else
            {
              if (v19.u32[0] > 1uLL)
              {
                if (v23 >= *(_QWORD *)&v15)
                  v23 %= *(_QWORD *)&v15;
              }
              else
              {
                v23 &= *(_QWORD *)&v15 - 1;
              }
              if (v23 != v20)
                break;
            }
          }
        }
      }
      __s1 = 0;
      value = 0;
      v32 = 0;
      v24 = CGPDFDictionaryGetArray(dict, "Limits", &value);
      v25 = "invalid name table: missing /Limits entry.";
      if (!v24)
        goto LABEL_42;
      if (!value)
        break;
      v25 = "invalid name table: invalid /Limits entry.";
      if (*((_QWORD *)value + 2) != 2)
        goto LABEL_42;
      String = CGPDFArrayGetString(value, 0, &__s1);
      v25 = "invalid name table: invalid /Limits entry.";
      if (!String)
        goto LABEL_42;
      v27 = CGPDFArrayGetString(value, 1uLL, &v32);
      v25 = "invalid name table: invalid /Limits entry.";
      if (!v27)
        goto LABEL_42;
      if ((int)string_compare((size_t *)__s1, (CGPDFString *)a2) < 1 && (int)string_compare(a2, v32) <= 0)
      {
        std::__hash_table<CGPDFDictionary *,std::hash<CGPDFDictionary *>,std::equal_to<CGPDFDictionary *>,std::allocator<CGPDFDictionary *>>::__emplace_unique_key_args<CGPDFDictionary *,CGPDFDictionary * const&>((float *)a3, (unint64_t)dict, (uint64_t)dict);
        return (CGPDFStringRef)get_value_in_kid(dict, a2, a3);
      }
LABEL_43:
      result = 0;
      if (++v14 == v13)
        return result;
    }
    v25 = "invalid name table: invalid /Limits entry.";
LABEL_42:
    pdf_error(v25);
    goto LABEL_43;
  }
  pdf_error("invalid name table: no /Kids or /Names entry.");
  return 0;
}

uint64_t string_compare(size_t *__s1, CGPDFString *a2)
{
  CGPDFString *v3;
  size_t v4;
  size_t v5;
  char *v6;
  size_t v7;
  unsigned int v8;
  uint64_t result;

  v3 = (CGPDFString *)__s1;
  if (__s1)
  {
    if (__s1[3])
    {
      decrypt_string((uint64_t)__s1);
      v4 = *((_QWORD *)v3 + 9);
      if (*((_QWORD *)v3 + 3))
        decrypt_string((uint64_t)v3);
    }
    else
    {
      v4 = __s1[9];
    }
    v3 = (CGPDFString *)((char *)v3 + 80);
    if (a2)
      goto LABEL_9;
LABEL_6:
    v5 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_9:
  if (*((_QWORD *)a2 + 3))
  {
    decrypt_string((uint64_t)a2);
    v5 = *((_QWORD *)a2 + 9);
    if (*((_QWORD *)a2 + 3))
      decrypt_string((uint64_t)a2);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 9);
  }
  v6 = (char *)a2 + 80;
LABEL_14:
  if (v4 >= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 < v5)
    v8 = -1;
  else
    v8 = v4 > v5;
  LODWORD(result) = memcmp(v3, v6, v7);
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

void std::__hash_table<CGPDFDictionary *,std::hash<CGPDFDictionary *>,std::equal_to<CGPDFDictionary *>,std::allocator<CGPDFDictionary *>>::__emplace_unique_key_args<CGPDFDictionary *,CGPDFDictionary * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_184B57F20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CGPDFGStateSynchronizeStroke(uint64_t a1, CGContextRef c)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGFloat v12;
  size_t v13;
  const CGFloat *v14;
  CGContext *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a1)
  {
    CGContextSetLineWidth(c, 1.0);
    CGContextSetLineCap(c, kCGLineCapButt);
    CGContextSetLineJoin(c, kCGLineJoinMiter);
    CGContextSetMiterLimit(c, 10.0);
    CGContextSetStrokeAdjust((uint64_t)c, 0, v16, v17, v18, v19, v20, v21);
LABEL_7:
    v12 = 0.0;
    v15 = c;
    v14 = 0;
    v13 = 0;
    goto LABEL_8;
  }
  v4 = *(double *)(a1 + 144);
  if (v4 == 0.0)
    v4 = -1.0905473e16;
  CGContextSetLineWidth(c, v4);
  CGContextSetLineCap(c, *(CGLineCap *)(a1 + 152));
  CGContextSetLineJoin(c, *(CGLineJoin *)(a1 + 156));
  CGContextSetMiterLimit(c, *(CGFloat *)(a1 + 160));
  CGContextSetStrokeAdjust((uint64_t)c, *(unsigned __int8 *)(a1 + 180), v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)(a1 + 168);
  if (!v11)
    goto LABEL_7;
  v12 = *(double *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = (const CGFloat *)(v11 + 24);
  v15 = c;
LABEL_8:
  CGContextSetLineDash(v15, v12, v14, v13);
}

void CGPDFGStateSynchronizeContextForText(uint64_t a1, CGContextRef c)
{
  unsigned int v4;
  CGColor *v5;
  CGColor *StrokeColor;
  CGColor *FillColor;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGSize v15;

  if (!a1 || !c)
    return;
  CGContextSetAlpha(c, 1.0);
  v15.width = 0.0;
  v15.height = 0.0;
  CGContextSetPatternPhase(c, v15);
  v4 = *(_DWORD *)(a1 + 112);
  if (v4 <= 6)
  {
    if (((1 << v4) & 0x11) != 0)
    {
      FillColor = (CGColor *)CGPDFGStateGetFillColor(a1);
      CGContextSetFillColorWithColor(c, FillColor);
      goto LABEL_11;
    }
    if (((1 << v4) & 0x22) != 0)
      goto LABEL_8;
    if (((1 << v4) & 0x44) != 0)
    {
      v5 = (CGColor *)CGPDFGStateGetFillColor(a1);
      CGContextSetFillColorWithColor(c, v5);
LABEL_8:
      StrokeColor = (CGColor *)CGPDFGStateGetStrokeColor(a1);
      CGContextSetStrokeColorWithColor(c, StrokeColor);
      CGPDFGStateSynchronizeStroke(a1, c);
    }
  }
LABEL_11:
  CGPDFGStateSynchronizeColorRendering(a1, c);
  CGPDFGStateSynchronizeRendering(a1, (uint64_t)c, v8, v9, v10, v11, v12, v13);
  v14 = *(unsigned int *)(a1 + 112);
  if (v14 <= 7)
    CGContextSetTextDrawingMode(c, dword_185001F98[v14]);
  CGContextSetFontSize(c, 1.0);
}

void CGPDFGStateSynchronizeForImages(uint64_t a1, CGContextRef c)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGSize v10;

  if (a1)
  {
    if (c)
    {
      CGContextSetAlpha(c, *(CGFloat *)(a1 + 200));
      v10.width = 0.0;
      v10.height = 0.0;
      CGContextSetPatternPhase(c, v10);
      CGPDFGStateSynchronizeColorRendering(a1, c);
      CGPDFGStateSynchronizeRendering(a1, (uint64_t)c, v4, v5, v6, v7, v8, v9);
    }
  }
}

uint64_t __CGStyleFilterContextDelegateCreate(const void *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Filter;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *callback_address;
  char v24;

  v2 = ripc_Initialize();
  Filter = CGContextDelegateCreateFilter((uint64_t)v2, a1, v3, v4, v5, v6, v7, v8);
  v17 = Filter;
  if (Filter)
  {
    v18 = 0;
    *(_QWORD *)(Filter + 24) = rips_Finalize;
    *(_QWORD *)(Filter + 32) = rips_GetColorTransform;
    do
    {
      v19 = __CGStyleFilterContextDelegateCreate_callbacks[v18];
      if (!a1
        || (v20 = (_QWORD *)get_callback_address((uint64_t)a1, __CGStyleFilterContextDelegateCreate_callbacks[v18], (uint64_t)"CGContextDelegateImplementsCallback", v12, v13, v14, v15, v16)) != 0&& *v20)
      {
        v21 = *(_QWORD *)&__CGStyleFilterContextDelegateCreate_callbacks[v18 + 2];
        callback_address = (_QWORD *)get_callback_address(v17, v19, (uint64_t)"CGContextDelegateSetCallback", v12, v13, v14, v15, v16);
        if (callback_address)
          *callback_address = v21;
      }
      v18 += 4;
    }
    while (v18 != 28);
  }
  else
  {
    CGPostError((uint64_t)"Failed to create style context delegate", v10, v11, v12, v13, v14, v15, v16, v24);
    if (*(_QWORD *)v2)
      CFRelease(*(CFTypeRef *)v2);
  }
  return v17;
}

void rips_Finalize(uint64_t a1)
{
  CFTypeRef *v1;

  if (a1)
  {
    v1 = *(CFTypeRef **)(a1 + 288);
    if (v1)
    {
      if (*v1)
        CFRelease(*v1);
    }
  }
}

_QWORD *rips_GetColorTransform(_QWORD *result)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (!result)
  {
    v1 = 0;
    if (!MEMORY[0x30])
      return result;
    goto LABEL_7;
  }
  v1 = result[36];
  if (*(_QWORD *)(v1 + 48))
  {
LABEL_7:
    ripc_InitializeColorTransform(v1);
    return *(_QWORD **)(v1 + 120);
  }
  result = (_QWORD *)result[2];
  if (result)
  {
    v2 = (uint64_t (*)(void))result[4];
    if (v2)
      return (_QWORD *)v2();
    else
      return 0;
  }
  return result;
}

void rips_DrawLines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int16 v13;
  const CGRect *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *CGDisplayList;
  const void *ContextDelegate;
  _OWORD v22[5];

  v9 = a1;
  if (a1)
  {
    v10 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v10)
    {
      v11 = *(uint64_t **)(a1 + 288);
      goto LABEL_5;
    }
    a1 = *(_QWORD *)(a1 + 16);
LABEL_8:
    CGContextDelegateDrawLines(a1, a2, a3, a4, a5);
    return;
  }
  v11 = 0;
  v10 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (!v10)
    goto LABEL_8;
LABEL_5:
  memset(v22, 0, sizeof(v22));
  v12 = rips_Acquire((uint64_t)v11, a2, v10, (uint64_t *)v22);
  if (v12)
  {
    CGContextDelegateDrawLines(*v11, a2, a3, a4, a5);
    v13 = rips_Initialize((float64x2_t *)v12);
  }
  else
  {
    CFRetain(v10);
    v13 = 512;
  }
  CGGStateSetStyle(a3, 0);
  if (v9)
    v9 = *(_QWORD *)(v9 + 16);
  if (v12)
    rips_Begin((uint64_t)v12, v13, v9, a2, a3);
  if ((v13 & 0x800) != 0)
  {
    CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v14, v15, v16, v17, v18, v19);
    v12[9] = (uint64_t)CGDisplayList;
    if (CGDisplayList)
    {
      ContextDelegate = (const void *)CG::DisplayList::createContextDelegate(CGDisplayList);
      CGContextDelegateDrawLines((uint64_t)ContextDelegate, a2, a3, a4, a5);
      if (ContextDelegate)
        CFRelease(ContextDelegate);
    }
  }
  else
  {
    if ((v13 & 0x200) != 0)
      CGContextDelegateDrawLines(v9, a2, a3, a4, a5);
    if (!v12)
    {
      CGGStateSetStyle(a3, v10);
      return;
    }
  }
  rips_End((uint64_t)v12, v13, v9, a2);
  CGGStateSetStyle(a3, v10);
  rips_Release(v12);
}

uint64_t rips_DrawRects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  void (*v15)(void);
  __int16 v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  const CGRect *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  const void *CGDisplayList;
  uint64_t ContextDelegate;
  const void *v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD v32[5];

  v11 = a1;
  if (!a1)
  {
    v12 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v12)
    {
      v13 = 0;
LABEL_6:
      memset(v32, 0, sizeof(v32));
      v14 = rips_Acquire(v13, a2, v12, (uint64_t *)v32);
      if (v14)
      {
        if (*(_QWORD *)v13)
        {
          v15 = *(void (**)(void))(*(_QWORD *)v13 + 64);
          if (v15)
            v15();
        }
        v16 = rips_Initialize((float64x2_t *)v14);
      }
      else
      {
        CFRetain(v12);
        v16 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v11)
        v11 = *(_QWORD *)(v11 + 16);
      if (v14)
        rips_Begin((uint64_t)v14, v16, v11, a2, a3);
      if ((v16 & 0x800) != 0)
      {
        CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v20, v21, v22, v23, v24, v25);
        v14[9] = (uint64_t)CGDisplayList;
        if (CGDisplayList)
        {
          ContextDelegate = CG::DisplayList::createContextDelegate(CGDisplayList);
          if (ContextDelegate)
          {
            v30 = (const void *)ContextDelegate;
            v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(ContextDelegate + 64);
            if (v31)
              v27 = v31(ContextDelegate, a2, a3, a4, a5, a6);
            else
              v27 = 1006;
            CFRelease(v30);
          }
          else
          {
            v27 = 0;
          }
        }
        else
        {
          v27 = 1000;
        }
      }
      else if ((v16 & 0x200) != 0 && v11)
      {
        v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
        if (v26)
        {
          v27 = v26(v11, a2, a3, a4, a5, a6);
          if (!v14)
            goto LABEL_31;
        }
        else
        {
          v27 = 1006;
          if (!v14)
            goto LABEL_31;
        }
      }
      else
      {
        v27 = 0;
        if (!v14)
        {
LABEL_31:
          CGGStateSetStyle(a3, v12);
          return v27;
        }
      }
      rips_End((uint64_t)v14, v16, v11, a2);
      CGGStateSetStyle(a3, v12);
      rips_Release(v14);
      return v27;
    }
    return 0;
  }
  v12 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 288);
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return 0;
  v18 = *(uint64_t (**)(void))(v17 + 64);
  if (v18)
    return v18();
  return 1006;
}

uint64_t rips_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int16 v13;
  const CGRect *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *CGDisplayList;
  const void *ContextDelegate;
  _OWORD v24[5];

  v9 = a1;
  if (a1)
  {
    v10 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v10)
    {
      v11 = *(uint64_t **)(a1 + 288);
      goto LABEL_5;
    }
    a1 = *(_QWORD *)(a1 + 16);
    return CGContextDelegateDrawPath(a1, a2, a3, a4, cf);
  }
  v11 = 0;
  v10 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (!v10)
    return CGContextDelegateDrawPath(a1, a2, a3, a4, cf);
LABEL_5:
  memset(v24, 0, sizeof(v24));
  v12 = rips_Acquire((uint64_t)v11, a2, v10, (uint64_t *)v24);
  if (v12)
  {
    CGContextDelegateDrawPath(*v11, a2, a3, a4, cf);
    v13 = rips_Initialize((float64x2_t *)v12);
  }
  else
  {
    CFRetain(v10);
    v13 = 512;
  }
  CGGStateSetStyle(a3, 0);
  if (v9)
    v9 = *(_QWORD *)(v9 + 16);
  if (v12)
    rips_Begin((uint64_t)v12, v13, v9, a2, a3);
  if ((v13 & 0x800) != 0)
  {
    CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v15, v16, v17, v18, v19, v20);
    v12[9] = (uint64_t)CGDisplayList;
    if (CGDisplayList)
    {
      ContextDelegate = (const void *)CG::DisplayList::createContextDelegate(CGDisplayList);
      v21 = CGContextDelegateDrawPath((uint64_t)ContextDelegate, a2, a3, a4, cf);
      if (ContextDelegate)
        CFRelease(ContextDelegate);
    }
    else
    {
      v21 = 1000;
    }
    goto LABEL_24;
  }
  if ((v13 & 0x200) == 0)
  {
    v21 = 0;
    if (!v12)
      goto LABEL_22;
LABEL_24:
    rips_End((uint64_t)v12, v13, v9, a2);
    CGGStateSetStyle(a3, v10);
    rips_Release(v12);
    return v21;
  }
  v21 = CGContextDelegateDrawPath(v9, a2, a3, a4, cf);
  if (v12)
    goto LABEL_24;
LABEL_22:
  CGGStateSetStyle(a3, v10);
  return v21;
}

uint64_t rips_DrawImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  void (*v19)(double, double, double, double);
  __int16 v20;
  uint64_t v21;
  uint64_t (*v22)(__n128, __n128, __n128, __n128);
  const CGRect *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double);
  uint64_t v31;
  const void *CGDisplayList;
  uint64_t ContextDelegate;
  const void *v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double);
  _OWORD v36[5];

  v9 = a8.n128_f64[0];
  v10 = a7.n128_f64[0];
  v11 = a6.n128_f64[0];
  v12 = a5.n128_f64[0];
  v15 = a1;
  if (!a1)
  {
    v16 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v16)
    {
      v17 = 0;
LABEL_6:
      memset(v36, 0, sizeof(v36));
      v18 = rips_Acquire(v17, a2, v16, (uint64_t *)v36);
      if (v18)
      {
        if (*(_QWORD *)v17)
        {
          v19 = *(void (**)(double, double, double, double))(*(_QWORD *)v17 + 80);
          if (v19)
            v19(v12, v11, v10, v9);
        }
        v20 = rips_Initialize((float64x2_t *)v18);
      }
      else
      {
        CFRetain(v16);
        v20 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v15)
        v15 = *(_QWORD *)(v15 + 16);
      if (v18)
        rips_Begin((uint64_t)v18, v20, v15, a2, a3);
      if ((v20 & 0x800) != 0)
      {
        CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v24, v25, v26, v27, v28, v29);
        v18[9] = (uint64_t)CGDisplayList;
        if (CGDisplayList)
        {
          ContextDelegate = CG::DisplayList::createContextDelegate(CGDisplayList);
          if (ContextDelegate)
          {
            v34 = (const void *)ContextDelegate;
            v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(ContextDelegate + 80);
            if (v35)
              v31 = v35(ContextDelegate, a2, a3, a4, v12, v11, v10, v9);
            else
              v31 = 1006;
            CFRelease(v34);
          }
          else
          {
            v31 = 0;
          }
        }
        else
        {
          v31 = 1000;
        }
      }
      else if ((v20 & 0x200) != 0 && v15)
      {
        v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(v15 + 80);
        if (v30)
        {
          v31 = v30(v15, a2, a3, a4, v12, v11, v10, v9);
          if (!v18)
            goto LABEL_31;
        }
        else
        {
          v31 = 1006;
          if (!v18)
            goto LABEL_31;
        }
      }
      else
      {
        v31 = 0;
        if (!v18)
        {
LABEL_31:
          CGGStateSetStyle(a3, v16);
          return v31;
        }
      }
      rips_End((uint64_t)v18, v20, v15, a2);
      CGGStateSetStyle(a3, v16);
      rips_Release(v18);
      return v31;
    }
    return 0;
  }
  v16 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 288);
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
    return 0;
  v22 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(v21 + 80);
  if (v22)
    return v22(a5, a6, a7, a8);
  return 1006;
}

uint64_t rips_DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void (*v17)(void);
  __int16 v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  const CGRect *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  const void *CGDisplayList;
  uint64_t ContextDelegate;
  const void *v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _OWORD v35[5];

  v13 = a1;
  if (!a1)
  {
    v14 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v14)
    {
      v15 = 0;
LABEL_6:
      memset(v35, 0, sizeof(v35));
      v16 = rips_Acquire(v15, a2, v14, (uint64_t *)v35);
      if (v16)
      {
        if (*(_QWORD *)v15)
        {
          v17 = *(void (**)(void))(*(_QWORD *)v15 + 88);
          if (v17)
            v17();
        }
        v18 = rips_Initialize((float64x2_t *)v16);
      }
      else
      {
        CFRetain(v14);
        v18 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v13)
        v13 = *(_QWORD *)(v13 + 16);
      if (v16)
        rips_Begin((uint64_t)v16, v18, v13, a2, a3);
      if ((v18 & 0x800) != 0)
      {
        CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v22, v23, v24, v25, v26, v27);
        v16[9] = (uint64_t)CGDisplayList;
        if (CGDisplayList)
        {
          v34 = a7;
          ContextDelegate = CG::DisplayList::createContextDelegate(CGDisplayList);
          if (ContextDelegate)
          {
            v32 = (const void *)ContextDelegate;
            v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(ContextDelegate + 88);
            if (v33)
              v29 = v33(ContextDelegate, a2, a3, a4, a5, a6, v34);
            else
              v29 = 1006;
            CFRelease(v32);
          }
          else
          {
            v29 = 0;
          }
        }
        else
        {
          v29 = 1000;
        }
      }
      else if ((v18 & 0x200) != 0 && v13)
      {
        v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 88);
        if (v28)
        {
          v29 = v28(v13, a2, a3, a4, a5, a6, a7);
          if (!v16)
            goto LABEL_31;
        }
        else
        {
          v29 = 1006;
          if (!v16)
            goto LABEL_31;
        }
      }
      else
      {
        v29 = 0;
        if (!v16)
        {
LABEL_31:
          CGGStateSetStyle(a3, v14);
          return v29;
        }
      }
      rips_End((uint64_t)v16, v18, v13, a2);
      CGGStateSetStyle(a3, v14);
      rips_Release(v16);
      return v29;
    }
    return 0;
  }
  v14 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 288);
    goto LABEL_6;
  }
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return 0;
  v20 = *(uint64_t (**)(void))(v19 + 88);
  if (v20)
    return v20();
  return 1006;
}

uint64_t rips_DrawShading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(void);
  __int16 v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  const CGRect *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  const void *CGDisplayList;
  uint64_t ContextDelegate;
  const void *v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD v28[5];

  v7 = a1;
  if (!a1)
  {
    v8 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v8)
    {
      v9 = 0;
LABEL_6:
      memset(v28, 0, sizeof(v28));
      v10 = rips_Acquire(v9, a2, v8, (uint64_t *)v28);
      if (v10)
      {
        if (*(_QWORD *)v9)
        {
          v11 = *(void (**)(void))(*(_QWORD *)v9 + 96);
          if (v11)
            v11();
        }
        v12 = rips_Initialize((float64x2_t *)v10);
      }
      else
      {
        CFRetain(v8);
        v12 = 512;
      }
      CGGStateSetStyle(a3, 0);
      if (v7)
        v7 = *(_QWORD *)(v7 + 16);
      if (v10)
        rips_Begin((uint64_t)v10, v12, v7, a2, a3);
      if ((v12 & 0x800) != 0)
      {
        CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v16, v17, v18, v19, v20, v21);
        v10[9] = (uint64_t)CGDisplayList;
        if (CGDisplayList)
        {
          ContextDelegate = CG::DisplayList::createContextDelegate(CGDisplayList);
          if (ContextDelegate)
          {
            v26 = (const void *)ContextDelegate;
            v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(ContextDelegate + 96);
            if (v27)
              v23 = v27(ContextDelegate, a2, a3, a4);
            else
              v23 = 1006;
            CFRelease(v26);
          }
          else
          {
            v23 = 0;
          }
        }
        else
        {
          v23 = 1000;
        }
      }
      else if ((v12 & 0x200) != 0 && v7)
      {
        v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96);
        if (v22)
        {
          v23 = v22(v7, a2, a3, a4);
          if (!v10)
            goto LABEL_31;
        }
        else
        {
          v23 = 1006;
          if (!v10)
            goto LABEL_31;
        }
      }
      else
      {
        v23 = 0;
        if (!v10)
        {
LABEL_31:
          CGGStateSetStyle(a3, v8);
          return v23;
        }
      }
      rips_End((uint64_t)v10, v12, v7, a2);
      CGGStateSetStyle(a3, v8);
      rips_Release(v10);
      return v23;
    }
    return 0;
  }
  v8 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 288);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return 0;
  v14 = *(uint64_t (**)(void))(v13 + 96);
  if (v14)
    return v14();
  return 1006;
}

uint64_t rips_DrawDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  __int16 v15;
  uint64_t v16;
  CGSize *p_size;
  const CGRect *v18;
  CGFloat *p_y;
  CGFloat *p_height;
  CGFloat height;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  const __CFDictionary *v25;
  char *v26;
  __int128 v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGFloat v35;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, _QWORD *);
  CFTypeRef v38;
  CGFloat v39;
  CGFloat v40;
  char *Copy;
  CGFloat v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  dispatch_once_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  double Alpha;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t v87;
  _QWORD *Cache;
  CGColorSpace *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  CGFloat tx;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *FillColor;
  uint64_t *v113;
  CGColorSpace *v114;
  _OWORD v115[5];
  uint64_t v116;
  int v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  CGColorSpace *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128[2];
  _QWORD v129[2];
  CGAffineTransform v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;

  v7 = a1;
  v144 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
    if (v8)
    {
      v9 = 0;
LABEL_6:
      memset(v115, 0, sizeof(v115));
      v10 = rips_Acquire(v9, a2, v8, (uint64_t *)v115);
      if (!v10)
      {
        CFRetain(v8);
        v15 = 512;
        goto LABEL_41;
      }
      if (*(_QWORD *)v9)
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 288);
      else
        v11 = 0;
      v126 = 0u;
      v127 = 0u;
      v125 = 0u;
      v123 = 0;
      v124 = 0;
      if (!ripc_GetRenderingState(v11, a2, a3, (uint64_t)&v125))
        goto LABEL_40;
      if (a4)
      {
        p_size = &CGRectNull.size;
        v18 = (const CGRect *)(a4 + 11);
        p_y = (CGFloat *)(a4 + 12);
        if (a4[74] == a4[75])
          p_y = &CGRectNull.origin.y;
        else
          p_size = (CGSize *)(a4 + 13);
        if (a4[74] == a4[75])
        {
          v18 = &CGRectNull;
          p_height = &CGRectNull.size.height;
        }
        else
        {
          p_height = (CGFloat *)(a4 + 14);
        }
        height = *p_height;
        x = v18->origin.x;
        y = *p_y;
        width = p_size->width;
        v25 = (const __CFDictionary *)a4[4];
        if (v25)
        {
          memset(&v130, 0, 32);
          if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
            dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
          if ((CGCFDictionaryGetCFTypeRef(v25, CFSTR("kCGContextColorSpace"), CGColorSpaceGetTypeID_type_id, (uint64_t *)&v124) & 1) != 0|| (v26 = (char *)v11, CFDictionaryGetValue(v25, CFSTR("kCGContextGroup"))))
          {
            v26 = 0;
          }
          if (kCGColorComponents_block_invoke_once != -1)
            dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
          CGCFDictionaryGetCFTypeRef(v25, CFSTR("kCGContextBackgroundColor"), CGColorGetTypeID_color_type_id, &v123);
          if (CGCFDictionaryGetRect(v25, CFSTR("kCGContextBoundingBox"), (UInt8 *)&v130))
          {
            v151.origin.x = v130.a;
            v151.origin.y = v130.b;
            v151.size.width = v130.c;
            v151.size.height = v130.d;
            v145.origin.x = x;
            v145.origin.y = y;
            v145.size.width = width;
            v145.size.height = height;
            v146 = CGRectIntersection(v145, v151);
            x = v146.origin.x;
            y = v146.origin.y;
            width = v146.size.width;
            height = v146.size.height;
          }
LABEL_35:
          v27 = *(_OWORD *)(a3 + 40);
          *(_OWORD *)&v130.a = *(_OWORD *)(a3 + 24);
          *(_OWORD *)&v130.c = v27;
          *(_OWORD *)&v130.tx = *(_OWORD *)(a3 + 56);
          v28 = x;
          *(CGFloat *)&v27 = y;
          v29 = width;
          v30 = height;
          v147 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v27 - 8), &v130);
          v152.origin.x = (double)SDWORD2(v126);
          v152.origin.y = (double)SHIDWORD(v126);
          v152.size.width = (double)(int)v127;
          v152.size.height = (double)SDWORD1(v127);
          v148 = CGRectIntersection(v147, v152);
          v35 = v148.origin.x;
          if (v148.origin.x == INFINITY || v148.origin.y == INFINITY)
            goto LABEL_40;
          v39 = v148.size.width;
          if (v148.size.width == 0.0)
            goto LABEL_40;
          v40 = v148.size.height;
          if (v148.size.height == 0.0)
            goto LABEL_40;
          Copy = (char *)a3;
          if (!v26)
          {
            v42 = v148.origin.y;
            v43 = *(_QWORD **)(v11 + 200);
            v44 = *(_QWORD **)(v11 + 120);
            if (v43 == v44)
            {
              if (v43)
                CFRetain(*(CFTypeRef *)(v11 + 200));
              v47 = *(_QWORD *)(v11 + 48);
              if (v47)
                v46 = *(unsigned int **)(v47 + 32);
              else
                v46 = 0;
            }
            else
            {
              v45 = *(_QWORD *)(v11 + 48);
              if (v45)
                v46 = *(unsigned int **)(v45 + 32);
              else
                v46 = 0;
              if (v124
                && CGColorTransformConvertNeedsCMS(v44, v124, 0)
                && v124
                && (v54 = *(_DWORD *)(*((_QWORD *)v124 + 3) + 24), v54 <= 2)
                && (v55 = RIPLayerDepthForModel(v54, *v46, v48, v49, v50, v51, v52, v53)) != 0
                && (v56 = (unsigned int *)v55, (v57 = color_transform_create(v124, 0)) != 0))
              {
                v43 = (_QWORD *)v57;
                v46 = v56;
              }
              else
              {
                v43 = *(_QWORD **)(v11 + 120);
                if (v43)
                  CFRetain(*(CFTypeRef *)(v11 + 120));
              }
            }
            v149.origin.x = v35;
            v149.origin.y = v42;
            v149.size.width = v39;
            v149.size.height = v40;
            v150 = CGRectIntegral(v149);
            v65 = v150.origin.x;
            v66 = v150.origin.y;
            v67 = v150.size.width;
            v68 = v150.size.height;
            LODWORD(v130.a) = (int)v150.origin.x;
            HIDWORD(v130.a) = (int)v150.origin.y;
            LODWORD(v130.b) = (int)v150.size.width;
            HIDWORD(v130.b) = (int)v150.size.height;
            if (v123)
            {
              if (v123 < 0)
                Alpha = CGTaggedColorGetAlpha(v123, v58, v59, v60, v61, v62, v63, v64);
              else
                Alpha = *(double *)(v123 + 8 * *(_QWORD *)(v123 + 56) + 56);
              v70 = (Alpha < 1.0) | 0x10u;
            }
            else
            {
              v70 = 17;
            }
            if (a2)
              v71 = *(unsigned int *)(a2 + 4);
            else
              v71 = 3;
            v72 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v130, v70, (uint64_t)v46, v71, v62, v63, v64);
            if (!v72)
            {
              if (v43)
              {
                v90 = v43;
LABEL_130:
                CFRelease(v90);
              }
LABEL_40:
              v15 = rips_Initialize((float64x2_t *)v10);
LABEL_41:
              CGGStateSetStyle(a3, 0);
              if (v7)
                v7 = *(_QWORD *)(v7 + 16);
              if (v10)
                rips_Begin((uint64_t)v10, v15, v7, a2, a3);
              if ((v15 & 0x800) != 0)
              {
                if (a4)
                  v38 = CFRetain(a4);
                else
                  v38 = 0;
                v16 = 0;
                v10[9] = (uint64_t)v38;
              }
              else if ((v15 & 0x200) != 0 && v7)
              {
                v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v7 + 128);
                if (v37)
                {
                  v16 = v37(v7, a2, a3, a4);
                  if (!v10)
                    goto LABEL_54;
                }
                else
                {
                  v16 = 1006;
                  if (!v10)
                    goto LABEL_54;
                }
              }
              else
              {
                v16 = 0;
                if (!v10)
                {
LABEL_54:
                  CGGStateSetStyle(a3, v8);
                  return v16;
                }
              }
              rips_End((uint64_t)v10, v15, v7, a2);
              CGGStateSetStyle(a3, v8);
              rips_Release(v10);
              return v16;
            }
            v73 = v72;
            v26 = ripc_Initialize();
            *((_QWORD *)v26 + 6) = v73;
            *((_QWORD *)v26 + 2) = v43;
            *(_OWORD *)(v26 + 24) = *(_OWORD *)(v11 + 24);
            Copy = CGGStateCreateCopy(a3);
            CGGStateSetCompositeOperation((uint64_t)Copy, 2);
            if (*(double *)(*((_QWORD *)Copy + 15) + 8) != 1.0)
            {
              maybeCopyRenderingState((uint64_t)Copy);
              *(_QWORD *)(*((_QWORD *)Copy + 15) + 8) = 0x3FF0000000000000;
            }
            CGGStateSetStyle((uint64_t)Copy, 0);
            CGGStateSetSoftMask((uint64_t)Copy, 0);
            CGGStateResetClip((uint64_t)Copy);
            *(CGAffineTransform *)(Copy + 24) = CGAffineTransformIdentity;
            CGGStateClipToRect((uint64_t)Copy, v65, v66, v67, v68);
            v74 = *(_OWORD *)(a3 + 24);
            v75 = *(_OWORD *)(a3 + 40);
            *(_OWORD *)(Copy + 56) = *(_OWORD *)(a3 + 56);
            *(_OWORD *)(Copy + 40) = v75;
            *(_OWORD *)(Copy + 24) = v74;
            *((_DWORD *)v26 + 54) = *(_DWORD *)(v11 + 216);
          }
          CGDisplayListDelegateDrawDisplayList(*(_QWORD **)v26, a2, (uint64_t)Copy, (uint64_t)a4, v31, v32, v33, v34);
          if (v26 == (char *)v11)
            goto LABEL_40;
          CGGStateRelease((uint64_t)Copy);
          v76 = *((_QWORD *)v26 + 6);
          if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 16, 0))
          {
            v140 = xmmword_185000760;
            v141 = unk_185000770;
            v142 = xmmword_185000780;
            v143 = 0;
            v136 = xmmword_185000720;
            v137 = unk_185000730;
            v138 = xmmword_185000740;
            v139 = unk_185000750;
            v132 = xmmword_1850006E0;
            v133 = unk_1850006F0;
            v134 = xmmword_185000700;
            v135 = unk_185000710;
            memset(&v130, 0, sizeof(v130));
            v131 = unk_1850006D0;
            v122 = 0;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            if (*(int *)(v76 + 20) < 1 || *(int *)(v76 + 24) < 1 || !*(_QWORD *)(v76 + 56))
            {
LABEL_126:
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 48))(v76, 0);
              goto LABEL_129;
            }
            v84 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
            v85 = v84 << 12;
            if (((v84 >> 20) & 0xF) != 0)
              v86 = v84 << 8;
            else
              v86 = v84 << 12;
            if (!(v86 >> 28))
              v86 = v85;
            v87 = (v86 >> 28);
            Cache = CGColorTransformGetCache(*((_QWORD **)v26 + 2));
            if (Cache)
              v89 = (CGColorSpace *)Cache[2];
            else
              v89 = 0;
            v114 = v89;
            if ((CGColorTransformConvertNeedsCMS(*(_QWORD **)(v11 + 120), v89, v87) & 1) == 0)
            {
              v113 = 0;
              tx = *(double *)(v76 + 32);
              v130.tx = tx;
              DWORD2(v131) = *(_DWORD *)(v76 + 20);
              LODWORD(v130.ty) = DWORD2(v131);
              HIDWORD(v131) = *(_DWORD *)(v76 + 24);
              *(_QWORD *)&v131 = 0;
              HIDWORD(v130.ty) = HIDWORD(v131);
              LODWORD(v132) = *(_DWORD *)(v76 + 48);
              *((_QWORD *)&v132 + 1) = *(_QWORD *)(v76 + 56);
              *((_QWORD *)&v133 + 1) = *(_QWORD *)(v76 + 72);
              LODWORD(v133) = *(_DWORD *)(v76 + 64);
              v134 = 0uLL;
LABEL_115:
              if (*(_QWORD *)&tx == RIPGetDepthForLayerFormat(0, v91, v92, v93, v94, v95, v96, v97))
              {
                v130.tx = 0.0;
              }
              else if (*(_QWORD *)&v130.tx)
              {
                v111 = 0;
LABEL_122:
                v119 = *(_OWORD *)(v76 + 12);
                v122 = 0;
                *(_QWORD *)&v121 = 0;
                v120 = (unint64_t)&v130;
                DWORD2(v121) = 0;
                ripc_RenderImage(v11, a2, a3, (uint64_t *)&v125, (int *)&v119, (uint64_t)&v119, v109, v110);
                if (v111)
                  CGGStateSetFillColor(a3, v111);
                if (v113)
                  CGSImageDataUnlock(v113);
                goto LABEL_126;
              }
              FillColor = (void *)CGGStateGetFillColor(a3);
              v111 = FillColor;
              if (FillColor)
                CFRetain(FillColor);
              CGGStateSetFillColor(a3, 0);
              goto LABEL_122;
            }
            v116 = 0;
            v98 = *(int *)(v76 + 24);
            v117 = *(_DWORD *)(v76 + 20);
            v118 = v98;
            v99 = *(_DWORD *)(v76 + 48);
            v100 = *(_QWORD *)(v76 + 72);
            v129[0] = *(_QWORD *)(v76 + 56);
            v129[1] = v100;
            v101 = *(_DWORD *)(v76 + 64);
            v128[0] = v99;
            v128[1] = v101;
            v102 = CGSImageDataLockPixels(v117, v98, (uint64_t)v129, v128, *(_DWORD **)(v76 + 32), v114, v117, v98, (uint64_t)&v116, v87, *(_QWORD **)(v11 + 120), *(_DWORD *)(v11 + 216), *(int **)(*(_QWORD *)(v11 + 48) + 32));
            if (v102)
            {
              v113 = (uint64_t *)v102;
              RIPImageDataInitialize((uint64_t)&v130, v11, v102, v103, v104, v105, v106, v107);
              tx = v130.tx;
              goto LABEL_115;
            }
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 48))(v76, 0);
          }
          CGPostError((uint64_t)"%s - Cannot acquire group image", v77, v78, v79, v80, v81, v82, v83, (char)"ripc_DrawDisplayList");
LABEL_129:
          v90 = *(const void **)v26;
          if (*(_QWORD *)v26)
            goto LABEL_130;
          goto LABEL_40;
        }
      }
      else
      {
        height = 0.0;
        y = INFINITY;
        width = 0.0;
        x = INFINITY;
      }
      v26 = (char *)v11;
      goto LABEL_35;
    }
    return 0;
  }
  v8 = *(_DWORD **)(*(_QWORD *)(a3 + 120) + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 288);
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return 0;
  v13 = *(uint64_t (**)(void))(v12 + 128);
  if (v13)
    return v13();
  return 1006;
}

uint64_t *rips_Acquire(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float64x2_t v10;
  __n128 v11;
  int v12;
  uint64_t v13;
  int v14;
  float64x2_t v15;
  const void *v16;
  const void *v17;
  CGColorSpace *v18;
  _QWORD *v19;
  _QWORD *Cache;
  uint64_t v21;
  const void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __n128 v33;
  float64x2_t __s2;
  float64x2_t v35;
  float64x2_t v36;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 80);
  if (a3)
    v9 = a3[4];
  else
    v9 = 0;
  v10 = *(float64x2_t *)(a2 + 40);
  __s2 = *(float64x2_t *)(a2 + 24);
  v35 = v10;
  v11 = *(__n128 *)(a2 + 56);
  v36 = (float64x2_t)v11;
  v11.n128_u64[0] = *(_QWORD *)(a1 + 40);
  if (v11.n128_f64[0] != 1.0)
  {
    __s2 = vmulq_n_f64(__s2, v11.n128_f64[0]);
    v35 = vmulq_n_f64(v35, v11.n128_f64[0]);
    v36 = vmulq_n_f64(v36, v11.n128_f64[0]);
  }
  if (v8)
  {
    if (*(_DWORD **)(v8 + 16) == a3 && *(_DWORD *)(v8 + 24) == v9)
    {
      v12 = *(_DWORD *)(v8 + 12);
      if ((v12 & 1) == 0)
        goto LABEL_17;
      v33 = v11;
      a1 = memcmp((const void *)(v8 + 32), &__s2, 0x30uLL);
      v11 = v33;
      if (!(_DWORD)a1)
        goto LABEL_17;
    }
    if (*(_QWORD *)v8)
    {
      a1 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 24))(v8, v11);
      v11.n128_u64[0] = *(_QWORD *)(v7 + 40);
    }
    *(_QWORD *)(v7 + 80) = 0;
  }
  v13 = rips_Create(v11.n128_f64[0], a1, (uint64_t)a3, (uint64_t)&__s2);
  if (!v13)
    return 0;
  v8 = v13;
  v14 = *(_DWORD *)(v13 + 12);
  if (!v14)
    return 0;
  *(_QWORD *)(v7 + 80) = v13;
  *(_QWORD *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 24) = v9;
  LOWORD(v12) = v14 | 0x1000;
  *(_DWORD *)(v13 + 12) = v14 | 0x1000;
  v15 = v35;
  v11 = (__n128)v36;
  *(float64x2_t *)(v13 + 32) = __s2;
  *(float64x2_t *)(v13 + 48) = v15;
  *(__n128 *)(v13 + 64) = v11;
LABEL_17:
  *a4 = v7;
  a4[1] = *(_QWORD *)(v7 + 48);
  if ((v12 & 0x2000) == 0)
  {
    v16 = *(const void **)(v7 + 200);
    v17 = *(const void **)(v7 + 16);
    if (v17 == v16)
      goto LABEL_33;
    if (v17)
      CFRelease(v17);
    if (v16)
      CFRetain(v16);
    goto LABEL_32;
  }
  v18 = (CGColorSpace *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v11);
  v19 = *(_QWORD **)(v7 + 16);
  if (!v19)
  {
LABEL_31:
    v16 = (const void *)color_transform_create(v18, 0);
LABEL_32:
    *(_QWORD *)(v7 + 16) = v16;
    goto LABEL_33;
  }
  Cache = CGColorTransformGetCache(v19);
  if (Cache)
    v21 = Cache[2];
  else
    v21 = 0;
  if (!CGColorSpaceEqualToColorSpace((uint64_t)v18, v21))
  {
    v22 = *(const void **)(v7 + 16);
    if (v22)
      CFRelease(v22);
    goto LABEL_31;
  }
LABEL_33:
  v23 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x80172DF9uLL);
  if (v23)
  {
    v31 = v23;
    *(_QWORD *)v23 = RIPLayer_ripl_class;
    *(_OWORD *)(v23 + 8) = xmmword_185004C00;
    *((_QWORD *)v23 + 3) = 8388606;
    *((_QWORD *)v23 + 4) = RIPGetDepthForLayerFormat(0, v24, v25, v26, v27, v28, v29, v30);
    *((_QWORD *)v31 + 5) = 0;
    *((_DWORD *)v31 + 12) = 0;
    *((_QWORD *)v31 + 7) = 0;
    *((_DWORD *)v31 + 16) = 0;
    *((_QWORD *)v31 + 9) = 0;
    *(_QWORD *)(v7 + 48) = v31;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 8);
    if (a3)
      CFRetain(a3);
    a4[2] = (uint64_t)a3;
    a4[3] = 0;
    a4[8] = 0;
    a4[9] = 0;
  }
  else
  {
    a4 = 0;
    *(_QWORD *)(v7 + 48) = 0;
  }
  return a4;
}

uint64_t rips_Initialize(float64x2_t *a1)
{
  float64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *Cache;
  CGColorSpace *v6;
  CGDataProvider *Image;
  uint64_t v8;
  int64x2_t v9;
  float64x2_t v10;
  uint64_t v11;

  v2 = a1->f64[0];
  v3 = *(_QWORD *)(*(_QWORD *)&a1->f64[0] + 48);
  *(float64_t *)(*(_QWORD *)&v2 + 48) = a1->f64[1];
  a1->f64[1] = 0.0;
  v4 = *(_QWORD **)(*(_QWORD *)&v2 + 16);
  if (v4 && (Cache = CGColorTransformGetCache(v4)) != 0)
    v6 = (CGColorSpace *)Cache[2];
  else
    v6 = 0;
  Image = RIPLayerCreateImage(v3, v6, 1);
  *(_QWORD *)&a1[4].f64[0] = Image;
  if (!Image)
    return 512;
  v8 = *(_QWORD *)(v3 + 12);
  v9.i64[0] = (int)v8;
  v9.i64[1] = SHIDWORD(v8);
  v10 = vcvtq_f64_s64(v9);
  v11 = *(_QWORD *)(v3 + 20);
  v9.i64[0] = (int)v11;
  v9.i64[1] = SHIDWORD(v11);
  a1[2] = v10;
  a1[3] = vcvtq_f64_s64(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1->f64[0] + 80) + 12) & 0xF00;
}

void rips_Begin(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  CGColor *v10;
  char *Copy;
  char *v12;
  CGColorRef CopyWithAlpha;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  const void *v16;
  void (*v17)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);
  __CFDictionary *v18;
  __CFDictionary *v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);
  void (*v21)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double);
  __CFDictionary *v22;
  __CFDictionary *v23;
  void (*v24)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);

  if ((a2 & 0xD00) != 0)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        v10 = *(CGColor **)(v9 + 24);
      else
        v10 = 0;
      Copy = CGGStateCreateCopy(a5);
      *(_QWORD *)(a1 + 24) = Copy;
      if (*(double *)(*((_QWORD *)Copy + 15) + 8) != 1.0)
      {
        v12 = Copy;
        maybeCopyRenderingState((uint64_t)Copy);
        *(_QWORD *)(*((_QWORD *)v12 + 15) + 8) = 0x3FF0000000000000;
      }
      if (v10)
      {
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v10, 1.0);
        CGGStateSetFillColor(*(_QWORD *)(a1 + 24), CopyWithAlpha);
        if (CopyWithAlpha)
          CFRelease(CopyWithAlpha);
      }
      *(CGAffineTransform *)(*(_QWORD *)(a1 + 24) + 24) = CGAffineTransformIdentity;
      CGGStateResetClip(*(_QWORD *)(a1 + 24));
    }
    if ((a2 & 0x500) != 0)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v15 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleBegin"));
        v16 = *(const void **)(a1 + 16);
        if (v16)
          CFDictionarySetValue(v15, CFSTR("kCGContextStyle"), v16);
      }
      if (a3)
      {
        v17 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
        if (v17)
          v17(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v15);
      }
      if (v15)
        CFRelease(v15);
      if ((a2 & 0x400) != 0)
      {
        v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v19 = v18;
        if (v18)
          CFDictionarySetValue(v18, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleContentBegin"));
        if (a3)
        {
          v20 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
          if (v20)
            v20(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v19);
        }
        if (v19)
          CFRelease(v19);
        if (a3)
        {
          v21 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double))(a3 + 80);
          if (v21)
            v21(a3, a4, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
        }
        v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v23 = v22;
        if (v22)
          CFDictionarySetValue(v22, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleContentEnd"));
        if (a3)
        {
          v24 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
          if (v24)
            v24(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v23);
        }
        if (v23)
          CFRelease(v23);
      }
    }
  }
}

void rips_End(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  __CFDictionary *v7;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double);
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  void (*v15)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);
  void (*v16)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double);
  __CFDictionary *v17;
  __CFDictionary *v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);
  __CFDictionary *v20;
  __CFDictionary *v21;
  const void *v22;
  void (*v23)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *);

  if ((a2 & 0xD00) != 0)
  {
    if ((a2 & 0x100) != 0)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = Mutable;
      if (Mutable)
        CFDictionarySetValue(Mutable, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleContentBegin"));
      if (a3)
      {
        v15 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
        if (v15)
          v15(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v14);
      }
      if (v14)
        CFRelease(v14);
      if (a3)
      {
        v16 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double))(a3 + 80);
        if (v16)
          v16(a3, a4, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
      }
      v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v18 = v17;
      if (v17)
        CFDictionarySetValue(v17, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleContentEnd"));
      if (a3)
      {
        v19 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
        if (v19)
          v19(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v18);
      }
      if (v18)
        CFRelease(v18);
    }
    else if ((a2 & 0x800) != 0)
    {
      v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v8 = v7;
      if (v7)
      {
        CFDictionarySetValue(v7, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleBegin"));
        v9 = *(const void **)(a1 + 72);
        if (v9)
          CFDictionarySetValue(v8, CFSTR("kCGContextStyleContent"), v9);
        v10 = *(const void **)(a1 + 16);
        if (v10)
          CFDictionarySetValue(v8, CFSTR("kCGContextStyle"), v10);
      }
      if (a3)
      {
        v11 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
        if (v11)
          v11(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v8);
      }
      if (v8)
        CFRelease(v8);
      if (a3)
      {
        v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, double, double, double, double))(a3 + 80);
        if (v12)
          v12(a3, a4, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
      }
    }
    v20 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = v20;
    if (v20)
    {
      CFDictionarySetValue(v20, CFSTR("kCGContextStyleType"), CFSTR("kCGContextStyleEnd"));
      v22 = *(const void **)(a1 + 16);
      if (v22)
        CFDictionarySetValue(v21, CFSTR("kCGContextStyle"), v22);
    }
    if (a3)
    {
      v23 = *(void (**)(uint64_t, uint64_t, _QWORD, const __CFString *, __CFDictionary *))(a3 + 168);
      if (v23)
        v23(a3, a4, *(_QWORD *)(a1 + 24), CFSTR("kCGContextStyle"), v21);
    }
    if (v21)
      CFRelease(v21);
  }
}

void rips_Release(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[8];
  if (v3)
    CFRelease(v3);
  v4 = a1[3];
  if (v4)
    CGGStateRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
}

uint64_t compareIntervalIndirect(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  double v3;
  double v4;

  v3 = *(double *)(a1 + 16 * *a2) + *(double *)(a1 + 16 * *a2 + 8) * 0.5;
  v4 = *(double *)(a1 + 16 * *a3) + *(double *)(a1 + 16 * *a3 + 8) * 0.5;
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  else
    return v3 > v4;
}

void JBIG2Bitmap::~JBIG2Bitmap(void **this)
{
  *this = &off_1E1627DD8;
  free(this[3]);
}

{
  *this = &off_1E1627DD8;
  free(this[3]);
  JUMPOUT(0x186DC23C4);
}

uint64_t JBIG2Bitmap::getType(JBIG2Bitmap *this)
{
  return 0;
}

void JBIG2SymbolDict::~JBIG2SymbolDict(JBIG2SymbolDict *this)
{
  JBIG2SymbolDict::~JBIG2SymbolDict(this);
  JUMPOUT(0x186DC23C4);
}

{
  void *v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  void **v6;
  void **v7;

  *(_QWORD *)this = &off_1E1627F88;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((unsigned int *)this + 3);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          v3 = *((unsigned int *)this + 3);
        }
      }
      v2 = (void *)*((_QWORD *)this + 2);
    }
  }
  free(v2);
  v6 = (void **)*((_QWORD *)this + 3);
  if (v6)
  {
    free(*v6);
    MEMORY[0x186DC23C4](v6, 0x1010C40A1D9428BLL);
  }
  v7 = (void **)*((_QWORD *)this + 4);
  if (v7)
  {
    free(*v7);
    MEMORY[0x186DC23C4](v7, 0x1010C40A1D9428BLL);
  }
}

uint64_t JBIG2SymbolDict::getType(JBIG2SymbolDict *this)
{
  return 1;
}

void JBIG2PatternDict::~JBIG2PatternDict(JBIG2PatternDict *this)
{
  JBIG2PatternDict::~JBIG2PatternDict(this);
  JUMPOUT(0x186DC23C4);
}

{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;

  *(_QWORD *)this = &off_1E1627FB0;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((unsigned int *)this + 3);
      }
    }
  }
  free(*((void **)this + 2));
}

uint64_t JBIG2PatternDict::getType(JBIG2PatternDict *this)
{
  return 2;
}

void JBIG2CodeTable::~JBIG2CodeTable(void **this)
{
  *this = &off_1E1627F38;
  free(this[2]);
}

{
  *this = &off_1E1627F38;
  free(this[2]);
  JUMPOUT(0x186DC23C4);
}

uint64_t JBIG2CodeTable::getType(JBIG2CodeTable *this)
{
  return 3;
}

void JBIG2Stream::~JBIG2Stream(void ***this)
{
  JBIG2Stream::~JBIG2Stream(this);
  JUMPOUT(0x186DC23C4);
}

{
  void **v2;
  int v3;
  void **v4;
  int v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;

  *this = (void **)&off_1E1627E00;
  JBIG2Stream::close((JBIG2Stream *)this);
  v2 = this[3];
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 2) - 1;
    *((_DWORD *)v2 + 2) = v3;
    if (!v3)
    {
      (*((void (**)(void **))*v2 + 1))(v2);
      this[3] = 0;
    }
  }
  v4 = this[13];
  if (v4)
  {
    if (*((_DWORD *)v4 + 9))
    {
      v5 = *((_DWORD *)v4 + 8);
      if (v5 >= 1)
      {
        v6 = *((_DWORD *)v4 + 1);
        do
        {
          *(_DWORD *)v4 = v6;
          if (*((_DWORD *)v4 + 9))
            *((_DWORD *)v4 + 8) = v5 - 1;
          v6 = (*(unsigned __int8 (**)(void *))(*(_QWORD *)v4[3] + 32))(v4[3]);
          *((_DWORD *)v4 + 1) = v6;
          v5 = *((_DWORD *)v4 + 8);
        }
        while (v5 > 0);
      }
    }
    MEMORY[0x186DC23C4](v4, 0x1020C402DBDC18BLL);
  }
  v7 = this[14];
  if (v7)
  {
    free(*v7);
    MEMORY[0x186DC23C4](v7, 0x1010C40A1D9428BLL);
  }
  v8 = this[15];
  if (v8)
  {
    free(*v8);
    MEMORY[0x186DC23C4](v8, 0x1010C40A1D9428BLL);
  }
  v9 = this[16];
  if (v9)
  {
    free(*v9);
    MEMORY[0x186DC23C4](v9, 0x1010C40A1D9428BLL);
  }
  v10 = this[17];
  if (v10)
  {
    free(*v10);
    MEMORY[0x186DC23C4](v10, 0x1010C40A1D9428BLL);
  }
  v11 = this[18];
  if (v11)
  {
    free(*v11);
    MEMORY[0x186DC23C4](v11, 0x1010C40A1D9428BLL);
  }
  v12 = this[19];
  if (v12)
  {
    free(*v12);
    MEMORY[0x186DC23C4](v12, 0x1010C40A1D9428BLL);
  }
  v13 = this[20];
  if (v13)
  {
    free(*v13);
    MEMORY[0x186DC23C4](v13, 0x1010C40A1D9428BLL);
  }
  v14 = this[21];
  if (v14)
  {
    free(*v14);
    MEMORY[0x186DC23C4](v14, 0x1010C40A1D9428BLL);
  }
  v15 = this[22];
  if (v15)
  {
    free(*v15);
    MEMORY[0x186DC23C4](v15, 0x1010C40A1D9428BLL);
  }
  v16 = this[23];
  if (v16)
  {
    free(*v16);
    MEMORY[0x186DC23C4](v16, 0x1010C40A1D9428BLL);
  }
  v17 = this[24];
  if (v17)
  {
    free(*v17);
    MEMORY[0x186DC23C4](v17, 0x1010C40A1D9428BLL);
  }
  v18 = this[25];
  if (v18)
  {
    free(*v18);
    MEMORY[0x186DC23C4](v18, 0x1010C40A1D9428BLL);
  }
  v19 = this[26];
  if (v19)
  {
    free(*v19);
    MEMORY[0x186DC23C4](v19, 0x1010C40A1D9428BLL);
  }
  v20 = this[27];
  if (v20)
  {
    free(*v20);
    MEMORY[0x186DC23C4](v20, 0x1010C40A1D9428BLL);
  }
  v21 = this[28];
  if (v21)
  {
    free(*v21);
    MEMORY[0x186DC23C4](v21, 0x1010C40A1D9428BLL);
  }
  v22 = this[29];
  if (v22)
  {
    free(*v22);
    MEMORY[0x186DC23C4](v22, 0x1010C40A1D9428BLL);
  }
  v23 = this[30];
  if (v23)
    MEMORY[0x186DC23C4](v23, 0x1020C40EDED9539);
  v24 = this[31];
  if (v24)
    MEMORY[0x186DC23C4](v24, 0x1020C405AF6BDC9);
  v25 = this[2];
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
}

void JBIG2Stream::reset(JBIG2Stream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 8;
  *(_QWORD *)v2 = gmalloc(0x40uLL);
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *((_QWORD *)this + 9) = v2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 8) = v2;
    *((_QWORD *)this + 10) = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *((_QWORD *)this + 13);
    v5 = *((_QWORD *)this + 10);
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = 0;
    v6 = (_QWORD *)*((_QWORD *)this + 31);
    **((_QWORD **)this + 30) = v5;
    *v6 = v5;
    JBIG2Stream::readSegments(this);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10));
  }
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 8;
  *(_QWORD *)v7 = gmalloc(0x40uLL);
  *(_QWORD *)(v7 + 12) = 0;
  *((_QWORD *)this + 8) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 10) = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = *((_QWORD *)this + 13);
  v10 = *((_QWORD *)this + 10);
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 31);
  **((_QWORD **)this + 30) = v10;
  *v11 = v10;
  JBIG2Stream::readSegments(this);
  v12 = *((_QWORD *)this + 6);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 24);
    v12 = v13 + *(int *)(v12 + 20) * (uint64_t)*(int *)(v12 + 16);
  }
  else
  {
    v13 = 0;
  }
  *((_QWORD *)this + 11) = v13;
  *((_QWORD *)this + 12) = v12;
}

void sub_184B5B4D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Stream::close(JBIG2Stream *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t j;
  uint64_t v10;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 6) = 0;
  }
  v3 = *((_QWORD *)this + 8);
  if (!v3)
  {
    v7 = *((_QWORD *)this + 9);
    if (!v7)
      goto LABEL_20;
    goto LABEL_14;
  }
  v4 = *(_DWORD *)(v3 + 12);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v4 = *(_DWORD *)(v3 + 12);
      }
    }
  }
  free(*(void **)v3);
  MEMORY[0x186DC23C4](v3, 0x1080C40A085CBA5);
  v7 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 8) == v7)
  {
    v7 = 0;
    *((_QWORD *)this + 9) = 0;
  }
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
LABEL_14:
    v8 = *(_DWORD *)(v7 + 12);
    if (v8 >= 1)
    {
      for (j = 0; j < v8; ++j)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 8 * j);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          v8 = *(_DWORD *)(v7 + 12);
        }
      }
    }
    free(*(void **)v7);
    MEMORY[0x186DC23C4](v7, 0x1080C40A085CBA5);
    *((_QWORD *)this + 9) = 0;
  }
LABEL_20:
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t JBIG2Stream::getChar(JBIG2Stream *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (!v1 || (unint64_t)v1 >= *((_QWORD *)this + 12))
    return 0xFFFFFFFFLL;
  *((_QWORD *)this + 11) = v1 + 1;
  return *v1 ^ 0xFFu;
}

uint64_t FilterStream::getPos(FilterStream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

uint64_t JBIG2Stream::isBinary(JBIG2Stream *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 1);
}

uint64_t JBIG2Stream::lookChar(JBIG2Stream *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (v1 && (unint64_t)v1 < *((_QWORD *)this + 12))
    return *v1 ^ 0xFFu;
  else
    return 0xFFFFFFFFLL;
}

void JBIG2Stream::readSegments(JBIG2Stream *this)
{
  int v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  JBIG2Bitmap *GenericBitmap;
  int v41;
  char v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  char v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v79;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  signed int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char *v88;
  int Bits;
  unsigned int v90;
  int v91;
  __int16 v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  int v98;
  int v99;
  unsigned int v100;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  JBIG2Bitmap *v111;
  _DWORD *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  GList *v139;
  int v140;
  uint64_t v141;
  int *v142;
  int v143;
  uint64_t **v144;
  uint64_t **v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  uint64_t **v155;
  uint64_t **v156;
  uint64_t **v157;
  uint64_t v158;
  uint64_t i;
  char v160;
  void *v161;
  __int16 v162;
  unsigned int v163;
  void *v164;
  int v165;
  unsigned int v166;
  int v167;
  char *v168;
  int v169;
  char *v170;
  uint64_t v171;
  int v172;
  char *v173;
  char *v174;
  GList *v175;
  _DWORD *v176;
  int v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  const void **v182;
  unsigned int v183;
  const void **v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char v193;
  uint64_t TextRegion;
  unsigned int v195;
  int v196;
  unsigned int v197;
  JBIG2Bitmap *v198;
  unsigned int v199;
  JBIG2Bitmap *v200;
  unsigned int v201;
  JBIG2Bitmap *v202;
  _BYTE *v203;
  int v204;
  int v205;
  int *v206;
  JBIG2Bitmap *v207;
  int v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  int v219;
  BOOL v220;
  BOOL v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  JBIG2Bitmap *v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  GList *v239;
  unsigned int v240;
  uint64_t v241;
  int *v242;
  uint64_t v243;
  int v244;
  uint64_t **v245;
  uint64_t **v246;
  int v247;
  unsigned int v248;
  unsigned int j;
  uint64_t **Segment;
  JBIG2Bitmap *Slice;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  signed int v270;
  JBIG2Bitmap *GenericRefinementRegion;
  JBIG2Bitmap *v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t **v278;
  uint64_t **v279;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  void *v284;
  void *v285;
  _DWORD *v286;
  JBIG2Bitmap *v287;
  uint64_t v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  uint64_t v292;
  _DWORD *v293;
  unint64_t v294;
  unsigned int v295;
  _DWORD *v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  void *v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  JBIG2Bitmap *v306;
  JBIG2Bitmap *v307;
  int v308;
  int v309;
  void *v310;
  uint64_t v311;
  JBIG2Bitmap *v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  int v325;
  void *v326;
  int v327;
  int v328;
  void *v329;
  int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  int v335;
  unsigned int *v336;
  unsigned int v337;
  int v338;
  JBIG2Bitmap *v339;
  int v340;
  int v341;
  int v342;
  unsigned int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  unsigned int v349;
  int v350;
  int v351;
  uint64_t v352;
  JBIG2Bitmap *v353;
  unsigned int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  uint64_t v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  int v391;
  int v392;
  unsigned int v393;
  uint64_t v394;
  int v395;
  unsigned int v396;
  signed int v397;
  int v398;
  unsigned int v399;
  uint64_t v400;
  int v401;
  int v402;
  JBIG2Bitmap *v403;
  JBIG2Bitmap *v404;
  uint64_t **v405;
  int v406;
  int v407;
  uint64_t v408;
  int v409;
  unsigned int v410;
  JBIG2Bitmap *v411;
  JBIG2Bitmap *v412;
  _DWORD *v413;
  unsigned int v414;
  int v415;
  signed int v416;
  int v417;
  signed int v418;
  uint64_t v419;
  int v420;
  int v421;
  unsigned int v422;
  _QWORD *v423;
  int v424;
  int v425;
  char v426;
  unsigned int v427;
  int v428;
  int v429;
  unsigned int v430;
  GList *v431;
  int v432;
  unsigned int *v433;
  unsigned int *v434;
  unsigned int *v435;
  unsigned int v436[2];
  unsigned int v437;
  int v438;
  int v439[2];
  unsigned int v440[2];
  unsigned int v441[2];
  unsigned int v442;
  unsigned int v443;
  unsigned int v444[2];
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  unint64_t v459;
  unsigned int v460[4];
  uint64_t v461;

  v434 = (unsigned int *)((char *)this + 32);
  v433 = (unsigned int *)((char *)this + 36);
  v461 = *MEMORY[0x1E0C80C00];
  v437 = 0;
  *(_QWORD *)v436 = 0;
  while (2)
  {
    if (!JBIG2Stream::readULong(this, &v437))
      return;
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
    if (v2 == -1)
      goto LABEL_688;
    v3 = v2;
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
    if (v4 == -1)
      goto LABEL_688;
    v5 = v4;
    v6 = v4 >> 5;
    if (v4 >> 5 == 7)
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
      if (v7 == -1)
        goto LABEL_688;
      v8 = v7;
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
      if (v9 == -1)
        goto LABEL_688;
      v10 = v9;
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
      if (v11 == -1)
        goto LABEL_688;
      v6 = ((v8 << 16) | (v5 << 24) | (v10 << 8) | v11) & 0x1FFFFFFF;
      v12 = (v6 + 9) >> 3;
      do
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        --v12;
      }
      while (v12);
    }
    if (HIBYTE(v6))
      goto LABEL_688;
    v13 = (unsigned int *)gmallocn(v6, 4u);
    if (v6)
    {
      if (!v13)
        goto LABEL_688;
    }
    v14 = v437;
    v435 = v13;
    if (v437 > 0x100)
    {
      if (v437 > 0x10000)
      {
        if (!v6)
          goto LABEL_31;
        v23 = v6;
        v24 = v13;
        while (JBIG2Stream::readULong(this, v24))
        {
          ++v24;
          if (!--v23)
            goto LABEL_31;
        }
      }
      else
      {
        if (!v6)
          goto LABEL_31;
        v18 = v6;
        v19 = (int *)v13;
        while (1)
        {
          v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
          if (v20 == -1)
            break;
          v21 = v20;
          v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
          if (v22 == -1)
            break;
          *v19++ = v22 | (v21 << 8);
          if (!--v18)
            goto LABEL_31;
        }
      }
LABEL_687:
      free(v435);
LABEL_688:
      v355 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
      error(v355, "Unexpected EOF in JBIG2 stream");
      return;
    }
    if (v6)
    {
      v15 = v6;
      v16 = v13;
      do
      {
        v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v17 == -1)
          goto LABEL_687;
        *v16++ = v17;
      }
      while (--v15);
    }
LABEL_31:
    if ((v3 & 0x40) != 0)
    {
      if (!JBIG2Stream::readULong(this, &v436[1]))
        goto LABEL_687;
    }
    else
    {
      v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
      if (v25 == -1)
        goto LABEL_687;
      v436[1] = v25;
    }
    if (!JBIG2Stream::readULong(this, v436))
      goto LABEL_687;
    if (!*((_QWORD *)this + 6) && ((v3 & 0x3C) == 4 || (v3 & 0x3Fu) - 20 <= 0x17))
    {
      v356 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
      error(v356, "First JBIG2 segment associated with a page must be a page information segment");
      goto LABEL_705;
    }
    v26 = 1;
    v27 = 0;
    switch(v3 & 0x3F)
    {
      case '$':
        goto LABEL_41;
      case '%':
      case ')':
      case ',':
      case '-':
      case '.':
      case '/':
      case '1':
      case '3':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
LABEL_186:
        v102 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
        error(v102, "Unknown segment type in JBIG2 stream");
        v103 = v436[0];
        if (!v436[0])
          goto LABEL_663;
        while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10)) != -1)
        {
          if (!--v103)
            goto LABEL_663;
        }
        goto LABEL_687;
      case '&':
      case '\'':
        v26 = 0;
LABEL_41:
        v28 = v436[0];
        v445 = 0;
        if (!JBIG2Stream::readULong(this, &v445))
          goto LABEL_662;
        v444[0] = 0;
        if (!JBIG2Stream::readULong(this, v444))
          goto LABEL_662;
        v443 = 0;
        if (!JBIG2Stream::readULong(this, &v443))
          goto LABEL_662;
        v442 = 0;
        if (!JBIG2Stream::readULong(this, &v442))
          goto LABEL_662;
        v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        v30 = v29;
        if (v29 == -1)
          goto LABEL_662;
        v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v31 == -1)
          goto LABEL_662;
        v32 = (v31 >> 1) & 3;
        v33 = (v31 >> 3) & 1;
        if ((v31 & 1) != 0)
        {
          v39 = v444[0];
          GenericBitmap = (JBIG2Bitmap *)JBIG2Stream::readGenericBitmap(this, 1, v445, v444[0], v32, v33, 0, 0, (int *)&v447, (int32x4_t *)v460, v28 - 18);
        }
        else
        {
          v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
          if (v32)
          {
            if (v34 == -1)
              goto LABEL_662;
            v35 = v34 | 0xFFFFFF00;
            if ((v34 & 0x80) == 0)
              v35 = v34;
            v447 = v35;
            v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v36 == -1)
              goto LABEL_662;
            v37 = v36 | 0xFFFFFF00;
            if ((v36 & 0x80) == 0)
              v37 = v36;
            v460[0] = v37;
            v38 = v32;
          }
          else
          {
            if (v34 == -1)
              goto LABEL_662;
            v254 = v34 | 0xFFFFFF00;
            if ((v34 & 0x80) == 0)
              v254 = v34;
            v447 = v254;
            v255 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v255 == -1)
              goto LABEL_662;
            v256 = v255 | 0xFFFFFF00;
            if ((v255 & 0x80) == 0)
              v256 = v255;
            v460[0] = v256;
            v257 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v257 == -1)
              goto LABEL_662;
            v258 = v257 | 0xFFFFFF00;
            if ((v257 & 0x80) == 0)
              v258 = v257;
            LODWORD(v448) = v258;
            v259 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v259 == -1)
              goto LABEL_662;
            v260 = v259 | 0xFFFFFF00;
            if ((v259 & 0x80) == 0)
              v260 = v259;
            v460[1] = v260;
            v261 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v261 == -1)
              goto LABEL_662;
            v262 = v261 | 0xFFFFFF00;
            if ((v261 & 0x80) == 0)
              v262 = v261;
            HIDWORD(v448) = v262;
            v263 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v263 == -1)
              goto LABEL_662;
            v264 = v263 | 0xFFFFFF00;
            if ((v263 & 0x80) == 0)
              v264 = v263;
            v460[2] = v264;
            v265 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v265 == -1)
              goto LABEL_662;
            v266 = v265 | 0xFFFFFF00;
            if ((v265 & 0x80) == 0)
              v266 = v265;
            v449 = v266;
            v267 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v267 == -1)
              goto LABEL_662;
            v38 = 0;
            v268 = v267 | 0xFFFFFF00;
            if ((v267 & 0x80) == 0)
              v268 = v267;
            v460[3] = v268;
          }
          JBIG2Stream::resetGenericStats(this, v38, 0);
          JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
          v39 = v444[0];
          GenericBitmap = (JBIG2Bitmap *)JBIG2Stream::readGenericBitmap(this, 0, v445, v444[0], v32, v33, 0, 0, (int *)&v447, (int32x4_t *)v460, 0);
        }
        v226 = GenericBitmap;
        if (!GenericBitmap)
          goto LABEL_662;
        if ((v26 & 1) != 0)
        {
          *((_DWORD *)GenericBitmap + 2) = v14;
          GList::append(*((GList **)this + 8), GenericBitmap);
        }
        else
        {
          v253 = v442;
          if (*v433 == -1 && v442 + v39 > *((_DWORD *)this + 10))
            JBIG2Bitmap::expand(*((JBIG2Bitmap **)this + 6), v442 + v39, *((_DWORD *)this + 11));
          JBIG2Bitmap::combine(*((_QWORD *)this + 6), v226, v443, v253, v30 & 7);
          (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v226 + 8))(v226);
        }
        goto LABEL_663;
      case '(':
        goto LABEL_99;
      case '*':
      case '+':
        v27 = 1;
LABEL_99:
        v445 = 0;
        if (!JBIG2Stream::readULong(this, &v445))
          goto LABEL_662;
        v444[0] = 0;
        if (!JBIG2Stream::readULong(this, v444))
          goto LABEL_662;
        v443 = 0;
        if (!JBIG2Stream::readULong(this, &v443))
          goto LABEL_662;
        v442 = 0;
        if (!JBIG2Stream::readULong(this, &v442))
          goto LABEL_662;
        v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        v57 = v56;
        if (v56 == -1)
          goto LABEL_662;
        v58 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        v59 = v58;
        if (v58 == -1)
          goto LABEL_662;
        if ((v58 & 1) != 0)
          goto LABEL_119;
        v60 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v60 == -1)
          goto LABEL_662;
        v61 = v60 | 0xFFFFFF00;
        if ((v60 & 0x80) == 0)
          v61 = v60;
        v447 = v61;
        v62 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v62 == -1)
          goto LABEL_662;
        v63 = v62 | 0xFFFFFF00;
        if ((v62 & 0x80) == 0)
          v63 = v62;
        v460[0] = v63;
        v64 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v64 == -1)
          goto LABEL_662;
        v65 = v64 | 0xFFFFFF00;
        if ((v64 & 0x80) == 0)
          v65 = v64;
        LODWORD(v448) = v65;
        v66 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v66 == -1)
          goto LABEL_662;
        v67 = v66 | 0xFFFFFF00;
        if ((v66 & 0x80) == 0)
          v67 = v66;
        v460[1] = v67;
LABEL_119:
        if (((v6 != 0) & ~v27) == 0 && *v433 == -1 && v444[0] + v442 > *((_DWORD *)this + 10))
          JBIG2Bitmap::expand(*((JBIG2Bitmap **)this + 6), v444[0] + v442, *((_DWORD *)this + 11));
        if (v6 >= 2)
        {
          v68 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
          error(v68, "Bad reference in JBIG2 generic refinement segment");
          goto LABEL_663;
        }
        if (v6 == 1)
        {
          Segment = JBIG2Stream::findSegment(this, *v435);
          if (!Segment
            || (Slice = (JBIG2Bitmap *)Segment, ((unsigned int (*)(uint64_t **))(*Segment)[2])(Segment)))
          {
            v252 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
            error(v252, "Bad bitmap reference in JBIG2 generic refinement segment");
            goto LABEL_663;
          }
          v269 = v445;
          v270 = v444[0];
        }
        else
        {
          v269 = v445;
          v270 = v444[0];
          Slice = (JBIG2Bitmap *)JBIG2Bitmap::getSlice(*((JBIG2Bitmap **)this + 6), v443, v442, v445, v444[0]);
        }
        JBIG2Stream::resetRefinementStats(this, v59 & 1, 0);
        JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
        GenericRefinementRegion = (JBIG2Bitmap *)JBIG2Stream::readGenericRefinementRegion(this, v269, v270, v59 & 1, (v59 >> 1) & 1, Slice, 0, 0, (int *)&v447, (int *)v460);
        v272 = GenericRefinementRegion;
        if (GenericRefinementRegion)
        {
          if (v27)
          {
            JBIG2Bitmap::combine(*((_QWORD *)this + 6), GenericRefinementRegion, v443, v442, v57 & 7);
            (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v272 + 8))(v272);
          }
          else
          {
            *((_DWORD *)GenericRefinementRegion + 2) = v14;
            GList::append(*((GList **)this + 8), GenericRefinementRegion);
          }
          if (v6 == 1)
          {
            JBIG2Stream::discardSegment(this, *v435);
          }
          else if (Slice)
          {
            (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)Slice + 8))(Slice);
          }
        }
        else
        {
          v273 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
          error(v273, "Bad bitmap in JBIG2 generic refinement region");
        }
        goto LABEL_663;
      case '0':
        if (!JBIG2Stream::readULong(this, v434))
          goto LABEL_662;
        if (!JBIG2Stream::readULong(this, v433))
          goto LABEL_662;
        if (!JBIG2Stream::readULong(this, &v447))
          goto LABEL_662;
        if (!JBIG2Stream::readULong(this, v460))
          goto LABEL_662;
        v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v90 == -1)
          goto LABEL_662;
        v91 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        v92 = v91;
        if (v91 == -1)
          goto LABEL_662;
        v93 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v93 == -1)
          goto LABEL_662;
        *((_DWORD *)this + 14) = (v90 >> 3) & 3;
        v94 = *((_DWORD *)this + 9);
        if (v94 == -1)
          v94 = ((unsigned __int16)v93 | (unsigned __int16)(v92 << 8)) & 0x7FFF;
        *((_DWORD *)this + 10) = v94;
        *((_DWORD *)this + 11) = (v90 >> 2) & 1;
        v95 = *((_QWORD *)this + 6);
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
        v96 = operator new();
        JBIG2Bitmap::JBIG2Bitmap((JBIG2Bitmap *)v96, 0, *((_DWORD *)this + 8), *((_DWORD *)this + 10));
        *((_QWORD *)this + 6) = v96;
        v97 = *(void **)(v96 + 24);
        if (!v97)
          goto LABEL_662;
        v98 = *(_DWORD *)(v96 + 16);
        v99 = *(_DWORD *)(v96 + 20);
        if (*((_DWORD *)this + 11))
          memset(v97, 255, v99 * (uint64_t)v98);
        else
          bzero(v97, v99 * (uint64_t)v98);
        goto LABEL_663;
      case '2':
        if (v436[0])
        {
          v79 = v436[0] - 1;
          while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10)) != -1
               && v79-- != 0)
            ;
        }
        goto LABEL_663;
      case '4':
        if (v436[0])
        {
          v100 = v436[0] - 1;
          while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10)) != -1
               && v100-- != 0)
            ;
        }
        goto LABEL_663;
      case '5':
        v393 = v14;
        v81 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
        if (v81 == -1)
          goto LABEL_662;
        v447 = 0;
        if (!JBIG2Stream::readULong(this, &v447))
          goto LABEL_662;
        v460[0] = 0;
        if (!JBIG2Stream::readULong(this, v460))
          goto LABEL_662;
        *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
        v82 = (char *)gmalloc(0x80uLL);
        v83 = ((v81 >> 1) & 7) + 1;
        v84 = v447;
        if ((int)v447 >= (int)v460[0])
        {
          v86 = 0;
          v87 = 8;
        }
        else
        {
          v85 = 0;
          v86 = 0;
          v87 = 8;
          do
          {
            if (v86 == v87)
            {
              if (v85 >> 22)
                goto LABEL_662;
              v82 = (char *)greallocn(v82, v85, 0x10u);
              v87 = v85;
            }
            *(_DWORD *)&v82[16 * v86] = v84;
            v88 = &v82[16 * v86];
            *((_DWORD *)v88 + 1) = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v81 >> 1) & 7) + 1);
            Bits = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v81 >> 4) & 7) + 1);
            *((_DWORD *)v88 + 2) = Bits;
            v84 += 1 << Bits;
            ++v86;
            v85 += 2;
          }
          while (v84 < (int)v460[0]);
        }
        v165 = v81 & 1;
        v166 = v165 + v86 + 3;
        if (v166 > v87)
          v82 = (char *)greallocn(v82, v166, 0x10u);
        *(_DWORD *)&v82[16 * v86] = v447 - 1;
        v167 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v81 >> 1) & 7) + 1);
        v168 = &v82[16 * v86];
        *((_DWORD *)v168 + 1) = v167;
        *((_DWORD *)v168 + 2) = -3;
        *(_DWORD *)&v82[16 * (v86 + 1)] = v460[0];
        v169 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), ((v81 >> 1) & 7) + 1);
        v170 = &v82[16 * (v86 + 1)];
        *((_DWORD *)v170 + 1) = v169;
        *((_DWORD *)v170 + 2) = 32;
        v171 = (v86 + 2);
        if (v165)
        {
          *(_DWORD *)&v82[16 * (v86 + 2)] = 0;
          v172 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), v83);
          v173 = &v82[16 * v171];
          *((_DWORD *)v173 + 1) = v172;
          *((_DWORD *)v173 + 2) = -2;
          LODWORD(v171) = v86 + 3;
        }
        v174 = &v82[16 * v171];
        *(_QWORD *)v174 = 0;
        *((_DWORD *)v174 + 2) = -1;
        JBIG2HuffmanDecoder::buildTable(v82, v171);
        v175 = (GList *)*((_QWORD *)this + 8);
        v176 = (_DWORD *)operator new();
        v176[2] = v393;
        *(_QWORD *)v176 = &off_1E1627F38;
        *((_QWORD *)v176 + 2) = v82;
        GList::append(v175, v176);
        goto LABEL_663;
      case '>':
        if (v436[0])
        {
          v77 = v436[0] - 1;
          while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10)) != -1
               && v77-- != 0)
            ;
        }
        goto LABEL_663;
      default:
        switch(v3 & 0x3F)
        {
          case 0:
            v392 = v14;
            *(_QWORD *)v440 = 0;
            *(_QWORD *)v441 = 0;
            *(_QWORD *)v439 = 0;
            v438 = 0;
            v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v69 == -1)
              goto LABEL_692;
            v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            v71 = v70;
            if (v70 == -1)
              goto LABEL_692;
            v72 = v70 | (v69 << 8);
            v402 = (v72 >> 10) & 3;
            v399 = v72;
            if ((v70 & 1) != 0)
              goto LABEL_233;
            v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v402)
            {
              if (v73 == -1)
                goto LABEL_692;
              v74 = v73 | 0xFFFFFF00;
              if ((v73 & 0x80) == 0)
                v74 = v73;
              v447 = v74;
              v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v75 == -1)
                goto LABEL_692;
              v76 = v75 | 0xFFFFFF00;
              if ((v75 & 0x80) == 0)
                v76 = v75;
              v460[0] = v76;
            }
            else
            {
              if (v73 == -1)
                goto LABEL_692;
              v116 = v73 | 0xFFFFFF00;
              if ((v73 & 0x80) == 0)
                v116 = v73;
              v447 = v116;
              v117 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v117 == -1)
                goto LABEL_692;
              v118 = v117 | 0xFFFFFF00;
              if ((v117 & 0x80) == 0)
                v118 = v117;
              v460[0] = v118;
              v119 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v119 == -1)
                goto LABEL_692;
              v120 = v119 | 0xFFFFFF00;
              if ((v119 & 0x80) == 0)
                v120 = v119;
              LODWORD(v448) = v120;
              v121 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v121 == -1)
                goto LABEL_692;
              v122 = v121 | 0xFFFFFF00;
              if ((v121 & 0x80) == 0)
                v122 = v121;
              v460[1] = v122;
              v123 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v123 == -1)
                goto LABEL_692;
              v124 = v123 | 0xFFFFFF00;
              if ((v123 & 0x80) == 0)
                v124 = v123;
              HIDWORD(v448) = v124;
              v125 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v125 == -1)
                goto LABEL_692;
              v126 = v125 | 0xFFFFFF00;
              if ((v125 & 0x80) == 0)
                v126 = v125;
              v460[2] = v126;
              v127 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v127 == -1)
                goto LABEL_692;
              v128 = v127 | 0xFFFFFF00;
              if ((v127 & 0x80) == 0)
                v128 = v127;
              v449 = v128;
              v129 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v129 == -1)
                goto LABEL_692;
              v130 = v129 | 0xFFFFFF00;
              if ((v129 & 0x80) == 0)
                v130 = v129;
              v460[3] = v130;
            }
            v72 = v399;
LABEL_233:
            v407 = (v72 >> 12) & 1;
            if ((v71 & 2) != 0 && !v407)
            {
              v131 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v131 == -1)
                goto LABEL_692;
              v132 = v131 | 0xFFFFFF00;
              if ((v131 & 0x80) == 0)
                v132 = v131;
              v445 = v132;
              v133 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v133 == -1)
                goto LABEL_692;
              v134 = v133 | 0xFFFFFF00;
              if ((v133 & 0x80) == 0)
                v134 = v133;
              v444[0] = v134;
              v135 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v135 == -1)
                goto LABEL_692;
              v136 = v135 | 0xFFFFFF00;
              if ((v135 & 0x80) == 0)
                v136 = v135;
              v446 = v136;
              v137 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v137 == -1)
                goto LABEL_692;
              v138 = v137 | 0xFFFFFF00;
              if ((v137 & 0x80) == 0)
                v138 = v137;
              v444[1] = v138;
            }
            v443 = 0;
            if (!JBIG2Stream::readULong(this, &v443))
              goto LABEL_692;
            v442 = 0;
            if (!JBIG2Stream::readULong(this, &v442))
              goto LABEL_692;
            v139 = (GList *)operator new();
            *((_DWORD *)v139 + 2) = 8;
            v430 = v71;
            *(_QWORD *)v139 = gmalloc(0x40uLL);
            *((_DWORD *)v139 + 3) = 0;
            *((_DWORD *)v139 + 4) = 0;
            v140 = 0;
            if (!v6)
            {
              v147 = v442;
              goto LABEL_263;
            }
            v141 = v6;
            v142 = (int *)v435;
            do
            {
              v143 = *v142++;
              v144 = JBIG2Stream::findSegment(this, v143);
              if (v144)
              {
                v145 = v144;
                if (((unsigned int (*)(uint64_t **))(*v144)[2])(v144) == 1)
                {
                  v146 = *((_DWORD *)v145 + 3);
                  if (__CFADD__(v146, v140))
                    goto LABEL_691;
                  v140 += v146;
                }
                else if (((unsigned int (*)(uint64_t **))(*v145)[2])(v145) == 3)
                {
                  GList::append(v139, v145);
                }
              }
              --v141;
            }
            while (v141);
            v147 = v442;
            if (!__CFADD__(v442, v140))
            {
LABEL_263:
              v148 = v147 + v140;
              v149 = 1;
              if (v147 + v140 >= 2)
              {
                v150 = v147 + v140;
                do
                {
                  ++v149;
                  v220 = v150 > 3;
                  v150 >>= 1;
                }
                while (v220);
              }
              v151 = gmallocn(v147 + v140, 8u);
              v152 = v151;
              if (v148)
                bzero(v151, 8 * (v148 - 1) + 8);
              v422 = v147 + v140;
              v410 = v147;
              if (v6)
              {
                v153 = 0;
                v154 = 0;
                v155 = 0;
                do
                {
                  v156 = JBIG2Stream::findSegment(this, v435[v153]);
                  if (v156 && (v157 = v156, ((unsigned int (*)(uint64_t **))(*v156)[2])(v156) == 1))
                  {
                    v158 = *((unsigned int *)v157 + 3);
                    if ((_DWORD)v158)
                    {
                      for (i = 0; i != v158; ++i)
                        v152[(v154 + i)] = v157[2][i];
                      v154 += i;
                    }
                  }
                  else
                  {
                    v157 = v155;
                  }
                  ++v153;
                  v155 = v157;
                }
                while (v153 != v6);
              }
              else
              {
                v157 = 0;
              }
              v160 = v430;
              if ((v430 & 1) == 0)
              {
                v372 = 0;
                v374 = 0;
                v375 = 0;
                v161 = 0;
                v162 = v399;
                goto LABEL_310;
              }
              v163 = (v430 >> 2) & 3;
              v162 = v399;
              if (v163)
              {
                if (v163 != 1)
                {
                  if (!*((_DWORD *)v139 + 3))
                    goto LABEL_706;
                  v374 = *(_QWORD *)(**(_QWORD **)v139 + 16);
                  v163 = 1;
                  goto LABEL_295;
                }
                v163 = 0;
                v164 = &huffTableE;
              }
              else
              {
                v164 = &huffTableD;
              }
              v374 = (uint64_t)v164;
LABEL_295:
              v177 = (v430 >> 4) & 3;
              if (v177)
              {
                if (v177 == 1)
                {
                  v161 = &huffTableC;
                }
                else
                {
                  if (v163 >= *((_DWORD *)v139 + 3))
                    goto LABEL_706;
                  v178 = *(_QWORD *)(*(_QWORD *)v139 + 8 * v163++);
                  v161 = *(void **)(v178 + 16);
                }
              }
              else
              {
                v161 = &huffTableB;
              }
              if ((v430 & 0x40) != 0)
              {
                if (v163 >= *((_DWORD *)v139 + 3))
                  goto LABEL_706;
                v180 = *(_QWORD *)(*(_QWORD *)v139 + 8 * v163++);
                v179 = *(void **)(v180 + 16);
              }
              else
              {
                v179 = &huffTableA;
              }
              v372 = (uint64_t)v179;
              if ((v430 & 0x80) != 0)
              {
                if (v163 >= *((_DWORD *)v139 + 3))
                {
LABEL_706:
                  v366 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v366, "Missing code table in JBIG2 symbol dictionary");
                  free(*(void **)v139);
                  MEMORY[0x186DC23C4](v139, 0x1080C40A085CBA5);
                  v413 = 0;
                  goto LABEL_698;
                }
                v181 = *(void **)(*(_QWORD *)(*(_QWORD *)v139 + 8 * v163) + 16);
              }
              else
              {
                v181 = &huffTableA;
              }
              v375 = (uint64_t)v181;
LABEL_310:
              free(*(void **)v139);
              MEMORY[0x186DC23C4](v139, 0x1080C40A085CBA5);
              if ((v430 & 1) != 0)
              {
                *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
                if ((v430 & 2) != 0)
                {
LABEL_318:
                  v184 = 0;
                  if ((v162 & 0x100) != 0 && v157)
                    v184 = (const void **)v157[4];
                  JBIG2Stream::resetRefinementStats(this, v407, v184);
                  v413 = 0;
                  v426 = 1;
                }
                else
                {
                  v413 = gmallocn(v410, 4u);
                  v426 = 0;
                }
                v183 = v422;
                goto LABEL_323;
              }
              v182 = 0;
              if ((v162 & 0x100) != 0 && v157)
                v182 = (const void **)v157[3];
              JBIG2Stream::resetGenericStats(this, v402, v182);
              JBIG2Stream::resetIntStats((void ***)this, v149);
              JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
              v162 = v399;
              v183 = v422;
              if ((v430 & 2) != 0)
                goto LABEL_318;
              v413 = 0;
              v426 = 1;
LABEL_323:
              v388 = (uint64_t)v161;
              if (!v410)
                goto LABEL_378;
              v379 = 0;
              v185 = 0;
              do
              {
                if ((v160 & 1) != 0)
                  JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), &v441[1], v374);
                else
                  JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), (int *)&v441[1], *((uint64_t **)this + 16));
                if ((v441[1] & 0x80000000) != 0 && v185 <= -v441[1])
                {
                  v367 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v367, "Bad delta-height value in JBIG2 symbol dictionary");
LABEL_709:
                  v363 = v410;
                  goto LABEL_699;
                }
                v186 = v441[1] + v185;
                if (v186 > 0x40000000)
                {
                  v368 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v368, "Bad height value in JBIG2 symbol dictionary");
                  goto LABEL_709;
                }
                v418 = v186;
                v187 = 0;
                v188 = 0;
                v189 = 0;
                v190 = v379;
                if (v379 <= v410)
                  v191 = v410;
                else
                  v191 = v379;
                if ((v160 & 1) != 0)
                {
LABEL_335:
                  v192 = JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), v441, v388);
                  goto LABEL_337;
                }
                while (1)
                {
                  v192 = JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), (int *)v441, *((uint64_t **)this + 17));
LABEL_337:
                  if (!v192)
                    break;
                  if ((v441[0] & 0x80000000) != 0 && v188 <= -v441[0])
                  {
                    v359 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v359, "Bad delta-height value in JBIG2 symbol dictionary");
                    goto LABEL_698;
                  }
                  v188 += v441[0];
                  v193 = v430;
                  if (v188 >= 0x40000001)
                  {
                    v360 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v360, "Bad width value in JBIG2 symbol dictionary");
                    goto LABEL_698;
                  }
                  if (v191 == v190)
                  {
                    v361 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v361, "Too many symbols in JBIG2 symbol dictionary");
                    goto LABEL_698;
                  }
                  if ((v426 & 1) != 0)
                  {
                    if ((v430 & 2) == 0)
                    {
                      TextRegion = JBIG2Stream::readGenericBitmap(this, 0, v188, v418, v402, 0, 0, 0, (int *)&v447, (int32x4_t *)v460, 0);
                      v152[(v140 + v190)] = TextRegion;
                      goto LABEL_359;
                    }
                    if ((v430 & 1) != 0)
                    {
                      if (!JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), &v440[1], v375))goto LABEL_376;
                      if (v440[1] == 1)
                      {
                        v195 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), v149);
                        JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), v440, (uint64_t)&huffTableO);
                        JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), &v439[1], (uint64_t)&huffTableO);
                        JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), v439, (uint64_t)&huffTableA);
                        *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
                        JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
LABEL_353:
                        if (v195 >= v140 + (int)v190)
                        {
                          v369 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                          error(v369, "Invalid symbol ID in JBIG2 symbol dictionary");
                          goto LABEL_698;
                        }
                        TextRegion = JBIG2Stream::readGenericRefinementRegion(this, v188, v418, v407, 0, (JBIG2Bitmap *)v152[v195], v440[0], v439[1], (int *)&v445, (int *)v444);
                        goto LABEL_356;
                      }
                      v196 = v140 + v190;
                      TextRegion = (uint64_t)JBIG2Stream::readTextRegion((uint64_t)this, 1, 1, v188, v418, v440[1], 0, v140 + (int)v190, 0, v149, (uint64_t)v152, 0, 0, 0, 1, 0, (uint64_t)&huffTableF, (uint64_t)&huffTableH, (uint64_t)&huffTableK,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableA,
                                              v407,
                                              (int *)&v445,
                                              (int *)v444);
                    }
                    else
                    {
                      if (!JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), (int *)&v440[1], *((uint64_t **)this + 19)))goto LABEL_376;
                      if (v440[1] == 1)
                      {
                        v195 = JArithmeticDecoder::decodeIAID(*((JArithmeticDecoder **)this + 13), v149, *((uint64_t **)this + 29));
                        JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), (int *)v440, *((uint64_t **)this + 24));
                        JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), &v439[1], *((uint64_t **)this + 25));
                        goto LABEL_353;
                      }
                      TextRegion = (uint64_t)JBIG2Stream::readTextRegion((uint64_t)this, 0, 1, v188, v418, v440[1], 0, v140 + (int)v190, 0, v149, (uint64_t)v152, 0, 0, 0, 1, 0, (uint64_t)&huffTableF, (uint64_t)&huffTableH, (uint64_t)&huffTableK,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableO,
                                              (uint64_t)&huffTableA,
                                              v407,
                                              (int *)&v445,
                                              (int *)v444);
LABEL_356:
                      v196 = v140 + v190;
                    }
                    v152[v196] = TextRegion;
LABEL_359:
                    v193 = v430;
                    if (!TextRegion)
                      goto LABEL_698;
                    goto LABEL_360;
                  }
                  v413[v190] = v188;
                  v189 += v188;
LABEL_360:
                  ++v190;
                  ++v187;
                  if ((v193 & 1) != 0)
                    goto LABEL_335;
                }
                v160 = v430;
                v183 = v422;
                v185 = v418;
                if ((v426 & 1) != 0)
                {
                  v197 = v410;
                  goto LABEL_377;
                }
                JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), v439, v372);
                *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
                if ((v189 | v418) >= 0x10000)
                {
                  v371 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v371, "Unreasonable size for collective bitmap");
LABEL_698:
                  v363 = v410;
                  if (v410)
                  {
LABEL_699:
                    v364 = v363;
                    do
                    {
                      v365 = v152[v140];
                      if (v365)
                        (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
                      ++v140;
                      --v364;
                    }
                    while (v364);
                  }
                  free(v152);
                  if (v413)
                    free(v413);
                  goto LABEL_705;
                }
                if (v439[0])
                {
                  v198 = (JBIG2Bitmap *)JBIG2Stream::readGenericBitmap(this, 1, v189, v418, 0, 0, 0, 0, 0, 0, v439[0]);
                  v199 = v379;
                  goto LABEL_371;
                }
                v200 = (JBIG2Bitmap *)operator new();
                JBIG2Bitmap::JBIG2Bitmap(v200, 0, v189, v418);
                v201 = ((v189 + 7) >> 3) * v418;
                v439[0] = v201;
                v202 = v200;
                v203 = (_BYTE *)*((_QWORD *)v200 + 3);
                v199 = v379;
                if (!v203)
                  goto LABEL_692;
                for (; v201; --v201)
                  *v203++ = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                v198 = v202;
LABEL_371:
                if (v199 < v190)
                {
                  v204 = 0;
                  v205 = v140 + v199;
                  v206 = &v413[v379];
                  do
                  {
                    v207 = v198;
                    v152[v205] = JBIG2Bitmap::getSlice(v198, v204, 0, *v206, v418);
                    v208 = *v206++;
                    v204 += v208;
                    ++v205;
                    --v187;
                    v198 = v207;
                  }
                  while (v187);
                }
                if (v198)
                  (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v198 + 8))(v198);
LABEL_376:
                v160 = v430;
                v197 = v410;
                v183 = v422;
                v185 = v418;
LABEL_377:
                v379 = v190;
              }
              while (v197 > v190);
LABEL_378:
              v209 = operator new();
              v427 = v443;
              JBIG2SymbolDict::JBIG2SymbolDict((JBIG2SymbolDict *)v209, v392, v443);
              v210 = 0;
              if (v183)
              {
                v211 = 0;
                v212 = 0;
                while (1)
                {
                  if ((v430 & 1) != 0)
                    JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), &v438, (uint64_t)&huffTableA);
                  else
                    JArithmeticDecoder::decodeInt(*((JArithmeticDecoder **)this + 13), &v438, *((uint64_t **)this + 18));
                  v213 = v438;
                  if (v438 + v211 > v183)
                    break;
                  if (v212)
                  {
                    if (v438 + v210 > v427)
                      break;
                    if (v438 >= 1)
                    {
                      do
                      {
                        v214 = v152[v211];
                        v215 = operator new();
                        v216 = v215;
                        *(_DWORD *)(v215 + 8) = 0;
                        *(_QWORD *)v215 = &off_1E1627DD8;
                        v217 = *(_DWORD *)(v214 + 12);
                        *(_DWORD *)(v215 + 12) = v217;
                        v218 = *(_DWORD *)(v214 + 16);
                        *(_DWORD *)(v215 + 16) = v218;
                        v219 = *(_DWORD *)(v214 + 20);
                        *(_DWORD *)(v215 + 20) = v219;
                        v220 = v217 < 1 || (int)v218 < 1;
                        v222 = v220 || v219 < 1 || v218 >= 0x7FFFFFFEu / v219;
                        if (v222)
                        {
                          *(_QWORD *)(v215 + 16) = 0x2FFFFFFFFLL;
                          v218 = -1;
                          v219 = 2;
                        }
                        v223 = gmalloc(v219 * v218 + 1);
                        *(_QWORD *)(v216 + 24) = v223;
                        if (v223)
                        {
                          memcpy(v223, *(const void **)(v214 + 24), *(int *)(v216 + 20) * (uint64_t)*(int *)(v216 + 16));
                          *(_BYTE *)(*(_QWORD *)(v216 + 24) + *(int *)(v216 + 20) * (uint64_t)*(int *)(v216 + 16)) = 0;
                        }
                        if (*(_DWORD *)(v209 + 12) > v210)
                          *(_QWORD *)(*(_QWORD *)(v209 + 16) + 8 * v210) = v216;
                        ++v210;
                        ++v211;
                        --v213;
                      }
                      while (v213);
                    }
                  }
                  else
                  {
                    v211 += v438;
                  }
                  v212 ^= 1u;
                  v183 = v422;
                  if (v211 >= v422)
                    goto LABEL_407;
                }
                v362 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                error(v362, "Too many exported symbols in JBIG2 symbol dictionary");
                goto LABEL_697;
              }
LABEL_407:
              if (v210 != v427)
              {
                v370 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                error(v370, "Too few symbols in JBIG2 symbol dictionary");
LABEL_697:
                (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
                goto LABEL_698;
              }
              if (v410)
              {
                v224 = v410;
                do
                {
                  v225 = v152[v140];
                  if (v225)
                    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
                  ++v140;
                  --v224;
                }
                while (v224);
              }
              free(v152);
              if (v413)
                free(v413);
              if ((v399 & 0x201) == 0x200)
              {
                *(_QWORD *)(v209 + 24) = JArithmeticDecoderStats::copy(*((JArithmeticDecoderStats **)this + 14));
                if ((v430 & 2) != 0)
                  *(_QWORD *)(v209 + 32) = JArithmeticDecoderStats::copy(*((JArithmeticDecoderStats **)this + 15));
              }
              GList::append(*((GList **)this + 8), (void *)v209);
LABEL_663:
              free(v435);
              continue;
            }
LABEL_691:
            v357 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
            error(v357, "Too many input symbols in JBIG2 symbol dictionary");
            free(*(void **)v139);
            MEMORY[0x186DC23C4](v139, 0x1080C40A085CBA5);
LABEL_692:
            v358 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
            error(v358, "Unexpected EOF in JBIG2 stream");
LABEL_705:
            free(v435);
            return;
          case 1:
          case 2:
          case 3:
          case 5:
            goto LABEL_186;
          case 4:
            goto LABEL_87;
          case 6:
          case 7:
            v26 = 0;
LABEL_87:
            v444[0] = 0;
            v440[1] = 0;
            if (!JBIG2Stream::readULong(this, v444))
              goto LABEL_662;
            v443 = 0;
            if (!JBIG2Stream::readULong(this, &v443))
              goto LABEL_662;
            v442 = 0;
            if (!JBIG2Stream::readULong(this, &v442))
              goto LABEL_662;
            v441[1] = 0;
            if (!JBIG2Stream::readULong(this, &v441[1]))
              goto LABEL_662;
            v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            v50 = v49;
            if (v49 == -1)
              goto LABEL_662;
            v51 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v51 == -1)
              goto LABEL_662;
            v52 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            v53 = v52;
            if (v52 == -1)
              goto LABEL_662;
            v54 = v52 | (v51 << 8);
            v55 = (v54 >> 10) | 0xFFFFFFF0;
            if ((v54 & 0x4000) == 0)
              v55 = (v54 >> 10) & 0x1F;
            v425 = v55;
            if ((v52 & 1) != 0)
            {
              v227 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v227 == -1)
                goto LABEL_662;
              v228 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v228 == -1)
                goto LABEL_662;
              v229 = v228 | (v227 << 8);
              v417 = v228 & 3;
              v409 = (v228 >> 2) & 3;
              v406 = (v228 >> 4) & 3;
              v401 = v228 >> 6;
              v398 = (v229 >> 8) & 3;
              v391 = (v229 >> 10) & 3;
              v387 = (v229 >> 12) & 3;
              v383 = (v229 >> 14) & 1;
            }
            else
            {
              v417 = 0;
              v409 = 0;
              v406 = 0;
              v401 = 0;
              v398 = 0;
              v391 = 0;
              v387 = 0;
              v383 = 0;
            }
            v414 = v54;
            v230 = (v54 >> 15) & 1;
            if ((v53 & 2) == 0 || v230)
            {
LABEL_441:
              v380 = v230;
              v441[0] = 0;
              if (!JBIG2Stream::readULong(this, v441))
                goto LABEL_662;
              v431 = (GList *)operator new();
              v239 = v431;
              *((_DWORD *)v431 + 2) = 8;
              *(_QWORD *)v431 = gmalloc(0x40uLL);
              *((_DWORD *)v431 + 3) = 0;
              *((_DWORD *)v431 + 4) = 0;
              if (!v6)
              {
                v423 = 0;
                v240 = 0;
                goto LABEL_520;
              }
              v240 = 0;
              v241 = v6;
              v242 = (int *)v435;
              v243 = v241;
              while (1)
              {
                v244 = *v242++;
                v245 = JBIG2Stream::findSegment(this, v244);
                if (!v245)
                  break;
                v246 = v245;
                if (((unsigned int (*)(uint64_t **))(*v245)[2])(v245) == 1)
                {
                  v247 = *((_DWORD *)v246 + 3);
                  v222 = __CFADD__(v240, v247);
                  v240 += v247;
                  if (v222)
                  {
                    v275 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v275, "Number of symbols would overflow");
LABEL_505:
                    free(*(void **)v431);
                    MEMORY[0x186DC23C4](v431, 0x1080C40A085CBA5);
                    goto LABEL_663;
                  }
                }
                else if (((unsigned int (*)(uint64_t **))(*v246)[2])(v246) == 3)
                {
                  GList::append(v431, v246);
                }
                if (!--v243)
                {
                  if (v240 < 2)
                  {
                    v248 = 0;
                  }
                  else
                  {
                    v248 = 0;
                    for (j = 1; j < v240; j *= 2)
                      ++v248;
                  }
                  v376 = v248;
                  v423 = gmallocn(v240, 8u);
                  v276 = 0;
                  v277 = 0;
                  do
                  {
                    v278 = JBIG2Stream::findSegment(this, v435[v276]);
                    if (v278)
                    {
                      v279 = v278;
                      if (((unsigned int (*)(uint64_t **))(*v278)[2])(v278) == 1 && v240 > v277)
                      {
                        v281 = 0;
                        v282 = *((unsigned int *)v279 + 3);
                        do
                        {
                          if (v282 == v281)
                            break;
                          v423[v277 + v281] = v279[2][v281];
                          ++v281;
                        }
                        while (v240 - v277 != v281);
                        v277 += v281;
                      }
                    }
                    ++v276;
                  }
                  while (v276 != v241);
                  v6 = v376;
                  v239 = v431;
LABEL_520:
                  v283 = v417;
                  if ((v53 & 1) == 0)
                  {
                    v408 = 0;
                    v411 = 0;
                    v400 = 0;
                    v403 = 0;
                    v284 = 0;
                    v419 = 0;
                    v285 = 0;
                    v384 = 0;
                    goto LABEL_522;
                  }
                  if (!v417)
                  {
                    v287 = (JBIG2Bitmap *)&huffTableF;
                    goto LABEL_557;
                  }
                  if (v417 == 1)
                  {
                    v283 = 0;
                    v287 = (JBIG2Bitmap *)&huffTableG;
                    goto LABEL_557;
                  }
                  if (!*((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v287 = *(JBIG2Bitmap **)(**(_QWORD **)v239 + 16);
                  v283 = 1;
LABEL_557:
                  switch(v409)
                  {
                    case 0:
                      v301 = &huffTableH;
                      goto LABEL_581;
                    case 2:
                      v301 = &huffTableJ;
                      goto LABEL_581;
                    case 1:
                      v301 = &huffTableI;
                      goto LABEL_581;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v311 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v301 = *(void **)(v311 + 16);
LABEL_581:
                  switch(v406)
                  {
                    case 0:
                      v312 = (JBIG2Bitmap *)&huffTableK;
                      goto LABEL_589;
                    case 2:
                      v312 = (JBIG2Bitmap *)&huffTableM;
                      goto LABEL_589;
                    case 1:
                      v312 = (JBIG2Bitmap *)&huffTableL;
                      goto LABEL_589;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v313 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v312 = *(JBIG2Bitmap **)(v313 + 16);
LABEL_589:
                  if (!v401)
                  {
                    v314 = &huffTableN;
                    goto LABEL_595;
                  }
                  if (v401 == 1)
                  {
                    v314 = &huffTableO;
                    goto LABEL_595;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v315 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v314 = *(void **)(v315 + 16);
LABEL_595:
                  if (!v398)
                  {
                    v284 = &huffTableN;
                    goto LABEL_601;
                  }
                  if (v398 == 1)
                  {
                    v284 = &huffTableO;
                    goto LABEL_601;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v316 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v284 = *(void **)(v316 + 16);
LABEL_601:
                  if (!v391)
                  {
                    v317 = &huffTableN;
                    goto LABEL_607;
                  }
                  if (v391 == 1)
                  {
                    v317 = &huffTableO;
                    goto LABEL_607;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v318 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v317 = *(void **)(v318 + 16);
LABEL_607:
                  v419 = (uint64_t)v317;
                  if (!v387)
                  {
                    v285 = &huffTableN;
                    goto LABEL_613;
                  }
                  if (v387 == 1)
                  {
                    v285 = &huffTableO;
                    goto LABEL_613;
                  }
                  if (v283 >= *((_DWORD *)v239 + 3))
                    goto LABEL_616;
                  v319 = *(_QWORD *)(*(_QWORD *)v239 + 8 * v283++);
                  v285 = *(void **)(v319 + 16);
LABEL_613:
                  if (!v383)
                  {
                    v400 = (uint64_t)v314;
                    v403 = v312;
                    v408 = (uint64_t)v301;
                    v411 = v287;
                    v320 = &huffTableA;
                    goto LABEL_619;
                  }
                  if (v283 < *((_DWORD *)v239 + 3))
                  {
                    v400 = (uint64_t)v314;
                    v403 = v312;
                    v408 = (uint64_t)v301;
                    v411 = v287;
                    v320 = *(void **)(*(_QWORD *)(*(_QWORD *)v239 + 8 * v283) + 16);
LABEL_619:
                    v384 = (uint64_t)v320;
LABEL_522:
                    v389 = (uint64_t)v285;
                    v394 = (uint64_t)v284;
                    free(*(void **)v239);
                    MEMORY[0x186DC23C4](v239, 0x1080C40A085CBA5);
                    v432 = v53 & 1;
                    v377 = v6;
                    if ((v53 & 1) == 0)
                    {
                      JBIG2Stream::resetIntStats((void ***)this, v6);
                      JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                      v286 = 0;
                      goto LABEL_564;
                    }
                    v288 = 0;
                    v289 = v240;
                    *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
                    v290 = (_DWORD *)&v448 + 1;
                    do
                    {
                      *(v290 - 2) = v288;
                      *(v290 - 1) = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), 4u);
                      *v290 = 0;
                      ++v288;
                      v290 += 4;
                    }
                    while (v288 != 32);
                    v450 = 259;
                    v451 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), 4u);
                    v452 = 2;
                    v453 = 515;
                    v454 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), 4u);
                    v455 = 3;
                    v456 = 523;
                    v457 = JBIG2HuffmanDecoder::readBits(*((JBIG2HuffmanDecoder **)this + 30), 4u);
                    v458 = 7;
                    v459 = 0xFFFFFFFF00000000;
                    JBIG2HuffmanDecoder::buildTable(&v447, 0x23u);
                    v291 = gmallocn(v240 + 1, 0x10u);
                    v286 = v291;
                    if (v240)
                    {
                      v292 = 0;
                      v293 = v291 + 2;
                      do
                      {
                        *(v293 - 2) = v292;
                        *v293 = 0;
                        v293 += 4;
                        ++v292;
                      }
                      while (v240 != v292);
                      LODWORD(v294) = 0;
                      while (1)
                      {
                        JBIG2HuffmanDecoder::decodeInt(*((JBIG2HuffmanDecoder **)this + 30), &v440[1], (uint64_t)&v447);
                        v295 = v440[1] - 513;
                        if ((int)v440[1] >= 513)
                          break;
                        if ((int)v440[1] >= 257)
                        {
                          if (v294 >= v240)
                          {
                            v297 = v440[1] - 256;
                          }
                          else
                          {
                            v298 = 256 - v440[1];
                            do
                            {
                              if ((_DWORD)v294)
                              {
                                v286[4 * v294 + 1] = v286[4 * (v294 - 1) + 1];
                                LODWORD(v294) = v294 + 1;
                              }
                              v299 = v298 + 1;
                              if (v298 == -1)
                                break;
                              ++v298;
                            }
                            while (v294 < v240);
                            v297 = -v299;
                          }
                          goto LABEL_551;
                        }
                        v286[4 * v294 + 1] = v440[1];
                        LODWORD(v294) = v294 + 1;
LABEL_552:
                        if (v294 >= v240)
                        {
                          v300 = v240;
                          goto LABEL_563;
                        }
                      }
                      if (v294 >= v240)
                      {
                        v297 = v440[1] - 512;
                      }
                      else
                      {
                        v296 = &v286[4 * v294 + 1];
                        v294 = v294;
                        do
                        {
                          ++v294;
                          *v296 = 0;
                          v296 += 4;
                          v222 = v295-- != 0;
                        }
                        while (v222 && v294 < v240);
                        v297 = v295 + 1;
                      }
LABEL_551:
                      v440[1] = v297;
                      goto LABEL_552;
                    }
                    v289 = 0;
                    v300 = 0;
LABEL_563:
                    *(_QWORD *)&v286[4 * v289 + 1] = 0xFFFFFFFF00000000;
                    JBIG2HuffmanDecoder::buildTable(v286, v300);
                    *(_QWORD *)(*((_QWORD *)this + 30) + 8) = 0;
LABEL_564:
                    v303 = (v53 >> 4) & 3;
                    v304 = (v414 >> 7) & 3;
                    if ((v53 & 2) != 0)
                    {
                      JBIG2Stream::resetRefinementStats(this, v380, 0);
                      v305 = v443;
                      v306 = JBIG2Stream::readTextRegion((uint64_t)this, v432, 1, v444[0], v443, v441[0], (v53 >> 2) & 3, v240, (uint64_t)v286, v377, (uint64_t)v423, (v414 >> 9) & 1, v304, (v53 >> 6) & 1, v303, v425, (uint64_t)v411, v408, (uint64_t)v403,
                               v400,
                               v394,
                               v419,
                               v389,
                               v384,
                               v380,
                               (int *)v460,
                               (int *)&v445);
                    }
                    else
                    {
                      v305 = v443;
                      v306 = JBIG2Stream::readTextRegion((uint64_t)this, v432, 0, v444[0], v443, v441[0], (v53 >> 2) & 3, v240, (uint64_t)v286, v377, (uint64_t)v423, (v414 >> 9) & 1, v304, (v53 >> 6) & 1, v303, v425, (uint64_t)v411, v408, (uint64_t)v403,
                               v400,
                               v394,
                               v419,
                               v389,
                               v384,
                               v380,
                               (int *)v460,
                               (int *)&v445);
                    }
                    v307 = v306;
                    free(v423);
                    if (v307)
                    {
                      if ((v26 & 1) != 0)
                      {
                        *((_DWORD *)v307 + 2) = v14;
                        GList::append(*((GList **)this + 8), v307);
                      }
                      else
                      {
                        v309 = v441[1];
                        if (*v433 == -1 && v441[1] + v305 > *((_DWORD *)this + 10))
                          JBIG2Bitmap::expand(*((JBIG2Bitmap **)this + 6), v441[1] + v305, *((_DWORD *)this + 11));
                        JBIG2Bitmap::combine(*((_QWORD *)this + 6), v307, v442, v309, v50 & 7);
                        (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v307 + 8))(v307);
                      }
                      if (!v432)
                        goto LABEL_663;
                    }
                    else
                    {
                      v308 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                      error(v308, "Failed to parse bitmap JBIG2 stream");
                    }
                    v310 = v286;
                  }
                  else
                  {
LABEL_616:
                    v321 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v321, "Missing code table in JBIG2 text region");
                    free(*(void **)v431);
                    MEMORY[0x186DC23C4](v431, 0x1080C40A085CBA5);
                    v310 = v423;
                  }
                  free(v310);
                  goto LABEL_663;
                }
              }
              v274 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
              error(v274, "Invalid segment reference in JBIG2 text region");
              goto LABEL_505;
            }
            v231 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
            if (v231 != -1)
            {
              v232 = v231 | 0xFFFFFF00;
              if ((v231 & 0x80) == 0)
                v232 = v231;
              v460[0] = v232;
              v233 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
              if (v233 != -1)
              {
                v234 = v233 | 0xFFFFFF00;
                if ((v233 & 0x80) == 0)
                  v234 = v233;
                v445 = v234;
                v235 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v235 != -1)
                {
                  v236 = v235 | 0xFFFFFF00;
                  if ((v235 & 0x80) == 0)
                    v236 = v235;
                  v460[1] = v236;
                  v237 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                  if (v237 != -1)
                  {
                    v238 = v237 | 0xFFFFFF00;
                    if ((v237 & 0x80) == 0)
                      v238 = v237;
                    v446 = v238;
                    goto LABEL_441;
                  }
                }
              }
            }
LABEL_662:
            v344 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
            error(v344, "Unexpected EOF in JBIG2 stream");
            goto LABEL_663;
          default:
            switch(v3 & 0x3F)
            {
              case 0x10:
                v104 = v436[0];
                v105 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v105 == -1)
                  goto LABEL_662;
                v106 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v106 == -1)
                  goto LABEL_662;
                v107 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v107 == -1)
                  goto LABEL_662;
                v445 = 0;
                if (!JBIG2Stream::readULong(this, &v445))
                  goto LABEL_662;
                if (v106 <= 0xFFFE && v107 <= 0xFFFE)
                {
                  v108 = v445;
                  if (v445 <= 0xFFFE)
                  {
                    v109 = (v105 >> 1) & 3;
                    v110 = v105 & 1;
                    if (!v110)
                    {
                      JBIG2Stream::resetGenericStats(this, v109, 0);
                      JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                    }
                    v447 = -v106;
                    v448 = 0x2FFFFFFFDLL;
                    v449 = -2;
                    *(_OWORD *)v460 = xmmword_185004C20;
                    v111 = (JBIG2Bitmap *)JBIG2Stream::readGenericBitmap(this, v110, (v108 + 1) * v106, v107, v109, 0, 0, 0, (int *)&v447, (int32x4_t *)v460, v104 - 7);
                    v112 = (_DWORD *)operator new();
                    *(_QWORD *)v112 = &off_1E1627FB0;
                    v112[2] = v14;
                    v112[3] = v108 + 1;
                    v113 = 0;
                    v114 = 0;
                    *((_QWORD *)v112 + 2) = gmallocn(v108 + 1, 8u);
                    do
                    {
                      v115 = JBIG2Bitmap::getSlice(v111, v113, 0, v106, v107);
                      if (v112[3] > v114)
                        *(_QWORD *)(*((_QWORD *)v112 + 2) + 8 * v114) = v115;
                      v113 += v106;
                      ++v114;
                    }
                    while (v114 <= v108);
                    if (v111)
                      (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v111 + 8))(v111);
                    GList::append(*((GList **)this + 8), v112);
                  }
                }
                goto LABEL_663;
              case 0x14:
                goto LABEL_59;
              case 0x16:
              case 0x17:
                v26 = 0;
LABEL_59:
                v445 = 0;
                if (!JBIG2Stream::readULong(this, &v445))
                  goto LABEL_662;
                v444[0] = 0;
                if (!JBIG2Stream::readULong(this, v444))
                  goto LABEL_662;
                v443 = 0;
                if (!JBIG2Stream::readULong(this, &v443))
                  goto LABEL_662;
                v442 = 0;
                if (!JBIG2Stream::readULong(this, &v442))
                  goto LABEL_662;
                v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                v42 = v41;
                if (v41 == -1)
                  goto LABEL_662;
                v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v43 == -1)
                  goto LABEL_662;
                v441[1] = 0;
                if (!JBIG2Stream::readULong(this, &v441[1]))
                  goto LABEL_662;
                v441[0] = 0;
                if (!JBIG2Stream::readULong(this, v441))
                  goto LABEL_662;
                v440[1] = 0;
                if (!JBIG2Stream::readULong(this, &v440[1]))
                  goto LABEL_662;
                v440[0] = 0;
                if (!JBIG2Stream::readULong(this, v440))
                  goto LABEL_662;
                v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v44 == -1)
                  goto LABEL_662;
                v45 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v45 == -1)
                  goto LABEL_662;
                v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v46 == -1)
                  goto LABEL_662;
                v421 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
                if (v421 == -1)
                  goto LABEL_662;
                if (!v445 || !v444[0] || v445 >= 0x7FFFFFFF / v444[0])
                {
                  v302 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v302, "Bad bitmap size in JBIG2 halftone segment");
                  goto LABEL_663;
                }
                v416 = v445;
                v397 = v444[0];
                v382 = v441[0];
                if (!v441[0] || (v429 = v441[1], v441[1] >= 0x7FFFFFFF / v441[0]))
                {
                  v322 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v322, "Bad grid size in JBIG2 halftone segment");
                  goto LABEL_663;
                }
                if (v6 != 1
                  || (v405 = JBIG2Stream::findSegment(this, *v435)) == 0
                  || ((unsigned int (*)(uint64_t **))(*v405)[2])(v405) != 2)
                {
                  v323 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v323, "Bad symbol dictionary reference in JBIG2 halftone segment");
                  goto LABEL_663;
                }
                v47 = *((_DWORD *)v405 + 3);
                if (v47 < 2)
                {
                  v386 = -1;
                }
                else
                {
                  v48 = 1;
                  v386 = -1;
                  do
                  {
                    v48 *= 2;
                    ++v386;
                  }
                  while (v48 < v47);
                }
                v378 = (v43 >> 1) & 3;
                v324 = *v405[2];
                v325 = *(_DWORD *)(v324 + 12);
                v395 = *(_DWORD *)(v324 + 16);
                if ((v43 & 1) == 0)
                {
                  JBIG2Stream::resetGenericStats(this, v378, 0);
                  JArithmeticDecoder::start(*((JArithmeticDecoder **)this + 13));
                }
                v404 = (JBIG2Bitmap *)operator new();
                JBIG2Bitmap::JBIG2Bitmap(v404, v14, v416, v397);
                v326 = (void *)*((_QWORD *)v404 + 3);
                if (!v326)
                  goto LABEL_662;
                v327 = *((_DWORD *)v404 + 4);
                v328 = *((_DWORD *)v404 + 5);
                if ((v43 & 0x80) != 0)
                  memset(v326, 255, v328 * (uint64_t)v327);
                else
                  bzero(v326, v328 * (uint64_t)v327);
                v428 = v45 | (v44 << 8);
                v424 = v421 | (v46 << 8);
                v415 = (v43 >> 3) & 1;
                if (v415)
                {
                  v412 = (JBIG2Bitmap *)operator new();
                  JBIG2Bitmap::JBIG2Bitmap(v412, 0, v429, v382);
                  v329 = (void *)*((_QWORD *)v412 + 3);
                  if (!v329)
                    goto LABEL_662;
                  bzero(v329, *((int *)v412 + 5) * (uint64_t)*((int *)v412 + 4));
                  v330 = 0;
                  v381 = v440[1];
                  v331 = v440[0];
                  v332 = v382;
                  if (v382 <= 1)
                    v332 = 1;
                  v373 = v332;
                  do
                  {
                    if (v429)
                    {
                      v333 = 0;
                      v334 = v381;
                      v335 = v331;
                      do
                      {
                        if (v325 + v334 < 256 || v416 <= v334 >> 8 || v395 + v335 < 256 || v335 >> 8 >= v397)
                          JBIG2Bitmap::setPixel((uint64_t)v412, v333, v330);
                        ++v333;
                        v335 -= v424;
                        v334 += v428;
                      }
                      while (v429 != v333);
                    }
                    ++v330;
                    v331 += v428;
                    v381 += v424;
                  }
                  while (v330 != v373);
                }
                else
                {
                  v412 = 0;
                }
                v336 = (unsigned int *)gmallocn(v429 * v382, 4u);
                bzero(v336, 4 * v429 * v382);
                if (v378 >= 2)
                  v337 = 2;
                else
                  v337 = 3;
                v447 = v337;
                v448 = 0x2FFFFFFFDLL;
                v449 = -2;
                *(_OWORD *)v460 = xmmword_185004C10;
                if (v386 < 0)
                {
                  v345 = v382;
                  if (v382 <= 1)
                    v345 = 1;
                  v420 = v345;
                }
                else
                {
                  v338 = v382;
                  if (v382 <= 1)
                    v338 = 1;
                  v420 = v338;
                  do
                  {
                    v339 = (JBIG2Bitmap *)JBIG2Stream::readGenericBitmap(this, v43 & 1, v429, v382, v378, 0, v415, v412, (int *)&v447, (int32x4_t *)v460, 0xFFFFFFFF);
                    v340 = 0;
                    v341 = 0;
                    v342 = v429;
                    do
                    {
                      if (v342)
                      {
                        v343 = 0;
                        do
                        {
                          v336[v340 + v343] = v336[v340 + v343] & 1 ^ JBIG2Bitmap::getPixel(v339, v343, v341) | (2 * v336[v340 + v343]);
                          v342 = v429;
                          ++v343;
                        }
                        while (v429 != v343);
                        v340 += v343;
                      }
                      ++v341;
                    }
                    while (v341 != v420);
                    if (v339)
                      (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v339 + 8))(v339);
                    v220 = v386-- <= 0;
                  }
                  while (!v220);
                }
                v346 = 0;
                v347 = 0;
                v385 = v42 & 7;
                v348 = (v43 >> 4) & 7;
                v396 = v440[1];
                v390 = v440[0];
                do
                {
                  if (v429)
                  {
                    v349 = 0;
                    v350 = v390 + v347 * v428;
                    v351 = v396 + v347 * v424;
                    do
                    {
                      if (!v415 || !JBIG2Bitmap::getPixel(v412, v349, v347))
                      {
                        v352 = v336[v346 + v349];
                        if (*((_DWORD *)v405 + 3) <= v352)
                          v353 = 0;
                        else
                          v353 = (JBIG2Bitmap *)v405[2][v352];
                        JBIG2Bitmap::combine((uint64_t)v404, v353, v351 >> 8, v350 >> 8, v348);
                      }
                      v351 += v428;
                      v350 -= v424;
                      ++v349;
                    }
                    while (v429 != v349);
                    v346 += v349;
                  }
                  ++v347;
                }
                while (v347 != v420);
                free(v336);
                if (v412)
                  (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v412 + 8))(v412);
                if ((v26 & 1) != 0)
                {
                  GList::append(*((GList **)this + 8), v404);
                }
                else
                {
                  v354 = v442;
                  if (*v433 == -1 && v442 + v397 > *((_DWORD *)this + 10))
                    JBIG2Bitmap::expand(*((JBIG2Bitmap **)this + 6), v442 + v397, *((_DWORD *)this + 11));
                  JBIG2Bitmap::combine(*((_QWORD *)this + 6), v404, v443, v354, v385);
                  (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)v404 + 8))(v404);
                }
                break;
              default:
                goto LABEL_186;
            }
            goto LABEL_663;
        }
    }
  }
}

void sub_184B5E8CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  int v40;

  MEMORY[0x186DC23C4](a37, 0x1091C40AC3DD578);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
    error(v40, "Exception thrown when attempting to allocate memory.");
    __cxa_end_catch();
    JUMPOUT(0x184B5E7ACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t JBIG2Stream::readULong(JBIG2Stream *this, unsigned int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  if (v4 == -1)
    return 0;
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  if (v6 == -1)
    return 0;
  v7 = v6;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  if (v8 == -1)
    return 0;
  v9 = v8;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  if (v10 == -1)
    return 0;
  *a2 = (v7 << 16) | (v5 << 24) | (v9 << 8) | v10;
  return 1;
}

uint64_t JBIG2HuffmanDecoder::readBits(JBIG2HuffmanDecoder *this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v3 = *((_DWORD *)this + 3);
  v4 = v3 - a2;
  if (v3 < a2)
  {
    v5 = *((_DWORD *)this + 2) & ~(-1 << v3);
    v6 = a2 - v3;
    *((_DWORD *)this + 3) = 0;
    if (a2 - v3 < 8)
    {
      v8 = v5;
      if (!v6)
        return v8;
    }
    else
    {
      do
      {
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
        v8 = v7 | ((_DWORD)v5 << 8);
        v6 -= 8;
        LODWORD(v5) = v7 | ((_DWORD)v5 << 8);
      }
      while (v6 > 7);
      if (!v6)
        return v8;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
    *((_DWORD *)this + 2) = v10;
    *((_DWORD *)this + 3) = 8 - v6;
    return (v10 >> (8 - v6)) & ~(-1 << v6) | ((_DWORD)v8 << v6);
  }
  if (a2 == 32)
    v9 = -1;
  else
    v9 = ~(-1 << a2);
  v8 = (*((_DWORD *)this + 2) >> v4) & v9;
  *((_DWORD *)this + 3) = v4;
  return v8;
}

_DWORD *JBIG2HuffmanDecoder::buildTable(_DWORD *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  int *v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  __int128 v24;

  if (a2)
  {
    v2 = 0;
    v3 = a2;
    v4 = 1;
    v5 = result + 1;
    while (1)
    {
      v6 = a2 <= v4 ? v4 : a2;
      v7 = v5;
      v8 = v2;
      while (1)
      {
        v9 = *v7;
        v7 += 4;
        if (v9)
          break;
        if (++v8 >= a2)
          goto LABEL_11;
      }
      v6 = v8;
LABEL_11:
      if (v6 == a2)
        break;
      v10 = v6 + 1;
      if (v6 + 1 < a2)
      {
        v11 = &result[4 * v10 + 1];
        do
        {
          v13 = *v11;
          v11 += 4;
          v12 = v13;
          if (v13 && v12 < result[4 * v6 + 1])
            v6 = v10;
          ++v10;
        }
        while (a2 != v10);
      }
      if (v2 != v6)
      {
        v14 = v6;
        v15 = (__int128 *)&result[4 * v6];
        v24 = *v15;
        if (v2 < v14)
        {
          v16 = v14 - 1;
          do
          {
            v17 = v16;
            *v15-- = *(_OWORD *)&result[4 * v16--];
          }
          while (v17 > v2);
        }
        *(_OWORD *)&result[4 * v2] = v24;
      }
      ++v2;
      ++v4;
      v5 += 4;
      if (v2 == a2)
        goto LABEL_27;
    }
    a2 = v2;
  }
  else
  {
    v3 = 0;
  }
LABEL_27:
  *(_OWORD *)&result[4 * a2] = *(_OWORD *)&result[4 * v3];
  if (result[2] != -1)
  {
    result[3] = 0;
    if (result[6] != -1)
    {
      v18 = 1;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = &result[4 * v18];
        v22 = v20 << (v21[1] - result[4 * v19 - 7]);
        v20 = v22 + 1;
        v21[3] = v22;
        v18 = v19;
        v23 = result[4 * v19++ + 2];
      }
      while (v23 != -1);
    }
  }
  return result;
}

void JBIG2Bitmap::JBIG2Bitmap(JBIG2Bitmap *this, int a2, int a3, signed int a4)
{
  unsigned int v5;
  _BYTE *v6;

  *(_QWORD *)this = &off_1E1627DD8;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  v5 = (a3 + 7) >> 3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = v5;
  if (a3 < 1 || a4 < 1 || 0x7FFFFFFE / v5 <= a4)
  {
    *((_QWORD *)this + 2) = 0x2FFFFFFFFLL;
    a4 = -1;
    v5 = 2;
  }
  v6 = gmalloc(v5 * a4 + 1);
  *((_QWORD *)this + 3) = v6;
  if (v6)
    v6[*((int *)this + 5) * (uint64_t)*((int *)this + 4)] = 0;
}

void JBIG2Bitmap::expand(JBIG2Bitmap *this, signed int a2, int a3)
{
  int v4;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;

  if (*((_DWORD *)this + 4) < a2)
  {
    v4 = *((_DWORD *)this + 5);
    if (v4 >= 1 && (int)(0x7FFFFFFEu / v4) > a2)
    {
      v7 = (char *)grealloc(*((void **)this + 3), (v4 * a2 + 1));
      *((_QWORD *)this + 3) = v7;
      v8 = *((_DWORD *)this + 4);
      v9 = *((_DWORD *)this + 5);
      v10 = &v7[v9 * v8];
      v11 = (a2 - v8) * v9;
      if (a3)
        memset(v10, 255, v11);
      else
        bzero(v10, v11);
      *((_DWORD *)this + 4) = a2;
      *(_BYTE *)(*((_QWORD *)this + 3) + *((int *)this + 5) * (uint64_t)a2) = 0;
    }
  }
}

uint64_t **JBIG2Stream::findSegment(JBIG2Stream *this, int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *i;

  v2 = (uint64_t **)*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((unsigned int *)v2 + 3);
    if ((int)v3 < 1)
    {
LABEL_6:
      v5 = (uint64_t **)*((_QWORD *)this + 8);
      v6 = *((unsigned int *)v5 + 3);
      if ((int)v6 < 1)
      {
        return 0;
      }
      else
      {
        for (i = *v5; ; ++i)
        {
          v2 = (uint64_t **)*i;
          if (*(_DWORD *)(*i + 8) == a2)
            break;
          if (!--v6)
            return 0;
        }
      }
    }
    else
    {
      v4 = *v2;
      while (1)
      {
        v2 = (uint64_t **)*v4;
        if (*(_DWORD *)(*v4 + 8) == a2)
          break;
        ++v4;
        if (!--v3)
          goto LABEL_6;
      }
    }
  }
  return v2;
}

uint64_t JBIG2Bitmap::getSlice(JBIG2Bitmap *this, int a2, int a3, int a4, signed int a5)
{
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;

  v10 = operator new();
  JBIG2Bitmap::JBIG2Bitmap((JBIG2Bitmap *)v10, 0, a4, a5);
  v11 = *(void **)(v10 + 24);
  if (!v11)
    return 0;
  bzero(v11, *(int *)(v10 + 20) * (uint64_t)*(int *)(v10 + 16));
  if (a5)
  {
    v12 = 0;
    do
    {
      if (a4)
      {
        v13 = 0;
        do
        {
          if (JBIG2Bitmap::getPixel(this, a2 + v13, v12 + a3))
            JBIG2Bitmap::setPixel(v10, v13, v12);
          ++v13;
        }
        while (a4 != v13);
      }
      ++v12;
    }
    while (v12 != a5);
  }
  return v10;
}

void sub_184B5F150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

void JBIG2Stream::resetRefinementStats(JBIG2Stream *this, unsigned int a2, const void **a3)
{
  size_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v4 = *((int *)&refContextSize + a2);
  if (a3 && *((_DWORD *)a3 + 2) == (_DWORD)v4)
  {
    v6 = *((_QWORD *)this + 15);
    v7 = *(void **)v6;
    if (*(_DWORD *)(v6 + 8) == (_DWORD)v4)
    {
      memcpy(v7, *a3, v4);
    }
    else
    {
      free(v7);
      MEMORY[0x186DC23C4](v6, 0x1010C40A1D9428BLL);
      *((_QWORD *)this + 15) = JArithmeticDecoderStats::copy((JArithmeticDecoderStats *)a3);
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 15);
    v9 = *(void **)v8;
    if (*(_DWORD *)(v8 + 8) == (_DWORD)v4)
    {
      bzero(v9, *((int *)&refContextSize + a2));
    }
    else
    {
      free(v9);
      MEMORY[0x186DC23C4](v8, 0x1010C40A1D9428BLL);
      *((_QWORD *)this + 15) = 0;
      v10 = operator new();
      *(_DWORD *)(v10 + 8) = 1 << v4;
      v11 = gmallocn(1 << v4, 1u);
      *(_QWORD *)v10 = v11;
      bzero(v11, *(int *)(v10 + 8));
      *((_QWORD *)this + 15) = v10;
    }
  }
}

void sub_184B5F298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Stream::readGenericRefinementRegion(JBIG2Stream *this, int a2, signed int a3, int a4, int a5, JBIG2Bitmap *a6, int a7, int a8, int *a9, int *a10)
{
  uint64_t v10;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  JBIG2Bitmap *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  char v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  BOOL v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  BOOL v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int i;
  int v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  BOOL v120;
  unsigned __int8 *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  BOOL v144;
  unsigned __int8 *v145;
  int v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  unsigned __int8 *v153;
  BOOL v154;
  int v155;
  int v156;
  unsigned __int8 *v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  unsigned __int8 *v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  unsigned __int8 *v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned __int8 *v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned __int8 *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  unsigned __int8 *v225;
  int v226;
  int v227;
  int v228;
  int v229;
  BOOL v230;
  unsigned __int8 *v231;
  int v232;
  unsigned __int8 *v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  unsigned __int8 *v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  BOOL v243;
  unsigned __int8 *v244;
  int v245;
  int v246;
  unsigned __int8 *v247;
  int v248;
  int v249;
  unsigned __int8 *v250;
  int v251;
  unsigned __int8 *v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  unsigned int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  char v268;
  char v269;
  uint64_t v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  int v275;
  signed int v276;
  int v277;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  unsigned __int8 *v298;
  int v299;
  int v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  int v303;
  int v304;
  unsigned __int8 *v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  unsigned int v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  int v317;
  int v318;
  int v319;
  int v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  int v324;
  int v325;
  unsigned __int8 *v326;
  unsigned __int8 *v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;

  v10 = 0;
  if (a2 < 0x10000 && a3 < 0x10000)
  {
    v10 = operator new();
    JBIG2Bitmap::JBIG2Bitmap((JBIG2Bitmap *)v10, 0, a2, a3);
    v13 = *(void **)(v10 + 24);
    if (v13)
    {
      bzero(v13, *(int *)(v10 + 20) * (uint64_t)*(int *)(v10 + 16));
      if (a4)
        v14 = 8;
      else
        v14 = 16;
      v311 = v14;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = -a7;
        v17 = ((_BYTE)a7 - 1) & 7;
        v279 = ~a7;
        LODWORD(v18) = ~a7 >> 3;
        v19 = a7 & 7;
        v268 = (a7 - 1) & 7;
        v269 = a7 & 7;
        if (a7 >= 0)
          v19 = 7;
        if (a7 <= 0)
        {
          v18 = v18;
        }
        else
        {
          v17 = 7;
          v18 = 0;
        }
        v273 = v18;
        v262 = v16 >> 3;
        if (a7 <= 0)
          v20 = v16 >> 3;
        else
          v20 = 0;
        v270 = v20;
        v265 = v19 == 0;
        if (v19)
          v21 = v19 - 1;
        else
          v21 = 7;
        v271 = v19;
        v272 = 1 - a7;
        v22 = v17 - 1;
        v266 = v17;
        v267 = a7 - 2;
        v264 = v17 == 0;
        if (!v17)
          v22 = 7;
        v263 = v22;
        v277 = a8;
        v23 = a6;
        v333 = v10;
        v276 = a3;
        v275 = v21;
        while (1)
        {
          v24 = v15 - 1;
          v25 = *(_DWORD *)(v10 + 16);
          if (v15)
            v26 = v25 < v15;
          else
            v26 = 1;
          v27 = v26;
          v324 = v15;
          if (!a4)
          {
            if ((v27 & 1) != 0 || (v51 = *(_DWORD *)(v10 + 12), v51 < 1))
            {
              v322 = 0;
              v56 = 0;
              v57 = 0;
              v335 = 0;
            }
            else
            {
              v52 = *(_QWORD *)(v10 + 24);
              if (v52)
              {
                v53 = (unsigned __int8 *)(v52 + *(int *)(v10 + 20) * (uint64_t)(int)v24);
                v335 = *v53 >> 7;
                v54 = v51 == 1;
                if (v51 == 1)
                  v55 = 0;
                else
                  v55 = v53;
                v322 = v55;
                if (v54)
                  v56 = 7;
                else
                  v56 = 6;
                v57 = 1;
              }
              else
              {
                v322 = 0;
                v57 = 0;
                v335 = 0;
                v56 = 7;
              }
            }
            if (v25 <= v15 || (*(_DWORD *)(v10 + 12) & 0x80000000) != 0)
            {
              v302 = 0;
              v59 = 0;
              v58 = 0;
            }
            else
            {
              v302 = (unsigned __int8 *)(*(_QWORD *)(v10 + 24) + *(int *)(v10 + 20) * (uint64_t)v15);
              v58 = -1;
              v59 = 7;
            }
            v60 = v24 - a8;
            if ((int)v24 - a8 < 0 || *((_DWORD *)v23 + 4) <= v60 || (v61 = *((_DWORD *)v23 + 3), v61 <= (int)v16))
            {
              v62 = 0;
              v64 = 0;
              v65 = 0;
              v332 = 0;
            }
            else
            {
              v62 = (unsigned __int8 *)*((_QWORD *)v23 + 3);
              if (v62)
              {
                v63 = &v62[v270 + *((int *)v23 + 5) * (uint64_t)v60];
                if (a7 <= 0)
                {
                  v332 = (*v63 >> v268) & 1;
                  v62 = &v63[v264];
                  if (v272 == v61)
                  {
                    v62 = 0;
                    v64 = ((_BYTE)a7 - 1) & 7;
                  }
                  else
                  {
                    v64 = v263;
                  }
                  v65 = 1 - a7;
                }
                else
                {
                  v332 = 0;
                  v64 = 7;
                  v65 = 1 - a7;
                  v62 += v270 + *((int *)v23 + 5) * (uint64_t)v60;
                }
              }
              else
              {
                v332 = 0;
                v64 = v266;
                v65 = v16;
              }
            }
            v321 = v62;
            v66 = v15 - a8;
            if (v15 - a8 < 0 || (v67 = *((_DWORD *)v23 + 4), v67 <= v66))
            {
              v76 = v66 + 1;
              v69 = a10;
              if (v66 + 1 >= 0)
              {
                v325 = 0;
                v75 = 0;
                v74 = 0;
                v71 = 0;
                v67 = *((_DWORD *)v23 + 4);
                goto LABEL_330;
              }
              v325 = 0;
              v75 = 0;
              v74 = 0;
              v71 = 0;
              v83 = 0;
              v84 = 0;
              v85 = 0;
              v86 = 1;
              goto LABEL_338;
            }
            v68 = *((_DWORD *)v23 + 3);
            v69 = a10;
            if (v68 <= v279)
            {
              v74 = 0;
              v75 = 0;
              LODWORD(v70) = 0;
              goto LABEL_112;
            }
            v70 = *((_QWORD *)v23 + 3);
            if (!v70)
            {
              v74 = v271;
              v75 = ~a7;
              goto LABEL_112;
            }
            v71 = (unsigned __int8 *)(v70 + v273 + *((int *)v23 + 5) * (uint64_t)v66);
            v72 = a7;
            if ((a7 & 0x80000000) == 0)
            {
              if (a7)
              {
                v72 = 0;
                v73 = 0;
                goto LABEL_89;
              }
              v73 = *v71 >> 7;
              v75 = 1;
              v74 = 7;
              if (v68 == 1)
              {
                v71 = 0;
                goto LABEL_328;
              }
LABEL_327:
              --v74;
              goto LABEL_328;
            }
            LODWORD(v70) = (*v71 >> v269) & 1;
            v74 = a7 & 7;
            v75 = v16;
            if (v68 == (_DWORD)v16)
            {
LABEL_112:
              v71 = 0;
              v89 = 2 * v70;
            }
            else
            {
              v71 += v265;
              v72 = 2 * v70;
              v73 = (*v71 >> v21) & 1;
              if (v272 == v68)
              {
                v71 = 0;
                v74 = v21;
                v75 = 1 - a7;
              }
              else
              {
                if (v21)
                {
                  v74 = v21;
                  v75 = 1 - a7;
                  goto LABEL_327;
                }
                ++v71;
LABEL_89:
                v74 = 7;
                v75 = 1 - a7;
              }
LABEL_328:
              v89 = v73 | v72;
            }
            v325 = v89;
            v76 = v66 + 1;
LABEL_330:
            if (v67 <= v76 || (v165 = *((_DWORD *)v23 + 3), v165 <= v279))
            {
              v86 = 0;
              v83 = 0;
              v84 = 0;
              v85 = 0;
            }
            else
            {
              v166 = *((_QWORD *)v23 + 3);
              if (v166)
              {
                v167 = (unsigned __int8 *)(v166 + v273 + *((int *)v23 + 5) * (uint64_t)v76);
                if ((a7 & 0x80000000) == 0)
                {
                  if (a7)
                  {
                    v86 = 0;
                    v168 = 0;
                    v169 = 0;
                    goto LABEL_336;
                  }
                  v169 = *v167 >> 7;
                  v84 = 1;
                  v83 = 7;
                  if (v165 == 1)
                  {
                    v86 = 0;
                    v168 = 0;
                    v167 = 0;
                    goto LABEL_339;
                  }
                  v168 = 0;
LABEL_556:
                  v86 = 0;
                  --v83;
                  goto LABEL_339;
                }
                v85 = (*v167 >> v269) & 1;
                if (v165 == (_DWORD)v16)
                {
                  v86 = 0;
                  v83 = a7 & 7;
                  v84 = v16;
                  goto LABEL_338;
                }
                v167 += v265;
                v168 = 2 * v85;
                v169 = (*v167 >> v21) & 1;
                v84 = v272;
                if (v272 == v165)
                {
                  v86 = 0;
                  v167 = 0;
                  v83 = v21;
                }
                else
                {
                  if (v21)
                  {
                    v83 = v21;
                    v84 = v272;
                    goto LABEL_556;
                  }
                  v86 = 0;
                  ++v167;
LABEL_336:
                  v83 = 7;
                  v84 = v272;
                }
LABEL_339:
                v305 = 0;
                v170 = 0;
                v171 = *v69 + (uint64_t)v15;
                if ((v171 & 0x80000000) != 0)
                {
                  v292 = 0;
                }
                else
                {
                  v292 = 0;
                  if (v25 > (int)v171)
                  {
                    v172 = *a9;
                    if (*(_DWORD *)(v10 + 12) <= *a9)
                    {
                      v305 = 0;
                      v170 = 0;
                      v292 = 0;
                    }
                    else
                    {
                      v173 = *(_QWORD *)(v10 + 24);
                      v174 = *(int *)(v10 + 20) * v171;
                      v292 = *a9;
                      if ((v172 & 0x80000000) != 0)
                      {
                        v305 = (unsigned __int8 *)(v173 + v174);
                        v170 = 7;
                      }
                      else
                      {
                        v305 = (unsigned __int8 *)(v173 + (int)(v174 + (v172 >> 3)));
                        v170 = ~v172 & 7;
                      }
                    }
                  }
                }
                v175 = v66 + v69[1];
                if (v175 < 0 || *((_DWORD *)v23 + 4) <= v175 || (v176 = a9[1] - a7, *((_DWORD *)v23 + 3) <= v176))
                {
                  v301 = 0;
                  v283 = 0;
                  v176 = 0;
                }
                else
                {
                  v177 = *((_QWORD *)v23 + 3);
                  v178 = *((int *)v23 + 5) * (uint64_t)v175;
                  if (v176 < 0)
                  {
                    v301 = (unsigned __int8 *)(v177 + v178);
                    v179 = 7;
                  }
                  else
                  {
                    v301 = (unsigned __int8 *)(v177 + (int)(v178 + (v176 >> 3)));
                    v179 = ~v176 & 7;
                  }
                  v283 = v179;
                }
                v308 = v65;
                v310 = v57;
                v285 = v64;
                v286 = v56;
                v288 = v176;
                v290 = v58;
                v284 = v59;
                v294 = v83;
                v296 = v74;
                v307 = v75;
                if (!a5)
                {
                  v315 = 0;
                  v282 = 0;
                  v319 = 0;
                  v313 = 0;
                  v281 = 0;
                  v317 = 0;
                  v298 = 0;
                  v280 = 0;
                  v189 = 0;
                  v194 = 0;
                  v195 = 0;
                  v196 = 0;
                  goto LABEL_386;
                }
                if (v60 < 0 || *((_DWORD *)v23 + 4) <= v60 || (v319 = *((_DWORD *)v23 + 3), v319 <= v279))
                {
                  v282 = 0;
                  v319 = 0;
                  LODWORD(v180) = 0;
                  goto LABEL_363;
                }
                v180 = *((_QWORD *)v23 + 3);
                if (!v180)
                {
                  v282 = v271;
                  v319 = ~a7;
                  goto LABEL_363;
                }
                v315 = (unsigned __int8 *)(v180 + v273 + *((int *)v23 + 5) * (uint64_t)v60);
                if (a7 < 0)
                {
                  if (v319 != (_DWORD)v16)
                  {
                    v247 = &v315[v265];
                    v245 = v16;
                    v246 = v21;
                    goto LABEL_539;
                  }
                  LODWORD(v180) = 0;
                  v282 = a7 & 7;
                  v319 = v16;
LABEL_363:
                  v315 = 0;
                  v182 = 0;
                  v181 = 2 * v180;
                }
                else
                {
                  if (a7)
                  {
                    if ((v267 & 0x80000000) == 0)
                    {
                      v181 = 0;
                      v182 = 0;
                      v282 = 7;
                      v183 = 2 - a7;
                      goto LABEL_584;
                    }
                    v181 = 0;
                    v182 = *v315 >> 7;
                    v183 = 1;
                    v282 = 7;
                    if (v319 == 1)
                    {
                      v315 = 0;
                      goto LABEL_584;
                    }
LABEL_576:
                    v259 = v282 - 1;
                    goto LABEL_583;
                  }
                  v245 = 0;
                  v246 = 7;
                  v247 = (unsigned __int8 *)(v180 + v273 + *((int *)v23 + 5) * (uint64_t)v60);
LABEL_539:
                  LODWORD(v180) = (*v247 >> v246) & 1;
                  if (v245 + 1 == v319)
                  {
                    v282 = v246;
                    goto LABEL_363;
                  }
                  if (v246)
                  {
                    v253 = v246 - 1;
                  }
                  else
                  {
                    ++v247;
                    v253 = 7;
                  }
                  v181 = 2 * v180;
                  v315 = v247;
                  v182 = (*v247 >> v253) & 1;
                  v183 = v245 + 2;
                  v282 = v253;
                  if (v183 == v319)
                  {
                    v315 = 0;
                  }
                  else
                  {
                    if (v253)
                      goto LABEL_576;
                    v315 = v247 + 1;
                    v259 = 7;
LABEL_583:
                    v282 = v259;
LABEL_584:
                    v319 = v183;
                  }
                }
                if (v66 < 0 || *((_DWORD *)v23 + 4) <= v66 || (v317 = *((_DWORD *)v23 + 3), v317 <= v279))
                {
                  v281 = 0;
                  v317 = 0;
                  v188 = 0;
                }
                else
                {
                  v184 = *((_QWORD *)v23 + 3);
                  if (v184)
                  {
                    v313 = (unsigned __int8 *)(v184 + v273 + *((int *)v23 + 5) * (uint64_t)v66);
                    if (a7 < 0)
                    {
                      if (v317 != (_DWORD)v16)
                      {
                        v250 = &v313[v265];
                        v248 = v16;
                        v249 = v21;
                        goto LABEL_547;
                      }
                      v188 = 0;
                      v281 = a7 & 7;
                      v317 = v16;
                    }
                    else
                    {
                      if (a7)
                      {
                        if ((v267 & 0x80000000) == 0)
                        {
                          v185 = 0;
                          v186 = 0;
                          v281 = 7;
                          v187 = 2 - a7;
                          goto LABEL_570;
                        }
                        v185 = 0;
                        v186 = *v313 >> 7;
                        v255 = 1;
                        v281 = 7;
                        v187 = *((_DWORD *)v23 + 3);
                        if (v317 == 1)
                        {
                          v313 = 0;
LABEL_570:
                          v317 = v187;
LABEL_374:
                          if ((v86 & 1) != 0
                            || *((_DWORD *)v23 + 4) <= v76
                            || (v189 = *((_DWORD *)v23 + 3), v189 <= v279))
                          {
                            v280 = 0;
                            v189 = 0;
                            v193 = 0;
                          }
                          else
                          {
                            v190 = *((_QWORD *)v23 + 3);
                            if (v190)
                            {
                              v298 = (unsigned __int8 *)(v190 + v273 + *((int *)v23 + 5) * (uint64_t)v76);
                              if ((a7 & 0x80000000) == 0)
                              {
                                if (a7)
                                {
                                  if ((v267 & 0x80000000) == 0)
                                  {
                                    v191 = 0;
                                    v192 = 0;
                                    v280 = 7;
                                    v189 = 2 - a7;
                                    goto LABEL_384;
                                  }
                                  v191 = 0;
                                  v192 = *v298 >> 7;
                                  v257 = 1;
                                  v280 = 7;
                                  if (v189 == 1)
                                  {
LABEL_572:
                                    v298 = 0;
                                    goto LABEL_384;
                                  }
LABEL_573:
                                  v258 = v280 - 1;
                                  goto LABEL_574;
                                }
                                v251 = 0;
                                v21 = 7;
                                v252 = (unsigned __int8 *)(v190 + v273 + *((int *)v23 + 5) * (uint64_t)v76);
LABEL_558:
                                v193 = (*v252 >> v21) & 1;
                                if (v251 + 1 == v189)
                                {
                                  v280 = v21;
                                  goto LABEL_383;
                                }
                                if (v21)
                                {
                                  v256 = v21 - 1;
                                }
                                else
                                {
                                  ++v252;
                                  v256 = 7;
                                }
                                v191 = 2 * v193;
                                v298 = v252;
                                v192 = (*v252 >> v256) & 1;
                                v257 = v251 + 2;
                                v280 = v256;
                                if (v257 == v189)
                                  goto LABEL_572;
                                if (v256)
                                  goto LABEL_573;
                                v298 = v252 + 1;
                                v258 = 7;
LABEL_574:
                                v280 = v258;
                                v189 = v257;
LABEL_384:
                                v194 = v182 | v181;
                                v195 = v186 | v185;
                                v196 = v192 | v191;
LABEL_386:
                                if (a2 < 1)
                                  goto LABEL_514;
                                v197 = 0;
                                v198 = v169 | v168;
                                while (2)
                                {
                                  v199 = (int)v322;
                                  if (v322)
                                  {
                                    v200 = v310;
                                    if (v310 < 0)
                                    {
                                      v199 = 0;
                                      ++v310;
                                    }
                                    else
                                    {
                                      v199 = (*v322 >> v286) & 1;
                                      ++v310;
                                      if (v200 + 1 == *(_DWORD *)(v333 + 12))
                                        goto LABEL_391;
                                      v201 = v321;
                                      if (v286)
                                      {
                                        --v286;
                                        if (!v321)
                                        {
LABEL_400:
                                          v321 = 0;
                                          if (v71)
                                            goto LABEL_401;
LABEL_426:
                                          v204 = 0;
                                          if (!v167)
                                          {
LABEL_427:
                                            v215 = v84;
                                            v210 = 0;
                                            goto LABEL_431;
                                          }
LABEL_413:
                                          if ((v84 & 0x80000000) != 0)
                                          {
                                            v210 = 0;
                                            v215 = (v84 + 1);
                                          }
                                          else
                                          {
                                            v209 = v294;
                                            v210 = (*v167 >> v294) & 1;
                                            v211 = (v84 + 1);
                                            v212 = *((_DWORD *)v23 + 3);
                                            v213 = v294 - 1;
                                            if (v294)
                                              v214 = v167;
                                            else
                                              v214 = v167 + 1;
                                            if (!v294)
                                              v213 = 7;
                                            v215 = v211;
                                            if ((_DWORD)v211 == v212)
                                              v167 = 0;
                                            else
                                              v167 = v214;
                                            if ((_DWORD)v211 != v212)
                                              v209 = v213;
                                            v294 = v209;
                                          }
LABEL_431:
                                          v335 = v199 | (2 * v335) & 2;
                                          v332 = v201 | (2 * v332) & 2;
                                          v325 = v204 | (2 * v325) & 6;
                                          v198 = v210 | (2 * v198) & 6;
                                          if (a5)
                                          {
                                            v217 = v313;
                                            v216 = v315;
                                            v218 = v319;
                                            v219 = v317;
                                            if (!v315)
                                            {
                                              v220 = 0;
                                              if (!v313)
                                                goto LABEL_445;
                                              goto LABEL_438;
                                            }
                                            if (v319 < 0)
                                            {
                                              v220 = 0;
                                              v218 = v319 + 1;
                                              if (!v313)
                                                goto LABEL_445;
                                              goto LABEL_438;
                                            }
                                            v220 = (*v315 >> v282) & 1;
                                            v218 = v319 + 1;
                                            if (v319 + 1 == *((_DWORD *)v23 + 3))
                                            {
                                              v216 = 0;
                                              if (!v313)
                                                goto LABEL_445;
LABEL_438:
                                              if (v317 < 0)
                                              {
                                                v221 = 0;
                                                v219 = v317 + 1;
                                              }
                                              else
                                              {
                                                v221 = (*v313 >> v281) & 1;
                                                v219 = v317 + 1;
                                                if (v317 + 1 == *((_DWORD *)v23 + 3))
                                                {
                                                  v217 = 0;
                                                }
                                                else if (v281)
                                                {
                                                  --v281;
                                                }
                                                else
                                                {
                                                  v217 = v313 + 1;
                                                  v281 = 7;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              if (v282)
                                              {
                                                --v282;
                                                if (v313)
                                                  goto LABEL_438;
                                              }
                                              else
                                              {
                                                v216 = v315 + 1;
                                                v282 = 7;
                                                if (v313)
                                                  goto LABEL_438;
                                              }
LABEL_445:
                                              v221 = 0;
                                            }
                                            v313 = v217;
                                            v315 = v216;
                                            v319 = v218;
                                            v317 = v219;
                                            if (v298)
                                            {
                                              if (v189 < 0)
                                              {
                                                v222 = 0;
                                                ++v189;
                                              }
                                              else
                                              {
                                                v222 = (*v298 >> v280) & 1;
                                                if (++v189 == *((_DWORD *)v23 + 3))
                                                {
                                                  v298 = 0;
                                                }
                                                else if (v280)
                                                {
                                                  --v280;
                                                }
                                                else
                                                {
                                                  ++v298;
                                                  v280 = 7;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v298 = 0;
                                              v222 = 0;
                                            }
                                            v194 = v220 | (2 * v194) & 6;
                                            v195 = v221 | (2 * v195) & 6;
                                            v196 = v222 | (2 * v196) & 6;
                                            JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v311, *((uint64_t **)this + 15));
                                            if (!v194 && !v195 && !v196)
                                            {
                                              JBIG2Bitmap::clearPixel(v333, v197, v324);
                                              v194 = 0;
                                              v195 = 0;
                                              goto LABEL_513;
                                            }
                                            if (v194 == 7)
                                            {
                                              v23 = a6;
                                              v223 = v170;
                                              if (v195 == 7 && v196 == 7)
                                              {
                                                JBIG2Bitmap::setPixel(v333, v197, v324);
                                                v194 = 7;
                                                v195 = 7;
                                                goto LABEL_513;
                                              }
LABEL_476:
                                              v224 = (int)v302;
                                              if (v302)
                                              {
                                                if (v290 < 0)
                                                {
                                                  v224 = 0;
                                                  ++v290;
                                                }
                                                else
                                                {
                                                  v225 = v302;
                                                  v226 = v284;
                                                  v224 = (*v302 >> v284) & 1;
                                                  v227 = v290 + 1;
                                                  v228 = *(_DWORD *)(v333 + 12);
                                                  v229 = v284 - 1;
                                                  if (!v284)
                                                  {
                                                    v225 = v302 + 1;
                                                    v229 = 7;
                                                  }
                                                  ++v290;
                                                  v230 = v227 == v228;
                                                  if (v227 == v228)
                                                    v231 = 0;
                                                  else
                                                    v231 = v225;
                                                  v302 = v231;
                                                  if (!v230)
                                                    v226 = v229;
                                                  v223 = v170;
                                                  v284 = v226;
                                                }
                                              }
                                              else
                                              {
                                                v302 = 0;
                                              }
                                              v232 = (int)v305;
                                              if (v305)
                                              {
                                                if ((v292 & 0x80000000) != 0)
                                                {
                                                  v232 = 0;
                                                  ++v292;
                                                }
                                                else
                                                {
                                                  v233 = v305;
                                                  v232 = (*v305 >> v223) & 1;
                                                  v234 = v292 + 1;
                                                  v235 = *(_DWORD *)(v333 + 12);
                                                  v236 = v170 - 1;
                                                  if (!(_DWORD)v170)
                                                  {
                                                    v233 = v305 + 1;
                                                    v236 = 7;
                                                  }
                                                  ++v292;
                                                  if (v234 == v235)
                                                    v233 = 0;
                                                  v305 = v233;
                                                  if (v234 == v235)
                                                    v223 = v170;
                                                  else
                                                    v223 = v236;
                                                }
                                              }
                                              else
                                              {
                                                v305 = 0;
                                              }
                                              if (v301)
                                              {
                                                v170 = v223;
                                                if (v288 < 0)
                                                {
                                                  v239 = 0;
                                                  ++v288;
                                                }
                                                else
                                                {
                                                  v237 = v301;
                                                  v238 = v283;
                                                  v239 = (*v301 >> v283) & 1;
                                                  v240 = v288 + 1;
                                                  v241 = *((_DWORD *)v23 + 3);
                                                  v242 = v283 - 1;
                                                  if (!v283)
                                                  {
                                                    v237 = v301 + 1;
                                                    v242 = 7;
                                                  }
                                                  ++v288;
                                                  v243 = v240 == v241;
                                                  if (v240 == v241)
                                                    v244 = 0;
                                                  else
                                                    v244 = v237;
                                                  v301 = v244;
                                                  if (!v243)
                                                    v238 = v242;
                                                  v283 = v238;
                                                }
                                              }
                                              else
                                              {
                                                v170 = v223;
                                                v301 = 0;
                                                v239 = 0;
                                              }
                                              if (JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v239 | (v335 << 11) | (v224 << 10) | (v332 << 8) | (32 * v325) | (4 * v198) | (2 * v232), *((uint64_t **)this + 15)))JBIG2Bitmap::setPixel(v333, v197, v324);
LABEL_513:
                                              ++v197;
                                              v23 = a6;
                                              v84 = v215;
                                              if (a2 == v197)
                                                goto LABEL_514;
                                              continue;
                                            }
                                            v23 = a6;
                                          }
                                          v223 = v170;
                                          goto LABEL_476;
                                        }
LABEL_398:
                                        v202 = v308;
                                        if (v308 < 0)
                                        {
                                          LODWORD(v201) = 0;
                                          ++v308;
                                          if (!v71)
                                            goto LABEL_426;
                                        }
                                        else
                                        {
                                          LODWORD(v201) = (*v201 >> v285) & 1;
                                          ++v308;
                                          if (v202 + 1 == *((_DWORD *)v23 + 3))
                                            goto LABEL_400;
                                          if (v285)
                                          {
                                            --v285;
                                            if (!v71)
                                              goto LABEL_426;
                                          }
                                          else
                                          {
                                            ++v321;
                                            v285 = 7;
                                            if (!v71)
                                              goto LABEL_426;
                                          }
                                        }
LABEL_401:
                                        if (v307 < 0)
                                        {
                                          v204 = 0;
                                          ++v307;
                                          if (!v167)
                                            goto LABEL_427;
                                        }
                                        else
                                        {
                                          v203 = v296;
                                          v204 = (*v71 >> v296) & 1;
                                          v205 = v307 + 1;
                                          v206 = *((_DWORD *)v23 + 3);
                                          v207 = v296 - 1;
                                          if (v296)
                                            v208 = v71;
                                          else
                                            v208 = v71 + 1;
                                          if (!v296)
                                            v207 = 7;
                                          ++v307;
                                          if (v205 == v206)
                                            v71 = 0;
                                          else
                                            v71 = v208;
                                          if (v205 != v206)
                                            v203 = v207;
                                          v296 = v203;
                                          if (!v167)
                                            goto LABEL_427;
                                        }
                                        goto LABEL_413;
                                      }
                                      ++v322;
                                      v286 = 7;
                                    }
                                  }
                                  else
                                  {
LABEL_391:
                                    v322 = 0;
                                  }
                                  break;
                                }
                                v201 = v321;
                                if (!v321)
                                  goto LABEL_400;
                                goto LABEL_398;
                              }
                              if (v189 != (_DWORD)v16)
                              {
                                v252 = &v298[v265];
                                v251 = v16;
                                goto LABEL_558;
                              }
                              v193 = 0;
                              v280 = a7 & 7;
                              v189 = v16;
                            }
                            else
                            {
                              v193 = 0;
                              v280 = v271;
                              v189 = ~a7;
                            }
                          }
LABEL_383:
                          v298 = 0;
                          v192 = 0;
                          v191 = 2 * v193;
                          goto LABEL_384;
                        }
LABEL_578:
                        v260 = v281 - 1;
                        goto LABEL_586;
                      }
                      v248 = 0;
                      v249 = 7;
                      v250 = v313;
LABEL_547:
                      v188 = (*v250 >> v249) & 1;
                      v299 = v248;
                      if (v248 + 1 != v317)
                      {
                        if (v249)
                        {
                          v254 = v249 - 1;
                        }
                        else
                        {
                          ++v250;
                          v254 = 7;
                        }
                        v185 = 2 * v188;
                        v313 = v250;
                        v186 = (*v250 >> v254) & 1;
                        v255 = v299 + 2;
                        v281 = v254;
                        if (v299 + 2 == v317)
                        {
                          v313 = 0;
                          goto LABEL_374;
                        }
                        if (v254)
                          goto LABEL_578;
                        ++v313;
                        v260 = 7;
LABEL_586:
                        v281 = v260;
                        v317 = v255;
                        goto LABEL_374;
                      }
                      v281 = v249;
                    }
                  }
                  else
                  {
                    v188 = 0;
                    v281 = v271;
                    v317 = ~a7;
                  }
                }
                v313 = 0;
                v186 = 0;
                v185 = 2 * v188;
                goto LABEL_374;
              }
              v86 = 0;
              v85 = 0;
              v83 = v271;
              v84 = v279;
            }
LABEL_338:
            v167 = 0;
            v169 = 0;
            v168 = 2 * v85;
            goto LABEL_339;
          }
          if ((v27 & 1) != 0 || (v28 = *(_DWORD *)(v10 + 12), v28 < 1))
          {
            v331 = 0;
            v33 = 0;
            v34 = 0;
            v334 = 0;
          }
          else
          {
            v29 = *(_QWORD *)(v10 + 24);
            if (v29)
            {
              v30 = (unsigned __int8 *)(v29 + *(int *)(v10 + 20) * v24);
              v334 = *v30 >> 7;
              v31 = v28 == 1;
              v32 = v28 == 1 ? 0 : v30;
              v331 = v32;
              v33 = v31 ? 7 : 6;
              v34 = 1;
            }
            else
            {
              v331 = 0;
              v34 = 0;
              v334 = 0;
              v33 = 7;
            }
          }
          if (v25 <= v15 || (*(_DWORD *)(v10 + 12) & 0x80000000) != 0)
          {
            v316 = 0;
            v36 = 0;
            v35 = 0;
          }
          else
          {
            v316 = (unsigned __int8 *)(*(_QWORD *)(v10 + 24) + *(int *)(v10 + 20) * (uint64_t)v15);
            v35 = -1;
            v36 = 7;
          }
          v37 = v24 - a8;
          if ((int)v24 - a8 < 0 || *((_DWORD *)v23 + 4) <= v37 || *((_DWORD *)v23 + 3) <= (int)v16)
          {
            v314 = 0;
            v40 = 0;
            v41 = 0;
          }
          else
          {
            v38 = *((_QWORD *)v23 + 3);
            v39 = *((int *)v23 + 5) * (uint64_t)v37;
            if (a7 < 1)
            {
              v314 = (unsigned __int8 *)(v38 + (int)(v39 + v262));
              v40 = ((_BYTE)a7 - 1) & 7;
            }
            else
            {
              v314 = (unsigned __int8 *)(v38 + v39);
              v40 = 7;
            }
            v41 = v16;
          }
          v42 = v15 - a8;
          v309 = v33;
          v320 = v34;
          v300 = v35;
          v293 = v40;
          v295 = v36;
          v297 = v41;
          if (v15 - a8 >= 0)
          {
            v43 = *((_DWORD *)v23 + 4);
            if (v43 > v42)
              break;
          }
          v49 = 0;
          v50 = v42 + 1;
          if (v42 + 1 < 0)
          {
            v318 = 0;
            v306 = 0;
            v46 = 0;
            v77 = 0;
            v78 = 0;
            v79 = 0;
            LOBYTE(v80) = 1;
            goto LABEL_130;
          }
          v318 = 0;
          HIDWORD(v306) = 0;
          v46 = 0;
          v43 = *((_DWORD *)v23 + 4);
LABEL_124:
          if (v43 <= v50 || (v90 = *((_DWORD *)v23 + 3), v90 <= (int)v16))
          {
            LOBYTE(v80) = 0;
            v77 = 0;
            LODWORD(v306) = 0;
            v78 = 0;
            v79 = 0;
          }
          else
          {
            v80 = *((_QWORD *)v23 + 3);
            if (v80)
            {
              v77 = (unsigned __int8 *)(v80 + v270 + *((int *)v23 + 5) * (uint64_t)v50);
              if (a7 <= 0)
              {
                LOBYTE(v80) = 0;
                v79 = (*v77 >> v268) & 1;
                v78 = 1 - a7;
                v154 = v272 == v90;
                if (v272 == v90)
                  v77 = 0;
                else
                  v77 += v264;
                v155 = v263;
                if (v154)
                  v155 = ((_BYTE)a7 - 1) & 7;
                LODWORD(v306) = v155;
              }
              else
              {
                LOBYTE(v80) = 0;
                v79 = 0;
                LODWORD(v306) = 7;
                v78 = 1 - a7;
              }
            }
            else
            {
              v77 = 0;
              v79 = 0;
              LODWORD(v306) = v266;
              v78 = v16;
            }
          }
LABEL_130:
          if (a5)
          {
            if (v37 < 0 || *((_DWORD *)v23 + 4) <= v37 || (v91 = *((_DWORD *)v23 + 3), v91 <= v279))
            {
              v95 = 0;
              v91 = 0;
              v96 = 0;
            }
            else
            {
              v92 = *((_QWORD *)v23 + 3);
              if (v92)
              {
                v312 = (unsigned __int8 *)(v92 + v273 + *((int *)v23 + 5) * (uint64_t)v37);
                if (a7 < 0)
                {
                  if (v91 != (_DWORD)v16)
                  {
                    v157 = &v312[v265];
                    v156 = v16;
                    v95 = v21;
                    goto LABEL_289;
                  }
                  v96 = 0;
                  v95 = a7 & 7;
                  v91 = v16;
                }
                else
                {
                  if (a7)
                  {
                    if ((v267 & 0x80000000) == 0)
                    {
                      v93 = 0;
                      v94 = 0;
                      v95 = 7;
                      v91 = 2 - a7;
LABEL_141:
                      if (v42 < 0 || *((_DWORD *)v23 + 4) <= v42 || (v97 = *((_DWORD *)v23 + 3), v97 <= v279))
                      {
                        v102 = 0;
                        v97 = 0;
                        v103 = 0;
                      }
                      else
                      {
                        v98 = *((_QWORD *)v23 + 3);
                        if (v98)
                        {
                          v99 = (unsigned __int8 *)(v98 + v273 + *((int *)v23 + 5) * (uint64_t)v42);
                          if (a7 < 0)
                          {
                            if (v97 != (_DWORD)v16)
                            {
                              v99 += v265;
                              v158 = v16;
                              v102 = v21;
                              goto LABEL_297;
                            }
                            v103 = 0;
                            v102 = a7 & 7;
                            v97 = v16;
                          }
                          else
                          {
                            if (a7)
                            {
                              if ((v267 & 0x80000000) == 0)
                              {
                                v100 = 0;
                                v101 = 0;
                                v102 = 7;
                                v97 = 2 - a7;
LABEL_151:
                                v287 = v102;
                                v289 = v95;
                                v304 = v91;
                                v326 = v99;
                                v303 = v97;
                                if ((v80 & 1) != 0
                                  || *((_DWORD *)v23 + 4) <= v50
                                  || (v104 = *((_DWORD *)v23 + 3), v104 <= v279))
                                {
                                  v291 = 0;
                                  v104 = 0;
                                  v109 = 0;
                                }
                                else
                                {
                                  v105 = *((_QWORD *)v23 + 3);
                                  if (v105)
                                  {
                                    v106 = (unsigned __int8 *)(v105 + v273 + *((int *)v23 + 5) * (uint64_t)v50);
                                    if (a7 < 0)
                                    {
                                      if (v104 != (_DWORD)v16)
                                      {
                                        v106 += v265;
                                        v159 = v16;
                                        goto LABEL_305;
                                      }
                                      v109 = 0;
                                      v291 = a7 & 7;
                                      v104 = v16;
                                    }
                                    else
                                    {
                                      if (a7)
                                      {
                                        if ((v267 & 0x80000000) == 0)
                                        {
                                          v323 = (unsigned __int8 *)(v105 + v273 + *((int *)v23 + 5) * (uint64_t)v50);
                                          v107 = 0;
                                          v108 = 0;
                                          v291 = 7;
                                          v104 = 2 - a7;
LABEL_161:
                                          v110 = v94 | v93;
                                          v111 = v101 | v100;
                                          v112 = v108 | v107;
                                          goto LABEL_163;
                                        }
                                        v107 = 0;
                                        v108 = *v106 >> 7;
                                        v163 = 1;
                                        v291 = 7;
                                        if (v104 == 1)
                                        {
LABEL_322:
                                          v323 = 0;
                                          goto LABEL_161;
                                        }
                                        goto LABEL_323;
                                      }
                                      v159 = 0;
                                      v21 = 7;
LABEL_305:
                                      v109 = (*v106 >> v21) & 1;
                                      if (v159 + 1 != v104)
                                      {
                                        if (v21)
                                        {
                                          v162 = v21 - 1;
                                        }
                                        else
                                        {
                                          ++v106;
                                          v162 = 7;
                                        }
                                        v107 = 2 * v109;
                                        v108 = (*v106 >> v162) & 1;
                                        v163 = v159 + 2;
                                        v291 = v162;
                                        if (v163 == v104)
                                          goto LABEL_322;
                                        if (v162)
                                        {
LABEL_323:
                                          v323 = v106;
                                          v164 = v291 - 1;
                                        }
                                        else
                                        {
                                          v323 = v106 + 1;
                                          v164 = 7;
                                        }
                                        v291 = v164;
                                        v104 = v163;
                                        goto LABEL_161;
                                      }
                                      v291 = v21;
                                    }
                                  }
                                  else
                                  {
                                    v109 = 0;
                                    v291 = v271;
                                    v104 = ~a7;
                                  }
                                }
                                v323 = 0;
                                v108 = 0;
                                v107 = 2 * v109;
                                goto LABEL_161;
                              }
                              v100 = 0;
                              v101 = *v99 >> 7;
                              v161 = 1;
                              v102 = 7;
                              if (v97 == 1)
                              {
LABEL_316:
                                v99 = 0;
                                goto LABEL_151;
                              }
                              goto LABEL_319;
                            }
                            v158 = 0;
                            v102 = 7;
LABEL_297:
                            v103 = (*v99 >> v102) & 1;
                            if (v158 + 1 != v97)
                            {
                              if (v102)
                              {
                                --v102;
                              }
                              else
                              {
                                ++v99;
                                v102 = 7;
                              }
                              v100 = 2 * v103;
                              v101 = (*v99 >> v102) & 1;
                              v161 = v158 + 2;
                              if (v161 == v97)
                                goto LABEL_316;
                              if (v102)
                              {
LABEL_319:
                                --v102;
                              }
                              else
                              {
                                ++v99;
                                v102 = 7;
                              }
                              v97 = v161;
                              goto LABEL_151;
                            }
                          }
                        }
                        else
                        {
                          v103 = 0;
                          v102 = v271;
                          v97 = ~a7;
                        }
                      }
                      v99 = 0;
                      v101 = 0;
                      v100 = 2 * v103;
                      goto LABEL_151;
                    }
                    v93 = 0;
                    v94 = *v312 >> 7;
                    v160 = 1;
                    v95 = 7;
                    if (v91 == 1)
                    {
LABEL_314:
                      v312 = 0;
                      goto LABEL_141;
                    }
                    goto LABEL_317;
                  }
                  v156 = 0;
                  v95 = 7;
                  v157 = (unsigned __int8 *)(v92 + v273 + *((int *)v23 + 5) * (uint64_t)v37);
LABEL_289:
                  v96 = (*v157 >> v95) & 1;
                  if (v156 + 1 != v91)
                  {
                    if (v95)
                    {
                      --v95;
                    }
                    else
                    {
                      ++v157;
                      v95 = 7;
                    }
                    v93 = 2 * v96;
                    v312 = v157;
                    v94 = (*v157 >> v95) & 1;
                    v160 = v156 + 2;
                    if (v160 == v91)
                      goto LABEL_314;
                    if (v95)
                    {
LABEL_317:
                      --v95;
                    }
                    else
                    {
                      v312 = v157 + 1;
                      v95 = 7;
                    }
                    v91 = v160;
                    goto LABEL_141;
                  }
                }
              }
              else
              {
                v96 = 0;
                v95 = v271;
                v91 = ~a7;
              }
            }
            v312 = 0;
            v94 = 0;
            v93 = 2 * v96;
            goto LABEL_141;
          }
          v312 = 0;
          v289 = 0;
          v304 = 0;
          v326 = 0;
          v287 = 0;
          v303 = 0;
          v323 = 0;
          v291 = 0;
          v104 = 0;
          v110 = 0;
          v111 = 0;
          v112 = 0;
LABEL_163:
          if (a2 >= 1)
          {
            for (i = 0; a2 != i; ++i)
            {
              v114 = (int)v331;
              if (v331)
              {
                if (v320 < 0)
                {
                  v114 = 0;
                  ++v320;
                  if (!v46)
                    goto LABEL_200;
                }
                else
                {
                  v115 = v331;
                  v116 = v309;
                  v114 = (*v331 >> v309) & 1;
                  v117 = v320 + 1;
                  v118 = *(_DWORD *)(v333 + 12);
                  v119 = v309 - 1;
                  if (!v309)
                  {
                    v115 = v331 + 1;
                    v119 = 7;
                  }
                  ++v320;
                  v120 = v117 == v118;
                  if (v117 == v118)
                    v121 = 0;
                  else
                    v121 = v115;
                  v331 = v121;
                  if (!v120)
                    v116 = v119;
                  v309 = v116;
                  if (!v46)
                  {
LABEL_200:
                    v123 = 0;
                    if (!v77)
                      goto LABEL_201;
                    goto LABEL_187;
                  }
                }
              }
              else
              {
                v331 = 0;
                if (!v46)
                  goto LABEL_200;
              }
              if (v318 < 0)
              {
                v123 = 0;
                ++v318;
                if (!v77)
                  goto LABEL_201;
              }
              else
              {
                v122 = HIDWORD(v306);
                v123 = (*v46 >> SBYTE4(v306)) & 1;
                v124 = v318 + 1;
                v125 = *((_DWORD *)v23 + 3);
                v126 = HIDWORD(v306) - 1;
                if (HIDWORD(v306))
                  v127 = v46;
                else
                  v127 = v46 + 1;
                if (!HIDWORD(v306))
                  v126 = 7;
                ++v318;
                if (v124 == v125)
                  v46 = 0;
                else
                  v46 = v127;
                if (v124 != v125)
                  v122 = v126;
                HIDWORD(v306) = v122;
                if (!v77)
                {
LABEL_201:
                  v129 = 0;
                  goto LABEL_207;
                }
              }
LABEL_187:
              if (v78 < 0)
              {
                v129 = 0;
                ++v78;
              }
              else
              {
                v128 = v306;
                v129 = (*v77 >> v306) & 1;
                ++v78;
                v130 = *((_DWORD *)v23 + 3);
                v131 = v306 - 1;
                if ((_DWORD)v306)
                  v132 = v77;
                else
                  v132 = v77 + 1;
                if (!(_DWORD)v306)
                  v131 = 7;
                if (v78 == v130)
                  v77 = 0;
                else
                  v77 = v132;
                if (v78 != v130)
                  v128 = v131;
                LODWORD(v306) = v128;
              }
LABEL_207:
              v334 = v114 | (2 * v334) & 6;
              v49 = v123 | (2 * v49) & 6;
              v79 = v129 | (2 * v79) & 2;
              if (!a5)
                goto LABEL_241;
              v133 = (int)v312;
              if (!v312)
              {
LABEL_211:
                v312 = 0;
                goto LABEL_216;
              }
              v134 = v304;
              if (v304 < 0)
              {
                v133 = 0;
                ++v304;
              }
              else
              {
                v133 = (*v312 >> v289) & 1;
                ++v304;
                if (v134 + 1 == *((_DWORD *)v23 + 3))
                  goto LABEL_211;
                if (v289)
                {
                  --v289;
                }
                else
                {
                  ++v312;
                  v289 = 7;
                }
              }
LABEL_216:
              v135 = (int)v326;
              if (v326)
              {
                v136 = v303;
                if (v303 < 0)
                {
                  v135 = 0;
                  ++v303;
                  goto LABEL_224;
                }
                v135 = (*v326 >> v287) & 1;
                ++v303;
                if (v136 + 1 != *((_DWORD *)v23 + 3))
                {
                  if (v287)
                  {
                    --v287;
                  }
                  else
                  {
                    ++v326;
                    v287 = 7;
                  }
                  goto LABEL_224;
                }
              }
              v326 = 0;
LABEL_224:
              v137 = (int)v323;
              if (!v323)
                goto LABEL_227;
              if (v104 < 0)
              {
                v137 = 0;
                ++v104;
                goto LABEL_232;
              }
              v137 = (*v323 >> v291) & 1;
              if (++v104 != *((_DWORD *)v23 + 3))
              {
                if (v291)
                {
                  --v291;
                }
                else
                {
                  ++v323;
                  v291 = 7;
                }
              }
              else
              {
LABEL_227:
                v323 = 0;
              }
LABEL_232:
              v110 = v133 | (2 * v110) & 6;
              v111 = v135 | (2 * v111) & 6;
              v112 = v137 | (2 * v112) & 6;
              JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v311, *((uint64_t **)this + 15));
              if (v110 || v111 || v112)
              {
                if (v110 != 7)
                {
                  v23 = a6;
LABEL_241:
                  v138 = (int)v316;
                  if (v316)
                  {
                    if (v300 < 0)
                    {
                      v138 = 0;
                      ++v300;
                    }
                    else
                    {
                      v139 = v316;
                      v140 = v295;
                      v138 = (*v316 >> v295) & 1;
                      v141 = v300 + 1;
                      v142 = *(_DWORD *)(v333 + 12);
                      v143 = v295 - 1;
                      if (!v295)
                      {
                        v139 = v316 + 1;
                        v143 = 7;
                      }
                      ++v300;
                      v144 = v141 == v142;
                      if (v141 == v142)
                        v145 = 0;
                      else
                        v145 = v139;
                      v316 = v145;
                      if (!v144)
                        v140 = v143;
                      v295 = v140;
                    }
                  }
                  else
                  {
                    v316 = 0;
                  }
                  v146 = (int)v314;
                  if (v314)
                  {
                    if (v297 < 0)
                    {
                      v146 = 0;
                      ++v297;
                    }
                    else
                    {
                      v147 = v314;
                      v148 = v293;
                      v146 = (*v314 >> v293) & 1;
                      v149 = v297 + 1;
                      v150 = *((_DWORD *)v23 + 3);
                      v151 = v293 - 1;
                      if (!v293)
                      {
                        v147 = v314 + 1;
                        v151 = 7;
                      }
                      ++v297;
                      v152 = v149 == v150;
                      if (v149 == v150)
                        v153 = 0;
                      else
                        v153 = v147;
                      v314 = v153;
                      if (!v152)
                        v148 = v151;
                      v293 = v148;
                    }
                  }
                  else
                  {
                    v314 = 0;
                  }
                  if (JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), (v334 << 7) | (v138 << 6) | (32 * v146) | (4 * v49) | v79, *((uint64_t **)this + 15)))JBIG2Bitmap::setPixel(v333, i, v324);
                  goto LABEL_267;
                }
                v23 = a6;
                if (v111 != 7 || v112 != 7)
                  goto LABEL_241;
                JBIG2Bitmap::setPixel(v333, i, v324);
                v110 = 7;
                v111 = 7;
              }
              else
              {
                JBIG2Bitmap::clearPixel(v333, i, v324);
                v110 = 0;
                v111 = 0;
              }
LABEL_267:
              v23 = a6;
            }
          }
LABEL_514:
          v15 = v324 + 1;
          a8 = v277;
          v10 = v333;
          v21 = v275;
          v16 = -a7;
          if (v324 + 1 == v276)
            return v10;
        }
        v44 = *((_DWORD *)v23 + 3);
        if (v44 <= v279)
        {
          v81 = 0;
          v82 = 0;
          LODWORD(v45) = 0;
        }
        else
        {
          v45 = *((_QWORD *)v23 + 3);
          if (v45)
          {
            v46 = (unsigned __int8 *)(v45 + v273 + *((int *)v23 + 5) * (uint64_t)v42);
            v47 = a7;
            if ((a7 & 0x80000000) == 0)
            {
              if (a7)
              {
                v47 = 0;
                v48 = 0;
LABEL_57:
                HIDWORD(v306) = 7;
                v318 = 1 - a7;
LABEL_122:
                v49 = v48 | v47;
                goto LABEL_123;
              }
              v48 = *v46 >> 7;
              v87 = 1;
              v88 = 7;
              if (v44 == 1)
              {
                v318 = 1;
                HIDWORD(v306) = 7;
                v46 = 0;
                goto LABEL_122;
              }
              goto LABEL_121;
            }
            v81 = a7 & 7;
            LODWORD(v45) = (*v46 >> v269) & 1;
            v82 = v16;
            if (v44 != (_DWORD)v16)
            {
              v46 += v265;
              v47 = 2 * v45;
              v48 = (*v46 >> v21) & 1;
              if (v272 == v44)
              {
                v46 = 0;
                HIDWORD(v306) = v21;
                v318 = 1 - a7;
                goto LABEL_122;
              }
              if (!v21)
              {
                ++v46;
                goto LABEL_57;
              }
              v88 = v21;
              v87 = 1 - a7;
LABEL_121:
              v318 = v87;
              HIDWORD(v306) = v88 - 1;
              goto LABEL_122;
            }
          }
          else
          {
            v81 = v271;
            v82 = ~a7;
          }
        }
        v318 = v82;
        HIDWORD(v306) = v81;
        v46 = 0;
        v49 = 2 * v45;
LABEL_123:
        v50 = v42 + 1;
        goto LABEL_124;
      }
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

void sub_184B61104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Bitmap::combine(uint64_t this, JBIG2Bitmap *a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v10;
  signed int v11;
  BOOL v12;
  signed int v13;
  signed int v14;
  char v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  signed int v21;
  _BYTE *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int v29;
  char v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;

  if (a2 && a4 != 0x80000000)
  {
    v5 = -a4 & (a4 >> 31);
    v6 = *((_DWORD *)a2 + 4);
    v7 = *(_DWORD *)(this + 16);
    if (v6 + a4 > v7)
      v6 = v7 - a4;
    if (v5 < v6 && (v5 ^ 0x7FFFFFFF) >= a4 && (v6 ^ 0x7FFFFFFF) >= a4)
    {
      v10 = *(_DWORD *)(this + 20);
      if (v10 < 1 || ((v11 = 0x7FFFFFFFu / v10, v5 + a4 <= v11) ? (v12 = v6 + a4 <= v11) : (v12 = 0), v12))
      {
        v13 = a3 & 0xFFFFFFF8 & ~(a3 >> 31);
        v14 = *((_DWORD *)a2 + 3) + a3 >= *(_DWORD *)(this + 12) ? *(_DWORD *)(this + 12) : *((_DWORD *)a2 + 3) + a3;
        if (v13 < v14)
        {
          v15 = a3 & 7;
          v16 = 0xFFu >> (v14 & 7);
          v17 = 255 << (8 - (v14 & 7));
          if ((v14 & 7) == 0)
            v17 = 255;
          v18 = (v14 - 1) & 0xFFFFFFF8;
          v19 = (unint64_t)-a3 >> 3;
          v20 = (unint64_t)a3 >> 3;
          v21 = v14 - 8;
          do
          {
            v22 = (_BYTE *)(*(_QWORD *)(this + 24) + *(int *)(this + 20) * (uint64_t)(v5 + a4));
            if (v13 == v18)
            {
              if ((a3 & 0x80000000) == 0)
              {
                v22 += v20;
                v23 = *v22;
                v24 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5);
                switch(a5)
                {
                  case 0:
                    v25 = v24 >> v15;
                    goto LABEL_58;
                  case 1:
                    v25 = ((v24 | 0xFF00) >> v15) | v16;
                    goto LABEL_66;
                  case 2:
                    goto LABEL_39;
                  case 3:
                    v24 ^= 0xFFu;
LABEL_39:
                    v25 = v24 >> v15;
                    goto LABEL_61;
                  case 4:
                    v32 = v23 & ~(v17 & (0xFFu >> v15));
                    v25 = (v24 >> v15) & v17;
                    goto LABEL_70;
                  default:
                    goto LABEL_71;
                }
              }
              LOBYTE(v23) = *v22;
              LOBYTE(v25) = *(_BYTE *)(*((_QWORD *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5 + v19);
              switch(a5)
              {
                case 0:
                  v30 = v17 & v25;
                  goto LABEL_59;
                case 1:
                  LOBYTE(v25) = v16 | v25;
                  goto LABEL_66;
                case 2:
                  v38 = v17 & v25;
                  goto LABEL_62;
                case 3:
                  goto LABEL_60;
                case 4:
                  LOBYTE(v25) = v17 & v25;
                  goto LABEL_69;
                default:
                  break;
              }
            }
            else
            {
              if (a3 < 0)
              {
                v31 = 0;
                v27 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5 + v19);
                v28 = *v27;
              }
              else
              {
                v26 = &v22[v20];
                v27 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + *((int *)a2 + 5) * (uint64_t)v5);
                v28 = *v27;
                v29 = *v26;
                switch(a5)
                {
                  case 0:
                    v29 |= v28 >> v15;
                    break;
                  case 1:
                    v29 &= (v28 | 0xFF00) >> v15;
                    break;
                  case 2:
                    v33 = v28 >> v15;
                    goto LABEL_44;
                  case 3:
                    v33 = (v28 ^ 0xFF) >> v15;
LABEL_44:
                    LOBYTE(v29) = v33 ^ v29;
                    break;
                  case 4:
                    v29 = (255 << (8 - v15)) & v29 | (v28 >> v15);
                    break;
                  default:
                    break;
                }
                *v26 = v29;
                v22 = v26 + 1;
                v31 = (a3 & 0xFFFFFFF8) + 8;
              }
              v34 = v27 + 1;
              if (v31 >= v21)
              {
                v36 = v28;
              }
              else
              {
                do
                {
                  v35 = *v22;
                  v36 = *v34;
                  v37 = (v36 | (v28 << 8)) >> v15;
                  switch(a5)
                  {
                    case 0:
                      v35 |= v37;
                      break;
                    case 1:
                      v35 &= v37;
                      break;
                    case 2:
                      v35 ^= v37;
                      break;
                    case 3:
                      v35 = ~(v37 ^ v35);
                      break;
                    case 4:
                      v35 = v37;
                      break;
                    default:
                      break;
                  }
                  *v22++ = v35;
                  v31 += 8;
                  ++v34;
                  v28 = v36;
                }
                while (v31 < v21);
              }
              LOBYTE(v23) = *v22;
              LOBYTE(v25) = (*v34 | (v36 << 8)) >> v15;
              switch(a5)
              {
                case 0:
LABEL_58:
                  v30 = v25 & v17;
LABEL_59:
                  LOBYTE(v23) = v30 | v23;
                  break;
                case 1:
                  v25 = ((*v34 | (v36 << 8)) >> v15) | v16;
LABEL_66:
                  LOBYTE(v23) = v25 & v23;
                  break;
                case 2:
                  goto LABEL_61;
                case 3:
LABEL_60:
                  LOBYTE(v25) = ~(_BYTE)v25;
LABEL_61:
                  v38 = v25 & v17;
LABEL_62:
                  LOBYTE(v23) = v38 ^ v23;
                  break;
                case 4:
                  LOBYTE(v25) = v25 & v17;
LABEL_69:
                  LOBYTE(v32) = v16 & v23;
LABEL_70:
                  LOBYTE(v23) = v25 | v32;
                  break;
                default:
                  break;
              }
            }
LABEL_71:
            *v22 = v23;
            ++v5;
          }
          while (v5 < v6);
        }
      }
    }
  }
  return this;
}

_QWORD *JBIG2Stream::discardSegment(_QWORD *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = this[9];
  v3 = *(unsigned int *)(v2 + 12);
  if ((int)v3 < 1)
  {
LABEL_5:
    v2 = this[8];
    v3 = *(unsigned int *)(v2 + 12);
    if ((int)v3 < 1)
      return this;
    v4 = 0;
    v5 = *(_QWORD **)v2;
    while (*(_DWORD *)(v5[v4] + 8) != a2)
    {
      if (v3 == ++v4)
        return this;
    }
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD **)v2;
    while (*(_DWORD *)(v5[v4] + 8) != a2)
    {
      if (v3 == ++v4)
        goto LABEL_5;
    }
  }
  if ((v4 & 0x80000000) != 0 || (int)v3 <= (int)v4)
    return (_QWORD *)error(-1, "%s: Range error (index = %d, length = %d)", "del", v4, v3);
  v6 = v3 - 1;
  if ((int)v3 - 1 > (int)v4)
  {
    this = memmove(&v5[v4], &v5[v4 + 1], 8 * ((int)v3 + ~(_DWORD)v4));
    v6 = *(_DWORD *)(v2 + 12) - 1;
  }
  *(_DWORD *)(v2 + 12) = v6;
  v7 = *(_DWORD *)(v2 + 8);
  v8 = v7 - v6;
  v9 = *(_DWORD *)(v2 + 16);
  if (v7 >= 0)
    v10 = *(_DWORD *)(v2 + 8);
  else
    v10 = v7 + 1;
  v11 = v10 >> 1;
  if (v9 <= 0)
    v9 = v11;
  if (v8 >= v9)
  {
    *(_DWORD *)(v2 + 8) = v7 - v9;
    this = greallocn(*(void **)v2, v7 - v9, 8u);
    *(_QWORD *)v2 = this;
    v12 = *(_DWORD *)(v2 + 8);
    if (v12 < *(_DWORD *)(v2 + 12))
      *(_DWORD *)(v2 + 12) = v12;
  }
  return this;
}

uint64_t JBIG2Bitmap::clearPixel(uint64_t this, unsigned int a2, int a3)
{
  int v3;

  if ((a2 & 0x80000000) == 0
    && (a3 & 0x80000000) == 0
    && *(_DWORD *)(this + 12) > (signed int)a2
    && *(_DWORD *)(this + 16) > a3)
  {
    v3 = *(_DWORD *)(this + 20) * a3 + (a2 >> 3);
    *(_BYTE *)(*(_QWORD *)(this + 24) + v3) &= 0x7F7Fu >> (a2 & 7);
  }
  return this;
}

uint64_t JBIG2Bitmap::setPixel(uint64_t this, unsigned int a2, int a3)
{
  int v3;

  if ((a2 & 0x80000000) == 0
    && (a3 & 0x80000000) == 0
    && *(_DWORD *)(this + 12) > (signed int)a2
    && *(_DWORD *)(this + 16) > a3)
  {
    v3 = *(_DWORD *)(this + 20) * a3 + (a2 >> 3);
    *(_BYTE *)(*(_QWORD *)(this + 24) + v3) |= 1 << (~(_BYTE)a2 & 7);
  }
  return this;
}

uint64_t JBIG2Bitmap::getPixel(JBIG2Bitmap *this, unsigned int a2, int a3)
{
  uint64_t result;

  if ((a2 & 0x80000000) != 0)
    return 0;
  result = 0;
  if ((a3 & 0x80000000) == 0 && *((_DWORD *)this + 3) > (signed int)a2)
  {
    if (*((_DWORD *)this + 4) > a3)
      return (*(unsigned __int8 *)(*((_QWORD *)this + 3) + (int)(*((_DWORD *)this + 5) * a3 + (a2 >> 3))) >> (~(_BYTE)a2 & 7)) & 1;
    return 0;
  }
  return result;
}

void JBIG2Stream::resetGenericStats(JBIG2Stream *this, int a2, const void **a3)
{
  size_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v4 = contextSize[a2];
  if (a3 && *((_DWORD *)a3 + 2) == (_DWORD)v4)
  {
    v6 = *((_QWORD *)this + 14);
    v7 = *(void **)v6;
    if (*(_DWORD *)(v6 + 8) == (_DWORD)v4)
    {
      memcpy(v7, *a3, v4);
    }
    else
    {
      free(v7);
      MEMORY[0x186DC23C4](v6, 0x1010C40A1D9428BLL);
      *((_QWORD *)this + 14) = JArithmeticDecoderStats::copy((JArithmeticDecoderStats *)a3);
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 14);
    v9 = *(void **)v8;
    if (*(_DWORD *)(v8 + 8) == (_DWORD)v4)
    {
      bzero(v9, contextSize[a2]);
    }
    else
    {
      free(v9);
      MEMORY[0x186DC23C4](v8, 0x1010C40A1D9428BLL);
      *((_QWORD *)this + 14) = 0;
      v10 = operator new();
      *(_DWORD *)(v10 + 8) = 1 << v4;
      v11 = gmallocn(1 << v4, 1u);
      *(_QWORD *)v10 = v11;
      bzero(v11, *(int *)(v10 + 8));
      *((_QWORD *)this + 14) = v10;
    }
  }
}

void sub_184B61838(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

uint64_t JBIG2Stream::readGenericBitmap(JBIG2Stream *this, int a2, int a3, signed int a4, unsigned int a5, int a6, int a7, JBIG2Bitmap *a8, int *a9, int32x4_t *a10, unsigned int a11)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int32x2_t v45;
  int32x2_t v46;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int BlackCode;
  int v66;
  int WhiteCode;
  BOOL v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  uint64_t v112;
  int v113;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  BOOL v119;
  uint64_t v120;
  int v121;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  int v126;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  int v134;
  int v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v142;
  int v144;
  BOOL v145;
  uint64_t v146;
  int v147;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  uint64_t v153;
  int v154;
  int v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  int v160;
  BOOL v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  int v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  signed int v172;
  uint64_t v173;
  signed int j;
  uint64_t v176;
  _QWORD *v177;
  unsigned int k;
  int *v179;
  int *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int32x2_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  unint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  int v204;
  void *v205;
  signed int v207;
  int v208;
  int v209;
  _BOOL4 v210;
  int v211;
  int v212;
  int v213;
  unsigned __int8 *v214;
  int v215;
  int v216;
  int v217;
  unsigned __int8 *v218;
  int v219;
  int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unsigned __int8 *v224;
  int v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  unsigned __int8 *v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  unsigned __int8 *v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  unsigned __int8 *v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  unsigned __int8 *v278;
  int v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 *v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  unsigned __int8 *v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  int v305;
  int v306;
  int v307;
  unsigned __int8 *v308;
  int v309;
  int v310;
  int v311;
  unsigned __int8 *v312;
  unsigned int v313;
  unsigned __int8 *v314;
  int v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  unsigned __int8 *v321;
  int v322;
  unsigned int v323;
  int v324;
  int v325;
  unsigned __int8 *v326;
  unsigned __int8 *v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  unsigned __int8 *v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  unsigned __int8 *v340;
  int v341;
  int v342;
  int v343;
  int v344;
  unsigned __int8 *v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  unsigned __int8 *v350;
  unsigned int v351;
  int v352;
  uint64_t v353;
  int v354;
  unsigned __int8 *v355;
  int v356;
  int v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int8 *v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 *v368;
  int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  unsigned __int8 *v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  unsigned __int8 *v380;
  int v381;
  unsigned int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  unsigned __int8 *v388;
  int v389;
  int v390;
  int v391;
  int v392;
  unsigned __int8 *v393;
  int v394;
  int v395;
  int v396;
  int v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  unsigned __int8 *v406;
  BOOL v407;
  unsigned __int8 *v408;
  int v409;
  int v410;
  int v411;
  int Pixel;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  unsigned __int8 *v419;
  int v420;
  int v421;
  int v422;
  int v423;
  unsigned __int8 *v424;
  int v425;
  int v426;
  _QWORD *v427;
  char *v428;
  _QWORD *v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  __int32 v435;
  __int32 v436;
  __int32 v437;
  __int32 v438;
  int v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  uint64_t i;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  _BYTE *v471;
  _BYTE *v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _BYTE *v478;
  _BYTE *v479;
  _BYTE *v480;
  unint64_t v481;
  unint64_t v482;
  char *v483;
  uint64_t v484;
  int v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int v489;
  uint64_t v490;
  _QWORD *v491;
  int v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  int v496;
  unint64_t v497;
  int v498;
  int v499;
  int v500;
  unint64_t v501;
  int v502;
  int v503;
  uint64_t v504;
  int v505;
  int v506;
  int v508[2];
  unsigned int v509;
  int v510;
  int v511;
  int v512;
  unsigned __int8 *v513;
  __int32 v514;
  unsigned __int8 *v515;
  __int32 v516;
  unsigned __int8 *v517;
  __int32 v518;
  int v519;
  int v520;
  int v521;
  __int32 v522;
  int v523;
  int v524;
  unsigned __int8 *v525;
  int v526;
  int v527;
  int v528;
  int v529;
  unint64_t v530;
  uint64_t v532;
  uint64_t v533;
  int v534;
  int v535;
  unsigned int v536;
  uint64_t v537;
  int v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  int v543;
  uint64_t v544;
  int v545;
  uint64_t v546;

  v15 = operator new();
  JBIG2Bitmap::JBIG2Bitmap((JBIG2Bitmap *)v15, 0, a3, a4);
  v16 = *(void **)(v15 + 24);
  if (!v16)
    goto LABEL_434;
  bzero(v16, *(int *)(v15 + 20) * (uint64_t)*(int *)(v15 + 16));
  v541 = v15;
  if (!a2)
  {
    v179 = a9;
    v180 = (int *)a10;
    v543 = a3;
    if (a6 | a5 | a7)
    {
      if (a6)
        v489 = dword_1850051F0[a5];
      else
        v489 = 0;
      if (a4 < 1)
        return v15;
      v207 = 0;
      v208 = 0;
      v485 = a6;
      v486 = a5;
      while (1)
      {
        if (!a6)
          goto LABEL_455;
        v209 = JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v489, *((uint64_t **)this + 14));
        v210 = v208 == 0;
        if (!v209)
          v210 = v208;
        if (!v210)
          break;
        if (v207)
          memcpy((void *)(*(_QWORD *)(v15 + 24) + *(int *)(v15 + 20) * (uint64_t)v207), (const void *)(*(_QWORD *)(v15 + 24) + *(int *)(v15 + 20) * (v207 - 1)), *(int *)(v15 + 20));
        v208 = 1;
LABEL_859:
        if (++v207 == a4)
          return v15;
      }
      v208 = 0;
LABEL_455:
      v545 = v207;
      v492 = v208;
      switch(a5)
      {
        case 0u:
          if (v207 >= 2)
          {
            v236 = v207 - 2;
            v215 = *(_DWORD *)(v15 + 16);
            if (v215 <= (int)v236 || (v237 = *(_DWORD *)(v15 + 12), v237 < 1))
            {
              v211 = 0;
              v212 = 0;
              v213 = 0;
              v214 = 0;
            }
            else
            {
              v238 = *(_QWORD *)(v15 + 24);
              if (v238)
              {
                v239 = (unsigned __int8 *)(v238 + *(int *)(v15 + 20) * v236);
                v240 = *v239;
                v241 = v240 >> 7;
                if (v237 != 1)
                {
                  v347 = (v240 >> 6) & 1;
                  if (v237 == 2)
                    v214 = 0;
                  else
                    v214 = v239;
                  if (v237 == 2)
                    v213 = 6;
                  else
                    v213 = 5;
                  v211 = v347 | (2 * v241);
                  v212 = 2;
                  goto LABEL_722;
                }
                v212 = 1;
              }
              else
              {
                v212 = 0;
                v241 = 0;
              }
              v214 = 0;
              v211 = 2 * v241;
              v213 = 7;
            }
          }
          else
          {
            if (!v207)
            {
              v269 = 0;
              v211 = 0;
              v212 = 0;
              v213 = 0;
              v214 = 0;
              goto LABEL_728;
            }
            v211 = 0;
            v212 = 0;
            v213 = 0;
            v214 = 0;
            v215 = *(_DWORD *)(v15 + 16);
          }
LABEL_722:
          if (v215 >= v207)
          {
            v348 = *(_DWORD *)(v15 + 12);
            if (v348 >= 1)
            {
              v349 = *(_QWORD *)(v15 + 24);
              if (!v349)
              {
                v269 = 0;
                v353 = 0;
                v352 = 0;
                goto LABEL_863;
              }
              v350 = (unsigned __int8 *)(v349 + *(int *)(v15 + 20) * (v207 - 1));
              v351 = *v350;
              v269 = v351 >> 7;
              if (v348 == 1)
              {
                v352 = 0;
                v353 = 1;
LABEL_863:
                v354 = 7;
                goto LABEL_729;
              }
              v352 = (v351 >> 6) & 1;
              if (v348 != 2)
              {
                v357 = (4 * v269) | (2 * v352);
                v356 = (v351 >> 5) & 1;
                if (v348 == 3)
                  v355 = 0;
                else
                  v355 = v350;
                if (v348 == 3)
                  v354 = 5;
                else
                  v354 = 4;
                v353 = 3;
LABEL_730:
                v358 = *v180 + (uint64_t)v207;
                if ((v358 & 0x80000000) != 0
                  || *(_DWORD *)(v15 + 16) <= (int)v358
                  || (v359 = *v179, *(_DWORD *)(v15 + 12) <= *v179))
                {
                  v362 = 0;
                  v363 = 0;
                  v359 = 0;
                }
                else
                {
                  v360 = *(_QWORD *)(v15 + 24);
                  v361 = *(int *)(v15 + 20) * v358;
                  if ((v359 & 0x80000000) != 0)
                  {
                    v362 = (unsigned __int8 *)(v360 + v361);
                    v363 = 7;
                  }
                  else
                  {
                    v362 = (unsigned __int8 *)(v360 + (int)(v361 + (v359 >> 3)));
                    v363 = ~v359 & 7;
                  }
                }
                v364 = v180[1] + (uint64_t)v207;
                if ((v364 & 0x80000000) != 0
                  || *(_DWORD *)(v15 + 16) <= (int)v364
                  || (v365 = v179[1], *(_DWORD *)(v15 + 12) <= v365))
                {
                  v368 = 0;
                  v505 = 0;
                  v365 = 0;
                }
                else
                {
                  v366 = *(_QWORD *)(v15 + 24);
                  v367 = *(int *)(v15 + 20) * v364;
                  if (v365 < 0)
                  {
                    v368 = (unsigned __int8 *)(v366 + v367);
                    v369 = 7;
                  }
                  else
                  {
                    v368 = (unsigned __int8 *)(v366 + (int)(v367 + (v365 >> 3)));
                    v369 = ~v365 & 7;
                  }
                  v505 = v369;
                }
                v370 = v180[2] + (uint64_t)v207;
                if ((v370 & 0x80000000) != 0
                  || *(_DWORD *)(v15 + 16) <= (int)v370
                  || (v371 = v179[2], *(_DWORD *)(v15 + 12) <= v371))
                {
                  v374 = 0;
                  v503 = 0;
                  v371 = 0;
                }
                else
                {
                  v372 = *(_QWORD *)(v15 + 24);
                  v373 = *(int *)(v15 + 20) * v370;
                  if (v371 < 0)
                  {
                    v374 = (unsigned __int8 *)(v372 + v373);
                    v375 = 7;
                  }
                  else
                  {
                    v374 = (unsigned __int8 *)(v372 + (int)(v373 + (v371 >> 3)));
                    v375 = ~v371 & 7;
                  }
                  v503 = v375;
                }
                v376 = v180[3] + (uint64_t)v207;
                if ((v376 & 0x80000000) != 0
                  || *(_DWORD *)(v15 + 16) <= (int)v376
                  || (v377 = v179[3], *(_DWORD *)(v15 + 12) <= v377))
                {
                  v380 = 0;
                  v500 = 0;
                  v506 = 0;
                }
                else
                {
                  v378 = *(_QWORD *)(v15 + 24);
                  v379 = *(int *)(v15 + 20) * v376;
                  v506 = v179[3];
                  if (v377 < 0)
                  {
                    v380 = (unsigned __int8 *)(v378 + v379);
                    v381 = 7;
                  }
                  else
                  {
                    v380 = (unsigned __int8 *)(v378 + (int)(v379 + (v377 >> 3)));
                    v381 = ~v377 & 7;
                  }
                  v500 = v381;
                }
                if (a3 < 1)
                {
                  v180 = (int *)a10;
                  a6 = v485;
                  goto LABEL_858;
                }
                v494 = v363;
                v496 = v354;
                v499 = v213;
                v382 = 0;
                v536 = 0;
                v383 = v356 | v357;
                while (1)
                {
                  if (v362)
                  {
                    if ((v359 & 0x80000000) != 0)
                    {
                      v385 = 0;
                      ++v359;
                      if (!v368)
                        goto LABEL_794;
                    }
                    else
                    {
                      v384 = v494;
                      v385 = (*v362 >> v494) & 1;
                      ++v359;
                      v386 = *(_DWORD *)(v15 + 12);
                      v387 = v494 - 1;
                      if (v494)
                        v388 = v362;
                      else
                        v388 = v362 + 1;
                      if (!v494)
                        v387 = 7;
                      if (v359 == v386)
                        v362 = 0;
                      else
                        v362 = v388;
                      if (v359 != v386)
                        v384 = v387;
                      v494 = v384;
                      if (!v368)
                      {
LABEL_794:
                        v390 = 0;
                        if (v374)
                          goto LABEL_781;
                        goto LABEL_795;
                      }
                    }
                  }
                  else
                  {
                    v385 = 0;
                    if (!v368)
                      goto LABEL_794;
                  }
                  if (v365 < 0)
                  {
                    v390 = 0;
                    ++v365;
                    if (v374)
                      goto LABEL_781;
                  }
                  else
                  {
                    v389 = v505;
                    v390 = (*v368 >> v505) & 1;
                    ++v365;
                    v391 = *(_DWORD *)(v15 + 12);
                    v392 = v505 - 1;
                    if (v505)
                      v393 = v368;
                    else
                      v393 = v368 + 1;
                    if (!v505)
                      v392 = 7;
                    if (v365 == v391)
                      v368 = 0;
                    else
                      v368 = v393;
                    if (v365 != v391)
                      v389 = v392;
                    v505 = v389;
                    if (v374)
                    {
LABEL_781:
                      if (v371 < 0)
                      {
                        v395 = 0;
                        ++v371;
                      }
                      else
                      {
                        v394 = v503;
                        v395 = (*v374 >> v503) & 1;
                        ++v371;
                        v396 = *(_DWORD *)(v541 + 12);
                        v397 = v503 - 1;
                        if (v503)
                          v398 = v374;
                        else
                          v398 = v374 + 1;
                        if (!v503)
                          v397 = 7;
                        if (v371 == v396)
                          v374 = 0;
                        else
                          v374 = v398;
                        if (v371 != v396)
                          v394 = v397;
                        v503 = v394;
                      }
                      goto LABEL_801;
                    }
                  }
LABEL_795:
                  v395 = 0;
LABEL_801:
                  v529 = v365;
                  v525 = v368;
                  v521 = v371;
                  v517 = v374;
                  v513 = v355;
                  v509 = v359;
                  v511 = v212;
                  if (v380)
                  {
                    if (v506 < 0)
                    {
                      v515 = v380;
                      v399 = v362;
                      v400 = v353;
                      v402 = 0;
                      ++v506;
                    }
                    else
                    {
                      v399 = v362;
                      v400 = v353;
                      v401 = v500;
                      v402 = (*v380 >> v500) & 1;
                      v403 = v506 + 1;
                      v404 = *(_DWORD *)(v541 + 12);
                      v405 = v500 - 1;
                      if (v500)
                        v406 = v380;
                      else
                        v406 = v380 + 1;
                      if (!v500)
                        v405 = 7;
                      ++v506;
                      v407 = v403 == v404;
                      if (v403 == v404)
                        v408 = 0;
                      else
                        v408 = v406;
                      v515 = v408;
                      if (!v407)
                        v401 = v405;
                      v500 = v401;
                    }
                  }
                  else
                  {
                    v399 = v362;
                    v400 = v353;
                    v515 = 0;
                    v402 = 0;
                  }
                  if (a7
                    && (v409 = v390,
                        v410 = v211,
                        v411 = v385,
                        Pixel = JBIG2Bitmap::getPixel(a8, v382, v545),
                        v390 = v409,
                        v385 = v411,
                        v211 = v410,
                        Pixel))
                  {
                    v413 = 0;
                    v15 = v541;
                    a3 = v543;
                  }
                  else
                  {
                    v414 = v211;
                    if (JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v402 | (v211 << 13) | (v383 << 8) | (16 * v536) | (8 * v385) | (4 * v390) | (2 * v395), *((uint64_t **)this + 14)))
                    {
                      v15 = v541;
                      JBIG2Bitmap::setPixel(v541, v382, v545);
                      v413 = 1;
                    }
                    else
                    {
                      v413 = 0;
                      v15 = v541;
                    }
                    a3 = v543;
                    v211 = v414;
                  }
                  v359 = v509;
                  v212 = v511;
                  v353 = v400;
                  v355 = v513;
                  v362 = v399;
                  if (v214)
                  {
                    v368 = v525;
                    if (v511 < 0)
                    {
                      v416 = 0;
                      v212 = v511 + 1;
                    }
                    else
                    {
                      v415 = v499;
                      v416 = (*v214 >> v499) & 1;
                      v212 = v511 + 1;
                      v417 = *(_DWORD *)(v15 + 12);
                      v418 = v499 - 1;
                      if (v499)
                        v419 = v214;
                      else
                        v419 = v214 + 1;
                      if (!v499)
                        v418 = 7;
                      if (v212 == v417)
                        v214 = 0;
                      else
                        v214 = v419;
                      if (v212 != v417)
                        v415 = v418;
                      v499 = v415;
                    }
                    v365 = v529;
                  }
                  else
                  {
                    v416 = 0;
                    v365 = v529;
                    v368 = v525;
                  }
                  v371 = v521;
                  v380 = v515;
                  v374 = v517;
                  if (v513)
                  {
                    if ((v400 & 0x80000000) != 0)
                    {
                      v421 = 0;
                      v353 = (v400 + 1);
                    }
                    else
                    {
                      v420 = v496;
                      v421 = (*v513 >> v496) & 1;
                      v353 = (v400 + 1);
                      v422 = *(_DWORD *)(v15 + 12);
                      v423 = v496 - 1;
                      if (v496)
                        v424 = v513;
                      else
                        v424 = v513 + 1;
                      if (!v496)
                        v423 = 7;
                      if ((_DWORD)v353 == v422)
                        v355 = 0;
                      else
                        v355 = v424;
                      if ((_DWORD)v353 != v422)
                        v420 = v423;
                      v496 = v420;
                    }
                  }
                  else
                  {
                    v421 = 0;
                  }
                  v211 = v416 | (2 * v211) & 6;
                  v383 = v421 | (2 * v383) & 0x1E;
                  ++v382;
                  v536 = v413 & 0xFFFFFFF1 | (2 * (v536 & 7));
                  if (a3 == v382)
                    goto LABEL_855;
                }
              }
              v353 = 2;
              v354 = 6;
LABEL_729:
              v355 = 0;
              v356 = 0;
              v357 = (4 * v269) | (2 * v352);
              goto LABEL_730;
            }
          }
          v269 = 0;
LABEL_728:
          v354 = 0;
          v353 = 0;
          v352 = 0;
          goto LABEL_729;
        case 1u:
          if (v207 >= 2)
          {
            v242 = v207 - 2;
            v229 = *(_DWORD *)(v15 + 16);
            if (v229 <= (int)v242 || (v243 = *(_DWORD *)(v15 + 12), v243 < 1))
            {
              v226 = 0;
              v227 = 0;
              v528 = 0;
              v228 = 0;
            }
            else
            {
              v244 = *(_QWORD *)(v15 + 24);
              if (v244)
              {
                v245 = (unsigned __int8 *)(v244 + *(int *)(v15 + 20) * v242);
                v246 = *v245;
                v247 = v246 >> 7;
                if (v243 != 1)
                {
                  v226 = (v246 >> 5) & 2 | (4 * v247);
                  if (v243 == 2)
                  {
                    v228 = 0;
                    v528 = 6;
                    v227 = 2;
                  }
                  else
                  {
                    if (v243 == 3)
                      v228 = 0;
                    else
                      v228 = v245;
                    if (v243 == 3)
                      v426 = 5;
                    else
                      v426 = 4;
                    v528 = v426;
                    v226 |= (v246 >> 5) & 1;
                    v227 = 3;
                  }
                  goto LABEL_555;
                }
                v227 = 1;
              }
              else
              {
                v227 = 0;
                v247 = 0;
              }
              v228 = 0;
              v226 = 4 * v247;
              v528 = 7;
            }
          }
          else
          {
            if (!v207)
            {
              v270 = 0;
              v226 = 0;
              v227 = 0;
              v528 = 0;
              v228 = 0;
              goto LABEL_561;
            }
            v226 = 0;
            v227 = 0;
            v528 = 0;
            v228 = 0;
            v229 = *(_DWORD *)(v15 + 16);
          }
LABEL_555:
          if (v229 >= v207)
          {
            v271 = *(_DWORD *)(v15 + 12);
            if (v271 >= 1)
            {
              v272 = *(_QWORD *)(v15 + 24);
              if (!v272)
              {
                v270 = 0;
                v276 = 0;
                v275 = 0;
                goto LABEL_563;
              }
              v273 = (unsigned __int8 *)(v272 + *(int *)(v15 + 20) * (v207 - 1));
              v274 = *v273;
              v270 = v274 >> 7;
              if (v271 == 1)
              {
                v275 = 0;
                v276 = 1;
LABEL_563:
                v277 = 7;
LABEL_564:
                v523 = v277;
                goto LABEL_565;
              }
              v275 = (v274 >> 6) & 1;
              if (v271 == 2)
              {
                v276 = 2;
                v277 = 6;
                goto LABEL_564;
              }
              v280 = (4 * v270) | (2 * v275);
              v279 = (v274 >> 5) & 1;
              if (v271 == 3)
                v278 = 0;
              else
                v278 = v273;
              if (v271 == 3)
                v425 = 5;
              else
                v425 = 4;
              v523 = v425;
              v276 = 3;
LABEL_566:
              v281 = a10->i32[0] + (uint64_t)v207;
              if ((v281 & 0x80000000) != 0
                || *(_DWORD *)(v15 + 16) <= (int)v281
                || (v282 = *v179, *(_DWORD *)(v15 + 12) <= *v179))
              {
                v285 = 0;
                v286 = 0;
                v534 = 0;
              }
              else
              {
                v283 = *(_QWORD *)(v15 + 24);
                v284 = *(int *)(v15 + 20) * v281;
                v534 = *v179;
                if ((v282 & 0x80000000) != 0)
                {
                  v285 = (unsigned __int8 *)(v283 + v284);
                  v286 = 7;
                }
                else
                {
                  v285 = (unsigned __int8 *)(v283 + (int)(v284 + (v282 >> 3)));
                  v286 = ~v282 & 7;
                }
              }
              if (a3 >= 1)
              {
                v519 = v286;
                v287 = 0;
                v288 = 0;
                v289 = v279 | v280;
                while (1)
                {
                  if (v285)
                  {
                    v290 = v227;
                    if (v534 < 0)
                    {
                      v292 = 0;
                      ++v534;
                    }
                    else
                    {
                      v291 = v519;
                      v292 = (*v285 >> v519) & 1;
                      v293 = v534 + 1;
                      v294 = *(_DWORD *)(v15 + 12);
                      v295 = v519 - 1;
                      if (v519)
                        v296 = v285;
                      else
                        v296 = v285 + 1;
                      if (!v519)
                        v295 = 7;
                      ++v534;
                      if (v293 == v294)
                        v285 = 0;
                      else
                        v285 = v296;
                      if (v293 != v294)
                        v291 = v295;
                      v519 = v291;
                    }
                  }
                  else
                  {
                    v290 = v227;
                    v292 = 0;
                  }
                  v297 = 2 * v288;
                  if (a7 && JBIG2Bitmap::getPixel(a8, v287, v545)
                    || !JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), (16 * v289) | (v226 << 9) | v292 | v297, *((uint64_t **)this + 14)))
                  {
                    v298 = 0;
                  }
                  else
                  {
                    JBIG2Bitmap::setPixel(v541, v287, v545);
                    v298 = 1;
                  }
                  a3 = v543;
                  v227 = v290;
                  if (v228)
                  {
                    if ((v290 & 0x80000000) != 0)
                    {
                      v300 = 0;
                      v227 = (v290 + 1);
                      if (v278)
                        goto LABEL_607;
                    }
                    else
                    {
                      v299 = v528;
                      v300 = (*v228 >> v528) & 1;
                      v227 = (v290 + 1);
                      v301 = *(_DWORD *)(v541 + 12);
                      v302 = v528 - 1;
                      if (v528)
                        v303 = v228;
                      else
                        v303 = v228 + 1;
                      if (!v528)
                        v302 = 7;
                      if ((_DWORD)v227 == v301)
                        v228 = 0;
                      else
                        v228 = v303;
                      if ((_DWORD)v227 != v301)
                        v299 = v302;
                      v528 = v299;
                      if (v278)
                      {
LABEL_607:
                        if (v276 < 0)
                        {
                          v305 = 0;
                          ++v276;
                        }
                        else
                        {
                          v304 = v523;
                          v305 = (*v278 >> v523) & 1;
                          ++v276;
                          v306 = *(_DWORD *)(v541 + 12);
                          v307 = v523 - 1;
                          if (v523)
                            v308 = v278;
                          else
                            v308 = v278 + 1;
                          if (!v523)
                            v307 = 7;
                          if (v276 == v306)
                            v278 = 0;
                          else
                            v278 = v308;
                          if (v276 != v306)
                            v304 = v307;
                          v523 = v304;
                        }
                        goto LABEL_624;
                      }
                    }
                  }
                  else
                  {
                    v300 = 0;
                    if (v278)
                      goto LABEL_607;
                  }
                  v305 = 0;
LABEL_624:
                  v226 = v300 | (2 * v226) & 0xE;
                  v289 = v305 | (2 * v289) & 0x1E;
                  v288 = v298 | v297 & 6;
                  ++v287;
                  v15 = v541;
                  if (v543 == v287)
                    goto LABEL_855;
                }
              }
              goto LABEL_704;
            }
          }
          v270 = 0;
LABEL_561:
          v523 = 0;
          v276 = 0;
          v275 = 0;
LABEL_565:
          v278 = 0;
          v279 = 0;
          v280 = (4 * v270) | (2 * v275);
          goto LABEL_566;
        case 2u:
          if (v207 >= 2)
          {
            v230 = v207 - 2;
            v219 = *(_DWORD *)(v15 + 16);
            if (v219 <= (int)v230 || (v231 = *(_DWORD *)(v15 + 12), v231 < 1))
            {
              v216 = 0;
              v217 = 0;
              v527 = 0;
              v218 = 0;
            }
            else
            {
              v232 = *(_QWORD *)(v15 + 24);
              if (v232)
              {
                v233 = (unsigned __int8 *)(v232 + *(int *)(v15 + 20) * v230);
                v234 = *v233;
                v235 = v234 >> 7;
                if (v231 != 1)
                {
                  v309 = (v234 >> 6) & 1;
                  if (v231 == 2)
                    v218 = 0;
                  else
                    v218 = v233;
                  if (v231 == 2)
                    v310 = 6;
                  else
                    v310 = 5;
                  v527 = v310;
                  v216 = v309 | (2 * v235);
                  v217 = 2;
                  goto LABEL_636;
                }
                v217 = 1;
              }
              else
              {
                v217 = 0;
                v235 = 0;
              }
              v218 = 0;
              v216 = 2 * v235;
              v527 = 7;
            }
          }
          else
          {
            if (!v207)
            {
              LODWORD(v268) = 0;
              v216 = 0;
              v217 = 0;
              v527 = 0;
              v218 = 0;
              goto LABEL_642;
            }
            v216 = 0;
            v217 = 0;
            v527 = 0;
            v218 = 0;
            v219 = *(_DWORD *)(v15 + 16);
          }
LABEL_636:
          if (v219 >= v207)
          {
            v311 = *(_DWORD *)(v15 + 12);
            if (v311 >= 1)
            {
              v268 = *(_QWORD *)(v15 + 24);
              if (v268)
              {
                v312 = (unsigned __int8 *)(v268 + *(int *)(v15 + 20) * (v207 - 1));
                v313 = *v312;
                LODWORD(v268) = v313 >> 7;
                if (v311 != 1)
                {
                  v315 = (v313 >> 6) & 1;
                  if (v311 == 2)
                    v314 = 0;
                  else
                    v314 = v312;
                  if (v311 == 2)
                    v346 = 6;
                  else
                    v346 = 5;
                  v524 = v346;
                  v316 = 2;
LABEL_643:
                  v317 = a10->i32[0] + (uint64_t)v207;
                  if ((v317 & 0x80000000) != 0
                    || *(_DWORD *)(v541 + 16) <= (int)v317
                    || (v318 = *v179, *(_DWORD *)(v541 + 12) <= *v179))
                  {
                    v321 = 0;
                    v322 = 0;
                    v535 = 0;
                  }
                  else
                  {
                    v319 = *(_QWORD *)(v541 + 24);
                    v320 = *(int *)(v541 + 20) * v317;
                    v535 = *v179;
                    if ((v318 & 0x80000000) != 0)
                    {
                      v321 = (unsigned __int8 *)(v319 + v320);
                      v322 = 7;
                    }
                    else
                    {
                      v321 = (unsigned __int8 *)(v319 + (int)(v320 + (v318 >> 3)));
                      v322 = ~v318 & 7;
                    }
                  }
                  if (a3 < 1)
                  {
                    v15 = v541;
LABEL_704:
                    v180 = (int *)a10;
LABEL_857:
                    a5 = v486;
                    v207 = v545;
LABEL_858:
                    v208 = v492;
                    goto LABEL_859;
                  }
                  v520 = v322;
                  v323 = 0;
                  v324 = 0;
                  v325 = v315 | (2 * v268);
                  while (1)
                  {
                    if (v321)
                    {
                      v326 = v314;
                      if (v535 < 0)
                      {
                        v327 = v218;
                        v329 = 0;
                        ++v535;
                      }
                      else
                      {
                        v327 = v218;
                        v328 = v520;
                        v329 = (*v321 >> v520) & 1;
                        v330 = v535 + 1;
                        v331 = *(_DWORD *)(v541 + 12);
                        v332 = v520 - 1;
                        if (v520)
                          v333 = v321;
                        else
                          v333 = v321 + 1;
                        if (!v520)
                          v332 = 7;
                        ++v535;
                        if (v330 == v331)
                          v321 = 0;
                        else
                          v321 = v333;
                        if (v330 != v331)
                          v328 = v332;
                        v520 = v328;
                      }
                    }
                    else
                    {
                      v326 = v314;
                      v327 = v218;
                      v329 = 0;
                    }
                    v334 = 2 * v324;
                    if (a7 && JBIG2Bitmap::getPixel(a8, v323, v545)
                      || !JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), (8 * v325) | (v216 << 7) | v329 | v334, *((uint64_t **)this + 14)))
                    {
                      v335 = 0;
                    }
                    else
                    {
                      JBIG2Bitmap::setPixel(v541, v323, v545);
                      v335 = 1;
                    }
                    a3 = v543;
                    v218 = v327;
                    if (v327)
                    {
                      v314 = v326;
                      if (v217 < 0)
                      {
                        v337 = 0;
                        ++v217;
                        if (v326)
                          goto LABEL_684;
                      }
                      else
                      {
                        v336 = v527;
                        v337 = (*v327 >> v527) & 1;
                        ++v217;
                        v338 = *(_DWORD *)(v541 + 12);
                        v339 = v527 - 1;
                        if (v527)
                          v340 = v327;
                        else
                          v340 = v327 + 1;
                        if (!v527)
                          v339 = 7;
                        if (v217 == v338)
                          v218 = 0;
                        else
                          v218 = v340;
                        if (v217 != v338)
                          v336 = v339;
                        v527 = v336;
                        if (v326)
                        {
LABEL_684:
                          if (v316 < 0)
                          {
                            v342 = 0;
                            ++v316;
                          }
                          else
                          {
                            v341 = v524;
                            v342 = (*v314 >> v524) & 1;
                            ++v316;
                            v343 = *(_DWORD *)(v541 + 12);
                            v344 = v524 - 1;
                            if (v524)
                              v345 = v314;
                            else
                              v345 = v314 + 1;
                            if (!v524)
                              v344 = 7;
                            if (v316 == v343)
                              v314 = 0;
                            else
                              v314 = v345;
                            if (v316 != v343)
                              v341 = v344;
                            v524 = v341;
                          }
                          goto LABEL_701;
                        }
                      }
                    }
                    else
                    {
                      v337 = 0;
                      v314 = v326;
                      if (v326)
                        goto LABEL_684;
                    }
                    v342 = 0;
LABEL_701:
                    v216 = v337 | (2 * v216) & 6;
                    v325 = v342 | (2 * v325) & 0xE;
                    v324 = v335 | v334 & 2;
                    if (v543 == ++v323)
                      goto LABEL_702;
                  }
                }
                v314 = 0;
                v315 = 0;
                v316 = 1;
              }
              else
              {
                v314 = 0;
                v316 = 0;
                v315 = 0;
              }
              v524 = 7;
              goto LABEL_643;
            }
          }
          LODWORD(v268) = 0;
LABEL_642:
          v314 = 0;
          v524 = 0;
          v316 = 0;
          v315 = 0;
          goto LABEL_643;
        case 3u:
          if (v207)
          {
            if (*(_DWORD *)(v15 + 16) >= v207)
            {
              v220 = *(_DWORD *)(v15 + 12);
              if (v220 >= 1)
              {
                v221 = *(_QWORD *)(v15 + 24);
                if (v221)
                {
                  v222 = (unsigned __int8 *)(v221 + *(int *)(v15 + 20) * (v207 - 1));
                  v223 = *v222;
                  LODWORD(v221) = v223 >> 7;
                  if (v220 != 1)
                  {
                    v225 = (v223 >> 6) & 1;
                    if (v220 == 2)
                      v224 = 0;
                    else
                      v224 = v222;
                    if (v220 == 2)
                      v248 = 6;
                    else
                      v248 = 5;
                    v207 = 2;
LABEL_489:
                    v249 = *v180 + (uint64_t)v545;
                    if ((v249 & 0x80000000) != 0
                      || *(_DWORD *)(v15 + 16) <= (int)v249
                      || (v250 = *v179, *(_DWORD *)(v15 + 12) <= *v179))
                    {
                      v253 = 0;
                      v254 = 0;
                      v250 = 0;
                    }
                    else
                    {
                      v251 = *(_QWORD *)(v15 + 24);
                      v252 = *(int *)(v15 + 20) * v249;
                      if ((v250 & 0x80000000) != 0)
                      {
                        v253 = (unsigned __int8 *)(v251 + v252);
                        v254 = 7;
                      }
                      else
                      {
                        v253 = (unsigned __int8 *)(v251 + (int)(v252 + (v250 >> 3)));
                        v254 = ~v250 & 7;
                      }
                    }
                    if (a3 < 1)
                    {
                      v15 = v541;
                    }
                    else
                    {
                      v255 = 0;
                      v256 = 0;
                      v257 = v225 | (2 * v221);
                      do
                      {
                        if (v253)
                        {
                          if ((v250 & 0x80000000) != 0)
                          {
                            v258 = 0;
                            ++v250;
                          }
                          else
                          {
                            v258 = (*v253 >> v254) & 1;
                            ++v250;
                            v259 = *(_DWORD *)(v541 + 12);
                            v260 = v254 - 1;
                            if (v254)
                              v261 = v253;
                            else
                              v261 = v253 + 1;
                            if (!v254)
                              v260 = 7;
                            if (v250 == v259)
                              v253 = 0;
                            else
                              v253 = v261;
                            if (v250 != v259)
                              v254 = v260;
                          }
                        }
                        else
                        {
                          v258 = 0;
                        }
                        v262 = 2 * v256;
                        if (a7 && JBIG2Bitmap::getPixel(a8, v255, v545)
                          || !JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), v258 | (32 * v257) | v262, *((uint64_t **)this + 14)))
                        {
                          v263 = 0;
                        }
                        else
                        {
                          JBIG2Bitmap::setPixel(v541, v255, v545);
                          v263 = 1;
                        }
                        a3 = v543;
                        if (v224)
                        {
                          if (v207 < 0)
                          {
                            v264 = 0;
                            ++v207;
                          }
                          else
                          {
                            v264 = (*v224 >> v248) & 1;
                            ++v207;
                            v265 = *(_DWORD *)(v541 + 12);
                            v266 = v248 - 1;
                            if (v248)
                              v267 = v224;
                            else
                              v267 = v224 + 1;
                            if (!v248)
                              v266 = 7;
                            if (v207 == v265)
                              v224 = 0;
                            else
                              v224 = v267;
                            if (v207 != v265)
                              v248 = v266;
                          }
                        }
                        else
                        {
                          v264 = 0;
                        }
                        v257 = v264 | (2 * v257) & 0x1E;
                        v256 = v263 | v262 & 0xE;
                        ++v255;
                      }
                      while (v543 != v255);
LABEL_702:
                      v15 = v541;
LABEL_855:
                      v179 = a9;
                      v180 = (int *)a10;
                    }
                    a6 = v485;
                    goto LABEL_857;
                  }
                  v224 = 0;
                  v225 = 0;
                  v207 = 1;
                }
                else
                {
                  v224 = 0;
                  v207 = 0;
                  v225 = 0;
                }
                v248 = 7;
                goto LABEL_489;
              }
            }
            LODWORD(v221) = 0;
            v224 = 0;
            v248 = 0;
            v207 = 0;
          }
          else
          {
            LODWORD(v221) = 0;
            v224 = 0;
            v248 = 0;
          }
          v225 = 0;
          goto LABEL_489;
        default:
          goto LABEL_859;
      }
    }
    v504 = a3;
    v185 = a3 + 7;
    if (v185 >= 8 && a4)
    {
      v186 = 0;
      v187 = a4;
      v484 = *(_QWORD *)(v15 + 24);
      do
      {
        v188 = a9[v186];
        if (v188 <= -128)
          v188 = -128;
        if (v188 >= 127)
          v188 = 127;
        a9[v186] = v188;
        v189 = a10->i32[v186];
        if (v189 <= -128)
          v189 = -128;
        a10->i32[v186++] = v189 & (v189 >> 31);
      }
      while (v186 != 4);
      v190 = v185 >> 3;
      v191 = *a9;
      v192 = a9[1];
      v193 = a9[2];
      v194 = a9[3];
      if (v193 >= v194)
        v195 = a9[3];
      else
        v195 = a9[2];
      if (v193 <= v194)
        v193 = a9[3];
      if (v191 >= v192)
        v196 = a9[1];
      else
        v196 = *a9;
      if (v191 <= v192)
        v191 = a9[1];
      if (v196 >= v195)
        v197 = v195;
      else
        v197 = v196;
      v502 = v197;
      if (v191 <= v193)
        v191 = v193;
      if (v191 <= 3)
        v191 = 3;
      v498 = v197 & (v197 >> 31);
      v198 = v191 - v498;
      if (v190 <= (unint64_t)(2147483654 - v198) >> 3)
      {
        v199 = (v185 & 0xFFFFFFFFFFFFFFF8) + v198;
        v200 = vminvq_s32(*a10);
        v201 = v200 >= -2 ? -2 : v200;
        v202 = 1 - v201;
        if (v199 <= 0x7FFFFFFF / v202 && (v199 * v202) >> 31 == 0)
        {
          v483 = (char *)gmalloc(v199 * v202);
          bzero(v483, v199 * v202);
          v427 = gmalloc((8 * v202));
          v428 = v483;
          v429 = v427;
          v430 = 0;
          v431 = -v498;
          v501 = -v201;
          v482 = v202 - 1;
          if (v202 <= 1)
            v432 = 1;
          else
            v432 = 1 - v201;
          do
          {
            v427[v430++] = v428;
            v428 += v199;
          }
          while (v432 != v430);
          if (a4 < 1)
          {
            v474 = 0;
          }
          else
          {
            v433 = 0;
            LODWORD(v434) = 0;
            v435 = a10->i32[3] - v201;
            v436 = a10->i32[2] - v201;
            v437 = a10->i32[1] - v201;
            v438 = a10->i32[0] - v201;
            v439 = ~v201;
            v440 = -2 - v201;
            if (v431 <= 1)
              v441 = 1;
            else
              v441 = v431;
            v488 = v431 + 3;
            v532 = v431;
            v487 = v431 + 2;
            v442 = v484 + v201 * v190;
            v443 = -v201;
            v495 = a4;
            v497 = v190;
            v491 = v429;
            v493 = 1 - v201;
            v490 = v441;
            do
            {
              *(_QWORD *)v508 = v442;
              v526 = v434;
              v530 = v433;
              v510 = v440;
              v512 = v439;
              v444 = v429[v440];
              v445 = v429[v439];
              v446 = v429[v443];
              v514 = v438;
              v447 = v429[v438];
              v516 = v437;
              v448 = v429[v437];
              v449 = v443;
              v451 = *v179;
              v450 = v179[1];
              v518 = v436;
              v452 = v429[v436];
              v522 = v435;
              v453 = v429[v435];
              v455 = v179[2];
              v454 = v179[3];
              v456 = *(unsigned __int8 *)(v444 + v532);
              v457 = *(unsigned __int8 *)(v444 + v532 + 1);
              v458 = *(unsigned __int8 *)(v445 + v532);
              v459 = *(unsigned __int8 *)(v445 + v532 + 1);
              v460 = *(unsigned __int8 *)(v445 + v532 + 2);
              if (v502 < 0)
              {
                for (i = 0; i != v441; ++i)
                  *(_BYTE *)(v429[v449] + i) = 0;
              }
              if (a3 >= 1)
              {
                v462 = 0;
                v463 = 0;
                v546 = v447 + v451 - v498;
                v540 = v448 + v450 - v498;
                v537 = v446 + v532;
                v464 = v452 + v455 - v498;
                v465 = v453 + v454 - v498;
                v466 = (2 * v459) | (4 * v458) | v460;
                v467 = v445 + v488;
                v468 = v444 + v487;
                v469 = v457 | (2 * v456);
                do
                {
                  v470 = JArithmeticDecoder::decodeBit(*((JArithmeticDecoder **)this + 13), (v469 << 13) | (v466 << 8) | (16 * v463) | (8 * *(unsigned __int8 *)(v546 + v462)) | (4 * *(unsigned __int8 *)(v540 + v462)) | (2 * *(unsigned __int8 *)(v464 + v462)) | *(unsigned __int8 *)(v465 + v462), *((uint64_t **)this + 14));
                  *(_BYTE *)(v537 + v462) = v470;
                  v469 = (*(_BYTE *)(v468 + v462) | (2 * v469)) & 7;
                  v466 = (*(_BYTE *)(v467 + v462) | (2 * v466)) & 0x1F;
                  v463 = v470 | (2 * (v463 & 7));
                  ++v462;
                }
                while (v504 != v462);
              }
              v190 = v497;
              v429 = v491;
              if (v530 >= v501)
              {
                v471 = (_BYTE *)(v491[v526] + v532);
                v472 = *(_BYTE **)v508;
                v473 = v497;
                do
                {
                  *v472++ = (16 * ((4 * v471[1]) | (8 * *v471) | v471[3])) | (32 * v471[2]) | (8 * v471[4]) | (4 * v471[5]) | v471[7] | (2 * v471[6]);
                  v471 += 8;
                  --v473;
                }
                while (v473);
              }
              v202 = v493;
              v434 = (v526 + 1) % v493;
              v440 = (v510 + 1) % v493;
              v439 = (v512 + 1) % v493;
              v443 = ((int)v449 + 1) % v493;
              v438 = (v514 + 1) % v493;
              v437 = (v516 + 1) % v493;
              v436 = (v518 + 1) % v493;
              v435 = (v522 + 1) % v493;
              v433 = v530 + 1;
              v442 = *(_QWORD *)v508 + v497;
              v187 = v495;
              v15 = v541;
              a3 = v543;
              v179 = a9;
              v441 = v490;
            }
            while (v530 + 1 != v495);
            v474 = (int)v434;
            v431 = -v498;
          }
          v475 = v482 - v187;
          if (v482 < v187)
            v475 = 0;
          if (v475 < v482)
          {
            v476 = v431;
            v477 = v187 - v482;
            if (v187 < v482)
              v477 = 0;
            v478 = (_BYTE *)(v484 + v190 * v477);
            do
            {
              v479 = (_BYTE *)(v429[(v475 + v474) % v202] + v476);
              v480 = v478;
              v481 = v190;
              do
              {
                *v480++ = (16 * ((4 * v479[1]) | (8 * *v479) | v479[3])) | (32 * v479[2]) | (8 * v479[4]) | (4 * v479[5]) | v479[7] | (2 * v479[6]);
                v479 += 8;
                --v481;
              }
              while (v481);
              ++v475;
              v478 += v190;
            }
            while (v475 != v482);
          }
          free(v483);
          v205 = v429;
          goto LABEL_442;
        }
      }
    }
LABEL_434:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return 0;
  }
  v17 = *((_QWORD *)this + 31);
  *(_QWORD *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 16) = 0;
  if (a3 >= 2147483646)
  {
    v18 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
    error(v18, "Bad width in JBIG2 generic bitmap");
    a3 = -3;
  }
  v19 = a3 + 2;
  v20 = gmallocn(a3 + 2, 4u);
  v21 = a3 + 1;
  v20[v21] = v21;
  v22 = gmallocn(a3 + 3, 4u);
  v22[v19] = v19;
  v23 = v21 & ((int)v21 >> 31);
  v20[v23] = a3;
  if (a4 >= 1)
  {
    v24 = a3 + 1;
    v25 = 0;
    v26 = v23;
    v542 = a3;
    v544 = v24;
    v533 = v23;
    while (1)
    {
      v27 = v20[v26];
      if (v27 >= a3)
      {
        v31 = 0;
        v28 = 0;
      }
      else
      {
        v28 = 0;
        do
        {
          v29 = v28;
          if (v28 >= v19)
            v28 = v19;
          v22[v28] = v27;
          v28 = v29 + 1;
          if (v29 + 1 < v24)
            v30 = v29 + 1;
          else
            v30 = v24;
          v27 = v20[v30];
        }
        while (v27 < a3);
        v31 = v29 + 1;
      }
      if ((int)v19 <= v31)
        v28 = v19;
      v22[v28] = a3;
      v32 = (int)v19 <= v31 + 1 ? v19 : (v31 + 1);
      v22[v32] = a3;
      v20[v26] = 0;
      if (a3 >= 1)
        break;
LABEL_368:
      v170 = 0;
      v24 = v544;
      do
      {
        if (v544 >= v170)
          v171 = v170;
        else
          v171 = v544;
        v172 = v20[v171];
        if (v544 >= (v170 | 1))
          v173 = v170 | 1;
        else
          v173 = v544;
        for (j = v20[v173]; v172 < a3 && v172 < j; j = v20[v173])
          JBIG2Bitmap::setPixel(v15, v172++, v25);
        if (j >= a3)
          break;
        v170 += 2;
        v176 = a3 >= (int)v170 ? v170 : v544;
      }
      while (v20[v176] < a3);
      ++v25;
      v26 = v533;
      if (v25 == a4)
        goto LABEL_388;
    }
    v33 = 0;
    v539 = 0;
    LODWORD(v34) = 0;
    v35 = 0;
    v36 = 1;
    while (1)
    {
      v37 = (_DWORD *)*((_QWORD *)this + 31);
      v38 = v37[3];
      if (v38 == 8)
      {
        v40 = v37[2] >> 1;
        v38 = 8;
      }
      else
      {
        if (v38)
        {
          v41 = v37[2];
          v42 = (v41 << (7 - v38)) & 0x7F;
          v43 = twoDimTab1[2 * v42];
          if ((v43 & 0x80000000) == 0 && v38 >= v43)
          {
            a3 = v542;
LABEL_34:
            v37[3] = v38 - (unsigned __int16)v43;
            switch(twoDimTab1[2 * v42 + 1])
            {
              case -1:
                goto LABEL_51;
              case 0:
                if ((int)v19 <= (int)v34 + 1 || (int)v34 <= -2)
                  v48 = v19;
                else
                  v48 = (v34 + 1);
                v49 = v22[v48];
                v15 = v541;
                if (v20[v35] < v49)
                {
                  if (v49 > v542)
                  {
                    v50 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v50, "JBIG2 MMR row is wrong length ({0:%d})", v49);
                    v15 = v541;
                    v49 = v542;
                  }
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v49;
                  v49 = v22[v48];
                }
                a3 = v542;
                if (v49 < v542)
                  LODWORD(v34) = v34 + 2;
                goto LABEL_362;
              case 1:
                if (v539)
                {
                  v64 = 0;
                  do
                  {
                    BlackCode = JBIG2MMRDecoder::getBlackCode(*((JBIG2MMRDecoder **)this + 31));
                    v64 += BlackCode;
                  }
                  while (BlackCode > 63);
                  v66 = 0;
                  do
                  {
                    WhiteCode = JBIG2MMRDecoder::getWhiteCode(*((JBIG2MMRDecoder **)this + 31));
                    v66 += WhiteCode;
                  }
                  while (WhiteCode > 63);
                }
                else
                {
                  v64 = 0;
                  do
                  {
                    v129 = JBIG2MMRDecoder::getWhiteCode(*((JBIG2MMRDecoder **)this + 31));
                    v64 += v129;
                  }
                  while (v129 > 63);
                  v66 = 0;
                  do
                  {
                    v130 = JBIG2MMRDecoder::getBlackCode(*((JBIG2MMRDecoder **)this + 31));
                    v66 += v130;
                  }
                  while (v130 > 63);
                }
                v131 = v544;
                if (v36 && v542 >= v35)
                  v132 = v33;
                else
                  v132 = v544;
                v133 = v20[v132] + v64;
                v134 = v20[v35];
                if (v134 >= v133)
                {
                  a3 = v542;
                }
                else
                {
                  a3 = v542;
                  if (v133 > v542)
                  {
                    v135 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v135, "JBIG2 MMR row is wrong length ({0:%d})", v133);
                    a3 = v542;
                    v131 = v544;
                    v133 = v542;
                  }
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v133;
                  v134 = v133;
                }
                v136 = a3 < v35 || v35 <= -1;
                v137 = v35;
                if (v136)
                  v138 = v131;
                else
                  v138 = v35;
                v139 = v20[v138];
                v140 = v139 + v66;
                if (v139 < a3 && v134 < v140)
                {
                  if (v140 > a3)
                  {
                    v142 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v142, "JBIG2 MMR row is wrong length ({0:%d})", v140);
                    a3 = v542;
                    v131 = v544;
                    v140 = v542;
                  }
                  if ((v35 & 1) == (v539 ^ 1))
                    v137 = v35;
                  else
                    v137 = (v35 + 1);
                  v20[(int)v137] = v140;
                  v35 = v137;
                }
                v15 = v541;
                if (a3 < v35 || v35 <= -1)
                  v137 = v131;
                v144 = v20[v137];
                do
                {
                  v145 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                  v146 = v34;
                  if (v145)
                    v146 = v19;
                  v147 = v22[v146];
                  LODWORD(v34) = v34 + 2;
                }
                while (v147 < a3 && v147 <= v144);
                LODWORD(v34) = v34 - 2;
                goto LABEL_362;
              case 2:
                v68 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v69 = v34;
                if (v68)
                  v69 = v19;
                v70 = v22[v69];
                v15 = v541;
                if (v20[v35] >= v70)
                {
                  v73 = v544;
                  v72 = v539;
                }
                else
                {
                  if (v70 > a3)
                  {
                    v71 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v71, "JBIG2 MMR row is wrong length ({0:%d})", v70);
                    v15 = v541;
                    a3 = v542;
                    v70 = v542;
                  }
                  v72 = v539;
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v70;
                  v73 = v544;
                }
                v539 = v72 ^ 1;
                v111 = a3 < v35 || v35 <= -1;
                v112 = v35;
                if (v111)
                  v112 = v73;
                v113 = v20[v112];
                if (v113 < a3)
                {
                  LODWORD(v34) = v34 - 1;
                  do
                  {
                    v34 = (v34 + 2);
                    if ((int)v19 <= (int)v34 || (int)v34 <= -1)
                      v115 = v19;
                    else
                      v115 = v34;
                  }
                  while (v22[v115] <= v113);
                }
                goto LABEL_362;
              case 3:
                v52 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v53 = v34;
                if (v52)
                  v53 = v19;
                v54 = v22[v53];
                v15 = v541;
                if (v20[v35] <= v54)
                {
                  v101 = v54 + 1;
                  if (v54 >= a3)
                  {
                    v102 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v102, "JBIG2 MMR row is wrong length ({0:%d})", v101);
                    v15 = v541;
                    a3 = v542;
                    v101 = v542;
                  }
                  v56 = v539;
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v101;
                  v55 = v544;
                }
                else
                {
                  v55 = v544;
                  v56 = v539;
                }
                v539 = v56 ^ 1;
                v103 = a3 < v35 || v35 <= -1;
                v104 = v35;
                if (v103)
                  v104 = v55;
                v105 = v20[v104];
                if (v105 < a3)
                {
                  LODWORD(v34) = v34 - 1;
                  do
                  {
                    v34 = (v34 + 2);
                    if ((int)v19 <= (int)v34 || (int)v34 <= -1)
                      v107 = v19;
                    else
                      v107 = v34;
                  }
                  while (v22[v107] <= v105);
                }
                goto LABEL_362;
              case 4:
                v81 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v82 = v34;
                if (v81)
                  v82 = v19;
                v83 = v22[v82];
                v84 = v83 - 1;
                v85 = v20[v35];
                v15 = v541;
                if (v85 >= v83 - 1)
                {
                  if (v85 < v83)
                  {
                    v87 = v539;
                    goto LABEL_305;
                  }
                  if (v83 <= 0)
                  {
                    v149 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v149, "Invalid JBIG2 MMR code");
                    v84 = 0;
                    a3 = v542;
                  }
                  if (v35 < 1)
                  {
                    LODWORD(v33) = v35;
                    v15 = v541;
                  }
                  else
                  {
                    v15 = v541;
                    if (v84 <= v20[(v33 - 1)])
                    {
                      if (v33)
                        v35 = 0;
                      else
                        v35 = -1;
                      do
                      {
                        v150 = v33 - 1;
                        if (v33 <= 1)
                        {
                          LODWORD(v33) = 0;
                          goto LABEL_303;
                        }
                        v151 = v20[(v33-- - 2)];
                      }
                      while (v84 <= v151);
                      v35 = v150;
                      LODWORD(v33) = v150;
                    }
                  }
LABEL_303:
                  v87 = v539;
                  goto LABEL_304;
                }
                if (v84 > a3)
                {
                  v86 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v86, "JBIG2 MMR row is wrong length ({0:%d})", v84);
                  v15 = v541;
                  a3 = v542;
                  v84 = v542;
                }
                v87 = v539;
                if ((v35 & 1) != v539)
                  ++v35;
                LODWORD(v33) = v35;
LABEL_304:
                v20[(int)v33] = v84;
LABEL_305:
                v539 = v87 ^ 1;
                v152 = a3 < v35 || v35 <= -1;
                v153 = v35;
                if (v152)
                  v153 = v544;
                v154 = v20[v153];
                if (v154 >= a3)
                  goto LABEL_362;
                v155 = v34 - 1;
                if ((int)v34 < 1)
                  v155 = v34 + 1;
                do
                {
                  v156 = (int)v19 <= v155 || v155 <= -1;
                  v157 = v155;
                  if (v156)
                    v157 = v19;
                  v155 += 2;
                }
                while (v22[v157] <= v154);
                goto LABEL_361;
              case 5:
                v88 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v89 = v34;
                if (v88)
                  v89 = v19;
                v90 = v22[v89] + 2;
                v15 = v541;
                if (v20[v35] >= v90)
                {
                  v93 = v544;
                  v92 = v539;
                }
                else
                {
                  if (v90 > a3)
                  {
                    v91 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v91, "JBIG2 MMR row is wrong length ({0:%d})", v90);
                    v15 = v541;
                    a3 = v542;
                    v90 = v542;
                  }
                  v92 = v539;
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v90;
                  v93 = v544;
                }
                v539 = v92 ^ 1;
                v119 = a3 < v35 || v35 <= -1;
                v120 = v35;
                if (v119)
                  v120 = v93;
                v121 = v20[v120];
                if (v121 < a3)
                {
                  LODWORD(v34) = v34 - 1;
                  do
                  {
                    v34 = (v34 + 2);
                    if ((int)v19 <= (int)v34 || (int)v34 <= -1)
                      v123 = v19;
                    else
                      v123 = v34;
                  }
                  while (v22[v123] <= v121);
                }
                goto LABEL_362;
              case 6:
                v74 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v75 = v34;
                if (v74)
                  v75 = v19;
                v76 = v22[v75];
                v77 = v76 - 2;
                v78 = v20[v35];
                v15 = v541;
                if (v78 >= v76 - 2)
                {
                  if (v78 <= v77)
                  {
                    v80 = v539;
                    goto LABEL_345;
                  }
                  if (v76 <= 1)
                  {
                    v116 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v116, "Invalid JBIG2 MMR code");
                    v77 = 0;
                    a3 = v542;
                  }
                  if (v35 < 1)
                  {
                    LODWORD(v33) = v35;
                    v15 = v541;
                  }
                  else
                  {
                    v15 = v541;
                    if (v77 <= v20[(v33 - 1)])
                    {
                      if (v33)
                        v35 = 0;
                      else
                        v35 = -1;
                      do
                      {
                        v117 = v33 - 1;
                        if (v33 <= 1)
                        {
                          LODWORD(v33) = 0;
                          goto LABEL_343;
                        }
                        v118 = v20[(v33-- - 2)];
                      }
                      while (v77 <= v118);
                      v35 = v117;
                      LODWORD(v33) = v117;
                    }
                  }
LABEL_343:
                  v80 = v539;
                  goto LABEL_344;
                }
                if (v77 > a3)
                {
                  v79 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v79, "JBIG2 MMR row is wrong length ({0:%d})", v77);
                  v15 = v541;
                  a3 = v542;
                  v77 = v542;
                }
                v80 = v539;
                if ((v35 & 1) != v539)
                  ++v35;
                LODWORD(v33) = v35;
LABEL_344:
                v20[(int)v33] = v77;
LABEL_345:
                v539 = v80 ^ 1;
                v163 = a3 < v35 || v35 <= -1;
                v164 = v35;
                if (v163)
                  v164 = v544;
                v165 = v20[v164];
                if (v165 >= a3)
                  goto LABEL_362;
                v155 = v34 - 1;
                if ((int)v34 < 1)
                  v155 = v34 + 1;
                do
                {
                  v166 = (int)v19 <= v155 || v155 <= -1;
                  v167 = v155;
                  if (v166)
                    v167 = v19;
                  v155 += 2;
                }
                while (v22[v167] <= v165);
                goto LABEL_361;
              case 7:
                v95 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v96 = v34;
                if (v95)
                  v96 = v19;
                v97 = v22[v96] + 3;
                v15 = v541;
                if (v20[v35] >= v97)
                {
                  v100 = v544;
                  v99 = v539;
                }
                else
                {
                  if (v97 > a3)
                  {
                    v98 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v98, "JBIG2 MMR row is wrong length ({0:%d})", v97);
                    v15 = v541;
                    a3 = v542;
                    v97 = v542;
                  }
                  v99 = v539;
                  if ((v35 & 1) != v539)
                    ++v35;
                  v20[v35] = v97;
                  v100 = v544;
                }
                v539 = v99 ^ 1;
                v124 = a3 < v35 || v35 <= -1;
                v125 = v35;
                if (v124)
                  v125 = v100;
                v126 = v20[v125];
                if (v126 < a3)
                {
                  LODWORD(v34) = v34 - 1;
                  do
                  {
                    v34 = (v34 + 2);
                    if ((int)v19 <= (int)v34 || (int)v34 <= -1)
                      v128 = v19;
                    else
                      v128 = v34;
                  }
                  while (v22[v128] <= v126);
                }
                goto LABEL_362;
              case 8:
                v57 = (int)v19 <= (int)v34 || (int)v34 <= -1;
                v58 = v34;
                if (v57)
                  v58 = v19;
                v59 = v22[v58];
                v60 = v59 - 3;
                v61 = v20[v35];
                v15 = v541;
                if (v61 >= v59 - 3)
                {
                  if (v61 <= v60)
                  {
                    v63 = v539;
                    goto LABEL_325;
                  }
                  if (v59 <= 2)
                  {
                    v108 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                    error(v108, "Invalid JBIG2 MMR code");
                    v60 = 0;
                    a3 = v542;
                  }
                  if (v35 < 1)
                  {
                    LODWORD(v33) = v35;
                    v15 = v541;
                  }
                  else
                  {
                    v15 = v541;
                    if (v60 <= v20[(v33 - 1)])
                    {
                      if (v33)
                        v35 = 0;
                      else
                        v35 = -1;
                      do
                      {
                        v109 = v33 - 1;
                        if (v33 <= 1)
                        {
                          LODWORD(v33) = 0;
                          goto LABEL_323;
                        }
                        v110 = v20[(v33-- - 2)];
                      }
                      while (v60 <= v110);
                      v35 = v109;
                      LODWORD(v33) = v109;
                    }
                  }
LABEL_323:
                  v63 = v539;
                  goto LABEL_324;
                }
                if (v60 > a3)
                {
                  v62 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                  error(v62, "JBIG2 MMR row is wrong length ({0:%d})", v60);
                  v15 = v541;
                  a3 = v542;
                  v60 = v542;
                }
                v63 = v539;
                if ((v35 & 1) != v539)
                  ++v35;
                LODWORD(v33) = v35;
LABEL_324:
                v20[(int)v33] = v60;
LABEL_325:
                v539 = v63 ^ 1;
                v158 = a3 < v35 || v35 <= -1;
                v159 = v35;
                if (v158)
                  v159 = v544;
                v160 = v20[v159];
                if (v160 < a3)
                {
                  v155 = v34 - 1;
                  if ((int)v34 < 1)
                    v155 = v34 + 1;
                  do
                  {
                    v161 = (int)v19 <= v155 || v155 <= -1;
                    v162 = v155;
                    if (v161)
                      v162 = v19;
                    v155 += 2;
                  }
                  while (v22[v162] <= v160);
LABEL_361:
                  LODWORD(v34) = v155 - 2;
                }
                break;
              default:
                v94 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
                error(v94, "Illegal code in JBIG2 MMR bitmap data");
                a3 = v542;
                if (v20[v35] < v542)
                {
                  v35 += v35 & 1;
                  v20[v35] = v542;
                }
                v15 = v541;
                goto LABEL_362;
            }
            goto LABEL_362;
          }
          v44 = (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)v37 + 32))(*(_QWORD *)v37) | (v41 << 8);
          v37[2] = v44;
          v45 = *(int32x2_t *)(v37 + 3);
          v46 = vadd_s32(v45, (int32x2_t)0x100000008);
          *(int32x2_t *)(v37 + 3) = v46;
          v40 = v44 >> (v45.i8[0] + 1);
          v38 = v46.i32[0];
        }
        else
        {
          v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v37 + 32))(*(_QWORD *)v37);
          v38 = 8;
          v37[2] = v39;
          v37[3] = 8;
          ++v37[4];
          v40 = v39 >> 1;
        }
        a3 = v542;
      }
      v42 = v40 & 0x7F;
      v43 = twoDimTab1[2 * v42];
      if ((v43 & 0x80000000) == 0)
        goto LABEL_34;
      v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v37 + 40))(*(_QWORD *)v37);
      error(v51, "Bad two dim code in JBIG2 MMR stream");
      a3 = v542;
LABEL_51:
      v15 = v541;
      if (v20[v35] < a3)
      {
        v35 += v35 & 1;
        v20[v35] = a3;
      }
LABEL_362:
      v36 = v35 >= 0;
      v168 = a3 < v35 || v35 <= -1;
      v33 = v35;
      v169 = v544;
      if (!v168)
        v169 = v35;
      if (v20[v169] >= a3)
        goto LABEL_368;
    }
  }
LABEL_388:
  v177 = (_QWORD *)*((_QWORD *)this + 31);
  if ((a11 & 0x80000000) != 0)
  {
    v182 = *((_DWORD *)v177 + 2);
    v181 = *((_DWORD *)v177 + 3);
    if (v181 > 0x17)
    {
      v183 = *((_DWORD *)v177 + 2);
    }
    else
    {
      do
      {
        v183 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v177 + 32))(*v177) | (v182 << 8);
        *((_DWORD *)v177 + 2) = v183;
        v184 = vadd_s32(*(int32x2_t *)((char *)v177 + 12), (int32x2_t)0x100000008);
        *(int32x2_t *)((char *)v177 + 12) = v184;
        LOBYTE(v181) = v184.i8[0];
        v182 = v183;
      }
      while (v184.i32[0] < 0x18u);
    }
    if (((v183 >> (v181 - 24)) & 0xFFFFFF) != 0x1001)
    {
      v204 = (*(uint64_t (**)(JBIG2Stream *))(*(_QWORD *)this + 40))(this);
      error(v204, "Missing EOFB in JBIG2 MMR bitmap data");
    }
  }
  else
  {
    for (k = *((_DWORD *)v177 + 4);
          k < a11 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v177 + 32))(*v177) != -1;
          *((_DWORD *)v177 + 4) = k)
    {
      k = *((_DWORD *)v177 + 4) + 1;
    }
  }
  if (v22)
    free(v22);
  if (v20)
  {
    v205 = v20;
LABEL_442:
    free(v205);
  }
  return v15;
}

void sub_184B63EE0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;
  int v4;

  v3 = *(void **)(v2 - 120);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 112) + 40))(*(_QWORD *)(v2 - 112));
    error(v4, "Exception thrown when attempting to allocate memory.");
    if (v3)
      free(v3);
    __cxa_end_catch();
    JUMPOUT(0x184B6281CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JBIG2MMRDecoder::getBlackCode(JBIG2MMRDecoder *this)
{
  unsigned int v2;
  unsigned __int8 v3;
  unsigned int v4;
  char v5;
  int v6;
  __int16 *v7;
  unsigned int v8;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int32x2_t v15;
  int v16;

  v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(void))(**(_QWORD **)this + 32))();
    v2 = 8;
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = 8;
    ++*((_DWORD *)this + 4);
  }
  while (1)
  {
    if (v2 < 0xA)
    {
      v4 = *((_DWORD *)this + 2);
      if (v2 < 7)
      {
        v8 = v4 << (6 - v2);
LABEL_20:
        v7 = (__int16 *)((char *)&blackTab3 + 4 * (v8 & 0x3F));
        goto LABEL_21;
      }
      v5 = v2 - 6;
    }
    else
    {
      v4 = *((_DWORD *)this + 2);
      v5 = v2 - 6;
      if (((v4 >> (v2 - 6)) & 0x3F) == 0)
      {
        v6 = v4 << (13 - v2);
        if (v2 >= 0xE)
          LOBYTE(v6) = v4 >> (v2 - 13);
        v7 = (__int16 *)((char *)&blackTab1 + 4 * (v6 & 0x7F));
        goto LABEL_21;
      }
    }
    v8 = v4 >> v5;
    if (((v4 >> (v2 - 4)) & 0xF) != 0 || (v8 & 3) == 0)
      goto LABEL_20;
    v10 = v4 << (12 - v2);
    if (v2 >= 0xD)
      LOBYTE(v10) = v4 >> (v2 - 12);
    v11 = v10 >= 0x40u;
    v12 = v10 - 64;
    if (!v11)
      break;
    v7 = &blackTab2[2 * v12];
LABEL_21:
    v13 = *v7;
    if (v13 >= 1 && (int)v2 >= v13)
    {
      *((_DWORD *)this + 3) = v2 - v13;
      return v7[1];
    }
    if (v2 > 0xC)
      break;
    *((_DWORD *)this + 2) = (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this) | (v4 << 8);
    v15 = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
    *(int32x2_t *)((char *)this + 12) = v15;
    v2 = v15.i32[0];
  }
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
  error(v16, "Bad black code in JBIG2 MMR stream");
  --*((_DWORD *)this + 3);
  return 1;
}

uint64_t JBIG2MMRDecoder::getWhiteCode(JBIG2MMRDecoder *this)
{
  unsigned int v2;
  unsigned __int8 v3;
  unsigned int v4;
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int32x2_t v10;
  int v12;

  v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(void))(**(_QWORD **)this + 32))();
    v2 = 8;
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = 8;
    ++*((_DWORD *)this + 4);
  }
  while (1)
  {
    if (v2 < 0xB)
    {
      v4 = *((_DWORD *)this + 2);
      if (v2 == 10)
LABEL_9:
        v7 = v4 >> (v2 - 9);
      else
        v7 = v4 << (9 - v2);
      v6 = (char *)&whiteTab2 + 4 * (v7 & 0x1FF);
      goto LABEL_12;
    }
    v4 = *((_DWORD *)this + 2);
    if (((v4 >> (v2 - 7)) & 0x7F) != 0)
      goto LABEL_9;
    v5 = v4 << (12 - v2);
    if (v2 >= 0xD)
      LOBYTE(v5) = v4 >> (v2 - 12);
    v6 = (char *)&whiteTab1 + 4 * (v5 & 0x1F);
LABEL_12:
    v8 = *(__int16 *)v6;
    if (v8 >= 1 && (int)v2 >= v8)
    {
      *((_DWORD *)this + 3) = v2 - v8;
      return *((__int16 *)v6 + 1);
    }
    if (v2 > 0xB)
      break;
    *((_DWORD *)this + 2) = (*(unsigned __int8 (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this) | (v4 << 8);
    v10 = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000008);
    *(int32x2_t *)((char *)this + 12) = v10;
    v2 = v10.i32[0];
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
  error(v12, "Bad white code in JBIG2 MMR stream");
  --*((_DWORD *)this + 3);
  return 1;
}

uint64_t JBIG2HuffmanDecoder::decodeInt(JBIG2HuffmanDecoder *this, _DWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;

  v3 = (unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a3 + 8) == -1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  for (i = 0; ; ++i)
  {
    v11 = a3 + 16 * v7;
    v14 = *(_DWORD *)(v11 + 4);
    v13 = (unsigned int *)(v11 + 4);
    v12 = v14;
    if (v9 < v14)
    {
      v15 = *((_DWORD *)this + 3);
      do
      {
        if (v15)
        {
          v16 = *((_DWORD *)this + 2);
          --v15;
        }
        else
        {
          v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
          *((_DWORD *)this + 2) = v16;
          v12 = *v13;
          v15 = 7;
        }
        *((_DWORD *)this + 3) = v15;
        v8 = (v16 >> v15) & 1 | (2 * v8);
        ++v9;
      }
      while (v9 < v12);
    }
    if (v8 == *(_DWORD *)(a3 + 16 * v7 + 12))
      break;
    v7 = (i + 1);
    v17 = a3 + 16 * v7;
    v18 = *(_DWORD *)(v17 + 8);
    v3 = (unsigned int *)(v17 + 8);
    if (v18 == -1)
      return 0;
  }
  v19 = (int *)(a3 + 16 * v7);
  v20 = *v3;
  if (*v3)
  {
    if (v20 != -2)
    {
      v21 = *v19;
      if (v20 == -3)
        v22 = v21 - JBIG2HuffmanDecoder::readBits(this, 0x20u);
      else
        v22 = JBIG2HuffmanDecoder::readBits(this, v20) + v21;
      goto LABEL_19;
    }
    return 0;
  }
  v22 = *v19;
LABEL_19:
  *a2 = v22;
  return 1;
}

void JBIG2Stream::resetIntStats(void ***this, char a2)
{
  void **v4;
  size_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  void *v9;

  bzero(*this[16], *((int *)this[16] + 2));
  bzero(*this[17], *((int *)this[17] + 2));
  bzero(*this[18], *((int *)this[18] + 2));
  bzero(*this[19], *((int *)this[19] + 2));
  bzero(*this[20], *((int *)this[20] + 2));
  bzero(*this[21], *((int *)this[21] + 2));
  bzero(*this[22], *((int *)this[22] + 2));
  bzero(*this[23], *((int *)this[23] + 2));
  bzero(*this[24], *((int *)this[24] + 2));
  bzero(*this[25], *((int *)this[25] + 2));
  bzero(*this[26], *((int *)this[26] + 2));
  bzero(*this[27], *((int *)this[27] + 2));
  bzero(*this[28], *((int *)this[28] + 2));
  v4 = this[29];
  v5 = *((int *)v4 + 2);
  v6 = 1 << (a2 + 1);
  v7 = *v4;
  if ((_DWORD)v5 == v6)
  {
    bzero(v7, v5);
  }
  else
  {
    free(v7);
    MEMORY[0x186DC23C4](v4, 0x1010C40A1D9428BLL);
    this[29] = 0;
    v8 = operator new();
    *(_DWORD *)(v8 + 8) = v6;
    v9 = gmallocn(v6, 1u);
    *(_QWORD *)v8 = v9;
    bzero(v9, *(int *)(v8 + 8));
    this[29] = (void **)v8;
  }
}

void sub_184B645E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1010C40A1D9428BLL);
  _Unwind_Resume(a1);
}

JBIG2Bitmap *JBIG2Stream::readTextRegion(uint64_t a1, int a2, int a3, int a4, signed int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int *a26,int *a27)
{
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  JBIG2HuffmanDecoder *v42;
  unsigned int v43;
  unsigned int Bits;
  _DWORD *v45;
  int v46;
  unsigned int v47;
  int v48;
  JBIG2Bitmap *GenericRefinementRegion;
  char v50;
  int v51;
  int v52;
  uint64_t v53;
  JBIG2Bitmap *v54;
  int v55;
  int v56;
  uint64_t v57;
  JBIG2Bitmap *v58;
  int v59;
  int v60;
  int v61;
  int v63;
  JBIG2Bitmap *v64;
  int v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75[3];

  v70 = 0;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v31 = operator new();
  JBIG2Bitmap::JBIG2Bitmap((JBIG2Bitmap *)v31, 0, a4, a5);
  v32 = *(void **)(v31 + 24);
  if (v32)
  {
    v33 = a19;
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_DWORD *)(v31 + 20);
    if (a12)
      memset(v32, 255, v35 * (uint64_t)v34);
    else
      bzero(v32, v35 * (uint64_t)v34);
    v75[0] = 0;
    if (a2)
      JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), v75, a19);
    else
      JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), v75, *(uint64_t **)(a1 + 160));
    v68 = -(v75[0] << a7);
    v75[0] = v68;
    if (!a6)
      return (JBIG2Bitmap *)v31;
    v64 = (JBIG2Bitmap *)v31;
    v37 = 0;
    v38 = 0;
    v74 = 0;
LABEL_11:
    if (a2)
    {
      JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), (_DWORD *)&v74 + 1, v33);
      v39 = HIDWORD(v74);
      JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), &v74, a17);
    }
    else
    {
      JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v74 + 1, *(uint64_t **)(a1 + 160));
      v39 = HIDWORD(v74);
      JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v74, *(uint64_t **)(a1 + 176));
    }
    v68 += v39 << a7;
    v40 = v74 + v38;
    ++v37;
    v63 = v40;
    while (1)
    {
      if (a7)
      {
        if (!a2)
        {
          JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v74 + 1, *(uint64_t **)(a1 + 168));
          v41 = HIDWORD(v74) + v68;
LABEL_22:
          Bits = JArithmeticDecoder::decodeIAID(*(JArithmeticDecoder **)(a1 + 104), a10, *(uint64_t **)(a1 + 232));
          goto LABEL_24;
        }
        HIDWORD(v74) = JBIG2HuffmanDecoder::readBits(*(JBIG2HuffmanDecoder **)(a1 + 240), a7);
        v41 = v68 + HIDWORD(v74);
      }
      else
      {
        HIDWORD(v74) = 0;
        v41 = v68;
        if (!a2)
          goto LABEL_22;
      }
      v42 = *(JBIG2HuffmanDecoder **)(a1 + 240);
      if (a9)
      {
        JBIG2HuffmanDecoder::decodeInt(v42, (_DWORD *)&v73 + 1, a9);
        v43 = HIDWORD(v73);
        goto LABEL_25;
      }
      Bits = JBIG2HuffmanDecoder::readBits(v42, a10);
LABEL_24:
      v43 = Bits;
LABEL_25:
      if (v43 >= a8)
      {
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        error(v60, "Invalid symbol number in JBIG2 text region");
LABEL_62:
        v31 = (uint64_t)v64;
        goto LABEL_63;
      }
      if (!a3)
      {
        LODWORD(v71) = 0;
LABEL_35:
        GenericRefinementRegion = *(JBIG2Bitmap **)(a11 + 8 * v43);
        v50 = 1;
        if (!GenericRefinementRegion)
          goto LABEL_61;
        goto LABEL_39;
      }
      if (a2)
      {
        v45 = *(_DWORD **)(a1 + 240);
        v46 = v45[3];
        if (v46)
        {
          v47 = v45[2];
          v48 = v46 - 1;
        }
        else
        {
          v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45 + 32))(*(_QWORD *)v45);
          v45[2] = v47;
          v48 = 7;
        }
        v45[3] = v48;
        LODWORD(v71) = (v47 >> v48) & 1;
        if (!(_DWORD)v71)
          goto LABEL_35;
        JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), &v73, a20);
        JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), (_DWORD *)&v72 + 1, a21);
        JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), &v72, a22);
        JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), (_DWORD *)&v71 + 1, a23);
        JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), &v70, a24);
        *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8) = 0;
        JArithmeticDecoder::start(*(JArithmeticDecoder **)(a1 + 104));
      }
      else
      {
        JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v71, *(uint64_t **)(a1 + 224));
        if (!(_DWORD)v71)
          goto LABEL_35;
        JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v73, *(uint64_t **)(a1 + 208));
        JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v72 + 1, *(uint64_t **)(a1 + 216));
        JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v72, *(uint64_t **)(a1 + 192));
        JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v71 + 1, *(uint64_t **)(a1 + 200));
      }
      GenericRefinementRegion = (JBIG2Bitmap *)JBIG2Stream::readGenericRefinementRegion((JBIG2Stream *)a1, *(_DWORD *)(*(_QWORD *)(a11 + 8 * v43) + 12) + (int)v73, *(_DWORD *)(*(_QWORD *)(a11 + 8 * v43) + 16) + HIDWORD(v72), a25, 0, *(JBIG2Bitmap **)(a11 + 8 * v43), (int)v72 + ((int)v73 + ((int)v73 >> 31)) / 2, HIDWORD(v71) + (HIDWORD(v72) + (SHIDWORD(v72) >> 31)) / 2, a26, a27);
      v50 = 0;
      if (!GenericRefinementRegion)
      {
LABEL_61:
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        error(v61, "Failed to create symbolBitmap in JBIG2 text region");
        goto LABEL_62;
      }
LABEL_39:
      v51 = *((_DWORD *)GenericRefinementRegion + 3) - 1;
      v52 = *((_DWORD *)GenericRefinementRegion + 4) - 1;
      if (a14)
      {
        switch(a15)
        {
          case 0:
          case 1:
            v53 = (uint64_t)v64;
            v54 = GenericRefinementRegion;
            v55 = v41;
            goto LABEL_45;
          case 2:
          case 3:
            v55 = v41 - v51;
            v53 = (uint64_t)v64;
            v54 = GenericRefinementRegion;
LABEL_45:
            JBIG2Bitmap::combine(v53, v54, v55, v40, a13);
            break;
          default:
            break;
        }
        if ((v50 & 1) == 0)
          goto LABEL_47;
      }
      else
      {
        switch(a15)
        {
          case 0:
          case 2:
            v56 = v41 - v52;
            v57 = (uint64_t)v64;
            v58 = GenericRefinementRegion;
            v59 = v40;
            goto LABEL_55;
          case 1:
          case 3:
            v57 = (uint64_t)v64;
            v58 = GenericRefinementRegion;
            v59 = v40;
            v56 = v41;
LABEL_55:
            JBIG2Bitmap::combine(v57, v58, v59, v56, a13);
            break;
          default:
            break;
        }
        v52 = v51;
        if ((v50 & 1) == 0)
LABEL_47:
          (*(void (**)(JBIG2Bitmap *))(*(_QWORD *)GenericRefinementRegion + 8))(GenericRefinementRegion);
      }
      if (v37 > a6)
        goto LABEL_58;
      if (a2)
      {
        if (!JBIG2HuffmanDecoder::decodeInt(*(JBIG2HuffmanDecoder **)(a1 + 240), &v74, a18))
          goto LABEL_58;
      }
      else if (!JArithmeticDecoder::decodeInt(*(JArithmeticDecoder **)(a1 + 104), (int *)&v74, *(uint64_t **)(a1 + 184)))
      {
LABEL_58:
        v33 = a19;
        v38 = v63;
        if (v37 < a6)
          goto LABEL_11;
        return v64;
      }
      v40 += a16 + v52 + v74;
      ++v37;
    }
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  error(v36, "Invalid JBIG2 bitmap allocation");
LABEL_63:
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return 0;
}

void sub_184B64BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x1091C40AC3DD578);
  _Unwind_Resume(a1);
}

void JBIG2SymbolDict::JBIG2SymbolDict(JBIG2SymbolDict *this, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E1627F88;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_QWORD *)this + 2) = gmallocn(a3, 8u);
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 2) + v5) = 0;
      v5 += 8;
    }
    while (v6 != v5);
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
}

void CGPDFDrawingContextDrawImage(uint64_t a1, CGImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int Type;
  float64x2_t v12;
  CGImageRef ImageForRenderingSize;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGImage *v20;
  uint64_t v21;
  CGContext *v22;
  CGColor *FillColor;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGContext *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  uint64_t v43;
  CGSize v44;

  if (a1)
    v10 = *(_QWORD *)a1;
  else
    v10 = 0;
  v43 = 0;
  Type = CGContextGetType(*(_QWORD *)(a1 + 88), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v12 = 0uLL;
  if (Type == 8 || Type == 4)
  {
    memset(&v42, 0, sizeof(v42));
    CGContextGetCTM(&v42, *(CGContextRef *)(a1 + 88));
    v12 = vrndpq_f64(vabsq_f64(vaddq_f64(*(float64x2_t *)&v42.a, *(float64x2_t *)&v42.c)));
  }
  ImageForRenderingSize = CGPDFImageCreateImageForRenderingSize(a2, v10, v12.f64[0], v12.f64[1]);
  if (ImageForRenderingSize)
  {
    v20 = ImageForRenderingSize;
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(CGContext **)(a1 + 88);
    if ((*((_BYTE *)ImageForRenderingSize + 39) & 2) != 0)
    {
      if (v21 && v22)
      {
        FillColor = (CGColor *)CGPDFGStateGetFillColor(*(_QWORD *)(a1 + 32));
        CGContextSetFillColorWithColor(v22, FillColor);
        v44.width = 0.0;
        v44.height = 0.0;
        CGContextSetPatternPhase(v22, v44);
        CGPDFGStateSynchronizeColorRendering(v21, v22);
        CGPDFGStateSynchronizeRendering(v21, (uint64_t)v22, v24, v25, v26, v27, v28, v29);
      }
    }
    else
    {
      CGPDFGStateSynchronizeForImages(*(_QWORD *)(a1 + 32), *(CGContextRef *)(a1 + 88));
    }
    v30 = *(CGContext **)(a1 + 88);
    if (*((_QWORD *)v20 + 8) == 1)
    {
      CGContextGetInterpolationQualityRange((uint64_t)v30, (_DWORD *)&v43 + 1, &v43, v15, v16, v17, v18, v19);
      CGContextSetInterpolationQualityRange(*(_QWORD *)(a1 + 88), 3, 3, v31, v32, v33, v34, v35);
      draw_image(a1, v20);
      CGContextSetInterpolationQualityRange(*(_QWORD *)(a1 + 88), SHIDWORD(v43), v43, v36, v37, v38, v39, v40);
    }
    else
    {
      CGContextGetCTM(&v41, v30);
      if ((v41.b == 0.0 && v41.c == 0.0 || v41.a == 0.0 && v41.d == 0.0) && !*(_BYTE *)(a1 + 8))
      {
        CGContextSaveGState(*(CGContextRef *)(a1 + 88));
        CGContextSetShouldAntialias(*(CGContextRef *)(a1 + 88), 0);
        draw_image(a1, v20);
        CGContextRestoreGState(*(CGContextRef *)(a1 + 88));
      }
      else
      {
        draw_image(a1, v20);
      }
    }
    CFRelease(v20);
  }
}

void draw_image(uint64_t a1, CGImageRef image)
{
  uint64_t v4;
  unsigned int (*v5)(_QWORD, CGImageRef, _QWORD, double, double, double, double);
  CGRect v6;

  v4 = *(_QWORD *)(a1 + 184);
  if (!v4
    || (v5 = *(unsigned int (**)(_QWORD, CGImageRef, _QWORD, double, double, double, double))(v4 + 16)) == 0
    || v5(*(_QWORD *)(a1 + 88), image, *(_QWORD *)(a1 + 192), 0.0, 0.0, 1.0, 1.0))
  {
    v6.origin.x = 0.0;
    v6.origin.y = 0.0;
    v6.size.width = 1.0;
    v6.size.height = 1.0;
    CGContextDrawImage(*(CGContextRef *)(a1 + 88), v6, image);
  }
}

void CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer(CG::DisplayListXMLDeserializer *this)
{
  CG::DisplayListXMLDeserializer::~DisplayListXMLDeserializer(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E1629430;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 8));
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 5));
  *(_QWORD *)this = off_1E16291C8;
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

uint64_t CG::DisplayListXMLDeserializer::deserializeTo(CG::DisplayListXMLDeserializer *this, CG::DisplayList *a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFURLRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFURL *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const xmlDoc *File;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  xmlDoc *v43;
  _xmlNode *RootElement;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  xmlXPathObject *NodeSetWithXPath;
  const unsigned __int8 *v70;
  xmlXPathObject *v71;
  const unsigned __int8 *v72;
  xmlXPathObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  xmlXPathObject *v81;
  uint64_t v82;
  const char *v84;
  char v85;
  const __CFBoolean *propertyValueTypeRefPtr;
  int v87;
  __int128 v88;
  __int128 v89;
  xmlChar v90[8];
  _QWORD *v91;
  UInt8 buffer[1025];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = a2;
  propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(*((CFURLRef *)this + 1), (CFStringRef)*MEMORY[0x1E0C9B4E0], &propertyValueTypeRefPtr, 0)&& (v3 = CFBooleanGetValue(propertyValueTypeRefPtr) == 0, CFRelease(propertyValueTypeRefPtr), v3))
  {
    CGPostError((uint64_t)"%s: The destination is not an existing directory", v4, v5, v6, v7, v8, v9, v10, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
  }
  else
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFURLRef *)this + 1), CFSTR("Resources"), 1u);
    *((_QWORD *)this + 3) = v12;
    if (v12)
    {
      v20 = CFURLCreateCopyAppendingPathComponent(v11, *((CFURLRef *)this + 1), CFSTR("displayList.xml"), 0);
      if (v20)
      {
        if (CFURLGetFileSystemRepresentation(v20, 1u, buffer, 1025))
        {
          File = xmlReadFile((const char *)buffer, 0, 0);
          v43 = (xmlDoc *)File;
          if (File)
          {
            RootElement = xmlDocGetRootElement(File);
            if (!RootElement)
            {
              CGPostError((uint64_t)"Malformed display list: document does not contain a root node.", 0, v45, v46, v47, v48, v49, v50, v85);
              v82 = 0;
LABEL_31:
              xmlFreeDoc(v43);
              return v82;
            }
            CG::DisplayListXMLHelper::parseAttributesFromNode(v90, RootElement);
            v87 = 0;
            if ((CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v90, "frame", (uint64_t)&v88) & 1) != 0)
            {
              v58 = *((_QWORD *)this + 2);
              v59 = v89;
              *(_OWORD *)(v58 + 24) = v88;
              *(_OWORD *)(v58 + 40) = v59;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v90, "flags", "0x%X", v53, v54, v55, v56, v57, (uint64_t)&v87) != 1)
              {
                CGPostError((uint64_t)"Failed to parse attribute \"%s\" from root node", v60, v61, v62, v63, v64, v65, v66, (char)"flags");
LABEL_29:
                v82 = 0;
LABEL_30:
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v91);
                goto LABEL_31;
              }
              *(_DWORD *)(*((_QWORD *)this + 2) + 64) = v87;
              if ((CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v90, "bounds", (uint64_t)&v88) & 1) != 0)
              {
                v67 = *((_QWORD *)this + 2);
                v68 = v89;
                *(_OWORD *)(v67 + 72) = v88;
                *(_OWORD *)(v67 + 88) = v68;
                NodeSetWithXPath = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/resources/resource", v52);
                v71 = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/entryStates/entryState", v70);
                v73 = CG::DisplayListXMLDeserializer::getNodeSetWithXPath(v43, (_xmlDoc *)"/dl/entries/entry", v72);
                v81 = v73;
                if (NodeSetWithXPath && v71 && v73)
                {
                  if (CG::DisplayListXMLDeserializer::parseResources(this, NodeSetWithXPath->nodesetval)
                    && CG::DisplayListXMLDeserializer::parseEntryStates(this, v71->nodesetval))
                  {
                    v82 = CG::DisplayListXMLDeserializer::parseEntries(this, v81->nodesetval);
                  }
                  else
                  {
                    v82 = 0;
                  }
                }
                else
                {
                  CGPostError((uint64_t)"%s: Malformed display list: resources = %p, entryStates = %p, entries = %p", v74, v75, v76, v77, v78, v79, v80, (char)"BOOL CG::DisplayListXMLDeserializer::parseModel(xmlDocPtr)");
                  v82 = 0;
                  if (!NodeSetWithXPath)
                    goto LABEL_36;
                }
                xmlXPathFreeObject(NodeSetWithXPath);
LABEL_36:
                if (v71)
                  xmlXPathFreeObject(v71);
                if (v81)
                  xmlXPathFreeObject(v81);
                goto LABEL_30;
              }
              v84 = "Failed to parse attribute \"bounds\" from root node";
            }
            else
            {
              v84 = "Failed to parse attribute \"frame\" from root node";
            }
            CGPostError((uint64_t)v84, v51, (uint64_t)v52, v53, v54, v55, v56, v57, v85);
            goto LABEL_29;
          }
          CGPostError((uint64_t)"%s: xmlReadFile failed", v36, v37, v38, v39, v40, v41, v42, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
        }
        else
        {
          CGPostError((uint64_t)"%s: Failed to get file system path for URL", v28, v29, v30, v31, v32, v33, v34, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
        }
      }
      else
      {
        CGPostError((uint64_t)"%s: Failed to create URL for displayList.xml", v21, v22, v23, v24, v25, v26, v27, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
      }
    }
    else
    {
      CGPostError((uint64_t)"%s: Failed to create URL for Resources directory", v13, v14, v15, v16, v17, v18, v19, (char)"virtual BOOL CG::DisplayListXMLDeserializer::deserializeTo(DisplayList *)");
    }
  }
  return 0;
}

void sub_184B655E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a21);
  _Unwind_Resume(a1);
}

xmlXPathObject *CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDoc *this, _xmlDoc *a2, const unsigned __int8 *a3)
{
  xmlXPathContextPtr v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xmlXPathContext *v12;
  xmlXPathObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  xmlNodeSetPtr nodesetval;

  v4 = xmlXPathNewContext(this);
  if (!v4)
  {
    CGPostError((uint64_t)"%s: xmlXPathNewContext returned NULL", v5, v6, v7, v8, v9, v10, v11, (char)"xmlXPathObjectPtr CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDocPtr, const xmlChar *)");
    return 0;
  }
  v12 = v4;
  v13 = (xmlXPathObject *)MEMORY[0x186DC37D4](a2, v4);
  xmlXPathFreeContext(v12);
  if (!v13)
  {
    CGPostError((uint64_t)"%s: xmlXPathEvalExpression returned NULL", v14, v15, v16, v17, v18, v19, v20, (char)"xmlXPathObjectPtr CG::DisplayListXMLDeserializer::getNodeSetWithXPath(xmlDocPtr, const xmlChar *)");
    return v13;
  }
  nodesetval = v13->nodesetval;
  if (!nodesetval || !nodesetval->nodeNr || !nodesetval->nodeTab)
  {
    xmlXPathFreeObject(v13);
    return 0;
  }
  return v13;
}

uint64_t *CG::DisplayListXMLDeserializer::parseResources(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  void **v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  char *v13;
  std::string *v14;
  uint64_t v15;
  _xmlNodeSet *v16;
  unint64_t nodeNr;
  unint64_t *v18;
  int64_t v19;
  _xmlNode *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  void (**v38)(CG::DisplayListResourceColorSpace *__hidden);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  void **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t **v85;
  void *v86;
  void **v87;
  uint64_t v88;
  uint64_t *v89;
  void *v90;
  unint64_t *v91;
  unint64_t *i;
  uint64_t **v93;
  char *v94;
  unint64_t v95;
  void *v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t *v105;
  char *v106;
  char *v107;
  uint64_t **v108;
  uint64_t **v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t **v118;
  uint64_t **v119;
  _QWORD *v120;
  BOOL v121;
  uint64_t **v122;
  char *v123;
  uint64_t *v124;
  _QWORD *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  uint64_t *v129;
  uint64_t **v130;
  uint64_t **v131;
  _QWORD *v132;
  _OWORD *v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void **v138;
  void *v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t *result;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  void *v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  unint64_t v194;
  unint64_t v195;
  const char *v196;
  _xmlNode *v197;
  char v198;
  unint64_t v199;
  void **v200;
  void **v201;
  void **v202;
  void **v203;
  unint64_t v204;
  void **v205;
  uint64_t **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  const char *v216;
  const char *v217;
  unint64_t v218;
  _QWORD *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t **v228;
  uint64_t *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __n128 v246;
  uint64_t **v247;
  uint64_t **v248;
  uint64_t *v249;
  unint64_t *v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  unint64_t *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t **v270;
  uint64_t *v271;
  unint64_t *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t **v281;
  uint64_t *v282;
  unint64_t *v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t **v292;
  uint64_t *v293;
  unint64_t *v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t **v303;
  uint64_t *v304;
  unint64_t *v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t **v314;
  uint64_t *v315;
  unint64_t *v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t **v325;
  uint64_t *v326;
  unint64_t *v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t **v336;
  uint64_t *v337;
  unint64_t *v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t **v347;
  uint64_t *v348;
  unint64_t *v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t **v372;
  uint64_t *v373;
  unint64_t *v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t **v383;
  uint64_t *v384;
  unint64_t *v385;
  unint64_t *p_shared_owners;
  unint64_t v387;
  _QWORD *v388;
  unint64_t v389;
  unint64_t v390;
  uint8x8_t v391;
  _QWORD *v392;
  _QWORD *v393;
  unint64_t v394;
  _QWORD *v395;
  unint64_t *v396;
  unint64_t *v397;
  unint64_t v398;
  _QWORD *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  BOOL v405;
  char v406;
  char isEqualTo;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  void *v413;
  _QWORD *v414;
  float v415;
  float v416;
  _BOOL8 v417;
  unint64_t v418;
  unint64_t v419;
  size_t v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t *v423;
  char v424;
  uint64_t **v425;
  unint64_t *v426;
  void *v427[2];
  unint64_t v428;
  CG::DisplayListXMLDeserializer *v429;
  _xmlNode *v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v434;
  unint64_t *v435;
  void *v436[2];
  uint64_t *v437;
  uint64_t v438;
  void *__p[2];
  uint64_t v440;
  void *v441[2];
  uint64_t v442;
  void *v443[2];
  uint64_t v444;
  void *v445[2];
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  void *v449[2];
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  void *v453[2];
  uint64_t v454;
  void *v455[2];
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  void *v459[2];
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  void *v464[2];
  uint64_t v465;
  __int128 v466;
  CG::DisplayListXMLDeserializer *v467;
  void *v468[2];
  __int128 v469;
  void *v470[2];
  uint64_t v471;
  int v472;
  __int128 v473;
  uint64_t v474;
  int v475;
  __int128 v476;
  uint64_t v477;
  int v478;
  __int128 v479;
  uint64_t v480;
  int v481;
  __int128 v482;
  uint64_t v483;
  int v484;
  __int128 v485;
  uint64_t v486;
  int v487;
  __int128 v488;
  uint64_t v489;
  int v490;
  __int128 v491;
  uint64_t v492;
  int v493;
  __int128 v494;
  uint64_t v495;
  int v496;
  __int128 v497;
  uint64_t v498;
  int v499;
  __int128 v500;
  uint64_t v501;
  int v502;
  __int128 v503;
  uint64_t v504;
  int v505;
  __int128 v506;
  uint64_t v507;
  int v508;
  uint64_t v509;

  v509 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)v436, "clip");
  *(_OWORD *)v468 = *(_OWORD *)v436;
  *(_QWORD *)&v469 = v437;
  v436[1] = 0;
  v437 = 0;
  v436[0] = 0;
  DWORD2(v469) = 0;
  std::string::basic_string[abi:se180100]<0>((char **)&v466, "color");
  *(_OWORD *)v470 = v466;
  v471 = (uint64_t)v467;
  v467 = 0;
  v466 = 0uLL;
  v472 = 1;
  std::string::basic_string[abi:se180100]<0>((char **)v464, "colorSpace");
  v473 = *(_OWORD *)v464;
  v474 = v465;
  v464[1] = 0;
  v465 = 0;
  v464[0] = 0;
  v475 = 2;
  std::string::basic_string[abi:se180100]<0>((char **)v459, "dash");
  v476 = *(_OWORD *)v459;
  v477 = v460;
  v459[1] = 0;
  v460 = 0;
  v459[0] = 0;
  v478 = 3;
  std::string::basic_string[abi:se180100]<0>((char **)&v457, "font");
  v479 = v457;
  v480 = v458;
  v458 = 0;
  v457 = 0uLL;
  v481 = 4;
  std::string::basic_string[abi:se180100]<0>((char **)v455, "image");
  v482 = *(_OWORD *)v455;
  v483 = v456;
  v455[1] = 0;
  v456 = 0;
  v455[0] = 0;
  v484 = 5;
  std::string::basic_string[abi:se180100]<0>((char **)v453, "shading");
  v485 = *(_OWORD *)v453;
  v486 = v454;
  v453[1] = 0;
  v454 = 0;
  v453[0] = 0;
  v487 = 6;
  std::string::basic_string[abi:se180100]<0>((char **)&v451, "gradient");
  v488 = v451;
  v489 = v452;
  v452 = 0;
  v451 = 0uLL;
  v490 = 13;
  std::string::basic_string[abi:se180100]<0>((char **)v449, "pattern");
  v491 = *(_OWORD *)v449;
  v492 = v450;
  v449[1] = 0;
  v450 = 0;
  v449[0] = 0;
  v493 = 7;
  std::string::basic_string[abi:se180100]<0>((char **)&v447, "style");
  v494 = v447;
  v495 = v448;
  v448 = 0;
  v447 = 0uLL;
  v496 = 8;
  std::string::basic_string[abi:se180100]<0>((char **)v445, "softMask");
  v497 = *(_OWORD *)v445;
  v498 = v446;
  v445[1] = 0;
  v446 = 0;
  v445[0] = 0;
  v499 = 9;
  std::string::basic_string[abi:se180100]<0>((char **)v443, "function");
  v500 = *(_OWORD *)v443;
  v501 = v444;
  v443[1] = 0;
  v444 = 0;
  v443[0] = 0;
  v502 = 10;
  std::string::basic_string[abi:se180100]<0>((char **)v441, "displayList");
  v429 = this;
  v503 = *(_OWORD *)v441;
  v504 = v442;
  v441[1] = 0;
  v442 = 0;
  v441[0] = 0;
  v505 = 11;
  std::string::basic_string[abi:se180100]<0>((char **)__p, "CFTypeRef");
  v3 = 0;
  v4 = 0;
  v506 = *(_OWORD *)__p;
  v507 = v440;
  __p[1] = 0;
  v440 = 0;
  __p[0] = 0;
  v508 = 12;
  v5 = &v462;
  v462 = 0;
  v463 = 0;
  v461 = &v462;
  while (1)
  {
    v6 = &v468[4 * v4];
    if (v461 == &v462)
    {
      v8 = &v462;
    }
    else
    {
      v7 = &v462;
      if (v3)
      {
        do
        {
          v8 = (uint64_t **)v3;
          v3 = (uint64_t *)v3[1];
        }
        while (v3);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v7[2];
          v121 = *v8 == (uint64_t *)v7;
          v7 = v8;
        }
        while (v121);
      }
      v9 = std::less<std::string>::operator()[abi:se180100](v8 + 4, &v468[4 * v4]);
      v3 = v462;
      if (!v9)
      {
        v10 = &v462;
        v11 = &v462;
        if (v462)
        {
          v11 = &v462;
          while (1)
          {
            while (1)
            {
              v10 = (uint64_t **)v3;
              v12 = v3 + 4;
              if (!std::less<std::string>::operator()[abi:se180100](&v468[4 * v4], v3 + 4))
                break;
              v3 = *v10;
              v11 = v10;
              if (!*v10)
                goto LABEL_20;
            }
            if (!std::less<std::string>::operator()[abi:se180100](v12, &v468[4 * v4]))
              break;
            v11 = v10 + 1;
            v3 = v10[1];
            if (!v3)
              goto LABEL_20;
          }
LABEL_19:
          if (*v11)
            goto LABEL_26;
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
    v10 = &v462;
    v11 = &v462;
    if (v3)
    {
      v11 = v8 + 1;
      v10 = v8;
      goto LABEL_19;
    }
LABEL_20:
    v13 = (char *)operator new(0x40uLL);
    v14 = (std::string *)(v13 + 32);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)*v6, (std::string::size_type)v6[1]);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      *((_QWORD *)v13 + 6) = v6[2];
    }
    *((_DWORD *)v13 + 14) = v470[4 * v4 - 1];
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v10;
    *v11 = (uint64_t *)v13;
    if (*v461)
    {
      v461 = (uint64_t **)*v461;
      v13 = (char *)*v11;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v462, (uint64_t *)v13);
    ++v463;
LABEL_26:
    if (++v4 == 14)
      break;
    v3 = v462;
  }
  v15 = 448;
  do
  {
    if (*((char *)&v466 + v15 + 15) < 0)
      operator delete(*(void **)((char *)&v465 + v15));
    v15 -= 32;
  }
  while (v15);
  if (SHIBYTE(v440) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v442) < 0)
    operator delete(v441[0]);
  if (SHIBYTE(v444) < 0)
    operator delete(v443[0]);
  if (SHIBYTE(v446) < 0)
    operator delete(v445[0]);
  if (SHIBYTE(v448) < 0)
    operator delete((void *)v447);
  if (SHIBYTE(v450) < 0)
    operator delete(v449[0]);
  if (SHIBYTE(v452) < 0)
    operator delete((void *)v451);
  if (SHIBYTE(v454) < 0)
    operator delete(v453[0]);
  if (SHIBYTE(v456) < 0)
    operator delete(v455[0]);
  if (SHIBYTE(v458) < 0)
    operator delete((void *)v457);
  if (SHIBYTE(v460) < 0)
    operator delete(v459[0]);
  if (SHIBYTE(v465) < 0)
    operator delete(v464[0]);
  if (SHIBYTE(v467) < 0)
    operator delete((void *)v466);
  if (SHIBYTE(v437) < 0)
    operator delete(v436[0]);
  v459[1] = 0;
  v460 = 0;
  v459[0] = &v459[1];
  v16 = a2;
  nodeNr = a2->nodeNr;
  if ((int)nodeNr <= 0)
  {
    v435 = 0;
    v18 = 0;
  }
  else
  {
    v435 = 0;
    v18 = 0;
    v19 = 0;
    v425 = (uint64_t **)((char *)v429 + 40);
    v426 = 0;
    do
    {
      v20 = v16->nodeTab[v19];
      CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)&v466, v20);
      std::string::basic_string[abi:se180100]<0>((char **)v468, "type");
      v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v466, v468);
      if (SBYTE7(v469) < 0)
        operator delete(v468[0]);
      if ((_QWORD *)((char *)&v466 + 8) == v28)
      {
        CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v21, v22, v23, v24, v25, v26, v27, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
      }
      else
      {
        v430 = v20;
        v29 = v462;
        if (!v462)
          goto LABEL_75;
        v30 = v28 + 7;
        v31 = v5;
        do
        {
          v32 = v31;
          v33 = v29 + 4;
          v34 = std::less<std::string>::operator()[abi:se180100](v29 + 4, v30);
          v35 = v29 + 1;
          if (!v34)
          {
            v35 = v29;
            v31 = (uint64_t **)v29;
          }
          v29 = (uint64_t *)*v35;
        }
        while (*v35);
        if (v31 == v5
          || (!v34 ? (v36 = v33) : (v36 = (uint64_t *)(v32 + 4)),
              std::less<std::string>::operator()[abi:se180100](v30, v36)))
        {
LABEL_75:
          CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v21, v22, v23, v24, v25, v26, v27, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
        }
        else
        {
          *(_OWORD *)v427 = 0u;
          switch(*((_DWORD *)v31 + 14))
          {
            case 0:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 0;
              v38 = &off_1E1629228;
              goto LABEL_97;
            case 1:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 0x1000000;
              *(_QWORD *)v37 = &off_1E16292F0;
              *((_QWORD *)v37 + 2) = 0;
              *(_OWORD *)(v37 + 24) = 0u;
              v468[0] = 0;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "colorSpace", "%llu", v39, v40, v41, v42, v43, (uint64_t)v468) == 1)
              {
                v49 = (void **)operator new(8uLL);
                *v49 = v468[0];
                v50 = v49 + 1;
                *(_QWORD *)&v51 = v49;
                *((_QWORD *)&v51 + 1) = v49 + 1;
              }
              else
              {
                v50 = 0;
                v51 = 0uLL;
              }
              *(_OWORD *)v427 = v51;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "pattern", "%llu", v44, v45, v46, v47, v48, (uint64_t)v468) != 1)goto LABEL_106;
              v74 = (char *)v427[1];
              if (v427[1] >= v50)
              {
                v134 = v427[0];
                v135 = ((char *)v427[1] - (char *)v427[0]) >> 3;
                v136 = v135 + 1;
                if ((unint64_t)(v135 + 1) >> 61)
                  std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                if (((char *)v50 - (char *)v427[0]) >> 2 > v136)
                  v136 = ((char *)v50 - (char *)v427[0]) >> 2;
                if ((unint64_t)((char *)v50 - (char *)v427[0]) >= 0x7FFFFFFFFFFFFFF8)
                  v137 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v137 = v136;
                if (v137)
                  v137 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v137);
                v138 = (void **)(v137 + 8 * v135);
                *v138 = v468[0];
                v75 = (uint64_t)(v138 + 1);
                while (v74 != v427[0])
                {
                  v139 = (void *)*((_QWORD *)v74 - 1);
                  v74 -= 8;
                  *--v138 = v139;
                }
                v427[0] = v138;
                if (v134)
                  operator delete(v134);
              }
              else
              {
                *(_QWORD *)v427[1] = v468[0];
                v75 = (uint64_t)v427[1] + 8;
              }
              *(void **)&v73 = v427[0];
              *((_QWORD *)&v73 + 1) = v75;
              goto LABEL_100;
            case 2:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 0x2000000;
              v38 = &off_1E16295C8;
              goto LABEL_97;
            case 3:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 50331648;
              v38 = &off_1E1629258;
              goto LABEL_97;
            case 4:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 0x4000000;
              v38 = &off_1E1629288;
              goto LABEL_97;
            case 5:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 83886080;
              *(_QWORD *)v37 = &off_1E1629320;
              *((_QWORD *)v37 + 2) = 0;
              *((_QWORD *)v37 + 5) = 0;
              v468[0] = 0;
              *(_OWORD *)v427 = 0u;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "colorSpace", "%llu", v52, v53, v54, v55, v56, (uint64_t)v468) == 1)goto LABEL_99;
              goto LABEL_106;
            case 6:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 100663296;
              *(_QWORD *)v37 = &off_1E1629400;
              *((_QWORD *)v37 + 3) = 0;
              *((_QWORD *)v37 + 4) = 0;
              *((_QWORD *)v37 + 2) = 0;
              v468[0] = 0;
              *(_OWORD *)v427 = 0u;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "colorSpace", "%llu", v57, v58, v59, v60, v61, (uint64_t)v468) == 1)goto LABEL_99;
              goto LABEL_106;
            case 7:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 117440512;
              v38 = &off_1E16293D0;
              goto LABEL_97;
            case 8:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 0x8000000;
              *(_QWORD *)v37 = &off_1E1629350;
              *((_QWORD *)v37 + 2) = 0;
              *((_QWORD *)v37 + 3) = 0;
              v468[0] = 0;
              *(_OWORD *)v427 = 0u;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "colorSpace", "%llu", v62, v63, v64, v65, v66, (uint64_t)v468) == 1)goto LABEL_99;
              goto LABEL_106;
            case 9:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 150994944;
              *(_QWORD *)v37 = &off_1E1629518;
              *(_OWORD *)v427 = 0u;
              *((_OWORD *)v37 + 1) = 0u;
              goto LABEL_106;
            case 0xA:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 167772160;
              v38 = &off_1E16294B8;
              goto LABEL_97;
            case 0xB:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 184549376;
              v38 = &off_1E16295F8;
              goto LABEL_97;
            case 0xC:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 201326592;
              v38 = &off_1E1629598;
LABEL_97:
              *(_QWORD *)v37 = v38;
              *((_QWORD *)v37 + 2) = 0;
              goto LABEL_106;
            case 0xD:
              v37 = (char *)operator new();
              *((_DWORD *)v37 + 2) = 218103808;
              *(_QWORD *)v37 = &off_1E16294E8;
              *((_QWORD *)v37 + 2) = 0;
              *((_QWORD *)v37 + 3) = 0;
              v468[0] = 0;
              *(_OWORD *)v427 = 0u;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "colorSpace", "%llu", v67, v68, v69, v70, v71, (uint64_t)v468) != 1)goto LABEL_106;
LABEL_99:
              v72 = (void **)operator new(8uLL);
              *v72 = v468[0];
              *(_QWORD *)&v73 = v72;
              *((_QWORD *)&v73 + 1) = v72 + 1;
LABEL_100:
              *(_OWORD *)v427 = v73;
LABEL_106:
              v464[0] = 0;
              if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)&v466, "_id", "%llu", v23, v24, v25, v26, v27, (uint64_t)v464) != 1)
              {
                CGPostError((uint64_t)"%s: Failed to parse \"_id\" attribute from node", v76, v77, v78, v79, v80, v81, v82, (char)"BOOL CG::DisplayListXMLDeserializer::parseResources(xmlNodeSetPtr)");
                v90 = v427[0];
                if (!v427[0])
                  goto LABEL_77;
                goto LABEL_194;
              }
              v83 = (uint64_t **)((char *)v429 + 40);
              v84 = *v425;
              v85 = (uint64_t **)((char *)v429 + 40);
              if (!*v425)
                goto LABEL_114;
              break;
            default:
              v37 = 0;
              goto LABEL_106;
          }
          do
          {
            while (1)
            {
              v83 = (uint64_t **)v84;
              v86 = (void *)v84[4];
              if (v464[0] >= v86)
                break;
              v84 = *v83;
              v85 = v83;
              if (!*v83)
                goto LABEL_114;
            }
            if (v86 >= v464[0])
            {
              v87 = (void **)v83;
              goto LABEL_120;
            }
            v84 = v83[1];
          }
          while (v84);
          v85 = v83 + 1;
LABEL_114:
          v87 = (void **)operator new(0x30uLL);
          v87[4] = v464[0];
          v87[5] = 0;
          *v87 = 0;
          v87[1] = 0;
          v87[2] = v83;
          *v85 = (uint64_t *)v87;
          v88 = **((_QWORD **)v429 + 4);
          v89 = (uint64_t *)v87;
          if (v88)
          {
            *((_QWORD *)v429 + 4) = v88;
            v89 = *v85;
          }
          std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v429 + 5), v89);
          ++*((_QWORD *)v429 + 6);
LABEL_120:
          v87[5] = v37;
          v91 = (unint64_t *)v427[0];
          for (i = v426; v91 != v427[1]; ++v91)
          {
            v93 = v5;
            v94 = v37;
            v95 = *v91;
            v96 = v464[0];
            if (v18 >= i)
            {
              v97 = i;
              v98 = ((char *)v18 - (char *)v435) >> 4;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 60)
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              v100 = (char *)i - (char *)v435;
              if (v97 - v435 > v99)
                v99 = v97 - v435;
              if (v100 >= 0x7FFFFFFFFFFFFFF0)
                v101 = 0xFFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                if (v101 >> 60)
                  std::__throw_bad_array_new_length[abi:se180100]();
                v102 = (char *)operator new(16 * v101);
              }
              else
              {
                v102 = 0;
              }
              v103 = &v102[16 * v98];
              *(_QWORD *)v103 = v95;
              *((_QWORD *)v103 + 1) = v96;
              if (v18 == v435)
              {
                v106 = &v102[16 * v98];
                v105 = v435;
                v37 = v94;
              }
              else
              {
                v104 = &v102[16 * v98];
                v105 = v435;
                v37 = v94;
                do
                {
                  v106 = v104 - 16;
                  *((_OWORD *)v104 - 1) = *((_OWORD *)v18 - 1);
                  v18 -= 2;
                  v104 -= 16;
                }
                while (v18 != v435);
              }
              i = (unint64_t *)&v102[16 * v101];
              v18 = (unint64_t *)(v103 + 16);
              v5 = v93;
              if (v105)
              {
                v107 = &v102[16 * v101];
                operator delete(v105);
                i = (unint64_t *)v107;
              }
              v435 = (unint64_t *)v106;
            }
            else
            {
              *v18 = v95;
              v18[1] = (unint64_t)v96;
              v18 += 2;
              v37 = v94;
              v5 = v93;
            }
          }
          v426 = i;
          v468[0] = v37;
          v468[1] = v430;
          v469 = v466;
          v470[0] = v467;
          if (v467)
          {
            *(_QWORD *)(*((_QWORD *)&v466 + 1) + 16) = (char *)&v469 + 8;
            *(_QWORD *)&v466 = (char *)&v466 + 8;
            *((_QWORD *)&v466 + 1) = 0;
            v467 = 0;
          }
          else
          {
            *(_QWORD *)&v469 = (char *)&v469 + 8;
          }
          v108 = std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v459, (unint64_t)v464[0], (uint64_t **)v464);
          v109 = v108;
          *(_OWORD *)(v108 + 5) = *(_OWORD *)v468;
          if (v108 + 5 != (uint64_t **)v468)
          {
            v110 = (_QWORD *)v469;
            if (v108[9])
            {
              v112 = v108 + 8;
              v111 = v108[8];
              v113 = v108[7];
              v108[7] = (uint64_t *)(v108 + 8);
              v111[2] = 0;
              v108[8] = 0;
              v108[9] = 0;
              if (v113[1])
                v114 = v113[1];
              else
                v114 = (uint64_t)v113;
              v436[0] = v108 + 7;
              v436[1] = (void *)v114;
              v437 = (uint64_t *)v114;
              if (v114)
              {
                v436[1] = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(v114);
                v115 = (_QWORD *)&v469 + 1;
                if (v110 != (_QWORD *)((char *)&v469 + 8))
                {
                  do
                  {
                    std::string::operator=((std::string *)(v114 + 32), (const std::string *)(v110 + 4));
                    std::string::operator=((std::string *)(v114 + 56), (const std::string *)(v110 + 7));
                    v116 = v437;
                    v117 = *v112;
                    v118 = v109 + 8;
                    v119 = v109 + 8;
                    if (*v112)
                    {
                      do
                      {
                        while (1)
                        {
                          v118 = (uint64_t **)v117;
                          if (!std::less<std::string>::operator()[abi:se180100](v116 + 4, v117 + 4))
                            break;
                          v117 = *v118;
                          v119 = v118;
                          if (!*v118)
                            goto LABEL_158;
                        }
                        v117 = v118[1];
                      }
                      while (v117);
                      v119 = v118 + 1;
                    }
LABEL_158:
                    std::__tree<unsigned long>::__insert_node_at(v109 + 7, (uint64_t)v118, v119, v116);
                    v437 = (uint64_t *)v436[1];
                    if (v436[1])
                      v436[1] = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v436[1]);
                    v120 = (_QWORD *)v110[1];
                    if (v120)
                    {
                      do
                      {
                        v115 = v120;
                        v120 = (_QWORD *)*v120;
                      }
                      while (v120);
                    }
                    else
                    {
                      do
                      {
                        v115 = (_QWORD *)v110[2];
                        v121 = *v115 == (_QWORD)v110;
                        v110 = v115;
                      }
                      while (!v121);
                    }
                    v114 = (uint64_t)v437;
                    if (v437)
                      v121 = v115 == (_QWORD *)((char *)&v469 + 8);
                    else
                      v121 = 1;
                    v110 = v115;
                  }
                  while (!v121);
                }
              }
              else
              {
                v115 = v110;
              }
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:se180100]((uint64_t)v436);
              v110 = v115;
            }
            if (v110 != (_QWORD *)((char *)&v469 + 8))
            {
              v122 = v109 + 8;
              do
              {
                v123 = (char *)operator new(0x50uLL);
                v124 = (uint64_t *)v123;
                v436[0] = v123;
                v436[1] = v109 + 8;
                LOBYTE(v437) = 0;
                v125 = v123 + 32;
                if (*((char *)v110 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)(v123 + 32), (const std::string::value_type *)v110[4], v110[5]);
                }
                else
                {
                  v126 = *((_OWORD *)v110 + 2);
                  *((_QWORD *)v123 + 6) = v110[6];
                  *(_OWORD *)v125 = v126;
                }
                v127 = (std::string *)(v124 + 7);
                if (*((char *)v110 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(v127, (const std::string::value_type *)v110[7], v110[8]);
                }
                else
                {
                  v128 = *(_OWORD *)(v110 + 7);
                  v124[9] = v110[9];
                  *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v128;
                }
                LOBYTE(v437) = 1;
                v129 = *v122;
                v130 = v109 + 8;
                v131 = v109 + 8;
                if (*v122)
                {
                  do
                  {
                    while (1)
                    {
                      v130 = (uint64_t **)v129;
                      if (!std::less<std::string>::operator()[abi:se180100](v125, v129 + 4))
                        break;
                      v129 = *v130;
                      v131 = v130;
                      if (!*v130)
                        goto LABEL_187;
                    }
                    v129 = v130[1];
                  }
                  while (v129);
                  v131 = v130 + 1;
                }
LABEL_187:
                std::__tree<unsigned long>::__insert_node_at(v109 + 7, (uint64_t)v130, v131, v124);
                v436[0] = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
                v132 = (_QWORD *)v110[1];
                if (v132)
                {
                  do
                  {
                    v133 = v132;
                    v132 = (_QWORD *)*v132;
                  }
                  while (v132);
                }
                else
                {
                  do
                  {
                    v133 = (_OWORD *)v110[2];
                    v121 = *(_QWORD *)v133 == (_QWORD)v110;
                    v110 = v133;
                  }
                  while (!v121);
                }
                v110 = v133;
              }
              while (v133 != (__int128 *)((char *)&v469 + 8));
            }
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)&v469 + 1));
          v90 = v427[0];
          if (!v427[0])
            goto LABEL_77;
LABEL_194:
          operator delete(v90);
        }
      }
LABEL_77:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)&v466 + 1));
      ++v19;
      v16 = a2;
      nodeNr = a2->nodeNr;
    }
    while (v19 < (uint64_t)nodeNr);
  }
  v468[0] = v468;
  v468[1] = v468;
  v469 = 0u;
  *(_OWORD *)v470 = 0u;
  v436[0] = (char *)&v469 + 8;
  LOBYTE(v436[1]) = 0;
  if (nodeNr)
  {
    if (nodeNr > 0x492492492492492)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v140 = std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(nodeNr);
    *((_QWORD *)&v469 + 1) = v140;
    v470[1] = &v140[14 * v141];
    v142 = 56 * nodeNr;
    v143 = (char *)&v140[14 * nodeNr];
    do
    {
      v140[12] = 0;
      *((_OWORD *)v140 + 1) = 0uLL;
      *((_OWORD *)v140 + 2) = 0uLL;
      *(_OWORD *)v140 = 0uLL;
      v140 += 14;
      v142 -= 56;
    }
    while (v142);
    v470[0] = v143;
  }
  if (v435 != v18)
  {
    v144 = v435;
    while (1)
    {
      v146 = *v144;
      v145 = v144[1];
      if (*v144 <= v145)
        v147 = v144[1];
      else
        v147 = *v144;
      v148 = (char *)v470[0];
      v149 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v470[0] - *((_QWORD *)&v469 + 1)) >> 3);
      if (v147 < v149)
        goto LABEL_249;
      v150 = v147 + 1;
      v151 = v147 + 1 - v149;
      if (v147 + 1 <= v149)
      {
        if (v147 + 1 < v149)
        {
          v165 = (char *)(*((_QWORD *)&v469 + 1) + 56 * v150);
          while (v148 != v165)
          {
            v148 -= 56;
            std::allocator<CGPathRandomAccessSubpath>::destroy[abi:se180100]((uint64_t)v148);
          }
          v470[0] = v165;
        }
        goto LABEL_249;
      }
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v470[1] - (char *)v470[0]) >> 3) >= v151)
      {
        v166 = (char *)v470[0] + 56 * v151;
        v167 = 56 * v147 - 8 * (((uint64_t)v470[0] - *((_QWORD *)&v469 + 1)) >> 3) + 56;
        do
        {
          *((_DWORD *)v148 + 12) = 0;
          *((_OWORD *)v148 + 1) = 0uLL;
          *((_OWORD *)v148 + 2) = 0uLL;
          *(_OWORD *)v148 = 0uLL;
          v148 += 56;
          v167 -= 56;
        }
        while (v167);
        v470[0] = v166;
        goto LABEL_249;
      }
      if (v150 > 0x492492492492492)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v152 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v470[1] - *((_QWORD *)&v469 + 1)) >> 3);
      if (v152 <= v150)
        v152 = v147 + 1;
      v153 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v470[1] - *((_QWORD *)&v469 + 1)) >> 3)) >= 0x249249249249249
           ? 0x492492492492492
           : v152;
      v154 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(v153);
      v156 = &v154[56 * v149];
      v157 = -56 * v149 + 56 * v147 + 56;
      v158 = v156;
      do
      {
        *((_DWORD *)v158 + 12) = 0;
        *((_OWORD *)v158 + 1) = 0uLL;
        *((_OWORD *)v158 + 2) = 0uLL;
        *(_OWORD *)v158 = 0uLL;
        v158 += 56;
        v157 -= 56;
      }
      while (v157);
      v159 = (char *)v470[0];
      v160 = (char *)*((_QWORD *)&v469 + 1);
      if (v470[0] != *((void **)&v469 + 1))
        break;
      *((_QWORD *)&v469 + 1) = &v154[56 * v149];
      v470[0] = &v154[56 * v150];
      v470[1] = &v154[56 * v155];
      if (v159)
        goto LABEL_248;
LABEL_249:
      result = (uint64_t *)operator new(0x28uLL);
      v169 = result;
      result[2] = v146;
      result[3] = v145;
      v170 = v468[0];
      *result = (uint64_t)v468[0];
      result[1] = (uint64_t)v468;
      v170[1] = result;
      v468[0] = result;
      *(_QWORD *)&v469 = v469 + 1;
      if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v470[0] - *((_QWORD *)&v469 + 1)) >> 3) <= v146)
        goto LABEL_493;
      v436[0] = (void *)v145;
      v436[1] = result;
      result = (uint64_t *)boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((char **)(*((_QWORD *)&v469 + 1) + 56 * v146), v436);
      if ((_BYTE)result)
      {
        if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v470[0] - *((_QWORD *)&v469 + 1)) >> 3) <= v145)
        {
LABEL_493:
          __break(1u);
          return result;
        }
        v436[0] = (void *)v146;
        v436[1] = v169;
        boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>((char **)(*((_QWORD *)&v469 + 1) + 56 * v145 + 24), v436);
      }
      else
      {
        v171 = *v169;
        *(_QWORD *)(v171 + 8) = v169[1];
        *(_QWORD *)v169[1] = v171;
        *(_QWORD *)&v469 = v469 - 1;
        operator delete(v169);
      }
      v144 += 2;
      if (v144 == v18)
        goto LABEL_255;
    }
    v161 = 0;
    do
    {
      v162 = &v156[v161];
      v163 = &v159[v161];
      *((_QWORD *)v162 - 7) = 0;
      *((_QWORD *)v162 - 6) = 0;
      *((_QWORD *)v162 - 5) = 0;
      *(_OWORD *)(v162 - 56) = *(_OWORD *)&v159[v161 - 56];
      *((_QWORD *)v162 - 5) = *(_QWORD *)&v159[v161 - 40];
      *((_QWORD *)v163 - 7) = 0;
      *((_QWORD *)v163 - 6) = 0;
      *((_QWORD *)v163 - 5) = 0;
      *((_QWORD *)v162 - 4) = 0;
      *((_QWORD *)v162 - 3) = 0;
      *((_QWORD *)v162 - 2) = 0;
      *((_OWORD *)v162 - 2) = *(_OWORD *)&v159[v161 - 32];
      *((_QWORD *)v162 - 2) = *(_QWORD *)&v159[v161 - 16];
      *((_QWORD *)v163 - 4) = 0;
      *((_QWORD *)v163 - 3) = 0;
      *((_QWORD *)v163 - 2) = 0;
      *((_QWORD *)v162 - 1) = *(_QWORD *)&v159[v161 - 8];
      v161 -= 56;
    }
    while (&v159[v161] != v160);
    v164 = (char *)*((_QWORD *)&v469 + 1);
    v159 = (char *)v470[0];
    *((_QWORD *)&v469 + 1) = &v156[v161];
    v470[0] = &v154[56 * v150];
    v470[1] = &v154[56 * v155];
    if (v159 != v164)
    {
      do
      {
        v159 -= 56;
        std::allocator<CGPathRandomAccessSubpath>::destroy[abi:se180100]((uint64_t)v159);
      }
      while (v159 != v164);
      v159 = v164;
    }
    if (!v159)
      goto LABEL_249;
LABEL_248:
    operator delete(v159);
    goto LABEL_249;
  }
LABEL_255:
  v471 = operator new();
  *(_QWORD *)&v457 = &v457;
  *((_QWORD *)&v457 + 1) = &v457;
  v458 = 0;
  v172 = (void *)operator new[]();
  v464[0] = v172;
  v464[1] = 0;
  v173 = (_QWORD *)operator new();
  v173[1] = 0x100000001;
  *v173 = &off_1E16296D0;
  v173[2] = v172;
  v464[1] = v173;
  v455[1] = &v457;
  if (v470[0] == *((void **)&v469 + 1))
    v174 = -1;
  else
    v174 = 0;
  if (v470[0] != *((void **)&v469 + 1))
  {
    v175 = 0;
    v176 = ((uint64_t)v470[0] - *((_QWORD *)&v469 + 1)) / 56;
    do
      *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[]((uint64_t)v464[0], v175++) = 0;
    while (v176 != v175);
    v177 = v470[0];
    v178 = *((_QWORD *)&v469 + 1);
    if (v470[0] == *((void **)&v469 + 1))
    {
      v436[0] = v464[0];
      v436[1] = v464[1];
      if (v464[1])
      {
        v179 = (unsigned int *)((char *)v464[1] + 8);
        do
          v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
      }
      boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,unsigned long>>,boost::detail::nontruth2>((uint64_t)v468, v174, (uint64_t)v455, (uint64_t *)v436);
      boost::detail::shared_count::~shared_count((unsigned int **)&v436[1]);
      v177 = v470[0];
      v178 = *((_QWORD *)&v469 + 1);
    }
    v181 = (uint64_t)v177 - v178;
    if (v181)
    {
      v182 = 0;
      v183 = 0x6DB6DB6DB6DB6DB7 * (v181 >> 3);
      do
      {
        if (!*(_DWORD *)boost::shared_array<boost::default_color_type>::operator[]((uint64_t)v464[0], v182))
        {
          v466 = *(_OWORD *)v464;
          if (v464[1])
          {
            v184 = (unsigned int *)((char *)v464[1] + 8);
            do
              v185 = __ldxr(v184);
            while (__stxr(v185 + 1, v184));
          }
          boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,unsigned long>>,boost::detail::nontruth2>((uint64_t)v468, v182, (uint64_t)v455, (uint64_t *)&v466);
          boost::detail::shared_count::~shared_count((unsigned int **)&v466 + 1);
        }
        ++v182;
      }
      while (v182 != v183);
    }
  }
  boost::detail::shared_count::~shared_count((unsigned int **)&v464[1]);
  v192 = *((_QWORD *)&v457 + 1);
  if (*((__int128 **)&v457 + 1) == &v457)
  {
    v198 = 1;
    goto LABEL_483;
  }
  v193 = "Unexpected value in parse order";
  v194 = (unint64_t)&v438;
  v195 = (unint64_t)"PN2CG19DisplayListResourceE" & 0x7FFFFFFFFFFFFFFFLL;
  v196 = "Failed to parse DisplayListResource of type: %s";
  v197 = (_xmlNode *)&v457;
  v198 = 1;
  while (2)
  {
    v199 = *(_QWORD *)(v192 + 16);
    *(_QWORD *)&v451 = v199;
    v200 = (void **)v459[1];
    if (!v459[1])
      goto LABEL_285;
    v201 = &v459[1];
    do
    {
      v202 = v200;
      v203 = v201;
      v204 = (unint64_t)v200[4];
      v205 = v200 + 1;
      if (v204 >= v199)
      {
        v205 = v202;
        v201 = v202;
      }
      v200 = (void **)*v205;
    }
    while (v200);
    if (v201 == &v459[1])
      goto LABEL_285;
    if (v204 < v199)
      v202 = v203;
    if (v199 < (unint64_t)v202[4])
    {
LABEL_285:
      CGPostError((uint64_t)v193, v199, v186, v187, v188, v189, v190, v191, v424);
      goto LABEL_286;
    }
    v206 = std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v459, v199, (uint64_t **)&v451);
    v214 = v206[5];
    v197 = (_xmlNode *)v206[6];
    v215 = (uint64_t)(v206 + 7);
    switch(*((_BYTE *)v214 + 11))
    {
      case 0:
        v216 = v196;
        v217 = v193;
        v218 = v195;
        v219 = (_QWORD *)v194;
        v436[1] = v214;
        v437 = (uint64_t *)v429;
        v436[0] = &off_1E1628300;
        if (!DisplayListXMLParserResourceClip::parseAttributes((uint64_t)v436, v215, v221, v222, v223, v224, v225, v226)
          || !(*((unsigned int (**)(DisplayListXMLParserResourceClip *, _xmlNode *))v436[0] + 3))((DisplayListXMLParserResourceClip *)v436, v197))
        {
          v194 = (unint64_t)v219;
          v195 = v218;
          v193 = v217;
          v196 = v216;
          goto LABEL_401;
        }
        v227 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v227 + 608);
        std::shared_ptr<CG::DisplayListResourceClip>::shared_ptr[abi:se180100]<CG::DisplayListResourceClip,void>(v464, (uint64_t)v220);
        v197 = (_xmlNode *)&v457;
        v228 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(v227 + 128, v455, (uint64_t *)v464);
        v194 = (unint64_t)v219;
        v195 = v218;
        v193 = v217;
        v196 = v216;
        if (!*v228)
        {
          v229 = (uint64_t *)operator new(0x30uLL);
          *((_QWORD *)&v466 + 1) = v227 + 136;
          *((_OWORD *)v229 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v467) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v227 + 128), (uint64_t)v455[0], v228, v229);
          *(_QWORD *)&v466 = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v466);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v231 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        goto LABEL_479;
      case 1:
        *((_QWORD *)&v466 + 1) = v233;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E16284A0;
        if (!DisplayListXMLParserResourceColor::parseAttributes((uint64_t)&v466, v215, v234, v235, v236, v237, v238, v239)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v240 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v240 + 704);
        std::shared_ptr<CG::DisplayListResourceColor>::shared_ptr[abi:se180100]<CG::DisplayListResourceColor,void>(v464, (uint64_t)v233);
        v247 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>(v240 + 152, v455, (uint64_t)v464, v241, v242, v243, v244, v245, v246);
        v197 = (_xmlNode *)&v457;
        if (!*v247)
        {
          v248 = v247;
          v249 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v240 + 160);
          *((_OWORD *)v249 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v240 + 152), (uint64_t)v455[0], v248, v249);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v250 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v250);
        while (__stlxr(v232 - 1, v250));
        goto LABEL_479;
      case 2:
        *((_QWORD *)&v466 + 1) = v251;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628A88;
        if (!DisplayListXMLParserResourceColorSpace::parseAttributes((uint64_t)&v466, v215, v252, v253, v254, v255, v256, v257)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v258 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v258 + 624);
        std::shared_ptr<CG::DisplayListResourceColorSpace>::shared_ptr[abi:se180100]<CG::DisplayListResourceColorSpace,void>(v464, (uint64_t)v251);
        v197 = (_xmlNode *)&v457;
        v259 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v258 + 176, v455, (uint64_t *)v464);
        if (!*v259)
        {
          v260 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v258 + 184);
          *((_OWORD *)v260 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v258 + 176), (uint64_t)v455[0], v259, v260);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v261 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v261);
        while (__stlxr(v232 - 1, v261));
        goto LABEL_479;
      case 3:
        v436[1] = v262;
        v437 = (uint64_t *)v429;
        v436[0] = &off_1E1628330;
        *(_QWORD *)v194 = 0;
        *(_QWORD *)(v194 + 8) = 0;
        if (!DisplayListXMLParserResourceDash::parseAttributes((uint64_t)v436, v215, v263, v264, v265, v266, v267, v268)|| !(*((BOOL (**)(DisplayListXMLParserResourceDash *, _xmlNode *))v436[0] + 3))((DisplayListXMLParserResourceDash *)v436, v197))
        {
          goto LABEL_401;
        }
        v269 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v269 + 632);
        std::shared_ptr<CG::DisplayListResourceDash>::shared_ptr[abi:se180100]<CG::DisplayListResourceDash,void>(v464, (uint64_t)v262);
        v197 = (_xmlNode *)&v457;
        v270 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(v269 + 200, v455, (uint64_t *)v464);
        if (!*v270)
        {
          v271 = (uint64_t *)operator new(0x30uLL);
          *((_QWORD *)&v466 + 1) = v269 + 208;
          *((_OWORD *)v271 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v467) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v269 + 200), (uint64_t)v455[0], v270, v271);
          *(_QWORD *)&v466 = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v466);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v272 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v272);
        while (__stlxr(v232 - 1, v272));
        goto LABEL_479;
      case 4:
        *((_QWORD *)&v466 + 1) = v273;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628360;
        if (!DisplayListXMLParserResourceFont::parseAttributes((uint64_t)&v466, v215, v274, v275, v276, v277, v278, v279)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v280 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v280 + 640);
        std::shared_ptr<CG::DisplayListResourceFont>::shared_ptr[abi:se180100]<CG::DisplayListResourceFont,void>(v464, (uint64_t)v273);
        v197 = (_xmlNode *)&v457;
        v281 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v280 + 224, v455, (uint64_t *)v464);
        if (!*v281)
        {
          v282 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v280 + 232);
          *((_OWORD *)v282 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v280 + 224), (uint64_t)v455[0], v281, v282);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v283 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v283);
        while (__stlxr(v232 - 1, v283));
        goto LABEL_479;
      case 5:
        *((_QWORD *)&v466 + 1) = v284;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E16284D0;
        if (!DisplayListXMLParserResourceImage::parseAttributes((uint64_t)&v466, v215, v285, v286, v287, v288, v289, v290)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v291 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v291 + 648);
        std::shared_ptr<CG::DisplayListResourceImage>::shared_ptr[abi:se180100]<CG::DisplayListResourceImage,void>(v464, (uint64_t)v284);
        v197 = (_xmlNode *)&v457;
        v292 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v291 + 248, v455, (uint64_t *)v464);
        if (!*v292)
        {
          v293 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v291 + 256);
          *((_OWORD *)v293 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v291 + 248), (uint64_t)v455[0], v292, v293);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v294 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v294);
        while (__stlxr(v232 - 1, v294));
        goto LABEL_479;
      case 6:
        *((_QWORD *)&v466 + 1) = v295;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E16286A8;
        if (!DisplayListXMLParserResource::parseAttributes((uint64_t)&v466, v215, v296, v297, v298, v299, v300, v301)
          || !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v302 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v302 + 656);
        std::shared_ptr<CG::DisplayListResourceShading>::shared_ptr[abi:se180100]<CG::DisplayListResourceShading,void>(v464, (uint64_t)v295);
        v197 = (_xmlNode *)&v457;
        v303 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v302 + 272, v455, (uint64_t *)v464);
        if (!*v303)
        {
          v304 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v302 + 280);
          *((_OWORD *)v304 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v302 + 272), (uint64_t)v455[0], v303, v304);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v305 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v305);
        while (__stlxr(v232 - 1, v305));
        goto LABEL_479;
      case 7:
        *((_QWORD *)&v466 + 1) = v306;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628678;
        if (!DisplayListXMLParserResourcePattern::parseAttributes((uint64_t)&v466, v215, v307, v308, v309, v310, v311, v312)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v313 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v313 + 664);
        std::shared_ptr<CG::DisplayListResourcePattern>::shared_ptr[abi:se180100]<CG::DisplayListResourcePattern,void>(v464, (uint64_t)v306);
        v197 = (_xmlNode *)&v457;
        v314 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v313 + 320, v455, (uint64_t *)v464);
        if (!*v314)
        {
          v315 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v313 + 328);
          *((_OWORD *)v315 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v313 + 320), (uint64_t)v455[0], v314, v315);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v316 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v316);
        while (__stlxr(v232 - 1, v316));
        goto LABEL_479;
      case 8:
        *((_QWORD *)&v466 + 1) = v317;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628500;
        if (!DisplayListXMLParserResourceStyle::parseAttributes((uint64_t)&v466, v215, v318, v319, v320, v321, v322, v323)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v324 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v324 + 672);
        std::shared_ptr<CG::DisplayListResourceStyle>::shared_ptr[abi:se180100]<CG::DisplayListResourceStyle,void>(v464, (uint64_t)v317);
        v197 = (_xmlNode *)&v457;
        v325 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v324 + 344, v455, (uint64_t *)v464);
        if (!*v325)
        {
          v326 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v324 + 352);
          *((_OWORD *)v326 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v324 + 344), (uint64_t)v455[0], v325, v326);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v327 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v327);
        while (__stlxr(v232 - 1, v327));
        goto LABEL_479;
      case 9:
        *((_QWORD *)&v466 + 1) = v328;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628808;
        if (!DisplayListXMLParserResourceSoftMask::parseAttributes((uint64_t)&v466, v215, v329, v330, v331, v332, v333, v334)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v335 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v335 + 680);
        std::shared_ptr<CG::DisplayListResourceSoftMask>::shared_ptr[abi:se180100]<CG::DisplayListResourceSoftMask,void>(v464, (uint64_t)v328);
        v197 = (_xmlNode *)&v457;
        v336 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v335 + 368, v455, (uint64_t *)v464);
        if (!*v336)
        {
          v337 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v335 + 376);
          *((_OWORD *)v337 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v335 + 368), (uint64_t)v455[0], v336, v337);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v338 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v338);
        while (__stlxr(v232 - 1, v338));
        goto LABEL_479;
      case 0xA:
        *((_QWORD *)&v466 + 1) = v339;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E16287A8;
        if (!DisplayListXMLParserResource::parseAttributes((uint64_t)&v466, v215, v340, v341, v342, v343, v344, v345)
          || !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v346 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v346 + 688);
        std::shared_ptr<CG::DisplayListResourceFunction>::shared_ptr[abi:se180100]<CG::DisplayListResourceFunction,void>(v464, (uint64_t)v339);
        v197 = (_xmlNode *)&v457;
        v347 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v346 + 392, v455, (uint64_t *)v464);
        if (!*v347)
        {
          v348 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v346 + 400);
          *((_OWORD *)v348 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v346 + 392), (uint64_t)v455[0], v347, v348);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v349 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v349);
        while (__stlxr(v232 - 1, v349));
        goto LABEL_479;
      case 0xB:
        *((_QWORD *)&v466 + 1) = v350;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E1628AF0;
        if (!DisplayListXMLParserResourceDisplayList::parseAttributes((uint64_t)&v466, v215, v351, v352, v353, v354, v355, v356)|| !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v357 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v357 + 696);
        std::shared_ptr<CG::DisplayListResourceDisplayList>::shared_ptr[abi:se180100]<CG::DisplayListResourceDisplayList,void>(v453, (uint64_t)v350);
        v358 = v453[0];
        v359 = (std::__shared_weak_count *)v453[1];
        if (v453[1])
        {
          v360 = (unint64_t *)((char *)v453[1] + 8);
          do
            v361 = __ldxr(v360);
          while (__stxr(v361 + 1, v360));
        }
        v362 = v358[2];
        if (v362)
          v363 = XXH64_digest(*(_QWORD **)(v362 + 136));
        else
          v363 = 0;
        v431 = (_QWORD *)v194;
        if (v359)
        {
          p_shared_owners = (unint64_t *)&v359->__shared_owners_;
          do
            v387 = __ldaxr(p_shared_owners);
          while (__stlxr(v387 - 1, p_shared_owners));
          if (!v387)
          {
            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
            std::__shared_weak_count::__release_weak(v359);
          }
        }
        v428 = v195;
        v388 = (_QWORD *)(v357 + 416);
        v389 = *(_QWORD *)(v357 + 424);
        v390 = v363;
        if (!v389)
          goto LABEL_454;
        v391 = (uint8x8_t)vcnt_s8((int8x8_t)v389);
        v391.i16[0] = vaddlv_u8(v391);
        v434 = v391.u32[0];
        if (v391.u32[0] > 1uLL)
        {
          v194 = v363;
          if (v363 >= v389)
            v194 = v363 % v389;
        }
        else
        {
          v194 = (v389 - 1) & v363;
        }
        v392 = *(_QWORD **)(*v388 + 8 * v194);
        if (!v392)
          goto LABEL_454;
        v393 = (_QWORD *)*v392;
        if (!*v392)
        {
          v388 = (_QWORD *)(v357 + 416);
          goto LABEL_454;
        }
        v432 = (_QWORD *)v194;
        break;
      case 0xC:
        *((_QWORD *)&v466 + 1) = v364;
        v467 = v429;
        *(_QWORD *)&v466 = &off_1E16289B0;
        if (!DisplayListXMLParserResource::parseAttributes((uint64_t)&v466, v215, v365, v366, v367, v368, v369, v370)
          || !(*(unsigned int (**)(DisplayListXMLParserResource *, _xmlNode *))(v466 + 24))((DisplayListXMLParserResource *)&v466, v197))
        {
          goto LABEL_401;
        }
        v371 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v371 + 704);
        std::shared_ptr<CG::DisplayListResourceCFTypeRef>::shared_ptr[abi:se180100]<CG::DisplayListResourceCFTypeRef,void>(v464, (uint64_t)v364);
        v197 = (_xmlNode *)&v457;
        v372 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v371 + 456, v455, (uint64_t *)v464);
        if (!*v372)
        {
          v373 = (uint64_t *)operator new(0x30uLL);
          v436[1] = (void *)(v371 + 464);
          *((_OWORD *)v373 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v437) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v371 + 456), (uint64_t)v455[0], v372, v373);
          v436[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (!v464[1])
          goto LABEL_481;
        v374 = (unint64_t *)((char *)v464[1] + 8);
        do
          v232 = __ldaxr(v374);
        while (__stlxr(v232 - 1, v374));
        goto LABEL_479;
      case 0xD:
        v436[1] = v375;
        v437 = (uint64_t *)v429;
        v436[0] = &off_1E16287D8;
        if (!DisplayListXMLParserResourceGradient::parseAttributes((uint64_t)v436, v215, v376, v377, v378, v379, v380, v381)|| !(*((unsigned int (**)(DisplayListXMLParserResourceGradient *, _xmlNode *))v436[0] + 3))((DisplayListXMLParserResourceGradient *)v436, v197))
        {
LABEL_401:
          v197 = (_xmlNode *)&v457;
LABEL_402:
          CGPostError((uint64_t)v196, v207, v208, v209, v210, v211, v212, v213, v195);
          v198 = 0;
          goto LABEL_286;
        }
        v382 = *((_QWORD *)v429 + 2);
        ++*(_QWORD *)(v382 + 712);
        std::shared_ptr<CG::DisplayListResourceGradient>::shared_ptr[abi:se180100]<CG::DisplayListResourceGradient,void>(v464, (uint64_t)v375);
        v197 = (_xmlNode *)&v457;
        v383 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v382 + 296, v455, (uint64_t *)v464);
        if (!*v383)
        {
          v384 = (uint64_t *)operator new(0x30uLL);
          *((_QWORD *)&v466 + 1) = v382 + 304;
          *((_OWORD *)v384 + 2) = *(_OWORD *)v464;
          v464[0] = 0;
          v464[1] = 0;
          LOBYTE(v467) = 1;
          std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v382 + 296), (uint64_t)v455[0], v383, v384);
          *(_QWORD *)&v466 = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v466);
        }
        v230 = (std::__shared_weak_count *)v464[1];
        if (v464[1])
        {
          v385 = (unint64_t *)((char *)v464[1] + 8);
          do
            v232 = __ldaxr(v385);
          while (__stlxr(v232 - 1, v385));
          goto LABEL_479;
        }
        goto LABEL_481;
      default:
        goto LABEL_402;
    }
    while (2)
    {
      v394 = v393[1];
      if (v394 != v363)
      {
        if (v434 > 1)
        {
          if (v394 >= v389)
            v394 %= v389;
        }
        else
        {
          v394 &= v389 - 1;
        }
        if ((_QWORD *)v394 != v432)
        {
LABEL_452:
          v388 = (_QWORD *)(v357 + 416);
          v194 = (unint64_t)v432;
LABEL_454:
          v413 = operator new(0x20uLL);
          v414 = (_QWORD *)(v357 + 432);
          v436[0] = v413;
          v436[1] = (void *)(v357 + 432);
          *(_QWORD *)v413 = 0;
          *((_QWORD *)v413 + 1) = v390;
          *((_OWORD *)v413 + 1) = *(_OWORD *)v453;
          v453[0] = 0;
          v453[1] = 0;
          LOBYTE(v437) = 1;
          v415 = (float)(unint64_t)(*(_QWORD *)(v357 + 440) + 1);
          v416 = *(float *)(v357 + 448);
          if (!v389 || (float)(v416 * (float)v389) < v415)
          {
            v417 = (v389 & (v389 - 1)) != 0;
            if (v389 < 3)
              v417 = 1;
            v418 = v417 | (2 * v389);
            v419 = vcvtps_u32_f32(v415 / v416);
            if (v418 <= v419)
              v420 = v419;
            else
              v420 = v418;
            std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>((uint64_t)v388, v420);
            v389 = *(_QWORD *)(v357 + 424);
            if ((v389 & (v389 - 1)) != 0)
            {
              if (v390 >= v389)
                v194 = v390 % v389;
              else
                v194 = v390;
            }
            else
            {
              v194 = (v389 - 1) & v390;
            }
          }
          v421 = *(_QWORD **)(*v388 + 8 * v194);
          if (v421)
          {
            *(_QWORD *)v413 = *v421;
            goto LABEL_474;
          }
          *(_QWORD *)v413 = *v414;
          *v414 = v413;
          *(_QWORD *)(*v388 + 8 * v194) = v414;
          if (*(_QWORD *)v413)
          {
            v422 = *(_QWORD *)(*(_QWORD *)v413 + 8);
            if ((v389 & (v389 - 1)) != 0)
            {
              if (v422 >= v389)
                v422 %= v389;
            }
            else
            {
              v422 &= v389 - 1;
            }
            v421 = (_QWORD *)(*v388 + 8 * v422);
LABEL_474:
            *v421 = v413;
          }
          v436[0] = 0;
          ++*(_QWORD *)(v357 + 440);
          std::unique_ptr<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>>::reset[abi:se180100]((uint64_t)v436);
          break;
        }
        goto LABEL_451;
      }
      v395 = (_QWORD *)v393[2];
      v396 = (unint64_t *)v393[3];
      v464[0] = v395;
      v464[1] = v396;
      if (v396)
      {
        v397 = v396 + 1;
        do
          v398 = __ldxr(v397);
        while (__stxr(v398 + 1, v397));
      }
      v399 = v453[0];
      v400 = (std::__shared_weak_count *)v453[1];
      v455[0] = v453[0];
      v455[1] = v453[1];
      if (v453[1])
      {
        v401 = (unint64_t *)((char *)v453[1] + 8);
        do
          v402 = __ldxr(v401);
        while (__stxr(v402 + 1, v401));
      }
      v403 = v395[2];
      v404 = v399[2];
      if (v403 == v404)
      {
        v406 = 1;
        if (!v400)
          goto LABEL_445;
LABEL_441:
        v408 = (unint64_t *)&v400->__shared_owners_;
        do
          v409 = __ldaxr(v408);
        while (__stlxr(v409 - 1, v408));
        if (!v409)
        {
          ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
          std::__shared_weak_count::__release_weak(v400);
        }
        goto LABEL_445;
      }
      if (v403)
        v405 = v404 == 0;
      else
        v405 = 1;
      if (v405)
      {
        v406 = 0;
        if (!v400)
          goto LABEL_445;
        goto LABEL_441;
      }
      isEqualTo = CG::DisplayList::isEqualTo((CG::DisplayList *)(v403 + 16), (const CG::DisplayList *)(v404 + 16), 0);
      v406 = isEqualTo;
      if (v400)
        goto LABEL_441;
LABEL_445:
      v410 = (std::__shared_weak_count *)v464[1];
      if (v464[1])
      {
        v411 = (unint64_t *)((char *)v464[1] + 8);
        do
          v412 = __ldaxr(v411);
        while (__stlxr(v412 - 1, v411));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
          std::__shared_weak_count::__release_weak(v410);
        }
      }
      v363 = v390;
      if ((v406 & 1) == 0)
      {
LABEL_451:
        v393 = (_QWORD *)*v393;
        if (!v393)
          goto LABEL_452;
        continue;
      }
      break;
    }
    v230 = (std::__shared_weak_count *)v453[1];
    v194 = (unint64_t)v431;
    v195 = v428;
    v197 = (_xmlNode *)&v457;
    if (v453[1])
    {
      v423 = (unint64_t *)((char *)v453[1] + 8);
      do
        v232 = __ldaxr(v423);
      while (__stlxr(v232 - 1, v423));
LABEL_479:
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
LABEL_481:
    v198 = 1;
LABEL_286:
    v192 = *(_QWORD *)(v192 + 8);
    if ((_xmlNode *)v192 != v197)
      continue;
    break;
  }
LABEL_483:
  std::__list_imp<long long>::clear(&v457);
  if (v471)
    MEMORY[0x186DC23C4](v471, 0xC400A2AC0F1);
  v436[0] = (char *)&v469 + 8;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)v436);
  std::__list_imp<long long>::clear(v468);
  if (v435)
    operator delete(v435);
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy((_QWORD *)v459[1]);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v462);
  return (uint64_t *)(v198 & 1);
}

void sub_184B68270()
{
  __cxa_end_catch();
  JUMPOUT(0x184B6838CLL);
}

void sub_184B6827C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x184B685B0);
}

void sub_184B68290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char *a65;

  boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl((uint64_t)&STACK[0x200]);
  if (a22)
    operator delete(a22);
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a62);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a65);
  _Unwind_Resume(a1);
}

void sub_184B682A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  unint64_t *v83;

  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  if (a77 < 0)
    operator delete(a76);
  if (a79 < 0)
    operator delete(a78);
  if (a81 < 0)
    operator delete(a80);
  if (a83 < 0)
    operator delete(a82);
  if (a28 < 0)
    operator delete(a23);
  for (; v83 != &STACK[0x200]; v83 -= 4)
  {
    if (*((char *)v83 - 9) < 0)
      operator delete((void *)*(v83 - 4));
  }
  JUMPOUT(0x184B685B0);
}

void sub_184B682AC()
{
  JUMPOUT(0x184B68484);
}

void sub_184B682B8()
{
  JUMPOUT(0x184B68494);
}

void sub_184B682C4()
{
  JUMPOUT(0x184B684A4);
}

void sub_184B682D0()
{
  JUMPOUT(0x184B684B4);
}

void sub_184B682DC()
{
  JUMPOUT(0x184B684C4);
}

void sub_184B682E8()
{
  JUMPOUT(0x184B684D4);
}

void sub_184B682F4()
{
  JUMPOUT(0x184B684E4);
}

void sub_184B68300()
{
  JUMPOUT(0x184B684F4);
}

void sub_184B6830C()
{
  JUMPOUT(0x184B68504);
}

void sub_184B68318()
{
  JUMPOUT(0x184B68514);
}

void sub_184B68324()
{
  JUMPOUT(0x184B68524);
}

void sub_184B68330()
{
  JUMPOUT(0x184B68534);
}

void sub_184B6833C()
{
  JUMPOUT(0x184B685B0);
}

void sub_184B68348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)va);
  std::__list_imp<long long>::clear(&STACK[0x200]);
  JUMPOUT(0x184B68594);
}

void sub_184B6835C()
{
  JUMPOUT(0x184B68404);
}

void sub_184B68370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  std::__list_imp<long long>::clear(&a58);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::~adjacency_list((uint64_t)&STACK[0x200]);
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy((_QWORD *)a62);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)a65);
  _Unwind_Resume(a1);
}

void sub_184B683A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void **v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  if (*(char *)(v15 + 55) < 0)
    operator delete(*v14);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  JUMPOUT(0x184B683FCLL);
}

void sub_184B683C8()
{
  JUMPOUT(0x184B68404);
}

void sub_184B683F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)STACK[0x218]);
  if (a13)
    JUMPOUT(0x184B68410);
  JUMPOUT(0x184B6841CLL);
}

void sub_184B68418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,_QWORD *a62,uint64_t a63)
{
  char *a65;
  _QWORD *a71;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a71);
  if (a22)
    operator delete(a22);
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a62);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a65);
  _Unwind_Resume(a1);
}

void sub_184B68428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (a22)
    operator delete(a22);
  std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a62);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a65);
  _Unwind_Resume(a1);
}

void sub_184B68578()
{
  JUMPOUT(0x184B68588);
}

uint64_t CG::DisplayListXMLDeserializer::parseEntryStates(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t **v12;
  _QWORD *v13;
  char *v14;
  std::string *v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  _xmlNode *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t *v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v85;
  uint64_t **v86;
  CG::DisplayListXMLDeserializer *v87;
  _xmlNodeSet *v88;
  unint64_t v89;
  void *__p[2];
  uint64_t v91;
  void *v92[2];
  uint64_t v93;
  void *v94[2];
  uint64_t v95;
  void *v96[2];
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101[2];
  uint64_t v102;
  _DWORD v103[2];
  __int128 v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)v96, "drawing");
  *(_OWORD *)v101 = *(_OWORD *)v96;
  v102 = v97;
  v96[1] = 0;
  v97 = 0;
  v96[0] = 0;
  v103[0] = 0;
  std::string::basic_string[abi:se180100]<0>((char **)v94, "fill");
  v104 = *(_OWORD *)v94;
  v105 = v95;
  v94[1] = 0;
  v95 = 0;
  v94[0] = 0;
  v106 = 1;
  std::string::basic_string[abi:se180100]<0>((char **)v92, "stroke");
  v107 = *(_OWORD *)v92;
  v108 = v93;
  v92[1] = 0;
  v93 = 0;
  v92[0] = 0;
  v109 = 2;
  std::string::basic_string[abi:se180100]<0>((char **)__p, "pattern");
  v87 = this;
  v4 = 0;
  v5 = 0;
  v110 = *(_OWORD *)__p;
  v111 = v91;
  __p[1] = 0;
  v91 = 0;
  __p[0] = 0;
  v112 = 3;
  v99 = 0;
  v100 = 0;
  v98 = &v99;
  while (1)
  {
    v6 = &v101[4 * v5];
    if (v98 == &v99)
    {
      v8 = &v99;
    }
    else
    {
      v7 = &v99;
      if (v4)
      {
        do
        {
          v8 = (uint64_t **)v4;
          v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v7[2];
          v9 = *v8 == (uint64_t *)v7;
          v7 = v8;
        }
        while (v9);
      }
      v10 = std::less<std::string>::operator()[abi:se180100](v8 + 4, &v101[4 * v5]);
      v4 = v99;
      if (!v10)
      {
        v11 = &v99;
        v12 = &v99;
        if (v99)
        {
          v12 = &v99;
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v4;
              v13 = v4 + 4;
              if (!std::less<std::string>::operator()[abi:se180100](&v101[4 * v5], v4 + 4))
                break;
              v4 = *v11;
              v12 = v11;
              if (!*v11)
                goto LABEL_20;
            }
            if (!std::less<std::string>::operator()[abi:se180100](v13, &v101[4 * v5]))
              break;
            v12 = v11 + 1;
            v4 = v11[1];
            if (!v4)
              goto LABEL_20;
          }
LABEL_19:
          if (*v12)
            goto LABEL_26;
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
    v11 = &v99;
    v12 = &v99;
    if (v4)
    {
      v12 = v8 + 1;
      v11 = v8;
      goto LABEL_19;
    }
LABEL_20:
    v14 = (char *)operator new(0x40uLL);
    v15 = (std::string *)(v14 + 32);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)*v6, (std::string::size_type)v6[1]);
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      *((_QWORD *)v14 + 6) = v6[2];
    }
    *((_DWORD *)v14 + 14) = v103[8 * v5];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v11;
    *v12 = (uint64_t *)v14;
    if (*v98)
    {
      v98 = (uint64_t **)*v98;
      v14 = (char *)*v12;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v99, (uint64_t *)v14);
    ++v100;
LABEL_26:
    if (++v5 == 4)
      break;
    v4 = v99;
  }
  v88 = a2;
  for (i = 0; i != -128; i -= 32)
  {
    if (*((char *)&v111 + i + 7) < 0)
      operator delete(*(void **)((char *)&v110 + i));
  }
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v93) < 0)
    operator delete(v92[0]);
  if (SHIBYTE(v95) < 0)
    operator delete(v94[0]);
  if (SHIBYTE(v97) < 0)
    operator delete(v96[0]);
  v17 = 1;
  if (a2->nodeNr >= 1)
  {
    v18 = 0;
    v86 = (uint64_t **)((char *)v87 + 64);
    while (1)
    {
      v19 = a2->nodeTab[v18];
      CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)v96, v19);
      std::string::basic_string[abi:se180100]<0>((char **)v101, "type");
      v27 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v96, v101);
      if (SHIBYTE(v102) < 0)
        operator delete(v101[0]);
      if (&v96[1] == v27)
      {
        CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
      }
      else
      {
        v28 = v99;
        if (!v99)
          goto LABEL_55;
        v29 = v27 + 7;
        v30 = &v99;
        do
        {
          v31 = v30;
          v32 = v28 + 4;
          v33 = std::less<std::string>::operator()[abi:se180100](v28 + 4, v29);
          v34 = v28 + 1;
          if (!v33)
          {
            v34 = v28;
            v30 = (uint64_t **)v28;
          }
          v28 = (uint64_t *)*v34;
        }
        while (*v34);
        if (v30 == &v99
          || (!v33 ? (v35 = v32) : (v35 = (uint64_t *)(v31 + 4)),
              std::less<std::string>::operator()[abi:se180100](v29, v35)))
        {
LABEL_55:
          CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
        }
        else
        {
          v89 = 0;
          if (CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v96, "_id", "%llu", v22, v23, v24, v25, v26, (uint64_t)&v89) == 1)
          {
            switch(*((_DWORD *)v30 + 14))
            {
              case 0:
                v43 = (_QWORD *)operator new();
                *v43 = &off_1E1629548;
                *(_OWORD *)(v43 + 1) = 0u;
                *(_OWORD *)(v43 + 3) = 0u;
                v43[5] = 0;
                v92[0] = &off_1E1628950;
                v92[1] = v87;
                DisplayListXMLParserEntryStateDrawing::parseAttributes((uint64_t)v92, (uint64_t)v96, v43, v44, v45, v46, v47, v48);
                if (!(*((unsigned int (**)(void **, _xmlNode *, _QWORD *))v92[0] + 3))(v92, v19, v43))
                  goto LABEL_105;
                v49 = *((_QWORD *)v87 + 2);
                ++*(_QWORD *)(v49 + 720);
                std::shared_ptr<CG::DisplayListEntryStateDrawing const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateDrawing,void>(v94, (uint64_t)v43);
                a2 = v88;
                v50 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(v49 + 480, __p, (uint64_t *)v94);
                if (!*v50)
                {
                  v51 = (uint64_t *)operator new(0x30uLL);
                  v101[1] = (void *)(v49 + 488);
                  *((_OWORD *)v51 + 2) = *(_OWORD *)v94;
                  v94[0] = 0;
                  v94[1] = 0;
                  LOBYTE(v102) = 1;
                  std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v49 + 480), (uint64_t)__p[0], v50, v51);
                  v101[0] = 0;
                  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v101);
                }
                v52 = (std::__shared_weak_count *)v94[1];
                if (!v94[1])
                  goto LABEL_92;
                v53 = (unint64_t *)((char *)v94[1] + 8);
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                break;
              case 1:
                v43 = (_QWORD *)operator new();
                *v43 = &off_1E16293A8;
                v43[1] = 0;
                v92[0] = &off_1E1628610;
                v92[1] = v87;
                DisplayListXMLParserEntryStateFill::parseAttributes((uint64_t)v92, (uint64_t)v96, v43, v55, v56, v57, v58, v59);
                if (!(*((unsigned int (**)(void **, _xmlNode *, _QWORD *))v92[0] + 3))(v92, v19, v43))
                  goto LABEL_105;
                v60 = *((_QWORD *)v87 + 2);
                ++*(_QWORD *)(v60 + 728);
                std::shared_ptr<CG::DisplayListEntryStateFill const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateFill,void>(v94, (uint64_t)v43);
                a2 = v88;
                v61 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(v60 + 504, __p, (uint64_t *)v94);
                if (!*v61)
                {
                  v62 = (uint64_t *)operator new(0x30uLL);
                  v101[1] = (void *)(v60 + 512);
                  *((_OWORD *)v62 + 2) = *(_OWORD *)v94;
                  v94[0] = 0;
                  v94[1] = 0;
                  LOBYTE(v102) = 1;
                  std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v60 + 504), (uint64_t)__p[0], v61, v62);
                  v101[0] = 0;
                  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v101);
                }
                v52 = (std::__shared_weak_count *)v94[1];
                if (!v94[1])
                  goto LABEL_92;
                v63 = (unint64_t *)((char *)v94[1] + 8);
                do
                  v54 = __ldaxr(v63);
                while (__stlxr(v54 - 1, v63));
                break;
              case 2:
                v43 = (_QWORD *)operator new();
                *v43 = &off_1E1629490;
                v43[1] = 0;
                v43[5] = 0;
                v92[0] = &off_1E1628778;
                v92[1] = v87;
                DisplayListXMLParserEntryStateStroke::parseAttributes((uint64_t)v92, (uint64_t)v96, v43, v64, v65, v66, v67, v68);
                if (!(*((unsigned int (**)(void **, _xmlNode *, _QWORD *))v92[0] + 3))(v92, v19, v43))
                  goto LABEL_105;
                v69 = *((_QWORD *)v87 + 2);
                ++*(_QWORD *)(v69 + 736);
                std::shared_ptr<CG::DisplayListEntryStateStroke const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateStroke,void>(v94, (uint64_t)v43);
                a2 = v88;
                v70 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>(v69 + 528, __p, (uint64_t *)v94);
                if (!*v70)
                {
                  v71 = (uint64_t *)operator new(0x30uLL);
                  v101[1] = (void *)(v69 + 536);
                  *((_OWORD *)v71 + 2) = *(_OWORD *)v94;
                  v94[0] = 0;
                  v94[1] = 0;
                  LOBYTE(v102) = 1;
                  std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v69 + 528), (uint64_t)__p[0], v70, v71);
                  v101[0] = 0;
                  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v101);
                }
                v52 = (std::__shared_weak_count *)v94[1];
                if (!v94[1])
                  goto LABEL_92;
                v72 = (unint64_t *)((char *)v94[1] + 8);
                do
                  v54 = __ldaxr(v72);
                while (__stlxr(v54 - 1, v72));
                break;
              case 3:
                v43 = (_QWORD *)operator new();
                *v43 = &off_1E1629570;
                v92[0] = &off_1E1628980;
                v92[1] = v87;
                DisplayListXMLParserEntryStatePattern::parseAttributes((int)v43, (uint64_t)v96, v43);
                if (!(*((unsigned int (**)(void **, _xmlNode *, _QWORD *))v92[0] + 3))(v92, v19, v43))
                  goto LABEL_105;
                v73 = *((_QWORD *)v87 + 2);
                ++*(_QWORD *)(v73 + 744);
                std::shared_ptr<CG::DisplayListEntryStatePattern const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStatePattern,void>(v94, (uint64_t)v43);
                a2 = v88;
                v74 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(v73 + 552, __p, (uint64_t *)v94);
                if (!*v74)
                {
                  v75 = (uint64_t *)operator new(0x30uLL);
                  v101[1] = (void *)(v73 + 560);
                  *((_OWORD *)v75 + 2) = *(_OWORD *)v94;
                  v94[0] = 0;
                  v94[1] = 0;
                  LOBYTE(v102) = 1;
                  std::__tree<unsigned long>::__insert_node_at((uint64_t **)(v73 + 552), (uint64_t)__p[0], v74, v75);
                  v101[0] = 0;
                  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v101);
                }
                v52 = (std::__shared_weak_count *)v94[1];
                if (!v94[1])
                  goto LABEL_92;
                v76 = (unint64_t *)((char *)v94[1] + 8);
                do
                  v54 = __ldaxr(v76);
                while (__stlxr(v54 - 1, v76));
                break;
              default:
LABEL_105:
                v85 = v30 + 4;
                if (*((char *)v30 + 55) < 0)
                  v85 = (_QWORD *)*v85;
                CGPostError((uint64_t)"Failed to parse DisplayListEntryState of type: %s", v36, v37, v38, v39, v40, v41, v42, (char)v85);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v96[1]);
                v17 = 0;
                goto LABEL_104;
            }
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
LABEL_92:
            v77 = (uint64_t **)((char *)v87 + 64);
            v78 = *v86;
            v79 = (uint64_t **)((char *)v87 + 64);
            if (*v86)
            {
              while (1)
              {
                while (1)
                {
                  v77 = (uint64_t **)v78;
                  v80 = v78[4];
                  if (v89 >= v80)
                    break;
                  v78 = *v77;
                  v79 = v77;
                  if (!*v77)
                    goto LABEL_99;
                }
                if (v80 >= v89)
                  break;
                v78 = v77[1];
                if (!v78)
                {
                  v79 = v77 + 1;
                  goto LABEL_99;
                }
              }
              v81 = (uint64_t *)v77;
            }
            else
            {
LABEL_99:
              v81 = (uint64_t *)operator new(0x30uLL);
              v81[4] = v89;
              v81[5] = 0;
              *v81 = 0;
              v81[1] = 0;
              v81[2] = (uint64_t)v77;
              *v79 = v81;
              v82 = **((_QWORD **)v87 + 7);
              v83 = v81;
              if (v82)
              {
                *((_QWORD *)v87 + 7) = v82;
                v83 = *v79;
              }
              std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v87 + 8), v83);
              ++*((_QWORD *)v87 + 9);
            }
            v81[5] = (uint64_t)v43;
            goto LABEL_58;
          }
          CGPostError((uint64_t)"%s: Failed to parse \"_id\" attribute from node", v36, v37, v38, v39, v40, v41, v42, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntryStates(xmlNodeSetPtr)");
        }
        a2 = v88;
      }
LABEL_58:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v96[1]);
      if (++v18 >= a2->nodeNr)
      {
        v17 = 1;
        break;
      }
    }
  }
LABEL_104:
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v99);
  return v17;
}

void sub_184B68FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,_QWORD *a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char *a41,uint64_t a42,char a43)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a35);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a41);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayListXMLDeserializer::parseEntries(CG::DisplayListXMLDeserializer *this, _xmlNodeSet *a2)
{
  uint64_t *v3;
  uint64_t v4;
  CGRect *v5;
  uint64_t **v6;
  uint64_t **v7;
  BOOL v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  char *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _xmlNode *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _xmlNodeSet *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  CG::DisplayList *v81;
  CGSize v82;
  _QWORD *v83;
  void *__p[2];
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *v90[2];
  uint64_t v91;
  void *v92[2];
  uint64_t v93;
  void *v94[2];
  uint64_t v95;
  void *v96[2];
  uint64_t v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  void *v102[2];
  CGFloat v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  CGRect v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)v102, "image");
  v107.origin = *(CGPoint *)v102;
  v107.size.width = v103;
  v102[1] = 0;
  v103 = 0.0;
  v102[0] = 0;
  LODWORD(v107.size.height) = 0;
  std::string::basic_string[abi:se180100]<0>((char **)v100, "glyphs");
  v108 = *(_OWORD *)v100;
  v109 = v101;
  v100[1] = 0;
  v101 = 0;
  v100[0] = 0;
  v110 = 1;
  std::string::basic_string[abi:se180100]<0>((char **)v98, "path");
  v111 = *(_OWORD *)v98;
  v112 = v99;
  v98[1] = 0;
  v99 = 0;
  v98[0] = 0;
  v113 = 2;
  std::string::basic_string[abi:se180100]<0>((char **)v96, "rects");
  v114 = *(_OWORD *)v96;
  v115 = v97;
  v96[1] = 0;
  v97 = 0;
  v96[0] = 0;
  v116 = 3;
  std::string::basic_string[abi:se180100]<0>((char **)v94, "lines");
  v117 = *(_OWORD *)v94;
  v118 = v95;
  v94[1] = 0;
  v95 = 0;
  v94[0] = 0;
  v119 = 4;
  std::string::basic_string[abi:se180100]<0>((char **)v92, "shading");
  v120 = *(_OWORD *)v92;
  v121 = v93;
  v92[1] = 0;
  v93 = 0;
  v92[0] = 0;
  v122 = 5;
  std::string::basic_string[abi:se180100]<0>((char **)v90, "gradient");
  v123 = *(_OWORD *)v90;
  v124 = v91;
  v90[1] = 0;
  v91 = 0;
  v90[0] = 0;
  v125 = 6;
  std::string::basic_string[abi:se180100]<0>((char **)v88, "displayList");
  v126 = *(_OWORD *)v88;
  v127 = v89;
  v88[1] = 0;
  v89 = 0;
  v88[0] = 0;
  v128 = 7;
  std::string::basic_string[abi:se180100]<0>((char **)__p, "action");
  v3 = 0;
  v4 = 0;
  v129 = *(_OWORD *)__p;
  v130 = v87;
  __p[1] = 0;
  v87 = 0;
  __p[0] = 0;
  v131 = 8;
  v105 = 0;
  v106 = 0;
  v104 = &v105;
  while (1)
  {
    v5 = &v107 + v4;
    if (v104 == &v105)
    {
      v7 = &v105;
    }
    else
    {
      v6 = &v105;
      if (v3)
      {
        do
        {
          v7 = (uint64_t **)v3;
          v3 = (uint64_t *)v3[1];
        }
        while (v3);
      }
      else
      {
        do
        {
          v7 = (uint64_t **)v6[2];
          v8 = *v7 == (uint64_t *)v6;
          v6 = v7;
        }
        while (v8);
      }
      v9 = std::less<std::string>::operator()[abi:se180100](v7 + 4, (_QWORD *)&v107.origin.x + 4 * v4);
      v3 = v105;
      if (!v9)
      {
        v10 = &v105;
        v11 = &v105;
        if (v105)
        {
          v11 = &v105;
          while (1)
          {
            while (1)
            {
              v10 = (uint64_t **)v3;
              v12 = v3 + 4;
              if (!std::less<std::string>::operator()[abi:se180100]((_QWORD *)&v107.origin.x + 4 * v4, v3 + 4))break;
              v3 = *v10;
              v11 = v10;
              if (!*v10)
                goto LABEL_20;
            }
            if (!std::less<std::string>::operator()[abi:se180100](v12, (_QWORD *)&v107.origin.x + 4 * v4))
              break;
            v11 = v10 + 1;
            v3 = v10[1];
            if (!v3)
              goto LABEL_20;
          }
LABEL_19:
          if (*v11)
            goto LABEL_26;
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
    v10 = &v105;
    v11 = &v105;
    if (v3)
    {
      v11 = v7 + 1;
      v10 = v7;
      goto LABEL_19;
    }
LABEL_20:
    v13 = (char *)operator new(0x40uLL);
    v14 = (std::string *)(v13 + 32);
    if (SHIBYTE(v5->size.width) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)&v5->origin.x, *(_QWORD *)&v5->origin.y);
    }
    else
    {
      *(CGPoint *)&v14->__r_.__value_.__l.__data_ = v5->origin;
      *((_QWORD *)v13 + 6) = *(_QWORD *)&v5->size.width;
    }
    *((_DWORD *)v13 + 14) = *((_DWORD *)&v107.size.height + 8 * v4);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v10;
    *v11 = (uint64_t *)v13;
    if (*v104)
    {
      v104 = (uint64_t **)*v104;
      v13 = (char *)*v11;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v105, (uint64_t *)v13);
    ++v106;
LABEL_26:
    if (++v4 == 9)
      break;
    v3 = v105;
  }
  v15 = 36;
  do
  {
    if (SHIBYTE((&v105)[v15]) < 0)
      operator delete(*(void **)((char *)&v103 + v15 * 8));
    v15 -= 4;
  }
  while (v15 * 8);
  if (SHIBYTE(v87) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  if (SHIBYTE(v91) < 0)
    operator delete(v90[0]);
  if (SHIBYTE(v93) < 0)
    operator delete(v92[0]);
  if (SHIBYTE(v95) < 0)
    operator delete(v94[0]);
  if (SHIBYTE(v97) < 0)
    operator delete(v96[0]);
  if (SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  if (SHIBYTE(v103) < 0)
    operator delete(v102[0]);
  v16 = 1;
  if (a2->nodeNr >= 1)
  {
    v17 = 0;
    while (1)
    {
      v18 = a2->nodeTab[v17];
      CG::DisplayListXMLHelper::parseAttributesFromNode((xmlChar *)v102, v18);
      std::string::basic_string[abi:se180100]<0>((char **)&v107, "type");
      v26 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v102, &v107);
      if (SHIBYTE(v107.size.width) < 0)
        operator delete(*(void **)&v107.origin.x);
      if (&v102[1] == v26)
      {
        CGPostError((uint64_t)"%s: Node does not contain \"%s\" attribute", v19, v20, v21, v22, v23, v24, v25, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntries(xmlNodeSetPtr)");
      }
      else
      {
        v27 = a2;
        v28 = v105;
        if (!v105)
          goto LABEL_65;
        v29 = &v105;
        do
        {
          v30 = v29;
          v31 = v28 + 4;
          v32 = std::less<std::string>::operator()[abi:se180100](v28 + 4, v26 + 7);
          v33 = v28 + 1;
          if (!v32)
          {
            v33 = v28;
            v29 = (uint64_t **)v28;
          }
          v28 = (uint64_t *)*v33;
        }
        while (*v33);
        if (v29 == &v105
          || (!v32 ? (v34 = v31) : (v34 = (uint64_t *)(v30 + 4)),
              std::less<std::string>::operator()[abi:se180100](v26 + 7, v34)))
        {
LABEL_65:
          CGPostError((uint64_t)"%s: Invalid value for \"type\" attribute", v19, v20, v21, v22, v23, v24, v25, (char)"BOOL CG::DisplayListXMLDeserializer::parseEntries(xmlNodeSetPtr)");
          a2 = v27;
        }
        else
        {
          switch(*((_DWORD *)v29 + 14))
          {
            case 0:
              v35 = operator new();
              *(_DWORD *)(v35 + 8) &= 0xFFFFFF00;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E1629088;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E16280C8;
              *(_QWORD *)&v107.origin.y = this;
              if (!DisplayListXMLParserEntryImage::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v36, v37, v38, v39, v40))goto LABEL_89;
              goto LABEL_85;
            case 1:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 1;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E1629190;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)(v35 + 208) = 0;
              *(_QWORD *)(v35 + 232) = 0;
              *(_QWORD *)(v35 + 240) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E1628230;
              *(_QWORD *)&v107.origin.y = this;
              v107.size.width = 0.0;
              if (DisplayListXMLParserEntryGlyphs::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v41, v42, v43, v44, v45))
              {
                goto LABEL_85;
              }
              goto LABEL_89;
            case 2:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 2;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E1629050;
              *(_QWORD *)(v35 + 88) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E1628060;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntryPath::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v46, v47, v48, v49, v50))
              {
                goto LABEL_85;
              }
              goto LABEL_89;
            case 3:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 3;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E16290F8;
              *(_QWORD *)(v35 + 136) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E1628128;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntryRects::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v51, v52, v53, v54, v55))
              {
                goto LABEL_85;
              }
              goto LABEL_89;
            case 4:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 4;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E16290C0;
              *(_QWORD *)(v35 + 128) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E16280F8;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntryLines::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v56, v57, v58, v59, v60))
              {
                goto LABEL_85;
              }
              goto LABEL_89;
            case 5:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 5;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E16291F0;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E16282D0;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntry::parseAttributes((uint64_t)&v107, (uint64_t)v102, v35, v61, v62, v63, v64, v65))goto LABEL_85;
              goto LABEL_89;
            case 6:
              v35 = operator new();
              *(_OWORD *)(v35 + 88) = *(_OWORD *)&CGAffineTransformIdentity.a;
              *(_BYTE *)(v35 + 8) = 6;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E16292B8;
              *(_QWORD *)(v35 + 80) = 0;
              *(_OWORD *)(v35 + 104) = *(_OWORD *)&CGAffineTransformIdentity.c;
              *(_OWORD *)(v35 + 120) = *(_OWORD *)&CGAffineTransformIdentity.tx;
              *(_OWORD *)(v35 + 136) = 0u;
              *(_OWORD *)(v35 + 152) = 0u;
              *(_OWORD *)(v35 + 168) = 0u;
              *(_OWORD *)(v35 + 184) = 0u;
              *(_OWORD *)(v35 + 200) = 0u;
              *(_OWORD *)(v35 + 216) = 0u;
              *(_OWORD *)(v35 + 232) = 0u;
              *(_QWORD *)&v107.origin.x = &off_1E1628470;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntryGradient::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v66, v67, v68, v69, v70))goto LABEL_85;
              goto LABEL_89;
            case 7:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 7;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E1629458;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)&v107.origin.x = &off_1E1628748;
              *(_QWORD *)&v107.origin.y = this;
              if (DisplayListXMLParserEntryDisplayList::parseAttributes((uint64_t)&v107, (uint64_t)v102, (const void *)v35, v71, v72, v73, v74, v75))goto LABEL_85;
              goto LABEL_89;
            case 8:
              v35 = operator new();
              *(_BYTE *)(v35 + 8) = 8;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_QWORD *)v35 = &off_1E1629158;
              *(_QWORD *)&v107.origin.x = &off_1E1628200;
              *(_QWORD *)&v107.origin.y = this;
              if (!DisplayListXMLParserEntry::parseAttributes((uint64_t)&v107, (uint64_t)v102, v35, v76, v77, v78, v79, v80))goto LABEL_89;
LABEL_85:
              a2 = v27;
              if (((*(uint64_t (**)(CGRect *, _xmlNode *, uint64_t))(*(_QWORD *)&v107.origin.x + 24))(&v107, v18, v35) & 1) == 0)
              {
LABEL_89:
                (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
LABEL_90:
                v83 = v26 + 4;
                if (*((char *)v26 + 55) < 0)
                  v83 = (_QWORD *)*v83;
                CGPostError((uint64_t)"Failed to parse entry of type: %s", v19, v20, v21, v22, v23, v24, v25, (char)v83);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v102[1]);
                v16 = 0;
                goto LABEL_93;
              }
              v81 = (CG::DisplayList *)*((_QWORD *)this + 2);
              v82 = *(CGSize *)(v35 + 32);
              v107.origin = *(CGPoint *)(v35 + 16);
              v107.size = v82;
              CG::DisplayList::updateBoundingAndTransparentShapes(v81, &v107, *(_DWORD *)(v35 + 8) >> 8);
              CG::DisplayList::appendEntry(*((int64x2_t **)this + 2), v35);
              break;
            default:
              goto LABEL_90;
          }
        }
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v102[1]);
      if (++v17 >= a2->nodeNr)
      {
        v16 = 1;
        break;
      }
    }
  }
LABEL_93:
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy((char *)v105);
  return v16;
}

void sub_184B69C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,_QWORD *a38,uint64_t a39,uint64_t a40,char *a41)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a38);
  std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(a41);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<std::string>::operator()[abi:se180100](v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:se180100](a2, v5 + 4))
    return v2;
  return v5;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:se180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)(v3 + 4), a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:se180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

BOOL DisplayListXMLParserEntryImage::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *ResourceWithAttributeName;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  int v44;
  int v45;
  _OWORD v46[3];

  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v11)
    __cxa_bad_cast();
  v16 = v11;
  ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "image", 1, v12, v13, v14, v15);
  if (!ResourceWithAttributeName)
    return 0;
  if (!v18)
  {
    CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v19, v20, v21, v22, v23, v24, v25, (char)"image");
    return 0;
  }
  *((_QWORD *)v16 + 10) = v18;
  v26 = "ctm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v46)
    || (v34 = v46[1],
        *(_OWORD *)(v16 + 88) = v46[0],
        *(_OWORD *)(v16 + 104) = v34,
        *(_OWORD *)(v16 + 120) = v46[2],
        v45 = 0,
        v26 = "interpolationQuality",
        !CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationQuality", &v45)))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v27, v28, v29, v30, v31, v32, v33, (char)v26);
    return 0;
  }
  *((_DWORD *)v16 + 34) = v45;
  if (CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationMin", &v45))
    *((_DWORD *)v16 + 35) = v45;
  if (CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationMax", &v45))
    *((_DWORD *)v16 + 36) = v45;
  v44 = 0;
  v42 = CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v44);
  if (v42)
    *((_DWORD *)v16 + 37) = v44;
  else
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v35, v36, v37, v38, v39, v40, v41, (char)"renderingIntent");
  return v42;
}

BOOL DisplayListXMLParserEntryGlyphs::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *ResourceWithAttributeName;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int128 v27;
  __int128 v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  const char *v44;
  const char *v46;
  uint64_t v47;
  char v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v11)
    __cxa_bad_cast();
  v16 = v11;
  ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "font", 1, v12, v13, v14, v15);
  if (!ResourceWithAttributeName)
    return 0;
  if (!v18)
  {
    v46 = "font";
    v44 = "Entry state for attribute: %s is of the wrong class";
    goto LABEL_21;
  }
  *((_QWORD *)v16 + 10) = v18;
  v26 = "ctm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)&v53))
    goto LABEL_18;
  v27 = v54;
  *(_OWORD *)(v16 + 88) = v53;
  *(_OWORD *)(v16 + 104) = v27;
  *(_OWORD *)(v16 + 120) = v55;
  v26 = "ftm";
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ftm", (uint64_t)&v53))
    goto LABEL_18;
  v28 = v54;
  *(_OWORD *)(v16 + 136) = v53;
  *(_OWORD *)(v16 + 152) = v28;
  *(_OWORD *)(v16 + 168) = v55;
  v52 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "scale", "%lg", v21, v22, v23, v24, v25, (uint64_t)&v52) != 1)
  {
    v44 = "Failed to parse \"scale\" attribute";
    goto LABEL_21;
  }
  *((_QWORD *)v16 + 23) = v52;
  v26 = "dilation";
  if (!CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "dilation", &v51, v21, v22, v23, v24, v25))
    goto LABEL_18;
  *((_OWORD *)v16 + 12) = v51;
  v29 = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "fontSmoothingBGColor", 0, v22, v23, v24, v25);
  if (v29)
  v50 = 0;
  if (!CG::DisplayListXMLHelper::parseTextDrawingModeFromAttributes(a2, &v50))
  {
    v46 = "textDrawingMode";
    goto LABEL_19;
  }
  *((_DWORD *)v16 + 54) = v50;
  v49 = 0;
  v26 = "fontRenderingStyle";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "fontRenderingStyle", "0x%X", v21, v22, v23, v24, v25, (uint64_t)&v49) != 1)
  {
LABEL_18:
    LOBYTE(v46) = (_BYTE)v26;
LABEL_19:
    v44 = "Failed to parse \"%s\" attribute";
LABEL_21:
    CGPostError((uint64_t)v44, v19, v20, v21, v22, v23, v24, v25, (char)v46);
    return 0;
  }
  *((_DWORD *)v16 + 55) = v49;
  v48 = 0;
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "shouldDrawBMRuns", &v48))
    v16[224] = v48;
  v47 = 0;
  v35 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v30, v31, v32, v33, v34, (uint64_t)&v47);
  v43 = v35 == 1;
  if (v35 == 1)
    *(_QWORD *)(a1 + 16) = v47;
  else
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v36, v37, v38, v39, v40, v41, v42, (char)"count");
  return v43;
}

BOOL DisplayListXMLParserEntryPath::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  __int128 v27;
  _OWORD v29[3];
  char v30;
  int v31;

  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v10)
    __cxa_bad_cast();
  v11 = v10;
  v31 = 0;
  if (!CG::DisplayListXMLHelper::parsePathDrawingModeFromAttributes(a2, &v31))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v12, v13, v14, v15, v16, v17, v18, (char)"drawingMode");
    return 0;
  }
  v11[20] = v31;
  v30 = 0;
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "direct", &v30))
    *((_BYTE *)v11 + 84) = v30;
  v26 = CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v29);
  if (v26)
  {
    v27 = v29[1];
    *((_OWORD *)v11 + 6) = v29[0];
    *((_OWORD *)v11 + 7) = v27;
    *((_OWORD *)v11 + 8) = v29[2];
  }
  else
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v19, v20, v21, v22, v23, v24, v25, (char)"ctm");
  }
  return v26;
}

BOOL DisplayListXMLParserEntryRects::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v38;
  _OWORD v39[3];
  int v40;

  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v11)
    __cxa_bad_cast();
  v12 = v11;
  v40 = 0;
  if (!CG::DisplayListXMLHelper::parsePathDrawingModeFromAttributes(a2, &v40))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)"drawingMode");
    return 0;
  }
  *((_DWORD *)v12 + 20) = v40;
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v39))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)"ctm");
    return 0;
  }
  v27 = v39[1];
  *(_OWORD *)(v12 + 88) = v39[0];
  *(_OWORD *)(v12 + 104) = v27;
  *(_OWORD *)(v12 + 120) = v39[2];
  v38 = 0;
  v28 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v22, v23, v24, v25, v26, (uint64_t)&v38);
  v36 = v28 == 1;
  if (v28 == 1)
    *(_QWORD *)(a1 + 16) = v38;
  else
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v29, v30, v31, v32, v33, v34, v35, (char)"count");
  return v36;
}

BOOL DisplayListXMLParserEntryLines::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v31;
  _OWORD v32[3];

  if (!DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  if (!v11)
    __cxa_bad_cast();
  v12 = v11;
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v32))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)"ctm");
    return 0;
  }
  v20 = v32[1];
  v12[5] = v32[0];
  v12[6] = v20;
  v12[7] = v32[2];
  v31 = 0;
  v21 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v15, v16, v17, v18, v19, (uint64_t)&v31);
  v29 = v21 == 1;
  if (v21 == 1)
    *(_QWORD *)(a1 + 16) = v31;
  else
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v22, v23, v24, v25, v26, v27, v28, (char)"count");
  return v29;
}

uint64_t DisplayListXMLParserEntry::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  const void *EntryStateWithAttributeName;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v60;
  _OWORD v61[2];
  int v62;

  v62 = 0;
  v11 = "flags";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flags", "0x%X", a4, a5, a6, a7, a8, (uint64_t)&v62) != 1
    || (*(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(a3 + 8) | (v62 << 8),
        v11 = "boundingBox",
        (CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "boundingBox", (uint64_t)v61) & 1) == 0))
  {
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v12, v13, v14, v15, v16, v17, v18, (char)v11);
    return 0;
  }
  v19 = v61[1];
  *(_OWORD *)(a3 + 16) = v61[0];
  *(_OWORD *)(a3 + 32) = v19;
  EntryStateWithAttributeName = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "drawState", 0, v15, v16, v17, v18);
  if (EntryStateWithAttributeName)
  {
    if (v27)
      goto LABEL_7;
    CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v28, v29, v30, v31, v32, v33, v34, (char)"drawState");
  }
  CGLog(1, (uint64_t)"entry has NULL drawing state", v21, v22, v23, v24, v25, v26, v60);
  v27 = 0;
LABEL_7:
  *(_QWORD *)(a3 + 48) = v27;
  v35 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "fillState", 1, v31, v32, v33, v34);
  if (v35)
  {
    if (!v35)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v40, v41, v42, v36, v37, v38, v39, (char)"fillState");
      v35 = 0;
    }
  }
  *(_QWORD *)(a3 + 56) = v35;
  v43 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "strokeState", 1, v36, v37, v38, v39);
  if (v43)
  {
    if (!v43)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v48, v49, v50, v44, v45, v46, v47, (char)"strokeState");
      v43 = 0;
    }
  }
  *(_QWORD *)(a3 + 64) = v43;
  v51 = (const void *)DisplayListXMLParserEntry::_getEntryStateWithAttributeName(a1, a2, "patternState", 1, v44, v45, v46, v47);
  if (v51)
  {
    if (!v51)
    {
      CGPostError((uint64_t)"Entry state for attribute: %s is of the wrong class", v52, v53, v54, v55, v56, v57, v58, (char)"patternState");
      v51 = 0;
    }
  }
  *(_QWORD *)(a3 + 72) = v51;
  return 1;
}

uint64_t DisplayListXMLParserEntryGradient::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  const void *ResourceWithAttributeName;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  _OWORD v60[3];

  result = DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    if (!v12)
      __cxa_bad_cast();
    v17 = v12;
    v18 = "gradient";
    ResourceWithAttributeName = (const void *)DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "gradient", 1, v13, v14, v15, v16);
    if (ResourceWithAttributeName)
    {
      if (!v27)
      {
        CGPostError((uint64_t)"Entry state for attribute: \"%s\" is of the wrong class", v28, v29, v30, v31, v32, v33, v34, (char)"gradient");
        return 0;
      }
      *((_QWORD *)v17 + 10) = v27;
      v18 = "ctm";
      if (CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v60))
      {
        v35 = v60[1];
        *(_OWORD *)(v17 + 88) = v60[0];
        *(_OWORD *)(v17 + 104) = v35;
        *(_OWORD *)(v17 + 120) = v60[2];
        v59 = 0;
        if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "options", "%d", v22, v23, v24, v25, v26, (uint64_t)&v59))
        {
          *((_DWORD *)v17 + 35) = v59;
          v36 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "gradientType");
          if (!v36)
          {
            v55 = "type";
LABEL_27:
            CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, (char)v55);
            return 0;
          }
          v37 = v36;
          v57 = 0;
          if (!strcmp(v36, "linear"))
          {
            *((_DWORD *)v17 + 34) = 1;
            v18 = "startPt";
            if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "startPt", &v58, v38, v39, v40, v41, v42))
            {
              *((_OWORD *)v17 + 9) = v58;
              v18 = "endPt";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "endPt", &v58, v22, v23, v24, v25, v26))
              {
                *((_OWORD *)v17 + 10) = v58;
                return 1;
              }
            }
          }
          else
          {
            if (strcmp(v37, "radial"))
            {
              if (strcmp(v37, "conic"))
              {
                CGPostError((uint64_t)"%s: Invalid gradient type: %s", v48, v49, v50, v51, v52, v53, v54, (char)"virtual BOOL DisplayListXMLParserEntryGradient::parseAttributes(const DLXMLAttributes &, DisplayListEntry &)");
                return 0;
              }
              *((_DWORD *)v17 + 34) = 3;
              v18 = "center";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "center", &v58, v50, v51, v52, v53, v54))
              {
                *((_OWORD *)v17 + 14) = v58;
                v56 = 0;
                v18 = "angle";
                if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "angle", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v56))
                {
                  *((_QWORD *)v17 + 30) = v56;
                  return 1;
                }
              }
              goto LABEL_26;
            }
            *((_DWORD *)v17 + 34) = 2;
            v18 = "startCenter";
            if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "startCenter", &v58, v43, v44, v45, v46, v47))
            {
              *((_OWORD *)v17 + 11) = v58;
              v18 = "endCenter";
              if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "endCenter", &v58, v22, v23, v24, v25, v26))
              {
                *((_OWORD *)v17 + 12) = v58;
                v18 = "startRadius";
                if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "startRadius", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v57))
                {
                  *((_QWORD *)v17 + 26) = v57;
                  v18 = "endRadius";
                  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "endRadius", "%lg", v22, v23, v24, v25, v26, (uint64_t)&v57))
                  {
                    *((_QWORD *)v17 + 27) = v57;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    LOBYTE(v55) = (_BYTE)v18;
    goto LABEL_27;
  }
  return result;
}

uint64_t DisplayListXMLParserEntryDisplayList::parseAttributes(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _OWORD v33[3];

  result = DisplayListXMLParserEntry::parseAttributes(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    if (!v12)
      __cxa_bad_cast();
    v13 = v12;
    v14 = "ctm";
    if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "ctm", (uint64_t)v33))
      goto LABEL_9;
    v22 = v33[1];
    *(_OWORD *)(v13 + 88) = v33[0];
    *(_OWORD *)(v13 + 104) = v22;
    *(_OWORD *)(v13 + 120) = v33[2];
    v32 = 0;
    v14 = "interpolationQuality";
    if (!CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(a2, "interpolationQuality", &v32))
      goto LABEL_9;
    *((_DWORD *)v13 + 34) = v32;
    v31 = 0;
    v14 = "renderingIntent";
    if (CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v31))
    {
      *((_DWORD *)v13 + 35) = v31;
      result = DisplayListXMLParserEntry::getResourceWithAttributeName(a1, a2, "displayList", 1, v18, v19, v20, v21);
      if (!result)
        return result;
      if (v23)
      {
        *((_QWORD *)v13 + 10) = v23;
        return 1;
      }
      CGPostError((uint64_t)"Resource for attribute: %s is of the wrong class", v24, v25, v26, v27, v28, v29, v30, (char)"displayList");
    }
    else
    {
LABEL_9:
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v15, v16, v17, v18, v19, v20, v21, (char)v14);
    }
    return 0;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,CGDisplayListEntryType>,std::__map_value_compare<std::string,std::__value_type<std::string,CGDisplayListEntryType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CGDisplayListEntryType>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void DisplayListXMLParserEntryAction::~DisplayListXMLParserEntryAction(DisplayListXMLParserEntryAction *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserEntry::parseChildElements()
{
  return 1;
}

uint64_t CG::DisplayListEntryAction::getSize(CG::DisplayListEntryAction *this)
{
  return 96;
}

uint64_t CG::DisplayListEntryAction::_equal_to(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*a2 - 8) + 8)))return 0;
  v6 = a1[10];
  v7 = a2[10];
  if (v6)
  {
    if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, a3))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[11];
  v9 = a2[11];
  if (v8)
  {
    if (v9 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, a3))
      return CG::DisplayListEntry::_equal_to((uint64_t)a1, (uint64_t)a2, a3);
  }
  else if (!v9)
  {
    return CG::DisplayListEntry::_equal_to((uint64_t)a1, (uint64_t)a2, a3);
  }
  return 0;
}

unsigned int *CG::DisplayListEntry::_hash(uint64_t a1, unsigned int *a2)
{
  int __src;

  __src = *(char *)(a1 + 8);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 8) >> 8;
  XXH64_update(a2, (char *)&__src, 4uLL);
  return XXH64_update(a2, (char *)(a1 + 16), 0x20uLL);
}

uint64_t CG::DisplayListEntry::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
    result = CGRectEqualToRect(*(CGRect *)(a1 + 16), *(CGRect *)(a2 + 16));
    if (!(_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a2 + 48);
    if ((v7 != 0) == (v8 == 0))
      return 0;
    if (v7)
    {
      if (v8)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8, a3);
        if (!(_DWORD)result)
          return result;
      }
    }
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a2 + 56);
    if ((v9 != 0) == (v10 == 0))
      return 0;
    if (v9)
    {
      if (v10)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10, a3);
        if (!(_DWORD)result)
          return result;
      }
    }
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a2 + 64);
    if ((v11 != 0) == (v12 == 0))
      return 0;
    if (v11)
    {
      if (v12)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v12, a3);
        if (!(_DWORD)result)
          return result;
      }
    }
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a2 + 72);
    if ((v13 != 0) == (v14 == 0))
      return 0;
    if (!v13)
      return 1;
    if (!v14)
      return 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v14, a3);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t DisplayListXMLParserEntry::getResourceWithAttributeName(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t result;
  unint64_t v27;

  v8 = a4;
  v9 = (char)a3;
  v27 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, a3, "%llu", a4, a5, a6, a7, a8, (uint64_t)&v27) != 1)
  {
    if (v8)
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v11, v12, v13, v14, v15, v16, v17, v9);
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD **)(v18 + 40);
  v19 = (_QWORD *)(v18 + 40);
  v20 = v21;
  if (!v21)
    goto LABEL_13;
  v22 = v19;
  do
  {
    v23 = v20[4];
    v24 = v23 >= v27;
    if (v23 >= v27)
      v25 = v20;
    else
      v25 = v20 + 1;
    if (v24)
      v22 = v20;
    v20 = (_QWORD *)*v25;
  }
  while (*v25);
  if (v22 != v19 && v22[4] <= v27)
  {
    result = v22[5];
    if (result)
      return result;
  }
  else
  {
LABEL_13:
    result = 0;
  }
  if (v8)
  {
    CGPostError((uint64_t)"resource for id: %llu is NULL", v11, v12, v13, v14, v15, v16, v17, v27);
    return 0;
  }
  return result;
}

void DisplayListXMLParserEntryDisplayList::~DisplayListXMLParserEntryDisplayList(DisplayListXMLParserEntryDisplayList *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListEntryDisplayList::getSize(CG::DisplayListEntryDisplayList *this)
{
  return 144;
}

uint64_t CG::DisplayListEntryDisplayList::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    __cxa_bad_typeid();
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))&& *(double *)(a1 + 88) == *(double *)(a2 + 88)&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 128) == *(double *)(a2 + 128)&& *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)&& *(_DWORD *)(a1 + 140) == *(_DWORD *)(a2 + 140))
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a2 + 80);
    if (v6)
    {
      if (v7 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, a3))
        return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
    else if (!v7)
    {
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
  }
  return 0;
}

unsigned int *CG::DisplayListEntryDisplayList::_hash(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t __src;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
    v6 = XXH64_digest(*(_QWORD **)(v5 + 136));
  else
    v6 = 0;
  __src = v6;
  XXH64_update(a2, (char *)&__src, 8uLL);
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 136), 4uLL);
  XXH64_update(a2, (char *)(a1 + 136), 4uLL);
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryGradient::~DisplayListXMLParserEntryGradient(DisplayListXMLParserEntryGradient *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListEntryGradient::getSize(CG::DisplayListEntryGradient *this)
{
  return 248;
}

uint64_t CG::DisplayListEntryGradient::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v12[4];
  double *v13[4];

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8)))return 0;
  if (*(double *)(a1 + 88) != *(double *)(a2 + 88))
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0)return 0;
  if (*(double *)(a1 + 128) != *(double *)(a2 + 128))
    return 0;
  v6 = *(_DWORD *)(a1 + 136);
  if (v6 != *(_DWORD *)(a2 + 136) || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
    return 0;
  switch(v6)
  {
    case 1:
      if (*(double *)(a1 + 144) != *(double *)(a2 + 144)
        || *(double *)(a1 + 152) != *(double *)(a2 + 152)
        || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      {
        return 0;
      }
      v7 = *(double *)(a1 + 168);
      v8 = *(double *)(a2 + 168);
LABEL_20:
      if (v7 != v8)
        return 0;
      break;
    case 2:
      v13[0] = (double *)(a1 + 176);
      v13[1] = (double *)(a1 + 192);
      v13[2] = (double *)(a1 + 208);
      v13[3] = (double *)(a1 + 216);
      v12[0] = (double *)(a2 + 176);
      v12[1] = (double *)(a2 + 192);
      v12[2] = (double *)(a2 + 208);
      v12[3] = (double *)(a2 + 216);
      if (!std::__tuple_equal<4ul>::operator()[abi:se180100]<std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>,std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>>(v13, v12))return 0;
      break;
    case 3:
      if (*(double *)(a1 + 224) != *(double *)(a2 + 224) || *(double *)(a1 + 232) != *(double *)(a2 + 232))
        return 0;
      v7 = *(double *)(a1 + 240);
      v8 = *(double *)(a2 + 240);
      goto LABEL_20;
  }
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    if (v10 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, a3))
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
  }
  else if (!v10)
  {
    return CG::DisplayListEntry::_equal_to(a1, a2, a3);
  }
  return 0;
}

unsigned int *CG::DisplayListEntryGradient::_hash(uint64_t a1, unsigned int *a2)
{
  int v4;
  char *v5;
  unsigned int *v6;
  size_t v7;
  int __src;

  __src = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16) + 16);
  XXH64_update(a2, (char *)&__src, 4uLL);
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 136), 4uLL);
  XXH64_update(a2, (char *)(a1 + 140), 4uLL);
  v4 = *(_DWORD *)(a1 + 136);
  switch(v4)
  {
    case 3:
      XXH64_update(a2, (char *)(a1 + 224), 0x10uLL);
      v5 = (char *)(a1 + 240);
LABEL_7:
      v6 = a2;
      v7 = 8;
      goto LABEL_8;
    case 2:
      XXH64_update(a2, (char *)(a1 + 176), 0x10uLL);
      XXH64_update(a2, (char *)(a1 + 192), 0x10uLL);
      XXH64_update(a2, (char *)(a1 + 208), 8uLL);
      v5 = (char *)(a1 + 216);
      goto LABEL_7;
    case 1:
      XXH64_update(a2, (char *)(a1 + 144), 0x10uLL);
      v5 = (char *)(a1 + 160);
      v6 = a2;
      v7 = 16;
LABEL_8:
      XXH64_update(v6, v5, v7);
      break;
  }
  return CG::DisplayListEntry::_hash(a1, a2);
}

BOOL std::__tuple_equal<4ul>::operator()[abi:se180100]<std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>,std::tuple<CGPoint const&,CGPoint const&,double const&,double const&>>(double **a1, double **a2)
{
  BOOL v2;
  double *v3;
  double *v4;
  BOOL v5;

  v2 = **a1 == **a2 && (*a1)[1] == (*a2)[1];
  if (v2 && ((v3 = a1[1], v4 = a2[1], *v3 == *v4) ? (v5 = v3[1] == v4[1]) : (v5 = 0), v5 && *a1[2] == *a2[2]))
    return *a1[3] == *a2[3];
  else
    return 0;
}

uint64_t DisplayListXMLParserEntry::_getEntryStateWithAttributeName(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t result;
  unint64_t v27;

  v8 = a4;
  v9 = (char)a3;
  v27 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, a3, "%llu", a4, a5, a6, a7, a8, (uint64_t)&v27) != 1)
  {
    if ((v8 & 1) == 0)
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v11, v12, v13, v14, v15, v16, v17, v9);
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD **)(v18 + 64);
  v19 = (_QWORD *)(v18 + 64);
  v20 = v21;
  if (!v21)
    goto LABEL_14;
  v22 = v19;
  do
  {
    v23 = v20[4];
    v24 = v23 >= v27;
    if (v23 >= v27)
      v25 = v20;
    else
      v25 = v20 + 1;
    if (v24)
      v22 = v20;
    v20 = (_QWORD *)*v25;
  }
  while (*v25);
  if (v22 == v19 || v22[4] > v27 || (result = v22[5]) == 0)
  {
LABEL_14:
    CGPostError((uint64_t)"entryState for id: %llu is NULL", v11, v12, v13, v14, v15, v16, v17, v27);
    return 0;
  }
  return result;
}

void DisplayListXMLParserEntryShading::~DisplayListXMLParserEntryShading(DisplayListXMLParserEntryShading *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListEntryShading::getSize(CG::DisplayListEntryShading *this)
{
  return 144;
}

uint64_t CG::DisplayListEntryShading::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    __cxa_bad_typeid();
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))&& *(double *)(a1 + 88) == *(double *)(a2 + 88)&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 128) == *(double *)(a2 + 128)&& *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)&& *(_DWORD *)(a1 + 140) == *(_DWORD *)(a2 + 140))
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a2 + 80);
    if (v6)
    {
      if (v7 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, a3))
        return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
    else if (!v7)
    {
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
  }
  return 0;
}

unsigned int *CG::DisplayListEntryShading::_hash(uint64_t a1, unsigned int *a2)
{
  int __src;

  __src = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16) + 16);
  XXH64_update(a2, (char *)&__src, 4uLL);
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 136), 4uLL);
  XXH64_update(a2, (char *)(a1 + 140), 4uLL);
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryLines::~DisplayListXMLParserEntryLines(DisplayListXMLParserEntryLines *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLParserEntryLines::parseChildElements(uint64_t a1, uint64_t a2, void *lpsrc)
{
  CG::DisplayListEntryLines *v5;
  CG::DisplayListEntryLines *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(xmlChar *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  xmlChar *String;
  xmlChar *v27;
  uint64_t v28;
  _QWORD *p_x;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v14 = (CGPoint *)malloc_type_malloc(16 * *(_QWORD *)(a1 + 16), 0x705560E0uLL);
  v15 = *(_QWORD *)(a2 + 24);
  if (!v15)
    goto LABEL_16;
  while (xmlStrcmp(*(const xmlChar **)(v15 + 16), (const xmlChar *)"lines"))
  {
    v15 = *(_QWORD *)(v15 + 48);
    if (!v15)
      goto LABEL_16;
  }
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  v17 = 0;
  v18 = (void (**)(xmlChar *))MEMORY[0x1E0DE8D30];
  while (*(_DWORD *)(v16 + 8) != 1)
  {
LABEL_14:
    v16 = *(_QWORD *)(v16 + 48);
    if (!v16)
      goto LABEL_17;
  }
  if (!xmlStrcmp(*(const xmlChar **)(v16 + 16), (const xmlChar *)"line"))
  {
    String = xmlNodeListGetString(*(xmlDocPtr *)(v16 + 64), *(const xmlNode **)(v16 + 24), 1);
    if (String)
    {
      v27 = String;
      v32 = 0;
      v33 = 0;
      if (sscanf((const char *)String, "{%lg, %lg}", &v33, &v32) == 2)
      {
        v28 = v32;
        p_x = (_QWORD *)&v14[v17++].x;
        *p_x = v33;
        p_x[1] = v28;
      }
      (*v18)(v27);
    }
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"%s\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, (char)"line");
LABEL_17:
  v30 = *(_QWORD *)(a1 + 16);
  if (v17 == v30)
    CG::DisplayListEntryLines::setPoints(v6, v14, v17);
  else
    CGPostError((uint64_t)"Failed to parse expected number of lines. Expected %zu, got %zu", v7, v8, v9, v10, v11, v12, v13, v30);
  free(v14);
  return v17 == v30;
}

CGPoint *CG::DisplayListEntryLines::setPoints(CG::DisplayListEntryLines *this, const CGPoint *a2, uint64_t a3)
{
  CGPoint *result;

  result = (CGPoint *)*((_QWORD *)this + 16);
  if (result != a2)
  {
    free(result);
    *((_QWORD *)this + 16) = 0;
    result = (CGPoint *)malloc_type_malloc(16 * a3, 0x705560E0uLL);
    *((_QWORD *)this + 16) = result;
    if (result)
      result = (CGPoint *)memcpy(result, a2, 16 * a3);
    *((_QWORD *)this + 17) = a3;
  }
  return result;
}

void CG::DisplayListEntryLines::~DisplayListEntryLines(void **this)
{
  *this = &off_1E16290C0;
  free(this[16]);
}

{
  *this = &off_1E16290C0;
  free(this[16]);
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListEntryLines::getSize(CG::DisplayListEntryLines *this)
{
  return 144;
}

uint64_t CG::DisplayListEntryLines::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  const void *v8;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8)))return 0;
  if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)))), 0xFuLL))) & 1) == 0)return 0;
  if (*(double *)(a1 + 120) != *(double *)(a2 + 120))
    return 0;
  v6 = *(_QWORD *)(a1 + 136);
  if (v6 != *(_QWORD *)(a2 + 136))
    return 0;
  v7 = *(const void **)(a1 + 128);
  v8 = *(const void **)(a2 + 128);
  if (v7)
  {
    if (!v8 || memcmp(v7, v8, 16 * v6))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

unsigned int *CG::DisplayListEntryLines::_hash(uint64_t a1, unsigned int *a2)
{
  char *v4;

  XXH64_update(a2, (char *)(a1 + 80), 0x30uLL);
  v4 = *(char **)(a1 + 128);
  if (v4)
    XXH64_update(a2, v4, 16 * *(_QWORD *)(a1 + 136));
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryRects::~DisplayListXMLParserEntryRects(DisplayListXMLParserEntryRects *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLParserEntryRects::parseChildElements(uint64_t a1, uint64_t a2, void *lpsrc)
{
  CG::DisplayListEntryRects *v5;
  CG::DisplayListEntryRects *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGRect *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(xmlChar *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  xmlChar *String;
  xmlChar *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *p_x;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v14 = (CGRect *)malloc_type_malloc(32 * *(_QWORD *)(a1 + 16), 0x705560E0uLL);
  v15 = *(_QWORD *)(a2 + 24);
  if (!v15)
    goto LABEL_16;
  while (xmlStrcmp(*(const xmlChar **)(v15 + 16), (const xmlChar *)"rects"))
  {
    v15 = *(_QWORD *)(v15 + 48);
    if (!v15)
      goto LABEL_16;
  }
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  v17 = 0;
  v18 = (void (**)(xmlChar *))MEMORY[0x1E0DE8D30];
  while (*(_DWORD *)(v16 + 8) != 1)
  {
LABEL_14:
    v16 = *(_QWORD *)(v16 + 48);
    if (!v16)
      goto LABEL_17;
  }
  if (!xmlStrcmp(*(const xmlChar **)(v16 + 16), (const xmlChar *)"rect"))
  {
    String = xmlNodeListGetString(*(xmlDocPtr *)(v16 + 64), *(const xmlNode **)(v16 + 24), 1);
    if (String)
    {
      v27 = String;
      v36 = 0;
      v37 = 0;
      v34 = 0;
      v35 = 0;
      if (sscanf((const char *)String, "{%lg, %lg}, {%lg, %lg}", &v37, &v36, &v35, &v34) == 4)
      {
        v28 = v36;
        v30 = v34;
        v29 = v35;
        p_x = (_QWORD *)&v14[v17++].origin.x;
        *p_x = v37;
        p_x[1] = v28;
        p_x[2] = v29;
        p_x[3] = v30;
      }
      (*v18)(v27);
    }
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"rect\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(v16 + 16));
LABEL_17:
  v32 = *(_QWORD *)(a1 + 16);
  if (v17 == v32)
    CG::DisplayListEntryRects::setRects(v6, v14, v17);
  else
    CGPostError((uint64_t)"Failed to parse expected number of rects. Expected %zu, got %zu", v7, v8, v9, v10, v11, v12, v13, v32);
  free(v14);
  return v17 == v32;
}

uint64_t CG::DisplayListEntryRects::getSize(CG::DisplayListEntryRects *this)
{
  return 152;
}

uint64_t CG::DisplayListEntryRects::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  const void *v8;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8)))return 0;
  if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
    return 0;
  v6 = *(_QWORD *)(a1 + 144);
  if (v6 != *(_QWORD *)(a2 + 144)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128))
  {
    return 0;
  }
  v7 = *(const void **)(a1 + 136);
  v8 = *(const void **)(a2 + 136);
  if (v7)
  {
    if (!v8 || memcmp(v7, v8, 32 * v6))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

unsigned int *CG::DisplayListEntryRects::_hash(uint64_t a1, unsigned int *a2)
{
  char *v4;

  XXH64_update(a2, (char *)(a1 + 80), 4uLL);
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  v4 = *(char **)(a1 + 136);
  if (v4)
    XXH64_update(a2, v4, 32 * *(_QWORD *)(a1 + 144));
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryPath::~DisplayListXMLParserEntryPath(DisplayListXMLParserEntryPath *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserEntryPath::parseChildElements(int a1, uint64_t a2, void *lpsrc)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _xmlNode *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (!v4)
    __cxa_bad_cast();
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = v4;
    while (xmlStrcmp(*(const xmlChar **)(v5 + 16), (const xmlChar *)"cgpath"))
    {
      v5 = *(_QWORD *)(v5 + 48);
      if (!v5)
        return 1;
    }
    v8 = (const void *)CG::DisplayListXMLHelper::parseCGPathFromNode((CG::DisplayListXMLHelper *)v5, v7);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    v10 = (const void *)v6[11];
    v6[11] = v9;
    if (v10)
      CFRelease(v10);
    if (v9)
      CFRelease(v9);
  }
  return 1;
}

uint64_t CG::DisplayListEntryPath::getSize(CG::DisplayListEntryPath *this)
{
  return 144;
}

uint64_t CG::DisplayListEntryPath::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const CGPath *v6;
  const CGPath *v7;

  if (!a1)
    __cxa_bad_typeid();
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))&& *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)&& *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(a2 + 84)&& *(double *)(a1 + 96) == *(double *)(a2 + 96)&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a2 + 120)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 136) == *(double *)(a2 + 136))
  {
    v6 = *(const CGPath **)(a1 + 88);
    v7 = *(const CGPath **)(a2 + 88);
    if (v6)
    {
      if (v7 && CGPathEqualToPath(v6, v7))
        return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
    else if (!v7)
    {
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
  }
  return 0;
}

unsigned int *CG::DisplayListEntryPath::_hash(uint64_t a1, unsigned int *a2)
{
  unint64_t __src;

  __src = CGPathGetNumberOfElements(*(char **)(a1 + 88));
  XXH64_update(a2, (char *)&__src, 8uLL);
  XXH64_update(a2, (char *)(a1 + 96), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 80), 4uLL);
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryGlyphs::~DisplayListXMLParserEntryGlyphs(DisplayListXMLParserEntryGlyphs *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLParserEntryGlyphs::parseChildElements(uint64_t a1, uint64_t a2, void *lpsrc)
{
  CG::DisplayListEntryGlyphs *v5;
  CG::DisplayListEntryGlyphs *v6;
  CGPoint *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v38;
  CGPoint v39;
  xmlChar v40[8];
  _QWORD *v41;

  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v7 = (CGPoint *)malloc_type_malloc(16 * *(_QWORD *)(a1 + 16), 0x705560E0uLL);
  v15 = (unsigned __int16 *)malloc_type_malloc(2 * *(_QWORD *)(a1 + 16), 0x705560E0uLL);
  v16 = *(_QWORD *)(a2 + 24);
  if (!v16)
    goto LABEL_16;
  while (xmlStrcmp(*(const xmlChar **)(v16 + 16), (const xmlChar *)"glyphs"))
  {
    v16 = *(_QWORD *)(v16 + 48);
    if (!v16)
      goto LABEL_16;
  }
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
  {
LABEL_16:
    v18 = 0;
    goto LABEL_17;
  }
  v18 = 0;
  while (*(_DWORD *)(v17 + 8) != 1)
  {
LABEL_14:
    v17 = *(_QWORD *)(v17 + 48);
    if (!v17)
      goto LABEL_17;
  }
  if (!xmlStrcmp(*(const xmlChar **)(v17 + 16), (const xmlChar *)"glyph"))
  {
    CG::DisplayListXMLHelper::parseAttributesFromNode(v40, (_xmlNode *)v17);
    v38 = 0;
    if (CG::DisplayListXMLHelper::parsePointFromAttributes((uint64_t)v40, "position", &v39, v26, v27, v28, v29, v30)
      && CG::DisplayListXMLHelper::parseFormatFromAttributes((uint64_t)v40, "glyph", "%hd", v31, v32, v33, v34, v35, (uint64_t)&v38) == 1)
    {
      v7[v18] = v39;
      v15[v18++] = v38;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v41);
    goto LABEL_14;
  }
  CGPostError((uint64_t)"Unexpected child node name. Expected \"glyph\", got \"%s\"", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(v17 + 16));
LABEL_17:
  v36 = *(_QWORD *)(a1 + 16);
  if (v18 == v36)
    CG::DisplayListEntryGlyphs::setGlyphsAndPositions(v6, v15, v7, v18);
  else
    CGPostError((uint64_t)"Failed to parse expected number of glyphs. Expected %zu, got %zu", v8, v9, v10, v11, v12, v13, v14, v36);
  free(v15);
  free(v7);
  return v18 == v36;
}

void sub_184B6C458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayListEntryGlyphs::getSize(CG::DisplayListEntryGlyphs *this)
{
  return 256;
}

uint64_t CG::DisplayListEntryGlyphs::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))|| *(double *)(a1 + 88) != *(double *)(a2 + 88)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 128) != *(double *)(a2 + 128)|| *(double *)(a1 + 136) != *(double *)(a2 + 136)|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 144), *(float64x2_t *)(a2 + 144)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 160), *(float64x2_t *)(a2 + 160)))), 0xFuLL))) & 1) == 0
    || *(double *)(a1 + 176) != *(double *)(a2 + 176)
    || *(double *)(a1 + 184) != *(double *)(a2 + 184)
    || *(double *)(a1 + 192) != *(double *)(a2 + 192)
    || *(double *)(a1 + 200) != *(double *)(a2 + 200)
    || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)
    || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)
    || *(unsigned __int8 *)(a1 + 224) != *(unsigned __int8 *)(a2 + 224)
    || *(_QWORD *)(a1 + 248) != *(_QWORD *)(a2 + 248))
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a2 + 80);
  if (v6)
  {
    if (!v7 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, a3))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)(a2 + 208);
  if (v8)
  {
    if (!v9 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, a3))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(const void **)(a1 + 232);
  v11 = *(const void **)(a2 + 232);
  if (v10)
  {
    if (!v11 || memcmp(v10, v11, 2 * *(_QWORD *)(a1 + 248)))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(const void **)(a1 + 240);
  v13 = *(const void **)(a2 + 240);
  if (!v12)
  {
    if (!v13)
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    return 0;
  }
  if (!v13 || memcmp(v12, v13, 16 * *(_QWORD *)(a1 + 248)))
    return 0;
  return CG::DisplayListEntry::_equal_to(a1, a2, a3);
}

unsigned int *CG::DisplayListEntryGlyphs::_hash(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  size_t v8;
  char *v9;
  char *v10;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v5 + 16) + 144))(*(_QWORD *)(v5 + 112));
      if (v6)
      {
        v7 = (char *)v6;
        v8 = strlen(v6);
        XXH64_update(a2, v7, v8);
      }
    }
  }
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 136), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 184), 8uLL);
  XXH64_update(a2, (char *)(a1 + 192), 0x10uLL);
  XXH64_update(a2, (char *)(a1 + 216), 4uLL);
  XXH64_update(a2, (char *)(a1 + 220), 4uLL);
  v9 = *(char **)(a1 + 232);
  if (v9)
    XXH64_update(a2, v9, 2 * *(_QWORD *)(a1 + 248));
  v10 = *(char **)(a1 + 240);
  if (v10)
    XXH64_update(a2, v10, 16 * *(_QWORD *)(a1 + 248));
  return CG::DisplayListEntry::_hash(a1, a2);
}

void DisplayListXMLParserEntryImage::~DisplayListXMLParserEntryImage(DisplayListXMLParserEntryImage *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListEntryImage::getSize(CG::DisplayListEntryImage *this)
{
  return 160;
}

uint64_t CG::DisplayListEntryImage::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    __cxa_bad_typeid();
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))&& *(double *)(a1 + 88) == *(double *)(a2 + 88)&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 128) == *(double *)(a2 + 128)&& *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)&& *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144)&& *(_DWORD *)(a1 + 148) == *(_DWORD *)(a2 + 148)&& *(float *)(a1 + 152) == *(float *)(a2 + 152))
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a2 + 80);
    if (v6)
    {
      if (v7 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7, a3))
        return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
    else if (!v7)
    {
      return CG::DisplayListEntry::_equal_to(a1, a2, a3);
    }
  }
  return 0;
}

unsigned int *CG::DisplayListEntryImage::_hash(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int __src;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      __src = *(_DWORD *)(v5 + 24);
      XXH64_update(a2, (char *)&__src, 4uLL);
    }
  }
  XXH64_update(a2, (char *)(a1 + 88), 0x30uLL);
  XXH64_update(a2, (char *)(a1 + 136), 4uLL);
  XXH64_update(a2, (char *)(a1 + 148), 4uLL);
  return CG::DisplayListEntry::_hash(a1, a2);
}

_QWORD *std::less<std::string>::operator()[abi:se180100](_QWORD *result, _QWORD *a2)
{
  size_t v2;
  BOOL v3;
  int v4;
  size_t v5;
  size_t v6;
  int v7;

  if (*((char *)a2 + 23) < 0)
  {
    v2 = a2[1];
    if ((v2 & 0x8000000000000000) != 0 || ((a2 = (_QWORD *)*a2, v2) ? (v3 = a2 == 0) : (v3 = 0), v3))
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
  }
  v4 = *((char *)result + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)result + 23);
  else
    v5 = result[1];
  if (v4 < 0)
    result = (_QWORD *)*result;
  if (v2 >= v5)
    v6 = v5;
  else
    v6 = v2;
  v7 = memcmp(result, a2, v6);
  if (v7)
    return (_QWORD *)(v7 < 0);
  else
    return (_QWORD *)(v5 < v2);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;
  size_t v9;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_11;
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  v9 = __sz + 1;
  if (v5 <= (std::string *)__s && (char *)v5 + v9 > __s)
  {
    __break(1u);
LABEL_11:
    std::string::__throw_length_error[abi:se180100]();
  }
  memmove(v5, __s, v9);
}

uint64_t DisplayListXMLParserEntryStateDrawing::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  BOOL v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  BOOL v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v95;
  int v96;
  unsigned __int8 v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD __key[2];
  void *__p[59];

  __p[58] = *(void **)MEMORY[0x1E0C80C00];
  if (lpsrc)
  else
    v10 = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "clip", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v99) == 1)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD **)(v16 + 40);
    v17 = (_QWORD *)(v16 + 40);
    v18 = v19;
    if (!v19)
      goto LABEL_16;
    v20 = v17;
    do
    {
      v21 = v18[4];
      v22 = v21 >= v99;
      if (v21 >= v99)
        v23 = v18;
      else
        v23 = v18 + 1;
      if (v22)
        v20 = v18;
      v18 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 != v17 && v20[4] <= v99)
    {
      v24 = (void *)v20[5];
      if (v24)
    }
    else
    {
LABEL_16:
      v24 = 0;
    }
    v10[1] = v24;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "softMask", "%llu", v11, v12, v13, v14, v15, (uint64_t)&v99) == 1)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v33 = *(_QWORD **)(v30 + 40);
    v31 = (_QWORD *)(v30 + 40);
    v32 = v33;
    if (!v33)
      goto LABEL_30;
    v34 = v31;
    do
    {
      v35 = v32[4];
      v36 = v35 >= v99;
      if (v35 >= v99)
        v37 = v32;
      else
        v37 = v32 + 1;
      if (v36)
        v34 = v32;
      v32 = (_QWORD *)*v37;
    }
    while (*v37);
    if (v34 != v31 && v34[4] <= v99)
    {
      v38 = (void *)v34[5];
      if (v38)
    }
    else
    {
LABEL_30:
      v38 = 0;
    }
    v10[2] = v38;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "style", "%llu", v25, v26, v27, v28, v29, (uint64_t)&v99) == 1)
  {
    v44 = *(_QWORD *)(a1 + 8);
    v47 = *(_QWORD **)(v44 + 40);
    v45 = (_QWORD *)(v44 + 40);
    v46 = v47;
    if (!v47)
      goto LABEL_44;
    v48 = v45;
    do
    {
      v49 = v46[4];
      v50 = v49 >= v99;
      if (v49 >= v99)
        v51 = v46;
      else
        v51 = v46 + 1;
      if (v50)
        v48 = v46;
      v46 = (_QWORD *)*v51;
    }
    while (*v51);
    if (v48 != v45 && v48[4] <= v99)
    {
      v52 = (void *)v48[5];
      if (v52)
    }
    else
    {
LABEL_44:
      v52 = 0;
    }
    v10[3] = v52;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "BG", "%llu", v39, v40, v41, v42, v43, (uint64_t)&v99) == 1)
  {
    v58 = *(_QWORD *)(a1 + 8);
    v61 = *(_QWORD **)(v58 + 40);
    v59 = (_QWORD *)(v58 + 40);
    v60 = v61;
    if (!v61)
      goto LABEL_58;
    v62 = v59;
    do
    {
      v63 = v60[4];
      v64 = v63 >= v99;
      if (v63 >= v99)
        v65 = v60;
      else
        v65 = v60 + 1;
      if (v64)
        v62 = v60;
      v60 = (_QWORD *)*v65;
    }
    while (*v65);
    if (v62 != v59 && v62[4] <= v99)
    {
      v66 = (void *)v62[5];
      if (v66)
    }
    else
    {
LABEL_58:
      v66 = 0;
    }
    v10[4] = v66;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "UCR", "%llu", v53, v54, v55, v56, v57, (uint64_t)&v99) == 1)
  {
    v72 = *(_QWORD *)(a1 + 8);
    v75 = *(_QWORD **)(v72 + 40);
    v73 = (_QWORD *)(v72 + 40);
    v74 = v75;
    if (!v75)
      goto LABEL_72;
    v76 = v73;
    do
    {
      v77 = v74[4];
      v78 = v77 >= v99;
      if (v77 >= v99)
        v79 = v74;
      else
        v79 = v74 + 1;
      if (v78)
        v76 = v74;
      v74 = (_QWORD *)*v79;
    }
    while (*v79);
    if (v76 != v73 && v76[4] <= v99)
    {
      v80 = (void *)v76[5];
      if (v80)
    }
    else
    {
LABEL_72:
      v80 = 0;
    }
    v10[5] = v80;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flatness", "%lg", v67, v68, v69, v70, v71, (uint64_t)&v98) == 1)v10[6] = v98;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "alpha", "%lg", v81, v82, v83, v84, v85, (uint64_t)&v98) == 1)
    v10[7] = v98;
  std::string::basic_string[abi:se180100]<0>((char **)__p, "compositeOp");
  v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, __p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a2 + 8) != v86)
  {
    memcpy(__p, &off_1E1661900, 0x1D0uLL);
    __key[1] = 0;
    v87 = v86 + 7;
    if (*((char *)v86 + 79) < 0)
      v87 = (_QWORD *)*v87;
    __key[0] = v87;
    v88 = bsearch_b(__key, __p, 0x1DuLL, 0x10uLL, &__block_literal_global_18998);
    if (v88)
      *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFFC0 | v88[2] & 0x3F;
  }
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "antialias", (char *)&v97))
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFFBF | (v97 << 6);
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "alphaIsShape", (char *)&v97))
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFFF7F | (v97 << 7);
  if (CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "intent", &v96))
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFC0FF | ((v96 & 0x3F) << 8);
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "fillOverprint", (char *)&v97))
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFFBFFF | (v97 << 14);
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "strokeOverprint", (char *)&v97))
    *((_DWORD *)v10 + 24) = v10[12] & 0xFFFF7FFF | (v97 << 15);
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "overprintMode", "%d", v89, v90, v91, v92, v93, (uint64_t)&v95) == 1)*((_DWORD *)v10 + 25) = v95;
  return 1;
}

uint64_t DisplayListXMLParserEntryStateFill::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  void *v19;
  unint64_t v21;

  if (lpsrc)
  else
    v10 = 0;
  v21 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "color", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v21) == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD **)(v11 + 40);
    v12 = (_QWORD *)(v11 + 40);
    v13 = v14;
    if (!v14)
      goto LABEL_16;
    v15 = v12;
    do
    {
      v16 = v13[4];
      v17 = v16 >= v21;
      if (v16 >= v21)
        v18 = v13;
      else
        v18 = v13 + 1;
      if (v17)
        v15 = v13;
      v13 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != v12 && v15[4] <= v21)
    {
      v19 = (void *)v15[5];
      if (v19)
    }
    else
    {
LABEL_16:
      v19 = 0;
    }
    v10[1] = v19;
  }
  return 1;
}

uint64_t DisplayListXMLParserEntryStateStroke::parseAttributes(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  const char *v45;
  unint64_t v46;
  const char **v47;
  BOOL v48;
  _QWORD *v49;
  const char *v50;
  unint64_t v51;
  const char **v52;
  BOOL v53;
  char v55;
  uint64_t v56;
  unint64_t v57;
  void *__p;
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (lpsrc)
  else
    v10 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "color", "%llu", a4, a5, a6, a7, a8, (uint64_t)&v57) == 1)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD **)(v16 + 40);
    v17 = (_QWORD *)(v16 + 40);
    v18 = v19;
    if (!v19)
      goto LABEL_16;
    v20 = v17;
    do
    {
      v21 = v18[4];
      v22 = v21 >= v57;
      if (v21 >= v57)
        v23 = v18;
      else
        v23 = v18 + 1;
      if (v22)
        v20 = v18;
      v18 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 != v17 && v20[4] <= v57)
    {
      v24 = (void *)v20[5];
      if (v24)
    }
    else
    {
LABEL_16:
      v24 = 0;
    }
    v10[1] = v24;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "width", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v56) == 1)
    v10[2] = v56;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "thresh", "%lg", v25, v26, v27, v28, v29, (uint64_t)&v56) == 1)
    v10[3] = v56;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "dash", "%llu", v30, v31, v32, v33, v34, (uint64_t)&v57) == 1)
  {
    v35 = *(_QWORD *)(a1 + 8);
    v38 = *(_QWORD **)(v35 + 40);
    v36 = (_QWORD *)(v35 + 40);
    v37 = v38;
    if (!v38)
      goto LABEL_34;
    v39 = v36;
    do
    {
      v40 = v37[4];
      v41 = v40 >= v57;
      if (v40 >= v57)
        v42 = v37;
      else
        v42 = v37 + 1;
      if (v41)
        v39 = v37;
      v37 = (_QWORD *)*v42;
    }
    while (*v42);
    if (v39 != v36 && v39[4] <= v57)
    {
      v43 = (void *)v39[5];
      if (v43)
    }
    else
    {
LABEL_34:
      v43 = 0;
    }
    v10[5] = v43;
  }
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "cap");
  v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  if ((_QWORD *)(a2 + 8) != v44)
  {
    __p = "butt";
    v59 = 0;
    v60 = "round";
    v61 = 1;
    v62 = "square";
    v63 = 2;
    v45 = (const char *)(v44 + 7);
    if (*((char *)v44 + 79) < 0)
      v45 = *(const char **)v45;
    v46 = 0;
    v47 = (const char **)&v59;
    v48 = 1;
    while (strcmp(v45, *(v47 - 1)))
    {
      v48 = v46 < 2;
      v47 += 2;
      if (++v46 == 3)
        goto LABEL_47;
    }
    if (v48)
      *((_BYTE *)v10 + 48) = *(_DWORD *)v47;
  }
LABEL_47:
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "join");
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  if ((_QWORD *)(a2 + 8) != v49)
  {
    __p = "miter";
    v59 = 0;
    v60 = "round";
    v61 = 1;
    v62 = "bevel";
    v63 = 2;
    v50 = (const char *)(v49 + 7);
    if (*((char *)v49 + 79) < 0)
      v50 = *(const char **)v50;
    v51 = 0;
    v52 = (const char **)&v59;
    v53 = 1;
    while (strcmp(v50, *(v52 - 1)))
    {
      v53 = v51 < 2;
      v52 += 2;
      if (++v51 == 3)
        goto LABEL_58;
    }
    if (v53)
      *((_BYTE *)v10 + 49) = *(_DWORD *)v52;
  }
LABEL_58:
  if (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "adjust", &v55))
    *((_BYTE *)v10 + 50) = v55;
  return 1;
}

uint64_t DisplayListXMLParserEntryStatePattern::parseAttributes(int a1, uint64_t a2, void *lpsrc)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  _OWORD v19[3];

  if (lpsrc)
  else
    v4 = 0;
  v17 = 0;
  if (CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "baseCTM", (uint64_t)v19))
  {
    v10 = v19[1];
    *(_OWORD *)(v4 + 8) = v19[0];
    *(_OWORD *)(v4 + 24) = v10;
    *(_OWORD *)(v4 + 40) = v19[2];
  }
  if (CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "phase", &v18, v5, v6, v7, v8, v9))
    *(_OWORD *)(v4 + 56) = v18;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "smoothness", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v17))
  {
    *((_QWORD *)v4 + 9) = v17;
  }
  return 1;
}

void DisplayListXMLParserEntryStatePattern::~DisplayListXMLParserEntryStatePattern(DisplayListXMLParserEntryStatePattern *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserEntryState::parseChildElements()
{
  return 1;
}

BOOL CG::DisplayListEntryStatePattern::_equal_to(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;

  if (!a1)
    __cxa_bad_typeid();
  v4 = std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
  if (!v4 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v5 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    v5 = 0;
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 64) == *(double *)(a2 + 64))
    {
      if (*(double *)(a1 + 72) == *(double *)(a2 + 72))
        return v4;
      return 0;
    }
  }
  return v5;
}

void DisplayListXMLParserEntryStateStroke::~DisplayListXMLParserEntryStateStroke(DisplayListXMLParserEntryStateStroke *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL CG::DisplayListEntryStateStroke::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8))|| *(double *)(a1 + 16) != *(double *)(a2 + 16)|| *(double *)(a1 + 24) != *(double *)(a2 + 24))
  {
    return 0;
  }
  v6 = *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48);
  if (!v6 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50))
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    if (!v8 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v8, a3))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    if (v10 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, a3))
      return std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
  }
  else if (!v10)
  {
    return std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
  }
  return 0;
}

void DisplayListXMLParserEntryStateFill::~DisplayListXMLParserEntryStateFill(DisplayListXMLParserEntryStateFill *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL CG::DisplayListEntryStateFill::_equal_to(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    __cxa_bad_typeid();
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*a2 - 8) + 8);
  if (!std::type_info::operator==[abi:se180100](v6, v7))
    return 0;
  v8 = a1[1];
  v9 = a2[1];
  if (!v8)
  {
    if (!v9)
      return std::type_info::operator==[abi:se180100](v6, v7);
    return 0;
  }
  if (!v9 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, a3))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*a2 - 8) + 8);
  return std::type_info::operator==[abi:se180100](v6, v7);
}

void DisplayListXMLParserEntryStateDrawing::~DisplayListXMLParserEntryStateDrawing(DisplayListXMLParserEntryStateDrawing *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL CG::DisplayListEntryStateDrawing::_equal_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    __cxa_bad_typeid();
  if (!std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8)))return 0;
  if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
    return 0;
  if (*(double *)(a1 + 56) != *(double *)(a2 + 56))
    return 0;
  v6 = *(_DWORD *)(a1 + 96);
  v7 = *(_DWORD *)(a2 + 96);
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 64), *(CGRect *)(a2 + 64))
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x3F) != 0
    || ((v6 ^ v7) & 0x40) != 0
    || ((v6 & 0x80) == 0) == (v7 & 0x80) >> 7
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x3F00) != 0
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x4000) != 0
    || (((unsigned __int16)v6 ^ (unsigned __int16)v7) & 0x8000) != 0
    || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
  {
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    if (!v10 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, a3))
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    if (!v12 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, v12, a3))
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    if (!v14 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, v14, a3))
      return 0;
  }
  else if (v14)
  {
    return 0;
  }
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a2 + 32);
  if (v15)
  {
    if (!v16 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, v16, a3))
      return 0;
  }
  else if (v16)
  {
    return 0;
  }
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a2 + 40);
  if (v17)
  {
    if (v18 && (!*(_QWORD *)(a2 + 24) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17)))
      return std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
    return 0;
  }
  if (v18)
    return 0;
  return std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x50uLL);
    v10 = *a3;
    v7[8] = 0;
    v7[9] = 0;
    v7[4] = v10;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = (uint64_t *)(v7 + 8);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::tuple<CG::DisplayListResource *,_xmlNode *,std::map<std::string,std::string>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)a1[8]);
    operator delete(a1);
  }
}

BOOL DisplayListXMLParserResourceClip::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if ((CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bbox", a1 + 24) & 1) != 0)
    {
      return 1;
    }
    else
    {
      CGPostError((uint64_t)"%s: Failed to parse attribute \"bbox\"", v11, v12, v13, v14, v15, v16, v17, (char)"virtual BOOL DisplayListXMLParserResourceClip::parseAttributes(const DLXMLAttributes &)");
      return 0;
    }
  }
  return result;
}

uint64_t DisplayListXMLParserResourceColor::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  CG::DisplayListResourceImage *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  const void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGColorSpace *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  const void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  CGColorSpace *Pattern;
  CGColorRef v56;
  CGColorRef v58;
  CGColorSpace *v59;
  CGColorSpace *v60;
  CGColorSpace *v61;
  CGColorRef v62;
  unint64_t v63;
  CGFloat v64[2];
  __int128 v65;
  CGFloat components[6];

  components[5] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v15 = *(const void **)(a1 + 8);
  v16 = v15
  v63 = 0;
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v10, v11, v12, v13, v14, (uint64_t)&v63) != 1)return 0;
  v17 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD **)(v17 + 40);
  v18 = (_QWORD *)(v17 + 40);
  v19 = v20;
  if (!v20)
    return 0;
  v21 = v18;
  do
  {
    v22 = v19[4];
    v23 = v22 >= v63;
    if (v22 >= v63)
      v24 = v19;
    else
      v24 = v19 + 1;
    if (v23)
      v21 = v19;
    v19 = (_QWORD *)*v24;
  }
  while (*v24);
  if (v21 == v18)
    return 0;
  if (v21[4] > v63)
    return 0;
  v25 = (const void *)v21[5];
  if (!v25)
    return 0;
  if (!v26)
  {
    CGPostError((uint64_t)"%s: colorSpace resource is of an unexpected class", v27, v28, v29, v30, v31, v32, v33, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  *((_QWORD *)v16 + 3) = v26;
  v34 = (CGColorSpace *)v26[2];
  if (!v34)
  {
    CGPostError((uint64_t)"%s: Color resource has NULL CGColorSpace", v27, v28, v29, v30, v31, v32, v33, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "pattern", "%llu", v29, v30, v31, v32, v33, (uint64_t)&v63) == 1)
  {
    v35 = *(_QWORD *)(a1 + 16);
    v38 = *(_QWORD **)(v35 + 40);
    v36 = (_QWORD *)(v35 + 40);
    v37 = v38;
    if (!v38)
      return 0;
    v39 = v36;
    do
    {
      v40 = v37[4];
      v41 = v40 >= v63;
      if (v40 >= v63)
        v42 = v37;
      else
        v42 = v37 + 1;
      if (v41)
        v39 = v37;
      v37 = (_QWORD *)*v42;
    }
    while (*v42);
    if (v39 == v36)
      return 0;
    if (v39[4] > v63)
      return 0;
    v43 = (const void *)v39[5];
    if (!v43)
      return 0;
  }
  v44 = CG::DisplayListXMLHelper::parseColorComponentsFromAttributes(a2, (uint64_t)components);
  v52 = *((_QWORD *)v34 + 3);
  if (v44 != *(_QWORD *)(v52 + 40) + 1)
  {
    CGPostError((uint64_t)"%s: Color resource has wrong number of components", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  v53 = *((_QWORD *)v16 + 4);
  if (v53)
  {
    v54 = *(_QWORD *)(v53 + 16);
    if (!v54)
    {
      CGPostError((uint64_t)"%s: Pattern resource has NULL CGPattern", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
      return v54;
    }
    if (*(_BYTE *)(v54 + 185))
    {
      Pattern = v34;
    }
    else
    {
      if ((*(_DWORD *)(v52 + 24) - 5) > 1)
        goto LABEL_52;
      v59 = **(CGColorSpace ***)(v52 + 88);
      if (!v59)
        goto LABEL_52;
      Pattern = CGColorSpaceCreatePattern(v59);
      if (!Pattern)
        goto LABEL_52;
    }
    v56 = CGColorCreateWithPattern(Pattern, (CGPatternRef)v54, components);
  }
  else
  {
    v56 = CGColorCreate(v34, components);
  }
  v58 = v56;
  if (v56)
  {
    CG::DisplayListResourceImage::setImage(v16, v56);
    CFRelease(v58);
    return 1;
  }
LABEL_52:
  CGPostError((uint64_t)"%s: Failed to create color from components", v45, v46, v47, v48, v49, v50, v51, (char)"virtual BOOL DisplayListXMLParserResourceColor::parseAttributes(const DLXMLAttributes &)");
  v60 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  if (!v60)
    return 0;
  v61 = v60;
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v62 = CGColorCreate(v60, v64);
  v54 = v62 != 0;
  CG::DisplayListResourceImage::setImage(v16, v62);
  if (v62)
    CFRelease(v62);
  CFRelease(v61);
  return v54;
}

BOOL DisplayListXMLParserResourceColorSpace::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  const void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  unint64_t v22;
  int *v23;
  BOOL v24;
  CGColorSpace *CGColorSpaceFromAttributeName;
  CGColorSpace *v26;
  CGColorSpace *Pattern;
  const char *v28;
  const __CFAllocator *v29;
  const __CFString *v30;
  const __CFURL *v31;
  const __CFURL *v32;
  CGDataProviderRef v33;
  CGDataProvider *v34;
  CGColorSpace *v35;
  const char *v36;
  void *__p;
  int v38;
  const char *v39;
  int v40;
  const char *v41;
  int v42;
  const char *v43;
  int v44;
  const char *v45;
  int v46;
  const char *v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  int v52;
  const char *v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  int v58;
  const char *v59;
  int v60;
  const char *v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v11 = *(const void **)(a1 + 8);
  if (v11)
  else
    v12 = 0;
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "csType");
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &__p);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if ((_QWORD *)(a2 + 8) == v20)
    goto LABEL_20;
  __p = "none";
  v38 = -1;
  v39 = "deviceGray";
  v41 = "deviceRGB";
  v42 = 1;
  v43 = "deviceCMYK";
  v44 = 2;
  v45 = "calibratedGray";
  v46 = 3;
  v47 = "calibratedRGB";
  v48 = 4;
  v49 = "LAB";
  v50 = 5;
  v51 = "ICCBased";
  v52 = 6;
  v53 = "FlexGTCProxy";
  v54 = 11;
  v55 = "indexed";
  v56 = 7;
  v57 = "deviceN";
  v58 = 8;
  v59 = "pattern";
  v60 = 9;
  v40 = 0;
  v61 = "profileSets";
  v62 = 10;
  v21 = (const char *)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    v21 = *(const char **)v21;
  v22 = 0;
  v23 = &v38;
  v24 = 1;
  while (strcmp(v21, *((const char **)v23 - 1)))
  {
    v24 = v22 < 0xC;
    v23 += 4;
    if (++v22 == 13)
      goto LABEL_20;
  }
  if (!v24)
  {
LABEL_20:
    v36 = "virtual BOOL DisplayListXMLParserResourceColorSpace::parseAttributes(const DLXMLAttributes &)";
    v28 = "%s: Failed to parse \"type\" attribute";
LABEL_21:
    CGPostError((uint64_t)v28, (uint64_t)v13, v14, v15, v16, v17, v18, v19, (char)v36);
    return 0;
  }
  if (*v23 == 9)
  {
    CGColorSpaceFromAttributeName = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "patternBaseName");
    v26 = CGColorSpaceFromAttributeName;
    if (!CGColorSpaceFromAttributeName)
    {
      Pattern = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "name");
      if (!Pattern)
      {
LABEL_33:
        v28 = "Unhandled colorspace type";
        goto LABEL_21;
      }
      goto LABEL_30;
    }
    Pattern = CGColorSpaceCreatePattern(CGColorSpaceFromAttributeName);
    CFRelease(v26);
    goto LABEL_18;
  }
  Pattern = DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(a2, "name");
  if (!Pattern)
  {
    v13 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "profile");
    if (!v13)
      goto LABEL_33;
    v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v30 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, 0x8000100u);
    if (!v30)
      goto LABEL_33;
    v31 = CFURLCreateCopyAppendingPathComponent(v29, *(CFURLRef *)(*(_QWORD *)(a1 + 16) + 24), v30, 0);
    v32 = v31;
    if (v31)
    {
      v33 = CGDataProviderCreateWithURL(v31);
      if (v33)
      {
        v34 = v33;
        Pattern = (CGColorSpace *)CGColorSpaceFromICCDataCacheGetRetained(v33);
        CGDataProviderRelease(v34);
      }
      else
      {
        Pattern = 0;
      }
      CFRelease(v32);
    }
    else
    {
      Pattern = 0;
    }
    CFRelease(v30);
LABEL_18:
    if (!Pattern)
      goto LABEL_33;
  }
LABEL_30:
  v35 = (CGColorSpace *)*((_QWORD *)v12 + 2);
  if (v35 != Pattern)
  {
    CGColorSpaceRelease(v35);
    CFRetain(Pattern);
    *((_QWORD *)v12 + 2) = Pattern;
  }
  CFRelease(Pattern);
  return 1;
}

uint64_t DisplayListXMLParserResourceDash::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v24 = 0;
    v25 = 0;
    v16 = "phase";
    if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "phase", "%lg", v11, v12, v13, v14, v15, (uint64_t)&v25) == 1
      && (*(_QWORD *)(a1 + 24) = v25,
          v16 = "count",
          result = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v19, v20, v21, v22, v23, (uint64_t)&v24), result == 1))
    {
      *(_QWORD *)(a1 + 32) = v24;
    }
    else
    {
      CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v17, v18, v19, v20, v21, v22, v23, (char)v16);
      return 0;
    }
  }
  return result;
}

uint64_t DisplayListXMLParserResourceFont::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  CG::DisplayListResourceFont *v11;
  const char *v12;
  const __CFAllocator *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFURL *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFAllocator *v25;
  const __CFString *v26;
  __CFDictionary *FontsWithURL;
  const __CFArray *v28;
  _QWORD *ValueAtIndex;
  _QWORD *v30;
  CFTypeID v31;
  uint64_t v32;
  char v34;
  CFTypeID v35;

  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v10 = *(const void **)(a1 + 8);
  if (v10)
  else
    v11 = 0;
  v12 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fontURL");
  if (v12)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0x8000100u);
    if (!v14)
      return 0;
    v15 = v14;
    v16 = CFURLCreateWithString(v13, v14, 0);
    CFRelease(v15);
    if (!v16)
      return 0;
  }
  else
  {
    v17 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fontResourceURL");
    if (!v17)
    {
      CGPostError((uint64_t)"Failed to parse \"fontURL\" or \"fontResourceURL\" attributes", v18, v19, v20, v21, v22, v23, v24, v34);
      return 0;
    }
    v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v26 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, 0x8000100u);
    if (!v26)
      return 0;
    v16 = CFURLCreateCopyAppendingPathComponent(v25, *(CFURLRef *)(*(_QWORD *)(a1 + 16) + 24), v26, 0);
    if (!v16)
      return 0;
  }
  FontsWithURL = CGFontCreateFontsWithURL(v16);
  if (FontsWithURL)
  {
    v28 = FontsWithURL;
    if (CFArrayGetCount(FontsWithURL) < 1)
      goto LABEL_19;
    ValueAtIndex = CFArrayGetValueAtIndex(v28, 0);
    if (!ValueAtIndex)
      goto LABEL_19;
    v30 = ValueAtIndex;
    v31 = CFGetTypeID(ValueAtIndex);
    if (_block_invoke_once_3017 != -1)
    {
      v35 = v31;
      dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
      v31 = v35;
    }
    if (v31 == CGFontGetTypeID_font_type_id)
    {
      CG::DisplayListResourceFont::setFont(v11, v30);
      v32 = 1;
    }
    else
    {
LABEL_19:
      v32 = 0;
    }
    CFRelease(v28);
  }
  else
  {
    v32 = 0;
  }
  CFRelease(v16);
  return v32;
}

const __CFString *DisplayListXMLParserResourceImage::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  unsigned __int8 *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  const void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  const __CFAllocator *v48;
  const void *v49;
  const __CFURL *v50;
  const __CFURL *v51;
  const __CFString *v52;
  uint64_t v53;
  const void *v54;
  __CFData *v55;
  uint64_t *v56;
  int v57;
  char *v58;
  CGColorSpace *v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  CGDataProvider *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CGFloat *decode;
  CGBitmapInfo bitmapInfo;
  uint64_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  size_t v84;
  int v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  UInt8 buffer[1024];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  result = (const __CFString *)DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return result;
  v16 = *(const void **)(a1 + 8);
  if (v16)
  else
    v17 = 0;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v18 = "width";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "width", "%zu", v11, v12, v13, v14, v15, (uint64_t)&v86) != 1)
    goto LABEL_28;
  *((_QWORD *)v17 + 3) = v86;
  v18 = "height";
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "height", "%zu", v21, v22, v23, v24, v25, (uint64_t)&v86) != 1)
    goto LABEL_28;
  *((_QWORD *)v17 + 4) = v86;
  v18 = "renderingIntent";
  if (!CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(a2, "renderingIntent", &v85)
    || (v17[48] = v17[48] & 0xF0 | v85 & 0xF,
        v18 = "interpolate",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "interpolate", &v87) & 1) == 0)
    || (v17[48] = v17[48] & 0xEF | (16 * v87),
        v18 = "isMask",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isMask", &v87) & 1) == 0)
    || (v17[48] = v17[48] & 0xDF | (32 * v87),
        v18 = "isTransparent",
        (CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isTransparent", &v87) & 1) == 0))
  {
LABEL_28:
    LOBYTE(decode) = (_BYTE)v18;
LABEL_29:
    v47 = "Failed to parse \"%s\" attribute";
LABEL_30:
    CGPostError((uint64_t)v47, v19, v20, v21, v22, v23, v24, v25, (char)decode);
    return 0;
  }
  v17[48] = v17[48] & 0xBF | (v87 << 6);
  v26 = (char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "imageName");
  if (!v26)
  {
    decode = (CGFloat *)"imageName";
    goto LABEL_29;
  }
  v27 = v26;
  if ((v17[48] & 0x20) != 0)
  {
    v46 = 0;
    goto LABEL_35;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v21, v22, v23, v24, v25, (uint64_t)&v88) != 1)
  {
    v47 = "Failed to parse \"colorSpace\" attribute";
    goto LABEL_30;
  }
  v28 = *(_QWORD *)(a1 + 16);
  v29 = v88;
  v32 = *(_QWORD **)(v28 + 40);
  v30 = (_QWORD *)(v28 + 40);
  v31 = v32;
  if (!v32)
    goto LABEL_48;
  v33 = v30;
  do
  {
    v34 = v31[4];
    v35 = v34 >= v88;
    if (v34 >= v88)
      v36 = v31;
    else
      v36 = v31 + 1;
    if (v35)
      v33 = v31;
    v31 = (_QWORD *)*v36;
  }
  while (*v36);
  if (v33 == v30 || v33[4] > v88 || (v37 = (const void *)v33[5]) == 0)
  {
LABEL_48:
    CGPostError((uint64_t)"Failed to get resourceID: %llu for \"colorSpace\" attribute", v19, v20, v21, v22, v23, v24, v25, v88);
    return 0;
  }
  if (!v38)
  {
    CGPostError((uint64_t)"colorSpace resourceID: %llu is of an unexpected class", v39, v40, v41, v42, v43, v44, v45, v29);
    return 0;
  }
  v46 = v38;
  *((_QWORD *)v17 + 5) = v38;
LABEL_35:
  v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v27, 0x8000100u);
  if (result)
  {
    v49 = result;
    v50 = CFURLCreateCopyAppendingPathComponent(v48, *(CFURLRef *)(*(_QWORD *)(a1 + 16) + 24), result, 0);
    if (!v50)
    {
      v57 = 0;
LABEL_62:
      CFRelease(v49);
      return (const __CFString *)(v57 != 0);
    }
    v51 = v50;
    v52 = CFURLCopyPathExtension(v50);
    if (!v52 || CFStringCompare(v52, CFSTR("br2"), 0))
    {
      if (DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate != -1)
        dispatch_once(&DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate, &__block_literal_global_82_3934);
      v53 = DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f(v51, 0);
      if (!v53)
        goto LABEL_60;
      v54 = (const void *)v53;
      if (DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate != -1)
        dispatch_once(&DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::predicate, &__block_literal_global_84);
      v55 = (__CFData *)DisplayListXMLParserResourceImage::parseAttributes(std::map<std::string,std::string> const&)::f(v54, 0, 0);
      goto LABEL_45;
    }
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    bitmapInfo = 0;
    v58 = strstr(v27, "_w=");
    if (!v58
      || sscanf(v58, "_w=%ld,h=%ld,rb=%ld,cs=%ld,bpc=%ld,bmi=%x", &v84, &v83, &v81, &v80, &v82, &bitmapInfo) != 6)
    {
      CGPostError((uint64_t)"Improperly formed BufferReader name: %s", v19, v20, v21, v22, v23, v24, v25, (char)v27);
      goto LABEL_57;
    }
    if ((v17[48] & 0x20) != 0)
    {
      v59 = 0;
      v61 = v82;
LABEL_71:
      v63 = CGDataProviderCreateWithURL(v51);
      if (v63)
      {
        v54 = v63;
        v64 = v17[48];
        if ((v64 & 0x20) == 0)
        {
          v56 = (uint64_t *)CGImageCreate(v84, v83, v82, v61, v81, v59, bitmapInfo, v63, 0, (v64 & 0x10) != 0, (CGColorRenderingIntent)((int)(v64 << 28) >> 28));
          CGImageCopyHeadroomFromOriginal(v56, *((CGImage **)v17 + 2), v65, v66, v67, v68, v69, v70);
          goto LABEL_46;
        }
        v55 = mask_create(v84, v83, v82, v61, v81, v63, 0, (v64 >> 4) & 1, 4);
LABEL_45:
        v56 = (uint64_t *)v55;
LABEL_46:
        CFRelease(v54);
        goto LABEL_58;
      }
      CFURLGetFileSystemRepresentation(v51, 1u, buffer, 1024);
      CGPostError((uint64_t)"%s: Failed to create CGDataProvider with URL: %s", v71, v72, v73, v74, v75, v76, v77, (char)"virtual BOOL DisplayListXMLParserResourceImage::parseAttributes(const DLXMLAttributes &)");
LABEL_57:
      v56 = 0;
LABEL_58:
      if (v56)
      {
        CG::DisplayListResourceImage::setImage((CG::DisplayListResourceImage *)v17, v56);
        CFRelease(v56);
        v57 = 1;
LABEL_61:
        CFRelease(v51);
        goto LABEL_62;
      }
LABEL_60:
      v57 = 0;
      goto LABEL_61;
    }
    if (v46)
    {
      v59 = (CGColorSpace *)*((_QWORD *)v46 + 2);
      if (v59)
        v60 = *(_QWORD *)(*((_QWORD *)v59 + 3) + 40);
      else
        v60 = 0;
      if ((bitmapInfo & 0x1F) != 0)
        v62 = v82;
      else
        v62 = 0;
      v61 = v62 + v82 * v60;
      goto LABEL_71;
    }
    v47 = "colorSpaceResource == NULL";
    goto LABEL_30;
  }
  return result;
}

BOOL DisplayListXMLParserResource::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;

  v18 = 0;
  v16 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "flags", "0x%X", a4, a5, a6, a7, a8, (uint64_t)&v18);
  if (v16 == 1)
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = v18 & 0xFFFFFF | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 11) << 24);
  else
    CGPostError((uint64_t)"%s: Failed to parse attribute \"%s\"", v9, v10, v11, v12, v13, v14, v15, (char)"virtual BOOL DisplayListXMLParserResource::parseAttributes(const DLXMLAttributes &)");
  return v16 == 1;
}

uint64_t DisplayListXMLParserResourceGradient::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  char v51;
  unint64_t v52;

  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v16 = *(const void **)(a1 + 8);
    if (v16)
    else
      v17 = 0;
    v52 = 0;
    if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "colorSpace", "%llu", v11, v12, v13, v14, v15, (uint64_t)&v52) == 1)
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = v52;
      v29 = *(_QWORD **)(v25 + 40);
      v27 = (_QWORD *)(v25 + 40);
      v28 = v29;
      if (v29)
      {
        v30 = v27;
        do
        {
          v31 = v28[4];
          v32 = v31 >= v52;
          if (v31 >= v52)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = v28;
          v28 = (_QWORD *)*v33;
        }
        while (*v33);
        if (v30 != v27 && v30[4] <= v52)
        {
          v34 = (const void *)v30[5];
          if (v34)
          {
            if (v35)
            {
              v17[3] = v35;
              result = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "count", "%zu", v38, v39, v40, v41, v42, a1 + 24);
              if (result == 1)
                return result;
              CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v43, v44, v45, v46, v47, v48, v49, (char)"count");
            }
            else
            {
              CGPostError((uint64_t)"colorSpace resourceID: %llu is of an unexpected class", v36, v37, v38, v39, v40, v41, v42, v26);
            }
            return 0;
          }
        }
      }
      v51 = v52;
      v50 = "Failed to get resourceID: %llu for \"colorSpace\" attribute";
    }
    else
    {
      v50 = "Failed to parse \"colorSpace\" attribute";
    }
    CGPostError((uint64_t)v50, v18, v19, v20, v21, v22, v23, v24, v51);
    return 0;
  }
  return result;
}

BOOL DisplayListXMLParserResourcePattern::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  const void *v11;
  CG::DisplayListResourcePattern *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  const char *v27;
  unint64_t v28;
  CGPatternDrawPatternCallback *p_drawPattern;
  BOOL v30;
  const char *v31;
  CGPatternTiling v32;
  const __CFAllocator *v33;
  CFStringRef v34;
  const __CFURL *v35;
  CFURLRef v36;
  uint64_t v37;
  const CGRect *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFURLRef v44;
  void *v45;
  CGPatternRef v46;
  CGPatternRef v47;
  const char *v48;
  CGAffineTransform matrix;
  BOOL isColored;
  CGFloat v51[2];
  CGAffineTransform v52;
  CGRect v53;
  CGPatternCallbacks callbacks;
  int v55;
  const char *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v11 = *(const void **)(a1 + 8);
  if (v11)
  else
    v12 = 0;
  v13 = "patternType";
  std::string::basic_string[abi:se180100]<0>((char **)&callbacks, "patternType");
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &callbacks);
  if (SHIBYTE(callbacks.releaseInfo) < 0)
    operator delete(*(void **)&callbacks.version);
  if ((_QWORD *)(a2 + 8) == v21)
    goto LABEL_26;
  *(_QWORD *)&callbacks.version = "tiling";
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)"shading";
  v22 = (const char *)(v21 + 7);
  if (*((char *)v21 + 79) < 0)
    v22 = *(const char **)v22;
  v23 = 0;
  v24 = 1;
  while (1)
  {
    v25 = v24;
    if (!strcmp(v22, *((const char **)&callbacks.version + 2 * v23)))
      break;
    v24 = 0;
    v23 = 1;
    if ((v25 & 1) == 0)
      goto LABEL_26;
  }
  v13 = "patternBounds";
  if ((CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "patternBounds", (uint64_t)&v53) & 1) == 0)
    goto LABEL_26;
  if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "patternMatrix", (uint64_t)&v52))
  {
    v31 = "Failed to parse \"patternMatrix\" attribute";
    goto LABEL_28;
  }
  v13 = "step";
  if (!CG::DisplayListXMLHelper::parsePointFromAttributes(a2, "step", v51, v16, v17, v18, v19, v20))
  {
LABEL_26:
    LOBYTE(v48) = (_BYTE)v13;
LABEL_27:
    v31 = "Failed to parse \"%s\" attribute";
LABEL_28:
    CGPostError((uint64_t)v31, (uint64_t)v14, v15, v16, v17, v18, v19, v20, (char)v48);
    return 0;
  }
  std::string::basic_string[abi:se180100]<0>((char **)&callbacks, "tiling");
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &callbacks);
  if (SHIBYTE(callbacks.releaseInfo) < 0)
    operator delete(*(void **)&callbacks.version);
  if ((_QWORD *)(a2 + 8) == v26)
    goto LABEL_41;
  *(_QWORD *)&callbacks.version = "noDistortion";
  LODWORD(callbacks.drawPattern) = 0;
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)"constSpacingMinDistortion";
  v55 = 1;
  v56 = "constSpacing";
  v57 = 2;
  v27 = (const char *)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    v27 = *(const char **)v27;
  v28 = 0;
  p_drawPattern = &callbacks.drawPattern;
  v30 = 1;
  while (strcmp(v27, (const char *)*(p_drawPattern - 1)))
  {
    v30 = v28 < 2;
    p_drawPattern += 2;
    if (++v28 == 3)
      goto LABEL_41;
  }
  if (!v30)
  {
LABEL_41:
    v31 = "Failed to parse \"tiling\" attribute";
    goto LABEL_28;
  }
  v32 = *(_DWORD *)p_drawPattern;
  isColored = 0;
  if ((CG::DisplayListXMLHelper::parseBoolFromAttributes(a2, "isColored", (char *)&isColored) & 1) == 0)
  {
    v48 = "isColored";
    goto LABEL_27;
  }
  v14 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "drawCell");
  if (!v14)
  {
    v31 = "Failed to parse \"drawCell\" attribute";
    goto LABEL_28;
  }
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v34 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, 0x8000100u);
  if (!v34)
    goto LABEL_45;
  v35 = *(const __CFURL **)(*(_QWORD *)(a1 + 16) + 24);
  if (!v35 || (v36 = CFURLCreateCopyAppendingPathComponent(v33, v35, v34, 1u), (v44 = v36) == 0))
  {
    CFRelease(v34);
    goto LABEL_45;
  }
  v45 = (void *)CGDisplayListCreateWithURL(v36, v37, v38, v39, v40, v41, v42, v43);
  CFRelease(v44);
  CFRelease(v34);
  if (!v45)
  {
LABEL_45:
    v31 = "Failed to read pattern cell display list";
    goto LABEL_28;
  }
  *(_OWORD *)&callbacks.version = xmmword_1E1643F70;
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)_patternReleaseInfoCallback;
  matrix = v52;
  v46 = CGPatternCreate(v45, v53, &matrix, v51[0], v51[1], v32, isColored, &callbacks);
  if (v46)
  {
    v47 = v46;
    CG::DisplayListResourcePattern::setPattern(v12, v46);
    CFRelease(v47);
  }
  return 1;
}

BOOL DisplayListXMLParserResourceStyle::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  const void *v11;
  CG::DisplayListResourcePattern *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  unint64_t v23;
  void **v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  const void *ShadowWithColor;
  const void *v70;
  _QWORD *v71;
  const char *v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double *style_with_type;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  const char *v102;
  unint64_t v103;
  BOOL v104;
  const char **v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  const void *FocusRing;
  const void *v131;
  char v132;
  int v133;
  double v134;
  void *__p[2];
  __int128 v136;
  _BYTE v137[48];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  const char *v146;
  int v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v11 = *(const void **)(a1 + 8);
    if (v11)
    else
      v12 = 0;
    std::string::basic_string[abi:se180100]<0>((char **)__p, "styleType");
    v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, __p);
    if (SBYTE7(v136) < 0)
      operator delete(__p[0]);
    v21 = (_QWORD *)(a2 + 8);
    if ((_QWORD *)(a2 + 8) == v20)
      goto LABEL_30;
    __p[0] = "shadow";
    LODWORD(__p[1]) = 1;
    *(_QWORD *)&v136 = "focusRing";
    DWORD2(v136) = 2;
    *(_QWORD *)v137 = "gaussianBlur";
    *(_DWORD *)&v137[8] = 3;
    *(_QWORD *)&v137[16] = "colorMatrix";
    *(_DWORD *)&v137[24] = 4;
    *(_QWORD *)&v137[32] = "unknown";
    *(_DWORD *)&v137[40] = 0;
    v22 = (const char *)(v20 + 7);
    if (*((char *)v20 + 79) < 0)
      v22 = *(const char **)v22;
    v23 = 0;
    v24 = &__p[1];
    v25 = 1;
    while (strcmp(v22, (const char *)*(v24 - 1)))
    {
      v25 = v23 < 4;
      v24 += 2;
      if (++v23 == 5)
        goto LABEL_30;
    }
    if (!v25)
    {
LABEL_30:
      CGPostError((uint64_t)"Failed to parse attribute: \"statusType\"", v13, v14, v15, v16, v17, v18, v19, v132);
      return 0;
    }
    else
    {
      switch(*(_DWORD *)v24)
      {
        case 1:
          *(_QWORD *)&v144 = 0;
          LODWORD(__p[0]) = 0;
          v26 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "elevation", "%lg", v15, v16, v17, v18, v19, (uint64_t)&v144);
          v32 = *(double *)&v144;
          if (!v26)
            v32 = 45.0;
          __p[1] = *(void **)&v32;
          v33 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "azimuth", "%lg", v27, v28, v29, v30, v31, (uint64_t)&v144);
          v39 = *(double *)&v144;
          if (!v33)
            v39 = 135.0;
          *(double *)&v136 = v39;
          v40 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "ambient", "%lg", v34, v35, v36, v37, v38, (uint64_t)&v144);
          v46 = *(double *)&v144;
          if (!v40)
            v46 = 0.666666667;
          *((double *)&v136 + 1) = v46;
          v47 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "height", "%lg", v41, v42, v43, v44, v45, (uint64_t)&v144);
          v53 = *(double *)&v144;
          if (!v47)
            v53 = 3.0;
          *(double *)v137 = v53;
          v54 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v48, v49, v50, v51, v52, (uint64_t)&v144);
          v60 = *(double *)&v144;
          if (!v54)
            v60 = 0.0;
          *(double *)&v137[8] = v60;
          v61 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "saturation", "%lg", v55, v56, v57, v58, v59, (uint64_t)&v144);
          v68 = *(double *)&v144;
          if (!v61)
            v68 = 1.0;
          *(double *)&v137[16] = v68;
          ShadowWithColor = (const void *)CGStyleCreateShadowWithColor((uint64_t)__p, 0, v62, v63, v64, v65, v66, v67);
          if (ShadowWithColor)
          {
            v70 = ShadowWithColor;
            CG::DisplayListResourcePattern::setPattern(v12, ShadowWithColor);
            CFRelease(v70);
          }
          break;
        case 2:
          v134 = 0.0;
          v133 = 0;
          LODWORD(__p[0]) = 0;
          std::string::basic_string[abi:se180100]<0>((char **)&v144, "tint");
          v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &v144);
          if (SBYTE7(v145) < 0)
            operator delete((void *)v144);
          if (v21 == v71)
          {
LABEL_40:
            v76 = 0;
          }
          else
          {
            *(_QWORD *)&v144 = "blue";
            *(_QWORD *)&v145 = "graphite";
            DWORD2(v144) = 0;
            DWORD2(v145) = 1;
            v72 = (const char *)(v71 + 7);
            if (*((char *)v71 + 79) < 0)
              v72 = *(const char **)v72;
            v73 = 0;
            v74 = 1;
            while (1)
            {
              v75 = v74;
              if (!strcmp(v72, *((const char **)&v144 + 2 * v73)))
                break;
              v74 = 0;
              v73 = 1;
              if ((v75 & 1) == 0)
                goto LABEL_40;
            }
            v76 = *((_DWORD *)&v144 + 4 * v73 + 2);
          }
          HIDWORD(__p[0]) = v76;
          std::string::basic_string[abi:se180100]<0>((char **)&v144, "ordering");
          v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, &v144);
          if (SBYTE7(v145) < 0)
            operator delete((void *)v144);
          if (v21 == v101)
          {
LABEL_59:
            v106 = 0;
          }
          else
          {
            *(_QWORD *)&v144 = "none";
            *(_QWORD *)&v145 = "above";
            DWORD2(v144) = 0;
            DWORD2(v145) = 2;
            v146 = "below";
            v147 = 1;
            v102 = (const char *)(v101 + 7);
            if (*((char *)v101 + 79) < 0)
              v102 = *(const char **)v102;
            v103 = 0;
            v104 = 1;
            v105 = (const char **)&v144;
            while (strcmp(v102, *v105))
            {
              v104 = v103 < 2;
              v105 += 2;
              if (++v103 == 3)
                goto LABEL_59;
            }
            v106 = *((_DWORD *)&v144 + 4 * v103 + 2);
            if (!v104)
              v106 = 0;
          }
          LODWORD(__p[1]) = v106;
          v107 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "alpha", "%lg", v96, v97, v98, v99, v100, (uint64_t)&v134);
          v113 = v134;
          if (!v107)
            v113 = 0.8;
          *(double *)&v136 = v113;
          v114 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v108, v109, v110, v111, v112, (uint64_t)&v134);
          v120 = v134;
          if (!v114)
            v120 = 2.0;
          *((double *)&v136 + 1) = v120;
          v121 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "threshold", "%lg", v115, v116, v117, v118, v119, (uint64_t)&v134);
          v122 = v134;
          if (!v121)
            v122 = 0.5;
          *(double *)v137 = v122;
          if (CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bounds", (uint64_t)&v144))
          {
            *(_OWORD *)&v137[8] = v144;
            *(_OWORD *)&v137[24] = v145;
          }
          else
          {
            memset(&v137[8], 0, 32);
          }
          v128 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "accumulate", "%d", v123, v124, v125, v126, v127, (uint64_t)&v133);
          v129 = v133;
          if (!v128)
            v129 = 0;
          *(_DWORD *)&v137[40] = v129;
          FocusRing = (const void *)CGStyleCreateFocusRing((uint64_t)__p);
          if (FocusRing)
          {
            v131 = FocusRing;
            CG::DisplayListResourcePattern::setPattern(v12, FocusRing);
            CFRelease(v131);
          }
          break;
        case 3:
          __p[0] = 0;
          if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "radius", "%lg", v15, v16, v17, v18, v19, (uint64_t)__p))
          {
            v84 = *(double *)__p;
          }
          else
          {
            v84 = 0.0;
          }
          style_with_type = (double *)create_style_with_type(3, v77, v78, v79, v80, v81, v82, v83);
          style_with_type[5] = fmax(fmin(v84, 1.79769313e308), 0.0);
          CG::DisplayListResourcePattern::setPattern(v12, style_with_type);
          CFRelease(style_with_type);
          break;
        case 4:
          v86 = 0;
          *(_QWORD *)&v144 = 0;
          LODWORD(__p[0]) = 0;
          do
          {
            v87 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, CG::DisplayListXMLHelper::colorMatrixIndexKey::keys[v86], "%lg", v15, v16, v17, v18, v19, (uint64_t)&v144);
            v90 = *(double *)&v144;
            if (!v87)
              v90 = 0.0;
            *(double *)&__p[++v86] = v90;
          }
          while (v86 != 20);
          v91 = create_style_with_type(4, v88, v89, v15, v16, v17, v18, v19);
          *(_OWORD *)(v91 + 144) = v140;
          v92 = v142;
          *(_OWORD *)(v91 + 160) = v141;
          *(_OWORD *)(v91 + 176) = v92;
          *(_QWORD *)(v91 + 192) = v143;
          v93 = *(_OWORD *)&v137[32];
          *(_OWORD *)(v91 + 80) = *(_OWORD *)&v137[16];
          *(_OWORD *)(v91 + 96) = v93;
          v94 = v139;
          *(_OWORD *)(v91 + 112) = v138;
          *(_OWORD *)(v91 + 128) = v94;
          v95 = v136;
          *(_OWORD *)(v91 + 32) = *(_OWORD *)__p;
          *(_OWORD *)(v91 + 48) = v95;
          *(_OWORD *)(v91 + 64) = *(_OWORD *)v137;
          CG::DisplayListResourcePattern::setPattern(v12, (CFTypeRef)v91);
          CFRelease((CFTypeRef)v91);
          break;
        default:
          return 1;
      }
      return 1;
    }
  }
  return result;
}

BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  CG::DisplayListResourcePattern *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BOOL8 v44;
  const char *v46;
  const __CFAllocator *v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __CFString *v56;
  const __CFURL *v57;
  CFURLRef v58;
  uint64_t v59;
  const CGRect *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  CFURLRef v66;
  uint64_t v67;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  const char *v78;
  __int128 v79[3];
  __int128 v80;
  void (*v81)(CFTypeRef);
  unint64_t v82;
  _OWORD v83[3];
  double v84[4];

  if (!DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v10 = *(const void **)(a1 + 8);
  if (v10)
  else
    v11 = 0;
  v82 = 0;
  v12 = "bbox";
  if ((CG::DisplayListXMLHelper::parseRectFromAttributes(a2, "bbox", (uint64_t)v84) & 1) == 0
    || (v12 = "matrix", !CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(a2, "matrix", (uint64_t)v83)))
  {
    LOBYTE(v78) = (_BYTE)v12;
LABEL_23:
    CGPostError((uint64_t)"Failed to parse \"%s\" attribute", v13, v14, v15, v16, v17, v18, v19, (char)v78);
    return 0;
  }
  if (CG::DisplayListXMLHelper::parseFormatFromAttributes(a2, "bg", "%llu", v15, v16, v17, v18, v19, (uint64_t)&v82) == 1)
  {
    v27 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD **)(v27 + 40);
    v28 = (_QWORD *)(v27 + 40);
    v29 = v30;
    if (!v30)
      goto LABEL_34;
    v31 = v28;
    do
    {
      v32 = v29[4];
      v33 = v32 >= v82;
      if (v32 >= v82)
        v34 = v29;
      else
        v34 = v29 + 1;
      if (v33)
        v31 = v29;
      v29 = (_QWORD *)*v34;
    }
    while (*v34);
    if (v31 == v28 || v31[4] > v82 || (v35 = (const void *)v31[5]) == 0)
    {
LABEL_34:
      CGPostError((uint64_t)"Failed to get resourceID: %llu for \"%s\" attribute", v20, v21, v22, v23, v24, v25, v26, v82);
      return 0;
    }
    if (!v43)
    {
      CGPostError((uint64_t)"\"%s\" resourceID: %llu is of an unexpected class", v36, v37, v38, v39, v40, v41, v42, (char)"background");
      return 0;
    }
  }
  else
  {
    v43 = 0;
  }
  v46 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "dl");
  if (!v46)
  {
    v78 = "dl";
    goto LABEL_23;
  }
  v47 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v48 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v46, 0x8000100u);
  if (!v48)
    goto LABEL_37;
  v56 = v48;
  v57 = *(const __CFURL **)(*(_QWORD *)(a1 + 16) + 24);
  if (!v57 || (v58 = CFURLCreateCopyAppendingPathComponent(v47, v57, v48, 1u)) == 0)
  {
    CFRelease(v56);
    goto LABEL_37;
  }
  v66 = v58;
  v67 = CGDisplayListCreateWithURL(v58, v59, v60, v61, v62, v63, v64, v65);
  CFRelease(v66);
  CFRelease(v56);
  if (!v67)
  {
LABEL_37:
    CGPostError((uint64_t)"%s: Failed to read softmask display list", v49, v50, v51, v52, v53, v54, v55, (char)"virtual BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(const DLXMLAttributes &)");
    return 0;
  }
  v81 = _softMaskReleaseInfoCallback;
  v79[0] = v83[0];
  v79[1] = v83[1];
  v79[2] = v83[2];
  v80 = xmmword_1E1643F88;
  if (v43)
    v68 = (const void *)v43[2];
  else
    v68 = 0;
  v69 = (const void *)CGSoftMaskCreate(v67, v79, v68, 0, (uint64_t)&v80, v53, v54, v55, v84[0], v84[1], v84[2], v84[3]);
  v44 = v69 != 0;
  if (v69)
  {
    v77 = v69;
    CG::DisplayListResourcePattern::setPattern(v11, v69);
    CFRelease(v77);
  }
  else
  {
    CGPostError((uint64_t)"%s: Failed to create CGSoftMaskRef", v70, v71, v72, v73, v74, v75, v76, (char)"virtual BOOL DisplayListXMLParserResourceSoftMask::parseAttributes(const DLXMLAttributes &)");
  }
  return v44;
}

BOOL DisplayListXMLParserResourceDisplayList::parseAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  const void *v11;
  CG::DisplayListResourcePattern *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFURL *v24;
  CFURLRef v25;
  uint64_t v26;
  const CGRect *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFURL *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  UInt8 buffer[1024];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  result = DisplayListXMLParserResource::parseAttributes(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v11 = *(const void **)(a1 + 8);
    if (v11)
    else
      v12 = 0;
    v13 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a2, "fileName");
    if (v13)
    {
      v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v22 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, 0x8000100u);
      if (v22)
      {
        v23 = v22;
        v24 = *(const __CFURL **)(*(_QWORD *)(a1 + 16) + 24);
        if (v24)
        {
          v25 = CFURLCreateCopyAppendingPathComponent(v21, v24, v22, 1u);
          if (v25)
          {
            v33 = v25;
            v34 = (const void *)CGDisplayListCreateWithURL(v25, v26, v27, v28, v29, v30, v31, v32);
            if (v34)
            {
              v35 = v34;
              CG::DisplayListResourcePattern::setPattern(v12, v34);
              CFRelease(v35);
            }
            else
            {
              CFURLGetFileSystemRepresentation(v33, 1u, buffer, 1024);
              CGPostError((uint64_t)"Failed to parse displayList resource from URL: %s", v36, v37, v38, v39, v40, v41, v42, (char)buffer);
            }
            CFRelease(v33);
          }
        }
        CFRelease(v23);
      }
      return 1;
    }
    else
    {
      CGPostError((uint64_t)"Failed to parse \"fileName\" attribute", v14, v15, v16, v17, v18, v19, v20, v43);
      return 0;
    }
  }
  return result;
}

uint64_t boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    MEMORY[0x186DC23C4](v2, 0xC400A2AC0F1);
  v4 = (void **)(a1 + 24);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](&v4);
  std::__list_imp<long long>::clear((_QWORD *)a1);
  return a1;
}

void DisplayListXMLParserResourceCFTypeRef::~DisplayListXMLParserResourceCFTypeRef(DisplayListXMLParserResourceCFTypeRef *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserResource::parseChildElements(DisplayListXMLParserResource *this, _xmlNode *a2)
{
  return 1;
}

void DisplayListXMLParserResourceDisplayList::~DisplayListXMLParserResourceDisplayList(DisplayListXMLParserResourceDisplayList *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceFunction::~DisplayListXMLParserResourceFunction(DisplayListXMLParserResourceFunction *this)
{
  JUMPOUT(0x186DC23C4);
}

void _softMaskDrawSoftMaskCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
      CGDisplayListDrawInContext(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void _softMaskReleaseInfoCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void DisplayListXMLParserResourceSoftMask::~DisplayListXMLParserResourceSoftMask(DisplayListXMLParserResourceSoftMask *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceStyle::~DisplayListXMLParserResourceStyle(DisplayListXMLParserResourceStyle *this)
{
  JUMPOUT(0x186DC23C4);
}

void _patternDrawPatternCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
      CGDisplayListDrawInContext(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void _patternReleaseInfoCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void DisplayListXMLParserResourcePattern::~DisplayListXMLParserResourcePattern(DisplayListXMLParserResourcePattern *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceGradient::~DisplayListXMLParserResourceGradient(DisplayListXMLParserResourceGradient *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserResourceGradient::parseChildElements(DisplayListXMLParserResourceGradient *this, _xmlNode *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  const char *v24;
  void *v25[3];
  void *v26[3];

  v12 = v4[3];
  if (!v12)
  {
    v24 = "DisplayListResourceGradient returned NULL for getColorSpaceResource()";
LABEL_16:
    CGPostError((uint64_t)v24, v5, v6, v7, v8, v9, v10, v11, (char)v25[0]);
    return 0;
  }
  v13 = *(_QWORD **)(v12 + 16);
  if (!v13)
  {
    v24 = "DisplayListResourceColorSpace returned NULL for getColorSpace()";
    goto LABEL_16;
  }
  v14 = v4;
  memset(v26, 0, sizeof(v26));
  CG::DisplayListXMLHelper::parseCGFloatArrayFromElement((uint64_t)a2, (xmlChar *)"components", v26);
  memset(v25, 0, sizeof(v25));
  CG::DisplayListXMLHelper::parseCGFloatArrayFromElement((uint64_t)a2, (xmlChar *)"locations", v25);
  v15 = v26[0];
  v16 = v25[0];
  v20 = CGGradientCreateWithColorComponentsAndOptions(v13, (uint64_t)v26[0], (uint64_t)v25[0], *((_QWORD *)this + 3), 0, v17, v18, v19);
  if (v20)
  {
    v21 = (const void *)v20;
    v22 = (const void *)v14[2];
    if (v22 != v21)
    {
      if (v22)
        CFRelease(v22);
      CFRetain(v21);
      v14[2] = v21;
    }
    CFRelease(v21);
  }
  if (v16)
    operator delete(v16);
  if (v15)
    operator delete(v15);
  return 1;
}

void sub_184B6FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;

  if (v12)
    operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DisplayListXMLParserResourceShading::~DisplayListXMLParserResourceShading(DisplayListXMLParserResourceShading *this)
{
  JUMPOUT(0x186DC23C4);
}

void CG::DisplayListResourceImage::setImage(CG::DisplayListResourceImage *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 2);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    if (cf)
      CFRetain(cf);
    *((_QWORD *)this + 2) = cf;
  }
}

void DisplayListXMLParserResourceImage::~DisplayListXMLParserResourceImage(DisplayListXMLParserResourceImage *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceFont::~DisplayListXMLParserResourceFont(DisplayListXMLParserResourceFont *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceDash::~DisplayListXMLParserResourceDash(DisplayListXMLParserResourceDash *this)
{
  JUMPOUT(0x186DC23C4);
}

BOOL DisplayListXMLParserResourceDash::parseChildElements(DisplayListXMLParserResourceDash *this, _xmlNode *a2)
{
  const void *v4;
  void *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  _xmlNode *children;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char *String;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *__p;
  char v40;
  void *v41[2];
  char v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  std::string v48;
  _BYTE v49[16];
  void *v50;
  char v51;
  void *v52;
  char v53;
  __int128 v54;
  char v55;
  void *v56;
  char v57;
  char *v58[2];
  char v59;

  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 4);
  if (!v6)
    return 0;
  v7 = (double *)malloc_type_malloc(8 * v6, 0x705560E0uLL);
  if (!v7)
    return 0;
  v8 = v7;
  children = a2->children;
  if (!children)
    goto LABEL_31;
  while (xmlStrcmp(children->name, (const xmlChar *)"pattern"))
  {
    children = children->next;
    if (!children)
      goto LABEL_31;
  }
  v17 = (uint64_t)children->children;
  if (!v17 || *(_DWORD *)(v17 + 8) != 3)
  {
    CGPostError((uint64_t)"XML node of dash resource does not contain a \"pattern\" child", v17, v10, v11, v12, v13, v14, v15, v31);
    goto LABEL_31;
  }
  String = (char *)xmlNodeListGetString(*(xmlDocPtr *)(v17 + 64), (const xmlNode *)v17, 1);
  if (!String)
    goto LABEL_31;
  std::string::basic_string[abi:se180100]<0>(v58, String);
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v54, "[ ]");
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v49, (uint64_t *)v58, &v54);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v41, (uint64_t)v49);
  for (i = 0; ; ++i)
  {
    boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)&v32, (uint64_t)v49);
    if (v38)
      break;
    if (!v47)
      goto LABEL_44;
LABEL_21:
    v20 = *((_QWORD *)this + 4);
    if (v40 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v34);
    if (v33 < 0)
      operator delete(v32);
    if (i > v20)
      goto LABEL_50;
    if (!v47)
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    v8[i] = std::stod(&v48, 0);
    boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::increment((uint64_t)v41);
  }
  if (!v47 || v36 != v45 || v37 != v46)
    goto LABEL_21;
LABEL_44:
  if (v40 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
LABEL_50:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete((void *)v54);
  if (v59 < 0)
    operator delete(v58[0]);
LABEL_31:
  v21 = *((_QWORD *)this + 4);
  v16 = v21 != 0;
  if (v21)
  {
    v22 = *((_QWORD *)this + 3);
    v23 = (unsigned int *)malloc_type_calloc(1uLL, 8 * v21 + 24, 0x64A29F66uLL);
    *v23 = 1;
    *((_QWORD *)v23 + 1) = v22;
    *((_QWORD *)v23 + 2) = v21;
    memcpy(v23 + 6, v8, 8 * v21);
    v24 = (unsigned int *)*((_QWORD *)v5 + 2);
    if (v24 != v23)
    {
      if (v24)
      {
        do
        {
          v25 = __ldxr(v24);
          v26 = v25 - 1;
        }
        while (__stxr(v26, v24));
        if (!v26)
          free(v24);
      }
      do
        v27 = __ldxr(v23);
      while (__stxr(v27 + 1, v23));
      *((_QWORD *)v5 + 2) = v23;
    }
    do
    {
      v28 = __ldxr(v23);
      v29 = v28 - 1;
    }
    while (__stxr(v29, v23));
    if (!v29)
      free(v23);
  }
  free(v8);
  return v16;
}

void sub_184B7053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a38);
  boost::char_separator<char,std::char_traits<char>>::~char_separator(v38 - 168);
  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  _Unwind_Resume(a1);
}

uint64_t boost::char_separator<char,std::char_traits<char>>::char_separator(uint64_t a1, char *a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::string::basic_string[abi:se180100]<0>((char **)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_184B705D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  *(_QWORD *)a1 = v5;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  *(_QWORD *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a3 + 6);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a3 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  return a1;
}

void sub_184B706B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(uint64_t a1, uint64_t a2)
{
  std::string v4;
  std::string __p;
  uint64_t v6;
  char v7;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v4 = *(std::string *)(a2 + 16);
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    __p = *(std::string *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a1, (__int128 *)&v4, *(std::string::value_type **)a2, *(std::string::value_type **)(a2 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_184B70794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end(uint64_t a1, uint64_t a2)
{
  std::string v4;
  std::string __p;
  uint64_t v6;
  char v7;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v4 = *(std::string *)(a2 + 16);
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    __p = *(std::string *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a1, (__int128 *)&v4, *(std::string::value_type **)(a2 + 8), *(std::string::value_type **)(a2 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_184B70888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::increment(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 80))
    __assert_rtn("increment", "token_iterator.hpp", 54, "valid_");
  result = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(a1, (std::string::value_type **)(a1 + 64), *(std::string::value_type **)(a1 + 72), (std::string *)(a1 + 88));
  *(_BYTE *)(a1 + 80) = result;
  return result;
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t boost::char_separator<char,std::char_traits<char>>::~char_separator(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void CG::DisplayListResourceDash::setDash(uint64_t a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(unsigned int **)(a1 + 16);
  if (v3 != a2)
  {
    if (v3)
    {
      do
      {
        v5 = __ldxr(v3);
        v6 = v5 - 1;
      }
      while (__stxr(v6, v3));
      if (!v6)
        free(v3);
    }
    if (a2)
    {
      do
        v7 = __ldxr(a2);
      while (__stxr(v7 + 1, a2));
    }
    *(_QWORD *)(a1 + 16) = a2;
  }
}

uint64_t boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  std::string::value_type *v8;
  _BOOL4 is_dropped;
  BOOL is_kept;
  std::string::value_type *v11;
  uint64_t v12;
  _BOOL4 v13;
  std::string::value_type *v14;

  v8 = *a2;
  if (*(_DWORD *)(a1 + 52))
    goto LABEL_2;
  if (v8 == a3)
    return 0;
  while (1)
  {
    is_dropped = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v8);
    v8 = *a2;
    if (!is_dropped)
      break;
    *a2 = ++v8;
    if (v8 == a3)
    {
      v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          ++*a2;
          *(_BYTE *)(a1 + 56) = 0;
LABEL_25:
          std::string::__assign_trivial[abi:se180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(_BYTE *)(a1 + 56) || !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2))
      {
        v13 = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2);
        v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          v8 = v14;
        }
        while (v14 != a3
             && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v14)
             && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
        {
          v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(_BYTE *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(_BYTE *)(a1 + 56))
    {
      v12 = 1;
      *(_BYTE *)(a1 + 56) = 1;
      std::string::__assign_trivial[abi:se180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    is_kept = boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8);
    v11 = *a2;
    if (is_kept)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3
           && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v11)
           && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
      {
        v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_dropped(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 49))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x4000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x4000;
  v2 = v3 == 0;
  return !v2;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_kept(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x2000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x2000;
  v2 = v3 == 0;
  return !v2;
}

void std::string::__assign_trivial[abi:se180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(uint64_t a1, __int128 *a2, std::string::value_type *a3, std::string::value_type *a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v8;
  }
  v9 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = a3;
  *(_BYTE *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 72) = a4;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3 == a4)
    v13 = 0;
  else
    v13 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(a1, (std::string::value_type **)(a1 + 64), a4, (std::string *)(a1 + 88));
  *(_BYTE *)(a1 + 80) = v13;
  return a1;
}

void sub_184B70EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CGColorSpaceRef DisplayListXMLParserResourceColorSpace::createCGColorSpaceFromAttributeName(uint64_t a1, char *a2)
{
  const char *v2;
  const __CFString *v3;
  const __CFString *v4;
  CGColorSpaceRef v5;

  v2 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes(a1, a2);
  if (!v2)
    return 0;
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = CGColorSpaceCreateWithName(v3);
  CFRelease(v4);
  return v5;
}

void DisplayListXMLParserResourceColorSpace::~DisplayListXMLParserResourceColorSpace(DisplayListXMLParserResourceColorSpace *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceColor::~DisplayListXMLParserResourceColor(DisplayListXMLParserResourceColor *this)
{
  JUMPOUT(0x186DC23C4);
}

void DisplayListXMLParserResourceClip::~DisplayListXMLParserResourceClip(DisplayListXMLParserResourceClip *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t DisplayListXMLParserResourceClip::parseChildElements(DisplayListXMLParserResourceClip *this, _xmlNode *a2)
{
  const void *v4;
  void *v5;
  char *v6;
  _xmlNode *children;
  _xmlNode *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  unint64_t v19;
  BOOL v20;
  CGFloat *v21;
  _xmlNode *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _xmlNode *v30;
  const char *v31;
  const __CFString *v32;
  CFURLRef v33;
  const void *v34;
  const void *v35;
  unsigned int *v36;
  unsigned int *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const __CFAllocator *alloc;
  double v43[4];
  xmlChar v44[8];
  _QWORD *v45;
  void *__p;
  CGFloat v47;
  const char *v48;
  CGFloat v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  const char *v54;
  int v55;
  const char *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  else
    v5 = 0;
  v6 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)v6 = 1;
  *((_DWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(CGRect *)(v6 + 48) = CGRectInfinite;
  *(CGRect *)(v6 + 80) = CGRectInfinite;
  *(CGRect *)(v6 + 16) = CGRectInfinite;
  *((_QWORD *)v6 + 14) = 3;
  *((_QWORD *)v6 + 15) = 0;
  *((_QWORD *)v6 + 16) = 0;
  children = a2->children;
  if (!children)
  {
LABEL_7:
    CGClipStackAddRect((uint64_t)v6, 1, *((CGFloat *)this + 3), *((CGFloat *)this + 4), *((CGFloat *)this + 5), *((CGFloat *)this + 6));
    goto LABEL_8;
  }
  while (xmlStrcmp(children->name, (const xmlChar *)"stack"))
  {
    children = children->next;
    if (!children)
      goto LABEL_7;
  }
  v9 = children->children;
  if (!v9)
  {
LABEL_8:
    CG::DisplayListResourceClip::setClipStack((uint64_t)v5, (uint64_t)v6);
    CGClipStackRelease(v6);
    return 1;
  }
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (v9->type != XML_ELEMENT_NODE)
  {
LABEL_46:
    v9 = v9->next;
    if (!v9)
      goto LABEL_8;
  }
  if (!xmlStrcmp(v9->name, (const xmlChar *)"clip"))
  {
    CG::DisplayListXMLHelper::parseAttributesFromNode(v44, v9);
    std::string::basic_string[abi:se180100]<0>((char **)&__p, "type");
    v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v44, &__p);
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
    if (&v45 == v17)
      goto LABEL_45;
    __p = "none";
    LODWORD(v47) = -1;
    v48 = "rect";
    LODWORD(v49) = 0;
    v50 = "glyphs_obsolete";
    v51 = 1;
    v52 = "path";
    v53 = 2;
    v54 = "mask";
    v55 = 3;
    v56 = "text";
    v57 = 4;
    v18 = (const char *)(v17 + 7);
    if (*((char *)v17 + 79) < 0)
      v18 = *(const char **)v18;
    v19 = 0;
    v20 = 1;
    v21 = &v47;
    while (strcmp(v18, *((const char **)v21 - 1)))
    {
      v20 = v19 < 5;
      v21 += 2;
      if (++v19 == 6)
        goto LABEL_45;
    }
    if (!v20)
      goto LABEL_45;
    switch(*(_DWORD *)v21)
    {
      case 0:
        CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v44, "rect", (uint64_t)&__p);
        v29 = (char *)CGClipCreateWithRect((CGAffineTransform *)&CGAffineTransformIdentity, 1, *(CGFloat *)&__p, v47, *(CGFloat *)&v48, v49);
        goto LABEL_25;
      case 2:
        v30 = v9->children;
        if (!v30)
          goto LABEL_30;
        break;
      case 3:
        if ((CG::DisplayListXMLHelper::parseRectFromAttributes((uint64_t)v44, "rect", (uint64_t)v43) & 1) == 0)
          goto LABEL_45;
        if (!CG::DisplayListXMLHelper::parseAffineTransformFromAttributes((uint64_t)v44, "matrix", (uint64_t)&__p))
          goto LABEL_45;
        v31 = (const char *)CG::DisplayListXMLHelper::parseStringFromAttributes((uint64_t)v44, "maskImage");
        if (!v31)
          goto LABEL_45;
        v32 = CFStringCreateWithCString(alloc, v31, 0x8000100u);
        if (v32)
        {
          v33 = CFURLCreateCopyAppendingPathComponent(alloc, *(CFURLRef *)(*((_QWORD *)this + 2) + 24), v32, 0);
          if (v33)
          {
            if (DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate != -1)
              dispatch_once(&DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate, &__block_literal_global_48_3966);
            v34 = (const void *)DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f(v33, 0);
            if (v34)
            {
              if (DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate != -1)
                dispatch_once(&DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::predicate, &__block_literal_global_51_3967);
              v35 = (const void *)DisplayListXMLParserResourceClip::parseClipNode(_xmlNode *)::f(v34, 0, 0);
              if (v35)
              {
                v40 = v35;
                v41 = v34;
                v36 = (unsigned int *)CGClipMaskCreate(&CGAffineTransformIdentity, v35, v43[0], v43[1], v43[2], v43[3]);
                if (v36)
                {
                  v37 = v36;
                  v29 = (char *)CGClipCreateWithMask(v36, 1);
                  CGClipMaskRelease(v37);
                }
                else
                {
                  v29 = 0;
                }
                v34 = v41;
                CFRelease(v40);
              }
              else
              {
                v29 = 0;
              }
              CFRelease(v34);
            }
            else
            {
              v29 = 0;
            }
            CFRelease(v33);
          }
          else
          {
            v29 = 0;
          }
          CFRelease(v32);
        }
        else
        {
          v29 = 0;
        }
        goto LABEL_25;
      case 4:
        CGPostError((uint64_t)"%s: kCGClipTypeTextClipping is unimplemented", (uint64_t)v22, v23, v24, v25, v26, v27, v28, (char)"CGClipRef DisplayListXMLParserResourceClip::parseClipNode(xmlNodePtr)");
        goto LABEL_45;
      default:
        goto LABEL_45;
    }
    while (xmlStrcmp(v30->name, (const xmlChar *)"cgpath"))
    {
      v30 = v30->next;
      if (!v30)
      {
LABEL_30:
        CGPostError((uint64_t)"%s: Failed to get \"%s\" node", (uint64_t)v22, v23, v24, v25, v26, v27, v28, (char)"CGClipRef DisplayListXMLParserResourceClip::parseClipNode(xmlNodePtr)");
        goto LABEL_45;
      }
    }
    v38 = (const void *)CG::DisplayListXMLHelper::parseCGPathFromNode((CG::DisplayListXMLHelper *)v30, v22);
    v39 = v38;
    if (v38)
    {
      v29 = (char *)CGClipCreateWithPath(v38, 0, 1, 1.0);
      CFRelease(v39);
LABEL_25:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v45);
      if (v29)
      {
        CGClipStackAddClip((uint64_t)v6, (uint64_t)v29);
        CGClipRelease(v29);
      }
    }
    else
    {
LABEL_45:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v45);
    }
    goto LABEL_46;
  }
  CGPostError((uint64_t)"%s: Unexpected child node name. Expected \"clip\", got \"%s\"", v10, v11, v12, v13, v14, v15, v16, (char)"virtual BOOL DisplayListXMLParserResourceClip::parseChildElements(xmlNodePtr)");
  return 0;
}

void sub_184B714F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a19);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

uint64_t boost::shared_array<boost::default_color_type>::operator[](uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;

  if (!a1)
  {
    v3 = "px != 0";
    v4 = 199;
    goto LABEL_6;
  }
  if (a2 < 0)
  {
    v3 = "i >= 0";
    v4 = 200;
LABEL_6:
    __assert_rtn("operator[]", "shared_array.hpp", v4, v3);
  }
  return a1 + 4 * a2;
}

void boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,unsigned long>>,boost::detail::nontruth2>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v30;
  char *i;
  unint64_t v32;
  unint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  i = 0;
  v32 = 0;
  *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, a2) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 32) - v7) >> 3) <= a2)
LABEL_20:
    __break(1u);
  v8 = (uint64_t *)(v7 + 56 * a2);
  v10 = *v8;
  v9 = v8[1];
  v33 = a2;
  v34 = 0;
  *(_QWORD *)&v37 = v10;
  *((_QWORD *)&v37 + 1) = a2;
  *(_QWORD *)&v38 = v9;
  *((_QWORD *)&v38 + 1) = a2;
  v11 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v30, (uint64_t)&v33);
  for (i = v11; v30 != v11; *(_QWORD *)(v25 + 16) = v28)
  {
    v12 = *((_QWORD *)v11 - 9);
    if (*(v11 - 64))
      *(v11 - 64) = 0;
    v13 = (uint64_t *)*((_QWORD *)v11 - 4);
    v14 = *((_QWORD *)v11 - 3);
    v16 = (uint64_t *)*((_QWORD *)v11 - 2);
    v15 = *((_QWORD *)v11 - 1);
    i = v11 - 72;
    v11 -= 72;
    while (v13 != v16)
    {
      v17 = *v13;
      v18 = *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, *v13);
      if (v18)
      {
        if (v18 == 1)
          boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>::back_edge<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS> const>();
        v13 += 2;
      }
      else
      {
        v19 = *v13;
        v20 = v13[1] + 32;
        v33 = v12;
        *(_QWORD *)&v35 = v14;
        *((_QWORD *)&v35 + 1) = v19;
        v34 = 1;
        v36 = v20;
        *(_QWORD *)&v37 = v13 + 2;
        *((_QWORD *)&v37 + 1) = v14;
        *(_QWORD *)&v38 = v16;
        *((_QWORD *)&v38 + 1) = v15;
        if ((unint64_t)v11 >= v32)
        {
          v11 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v30, (uint64_t)&v33);
        }
        else
        {
          *(_QWORD *)v11 = v12;
          v11[8] = 0;
          if (v34)
          {
            v21 = v35;
            *((_QWORD *)v11 + 4) = v36;
            *((_OWORD *)v11 + 1) = v21;
            v11[8] = 1;
          }
          v22 = v37;
          *(_OWORD *)(v11 + 56) = v38;
          *(_OWORD *)(v11 + 40) = v22;
          v11 += 72;
        }
        i = v11;
        *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v17) = 1;
        v23 = *(_QWORD *)(a1 + 24);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 32) - v23) >> 3) <= v17)
          goto LABEL_20;
        v24 = (uint64_t **)(v23 + 56 * v17);
        v13 = *v24;
        v16 = v24[1];
        v15 = v17;
        v12 = v17;
        v14 = v17;
      }
    }
    *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v12) = 4;
    v25 = *(_QWORD *)(a3 + 8);
    v26 = operator new(0x18uLL);
    v26[2] = v12;
    *v26 = v25;
    v27 = *(_QWORD **)(v25 + 8);
    v26[1] = v27;
    *v27 = v26;
    v28 = *(_QWORD *)(v25 + 16) + 1;
    *(_QWORD *)(v25 + 8) = v26;
  }
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:se180100](&v30);
}

void sub_184B71A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:se180100]((char **)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7)
    v8 = 0x38E38E38E38E38ELL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:se180100]();
    v9 = (char *)operator new(72 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[72 * v4];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  v10[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v11 = &v9[72 * v4];
    *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
    v10[8] = 1;
  }
  v12 = &v9[72 * v8];
  v13 = &v9[72 * v4];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 56);
  v14 = v10 + 72;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v10[v15];
      v17 = &v2[v15];
      *((_QWORD *)v16 - 9) = *(_QWORD *)&v2[v15 - 72];
      *(v16 - 64) = 0;
      if (v2[v15 - 64])
      {
        v18 = *(_OWORD *)(v17 - 56);
        *((_QWORD *)v16 - 5) = *((_QWORD *)v17 - 5);
        *(_OWORD *)(v16 - 56) = v18;
        *(v16 - 64) = 1;
      }
      v19 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v15 -= 72;
    }
    while (&v2[v15] != v3);
    v20 = &v10[v15];
    v2 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v12;
    while (v21 != v2)
    {
      if (*(v21 - 64))
        *(v21 - 64) = 0;
      v21 -= 72;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

void boost::topo_sort_visitor<std::front_insert_iterator<std::list<unsigned long>>>::back_edge<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS> const>()
{
  std::logic_error v0;
  std::string v1;

  std::string::basic_string[abi:se180100]<0>(&v1.__r_.__value_.__l.__data_, "The graph must be a DAG.");
  std::logic_error::logic_error(&v0, &v1);
  v0.__vftable = (std::logic_error_vtbl *)off_1E1629718;
  if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1.__r_.__value_.__l.__data_);
  v0.__vftable = (std::logic_error_vtbl *)off_1E1629760;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12"
                                                            "147c76fa9d/Applications/Xcode.app/Contents/Developer/Platfor"
                                                            "ms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sd"
                                                            "k/usr/local/include/boost/graph/topological_sort.hpp";
  v1.__r_.__value_.__l.__size_ = (std::string::size_type)"void boost::topo_sort_visitor<std::front_insert_iterator<std::l"
                                                         "ist<unsigned long>>>::back_edge(const Edge &, Graph &) [OutputI"
                                                         "terator = std::front_insert_iterator<std::list<unsigned long>>,"
                                                         " Edge = boost::detail::edge_desc_impl<boost::bidirectional_tag,"
                                                         " unsigned long>, Graph = const boost::adjacency_list<boost::vec"
                                                         "S, boost::vecS, boost::bidirectionalS, boost::property<boost::v"
                                                         "ertex_color_t, boost::default_color_type>>]";
  v1.__r_.__value_.__r.__words[2] = 42;
  boost::throw_exception<boost::not_a_dag>(&v0, (int8x16_t *)&v1);
}

void std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:se180100](char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

void boost::throw_exception<boost::not_a_dag>(const std::logic_error *a1, int8x16_t *a2)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_1E16296A0;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *(_QWORD *)exception = &off_1E1629628;
  *((_QWORD *)exception + 1) = &unk_1E1629658;
  *((_QWORD *)exception + 3) = &unk_1E1629680;
  *((_QWORD *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x186DC2244](a1 + 8);
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::not_a_dag>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E16296A0;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = off_1E1629760;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = &unk_1E1629740;
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v4 = *(_QWORD *)(a1 + 32);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)v2 = &off_1E1629628;
    *(_QWORD *)(v2 + 8) = &unk_1E1629658;
    *(_QWORD *)(v2 + 24) = &unk_1E1629680;
    if (v4)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v8);
      v5 = v8;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)v2 = &off_1E1629628;
    *(_QWORD *)(v2 + 8) = &unk_1E1629658;
    *(_QWORD *)(v2 + 24) = &unk_1E1629680;
  }
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v2 + 32);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(v2 + 32) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return v2;
}

void sub_184B71FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::not_a_dag>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::not_a_dag>::wrapexcept((uint64_t)exception, a1);
}

void sub_184B7206C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x186DC2244](a1 + 8);
  JUMPOUT(0x186DC23C4);
}

void `non-virtual thunk to'boost::wrapexcept<boost::not_a_dag>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x186DC2244);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x186DC2244](a1);
  JUMPOUT(0x186DC23C4);
}

void `non-virtual thunk to'boost::wrapexcept<boost::not_a_dag>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x186DC2244);
}

{
  *a1 = &unk_1E1629740;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x186DC2244](a1 - 2);
  JUMPOUT(0x186DC23C4);
}

uint64_t boost::wrapexcept<boost::not_a_dag>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E16296A0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = off_1E1629760;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E1629740;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E1629628;
  *(_QWORD *)(a1 + 8) = &unk_1E1629658;
  *(_QWORD *)(a1 + 24) = &unk_1E1629680;
  return a1;
}

void boost::not_a_dag::~not_a_dag(boost::not_a_dag *this)
{
  MEMORY[0x186DC2244](this);
  JUMPOUT(0x186DC23C4);
}

void boost::bad_graph::~bad_graph(boost::bad_graph *this)
{
  MEMORY[0x186DC2244](this);
  JUMPOUT(0x186DC23C4);
}

void boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::~sp_counted_impl_pd()
{
  JUMPOUT(0x186DC23C4);
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x186DC23ACLL);
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:se180100](*(_QWORD *)(a2 + 8), (uint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:se180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:se180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:se180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void CG::DisplayListResourceCFTypeRef::~DisplayListResourceCFTypeRef(CG::DisplayListResourceCFTypeRef *this)
{
  CG::DisplayListResourceCFTypeRef::~DisplayListResourceCFTypeRef(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629598;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t CG::DisplayListResourceCFTypeRef::_equal_to(CG::DisplayListResourceCFTypeRef *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  const void *v7;
  const void *v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = (const void *)*((_QWORD *)this + 2);
    v8 = (const void *)*((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8)
      {
        result = CFEqual(v7, v8);
        if (!(_DWORD)result)
          return result;
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
        goto LABEL_9;
      }
    }
    else if (!v8)
    {
LABEL_9:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t CG::DisplayListResourceDisplayList::_equal_to(CG::DisplayListResourceDisplayList *this, const CG::DisplayListResource *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if (!this)
    __cxa_bad_typeid();
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v6, v7);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      if (v10)
      {
        if (v9 != v10)
        {
          result = CG::DisplayList::isEqualTo((CG::DisplayList *)(v9 + 16), (const CG::DisplayList *)(v10 + 16), a3);
          if (!(_DWORD)result)
            return result;
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
        }
        goto LABEL_10;
      }
    }
    else if (!v10)
    {
LABEL_10:
      result = std::type_info::operator==[abi:se180100](v6, v7);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

void CG::DisplayListResourceFunction::~DisplayListResourceFunction(CG::DisplayListResourceFunction *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E16294B8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E16294B8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

BOOL CG::DisplayListResourceFunction::_equal_to(CG::DisplayListResourceFunction *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

_QWORD *CG::DisplayListResourceSoftMask::getChildResources@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[3];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceSoftMask::_equal_to(CG::DisplayListResourceSoftMask *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

_QWORD *CG::DisplayListResourceGradient::getChildResources@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[3];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceGradient::_equal_to(CG::DisplayListResourceGradient *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

BOOL CG::DisplayListResourceFont::_equal_to(CG::DisplayListResourceFont *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8)
      {
        v11 = *(_DWORD *)(v7 + 24);
        v10 = (unsigned int *)(v7 + 24);
        v9 = v11;
        if (v11)
          goto LABEL_15;
        do
          v12 = __ldxr((unsigned int *)&get_identifier_identifier);
        while (__stxr(v12 + 1, (unsigned int *)&get_identifier_identifier));
        v13 = ~v12;
        while (!__ldxr(v10))
        {
          if (!__stxr(v13, v10))
            goto LABEL_14;
        }
        __clrex();
LABEL_14:
        v9 = *v10;
        v8 = *((_QWORD *)a2 + 2);
        if (v8)
        {
LABEL_15:
          v17 = *(_DWORD *)(v8 + 24);
          v15 = (unsigned int *)(v8 + 24);
          v16 = v17;
          if (!v17)
          {
            do
              v18 = __ldxr((unsigned int *)&get_identifier_identifier);
            while (__stxr(v18 + 1, (unsigned int *)&get_identifier_identifier));
            v19 = ~v18;
            while (!__ldxr(v15))
            {
              if (!__stxr(v19, v15))
                goto LABEL_22;
            }
            __clrex();
LABEL_22:
            v16 = *v15;
          }
        }
        else
        {
          v16 = 0;
        }
        if (v9 == v16)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
          goto LABEL_26;
        }
      }
    }
    else if (!v8)
    {
LABEL_26:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

void CG::DisplayListResourceDash::~DisplayListResourceDash(CG::DisplayListResourceDash *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E1629258;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    do
    {
      v2 = __ldxr(v1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, v1));
    if (!v3)
      free(v1);
  }
}

{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E1629258;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    do
    {
      v2 = __ldxr(v1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, v1));
    if (!v3)
      free(v1);
  }
  JUMPOUT(0x186DC23C4);
}

BOOL CG::DisplayListResourceDash::_equal_to(CG::DisplayListResourceDash *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (!v8 || CGDashCompare(v7, v8))
        return 0;
    }
    else if (v8)
    {
      return 0;
    }
    result = std::type_info::operator==[abi:se180100](v4, v5);
    if ((_DWORD)result)
      return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
  }
  return result;
}

BOOL CG::DisplayListResourceColorSpace::_equal_to(CG::DisplayListResourceColorSpace *this, const CG::DisplayListResource *a2)
{
  _BOOL8 result;

  if (!this)
    __cxa_bad_typeid();
  result = std::type_info::operator==[abi:se180100](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8));
  if (result)
    return *((_QWORD *)this + 2) == *((_QWORD *)a2 + 2) && *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
  return result;
}

uint64_t CG::DisplayListResourceClip::_equal_to(CG::DisplayListResourceClip *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8)
      {
        result = CGClipStackEquivalent(v7, v8);
        if (!(_DWORD)result)
          return result;
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
        goto LABEL_9;
      }
    }
    else if (!v8)
    {
LABEL_9:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](&v3);
  std::__list_imp<long long>::clear((_QWORD *)a1);
  return a1;
}

uint64_t boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,boost::no_property>,void *>,boost::no_property>>(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:se180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  return 1;
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,boost::property<boost::vertex_color_t,boost::default_color_type,boost::no_property>,boost::no_property,boost::no_property,boost::listS>::config::stored_vertex>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(56 * a1);
}

void CIDFontType2::~CIDFontType2(CIDFontType2 *this)
{
  CIDFontType2::~CIDFontType2(this);
  JUMPOUT(0x186DC23C4);
}

{
  *(_QWORD *)this = &off_1E1627EC8;
  CGFontIndexMapRelease(*((char **)this + 18));
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 16));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  PDFFont::~PDFFont(this);
}

uint64_t CIDFontType2::get_format(CIDFontType2 *this)
{
  return 5;
}

uint64_t *CIDFontType2::add_glyphs_to_layout(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  _WORD *v3;
  _WORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t **v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  char *v22;

  v4 = *(_WORD **)a3;
  v3 = *(_WORD **)(a3 + 8);
  if (v3 != *(_WORD **)a3)
  {
    v7 = (uint64_t)result;
    v8 = ((uint64_t)v3 - *(_QWORD *)a3) >> 1;
    v9 = result + 16;
    do
    {
      v10 = *(uint64_t **)(v7 + 128);
      v11 = v9;
      if (*(uint64_t **)(v7 + 120) == v9)
        goto LABEL_9;
      v12 = *(uint64_t **)(v7 + 128);
      v13 = v9;
      if (v10)
      {
        do
        {
          v11 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v13[2];
          v14 = *v11 == (_QWORD)v13;
          v13 = v11;
        }
        while (v14);
      }
      v15 = (unsigned __int16)*v4;
      if (*((unsigned __int16 *)v11 + 13) < v15)
      {
LABEL_9:
        if (v10)
          v16 = (uint64_t **)v11;
        else
          v16 = (uint64_t **)v9;
        if (v10)
          v17 = (uint64_t **)(v11 + 1);
        else
          v17 = (uint64_t **)v9;
      }
      else
      {
        v16 = (uint64_t **)v9;
        v17 = (uint64_t **)v9;
        if (v10)
        {
          v17 = (uint64_t **)v9;
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v10;
              v21 = *((unsigned __int16 *)v10 + 13);
              if (v15 >= v21)
                break;
              v10 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_16;
            }
            if (v21 >= v15)
              break;
            v17 = v16 + 1;
            v10 = v16[1];
            if (!v10)
              goto LABEL_16;
          }
        }
      }
      if (!*v17)
      {
LABEL_16:
        v18 = operator new(0x20uLL);
        v18[13] = *v4;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = v16;
        *v17 = (uint64_t *)v18;
        v19 = **(_QWORD **)(v7 + 120);
        if (v19)
        {
          *(_QWORD *)(v7 + 120) = v19;
          v20 = *v17;
        }
        else
        {
          v20 = (uint64_t *)v18;
        }
        result = std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 128), v20);
        ++*(_QWORD *)(v7 + 136);
      }
      ++v4;
    }
    while (v4 != v3);
    if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    {
      __break(1u);
    }
    else
    {
      v22 = (char *)(v7 + 64);
      if (*(char *)(v7 + 87) < 0)
        v22 = *(char **)v22;
      return layout_append_data(a2, v22, 2, *(const void **)a3, v8);
    }
  }
  return result;
}

void CIDFontType2::emit_references(CIDFontType2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if (*((_QWORD *)this + 17))
  {
    v8 = (_QWORD *)((char *)this + 64);
    if (*((char *)this + 87) < 0)
      v8 = (_QWORD *)*v8;
    PDFDocumentPrintNameReferencePair(**((_QWORD **)this + 1), (uint64_t)"/%N %R", (uint64_t)v8, *((_QWORD *)this + 14), a5, a6, a7, a8);
  }
}

void CIDFontType2::emit_definitions(CIDFontType2 *this)
{
  char **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *font_info;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  float v188;
  char *v189;
  char *v190;
  int v191;
  char *v192;
  char *v193;
  BOOL v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  char v198;
  unsigned __int16 v199;
  BOOL v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  const __CFData *embedded_font;
  CFIndex Length;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const UInt8 *BytePtr;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  unsigned __int16 v279;
  unsigned int v280;
  unsigned __int16 *v281;
  unsigned int v282;
  unsigned int v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  char **v303;
  _QWORD v304[3];
  uint64_t *v305;
  _QWORD *v306[2];
  CGGlyph glyphs;
  int advances;

  if (*((_QWORD *)this + 17))
  {
    v2 = (char **)((char *)this + 120);
    v3 = (uint64_t *)*((_QWORD *)this + 1);
    v4 = *v3;
    v5 = PDFXRefTableAddObject(*(_QWORD **)(*v3 + 464));
    PDFDocumentBeginObject(v4, *((_QWORD *)this + 14), v6, v7, v8, v9, v10, v11);
    PDFDocumentPrintf(v4, (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v285);
    PDFDocumentPrintf(v4, (uint64_t)"/Type /Font", v18, v19, v20, v21, v22, v23, v286);
    PDFDocumentPrintf(v4, (uint64_t)"/Subtype /Type0", v24, v25, v26, v27, v28, v29, v287);
    PDFDocumentPrintf(v4, (uint64_t)"/Encoding /Identity-H", v30, v31, v32, v33, v34, v35, v288);
    PDFDocumentPrintReference(v4, (uint64_t)"/DescendantFonts [%R]", v5, v36, v37, v38, v39, v40);
    v47 = (char **)((char *)this + 88);
    v48 = (char *)this + 88;
    if (*((char *)this + 111) < 0)
      v48 = *v47;
    PDFDocumentPrintf(v4, (uint64_t)"/BaseFont /%N", v41, v42, v43, v44, v45, v46, (uint64_t)v48);
    v49 = PDFXRefTableAddObject(*(_QWORD **)(v4 + 464));
    PDFDocumentPrintReference(v4, (uint64_t)"/ToUnicode %R", v49, v50, v51, v52, v53, v54);
    PDFDocumentPrintf(v4, (uint64_t)">>", v55, v56, v57, v58, v59, v60, v289);
    PDFDocumentEndObject(v4, v61, v62, v63, v64, v65, v66, v67);
    v305 = (uint64_t *)this;
    ToUnicode::write<std::set<unsigned short>>((uint64_t)&v305, v49, v2);
    v68 = **((_QWORD **)this + 1);
    PDFDocumentBeginObject(v68, v5, v69, v70, v71, v72, v73, v74);
    PDFDocumentPrintf(v68, (uint64_t)"<<", v75, v76, v77, v78, v79, v80, v290);
    PDFDocumentPrintf(v68, (uint64_t)"/Type /Font", v81, v82, v83, v84, v85, v86, v291);
    PDFDocumentPrintf(v68, (uint64_t)"/Subtype /CIDFontType2", v87, v88, v89, v90, v91, v92, v292);
    v99 = (char *)this + 88;
    if (*((char *)this + 111) < 0)
      v99 = *v47;
    PDFDocumentPrintf(v68, (uint64_t)"/BaseFont /%N", v93, v94, v95, v96, v97, v98, (uint64_t)v99);
    v100 = **((_QWORD **)this + 1);
    PDFDocumentPrintf(v100, (uint64_t)"/CIDSystemInfo <<", v101, v102, v103, v104, v105, v106, v293);
    PDFDocumentPrintf(v100, (uint64_t)"/Registry %T", v107, v108, v109, v110, v111, v112, (uint64_t)CFSTR("Adobe"));
    PDFDocumentPrintf(v100, (uint64_t)"/Ordering %T", v113, v114, v115, v116, v117, v118, (uint64_t)CFSTR("Identity"));
    PDFDocumentPrintf(v100, (uint64_t)"/Supplement 0", v119, v120, v121, v122, v123, v124, v294);
    PDFDocumentPrintf(v100, (uint64_t)">>", v125, v126, v127, v128, v129, v130, v295);
    v131 = PDFXRefTableAddObject(*(_QWORD **)(v68 + 464));
    PDFDocumentPrintReference(v68, (uint64_t)"/W %R", v131, v132, v133, v134, v135, v136);
    PDFDocumentPrintf(v68, (uint64_t)"/DW %d", v137, v138, v139, v140, v141, v142, 1000);
    FontDescriptor::FontDescriptor((FontDescriptor *)v304, this, 0);
    PDFDocumentPrintReference(v68, (uint64_t)"/FontDescriptor %R", v304[1], v143, v144, v145, v146, v147);
    v148 = *((_QWORD *)this + 2);
    if (v148
      && (v149 = atomic_load((unint64_t *)(v148 + 88))) != 0
      && CGPropertiesGetProperty(v149, CFSTR("com.apple.CoreGraphics.CGPDFFontData")))
    {
      v302 = 0;
    }
    else
    {
      v302 = PDFXRefTableAddObject(*(_QWORD **)(v68 + 464));
      PDFDocumentPrintReference(v68, (uint64_t)"/CIDToGIDMap %R", v302, v156, v157, v158, v159, v160);
    }
    PDFDocumentPrintf(v68, (uint64_t)">>", v150, v151, v152, v153, v154, v155, v296);
    PDFDocumentEndObject(v68, v161, v162, v163, v164, v165, v166, v167);
    v168 = **((_QWORD **)this + 1);
    PDFDocumentBeginObject(v168, v131, v169, v170, v171, v172, v173, v174);
    PDFDocumentPrintf(v168, (uint64_t)"[", v175, v176, v177, v178, v179, v180, v297);
    v306[0] = 0;
    v306[1] = 0;
    v305 = (uint64_t *)v306;
    font_info = (int *)get_font_info(*((_QWORD **)this + 2));
    v303 = v2;
    if (font_info)
      v188 = (float)font_info[2];
    else
      v188 = 0.0;
    v189 = (char *)*((_QWORD *)this + 15);
    v190 = (char *)this + 128;
    if (v189 != (char *)this + 128)
    {
      do
      {
        advances = 0;
        glyphs = *((_WORD *)v189 + 13);
        CGFontGetGlyphAdvances(*((CGFontRef *)this + 2), &glyphs, 1uLL, &advances);
        v191 = advances;
        *((_DWORD *)std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v305, glyphs, &glyphs)+ 8) = (int)((float)((float)(1000 * v191) / v188) + 0.5);
        v192 = (char *)*((_QWORD *)v189 + 1);
        if (v192)
        {
          do
          {
            v193 = v192;
            v192 = *(char **)v192;
          }
          while (v192);
        }
        else
        {
          do
          {
            v193 = (char *)*((_QWORD *)v189 + 2);
            v194 = *(_QWORD *)v193 == (_QWORD)v189;
            v189 = v193;
          }
          while (!v194);
        }
        v189 = v193;
      }
      while (v193 != v190);
    }
    v301 = (uint64_t *)((char *)this + 88);
    v195 = v305;
    while (v195 != (uint64_t *)v306)
    {
      v196 = v195;
      v197 = *((unsigned __int16 *)v195 + 14);
      v198 = 1;
      v199 = *((_WORD *)v195 + 14);
      while (*((unsigned __int16 *)v195 + 14) == v199)
      {
        v200 = *((_DWORD *)v195 + 8) == *((_DWORD *)v196 + 8);
        v201 = (uint64_t *)v195[1];
        if (v201)
        {
          do
          {
            v202 = v201;
            v201 = (uint64_t *)*v201;
          }
          while (v201);
        }
        else
        {
          do
          {
            v202 = (uint64_t *)v195[2];
            v194 = *v202 == (_QWORD)v195;
            v195 = v202;
          }
          while (!v194);
        }
        v198 &= v200;
        ++v199;
        v195 = v202;
        if (v202 == (uint64_t *)v306)
        {
          v195 = (uint64_t *)v306;
          break;
        }
      }
      if ((v198 & 1) != 0)
      {
        if (*((_DWORD *)v196 + 8) != 1000)
        {
          PDFDocumentPrintf(v168, (uint64_t)"%d", v182, v183, v184, v185, v186, v187, v197);
          PDFDocumentPrintf(v168, (uint64_t)"%d", v203, v204, v205, v206, v207, v208, v199 - 1);
          PDFDocumentPrintf(v168, (uint64_t)"%d", v209, v210, v211, v212, v213, v214, *((unsigned int *)v196 + 8));
        }
      }
      else
      {
        PDFDocumentPrintf(v168, (uint64_t)"%d [", v182, v183, v184, v185, v186, v187, v197);
        if (v196 != v195)
        {
          do
          {
            PDFDocumentPrintf(v168, (uint64_t)"%d", v215, v216, v217, v218, v219, v220, *((unsigned int *)v196 + 8));
            v221 = (uint64_t *)v196[1];
            if (v221)
            {
              do
              {
                v222 = v221;
                v221 = (uint64_t *)*v221;
              }
              while (v221);
            }
            else
            {
              do
              {
                v222 = (uint64_t *)v196[2];
                v194 = *v222 == (_QWORD)v196;
                v196 = v222;
              }
              while (!v194);
            }
            v196 = v222;
          }
          while (v222 != v195);
        }
        PDFDocumentPrintf(v168, (uint64_t)"]", v215, v216, v217, v218, v219, v220, v299);
      }
    }
    PDFDocumentPrintf(v168, (uint64_t)"]", v182, v183, v184, v185, v186, v187, v298);
    PDFDocumentEndObject(v168, v223, v224, v225, v226, v227, v228, v229);
    std::__tree<unsigned long>::destroy(v306[0]);
    v230 = PDFXRefTableAddObject(*(_QWORD **)(v68 + 464));
    FontDescriptor::emit_definition(v304, (uint64_t)v301, v230, v231, v232, v233, v234, v235);
    v236 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
    *(_DWORD *)v236 = 1;
    v237 = *v303;
    if (*v303 != v190)
    {
      do
      {
        CGFontIndexSetAddIndex(v236, *((unsigned __int16 *)v237 + 13));
        v238 = (char *)*((_QWORD *)v237 + 1);
        if (v238)
        {
          do
          {
            v239 = v238;
            v238 = *(char **)v238;
          }
          while (v238);
        }
        else
        {
          do
          {
            v239 = (char *)*((_QWORD *)v237 + 2);
            v194 = *(_QWORD *)v239 == (_QWORD)v237;
            v237 = v239;
          }
          while (!v194);
        }
        v237 = v239;
      }
      while (v239 != v190);
    }
    embedded_font = (const __CFData *)PDFFont::create_embedded_font(this, v301, (uint64_t)v236, 0, *((_QWORD *)this + 18));
    CGFontIndexSetRelease((uint64_t)v236);
    if (embedded_font)
    {
      Length = CFDataGetLength(embedded_font);
      if ((unint64_t)(Length - 0x80000000) >= 0xFFFFFFFF80000001)
      {
        v242 = Length;
        v243 = **((_QWORD **)this + 1);
        v244 = PDFStreamCreateWithObjectNumber(v243, v230);
        PDFDocumentBeginObject(*v244, v244[1], v245, v246, v247, v248, v249, v250);
        PDFDocumentPrintf(*v244, (uint64_t)"<<", v251, v252, v253, v254, v255, v256, v300);
        PDFDocumentPrintf(v243, (uint64_t)"/Length1 %d", v257, v258, v259, v260, v261, v262, v242);
        PDFStreamBeginData((CGDataConsumerRef)v244);
        BytePtr = CFDataGetBytePtr(embedded_font);
        CGDataConsumerPutBytes(v244[3], (uint64_t)BytePtr, v242);
        PDFStreamEndData(v244);
        PDFStreamEnd((CFDataRef *)v244);
        PDFStreamRelease((uint64_t)v244);
      }
      CFRelease(embedded_font);
    }
    if (v302)
    {
      v264 = PDFStreamCreateWithObjectNumber(**((_QWORD **)this + 1), v302);
      PDFDocumentBeginObject(*v264, v264[1], v265, v266, v267, v268, v269, v270);
      PDFDocumentPrintf(*v264, (uint64_t)"<<", v271, v272, v273, v274, v275, v276, v300);
      PDFStreamBeginData((CGDataConsumerRef)v264);
      v277 = (char *)*((_QWORD *)this + 16);
      if (v277)
      {
        do
        {
          v278 = v277;
          v277 = (char *)*((_QWORD *)v277 + 1);
        }
        while (v277);
      }
      else
      {
        do
        {
          v278 = (char *)*((_QWORD *)v190 + 2);
          v194 = *(_QWORD *)v278 == (_QWORD)v190;
          v190 = v278;
        }
        while (v194);
      }
      v279 = 0;
      v280 = *((unsigned __int16 *)v278 + 13);
      do
      {
        v281 = (unsigned __int16 *)*((_QWORD *)this + 18);
        if (v281)
        {
          if (v281 == (unsigned __int16 *)-1)
          {
            LOBYTE(v282) = HIBYTE(v279);
            LOBYTE(v283) = v279;
          }
          else
          {
            v284 = atomic_load((unint64_t *)&v281[4 * (v279 >> 10) + 4]);
            if (v284)
              v283 = *(unsigned __int16 *)(v284 + 2 * (v279 & 0x3FF));
            else
              v283 = *v281;
            v282 = v283 >> 8;
          }
        }
        else
        {
          LOBYTE(v283) = -1;
          LOBYTE(v282) = -1;
        }
        LOBYTE(v305) = v282;
        BYTE1(v305) = v283;
        CGDataConsumerPutBytes(v264[3], (uint64_t)&v305, 2);
        ++v279;
      }
      while (v280 >= v279);
      PDFStreamEndData(v264);
      PDFStreamEnd((CFDataRef *)v264);
      PDFStreamRelease((uint64_t)v264);
    }
  }
}

void sub_184B739B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<unsigned long>::destroy(a18);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 *v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[14];
        if (v8 <= a2)
          break;
        v5 = (unsigned __int16 *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x28uLL);
    *((_WORD *)v7 + 14) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = (uint64_t *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

float *filterAngles(float *result)
{
  uint64_t v1;
  int v2;
  float *v3;
  void *v4;
  uint64_t v5;
  float *v6;
  int v7;
  int v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float *v15;
  int v16;
  int v17;

  v1 = *((_QWORD *)result + 16);
  v2 = *(_DWORD *)v1;
  if (*(_DWORD *)v1)
  {
    v3 = result;
    v4 = (void *)*((_QWORD *)result + 18);
    if (v2 < 1)
      return (float *)memmove(*((void **)v3 + 19), v4, 4 * v2);
    v5 = 0;
    v6 = *(float **)(v1 + 8);
    do
    {
      v7 = v5 + 1;
      if ((int)v5 + 1 >= v2)
        v8 = v2;
      else
        v8 = 0;
      v9 = &v6[-2 * v8];
      v10 = *v6;
      v11 = v6[1];
      v6 += 2;
      v12 = atan2((float)(v9[3] - v11), (float)(v9[2] - v10)) * 0.159154937;
      if (v12 < 0.0)
        v12 = v12 + 1.0;
      *((float *)v4 + v5++) = v12;
    }
    while (v2 != v7);
    if (v2 > 23)
    {
      if (v2 > 0x37)
      {
        filterAngleBuffer((float *)v4, *((float **)v3 + 22), v2, 3, v3[7]);
        v15 = (float *)*((_QWORD *)v3 + 22);
        v14 = v3[7];
        if (v2 > 0x77)
        {
          filterAngleBuffer(v15, *((float **)v3 + 23), v2, 7, v14);
          v15 = (float *)*((_QWORD *)v3 + 23);
          v13 = (float *)*((_QWORD *)v3 + 19);
          v14 = v3[7];
          v16 = v2;
          v17 = 15;
        }
        else
        {
          v13 = (float *)*((_QWORD *)v3 + 19);
          v16 = v2;
          v17 = 7;
        }
      }
      else
      {
        v13 = (float *)*((_QWORD *)v3 + 19);
        v14 = v3[7];
        v15 = (float *)v4;
        v16 = v2;
        v17 = 3;
      }
      return filterAngleBuffer(v15, v13, v16, v17, v14);
    }
    else
    {
      return (float *)memmove(*((void **)v3 + 19), v4, 4 * v2);
    }
  }
  return result;
}

float *filterAngleBuffer(float *result, float *a2, int a3, int a4, float a5)
{
  int v5;
  float *v6;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;

  v5 = 0;
  v6 = result;
  do
  {
    v7 = *v6;
    if (v5)
      v8 = 0;
    else
      v8 = a3;
    v9 = v5 + v8;
    ++v5;
    v10 = v9 - 1;
    if (v5 >= a3)
      v11 = a3;
    else
      v11 = 0;
    v12 = v5 - v11;
    v13 = 1;
    v14 = a4;
    v15 = *v6;
    do
    {
      v16 = result[v12] - rintf(result[v12] - v7);
      if (vabds_f32(v16, v7) >= a5)
        v16 = -0.0;
      else
        ++v13;
      v17 = v15 + v16;
      v18 = result[v10] - rintf(result[v10] - v7);
      if (vabds_f32(v18, v7) >= a5)
        v18 = -0.0;
      else
        ++v13;
      v15 = v17 + v18;
      v19 = v12 + 1;
      if (v19 >= a3)
        v20 = a3;
      else
        v20 = 0;
      v12 = v19 - v20;
      if (v10 <= 0)
        v21 = a3;
      else
        v21 = 0;
      v10 = v10 + v21 - 1;
      --v14;
    }
    while (v14);
    *a2++ = (float)(v15 / (float)v13) - floorf(v15 / (float)v13);
    ++v6;
  }
  while (v5 != a3);
  return result;
}

void *CGPathCreateWithThresholdedImage(CGImage *a1, int a2, double a3, double a4)
{
  return createPath(a1, a2, 0, 0, 0, a3, a4);
}

void *createPath(CGImage *a1, int a2, uint64_t a3, uint64_t a4, int *a5, double a6, double a7)
{
  size_t v14;
  size_t v15;
  CGColorSpaceRef CalibratedGray;
  CGColorSpace *v17;
  void *v18;
  void *v19;
  CGContextRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  char *v29;
  _OWORD *v30;
  uint64_t v31;
  float v32;
  void *v33;
  _DWORD *v34;
  int v35;
  const char *v36;
  const void *v37;
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  signed int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  signed int v61;
  signed int v62;
  BOOL v63;
  _BOOL4 v64;
  int v65;
  _BOOL4 v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  signed int v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  float v81;
  float v82;
  signed int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  _BOOL4 v90;
  int v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unsigned __int8 v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  int v108;
  unsigned int v109;
  __int128 v110;
  void *v111;
  CFTypeRef cf;
  __int128 *v113;
  __int128 *v114;
  signed int v115;
  unint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  int v120;
  int v121;
  CGFloat whitePoint[2];
  uint64_t v123;
  _DWORD v124[256];
  uint64_t v125;
  CGRect v126;

  v125 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v14 = *((_QWORD *)a1 + 5);
  v15 = *((_QWORD *)a1 + 6);
  *(_OWORD *)whitePoint = xmmword_184F7CCA0;
  v123 = 0x3FEA6594AF4F0D84;
  CalibratedGray = CGColorSpaceCreateCalibratedGray(whitePoint, 0, 2.2);
  if (!CalibratedGray)
  {
    v36 = "Error allocating color space";
LABEL_20:
    printf(" ***** %s in autoTrace\n", v36);
    return 0;
  }
  v17 = CalibratedGray;
  v18 = malloc_type_malloc(v15 * v14, 0xCCFBEA90uLL);
  v19 = v18;
  if (!v18)
  {
    printf(" ***** %s in autoTrace\n", "Memory not allocated!");
    CGColorSpaceRelease(v17);
    return v19;
  }
  v120 = v15 * v14;
  v20 = CGBitmapContextCreateWithData(v18, v14, v15, 8uLL, v14, v17, 0, 0, 0);
  if (!v20)
  {
    free(v19);
    CGColorSpaceRelease(v17);
    v36 = "Context not created!";
    goto LABEL_20;
  }
  v21 = (uint64_t)v20;
  CGColorSpaceRelease(v17);
  v126.size.width = (double)v14;
  v126.size.height = (double)v15;
  v126.origin.x = 0.0;
  v126.origin.y = 0.0;
  CGContextDrawImage((CGContextRef)v21, v126, a1);
  v28 = (const void *)v21;
  if (*(_DWORD *)(v21 + 16) != 1129601108 || *(_DWORD *)(v21 + 24) != 4)
  {
    handle_invalid_context((char)"CGBitmapContextGetData", v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_17;
  }
  v29 = *(char **)(*(_QWORD *)(v21 + 32) + 64);
  if (!v29 || (v30 = malloc_type_malloc(0x100uLL, 0x10A00400CDB8DDBuLL)) == 0)
  {
LABEL_17:
    v37 = v28;
LABEL_18:
    CFRelease(v37);
    return 0;
  }
  v31 = (uint64_t)v30;
  v32 = a7;
  v30[14] = 0u;
  v30[15] = 0u;
  v30[12] = 0u;
  v30[13] = 0u;
  v30[10] = 0u;
  v30[11] = 0u;
  v30[8] = 0u;
  v30[9] = 0u;
  v30[6] = 0u;
  v30[7] = 0u;
  v30[4] = 0u;
  v30[5] = 0u;
  v30[2] = 0u;
  v30[3] = 0u;
  *v30 = 0u;
  v30[1] = 0u;
  *((_DWORD *)v30 + 9) = 1084227584;
  *((float *)v30 + 8) = v32;
  *((float *)v30 + 10) = v32;
  *((_DWORD *)v30 + 6) = v15;
  *((_DWORD *)v30 + 7) = 1034147594;
  v33 = malloc_type_malloc(0xC80uLL, 0x1020040F48FCA59uLL);
  *(_QWORD *)(v31 + 64) = v33;
  if (!v33)
  {
    printf(" ***** %s in autoTrace\n", "could not allocate extract polygons point list");
LABEL_26:
    printf(" ***** %s in autoTrace\n", "could not initialize AutoTrace environment");
    termAutoTraceEnvironment(v31);
    goto LABEL_17;
  }
  *(_QWORD *)(v31 + 56) = 0x6400000000;
  *(_DWORD *)(v31 + 72) = -1;
  if (!initOpenEndList((_QWORD *)(v31 + 96)))
  {
LABEL_25:
    termPolygonList(v31);
    goto LABEL_26;
  }
  v114 = (__int128 *)(v31 + 112);
  if (!initOpenEndList((_QWORD *)(v31 + 112)))
  {
    free(*(void **)(v31 + 104));
    goto LABEL_25;
  }
  *(_BYTE *)(v31 + 80) = 0;
  *(_DWORD *)(v31 + 92) = 0;
  *(_QWORD *)(v31 + 48) = CGPathCreateMutable();
  *(_QWORD *)v31 = a3;
  *(_QWORD *)(v31 + 8) = a4;
  v34 = (_DWORD *)(v31 + 16);
  v117 = (_QWORD *)v31;
  cf = v28;
  v113 = (__int128 *)(v31 + 96);
  if (a5)
  {
    v35 = *a5;
    *(_BYTE *)(v31 + 20) = *((_BYTE *)a5 + 4);
    *v34 = v35;
  }
  else
  {
    *(_BYTE *)(v31 + 20) = 0;
    *v34 = 0;
  }
  v39 = (int)v14;
  v40 = (int)v15;
  v41 = a6;
  if (v41 == 1.0)
    v42 = 0.9999;
  else
    v42 = a6;
  bzero(v124, 0x400uLL);
  if (v15 << 32)
  {
    v43 = 0;
    v44 = v29;
    do
    {
      if (v14 << 32)
      {
        v45 = 0;
        do
          ++v124[v44[v45++]];
        while ((int)v14 != v45);
      }
      ++v43;
      v44 += (int)v14;
    }
    while (v43 != (int)v15);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = (_QWORD *)v31;
  do
  {
    v50 = v124[v46];
    if (v50 > v47)
      v47 = v124[v46];
    if (v50 > v48)
      v47 = v48;
    else
      v50 = v48;
    ++v46;
    v48 = v50;
  }
  while (v46 != 256);
  v51 = 0;
  v52 = 0;
  if (a2)
    v53 = 255;
  else
    v53 = 0;
  v54 = vcvtms_s32_f32(v42 * 255.0);
  v55 = &v29[((int)v15 - 1) * v39];
  if (v39 + 1 > 1)
    v56 = v39 + 1;
  else
    v56 = 1;
  if ((unint64_t)((int)v15 + 1) > 1)
    v57 = (int)v15 + 1;
  else
    v57 = 1;
  v118 = &v29[((int)v15 - 1) * v39];
  v58 = v29;
  do
  {
    v59 = 0;
    v60 = 0;
    do
    {
      v61 = v53;
      if (v51)
      {
        v61 = v53;
        if (v39 != v60)
          v61 = v55[v60];
      }
      v62 = v53;
      if (v51 != (int)v15)
      {
        v62 = v53;
        if (v39 != v60)
          v62 = v58[v60];
      }
      v63 = v61 < v54;
      v64 = v61 <= v54;
      v65 = !v63;
      v63 = v62 < v54;
      v66 = v62 <= v54;
      v67 = !v63;
      if (!a2)
      {
        v66 = v67;
        v64 = v65;
      }
      if (v64)
        v68 = 4;
      else
        v68 = 0;
      v69 = v68 | v66;
      v70 = v69 | v59;
      if (v70 == 9 || v70 == 6)
        v72 = 2;
      else
        v72 = 1;
      v73 = v72 + v52;
      if (v70)
        v74 = v70 == 15;
      else
        v74 = 1;
      if (!v74)
        v52 = v73;
      v59 = 2 * v69;
      ++v60;
    }
    while (v56 != v60);
    ++v51;
    v55 = v58;
    v58 += v39;
  }
  while (v51 != v57);
  v75 = 0;
  *(_BYTE *)(v31 + 44) = (float)((float)(v120 - (v50 + v47)) / (float)v52) < 4.5;
  v76 = vcvtms_s32_f32((float)(v42 * 4.0) * 255.0);
  v111 = v29;
  v119 = v29;
  v115 = v76;
  while (2)
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    *((_DWORD *)v49 + 23) = 0;
    v81 = (float)v75 + -0.5;
    v82 = (float)v75 + 0.5;
    v83 = v53;
    v84 = v53;
    v116 = v75;
    do
    {
      v85 = v84;
      v86 = v83;
      v84 = v53;
      if (v75)
      {
        v84 = v53;
        if (v39 != v80)
          v84 = v118[v80];
      }
      v83 = v53;
      if (v75 != v40)
      {
        v83 = v53;
        if (v39 != v80)
          v83 = v119[v80];
      }
      v87 = v85 + v86 + v84 + v83;
      if (a2)
      {
        v88 = v84 <= v54;
        v89 = v83 <= v54;
        v90 = v87 <= v76;
      }
      else
      {
        v88 = v84 >= v54;
        v89 = v83 >= v54;
        v90 = v87 >= v76;
      }
      if (v88)
        v91 = 4;
      else
        v91 = 0;
      v92 = v79 | v89 | v91;
      if (v92 && v92 != 15)
      {
        v93 = 0.0;
        v94 = 0.0;
        if (v77 != v88)
          v94 = (float)-(float)((float)v85 - (float)(v42 * 255.0)) / (float)(v84 - v85);
        if (v77 != v78)
          v93 = (float)-(float)((float)v85 - (float)(v42 * 255.0)) / (float)(v86 - v85);
        v95 = 0.0;
        v96 = 0.0;
        if (v89 != v88)
          v96 = (float)-(float)((float)v84 - (float)(v42 * 255.0)) / (float)(v83 - v84);
        if (v78 != v89)
          v95 = (float)-(float)((float)v86 - (float)(v42 * 255.0)) / (float)(v83 - v86);
        v97 = (float)v80 + -0.5;
        v98 = v97 + v94;
        v99 = v81 + v93;
        v100 = v81 + v96;
        v101 = v97 + v95;
        v121 = v88;
        switch(v92)
        {
          case 1:
            goto LABEL_123;
          case 2:
          case 13:
            v102 = actionD((uint64_t)v117, (float)v80 + -0.5, v99, v97 + v95, v82);
            goto LABEL_125;
          case 3:
          case 12:
            v102 = actionE((uint64_t)v117, (float)v80 + -0.5, v99, (float)v80 + 0.5, v81 + v96);
            goto LABEL_125;
          case 4:
          case 11:
            goto LABEL_119;
          case 5:
          case 10:
            v102 = actionC((uint64_t)v117, v97 + v94, v81, v97 + v95, v82);
            goto LABEL_125;
          case 6:
            if (!v90)
              goto LABEL_118;
            if (!actionA(v117, v97 + v94, v81, v97, v99))
              goto LABEL_129;
            v103 = (uint64_t)v117;
            v104 = (float)v80 + 0.5;
            v105 = v100;
            v106 = v101;
            v107 = v82;
            v108 = 1;
            goto LABEL_124;
          case 7:
          case 8:
            v102 = actionA(v117, v97 + v94, v81, v97, v99);
            goto LABEL_125;
          case 9:
            if (v90)
            {
LABEL_118:
              if (!actionD((uint64_t)v117, (float)v80 + -0.5, v99, v97 + v95, v82))
                goto LABEL_129;
LABEL_119:
              v102 = actionB((uint64_t)v117, v98, v81, (float)v80 + 0.5, v100);
            }
            else
            {
              if (!actionA(v117, v97 + v94, v81, v97, v99))
                goto LABEL_129;
LABEL_123:
              v103 = (uint64_t)v117;
              v104 = (float)v80 + 0.5;
              v105 = v100;
              v106 = v101;
              v107 = v82;
              v108 = 0;
LABEL_124:
              v102 = actionF(v103, v108, v104, v105, v106, v107);
            }
LABEL_125:
            v88 = v121;
            v76 = v115;
            v75 = v116;
            if ((v102 & 1) != 0)
              goto LABEL_126;
LABEL_129:
            printf(" ***** %s in autoTrace\n", "errors during bitmapToPolygons");
            termAutoTraceEnvironment((uint64_t)v117);
            v37 = cf;
            break;
          case 14:
            v109 = actionF((uint64_t)v117, 1, (float)v80 + 0.5, v81 + v96, v97 + v95, v82);
            v88 = v121;
            v76 = v115;
            v75 = v116;
            if (v109)
              goto LABEL_126;
            goto LABEL_129;
          default:
            goto LABEL_126;
        }
        goto LABEL_18;
      }
LABEL_126:
      v79 = (2 * v92) & 0xA;
      ++v80;
      v77 = v88;
      v78 = v89;
    }
    while (v80 <= v39);
    v110 = *v113;
    *v113 = *v114;
    *v114 = v110;
    *(_DWORD *)v114 = 0;
    ++v75;
    v118 = v119;
    v119 += v39;
    v49 = v117;
    if (v75 <= v40)
      continue;
    break;
  }
  CFRelease(cf);
  free(v111);
  v19 = (void *)v117[6];
  v117[6] = 0;
  termAutoTraceEnvironment((uint64_t)v117);
  return v19;
}

BOOL initOpenEndList(_QWORD *a1)
{
  void *v2;

  v2 = malloc_type_malloc(0xFA0uLL, 0x100004090D0E795uLL);
  a1[1] = v2;
  if (v2)
    *a1 = 0x1F400000000;
  else
    printf(" ***** %s in autoTrace\n", "could not allocate extract polygons open end list");
  return v2 != 0;
}

void termPolygonList(uint64_t a1)
{
  void **v2;
  int v3;
  void **v4;
  void *v5;

  v2 = *(void ***)(a1 + 64);
  if (*(int *)(a1 + 56) >= 1)
  {
    v3 = 0;
    v4 = v2 + 1;
    do
    {
      v5 = *v4;
      v4 += 4;
      free(v5);
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 56));
    v2 = *(void ***)(a1 + 64);
  }
  free(v2);
}

void termAutoTraceEnvironment(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  freeAutoTraceStructures(a1);
  termPolygonList(a1);
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 120));
  v2 = *(void **)(a1 + 192);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v3 = *(void **)(a1 + 208);
  if (v3)
    free(v3);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = *(void **)(a1 + 224);
  if (v4)
    free(v4);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v5 = *(void **)(a1 + 240);
  if (v5)
    free(v5);
  free((void *)a1);
}

float *actionF(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  float *result;
  float *v21;
  char v22;
  const char *v23;
  unint64_t v24;

  v12 = *(int *)(a1 + 72);
  if ((_DWORD)v12 == -1)
  {
    v14 = *(_DWORD *)(a1 + 56);
    v15 = *(_DWORD *)(a1 + 60);
    if (v14 >= v15)
    {
      v17 = malloc_type_malloc(32 * (v15 + 100), 0x1020040F48FCA59uLL);
      if (!v17)
      {
        v23 = "could not extend extract polygons list";
        goto LABEL_18;
      }
      v16 = v17;
      memmove(v17, *(const void **)(a1 + 64), 32 * *(int *)(a1 + 60));
      *(_DWORD *)(a1 + 60) += 100;
      free(*(void **)(a1 + 64));
      *(_QWORD *)(a1 + 64) = v16;
      v14 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v16 = *(void **)(a1 + 64);
    }
    v13 = (uint64_t)v16 + 32 * v14;
    *(_DWORD *)(a1 + 56) = v14 + 1;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 64) + 32 * v12;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v13 + 24);
  }
  v18 = malloc_type_malloc(0x190uLL, 0x100004000313F17uLL);
  *(_QWORD *)(v13 + 8) = v18;
  if (!v18)
  {
    v23 = "could not allocate extract polygons point list";
    goto LABEL_18;
  }
  *(_QWORD *)v13 = 0x3200000000;
  *(_DWORD *)(v13 + 16) = 25;
  *(_BYTE *)(v13 + 20) = 0;
  *(_DWORD *)(v13 + 24) = -2;
  v19 = *(_QWORD *)(a1 + 64);
  result = (float *)addPointAtEnd((int *)v13);
  if (result)
  {
    v21 = result;
    result = (float *)addPointAtEnd((int *)v13);
    if (result)
    {
      if (a2)
      {
        *v21 = a5;
        v21[1] = a6;
        v22 = *(_BYTE *)(a1 + 80);
        if (!v22)
        {
          a5 = a3;
          a6 = a4;
          goto LABEL_21;
        }
      }
      else
      {
        *v21 = a3;
        v21[1] = a4;
        if (!*(_BYTE *)(a1 + 80))
        {
          v22 = 1;
LABEL_21:
          *(_BYTE *)(a1 + 80) = 1;
          v24 = (unint64_t)(v13 - v19) >> 5;
          *(_DWORD *)(a1 + 84) = v24;
          *(_BYTE *)(a1 + 88) = v22;
          *result = a5;
          result[1] = a6;
          result = (float *)newOpenEnd((int *)(a1 + 112));
          if (result)
          {
            *(_DWORD *)result = v24;
            *((_BYTE *)result + 4) = a2 == 1;
            return (float *)1;
          }
          return result;
        }
      }
      v23 = "attempt to leave an open left end when a left end is already open";
LABEL_18:
      printf(" ***** %s in autoTrace\n", v23);
      return 0;
    }
  }
  return result;
}

float *actionD(uint64_t a1, float a2, float a3, float a4, float a5)
{
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  const char *v14;
  float *result;
  int *v16;

  if (!*(_BYTE *)(a1 + 80))
  {
    v14 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a1 + 84);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 64);
  if (endPoint(v11, v9, v10) != a2 || v12 != a3)
  {
    v14 = "left end point does not match connected point";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v14);
    return 0;
  }
  v16 = (int *)(v11 + 32 * v9);
  if (v10)
  {
    result = (float *)addPointAtStart(v16);
    if (!result)
      return result;
  }
  else
  {
    result = (float *)addPointAtEnd(v16);
    if (!result)
      return result;
  }
  *result = a4;
  result[1] = a5;
  *(_BYTE *)(a1 + 80) = 0;
  result = (float *)newOpenEnd((int *)(a1 + 112));
  if (result)
  {
    *(_DWORD *)result = v9;
    *((_BYTE *)result + 4) = v10;
    return (float *)1;
  }
  return result;
}

uint64_t actionE(uint64_t a1, float a2, float a3, float a4, float a5)
{
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  const char *v14;
  uint64_t result;
  int *v16;

  if (!*(_BYTE *)(a1 + 80))
  {
    v14 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a1 + 84);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 64);
  if (endPoint(v11, v9, v10) != a2 || v12 != a3)
  {
    v14 = "left end point does not match connected point";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v14);
    return 0;
  }
  v16 = (int *)(v11 + 32 * v9);
  if (v10)
  {
    result = (uint64_t)addPointAtStart(v16);
    if (!result)
      return result;
  }
  else
  {
    result = (uint64_t)addPointAtEnd(v16);
    if (!result)
      return result;
  }
  *(float *)result = a4;
  *(float *)(result + 4) = a5;
  result = 1;
  *(_BYTE *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = v9;
  *(_BYTE *)(a1 + 88) = v10;
  return result;
}

uint64_t actionB(uint64_t a1, float a2, float a3, float a4, float a5)
{
  const char *v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  float v15;
  uint64_t result;
  int *v18;

  if (*(_BYTE *)(a1 + 80))
  {
    v5 = "no connection to open left end";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v5);
    return 0;
  }
  v10 = *(int *)(a1 + 92);
  v11 = *(_QWORD *)(a1 + 104) + 8 * v10;
  *(_DWORD *)(a1 + 92) = v10 + 1;
  v12 = *(_DWORD *)v11;
  v13 = *(unsigned __int8 *)(v11 + 4);
  v14 = *(_QWORD *)(a1 + 64);
  if (endPoint(v14, *(_DWORD *)v11, *(_BYTE *)(v11 + 4)) != a2 || v15 != a3)
  {
    v5 = "top open end point does not match connected point";
    goto LABEL_8;
  }
  v18 = (int *)(v14 + 32 * v12);
  if (!v13)
  {
    result = (uint64_t)addPointAtEnd(v18);
    if (!result)
      return result;
LABEL_14:
    *(float *)result = a4;
    *(float *)(result + 4) = a5;
    result = 1;
    *(_BYTE *)(a1 + 80) = 1;
    *(_DWORD *)(a1 + 84) = v12;
    *(_BYTE *)(a1 + 88) = v13;
    return result;
  }
  result = (uint64_t)addPointAtStart(v18);
  if (result)
    goto LABEL_14;
  return result;
}

float *actionC(uint64_t a1, float a2, float a3, float a4, float a5)
{
  const char *v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  float v15;
  float *result;
  int *v18;

  if (*(_BYTE *)(a1 + 80))
  {
    v5 = "no connection to open left end";
LABEL_8:
    printf(" ***** %s in autoTrace\n", v5);
    return 0;
  }
  v10 = *(int *)(a1 + 92);
  v11 = *(_QWORD *)(a1 + 104) + 8 * v10;
  *(_DWORD *)(a1 + 92) = v10 + 1;
  v12 = *(_DWORD *)v11;
  v13 = *(unsigned __int8 *)(v11 + 4);
  v14 = *(_QWORD *)(a1 + 64);
  if (endPoint(v14, *(_DWORD *)v11, *(_BYTE *)(v11 + 4)) != a2 || v15 != a3)
  {
    v5 = "top open end point does not match connected point";
    goto LABEL_8;
  }
  v18 = (int *)(v14 + 32 * v12);
  if (v13)
  {
    result = (float *)addPointAtStart(v18);
    if (!result)
      return result;
  }
  else
  {
    result = (float *)addPointAtEnd(v18);
    if (!result)
      return result;
  }
  *result = a4;
  result[1] = a5;
  *(_BYTE *)(a1 + 80) = 0;
  result = (float *)newOpenEnd((int *)(a1 + 112));
  if (result)
  {
    *(_DWORD *)result = v12;
    *((_BYTE *)result + 4) = v13;
    return (float *)1;
  }
  return result;
}

float *actionA(_QWORD *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  float v15;
  const char *v17;
  int v18;
  float v19;
  int *v21;
  float *result;
  int *v23;
  char *v24;
  void **v25;
  uint64_t v26;
  float *v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  uint64_t v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int *v57;
  int *v58;
  int *v59;
  int v60;
  float32x2_t *v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x2_t *v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  int v72;
  float32x2_t v73;
  float32x2_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int *v84;
  int v85;
  int *v86;
  unsigned int *v87;
  float *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  float *v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  int v123;
  int v124;
  void *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  float v161;
  int v162;
  int v163;
  int v164;
  float v165;
  float v166;
  float v167;
  int i;
  int v169;
  int v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float v176;
  uint64_t v177;
  float v178;
  float v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  float v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  float v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  float v196;
  uint64_t v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  BOOL v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  char *v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v215;
  float v216;
  float v219;
  float v220;
  float v221;
  float v222;
  char *v225;
  int32x2_t *v226;
  int32x2_t v227;
  int32x2_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  int *v242;
  char *v243;
  int *v244;
  char v245;
  char *v246;
  int v247;
  int v248;
  int64_t v249;
  int64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  _DWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  float v291;
  __n128 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  _BYTE *v300;
  char v301;
  int v302;
  int v303;
  int *Corner;
  int v305;
  int v306;
  int v307;
  int *v308;
  int v309;
  int v310;
  BOOL v311;
  int v312;
  int v313;
  unsigned int v314;
  int v315;
  float v316;
  int v317;
  int v318;
  char *appended;
  int v320;
  uint64_t v321;
  __n128 v322;
  void *v323;
  void *v324;
  void **v325;
  int8x8_t v326;
  int v327;
  int32x2_t v328;
  int *v329;
  int32x2_t v330;
  uint64_t v331;
  int v332;
  char **v333;
  int v334;
  char **v335;
  float v336;
  float v337[4];

  if (!*((_BYTE *)a1 + 80))
  {
    v17 = "attempt to connect to a left end when there is no left end open";
    goto LABEL_115;
  }
  v9 = *((int *)a1 + 23);
  v10 = a1[13] + 8 * v9;
  *((_DWORD *)a1 + 23) = v9 + 1;
  v11 = *(_DWORD *)v10;
  v13 = (_BYTE *)(v10 + 4);
  v12 = *(unsigned __int8 *)(v10 + 4);
  v14 = a1[8];
  if (endPoint(v14, *(_DWORD *)v10, *(_BYTE *)(v10 + 4)) != a2 || v15 != a3)
  {
    v17 = "top open end point does not match connected point";
LABEL_115:
    printf(" ***** %s in autoTrace\n", v17);
    return 0;
  }
  v18 = *((unsigned __int8 *)a1 + 88);
  if (v18 == v12)
  {
    v17 = "polygon front/back ends should be opposite on closure";
    goto LABEL_115;
  }
  if (*((_DWORD *)a1 + 21) != v11)
  {
    v21 = (int *)(v14 + 32 * v11);
    if (v12)
    {
      result = (float *)addPointAtStart(v21);
      if (!result)
        return result;
    }
    else
    {
      result = (float *)addPointAtEnd(v21);
      if (!result)
        return result;
    }
    *result = a4;
    result[1] = a5;
    v34 = *v13;
    v35 = *((unsigned __int8 *)a1 + 88);
    if (v34 == v35)
    {
      v17 = "join polygons occurs at wrong ends";
      goto LABEL_115;
    }
    v36 = a1[8];
    v37 = *(_DWORD *)v10;
    v38 = endPoint(v36, *(_DWORD *)v10, v34);
    v40 = v39;
    v41 = *((_DWORD *)a1 + 21);
    if (v38 != endPoint(v36, v41, v35) || v40 != v42)
    {
      v17 = "join polygons point does not match connected point";
      goto LABEL_115;
    }
    v44 = v37;
    v45 = (int *)(v36 + 32 * v37);
    v46 = (int *)(v36 + 32 * v41);
    v47 = *v46 + *v45;
    v334 = v47 + 99;
    v48 = (char *)malloc_type_malloc(8 * (v47 + 99), 0x100004000313F17uLL);
    if (!v48)
    {
      v17 = "could not extend extract polygons point list";
      goto LABEL_115;
    }
    v49 = v48;
    v332 = v47 - 1;
    v50 = v48 + 400;
    if (*v13)
    {
      v51 = v36 + 32 * v41;
      v53 = *(_QWORD *)(v51 + 8);
      v52 = (_QWORD *)(v51 + 8);
      v54 = v52 + 1;
      memmove(v50, (const void *)(v53 + 8 * *((int *)v52 + 2)), 8 * *v46 - 8);
      v55 = v36 + 32 * v44;
      v56 = (_QWORD *)(v55 + 8);
      v57 = (int *)(v55 + 16);
      v58 = v45;
      v59 = (int *)(v36 + 32 * v41);
    }
    else
    {
      memmove(v50, (const void *)(*(_QWORD *)(v36 + 32 * v44 + 8) + 8 * *(int *)(v36 + 32 * v44 + 16)), 8 * *v45 - 8);
      v81 = v36 + 32 * v41;
      v56 = (_QWORD *)(v81 + 8);
      v57 = (int *)(v81 + 16);
      v58 = (int *)(v36 + 32 * v41);
      v59 = v45;
      v54 = v57;
      v52 = v56;
    }
    memmove(&v49[8 * *v59 + 392], (const void *)(*v56 + 8 * *v57), 8 * *v58);
    *v54 = 50;
    *v46 = v332;
    *(_DWORD *)(v36 + 32 * v41 + 4) = v334;
    free((void *)*v52);
    *v52 = v49;
    v82 = v36 + 32 * v44;
    *(_DWORD *)(v82 + 24) = *((_DWORD *)a1 + 18);
    *((_DWORD *)a1 + 18) = ((unint64_t)v45 - a1[8]) >> 5;
    free(*(void **)(v82 + 8));
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v83 = *((_DWORD *)a1 + 24);
    if (v83 >= 1)
    {
      v84 = (int *)a1[13];
      do
      {
        if (*v84 == (_DWORD)v44)
          *v84 = v41;
        v84 += 2;
        --v83;
      }
      while (v83);
    }
    v85 = *((_DWORD *)a1 + 28);
    if (v85 >= 1)
    {
      v86 = (int *)a1[15];
      do
      {
        if (*v86 == (_DWORD)v44)
          *v86 = v41;
        v86 += 2;
        --v85;
      }
      while (v85);
    }
    if (*((_DWORD *)a1 + 21) == (_DWORD)v44)
      *((_DWORD *)a1 + 21) = v41;
LABEL_47:
    *((_BYTE *)a1 + 80) = 0;
    return (float *)1;
  }
  if (endPoint(v14, v11, v18) != a4 || v19 != a5)
  {
    v17 = "left end point does not match connected point";
    goto LABEL_115;
  }
  v23 = (int *)(v14 + 32 * v11);
  v25 = (void **)(v23 + 2);
  v24 = (char *)*((_QWORD *)v23 + 1);
  v26 = *v23;
  v27 = (float *)malloc_type_malloc(8 * v26, 0x100004000313F17uLL);
  if (!v27)
  {
    v17 = "could not trim extract polygons point list";
    goto LABEL_115;
  }
  v28 = v27;
  memmove(v27, &v24[8 * v23[4]], 8 * v26);
  v23[4] = 0;
  v23[1] = v26;
  free(v24);
  *v25 = v28;
  *((_BYTE *)v23 + 20) = 1;
  v29 = *v23;
  if ((int)v29 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = v28;
    while (v30)
    {
      if ((float)((float)((float)(v32[1] - *(v32 - 1)) * (float)(v32[1] - *(v32 - 1)))
                 + (float)((float)(*v32 - *(v32 - 2)) * (float)(*v32 - *(v32 - 2)))) > 0.1)
      {
        if (v30 != v31)
        {
          v33 = *(_QWORD *)v32;
          goto LABEL_28;
        }
        goto LABEL_29;
      }
LABEL_30:
      ++v30;
      v32 += 2;
      if (v29 == v30)
        goto LABEL_45;
    }
    if (v31)
    {
      v33 = *(_QWORD *)v28;
LABEL_28:
      *(_QWORD *)&v28[2 * v31] = v33;
    }
LABEL_29:
    ++v31;
    goto LABEL_30;
  }
  v31 = 0;
LABEL_45:
  v60 = v31
      - ((float)((float)((float)(v28[1] - v28[2 * (int)v29 - 1]) * (float)(v28[1] - v28[2 * (int)v29 - 1]))
               + (float)((float)(*v28 - v28[2 * (int)v29 - 2]) * (float)(*v28 - v28[2 * (int)v29 - 2]))) <= 0.1);
  *v23 = v60;
  if (v60 <= 2)
  {
LABEL_46:
    *(_DWORD *)(v14 + 32 * v11 + 24) = *((_DWORD *)a1 + 18);
    *((_DWORD *)a1 + 18) = ((unint64_t)v23 - a1[8]) >> 5;
    free(*v25);
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    goto LABEL_47;
  }
  v61 = (float32x2_t *)*v25;
  if (*((_BYTE *)a1 + 44))
  {
    v62 = (float32x2_t)vdup_n_s32(0x3FDCED92u);
    v63 = (float32x2_t)vdup_n_s32(0xC025B22E);
    v64 = (float32x2_t)vdup_n_s32(0x3FEE76C9u);
    v65 = v60;
    v66 = (float32x2_t *)*v25;
    do
    {
      v67 = vrndm_f32(*v66);
      v68 = vsub_f32(*v66, v67);
      *v66++ = vadd_f32(v67, vmla_f32(vmla_f32(vmul_f32(v68, vmul_f32(v68, v63)), v68, vmul_f32(v68, vmul_f32(v68, v62))), v64, v68));
      --v65;
    }
    while (v65);
  }
  v69 = *v61;
  v70 = vsub_f32(v61[v60 - 1], *v61);
  v71 = 0.0;
  v72 = v60;
  do
  {
    v73 = *v61++;
    v74 = vsub_f32(v73, v69);
    v71 = v71 + vmul_lane_f32(vsub_f32(v74, v70), vadd_f32(v74, v70), 1).f32[0] * 0.5;
    v70 = v74;
    --v72;
  }
  while (v72);
  if (v60 <= *((_DWORD *)a1 + 34))
  {
    a1[16] = v23;
LABEL_62:
    if (debug_auto_trace && *a1 && !((unsigned int (*)(_QWORD, _QWORD, _QWORD *))a1[1])(*a1, 0, a1))
      goto LABEL_46;
    if (fabsf(v71) < 3.0)
    {
      CGPathMoveToPoint((CGMutablePathRef)a1[6], 0, *(float *)*v25, *((float *)*v25 + 1));
      LODWORD(v77) = *v23;
      if (*v23 >= 1)
      {
        v78 = 0;
        v79 = 1;
        do
        {
          LODWORD(v80) = ++v78;
          if (v79 >= (int)v77)
          {
            v80 = v79 - (int)v77;
            if (v80 >= (int)v77)
              v80 %= (int)v77;
          }
          CGPathAddLineToPoint((CGMutablePathRef)a1[6], 0, *((float *)*v25 + 2 * (int)v80), *((float *)*v25 + 2 * (int)v80 + 1));
          v77 = *v23;
          v203 = v79++ < v77;
        }
        while (v203);
      }
      CGPathCloseSubpath((CGMutablePathRef)a1[6]);
      goto LABEL_46;
    }
    filterAngles((float *)a1);
    if (!initInterestingPointList(a1 + 26))
    {
      v17 = "failing initInterestingPointList";
      goto LABEL_115;
    }
    v335 = (char **)(a1 + 26);
    v87 = (unsigned int *)a1[16];
    v88 = (float *)*((_QWORD *)v87 + 1);
    v89 = *v87;
    v333 = (char **)(a1 + 28);
    if (!initInterestingPointList(a1 + 28))
      goto LABEL_114;
    LOBYTE(v337[1]) = 0;
    if ((int)v89 >= 1)
    {
      v91 = 0;
      LODWORD(v90) = 0;
      v92 = 0;
      v93 = -1;
      do
      {
        v94 = 0;
        v95 = v91 + 1;
        if (v91 + 1 >= v89)
          v96 = v89;
        else
          v96 = 0;
        v97 = &v88[-2 * v96];
        if (vabds_f32(v97[3], v88[1]) >= 0.001)
        {
          if (vabds_f32(v97[2], *v88) < 0.001)
            v94 = 1;
          else
            v94 = -1;
        }
        if (v94 == v93)
        {
          v90 = (v90 + 1);
        }
        else
        {
          v98 = v95 - v96;
          if (v93 == 1)
          {
            addVerticalLine((char *)a1, v92, v98, v90, v333, &v337[1]);
          }
          else if (!v93)
          {
            addHorizontalLine((char *)a1, v92, v98, v90, v333, &v337[1]);
          }
          if (LOBYTE(v337[1]))
            goto LABEL_114;
          v90 = 1;
          v92 = v91;
          v93 = v94;
        }
        v88 += 2;
        ++v91;
      }
      while (v89 != v95);
      if (v93 == 1)
      {
        addVerticalLine((char *)a1, v92, 0, v90, v333, &v337[1]);
      }
      else if (!v93)
      {
        addHorizontalLine((char *)a1, v92, 0, v90, v333, &v337[1]);
      }
      if (LOBYTE(v337[1]))
      {
LABEL_114:
        v17 = "failing findOrthogonalLines";
        goto LABEL_115;
      }
    }
    if (*((int *)a1 + 59) >= 1)
    {
      v99 = 0;
      v100 = 0;
      do
      {
        insertPairIntoInterestingPoints((uint64_t)a1, (int *)(a1[28] + v100), (int *)(a1[28] + v100 + 8), (uint64_t)v335, &v337[1]);
        if (LOBYTE(v337[1]))
          goto LABEL_114;
        v100 += 16;
        v99 += 2;
      }
      while (*((_DWORD *)a1 + 59) > v99);
    }
    if (*v333)
      free(*v333);
    *v333 = 0;
    a1[29] = 0;
    if (debug_auto_trace && *a1)
      ((void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))a1[1])(*a1, 1, a1, v90);
    if (debug_auto_trace_syntax)
      checkSyntax((int *)a1, "findOrthogonalLines");
    v101 = *(unsigned int *)a1[16];
    if ((int)v101 >= 1)
    {
      v102 = 0;
      v103 = a1[18];
      v104 = a1[22];
      do
      {
        if (v102)
          v105 = 0;
        else
          v105 = v101;
        v106 = v102 + v105 - 1;
        v107 = v102 + 1;
        if (v102 + 1 >= v101)
          v108 = v101;
        else
          v108 = 0;
        v109 = v107 - v108;
        if (v106 <= 0)
          v110 = v101;
        else
          v110 = 0;
        v111 = *(float *)(v103 + 4 * (v106 + v110 - 1));
        v112 = -2.0;
        v113 = -1.0;
        v114 = 0.0;
        v115 = 0.0;
        while (1)
        {
          v116 = v111;
          v111 = *(float *)(v103 + 4 * v106);
          v117 = v111 - v116;
          v118 = rintf(v111 - v116);
          v119 = (float)(v111 - v116) - v118;
          v120 = vabds_f32(v117, v118);
          if (v120 <= v113)
          {
            v121 = v114;
            if (v120 <= v112)
            {
              v119 = v115;
              v122 = v113;
              v120 = v112;
            }
            else
            {
              v122 = v113;
            }
          }
          else
          {
            v121 = v119;
            v119 = v114;
            v122 = v120;
            v120 = v113;
          }
          if (v106 == v109)
            break;
          v123 = v106 + 1;
          if (v123 >= (int)v101)
            v124 = v101;
          else
            v124 = 0;
          v106 = v123 - v124;
          v114 = v121;
          v115 = v119;
          v113 = v122;
          v112 = v120;
        }
        *(float *)(v104 + 4 * v102++) = v121 + v119;
      }
      while (v107 != v101);
    }
    a1[25] = 100;
    v125 = malloc_type_malloc(0x4B0uLL, 0x10000403E1C8BA9uLL);
    a1[24] = v125;
    if (!v125)
    {
      v285 = "could not allocate corner list";
LABEL_418:
      printf(" ***** %s in autoTrace\n", v285);
      goto LABEL_419;
    }
    v325 = (void **)(v23 + 2);
    if ((int)v101 < 1)
      goto LABEL_370;
    v126 = 0;
    v328 = vdup_n_s32(v101 >> 1);
    v330 = vdup_n_s32(-(v101 >> 1));
    v326 = (int8x8_t)vdup_n_s32(v101);
    while (1)
    {
      v127 = *(int *)a1[16];
      v128 = v126 - 2;
      v129 = v126 - 2 - v127;
      if ((uint64_t)(v126 - 2) >= v127)
      {
        if (v129 >= v127)
          v129 %= v127;
      }
      else if (v126 > 1)
      {
        LODWORD(v129) = v126 - 2;
      }
      else
      {
        LODWORD(v129) = v128 + v127;
        if ((uint64_t)(v128 + v127) < 0)
        {
          LODWORD(v129) = v126 - 2;
          if ((_DWORD)v127)
            v129 = (uint64_t)(v128 + v127) % v127 + v127;
        }
      }
      if (v126)
        v130 = 0;
      else
        v130 = *(_DWORD *)a1[16];
      v131 = v126 + v130 - 1;
      v132 = v126 + 1;
      if ((uint64_t)(v126 + 1) >= v127)
        v133 = *(_DWORD *)a1[16];
      else
        v133 = 0;
      v134 = v132 - v133;
      v135 = v126 + 2 - v127;
      if (v135 >= v127)
        LODWORD(v135) = v135 % v127;
      if ((uint64_t)(v126 + 2) < v127)
        LODWORD(v135) = v126 + 2;
      v136 = a1[22];
      v137 = fabsf(*(float *)(v136 + 4 * (int)v129));
      v138 = fabsf(*(float *)(v136 + 4 * v131));
      v139 = fabsf(*(float *)(v136 + 4 * v126));
      v140 = fabsf(*(float *)(v136 + 4 * v134));
      if (v138 == v139 && v137 < v139 && v140 < v139)
      {
        v161 = v139 * 0.75;
        if (v137 <= v161)
          v162 = v131;
        else
          v162 = v129;
        if (v140 <= v161)
          v163 = v126;
        else
          v163 = v132 - v133;
        v144 = a1[18];
      }
      else
      {
        if (v138 >= v139 || v140 >= v139)
          goto LABEL_368;
        v144 = a1[18];
        v145 = *(float *)(v144 + 4 * v131);
        v146 = *(float *)(v144 + 4 * (int)v129);
        v147 = v145 - v146;
        v148 = rintf(v145 - v146);
        v149 = vabds_f32(v145 - v146, v148);
        v150 = *(float *)(v144 + 4 * v126);
        v151 = v150 - v145;
        v152 = rintf(v150 - v145);
        v153 = vabds_f32(v150 - v145, v152);
        v154 = *(float *)(v144 + 4 * v134);
        v155 = v154 - v150;
        v156 = rintf(v155);
        v157 = vabds_f32(v155, v156);
        if (v157 > v153 || (v158 = v126, v149 > v153))
        {
          if (v149 <= v157)
            v158 = v134;
          else
            v158 = v131;
        }
        v159 = v126 - 3;
        v160 = v126 - 3 - v127;
        if ((uint64_t)(v126 - 3) >= v127)
        {
          if (v160 >= v127)
            LODWORD(v160) = v160 % v127;
        }
        else
        {
          LODWORD(v160) = v126 - 3;
          if (v126 <= 2)
          {
            v160 = v159 + v127;
            if ((uint64_t)(v159 + v127) < 0)
              v160 = v160 % v127 + v127;
          }
        }
        v209 = v147 - v148;
        v210 = v151 - v152;
        if (v158 == v131)
        {
          v211 = v146 - *(float *)(v144 + 4 * (int)v160);
          v212 = v138 * 0.75;
          if ((float)(v209 * (float)(v211 - rintf(v211))) <= 0.0 || v137 <= v212)
            v162 = v131;
          else
            v162 = v129;
          if ((float)(v209 * v210) <= 0.0 || v139 <= v212)
            v163 = v131;
          else
            v163 = v126;
        }
        else
        {
          v215 = v155 - v156;
          if (v126 == v158)
          {
            v216 = v139 * 0.75;
            if ((float)(v209 * v210) <= 0.0 || v138 <= v216)
              v162 = v126;
            else
              v162 = v131;
            if ((float)(v210 * v215) <= 0.0 || v140 <= v216)
              v163 = v126;
            else
              v163 = v134;
          }
          else
          {
            if (v158 != v134)
              goto LABEL_368;
            v219 = fabsf(*(float *)(v136 + 4 * (int)v135));
            v220 = *(float *)(v144 + 4 * (int)v135) - v154;
            v221 = v220 - rintf(v220);
            v222 = v140 * 0.75;
            if ((float)(v210 * v215) <= 0.0 || v139 <= v222)
              v162 = v134;
            else
              v162 = v126;
            if ((float)(v215 * v221) <= 0.0 || v219 <= v222)
              v163 = v134;
            else
              v163 = v135;
          }
        }
      }
      if (v162 <= 0)
        v164 = *(_DWORD *)a1[16];
      else
        v164 = 0;
      v165 = *(float *)(v144 + 4 * v162);
      v166 = v165 - *(float *)(v144 + 4 * (v162 + v164 - 1));
      v167 = (float)(v166 - rintf(v166)) + 0.0;
      for (i = v162; i != v163; v165 = *(float *)(v144 + 4 * i))
      {
        v169 = i + 1;
        if (v169 >= (int)v127)
          v170 = *(_DWORD *)a1[16];
        else
          v170 = 0;
        i = v169 - v170;
        v171 = *(float *)(v144 + 4 * i) - v165;
        v167 = v167 + (float)(v171 - rintf(v171));
      }
      v172 = v163;
      v173 = v163 + 1;
      v174 = v162 + v127;
      v176 = 0.0;
      v177 = 5;
      v178 = 0.0;
      v179 = 0.0;
      v180 = 0.0;
      do
      {
        v181 = v162 + v177 - 6;
        if (v181 >= v127)
        {
          v175 = v162 - v127;
          v183 = v175 + v177 - 6;
          if (v183 >= v127)
            v181 = v183 % v127;
          else
            LODWORD(v181) = v175 + v177 - 6;
        }
        else if (v181 < 0)
        {
          v182 = v174 + v177 - 6;
          if (v182 >= 0)
            LODWORD(v181) = v174 + v177 - 6;
          if (v182 < 0)
            v181 = v182 % v127 + v127;
        }
        if ((int)v181 <= 0)
          v184 = *(_DWORD *)a1[16];
        else
          v184 = 0;
        v185 = *(float *)(v144 + 4 * (int)v181);
        v186 = *(float *)(v144 + 4 * ((int)v181 + v184 - 1));
        if (v173 >= v127)
        {
          if (v173 - v127 >= v127)
            LODWORD(v187) = v173;
          else
            LODWORD(v187) = v173 - v127;
          if (v173 - v127 >= v127)
            v187 = (v173 - v127) % v127;
        }
        else
        {
          LODWORD(v187) = v173;
          if (v173 < 0)
          {
            v188 = v127 + v173;
            LODWORD(v187) = v127 + v173 < 0 ? v173 : (int)v127 + (int)v173;
            if (v188 < 0)
              v187 = v188 % v127 + v127;
          }
        }
        v180 = v180 + (float)((float)(v185 - v186) - rintf(v185 - v186));
        if ((int)v187 <= 0)
          v189 = *(_DWORD *)a1[16];
        else
          v189 = 0;
        v190 = *(float *)(v144 + 4 * (int)v187) - *(float *)(v144 + 4 * ((int)v187 + v189 - 1));
        v179 = v179 + (float)(v190 - rintf(v190));
        if (v177 == 3)
        {
          v178 = v180;
          v176 = v179;
        }
        ++v173;
        --v177;
      }
      while (v177);
      v191 = v162 - 4;
      v192 = v162 - 4;
      if (v162 - 4 >= (int)v127)
      {
        v194 = v191 - v127;
        if (v192 - v127 >= v127)
          v192 = v194 % v127;
        else
          v192 -= v127;
      }
      else if (v162 <= 3)
      {
        v193 = v191 + v127;
        if (v192 + v127 < 0 == __OFADD__(v192, v127))
          v192 += v127;
        if (v193 < 0)
          v192 = v193 % v127 + v127;
      }
      v337[1] = 0.0;
      v336 = 0.0;
      if (LRLine((uint64_t)a1, v192, &v337[1], &v336))
      {
        v195 = v337[1];
        v196 = straightLineDistanceDeltaToleranceAtAngle(v337[1]);
        if (v163 >= (int)v127)
        {
          v172 = v163 - v127 >= v127 ? (v163 - v127) % v127 : v163 - v127;
        }
        else if (v163 < 0)
        {
          v197 = v163 + v127;
          if (v197 < 0 == __OFADD__(v163, v127))
            v172 = v163 + v127;
          if (v197 < 0)
            v172 = v197 % v127 + v127;
        }
        v198 = v336;
        v337[0] = 0.0;
        if (LRLine((uint64_t)a1, v172, v337, &v336))
        {
          v199 = straightLineDistanceDeltaToleranceAtAngle(v195);
          if (vabds_f32(v195 - v337[0], rintf(v195 - v337[0])) >= 0.0625)
          {
            v200 = fabsf(v167);
            if (v200 >= 0.0625
              && (v198 < v196 || fabsf(v180) < (float)(v200 * 0.3) || (float)(v167 * v180) < 0.0)
              && (v336 < v199 || fabsf(v179) < (float)(v200 * 0.3) || (float)(v167 * v179) < 0.0))
            {
              v201 = v200 * 0.6;
              v202 = fabsf(v176);
              v203 = fabsf(v178) <= v201 && v202 <= v201;
              if (v203)
              {
                if (*((_BYTE *)a1 + 16))
                  printf("corner %4d to %4d turn %7.2f rel. turn before %7.4f rel. turn after %7.4f\n", v162, v163, (float)(v167 * 360.0), (float)(v178 / v167), (float)(v176 / v167));
                v204 = *((_DWORD *)a1 + 51);
                v205 = v204 - 1;
                if (v204 < 1
                  || (v206 = a1[24], *(_DWORD *)(v206 + 12 * v205 + 4) <= v162)
                  || *(_DWORD *)(v206 + 12 * v205) >= v162)
                {
                  v207 = *((_DWORD *)a1 + 50);
                  if (v204 >= v207)
                  {
                    v225 = (char *)malloc_type_malloc(12 * v207 + 1200, 0x10000403E1C8BA9uLL);
                    if (!v225)
                    {
                      v285 = "could not extend corner list";
                      goto LABEL_418;
                    }
                    v208 = v225;
                    memmove(v225, (const void *)a1[24], 12 * *((int *)a1 + 50));
                    *((_DWORD *)a1 + 50) += 100;
                    free((void *)a1[24]);
                    a1[24] = v208;
                    v204 = *((_DWORD *)a1 + 51);
                  }
                  else
                  {
                    v208 = (char *)a1[24];
                  }
                  v226 = (int32x2_t *)&v208[12 * v204];
                  v226->i32[1] = v163;
                  v226->i32[0] = v162;
                  v226[1].i32[0] = -100;
                  *((_DWORD *)a1 + 51) = v204 + 1;
                  if (!findCorner((uint64_t)a1, v126, 0))
                  {
                    v227 = vsub_s32(*v226, vdup_n_s32(v126));
                    v228 = vabs_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v330, v227), v326, (int8x8_t)vneg_s32((int32x2_t)vand_s8(v326, (int8x8_t)vcgt_s32(v227, v328)))), v227));
                    if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v228, 1), (uint32x2_t)v228).u8[0] & 1) != 0)
                      LODWORD(v126) = *v226;
                    else
                      LODWORD(v126) = HIDWORD(*(unint64_t *)v226);
                  }
                  v226[1].i32[0] = v126;
                  v229 = (char *)addInterestingPointAtIndex(v126, 1, (uint64_t)v335);
                  if (!v229)
                    goto LABEL_419;
                  v230 = v229;
                  if (*((_DWORD *)v229 + 1) == 1)
                  {
                    v231 = (char *)a1[26];
                    v232 = v230 - v231;
                    v233 = (v230 - v231) >> 3;
                    v234 = v233 - 1;
                    v235 = *((unsigned int *)a1 + 55);
                    v236 = (int)v235;
                    if (v233 <= (int)v235)
                    {
                      if (v232 > 7)
                      {
                        LODWORD(v237) = v233 - 1;
                      }
                      else
                      {
                        LODWORD(v237) = v234 + v235;
                        if (v234 + (int)v235 < 0)
                        {
                          LODWORD(v237) = v233 - 1;
                          if ((_DWORD)v235)
                            v237 = (v234 + (int)v235) % (int)v235 + (int)v235;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v237) = v234 - v235;
                      if (v234 - (int)v235 >= (int)v235)
                      {
                        LODWORD(v237) = v233 - 1;
                        if ((_DWORD)v235)
                          v237 = (v234 - (int)v235) % (int)v235;
                      }
                    }
                    v238 = v233 + 1;
                    v239 = v238 - (int)v235;
                    if (v238 >= (int)v235)
                    {
                      LODWORD(v240) = v238 - v235;
                      if (v239 >= (int)v235)
                      {
                        LODWORD(v240) = v238;
                        if ((_DWORD)v235)
                          v240 = v239 % (int)v235;
                      }
                    }
                    else if (v232 > -9)
                    {
                      LODWORD(v240) = v238;
                    }
                    else
                    {
                      LODWORD(v240) = v238 + v235;
                      if (v238 + (int)v235 < 0)
                      {
                        LODWORD(v240) = v238;
                        if ((_DWORD)v235)
                          v240 = (v238 + (int)v235) % (int)v235 + (int)v235;
                      }
                    }
                    v241 = &v231[8 * (int)v237];
                    v242 = (int *)(v241 + 4);
                    if ((v241[4] & 2) != 0)
                    {
                      v243 = &v231[8 * (int)v240];
                      v245 = v243[4];
                      v244 = (int *)(v243 + 4);
                      if ((v245 & 4) != 0)
                      {
                        v246 = &v231[8 * (int)v240];
                        *((_DWORD *)v230 + 1) = 0;
                        if ((int)((v101 & ((*(_DWORD *)v230 - *(_DWORD *)v241) >> 31))
                                 + *(_DWORD *)v230
                                 - *(_DWORD *)v241) >= (int)((v101 & ((*(_DWORD *)v246 - *(_DWORD *)v230) >> 31))
                                                           + *(_DWORD *)v246
                                                           - *(_DWORD *)v230))
                        {
                          v248 = *v244;
                          if ((_DWORD)v240)
                          {
                            *v244 = v248 | 1;
                            *(_DWORD *)v246 = v226->i32[0];
                          }
                          else
                          {
                            *((_DWORD *)v230 + 1) = v248;
                            *v244 = 0;
                          }
                        }
                        else
                        {
                          v247 = *v242;
                          if (v230 == v231)
                          {
                            *((_DWORD *)v230 + 1) = v247;
                            *v242 = 0;
                          }
                          else
                          {
                            *v242 = v247 | 1;
                            *(_DWORD *)v241 = v226->i32[1];
                          }
                        }
                      }
                    }
                    if ((int)v235 >= 1)
                    {
                      LODWORD(v249) = v235;
                      do
                      {
                        v250 = v236 - 1;
                        if (!*(_DWORD *)&(*v335)[8 * (v236 - 1) + 4])
                        {
                          if (v235 < (int)v249)
                          {
                            do
                            {
                              *(_QWORD *)(a1[26] + 8 * v236 - 8) = *(_QWORD *)(a1[26] + 8 * v236);
                              ++v236;
                              v249 = *((int *)a1 + 55);
                            }
                            while (v236 < v249);
                          }
                          LODWORD(v249) = v249 - 1;
                          *((_DWORD *)a1 + 55) = v249;
                        }
                        v236 = v250;
                        v203 = v235-- <= 1;
                      }
                      while (!v203);
                      v231 = *v335;
                      v236 = (int)v249;
                    }
                    qsort(v231, v236, 8uLL, (int (__cdecl *)(const void *, const void *))ipCompare);
                  }
                }
              }
            }
          }
        }
      }
LABEL_368:
      v126 = v132;
      if (v132 == v101)
      {
        v125 = (void *)a1[24];
LABEL_370:
        qsort(v125, *((int *)a1 + 51), 0xCuLL, (int (__cdecl *)(const void *, const void *))cornerCompare);
        v251 = *((_DWORD *)a1 + 51);
        if (v251 > 1)
        {
          v252 = 0;
          v253 = (int)v101 >> 1;
          do
          {
            v254 = v252++;
            LODWORD(v255) = v252;
            if (v252 >= v251)
            {
              v255 = v252 - v251;
              if (v255 >= v251)
                v255 %= v251;
            }
            v256 = a1[24];
            v257 = *(_DWORD *)(v256 + 12 * v254);
            v258 = *(_DWORD *)(v256 + 12 * v254 + 4);
            v259 = v257 - v253;
            v260 = v257 + v253;
            if (v257 + v253 >= v258)
              v261 = 0;
            else
              v261 = v101;
            v262 = v258 - v261;
            if (v259 > v258)
              v263 = v258 + v101;
            else
              v263 = v262;
            v264 = *(_DWORD *)(v256 + 12 * (int)v255);
            v265 = *(_DWORD *)(v256 + 12 * (int)v255 + 4);
            if (v260 >= v264)
              v266 = 0;
            else
              v266 = v101;
            v267 = v264 - v266;
            if (v259 > v264)
              v268 = v264 + v101;
            else
              v268 = v267;
            if (v260 >= v265)
              v269 = 0;
            else
              v269 = v101;
            v270 = v265 - v269;
            if (v259 > v265)
              v271 = v265 + v101;
            else
              v271 = v270;
            if (v268 <= v263 && v271 >= v257)
            {
              v273 = *(_DWORD *)(v256 + 12 * (int)v255 + 8);
              v274 = v255 + 1;
              if ((int)v255 + 1 < v251)
              {
                v275 = v274;
                v276 = 12 * v274;
                do
                {
                  v277 = a1[24];
                  v255 = v277 + 12 * (int)v255;
                  v278 = (uint64_t *)(v277 + v276);
                  v279 = *v278;
                  *(_DWORD *)(v255 + 8) = *((_DWORD *)v278 + 2);
                  *(_QWORD *)v255 = v279;
                  LODWORD(v255) = v275++;
                  v276 += 12;
                }
                while (v275 < *((int *)a1 + 51));
                v251 = *((_DWORD *)a1 + 51);
              }
              *((_DWORD *)a1 + 51) = --v251;
              v280 = *((unsigned int *)a1 + 55);
              if ((int)v280 >= 1)
              {
                v281 = *v335 + 4;
                do
                {
                  if (*(v281 - 1) == v273)
                    *v281 &= ~1u;
                  v281 += 2;
                  --v280;
                }
                while (v280);
              }
            }
          }
          while (v252 < v251);
        }
        v282 = *((unsigned int *)a1 + 55);
        if ((int)v282 < 1)
        {
          LODWORD(v283) = *((_DWORD *)a1 + 55);
        }
        else
        {
          LODWORD(v283) = *((_DWORD *)a1 + 55);
          do
          {
            if (!*(_DWORD *)&(*v335)[8 * (v282 - 1) + 4])
            {
              if (v282 < (int)v283)
              {
                v284 = v282;
                do
                {
                  *(_QWORD *)(a1[26] + 8 * v284 - 8) = *(_QWORD *)(a1[26] + 8 * v284);
                  ++v284;
                  v283 = *((int *)a1 + 55);
                }
                while (v284 < v283);
              }
              LODWORD(v283) = v283 - 1;
              *((_DWORD *)a1 + 55) = v283;
            }
            v203 = v282-- <= 1;
          }
          while (!v203);
        }
        if ((_DWORD)v283 || addInterestingPointAtIndex(0, 64, (uint64_t)v335))
        {
          if (debug_auto_trace_syntax)
            checkSyntax((int *)a1, "findCorners");
          if (debug_auto_trace && *a1)
            ((void (*)(_QWORD, uint64_t, _QWORD *))a1[1])(*a1, 2, a1);
          *(_QWORD *)v337 = 0;
          v286 = *(unsigned int *)a1[16];
          if ((int)v286 >= 1)
          {
            v287 = 0;
            v288 = a1[19];
            v289 = a1[20];
            do
            {
              if (v287)
                v290 = 0;
              else
                v290 = v286;
              v291 = *(float *)(v288 + 4 * (v290 + v287) - 4) - *(float *)(v288 + 4 * v287);
              *(float *)(v289 + 4 * v287++) = v291 - rintf(v291);
            }
            while (v286 != v287);
          }
          if (initInterestingPointList(v333))
          {
            LODWORD(v293) = *((_DWORD *)a1 + 55);
            if ((int)v293 >= 1)
            {
              v294 = 0;
              v295 = 0;
              v327 = (int)v286 >> 1;
              v296 = 1;
              do
              {
                LODWORD(v297) = ++v295;
                if (v296 >= (int)v293)
                {
                  v297 = v296 - (int)v293;
                  if (v297 >= (int)v293)
                    v297 %= (int)v293;
                }
                v298 = *v335;
                if (((*v335)[v294 + 4] & 1) != 0)
                {
                  v299 = &v298[8 * (int)v297];
                  v301 = v299[4];
                  v300 = v299 + 4;
                  if ((v301 & 1) != 0)
                  {
                    v302 = *(_DWORD *)&v298[v294];
                    v329 = (int *)&v298[8 * (int)v297];
                    v331 = v295;
                    v303 = *v329;
                    Corner = findCorner((uint64_t)a1, v302, 1);
                    if (!Corner)
                      goto LABEL_498;
                    v305 = Corner[1];
                    if ((*v300 & 1) != 0)
                    {
                      v307 = Corner[1];
                      v308 = findCorner((uint64_t)a1, *v329, 1);
                      if (!v308)
                        goto LABEL_498;
                      v305 = v307;
                      v306 = *v308;
                    }
                    else
                    {
                      v306 = v303;
                    }
                    if (v303 > v302)
                      goto LABEL_454;
                    v309 = v305 - *(_DWORD *)&v298[v294];
                    if (v309 < 0)
                      v309 = *(_DWORD *)&v298[v294] - v305;
                    if (v309 > v327)
                      goto LABEL_454;
                    v310 = v306 - *v329;
                    if (v310 < 0)
                      v310 = *v329 - v306;
                    if (v310 <= v327)
                      v311 = v306 <= v305 - (int)v286;
                    else
LABEL_454:
                      v311 = v306 <= v305;
                    v295 = v331;
                    if (!v311)
                    {
                      v312 = v306 - v305;
                      v313 = v306 <= v305 ? v286 : 0;
                      v314 = v313 + v312;
                      if (v313 + v312 >= 1)
                      {
                        v315 = v305;
                        computeAngleSumAndRange((uint64_t)a1, v305, v306, &v337[1], v337);
                        v292.n128_f32[0] = v337[0];
                        v316 = fabsf(v337[1]);
                        if (v314 <= 0xF && v316 < 0.000027778 && v337[0] < 0.000027778)
                        {
                          if (!appendInterestingPointAtIndex(v315, 2, v333))
                            goto LABEL_498;
                          v317 = v306;
                          v318 = 4;
                          goto LABEL_472;
                        }
                        v295 = v331;
                        if (v314 >= 0x15 && v316 > 0.0043056 && v316 < 0.027778)
                        {
                          v292.n128_f32[0] = v337[0] / fmaxf(v316, 0.01);
                          if (v292.n128_f32[0] > 0.965 && v292.n128_f32[0] < 1.17)
                          {
                            if (!appendInterestingPointAtIndex(v315, 8, v333))
                              goto LABEL_498;
                            v317 = v306;
                            v318 = 16;
LABEL_472:
                            appended = appendInterestingPointAtIndex(v317, v318, v333);
                            v295 = v331;
                            if (!appended)
                              goto LABEL_498;
                          }
                        }
                      }
                    }
                  }
                }
                v293 = *((int *)a1 + 55);
                v294 += 8;
                v203 = v296++ < v293;
              }
              while (v203);
            }
            if (*((int *)a1 + 59) < 1)
            {
LABEL_480:
              if (*v333)
                free(*v333);
              *v333 = 0;
              a1[29] = 0;
              if (debug_auto_trace_syntax)
                checkSyntax((int *)a1, "findShortLinesAndShallowCurves");
              if (debug_auto_trace && *a1)
                ((void (*)(_QWORD, uint64_t, _QWORD *, __n128))a1[1])(*a1, 3, a1, v292);
              if ((findNonOrthogonalLines((uint64_t)a1) & 1) == 0)
              {
                v17 = "failing findNonOrthogonalLines";
                goto LABEL_115;
              }
              if ((findInflectionPoints(a1) & 1) == 0)
              {
                v17 = "failing findInflectionPoints";
                goto LABEL_115;
              }
              if ((cutUpCurves((uint64_t)a1) & 1) == 0)
              {
                v17 = "failing cutUpCurves";
                goto LABEL_115;
              }
              if ((coalesceStraightLines(a1) & 1) == 0)
              {
                v17 = "failing coalesceStraightLines";
                goto LABEL_115;
              }
              if (!extractCurveRecords((uint64_t)a1))
              {
                v17 = "failing extractCurveRecords";
                goto LABEL_115;
              }
              computeCurveTangents((uint64_t)a1);
              computePoints((uint64_t)a1);
              if ((findSubdividedCurves((uint64_t)a1, v322) & 1) == 0)
              {
                v17 = "failing findSubdividedCurves";
                goto LABEL_115;
              }
              convertToPaths((uint64_t)a1);
              v323 = (void *)a1[26];
              if (v323)
                free(v323);
              *v335 = 0;
              a1[27] = 0;
              v324 = (void *)a1[30];
              if (v324)
                free(v324);
              a1[30] = 0;
              a1[31] = 0;
              v23 = (int *)(v14 + 32 * v11);
              v25 = v325;
              goto LABEL_46;
            }
            v320 = 0;
            v321 = 0;
            LOBYTE(v336) = 0;
            while (1)
            {
              insertPairIntoInterestingPoints((uint64_t)a1, (int *)(a1[28] + v321), (int *)(a1[28] + v321 + 8), (uint64_t)v335, &v336);
              if (LOBYTE(v336))
                break;
              v321 += 16;
              v320 += 2;
              if (*((_DWORD *)a1 + 59) <= v320)
                goto LABEL_480;
            }
          }
LABEL_498:
          v17 = "failing findShortLinesAndShallowCurves";
          goto LABEL_115;
        }
LABEL_419:
        v17 = "failing findCorners";
        goto LABEL_115;
      }
    }
  }
  freeAutoTraceStructures((uint64_t)a1);
  a1[16] = v23;
  v75 = *v23;
  a1[18] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[22] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[23] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[19] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[20] = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  v76 = malloc_type_malloc(4 * v75, 0x100004052888210uLL);
  a1[21] = v76;
  if (a1[18] && a1[22] && a1[23] && a1[19] && a1[20] && v76)
  {
    *((_DWORD *)a1 + 34) = v75;
    goto LABEL_62;
  }
  printf(" ***** %s in autoTrace\n", "could not allocate auto trace structures");
  freeAutoTraceStructures((uint64_t)a1);
  return 0;
}

float endPoint(uint64_t a1, int a2, char a3)
{
  _DWORD *v3;
  int v4;

  v3 = (_DWORD *)(a1 + 32 * a2);
  if (a3)
    v4 = v3[4];
  else
    v4 = v3[4] + *v3 - 1;
  return *(float *)(*(_QWORD *)(a1 + 32 * a2 + 8) + 8 * v4);
}

char *addPointAtStart(int *a1)
{
  int v2;
  char *v3;
  char *v4;
  int v5;
  char *result;

  v2 = a1[4];
  if (v2)
  {
    v3 = (char *)*((_QWORD *)a1 + 1);
LABEL_5:
    v5 = v2 - 1;
    result = &v3[8 * v5];
    ++*a1;
    a1[4] = v5;
    return result;
  }
  v4 = (char *)malloc_type_malloc(8 * *a1 + 800, 0x100004000313F17uLL);
  if (v4)
  {
    v3 = v4;
    memmove(v4 + 400, (const void *)(*((_QWORD *)a1 + 1) + 8 * a1[4]), 8 * *a1);
    a1[4] = 50;
    a1[1] = *a1 + 100;
    free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v3;
    v2 = a1[4];
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract polygons point list");
  return 0;
}

char *addPointAtEnd(int *a1)
{
  int v2;
  int v3;
  char *v4;
  char *v5;
  char *result;

  v2 = *a1;
  v3 = *a1 + a1[4];
  if (v3 != a1[1])
  {
    v5 = (char *)*((_QWORD *)a1 + 1);
    goto LABEL_5;
  }
  v4 = (char *)malloc_type_malloc(8 * (v2 + 100), 0x100004000313F17uLL);
  if (v4)
  {
    v5 = v4;
    memmove(v4 + 400, (const void *)(*((_QWORD *)a1 + 1) + 8 * a1[4]), 8 * *a1);
    a1[4] = 50;
    a1[1] = *a1 + 100;
    free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v5;
    v2 = *a1;
    v3 = *a1 + a1[4];
LABEL_5:
    result = &v5[8 * v3];
    *a1 = v2 + 1;
    return result;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract polygons point list");
  return 0;
}

void freeAutoTraceStructures(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v6 = *(void **)(a1 + 160);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v7 = *(void **)(a1 + 168);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 168) = 0;
  }
  *(_DWORD *)(a1 + 136) = 0;
}

BOOL initInterestingPointList(_QWORD *a1)
{
  void *v2;

  a1[1] = 100;
  v2 = malloc_type_malloc(0x320uLL, 0x100004000313F17uLL);
  *a1 = v2;
  if (!v2)
    printf(" ***** %s in autoTrace\n", "could not allocate interesting points list");
  return v2 != 0;
}

char *addHorizontalLine(char *result, int a2, int a3, int a4, char **a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  int v25;
  int v26;
  float v27;
  int v29;

  v6 = *((_QWORD *)result + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)v6;
  *a6 = 0;
  if (a4 >= 10)
  {
    v9 = a3;
    v10 = a3 <= 0 ? v8 : 0;
    if (vabds_f32(*(float *)(v7 + 8 * a2 + 4), *(float *)(v7 + 8 * (a3 + v10 - 1) + 4)) < 0.001)
    {
      if (a2 >= a3)
      {
        v18 = NAN;
      }
      else
      {
        v13 = 0;
        v14 = 0.0;
        v15 = a2;
        do
        {
          v14 = v14 + *(float *)(v7 + 8 * v15 + 4);
          ++v13;
          v16 = v15 + 1;
          if (v16 >= v8)
            v17 = v8;
          else
            v17 = 0;
          v15 = v16 - v17;
        }
        while (v15 < a3);
        v18 = v14 / (float)v13;
      }
      v19 = v18 + -0.023;
      v20 = v18 + 0.023;
      do
      {
        if (a2 <= 0)
          v21 = v8;
        else
          v21 = 0;
        v22 = v21 + a2;
        a2 = v22 - 1;
        v23 = *(float *)(v7 + 8 * (v22 - 1) + 4);
      }
      while (v23 >= v19 && v23 <= v20);
      if (v22 >= v8)
        v25 = v8;
      else
        v25 = 0;
      v26 = v22 - v25;
      while (1)
      {
        v27 = *(float *)(v7 + 8 * v9 + 4);
        if (v27 < v19 || v27 > v20)
          break;
        if (v9 + 1 >= v8)
          v29 = v8;
        else
          v29 = 0;
        v9 = v9 + 1 - v29;
      }
      if (result[18])
        printf("found completely horizontal line from %d to %d (length %d)\n", v26, v9, a4);
      result = appendInterestingPointAtIndex(v26, 2, a5);
      if (!result || (result = appendInterestingPointAtIndex(v9, 4, a5)) == 0)
        *a6 = 1;
    }
  }
  return result;
}

char *addVerticalLine(char *result, int a2, int a3, int a4, char **a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  int v25;
  int v26;
  uint64_t i;
  float v28;
  int v30;

  v6 = *((_QWORD *)result + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)v6;
  *a6 = 0;
  if (a4 >= 10)
  {
    v9 = a3;
    v10 = a3 <= 0 ? v8 : 0;
    if (vabds_f32(*(float *)(v7 + 8 * a2), *(float *)(v7 + 8 * (a3 + v10 - 1))) < 0.001)
    {
      if (a2 >= a3)
      {
        v18 = NAN;
      }
      else
      {
        v13 = 0;
        v14 = 0.0;
        v15 = a2;
        do
        {
          v14 = v14 + *(float *)(v7 + 8 * v15);
          ++v13;
          v16 = v15 + 1;
          if (v16 >= v8)
            v17 = v8;
          else
            v17 = 0;
          v15 = v16 - v17;
        }
        while (v15 < a3);
        v18 = v14 / (float)v13;
      }
      v19 = v18 + -0.023;
      v20 = v18 + 0.023;
      do
      {
        if (a2 <= 0)
          v21 = v8;
        else
          v21 = 0;
        v22 = v21 + a2;
        a2 = v22 - 1;
        v23 = *(float *)(v7 + 8 * (v22 - 1));
      }
      while (v23 >= v19 && v23 <= v20);
      if (v22 >= v8)
        v25 = v8;
      else
        v25 = 0;
      v26 = v22 - v25;
      for (i = 8 * a3; ; i = 8 * v9)
      {
        v28 = *(float *)(v7 + i);
        if (v28 < v19 || v28 > v20)
          break;
        if (v9 + 1 >= v8)
          v30 = v8;
        else
          v30 = 0;
        v9 = v9 + 1 - v30;
      }
      if (result[18])
        printf("found completely vertical line from %d to %d (length %d)\n", v26, v9, a4);
      result = appendInterestingPointAtIndex(v26, 2, a5);
      if (!result || (result = appendInterestingPointAtIndex(v9, 4, a5)) == 0)
        *a6 = 1;
    }
  }
  return result;
}

uint64_t insertPairIntoInterestingPoints(uint64_t result, int *a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int64_t v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  char v35;
  _BOOL4 v36;
  _BOOL4 v37;
  BOOL v38;
  char v39;
  BOOL v40;
  char v41;
  int v42;
  int *v43;
  int *Corner;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BOOL4 v53;
  const char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  int v85;
  uint64_t v86;
  __int16 v88;

  *a5 = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = *a3;
  v8 = a3[1];
  v9 = (v8 & 4) == 0 || (a2[1] & 2) == 0;
  if (v5 == v7)
    return result;
  v11 = *(unsigned int *)(a4 + 12);
  if ((int)v11 < 1)
    goto LABEL_156;
  v86 = result;
  v85 = **(_DWORD **)(result + 128);
  v88 = 0;
  v14 = indexOfNewInterestingPointAtPointIndex(v5, a4, (_BYTE *)&v88 + 1);
  result = indexOfNewInterestingPointAtPointIndex(v7, a4, &v88);
  v15 = result;
  v16 = v14 + 1;
  v17 = v16 - v11;
  if (v16 >= v11)
  {
    if (v17 >= v11)
      v17 %= (unint64_t)v11;
  }
  else
  {
    LODWORD(v17) = v14 + 1;
    if (v14 <= -2)
    {
      LODWORD(v17) = v16 + v11;
      if (v16 + v11 < 0)
        LODWORD(v17) = v11 - -(int)v17 % v11;
    }
  }
  v18 = v14 - 1;
  v19 = v18 - v11;
  if (v18 >= v11)
  {
    if (v19 >= v11)
      v19 %= (unint64_t)v11;
  }
  else
  {
    LODWORD(v19) = v14 - 1;
    if (v14 <= 0)
    {
      LODWORD(v19) = v18 + v11;
      if (v18 + v11 < 0)
        LODWORD(v19) = v11 - -(int)v19 % v11;
    }
  }
  v20 = *(_QWORD *)a4;
  if (v14 != (_DWORD)result)
  {
    v22 = (int *)(v20 + 8 * v14);
    if ((_DWORD)result == (_DWORD)v17)
    {
      if (HIBYTE(v88) && !(_BYTE)v88)
      {
        v23 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if ((v23 & 0xA) != 0)
        {
          if (((v23 >> 1) & 1 & ~v9) == 0 && (v23 & 2) == 0 && debug_auto_trace_syntax)
          {
            v84 = "breaking 3";
            v24 = v86;
            v25 = a2;
            v26 = v14;
            v27 = 1;
            v28 = a3;
LABEL_110:
            v55 = 0;
LABEL_117:
            result = pairInsertError(v24, v25, v26, v27, v28, v15, v55, a4, v84);
            goto LABEL_158;
          }
          goto LABEL_158;
        }
        goto LABEL_156;
      }
      if (HIBYTE(v88) && (_BYTE)v88)
      {
        v32 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if ((v9 & 1) != 0)
        {
          if ((v32 & 8) != 0)
            goto LABEL_158;
        }
        else if ((v32 & 2) != 0)
        {
          goto LABEL_158;
        }
        if ((v32 & 0xA) == 0)
          goto LABEL_156;
        if (!debug_auto_trace_syntax)
          goto LABEL_158;
        v84 = "merge 1";
        v24 = v86;
        v25 = a2;
        v26 = v14;
        v27 = 1;
LABEL_115:
        v28 = a3;
        goto LABEL_116;
      }
      if (!(HIBYTE(v88) | v88))
      {
        v42 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if (v42 != 1)
        {
          if ((v42 & 4) != 0 && (*(_DWORD *)(v20 + 8 * (int)v19 + 4) & 2) != 0)
          {
            v5 = *(_DWORD *)(v20 + 8 * (int)v19);
            *v22 = v7;
          }
          else if ((v42 & 2) != 0)
          {
            goto LABEL_158;
          }
          goto LABEL_156;
        }
        v43 = (int *)(v20 + 8 * v14);
        Corner = findCorner(v86, *v22, 1);
        v34 = v43;
        v45 = *v43 - v5;
        if (v85 >= 0)
          v46 = v85;
        else
          v46 = v85 + 1;
        v47 = -(v46 >> 1);
        if (v45 >= v47)
          v48 = 0;
        else
          v48 = v85;
        v49 = v48 + v45;
        if (v49 < 0)
          v49 = -v49;
        v50 = v7 - *v43;
        if (v50 >= v47)
          v51 = 0;
        else
          v51 = v85;
        v52 = v51 + v50;
        if (v52 < 0)
          v52 = -v52;
        if (v49 < v52)
        {
          if (Corner)
          {
LABEL_99:
            v5 = Corner[2];
            goto LABEL_156;
          }
LABEL_147:
          *v34 = v5;
          goto LABEL_156;
        }
LABEL_153:
        if (Corner)
        {
          v7 = Corner[2];
          goto LABEL_156;
        }
LABEL_155:
        *v34 = v7;
        goto LABEL_156;
      }
      if (!HIBYTE(v88) && (_BYTE)v88)
      {
        v58 = *(_DWORD *)(v20 + 8 * v14 + 4);
        if ((v58 & 2) != 0)
        {
          *v22 = v5;
          goto LABEL_156;
        }
        if (v58 != 1)
        {
          if (!debug_auto_trace_syntax)
            goto LABEL_158;
          v84 = "merge 2";
          v24 = v86;
          v25 = a2;
          v26 = v14;
          v27 = 0;
          goto LABEL_115;
        }
        v59 = v22;
        Corner = findCorner(v86, *v22, 1);
        v34 = v59;
        v60 = *v59 - v5;
        if (v85 >= 0)
          v61 = v85;
        else
          v61 = v85 + 1;
        v62 = -(v61 >> 1);
        if (v60 >= v62)
          v63 = 0;
        else
          v63 = v85;
        v64 = v63 + v60;
        if (v64 < 0)
          v64 = -v64;
        v65 = v7 - *v59;
        if (v65 >= v62)
          v66 = 0;
        else
          v66 = v85;
        v67 = v66 + v65;
        if (v67 < 0)
          v67 = -v67;
        if (v64 < v67)
        {
          if (Corner)
            goto LABEL_99;
          goto LABEL_147;
        }
        goto LABEL_153;
      }
      if (!debug_auto_trace_syntax)
        goto LABEL_158;
      v36 = HIBYTE(v88) != 0;
      v53 = v88 != 0;
      v54 = "syntax 2";
    }
    else
    {
      v30 = (int)result - 1;
      v31 = v30 - v11;
      if (v30 >= v11)
      {
        if (v31 >= v11)
          v31 %= (unint64_t)v11;
      }
      else
      {
        LODWORD(v31) = result - 1;
        if ((int)result <= 0)
        {
          LODWORD(v31) = v30 + v11;
          if (v30 + v11 < 0)
            LODWORD(v31) = v11 - -(int)v31 % v11;
        }
      }
      v34 = (int *)(v20 + 8 * (int)v31);
      if (HIBYTE(v88) | v88)
        v35 = 1;
      else
        v35 = v9;
      if ((v35 & 1) != 0)
      {
        v36 = HIBYTE(v88) != 0;
        v37 = HIBYTE(v88) == 0;
        if ((_BYTE)v88)
          v37 = 1;
        if (((v37 | v9) & 1) != 0)
        {
          if (HIBYTE(v88))
            v38 = 1;
          else
            v38 = v88 == 0;
          if (v38)
            v39 = 1;
          else
            v39 = v9;
          if ((v39 & 1) == 0)
          {
            if ((*(_BYTE *)(v20 + 8 * (int)result + 4) & 4) != 0 && (*(_BYTE *)(v20 + 8 * v14 + 4) & 2) != 0)
            {
              *v22 = v5;
              v56 = v5 + 1;
              v57 = v56 - v11;
              if (v56 >= v11)
              {
                if (v57 >= v11)
                  v57 %= (unint64_t)v11;
              }
              else
              {
                LODWORD(v57) = v5 + 1;
                if (v5 <= -2)
                {
                  v57 = v11 + v56;
                  if (v11 + v56 < 0)
                    v57 = v57 % v11 + v11;
                }
              }
              while ((_DWORD)result != (_DWORD)v57)
              {
                v74 = v20 + 8 * (int)v57;
                v76 = *(_DWORD *)(v74 + 4);
                v75 = (_DWORD *)(v74 + 4);
                if ((v76 & 0xFFFFFFF9) == 0)
                  *v75 = 0;
                v77 = (int)v57 + 1;
                v78 = v77 - v11;
                if (v77 >= v11)
                {
                  LODWORD(v57) = v77 - v11;
                  if (v78 >= v11)
                    v57 = v78 % (unint64_t)v11;
                }
                else
                {
                  v71 = (int)v57 <= -2;
                  LODWORD(v57) = v57 + 1;
                  if (v71)
                  {
                    v57 = v77 + v11;
                    if (v77 + v11 < 0)
                      v57 = v57 % v11 + v11;
                  }
                }
              }
            }
            goto LABEL_156;
          }
          if (HIBYTE(v88))
            v40 = v88 == 0;
          else
            v40 = 1;
          if (v40)
            v41 = 1;
          else
            v41 = v9;
          if ((v41 & 1) == 0)
          {
            if ((*(_BYTE *)(v20 + 8 * v14 + 4) & 2) != 0 && (*(_BYTE *)(v20 + 8 * (int)result + 4) & 4) != 0)
            {
              v72 = v5 + 1;
              v73 = v72 - v11;
              if (v72 >= v11)
              {
                if (v73 >= v11)
                  v73 %= (unint64_t)v11;
              }
              else
              {
                LODWORD(v73) = v5 + 1;
                if (v5 <= -2)
                {
                  v73 = v11 + v72;
                  if (v11 + v72 < 0)
                    v73 = v73 % v11 + v11;
                }
              }
              while ((_DWORD)result != (_DWORD)v73)
              {
                v79 = v20 + 8 * (int)v73;
                v81 = *(_DWORD *)(v79 + 4);
                v80 = (_DWORD *)(v79 + 4);
                if ((v81 & 0xFFFFFFF9) == 0)
                  *v80 = 0;
                v82 = (int)v73 + 1;
                v83 = v82 - v11;
                if (v82 >= v11)
                {
                  LODWORD(v73) = v82 - v11;
                  if (v83 >= v11)
                    v73 = v83 % (unint64_t)v11;
                }
                else
                {
                  v71 = (int)v73 <= -2;
                  LODWORD(v73) = v73 + 1;
                  if (v71)
                  {
                    v73 = v82 + v11;
                    if (v82 + v11 < 0)
                      v73 = v73 % v11 + v11;
                  }
                }
              }
              goto LABEL_156;
            }
            v36 = 1;
          }
        }
        else if ((*(_BYTE *)(v20 + 8 * v14 + 4) & 2) != 0)
        {
          goto LABEL_155;
        }
      }
      else
      {
        if ((*(_BYTE *)(v20 + 8 * v14 + 4) & 2) != 0 && (*(_BYTE *)(v20 + 8 * (int)v31 + 4) & 4) != 0)
        {
          *v22 = v5;
          *v34 = v7;
          goto LABEL_158;
        }
        v36 = 0;
      }
      if ((v9 & 1) == 0 && (*(_BYTE *)(v20 + 8 * (int)v31 + 4) & 2) != 0 || !debug_auto_trace_syntax)
        goto LABEL_158;
      v53 = v88 != 0;
      v54 = "breaking 4";
    }
    result = pairInsertError(v86, a2, v14, v36, a3, result, v53, a4, v54);
    goto LABEL_158;
  }
  if (HIBYTE(v88) | v88)
  {
    if (!HIBYTE(v88) && (_BYTE)v88)
    {
      v29 = *(_DWORD *)(v20 + 8 * (int)v19 + 4);
      if ((v29 & 0xA) == 0)
        goto LABEL_156;
      if (((v29 >> 1) & 1 & ~v9) != 0 || !debug_auto_trace_syntax)
        goto LABEL_158;
      v84 = "breaking 2";
      v24 = v86;
      v25 = a2;
      v26 = v14;
      v27 = 0;
      v28 = a3;
      v15 = v14;
LABEL_116:
      v55 = 1;
      goto LABEL_117;
    }
    if (*(_DWORD *)(v86 + 220) == 1)
    {
      v33 = *(_DWORD *)(v20 + 8 * v14 + 4);
      if (v33 == 64)
      {
        a2[1] = v6 & 0xFFFFFFBF;
        goto LABEL_156;
      }
      if (v33 == 1)
        goto LABEL_156;
    }
    if (debug_auto_trace_syntax)
      pairInsertError(v86, a2, v14, HIBYTE(v88) != 0, a3, v14, v88 != 0, a4, "syntax 1");
LABEL_156:
    result = (uint64_t)addInterestingPointAtIndex(v5, v6, a4);
    if (!result || (result = (uint64_t)addInterestingPointAtIndex(v7, v8, a4)) == 0)
    {
      *a5 = 1;
      return result;
    }
    goto LABEL_158;
  }
  v21 = *(_DWORD *)(v20 + 8 * (int)v19 + 4);
  if ((v21 & 0xA) == 0)
    goto LABEL_156;
  if (((v21 >> 1) & 1 & ~v9) != 0)
    goto LABEL_158;
  if (v9)
  {
    if ((v21 & 8) != 0 || (v21 & 2) != 0 || !debug_auto_trace_syntax)
      goto LABEL_158;
    goto LABEL_109;
  }
  if (debug_auto_trace_syntax && ((v21 & 8) == 0 || (*(_BYTE *)(v20 + 8 * v14 + 4) & 0x10) == 0))
  {
LABEL_109:
    v84 = "breaking 1";
    v24 = v86;
    v25 = a2;
    v26 = v14;
    v27 = 0;
    v28 = a3;
    v15 = v14;
    goto LABEL_110;
  }
LABEL_158:
  v68 = *(unsigned int *)(a4 + 12);
  if ((int)v68 >= 1)
  {
    LODWORD(v69) = *(_DWORD *)(a4 + 12);
    do
    {
      if (!*(_DWORD *)(*(_QWORD *)a4 + 8 * (v68 - 1) + 4))
      {
        if (v68 < (int)v69)
        {
          v70 = v68;
          do
          {
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v70 - 8) = *(_QWORD *)(*(_QWORD *)a4 + 8 * v70);
            ++v70;
            v69 = *(int *)(a4 + 12);
          }
          while (v70 < v69);
        }
        LODWORD(v69) = v69 - 1;
        *(_DWORD *)(a4 + 12) = v69;
      }
      v71 = v68-- <= 1;
    }
    while (!v71);
  }
  return result;
}

int *checkSyntax(int *result, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v36;
  char v37[256];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = result[55];
  if ((int)v2 < 1)
    return result;
  v3 = (uint64_t)result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v36 = 1 - v2;
  v7 = result[55] - 1;
  while (1)
  {
    LODWORD(v8) = v5 + 1;
    if (v5 + 1 >= v2)
    {
      v8 = v36 + v5;
      if (v36 + v5 >= v2)
        v8 %= v2;
    }
    v9 = *(_QWORD *)(v3 + 208);
    v10 = v9 + v4;
    if (!*(_DWORD *)(v9 + v4 + 4))
    {
      __sprintf_chk(v37, 0, 0x100uLL, "zero mask (at %d)", v5);
      result = (int *)printf(" ***** %s in autoTrace\n", v37);
      v6 = 1;
    }
    v11 = *(_DWORD *)(v9 + v4);
    v12 = *(_DWORD *)(v9 + 8 * (int)v8);
    if (v11 >= v12)
    {
      if ((_DWORD)v8)
      {
        if (v5)
          goto LABEL_14;
        if (v11 >= **(_DWORD **)(v3 + 128) + v12)
        {
          v13 = 0;
LABEL_15:
          __sprintf_chk(v37, 0, 0x100uLL, "indexes out of order (at %d)", v13);
          result = (int *)printf(" ***** %s in autoTrace\n", v37);
          v6 = 1;
        }
      }
      else if (v11 >= **(_DWORD **)(v3 + 128) + v12)
      {
LABEL_14:
        v13 = v5;
        goto LABEL_15;
      }
    }
    if ((*(_BYTE *)(v10 + 4) & 1) != 0)
    {
      result = findCorner(v3, *(_DWORD *)(v9 + v4), 0);
      if (!result)
      {
        __sprintf_chk(v37, 0, 0x100uLL, "corner at point index %d not found (at %d)", *(_DWORD *)(v9 + v4), v5);
        result = (int *)printf(" ***** %s in autoTrace\n", v37);
        v6 = 1;
      }
    }
    v14 = *(_DWORD *)(v10 + 4);
    if ((v14 & 8) != 0 && (*(_BYTE *)(v9 + 8 * (int)v8 + 4) & 0x10) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing curve end for curve begin (at %d)", v5);
      result = (int *)printf(" ***** %s in autoTrace\n", v37);
      v14 = *(_DWORD *)(v10 + 4);
      v6 = 1;
    }
    if ((v14 & 2) != 0 && (*(_BYTE *)(v9 + 8 * (int)v8 + 4) & 4) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing straight line end for straight line begin (at %d)", v5);
      result = (int *)printf(" ***** %s in autoTrace\n", v37);
      v14 = *(_DWORD *)(v10 + 4);
      v6 = 1;
    }
    if (v5)
      v15 = 0;
    else
      v15 = v2;
    v16 = v15 + v5 - 1;
    v17 = v16;
    v18 = *(_QWORD *)(v3 + 208);
    if ((v14 & 0x10) != 0 && (*(_BYTE *)(v18 + 8 * v16 + 4) & 8) == 0)
    {
      __sprintf_chk(v37, 0, 0x100uLL, "missing curve begin for curve end (at %d)", v5);
      result = (int *)printf(" ***** %s in autoTrace\n", v37);
      v14 = *(_DWORD *)(v10 + 4);
      v6 = 1;
    }
    if ((v14 & 4) == 0 || (*(_BYTE *)(v18 + 8 * v17 + 4) & 2) != 0)
      break;
    __sprintf_chk(v37, 0, 0x100uLL, "missing straight line begin for straight line end (at %d)", v5);
    result = (int *)printf(" ***** %s in autoTrace\n", v37);
    if (v7 == v5)
      goto LABEL_38;
    v6 = 1;
LABEL_36:
    v4 += 8;
    ++v5;
  }
  if (v7 != v5)
    goto LABEL_36;
  if ((v6 & 1) != 0)
  {
LABEL_38:
    v19 = *(_DWORD *)(v3 + 220);
    putchar(10);
    printf("  ---- after %s ----\n", a2);
    if (v19 >= 1)
    {
      for (i = 0; i != v19; ++i)
        printIPIndex(*(_QWORD *)(v3 + 208), i);
    }
    putchar(10);
    putchar(10);
    if (*(int *)(v3 + 204) >= 1)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        printf("  corner %d (%d-%d) cpi %d\n", v22++, *(_DWORD *)(*(_QWORD *)(v3 + 192) + v21), *(_DWORD *)(*(_QWORD *)(v3 + 192) + v21 + 4), *(_DWORD *)(*(_QWORD *)(v3 + 192) + v21 + 8));
        v21 += 12;
      }
      while (v22 < *(int *)(v3 + 204));
    }
    v23 = *(unsigned int **)(v3 + 128);
    v24 = *v23;
    v25 = (float *)*((_QWORD *)v23 + 1);
    v26 = *v25;
    v27 = v25[1];
    if ((int)v24 >= 1)
    {
      v28 = v25 + 1;
      v29 = v24;
      v30 = v27;
      v31 = v26;
      while (1)
      {
        v33 = *(v28 - 1);
        v32 = *v28;
        v34 = v33 > v26 ? *(v28 - 1) : v26;
        if (v33 >= v31)
          v26 = v34;
        else
          v31 = *(v28 - 1);
        if (v32 < v30)
          break;
        if (v32 <= v27)
          goto LABEL_55;
LABEL_56:
        v28 += 2;
        v27 = v32;
        if (!--v29)
          return (int *)printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v24, v31, v26, v30, v32);
      }
      v30 = *v28;
LABEL_55:
      v32 = v27;
      goto LABEL_56;
    }
    v31 = *v25;
    v30 = v25[1];
    v32 = v30;
    return (int *)printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v24, v31, v26, v30, v32);
  }
  return result;
}

uint64_t LRLine(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4)
{
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  _OWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v16 = 0;
  v15 = 0;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  computeATRRecord((uint64_t)v13, *(int **)(a1 + 128), a2, 5);
  v8 = ATRLinearRegression((uint64_t)v13, &v16, (float *)&v15 + 1, (float *)&v15);
  if ((_DWORD)v8)
  {
    v9 = v16;
    v10 = *(float *)&v15;
    *a4 = ATRMaxDistanceFromLine(v13, v16, *((float *)&v15 + 1), *(float *)&v15);
    ATRAngleOfLine(v10, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2, 5, v9);
    *a3 = v11;
  }
  return v8;
}

float straightLineDistanceDeltaToleranceAtAngle(float a1)
{
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  char v11[256];
  uint64_t v12;

  v1 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  v2 = a1 - (float)((float)(int)floorf(a1 * 4.0) * 0.25);
  if (v2 > 0.125)
    v2 = 0.25 - v2;
  v3 = v2 * 360.0;
  while (1)
  {
    v4 = v1 + 2;
    if (v1 == 14)
      break;
    v5 = &SLDDT[v1];
    v6 = *v5;
    v7 = v5[2];
    v8 = *v5 > v3 || v3 > v7;
    v1 = v4;
    if (!v8)
    {
      v9 = SLDDT[(((_DWORD)v4 - 2) & 0xFFFFFFFE) + 1];
      return v9 + (float)((float)((float)(v3 - v6) / (float)(v7 - v6)) * (float)(SLDDT[(v4 & 0xFFFFFFFE) + 1] - v9));
    }
  }
  __sprintf_chk(v11, 0, 0x100uLL, "angle %.3f not found in straightLineDistanceDeltaToleranceAtAngle", (float)(a1 * 360.0));
  printf(" ***** %s in autoTrace\n", v11);
  return 0.099;
}

int *findCorner(uint64_t a1, int a2, int a3)
{
  int v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int *result;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v3 = **(_DWORD **)(a1 + 128);
  v4 = *(_DWORD **)(a1 + 192);
  if (*v4 <= v4[1])
    v5 = 0;
  else
    v5 = **(_DWORD **)(a1 + 128);
  v6 = *v4 - v5;
  v7 = *(_DWORD *)(a1 + 204);
  v8 = &v4[3 * v7];
  v9 = *(v8 - 2);
  if (v7 > 1)
  {
    if (v9 >= *(v8 - 3))
      v10 = 0;
    else
      v10 = **(_DWORD **)(a1 + 128);
    v9 += v10;
  }
  if (v3 + a2 <= v9)
    v11 = v3 + a2;
  else
    v11 = a2;
  if (a2 - v3 >= v6)
    v12 = a2 - v3;
  else
    v12 = v11;
  if (v7 < 1)
  {
LABEL_38:
    if (a3)
      printf(" ***** %s in autoTrace\n", "find corner could not find index");
    return 0;
  }
  else
  {
    v13 = 0;
    v14 = v3 >> 1;
    v15 = *(_DWORD *)(a1 + 204);
    do
    {
      v16 = (v15 + v13) >> 1;
      v17 = (uint64_t)(v15 + v13) >> 1;
      result = &v4[3 * v16];
      if ((v15 + v13) > 1)
      {
        v23 = *result;
        v24 = v4[3 * (int)v17 + 1];
        if (*result + v14 >= v24)
          v25 = 0;
        else
          v25 = v3;
        v26 = v24 - v25;
        if (*result - v14 > v24)
          v19 = v24 + v3;
        else
          v19 = v26;
      }
      else
      {
        v19 = v4[3 * (int)v17 + 1];
        v20 = *result;
        if (v19 + v14 >= *result)
          v21 = 0;
        else
          v21 = v3;
        v22 = v20 - v21;
        if (v19 - v14 > v20)
          v23 = v20 + v3;
        else
          v23 = v22;
      }
      if (v19 >= v12)
      {
        v15 = (v15 + v13) >> 1;
        if (v23 <= v12)
          return result;
      }
      else
      {
        v13 = v16 + 1;
      }
    }
    while (v13 < v15);
    while (v4[2] != v12)
    {
      v4 += 3;
      if (!--v7)
        goto LABEL_38;
    }
    return v4;
  }
}

_DWORD *addInterestingPointAtIndex(int a1, int a2, uint64_t a3)
{
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;

  v6 = *(_DWORD *)(a3 + 12);
  v7 = *(_DWORD **)a3;
  if (v6 < 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *(_DWORD *)(a3 + 12);
    do
    {
      v10 = (v9 + v8) >> 1;
      if (v7[2 * v10] >= a1)
        v9 = (v9 + v8) >> 1;
      else
        v8 = v10 + 1;
    }
    while (v8 < v9);
  }
  v11 = v8;
  if (v8 < v6 && (v12 = &v7[2 * v8], *v12 == a1))
  {
    v7[2 * v8 + 1] |= a2;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 8);
    if (v6 >= v13)
    {
      v14 = malloc_type_malloc(8 * (v13 + 100), 0x100004000313F17uLL);
      if (!v14)
      {
        printf(" ***** %s in autoTrace\n", "could not extend interesting points list");
        return 0;
      }
      v7 = v14;
      memmove(v14, *(const void **)a3, 8 * *(int *)(a3 + 8));
      *(_DWORD *)(a3 + 8) += 100;
      free(*(void **)a3);
      *(_QWORD *)a3 = v7;
      v6 = *(_DWORD *)(a3 + 12);
    }
    v12 = &v7[2 * v11];
    memmove(v12 + 2, v12, 8 * (v6 - (int)v11));
    ++*(_DWORD *)(a3 + 12);
    *v12 = a1;
    v12[1] = a2;
  }
  return v12;
}

uint64_t ipCompare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t cornerCompare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

float computeAngleSumAndRange(uint64_t a1, int a2, int a3, float *a4, float *a5)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float result;

  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(float *)(v5 + 4 * a2);
  v7 = 0.0;
  v8 = v6;
  v9 = v6;
  do
  {
    v10 = *(float *)(v5 + 4 * a2) - rintf(*(float *)(v5 + 4 * a2) - v6);
    if (v10 >= v8)
    {
      if (v10 > v9)
        v9 = v10;
    }
    else
    {
      v8 = v10;
    }
    v7 = v7 + *(float *)(*(_QWORD *)(a1 + 160) + 4 * a2);
    v11 = a2 + 1;
    if (a2 + 1 >= **(_DWORD **)(a1 + 128))
      v12 = **(_DWORD **)(a1 + 128);
    else
      v12 = 0;
    a2 = v11 - v12;
  }
  while (v11 - v12 != a3);
  *a4 = v7;
  result = v9 - v8;
  *a5 = v9 - v8;
  return result;
}

char *appendInterestingPointAtIndex(int a1, int a2, char **a3)
{
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *result;

  v7 = *((_DWORD *)a3 + 2);
  v6 = *((_DWORD *)a3 + 3);
  if (v6 < v7)
  {
    v8 = *a3;
LABEL_5:
    *((_DWORD *)a3 + 3) = v6 + 1;
    result = &v8[8 * v6];
    *(_DWORD *)result = a1;
    *((_DWORD *)result + 1) = a2;
    return result;
  }
  v9 = (char *)malloc_type_malloc(8 * (v7 + 100), 0x100004000313F17uLL);
  if (v9)
  {
    v8 = v9;
    memmove(v9, *a3, 8 * *((int *)a3 + 2));
    *((_DWORD *)a3 + 2) += 100;
    free(*a3);
    *a3 = v8;
    v6 = *((_DWORD *)a3 + 3);
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend interesting points list");
  return 0;
}

int *findNonOrthogonalLines(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float *v56;
  float v57;
  float v58;
  BOOL v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int v64;
  float v65;
  float v66;
  uint64_t v67;
  int v68;
  int v69;
  float *v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  char v110;
  char v111[256];
  uint64_t v112;

  v1 = a1;
  v112 = *MEMORY[0x1E0C80C00];
  v2 = **(int **)(a1 + 128);
  v103 = a1 + 224;
  result = (int *)initInterestingPointList((_QWORD *)(a1 + 224));
  if (!(_DWORD)result)
    return result;
  v110 = 0;
  v4 = (uint64_t *)(v1 + 208);
  LODWORD(v5) = *(_DWORD *)(v1 + 220);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v108 = 0;
    v106 = 0;
    if ((int)v2 >= 0)
      v7 = v2;
    else
      v7 = v2 + 1;
    v101 = v7 >> 1;
    v102 = -(v7 >> 1);
    v8 = 0.0;
    v9 = 0.0;
    v104 = (uint64_t *)(v1 + 208);
    v105 = (int)v2 >> 1;
    do
    {
      v10 = v1;
      v11 = v6;
      LODWORD(v1) = v6 + 1;
      if (v6 + 1 >= (int)v5)
      {
        v1 = v6 + 1 - (int)v5;
        if (v1 >= (int)v5)
          v1 %= (int)v5;
      }
      v107 = v6 + 1;
      v12 = *v4;
      v13 = (int *)(*v4 + 8 * v6);
      v14 = (int *)(*v4 + 8 * (int)v1);
      v15 = *v13;
      v16 = *v14;
      v17 = *v4 + 8 * v11;
      v19 = *(_BYTE *)(v17 + 4);
      v18 = (_BYTE *)(v17 + 4);
      if ((v19 & 1) != 0)
      {
        result = findCorner(v10, *v13, 1);
        if (!result)
          return result;
        v20 = result[1];
      }
      else
      {
        v20 = *v13;
      }
      v21 = *(_BYTE *)(v12 + 8 * (int)v1 + 4);
      v22 = v16;
      v1 = v10;
      if ((v21 & 1) != 0)
      {
        v23 = v20;
        result = findCorner(v10, *v14, 1);
        if (!result)
          return result;
        v22 = *result;
        v20 = v23;
      }
      if (v16 <= v15)
      {
        v24 = v20 - *v13;
        if (v24 < 0)
          v24 = *v13 - v20;
        v6 = v107;
        if (v24 > v105)
          goto LABEL_26;
        v25 = v22 - *v14;
        if (v25 < 0)
          v25 = *v14 - v22;
        if (v25 <= v105)
        {
          if (v22 <= v20 - (int)v2)
            goto LABEL_43;
        }
        else
        {
LABEL_26:
          if (v22 <= v20)
            goto LABEL_43;
        }
      }
      else
      {
        v6 = v107;
        if (v22 <= v20)
          goto LABEL_43;
      }
      v26 = v22 - v20;
      if (v22 == v20)
      {
        if (*(int *)(v10 + 220) >= 2)
        {
          __sprintf_chk(v111, 0, 0x100uLL, "zero length curve in findNonOrthogonalLines at point index %d");
          goto LABEL_211;
        }
      }
      else if (v26 >= 0xFFFFFFFE && (int)v2 >= 101 && *(int *)(v10 + 220) >= 3)
      {
        __sprintf_chk(v111, 0, 0x100uLL, "findNonOrthogonalLines with reversed point indexes %d and %d");
LABEL_211:
        printf(" ***** %s in autoTrace\n", v111);
        return (int *)1;
      }
      if (v26 <= 0)
        v27 = v2;
      else
        v27 = 0;
      v28 = v27 + v26;
      if ((*v18 & 0xA) != 0 || v28 < 21)
      {
LABEL_43:
        v4 = v104;
        goto LABEL_44;
      }
      v30 = v20 + 10;
      v31 = v20 + 10;
      v4 = v104;
      if (v20 + 10 >= (int)v2)
      {
        v33 = v30 - v2;
        if (v31 - v2 >= v2)
        {
          v34 = (_DWORD)v2 == 0;
        }
        else
        {
          LODWORD(v31) = v31 - v2;
          v34 = 1;
        }
        if (!v34)
          v31 = v33 % v2;
      }
      else if (v20 <= -11)
      {
        v32 = v30 + v2;
        if (v31 + v2 < 0 == __OFADD__(v31, v2))
          LODWORD(v31) = v31 + v2;
        if (v32 < 0 && (_DWORD)v2)
          v31 = v32 % v2 + v2;
      }
      v35 = v22 - 11;
      LODWORD(v36) = v22 - 11;
      if (v22 - 11 >= (int)v2)
      {
        if (v35 - v2 >= v2)
        {
          if ((_DWORD)v2)
            v36 = (v35 - v2) % v2;
        }
        else
        {
          LODWORD(v36) = v36 - v2;
        }
      }
      else if (v22 <= 10)
      {
        v37 = v35 + v2;
        if (v37 < 0 == __OFADD__(v35, v2))
          LODWORD(v36) = v36 + v2;
        if (v37 < 0 && (_DWORD)v2)
          v36 = v37 % v2 + v2;
      }
      if ((_DWORD)v31 != (_DWORD)v36)
      {
        v38 = 0;
        v39 = -1;
        do
        {
          v40 = *(_QWORD *)(v10 + 144);
          v41 = v2 + (int)v31;
          v42 = (int)v31 - v2;
          v43 = 0.0;
          v44 = -10;
          v45 = *(float *)(v40 + 4 * (int)v31);
          v46 = v45;
          do
          {
            v47 = (int)v31 + v44;
            if (v47 >= v2)
            {
              if (v42 + v44 >= v2)
              {
                if ((_DWORD)v2)
                  v47 = (v42 + v44) % v2;
              }
              else
              {
                LODWORD(v47) = v42 + v44;
              }
            }
            else if (v47 < 0)
            {
              v48 = v41 + v44;
              if (v41 + v44 >= 0)
                LODWORD(v47) = v41 + v44;
              if (v48 < 0 && (_DWORD)v2)
                v47 = v48 % v2 + v2;
            }
            v49 = *(float *)(v40 + 4 * (int)v47)
                - rintf(*(float *)(v40 + 4 * (int)v47) - *(float *)(v40 + 4 * (int)v31));
            if (v49 > v45)
              v50 = v49;
            else
              v50 = v45;
            if (v49 >= v46)
              v45 = v50;
            else
              v46 = v49;
            v43 = v43 + v49;
            ++v44;
          }
          while (v44 != 11);
          v51 = 0;
          v52 = v43 / 21.0;
          v53 = (float)(v43 / 21.0) - (float)((float)(int)floorf((float)(v43 / 21.0) * 4.0) * 0.25);
          if (v53 > 0.125)
            v53 = 0.25 - v53;
          v54 = v53 * 360.0;
          do
          {
            v55 = v51 + 2;
            if (v51 == 20)
            {
              __sprintf_chk(v111, 0, 0x100uLL, "angle %.3f not found in straightLineAngleDeltaToleranceAtAngle", (float)(v52 * 360.0));
              printf(" ***** %s in autoTrace\n", v111);
              v62 = 12.235;
              goto LABEL_102;
            }
            v56 = &SLADT[v51];
            v57 = *v56;
            v58 = v56[2];
            v59 = *v56 > v54 || v54 > v58;
            v51 = v55;
          }
          while (v59);
          v60 = (float)(v54 - v57) / (float)(v58 - v57);
          v61 = SLADT[(((_DWORD)v55 - 2) & 0xFFFFFFFE) + 1];
          v62 = v61 + (float)(v60 * (float)(SLADT[(v55 & 0xFFFFFFFE) + 1] - v61));
          if (v62 < 3.1)
            v62 = 3.1;
LABEL_102:
          v63 = v45 - v52;
          if ((float)(v52 - v46) > (float)(v45 - v52))
            v63 = v52 - v46;
          if (v63 <= v62)
          {
            if ((v38 & 1) != 0)
            {
              if (v39 + 1 >= (int)v2)
                v64 = v2;
              else
                v64 = 0;
              v65 = v52;
              v66 = v8;
              if (v52 >= v9)
              {
                v65 = v9;
                v66 = v8;
                if (v52 > v8)
                {
                  v65 = v9;
                  v66 = v52;
                }
              }
              v67 = 0;
              v68 = v39 + 1 - v64;
              while (1)
              {
                v69 = v67 + 2;
                if (v67 == 6)
                  break;
                v70 = &SLGADT[v67];
                v71 = v70[2];
                v72 = *v70 > v54 || v54 > v71;
                v67 += 2;
                if (!v72)
                {
                  v73 = (float)(v54 - *v70) / (float)(v71 - *v70);
                  v74 = SLGADT[((v69 - 2) & 0xFFFFFFFE) + 1];
                  v75 = v74 + (float)(v73 * (float)(SLGADT[(v69 & 0xFFFFFFFE) + 1] - v74));
                  goto LABEL_121;
                }
              }
              __sprintf_chk(v111, 0, 0x100uLL, "angle %.3f not found in straightLineGatheredAngleDeltaToleranceAtAngle", (float)(v52 * 360.0));
              printf(" ***** %s in autoTrace\n", v111);
              v75 = 1.0;
LABEL_121:
              if ((_DWORD)v31 == v68 && (float)(v66 - v65) <= v75)
              {
                ++v108;
                v38 = 1;
                v39 = v31;
                v9 = v65;
                v8 = v66;
              }
              else
              {
                v76 = v106 - 10;
                v77 = v106 - 10;
                if (v106 - 10 >= (int)v2)
                {
                  v79 = v76 - v2;
                  if (v77 - v2 >= v2)
                  {
                    if ((_DWORD)v2)
                      v77 = v79 % v2;
                  }
                  else
                  {
                    v77 -= v2;
                  }
                }
                else if (v106 <= 9)
                {
                  v78 = v76 + v2;
                  if (v77 + v2 < 0 == __OFADD__(v77, v2))
                    v77 += v2;
                  if (v78 < 0 && (_DWORD)v2)
                    v77 = v78 % v2 + v2;
                }
                v80 = (v108 + 20);
                v81 = v80 + v77;
                v82 = (int)v80 + (int)v77;
                if ((int)v80 + (int)v77 >= (int)v2)
                {
                  v84 = v81 - v2;
                  if (v82 - v2 >= v2)
                  {
                    if ((_DWORD)v2)
                      v82 = v84 % v2;
                  }
                  else
                  {
                    LODWORD(v82) = v82 - v2;
                  }
                }
                else if ((v82 & 0x80000000) != 0)
                {
                  v83 = v81 + v2;
                  if (v82 + v2 < 0 == __OFADD__(v82, v2))
                    LODWORD(v82) = v82 + v2;
                  if (v83 < 0 && (_DWORD)v2)
                    v82 = v83 % v2 + v2;
                }
                v109 = v82;
                if (outputLineAtIndex(v10, v77, v80, (char **)v103, &v109, &v110))
                {
                  v85 = v36 - v109;
                  if ((int)v36 - v109 >= v101)
                    v86 = v2;
                  else
                    v86 = 0;
                  if (v85 >= v102)
                    v87 = -v86;
                  else
                    v87 = v2;
                  if (v85 + v87 < 9)
                    goto LABEL_44;
                  v31 = v109 + 9;
                  if (v109 + 9 >= (int)v2)
                  {
                    if (v31 - v2 >= v2)
                    {
                      if ((_DWORD)v2)
                        v31 = (v31 - v2) % v2;
                    }
                    else
                    {
                      LODWORD(v31) = v31 - v2;
                    }
                  }
                  else if (v109 <= -10)
                  {
                    v88 = v31 + v2;
                    if (v31 + v2 < 0 == __OFADD__(v31, v2))
                      LODWORD(v31) = v31 + v2;
                    if (v88 < 0 && (_DWORD)v2)
                      v31 = v88 % v2 + v2;
                  }
                }
                v38 = 0;
                result = 0;
                if (v110)
                  return result;
              }
            }
            else
            {
              v38 = 1;
              v39 = v31;
              v106 = v31;
              v108 = 1;
              v9 = v52;
              v8 = v52;
            }
          }
          if ((int)v31 + 1 >= (int)v2)
            v89 = v2;
          else
            v89 = 0;
          if ((_DWORD)v31 != (_DWORD)v36)
            LODWORD(v31) = v31 + 1 - v89;
        }
        while ((_DWORD)v31 != (_DWORD)v36);
        if ((v38 & 1) != 0)
        {
          v90 = v106 - 10;
          v91 = v106 - 10;
          if (v106 - 10 >= (int)v2)
          {
            v93 = v90 - v2;
            if (v91 - v2 >= v2)
            {
              if ((_DWORD)v2)
                v91 = v93 % v2;
            }
            else
            {
              v91 -= v2;
            }
          }
          else if (v106 <= 9)
          {
            v92 = v90 + v2;
            if (v91 + v2 < 0 == __OFADD__(v91, v2))
              v91 += v2;
            if (v92 < 0 && (_DWORD)v2)
              v91 = v92 % v2 + v2;
          }
          v94 = (v108 + 19);
          v95 = v94 + v91;
          v96 = (int)v94 + (int)v91;
          if ((int)v94 + (int)v91 >= (int)v2)
          {
            v98 = v95 - v2;
            if (v96 - v2 >= v2)
            {
              if ((_DWORD)v2)
                v96 = v98 % v2;
            }
            else
            {
              LODWORD(v96) = v96 - v2;
            }
          }
          else if ((v96 & 0x80000000) != 0)
          {
            v97 = v95 + v2;
            if (v96 + v2 < 0 == __OFADD__(v96, v2))
              LODWORD(v96) = v96 + v2;
            if (v97 < 0 && (_DWORD)v2)
              v96 = v97 % v2 + v2;
          }
          v109 = v96;
          outputLineAtIndex(v10, v91, v94, (char **)v103, &v109, &v110);
          if (v110)
            return 0;
        }
      }
LABEL_44:
      v5 = *(int *)(v10 + 220);
    }
    while (v6 < v5);
  }
  if (debug_auto_trace_syntax)
    checkSyntax((int *)v1, "findNonOrthogonalLines loop");
  if (*(int *)(v1 + 236) < 1)
  {
LABEL_203:
    if (debug_auto_trace_syntax)
      checkSyntax((int *)v1, "inserts in findNonOrthogonalLines");
    if (*(_QWORD *)v103)
      free(*(void **)v103);
    *(_QWORD *)v103 = 0;
    *(_QWORD *)(v103 + 8) = 0;
    if (debug_auto_trace)
    {
      if (*(_QWORD *)v1)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 8))(*(_QWORD *)v1, 4, v1);
    }
    return (int *)1;
  }
  v99 = 0;
  v100 = 0;
  while (1)
  {
    insertPairIntoInterestingPoints(v1, (int *)(*(_QWORD *)(v1 + 224) + v100), (int *)(*(_QWORD *)(v1 + 224) + v100 + 8), (uint64_t)v4, &v110);
    if (v110)
      return 0;
    v100 += 16;
    v99 += 2;
    if (*(_DWORD *)(v1 + 236) <= v99)
      goto LABEL_203;
  }
}

int *findInflectionPoints(_QWORD *a1)
{
  int v2;
  void **v3;
  int *result;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  int *v39;
  char v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  float v51;
  int v52;
  int v53;
  int v54;
  float v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  char v68[256];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)a1[16];
  v3 = (void **)(a1 + 28);
  result = (int *)initInterestingPointList(a1 + 28);
  if ((_DWORD)result)
  {
    v5 = a1 + 26;
    v6 = *((_DWORD *)a1 + 55);
    if (v6 >= 1)
    {
      v7 = 0;
      v66 = (uint64_t)v3;
      while (1)
      {
        v8 = v7 + 1;
        v9 = v6;
        if (v7 + 1 >= v6)
        {
          v12 = v8 - (uint64_t)v6;
          LODWORD(v11) = v8 - v9;
          if (v8 - v9 >= v9)
          {
            LODWORD(v11) = v7 + 1;
            if ((_DWORD)v9)
              v11 = v12 % v9;
          }
        }
        else if (v7 > -2)
        {
          LODWORD(v11) = v7 + 1;
        }
        else
        {
          v10 = v6 + (uint64_t)v8;
          LODWORD(v11) = v9 + v8;
          if (v9 + v8 < 0)
          {
            LODWORD(v11) = v7 + 1;
            if ((_DWORD)v9)
              v11 = v10 % v9 + v9;
          }
        }
        v13 = *v5;
        v14 = *v5 + 8 * v7;
        v17 = *(_DWORD *)(v14 + 4);
        v16 = (int *)(v14 + 4);
        v15 = v17;
        if ((v17 & 0xA) != 0)
          goto LABEL_14;
        v18 = (int *)(v13 + 8 * (int)v11);
        v19 = *(_DWORD *)(v13 + 8 * v7);
        v20 = *v18;
        v21 = *v18 - v19;
        v22 = *v18 <= v19 ? v2 : 0;
        v23 = v22 + v21;
        v67 = v22 + v21;
        if ((v15 & 1) != 0)
        {
          v25 = v7;
          v26 = v16;
          v27 = (int *)(v13 + 8 * (int)v11);
          v28 = v11;
          result = findCorner((uint64_t)a1, v19, 1);
          if (!result)
            return result;
          v29 = v19;
          LODWORD(v11) = v28;
          v18 = v27;
          v16 = v26;
          v7 = v25;
          v24 = result[1];
          while (v29 != v24)
          {
            v30 = v29 + 1;
            if (v30 >= v2)
              v31 = v2;
            else
              v31 = 0;
            v29 = v30 - v31;
            --v23;
            if (v29 == v20)
            {
              v24 = v20;
              break;
            }
          }
        }
        else
        {
          v24 = *(_DWORD *)(v13 + 8 * v7);
        }
        v32 = (int)v11;
        if (v24 == v20 && !v23)
          break;
        v38 = v13 + 8 * (int)v11;
        v40 = *(_BYTE *)(v38 + 4);
        v39 = (int *)(v38 + 4);
        if ((v40 & 1) != 0)
        {
          v65 = v39;
          v41 = v11;
          result = findCorner((uint64_t)a1, *v18, 1);
          if (!result)
            return result;
          if (v20 == v19)
          {
            v20 = v19;
            LODWORD(v11) = v41;
            v39 = v65;
          }
          else
          {
            LODWORD(v11) = v41;
            v39 = v65;
            while (v20 != *result)
            {
              if (v20 <= 0)
                v42 = v2;
              else
                v42 = 0;
              v20 = v20 + v42 - 1;
              --v23;
              if (v20 == v19)
              {
                v20 = v19;
                goto LABEL_58;
              }
            }
            v20 = *result;
          }
        }
LABEL_58:
        if (v23 <= 3)
        {
          v46 = *v16;
          if ((*v16 & 1) != 0)
          {
            v58 = *v39;
            v59 = (v46 & 0xA) != 0 || (*v39 & 1) == 0;
            v5 = a1 + 26;
            if (!v59)
            {
              if (v67 < 3)
              {
                if ((v46 & 0x10) != 0)
                {
                  v58 |= 0x10u;
                  *v39 = v58;
                  v46 = *v16;
                }
                if ((v46 & 4) != 0)
                  *v39 = v58 | 4;
                v60 = *((_DWORD *)a1 + 55);
                v61 = v60 - 1;
                if (v7 != v60 - 1 && v60 > (int)v11)
                {
                  do
                  {
                    *(_QWORD *)(a1[26] + 8 * v32 - 8) = *(_QWORD *)(a1[26] + 8 * v32);
                    ++v32;
                    v62 = *((int *)a1 + 55);
                  }
                  while (v32 < v62);
                  v61 = v62 - 1;
                }
                *((_DWORD *)a1 + 55) = v61;
                if (debug_auto_trace_syntax)
                {
                  __sprintf_chk(v68, 0, 0x100uLL, "after delete ip index %d", v7 - 1);
                  checkSyntax((int *)a1, v68);
                }
                --v7;
              }
              else
              {
                *v16 = v46 | 8;
                *v39 |= 0x10u;
              }
            }
            goto LABEL_100;
          }
          goto LABEL_60;
        }
        v3 = (void **)v66;
        result = addInterestingPointAtIndex(v24, 8, v66);
        if (!result)
          return result;
        v47 = v7;
        LOBYTE(v48) = *(float *)(a1[20] + 4 * v24) > 0.0;
        v49 = v24;
        do
        {
          v50 = a1[20];
          v51 = *(float *)(v50 + 4 * v49);
          v52 = v48 & 1;
          if (v52 == v51 <= 0.0)
          {
            if (v49 <= 0)
              v54 = v2;
            else
              v54 = 0;
            v55 = *(float *)(v50 + 4 * (v49 + v54 - 1));
            v53 = v49 + 1;
            if (v49 + 1 >= v2)
              v56 = v2;
            else
              v56 = 0;
            v48 = (float)((float)((float)(v51 + v55) + *(float *)(v50 + 4 * (v53 - v56))) * 0.33333) > 0.0;
            if (v52 != v48
              && (v2 & ((v49 - v24) >> 31)) + v49 - v24 >= 6
              && (v2 & ((v20 - v49) >> 31)) + v20 - v49 >= 6)
            {
              result = addInterestingPointAtIndex(v49, 16, v66);
              if (!result)
                return result;
              result = addInterestingPointAtIndex(v49, 32, v66);
              if (!result)
                return result;
              result = addInterestingPointAtIndex(v49, 8, v66);
              if (!result)
                return result;
            }
          }
          else
          {
            v53 = v49 + 1;
          }
          if (v53 >= v2)
            v57 = v2;
          else
            v57 = 0;
          v49 = v53 - v57;
        }
        while (v53 - v57 != v20);
        result = addInterestingPointAtIndex(v20, 16, v66);
        v5 = a1 + 26;
        v7 = v47;
        if (!result)
          return result;
LABEL_14:
        ++v7;
        v6 = *((_DWORD *)a1 + 55);
        if (v7 >= v6)
          goto LABEL_101;
      }
      v33 = *v16;
      if ((*v16 & 1) != 0)
      {
        v5 = a1 + 26;
        if ((v33 & 0xA) == 0)
        {
          v34 = v13 + 8 * (int)v11;
          v37 = *(_DWORD *)(v34 + 4);
          v35 = (int *)(v34 + 4);
          v36 = v37;
          if ((v37 & 1) != 0)
          {
            if (v67 < 3)
            {
              if ((v33 & 0x10) != 0)
              {
                v36 |= 0x10u;
                *v35 = v36;
                v33 = *v16;
              }
              if ((v33 & 4) != 0)
                *v35 = v36 | 4;
              v43 = *((_DWORD *)a1 + 55);
              v44 = v43 - 1;
              if (v7 != v43 - 1 && v43 > (int)v11)
              {
                do
                {
                  *(_QWORD *)(a1[26] + 8 * v32 - 8) = *(_QWORD *)(a1[26] + 8 * v32);
                  ++v32;
                  v45 = *((int *)a1 + 55);
                }
                while (v32 < v45);
                v44 = v45 - 1;
              }
              *((_DWORD *)a1 + 55) = v44;
              --v7;
              if (debug_auto_trace_syntax)
              {
                __sprintf_chk(v68, 0, 0x100uLL, "after delete ip index %d", v7);
                checkSyntax((int *)a1, v68);
              }
            }
            else
            {
              *v16 = v33 | 8;
              *v35 |= 0x10u;
            }
          }
        }
LABEL_100:
        v3 = (void **)v66;
        goto LABEL_14;
      }
LABEL_60:
      v5 = a1 + 26;
      v3 = (void **)v66;
      goto LABEL_14;
    }
LABEL_101:
    if (*((int *)a1 + 59) < 1)
    {
LABEL_105:
      if (*v3)
        free(*v3);
      *v3 = 0;
      v3[1] = 0;
      if (debug_auto_trace_syntax)
        checkSyntax((int *)a1, "find inflection points");
      if (debug_auto_trace)
      {
        if (*a1)
          ((void (*)(_QWORD, uint64_t, _QWORD *))a1[1])(*a1, 5, a1);
      }
      return (int *)1;
    }
    else
    {
      v63 = 0;
      v64 = 0;
      while (1)
      {
        result = addInterestingPointAtIndex(*(_DWORD *)((char *)*v3 + v63), *(_DWORD *)((char *)*v3 + v63 + 4), (uint64_t)v5);
        if (!result)
          break;
        ++v64;
        v63 += 8;
        if (v64 >= *((int *)a1 + 59))
          goto LABEL_105;
      }
    }
  }
  return result;
}

uint64_t cutUpCurves(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  _BOOL8 v66;
  int v67;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  int v75;
  int v76;
  BOOL v77;
  int v78;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v1 = a1;
  v2 = **(unsigned int **)(a1 + 128);
  v3 = a1 + 208;
  v4 = *(_DWORD *)(a1 + 220);
  if (v4 == 1)
  {
    v5 = *(_DWORD **)v3;
    v6 = *(_DWORD *)(*(_QWORD *)v3 + 4) != 64 || (int)v2 < 1;
    if (!v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 152);
      while (1)
      {
        v9 = v7 + 1;
        v10 = v2 - 1 == v7 ? 0 : v7 + 1;
        v11 = *(float *)(v8 + 4 * v7);
        if (v11 <= 0.5 && *(float *)(v8 + 4 * v10) >= 0.5)
          break;
        if (v11 >= 0.5 && *(float *)(v8 + 4 * v10) <= 0.5)
          break;
        ++v7;
        if (v2 == v9)
          goto LABEL_17;
      }
      *v5 = v7;
      v5[1] = 24;
    }
  }
LABEL_17:
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "circle cut");
    v4 = *(_DWORD *)(v1 + 220);
  }
  if ((int)v4 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(v1 + 208);
    do
    {
      v14 = v12++;
      LODWORD(v15) = v12;
      v16 = v12 - v4;
      if (v12 >= v4)
      {
        LODWORD(v15) = v12 - v4;
        if (v16 >= v4)
          v15 = v16 % (unint64_t)v4;
      }
      v17 = *(_DWORD *)(v13 + 8 * v14);
      v18 = *(_DWORD *)(v13 + 8 * (int)v15);
      v19 = __OFSUB__(v18, v17);
      v20 = v18 - v17;
      if ((v20 < 0) ^ v19 | (v20 == 0))
        v21 = v2;
      else
        v21 = 0;
      if ((*(_BYTE *)(v13 + 8 * v14 + 4) & 8) != 0)
      {
        v22 = (v21 + v20);
        if ((int)v22 >= 1)
        {
          v23 = 0;
          v24 = **(int **)(v1 + 128);
          v25 = *(_QWORD *)(v1 + 160);
          v26 = *(_QWORD *)(v1 + 168);
          do
          {
            v27 = v17;
            v28 = *(float *)(v25 + 4 * v17);
            if ((_DWORD)v24 == (_DWORD)v22)
            {
              v29 = -1;
              v30 = 1 - v24;
              v31 = v24 + 1;
              v32 = ~v24;
              v33 = v24 - 1;
              v34 = 1;
              do
              {
                LODWORD(v35) = v34 + v27 - v24;
                if (v34 + v27 >= v24)
                {
                  if (v27 + v30 >= v24)
                    v35 = (v27 + v30) % v24;
                }
                else
                {
                  LODWORD(v35) = v34 + v27;
                  if (v34 + v27 < 0)
                  {
                    v35 = v27 + v31;
                    if (v27 + v31 < 0)
                      v35 = v35 % v24 + v24;
                  }
                }
                LODWORD(v36) = v27 - v34;
                if (v27 + v29 >= v24)
                {
                  if (v27 + v32 >= v24)
                    v36 = (v27 + v32) % v24;
                  else
                    LODWORD(v36) = v36 - v24;
                }
                else if (v27 + v29 < 0)
                {
                  v36 = v27 + v33;
                  if (v27 + v33 < 0)
                    v36 = v36 % v24 + v24;
                }
                ++v34;
                --v29;
                --v33;
                v28 = (float)(v28 + *(float *)(v25 + 4 * (int)v35)) + *(float *)(v25 + 4 * (int)v36);
                --v32;
                ++v31;
                ++v30;
              }
              while (v29 != -5);
              v37 = 9;
            }
            else
            {
              v38 = 1;
              v39 = -1;
              v40 = 1 - v24;
              v41 = v24 + 1;
              v42 = ~v24;
              v43 = v24 - 1;
              v37 = 1;
              do
              {
                if (v38 < (uint64_t)(v22 - v23))
                {
                  v44 = v17 + v38;
                  if (v44 >= v24)
                  {
                    if (v17 + v40 < v24)
                      LODWORD(v44) = v17 + v40;
                    if ((_DWORD)v24 && v17 + v40 >= v24)
                      v44 = (v17 + v40) % v24;
                  }
                  else if (v44 < 0)
                  {
                    v45 = v17 + v41;
                    if (v45 >= 0)
                      LODWORD(v44) = v17 + v41;
                    if (v45 < 0 && (_DWORD)v24)
                      v44 = v45 % v24 + v24;
                  }
                  v28 = v28 + *(float *)(v25 + 4 * (int)v44);
                  ++v37;
                }
                if (v23 >= v38)
                {
                  v46 = v17 + v39;
                  if (v46 >= v24)
                  {
                    if (v17 + v42 < v24)
                      LODWORD(v46) = v17 + v42;
                    if ((_DWORD)v24 && v17 + v42 >= v24)
                      v46 = (v17 + v42) % v24;
                  }
                  else if (v46 < 0)
                  {
                    v47 = v17 + v43;
                    if (v47 >= 0)
                      LODWORD(v46) = v17 + v43;
                    if (v47 < 0 && (_DWORD)v24)
                      v46 = v47 % v24 + v24;
                  }
                  v28 = v28 + *(float *)(v25 + 4 * (int)v46);
                  ++v37;
                }
                ++v38;
                --v43;
                --v39;
                --v42;
                ++v41;
                ++v40;
              }
              while (v39 != -5);
            }
            *(float *)(v26 + 4 * v27) = v28 / (float)v37;
            v48 = v27 + 1;
            if (v48 >= (int)v24)
              v49 = v24;
            else
              v49 = 0;
            v17 = v48 - v49;
            ++v23;
          }
          while (v23 != v22);
        }
      }
    }
    while (v12 != v4);
  }
  result = initInterestingPointList((_QWORD *)(v1 + 224));
  if ((_DWORD)result)
  {
    v80 = v2;
    v81 = v1 + 224;
    LODWORD(v51) = *(_DWORD *)(v1 + 220);
    if ((int)v51 >= 1)
    {
      v52 = 0;
      v53 = 0;
      v82 = (int)v2 >> 1;
      v54 = 1;
      v83 = v3;
      do
      {
        v55 = v1;
        v56 = v53 + 1;
        LODWORD(v1) = v56;
        if (v54 >= (int)v51)
        {
          v1 = v54 - (int)v51;
          if (v1 >= (int)v51)
            v1 %= (int)v51;
        }
        v57 = *(_QWORD *)v3;
        v58 = (int *)(v57 + 8 * (int)v1);
        v59 = v57 + v52;
        v60 = *(_DWORD *)(v57 + v52);
        v61 = *v58;
        v84 = v56;
        if ((*(_BYTE *)(v57 + v52 + 4) & 1) != 0)
        {
          result = (uint64_t)findCorner(v55, v60, 1);
          if (!result)
            return result;
          v63 = *(unsigned int *)(result + 4);
          v62 = (_DWORD)v63 == v60;
        }
        else
        {
          v62 = 1;
          v63 = *(unsigned int *)(v57 + v52);
        }
        if ((*(_BYTE *)(v57 + 8 * (int)v1 + 4) & 1) != 0)
        {
          v66 = v62;
          result = (uint64_t)findCorner(v55, *v58, 1);
          if (!result)
            return result;
          v65 = *(unsigned int *)result;
          v64 = (_DWORD)v65 == (_DWORD)v61;
          v62 = v66;
        }
        else
        {
          v64 = 1;
          v65 = v61;
        }
        v1 = v55;
        if ((int)v61 > v60)
          goto LABEL_100;
        v67 = v63 - *(_DWORD *)(v57 + v52);
        if (v67 < 0)
          v67 = *(_DWORD *)(v57 + v52) - v63;
        if (v67 <= v82)
        {
          v69 = v65 - *v58;
          if (v69 < 0)
            v69 = *v58 - v65;
          v3 = v83;
          if (v69 <= v82)
          {
            if ((int)v65 <= (int)v63 - v80)
              goto LABEL_114;
          }
          else if ((int)v65 <= (int)v63)
          {
            goto LABEL_114;
          }
        }
        else
        {
LABEL_100:
          v3 = v83;
          if ((int)v65 <= (int)v63)
            goto LABEL_114;
        }
        if (((_DWORD)v63 != (_DWORD)v65 || v62 && v64) && (*(_BYTE *)(v59 + 4) & 8) != 0)
        {
          result = cutUpCurve(v55, v63, v62, v65, v64, v81);
          if (!(_DWORD)result)
            return result;
        }
LABEL_114:
        v51 = *(int *)(v55 + 220);
        v52 += 8;
        v6 = v54++ < v51;
        v53 = v84;
      }
      while (v6);
    }
    v70 = *(_DWORD *)(v1 + 236);
    if (v70 >= 1)
    {
      v71 = 0;
      v72 = 0;
      while (1)
      {
        v85 = 0;
        v73 = (int *)(*(_QWORD *)v81 + v71);
        v75 = *v73;
        v74 = v73[1];
        v76 = indexOfNewInterestingPointAtPointIndex(*v73, v3, &v85);
        if (v85)
          v77 = (v74 & 0x18) == 24;
        else
          v77 = 0;
        if (!v77)
          goto LABEL_128;
        v78 = *(_DWORD *)(*(_QWORD *)v3 + 8 * v76 + 4);
        if ((v78 & 0x18) != 8 && (v78 & 0x18) != 16)
          break;
LABEL_130:
        ++v72;
        v71 += 8;
        if (v72 >= v70)
          goto LABEL_131;
      }
      if ((v78 & 4) != 0)
        v74 = 8;
LABEL_128:
      result = (uint64_t)addInterestingPointAtIndex(v75, v74, v3);
      if (!result)
        return result;
      v70 = *(_DWORD *)(v1 + 236);
      goto LABEL_130;
    }
LABEL_131:
    if (debug_auto_trace_syntax)
      checkSyntax((int *)v1, "cut up curves");
    if (*(_QWORD *)v81)
      free(*(void **)v81);
    *(_QWORD *)v81 = 0;
    *(_QWORD *)(v81 + 8) = 0;
    if (debug_auto_trace)
    {
      if (*(_QWORD *)v1)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 8))(*(_QWORD *)v1, 6, v1);
    }
    return 1;
  }
  return result;
}

uint64_t coalesceStraightLines(_QWORD *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  char v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int *v49;
  int v50;
  int v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  int v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int i;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  float v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  float v105;
  int v106;
  int v107;
  int v108;
  float v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  _DWORD *v122;
  int v123;
  int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  int *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  int64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  _OWORD v145[4];
  uint64_t v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  BOOL v153;
  char v154[256];
  float v155[300];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v153 = 0;
  v152 = 0.0;
  v150 = 0;
  v151 = 0;
  v148 = 0;
  v149 = 0;
  v147 = 0.0;
  v146 = 0;
  memset(v145, 0, sizeof(v145));
  v2 = (int *)a1[16];
  v135 = *((_QWORD *)v2 + 1);
  v144 = *v2;
  v3 = *((unsigned int *)a1 + 55);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0.0;
    v8 = 1;
    v9 = 12;
    do
    {
      v10 = v6;
      v11 = a1[26];
      v12 = v11 + 8 * v6++;
      if ((*(_BYTE *)(v12 + 4) & 2) == 0)
        goto LABEL_51;
      LODWORD(v13) = v6;
      if (v6 < (int)v3)
      {
        v14 = (int *)(v11 + v9);
        v13 = v8;
        while (1)
        {
          v15 = *v14;
          v14 += 2;
          if ((v15 & 7) != 6)
            break;
          if (v3 == ++v13)
          {
            LODWORD(v13) = v3;
            break;
          }
        }
      }
      if (v6 == v13 || v10 >= v13)
        goto LABEL_51;
      v139 = v10;
      v141 = v6;
      v16 = 0;
      v142 = v5;
      v137 = v13;
      v17 = (v13 + v5);
      v18 = v4;
      do
      {
        LODWORD(v10) = v10 + 1;
        v19 = *((int *)a1 + 55);
        LODWORD(v20) = v10;
        v21 = v8 + v16 - v19;
        if ((uint64_t)(v8 + v16) >= v19)
        {
          LODWORD(v20) = v8 + v16 - v19;
          if (v21 >= v19)
          {
            LODWORD(v20) = v10;
            if ((_DWORD)v19)
              v20 = v21 % v19;
          }
        }
        v22 = a1[26];
        v23 = *(unsigned int *)(v22 + v18);
        LODWORD(v22) = *(_DWORD *)(v22 + 8 * (int)v20) - v23;
        v24 = (v144 & ((int)v22 >> 31)) + v22;
        computeATRRecord((uint64_t)v145, (int *)a1[16], v23, (v144 & ((int)v22 >> 31)) + v22);
        ATRLinearRegression((uint64_t)v145, &v153, (float *)&v150, (float *)&v149 + 1);
        if (v16 <= 0x12B)
        {
          ATRAngleOfLine(*((float *)&v149 + 1), *(unsigned int *)a1[16], *(_QWORD *)(a1[16] + 8), v23, v24, v153);
          v155[v16] = v25;
        }
        ++v16;
        v18 += 8;
      }
      while (v17 != v16);
      if (v17 < 0x12C)
      {
        v27 = v155[0];
        v5 = v142;
        v28 = v139;
        v6 = v141;
        v29 = v137;
        if (v17 < 2)
        {
          LODWORD(v30) = 1;
          v33 = 1;
          v32 = v155[0];
          goto LABEL_41;
        }
        v26 = v155[0];
      }
      else
      {
        printf(" ***** %s in autoTrace\n", "too many straight lines in a row");
        v26 = v155[0];
        v27 = v155[0];
        v5 = v142;
        v28 = v139;
        v6 = v141;
        v29 = v137;
      }
      v30 = 1;
      v31 = v26;
      v32 = v26;
      v33 = 1;
      while (1)
      {
        v34 = v31 - rintf(v31 - v26);
        v31 = v155[v30];
        v35 = v31 - rintf(v31 - v26);
        v36 = v35 > v32 ? v35 : v32;
        if (v35 >= v27)
          v32 = v36;
        else
          v27 = v35;
        v37 = (float)(v35 - v34) >= 0.0 ? 1.0 : -1.0;
        if (v30 == 1)
        {
          v7 = v37;
        }
        else if (v7 != v37)
        {
          v33 = 0;
        }
        if (vabds_f32(v35, v34) > 0.0097222)
          break;
        if ((_DWORD)v29 + v5 == ++v30)
        {
          LODWORD(v3) = *((_DWORD *)a1 + 55);
          goto LABEL_42;
        }
      }
LABEL_41:
      v3 = *((unsigned int *)a1 + 55);
      if ((_DWORD)v30 == (_DWORD)v17)
      {
LABEL_42:
        v38 = v3;
        if ((int)v29 < (int)v3)
        {
          v39 = 0;
          do
          {
            *(_QWORD *)(a1[26] + v4 + 8 * v39 + 8) = *(_QWORD *)(a1[26] + 8 * v29 + 8 * v39);
            v38 = *((_DWORD *)a1 + 55);
            ++v39;
          }
          while (v38 > (int)v29 + (int)v39);
        }
        v3 = (v38 - (v17 - 1));
        *((_DWORD *)a1 + 55) = v3;
        if ((((float)(v32 - v27) > 0.00055556) & v33) == 1)
        {
          v40 = a1[26];
          *(_DWORD *)(v40 + 8 * v28 + 4) = *(_DWORD *)(v40 + 8 * v28 + 4) & 0xFFFFFFF5 | 8;
          LODWORD(v28) = v6;
          if (v6 >= (int)v3)
          {
            v41 = v6 - (int)v3;
            LODWORD(v28) = v6 - v3;
            if (v41 >= (int)v3)
            {
              LODWORD(v28) = v6;
              if (v38 != (_DWORD)v17 - 1)
                v28 = v41 % (int)v3;
            }
          }
          *(_DWORD *)(v40 + 8 * (int)v28 + 4) = *(_DWORD *)(v40 + 8 * (int)v28 + 4) & 0xFFFFFFEB | 0x10;
        }
      }
LABEL_51:
      ++v8;
      --v5;
      v9 += 8;
      v4 += 8;
    }
    while (v6 < (int)v3);
  }
  v42 = v3;
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 1");
    v42 = *((unsigned int *)a1 + 55);
  }
  if ((int)v42 >= 1)
  {
    v43 = 0;
    do
    {
      v44 = v43++;
      v45 = (int)v42;
      LODWORD(v46) = v43;
      if (v43 >= (int)v42)
      {
        v46 = v43 - (int)v42;
        if (v46 >= (int)v42)
          v46 %= (int)v42;
      }
      v47 = a1[26];
      v48 = (int *)(v47 + 8 * v44);
      v49 = (int *)(v47 + 8 * (int)v46);
      v50 = *v48;
      v51 = v48[1];
      if ((~v51 & 0x12) == 0 && (v144 & ((*v49 - v50) >> 31)) + *v49 - v50 <= 3)
      {
        v53 = *(_DWORD *)(v47 + 8 * (int)v46 + 4);
        if ((v53 & 8) != 0 && ((v53 | v51) & 1) == 0)
        {
          v54 = v44 - 1;
          if (!v44)
          {
            v54 += v45;
            if (v54 < 0)
              v54 = v54 % v45 + v45;
          }
          v55 = *(unsigned int *)(v47 + 8 * (int)v54);
          if ((v144 & ((v50 - (int)v55) >> 31)) + v50 - (int)v55 >= 3)
          {
            v56 = v144;
            if (v50 > 0)
              v56 = 0;
            findTangentBackwardsFrom((uint64_t)a1, v50 + v56 - 1, v55, &v152, (float *)&v151 + 1, &v153, (float *)&v150, (float *)&v149 + 1);
            LODWORD(v57) = v46 + 1;
            v58 = (int)v46 + 1;
            v59 = *((int *)a1 + 55);
            if ((int)v46 + 1 >= (int)v59)
            {
              LODWORD(v57) = v57 - v59;
              if (v58 - v59 >= v59)
              {
                LODWORD(v57) = v46 + 1;
                if ((_DWORD)v59)
                  v57 = (v58 - v59) % v59;
              }
            }
            else if ((int)v46 <= -2)
            {
              LODWORD(v57) = v59 + v57;
              if (v59 + v58 < 0)
              {
                LODWORD(v57) = v46 + 1;
                if ((_DWORD)v59)
                  v57 = (v59 + v58) % v59 + v59;
              }
            }
            v60 = *(_DWORD *)(a1[26] + 8 * (int)v57);
            v61 = *v49;
            if ((v144 & ((v60 - (int)v61) >> 31)) + v60 - (int)v61 >= 3)
            {
              findTangentForwardsFrom((uint64_t)a1, v61, v60, (float *)&v151, (float *)&v150 + 1, &v153, (float *)&v150, (float *)&v149 + 1);
              v62 = atan2(*((float *)&v151 + 1), v152) * 0.159154937;
              v63 = atan2(*((float *)&v150 + 1), *(float *)&v151) * 0.159154937;
              v64 = v63 - rintf(v63 - v62);
              if (vabds_f32(v62, v64) <= 0.0083333)
              {
                v65 = v144;
                if (*v49 > 0)
                  v65 = 0;
                v66 = (float *)(v135 + 8 * (*v49 + v65 - 1));
                v67 = (float *)(v135 + 8 * *v48);
                v68 = v66[1] - v67[1];
                v69 = *v66 - *v67;
                v70 = atan2(v68, v69) * 0.159154937;
                v71 = sin((float)(fabsf((float)(v70 - rintf(v70 - v62)) + (float)((float)(v64 + v62) * -0.5)) * 6.2832))
                    * sqrtf((float)(v68 * v68) + (float)(v69 * v69));
                if (v71 < 0.33333)
                {
                  if (v44 >= (int)v46)
                  {
                    if ((_DWORD)v46 || (LODWORD(v72) = *((_DWORD *)a1 + 55), v44 != (_DWORD)v72 - 1))
                    {
                      printf(" ***** %s in autoTrace\n", "our assumptions have failed");
                      LODWORD(v72) = *((_DWORD *)a1 + 55);
                    }
                    if ((int)v72 >= 2)
                    {
                      v73 = 0;
                      do
                      {
                        *(_QWORD *)(a1[26] + 8 * v73) = *(_QWORD *)(a1[26] + 8 * v73 + 8);
                        v74 = v73 + 2;
                        ++v73;
                      }
                      while (v74 < *((int *)a1 + 55));
                      LODWORD(v72) = *((_DWORD *)a1 + 55);
                    }
                  }
                  else
                  {
                    LODWORD(v72) = *((_DWORD *)a1 + 55);
                    if ((int)v58 < (int)v72)
                    {
                      do
                      {
                        *(_QWORD *)(a1[26] + 8 * v58 - 16) = *(_QWORD *)(a1[26] + 8 * v58);
                        ++v58;
                        v72 = *((int *)a1 + 55);
                      }
                      while (v58 < v72);
                    }
                  }
                  *((_DWORD *)a1 + 55) = v72 - 2;
                }
              }
            }
          }
        }
      }
      v42 = *((int *)a1 + 55);
    }
    while (v43 < v42);
  }
  v75 = v42;
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 2");
    v75 = *((unsigned int *)a1 + 55);
  }
  if ((int)v75 >= 1)
  {
    for (i = 0; i < (int)v75; ++i)
    {
      v77 = i + 1;
      v78 = i + 1;
      if (i + 1 >= (int)v75)
      {
        v81 = v77 - (uint64_t)(int)v75;
        v79 = v78 - (int)v75;
        if (v79 >= (int)v75)
        {
          v79 = i + 1;
          if ((_DWORD)v75)
            v79 = v81 % (int)v75;
        }
      }
      else
      {
        v79 = v77;
        if (i <= -2)
        {
          v80 = (int)v75 + (uint64_t)v77;
          v79 = (int)v75 + v78;
          if (v79 < 0)
          {
            v79 = i + 1;
            if ((_DWORD)v75)
              v79 = v80 % (int)v75 + (int)v75;
          }
        }
      }
      v82 = a1[26];
      v83 = v82 + 8 * i;
      v86 = *(_DWORD *)(v83 + 4);
      v85 = (_DWORD *)(v83 + 4);
      v84 = v86;
      if ((v86 & 8) != 0)
      {
        v87 = v79 << 32;
        v88 = *(_DWORD *)(v82 + 8 * (int)v79);
        v89 = *(_DWORD *)(v82 + 8 * i);
        v90 = (v144 & ((v88 - v89) >> 31)) + v88 - v89;
        if (v90 <= 34)
        {
          v91 = v82 + 8 * (int)v79;
          v94 = *(_DWORD *)(v91 + 4);
          v93 = (unsigned int *)(v91 + 4);
          v92 = v94;
          if ((v94 & 0x10) == 0)
          {
LABEL_185:
            __sprintf_chk(v154, 0, 0x100uLL, "curve (starting at %d) not balanced");
            printf(" ***** %s in autoTrace\n", v154);
            return 0;
          }
          if (v92 & 8 | v84 & 0x10 && ((v92 | v84) & 1) == 0)
          {
            v132 = (int *)(v82 + 8 * (int)v79);
            v133 = (int)v79;
            v134 = v79;
            v140 = (int)v75;
            v143 = v75;
            v136 = *(_DWORD *)(v82 + 8 * i);
            v138 = *v132;
            computeAngleSumAndRange((uint64_t)a1, v89, v88, (float *)&v149, (float *)&v148 + 1);
            v95 = 1.0 / (float)v90;
            if (fabsf(v95 * *(float *)&v149) <= 0.00027778)
            {
              v75 = v143;
              if ((float)(v95 * *((float *)&v148 + 1)) > 0.00027778)
                continue;
              if ((v84 & 0x10) != 0)
              {
                v99 = (v87 + 0x100000000) >> 32;
                v100 = v99 - v140;
                if (v99 >= v140)
                {
                  LODWORD(v102) = v99 - v140;
                  v101 = v138;
                  if (v100 >= v140)
                  {
                    v102 = (v87 + 0x100000000) >> 32;
                    if ((_DWORD)v143)
                      v102 = v100 % v140;
                  }
                }
                else
                {
                  v101 = v138;
                  if (v87 + 0x100000000 < 0)
                  {
                    LODWORD(v102) = v99 + v140;
                    if (v99 + v140 < 0)
                    {
                      v102 = (v87 + 0x100000000) >> 32;
                      if ((_DWORD)v143)
                        v102 = (v99 + v140) % v140 + v140;
                    }
                  }
                  else
                  {
                    v102 = (v87 + 0x100000000) >> 32;
                  }
                }
                v107 = *(_DWORD *)(v82 + 8 * (int)v102);
                v108 = (v144 & ((v107 - v101) >> 31)) + v107 - v101;
                computeAngleSumAndRange((uint64_t)a1, v101, v107, (float *)&v148, &v147);
                v109 = 1.0 / (float)v108;
                if (fabsf(*(float *)&v148 * v109) <= 0.00027778 && (float)(v109 * v147) <= 0.00027778)
                {
                  v110 = v143;
                  if (v134 && (int)v143 > v134)
                  {
                    v111 = v133;
                    do
                    {
                      *(_QWORD *)(a1[26] + 8 * v111 - 8) = *(_QWORD *)(a1[26] + 8 * v111);
                      ++v111;
                    }
                    while (v111 < *((int *)a1 + 55));
                    v110 = *((_DWORD *)a1 + 55);
                  }
                  v75 = (v110 - 1);
                  *((_DWORD *)a1 + 55) = v75;
                  --i;
                  continue;
                }
              }
              else
              {
                if ((v92 & 8) == 0)
                  continue;
                v96 = i - 1;
                if (i <= 0)
                {
                  LODWORD(v97) = v140 + v96;
                  v98 = v136;
                  if (v140 + v96 < 0)
                  {
                    LODWORD(v97) = i - 1;
                    if ((_DWORD)v143)
                      v97 = (v140 + v96) % v140 + v140;
                  }
                }
                else
                {
                  LODWORD(v97) = i - 1;
                  v98 = v136;
                }
                v103 = *(_DWORD *)(v82 + 8 * (int)v97);
                v104 = (v144 & ((v98 - v103) >> 31)) + v98 - v103;
                computeAngleSumAndRange((uint64_t)a1, v103, v98, (float *)&v148, &v147);
                v105 = 1.0 / (float)v104;
                if (fabsf(*(float *)&v148 * v105) <= 0.00027778)
                {
                  v75 = v143;
                  if ((float)(v105 * v147) <= 0.00027778)
                  {
                    *v132 = v136;
                    if ((v84 & 4) != 0)
                    {
                      v92 |= 4u;
                      *v93 = v92;
                      v106 = *v85 & 0x10;
                    }
                    else
                    {
                      v106 = 0;
                    }
                    *v93 = v92 & 0xFFFFFFEF | v106;
                    if (i + 1 < (int)v143)
                    {
                      v112 = i;
                      do
                      {
                        *(_QWORD *)(a1[26] + 8 * v112) = *(_QWORD *)(a1[26] + 8 * v112 + 8);
                        v113 = v112 + 2;
                        ++v112;
                      }
                      while (v113 < *((int *)a1 + 55));
                      LODWORD(v75) = *((_DWORD *)a1 + 55);
                    }
                    v75 = (v75 - 1);
                    *((_DWORD *)a1 + 55) = v75;
                    --i;
                  }
                  continue;
                }
              }
            }
            v75 = v143;
          }
        }
      }
    }
  }
  LODWORD(v114) = v75;
  if (debug_auto_trace_syntax)
  {
    checkSyntax((int *)a1, "coalesce straight lines 3");
    LODWORD(v114) = *((_DWORD *)a1 + 55);
  }
  if ((int)v114 >= 1)
  {
    v115 = 0;
    while (1)
    {
      v116 = v115++;
      v117 = (int)v114;
      LODWORD(v118) = v115;
      if (v115 >= (int)v114)
      {
        v118 = v115 - (int)v114;
        if (v118 >= (int)v114)
          v118 %= (int)v114;
      }
      v119 = a1[26];
      v120 = (int *)(v119 + 8 * v116);
      v121 = v120[1];
      if ((v121 & 8) == 0)
        goto LABEL_178;
      v122 = (_DWORD *)(v119 + 8 * (int)v118);
      v123 = *v120;
      v124 = (v144 & ((*v122 - v123) >> 31)) + *v122 - v123;
      if (v124 > 5)
        goto LABEL_178;
      v125 = v119 + 8 * (int)v118;
      v128 = *(_DWORD *)(v125 + 4);
      v126 = (unsigned int *)(v125 + 4);
      v127 = v128;
      if ((v128 & 0x10) == 0)
        goto LABEL_185;
      if (!(v127 & 8 | v120[1] & 0x10) || ((v127 | v121) & 1) != 0 || v124 > 2)
        goto LABEL_178;
      if ((v121 & 0x10) != 0)
        break;
      if ((v127 & 8) != 0)
      {
        *v122 = v123;
        if ((v121 & 4) != 0)
        {
          v127 |= 4u;
          *v126 = v127;
          v129 = v120[1] & 0x10;
        }
        else
        {
          v129 = 0;
        }
        *v126 = v127 & 0xFFFFFFEF | v129;
        if (v115 < (int)v114)
        {
          do
          {
            *(_QWORD *)(a1[26] + 8 * v116) = *(_QWORD *)(a1[26] + 8 * v116 + 8);
            v114 = *((int *)a1 + 55);
            v130 = v116 + 2;
            ++v116;
          }
          while (v130 < v114);
        }
LABEL_177:
        LODWORD(v114) = v114 - 1;
        *((_DWORD *)a1 + 55) = v114;
        v117 = (int)v114;
      }
LABEL_178:
      if (v115 >= v117)
        goto LABEL_179;
    }
    if ((v121 & 4) != 0)
      *v126 = v127 & 0xFFFFFFEB | 4;
    memmove(v120, v120 + 2, 8 * ((int)v114 + ~(_DWORD)v116));
    LODWORD(v114) = *((_DWORD *)a1 + 55);
    goto LABEL_177;
  }
LABEL_179:
  if (debug_auto_trace_syntax)
    checkSyntax((int *)a1, "coalesce straight lines 4");
  if (debug_auto_trace)
  {
    if (*a1)
      ((void (*)(_QWORD, uint64_t, _QWORD *))a1[1])(*a1, 7, a1);
  }
  return 1;
}

BOOL extractCurveRecords(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  int *Corner;
  int *v14;
  int v15;
  _DWORD *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int *v31;
  int *v32;
  int *v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  void *v42;
  int v43;

  v43 = **(_DWORD **)(a1 + 128);
  *(_QWORD *)(a1 + 248) = 100;
  v2 = malloc_type_malloc(0x2260uLL, 0x1000040A005BA8DuLL);
  v3 = v2;
  *(_QWORD *)(a1 + 240) = v2;
  if (!v2)
  {
    printf(" ***** %s in autoTrace\n", "could not allocate curves list");
    return v3 != 0;
  }
  v42 = v2;
  LODWORD(v4) = *(_DWORD *)(a1 + 220);
  if ((int)v4 < 1)
    goto LABEL_52;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  do
  {
    LODWORD(v8) = ++v6;
    if (v7 >= (int)v4)
    {
      v8 = v7 - (int)v4;
      if (v8 >= (int)v4)
        v8 %= (int)v4;
    }
    v9 = *(_QWORD *)(a1 + 208);
    v10 = (int *)(v9 + v5);
    v11 = *(_DWORD *)(v9 + v5 + 4);
    if ((v11 & 0xA) != 0)
    {
      if ((v11 & 1) != 0)
      {
        Corner = findCorner(a1, *v10, 0);
        v12 = Corner + 1;
        if (!Corner)
          v12 = (int *)(v9 + v5);
      }
      else
      {
        v12 = (int *)(v9 + v5);
      }
      v14 = (int *)(v9 + 8 * (int)v8);
      v15 = *v12;
      v16 = v14 + 1;
      if ((v14[1] & 1) != 0)
      {
        v17 = findCorner(a1, *v14, 0);
        if (v17)
          v14 = v17;
      }
      if (*v14 == v15)
      {
        v18 = v10[1];
        if ((v18 & 8) != 0)
        {
          v19 = -17;
          v20 = -9;
        }
        else
        {
          if ((v18 & 2) == 0)
            goto LABEL_21;
          v19 = -5;
          v20 = -3;
        }
        v10[1] = v18 & v20;
        *v16 &= v19;
      }
    }
LABEL_21:
    v4 = *(int *)(a1 + 220);
    v5 += 8;
    v21 = v7++ < v4;
  }
  while (v21);
  if ((int)v4 >= 1)
  {
    v22 = *(unsigned int *)(a1 + 220);
    do
    {
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 208) + 8 * (v22 - 1) + 4))
      {
        if (v22 < (int)v4)
        {
          v23 = v22;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v23 - 8) = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v23);
            ++v23;
            v4 = *(int *)(a1 + 220);
          }
          while (v23 < v4);
        }
        LODWORD(v4) = v4 - 1;
        *(_DWORD *)(a1 + 220) = v4;
      }
      v21 = v22-- <= 1;
    }
    while (!v21);
    if ((int)v4 >= 1)
    {
      v24 = 0;
      v25 = 0;
      while (2)
      {
        v26 = v25++;
        LODWORD(v27) = v25;
        if (v25 >= (int)v4)
        {
          v27 = v26 - (int)v4 + 1;
          if (v27 >= (int)v4)
            v27 %= (int)v4;
        }
        v28 = *(_QWORD *)(a1 + 208);
        v29 = (int *)(v28 + v24);
        v30 = *(_DWORD *)(v28 + v24 + 4);
        if ((v30 & 0xA) == 0)
          goto LABEL_51;
        if ((v30 & 1) != 0)
        {
          v32 = findCorner(a1, *v29, 0);
          v31 = v32 + 1;
          if (!v32)
            v31 = (int *)(v28 + v24);
        }
        else
        {
          v31 = (int *)(v28 + v24);
        }
        v33 = (int *)(v28 + 8 * (int)v27);
        v34 = *v31;
        if ((v33[1] & 1) != 0)
        {
          v35 = findCorner(a1, *v33, 0);
          if (v35)
            v33 = v35;
        }
        v36 = *v33;
        v37 = *v33 - v34;
        if (v36 == v34)
          goto LABEL_51;
        v38 = newCurveFromList((char **)(a1 + 240));
        v39 = v29[1];
        if ((v39 & 8) != 0)
        {
          v40 = 1;
LABEL_49:
          *(_DWORD *)v38 = v40;
        }
        else if ((v39 & 2) != 0)
        {
          v40 = 0;
          goto LABEL_49;
        }
        *((_DWORD *)v38 + 1) = v26;
        *((_DWORD *)v38 + 2) = v34;
        *((_DWORD *)v38 + 12) = v27;
        *((_DWORD *)v38 + 13) = v36;
        *((_DWORD *)v38 + 21) = (v43 & (v37 >> 31)) + v37;
LABEL_51:
        v4 = *(int *)(a1 + 220);
        v24 += 8;
        if (v25 >= v4)
          break;
        continue;
      }
    }
  }
LABEL_52:
  if (debug_auto_trace && *(_QWORD *)a1)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)a1, 8, a1);
  v3 = v42;
  if (debug_auto_trace_uninitialized_testing)
    checkCurves(a1, 8);
  return v3 != 0;
}

void computeCurveTangents(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  float *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  float *v60;
  char v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  uint64_t v71;
  char v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float *v78;
  int v79;
  int v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v89;
  uint64_t v90;
  int v91;
  int *v92;
  int v93;
  int v94;
  uint64_t v95;
  float *v96;
  char v97;
  float v98;
  float v99;
  float *v100;
  int v101;
  float *v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  float *v111;
  int v112;
  int v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  __double2 v122;
  float cosval;
  uint64_t v124;
  float sinval;
  float *v126;
  uint64_t v127;
  int v128;
  int *v129;
  int v130;
  int v131;
  uint64_t v132;
  char v133;
  float v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  float *v139;
  int v140;
  int v141;
  float *v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __double2 v150;
  float v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  float *v155;
  int v156;
  int v157;
  float *v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  __double2 v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __double2 v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  uint64_t v176;
  _QWORD *v177;
  float v178;
  float v179;
  uint64_t v180;
  __double2 v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  int v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float *v191;
  int v192;
  int v193;
  int v194;
  _OWORD v195[4];
  uint64_t v196;
  unint64_t v197;
  char v198;
  int v199;
  int v200;
  uint64_t v201;
  BOOL v202;

  v1 = a1;
  v198 = 0;
  v196 = 0;
  v197 = 0;
  v2 = 0uLL;
  memset(v195, 0, sizeof(v195));
  LODWORD(v3) = *(_DWORD *)(a1 + 252);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(int **)(a1 + 128);
    v6 = *v5;
    v189 = *((_QWORD *)v5 + 1);
    v7 = (int)v6 / 8;
    if ((int)v6 / 8 <= 1)
      v7 = 1;
    if ((int)v6 >= 48)
      v7 = 6;
    v186 = v7;
    do
    {
      v8 = v4++;
      LODWORD(v9) = v4;
      if (v4 >= (int)v3)
      {
        v9 = v4 - (int)v3;
        if (v9 >= (int)v3)
          v9 %= (int)v3;
      }
      v10 = *(_QWORD *)(v1 + 240);
      v11 = (_DWORD *)(v10 + 88 * v8);
      v12 = v9;
      v13 = (float *)(v10 + 88 * (int)v9);
      v14 = *(_QWORD *)(v1 + 208);
      v15 = v11 + 12;
      v16 = (int)v11[12];
      v17 = *((int *)v13 + 1);
      if ((_DWORD)v16 == (_DWORD)v17)
      {
        v18 = v14 + 8 * v16;
      }
      else
      {
        LODWORD(v19) = v16 + 1;
        v20 = (int)v16 + 1;
        v21 = *(int *)(v1 + 220);
        if ((int)v16 + 1 >= (int)v21)
        {
          LODWORD(v19) = v19 - v21;
          if (v20 - v21 >= v21)
          {
            LODWORD(v19) = v16 + 1;
            if ((_DWORD)v21)
              v19 = (v20 - v21) % v21;
          }
        }
        else if ((int)v16 <= -2)
        {
          LODWORD(v19) = v21 + v19;
          if (v21 + v20 < 0)
          {
            LODWORD(v19) = v16 + 1;
            if ((_DWORD)v21)
              v19 = (v21 + v20) % v21 + v21;
          }
        }
        if ((_DWORD)v17 == (_DWORD)v19)
        {
          if ((*(_BYTE *)(v14 + 8 * v16 + 4) & 1) != 0)
            goto LABEL_86;
          v18 = v14 + 8 * v17;
        }
        else
        {
          v22 = v16 + 2;
          if ((int)v16 + 2 >= (int)v21)
          {
            LODWORD(v23) = v22 - v21;
            if (v22 - v21 >= v21)
            {
              LODWORD(v23) = v16 + 2;
              if ((_DWORD)v21)
                v23 = (v22 - v21) % v21;
            }
          }
          else if ((int)v16 > -3)
          {
            LODWORD(v23) = v16 + 2;
          }
          else
          {
            LODWORD(v23) = v21 + v22;
            if (v21 + v22 < 0)
            {
              LODWORD(v23) = v16 + 2;
              if ((_DWORD)v21)
                v23 = (v21 + v22) % v21 + v21;
            }
          }
          if ((_DWORD)v17 != (_DWORD)v23)
          {
            printf(" ***** %s in autoTrace\n", "too many interesting points in between curves/lines");
            break;
          }
          if ((int)v20 >= (int)v21)
          {
            LODWORD(v24) = v20 - v21;
            if (v20 - v21 >= v21)
            {
              LODWORD(v24) = v16 + 1;
              if ((_DWORD)v21)
                v24 = (v20 - v21) % v21;
            }
          }
          else if ((int)v16 > -2)
          {
            LODWORD(v24) = v16 + 1;
          }
          else
          {
            LODWORD(v24) = v21 + v20;
            if (v21 + v20 < 0)
            {
              LODWORD(v24) = v16 + 1;
              if ((_DWORD)v21)
                v24 = (v21 + v20) % v21 + v21;
            }
          }
          v18 = v14 + 8 * (int)v24;
        }
      }
      if ((*(_BYTE *)(v18 + 4) & 1) != 0)
      {
LABEL_86:
        v193 = v12;
        if (*v11)
        {
          v202 = 0;
          v201 = 0;
          v199 = 0;
          v200 = 0;
          v51 = v10 + 88 * v8;
          findTangentBackwardsFrom(v1, *(_DWORD *)(v51 + 52), *(unsigned int *)(v51 + 8), (float *)&v200, (float *)&v199, &v202, (float *)&v201 + 1, (float *)&v201);
          v52 = v199;
          *(_DWORD *)(v51 + 56) = v200;
          *(_DWORD *)(v51 + 60) = v52;
          *(_BYTE *)(v51 + 72) = v202;
          v53 = v201;
          *(_DWORD *)(v51 + 76) = HIDWORD(v201);
          *(_DWORD *)(v51 + 80) = v53;
        }
        else
        {
          v54 = v10 + 88 * v8;
          v57 = *(_DWORD *)(v54 + 8);
          v56 = (int *)(v54 + 8);
          v55 = v57;
          v58 = v56[19];
          if (v58 <= 2)
            v59 = 2;
          else
            v59 = v58;
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v55, v59);
          if ((ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197) & 1) != 0)
          {
            v60 = v13;
            v61 = v198;
            v62 = *(float *)&v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), *v56, v59, v198);
            v64 = v63 * 6.2832;
            v65 = *((float *)&v197 + 1);
          }
          else
          {
            v77 = *v56;
            v78 = (float *)(v189 + 8 * v77);
            v79 = v77 + 1;
            if (v79 >= (int)v6)
              v80 = v6;
            else
              v80 = 0;
            v81 = (float *)(v189 + 8 * (v79 - v80));
            v82 = *v81;
            v83 = v81[1];
            v84 = *v78;
            v85 = v78[1];
            v86 = *v81 - *v78;
            v87 = v83 - v85;
            v64 = atan2((float)(v83 - v85), v86);
            if (v64 < 0.0)
            {
              v88 = v64 + 6.28318531;
              v64 = v88;
            }
            v60 = v13;
            if (vabds_f32(v82, v84) <= vabds_f32(v83, v85))
            {
              v61 = 0;
              v198 = 0;
              v62 = v86 / v87;
              *(float *)&v197 = v62;
              v65 = v84 - (float)(v62 * v85);
            }
            else
            {
              v61 = 1;
              v198 = 1;
              v62 = v87 / v86;
              *(float *)&v197 = v62;
              v65 = v85 - (float)(v62 * v84);
            }
            *((float *)&v197 + 1) = v65;
          }
          v122 = __sincos_stret(v64);
          cosval = v122.__cosval;
          v124 = v10 + 88 * v8;
          sinval = v122.__sinval;
          *(float *)(v124 + 56) = cosval;
          *(float *)(v124 + 60) = sinval;
          *(_BYTE *)(v124 + 72) = v61;
          *(float *)(v124 + 76) = v65;
          *(float *)(v124 + 80) = v62;
          v13 = v60;
        }
        if (debug_auto_trace_nan_inf_check)
          numericalCheckCurveEnd((float *)(v10 + 88 * v8));
        if (*(_DWORD *)v13)
        {
          v2.n128_f32[0] = computeCurveStartTangentAtCorner(v1, (uint64_t)v13);
        }
        else
        {
          v126 = v13;
          v127 = v10 + 88 * v193;
          v130 = *(_DWORD *)(v127 + 8);
          v129 = (int *)(v127 + 8);
          v128 = v130;
          v131 = v129[19];
          if (v131 <= 2)
            v132 = 2;
          else
            v132 = v131;
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v128, v132);
          if ((ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197) & 1) != 0)
          {
            v133 = v198;
            v134 = *(float *)&v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), *v129, v132, v198);
            v136 = v135 * 6.2832;
            v137 = *((float *)&v197 + 1);
          }
          else
          {
            v138 = *v129;
            v139 = (float *)(v189 + 8 * v138);
            v140 = v138 + 1;
            if (v140 >= (int)v6)
              v141 = v6;
            else
              v141 = 0;
            v142 = (float *)(v189 + 8 * (v140 - v141));
            v143 = *v142;
            v144 = v142[1];
            v145 = *v139;
            v146 = v139[1];
            v147 = *v142 - *v139;
            v148 = v144 - v146;
            v136 = atan2((float)(v144 - v146), v147);
            if (v136 < 0.0)
            {
              v149 = v136 + 6.28318531;
              v136 = v149;
            }
            if (vabds_f32(v143, v145) <= vabds_f32(v144, v146))
            {
              v133 = 0;
              v198 = 0;
              v134 = v147 / v148;
              *(float *)&v197 = v134;
              v137 = v145 - (float)(v134 * v146);
            }
            else
            {
              v133 = 1;
              v198 = 1;
              v134 = v148 / v147;
              *(float *)&v197 = v134;
              v137 = v146 - (float)(v134 * v145);
            }
            *((float *)&v197 + 1) = v137;
          }
          v13 = v126;
          v150 = __sincos_stret(v136);
          v2.n128_u32[1] = HIDWORD(v150.__sinval);
          v151 = v150.__cosval;
          v152 = v10 + 88 * v193;
          v2.n128_f32[0] = v150.__sinval;
          *(float *)(v152 + 20) = v151;
          *(_DWORD *)(v152 + 24) = v2.n128_u32[0];
          *(_BYTE *)(v152 + 36) = v133;
          *(float *)(v152 + 40) = v137;
          *(float *)(v152 + 44) = v134;
        }
        if (!debug_auto_trace_nan_inf_check)
          goto LABEL_178;
        v153 = v13;
        goto LABEL_170;
      }
      v191 = (float *)(v10 + 88 * v8);
      if (*v11)
      {
        if (*(_DWORD *)v13)
        {
          v25 = v13;
          v26 = v10 + 88 * v8;
          v27 = *(_DWORD *)(v26 + 84);
          v28 = *(int *)(v26 + 52);
          v192 = v12;
          v29 = v10 + 88 * v12;
          v30 = *(_DWORD *)(v29 + 84);
          v31 = *(int *)(v29 + 8);
          v32 = v186;
          do
          {
            if (v27 >= v32)
              v33 = v32;
            else
              v33 = v27;
            v34 = v28 - v33;
            if ((int)v34 >= (int)v6)
            {
              v36 = v34 - v6;
              if (v34 - v6 >= v6)
              {
                v37 = (_DWORD)v6 == 0;
              }
              else
              {
                v34 -= v6;
                v37 = 1;
              }
              if (!v37)
                v34 = v36 % v6;
            }
            else if ((v34 & 0x80000000) != 0)
            {
              v35 = v34 + v6;
              if (v34 + v6 < 0 == __OFADD__(v34, v6))
                v34 += v6;
              if (v35 < 0 && (_DWORD)v6)
                v34 = v35 % v6 + v6;
            }
            if (v30 > v32)
              v38 = v32 + 1;
            else
              v38 = v30;
            v39 = v31 + v38;
            if ((int)v39 >= (int)v6)
            {
              if (v39 - v6 >= v6)
              {
                if ((_DWORD)v6)
                  v39 = (v39 - v6) % v6;
              }
              else
              {
                LODWORD(v39) = v39 - v6;
              }
            }
            else if ((v39 & 0x80000000) != 0)
            {
              v40 = v39 + v6;
              if (v39 + v6 < 0 == __OFADD__(v39, v6))
                LODWORD(v39) = v39 + v6;
              if (v40 < 0 && (_DWORD)v6)
                v39 = v40 % v6 + v6;
            }
            v41 = v32 + 1;
            if (v41 - 1 < 3)
              break;
            v42 = *(float *)(*(_QWORD *)(v1 + 152) + 4 * (int)v39)
                - *(float *)(*(_QWORD *)(v1 + 152) + 4 * (int)v34);
            v32 = v41 - 2;
          }
          while (vabds_f32(v42, rintf(v42)) >= 0.055556);
          if ((int)v39 <= (int)v34)
            v43 = v6;
          else
            v43 = 0;
          v44 = v43 + v39 - v34;
          if (v44 <= 2)
            v45 = 2;
          else
            v45 = v44;
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v34, v45);
          if ((ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197) & 1) != 0)
          {
            v46 = v198;
            LODWORD(v47) = v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), v34, v45, v198);
            v49 = v48 * 6.2832;
            v50 = *((float *)&v197 + 1);
          }
          else
          {
            v100 = (float *)(v189 + 8 * (int)v34);
            if ((int)v34 + 1 >= (int)v6)
              v101 = v6;
            else
              v101 = 0;
            v102 = (float *)(v189 + 8 * ((int)v34 + 1 - v101));
            v103 = *v102;
            v104 = v102[1];
            v105 = *v100;
            v106 = v100[1];
            v107 = *v102 - *v100;
            v108 = v104 - v106;
            v49 = atan2((float)(v104 - v106), v107);
            if (v49 < 0.0)
            {
              v109 = v49 + 6.28318531;
              v49 = v109;
            }
            if (vabds_f32(v103, v105) <= vabds_f32(v104, v106))
            {
              v46 = 0;
              v198 = 0;
              v47 = v107 / v108;
              v50 = v105 - (float)(v47 * v106);
            }
            else
            {
              v46 = 1;
              v198 = 1;
              v47 = v108 / v107;
              v50 = v106 - (float)(v47 * v105);
            }
            v197 = __PAIR64__(LODWORD(v50), LODWORD(v47));
          }
          v166 = __sincos_stret(v49);
          v2.n128_u32[1] = HIDWORD(v166.__sinval);
          v167 = v166.__cosval;
          v168 = v10 + 88 * v192;
          v2.n128_f32[0] = v166.__sinval;
          *(float *)(v168 + 20) = v167;
          *(_DWORD *)(v168 + 24) = v2.n128_u32[0];
          v169 = v168 + 20;
          *(_BYTE *)(v169 + 16) = v46;
          *(float *)(v169 + 20) = v50;
          *(float *)(v169 + 24) = v47;
          if (debug_auto_trace_nan_inf_check)
            v2.n128_f32[0] = numericalCheckCurveStart(v25);
          v170 = v10 + 88 * v8;
          *(_QWORD *)(v170 + 56) = *(_QWORD *)v169;
          *(_BYTE *)(v170 + 72) = v46;
        }
        else
        {
          v89 = v12;
          v90 = v10 + 88 * v12;
          v93 = *(_DWORD *)(v90 + 8);
          v92 = (int *)(v90 + 8);
          v91 = v93;
          v94 = v92[19];
          if (v94 <= 2)
            v95 = 2;
          else
            v95 = v94;
          computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v91, v95);
          v96 = v13;
          if ((ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197) & 1) != 0)
          {
            v97 = v198;
            LODWORD(v47) = v197;
            ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), *v92, v95, v198);
            v99 = v98 * 6.2832;
            v50 = *((float *)&v197 + 1);
          }
          else
          {
            v154 = *v92;
            v155 = (float *)(v189 + 8 * v154);
            v156 = v154 + 1;
            if (v156 >= (int)v6)
              v157 = v6;
            else
              v157 = 0;
            v158 = (float *)(v189 + 8 * (v156 - v157));
            v159 = *v158;
            v160 = v158[1];
            v161 = *v155;
            v162 = v155[1];
            v163 = *v158 - *v155;
            v164 = v160 - v162;
            v99 = atan2((float)(v160 - v162), v163);
            if (v99 < 0.0)
            {
              v165 = v99 + 6.28318531;
              v99 = v165;
            }
            if (vabds_f32(v159, v161) <= vabds_f32(v160, v162))
            {
              v97 = 0;
              v198 = 0;
              v47 = v163 / v164;
              *(float *)&v197 = v47;
              v50 = v161 - (float)(v47 * v162);
            }
            else
            {
              v97 = 1;
              v198 = 1;
              v47 = v164 / v163;
              *(float *)&v197 = v47;
              v50 = v162 - (float)(v47 * v161);
            }
            *((float *)&v197 + 1) = v50;
          }
          v181 = __sincos_stret(v99);
          v2.n128_u32[1] = HIDWORD(v181.__sinval);
          v182 = v181.__cosval;
          v183 = v10 + 88 * v89;
          v2.n128_f32[0] = v181.__sinval;
          *(float *)(v183 + 20) = v182;
          *(_DWORD *)(v183 + 24) = v2.n128_u32[0];
          v184 = v183 + 20;
          *(_BYTE *)(v184 + 16) = v97;
          *(float *)(v184 + 20) = v50;
          *(float *)(v184 + 24) = v47;
          if (debug_auto_trace_nan_inf_check)
            v2.n128_f32[0] = numericalCheckCurveStart(v96);
          v170 = v10 + 88 * v8;
          *(_QWORD *)(v170 + 56) = *(_QWORD *)v184;
          *(_BYTE *)(v170 + 72) = v97;
        }
        *(float *)(v170 + 76) = v50;
        *(float *)(v170 + 80) = v47;
        if (debug_auto_trace_nan_inf_check)
          v2.n128_f32[0] = numericalCheckCurveEnd(v191);
        goto LABEL_178;
      }
      v194 = v12;
      v190 = (uint64_t)v13;
      v66 = v10 + 88 * v8;
      v69 = *(_DWORD *)(v66 + 8);
      v68 = (int *)(v66 + 8);
      v67 = v69;
      v70 = v68[19];
      if (v70 <= 2)
        v71 = 2;
      else
        v71 = v70;
      computeATRRecord((uint64_t)v195, *(int **)(v1 + 128), v67, v71);
      v188 = v4;
      if ((ATRLinearRegression((uint64_t)v195, (BOOL *)&v198, (float *)&v197 + 1, (float *)&v197) & 1) != 0)
      {
        v72 = v198;
        LODWORD(v73) = v197;
        ATRAngleOfLine(*(float *)&v197, **(unsigned int **)(v1 + 128), *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), *v68, v71, v198);
        v75 = v74 * 6.2832;
        v76 = *((float *)&v197 + 1);
      }
      else
      {
        v110 = *v68;
        v111 = (float *)(v189 + 8 * v110);
        v112 = v110 + 1;
        if (v112 >= (int)v6)
          v113 = v6;
        else
          v113 = 0;
        v114 = (float *)(v189 + 8 * (v112 - v113));
        v115 = *v114;
        v116 = v114[1];
        v117 = *v111;
        v118 = v111[1];
        v119 = *v114 - *v111;
        v120 = v116 - v118;
        v75 = atan2((float)(v116 - v118), v119);
        if (v75 < 0.0)
        {
          v121 = v75 + 6.28318531;
          v75 = v121;
        }
        if (vabds_f32(v115, v117) <= vabds_f32(v116, v118))
        {
          v72 = 0;
          v198 = 0;
          v73 = v119 / v120;
          v76 = v117 - (float)(v73 * v118);
        }
        else
        {
          v72 = 1;
          v198 = 1;
          v73 = v120 / v119;
          v76 = v118 - (float)(v73 * v117);
        }
        v197 = __PAIR64__(LODWORD(v76), LODWORD(v73));
      }
      v171 = __sincos_stret(v75);
      v172 = v171.__cosval;
      v173 = v10 + 88 * v8;
      *(float *)(v173 + 56) = v172;
      v174 = v173 + 56;
      v175 = v171.__sinval;
      *(float *)(v174 + 4) = v175;
      v187 = v72;
      *(_BYTE *)(v174 + 16) = v72;
      *(float *)(v174 + 20) = v76;
      *(float *)(v174 + 24) = v73;
      if (debug_auto_trace_nan_inf_check)
        numericalCheckCurveEnd(v191);
      computeCurveStartTangentAtCorner(v1, v190);
      v176 = v10 + 88 * v194;
      v178 = *(float *)(v176 + 20);
      v179 = *(float *)(v176 + 24);
      v177 = (_QWORD *)(v176 + 20);
      v2.n128_f32[0] = fabsf(acosf((float)(v179 * *(float *)(v174 + 4)) + (float)(v178 * *(float *)v174))) * 0.15915;
      if (v2.n128_f32[0] >= 0.013889)
      {
        v4 = v188;
        if (*(_DWORD *)(v10 + 88 * v8 + 52) != *(_DWORD *)(v10 + 88 * v194 + 8) && *v15 != -1)
          *(_DWORD *)(v14 + 8 * v16 + 4) |= 1u;
      }
      else
      {
        *v177 = *(_QWORD *)v174;
        v180 = v10 + 88 * v194;
        *(_BYTE *)(v180 + 36) = v187;
        *(float *)(v180 + 40) = v76;
        *(float *)(v180 + 44) = v73;
        v4 = v188;
      }
      v1 = a1;
      v153 = (float *)v190;
      if (!debug_auto_trace_nan_inf_check)
        goto LABEL_178;
LABEL_170:
      v2.n128_f32[0] = numericalCheckCurveStart(v153);
LABEL_178:
      v3 = *(int *)(v1 + 252);
    }
    while (v4 < v3);
  }
  if (debug_auto_trace && *(_QWORD *)v1)
    (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v1 + 8))(*(_QWORD *)v1, 9, v1, v2);
  if (debug_auto_trace_uninitialized_testing)
    checkCurves(v1, 9);
}

uint64_t computePoints(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  float *v56;
  float v57;
  float *v58;
  uint64_t v59;

  v1 = result;
  LODWORD(v2) = *(_DWORD *)(result + 252);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    v6 = *(_QWORD *)(*(_QWORD *)(result + 128) + 8);
    v7 = -1.0;
    v8 = 1.0;
    do
    {
      LODWORD(v9) = ++v4;
      if (v5 >= (int)v2)
      {
        v9 = v5 - (int)v2;
        if (v9 >= (int)v2)
          v9 %= (int)v2;
      }
      v10 = *(_QWORD *)(v1 + 240);
      v11 = v9;
      v12 = *(_QWORD *)(v1 + 208);
      v13 = *(int *)(v10 + v3 + 48);
      v14 = (int *)(v12 + 8 * v13);
      v15 = *(int *)(v10 + 88 * (int)v9 + 4);
      if ((_DWORD)v13 == (_DWORD)v15)
      {
        if ((v14[1] & 1) != 0)
          goto LABEL_50;
      }
      else
      {
        LODWORD(v16) = v13 + 1;
        v17 = (int)v13 + 1;
        v18 = *(int *)(v1 + 220);
        if ((int)v13 + 1 >= (int)v18)
        {
          LODWORD(v16) = v16 - v18;
          if (v17 - v18 >= v18)
          {
            LODWORD(v16) = v13 + 1;
            if ((_DWORD)v18)
              v16 = (v17 - v18) % v18;
          }
        }
        else if ((int)v13 <= -2)
        {
          v16 = v18 + (int)v16;
          if (v18 + v17 < 0)
          {
            v16 = v16 % v18 + v18;
            if (!(_DWORD)v18)
              LODWORD(v16) = v13 + 1;
          }
        }
        if ((_DWORD)v15 == (_DWORD)v16)
        {
          if ((*(_BYTE *)(v12 + 8 * v13 + 4) & 1) != 0)
            goto LABEL_50;
          if ((*(_BYTE *)(v12 + 8 * v15 + 4) & 1) != 0)
          {
            v14 = (int *)(v12 + 8 * v15);
LABEL_50:
            v32 = *(float *)(v10 + v3 + 80);
            if (*(_BYTE *)(v10 + v3 + 72))
              v33 = *(float *)(v10 + v3 + 80);
            else
              v33 = v7;
            if (*(_BYTE *)(v10 + v3 + 72))
              v32 = v7;
            v34 = sqrtf((float)(v32 * v32) + (float)(v33 * v33));
            if (v34 == 0.0)
              goto LABEL_75;
            v35 = *v14;
            v36 = v8 / v34;
            v37 = v33 * v36;
            v38 = v32 * v36;
            v39 = v36 * *(float *)(v10 + v3 + 76);
            if (*(_BYTE *)(v1 + 19))
            {
              v40 = (float *)(v6 + 8 * v35);
              v41 = *v40;
              v42 = v40[1];
              printf("intersection at corner %d (%.2f, %.2f)\n", v35, *v40, v42);
              result = printf("  incoming arc %d-%d end line equation %.6f*x + %.6f*y + %.2f = 0\n", *(_DWORD *)(v10 + v3 + 8), *(_DWORD *)(v10 + v3 + 52), v37, v38, v39);
            }
            else
            {
              v41 = 0.0;
              v42 = 0.0;
            }
            v43 = v10 + 88 * v11;
            v44 = *(float *)(v43 + 44);
            if (*(_BYTE *)(v43 + 36))
              v45 = *(float *)(v43 + 44);
            else
              v45 = v7;
            if (*(_BYTE *)(v43 + 36))
              v44 = v7;
            v46 = sqrtf((float)(v44 * v44) + (float)(v45 * v45));
            if (v46 == 0.0)
              goto LABEL_75;
            v47 = v8 / v46;
            v48 = v45 * v47;
            v49 = v44 * v47;
            v50 = v47 * *(float *)(v10 + 88 * v11 + 40);
            if (*(_BYTE *)(v1 + 19))
            {
              printf("  outgoing arc %d-%d end line equation %.6f*x + %.6f*y + %.2f = 0\n", *(_DWORD *)(v10 + 88 * v11 + 8), *(_DWORD *)(v10 + 88 * v11 + 52), v48, v49, v50);
              printf("  incoming line distance of corner vertex %.3f\n", (float)(v39 + (float)((float)(v38 * v42) + (float)(v37 * v41))));
              result = printf("  outgoing line distance of corner vertex %.3f\n", (float)((float)((float)(v42 * v49) + (float)(v48 * v41)) + v50));
            }
            v51 = (float)(v37 * v49) - (float)(v38 * v48);
            if (fabsf(v51) >= 0.08)
            {
              v53 = 1.0 / v51;
              v54 = v10 + 88 * v11;
              v55 = v53 * (float)((float)(v39 * v48) - (float)(v37 * v50));
              *(float *)(v54 + 16) = v55;
              v56 = (float *)(v54 + 16);
              v57 = v53 * (float)((float)(v38 * v50) - (float)(v39 * v49));
              *(v56 - 1) = v57;
              v58 = v56 - 1;
              *((_DWORD *)v56 - 2) = v35;
              if (*(_BYTE *)(v1 + 19))
              {
                result = printf("  intersection (%.2f, %.2f)\n", v57, v55);
                v57 = *v58;
              }
              v7 = -1.0;
              v8 = 1.0;
              v59 = v6 + 8 * v35;
              if ((float)((float)((float)(*(float *)(v59 + 4) - *v56) * (float)(*(float *)(v59 + 4) - *v56))
                         + (float)((float)(*(float *)v59 - v57) * (float)(*(float *)v59 - v57))) > 16.0)
                *(_QWORD *)v58 = *(_QWORD *)v59;
            }
            else
            {
              v52 = v10 + 88 * v11;
              *(_QWORD *)(v52 + 12) = *(_QWORD *)(v6 + 8 * v35);
              *(_DWORD *)(v52 + 8) = v35;
              v7 = -1.0;
              v8 = 1.0;
            }
            goto LABEL_73;
          }
        }
        else
        {
          v19 = v13 + 2;
          if ((int)v13 + 2 >= (int)v18)
          {
            LODWORD(v20) = v19 - v18;
            if (v19 - v18 >= v18)
            {
              LODWORD(v20) = v13 + 2;
              if ((_DWORD)v18)
                v20 = (v19 - v18) % v18;
            }
          }
          else if ((int)v13 > -3)
          {
            LODWORD(v20) = v13 + 2;
          }
          else
          {
            LODWORD(v20) = v18 + v19;
            if (v18 + v19 < 0)
            {
              LODWORD(v20) = v13 + 2;
              if ((_DWORD)v18)
                v20 = (v18 + v19) % v18 + v18;
            }
          }
          if ((_DWORD)v15 != (_DWORD)v20)
            break;
          if ((int)v17 >= (int)v18)
          {
            LODWORD(v13) = v17 - v18;
            if (v17 - v18 >= v18)
            {
              LODWORD(v13) = v17;
              if ((_DWORD)v18)
                v13 = (v17 - v18) % v18;
            }
          }
          else if ((int)v13 > -2)
          {
            LODWORD(v13) = v13 + 1;
          }
          else
          {
            LODWORD(v13) = v18 + v17;
            if (v18 + v17 < 0)
            {
              LODWORD(v13) = v17;
              if ((_DWORD)v18)
                v13 = (v18 + v17) % v18 + v18;
            }
          }
          if ((*(_BYTE *)(v12 + 8 * (int)v13 + 4) & 1) != 0)
          {
            v14 = (int *)(v12 + 8 * (int)v13);
            goto LABEL_50;
          }
        }
      }
      v21 = v10 + 88 * v11;
      v22 = *(float *)(v21 + 44);
      if (*(_BYTE *)(v21 + 36))
        v23 = *(float *)(v21 + 44);
      else
        v23 = v7;
      if (*(_BYTE *)(v21 + 36))
        v22 = v7;
      v24 = sqrtf((float)(v22 * v22) + (float)(v23 * v23));
      if (v24 == 0.0)
      {
LABEL_75:
        result = printf(" ***** %s in autoTrace\n", "degenerate line");
        break;
      }
      v25 = v10 + 88 * v11;
      v26 = (float *)(v6 + 8 * *(int *)(v25 + 8));
      v27 = v26[1];
      v28 = v8 / v24;
      v29 = v23 * v28;
      v30 = v22 * v28;
      v31 = (float)((float)(v27 * v30) + (float)(v29 * *v26)) + (float)(v28 * *(float *)(v25 + 40));
      *(float *)(v25 + 12) = *v26 - (float)(v31 * v29);
      *(float *)(v25 + 16) = v27 - (float)(v31 * v30);
LABEL_73:
      v2 = *(int *)(v1 + 252);
      v3 += 88;
    }
    while (v5++ < v2);
  }
  if (debug_auto_trace)
  {
    result = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8))(result, 10, v1);
  }
  if (debug_auto_trace_uninitialized_testing)
    return checkCurves(v1, 10);
  return result;
}

uint64_t findSubdividedCurves(uint64_t a1, __n128 a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 252);
  if (v3 >= 1)
  {
    v4 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 240) + 88 * (int)v4))
      {
        result = makeCurve(a1, v4, 0, a2);
        if (!(_DWORD)result)
          return result;
        v6 = v4 - v3;
        v3 = *(_DWORD *)(a1 + 252);
        LODWORD(v4) = v6 + v3;
      }
      v4 = (v4 + 1);
    }
    while ((int)v4 < v3);
    if (v3 >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 240);
        if (*(_DWORD *)(v8 + 88 * v7))
        {
          v9 = v7 + 1;
        }
        else
        {
          *(_QWORD *)(v8 + 88 * v7 + 28) = *(_QWORD *)(v8 + 88 * v7 + 12);
          v9 = v7 + 1;
          v10 = *(int *)(a1 + 252);
          LODWORD(v11) = v7 + 1;
          v12 = v7 + 1 - v10;
          if (v7 + 1 >= v10)
          {
            LODWORD(v11) = v7 + 1 - v10;
            if (v12 >= v10)
            {
              LODWORD(v11) = v7 + 1;
              if ((_DWORD)v10)
                v11 = v12 % v10;
            }
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 240) + 88 * v7 + 64) = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 88 * (int)v11 + 12);
          v3 = *(_DWORD *)(a1 + 252);
        }
        v7 = v9;
      }
      while (v9 < v3);
    }
  }
  if (debug_auto_trace && *(_QWORD *)a1)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)a1, 11, a1);
  if (debug_auto_trace_uninitialized_testing)
    checkCurves(a1, 11);
  return 1;
}

void convertToPaths(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  CGAffineTransform m;

  if (*(_DWORD *)(a1 + 252))
  {
    v2 = *(_QWORD *)(a1 + 240);
    m = CGAffineTransformIdentity;
    CGPathMoveToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v2 + 12), *(float *)(v2 + 16));
    LODWORD(v3) = *(_DWORD *)(a1 + 252);
    if ((int)v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      v6 = 1;
      do
      {
        LODWORD(v7) = ++v5;
        if (v6 >= (int)v3)
        {
          v7 = v6 - (int)v3;
          if (v7 >= (int)v3)
            v7 %= (int)v3;
        }
        v8 = *(_QWORD *)(a1 + 240);
        v9 = *(_DWORD *)(v8 + v4);
        if (v9 == 1)
        {
          CGPathAddCurveToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v8 + v4 + 28), *(float *)(v8 + v4 + 32), *(float *)(v8 + v4 + 64), *(float *)(v8 + v4 + 68), *(float *)(v8 + 88 * (int)v7 + 12), *(float *)(v8 + 88 * (int)v7 + 16));
        }
        else if (!v9)
        {
          CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 48), &m, *(float *)(v8 + 88 * (int)v7 + 12), *(float *)(v8 + 88 * (int)v7 + 16));
        }
        v3 = *(int *)(a1 + 252);
        v4 += 88;
      }
      while (v6++ < v3);
    }
    CGPathCloseSubpath(*(CGMutablePathRef *)(a1 + 48));
    if (debug_auto_trace)
    {
      if (*(_QWORD *)a1)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)a1, 12, a1);
    }
  }
}

uint64_t makeCurve(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t result;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  int v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  int v39;
  float v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  uint64_t v99;
  int v100;
  float v101;
  float v102;
  BOOL v103;
  float *v105;
  float v106;
  float v107;
  float *v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  int v135;
  float v136;
  __double2 v137;
  float cosval;
  float sinval;
  int v140;
  uint64_t v141;
  int Curve;
  float v143;
  float v144;
  int v145;
  uint64_t v148;
  char **v149;
  float v150;
  int *v152;
  int v153;
  int *v154;
  int *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  _OWORD v178[4];
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  v7 = *(_QWORD *)(a1 + 240);
  v8 = a2;
  LODWORD(v9) = a2 + 1;
  v10 = (int)a2 + 1;
  v11 = *(int *)(a1 + 252);
  if ((int)a2 + 1 >= (int)v11)
  {
    v9 = (int)v9 - v11;
    if (v9 >= v11)
      LODWORD(v9) = (v10 - v11) % v11;
  }
  else if ((int)a2 <= -2)
  {
    v9 = v11 + v10;
    if (v11 + v10 < 0)
    {
      v9 = v9 % v11 + v11;
      if (!(_DWORD)v11)
        LODWORD(v9) = a2 + 1;
    }
  }
  v12 = v7 + 88 * (int)a2;
  v14 = *(float *)(v12 + 20);
  v13 = *(float *)(v12 + 24);
  v15 = *(float *)(v12 + 56);
  v16 = *(float *)(v12 + 60);
  v17 = (float)(v14 * v16) - (float)(v13 * v15);
  if (v17 == 0.0)
  {
    *(_DWORD *)(v7 + 88 * (int)a2) = 0;
    return 1;
  }
  v148 = (int)a2 + 1;
  v149 = (char **)(a1 + 240);
  v19 = *(int **)(a1 + 128);
  v20 = *((_QWORD *)v19 + 1);
  v21 = *v19;
  v22 = v7 + 88 * (int)v9;
  v23 = v7 + 88 * (int)a2;
  v24 = *(int *)(v23 + 8);
  v155 = (int *)(v23 + 8);
  v25 = *(_DWORD *)(v23 + 52);
  v152 = (int *)(v23 + 52);
  if ((int)v24 + 1 >= (int)v21)
    v26 = *v19;
  else
    v26 = 0;
  v27 = v24 + 1 - v26;
  v28 = 0.0;
  if (v27 != v25)
  {
    v29 = *(_QWORD *)(a1 + 144);
    v30 = *(float *)(v29 + 4 * v24);
    do
    {
      v31 = *(float *)(v29 + 4 * v27);
      v28 = v28 + (float)((float)(v31 - v30) - rintf(v31 - v30));
      v32 = v27 + 1;
      if (v32 >= (int)v21)
        v33 = v21;
      else
        v33 = 0;
      v27 = v32 - v33;
      v30 = v31;
    }
    while (v27 != v25);
  }
  v34 = v28;
  a4.n128_u32[0] = *(_DWORD *)(v12 + 12);
  v35 = *(float *)(v12 + 16);
  v36 = *(float *)(v22 + 12);
  v37 = *(float *)(v22 + 16);
  v182 = 0;
  v150 = v34;
  v38 = v7 + 88 * (int)a2;
  v39 = *(_DWORD *)(v38 + 84);
  v154 = (int *)(v38 + 84);
  if (fabsf(v34) > 0.25 && a3 <= 19 && v39 >= 2)
  {
    if (*(_BYTE *)(a1 + 20))
      printf(" -- subdividing curve %d-%d -- turn angle %.4f (limit %.4f)\n");
    goto LABEL_85;
  }
  v42 = v36 - a4.n128_f32[0];
  v43 = v37 - v35;
  v44 = v39 / 4;
  if (v39 / 4 <= 1)
    v44 = 1;
  LODWORD(v45) = 3 * v39 / 4;
  v153 = v39;
  if ((int)v45 >= v39)
    v45 = (v39 - 1);
  else
    v45 = v45;
  v46 = v35;
  v167 = a4.n128_f32[0];
  v168 = v35;
  if ((int)v44 >= (int)v45)
  {
    v165 = -v15;
    v166 = -v16;
  }
  else
  {
    v143 = v37 - v35;
    v144 = v36 - a4.n128_f32[0];
    v145 = a2;
    v159 = (float)(v35 + v37) * 0.5;
    v160 = (float)(a4.n128_f32[0] + v36) * 0.5;
    v165 = -v15;
    v166 = -v16;
    v47 = v45 - v44;
    v48 = v24 + v44;
    v156 = 0.0;
    v49 = -1;
    v169 = *(float *)"";
    v158 = 1.0 / v17;
    v157 = 0.0;
    v163 = v14;
    v164 = v13;
    v161 = v16;
    v162 = v15;
    do
    {
      if (v48 >= v21)
      {
        if (v48 - v21 >= v21)
          LODWORD(v50) = v48;
        else
          LODWORD(v50) = v48 - v21;
        if (v48 - v21 >= v21 && (_DWORD)v21)
          v50 = (v48 - v21) % v21;
      }
      else
      {
        LODWORD(v50) = v48;
        if (v48 < 0)
        {
          v51 = v21 + v48;
          LODWORD(v50) = v21 + v48 < 0 ? v48 : (int)v21 + (int)v48;
          if (v51 < 0 && (_DWORD)v21)
            v50 = v51 % v21 + v21;
        }
      }
      v52 = (float *)(v20 + 8 * (int)v50);
      v53 = (float)(*v52 - v160) * 2.6667;
      v54 = (float)(v52[1] - v159) * -2.6667;
      v55 = (float)(v14 * v54) + (float)(v53 * v13);
      v56 = v158 * (float)((float)(v15 * v54) + (float)(v53 * v16));
      v57 = v167 + (float)(v14 * v56);
      v170 = v158 * v55;
      v172 = v56;
      v58 = v168 + (float)(v13 * v56);
      v59 = v36 + (float)(v165 * (float)(v158 * v55));
      v60 = v37 + (float)(v166 * (float)(v158 * v55));
      v61 = evaluatePointOnCurve(v167, v168, v57, v58, v59, v60, v36, v37, 0.25);
      v174 = v62;
      v176 = v61;
      v63 = evaluatePointOnCurve(v167, v168, v57, v58, v59, v60, v36, v37, 0.75);
      v65 = v64;
      v66 = squaredDistanceFromCurve(v21, v20, v24, v50, v176, v174);
      a4.n128_f32[0] = v66 + squaredDistanceFromCurve(v21, v20, v50, v25, v63, v65);
      if (a4.n128_f32[0] >= v169 || v172 < 0.0)
      {
        v14 = v163;
        v13 = v164;
        v16 = v161;
        v15 = v162;
      }
      else
      {
        v14 = v163;
        v13 = v164;
        v16 = v161;
        v15 = v162;
        if (v170 >= 0.0)
        {
          v156 = v170;
          v157 = v172;
          v169 = a4.n128_f32[0];
          v49 = v50;
        }
      }
      ++v48;
      --v47;
    }
    while (v47);
    if (v49 != -1 && (v150 >= 3.0 || v153 >= 20))
    {
      v43 = v143;
      v42 = v144;
      v67 = sqrtf((float)(v43 * v43) + (float)(v42 * v42));
      v6 = a1;
      v5 = a2;
      v8 = v145;
      v4 = a3;
      a4.n128_f32[0] = v167;
      v46 = v168;
      goto LABEL_63;
    }
    v6 = a1;
    v5 = a2;
    v8 = v145;
    v4 = a3;
    a4.n128_f32[0] = v167;
    v46 = v168;
    v43 = v143;
    v42 = v144;
  }
  v67 = sqrtf((float)(v43 * v43) + (float)(v42 * v42));
  v156 = v67 / 3.0;
  v157 = v67 / 3.0;
LABEL_63:
  if (v4 > 19
    || (v68 = 1.0 / fmaxf(v67, 0.001),
        v69 = v42 * v68,
        v70 = (float)(v13 * (float)(v43 * v68)) + (float)(v14 * (float)(v42 * v68)),
        v71 = (float)((float)(v16 * (float)(v43 * v68)) + (float)(v15 * v69)) * v156,
        a4.n128_f32[0] = v167,
        v46 = v168,
        (float)(v71 + (float)(v157 * v70)) <= v67))
  {
    v106 = a4.n128_f32[0] + (float)(v14 * v157);
    v107 = v46 + (float)(v13 * v157);
    v181 = 0;
    a4.n128_u32[0] = 0;
    goodnessOfFit(v6, v24, v153, (float *)&v181 + 1, (float *)&v181, a4, 0.0, v106, v107, v36 + (float)(v165 * v156), v37 + (float)(v166 * v156));
    if (*((float *)&v181 + 1) <= *(float *)(v6 + 36) || v4 > 19 || *(float *)&v181 <= *(float *)(v6 + 40))
    {
      v108 = (float *)(v7 + 88 * v8);
      v108[7] = v106;
      v108[8] = v107;
      v108[16] = v36 + (float)(v165 * v156);
      v108[17] = v37 + (float)(v166 * v156);
      return 1;
    }
    if (*(_BYTE *)(v6 + 20))
      printf(" -- subdividing curve %d-%d -- point too far from curve %.4f (limit %.4f)\n");
  }
  else
  {
    v72 = v153;
    if (*(_BYTE *)(v6 + 20))
    {
      printf(" -- subdividing curve %d-%d -- wings go too far %.4f and %.4f (limit %.4f)\n", v24, v25, (float)(v70 * v157), v71, v67);
      a4.n128_f32[0] = v167;
      v46 = v168;
      v72 = *v154;
    }
    if (v72 <= 29)
    {
      v73 = v67 / 3.0;
      v74 = a4.n128_f32[0] + (float)(v14 * (float)(v67 / 3.0));
      v75 = v46 + (float)(v13 * (float)(v67 / 3.0));
      v76 = v36;
      v77 = v36 + (float)(v165 * (float)(v67 / 3.0));
      v78 = v37;
      v79 = v37 + (float)(v166 * v73);
      v80 = v46;
      v81 = a4.n128_f32[0];
      v82 = evaluatePointOnCurve(a4.n128_f32[0], v46, v74, v75, v77, v79, v76, v78, 0.25);
      v175 = v83;
      v177 = v82;
      v84 = evaluatePointOnCurve(v81, v80, v74, v75, v77, v79, v76, v78, 0.5);
      v171 = v85;
      v173 = v84;
      v86 = evaluatePointOnCurve(v81, v80, v74, v75, v77, v79, v76, v78, 0.75);
      v88 = v87;
      v89 = v7;
      v90 = v8;
      v91 = *v155;
      v92 = *v152;
      v93 = *(_QWORD *)(v6 + 128);
      v94 = *(_DWORD *)v93;
      v95 = v5;
      v96 = *(_QWORD *)(v93 + 8);
      v97 = squaredDistanceFromCurve(*(_DWORD *)v93, v96, *v155, *v152, v177, v175);
      v98 = squaredDistanceFromCurve(v94, v96, v91, v92, v173, v171);
      v99 = v96;
      v5 = v95;
      v100 = v91;
      v8 = v90;
      v101 = squaredDistanceFromCurve(v94, v99, v100, v92, v86, v88);
      v102 = *(float *)(v6 + 40) * *(float *)(v6 + 40);
      v103 = v97 < v102 && v98 < v102;
      if (v103 && v101 < v102)
      {
        v105 = (float *)(v89 + 88 * v90);
        v105[7] = v74;
        v105[8] = v75;
        v105[16] = v77;
        v105[17] = v79;
        return 1;
      }
    }
  }
LABEL_85:
  v109 = *v154;
  if (*v154 >= 0)
    v110 = *v154;
  else
    v110 = v109 + 1;
  v111 = *v155 + (v110 >> 1);
  v112 = v111;
  if (v111 >= (int)v21)
  {
    v114 = v111 - v21;
    LODWORD(v113) = v112 - v21;
    if (v112 - v21 >= v21)
    {
      LODWORD(v113) = v112;
      if ((_DWORD)v21)
        v113 = v114 % v21;
    }
  }
  else if (v111 < 0)
  {
    v115 = v111 + v21;
    LODWORD(v113) = v112 + v21;
    if (v112 + v21 < 0)
    {
      LODWORD(v113) = v112;
      if ((_DWORD)v21)
        v113 = v115 % v21 + v21;
    }
  }
  else
  {
    LODWORD(v113) = *v155 + (v110 >> 1);
  }
  if (*v155 == (_DWORD)v113 || *v152 == (_DWORD)v113)
    return 1;
  result = (uint64_t)newCurveFromList(v149);
  if (result)
  {
    v116 = v8;
    v117 = v110 >> 1;
    v118 = v6;
    v119 = v109 - (v110 >> 1);
    v120 = *(_QWORD *)(v118 + 240) + 88 * v116;
    memmove((void *)(v120 + 88), (const void *)v120, 88 * (*(_DWORD *)(v118 + 252) + ~(_DWORD)v5));
    v121 = *(_QWORD *)(v118 + 240);
    v122 = v121 + 88 * v116;
    *(_DWORD *)(v122 + 48) = -1;
    *(_DWORD *)(v122 + 52) = v113;
    *(_DWORD *)(v122 + 84) = v117;
    *(_DWORD *)(v122 + 92) = -1;
    *(_DWORD *)(v122 + 96) = v113;
    *(_QWORD *)(v122 + 100) = *(_QWORD *)(v20 + 8 * (int)v113);
    *(_DWORD *)(v122 + 172) = v119;
    if (v117 >= 6)
      v123 = 6;
    else
      v123 = v117;
    v124 = v113 - v123;
    v125 = (int)v113 - v123;
    if (v124 >= (int)v21)
    {
      v127 = v124 - v21;
      v126 = v125 - v21;
      if (v125 - v21 >= v21)
      {
        v126 = v125;
        if ((_DWORD)v21)
          v126 = v127 % v21;
      }
    }
    else if ((v125 & 0x80000000) != 0)
    {
      v128 = v124 + v21;
      v126 = v125 + v21;
      if (v125 + v21 < 0)
      {
        v126 = v125;
        if ((_DWORD)v21)
          v126 = v128 % v21 + v21;
      }
    }
    else
    {
      v126 = v124;
    }
    if (v119 >= 7)
      v129 = 7;
    else
      v129 = v119;
    LODWORD(v130) = v129 + v113;
    v131 = (int)v130;
    if ((int)v130 >= (int)v21)
    {
      LODWORD(v130) = v130 - v21;
      v132 = v118;
      if (v131 - v21 >= v21)
      {
        LODWORD(v130) = v131;
        if ((_DWORD)v21)
          v130 = (v131 - v21) % v21;
      }
    }
    else
    {
      v132 = v118;
      if ((v130 & 0x80000000) != 0)
      {
        LODWORD(v130) = v130 + v21;
        if (v131 + v21 < 0)
        {
          LODWORD(v130) = v131;
          if ((_DWORD)v21)
            v130 = (v131 + v21) % v21 + v21;
        }
      }
    }
    v180 = 0;
    memset(v178, 0, sizeof(v178));
    v179 = 0;
    v133 = (v21 & (((int)v130 - (int)v126) >> 31)) + (_DWORD)v130 - (_DWORD)v126;
    computeATRRecord((uint64_t)v178, *(int **)(v132 + 128), v126, v133);
    ATRLinearRegression((uint64_t)v178, &v182, (float *)&v180 + 1, (float *)&v180);
    v134 = v182;
    v135 = v180;
    ATRAngleOfLine(*(float *)&v180, **(unsigned int **)(v132 + 128), *(_QWORD *)(*(_QWORD *)(v132 + 128) + 8), v126, v133, v182);
    v137 = __sincos_stret((float)(v136 * 6.2832));
    cosval = v137.__cosval;
    sinval = v137.__sinval;
    *(float *)(v122 + 108) = cosval;
    *(float *)(v122 + 112) = sinval;
    *(_BYTE *)(v122 + 124) = v134;
    v140 = HIDWORD(v180);
    *(_DWORD *)(v122 + 128) = HIDWORD(v180);
    *(_DWORD *)(v122 + 132) = v135;
    v141 = v121 + 88 * v116;
    *(_QWORD *)(v141 + 56) = *(_QWORD *)(v122 + 108);
    *(_BYTE *)(v141 + 72) = v134;
    *(_DWORD *)(v141 + 76) = v140;
    *(_DWORD *)(v141 + 80) = v135;
    Curve = makeCurve(v132, v148, (a3 + 1));
    return makeCurve(v132, v5, (a3 + 1)) & Curve;
  }
  return result;
}

uint64_t checkCurves(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  char v7[256];
  char v8[128];
  char v9[72];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 252) >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = *(_QWORD *)(result + 240);
    do
    {
      switch(a2)
      {
        case 10:
          strcpy(v9, "compute points");
          break;
        case 9:
          v6 = "compute curve tangents";
LABEL_10:
          *(_OWORD *)v9 = *(_OWORD *)v6;
          *(_QWORD *)&v9[15] = *(_QWORD *)(v6 + 15);
          break;
        case 8:
          strcpy(v9, "extract curve records");
          break;
        default:
          v6 = "find subdivided curves";
          goto LABEL_10;
      }
      if (*(_DWORD *)v5 == -419)
      {
        strcpy(v8, "curve::type is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 4) == -419)
      {
        strcpy(v8, "curve::startIPIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 8) == -419)
      {
        strcpy(v8, "curve::startIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 10 && *(float *)(v5 + 12) == 1.379e-27)
      {
        strcpy(v8, "curve::startPoint.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 > 9 && *(float *)(v5 + 16) == 1.379e-27)
      {
        strcpy(v8, "curve::startPoint.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 20) == 1.379e-27)
      {
        strcpy(v8, "curve::startTangent.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 24) == 1.379e-27)
      {
        strcpy(v8, "curve::startTangent.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 28) == 1.379e-27)
      {
        strcpy(v8, "curve::startWing.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 32) == 1.379e-27)
      {
        strcpy(v8, "curve::startWing.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(_BYTE *)(v5 + 36) == 55)
      {
        strcpy(v8, "curve::startXMajor is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 40) == 1.379e-27)
      {
        strcpy(v8, "curve::startA is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 44) == 1.379e-27)
      {
        strcpy(v8, "curve::startB is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 48) == -419)
      {
        strcpy(v8, "curve::endIPIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 52) == -419)
      {
        strcpy(v8, "curve::endIndex is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 56) == 1.379e-27)
      {
        strcpy(v8, "curve::endTangent.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 60) == 1.379e-27)
      {
        strcpy(v8, "curve::endTangent.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 64) == 1.379e-27)
      {
        strcpy(v8, "curve::endWing.x is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 11 && *(float *)(v5 + 68) == 1.379e-27)
      {
        strcpy(v8, "curve::endWing.y is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(_BYTE *)(v5 + 72) == 55)
      {
        strcpy(v8, "curve::endXMajor is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 76) == 1.379e-27)
      {
        strcpy(v8, "curve::endA is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (a2 >= 9 && *(float *)(v5 + 80) == 1.379e-27)
      {
        strcpy(v8, "curve::endB is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      if (*(_DWORD *)(v5 + 84) == -419)
      {
        strcpy(v8, "curve::length is uninitialized");
        __sprintf_chk(v7, 0, 0x100uLL, "%s in %s", v8, v9);
        result = printf(" ***** %s in autoTrace\n", v7);
      }
      ++v4;
      v5 += 88;
    }
    while (v4 < *(_DWORD *)(v3 + 252));
  }
  return result;
}

char *newCurveFromList(char **a1)
{
  int v2;
  int v3;
  char *v4;
  char *v5;
  char *result;
  int32x2_t v7;
  char *v8;
  int32x4_t v9;

  v2 = *((_DWORD *)a1 + 3);
  v3 = *((_DWORD *)a1 + 2);
  if (v2 >= v3)
  {
    v5 = (char *)malloc_type_malloc(88 * v3 + 8800, 0x1000040A005BA8DuLL);
    if (!v5)
    {
      printf(" ***** %s in autoTrace\n", "could not extend curves list");
      return 0;
    }
    v4 = v5;
    memmove(v5, *a1, 88 * *((int *)a1 + 2));
    *((_DWORD *)a1 + 2) += 100;
    free(*a1);
    *a1 = v4;
    v2 = *((_DWORD *)a1 + 3);
  }
  else
  {
    v4 = *a1;
  }
  result = &v4[88 * v2];
  *((_QWORD *)result + 10) = 0;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)result = 0u;
  if (debug_auto_trace_uninitialized_testing)
  {
    v7 = vdup_n_s32(0xFFFFFE5D);
    *(int32x2_t *)result = v7;
    v8 = &v4[88 * v2];
    *((_DWORD *)v8 + 2) = -419;
    v9 = vdupq_n_s32(0x12DA82E3u);
    *(int32x4_t *)(v8 + 12) = v9;
    *(_QWORD *)(v8 + 28) = v9.i64[0];
    v8[36] = 1;
    *((_QWORD *)v8 + 5) = v9.i64[0];
    *((int32x2_t *)v8 + 6) = v7;
    *(int32x4_t *)(v8 + 56) = v9;
    v8[72] = 1;
    *(_QWORD *)(v8 + 76) = v9.i64[0];
    *((_DWORD *)v8 + 21) = -419;
  }
  ++*((_DWORD *)a1 + 3);
  return result;
}

float evaluatePointOnCurve(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  BOOL v19;
  float v20;
  float result;

  v19 = a1 == a3 && a2 == a4 && a5 == a7 && a6 == a8;
  v20 = a1
      + (float)((float)((float)((float)((float)((float)((float)(a7 + (float)((float)(a5 - a3) * -3.0)) - a1) * a9)
                                      + (float)((float)((float)(a1 + (float)(a3 * -2.0)) + a5) * 3.0))
                              * a9)
                      + (float)((float)(a3 - a1) * 3.0))
              * a9);
  result = a1 + (float)((float)(a7 - a1) * a9);
  if (!v19)
    return v20;
  return result;
}

float squaredDistanceFromCurve(int a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  float v6;
  int i;
  int v8;
  int v9;
  float *v10;
  float v11;

  v6 = (float)((float)(a6 - *(float *)(a2 + 8 * a3 + 4)) * (float)(a6 - *(float *)(a2 + 8 * a3 + 4)))
     + (float)((float)(a5 - *(float *)(a2 + 8 * a3)) * (float)(a5 - *(float *)(a2 + 8 * a3)));
  for (i = a3 + 1; ; i = v9 + 1)
  {
    v8 = i >= a1 ? a1 : 0;
    v9 = i - v8;
    if (v9 == a4)
      break;
    v10 = (float *)(a2 + 8 * v9);
    v11 = (float)(a6 - v10[1]) * (float)(a6 - v10[1]);
    if ((float)(v11 + (float)((float)(a5 - *v10) * (float)(a5 - *v10))) < v6)
      v6 = v11 + (float)((float)(a5 - *v10) * (float)(a5 - *v10));
  }
  return v6;
}

void goodnessOfFit(uint64_t a1, int a2, int a3, float *a4, float *a5, __n128 a6, float a7, float a8, float a9, float a10, float a11)
{
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  int v36;
  float *v37;
  int v38;
  float v39;
  float v40;
  int v41;
  float v42;
  int v43;
  int v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  __n128 v55;
  float v56;
  float v57;

  v15 = *(int **)(a1 + 128);
  v16 = *((_QWORD *)v15 + 1);
  v17 = *v15;
  v18 = (float *)(v16 + 8 * a2);
  LODWORD(v19) = a3 + a2;
  v20 = a3 + a2;
  if (a3 + a2 >= (int)v17)
  {
    v21 = (int)v19 - v17;
    LODWORD(v19) = v19 - v17;
    if (v20 - v17 >= v17)
    {
      LODWORD(v19) = a3 + a2;
      if ((_DWORD)v17)
        v19 = v21 % v17;
    }
  }
  else if ((v20 & 0x80000000) != 0)
  {
    v22 = v17 + (int)v19;
    LODWORD(v19) = v17 + v19;
    if (v17 + v20 < 0)
    {
      LODWORD(v19) = a3 + a2;
      if ((_DWORD)v17)
        v19 = v22 % v17 + v17;
    }
  }
  v24 = *v18;
  v23 = v18[1];
  v25 = (float *)(v16 + 8 * (int)v19);
  v27 = *v25;
  v26 = v25[1];
  if (a3 < 3)
    goto LABEL_25;
  v28 = a8 - v24;
  v29 = a9 - v23;
  v30 = v26 - a11;
  v31 = (float)((float)(v24 + (float)((float)(a8 + a10) * 3.0)) + v27) * 0.125;
  v32 = (float)((float)(v23 + (float)((float)(a9 + a11) * 3.0)) + v26) * 0.125;
  v33 = (float)((float)(a8 + (float)(v27 - a10)) - v24) * 0.25;
  v34 = (float)((float)(a9 + (float)(v26 - a11)) - v23) * 0.25;
  v35 = a2 + 1 >= (int)v17 ? v17 : 0;
  v36 = a2 + 1 - v35;
  v37 = (float *)(v16 + 8 * v36);
  v38 = a3 - 2;
  v40 = *v37;
  v39 = v37[1];
  v41 = -1;
  v42 = 1.0e12;
  do
  {
    if (v36 + 1 >= (int)v17)
      v43 = v17;
    else
      v43 = 0;
    v44 = v36 + 1 - v43;
    v45 = (float *)(v16 + 8 * v44);
    v46 = v45[1];
    v47 = *v45 - v40;
    v48 = (float)((float)(v46 - v39) * (float)(v46 - v39)) + (float)(v47 * v47);
    v49 = fabsf((float)((float)((float)((float)(v46 - v39) * v31) - (float)(v47 * v32)) + (float)(*v45 * v39))- (float)(v46 * v40))/ sqrtf(v48);
    v50 = sqrtf((float)((float)(v32 - v39) * (float)(v32 - v39)) + (float)((float)(v31 - v40) * (float)(v31 - v40)));
    if (v48 != 0.0)
      v50 = v49;
    if (v50 < v42)
    {
      v41 = v36;
      v42 = v50;
    }
    v39 = v45[1];
    v40 = *v45;
    v36 = v44;
    --v38;
  }
  while (v38);
  if (v41 == -1)
  {
LABEL_25:
    v56 = sqrtf((float)((float)(v26 - v23) * (float)(v26 - v23)) + (float)((float)(v27 - v24) * (float)(v27 - v24)));
    v57 = fmaxf(a6.n128_f32[0], a7);
  }
  else
  {
    v51 = v31 + (float)(v33 * 0.5);
    v52 = v32 + (float)(v34 * 0.5);
    v53 = v27 + (float)((float)(v27 - a10) * -0.5);
    v54 = v26 + (float)(v30 * -0.5);
    v55 = goodnessOfFit(a1, a6, v42, v24 + (float)(v28 * 0.5), v23 + (float)(v29 * 0.5), v31 + (float)(v33 * -0.5), v32 + (float)(v34 * -0.5));
    v55.n128_f32[0] = v42;
    goodnessOfFit(a1, v55, a7, v51, v52, v53, v54);
    v56 = 0.0 + 0.0;
    v57 = fmaxf(0.0, 0.0);
  }
  *a4 = v56;
  *a5 = v57;
}

void findTangentBackwardsFrom(uint64_t a1, int a2, uint64_t a3, float *a4, float *a5, BOOL *a6, float *a7, float *a8)
{
  float *v8;
  float *v9;
  int v10;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  int v29;
  int v33;
  int v34;
  uint64_t v35;
  float *v36;
  BOOL *v37;
  float *v38;
  BOOL v39;
  float v40;
  float v41;
  __double2 v42;
  float cosval;
  float sinval;
  float v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  __double2 v65;
  float v66;
  float v67;
  uint64_t v68;
  int v69;
  int8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  float32x2_t v80;
  float v81;
  float v82;
  _BOOL4 v84;
  int v85;
  unsigned int v86;
  float32x2_t v89;
  int v90;
  float32x2_t v91;
  unsigned __int8 v92;
  float32x2_t v93;
  BOOL v101;
  BOOL v102;
  float *v104;
  float *v105;
  BOOL *v106;
  _OWORD v108[4];
  uint64_t v109;
  float v110;
  float v111;
  BOOL v112[9];

  v8 = a8;
  v9 = a7;
  v10 = a3;
  v112[0] = 0;
  v110 = 0.0;
  v111 = 0.0;
  v109 = 0;
  memset(v108, 0, sizeof(v108));
  v13 = *(int **)(a1 + 128);
  v14 = *((_QWORD *)v13 + 1);
  v15 = *v13;
  if (a2 <= 0)
    v16 = *v13;
  else
    v16 = 0;
  LODWORD(v17) = a2 + v16 - 1;
  v18 = (float32x2_t *)(v14 + 8 * (int)v17);
  v19 = (float32x2_t *)(v14 + 8 * a2);
  v20 = v18->f32[1];
  v21 = v19->f32[0];
  v22 = v19->f32[1];
  v23 = vabds_f32(v18->f32[0], v19->f32[0]);
  v24 = vabds_f32(v20, v22);
  if (v23 <= (float)(v24 * 4.0))
  {
    if (v24 <= (float)(v23 * 4.0))
      goto LABEL_42;
    if ((_DWORD)v17 == (_DWORD)a3)
    {
      v25 = v18->f32[0] - v21;
      goto LABEL_10;
    }
    do
    {
      if ((int)v17 <= 0)
        v29 = *v13;
      else
        v29 = 0;
      v17 = (v17 + v29 - 1);
      v25 = *(float *)(v14 + 8 * (int)v17) - v21;
    }
    while (v25 >= -1.0 && v25 <= 1.0 && (_DWORD)v17 != (_DWORD)a3);
  }
  else
  {
    if ((_DWORD)v17 == (_DWORD)a3)
    {
      v25 = v20 - v22;
LABEL_10:
      v17 = a3;
      goto LABEL_34;
    }
    do
    {
      if ((int)v17 <= 0)
        v26 = *v13;
      else
        v26 = 0;
      v17 = (v17 + v26 - 1);
      v25 = *(float *)(v14 + 8 * (int)v17 + 4) - v22;
    }
    while (v25 >= -1.0 && v25 <= 1.0 && (_DWORD)v17 != (_DWORD)a3);
  }
LABEL_34:
  if (v25 < -1.0 || v25 > 1.0)
  {
    if (a2 - (int)v17 >= -1)
      v33 = 0;
    else
      v33 = *v13;
    v34 = a2 - v17 + v33;
    v35 = (v34 + 1);
    v36 = a4;
    v37 = a6;
    v38 = a5;
    computeATRRecord((uint64_t)v108, v13, v17, v34 + 1);
    ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
    v39 = v112[0];
    v40 = v110;
    ATRAngleOfLine(v110, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v17, v35, v112[0]);
    v42 = __sincos_stret((float)(v41 * 6.2832));
    cosval = v42.__cosval;
    sinval = v42.__sinval;
    *v36 = cosval;
    *v38 = sinval;
    *v37 = v39;
    v45 = v111;
    goto LABEL_117;
  }
LABEL_42:
  v46 = (v15 & ((a2 - (int)a3) >> 31)) + a2 - a3;
  if (v46 <= 10)
    goto LABEL_65;
  v47 = a2 - 10;
  v48 = a2 - 10;
  v104 = a4;
  v105 = a5;
  v106 = a6;
  if (a2 - 10 >= (int)v15)
  {
    v51 = v47 - v15;
    v50 = v48 - v15;
    if (v48 - v15 >= v15)
    {
      v50 = a2 - 10;
      if ((_DWORD)v15)
        v50 = v51 % v15;
    }
  }
  else if (a2 > 9)
  {
    v50 = v47;
  }
  else
  {
    v49 = v15 + v47;
    v50 = v15 + v48;
    if (v15 + v48 < 0)
    {
      v50 = a2 - 10;
      if ((_DWORD)v15)
        v50 = v49 % v15 + v15;
    }
  }
  computeATRRecord((uint64_t)v108, v13, v50, 10);
  ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
  v52 = v112[0];
  v40 = v110;
  v45 = v111;
  v53 = ATRMaxDistanceFromLine(v108, v112[0], v111, v110);
  ATRAngleOfLine(v40, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v50, 10, v52);
  v55 = v54;
  v56 = straightLineDistanceDeltaToleranceAtAngle(v54);
  v8 = a8;
  a4 = v104;
  a5 = v105;
  a6 = v106;
  if (v53 >= v56)
    goto LABEL_65;
  if (v46 < 0x15)
    goto LABEL_64;
  v57 = a2 - 20;
  v58 = a2 - 20;
  if (a2 - 20 >= (int)v15)
  {
    v61 = v57 - v15;
    v60 = v58 - v15;
    if (v58 - v15 >= v15)
    {
      v60 = a2 - 20;
      if ((_DWORD)v15)
        v60 = v61 % v15;
    }
  }
  else if (a2 > 19)
  {
    v60 = v57;
  }
  else
  {
    v59 = v15 + v57;
    v60 = v15 + v58;
    if (v15 + v58 < 0)
    {
      v60 = a2 - 20;
      if ((_DWORD)v15)
        v60 = v59 % v15 + v15;
    }
  }
  computeATRRecord((uint64_t)v108, *(int **)(a1 + 128), v60, 20);
  ATRLinearRegression((uint64_t)v108, v112, &v111, &v110);
  v52 = v112[0];
  v40 = v110;
  v45 = v111;
  v62 = ATRMaxDistanceFromLine(v108, v112[0], v111, v110);
  ATRAngleOfLine(v40, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v60, 20, v52);
  v55 = v63;
  v64 = straightLineDistanceDeltaToleranceAtAngle(v63);
  v8 = a8;
  a4 = v104;
  a5 = v105;
  a6 = v106;
  if (v62 >= v64)
  {
LABEL_65:
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v9 = a7;
    do
    {
      v71 = a2 - v68;
      v72 = v71 - v15;
      if (v71 >= v15)
      {
        if (v72 >= v15)
        {
          v74 = (_DWORD)v15 == 0;
        }
        else
        {
          LODWORD(v71) = a2 - v68 - v15;
          v74 = 1;
        }
        if (!v74)
          v71 = v72 % v15;
      }
      else if (v71 < 0)
      {
        v73 = v71 + v15;
        if (v71 + v15 < 0 == __OFADD__(v71, v15))
          LODWORD(v71) = v71 + v15;
        if (v73 < 0 && (_DWORD)v15)
          v71 = v73 % v15 + v15;
      }
      if ((_DWORD)v71 == v10)
      {
        v75 = 0;
      }
      else
      {
        v76 = 0;
        v77 = (int)v71;
        v78 = v71;
        while (1)
        {
          v79 = v78 <= 0 ? v15 : 0;
          v78 = v78 + v79 - 1;
          v75 = v76 + 1;
          v80 = vsub_f32(*(float32x2_t *)(v14 + 8 * (int)v71), *(float32x2_t *)(v14 + 8 * v78));
          v81 = fabsf(v80.f32[0]);
          v82 = fabsf(v80.f32[1]);
          if (v81 == 2.0 || v82 == 2.0)
            break;
          v84 = v81 != 1.0;
          if (v82 == 1.0)
            v84 = 0;
          v85 = v84 | v69;
          v69 |= v85 ^ 1;
          if ((v85 & 1) != 0)
            v86 = -1;
          else
            v86 = 0;
          v70 = vbsl_s8((int8x8_t)vdup_n_s32(v86), v70, (int8x8_t)v80);
          v76 = v75;
          if (v78 == v10)
            goto LABEL_100;
        }
        if (v78 != v10 && v76 < 4)
          goto LABEL_103;
      }
LABEL_100:
      ++v68;
    }
    while (v68 != 3);
    if ((v69 & 1) != 0)
    {
      v77 = (int)v71;
      v80 = (float32x2_t)v70;
LABEL_103:
      _D0 = *(float32x2_t *)(v14 + 8 * v77);
      goto LABEL_105;
    }
    _D0 = *v19;
    v80 = vsub_f32(*v19, *v18);
    LODWORD(v71) = a2;
LABEL_105:
    v89 = vmul_n_f32(v80, 1.0 / fmaxf(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v80, v80).i32[1]), v80.f32[0], v80.f32[0])), 0.001));
    if (v75 == 2)
    {
      if ((int)v71 <= 0)
        v90 = v15;
      else
        v90 = 0;
      _D0 = vmul_f32(vadd_f32(_D0, *(float32x2_t *)(v14 + 8 * ((int)v71 + v90 - 1))), (float32x2_t)0x3F0000003F000000);
    }
    v91 = vabs_f32(v89);
    v92 = vcgt_f32(v91, (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1)).u8[0];
    v93 = (float32x2_t)vdup_lane_s32((int32x2_t)v89, 1);
    _S3 = _D0.i32[1];
    _S4 = vdiv_f32(v89, v93).u32[0];
    __asm { FMLS            S5, S3, V4.S[0] }
    _S2 = vdiv_f32(v93, v89).u32[0];
    __asm { FMLS            S3, S0, V2.S[0] }
    v101 = (v92 & 1) == 0;
    v102 = (v92 & 1) != 0;
    if (v101)
      v40 = *(float *)&_S4;
    else
      v40 = *(float *)&_S2;
    *a4 = v89.f32[0];
    if (v101)
      v45 = _S5;
    else
      v45 = _S3;
    *a5 = v89.f32[1];
    *a6 = v102;
  }
  else
  {
LABEL_64:
    v65 = __sincos_stret((float)(v55 * 6.2832));
    v66 = v65.__cosval;
    *v104 = v66;
    v67 = v65.__sinval;
    *v105 = v67;
    v9 = a7;
    *v106 = v52;
  }
LABEL_117:
  *v9 = v45;
  *v8 = v40;
}

float numericalCheckCurveEnd(float *a1)
{
  if (fabsf(a1[14]) == INFINITY || fabsf(a1[15]) == INFINITY)
    printf(" ***** %s in autoTrace\n", "infinity tangent found");
  if (fabsf(a1[19]) == INFINITY || fabsf(a1[20]) == INFINITY)
    printf(" ***** %s in autoTrace\n", "infinity line equation found");
  return a1[20];
}

float computeCurveStartTangentAtCorner(uint64_t a1, uint64_t a2)
{
  int v3;
  float result;
  int v5;
  int v6;
  uint64_t v7;
  float v8;
  BOOL v9;

  v9 = 0;
  v8 = 0.0;
  v7 = 0;
  v6 = 0;
  findTangentForwardsFrom(a1, *(unsigned int *)(a2 + 8), *(_DWORD *)(a2 + 52), (float *)&v7, (float *)&v6, &v9, &v8, (float *)&v7 + 1);
  v3 = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 36) = v9;
  v5 = HIDWORD(v7);
  result = v8;
  *(float *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = v5;
  return result;
}

float numericalCheckCurveStart(float *a1)
{
  if (fabsf(a1[5]) == INFINITY || fabsf(a1[6]) == INFINITY)
    printf(" ***** %s in autoTrace\n", "infinity tangent found");
  if (fabsf(a1[10]) == INFINITY || fabsf(a1[11]) == INFINITY)
    printf(" ***** %s in autoTrace\n", "infinity line equation found");
  return a1[11];
}

void findTangentForwardsFrom(uint64_t a1, uint64_t a2, int a3, float *a4, float *a5, BOOL *a6, float *a7, float *a8)
{
  float *v8;
  float *v9;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  float32x2_t *v19;
  float32x2_t *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  float v32;
  int v33;
  int v34;
  int v36;
  int v37;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  float *v43;
  float *v44;
  unsigned int *v45;
  BOOL v46;
  float v47;
  float v48;
  __double2 v49;
  float cosval;
  float sinval;
  float v52;
  int v53;
  int v54;
  int v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  __double2 v66;
  float v67;
  float v68;
  uint64_t v69;
  int v70;
  int8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  float32x2_t v82;
  float v83;
  float v84;
  _BOOL4 v86;
  int v87;
  unsigned int v88;
  float32x2_t v91;
  int v92;
  int v93;
  float32x2_t v94;
  unsigned __int8 v95;
  float32x2_t v96;
  BOOL v104;
  BOOL v105;
  float *v106;
  float *v107;
  _OWORD v110[4];
  uint64_t v111;
  float v112;
  float v113;
  BOOL v114[9];

  v8 = a8;
  v9 = a7;
  v114[0] = 0;
  v112 = 0.0;
  v113 = 0.0;
  v111 = 0;
  memset(v110, 0, sizeof(v110));
  v14 = *(int **)(a1 + 128);
  v15 = *((_QWORD *)v14 + 1);
  v16 = *v14;
  if ((int)a2 + 1 >= (int)v16)
    v17 = *v14;
  else
    v17 = 0;
  v18 = a2 + 1 - v17;
  v19 = (float32x2_t *)(v15 + 8 * v18);
  v20 = (float32x2_t *)(v15 + 8 * (int)a2);
  v21 = v19->f32[0];
  v22 = v19->f32[1];
  v23 = v20->f32[0];
  v24 = v20->f32[1];
  v25 = vabds_f32(v19->f32[0], v20->f32[0]);
  v26 = vabds_f32(v22, v24);
  if (v25 <= (float)(v26 * 4.0))
  {
    if (v26 <= (float)(v25 * 4.0))
      goto LABEL_58;
    v32 = v21 - v23;
    v28 = a3;
    if ((float)(v21 - v23) >= 0.0)
    {
      if (v18 != a3)
      {
        v28 = v18;
        do
        {
          v53 = v28 + 1;
          if (v53 >= (int)v16)
            v54 = *v14;
          else
            v54 = 0;
          v28 = v53 - v54;
          v32 = *(float *)(v15 + 8 * v28) - v23;
        }
        while (v32 <= 1.0 && v28 != a3);
      }
      if (v32 > 1.0)
        goto LABEL_43;
    }
    else
    {
      if (v18 != a3)
      {
        v28 = v18;
        do
        {
          v33 = v28 + 1;
          if (v33 >= (int)v16)
            v34 = *v14;
          else
            v34 = 0;
          v28 = v33 - v34;
          v32 = *(float *)(v15 + 8 * v28) - v23;
        }
        while (v32 >= -1.0 && v28 != a3);
      }
      if (v32 < -1.0)
        goto LABEL_43;
    }
  }
  else
  {
    v27 = v22 - v24;
    v28 = a3;
    if ((float)(v22 - v24) < 0.0)
    {
      if (v18 != a3)
      {
        v28 = v18;
        do
        {
          v29 = v28 + 1;
          if (v29 >= (int)v16)
            v30 = *v14;
          else
            v30 = 0;
          v28 = v29 - v30;
          v27 = *(float *)(v15 + 8 * v28 + 4) - v24;
        }
        while (v27 >= -1.0 && v28 != a3);
      }
      if (v27 >= -1.0)
        goto LABEL_58;
LABEL_43:
      v39 = v28 - a2;
      if (v39 >= -1)
        v40 = 0;
      else
        v40 = *v14;
      v41 = v39 + v40;
      v42 = (v41 + 1);
      v43 = a4;
      v44 = a5;
      computeATRRecord((uint64_t)v110, v14, a2, v41 + 1);
      ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
      v45 = *(unsigned int **)(a1 + 128);
      v46 = v114[0];
      v47 = v112;
      ATRAngleOfLine(v112, *v45, *((_QWORD *)v45 + 1), a2, v42, v114[0]);
      v49 = __sincos_stret((float)(v48 * 6.2832));
      cosval = v49.__cosval;
      *v43 = cosval;
      sinval = v49.__sinval;
      *v44 = sinval;
      *a6 = v46;
      v52 = v113;
      goto LABEL_115;
    }
    if (v18 != a3)
    {
      v28 = v18;
      do
      {
        v36 = v28 + 1;
        if (v36 >= (int)v16)
          v37 = *v14;
        else
          v37 = 0;
        v28 = v36 - v37;
        v27 = *(float *)(v15 + 8 * v28 + 4) - v24;
      }
      while (v27 <= 1.0 && v28 != a3);
    }
    if (v27 > 1.0)
      goto LABEL_43;
  }
LABEL_58:
  v57 = (v16 & ((a3 - (int)a2) >> 31)) + a3 - a2;
  if (v57 < 11)
    goto LABEL_63;
  v106 = a4;
  v107 = a5;
  computeATRRecord((uint64_t)v110, v14, a2, 10);
  ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
  v58 = v114[0];
  v47 = v112;
  v52 = v113;
  v59 = ATRMaxDistanceFromLine(v110, v114[0], v113, v112);
  ATRAngleOfLine(v47, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2, 10, v58);
  v61 = v60;
  v62 = straightLineDistanceDeltaToleranceAtAngle(v60);
  a4 = v106;
  a5 = v107;
  if (v59 >= v62)
    goto LABEL_63;
  if (v57 < 0x15)
    goto LABEL_62;
  computeATRRecord((uint64_t)v110, *(int **)(a1 + 128), a2, 20);
  ATRLinearRegression((uint64_t)v110, v114, &v113, &v112);
  v58 = v114[0];
  v47 = v112;
  v52 = v113;
  v63 = ATRMaxDistanceFromLine(v110, v114[0], v113, v112);
  ATRAngleOfLine(v47, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2, 20, v58);
  v61 = v64;
  v65 = straightLineDistanceDeltaToleranceAtAngle(v64);
  a4 = v106;
  a5 = v107;
  if (v63 >= v65)
  {
LABEL_63:
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v8 = a8;
    v9 = a7;
    do
    {
      v72 = v69 + (int)a2;
      v73 = v72 - v16;
      if (v72 >= v16)
      {
        if (v73 >= v16)
        {
          v75 = (_DWORD)v16 == 0;
        }
        else
        {
          LODWORD(v72) = v69 + a2 - v16;
          v75 = 1;
        }
        if (!v75)
          v72 = v73 % v16;
      }
      else if (v72 < 0)
      {
        v74 = v72 + v16;
        if (v72 + v16 < 0 == __OFADD__(v72, v16))
          LODWORD(v72) = v72 + v16;
        if (v74 < 0 && (_DWORD)v16)
          v72 = v74 % v16 + v16;
      }
      if ((_DWORD)v72 == a3)
      {
        v76 = 0;
      }
      else
      {
        v77 = 0;
        v78 = (int)v72;
        v79 = v72;
        while (1)
        {
          v80 = v79 + 1;
          v81 = v79 + 1 >= (int)v16 ? v16 : 0;
          v79 = v80 - v81;
          v76 = v77 + 1;
          v82 = vsub_f32(*(float32x2_t *)(v15 + 8 * v79), *(float32x2_t *)(v15 + 8 * (int)v72));
          v83 = fabsf(v82.f32[0]);
          v84 = fabsf(v82.f32[1]);
          if (v83 == 2.0 || v84 == 2.0)
            break;
          v86 = v83 != 1.0;
          if (v84 == 1.0)
            v86 = 0;
          v87 = v86 | v70;
          v70 |= v87 ^ 1;
          if ((v87 & 1) != 0)
            v88 = -1;
          else
            v88 = 0;
          v71 = vbsl_s8((int8x8_t)vdup_n_s32(v88), v71, (int8x8_t)v82);
          v77 = v76;
          if (v79 == a3)
            goto LABEL_98;
        }
        if (v79 != a3 && v77 < 4)
          goto LABEL_101;
      }
LABEL_98:
      ++v69;
    }
    while (v69 != 3);
    if ((v70 & 1) != 0)
    {
      v78 = (int)v72;
      v82 = (float32x2_t)v71;
LABEL_101:
      _D0 = *(float32x2_t *)(v15 + 8 * v78);
      goto LABEL_103;
    }
    _D0 = *v20;
    v82 = vsub_f32(*v19, *v20);
    LODWORD(v72) = a2;
LABEL_103:
    v91 = vmul_n_f32(v82, 1.0 / fmaxf(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v82, v82).i32[1]), v82.f32[0], v82.f32[0])), 0.001));
    if (v76 == 2)
    {
      v92 = v72 + 1;
      if (v92 >= (int)v16)
        v93 = v16;
      else
        v93 = 0;
      _D0 = vmul_f32(vadd_f32(_D0, *(float32x2_t *)(v15 + 8 * (v92 - v93))), (float32x2_t)0x3F0000003F000000);
    }
    v94 = vabs_f32(v91);
    v95 = vcgt_f32(v94, (float32x2_t)vdup_lane_s32((int32x2_t)v94, 1)).u8[0];
    v96 = (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1);
    _S3 = _D0.i32[1];
    _S4 = vdiv_f32(v91, v96).u32[0];
    __asm { FMLS            S5, S3, V4.S[0] }
    _S2 = vdiv_f32(v96, v91).u32[0];
    __asm { FMLS            S3, S0, V2.S[0] }
    v104 = (v95 & 1) == 0;
    v105 = (v95 & 1) != 0;
    if (v104)
      v47 = *(float *)&_S4;
    else
      v47 = *(float *)&_S2;
    *a4 = v91.f32[0];
    if (v104)
      v52 = _S5;
    else
      v52 = _S3;
    *a5 = v91.f32[1];
    *a6 = v105;
  }
  else
  {
LABEL_62:
    v66 = __sincos_stret((float)(v61 * 6.2832));
    v67 = v66.__cosval;
    *v106 = v67;
    v68 = v66.__sinval;
    *v107 = v68;
    *a6 = v58;
    v8 = a8;
    v9 = a7;
  }
LABEL_115:
  *v9 = v52;
  *v8 = v47;
}

uint64_t cutUpCurve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  float v45;
  char v46[4];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v12 = **(int **)(a1 + 128);
  v13 = a4 - a2;
  if ((_DWORD)a4 == (_DWORD)a2)
  {
    if (*(int *)(a1 + 220) >= 2)
    {
      __sprintf_chk(v46, 0, 0x100uLL, "zero length curve in cutUpCurve at point index %d");
LABEL_8:
      printf(" ***** %s in autoTrace\n", v46);
      return 1;
    }
  }
  else if (v13 >= 0xFFFFFFFE && (int)v12 >= 101 && *(int *)(a1 + 220) >= 3)
  {
    __sprintf_chk(v46, 0, 0x100uLL, "cutUpCurve with reversed point indexes %d and %d");
    goto LABEL_8;
  }
  *(_DWORD *)v46 = 0;
  if (v13 <= 0)
    v14 = v12;
  else
    v14 = 0;
  computeAngleSumAndRange(a1, a2, a4, (float *)v46, &v45);
  if (fabsf(*(float *)v46) <= 0.16667)
    return 1;
  v15 = v14 + v13;
  v16 = *(_QWORD *)(a1 + 168);
  v17 = fabsf(*(float *)(v16 + 4 * (int)a2));
  v18 = a2;
  LODWORD(v19) = a2;
  v20 = v17;
  do
  {
    v21 = fabsf(*(float *)(v16 + 4 * (int)v18));
    v17 = v17 + v21;
    if (v21 <= v20)
      v19 = v19;
    else
      v19 = v18;
    if (v21 > v20)
      v20 = v21;
    v22 = v18 + 1;
    if (v22 >= (int)v12)
      v23 = v12;
    else
      v23 = 0;
    v18 = v22 - v23;
  }
  while (v18 != (_DWORD)a4);
  v24 = v20 / (float)(v17 / (float)v15);
  v25 = v24 < 2.2 || (_DWORD)v19 == (_DWORD)a2;
  if (v25 || v24 <= 1.9)
    goto LABEL_28;
  LODWORD(v41) = v19 - a2;
  v42 = (int)v19 - (int)a2;
  if ((int)v19 - (int)a2 >= (int)v12)
  {
    LODWORD(v41) = v41 - v12;
    if (v42 - v12 >= v12)
    {
      LODWORD(v41) = v19 - a2;
      if ((_DWORD)v12)
        v41 = (v42 - v12) % v12;
    }
  }
  else if ((v42 & 0x80000000) != 0)
  {
    LODWORD(v41) = v41 + v12;
    if (v42 + v12 < 0)
    {
      LODWORD(v41) = v19 - a2;
      if ((_DWORD)v12)
        v41 = (v42 + v12) % v12 + v12;
    }
  }
  if (v15 / 5 >= (int)v41 || 4 * v15 / 5 <= (int)v41)
  {
LABEL_28:
    if ((int)a2 + 1 >= (int)v12)
      v26 = v12;
    else
      v26 = 0;
    v27 = a2 + 1 - v26;
    if (v27 == (_DWORD)a4)
      return 1;
    v28 = a2;
    while (1)
    {
      v29 = v28;
      v28 = v27;
      v30 = *(_QWORD *)(a1 + 152);
      v31 = *(float *)(v30 + 4 * v29);
      v32 = *(float *)(v30 + 4 * v28) - rintf(*(float *)(v30 + 4 * v28) - v31);
      v33 = ((v29 == (_DWORD)a2) & a3) != 0 ? 8 : 24;
      if (v31 <= 0.0 && v32 >= 0.0
        || v31 >= 0.0 && v32 <= 0.0
        || (v31 <= 0.25 ? (v34 = v32 < 0.25) : (v34 = 1),
            !v34
         || (v31 >= 0.25 ? (v35 = v32 > 0.25) : (v35 = 1),
             !v35
          || (v31 <= 0.5 ? (v36 = v32 < 0.5) : (v36 = 1),
              !v36
           || (v31 >= 0.5 ? (v37 = v32 > 0.5) : (v37 = 1),
               !v37
            || (v31 <= 0.75 ? (v38 = v32 < 0.75) : (v38 = 1),
                !v38 || v31 >= 0.75 && v32 <= 0.75 || v31 <= 1.0 && v32 >= 1.0 || v31 >= 1.0 && v32 <= 1.0))))))
      {
        result = (uint64_t)addInterestingPointAtIndex(v29, v33, a6);
        if (!result)
          break;
      }
      if (v28 + 1 >= (int)v12)
        v40 = v12;
      else
        v40 = 0;
      v27 = v28 + 1 - v40;
      if (v27 == (_DWORD)a4)
        return 1;
    }
  }
  else
  {
    result = (uint64_t)addInterestingPointAtIndex(v19, 16, a6);
    if (result)
    {
      result = (uint64_t)addInterestingPointAtIndex(v19, 8, a6);
      if (result)
      {
        v43 = (_DWORD)v19 == (_DWORD)a4 ? a5 : 0;
        result = cutUpCurve(a1, a2, a3, v19, v43, a6);
        if ((_DWORD)result)
        {
          v44 = cutUpCurve(a1, v19, 0, a4, a5, a6);
          result = 0;
          if ((v44 & 1) != 0)
            return 1;
        }
      }
    }
  }
  return result;
}

uint64_t indexOfNewInterestingPointAtPointIndex(int a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;

  *a3 = 0;
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
  {
    result = 0;
  }
  else
  {
    LODWORD(result) = 0;
    v6 = *(_DWORD *)(a2 + 12);
    do
    {
      v7 = (v6 + (int)result) >> 1;
      v8 = *(_DWORD *)(*(_QWORD *)a2 + 8 * v7);
      if (v8 < a1)
        result = (v7 + 1);
      else
        result = result;
      if (v8 >= a1)
        v6 = v7;
    }
    while ((int)result < v6);
  }
  if ((int)result < v4 && *(_DWORD *)(*(_QWORD *)a2 + 8 * (int)result) == a1)
  {
    *a3 = 1;
  }
  else if ((_DWORD)result == v4)
  {
    return 0;
  }
  else
  {
    return result;
  }
  return result;
}

uint64_t outputLineAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, _DWORD *a5, char *a6)
{
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  float v18;
  float v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float64x2_t v28;
  float64x2_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  float *v36;
  int v37;
  float32x2_t v38;
  int v39;
  int v40;
  float *v41;
  int v42;
  int v43;
  float *v44;
  int v45;
  float v46;
  float v47;
  float *v48;
  float *v49;
  int v50;
  float64x2_t v52;
  float64x2_t v53;
  int v60;
  int v61;
  float64x2_t v63;
  float64x2_t v64;
  int v67;
  int v68;
  float v69;
  float v70;
  float *v71;
  float *v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  _BOOL4 v78;
  float v79;
  float v80;
  int v81;
  float v82;
  float v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  int v88;
  uint64_t v89;
  float v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  float32x2_t v96;
  float v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t *v101;
  char *v102;
  int v103;
  uint64_t v104;
  _BOOL4 v105;
  float v106;
  int v107;
  float v108;
  float v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  float32x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  int v121;
  uint64_t v122;
  int v123;
  float v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  float v129;
  float v130;
  float v131;
  char v132;
  uint64_t result;
  char **v134;
  int v136;
  uint64_t v137;
  int v138;
  float v139;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  int *v147;
  int v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float v155;
  float v156;
  BOOL v157;
  __int128 v158;
  float64x2_t v159;
  float64x2_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;

  v10 = *(int **)(a1 + 128);
  v11 = *v10;
  v12 = a3 + a2;
  v13 = (int)a3 + (int)a2;
  if ((int)a3 + (int)a2 >= (int)v11)
  {
    v15 = v12 - v11;
    LODWORD(v14) = v13 - v11;
    if (v13 - v11 >= v11)
    {
      LODWORD(v14) = a3 + a2;
      if ((_DWORD)v11)
        v14 = v15 % v11;
    }
  }
  else if ((v13 & 0x80000000) != 0)
  {
    v16 = v11 + v12;
    LODWORD(v14) = v11 + v13;
    if (v11 + v13 < 0)
    {
      LODWORD(v14) = a3 + a2;
      if ((_DWORD)v11)
        v14 = v16 % v11 + v11;
    }
  }
  else
  {
    LODWORD(v14) = a3 + a2;
  }
  v163 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v162 = 0;
  v164 = 0;
  computeATRRecord((uint64_t)&v158, v10, a2, a3);
  ATRLinearRegression((uint64_t)&v158, &v164, (float *)&v163 + 1, (float *)&v163);
  v17 = v164;
  v18 = *(float *)&v163;
  v19 = ATRMaxDistanceFromLine(&v158, v164, *((float *)&v163 + 1), *(float *)&v163);
  v20 = v17;
  v21 = a3;
  ATRAngleOfLine(v18, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2, a3, v20);
  v23 = v22;
  v24 = *(float *)(*(_QWORD *)(a1 + 144) + 4 * (int)a2) - *(float *)(*(_QWORD *)(a1 + 144) + 4 * (int)v14);
  v25 = v24 - rintf(v24);
  v26 = straightLineDistanceDeltaToleranceAtAngle(v23);
  v27 = v26;
  if ((int)a3 >= 51 && v19 > v26)
  {
    v139 = v25;
    v134 = a4;
    v157 = 0;
    v155 = 0.0;
    v156 = 0.0;
    v147 = (int *)v158;
    v29 = v159;
    v28 = v160;
    v136 = a2;
    v138 = v14;
    v141 = v11;
    v30 = v14;
    LODWORD(v14) = a2;
    LODWORD(v31) = v30;
    v32 = v11;
    v34 = DWORD2(v158);
    v33 = HIDWORD(v158);
    while (1)
    {
      v35 = v21;
      v36 = (float *)*((_QWORD *)v147 + 1);
      v37 = *v147;
      v38 = *(float32x2_t *)&v36[2 * v34];
      v39 = v34 + 1;
      if (v34 + 1 >= *v147)
        v40 = *v147;
      else
        v40 = 0;
      v142 = v40;
      v143 = v34;
      v34 = v39 - v40;
      DWORD2(v158) = v39 - v40;
      v41 = &v36[2 * (v39 - v40)];
      v42 = v33 - 2;
      if (v33 >= 2)
      {
        v43 = 1;
        v44 = &v36[2 * v34];
        v45 = v34;
        do
        {
          v47 = *v44;
          v46 = v44[1];
          if (v43 == 1)
          {
            *(float *)&v162 = *v44;
            *((float *)&v161 + 2) = v47;
            v48 = (float *)&v161 + 3;
            *((float *)&v162 + 1) = v46;
          }
          else
          {
            v49 = (float *)&v161 + 2;
            if (v47 < *((float *)&v161 + 2) || (v49 = (float *)&v162, v47 > *(float *)&v162))
              *v49 = v47;
            v48 = (float *)&v161 + 3;
            if (v46 >= *((float *)&v161 + 3))
            {
              v48 = (float *)&v162 + 1;
              if (v46 <= *((float *)&v162 + 1))
                goto LABEL_26;
            }
          }
          *v48 = v46;
LABEL_26:
          v50 = v45 + 1;
          v44 += 2;
          if (v45 + 1 < v37)
            ++v45;
          else
            v45 = 0;
          if (v50 >= v37)
            v44 = v36;
          ++v43;
        }
        while (v33 != v43);
      }
      _Q0 = vcvtq_f64_f32(v38);
      v52 = vsubq_f64(v29, _Q0);
      v53 = vmlsq_f64(v28, _Q0, _Q0);
      _D2 = _Q0.f64[1];
      __asm { FMLS            D14, D2, V0.D[0] }
      v60 = (int)v14 + 1 >= (int)v32 ? v32 : 0;
      v61 = v42 + v34 >= v37 ? v37 : 0;
      _Q0 = vcvtq_f64_f32(*(float32x2_t *)&v36[2 * (v42 + v34 - v61)]);
      v63 = vsubq_f64(v52, _Q0);
      v64 = vmlsq_f64(v53, _Q0, _Q0);
      v159 = v63;
      v160 = v64;
      _D1 = _Q0.f64[1];
      __asm { FMLS            D14, D1, V0.D[0] }
      *(double *)&v161 = _D14;
      HIDWORD(v158) = v33 - 2;
      if (v33 - 1 >= 2)
        break;
LABEL_54:
      v74 = (v14 + 1 - v60);
      if ((int)v31 <= 0)
        v75 = v32;
      else
        v75 = 0;
      v76 = v31 + v75 - 1;
      v21 -= 2;
      v148 = v42;
      v77 = v32;
      v149 = v63;
      v152 = v64;
      ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
      v78 = v157;
      v79 = v155;
      v80 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
      v81 = v78;
      LODWORD(v31) = v76;
      ATRAngleOfLine(v79, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v74, v35 - 2, v81);
      v83 = v82;
      v84 = *(_QWORD *)(a1 + 144);
      v14 = v74;
      v85 = *(float *)(v84 + 4 * (int)v74);
      v86 = *(float *)(v84 + 4 * v76);
      v87 = straightLineDistanceDeltaToleranceAtAngle(v82);
      v88 = v148;
      v29 = v149;
      v28 = v152;
      if (v80 > v87)
      {
        v32 = v77;
        v33 = v148;
        if (v35 > 0x34)
          continue;
      }
      v145 = v34;
      LODWORD(a2) = v136;
      if (v35 >= 0x35)
      {
        v140 = v21;
        v137 = v14;
        v89 = (int)v14;
        v90 = (float)(v85 - v86) - rintf(v85 - v86);
        v91 = v143 - v142 + 1;
        v92 = 1;
        do
        {
          v93 = v31;
          v27 = v87;
          v23 = v83;
          v19 = v80;
          v94 = *((_QWORD *)v147 + 1);
          v95 = *v147;
          HIDWORD(v158) = v88 + v92;
          if (v88 + v91 < v95)
            v95 = 0;
          v96 = *(float32x2_t *)(v94 + 8 * (v88 + v91 - v95));
          v97 = v90;
          v98 = vcvtq_f64_f32(v96);
          v99 = vaddq_f64(v29, v98);
          v100 = vmlaq_f64(v28, v98, v98);
          v159 = v99;
          v160 = v100;
          _D14 = vmlad_n_f64(_D14, v98.f64[1], v98.f64[0]);
          *(double *)&v161 = _D14;
          v101 = (uint64_t *)&v161 + 1;
          if (v96.f32[0] < *((float *)&v161 + 2) || (v101 = &v162, v96.f32[0] > *(float *)&v162))
            *(_DWORD *)v101 = v96.i32[0];
          v150 = v99;
          v153 = v100;
          v102 = (char *)&v161 + 12;
          if (v96.f32[1] < *((float *)&v161 + 3) || (v102 = (char *)&v162 + 4, v96.f32[1] > *((float *)&v162 + 1)))
            *(_DWORD *)v102 = v96.i32[1];
          if ((int)v31 + 1 >= v141)
            v103 = v141;
          else
            v103 = 0;
          v104 = (v31 + 1 - v103);
          ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
          v105 = v157;
          v106 = v155;
          v80 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
          v107 = v105;
          v31 = v104;
          ATRAngleOfLine(v106, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v137, v140 + v92, v107);
          v83 = v108;
          v109 = *(float *)(*(_QWORD *)(a1 + 144) + 4 * v89) - *(float *)(*(_QWORD *)(a1 + 144) + 4 * (int)v104);
          v90 = v109 - rintf(v109);
          v87 = straightLineDistanceDeltaToleranceAtAngle(v83);
          ++v92;
          ++v91;
          v29 = v150;
          v28 = v153;
          v88 = v148;
        }
        while (v80 <= v87);
        v138 = v93;
        v144 = (int)v104;
        v110 = v140 + v92;
        v111 = v148 + v92;
        for (LODWORD(a2) = v137; ; LODWORD(a2) = v122)
        {
          v112 = v145 - 1;
          if (v145 <= 0)
            v112 = *v147 + v145 - 1;
          v113 = *((_QWORD *)v147 + 1);
          *((_QWORD *)&v158 + 1) = __PAIR64__(v111, v112);
          v145 = v112;
          v114 = *(float32x2_t *)(v113 + 8 * v112);
          v115 = vcvtq_f64_f32(v114);
          v116 = vaddq_f64(v29, v115);
          v117 = vmlaq_f64(v28, v115, v115);
          v159 = v116;
          v160 = v117;
          _D14 = vmlad_n_f64(_D14, v115.f64[1], v115.f64[0]);
          *(double *)&v161 = _D14;
          v118 = (uint64_t *)&v161 + 1;
          if (v114.f32[0] < *((float *)&v161 + 2) || (v118 = &v162, v114.f32[0] > *(float *)&v162))
            *(_DWORD *)v118 = v114.i32[0];
          v119 = v31;
          v151 = v116;
          v154 = v117;
          v139 = v97;
          v120 = (char *)&v161 + 12;
          if (v114.f32[1] < *((float *)&v161 + 3) || (v120 = (char *)&v162 + 4, v114.f32[1] > *((float *)&v162 + 1)))
            *(_DWORD *)v120 = v114.i32[1];
          v121 = (int)a2 <= 0 ? v141 : 0;
          v122 = (a2 + v121 - 1);
          ATRLinearRegression((uint64_t)&v158, &v157, &v156, &v155);
          v123 = v157;
          v124 = v155;
          v125 = ATRMaxDistanceFromLine(&v158, v157, v156, v155);
          ATRAngleOfLine(v124, **(unsigned int **)(a1 + 128), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), v122, v110, v123);
          v127 = v126;
          v128 = *(_QWORD *)(a1 + 144);
          v129 = *(float *)(v128 + 4 * (int)v122);
          v130 = *(float *)(v128 + 4 * v144);
          v131 = straightLineDistanceDeltaToleranceAtAngle(v126);
          v29 = v151;
          v28 = v154;
          if (v125 > v131)
            break;
          v31 = v119;
          ++v111;
          v110 = (v110 + 1);
          v138 = v119;
          v97 = (float)(v129 - v130) - rintf(v129 - v130);
          v19 = v125;
          v23 = v127;
          v27 = v131;
        }
      }
      a4 = v134;
      LODWORD(v14) = v138;
      v25 = v139;
      goto LABEL_88;
    }
    v67 = 2;
    v68 = v34;
    while (1)
    {
      v70 = *v41;
      v69 = v41[1];
      if (v67 == 2)
      {
        *(float *)&v162 = *v41;
        *((float *)&v161 + 2) = v70;
        v71 = (float *)&v161 + 3;
        *((float *)&v162 + 1) = v69;
      }
      else
      {
        v72 = (float *)&v161 + 2;
        if (v70 < *((float *)&v161 + 2) || (v72 = (float *)&v162, v70 > *(float *)&v162))
          *v72 = v70;
        v71 = (float *)&v161 + 3;
        if (v69 >= *((float *)&v161 + 3))
        {
          v71 = (float *)&v162 + 1;
          if (v69 <= *((float *)&v162 + 1))
            goto LABEL_48;
        }
      }
      *v71 = v69;
LABEL_48:
      v73 = v68 + 1;
      v41 += 2;
      if (v68 + 1 < v37)
        ++v68;
      else
        v68 = 0;
      if (v73 >= v37)
        v41 = v36;
      if (v33 == ++v67)
        goto LABEL_54;
    }
  }
LABEL_88:
  if (v19 <= v27)
  {
    if (*(_BYTE *)(a1 + 17))
      printf("   *****   line from %d to %d angle %.2f dist %.2f angle sum %.2f\n", a2, v14, v23, v19, v25);
    result = (uint64_t)appendInterestingPointAtIndex(a2, 2, a4);
    if (result && (result = (uint64_t)appendInterestingPointAtIndex(v14, 4, a4)) != 0)
    {
      v132 = 0;
      *a5 = v14;
      result = 1;
    }
    else
    {
      v132 = 1;
    }
  }
  else
  {
    v132 = 0;
    result = 0;
  }
  *a6 = v132;
  return result;
}

uint64_t printIPIndex(uint64_t a1, int a2)
{
  int *v2;

  v2 = (int *)(a1 + 8 * a2);
  printf("  %d ", a2);
  printIndexAndMask(*v2, v2[1]);
  return putchar(10);
}

uint64_t printIndexAndMask(int a1, char a2)
{
  uint64_t result;

  result = printf("%3d ", a1);
  if ((a2 & 2) != 0)
  {
    result = printf("sb");
    if ((a2 & 4) == 0)
    {
      if ((a2 & 8) != 0)
      {
LABEL_18:
        putchar(124);
LABEL_19:
        result = printf("cb");
        if ((a2 & 0x10) != 0)
          goto LABEL_20;
        goto LABEL_12;
      }
LABEL_11:
      if ((a2 & 0x10) != 0)
      {
LABEL_20:
        putchar(124);
LABEL_21:
        result = printf("ce");
        if ((a2 & 1) != 0)
          goto LABEL_22;
        goto LABEL_13;
      }
LABEL_12:
      if ((a2 & 1) != 0)
      {
LABEL_22:
        putchar(124);
LABEL_23:
        result = printf("co");
        if ((a2 & 0x20) != 0)
          goto LABEL_24;
        goto LABEL_14;
      }
LABEL_13:
      if ((a2 & 0x20) != 0)
      {
LABEL_24:
        putchar(124);
LABEL_25:
        result = putchar(105);
        if ((a2 & 0x40) == 0)
          return result;
LABEL_26:
        putchar(124);
        return printf("ph");
      }
LABEL_14:
      if ((a2 & 0x40) == 0)
        return result;
      goto LABEL_26;
    }
    putchar(124);
LABEL_17:
    result = printf("se");
    if ((a2 & 8) != 0)
      goto LABEL_18;
    goto LABEL_11;
  }
  if ((a2 & 4) != 0)
    goto LABEL_17;
  if ((a2 & 8) != 0)
    goto LABEL_19;
  if ((a2 & 0x10) != 0)
    goto LABEL_21;
  if ((a2 & 1) != 0)
    goto LABEL_23;
  if ((a2 & 0x20) != 0)
    goto LABEL_25;
  if ((a2 & 0x40) != 0)
    return printf("ph");
  return result;
}

uint64_t pairInsertError(uint64_t a1, int *a2, int a3, int a4, int *a5, int a6, int a7, uint64_t a8, const char *a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  float *v39;
  float v40;
  float v41;
  float *v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  putchar(10);
  printf("***** %s *****\n", a9);
  puts("  inserting:");
  printf("    ");
  printIndexAndMask(*a2, a2[1]);
  printf(" (insertion index %d merge: %d)\n", a3, a4);
  printf("    ");
  printIndexAndMask(*a5, a5[1]);
  printf(" (insertion index %d merge: %d)\n", a6, a7);
  puts("  into:");
  v17 = *(int *)(a8 + 12);
  v18 = a3 - 1;
  if ((int)v17 >= a3)
  {
    if (a3 <= 0)
    {
      LODWORD(v19) = v17 + v18;
      if (v17 + v18 < 0)
      {
        LODWORD(v19) = a3 - 1;
        if ((_DWORD)v17)
          v19 = (v17 + v18) % v17 + v17;
      }
    }
    else
    {
      LODWORD(v19) = a3 - 1;
    }
  }
  else
  {
    LODWORD(v19) = v18 - v17;
    if (v18 - v17 >= v17)
    {
      LODWORD(v19) = a3 - 1;
      if ((_DWORD)v17)
        v19 = (v18 - v17) % v17;
    }
  }
  v20 = a6 + 2;
  v21 = a6 > -3;
  v22 = v17 + a6 + 2;
  if (v22 < 0)
  {
    v23 = a6 + 2;
  }
  else
  {
    v21 = 1;
    v23 = v17 + v20;
  }
  if (a6 <= -3)
    v24 = v23;
  else
    v24 = a6 + 2;
  if (v20 - v17 >= v17)
    v25 = a6 + 2;
  else
    v25 = v20 - v17;
  if ((_DWORD)v17)
    v26 = v20 - v17 < v17;
  else
    v26 = 1;
  if ((_DWORD)v17)
    v27 = v21;
  else
    v27 = 1;
  v28 = v22 % v17;
  LODWORD(v29) = v19;
  do
  {
    printIPIndex(*(_QWORD *)(a1 + 208), v29);
    v30 = v29 + 1;
    v31 = (int)v29 + 1;
    if ((int)v29 + 1 >= (int)v17)
    {
      v34 = v30 - v17;
      if (v31 - v17 >= v17)
        LODWORD(v29) = v29 + 1;
      else
        LODWORD(v29) = v31 - v17;
      if (v31 - v17 >= v17 && (_DWORD)v17 != 0)
        v29 = v34 % v17;
    }
    else
    {
      v32 = (int)v29 <= -2;
      LODWORD(v29) = v29 + 1;
      if (v32)
      {
        v33 = v30 + v17;
        LODWORD(v29) = v31 + v17 < 0 != __OFADD__(v31, v17) ? v31 : (int)v31 + (int)v17;
        if (v33 < 0)
          v29 = v33 % v17 + v17;
      }
    }
    if (v20 >= (int)v17)
    {
      v36 = v25;
      if (!v26)
        v36 = (v20 - v17) % v17;
    }
    else
    {
      v36 = v24;
      if ((v27 & 1) == 0)
        v36 = v28 + v17;
    }
  }
  while ((_DWORD)v29 != v36);
  v37 = *(unsigned int **)(a1 + 128);
  v38 = *v37;
  v39 = (float *)*((_QWORD *)v37 + 1);
  v40 = *v39;
  v41 = v39[1];
  if ((int)v38 >= 1)
  {
    v42 = v39 + 1;
    v43 = v38;
    v44 = v41;
    v45 = v40;
    while (1)
    {
      v47 = *(v42 - 1);
      v46 = *v42;
      v48 = v47 > v40 ? *(v42 - 1) : v40;
      if (v47 >= v45)
        v40 = v48;
      else
        v45 = *(v42 - 1);
      if (v46 < v44)
        break;
      if (v46 <= v41)
        goto LABEL_59;
LABEL_60:
      v42 += 2;
      v41 = v46;
      if (!--v43)
        return printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v38, v45, v40, v44, v46);
    }
    v44 = *v42;
LABEL_59:
    v46 = v41;
    goto LABEL_60;
  }
  v45 = *v39;
  v44 = v39[1];
  v46 = v44;
  return printf("  polygon (%d points) from x [%.2f .. %.2f] y[%.2f .. %.2f]\n", v38, v45, v40, v44, v46);
}

char *newOpenEnd(int *a1)
{
  int v2;
  int v3;
  char *v4;
  char *v5;
  char *result;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 < v3)
  {
    v4 = (char *)*((_QWORD *)a1 + 1);
LABEL_5:
    result = &v4[8 * v2];
    *a1 = v2 + 1;
    return result;
  }
  v5 = (char *)malloc_type_malloc(8 * (v3 + 100), 0x100004090D0E795uLL);
  if (v5)
  {
    v4 = v5;
    memmove(v5, *((const void **)a1 + 1), 8 * a1[1]);
    a1[1] += 100;
    free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v4;
    v2 = *a1;
    goto LABEL_5;
  }
  printf(" ***** %s in autoTrace\n", "could not extend extract open ends list");
  return 0;
}

void *CGPathCreateWithThresholdedImageDebug(CGImage *a1, int a2, uint64_t a3, uint64_t a4, int *a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  int *v16;

  if (CGPathCreateWithThresholdedImageDebug_debug_predicate != -1)
    dispatch_once(&CGPathCreateWithThresholdedImageDebug_debug_predicate, &__block_literal_global_4151);
  if (debug_auto_trace)
  {
    v14 = a3;
    v15 = a4;
    v16 = a5;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  return createPath(a1, a2, v14, v15, v16, a6, a7);
}

void url_error(char a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Length;
  CFIndex v11;
  __CFData *Mutable;
  __CFData *v13;
  char *MutableBytePtr;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (theString)
  {
    Length = CFStringGetLength(theString);
    v11 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    Mutable = CFDataCreateMutable(0, v11);
    if (Mutable)
    {
      v13 = Mutable;
      CFDataSetLength(Mutable, v11);
      MutableBytePtr = (char *)CFDataGetMutableBytePtr(v13);
      if (CFStringGetCString(theString, MutableBytePtr, v11, 0x8000100u))
      {
        CFDataGetBytePtr(v13);
        CGPostError((uint64_t)"unrecognized %s: %s.", v15, v16, v17, v18, v19, v20, v21, a1);
        CFRelease(v13);
        return;
      }
      CFRelease(v13);
    }
  }
  CGPostError((uint64_t)"missing or invalid %s.", (uint64_t)theString, a3, a4, a5, a6, a7, a8, a1);
}

BOOL expand_parameters(__CFDictionary *a1, const __CFString *a2)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFArray *v9;
  _BOOL8 v10;
  const __CFArray *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFIndex Length;
  CFStringRef v15;
  CFStringRef v16;
  void *Value;
  CFIndex v18;
  CFIndex v19;
  char *v20;
  CFNumberRef v21;
  double v23;
  char *v24;
  uint64_t valuePtr;
  CFRange v26;

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a2, CFSTR(";"));
  if (!ArrayBySeparatingStrings)
    return 0;
  v4 = ArrayBySeparatingStrings;
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count)
  {
    v6 = Count;
    if (Count >= 1)
    {
      for (i = 0; v6 != i; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, i);
        v9 = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, CFSTR("="));
        v10 = v9 != 0;
        if (!v9)
          goto LABEL_34;
        v11 = v9;
        if (CFArrayGetCount(v9) != 2)
          goto LABEL_32;
        v12 = (const __CFString *)CFArrayGetValueAtIndex(v11, 0);
        v13 = (const __CFString *)CFArrayGetValueAtIndex(v11, 1);
        if (CFEqual(v12, CFSTR("postscript-name")))
        {
          CFDictionarySetValue(a1, CFSTR("postscript-name"), v13);
        }
        else
        {
          if (!CFStringHasPrefix(v12, CFSTR("var:")))
          {
LABEL_32:
            CFRelease(v11);
            goto LABEL_33;
          }
          Length = CFStringGetLength(v12);
          if (Length != 4)
          {
            v26.location = 4;
            v26.length = Length - 4;
            v15 = CFStringCreateWithSubstring(0, v12, v26);
            if (v15)
            {
              v16 = v15;
              Value = (void *)CFDictionaryGetValue(a1, CFSTR("variations"));
              if (!Value)
              {
                Value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionarySetValue(a1, CFSTR("variations"), Value);
                if (Value)
                  CFRelease(Value);
              }
              if (!v13)
                goto LABEL_29;
              v18 = CFStringGetLength(v13);
              v19 = CFStringGetMaximumSizeForEncoding(v18, 0x8000100u) + 1;
              v20 = (char *)malloc_type_malloc(v19, 0x2062DE7BuLL);
              if (!CFStringGetCString(v13, v20, v19, 0x8000100u))
                goto LABEL_23;
              v24 = 0;
              valuePtr = strtol_l(v20, &v24, 10, 0);
              if (v24 == v20 || *v24)
              {
                v23 = strtod_l(v20, &v24, 0);
                if (v24 == v20 || *v24)
                {
LABEL_23:
                  free(v20);
LABEL_29:
                  CFRelease(v16);
                  goto LABEL_9;
                }
                free(v20);
                v21 = CFNumberCreate(0, kCFNumberDoubleType, &v23);
              }
              else
              {
                free(v20);
                v21 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
              }
              if (v21)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)Value, v16, v21);
                CFRelease(v21);
              }
              goto LABEL_29;
            }
          }
        }
LABEL_9:
        CFRelease(v11);
      }
    }
    v10 = 1;
  }
  else
  {
LABEL_33:
    v10 = 0;
  }
LABEL_34:
  CFRelease(v4);
  return v10;
}

CFStringRef color_transform_base_copy_format_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CGColorTransformBase %p>"), a1);
}

CFStringRef color_transform_base_copy_debug_description(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CGColorTransformBase %p>"), a1);
}

void CIDFontType0::~CIDFontType0(CIDFontType0 *this)
{
  *(_QWORD *)this = off_1E1627E88;
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 16));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  PDFFont::~PDFFont(this);
}

{
  *(_QWORD *)this = off_1E1627E88;
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 16));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  PDFFont::~PDFFont(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t CIDFontType0::get_format(CIDFontType0 *this)
{
  return 4;
}

void CIDFontType0::add_glyphs_to_layout(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned int v18;
  __int16 v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  char *v25;
  _QWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p;
  _BYTE *v30;

  v3 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v3)
  {
    v7 = v3 >> 1;
    std::vector<unsigned short>::vector(&__p, v3 >> 1);
    if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3 && v30 != __p)
    {
      v27 = v7;
      v28 = a2;
      if (CGFontGetCIDsForGlyphs(a1[2], *(unsigned __int16 **)a3, v7, __p))
      {
        if (v7 <= 1)
          v8 = 1;
        else
          v8 = v7;
LABEL_15:
        v15 = 0;
        v16 = a1 + 15;
        v26 = a1;
        v17 = a1 + 16;
        while (v15 < (v30 - (_BYTE *)__p) >> 1 && v15 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1)
        {
          v18 = *((unsigned __int16 *)__p + v15);
          v19 = *(_WORD *)(*(_QWORD *)a3 + 2 * v15);
          v20 = v17;
          v21 = v17;
          v22 = *v17;
          if (*v17)
          {
            while (1)
            {
              while (1)
              {
                v21 = (uint64_t **)v22;
                v23 = *((unsigned __int16 *)v22 + 13);
                if (v18 >= v23)
                  break;
                v22 = *v21;
                v20 = v21;
                if (!*v21)
                  goto LABEL_25;
              }
              if (v23 >= v18)
                break;
              v22 = v21[1];
              if (!v22)
              {
                v20 = v21 + 1;
                goto LABEL_25;
              }
            }
          }
          else
          {
LABEL_25:
            v24 = (uint64_t *)operator new(0x20uLL);
            *((_WORD *)v24 + 13) = v18;
            *((_WORD *)v24 + 14) = v19;
            std::__tree<unsigned long>::__insert_node_at(v16, (uint64_t)v21, v20, v24);
          }
          if (++v15 == v8)
          {
            if (v30 == __p)
              break;
            v25 = (char *)(v26 + 8);
            if (*((char *)v26 + 87) < 0)
              v25 = *(char **)v25;
            layout_append_data(v28, v25, 2, __p, v27);
            if (__p)
            {
              v30 = __p;
              operator delete(__p);
            }
            return;
          }
        }
      }
      else
      {
        v9 = *(__int16 **)a3;
        v10 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
        v11 = __p;
        v12 = (v30 - (_BYTE *)__p) >> 1;
        if (v7 <= 1)
          v8 = 1;
        else
          v8 = v7;
        v13 = v8;
        while (v10 && v12)
        {
          v14 = *v9++;
          *v11++ = v14;
          --v12;
          --v10;
          if (!--v13)
            goto LABEL_15;
        }
      }
    }
    __break(1u);
  }
}

void sub_184B7FD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void CIDFontType0::emit_references(CIDFontType0 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if (*((_QWORD *)this + 17))
  {
    v8 = (_QWORD *)((char *)this + 64);
    if (*((char *)this + 87) < 0)
      v8 = (_QWORD *)*v8;
    PDFDocumentPrintNameReferencePair(**((_QWORD **)this + 1), (uint64_t)"/%N %R", (uint64_t)v8, *((_QWORD *)this + 14), a5, a6, a7, a8);
  }
}

void CIDFontType0::emit_definitions(CIDFontType0 *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CIDFontType0 *v73;
  unsigned int v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t *v77;
  unsigned int v78;
  _WORD *v79;
  CIDFontType0 *v80;
  CIDFontType0 *v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *font_info;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  char *v191;
  char *v192;
  unsigned __int16 v193;
  int v194;
  char *v195;
  char *v196;
  __CFString *v197;
  __CFString *v198;
  uint64_t v199;
  char v200;
  unsigned __int16 v201;
  BOOL v202;
  uint64_t *info;
  uint64_t **data;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __CFString *v223;
  __CFString *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  const __CFData *embedded_font;
  CFIndex Length;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  const UInt8 *BytePtr;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  BOOL v284;
  __CFString *v285[3];
  __CFString *v286;
  uint64_t *v287;
  uint64_t v288;
  CGGlyph glyphs;
  unsigned __int16 v290;
  int advances;

  if (*((_QWORD *)this + 17))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 1);
    v3 = *v2;
    v4 = PDFXRefTableAddObject(*(_QWORD **)(*v2 + 464));
    PDFDocumentBeginObject(v3, *((_QWORD *)this + 14), v5, v6, v7, v8, v9, v10);
    PDFDocumentPrintf(v3, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v266);
    PDFDocumentPrintf(v3, (uint64_t)"/Type /Font", v17, v18, v19, v20, v21, v22, v267);
    PDFDocumentPrintf(v3, (uint64_t)"/Subtype /Type0", v23, v24, v25, v26, v27, v28, v268);
    PDFDocumentPrintf(v3, (uint64_t)"/Encoding /Identity-H", v29, v30, v31, v32, v33, v34, v269);
    PDFDocumentPrintReference(v3, (uint64_t)"/DescendantFonts [%R]", v4, v35, v36, v37, v38, v39);
    v46 = (uint64_t *)((char *)this + 88);
    v47 = (char *)this + 88;
    if (*((char *)this + 111) < 0)
      v47 = (char *)*v46;
    PDFDocumentPrintf(v3, (uint64_t)"/BaseFont /%N", v40, v41, v42, v43, v44, v45, (uint64_t)v47);
    v284 = 0;
    v54 = 0;
    if (GetSubsetRegistryOrderingSupplement(*((CGFont **)this + 2), 0, 0, 0, &v284) && v284)
    {
      v54 = PDFXRefTableAddObject(*(_QWORD **)(v3 + 464));
      PDFDocumentPrintReference(v3, (uint64_t)"/ToUnicode %R", v54, v55, v56, v57, v58, v59);
    }
    PDFDocumentPrintf(v3, (uint64_t)">>", v48, v49, v50, v51, v52, v53, v270);
    PDFDocumentEndObject(v3, v60, v61, v62, v63, v64, v65, v66);
    v283 = (uint64_t *)((char *)this + 88);
    if (v54)
    {
      v287 = 0;
      v288 = 0;
      v286 = (__CFString *)&v287;
      v73 = (CIDFontType0 *)*((_QWORD *)this + 15);
      if (v73 != (CIDFontType0 *)((char *)this + 128))
      {
        do
        {
          v74 = *((unsigned __int16 *)v73 + 14);
          v75 = &v287;
          v76 = &v287;
          if (v287)
          {
            v77 = v287;
            while (1)
            {
              while (1)
              {
                v76 = (uint64_t **)v77;
                v78 = *((unsigned __int16 *)v77 + 13);
                if (v74 >= v78)
                  break;
                v77 = *v76;
                v75 = v76;
                if (!*v76)
                  goto LABEL_17;
              }
              if (v78 >= v74)
                break;
              v77 = v76[1];
              if (!v77)
              {
                v75 = v76 + 1;
                goto LABEL_17;
              }
            }
          }
          else
          {
LABEL_17:
            v79 = operator new(0x20uLL);
            v79[13] = v74;
            *(_QWORD *)v79 = 0;
            *((_QWORD *)v79 + 1) = 0;
            *((_QWORD *)v79 + 2) = v76;
            *v75 = (uint64_t *)v79;
            if (v286->isa)
            {
              v286 = (__CFString *)v286->isa;
              v79 = *v75;
            }
            std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v287, (uint64_t *)v79);
            ++v288;
          }
          v80 = (CIDFontType0 *)*((_QWORD *)v73 + 1);
          if (v80)
          {
            do
            {
              v81 = v80;
              v80 = *(CIDFontType0 **)v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              v81 = (CIDFontType0 *)*((_QWORD *)v73 + 2);
              v82 = *(_QWORD *)v81 == (_QWORD)v73;
              v73 = v81;
            }
            while (!v82);
          }
          v73 = v81;
        }
        while (v81 != (CIDFontType0 *)((char *)this + 128));
      }
      v285[0] = (__CFString *)this;
      ToUnicode::write<std::set<unsigned short>>((uint64_t)v285, v54, &v286);
      std::__tree<unsigned long>::destroy(v287);
      v46 = (uint64_t *)((char *)this + 88);
    }
    v83 = **((_QWORD **)this + 1);
    PDFDocumentBeginObject(v83, v4, v67, v68, v69, v70, v71, v72);
    PDFDocumentPrintf(v83, (uint64_t)"<<", v84, v85, v86, v87, v88, v89, v271);
    PDFDocumentPrintf(v83, (uint64_t)"/Type /Font", v90, v91, v92, v93, v94, v95, v272);
    PDFDocumentPrintf(v83, (uint64_t)"/Subtype /CIDFontType0", v96, v97, v98, v99, v100, v101, v273);
    v108 = (uint64_t)v46;
    if (*((char *)this + 111) < 0)
      v108 = *v46;
    PDFDocumentPrintf(v83, (uint64_t)"/BaseFont /%N", v102, v103, v104, v105, v106, v107, v108);
    advances = 0;
    v286 = 0;
    v285[0] = 0;
    if (GetSubsetRegistryOrderingSupplement(*((CGFont **)this + 2), (CFTypeRef *)&v286, (CFTypeRef *)v285, &advances, 0))
    {
      v115 = **((_QWORD **)this + 1);
      PDFDocumentPrintf(v115, (uint64_t)"/CIDSystemInfo <<", v109, v110, v111, v112, v113, v114, v274);
      PDFDocumentPrintf(v115, (uint64_t)"/Registry %T", v116, v117, v118, v119, v120, v121, (uint64_t)v286);
      PDFDocumentPrintf(v115, (uint64_t)"/Ordering %T", v122, v123, v124, v125, v126, v127, (uint64_t)v285[0]);
      PDFDocumentPrintf(v115, (uint64_t)"/Supplement %d", v128, v129, v130, v131, v132, v133, advances);
      PDFDocumentPrintf(v115, (uint64_t)">>", v134, v135, v136, v137, v138, v139, v275);
    }
    v140 = PDFXRefTableAddObject(*(_QWORD **)(v83 + 464));
    PDFDocumentPrintReference(v83, (uint64_t)"/W %R", v140, v141, v142, v143, v144, v145);
    PDFDocumentPrintf(v83, (uint64_t)"/DW %d", v146, v147, v148, v149, v150, v151, 1000);
    FontDescriptor::FontDescriptor((FontDescriptor *)v285, this, 0);
    PDFDocumentPrintReference(v83, (uint64_t)"/FontDescriptor %R", (uint64_t)v285[1], v152, v153, v154, v155, v156);
    PDFDocumentPrintf(v83, (uint64_t)">>", v157, v158, v159, v160, v161, v162, v276);
    PDFDocumentEndObject(v83, v163, v164, v165, v166, v167, v168, v169);
    v170 = **((_QWORD **)this + 1);
    PDFDocumentBeginObject(v170, v140, v171, v172, v173, v174, v175, v176);
    PDFDocumentPrintf(v170, (uint64_t)"[", v177, v178, v179, v180, v181, v182, v277);
    v287 = 0;
    v288 = 0;
    v286 = (__CFString *)&v287;
    font_info = (int *)get_font_info(*((_QWORD **)this + 2));
    v282 = v83;
    if (font_info)
      v190 = (float)font_info[2];
    else
      v190 = 0.0;
    v191 = (char *)*((_QWORD *)this + 15);
    v192 = (char *)this + 128;
    if (v191 != (char *)this + 128)
    {
      do
      {
        advances = 0;
        v290 = *((_WORD *)v191 + 13);
        v193 = v290;
        glyphs = *((_WORD *)v191 + 14);
        CGFontGetGlyphAdvances(*((CGFontRef *)this + 2), &glyphs, 1uLL, &advances);
        v194 = advances;
        *((_DWORD *)std::__tree<std::__value_type<unsigned short,int>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,int>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)&v286, v193, &v290)+ 8) = (int)((float)((float)(1000 * v194) / v190) + 0.5);
        v195 = (char *)*((_QWORD *)v191 + 1);
        if (v195)
        {
          do
          {
            v196 = v195;
            v195 = *(char **)v195;
          }
          while (v195);
        }
        else
        {
          do
          {
            v196 = (char *)*((_QWORD *)v191 + 2);
            v82 = *(_QWORD *)v196 == (_QWORD)v191;
            v191 = v196;
          }
          while (!v82);
        }
        v191 = v196;
      }
      while (v196 != v192);
    }
    v197 = v286;
    while (v197 != (__CFString *)&v287)
    {
      v198 = v197;
      v199 = WORD2(v197->length);
      v200 = 1;
      v201 = WORD2(v197->length);
      while (WORD2(v197->length) == v201)
      {
        v202 = LODWORD(v197[1].isa) == LODWORD(v198[1].isa);
        info = (uint64_t *)v197->info;
        if (info)
        {
          do
          {
            data = (uint64_t **)info;
            info = (uint64_t *)*info;
          }
          while (info);
        }
        else
        {
          do
          {
            data = (uint64_t **)v197->data;
            v82 = *data == (uint64_t *)v197;
            v197 = (__CFString *)data;
          }
          while (!v82);
        }
        v200 &= v202;
        ++v201;
        v197 = (__CFString *)data;
        if (data == &v287)
        {
          v197 = (__CFString *)&v287;
          break;
        }
      }
      if ((v200 & 1) != 0)
      {
        if (LODWORD(v198[1].isa) != 1000)
        {
          PDFDocumentPrintf(v170, (uint64_t)"%d", v184, v185, v186, v187, v188, v189, v199);
          PDFDocumentPrintf(v170, (uint64_t)"%d", v205, v206, v207, v208, v209, v210, v201 - 1);
          PDFDocumentPrintf(v170, (uint64_t)"%d", v211, v212, v213, v214, v215, v216, LODWORD(v198[1].isa));
        }
      }
      else
      {
        PDFDocumentPrintf(v170, (uint64_t)"%d [", v184, v185, v186, v187, v188, v189, v199);
        if (v198 != v197)
        {
          do
          {
            PDFDocumentPrintf(v170, (uint64_t)"%d", v217, v218, v219, v220, v221, v222, LODWORD(v198[1].isa));
            v223 = (__CFString *)v198->info;
            if (v223)
            {
              do
              {
                v224 = v223;
                v223 = (__CFString *)v223->isa;
              }
              while (v223);
            }
            else
            {
              do
              {
                v224 = (__CFString *)v198->data;
                v82 = v224->isa == v198;
                v198 = v224;
              }
              while (!v82);
            }
            v198 = v224;
          }
          while (v224 != v197);
        }
        PDFDocumentPrintf(v170, (uint64_t)"]", v217, v218, v219, v220, v221, v222, v279);
      }
    }
    PDFDocumentPrintf(v170, (uint64_t)"]", v184, v185, v186, v187, v188, v189, v278);
    PDFDocumentEndObject(v170, v225, v226, v227, v228, v229, v230, v231);
    std::__tree<unsigned long>::destroy(v287);
    v232 = PDFXRefTableAddObject(*(_QWORD **)(v282 + 464));
    FontDescriptor::emit_definition(v285, (uint64_t)v283, v232, v233, v234, v235, v236, v237);
    v238 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1010040C7309667uLL);
    *(_DWORD *)v238 = 1;
    v239 = (char *)*((_QWORD *)this + 15);
    if (v239 != v192)
    {
      do
      {
        CGFontIndexSetAddIndex(v238, *((unsigned __int16 *)v239 + 14));
        v240 = (char *)*((_QWORD *)v239 + 1);
        if (v240)
        {
          do
          {
            v241 = v240;
            v240 = *(char **)v240;
          }
          while (v240);
        }
        else
        {
          do
          {
            v241 = (char *)*((_QWORD *)v239 + 2);
            v82 = *(_QWORD *)v241 == (_QWORD)v239;
            v239 = v241;
          }
          while (!v82);
        }
        v239 = v241;
      }
      while (v241 != v192);
    }
    embedded_font = (const __CFData *)PDFFont::create_embedded_font(this, v283, (uint64_t)v238, 0, 0);
    CGFontIndexSetRelease((uint64_t)v238);
    if (embedded_font)
    {
      Length = CFDataGetLength(embedded_font);
      if ((unint64_t)(Length - 0x80000000) >= 0xFFFFFFFF80000001)
      {
        v244 = Length;
        v245 = **((_QWORD **)this + 1);
        v246 = PDFStreamCreateWithObjectNumber(v245, v232);
        PDFDocumentBeginObject(*v246, v246[1], v247, v248, v249, v250, v251, v252);
        PDFDocumentPrintf(*v246, (uint64_t)"<<", v253, v254, v255, v256, v257, v258, v280);
        PDFDocumentPrintf(v245, (uint64_t)"/Subtype /CIDFontType0C", v259, v260, v261, v262, v263, v264, v281);
        PDFStreamBeginData((CGDataConsumerRef)v246);
        BytePtr = CFDataGetBytePtr(embedded_font);
        CGDataConsumerPutBytes(v246[3], (uint64_t)BytePtr, v244);
        PDFStreamEndData(v246);
        PDFStreamEnd((CFDataRef *)v246);
        PDFStreamRelease((uint64_t)v246);
      }
      CFRelease(embedded_font);
    }
  }
}

void sub_184B8058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<unsigned long>::destroy(a18);
  _Unwind_Resume(a1);
}

BOOL GetSubsetRegistryOrderingSupplement(CGFont *a1, CFTypeRef *a2, CFTypeRef *a3, int *a4, BOOL *a5)
{
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  _BOOL8 RegistryOrderingSupplement;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    v10 = (const __CFArray *)(*(uint64_t (**)(_QWORD))(*((_QWORD *)a1 + 2) + 416))(*((_QWORD *)a1 + 14));
    if (v10)
    {
      v11 = v10;
      Count = CFArrayGetCount(v10);
      if (Count >= 1)
      {
        v13 = Count;
        v14 = 0;
        while (CFArrayGetValueAtIndex(v11, v14) != (const void *)1667851367)
        {
          if (v13 == ++v14)
            goto LABEL_7;
        }
        CFRelease(v11);
        if (a2)
          *a2 = CFSTR("Adobe");
        if (a3)
          *a3 = CFSTR("Identity");
        if (a4)
          *a4 = 0;
        RegistryOrderingSupplement = 1;
        if (a5)
          *a5 = 1;
        return RegistryOrderingSupplement;
      }
LABEL_7:
      CFRelease(v11);
    }
  }
  if (!a5)
    return CGFontGetRegistryOrderingSupplement(a1, a2, a3, a4);
  v18 = 0;
  v19 = 0;
  if (!a2)
    a2 = (CFTypeRef *)&v19;
  if (!a3)
    a3 = (CFTypeRef *)&v18;
  RegistryOrderingSupplement = CGFontGetRegistryOrderingSupplement(a1, a2, a3, a4);
  if (RegistryOrderingSupplement)
  {
    if (CFEqual(*a2, CFSTR("Adobe")))
      v16 = CFEqual(*a3, CFSTR("Identity")) != 0;
    else
      v16 = 0;
    *a5 = v16;
  }
  return RegistryOrderingSupplement;
}

unsigned int *XXH64_update(unsigned int *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    *(_QWORD *)result += __n;
    v6 = result[18];
    if (v6 + __n > 0x1F)
    {
      v7 = &__src[__n];
      if ((_DWORD)v6)
      {
        result = (unsigned int *)memcpy((char *)result + v6 + 40, __src, (32 - v6));
        v8 = __ROR8__(v5[2] - 0x3D4D51C2D82B14B1 * v5[6], 33);
        v5[1] = 0x9E3779B185EBCA87 * __ROR8__(v5[1] - 0x3D4D51C2D82B14B1 * v5[5], 33);
        v5[2] = 0x9E3779B185EBCA87 * v8;
        v9 = 0x9E3779B185EBCA87 * __ROR8__(v5[4] - 0x3D4D51C2D82B14B1 * v5[8], 33);
        v5[3] = 0x9E3779B185EBCA87 * __ROR8__(v5[3] - 0x3D4D51C2D82B14B1 * v5[7], 33);
        v5[4] = v9;
        v4 += (32 - *((_DWORD *)v5 + 18));
        *((_DWORD *)v5 + 18) = 0;
      }
      if (v4 + 32 <= v7)
      {
        v10 = v5[1];
        v11 = v5[2];
        v12 = v5[3];
        v13 = v5[4];
        do
        {
          v10 = 0x9E3779B185EBCA87 * __ROR8__(v10 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v4, 33);
          v5[1] = v10;
          v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 1), 33);
          v5[2] = v11;
          v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 2), 33);
          v5[3] = v12;
          v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 3), 33);
          v5[4] = v13;
          v4 += 32;
        }
        while (v4 <= v7 - 32);
      }
      if (v4 < v7)
      {
        v14 = v7 - v4;
        result = (unsigned int *)memcpy(v5 + 5, v4, v14);
        *((_DWORD *)v5 + 18) = v14;
      }
    }
    else
    {
      result = (unsigned int *)memcpy((char *)result + v6 + 40, __src, __n);
      *((_DWORD *)v5 + 18) += v3;
    }
  }
  return result;
}

unint64_t XXH64_digest(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;

  if (*a1 < 0x20uLL)
    v1 = a1[3] + 0x27D4EB2F165667C5;
  else
    v1 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  v2 = v1 + *a1;
  v3 = a1 + 5;
  v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      v5 = *v3++;
      v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    v6 = *(_DWORD *)v3;
    v3 = (uint64_t *)((char *)v3 + 4);
    v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    v7 = *(unsigned __int8 *)v3;
    v3 = (uint64_t *)((char *)v3 + 1);
    v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

uint64_t CGGlyphGetTrimRegion(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;

  v8 = 0;
  if (a3)
  {
    while (!a2)
    {
LABEL_6:
      if (++v8 == a3)
      {
        v8 = a3;
        goto LABEL_8;
      }
    }
    v9 = (_WORD *)(result + v8 * a4);
    v10 = a2;
    while ((*v9 & 0x7BDE) == 0)
    {
      ++v9;
      if (!--v10)
        goto LABEL_6;
    }
  }
LABEL_8:
  *a5 = v8;
  v11 = result + v8 * a4;
  v12 = 0;
  v13 = a3 - v8;
  if (v13)
  {
    while (!a2)
    {
LABEL_13:
      if (++v12 == v13)
      {
        v12 = v13;
        goto LABEL_15;
      }
    }
    v14 = (_WORD *)(v11 + (v13 + ~v12) * a4);
    v15 = a2;
    while ((*v14 & 0x7BDE) == 0)
    {
      ++v14;
      if (!--v15)
        goto LABEL_13;
    }
  }
LABEL_15:
  *a6 = v12;
  v16 = 0;
  if (a2)
  {
    while (v13 == v12)
    {
LABEL_20:
      if (++v16 == a2)
      {
        v16 = a2;
        goto LABEL_22;
      }
    }
    v17 = (_WORD *)(v11 + 2 * a2 - 2 - 2 * v16);
    v18 = v13 - v12;
    while ((*v17 & 0x7BDE) == 0)
    {
      v17 = (_WORD *)((char *)v17 + a4);
      if (!--v18)
        goto LABEL_20;
    }
  }
LABEL_22:
  *a8 = v16;
  v19 = a2 - v16;
  if (a2 == v16)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    while (v13 == v12)
    {
LABEL_28:
      if (++v20 == v19)
      {
        v20 = v19;
        goto LABEL_31;
      }
    }
    v21 = (_WORD *)(v11 + 2 * v20);
    v22 = v13 - v12;
    while ((*v21 & 0x7BDE) == 0)
    {
      v21 = (_WORD *)((char *)v21 + a4);
      if (!--v22)
        goto LABEL_28;
    }
  }
LABEL_31:
  *a7 = v20;
  return result;
}

BOOL CGSBoundsEqualToBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v6;

  v6 = HIDWORD(a1) == HIDWORD(a3) && (_DWORD)a2 == (_DWORD)a4 && HIDWORD(a2) == HIDWORD(a4);
  return (_DWORD)a1 == (_DWORD)a3 && v6;
}

void CGSConvertW8toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t i;
  char *v17;
  int v18;
  char *v19;
  char v20;
  const char *v21;
  const char *v22;
  vImage_Buffer dest;
  vImage_Buffer red;

  if (a5 < 0)
  {
    v21 = "width >= 0";
    v22 = "width (%d) < 0";
    goto LABEL_26;
  }
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
  {
    v21 = "height >= 0";
    v22 = "height (%d) < 0";
LABEL_26:
    _CGHandleAssert("CGSConvertW8toRGBA8888", 125, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", v21, v22, a6, a7, a8, a5);
  }
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = (char *)malloc_type_malloc((int)v11 * (int)a6, 0xB05E455uLL);
    v15 = v14;
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          v17 = &v14[i * v11];
          v18 = a5;
          v19 = &v13[i * (int)v12];
          do
          {
            v20 = *v19++;
            *v17 = v20;
            v17[1] = v20;
            v17[2] = v20;
            v17[3] = -1;
            v17 += 4;
            --v18;
          }
          while (v18);
        }
      }
    }
    CGBlt_copyBytes(4 * a5, v9, v14, v10, v11, v11);
    free(v15);
  }
  else
  {
    red.data = v13;
    red.height = (int)a6;
    red.width = a5;
    red.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    vImageConvert_Planar8ToBGRX8888(&red, &red, &red, 0xFFu, &dest, 0);
  }
}

void CGSConvertXRGB8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  char v18;
  uint8_t backgroundColor[4];
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertXRGB8888toRGBA8888", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertXRGB8888toRGBA8888", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      v14 = 0;
      v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          v16 = a5;
          v17 = v15;
          do
          {
            v18 = *v17;
            *(_WORD *)(v17 - 3) = *((_WORD *)v17 - 1);
            *(v17 - 1) = v18;
            *v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 197121;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertARGB8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint8x8_t v14;
  uint64_t i;
  __int32 *v16;
  int v17;
  int16x8_t v18;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertARGB8888toRGBA8888", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertARGB8888toRGBA8888", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          v16 = (__int32 *)&v10[i * v11];
          v17 = a5;
          do
          {
            v14.i32[0] = *v16;
            v18 = (int16x8_t)vmovl_u8(v14);
            *(int8x8_t *)v18.i8 = vext_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8, 2uLL);
            v14 = (uint8x8_t)vmovn_s16(v18);
            *v16++ = v14.i32[0];
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 197121;
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
  }
}

void CGSConvertRGBX8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertRGBX8888toRGBA8888", 297, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertRGBX8888toRGBA8888", 297, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      v14 = 0;
      v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          v16 = a5;
          v17 = v15;
          do
          {
            *v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, &src, &dest, 1u, 0);
  }
}

void CGSConvertXBGR8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  char v18;
  char v19;
  uint8_t backgroundColor[4];
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertXBGR8888toRGBA8888", 329, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertXBGR8888toRGBA8888", 329, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      v14 = 0;
      v15 = v10 + 3;
      do
      {
        if (a5 >= 1)
        {
          v16 = a5;
          v17 = v15;
          do
          {
            v18 = *(v17 - 2);
            v19 = *(v17 - 1);
            *(v17 - 3) = *v17;
            *(v17 - 2) = v19;
            *(v17 - 1) = v18;
            *v17 = -1;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v15 += v11;
      }
      while (v14 != v9);
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 66051;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertBGRX8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t i;
  char *v15;
  int v16;
  char v17;
  uint8_t backgroundColor[4];
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertBGRX8888toRGBA8888", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertBGRX8888toRGBA8888", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          v15 = &v10[i * v11];
          v16 = a5;
          do
          {
            v17 = *v15;
            *v15 = v15[2];
            v15[2] = v17;
            v15[3] = -1;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 50331906;
    *(_DWORD *)backgroundColor = -1;
    vImagePermuteChannelsWithMaskedInsert_ARGB8888(&src, &dest, permuteMap, 1u, backgroundColor, 0);
  }
}

void CGSConvertW16toRGBA8888(uint64_t a1, int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t i;
  char *v19;
  int v20;
  char *v21;
  char v22;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertW16toRGBA8888", 705, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertW16toRGBA8888", 705, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  v10 = (int)a6 - 1;
  if (a4 < 0)
    v11 = &a3[v10 * a4];
  else
    v11 = a3;
  if (a4 >= 0)
    v12 = a4;
  else
    v12 = -a4;
  if (a4 >= 0)
    v13 = a2;
  else
    v13 = -a2;
  if (a4 < 0)
    v14 = a1 + (int)v10 * (uint64_t)a2;
  else
    v14 = a1;
  v15 = v14 + (int)((v13 * v10) & (v13 >> 31));
  v16 = v11;
  if (v15 <= (unint64_t)&v11[(int)a6 * (uint64_t)(int)v12])
  {
    v17 = v13 >= 0 ? v13 : -v13;
    v16 = v11;
    if (v15 + (int)a6 * (uint64_t)v17 >= (unint64_t)v11)
      v16 = (char *)malloc_type_malloc((int)a6 * (uint64_t)(int)v12, 0xD49198B2uLL);
  }
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if (a5 >= 1)
      {
        v19 = &v16[i * v12];
        v20 = a5;
        v21 = (char *)(v14 + i * v13);
        do
        {
          v22 = *v21;
          v21 += 2;
          *v19 = v22;
          v19[1] = v22;
          v19[2] = v22;
          v19[3] = -1;
          v19 += 4;
          --v20;
        }
        while (v20);
      }
    }
  }
  if (v16 != v11)
  {
    CGBlt_copyBytes(4 * a5, v9, v16, v11, v12, v12);
    free(v16);
  }
}

void CGSConvertw16toRGBA8888(uint64_t a1, int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  char v23;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertw16toRGBA8888", 1131, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertw16toRGBA8888", 1131, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  v10 = (int)a6 - 1;
  if (a4 < 0)
    v11 = &a3[v10 * a4];
  else
    v11 = a3;
  if (a4 >= 0)
    v12 = a4;
  else
    v12 = -a4;
  if (a4 >= 0)
    v13 = a2;
  else
    v13 = -a2;
  if (a4 < 0)
    v14 = a1 + (int)v10 * (uint64_t)a2;
  else
    v14 = a1;
  v15 = v14 + (int)((v13 * v10) & (v13 >> 31));
  v16 = v11;
  if (v15 <= (unint64_t)&v11[(int)a6 * (uint64_t)(int)v12])
  {
    v17 = v13 >= 0 ? v13 : -v13;
    v16 = v11;
    if (v15 + (int)a6 * (uint64_t)v17 >= (unint64_t)v11)
      v16 = (char *)malloc_type_malloc((int)a6 * (uint64_t)(int)v12, 0xE5F1A741uLL);
  }
  if (v9 >= 1)
  {
    v18 = 0;
    v19 = (char *)(v14 + 1);
    do
    {
      if (a5 >= 1)
      {
        v20 = &v16[v18 * v12];
        v21 = a5;
        v22 = v19;
        do
        {
          v23 = *v22;
          v22 += 2;
          *v20 = v23;
          v20[1] = v23;
          v20[2] = v23;
          v20[3] = -1;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      ++v18;
      v19 += v13;
    }
    while (v18 != v9);
  }
  if (v16 != v11)
  {
    CGBlt_copyBytes(4 * a5, v9, v16, v11, v12, v12);
    free(v16);
  }
}

uint64_t CPPDFClipBufferPush(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v8;
  _DWORD *v10;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 <= v2)
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = (unsigned int *)(v4 + 52 * v2);
  v6 = v5 + 2;
  if (!v5[2])
  {
    if (v2 == a1)
      a1 = *v5;
    if (v3 <= a1)
    {
      *v5 = a1;
      *v6 = 0;
      v10 = (_DWORD *)(v4 + 52 * v2 + 4);
      goto LABEL_15;
    }
    *v5 = a1;
    v5 = (unsigned int *)(v4 + 52 * a1);
    goto LABEL_12;
  }
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 + 3 >= v3)
    return 0;
  *(_DWORD *)a2 = v7 + 3;
  *(_DWORD *)(a2 + 4) = v7;
  if (v3 > v7)
  {
    v8 = (unsigned int *)(v4 + 52 * v7);
    *v8 = v2;
    v6 = v8 + 2;
    v2 = v7;
LABEL_12:
    *v6 = 0;
    *(_DWORD *)(v4 + 52 * v2 + 4) = 0;
  }
  v10 = v5 + 1;
LABEL_15:
  *v10 = 0;
  return 1;
}

const void *CGFontGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = atomic_load((unint64_t *)(a1 + 88))) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

void CGFontSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  unint64_t *v5;
  _DWORD *v6;
  unint64_t v7;

  if (a1 && a2 && a3)
  {
    v5 = (unint64_t *)(a1 + 88);
    v6 = (_DWORD *)atomic_load((unint64_t *)(a1 + 88));
    if (!v6)
    {
      v6 = CGPropertiesCreate();
      while (1)
      {
        v7 = __ldaxr(v5);
        if (v7)
          break;
        if (!__stlxr((unint64_t)v6, v5))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v6);
      v6 = (_DWORD *)v7;
    }
LABEL_11:
    CGPropertiesSetProperty((uint64_t)v6, a2, a3);
  }
}

const __CFNumber *CGFontGetIntProperty(uint64_t a1, const void *a2, void *a3)
{
  const __CFNumber *result;
  const __CFNumber *v6;
  CFTypeID v7;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      result = (const __CFNumber *)atomic_load((unint64_t *)(a1 + 88));
      if (result)
      {
        result = (const __CFNumber *)CGPropertiesGetProperty((uint64_t)result, a2);
        if (result)
        {
          v6 = result;
          v7 = CFGetTypeID(result);
          if (v7 == CFNumberGetTypeID())
            return (const __CFNumber *)(CFNumberGetValue(v6, kCFNumberIntType, a3) != 0);
          else
            return 0;
        }
      }
    }
  }
  return result;
}

void CGFontSetIntProperty(uint64_t a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CGFontSetProperty(a1, CFSTR("com.apple.CoreGraphics.CGPDFFontFormat"), v3);
  CFRelease(v3);
}

void std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E1644580[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8se180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEELNS0_6_TraitE1EE9__destroyB8se180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8se180100IOZNS0_6__dtorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEELNS0_6_TraitE1EE9__destroyB8se180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void PDFStructureElement::SetAttribute(PDFStructureElement *this, __CFString *a2, const void *a3)
{
  const __CFString *v5;
  void *v6;
  __CFString *v7;

  v5 = a2;
  v6 = (void *)*((_QWORD *)this + 5);
  v7 = (__CFString *)v5;
  if (a3)
    objc_msgSend(v6, "setObject:forKey:", a3, v5);
  else
    objc_msgSend(v6, "removeObjectForKey:", v5);

}

void sub_184B820B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<CGPDFStructureElement *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t *std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 16;
    do
    {
      v8 = v4 - 16;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 8) = -1;
      v9 = *(unsigned int *)(v4 - 8);
      if ((_DWORD)v9 != -1)
      {
        result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1E1644590[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 8) = v9;
      }
      v7 -= 16;
      v4 = v8;
    }
    while (v8 != v5);
    v6 = v7 + 16;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>,(std::__variant_detail::_Trait)1>::~__dtor(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8se180100IOZNS0_6__ctorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEEE19__generic_constructB8se180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8se180100IOZNS0_6__ctorINS0_8__traitsIJN10applesauce2CF9ObjectRefIP21CGPDFStructureElementEENSA_IP22CGPDFMarkedContentItemEEEEEE19__generic_constructB8se180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void PDFStructureElement::Emit(PDFStructureElement *this, PDFDocument *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t **v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *Name;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v96[5];
  _QWORD v97[6];
  uint64_t **v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;

  *((_QWORD *)this + 6) = a4;
  v10 = &v99;
  v99 = 0;
  v100 = 0;
  v98 = &v99;
  v11 = (_DWORD *)*((_QWORD *)this + 2);
  v12 = (_DWORD *)*((_QWORD *)this + 3);
  if (v11 == v12)
    goto LABEL_31;
  v13 = 0;
  do
  {
    if (v11 && v11[2] == 1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 24);
      v15 = &v99;
      v16 = &v99;
      if (v99)
      {
        v17 = v99;
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v17;
            v18 = v17[4];
            if (v14 >= v18)
              break;
            v17 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_13;
          }
          if (v18 >= v14)
            break;
          v17 = v16[1];
          if (!v17)
          {
            v15 = v16 + 1;
            goto LABEL_13;
          }
        }
        v19 = (uint64_t *)v16;
      }
      else
      {
LABEL_13:
        v19 = (uint64_t *)operator new(0x30uLL);
        v19[4] = v14;
        v19[5] = 0;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v16;
        *v15 = v19;
        v20 = v19;
        if (*v98)
        {
          v98 = (uint64_t **)*v98;
          v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(v99, v20);
        v13 = ++v100;
      }
      ++v19[5];
    }
    v11 += 4;
  }
  while (v11 != v12);
  if (!v13)
  {
LABEL_31:
    v26 = 0;
  }
  else
  {
    v21 = v98;
    if (v98 != &v99)
    {
      v22 = v98;
      while (1)
      {
        v23 = v22[1];
        v24 = v22;
        if (v23)
        {
          do
          {
            v22 = (uint64_t **)v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v22 = (uint64_t **)v24[2];
            v25 = *v22 == (uint64_t *)v24;
            v24 = v22;
          }
          while (!v25);
        }
        if (v22 == &v99)
          break;
        if (v21[5] < v22[5])
          v21 = v22;
      }
      v10 = v21;
    }
    v26 = (uint64_t)v10[4];
  }
  v93 = a3;
  v27 = *((_QWORD *)this + 2);
  v28 = *((_QWORD *)this + 3);
  if (v27 != v28)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      if (v30 >= (uint64_t *)v31)
      {
        v32 = v30 - v29;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        if ((v31 - (char *)v29) >> 2 > v33)
          v33 = (v31 - (char *)v29) >> 2;
        if ((unint64_t)(v31 - (char *)v29) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (!v34)
          goto LABEL_85;
        v35 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v34);
        if (!v35)
          goto LABEL_85;
        v37 = (uint64_t *)&v35[8 * v32];
        *v37 = 0;
        v38 = v37 + 1;
        while (v30 != v29)
        {
          v39 = *--v30;
          *--v37 = v39;
        }
        v31 = &v35[8 * v36];
        if (v29)
          operator delete(v29);
        v29 = v37;
        v30 = v38;
      }
      else
      {
        if (!v30)
          goto LABEL_85;
        *v30++ = 0;
      }
      v97[0] = a2;
      v97[1] = a4;
      v97[2] = v30 - 1;
      v97[3] = a2;
      v97[4] = v26;
      v97[5] = v30 - 1;
      v40 = *(unsigned int *)(v27 + 8);
      if ((_DWORD)v40 == -1)
        std::__throw_bad_variant_access[abi:se180100]();
      v101 = v97;
      ((void (*)(_QWORD **, uint64_t))off_1E16445A0[v40])(&v101, v27);
      v27 += 16;
      if (v27 == v28)
        goto LABEL_57;
    }
  }
  v29 = 0;
  v30 = 0;
LABEL_57:
  PDFDocumentBeginObject((uint64_t)a2, a4, a3, a4, a5, a6, a7, a8);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"<<", v41, v42, v43, v44, v45, v46, v89);
  Name = CGPDFTagTypeGetName((CGPDFTagType)*(_DWORD *)this);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/S %s", v48, v49, v50, v51, v52, v53, (uint64_t)Name);
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/P %R", v54, v55, v56, v57, v58, v59, v93);
  v60 = (void *)*((_QWORD *)this + 5);
  v96[0] = MEMORY[0x1E0C809B0];
  v96[1] = 3221225472;
  v96[2] = ___ZN19PDFStructureElement4EmitEP11PDFDocumentmm_block_invoke;
  v96[3] = &__block_descriptor_40_e35_v32__0__NSString_8__NSString_16_B24l;
  v96[4] = a2;
  objc_msgSend(v60, "enumerateKeysAndObjectsUsingBlock:", v96);
  if (v26)
    PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/Pg %R", v61, v62, v63, v64, v65, v66, v26);
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
    goto LABEL_78;
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"/K", v61, v62, v63, v64, v65, v66, v90);
  v73 = (char *)*((_QWORD *)this + 2);
  v74 = (char *)*((_QWORD *)this + 3);
  if (v74 - v73 == 16)
  {
    if (v73 != v74 && v29 != v30)
    {
      v75 = *v29;
      if (*v29)
      {
        v76 = "%R";
      }
      else
      {
        if (*((_DWORD *)v73 + 2) != 1)
          std::__throw_bad_variant_access[abi:se180100]();
        v75 = *(_QWORD *)(*(_QWORD *)v73 + 32);
        v76 = "%d";
      }
      v92 = v75;
      goto LABEL_77;
    }
LABEL_85:
    __break(1u);
    return;
  }
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)"[", v67, v68, v69, v70, v71, v72, v91);
  v77 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) != v77)
  {
    v78 = 0;
    v79 = 0;
    while (v30 - v29 != v79)
    {
      v80 = v29[v79];
      if (v80)
      {
        v81 = "%R";
      }
      else
      {
        if (*(_DWORD *)(v77 + v78 + 8) != 1)
          std::__throw_bad_variant_access[abi:se180100]();
        v80 = *(_QWORD *)(*(_QWORD *)(v77 + v78) + 32);
        v81 = "%d";
      }
      PDFDocumentPrintf((uint64_t)a2, (uint64_t)v81, v67, v68, v69, v70, v71, v72, v80);
      ++v79;
      v77 = *((_QWORD *)this + 2);
      v78 += 16;
      if (v79 >= (*((_QWORD *)this + 3) - v77) >> 4)
        goto LABEL_73;
    }
    goto LABEL_85;
  }
LABEL_73:
  v76 = "]";
LABEL_77:
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)v76, v67, v68, v69, v70, v71, v72, v92);
LABEL_78:
  PDFDocumentPrintf((uint64_t)a2, (uint64_t)">>", v61, v62, v63, v64, v65, v66, v90);
  PDFDocumentEndObject((uint64_t)a2, v82, v83, v84, v85, v86, v87, v88);
  if (v29)
    operator delete(v29);
  std::__tree<unsigned long>::destroy(v99);
}

void sub_184B82700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  void *v25;

  operator delete(v25);
  std::__tree<unsigned long>::destroy(a25);
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:se180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void ___ZN19PDFStructureElement4EmitEP11PDFDocumentmm_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PDFDocumentPrintf(*(_QWORD *)(a1 + 32), (uint64_t)"%/ %T", a3, a4, a5, a6, a7, a8, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:se180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_1,PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)*a1 + 464));
  **(_QWORD **)(v3 + 16) = v4;
  PDFStructureElement::Emit((PDFStructureElement *)(*(_QWORD *)a2 + 16), *(PDFDocument **)v3, *(_QWORD *)(v3 + 8), v4, v5, v6, v7, v8);
}

_BYTE *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:se180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_1,PDFStructureElement::Emit(PDFDocument *,unsigned long,unsigned long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(_BYTE *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = *(_QWORD *)result;
  v3 = *a2;
  if (*(_DWORD *)(*a2 + 16) || *(_QWORD *)(v3 + 24) != *(_QWORD *)(v2 + 32))
  {
    v4 = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)(v2 + 24) + 464));
    **(_QWORD **)(v2 + 40) = v4;
    v5 = *(_QWORD *)(v2 + 24);
    v6 = *(_QWORD *)(v2 + 32);
    PDFDocumentBeginObject(v5, v4, v7, v8, v9, v10, v11, v12);
    PDFDocumentPrintf(v5, (uint64_t)"<<", v13, v14, v15, v16, v17, v18, v47);
    if (*(_QWORD *)(v3 + 24) != v6)
      PDFDocumentPrintf(v5, (uint64_t)"/Pg %R", v19, v20, v21, v22, v23, v24, *(_QWORD *)(v3 + 24));
    v25 = *(_DWORD *)(v3 + 16);
    if (v25)
      v26 = "/Type /OBJR";
    else
      v26 = "/Type /MCR";
    if (v25)
      v27 = "/Obj %R";
    else
      v27 = "/MCID %d";
    PDFDocumentPrintf(v5, (uint64_t)v26, v19, v20, v21, v22, v23, v24, v48);
    PDFDocumentPrintf(v5, (uint64_t)v27, v28, v29, v30, v31, v32, v33, *(_QWORD *)(v3 + 32));
    PDFDocumentPrintf(v5, (uint64_t)">>", v34, v35, v36, v37, v38, v39, v49);
    return PDFDocumentEndObject(v5, v40, v41, v42, v43, v44, v45, v46);
  }
  return result;
}

void PDFStructureElement::EnumerateMarkedContentItemsRecursively(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  id v8;
  _QWORD *v9;

  v3 = a2;
  v8 = v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v4 != v5)
  {
    do
    {
      v7[0] = &v8;
      v7[1] = &v8;
      v6 = *(unsigned int *)(v4 + 8);
      if ((_DWORD)v6 == -1)
        std::__throw_bad_variant_access[abi:se180100]();
      v9 = v7;
      ((void (*)(_QWORD **, uint64_t))off_1E16445B0[v6])(&v9, v4);
      v4 += 16;
    }
    while (v4 != v5);
    v3 = v8;
  }

}

void sub_184B82998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:se180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_0,PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(void ****a1, _QWORD *a2)
{
  PDFStructureElement::EnumerateMarkedContentItemsRecursively(*a2 + 16, ***a1);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:se180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_0,PDFStructureElement::EnumerateMarkedContentItemsRecursively(void({block_pointer})(CGPDFMarkedContentItem *))::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF<CGPDFMarkedContentItem *>> const&>(uint64_t a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 16))(*(_QWORD **)(*(_QWORD *)a1 + 8));
}

CFTypeRef CGPDFSourceRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGPDFSourceRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGPDFSourceGetLength(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result == -1)
      _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", a6, a7, a8, vars0);
  }
  return result;
}

uint64_t CGPDFSourceRewind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  char v11;

  if (result)
  {
    v8 = (_QWORD *)result;
    *(_BYTE *)(result + 208) = 0;
    if (*(uint64_t *)(result + 112) > 0 || *(_QWORD *)(result + 104))
    {
      if (*(_QWORD *)(result + 40))
      {
        *(_QWORD *)(result + 32) = 0;
      }
      else
      {
        v9 = *(uint64_t (**)(_QWORD))(result + 48);
        if (!v9)
          _CGHandleAssert("CGPDFSourceRewind", 333, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->filter_callbacks.rewind != NULL", "filter rewind callback is missing", a6, a7, a8, v11);
        result = v9(*(_QWORD *)(result + 80));
      }
      v8[13] = 0;
      v8[14] = 0;
    }
    v10 = v8[11];
    v8[15] = 0;
    v8[16] = v10;
  }
  return result;
}

uint64_t CGPDFSourceGetPosition(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1)
    return -1;
  v1 = a1[11];
  if (a1[18])
  {
    v2 = a1[24];
    v1 += a1[15];
  }
  else
  {
    v2 = a1[16];
  }
  return v2 - v1 + a1[14];
}

BOOL CGPDFSourceIsAtEOF(uint64_t a1)
{
  return !a1 || *(_BYTE *)(a1 + 208) != 0;
}

CFStringRef CGPDFPageCopyPageLabel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CGPDFDictionary *catalog;
  __CFString *Mutable;
  _BOOL4 Dictionary;
  CFAllocatorRef *v6;
  CGPDFInteger v7;
  CGPDFArrayRef nums_for_number;
  CGPDFArray *v9;
  size_t v10;
  CGPDFInteger v11;
  size_t v12;
  CGPDFInteger v13;
  size_t v14;
  CGPDFDictionary *v15;
  const __CFString *v16;
  const __CFString *v17;
  CGPDFInteger v18;
  int v19;
  __CFString *v20;
  uint64_t v21;
  __CFString *v23;
  int v24;
  CGPDFDictionaryRef value;
  CGPDFInteger v26;
  CGPDFStringRef string;
  char *v28;
  CGPDFDictionaryRef dict;
  CGPDFInteger v30;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!v1)
    return 0;
  value = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(_QWORD **)(*(_QWORD *)(v2 + 16) + 16));
  }
  else
  {
    catalog = 0;
  }
  Dictionary = CGPDFDictionaryGetDictionary(catalog, "PageLabels", &value);
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (Dictionary)
  {
    v7 = v1 - 1;
    nums_for_number = get_nums_for_number(value, v1 - 1);
    if (nums_for_number)
    {
      v9 = nums_for_number;
      v10 = *((_QWORD *)nums_for_number + 2);
      if ((v10 & 1) != 0)
      {
LABEL_32:
        pdf_error("invalid page label dictionary: invalid /Nums entry.");
      }
      else
      {
        dict = 0;
        if (v10)
        {
          v11 = 0;
          v12 = 0;
          string = 0;
          v28 = 0;
          v26 = 0;
          v30 = 0;
          do
          {
            if (!CGPDFArrayGetInteger(v9, v12, &v30))
              goto LABEL_32;
            v13 = v30;
            if (v30 > v7)
              break;
            v14 = v12 + 1;
            if (!CGPDFArrayGetDictionary(v9, v14, &dict))
              goto LABEL_32;
            v12 = v14 + 1;
            v11 = v13;
          }
          while (v12 < v10);
          v15 = dict;
          if (!dict)
            return CFStringCreateWithFormat(*v6, 0, CFSTR("%lu"), v1);
          if (!CGPDFDictionaryGetName(dict, "S", (const char **)&v28))
            v28 = 0;
          if (!CGPDFDictionaryGetString(v15, "P", &string))
            string = 0;
          if (!CGPDFDictionaryGetInteger(v15, "St", &v26))
            v26 = 1;
          Mutable = CFStringCreateMutable(*v6, 0);
          if (string)
          {
            v16 = CGPDFStringCopyTextString(string);
            if (v16)
            {
              v17 = v16;
              CFStringAppend(Mutable, v16);
              CFRelease(v17);
            }
          }
          if (!v28)
          {
LABEL_44:
            if (Mutable)
              return Mutable;
            return CFStringCreateWithFormat(*v6, 0, CFSTR("%lu"), v1);
          }
          v18 = v26 + v7 - v11;
          v19 = *v28;
          if (v19 <= 81)
          {
            if (v19 != 65)
            {
              if (v19 == 68)
              {
                CFStringAppendFormat(Mutable, 0, CFSTR("%ld"), v26 + v7 - v11);
                goto LABEL_44;
              }
LABEL_43:
              goto LABEL_44;
            }
            v23 = Mutable;
            v24 = 1;
          }
          else
          {
            if (v19 == 82)
            {
              v20 = Mutable;
              v21 = 1;
              goto LABEL_39;
            }
            if (v19 != 97)
            {
              if (v19 == 114)
              {
                v20 = Mutable;
                v21 = 0;
LABEL_39:
                append_roman(v20, v21, v18);
                goto LABEL_44;
              }
              goto LABEL_43;
            }
            v23 = Mutable;
            v24 = 0;
          }
          append_alpha(v23, v24, v18);
          goto LABEL_44;
        }
      }
    }
  }
  return CFStringCreateWithFormat(*v6, 0, CFSTR("%lu"), v1);
}

CGPDFArrayRef get_nums_for_number(CGPDFDictionary *a1, CGPDFInteger a2)
{
  uint64_t v4;
  size_t v5;
  _BOOL4 v6;
  char *v7;
  _BOOL4 Integer;
  BOOL v9;
  CGPDFArrayRef v11;
  CGPDFArrayRef value;
  CGPDFDictionaryRef dict;
  CGPDFInteger v14;
  CGPDFInteger v15;
  CGPDFArrayRef array;

  value = 0;
  dict = a1;
  v11 = 0;
  if (CGPDFDictionaryGetArray(a1, "Kids", &value))
  {
    if (value)
    {
      v4 = *((_QWORD *)value + 2);
      if (v4)
      {
        v5 = 0;
        while (1)
        {
          if (!CGPDFArrayGetDictionary(value, v5, &dict))
          {
            pdf_error("missing or invalid number table dictionary.", v11);
            return 0;
          }
          v15 = 0;
          array = 0;
          v14 = 0;
          v6 = CGPDFDictionaryGetArray(dict, "Limits", &array);
          v7 = "invalid number table: missing /Limits entry.";
          if (!v6)
            goto LABEL_15;
          if (!array)
            break;
          v7 = "invalid number table: invalid /Limits entry.";
          if (*((_QWORD *)array + 2) != 2)
            goto LABEL_15;
          Integer = CGPDFArrayGetInteger(array, 0, &v15);
          v7 = "invalid number table: invalid /Limits entry.";
          if (!Integer)
            goto LABEL_15;
          v9 = CGPDFArrayGetInteger(array, 1uLL, &v14);
          v7 = "invalid number table: invalid /Limits entry.";
          if (!v9)
            goto LABEL_15;
          if (v15 <= a2 && v14 >= a2)
            return (CGPDFArrayRef)get_nums_for_number(dict, a2);
LABEL_16:
          if (v4 == ++v5)
            return 0;
        }
        v7 = "invalid number table: invalid /Limits entry.";
LABEL_15:
        pdf_error(v7, v11);
        goto LABEL_16;
      }
    }
    return 0;
  }
  else
  {
    if (!CGPDFDictionaryGetArray(a1, "Nums", &v11))
    {
      pdf_error("invalid number table: no /Kids or /Nums entry.", v11);
      return 0;
    }
    return v11;
  }
}

void append_roman(CFMutableStringRef theString, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int16 v5;
  char cStr[17];
  uint64_t v7;

  v3 = a3;
  v7 = *MEMORY[0x1E0C80C00];
  if (a3 - 5000 > 0xFFFFFFFFFFFFEC78)
  {
    cStr[0] = 0;
    if (a3 >= 0x3E8)
    {
      v5 = (unsigned __int16)a3 / 0x3E8u;
      __strcat_chk();
      v3 = (unsigned __int16)(v3 - 1000 * v5);
    }
    if (v3 >= 0x64)
    {
      __strcat_chk();
      v3 = (unsigned __int16)v3 % 0x64u;
    }
    if (v3 >= 0xA)
    {
      __strcat_chk();
      v3 = v3 % 0xAu;
    }
    if (v3)
      __strcat_chk();
    CFStringAppendCString(theString, cStr, 0x600u);
  }
  else
  {
    pdf_error("Cannot convert %ld to Roman numerals.", a3);
  }
}

void append_alpha(__CFString *a1, int a2, uint64_t a3)
{
  CFIndex v4;
  unsigned int v5;
  const UniChar *v6;
  UniChar *v7;
  UniChar *v8;
  CFIndex v9;

  v4 = (a3 - 1) / 26 + 1;
  v5 = append_alpha_alphabet[(a3 - 1) % 26];
  if (!a2)
    v5 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 1084);
  v6 = (const UniChar *)malloc_type_malloc(2 * v4, 0x1000040BDFB0063uLL);
  v7 = (UniChar *)v6;
  if (v4)
  {
    v8 = (UniChar *)v6;
    v9 = v4;
    do
    {
      *v8++ = v5;
      --v9;
    }
    while (v9);
  }
  CFStringAppendCharacters(a1, v6, v4);
  free(v7);
}

uint64_t resample_byte_v_Ncpp_armv7(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint8x16_t **a5, uint64_t *a6)
{
  uint8x16_t *v6;
  int v7;
  const __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  int32x4_t v11;
  uint64_t *v12;
  int v13;
  const __int16 *v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t v18;
  uint64_t v19;
  int32x4_t *v20;
  int32x4_t v21;
  uint64_t *v22;
  int v23;
  const __int16 *v24;
  uint64_t v25;
  int16x4_t v26;
  int v27;
  uint64_t *v28;
  int v29;
  const __int16 *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3 * a4;
  if ((int)v9 >= 16 && (v9 & 0xFFFFFFF0) != 0)
  {
    v10 = 0;
    do
    {
      if (v7)
      {
        v11.i64[0] = 0x200000002000;
        v11.i64[1] = 0x200000002000;
        v12 = a6;
        v13 = v7;
        v14 = (const __int16 *)(result + 8);
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v17.i64[0] = 0x200000002000;
        v17.i64[1] = 0x200000002000;
        do
        {
          v18 = vld1_dup_s16(v14++);
          v19 = *v12++;
          v20 = (int32x4_t *)(v19 + 4 * v10);
          v11 = vmlal_s16(v11, vmovn_s32(*v20), v18);
          v15 = vmlal_s16(v15, vmovn_s32(v20[1]), v18);
          v16 = vmlal_s16(v16, vmovn_s32(v20[2]), v18);
          v17 = vmlal_s16(v17, vmovn_s32(v20[3]), v18);
          --v13;
        }
        while (v13);
      }
      else
      {
        v17.i64[0] = 0x200000002000;
        v17.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v11.i64[0] = 0x200000002000;
        v11.i64[1] = 0x200000002000;
      }
      *v6++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v11, 0xEuLL), v15, 0xEuLL)), (uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v16, 0xEuLL), v17, 0xEuLL));
      v10 += 16;
    }
    while (v10 < (v9 & 0xFFFFFFF0));
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (v9 & 0xFFFFFFFC))
  {
    v10 = v10;
    do
    {
      v21.i64[0] = 0x200000002000;
      v21.i64[1] = 0x200000002000;
      if (v7)
      {
        v22 = a6;
        v23 = v7;
        v24 = v8;
        do
        {
          v25 = *v22++;
          v26 = vld1_dup_s16(v24++);
          result = 4 * v10;
          v21 = vmlal_s16(v21, vmovn_s32(*(int32x4_t *)(v25 + 4 * v10)), v26);
          --v23;
        }
        while (v23);
      }
      *(int16x4_t *)v21.i8 = vqshrun_n_s32(v21, 0xEuLL);
      v6->i32[0] = vqmovn_u16((uint16x8_t)v21).u32[0];
      v6 = (uint8x16_t *)((char *)v6 + 4);
      v10 += 4;
    }
    while ((uint64_t)v10 < (int)(v9 & 0xFFFFFFFC));
  }
  if ((int)v10 < (int)v9)
  {
    v10 = v10;
    do
    {
      v27 = 0x2000;
      if (v7)
      {
        v28 = a6;
        v29 = v7;
        v30 = v8;
        do
        {
          v31 = *v30++;
          result = v31;
          v32 = *v28++;
          v27 += *(_DWORD *)(v32 + 4 * v10) * result;
          --v29;
        }
        while (v29);
      }
      v33 = v27 >> 14;
      if (v33 >= 255)
        v33 = 255;
      v6->i8[0] = v33 & ~(v33 >> 31);
      v6 = (uint8x16_t *)((char *)v6 + 1);
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t resample_byte_v_3cpp_af_armv7(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, int8x16_t **a5, uint64_t *a6)
{
  int8x16_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  int32x4_t v10;
  uint64_t *v11;
  int v12;
  const __int16 *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x4_t v17;
  uint64_t v18;
  int32x4_t *v19;
  uint8x8_t v20;
  uint16x8_t v21;
  uint8x8_t v22;
  signed int v23;
  int32x4_t v24;
  uint64_t *v25;
  int v26;
  const __int16 *v27;
  uint64_t v28;
  int16x4_t v29;
  int32x2_t v30;
  uint8x8_t v31;
  int32x2_t v32;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = a3 * a4;
  if (v8 >= 16 && (v8 & 0xFFFFFFF0) != 0)
  {
    v9 = 0;
    do
    {
      if (v7)
      {
        v10.i64[0] = 0x200000002000;
        v10.i64[1] = 0x200000002000;
        v11 = a6;
        v12 = v7;
        v13 = (const __int16 *)(result + 8);
        v14.i64[0] = 0x200000002000;
        v14.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        do
        {
          v17 = vld1_dup_s16(v13++);
          v18 = *v11++;
          v19 = (int32x4_t *)(v18 + 4 * v9);
          v10 = vmlal_s16(v10, vmovn_s32(*v19), v17);
          v14 = vmlal_s16(v14, vmovn_s32(v19[1]), v17);
          v15 = vmlal_s16(v15, vmovn_s32(v19[2]), v17);
          v16 = vmlal_s16(v16, vmovn_s32(v19[3]), v17);
          --v12;
        }
        while (v12);
      }
      else
      {
        v16.i64[0] = 0x200000002000;
        v16.i64[1] = 0x200000002000;
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v14.i64[0] = 0x200000002000;
        v14.i64[1] = 0x200000002000;
        v10.i64[0] = 0x200000002000;
        v10.i64[1] = 0x200000002000;
      }
      v20 = vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v10, 0xEuLL), v14, 0xEuLL));
      v21 = (uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v15, 0xEuLL), v16, 0xEuLL);
      v22 = vpmax_u8(v20, vqmovn_u16(v21));
      *v6++ = vorrq_s8((int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vmovl_u8(vpmax_u8(v22, v22))), (int8x16_t)(*(_OWORD *)&vqmovn_high_u16(v20, v21) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)));
      v9 += 16;
    }
    while (v9 < (v8 & 0xFFFFFFF0));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v23 = v8 & 0xFFFFFFFC;
  if ((int)v9 < v23)
  {
    v9 = v9;
    do
    {
      v24.i64[0] = 0x200000002000;
      v24.i64[1] = 0x200000002000;
      if (v7)
      {
        v25 = a6;
        v26 = v7;
        v27 = (const __int16 *)(result + 8);
        do
        {
          v28 = *v25++;
          v29 = vld1_dup_s16(v27++);
          v24 = vmlal_s16(v24, vmovn_s32(*(int32x4_t *)(v28 + 4 * v9)), v29);
          --v26;
        }
        while (v26);
      }
      v30 = (int32x2_t)vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v24, 0xEuLL), v24, 0xEuLL));
      v31 = vpmax_u8((uint8x8_t)v30, (uint8x8_t)v30);
      v32 = (int32x2_t)vand_s8((int8x8_t)vzip1_s32((int32x2_t)vpmax_u8(v31, v31), v30), (int8x8_t)0xFFFFFF00000000FFLL);
      v6->i32[0] = vorr_s8((int8x8_t)v32, (int8x8_t)vdup_lane_s32(v32, 1)).u32[0];
      v6 = (int8x16_t *)((char *)v6 + 4);
      v9 += 4;
    }
    while ((uint64_t)v9 < v23);
  }
  return result;
}

int *resample_byte_h_4cpp_armv7(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32x4_t *v11;
  int v12;
  int *v13;
  int v14;
  const __int16 *v15;
  const char *v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unsigned int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x2_t v27;
  uint8x8_t v28;
  int8x16_t v29;
  int v30;
  BOOL v31;
  uint8x8_t v32;
  int16x4_t v33;
  int16x4x2_t v34;
  int8x8x4_t v35;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        v10 = *a6 + *a7 * (uint64_t)(int)v8;
        v11 = *(uint32x4_t **)(a5 + 8 * v8);
        v12 = a4;
        v13 = result;
        do
        {
          v14 = v13[1];
          v15 = (const __int16 *)(v13 + 2);
          v16 = (const char *)(v10 + 4 * *v13);
          v17.i64[0] = 0x200000002000;
          v17.i64[1] = 0x200000002000;
          if (v14 >= 8)
          {
            v18 = (int32x4_t)xmmword_185004C30;
            v19 = (int32x4_t)xmmword_185004C30;
            v20 = (int32x4_t)xmmword_185004C30;
            v21 = (int32x4_t)xmmword_185004C30;
            do
            {
              v35 = vld4_s8(v16);
              v16 += 32;
              v22 = v14;
              v23 = *(int16x8_t *)v15;
              v15 += 8;
              v24 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[0]);
              v25 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[1]);
              v26 = (int16x8_t)vmovl_u8((uint8x8_t)v35.val[2]);
              *(uint16x8_t *)v35.val[0].i8 = vmovl_u8((uint8x8_t)v35.val[3]);
              v21 = vmlal_high_s16(vmlal_s16(v21, *(int16x4_t *)v24.i8, *(int16x4_t *)v23.i8), v24, v23);
              v20 = vmlal_high_s16(vmlal_s16(v20, *(int16x4_t *)v25.i8, *(int16x4_t *)v23.i8), v25, v23);
              v19 = vmlal_high_s16(vmlal_s16(v19, *(int16x4_t *)v26.i8, *(int16x4_t *)v23.i8), v26, v23);
              v18 = vmlal_high_s16(vmlal_s16(v18, (int16x4_t)v35.val[0], *(int16x4_t *)v23.i8), *(int16x8_t *)v35.val[0].i8, v23);
              v14 -= 8;
            }
            while (v22 > 0xF);
            v27 = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL));
            *(int32x2_t *)v17.i8 = vpadd_s32(vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)));
            v17.u64[1] = (unint64_t)vpadd_s32(vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), v27);
          }
          if (v14 < 2)
          {
            v30 = v14;
          }
          else
          {
            do
            {
              v28 = *(uint8x8_t *)v16;
              v16 += 8;
              v34 = vld2_dup_s16(v15);
              v15 += 2;
              v29 = (int8x16_t)vmovl_u8(v28);
              v17 = vmlal_s16(vmlal_s16(v17, *(int16x4_t *)v29.i8, v34.val[0]), (int16x4_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v34.val[1]);
              v30 = v14 - 2;
              v31 = v14 > 3;
              v14 -= 2;
            }
            while (v31);
          }
          if (v30 == 1)
          {
            v32 = (uint8x8_t)vld1_dup_f32((const float *)v16);
            v33 = vld1_dup_s16(v15);
            v17 = vmlal_s16(v17, (int16x4_t)*(_OWORD *)&vmovl_u8(v32), v33);
          }
          *v11++ = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqmovn_u16((uint16x8_t)vqshrun_high_n_s32(vqshrun_n_s32(v17, 0xEuLL), v17, 0xEuLL))));
          v13 = (int *)((char *)v13 + v9);
          --v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

