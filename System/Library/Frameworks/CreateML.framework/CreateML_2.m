void destroy for MLHandActionClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  int EnumCaseMultiPayload;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  id *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  void (*v27)(id *, uint64_t);
  void (*v28)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_release();

  v4 = a1 + a2[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for URL();
        v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
        v7(v4, v6);
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(v4 + *(int *)(v8 + 48), v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 1u:
      case 2u:
        v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v4, *(_BYTE *)(v4 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v4, *(_BYTE *)(v4 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 6u:
        v10 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4, v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  v11 = (id *)(a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v14 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v15 = (char *)v11 + *(int *)(v14 + 20);
      v16 = type metadata accessor for DataFrame();
      v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v15, v16);
      v17((char *)v11 + *(int *)(v14 + 24), v16);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v18 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v11, v18);
      break;
  }
  v19 = (id *)(a1 + a2[9]);
  v20 = swift_getEnumCaseMultiPayload();
  switch(v20)
  {
    case 2:

      return;
    case 1:
      v22 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v23 = (char *)v19 + *(int *)(v22 + 20);
      v24 = type metadata accessor for DataFrame();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
      v28(v23, v24);
      v25 = (id *)((char *)v19 + *(int *)(v22 + 24));
      v26 = v24;
      v27 = (void (*)(id *, uint64_t))v28;
LABEL_29:
      v27(v25, v26);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v21 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v21 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v26 = __swift_instantiateConcreteTypeFromMangledName(v21);
      v27 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v25 = v19;
      goto LABEL_29;
  }
}

_QWORD *initializeWithCopy for MLHandActionClassifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id *v16;
  id *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void *v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (void *)a2[2];
  a1[2] = v7;
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v13 = (char *)&loc_21AEE6A84 + 4 * byte_21AFECDA5[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v14 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v9[v14[5]] = *(_QWORD *)&v10[v14[5]];
  *(_QWORD *)&v9[v14[6]] = *(_QWORD *)&v10[v14[6]];
  *(_QWORD *)&v9[v14[7]] = *(_QWORD *)&v10[v14[7]];
  *(_QWORD *)&v9[v14[8]] = *(_QWORD *)&v10[v14[8]];
  *(_QWORD *)&v9[v14[10]] = *(_QWORD *)&v10[v14[10]];
  v15 = *(int *)(v3 + 32);
  v16 = (id *)((char *)v5 + v15);
  v17 = (id *)((char *)v4 + v15);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v27 = *v17;
    v28 = *v17;
    *v16 = v27;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v16 = *v17;
    v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v20 = *(int *)(v19 + 20);
    v21 = (char *)v16 + v20;
    v46 = v4;
    v22 = v5;
    v23 = (char *)v17 + v20;
    v24 = type metadata accessor for DataFrame();
    v47 = v3;
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v26 = v23;
    v5 = v22;
    v4 = v46;
    v25(v21, v26, v24);
    v25((char *)v16 + *(int *)(v19 + 24), (char *)v17 + *(int *)(v19 + 24), v24);
    v3 = v47;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v16, v17, v30);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v31 = *(int *)(v3 + 36);
  v32 = (void **)((char *)v5 + v31);
  v33 = (void **)((char *)v4 + v31);
  v34 = swift_getEnumCaseMultiPayload();
  if (v34 == 2)
  {
    v41 = *v33;
    v42 = v41;
    *v32 = v41;
  }
  else if (v34 == 1)
  {
    *v32 = *v33;
    v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v36 = *(int *)(v35 + 20);
    v37 = (char *)v32 + v36;
    v38 = (char *)v33 + v36;
    v39 = type metadata accessor for DataFrame();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    v40(v37, v38, v39);
    v40((char *)v32 + *(int *)(v35 + 24), (char *)v33 + *(int *)(v35 + 24), v39);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v32, v33, v44);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

_QWORD *assignWithCopy for MLHandActionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id *v16;
  id *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  id v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void **v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void *v39;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  char *v44;
  int *v45;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v9, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v13 = (char *)&loc_21AEE70FC + 4 * byte_21AFECDAC[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v14 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v10[v14[5]] = *(_QWORD *)&v11[v14[5]];
  *(_QWORD *)&v10[v14[6]] = *(_QWORD *)&v11[v14[6]];
  *(_QWORD *)&v10[v14[7]] = *(_QWORD *)&v11[v14[7]];
  *(_QWORD *)&v10[v14[8]] = *(_QWORD *)&v11[v14[8]];
  *(_QWORD *)&v10[v14[10]] = *(_QWORD *)&v11[v14[10]];
  if (a1 != a2)
  {
    v15 = a3[8];
    v16 = (id *)((char *)a1 + v15);
    v17 = (id *)((char *)a2 + v15);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v15, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *v17;
      v26 = *v17;
      *v16 = v25;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v16 = *v17;
      v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v20 = *(int *)(v19 + 20);
      v44 = (char *)v16 + v20;
      v45 = a3;
      v21 = (char *)v17 + v20;
      v22 = type metadata accessor for DataFrame();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v24 = v21;
      a3 = v45;
      v23(v44, v24, v22);
      v23((char *)v16 + *(int *)(v19 + 24), (char *)v17 + *(int *)(v19 + 24), v22);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v16, v17, v28);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v29 = a3[9];
    v30 = (void **)((char *)a1 + v29);
    v31 = (void **)((char *)a2 + v29);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v29, type metadata accessor for MLClassifierMetrics.Contents);
    v32 = swift_getEnumCaseMultiPayload();
    if (v32 == 2)
    {
      v39 = *v31;
      v40 = v39;
      *v30 = v39;
    }
    else if (v32 == 1)
    {
      *v30 = *v31;
      v33 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v34 = *(int *)(v33 + 20);
      v35 = (char *)v30 + v34;
      v36 = (char *)v31 + v34;
      v37 = type metadata accessor for DataFrame();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      v38((char *)v30 + *(int *)(v33 + 24), (char *)v31 + *(int *)(v33 + 24), v37);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v41 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v41 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v30, v31, v42);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v48;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v11 = type metadata accessor for URL();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
        v12(v7, v8, v11);
        v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v12(&v7[v13[12]], &v8[v13[12]], v11);
        *(_OWORD *)&v7[v13[16]] = *(_OWORD *)&v8[v13[16]];
        *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
        *(_OWORD *)&v7[v13[24]] = *(_OWORD *)&v8[v13[24]];
        *(_OWORD *)&v7[v13[28]] = *(_OWORD *)&v8[v13[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
        goto LABEL_9;
      case 5u:
        v15 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
        v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v7[v16[12]] = *(_OWORD *)&v8[v16[12]];
        *(_OWORD *)&v7[v16[16]] = *(_OWORD *)&v8[v16[16]];
        *(_OWORD *)&v7[v16[20]] = *(_OWORD *)&v8[v16[20]];
        goto LABEL_9;
      case 6u:
        v17 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v7, v8, v17);
        v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v7[v18[12]] = *(_OWORD *)&v8[v18[12]];
        *(_OWORD *)&v7[v18[16]] = *(_OWORD *)&v8[v18[16]];
        *(_OWORD *)&v7[v18[20]] = *(_OWORD *)&v8[v18[20]];
        *(_OWORD *)&v7[v18[24]] = *(_OWORD *)&v8[v18[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v19 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v7[v19[5]] = *(_QWORD *)&v8[v19[5]];
  *(_QWORD *)&v7[v19[6]] = *(_QWORD *)&v8[v19[6]];
  *(_QWORD *)&v7[v19[7]] = *(_QWORD *)&v8[v19[7]];
  *(_QWORD *)&v7[v19[8]] = *(_QWORD *)&v8[v19[8]];
  *(_QWORD *)&v7[v19[10]] = *(_QWORD *)&v8[v19[10]];
  v20 = *(int *)(v3 + 32);
  v21 = (char *)(v5 + v20);
  v22 = (char *)(v4 + v20);
  v23 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v27 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v28 = *(int *)(v27 + 20);
    v29 = &v21[v28];
    v30 = &v22[v28];
    v31 = type metadata accessor for DataFrame();
    v48 = v4;
    v32 = v5;
    v33 = v3;
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
    v34(v29, v30, v31);
    v34(&v21[*(int *)(v27 + 24)], &v22[*(int *)(v27 + 24)], v31);
    v3 = v33;
    v5 = v32;
    v4 = v48;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_20:
  v35 = *(int *)(v3 + 36);
  v36 = (char *)(v5 + v35);
  v37 = (char *)(v4 + v35);
  v38 = swift_getEnumCaseMultiPayload();
  if (v38 == 1)
  {
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v42 = *(int *)(v41 + 20);
    v43 = &v36[v42];
    v44 = &v37[v42];
    v45 = type metadata accessor for DataFrame();
    v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
    v46(v43, v44, v45);
    v46(&v36[*(int *)(v41 + 24)], &v37[*(int *)(v41 + 24)], v45);
  }
  else
  {
    if (v38)
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      return v5;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v39 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v39 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v36, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

_QWORD *assignWithTake for MLHandActionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  int *v47;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  v6 = (void *)a1[2];
  a1[2] = a2[2];

  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v7, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v10 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v12 = type metadata accessor for URL();
          v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
          v13(v8, v9, v12);
          v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v13(&v8[v14[12]], &v9[v14[12]], v12);
          *(_OWORD *)&v8[v14[16]] = *(_OWORD *)&v9[v14[16]];
          *(_OWORD *)&v8[v14[20]] = *(_OWORD *)&v9[v14[20]];
          *(_OWORD *)&v8[v14[24]] = *(_OWORD *)&v9[v14[24]];
          *(_OWORD *)&v8[v14[28]] = *(_OWORD *)&v9[v14[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v15 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
          goto LABEL_10;
        case 5u:
          v16 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v8, v9, v16);
          v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v8[v17[12]] = *(_OWORD *)&v9[v17[12]];
          *(_OWORD *)&v8[v17[16]] = *(_OWORD *)&v9[v17[16]];
          *(_OWORD *)&v8[v17[20]] = *(_OWORD *)&v9[v17[20]];
          goto LABEL_10;
        case 6u:
          v18 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v8, v9, v18);
          v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v8[v19[12]] = *(_OWORD *)&v9[v19[12]];
          *(_OWORD *)&v8[v19[16]] = *(_OWORD *)&v9[v19[16]];
          *(_OWORD *)&v8[v19[20]] = *(_OWORD *)&v9[v19[20]];
          *(_OWORD *)&v8[v19[24]] = *(_OWORD *)&v9[v19[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v20 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v8[v20[5]] = *(_QWORD *)&v9[v20[5]];
  *(_QWORD *)&v8[v20[6]] = *(_QWORD *)&v9[v20[6]];
  *(_QWORD *)&v8[v20[7]] = *(_QWORD *)&v9[v20[7]];
  *(_QWORD *)&v8[v20[8]] = *(_QWORD *)&v9[v20[8]];
  *(_QWORD *)&v8[v20[10]] = *(_QWORD *)&v9[v20[10]];
  if (a1 == a2)
    return a1;
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v21, type metadata accessor for MLClassifierMetrics.Contents);
  v24 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v28 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v29 = *(int *)(v28 + 20);
    v30 = &v22[v29];
    v31 = &v23[v29];
    v32 = type metadata accessor for DataFrame();
    v47 = a3;
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
    v33(v30, v31, v32);
    v33(&v22[*(int *)(v28 + 24)], &v23[*(int *)(v28 + 24)], v32);
    a3 = v47;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      goto LABEL_22;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v26 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v26 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v27 = __swift_instantiateConcreteTypeFromMangledName(v26);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v22, v23, v27);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_22:
  v34 = a3[9];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v34, type metadata accessor for MLClassifierMetrics.Contents);
  v37 = swift_getEnumCaseMultiPayload();
  if (v37 == 1)
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v41 = *(int *)(v40 + 20);
    v42 = &v35[v41];
    v43 = &v36[v41];
    v44 = type metadata accessor for DataFrame();
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
    v45(v42, v43, v44);
    v45(&v35[*(int *)(v40 + 24)], &v36[*(int *)(v40 + 24)], v44);
  }
  else
  {
    if (v37)
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v35, v36, v39);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEE821C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_8_36();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 28);
    }
    else
    {
      v9 = type metadata accessor for MLClassifierMetrics(0);
      v10 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AEE82BC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_8_36();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 28);
    }
    else
    {
      v9 = type metadata accessor for MLClassifierMetrics(0);
      v10 = *(int *)(a4 + 32);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v10, a2, a2, v9);
  }
}

uint64_t type metadata completion function for MLHandActionClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLHandActionClassifier.ModelParameters(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MLHandActionClassifier.Prediction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.Prediction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.Prediction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.Prediction()
{
  return &type metadata for MLHandActionClassifier.Prediction;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3)
    *a2 = v3;
  else
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3)
    *a2 = v3;
  else
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in MLUntypedColumn.init<A>(_:)(*a1);
  if (v3)
    *a2 = v3;
  else
    *a3 = result;
  return result;
}

uint64_t outlined init with copy of MLHandActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t OUTLINED_FUNCTION_8_36()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_13_38()
{
  return type metadata accessor for MLHandActionClassifier();
}

void OUTLINED_FUNCTION_24_31()
{
  uint64_t v0;

  outlined consume of MLDataTable?(*(void **)(v0 - 208), *(_DWORD *)(v0 - 152));
}

uint64_t OUTLINED_FUNCTION_32_18()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_33_20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_34_22(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = a1;
  return v1 - 296;
}

void OUTLINED_FUNCTION_38_17(uint64_t a1@<X8>, Swift::Float a2@<S0>)
{
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = 0xD000000000000010;
  AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, v2, a2);
}

uint64_t OUTLINED_FUNCTION_42_14()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_45_17()
{
  uint64_t v0;

  outlined consume of MLDataTable?(*(void **)(v0 - 248), *(_DWORD *)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_50_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_51_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_56_13(uint64_t a1)
{
  uint64_t v1;

  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, v1, 25);
}

void OUTLINED_FUNCTION_62_16()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_64_11(void *a1@<X0>, NSObject *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, (os_log_type_t)*(_DWORD *)(a4 - 256), a3, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_67_13()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_68_12()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 192));
}

void OUTLINED_FUNCTION_70_13()
{
  void *v0;
  void *v1;
  char v2;
  char v3;

  outlined consume of Result<_DataTable, Error>(v1, v2);
  outlined consume of Result<_DataTable, Error>(v0, v3);
}

uint64_t OUTLINED_FUNCTION_85_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_89_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_91_5()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_93_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_96_7(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 200), a2);
}

void OUTLINED_FUNCTION_97_5(void *a1)
{
  unsigned __int8 v1;

  outlined consume of MLDataTable?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_104_5()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_107_4()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_109_6()
{
  return type metadata accessor for Logger();
}

void OUTLINED_FUNCTION_115_4()
{
  void *v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(v0, *(_DWORD *)(v1 - 252));
}

uint64_t OUTLINED_FUNCTION_117_3()
{
  return swift_release();
}

id OUTLINED_FUNCTION_118_3@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  return static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)(a1, 0, a2, a3);
}

uint64_t OUTLINED_FUNCTION_120_5()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_121_6()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1760));
}

uint64_t static MLSoundClassifier.__Defaults.validation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for validation != -1)
    swift_once();
  v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier.__Defaults.validation);
  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v3, a1);
}

uint64_t static MLSoundClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

double static MLSoundClassifier.__Defaults.overlapFactor.getter()
{
  return 0.5;
}

double static MLSoundClassifier.__Defaults.defaultVGGishTimeWindow.getter()
{
  return 0.975;
}

uint64_t static MLSoundClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t one-time initialization function for validation()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  __swift_allocate_value_buffer(v0, static MLSoundClassifier.__Defaults.validation);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static MLSoundClassifier.__Defaults.validation);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 256;
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.validation);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.validation);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 256;
  return swift_storeEnumTagMultiPayload();
}

uint64_t static MLSoundClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLSoundClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.__Defaults()
{
  return &type metadata for MLSoundClassifier.__Defaults;
}

void OUTLINED_FUNCTION_0_46(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t initializeBufferWithCopyOfBuffer for MLSoundClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    v5 = (char *)&loc_21AEE896C + 4 * byte_21AFECEA0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for MLSoundClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      goto LABEL_5;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4u:
      v5 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
      case 1:
        v8 = type metadata accessor for URL();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
        break;
      case 2:
        return swift_bridgeObjectRelease();
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v6, *(_BYTE *)(v6 + 8));
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      case 4:
        v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      default:
        return result;
    }
  }
  return result;
}

void initializeWithCopy for MLSoundClassifier.PersistentParameters()
{
  char *v0;

  type metadata accessor for MLSoundClassifier.DataSource();
  v0 = (char *)sub_21AEE8F9C + 4 * byte_21AFECEB4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AEE8F9C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v1, v3);
  swift_storeEnumTagMultiPayload();
  v4 = v2[5];
  v5 = (_QWORD *)(v0 + v4);
  v6 = (_QWORD *)(v1 + v4);
  v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *v5 = *v6;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v9 = (char *)&loc_21AEE915C + 4 * byte_21AFECEB9[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v10 = v2[7];
  *(_QWORD *)(v0 + v2[6]) = *(_QWORD *)(v1 + v2[6]);
  *(_QWORD *)(v0 + v10) = *(_QWORD *)(v1 + v10);
  v11 = v2[9];
  *(_QWORD *)(v0 + v2[8]) = *(_QWORD *)(v1 + v2[8]);
  v12 = v0 + v11;
  v13 = v1 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return v0;
}

double assignWithCopy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  char *v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
    type metadata accessor for MLSoundClassifier.DataSource();
    v3 = (char *)&loc_21AEE93D0 + 4 * byte_21AFECEBE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v4 = a3[7];
  result = *(double *)(a2 + v4);
  *(double *)(a1 + v4) = result;
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = (uint64_t *)(a2 + v6);
  v9 = *v8;
  *(_BYTE *)(v7 + 8) = *((_BYTE *)v8 + 8);
  *(_QWORD *)v7 = v9;
  return result;
}

char *initializeWithTake for MLSoundClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  unsigned int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v6 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v8 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
    *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
    v10 = v9[20];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    v11[32] = v12[32];
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload <= 1)
  {
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_7:
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 4)
    {
      v20 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v16[v21[12]] = *(_OWORD *)&v17[v21[12]];
      *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
      v22 = v21[20];
      v23 = &v16[v22];
      v24 = &v17[v22];
      v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v23[32] = v24[32];
    }
    else
    {
      if (v19 > 1)
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_15;
      }
      v26 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v16, v17, v26);
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_16:
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  return a1;
}

char *assignWithTake for MLSoundClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  unsigned int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  if (a1 == a2)
    goto LABEL_17;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  v6 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v8 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
    *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
    v10 = v9[20];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    v11[32] = v12[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_8;
    }
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
  }
  swift_storeEnumTagMultiPayload();
LABEL_8:
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v15], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v18 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 4)
    {
      v20 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v16[v21[12]] = *(_OWORD *)&v17[v21[12]];
      *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
      v22 = v21[20];
      v23 = &v16[v22];
      v24 = &v17[v22];
      v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v23[32] = v24[32];
    }
    else
    {
      if (v19 > 1)
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_16;
      }
      v26 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v16, v17, v26);
    }
    swift_storeEnumTagMultiPayload();
LABEL_16:
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_17:
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEE9DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v6 = OUTLINED_FUNCTION_21_26();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = OUTLINED_FUNCTION_46_14();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 8);
  if (v11 > 1)
    return (v11 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEE9E90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = OUTLINED_FUNCTION_21_26();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
    return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
  }
  result = OUTLINED_FUNCTION_46_14();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for MLSoundClassifier.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLSoundClassifier.PersistentParameters()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLSoundClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void MLSoundClassifier.PersistentParameters.init(trainingData:modelParameters:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE v16[24];
  uint64_t v17;

  v6 = (int *)OUTLINED_FUNCTION_89_2();
  v7 = v6[6];
  v8 = v6[7];
  v9 = v6[8];
  v10 = a3 + v6[9];
  *(_QWORD *)v10 = 1;
  *(_BYTE *)(v10 + 8) = 1;
  outlined init with copy of MLTrainingSessionParameters(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(a2, a3 + v6[5], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v11 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)(a3 + v7) = *(_QWORD *)(a2 + v11[6]);
  *(double *)(a3 + v8) = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  *(_QWORD *)(a3 + v9) = *(_QWORD *)(a2 + v11[5]);
  outlined init with copy of Any?(a2 + v11[7], (uint64_t)v16);
  if (!v17)
  {
    outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v12 = 1;
    v13 = 1;
    goto LABEL_6;
  }
  v12 = v14;
  v13 = v15;
LABEL_6:
  outlined destroy of MLHandPoseClassifier.ModelParameters(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  *(_QWORD *)v10 = v12;
  *(_BYTE *)(v10 + 8) = v13;
}

void MLSoundClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  ValueMetadata *v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void *v44;
  Class isa;
  id v46;
  void **v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  void **v54;
  double v55;
  uint64_t v56;
  void (*v57)(_QWORD);
  unsigned __int8 v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  void **v64;
  unsigned __int8 v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  void **v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(_QWORD);
  uint64_t v91;
  uint64_t v92;
  void **v93;
  unsigned __int8 v94;
  ValueMetadata *v95;
  uint64_t v96;

  v83 = a1;
  v96 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v71 = v3;
  v84 = OUTLINED_FUNCTION_84_1();
  v81 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_208();
  v77 = v4;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v5);
  v78 = (char *)&v71 - v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)&v71 - v8;
  v75 = OUTLINED_FUNCTION_60_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v79 = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  v76 = (uint64_t)&v71 - v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v71 - v14;
  v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  v74 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v71 - v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE8D80;
  *(_QWORD *)(inited + 32) = 0x676E696E69617274;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  MLSoundClassifier.DataSource.dictionary.getter();
  v24 = v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v90 = (void (*)(_QWORD))v25;
  *(_QWORD *)(inited + 48) = v24;
  *(_QWORD *)(inited + 72) = v25;
  *(_QWORD *)(inited + 80) = 0x69746164696C6176;
  *(_QWORD *)(inited + 88) = 0xEA00000000006E6FLL;
  v26 = (int *)OUTLINED_FUNCTION_89_2();
  v73 = v1 + v26[5];
  outlined init with copy of MLTrainingSessionParameters(v73, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v88 = v1;
  v89 = (uint64_t)v26;
  v27 = v26[9];
  v91 = v26[8];
  v28 = v26[6];
  v29 = *(_QWORD *)(v1 + v28);
  v30 = v1 + v27;
  v31 = *(void ***)(v1 + v27);
  v85 = *(int **)(v1 + v91);
  v86 = v31;
  LODWORD(v87) = *(unsigned __int8 *)(v30 + 8);
  v32 = &v21[v16[7]];
  *(_OWORD *)v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  v33 = &v21[v16[8]];
  *(_QWORD *)v33 = 0;
  v33[8] = 1;
  *(_QWORD *)&v21[v16[9]] = 32;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v15, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  *(_QWORD *)&v21[v16[5]] = v85;
  v85 = v16;
  *(_QWORD *)&v21[v16[6]] = v29;
  v95 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  v93 = v86;
  v34 = v88;
  v94 = v87;
  outlined assign with take of Any?((uint64_t)&v93, (uint64_t)v32);
  OUTLINED_FUNCTION_57_11();
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter();
  v36 = v35;
  v87 = v15;
  OUTLINED_FUNCTION_57_11();
  *(_QWORD *)(inited + 96) = v36;
  v37 = v90;
  *(_QWORD *)(inited + 120) = v90;
  *(_QWORD *)(inited + 128) = 0x70616C7265766FLL;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  v72 = v28;
  v38 = (ValueMetadata *)MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v34 + v28);
  *(_QWORD *)(inited + 168) = v38;
  strcpy((char *)(inited + 176), "max_iterations");
  *(_BYTE *)(inited + 191) = -18;
  v39 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 192) = *(_QWORD *)(v34 + v91);
  *(_QWORD *)(inited + 216) = v39;
  *(_QWORD *)(inited + 224) = 0x687469726F676C61;
  *(_QWORD *)(inited + 232) = 0xE90000000000006DLL;
  v40 = *(void ***)v30;
  v86 = (void **)v30;
  LOBYTE(v39) = *(_BYTE *)(v30 + 8);
  v93 = v40;
  v94 = v39;
  v41 = MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(_QWORD *)(inited + 264) = v37;
  *(_QWORD *)(inited + 240) = v41;
  v92 = Dictionary.init(dictionaryLiteral:)();
  v42 = v34;
  v43 = *(void ***)(v34 + *(int *)(v89 + 28));
  v95 = v38;
  v93 = v43;
  specialized Dictionary.subscript.setter((uint64_t)&v93, 0xD000000000000010, 0x800000021AFF59F0);
  v44 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_10_3();
  v93 = 0;
  v46 = objc_msgSend(v44, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v93, v71);

  v47 = v93;
  if (v46)
  {
    v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_51_17();
    URL.appendingPathComponent(_:)();
    v51 = v82;
    Data.write(to:options:)();
    if (!v51)
    {
      v56 = OUTLINED_FUNCTION_50_15();
      v89 = v48;
      v90 = v57;
      v57(v56);
      MLSoundClassifier.DataSource.table.getter();
      v58 = v94;
      if (v94 == 255)
      {
        v82 = v50;
      }
      else
      {
        v59 = v93;
        v94 &= 1u;
        OUTLINED_FUNCTION_47_17();
        URL.appendingPathComponent(_:)();
        MLDataTable.write(to:)();
        v82 = v50;
        OUTLINED_FUNCTION_40_17();
        outlined consume of MLDataTable?(v59, v58);
      }
      v60 = (uint64_t)v87;
      outlined init with copy of MLTrainingSessionParameters(v73, (uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v61 = *(_QWORD *)(v34 + v91);
      v62 = *(_QWORD *)(v42 + v72);
      v63 = v85;
      v64 = (void **)*v86;
      v65 = *((_BYTE *)v86 + 8);
      v66 = v74;
      v67 = (_OWORD *)(v74 + v85[7]);
      *v67 = 0u;
      v67[1] = 0u;
      v68 = v66 + v63[8];
      *(_QWORD *)v68 = 0;
      *(_BYTE *)(v68 + 8) = 1;
      *(_QWORD *)(v66 + v63[9]) = 32;
      outlined init with copy of MLTrainingSessionParameters(v60, v66, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      *(_QWORD *)(v66 + v63[5]) = v61;
      *(_QWORD *)(v66 + v63[6]) = v62;
      v95 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
      v93 = v64;
      v94 = v65;
      outlined assign with take of Any?((uint64_t)&v93, (uint64_t)v67);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v60, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v69 = v76;
      outlined init with copy of MLTrainingSessionParameters(v66, v76, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v66, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
      outlined init with copy of MLTrainingSessionParameters(v69, v79, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v70 = (char *)&loc_21AEEA808 + dword_21AEEA914[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v52 = OUTLINED_FUNCTION_50_15();
    v53(v52);
    outlined consume of Data._Representation(v48, v50);
  }
  else
  {
    v54 = v47;
    _convertNSErrorToError(_:)();

    swift_willThrow(v55);
  }
  OUTLINED_FUNCTION_117_0();
}

void MLSoundClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  Class isa;
  id v40;
  id v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  char v110[32];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v97 = v5;
  v98 = OUTLINED_FUNCTION_60_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v96 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v102 = v9;
  v101 = type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v99 = v11;
  v106 = OUTLINED_FUNCTION_84_1();
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  OUTLINED_FUNCTION_208();
  v100 = v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v103 = (char *)&v84 - v14;
  OUTLINED_FUNCTION_29_3();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v84 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v84 - v19;
  v21 = (int *)OUTLINED_FUNCTION_89_2();
  v22 = v21[6];
  *(_QWORD *)(a2 + v22) = 0x3FE0000000000000;
  v23 = v21[7];
  *(_QWORD *)(a2 + v23) = 0x3FEF333333333333;
  v24 = v21[8];
  *(_QWORD *)(a2 + v24) = 25;
  v25 = a2 + v21[9];
  *(_QWORD *)v25 = 1;
  *(_BYTE *)(v25 + 8) = 1;
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_51_17();
  URL.appendingPathComponent(_:)();
  v26 = v105;
  v27 = Data.init(contentsOf:options:)();
  if (v26)
  {
    v29 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v30 = a1;
    v31 = v106;
    v29(v30, v106);
    v32 = v20;
    v33 = v31;
LABEL_3:
    v29((uint64_t)v32, v33);
    goto LABEL_21;
  }
  v87 = v25;
  v88 = v24;
  v89 = v23;
  v90 = v22;
  v85 = v21;
  v91 = v18;
  v92 = a2;
  v86 = 0;
  v105 = a1;
  v34 = v104;
  v29 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
  v35 = v27;
  v36 = v28;
  v37 = v106;
  v29((uint64_t)v20, v106);
  v38 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v108 = 0;
  v40 = objc_msgSend(v38, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v108);

  v41 = (id)v108;
  if (!v40)
  {
    v49 = v41;
    _convertNSErrorToError(_:)();

    swift_willThrow(v50);
    outlined consume of Data._Representation(v35, v36);
    v32 = (char *)v105;
    v33 = v37;
    goto LABEL_3;
  }
  v93 = v35;
  v94 = v36;
  v95 = v29;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v110, (uint64_t)&v108);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v43 = OUTLINED_FUNCTION_11_32();
  v44 = v105;
  if ((v43 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v52 = 0xD000000000000037;
LABEL_19:
    OUTLINED_FUNCTION_2_42(v51, v52);
    OUTLINED_FUNCTION_3_39();
    v95(v44, v106);
LABEL_20:
    OUTLINED_FUNCTION_42_15();
    goto LABEL_21;
  }
  v45 = v107;
  OUTLINED_FUNCTION_34_5(0x70616C7265766FLL, 0xE700000000000000, &v108);
  if (!v109)
    goto LABEL_16;
  if ((OUTLINED_FUNCTION_15_27() & 1) == 0)
    goto LABEL_17;
  v46 = v107;
  OUTLINED_FUNCTION_34_5(0x726574695F78616DLL, 0xEE00736E6F697461, &v108);
  if (!v109)
  {
LABEL_16:
    v53 = OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_36_21(v53, &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  if ((OUTLINED_FUNCTION_15_27() & 1) == 0)
  {
LABEL_17:
    OUTLINED_FUNCTION_10_3();
    goto LABEL_18;
  }
  v47 = v107;
  OUTLINED_FUNCTION_34_5(0x687469726F676C61, 0xE90000000000006DLL, &v108);
  if (!v109)
    goto LABEL_16;
  if ((OUTLINED_FUNCTION_11_32() & 1) == 0)
    goto LABEL_17;
  MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v107, (uint64_t)&v108);
  v48 = BYTE8(v108);
  if (BYTE8(v108) == 255)
  {
    OUTLINED_FUNCTION_10_3();
    v44 = v105;
LABEL_18:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v52 = 0xD000000000000034;
    goto LABEL_19;
  }
  v54 = v108;
  OUTLINED_FUNCTION_27_2();
  v55 = OUTLINED_FUNCTION_51_17();
  OUTLINED_FUNCTION_34_5(v55, v56, v57);
  if (v109)
  {
    OUTLINED_FUNCTION_15_27();
    OUTLINED_FUNCTION_63_12();
    if (v59)
      v60 = v107;
    else
      v60 = 0x3FEF333333333333;
  }
  else
  {
    OUTLINED_FUNCTION_36_21(v58, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_63_12();
  }
  v61 = v90;
  v62 = v88;
  v63 = v87;
  *(_QWORD *)(v36 + v89) = v60;
  *(_QWORD *)(v36 + v62) = v47;
  *(_QWORD *)(v36 + v61) = v46;
  *(_QWORD *)v63 = v54;
  *(_BYTE *)(v63 + 8) = v48 & 1;
  OUTLINED_FUNCTION_47_17();
  v64 = v105;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_34_5(0x676E696E69617274, 0xE800000000000000, &v108);
  if (!v109)
  {
    v72 = OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_36_21(v72, &demangling cache variable for type metadata for Any?);
    v66 = v106;
LABEL_33:
    v73 = v95;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_2_42(v74, 0xD00000000000002ELL);
    OUTLINED_FUNCTION_3_39();
    v73(v64, v66);
    goto LABEL_34;
  }
  v65 = OUTLINED_FUNCTION_11_32();
  v66 = v106;
  if ((v65 & 1) == 0)
  {
    OUTLINED_FUNCTION_10_3();
    goto LABEL_33;
  }
  v67 = v45;
  v92 = v42;
  v68 = v107;
  v69 = (uint64_t)v103;
  v104 = *(_QWORD *)(v34 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v104)(v103, v35, v106);
  v70 = v102;
  MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v68, v69, v102);
  if (__swift_getEnumTagSinglePayload(v70, 1, v101) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v70, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_2_42(v71, 0xD000000000000035);
    OUTLINED_FUNCTION_3_39();
    v95(v64, v66);
LABEL_34:
    OUTLINED_FUNCTION_221_0(v35);
    goto LABEL_20;
  }
  v75 = v70;
  v76 = v99;
  OUTLINED_FUNCTION_24_4(v75, v99);
  OUTLINED_FUNCTION_24_4(v76, v36);
  v77 = v100;
  OUTLINED_FUNCTION_11_4();
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v67, &v108);
  swift_bridgeObjectRelease();
  if (!v109)
  {
    v82 = OUTLINED_FUNCTION_3_39();
    OUTLINED_FUNCTION_36_21(v82, &demangling cache variable for type metadata for Any?);
LABEL_41:
    OUTLINED_FUNCTION_221_0(v64);
    OUTLINED_FUNCTION_221_0(v77);
    OUTLINED_FUNCTION_221_0(v35);
    OUTLINED_FUNCTION_42_15();
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_39();
    goto LABEL_41;
  }
  v78 = v107;
  v79 = (uint64_t)v103;
  ((void (*)(char *, uint64_t, uint64_t))v104)(v103, v77, v66);
  v80 = v97;
  MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v78, v79, v97);
  if (__swift_getEnumTagSinglePayload(v80, 1, v98) == 1)
  {
    outlined destroy of URL?(v80, &demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_2_42(v81, 0xD000000000000037);
    OUTLINED_FUNCTION_3_39();
    OUTLINED_FUNCTION_32_19();
    OUTLINED_FUNCTION_221_0(v100);
    OUTLINED_FUNCTION_221_0(v35);
    OUTLINED_FUNCTION_42_15();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v36, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  }
  else
  {
    OUTLINED_FUNCTION_3_39();
    OUTLINED_FUNCTION_32_19();
    OUTLINED_FUNCTION_221_0(v100);
    OUTLINED_FUNCTION_221_0(v35);
    OUTLINED_FUNCTION_42_15();
    v83 = v96;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v80, v96, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v83, v36 + v85[5], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  }
LABEL_21:
  OUTLINED_FUNCTION_117_0();
}

void MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_19;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_19;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v15);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_19;
  specialized Dictionary.subscript.getter(0x6E6F6973726576, 0xE700000000000000, a1, &v15);
  if (!v16)
  {
    OUTLINED_FUNCTION_30();
    goto LABEL_22;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
    OUTLINED_FUNCTION_30();
    goto LABEL_19;
  }
  v6 = v13;
  specialized Dictionary.subscript.getter(0x6966697373616C63, 0xEA00000000007265, a1, &v15);
  OUTLINED_FUNCTION_101();
  if (!v16)
  {
LABEL_22:
    v9 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_26(v9, &demangling cache variable for type metadata for Any?, v10, v11);
    goto LABEL_20;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_19;
  v7 = v13 == 0x687369676776 && v14 == 0xE600000000000000;
  if (!v7 && (OUTLINED_FUNCTION_52_10(), (OUTLINED_FUNCTION_8_3() & 1) == 0)
    || (v13 != 0xD000000000000012 || v14 != 0x800000021AFF5A30) && (OUTLINED_FUNCTION_8_3() & 1) == 0)
  {
    if (v13 == 0xD000000000000013 && v14 == 0x800000021AFF5A10
      || (OUTLINED_FUNCTION_27_2(), (OUTLINED_FUNCTION_8_3() & 1) != 0))
    {
      if (v13 == 0xD000000000000012 && v14 == 0x800000021AFF5A30)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30();
LABEL_30:
        v8 = 1;
        goto LABEL_21;
      }
      v12 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_30();
      if ((v12 & 1) != 0)
        goto LABEL_30;
LABEL_20:
      v6 = 0;
      v8 = -1;
      goto LABEL_21;
    }
    OUTLINED_FUNCTION_101();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30();
  v8 = 0;
LABEL_21:
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v8;
}

void MLSoundClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _BYTE v50[7];
  uint64_t v51;
  unint64_t v52;
  char v53;
  _BYTE v54[7];
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[7];
  uint64_t v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  _BYTE v66[7];
  _BYTE v67[7];
  void *v68;
  uint64_t v69;

  v7 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_95_1();
  v9 = OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v39 - v14;
  if (!*(_QWORD *)(a1 + 16)
    || (v16 = OUTLINED_FUNCTION_48_3(), (v17 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v43),
        (OUTLINED_FUNCTION_6_8() & 1) == 0))
  {
    OUTLINED_FUNCTION_30();
    goto LABEL_13;
  }
  v42 = a3;
  v18 = (uint64_t)v68;
  a3 = v69;
  if (v68 != (void *)0xD000000000000013 || v69 != 0x800000021AFF28D0)
  {
    OUTLINED_FUNCTION_27_2();
    if ((OUTLINED_FUNCTION_8_3() & 1) == 0)
    {
      v21 = v18 == 0x5F64656C6562616CLL && a3 == 0xED000073656C6966;
      if (v21 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v43);
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_43_16();
        if (!v22)
          goto LABEL_47;
        if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
          goto LABEL_9;
LABEL_13:
        OUTLINED_FUNCTION_6_38();
        v20 = 1;
        goto LABEL_14;
      }
      v23 = v18 == 0x79625F73656C6966 && a3 == 0xEE006C6562616C5FLL;
      if (v23 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_6(0x73656C6966, 0xE500000000000000, &v43);
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_43_16();
        if (!v24)
          goto LABEL_47;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
        if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
        {
          v25 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v68);
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_6_38();
          *v13 = v25;
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_49_12();
      if (v18 == v26 && a3 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = OUTLINED_FUNCTION_8_3();
        OUTLINED_FUNCTION_106_0();
        if ((v28 & 1) == 0)
        {
          OUTLINED_FUNCTION_6_38();
          OUTLINED_FUNCTION_30();
          goto LABEL_56;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a2, v7);
      v64 = 1;
      LOBYTE(v43) = 1;
      *(_DWORD *)((char *)&v43 + 1) = *(_DWORD *)v67;
      DWORD1(v43) = *(_DWORD *)&v67[3];
      *((_QWORD *)&v43 + 1) = 44;
      v44 = 0xE100000000000000;
      v45 = 0;
      v46 = 0xE000000000000000;
      v47 = 92;
      v48 = 0xE100000000000000;
      v49 = 1;
      *(_DWORD *)v50 = *(_DWORD *)v66;
      *(_DWORD *)&v50[3] = *(_DWORD *)&v66[3];
      v51 = 34;
      v52 = 0xE100000000000000;
      v53 = 1;
      *(_DWORD *)v54 = *(_DWORD *)v65;
      *(_DWORD *)&v54[3] = *(_DWORD *)&v65[3];
      v55 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      v56 = 10;
      v57 = 0xE100000000000000;
      v58 = 0;
      v59 = 0;
      v60 = 1;
      *(_DWORD *)v61 = *(_DWORD *)v63;
      *(_DWORD *)&v61[3] = *(_DWORD *)&v63[3];
      v62 = 0;
      MLDataTable.init(contentsOf:options:)(v3, &v43, (uint64_t)&v68);
      a3 = v42;
      v29 = v68;
      v30 = v69;
      OUTLINED_FUNCTION_10_6(0x5F65727574616566, 0xEE006E6D756C6F63, &v43);
      if (!v45)
      {
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_67_3();
        goto LABEL_47;
      }
      if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
      {
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_67_3();
        goto LABEL_13;
      }
      v32 = (uint64_t)v68;
      v31 = v69;
      OUTLINED_FUNCTION_10_6(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, &v43);
      if (v45)
      {
        if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
        {
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_67_3();
LABEL_54:
          OUTLINED_FUNCTION_106_0();
          goto LABEL_55;
        }
        v40 = (uint64_t)v68;
        v41 = v69;
        OUTLINED_FUNCTION_10_6(0x6574656D61726170, 0xEA00000000007372, &v43);
        OUTLINED_FUNCTION_30();
        if (v45)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
          {
            MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)((uint64_t)&v43);
            OUTLINED_FUNCTION_6_38();
            v33 = v46;
            if (v46 != 255)
            {
              v34 = v45;
              v35 = v44;
              v36 = *((_QWORD *)&v43 + 1);
              v37 = v43;
              *(_QWORD *)v15 = v29;
              v15[8] = v30;
              *((_QWORD *)v15 + 2) = v32;
              *((_QWORD *)v15 + 3) = v31;
              v38 = v41;
              *((_QWORD *)v15 + 4) = v40;
              *((_QWORD *)v15 + 5) = v38;
              *((_QWORD *)v15 + 6) = v37;
              *((_QWORD *)v15 + 7) = v36;
              v15[64] = v35 & 1;
              *((_QWORD *)v15 + 9) = v34;
              v15[80] = v33 & 1;
              swift_storeEnumTagMultiPayload();
              a3 = v42;
              goto LABEL_11;
            }
            OUTLINED_FUNCTION_33_21();
            OUTLINED_FUNCTION_106_0();
            OUTLINED_FUNCTION_67_3();
LABEL_56:
            v20 = 1;
            a3 = v42;
            goto LABEL_14;
          }
          outlined consume of Result<_DataTable, Error>(v29, v30);
          OUTLINED_FUNCTION_33_21();
          goto LABEL_54;
        }
        outlined consume of Result<_DataTable, Error>(v29, v30);
        OUTLINED_FUNCTION_33_21();
      }
      else
      {
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_67_3();
      }
      OUTLINED_FUNCTION_106_0();
      outlined destroy of URL?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
LABEL_55:
      OUTLINED_FUNCTION_6_38();
      goto LABEL_56;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v43);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_43_16();
  if (!v19)
  {
LABEL_47:
    outlined destroy of URL?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_13;
LABEL_9:
  OUTLINED_FUNCTION_41_17();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_6_38();
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
LABEL_11:
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v15, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  v20 = 0;
LABEL_14:
  __swift_storeEnumTagSinglePayload(a3, v20, 1, v9);
  OUTLINED_FUNCTION_9_5();
}

void MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  char v30;
  __int16 v31;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int16 v36;
  char v37;
  uint64_t v38;

  v5 = OUTLINED_FUNCTION_78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = OUTLINED_FUNCTION_46_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_49();
  v23 = v22 - v21;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v24 = OUTLINED_FUNCTION_48_3();
  if ((v25 & 1) == 0)
    goto LABEL_25;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)&v35);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_25;
  v26 = v33 == 1701736302 && v34 == 0xE400000000000000;
  if (v26 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
  {
    OUTLINED_FUNCTION_12_7(a2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    OUTLINED_FUNCTION_30();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v28 = v33 == 0x756F735F61746164 && v34 == 0xEB00000000656372;
  if (!v28 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
  {
    if (v33 == 0x74696C7073 && v34 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = OUTLINED_FUNCTION_8_3();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_12_7(a2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
        OUTLINED_FUNCTION_30();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v35);
    OUTLINED_FUNCTION_30();
    if (!v38)
      goto LABEL_33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
      goto LABEL_34;
    MLSplitStrategy.init(dictionary:)(v33, (uint64_t)&v35);
    OUTLINED_FUNCTION_12_7(a2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    if ((v37 & 1) == 0)
    {
      v31 = v36;
      *(_OWORD *)v23 = v35;
      *(_BYTE *)(v23 + 16) = v31;
      *(_BYTE *)(v23 + 17) = HIBYTE(v31) & 1;
      goto LABEL_10;
    }
LABEL_26:
    v27 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v35);
  OUTLINED_FUNCTION_30();
  if (!v38)
  {
LABEL_33:
    outlined destroy of URL?((uint64_t)&v35, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_12_7(a2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v33, v9, v13);
  OUTLINED_FUNCTION_12_7(a2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
    v27 = 1;
    goto LABEL_27;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v13, v18, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v18, v23, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v23, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v27 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(a3, v27, 1, v19);
  OUTLINED_FUNCTION_9_5();
}

void MLSoundClassifier.DataSource.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v0 = OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_18_24(v2, v3, v5);
  v4 = (char *)sub_21AEEC0A0 + 4 * byte_21AFECEC8[OUTLINED_FUNCTION_56_14()];
  __asm { BR              X10 }
}

uint64_t sub_21AEEC0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_29_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  v4 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 32) = 1684957547;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = 0xD000000000000013;
  *(_QWORD *)(inited + 56) = 0x800000021AFF28D0;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 1752457584;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v5 = URL.path.getter();
  *(_QWORD *)(inited + 120) = v4;
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 104) = v6;
  v7 = OUTLINED_FUNCTION_70_3();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return v7;
}

void MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_46_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_18_24(v2, v3, v5);
  v4 = (char *)sub_21AEEC4A4 + 4 * byte_21AFECECD[OUTLINED_FUNCTION_56_14()];
  __asm { BR              X10 }
}

uint64_t sub_21AEEC4A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  __n128 *inited;
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *v0;
  v3 = v0[1];
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_BYTE *)v0 + 17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = (__n128 *)swift_initStackObject();
  v7 = OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE7F70);
  v8 = MEMORY[0x24BEE0D00];
  v7[3].n128_u64[0] = 0x74696C7073;
  v7[3].n128_u64[1] = 0xE500000000000000;
  v7[4].n128_u64[1] = v8;
  v7[5].n128_u64[0] = 1635017060;
  v7[5].n128_u64[1] = v9;
  *(_QWORD *)(v1 - 216) = v2;
  *(_QWORD *)(v1 - 208) = v3;
  *(_BYTE *)(v1 - 200) = v4;
  *(_BYTE *)(v1 - 199) = v5;
  v10 = MLSplitStrategy.dictionary.getter();
  inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  inited[6].n128_u64[0] = v10;
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = MEMORY[0x24BEE0D00];
  v13 = Dictionary.init(dictionaryLiteral:)();
  v12 = v3;
  if ((v2 & 1) != 0)
  {
    v10 = 0xD000000000000013;
    v11 = 0x800000021AFF5A10;
    OUTLINED_FUNCTION_34_23((uint64_t)&v10);
    v12 = v3;
    OUTLINED_FUNCTION_64_12();
    v10 = v4;
    v11 = v5;
    v6 = 1701869940;
  }
  else
  {
    OUTLINED_FUNCTION_53_17();
    v10 = v7;
    v11 = v8;
    v6 = 1684957547;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v10, v6, 0xE400000000000000);
  v12 = MEMORY[0x24BEE1768];
  v10 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v10, 0x6E6F6973726576, 0xE700000000000000);
  v12 = v3;
  v10 = 0xD000000000000012;
  v11 = 0x800000021AFF5A30;
  specialized Dictionary.subscript.setter((uint64_t)&v10, 0x6966697373616C63, 0xEA00000000007265);
  return v13;
}

void MLSoundClassifier.DataSource.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;

  v2 = type metadata accessor for DataFrame();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_95_1();
  outlined init with copy of MLTrainingSessionParameters(v0, v1, v5);
  v6 = (char *)sub_21AEEC910 + 4 * byte_21AFECED1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AEEC910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = OUTLINED_FUNCTION_78();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = -1;
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.dictionary.getter()
{
  double *v0;
  double v1;
  double v2;
  int v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  v5 = inited;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  strcpy((char *)(inited + 32), "overlap_factor");
  *(_BYTE *)(inited + 47) = -18;
  v6 = MEMORY[0x24BEE13C8];
  *(double *)(inited + 48) = v1;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000021AFF59F0;
  v7 = 0.975;
  if (!v3)
    v7 = v2;
  *(double *)(inited + 96) = v7;
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x800000021AFF5A50;
  v8 = MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter();
  *(_QWORD *)(v5 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)(v5 + 144) = v8;
  return Dictionary.init(dictionaryLiteral:)();
}

void MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  OUTLINED_FUNCTION_10_6(0x5F70616C7265766FLL, 0xEE00726F74636166, &v12);
  if (!v13)
    goto LABEL_7;
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_6:
    OUTLINED_FUNCTION_30();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_10_6(0xD000000000000011, 0x800000021AFF5A50, &v12);
  if (!v13)
  {
LABEL_7:
    v3 = OUTLINED_FUNCTION_30();
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_6;
  MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)((uint64_t)&v12);
  v2 = BYTE8(v12);
  if (BYTE8(v12) == 255)
    goto LABEL_6;
  v7 = v12;
  v8 = OUTLINED_FUNCTION_51_17();
  OUTLINED_FUNCTION_10_6(v8, v9, v10);
  v3 = OUTLINED_FUNCTION_30();
  if (!v13)
  {
LABEL_8:
    OUTLINED_FUNCTION_26_26(v3, &demangling cache variable for type metadata for Any?, v4, v5);
    goto LABEL_9;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
  {
    v6 = v2 & 1;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v7;
    goto LABEL_10;
  }
LABEL_9:
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = -1;
LABEL_10:
  *(_BYTE *)(a1 + 32) = v6;
  OUTLINED_FUNCTION_31_22();
}

uint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t inited;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v2 = MEMORY[0x24BEE0D00];
    v13 = MEMORY[0x24BEE0D00];
    v14 = Dictionary.init(dictionaryLiteral:)();
    v11 = 0xD000000000000011;
    v12 = 0x800000021AFF5A70;
    OUTLINED_FUNCTION_34_23((uint64_t)&v11);
    v13 = v2;
    OUTLINED_FUNCTION_64_12();
    v11 = v3;
    v12 = v4;
    specialized Dictionary.subscript.setter((uint64_t)&v11, 1701869940, 0xE400000000000000);
    v13 = MEMORY[0x24BEE1768];
    v11 = v1;
    specialized Dictionary.subscript.setter((uint64_t)&v11, 0x6E6F697369766572, 0xE800000000000000);
    return v14;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
    *(_QWORD *)(inited + 32) = 1684957547;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    OUTLINED_FUNCTION_53_17();
    v7[6] = v8;
    v7[7] = v9;
    v7[9] = v10;
    v7[10] = 0x6E6F697369766572;
    v7[15] = MEMORY[0x24BEE1768];
    v7[11] = 0xE800000000000000;
    v7[12] = v1;
    return Dictionary.init(dictionaryLiteral:)();
  }
}

void MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;

  OUTLINED_FUNCTION_10_6(0x6E6F697369766572, 0xE800000000000000, &v21);
  if (v22)
  {
    if (OUTLINED_FUNCTION_6_8())
    {
      v5 = v19;
      goto LABEL_6;
    }
  }
  else
  {
    OUTLINED_FUNCTION_26_26(v2, &demangling cache variable for type metadata for Any?, v3, v4);
  }
  v5 = 1;
LABEL_6:
  OUTLINED_FUNCTION_10_6(1684957547, 0xE400000000000000, &v21);
  if (!v22)
  {
    OUTLINED_FUNCTION_26_26(v6, &demangling cache variable for type metadata for Any?, v7, v8);
    goto LABEL_15;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_15;
  v9 = v19 == 0x687369676776 && v20 == 0xE600000000000000;
  if (v9 || (OUTLINED_FUNCTION_52_10(), (OUTLINED_FUNCTION_8_3() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
    v10 = 0;
    goto LABEL_18;
  }
  if (v19 == 0xD000000000000011 && v20 == 0x800000021AFF5A70)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_27_2();
  v11 = OUTLINED_FUNCTION_8_3();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_15:
    OUTLINED_FUNCTION_30();
    goto LABEL_16;
  }
LABEL_23:
  OUTLINED_FUNCTION_10_6(1701869940, 0xE400000000000000, &v21);
  v12 = OUTLINED_FUNCTION_30();
  if (!v22)
  {
    OUTLINED_FUNCTION_26_26(v12, &demangling cache variable for type metadata for Any?, v13, v14);
    goto LABEL_27;
  }
  if (!OUTLINED_FUNCTION_6_8())
  {
LABEL_27:
    v16 = 0xE500000000000000;
    v15 = 0x646E756F73;
    goto LABEL_28;
  }
  v15 = v19;
  v16 = v20;
LABEL_28:
  if (v15 == 0x646E756F73 && v16 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    v10 = 1;
    goto LABEL_18;
  }
  v18 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_30();
  if ((v18 & 1) != 0)
    goto LABEL_35;
LABEL_16:
  v5 = 0;
  v10 = -1;
LABEL_18:
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v10;
  OUTLINED_FUNCTION_31_22();
}

uint64_t OUTLINED_FUNCTION_2_42@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_3_39()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 - 280), *(_QWORD *)(v0 - 272));
}

uint64_t OUTLINED_FUNCTION_6_38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_11_32()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_35(uint64_t result)
{
  *(_QWORD *)(result + 48) = 0x756F735F61746164;
  *(_QWORD *)(result + 56) = 0xEB00000000656372;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_27()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_18_24(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t OUTLINED_FUNCTION_21_26()
{
  return type metadata accessor for MLSoundClassifier.DataSource();
}

void OUTLINED_FUNCTION_26_26(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  outlined destroy of URL?((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_29_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_32_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 264))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_33_21()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_34_23(uint64_t a1)
{
  specialized Dictionary.subscript.setter(a1, 1684957547, 0xE400000000000000);
}

void OUTLINED_FUNCTION_36_21(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2 - 160, a2);
}

uint64_t OUTLINED_FUNCTION_40_17()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 152))(v1, *(_QWORD *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_41_17()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t OUTLINED_FUNCTION_42_15()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 128);
}

uint64_t OUTLINED_FUNCTION_46_14()
{
  return type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_47_17()
{
  return 1635017060;
}

uint64_t OUTLINED_FUNCTION_50_15()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_51_17()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_52_10()
{
  return 0x687369676776;
}

uint64_t OUTLINED_FUNCTION_56_14()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_57_11()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0, v1);
}

uint64_t OUTLINED_FUNCTION_60_13()
{
  return type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
}

void EventCollector.add(_:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  specialized NSLocking.withLock<A>(_:)((void (*)(id))partial apply for closure #1 in EventCollector.add(_:));

}

uint64_t EventCollector.init()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t closure #1 in EventCollector.add(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  v6 = type metadata accessor for Event();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, a2, v6);
  return swift_endAccess();
}

BOOL closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)()
{
  uint64_t v0;
  _BOOL8 v1;
  __int128 v3;
  uint64_t v4;

  v0 = Event.metrics.getter();
  specialized Dictionary.subscript.getter(v0, &v3);
  swift_bridgeObjectRelease();
  v1 = v4 != 0;
  outlined destroy of Sendable?((uint64_t)&v3);
  return v1;
}

uint64_t EventCollector.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EventCollector.__deallocating_deinit()
{
  EventCollector.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventCollector()
{
  return objc_opt_self();
}

uint64_t outlined destroy of Sendable?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in EventCollector.add(_:)()
{
  uint64_t v0;

  return closure #1 in EventCollector.add(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id @nonobjc VNCoreMLModel.__allocating_init(for:)(void *a1)
{
  void *v1;
  id v3;
  id v4;
  double v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelForMLModel_error_, a1, v7);
  v4 = v7[0];
  if (!v3)
  {
    OUTLINED_FUNCTION_8_37();

    swift_willThrow(v5);
  }

  return v3;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)(a1);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  v3 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_17;
  v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v3)
      break;
    v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v1)
      return v9;
LABEL_7:
    for (i = 4; ; ++i)
    {
      v3 = i - 4;
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22075AF48](i - 4, a1) : *(id *)(a1 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(v3, 1))
        break;
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
      {

        swift_release();
        return 0;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v1)
        return v9;
    }
    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_40();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_31();
  }
  OUTLINED_FUNCTION_3_40();
  _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_10_31();
  if (v1)
    goto LABEL_7;
  return v9;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.prediction(from:)(CGImageRef from)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_0_47();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v6);
  MLImageClassifier.performRequest(url:cgImage:)(v3, from);
  OUTLINED_FUNCTION_4_45();
  v7 = v2;
  v8 = v1;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t MLImageClassifier.performRequest(url:cgImage:)(void *a1, void *a2)
{
  id *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  id v27;
  NSURL *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  unint64_t v35;
  id v36;
  id v37;
  id v38;
  double v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  unint64_t v53;
  uint64_t v54;

  v51 = a1;
  v54 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v49 - v13;
  OUTLINED_FUNCTION_27_1(v15, &lazy cache variable for type metadata for VNCoreMLModel);
  v16 = @nonobjc VNCoreMLModel.__allocating_init(for:)(*v2);
  if (v3)
    return v11;
  v17 = v16;
  v49 = v11;
  v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9B30]), sel_initWithModel_, v16);
  outlined init with copy of URL?((uint64_t)v51, (uint64_t)v7);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of URL?((uint64_t)v7);
    if (!a2)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v45 = OUTLINED_FUNCTION_49_0();
      *v46 = 0xD000000000000019;
      v46[1] = 0x800000021AFF5B30;
      OUTLINED_FUNCTION_1_4(v45, (uint64_t)v46);

      return v11;
    }
    type metadata accessor for VNImageOption(0);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
    v18 = a2;
    Dictionary.init(dictionaryLiteral:)();
    v19 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
    v20 = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v18);
  }
  else
  {
    v51 = v17;
    v21 = v9;
    OUTLINED_FUNCTION_44_13((uint64_t)v14, (uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v23 = URL.path.getter();
    v24 = (void *)MEMORY[0x22075A8AC](v23);
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v22, sel_fileExistsAtPath_, v24);

    if ((v25 & 1) == 0)
    {
      v52 = 0;
      v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v52 = (id)0xD000000000000012;
      v53 = 0x800000021AFF5B50;
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._object = (void *)0x800000021AFF5B70;
      v41._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v41);
      v42 = v52;
      v11 = v53;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v43 = OUTLINED_FUNCTION_49_0();
      *v44 = v42;
      v44[1] = v11;
      OUTLINED_FUNCTION_1_4(v43, (uint64_t)v44);

      OUTLINED_FUNCTION_7_36();
      return v11;
    }
    v26 = v49;
    OUTLINED_FUNCTION_44_13(v49, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    type metadata accessor for VNImageOption(0);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
    Dictionary.init(dictionaryLiteral:)();
    v27 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
    v20 = @nonobjc VNImageRequestHandler.init(url:options:)(v26, v28);
    OUTLINED_FUNCTION_7_36();
    v17 = v51;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_21AFE8580;
  v30 = v50;
  *(_QWORD *)(v29 + 32) = v50;
  v52 = (id)v29;
  v31 = specialized Array._endMutation()();
  v32 = (void *)OUTLINED_FUNCTION_27_1(v31, &lazy cache variable for type metadata for VNRequest);
  v33 = v30;
  Array._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_9_33();
  v52 = 0;
  LODWORD(v30) = objc_msgSend(v20, sel_performRequests_error_, v32, &v52);

  v11 = (uint64_t)v52;
  if (!(_DWORD)v30)
  {
    v38 = v52;
    OUTLINED_FUNCTION_8_37();

LABEL_17:
    swift_willThrow(v39);

    return v11;
  }
  v33 = v33;
  v34 = (id)v11;
  v35 = outlined bridged method (ob) of @objc VNRequest.results.getter(v33);
  if (!v35 || (v11 = specialized _arrayConditionalCast<A, B>(_:)(v35), swift_bridgeObjectRelease(), !v11))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v47 = 0xD000000000000033;
    *(_QWORD *)(v47 + 8) = 0x800000021AFF5AF0;
    v39 = 0.0;
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    *(_BYTE *)(v47 + 48) = 0;
    goto LABEL_17;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v11 & 0xC000000000000001) == 0, v11);
  if ((v11 & 0xC000000000000001) != 0)
    MEMORY[0x22075AF48](0, v11);
  else
    v36 = *(id *)(v11 + 32);
  OUTLINED_FUNCTION_9_33();
  v37 = objc_msgSend((id)(v11 & 0xC000000000000001), sel_identifier);

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v11;
}

uint64_t MLImageClassifier.prediction(from:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_0_47();
  OUTLINED_FUNCTION_44_13((uint64_t)v2, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16));
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v5);
  MLImageClassifier.performRequest(url:cgImage:)(v2, 0);
  OUTLINED_FUNCTION_4_45();
  return v1;
}

unint64_t *MLImageClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v14[1] = v1;
    v17 = MEMORY[0x24BEE4AF8];
    v10 = &v17;
    specialized ContiguousArray.reserveCapacity(_:)();
    v11 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v15 = *(_QWORD *)(v5 + 72);
    v16 = v5;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v12(v7, v11, v4);
      static ImageReader.read(url:)();
      if (v2)
        break;
      OUTLINED_FUNCTION_5_35();
      v10 = &v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += v15;
      if (!--v8)
      {
        v9 = v17;
        goto LABEL_6;
      }
    }
    OUTLINED_FUNCTION_5_35();
    swift_release();
  }
  else
  {
LABEL_6:
    v10 = (unint64_t *)MLImageClassifier.performRequests(_:)(v9);
    swift_bridgeObjectRelease();
  }
  return v10;
}

id MLImageClassifier.performRequests(_:)(unint64_t a1)
{
  id *v1;
  uint64_t v2;
  id result;
  void *v5;
  void *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_27_1(a1, &lazy cache variable for type metadata for VNCoreMLModel);
  result = @nonobjc VNCoreMLModel.__allocating_init(for:)(*v1);
  if (!v2)
  {
    v5 = result;
    v7 = MEMORY[0x24BEE4AF8];
    v6 = (void *)MEMORY[0x22075B47C]();
    closure #1 in MLImageClassifier.performRequests(_:)((uint64_t)v5, a1, &v7);
    objc_autoreleasePoolPop(v6);

    return (id)v7;
  }
  return result;
}

void closure #1 in MLImageClassifier.performRequests(_:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  Class isa;
  unsigned int v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  void *v34;
  id v35;
  unint64_t v36;
  unint64_t v38;
  id v39;
  uint64_t v40;
  id v41[2];

  v41[1] = *(id *)MEMORY[0x24BDAC8D0];
  v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9B30]), sel_initWithModel_, a1);
  if (a2 >> 62)
    goto LABEL_26;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v38 = a2 & 0xC000000000000001;
    v5 = 4;
    v36 = a2;
    while (1)
    {
      v6 = v38 ? (id)MEMORY[0x22075AF48](v5 - 4, a2) : *(id *)(a2 + 8 * v5);
      v7 = v6;
      if (__OFADD__(v5 - 4, 1))
        break;
      type metadata accessor for VNImageOption(0);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
      v8 = v7;
      Dictionary.init(dictionaryLiteral:)();
      v9 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
      v10 = @nonobjc VNImageRequestHandler.init(ciImage:options:)(v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_21AFE8580;
      *(_QWORD *)(v11 + 32) = v39;
      v41[0] = (id)v11;
      specialized Array._endMutation()();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNRequest);
      v12 = v39;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v41[0] = 0;
      v14 = objc_msgSend(v10, sel_performRequests_error_, isa, v41);

      v15 = v41[0];
      if (!v14)
      {
        v35 = v41[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        v34 = v10;
        v10 = v8;
        goto LABEL_23;
      }
      v16 = v12;
      v17 = v15;
      v18 = outlined bridged method (ob) of @objc VNRequest.results.getter(v16);
      if (!v18 || (v19 = specialized _arrayConditionalCast<A, B>(_:)(v18), swift_bridgeObjectRelease(), !v19))
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = 0xD000000000000033;
        *(_QWORD *)(v32 + 8) = 0x800000021AFF5AF0;
        v33 = 0.0;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        v34 = v8;
LABEL_23:
        swift_willThrow(v33);

        return;
      }
      v40 = v5 - 3;
      if ((v19 & 0xC000000000000001) != 0)
      {
        v20 = (id)MEMORY[0x22075AF48](0, v19);
      }
      else
      {
        if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_25;
        v20 = *(id *)(v19 + 32);
      }
      v21 = v20;
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v21, sel_identifier);

      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      v26 = *a3;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v26 = v30;
        *a3 = v30;
      }
      v28 = *(_QWORD *)(v26 + 16);
      if (v28 >= *(_QWORD *)(v26 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v26 = v31;
        *a3 = v31;
      }
      *(_QWORD *)(v26 + 16) = v28 + 1;
      v29 = v26 + 16 * v28;
      *(_QWORD *)(v29 + 32) = v23;
      *(_QWORD *)(v29 + 40) = v25;

      ++v5;
      a2 = v36;
      if (v40 == v4)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
}

id @nonobjc VNImageRequestHandler.init(url:options:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v2;
  void *v3;
  void *v5;
  void *v6;
  Class isa;
  id v8;
  uint64_t v9;

  v3 = v2;
  URL._bridgeToObjectiveC()(a2);
  v6 = v5;
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v3, sel_initWithURL_options_, v6, isa);

  v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  return v8;
}

id @nonobjc VNImageRequestHandler.init(ciImage:options:)(void *a1)
{
  void *v1;
  Class isa;
  id v4;

  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_initWithCIImage_options_, a1, isa);

  return v4;
}

uint64_t outlined bridged method (ob) of @objc VNRequest.results.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_results);

  if (!v2)
    return 0;
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNObservation);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_0_47()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_3_40()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_45()
{
  uint64_t v0;

  return outlined destroy of URL?(v0);
}

uint64_t OUTLINED_FUNCTION_5_35()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 88) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_8_37()
{
  return _convertNSErrorToError(_:)();
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_31()
{
  return swift_bridgeObjectRelease();
}

uint64_t MLDataTable.group<A>(columnsNamed:aggregators:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v54 = (char *)&v47 - v16;
  v51 = *(_QWORD **)v5;
  v17 = *(unsigned __int8 *)(v5 + 8);
  v18 = MEMORY[0x22075BB18](0, v15);
  if (!v18)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v19 = v18;
  v58 = v11;
  v49 = v17;
  v50 = v14;
  v48 = a5;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v19;
  v53 = inited;
  *(_BYTE *)(inited + 24) = 1;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v56 = a2;
    v57 = a4;
    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain();
    v22 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      CMLFeatureValue.__allocating_init(_:)();
      v24 = v23;
      swift_bridgeObjectRelease();
      CMLSequence.append(_:)(v24);
      OUTLINED_FUNCTION_24_2();
      v22 += 16;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a2 = v56;
  }
  v25 = MEMORY[0x22075BB84](0);
  if (!v25)
    goto LABEL_22;
  v26 = v25;
  type metadata accessor for CMLAggregator();
  v27 = swift_initStackObject();
  *(_QWORD *)(v27 + 16) = v26;
  (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 16))(v13, a2, a3);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v28 = v59;
  if (v59)
  {
    v30 = v60;
    v29 = v61;
    do
    {
      OUTLINED_FUNCTION_52_1();
      v31 = swift_bridgeObjectRetain();
      outlined consume of FeatureVectorizer<Float>.Transformer?(v31);
      v32 = v28[2];
      v56 = v28;
      if (v32)
      {
        v57 = v30;
        v58 = v29;
        __asm { BR              X8 }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
      v28 = v59;
      v30 = v60;
      v29 = v61;
    }
    while (v59);
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v54, AssociatedTypeWitness);
  if ((v49 & 1) == 0)
  {
    v37 = *(_QWORD *)(v51[2] + 16);
    v38 = *(_QWORD *)(v53 + 16);
    v39 = *(_QWORD *)(v27 + 16);
    outlined copy of Result<_DataTable, Error>(v51, 0);
    v40 = specialized handling<A, B, C, D>(_:_:_:_:)(v37, v38, v39);
    v44 = v40;
    if (v40)
    {
      type metadata accessor for CMLTable();
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = v44;
      type metadata accessor for _DataTable();
      swift_allocObject();
      v36 = (uint64_t)_DataTable.init(impl:)(v45);
      OUTLINED_FUNCTION_9_34();
      result = OUTLINED_FUNCTION_24_2();
      v42 = 0;
      goto LABEL_20;
    }
LABEL_23:
    __break(1u);
    JUMPOUT(0x21AEEF53CLL);
  }
  v33 = v51;
  v59 = v51;
  outlined copy of Result<_DataTable, Error>(v51, 1);
  v34 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v35 = _getErrorEmbeddedNSError<A>(_:)();
  if (v35)
  {
    v36 = v35;
    OUTLINED_FUNCTION_204();
  }
  else
  {
    v36 = swift_allocError();
    *v41 = v59;
  }
  v42 = 1;
  OUTLINED_FUNCTION_204();
  swift_release();
  result = OUTLINED_FUNCTION_24_2();
LABEL_20:
  v46 = v48;
  *v48 = v36;
  *((_BYTE *)v46 + 8) = v42;
  return result;
}

uint64_t MLDataTable.Aggregator.operations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.Aggregator.operations.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*MLDataTable.Aggregator.operations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.Aggregator.columnName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  OUTLINED_FUNCTION_52_1();
  return v1;
}

uint64_t MLDataTable.Aggregator.columnName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MLDataTable.Aggregator.columnName.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.Aggregator.init(operations:of:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t outlined copy of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLDataTable.Aggregator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_52_1();
  return a1;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator()
{
  return &type metadata for MLDataTable.Aggregator;
}

uint64_t destroy for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  return outlined consume of MLDataTable.Aggregator.Operations(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MLDataTable.Aggregator.Operations(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MLDataTable.Aggregator.Operations(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for MLDataTable.Aggregator.Operations(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator.Operations()
{
  return &type metadata for MLDataTable.Aggregator.Operations;
}

void OUTLINED_FUNCTION_0_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;

  v5._countAndFlagsBits = v2;
  v5._object = v3;
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(*(Swift::String *)&a1, v5, *(Swift::String *)(v4 - 192));
}

uint64_t OUTLINED_FUNCTION_1_40()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_3_41(Swift::Bool a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  v6._countAndFlagsBits = v1;
  v6._object = v2;
  v7._countAndFlagsBits = v3;
  v7._object = v4;
  CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, v6, *(Swift::String *)(v5 - 192), v7);
}

uint64_t OUTLINED_FUNCTION_8_38()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_9_34()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  return swift_release();
}

void MLClassifierMetrics.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  OUTLINED_FUNCTION_20_3();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v25 = OUTLINED_FUNCTION_93();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&a9 - v30;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_14_5();
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&a9 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClassificationMetrics.init()();
  specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)((uint64_t)v31);
  specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)((uint64_t)v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  *(_QWORD *)v20 = 0;
  v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  v38 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v38(&v20[*(int *)(v37 + 20)], v31, v25);
  v38(&v20[*(int *)(v37 + 24)], v29, v25);
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v20, v24, type metadata accessor for MLClassifierMetrics.Contents);
  OUTLINED_FUNCTION_9_5();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v15 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v15;
  result = specialized _NativeSet.startIndex.getter(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7)
      goto LABEL_14;
    swift_bridgeObjectRetain();
    v10 = String.count.getter();
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v15 + 16);
    v11 = *(_QWORD *)(v15 + 24);
    if (v12 >= v11 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    *(_QWORD *)(v15 + 16) = v12 + 1;
    *(_QWORD *)(v15 + 8 * v12 + 32) = v10;
    result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    v5 = result;
    v7 = v13;
    v9 = v14 & 1;
    if (!--v1)
    {
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(result, v13, v14 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v5 = String.count.getter();
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL MLClassifierMetrics.isValid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;

  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  outlined init with copy of MLClassifierMetrics.Contents(v0, v1);
  v3 = OUTLINED_FUNCTION_84_4() < 2;
  outlined destroy of MLClassifierMetrics.Contents(v1, type metadata accessor for MLClassifierMetrics.Contents);
  return v3;
}

unint64_t MLClassifierMetrics.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t EnumCaseMultiPayload;
  void *v6;
  _QWORD v8[2];
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = v0;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (void **)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload > 1)
  {
    v6 = *v4;
    v9 = 0;
    v10 = 0xE000000000000000;
    v8[1] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();

  }
  else
  {
    OUTLINED_FUNCTION_39_15(EnumCaseMultiPayload, type metadata accessor for MLClassifierMetrics.Contents);
    v9 = 0xD000000000000023;
    v10 = 0x800000021AFF5BC0;
    v11._countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
    OUTLINED_FUNCTION_50_16(v11);
    OUTLINED_FUNCTION_15_0();
    v12._countAndFlagsBits = (uint64_t)MLClassifierMetrics.Contents.confusionMatrixDescription.getter();
    OUTLINED_FUNCTION_50_16(v12);
    OUTLINED_FUNCTION_15_0();
    v13._countAndFlagsBits = MLClassifierMetrics.precisionRecallDescription.getter();
    OUTLINED_FUNCTION_50_16(v13);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized ArraySlice.index(_:offsetBy:limitedBy:)(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[7];
  char v53;
  uint64_t v54;
  uint64_t v55;

  v42 = a1;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v40 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - v7;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v39 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v52[0] = v12;
  specialized MutableCollection<>.sort(by:)(v52);
  swift_bridgeObjectRelease();
  v13 = v52[0];
  v48 = v10;
  ClassificationMetrics.makeConfusionMatrix<>()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v46 = v8;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v43 = v6;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v44 = v2;
  Column.init(name:capacity:)();
  v14 = *(_QWORD *)(v13 + 16);
  v52[0] = 0;
  v52[1] = v14;
  v52[2] = 0;
  v52[3] = 0;
  v52[5] = 0;
  v52[6] = 0;
  v52[4] = v14;
  v53 = 1;
  v54 = 0;
  v55 = v14;
  v15 = specialized Product2Sequence.Iterator.next()();
  if ((v17 & 1) != 0)
  {
LABEL_13:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
    type metadata accessor for AnyColumn();
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_21AFE7F40;
    v33 = v46;
    Column.eraseToAnyColumn()();
    v34 = v43;
    Column.eraseToAnyColumn()();
    v35 = v45;
    v36 = v44;
    Column.eraseToAnyColumn()();
    v52[0] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], MEMORY[0x24BEE12C8]);
    DataFrame.init<A>(columns:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v35);
    v37 = *(void (**)(char *, uint64_t))(v40 + 8);
    v37(v34, v3);
    v37(v33, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v48, v49);
  }
  else
  {
    v18 = v15;
    v19 = v16;
    v20 = v13 + 32;
    v47 = xmmword_21AFE7F70;
    v21 = MEMORY[0x24BDBFCD0];
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v47;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, v21);
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~(_DWORD)v50 & 0x7F800000) == 0)
        break;
      if (*(float *)&v50 <= -9.2234e18)
        goto LABEL_15;
      if (*(float *)&v50 >= 9.2234e18)
        goto LABEL_16;
      v23 = (uint64_t)*(float *)&v50;
      if ((uint64_t)*(float *)&v50)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_17;
        if (v18 >= *(_QWORD *)(v13 + 16))
          goto LABEL_18;
        v24 = (uint64_t *)(v20 + 16 * v18);
        v26 = *v24;
        v25 = v24[1];
        v50 = v26;
        v51 = v25;
        Column.append(_:)();
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v19 >= *(_QWORD *)(v13 + 16))
          goto LABEL_20;
        v27 = (uint64_t *)(v20 + 16 * v19);
        v29 = *v27;
        v28 = v27[1];
        v50 = v29;
        v51 = v28;
        Column.append(_:)();
        v50 = v23;
        Column.append(_:)();
      }
      v18 = specialized Product2Sequence.Iterator.next()();
      v19 = v30;
      if ((v31 & 1) != 0)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[7];
  char v44;
  uint64_t v45;
  uint64_t v46;

  v35 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v34 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - v5;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - v8;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v33 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  v43[0] = v13;
  specialized MutableCollection<>.sort(by:)(v43);
  swift_bridgeObjectRelease();
  v14 = v43[0];
  v40 = v11;
  ClassificationMetrics.makeConfusionMatrix<>()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v38 = v9;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v36 = v6;
  Column.init(name:capacity:)();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  v37 = v3;
  Column.init(name:capacity:)();
  v15 = *(_QWORD *)(v14 + 16);
  v43[0] = 0;
  v43[1] = v15;
  v43[2] = 0;
  v43[3] = 0;
  v43[5] = 0;
  v43[6] = 0;
  v43[4] = v15;
  v44 = 1;
  v45 = 0;
  v46 = v15;
  v16 = specialized Product2Sequence.Iterator.next()();
  if ((v18 & 1) != 0)
  {
LABEL_13:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
    type metadata accessor for AnyColumn();
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_21AFE7F40;
    v28 = v38;
    Column.eraseToAnyColumn()();
    v29 = v36;
    Column.eraseToAnyColumn()();
    v30 = v37;
    Column.eraseToAnyColumn()();
    v43[0] = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], MEMORY[0x24BEE12C8]);
    DataFrame.init<A>(columns:)();
    v31 = *(void (**)(char *, uint64_t))(v34 + 8);
    v31(v30, v1);
    v31(v29, v1);
    v31(v28, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v40, v41);
  }
  else
  {
    v19 = v16;
    v20 = v17;
    v21 = v14 + 32;
    v39 = xmmword_21AFE7F70;
    v22 = MEMORY[0x24BDBFCD0];
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v39;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v20;
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, v22);
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~(_DWORD)v42 & 0x7F800000) == 0)
        break;
      if (*(float *)&v42 <= -9.2234e18)
        goto LABEL_15;
      if (*(float *)&v42 >= 9.2234e18)
        goto LABEL_16;
      v24 = (uint64_t)*(float *)&v42;
      if ((uint64_t)*(float *)&v42)
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_17;
        if (v19 >= *(_QWORD *)(v14 + 16))
          goto LABEL_18;
        v42 = *(_QWORD *)(v21 + 8 * v19);
        Column.append(_:)();
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v20 >= *(_QWORD *)(v14 + 16))
          goto LABEL_20;
        v42 = *(_QWORD *)(v21 + 8 * v20);
        Column.append(_:)();
        v42 = v24;
        Column.append(_:)();
      }
      v19 = specialized Product2Sequence.Iterator.next()();
      v20 = v25;
      if ((v26 & 1) != 0)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58[3];

  v48 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  MEMORY[0x24BDAC7A8](v1);
  v55 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v46 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v43 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>);
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v45 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v43 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v43 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v43 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v43 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  MEMORY[0x24BDAC7A8](v20);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v44 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRelease();
  ColumnID.init(_:_:)();
  v56 = v22;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  v51 = v19;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  v23 = v43;
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  DataFrame.init()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v25 = v24;
  swift_bridgeObjectRelease();
  v58[0] = v25;
  specialized MutableCollection<>.sort(by:)(v58);
  swift_bridgeObjectRelease();
  v47 = v58[0];
  v26 = *(char **)(v58[0] + 16);
  if (v26)
  {
    v27 = (char **)(v47 + 40);
    v49 = v8;
    do
    {
      v28 = (uint64_t)*(v27 - 1);
      v54 = *v27;
      v55 = v26;
      v58[0] = v28;
      v58[1] = (uint64_t)v54;
      swift_bridgeObjectRetain();
      Column.append(_:)();
      v29 = v3;
      v30 = v6;
      v31 = ClassificationMetrics.truePositiveCount(of:)();
      v32 = v23;
      v33 = ClassificationMetrics.falseNegativeCount(of:)();
      v57 = ClassificationMetrics.count(label:)();
      Column.append(_:)();
      v57 = v31;
      v6 = v30;
      v3 = v29;
      v8 = v49;
      Column.append(_:)();
      v57 = v33;
      v23 = v32;
      Column.append(_:)();
      v57 = ClassificationMetrics.falsePositiveCount(of:)();
      Column.append(_:)();
      ClassificationMetrics.precisionScore(label:)();
      v57 = v34;
      Column.append(_:)();
      ClassificationMetrics.recallScore(label:)();
      v57 = v35;
      Column.append(_:)();
      swift_bridgeObjectRelease();
      v27 += 2;
      v26 = v55 - 1;
    }
    while (v55 != (char *)1);
  }
  swift_release();
  DataFrame.append<A>(column:)();
  v36 = v51;
  DataFrame.append<A>(column:)();
  v37 = v52;
  DataFrame.append<A>(column:)();
  v38 = v53;
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  v39 = v23;
  v40 = *(void (**)(char *, uint64_t))(v46 + 8);
  v40(v6, v3);
  v40(v8, v3);
  v41 = *(void (**)(char *, uint64_t))(v45 + 8);
  v41(v39, v11);
  v41(v38, v11);
  v41(v37, v11);
  v41(v36, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v56, v50);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v43 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  MEMORY[0x24BDAC7A8](v1);
  v42 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v41 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>);
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v40 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v47 = (char *)&v39 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v39 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v39 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v39 - v21;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  v39 = *(_QWORD *)(ClassificationMetrics.labels.getter() + 16);
  swift_bridgeObjectRelease();
  ColumnID.init(_:_:)();
  v48 = v22;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  v45 = v20;
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  ColumnID.init(_:_:)();
  Column.init(_:capacity:)();
  DataFrame.init()();
  ClassificationMetrics.labels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v24 = v23;
  swift_bridgeObjectRelease();
  v51 = (char *)v24;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v51);
  swift_bridgeObjectRelease();
  v42 = v51;
  v25 = *((_QWORD *)v51 + 2);
  if (v25)
  {
    v26 = (uint64_t *)(v42 + 32);
    v44 = v3;
    do
    {
      v27 = *v26++;
      v51 = (char *)v27;
      Column.append(_:)();
      v28 = ClassificationMetrics.truePositiveCount(of:)();
      v29 = v8;
      v30 = v6;
      v31 = ClassificationMetrics.falseNegativeCount(of:)();
      v50 = ClassificationMetrics.count(label:)();
      Column.append(_:)();
      v50 = v28;
      Column.append(_:)();
      v50 = v31;
      v6 = v30;
      v8 = v29;
      v3 = v44;
      Column.append(_:)();
      v50 = ClassificationMetrics.falsePositiveCount(of:)();
      Column.append(_:)();
      ClassificationMetrics.precisionScore(label:)();
      v50 = v32;
      Column.append(_:)();
      ClassificationMetrics.recallScore(label:)();
      v50 = v33;
      Column.append(_:)();
      --v25;
    }
    while (v25);
  }
  swift_release();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  v34 = v46;
  DataFrame.append<A>(column:)();
  v35 = v47;
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  DataFrame.append<A>(column:)();
  v36 = *(void (**)(char *, uint64_t))(v41 + 8);
  v36(v6, v3);
  v36(v8, v3);
  v37 = *(void (**)(char *, uint64_t))(v40 + 8);
  v37(v13, v10);
  v37(v35, v10);
  v37(v34, v10);
  v37(v45, v10);
  return ((uint64_t (*)(char *, uint64_t))v37)(v48, v10);
}

uint64_t MLClassifierMetrics.init(classificationError:confusion:precisionRecall:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = *a2;
  v24 = *a1;
  v7 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  v15 = OUTLINED_FUNCTION_36_22(v7, v8, v9, v10, v11, v12, v13, v14, v24);
  OUTLINED_FUNCTION_36_22(v15, v16, v17, v18, v19, v20, v21, v22, v6);
  *a3 = a4;
  OUTLINED_FUNCTION_83_4();
  return swift_storeEnumTagMultiPayload();
}

uint64_t MLClassifierMetrics.error.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLClassifierMetrics.Contents(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 2)
    return *(_QWORD *)v3;
  outlined destroy of MLClassifierMetrics.Contents((uint64_t)v3, type metadata accessor for MLClassifierMetrics.Contents);
  return 0;
}

void MLClassifierMetrics.classificationError.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_8_39();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_1_41(v4, v6);
  v5 = OUTLINED_FUNCTION_51_2();
  if (v5)
  {
    if (v5 == 1)
    {
      OUTLINED_FUNCTION_33_22();
      OUTLINED_FUNCTION_30_23();
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents(v0, type metadata accessor for MLClassifierMetrics.Contents);
    }
  }
  else
  {
    OUTLINED_FUNCTION_5_36();
    AnyClassificationMetrics.accuracy.getter();
    OUTLINED_FUNCTION_26_27();
  }
  OUTLINED_FUNCTION_25_23();
}

void MLClassifierMetrics.Contents.accuracy.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_8_39();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_1_41(v4, v6);
  v5 = OUTLINED_FUNCTION_51_2();
  if (v5)
  {
    if (v5 == 1)
    {
      OUTLINED_FUNCTION_33_22();
      OUTLINED_FUNCTION_30_23();
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents(v0, type metadata accessor for MLClassifierMetrics.Contents);
    }
  }
  else
  {
    OUTLINED_FUNCTION_5_36();
    AnyClassificationMetrics.accuracy.getter();
    OUTLINED_FUNCTION_26_27();
  }
  OUTLINED_FUNCTION_25_23();
}

void MLClassifierMetrics.confusion.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_23_27();
  MLClassifierMetrics.confusionDataFrame.getter();
  OUTLINED_FUNCTION_31_23((uint64_t)&v8);
  if (v1)
  {
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_49_13();
    MLDataTable.renameImpl(named:to:)(0x6574636964657270, 0xEF7373616C635F64, 0x6574636964657250, 0xE900000000000064);
    if ((v9 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_49_13();
    v4 = OUTLINED_FUNCTION_51_18();
    MLDataTable.renameImpl(named:to:)(v4, v5, 0x62614C2065757254, 0xEA00000000006C65);
    if ((v9 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_49_13();
    MLDataTable.renameImpl(named:to:)(0x746E756F63, 0xE500000000000000, 0x746E756F43, 0xE500000000000000);
    v6 = v8;
    v7 = v9;
    if ((v9 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_16_4();
    }
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = v7;
    OUTLINED_FUNCTION_125();
  }
}

void MLClassifierMetrics.confusionDataFrame.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29[4];
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_20_3();
  v30 = v6;
  v31 = v0;
  v29[3] = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_22_23(v8, v29[0]);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  v10 = OUTLINED_FUNCTION_42_16(v9);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_38_18();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_6_39(v17, v29[0]);
  v18 = OUTLINED_FUNCTION_41_18();
  if (!(_DWORD)v18)
  {
    v23 = v4;
    v24 = v29[1];
    OUTLINED_FUNCTION_40_18(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    OUTLINED_FUNCTION_35_16(v25, v26, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    v27 = OUTLINED_FUNCTION_84_4();
    v28 = v30;
    if (v27 == 1)
    {
      OUTLINED_FUNCTION_16_28();
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v28);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v24);
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v28);
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v23, v2);
    }
    v22 = (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics;
    v21 = (uint64_t)v15;
    goto LABEL_9;
  }
  if ((_DWORD)v18 == 1)
  {
    OUTLINED_FUNCTION_21_27();
    v20 = OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_14_28(v20);
    v21 = v1;
    v22 = type metadata accessor for MLClassifierMetrics.Precomputed;
LABEL_9:
    outlined destroy of MLClassifierMetrics.Contents(v21, v22);
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_39_15(v18, type metadata accessor for MLClassifierMetrics.Contents);
  DataFrame.init()();
LABEL_10:
  OUTLINED_FUNCTION_9_5();
}

uint64_t specialized Product2Sequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    v2 = *(_QWORD *)(v0 + 8);
    result = *(_QWORD *)(v0 + 16);
    if (result == v2)
    {
LABEL_10:
      result = 0;
      *(_QWORD *)(v0 + 48) = 0;
      *(_BYTE *)(v0 + 56) = 1;
      return result;
    }
    if (v2 < *(_QWORD *)v0)
      goto LABEL_26;
    if (result < *(_QWORD *)v0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (result >= v2)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_QWORD *)(v0 + 16) = result + 1;
    *(_QWORD *)(v0 + 48) = result;
    *(_BYTE *)(v0 + 56) = 0;
  }
  else
  {
    result = *(_QWORD *)(v0 + 48);
  }
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if (v3 != v4)
  {
    v6 = *(_QWORD *)(v0 + 24);
    if (v4 < v6)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v3 < v6)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v3 >= v4)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_14:
    *(_QWORD *)(v0 + 40) = v3 + 1;
    return result;
  }
  v5 = *(_QWORD *)(v0 + 8);
  result = *(_QWORD *)(v0 + 16);
  if (result == v5)
    goto LABEL_10;
  if (v5 < *(_QWORD *)v0)
    goto LABEL_29;
  if (result < *(_QWORD *)v0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (result >= v5)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_BYTE *)(v0 + 56) = 0;
  v3 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = result + 1;
  *(_QWORD *)(v0 + 24) = v3;
  *(_QWORD *)(v0 + 32) = v7;
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = result;
  if (v3 == v7)
    return 0;
  if (v7 >= v3)
  {
    if (v3 >= v7)
    {
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_14;
  }
LABEL_32:
  __break(1u);
  return result;
}

void MLClassifierMetrics.precisionRecall.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_23_27();
  MLClassifierMetrics.precisionRecallDataFrame.getter();
  OUTLINED_FUNCTION_31_23(a1);
  if (v1)
  {
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_125();
  }
}

void MLClassifierMetrics.precisionRecallDataFrame.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29[4];
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_20_3();
  v30 = v6;
  v31 = v0;
  v29[3] = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_22_23(v8, v29[0]);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  v10 = OUTLINED_FUNCTION_42_16(v9);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_38_18();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_6_39(v17, v29[0]);
  v18 = OUTLINED_FUNCTION_41_18();
  if (!(_DWORD)v18)
  {
    v23 = v4;
    v24 = v29[1];
    OUTLINED_FUNCTION_40_18(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    OUTLINED_FUNCTION_35_16(v25, v26, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    v27 = OUTLINED_FUNCTION_84_4();
    v28 = v30;
    if (v27 == 1)
    {
      OUTLINED_FUNCTION_16_28();
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v28);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v24);
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v28);
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v23, v2);
    }
    v22 = (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics;
    v21 = (uint64_t)v15;
    goto LABEL_9;
  }
  if ((_DWORD)v18 == 1)
  {
    OUTLINED_FUNCTION_21_27();
    v20 = OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_14_28(v20);
    v21 = v1;
    v22 = type metadata accessor for MLClassifierMetrics.Precomputed;
LABEL_9:
    outlined destroy of MLClassifierMetrics.Contents(v21, v22);
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_39_15(v18, type metadata accessor for MLClassifierMetrics.Contents);
  DataFrame.init()();
LABEL_10:
  OUTLINED_FUNCTION_9_5();
}

void MLClassifierMetrics.Contents.stringLabels.getter()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;

  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_10_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_1_41(v7, v11);
  v8 = OUTLINED_FUNCTION_51_2();
  if (v8)
  {
    if (v8 != 1)
    {

      goto LABEL_7;
    }
    OUTLINED_FUNCTION_5_36();
    MLClassifierMetrics.Precomputed.stringLabels.getter();
    v9 = v0;
    v10 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    OUTLINED_FUNCTION_32_20();
    AnyClassificationMetrics.stringLabels.getter();
    v9 = (uint64_t)v5;
    v10 = (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLClassifierMetrics.Contents(v9, v10);
LABEL_7:
  OUTLINED_FUNCTION_164();
}

void MLClassifierMetrics.Precomputed.stringLabels.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  _QWORD v48[5];
  uint64_t v49;

  OUTLINED_FUNCTION_20_3();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnyColumn();
  v44 = *(_QWORD *)(v11 - 8);
  v45 = v11;
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_9_35();
  v12 = OUTLINED_FUNCTION_51_18();
  MEMORY[0x220758A1C](v12);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    v26 = v1;
    v27 = v41;
    v28 = v42;
    v46 = v0;
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      v48[0] = 0;
      v48[1] = 0xE000000000000000;
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
      OptionalColumnProtocol.filled(with:)();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      specialized Set.init<A>(_:)();
      v25 = OUTLINED_FUNCTION_43_17();
      goto LABEL_12;
    }
    lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
    v30 = v45;
    v31 = dispatch thunk of Collection.count.getter();
    v32 = MEMORY[0x24BEE4AF8];
    if (v31)
    {
      v33 = v31;
      v49 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_47_18();
      dispatch thunk of Collection.startIndex.getter();
      if (v33 < 0)
        goto LABEL_23;
      do
      {
        v34 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v35, (uint64_t)v47, &demangling cache variable for type metadata for Any?);
        v34(v48, 0);
        outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>((uint64_t)v47, (uint64_t)v48, &demangling cache variable for type metadata for Any?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        v36 = String.init<A>(describing:)();
        v38 = v37;
        outlined destroy of Any?((uint64_t)v47);
        v32 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_45_18();
          v32 = v49;
        }
        v39 = *(_QWORD *)(v32 + 16);
        if (v39 >= *(_QWORD *)(v32 + 24) >> 1)
        {
          OUTLINED_FUNCTION_45_18();
          v32 = v49;
        }
        *(_QWORD *)(v32 + 16) = v39 + 1;
        v40 = v32 + 16 * v39;
        *(_QWORD *)(v40 + 32) = v36;
        *(_QWORD *)(v40 + 40) = v38;
        dispatch thunk of Collection.formIndex(after:)();
        --v33;
      }
      while (v33);
    }
    specialized Set.init<A>(_:)(v32);
    v25 = OUTLINED_FUNCTION_43_17();
    v29 = v30;
    goto LABEL_13;
  }
  AnyColumn.assumingType<A>(_:)();
  v48[0] = 0;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5F90]);
  OptionalColumnProtocol.filled(with:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, MEMORY[0x24BDF5E58]);
  v13 = dispatch thunk of Collection.count.getter();
  v14 = MEMORY[0x24BEE4AF8];
  if (!v13)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v8);
    specialized Set.init<A>(_:)(v14);
    v24 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v25 = v0;
LABEL_12:
    v29 = v45;
LABEL_13:
    v24(v25, v29);
    OUTLINED_FUNCTION_9_5();
    return;
  }
  v15 = v13;
  v47[0] = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_47_18();
  v14 = v47[0];
  dispatch thunk of Collection.startIndex.getter();
  if ((v15 & 0x8000000000000000) == 0)
  {
    v46 = v0;
    do
    {
      v16 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v18 = *v17;
      v16(v48, 0);
      v48[0] = v18;
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v21 = v20;
      v47[0] = v14;
      v22 = *(_QWORD *)(v14 + 16);
      if (v22 >= *(_QWORD *)(v14 + 24) >> 1)
      {
        OUTLINED_FUNCTION_45_18();
        v14 = v47[0];
      }
      *(_QWORD *)(v14 + 16) = v22 + 1;
      v23 = v14 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v21;
      dispatch thunk of Collection.formIndex(after:)();
      --v15;
    }
    while (v15);
    v0 = v46;
    goto LABEL_9;
  }
  __break(1u);
LABEL_23:
  __break(1u);
}

void MLClassifierMetrics.Contents.labelCount.getter()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;

  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_10_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_1_41(v7, v11);
  v8 = OUTLINED_FUNCTION_51_2();
  if (v8)
  {
    if (v8 != 1)
    {

      goto LABEL_7;
    }
    OUTLINED_FUNCTION_5_36();
    MLClassifierMetrics.Precomputed.stringLabels.getter();
    swift_bridgeObjectRelease();
    v9 = v0;
    v10 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    OUTLINED_FUNCTION_32_20();
    AnyClassificationMetrics.labelCount.getter();
    v9 = (uint64_t)v5;
    v10 = (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLClassifierMetrics.Contents(v9, v10);
LABEL_7:
  OUTLINED_FUNCTION_164();
}

void MLClassifierMetrics.Contents.exampleCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);

  OUTLINED_FUNCTION_20_3();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_35();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_91_1();
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_54_0();
  outlined init with copy of MLClassifierMetrics.Contents(v0, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLClassifierMetrics.Contents(v4, type metadata accessor for MLClassifierMetrics.Contents);
      goto LABEL_7;
    }
    outlined init with take of MLClassifierMetrics.Precomputed(v4, v2, type metadata accessor for MLClassifierMetrics.Precomputed);
    DataFrame.subscript.getter();
    Column<A>.sum()();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
    v11 = v2;
    v12 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v4, v3, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.exampleCount.getter();
    v11 = v3;
    v12 = (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLClassifierMetrics.Contents(v11, v12);
LABEL_7:
  OUTLINED_FUNCTION_9_5();
}

unint64_t MLClassifierMetrics.accuracyDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  Swift::String v6;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  MLClassifierMetrics.Contents.exampleCount.getter();
  v0._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  MLClassifierMetrics.Contents.labelCount.getter();
  v1._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v1);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_28_7();
  v2._countAndFlagsBits = 0xD000000000000013;
  v2._object = (void *)0x800000021AFF5CF0;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_15_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21AFE7DA0;
  MLClassifierMetrics.Contents.accuracy.getter();
  v4 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v3 + 56) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v3 + 64) = v4;
  *(double *)(v3 + 32) = v5 * 100.0;
  v6._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t type metadata accessor for MLClassifierMetrics.Contents(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Contents);
}

uint64_t outlined init with copy of MLClassifierMetrics.Contents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *MLClassifierMetrics.Contents.confusionMatrixDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  void **v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *result;
  _QWORD v64[2];
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  Swift::String v77;
  _QWORD *v78[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLClassifierMetrics.Contents.stringLabels.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  v78[0] = v5;
  specialized MutableCollection<>.sort(by:)((uint64_t *)v78);
  v65 = v1;
  swift_bridgeObjectRelease();
  v6 = v78[0];
  MLClassifierMetrics.Contents.confusionMatrix(labels:)(v78[0], (uint64_t)v3);
  ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n((uint64_t)v6);
  v8 = specialized Sequence<>.max()(ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = v8;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
  v73 = v3;
  v74 = v0;
  v72 = v12;
  v13 = MLShapedArrayProtocol.scalars.getter();
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v70 = v11;
    *(_QWORD *)&v71 = v6;
    v78[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v15 = 0;
    v16 = v78[0];
    while (1)
    {
      v17 = *(float *)(v13 + 4 * v15 + 32);
      if ((~LODWORD(v17) & 0x7F800000) == 0)
        break;
      if (v17 <= -9.2234e18)
        goto LABEL_48;
      if (v17 >= 9.2234e18)
        goto LABEL_49;
      v77._countAndFlagsBits = (uint64_t)v17;
      dispatch thunk of CustomStringConvertible.description.getter();
      v18 = String.count.getter();
      swift_bridgeObjectRelease();
      v78[0] = v16;
      v20 = v16[2];
      v19 = v16[3];
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v16 = v78[0];
      }
      ++v15;
      v16[2] = v20 + 1;
      v16[v20 + 4] = v18;
      if (v14 == v15)
      {
        swift_bridgeObjectRelease();
        v11 = v70;
        v6 = (_QWORD *)v71;
        goto LABEL_14;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_14:
  v21 = specialized Sequence<>.max()(v16);
  v23 = v22;
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
    v24 = 0;
  else
    v24 = v21;
  if (v24 <= v11)
    v24 = v11;
  if (__OFADD__(v24, 1))
    goto LABEL_51;
  v25 = String.count.getter();
  if (v25 <= v11)
    v26 = v11;
  else
    v26 = v25;
  v68 = v26 + 1;
  if (__OFADD__(v26, 1))
    goto LABEL_52;
  v27 = specialized Collection.prefix(_:)(20, (uint64_t)v6);
  v67 = v28;
  v30 = v29;
  v32 = v31;
  v78[0] = (_QWORD *)0xD00000000000001ELL;
  v78[1] = (_QWORD *)0x800000021AFF5C90;
  if (v6[2] >= 0x15uLL)
  {
    v77._countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v77._countAndFlagsBits = 0xD000000000000010;
    v77._object = (void *)0x800000021AFF5CB0;
    v75 = 20;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 762929709;
    v34._object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    v75 = 20;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0xA2A2A2A2A2029;
    v36._object = (void *)0xE700000000000000;
    String.append(_:)(v36);
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
  }
  v37._countAndFlagsBits = 0xD000000000000023;
  v37._object = (void *)0x800000021AFF5BC0;
  String.append(_:)(v37);
  v77._countAndFlagsBits = 0x6572505C65757254;
  v77._object = (void *)0xE900000000000064;
  v75 = 32;
  v76 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v38._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  if (v30 != v32 >> 1)
  {
    v40 = v32 >> 1;
    if (v30 >= (uint64_t)(v32 >> 1))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v64[1] = v27;
    swift_unknownObjectRetain();
    v41 = v30;
    v42 = (void **)(v67 + 16 * v30 + 8);
    v66 = v32 >> 1;
    do
    {
      v43 = *v42;
      v77._countAndFlagsBits = (uint64_t)*(v42 - 1);
      v77._object = v43;
      v75 = 32;
      v76 = 0xE100000000000000;
      v44._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      --v40;
      v42 += 2;
    }
    while (v41 != v40);
    swift_unknownObjectRelease();
    v45._countAndFlagsBits = 10;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46 = v66 - v41;
    if (__OFSUB__(v66, v41))
      goto LABEL_54;
    if (v46 < 0)
    {
LABEL_55:
      __break(1u);
      result = (_QWORD *)swift_release();
      __break(1u);
      return result;
    }
    v47 = v41;
    swift_unknownObjectRetain();
    v48 = 0;
    v49 = 1;
    v71 = xmmword_21AFE7F70;
    while (1)
    {
      v69 = v47;
      v70 = v49;
      v50 = *(void **)(v67 + 16 * v47 + 8);
      v77._countAndFlagsBits = *(_QWORD *)(v67 + 16 * v47);
      v77._object = v50;
      v75 = 32;
      v76 = 0xE100000000000000;
      v51._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      if (v46)
        break;
LABEL_40:
      v59._countAndFlagsBits = 10;
      v59._object = (void *)0xE100000000000000;
      String.append(_:)(v59);
      v48 = v70;
      if (__OFADD__(v70, 1))
        goto LABEL_50;
      v47 = v69 + 1;
      v49 = v70 + 1;
      if (v69 + 1 == v66)
      {
        swift_unknownObjectRelease();
        goto LABEL_43;
      }
    }
    v52 = 0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v71;
      *(_QWORD *)(v53 + 32) = v48;
      *(_QWORD *)(v53 + 40) = v52;
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      if ((~LODWORD(v77._countAndFlagsBits) & 0x7F800000) == 0)
        break;
      if (*(float *)&v77._countAndFlagsBits <= -9.2234e18)
        goto LABEL_45;
      if (*(float *)&v77._countAndFlagsBits >= 9.2234e18)
        goto LABEL_46;
      ++v52;
      v77._countAndFlagsBits = (uint64_t)*(float *)&v77._countAndFlagsBits;
      v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      v77._object = v54;
      v75 = 32;
      v76 = 0xE100000000000000;
      v55 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      v57 = v56;
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = v55;
      v58._object = v57;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      if (v46 == v52)
        goto LABEL_40;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v39._countAndFlagsBits = 10;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
LABEL_43:
  v61 = v73;
  v60 = v74;
  v62 = v65;
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v60);
  return v78[0];
}

uint64_t MLClassifierMetrics.precisionRecallDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  Swift::String v43;
  Swift::String v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void (**v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v50 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v60 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v46 - v3;
  v5 = type metadata accessor for AnyColumn();
  v56 = *(void (***)(char *, uint64_t))(v5 - 8);
  v57 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (void (**)(char *, uint64_t))((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DataFrame();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLClassifierMetrics.precisionRecallDataFrame.getter();
  if ((DataFrameProtocol.isEmpty.getter() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  v47 = v12;
  v48 = v11;
  v49 = v8;
  v58 = v0;
  v59 = v4;
  MLClassifierMetrics.Contents.stringLabels.getter();
  ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(v16);
  swift_bridgeObjectRelease();
  v18 = specialized Sequence<>.max()(ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  v20 = v19;
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = v18;
  v67 = 0xD000000000000041;
  v68 = 0x800000021AFF5C20;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v22 = swift_allocObject();
  v54 = xmmword_21AFE7F40;
  *(_OWORD *)(v22 + 16) = xmmword_21AFE7F40;
  v65 = 0x7373616C43;
  v66 = 0xE500000000000000;
  v63 = 32;
  v64 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v23 = MEMORY[0x24BEE0D00];
  v53 = v21;
  v24 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  v26 = v25;
  *(_QWORD *)(v22 + 56) = v23;
  v27 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  *(_QWORD *)(v22 + 96) = v23;
  *(_QWORD *)(v22 + 104) = v27;
  *(_QWORD *)(v22 + 64) = v27;
  strcpy((char *)(v22 + 72), "Precision(%)");
  *(_BYTE *)(v22 + 85) = 0;
  *(_WORD *)(v22 + 86) = -5120;
  *(_QWORD *)(v22 + 136) = v23;
  *(_QWORD *)(v22 + 144) = v27;
  v52 = v27;
  *(_QWORD *)(v22 + 112) = 0x25286C6C61636552;
  *(_QWORD *)(v22 + 120) = 0xE900000000000029;
  v28._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v51;
  MEMORY[0x220758A1C](0x7373616C63, 0xE500000000000000);
  AnyColumn.convertedToStrings()((uint64_t)v10);
  v56[1](v29, v57);
  v30 = MEMORY[0x24BEE13C8];
  DataFrame.subscript.getter();
  DataFrame.subscript.getter();
  result = Column.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v31 = result;
    v46 = v14;
    v56 = v10;
    v57 = v7;
    v32 = v58;
    if (!result)
    {
LABEL_14:
      v44._countAndFlagsBits = 10;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v45 = *(void (**)(char *, uint64_t))(v50 + 8);
      v45(v60, v32);
      v45(v59, v32);
      (*(void (**)(char *, uint64_t))(v49 + 8))((char *)v56, v57);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
      return v67;
    }
    v33 = 0;
    v34 = MEMORY[0x24BEE1448];
    v51 = (char *)0x800000021AFF5C70;
    v35 = MEMORY[0x24BEE0D00];
    while (v31 != v33)
    {
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = v54;
      result = Column.subscript.getter();
      if (!v66)
        goto LABEL_18;
      v63 = v65;
      v64 = v66;
      v61 = 32;
      v62 = 0xE100000000000000;
      v37 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
      v39 = v38;
      swift_bridgeObjectRelease();
      v40 = v52;
      *(_QWORD *)(v36 + 56) = v35;
      *(_QWORD *)(v36 + 64) = v40;
      *(_QWORD *)(v36 + 32) = v37;
      *(_QWORD *)(v36 + 40) = v39;
      v32 = v58;
      result = Column.subscript.getter();
      if ((v66 & 1) != 0)
        goto LABEL_19;
      v41 = *(double *)&v65 * 100.0;
      *(_QWORD *)(v36 + 96) = v30;
      *(_QWORD *)(v36 + 104) = v34;
      *(double *)(v36 + 72) = v41;
      result = Column.subscript.getter();
      if ((v66 & 1) != 0)
        goto LABEL_20;
      ++v33;
      v42 = *(double *)&v65 * 100.0;
      *(_QWORD *)(v36 + 136) = v30;
      *(_QWORD *)(v36 + 144) = v34;
      *(double *)(v36 + 112) = v42;
      v43._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v43);
      result = swift_bridgeObjectRelease();
      if (v31 == v33)
        goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void MLClassifierMetrics.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v2 = MLClassifierMetrics.accuracyDescription.getter();
  v4 = v3;
  v5 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v2, v4, 0);
  v7 = v6;
  a1[3] = type metadata accessor for NSAttributedString();
  *a1 = v7;
  OUTLINED_FUNCTION_125();
}

void MLClassifierMetrics.Contents.confusionMatrix(labels:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD *);
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t *, _QWORD);
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t *, _QWORD);
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  _QWORD *v93;
  uint64_t v94;
  char v96;
  _QWORD *v97;
  unint64_t v98;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;

  v131 = a1;
  v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v135 = *(_QWORD *)(v123 - 8);
  v3 = MEMORY[0x24BDAC7A8](v123);
  v121 = (uint64_t)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v134 = (char *)&v111 - v5;
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  v122 = *(_QWORD *)(v130 - 8);
  v6 = MEMORY[0x24BDAC7A8](v130);
  v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v127 = (char *)&v111 - v9;
  v139 = (_QWORD *)type metadata accessor for AnyColumn();
  v10 = *(v139 - 1);
  MEMORY[0x24BDAC7A8](v139);
  v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v13 = *(_QWORD *)(v141 - 8);
  v14 = MEMORY[0x24BDAC7A8](v141);
  v125 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v137 = (char *)&v111 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v111 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  v142 = *(_QWORD *)(v20 - 8);
  v143 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v124 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v136 = (char *)&v111 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v129 = (char *)&v111 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v138 = (char *)&v111 - v27;
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v113 = *(_QWORD *)(v128 - 8);
  MEMORY[0x24BDAC7A8](v128);
  v126 = (char *)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  MEMORY[0x24BDAC7A8](v29);
  v114 = (uint64_t)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AnyClassificationMetrics();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v111 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for MLClassifierMetrics.Contents(0);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (id *)((char *)&v111 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MLClassifierMetrics.Contents(v140, (uint64_t)v36);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v36, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.makeConfusionMatrix()(v101, v102, v103, v104, v105, v106, v107, v108, (uint64_t)v111, v112, v113, v114, (uint64_t)v115, v116, v117, *((uint64_t *)&v117 + 1), v118, v119, (uint64_t)v120,
      v121);
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    return;
  }
  if (EnumCaseMultiPayload != 1)
  {

    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
    MLShapedArrayProtocol.init(arrayLiteral:)();
    return;
  }
  v112 = a2;
  outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v36, v114, type metadata accessor for MLClassifierMetrics.Precomputed);
  LODWORD(v144) = 0;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v38 = swift_allocObject();
  v117 = xmmword_21AFE7F70;
  *(_OWORD *)(v38 + 16) = xmmword_21AFE7F70;
  v39 = v131[2];
  *(_QWORD *)(v38 + 32) = v39;
  *(_QWORD *)(v38 + 40) = v39;
  v140 = v39;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
  v116 = v40;
  MLShapedArrayProtocol.init(repeating:shape:)();
  MEMORY[0x220758A1C](0x7373616C63, 0xE500000000000000);
  AnyColumn.convertedToStrings()((uint64_t)v19);
  v41 = *(void (**)(char *, _QWORD *))(v10 + 8);
  v42 = v139;
  v41(v12, v139);
  v144 = 0;
  v145 = 0xE000000000000000;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
  v43 = v141;
  OptionalColumnProtocol.filled(with:)();
  v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  v44(v19, v43);
  MEMORY[0x220758A1C](0x6574636964657270, 0xEF7373616C635F64);
  AnyColumn.convertedToStrings()((uint64_t)v19);
  v41(v12, v42);
  v144 = 0;
  v145 = 0xE000000000000000;
  OptionalColumnProtocol.filled(with:)();
  v139 = v44;
  v44(v19, v43);
  v45 = v134;
  DataFrame.subscript.getter();
  v144 = 0;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5F90]);
  v46 = v123;
  OptionalColumnProtocol.filled(with:)();
  v115 = *(void (**)(char *, uint64_t))(v135 + 8);
  v115(v45, v46);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, MEMORY[0x24BDF5E58]);
  v47 = v130;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v48 = dispatch thunk of Collection.distance(from:to:)();
  if (v48 < 0)
    goto LABEL_75;
  v49 = v48;
  v51 = v142;
  v50 = v143;
  if (!v48)
  {
LABEL_72:
    (*(void (**)(char *, uint64_t))(v122 + 8))(v127, v47);
    v109 = v50;
    v110 = *(void (**)(char *, uint64_t))(v51 + 8);
    v110(v129, v109);
    v110(v138, v109);
    outlined destroy of MLClassifierMetrics.Contents(v114, type metadata accessor for MLClassifierMetrics.Precomputed);
    (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v112, v126, v128);
    return;
  }
  v52 = 0;
  v111 = v131 + 9;
  v120 = v8;
  v133 = v48;
  while (v52 != v49)
  {
    v146 = v52;
    v53 = v137;
    v54 = v138;
    FilledColumn.base.getter();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5FA0]);
    v55 = v141;
    v56 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v59 = *v57;
    v58 = v57[1];
    swift_bridgeObjectRetain();
    v56(&v144, 0);
    v60 = v53;
    v61 = v136;
    v62 = v55;
    v51 = v142;
    v50 = v143;
    ((void (*)(char *, uint64_t))v139)(v60, v62);
    v63 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v63(v61, v54, v50);
    if (v58)
    {
      v64 = *(void (**)(char *, uint64_t))(v51 + 8);
      v64(v61, v50);
    }
    else
    {
      FilledColumn.defaultValue.getter();
      v64 = *(void (**)(char *, uint64_t))(v51 + 8);
      v64(v61, v50);
      v59 = v144;
      v58 = v145;
    }
    if (v140)
    {
      v65 = v131[4];
      v66 = v131[5];
      v67 = v65 == v59 && v66 == v58;
      if (v67 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v135 = v65;
        v68 = 0;
      }
      else
      {
        if (v140 == 1)
          goto LABEL_37;
        v91 = v131[6] == v59 && v131[7] == v58;
        v135 = v65;
        if (!v91 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v93 = v111;
          v94 = 2;
          while (1)
          {
            v68 = v94;
            if (v140 == v94)
              break;
            if (*(v93 - 1) != v59 || *v93 != v58)
            {
              v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v94 = v68 + 1;
              v93 += 2;
              if ((v96 & 1) == 0)
                continue;
            }
            goto LABEL_17;
          }
LABEL_37:
          swift_bridgeObjectRelease();
          v47 = v130;
          v50 = v143;
          goto LABEL_20;
        }
        v68 = 1;
      }
LABEL_17:
      v134 = (char *)v64;
      v132 = v68;
      swift_bridgeObjectRelease();
      v146 = v52;
      v69 = v125;
      v70 = v143;
      v71 = v129;
      FilledColumn.base.getter();
      v72 = v141;
      v73 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v76 = *v74;
      v75 = v74[1];
      swift_bridgeObjectRetain();
      v73(&v144, 0);
      v77 = v72;
      v50 = v70;
      ((void (*)(char *, uint64_t))v139)(v69, v77);
      v78 = v124;
      v63(v124, v71, v70);
      if (v75)
      {
        ((void (*)(char *, uint64_t))v134)(v78, v70);
      }
      else
      {
        FilledColumn.defaultValue.getter();
        ((void (*)(char *, uint64_t))v134)(v78, v70);
        v76 = v144;
        v75 = v145;
      }
      v79 = (uint64_t)v120;
      if (v135 == v76 && v66 == v75)
      {
        v81 = 0;
LABEL_30:
        swift_bridgeObjectRelease();
        v82 = swift_allocObject();
        *(_OWORD *)(v82 + 16) = v117;
        *(_QWORD *)(v82 + 32) = v132;
        *(_QWORD *)(v82 + 40) = v81;
        v146 = v52;
        v83 = v121;
        v47 = v130;
        v84 = v127;
        FilledColumn.base.getter();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5FA0]);
        v85 = v123;
        v86 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        v88 = *(_QWORD *)v87;
        v89 = *(_BYTE *)(v87 + 8);
        v86(&v144, 0);
        v115((char *)v83, v85);
        v90 = v122;
        (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v79, v84, v47);
        if ((v89 & 1) != 0)
        {
          FilledColumn.defaultValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v79, v47);
          v88 = v144;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v79, v47);
        }
        v49 = v133;
        *(float *)&v144 = (float)v88;
        MLShapedArrayProtocol.subscript.setter();
        v51 = v142;
        v50 = v143;
        goto LABEL_34;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v81 = 0;
        goto LABEL_30;
      }
      v51 = v142;
      if (v140 == 1)
      {
        swift_bridgeObjectRelease();
        v47 = v130;
      }
      else
      {
        v92 = v131[6] == v76 && v131[7] == v75;
        if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v81 = 1;
          goto LABEL_30;
        }
        v97 = v111;
        v98 = 2;
        v47 = v130;
        while (1)
        {
          v81 = v98;
          if (v140 == v98)
            break;
          if (v98 >= v140)
            goto LABEL_74;
          if (*(v97 - 1) != v76 || *v97 != v75)
          {
            v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v98 = v81 + 1;
            v97 += 2;
            if ((v100 & 1) == 0)
              continue;
          }
          goto LABEL_30;
        }
        swift_bridgeObjectRelease();
        v51 = v142;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_20:
    v49 = v133;
LABEL_34:
    if (++v52 == v49)
      goto LABEL_72;
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

uint64_t type metadata accessor for MLClassifierMetrics.Precomputed(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Precomputed);
}

void outlined destroy of MLClassifierMetrics.Contents(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_22();
}

void outlined init with take of MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_22();
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics(char *a1, char **a2)
{
  int v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for MLClassifierMetrics.Contents(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v12[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = *a2;
      v14 = v13;
      *(_QWORD *)a1 = v13;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *a2;
      v6 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for DataFrame();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(v8, v9, v10);
      v11(&a1[*(int *)(v6 + 24)], (char *)a2 + *(int *)(v6 + 24), v10);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLClassifierMetrics(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  void (*v9)(id *, uint64_t);
  void (*v10)(char *, uint64_t);

  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      return;
    case 1:
      v4 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v5 = (char *)a1 + *(int *)(v4 + 20);
      v6 = type metadata accessor for DataFrame();
      v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v10(v5, v6);
      v7 = (id *)((char *)a1 + *(int *)(v4 + 24));
      v8 = v6;
      v9 = (void (*)(id *, uint64_t))v10;
LABEL_11:
      v9(v7, v8);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v3 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v3 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v8 = __swift_instantiateConcreteTypeFromMangledName(v3);
      v9 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v7 = a1;
      goto LABEL_11;
  }
}

void **initializeWithCopy for MLClassifierMetrics(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;

  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = *a2;
    v12 = v11;
    *a1 = v11;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v6 = *(int *)(v5 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for DataFrame();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLClassifierMetrics(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *a2;
      v12 = v11;
      *a1 = v11;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v6 = *(int *)(v5 + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for DataFrame();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLClassifierMetrics(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v8 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v9 = *(int *)(v8 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for DataFrame();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    v13(&a1[*(int *)(v8 + 24)], &a2[*(int *)(v8 + 24)], v12);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLClassifierMetrics(char *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v9 = *(int *)(v8 + 20);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for DataFrame();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 24)], &a2[*(int *)(v8 + 24)], v12);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        return a1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v7 = __swift_instantiateConcreteTypeFromMangledName(v6);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEF4E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_83_4();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEF4E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_83_4();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MLClassifierMetrics(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics);
}

uint64_t type metadata completion function for MLClassifierMetrics()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLClassifierMetrics.Contents(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for DataFrame();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v10);
  }
  return v4;
}

uint64_t destroy for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DataFrame();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

char *initializeWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DataFrame();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *assignWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DataFrame();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *initializeWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DataFrame();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *assignWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DataFrame();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics.Precomputed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEF5258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_93();
  return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v6);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics.Precomputed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEF52A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = OUTLINED_FUNCTION_93();
  return __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v7);
}

uint64_t type metadata completion function for MLClassifierMetrics.Precomputed()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Contents(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *a2;
      v15 = v14;
      *(_QWORD *)a1 = v14;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *a2;
      v7 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DataFrame();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      v12(&a1[*(int *)(v7 + 24)], (char *)a2 + *(int *)(v7 + 24), v11);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v16 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v16 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v17 = __swift_instantiateConcreteTypeFromMangledName(v16);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLClassifierMetrics.Contents(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  void (*v9)(id *, uint64_t);
  void (*v10)(char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      return;
    case 1:
      v4 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v5 = (char *)a1 + *(int *)(v4 + 20);
      v6 = type metadata accessor for DataFrame();
      v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v10(v5, v6);
      v7 = (id *)((char *)a1 + *(int *)(v4 + 24));
      v8 = v6;
      v9 = (void (*)(id *, uint64_t))v10;
LABEL_11:
      v9(v7, v8);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v3 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v3 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v8 = __swift_instantiateConcreteTypeFromMangledName(v3);
      v9 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v7 = a1;
      goto LABEL_11;
  }
}

void **initializeWithCopy for MLClassifierMetrics.Contents(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = *a2;
    v12 = v11;
    *a1 = v11;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v6 = *(int *)(v5 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for DataFrame();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLClassifierMetrics.Contents(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *a2;
      v12 = v11;
      *a1 = v11;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v6 = *(int *)(v5 + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for DataFrame();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10((char *)a1 + *(int *)(v5 + 24), (char *)a2 + *(int *)(v5 + 24), v9);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLClassifierMetrics.Contents(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v10 = *(int *)(v9 + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for DataFrame();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v14(&a1[*(int *)(v9 + 24)], &a2[*(int *)(v9 + 24)], v13);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v7 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v7 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLClassifierMetrics.Contents(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v10 = *(int *)(v9 + 20);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = type metadata accessor for DataFrame();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v14(&a1[*(int *)(v9 + 24)], &a2[*(int *)(v9 + 24)], v13);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v7 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v7 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for MLClassifierMetrics.Contents()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLClassifierMetrics.Precomputed(319);
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<String>);
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
    v5 = type metadata accessor for Either(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  }
}

unint64_t lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn;
  if (!lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn)
  {
    v1 = type metadata accessor for AnyColumn();
    result = MEMORY[0x22075B938](MEMORY[0x24BDF6060], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn);
  }
  return result;
}

void outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_1_41@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLClassifierMetrics.Contents(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

void OUTLINED_FUNCTION_5_36()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of MLClassifierMetrics.Precomputed(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_39@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLClassifierMetrics.Contents(*(_QWORD *)(v2 - 88), (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_8_39()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_9_35()
{
  return type metadata accessor for MLClassifierMetrics.Precomputed(0);
}

uint64_t OUTLINED_FUNCTION_10_32()
{
  return type metadata accessor for AnyClassificationMetrics();
}

uint64_t OUTLINED_FUNCTION_14_28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(*(_QWORD *)(v2 - 96), v1, a1);
}

uint64_t OUTLINED_FUNCTION_15_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v3, v1);
}

uint64_t OUTLINED_FUNCTION_16_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v3, v1);
}

void OUTLINED_FUNCTION_20_24()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 0);
  _DataTable.columnNamesDidChange()();
}

void OUTLINED_FUNCTION_21_27()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of MLClassifierMetrics.Precomputed(v1, *(_QWORD *)(v2 - 112), v0);
}

void OUTLINED_FUNCTION_22_23(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

double OUTLINED_FUNCTION_26_27()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  double result;

  outlined destroy of MLClassifierMetrics.Contents(v1, v0);
  return result;
}

void OUTLINED_FUNCTION_30_23()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLClassifierMetrics.Contents(v0, v1);
}

void OUTLINED_FUNCTION_31_23(uint64_t a1@<X8>)
{
  MLDataTable.init(_:convertArraysToShapedArrays:)(0, a1);
}

void OUTLINED_FUNCTION_32_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLClassifierMetrics.Precomputed(v1, v0, v2);
}

void OUTLINED_FUNCTION_33_22()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of MLClassifierMetrics.Precomputed(v2, v0, v1);
}

void OUTLINED_FUNCTION_35_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_36_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return DataFrame.init(_:)((uint64_t)&a9);
}

void OUTLINED_FUNCTION_39_15(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLClassifierMetrics.Contents(v2, a2);
}

void OUTLINED_FUNCTION_40_18(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of MLClassifierMetrics.Precomputed(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_41_18()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_42_16(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_43_17()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_45_18()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_47_18()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_49_13()
{
  MLDataTable.willMutate()();
}

void OUTLINED_FUNCTION_50_16(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_51_18()
{
  return 0x7373616C63;
}

uint64_t _Model.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t i;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_91_1();
  v9 = a2[1];
  v55 = *a2;
  v56 = v9;
  v10 = a2[2];
  v52 = a2[3];
  v53 = v10;
  v11 = a2[5];
  v54 = a2[4];
  v13 = a2[6];
  v12 = a2[7];
  v14 = a2[8];
  v58 = v2;
  v15 = ModelType.description.getter(*(_BYTE *)(v2 + 32));
  v16 = v61;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v59, v15, v17, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v16)
  {
    v48 = v11;
    v49 = v12;
    v59 = v13;
    v19 = v56;
    v61 = v14;
    v50 = v3;
    v51 = v8;
    OUTLINED_FUNCTION_60_0();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v57);
    v20 = CMLModel.export(to:)((uint64_t)v7);
    outlined destroy of URL?((uint64_t)v7);
    v21 = MEMORY[0x22075BAE8](0);
    if (!v21)
      goto LABEL_40;
    v22 = v21;
    type metadata accessor for CMLDictionary();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v22;
    v24 = v19;
    v47 = v20;
    if (v19)
    {
      OUTLINED_FUNCTION_16_17();
      swift_bridgeObjectRetain();
      CMLFeatureValue.__allocating_init(_:)();
      OUTLINED_FUNCTION_16_29();
      OUTLINED_FUNCTION_15_29();
      swift_release();
      swift_bridgeObjectRetain();
      CMLFeatureValue.__allocating_init(_:)();
      OUTLINED_FUNCTION_15_29();
      OUTLINED_FUNCTION_136();
      v25 = v54;
      if (v48)
      {
        OUTLINED_FUNCTION_23_3();
        OUTLINED_FUNCTION_6_40();
        v26 = v61;
        if (v25)
          goto LABEL_42;
        OUTLINED_FUNCTION_15_29();
        swift_release();
      }
      else
      {
        v26 = v61;
      }
      v29 = v59;
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_6_40();
      if (v29)
        goto LABEL_42;
      OUTLINED_FUNCTION_15_29();
    }
    else
    {
      v27 = NSFullUserName();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_16_17();
      swift_bridgeObjectRetain();
      CMLFeatureValue.__allocating_init(_:)();
      swift_bridgeObjectRelease();
      v28 = OUTLINED_FUNCTION_16_29();
      CMLDictionary.add(key:value:)(v28);
      v26 = v61;
    }
    OUTLINED_FUNCTION_217();
    getOSVersion()();
    v30 = Dictionary.init(dictionaryLiteral:)();
    if (v24 && v26)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30 = v26;
    }
    v56 = inited;
    swift_isUniquelyReferenced_nonNull_native();
    v60 = v30;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v31 = v60;
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x22075BAE8](0);
    if (!v32)
      goto LABEL_41;
    v33 = v32;
    v34 = swift_initStackObject();
    v55 = v33;
    v61 = v34;
    *(_QWORD *)(v34 + 16) = v33;
    v35 = *(_QWORD *)(v31 + 64);
    v58 = v31 + 64;
    v36 = 1 << *(_BYTE *)(v31 + 32);
    v37 = -1;
    if (v36 < 64)
      v37 = ~(-1 << v36);
    v38 = v37 & v35;
    v59 = (unint64_t)(v36 + 63) >> 6;
    swift_bridgeObjectRetain();
    v39 = 0;
    if (!v38)
      goto LABEL_20;
LABEL_19:
    v40 = __clz(__rbit64(v38));
    v38 &= v38 - 1;
    for (i = v40 | (v39 << 6); ; i = __clz(__rbit64(v43)) + (v39 << 6))
    {
      v45 = *(_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * i);
      OUTLINED_FUNCTION_16_17();
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_23_3();
      CMLFeatureValue.__allocating_init(_:)();
      OUTLINED_FUNCTION_60_0();
      CMLDictionary.add(key:value:)(v45);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_81();
      if (v38)
        goto LABEL_19;
LABEL_20:
      if (__OFADD__(v39++, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v39 >= v59)
        goto LABEL_37;
      v43 = *(_QWORD *)(v58 + 8 * v39);
      if (!v43)
      {
        v44 = v39 + 1;
        if (v39 + 1 >= v59)
          goto LABEL_37;
        v43 = *(_QWORD *)(v58 + 8 * v44);
        if (!v43)
        {
          v44 = v39 + 2;
          if (v39 + 2 >= v59)
            goto LABEL_37;
          v43 = *(_QWORD *)(v58 + 8 * v44);
          if (!v43)
          {
            v44 = v39 + 3;
            if (v39 + 3 >= v59)
            {
LABEL_37:
              OUTLINED_FUNCTION_136();
              OUTLINED_FUNCTION_16_17();
              v46 = swift_retain();
              CMLFeatureValue.__allocating_init(_:)(v46);
              CMLDictionary.add(key:value:)(0x6665645F72657375);
              swift_release();
              OUTLINED_FUNCTION_12_0();
              CMLModel.addMetadata(_:)();
            }
            v43 = *(_QWORD *)(v58 + 8 * v44);
            if (!v43)
            {
              while (1)
              {
                v39 = v44 + 1;
                if (__OFADD__(v44, 1))
                  break;
                if (v39 >= v59)
                  goto LABEL_37;
                v43 = *(_QWORD *)(v58 + 8 * v39);
                ++v44;
                if (v43)
                  goto LABEL_30;
              }
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
              while (1)
              {
LABEL_42:
                swift_unexpectedError();
                __break(1u);
              }
            }
          }
        }
        v39 = v44;
      }
LABEL_30:
      v38 = (v43 - 1) & v43;
    }
  }
  return OUTLINED_FUNCTION_60_0();
}

uint64_t _Model.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[9];

  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_91_1();
  v11 = *a3;
  v21 = a3[2];
  v22 = a3[1];
  v19 = a3[4];
  v20 = a3[3];
  v17 = a3[6];
  v18 = a3[5];
  v15 = a3[8];
  v16 = a3[7];
  v12 = ModelType.description.getter(*(_BYTE *)(v3 + 32));
  static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, a2, v12, v13);
  if (v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23[0] = v11;
  v23[1] = v22;
  v23[2] = v21;
  v23[3] = v20;
  v23[4] = v19;
  v23[5] = v18;
  v23[6] = v17;
  v23[7] = v16;
  v23[8] = v15;
  _Model.write(to:metadata:)(v5, v23);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t static _Model.makeClassifierEvaluationMetrics(_:classes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  double v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  char v22;

  v5 = *(_QWORD *)(a1 + 16);
  if (!tc_v1_variant_is_parameters())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v8 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000026;
    *(_QWORD *)(v9 + 8) = 0x800000021AFF5D80;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_BYTE *)(v9 + 48) = 0;
    *a3 = v8;
LABEL_5:
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  specialized handling<A, B>(_:_:)(v5);
  v7 = v6;
  if (v6)
  {
    type metadata accessor for CMLParameters();
    *(_QWORD *)(swift_initStackObject() + 16) = v7;
    CMLParameters.featureValue(for:)(0x3Du);
    specialized handling<A, B>(_:_:)();
    v12 = v11;
    OUTLINED_FUNCTION_4_2();
    CMLParameters.table(for:)(0x3Eu);
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_9_1();
    v13 = OUTLINED_FUNCTION_8_40();
    if (a2)
    {
      OUTLINED_FUNCTION_20_25();
      static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)(v14, v15, v16);
      swift_release();
      v13 = v21;
      v17 = v22;
    }
    else
    {
      v17 = 0;
    }
    CMLParameters.table(for:)(0x3Fu);
    v18 = 1.0 - v12;
    OUTLINED_FUNCTION_9_1();
    v19 = OUTLINED_FUNCTION_8_40();
    if (a2)
    {
      OUTLINED_FUNCTION_20_25();
      static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)();
      OUTLINED_FUNCTION_4_2();
      v19 = v21;
      v20 = v22;
    }
    else
    {
      v20 = 0;
    }
    v21 = v13;
    v22 = v17;
    type metadata accessor for MLClassifierMetrics.Precomputed(0);
    outlined copy of Result<_DataTable, Error>(v13, v17);
    DataFrame.init(_:)((uint64_t)&v21);
    v21 = v19;
    v22 = v20;
    outlined copy of Result<_DataTable, Error>(v19, v20);
    DataFrame.init(_:)((uint64_t)&v21);
    swift_release();
    OUTLINED_FUNCTION_23_28();
    outlined consume of Result<_DataTable, Error>(v19, v20);
    *(double *)a3 = v18;
    goto LABEL_5;
  }
  __break(1u);
  OUTLINED_FUNCTION_1_42();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t _Model.init(impl:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return OUTLINED_FUNCTION_3_42();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t _Model.init(impl:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  *(_QWORD *)(*(_QWORD *)(v0 + 24) + 40) = 0;
  *(Swift::String *)(v0 + 40) = CMLModel.name()();
  if (v1)
  {
    OUTLINED_FUNCTION_22_24();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_43();
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = _Model.init(impl:);
    return CMLModel.compile()();
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_22_24();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_43();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

char _Model.init(impl:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;

  LOBYTE(v1) = ModelType.init(nameKey:)(*(Swift::String *)(v0 + 40));
  if (v1 == 28)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    v3 = *(void **)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v4 + 24) = v3;
    *(_BYTE *)(v4 + 32) = v1;
    swift_retain();
    v5 = v3;
    if ((AnalyticsReporter.init()() & 1) == 0)
      AnalyticsReporter.reportTemplateUsed(model:mode:)(v2, 2u);
    v6 = *(void **)(v0 + 64);
    OUTLINED_FUNCTION_22_24();

    LOBYTE(v1) = (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
  }
  return v1;
}

void _Model.init(type:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;

  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 24) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  v4 = ModelType.nameKey.getter(a1);
  v6 = v5;
  if ((v5 & 0x1000000000000000) != 0 || !(v5 & 0x2000000000000000 | v4 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v2)
    {
LABEL_7:
      OUTLINED_FUNCTION_12_0();
LABEL_10:

      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return;
    }
    goto LABEL_12;
  }
  MEMORY[0x24BDAC7A8](v4);
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v9 = v7 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v8 = _StringObject.sharedUTF8.getter();
    }
    v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    if (v2)
      goto LABEL_7;
    v15 = v10;
LABEL_12:
    OUTLINED_FUNCTION_12_0();
LABEL_15:
    v12 = v15;
    type metadata accessor for CMLModel();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v1 + 16) = v13;
    *(_BYTE *)(v1 + 32) = a1;
    return;
  }
  v14[0] = v7;
  v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B>(_:_:)((uint64_t)v14);
  if (v2)
  {
    OUTLINED_FUNCTION_12_0();
    goto LABEL_10;
  }
  if (v11)
  {
    v15 = v11;
    OUTLINED_FUNCTION_12_0();
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t _Model.init(type:parameters:modelOptions:)(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a3;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 104) = a1;
  *(_QWORD *)(v4 + 64) = *v3;
  return OUTLINED_FUNCTION_3_42();
}

void _Model.init(type:parameters:modelOptions:)()
{
  uint64_t v0;
  uint64_t *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = (uint64_t *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 40) = 0;
  v3 = ModelType.nameKey.getter(v2);
  v5 = v3;
  v6 = v4;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v3 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_8:
    OUTLINED_FUNCTION_30();
    goto LABEL_11;
  }
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = closure #1 in CMLModel.init(name:);
  *(_QWORD *)(v7 + 24) = 0;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v9 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v8 = _StringObject.sharedUTF8.getter();
    }
    *v1 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
    OUTLINED_FUNCTION_17();
    goto LABEL_8;
  }
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v6 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B>(_:_:)(v0 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_20;
  }
  *v1 = v10;
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_17();
LABEL_11:
  v11 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 32);
  type metadata accessor for CMLModel();
  v13 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v0 + 72) = v13;
  *(_QWORD *)(v13 + 16) = v12;
  if (v11)
  {
    swift_retain();
    CMLModel.initialize(options:)();
  }
  if ((AnalyticsReporter.init()() & 1) != 0)
  {
    CMLModel.callFunction(name:arguments:)(5u, *(_QWORD *)(v0 + 40));
    swift_release();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v17;
    *v17 = v0;
    v17[1] = _Model.init(type:parameters:modelOptions:);
    CMLModel.compile()();
    return;
  }
  v14._countAndFlagsBits = ModelType.nameKey.getter(*(_BYTE *)(v0 + 104));
  LOBYTE(v15) = ModelType.init(nameKey:)(v14);
  if (v15 != 28)
  {
    v16 = v15;
    CFAbsoluteTimeGetCurrent();
    AnalyticsReporter.reportTemplateUsed(model:mode:)(v16, 2u);
  }
LABEL_20:
  __break(1u);
}

uint64_t _Model.init(type:parameters:modelOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 96) = a1;
  return swift_task_switch();
}

uint64_t _Model.init(type:parameters:modelOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_BYTE *)(v0 + 104);
  swift_release();
  OUTLINED_FUNCTION_4_2();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_BYTE *)(v3 + 32) = v4;
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_217();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_43();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _Model.deinit()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _Model.__deallocating_deinit()
{
  _Model.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _Model()
{
  return objc_opt_self();
}

void closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply(_QWORD *a1@<X8>)
{
  partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_3_42()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_6_40()
{
  CMLFeatureValue.__allocating_init(_:)();
}

_QWORD *OUTLINED_FUNCTION_8_40()
{
  uint64_t v0;

  return _DataTable.init(impl:)(v0);
}

uint64_t OUTLINED_FUNCTION_9_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_15_29()
{
  return CMLDictionary.add(key:value:)();
}

uint64_t OUTLINED_FUNCTION_16_29()
{
  return 0x726F68747561;
}

void OUTLINED_FUNCTION_18_25(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_19_30()
{
  return swift_setDeallocating();
}

uint64_t OUTLINED_FUNCTION_22_24()
{
  return swift_release();
}

void OUTLINED_FUNCTION_23_28()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_28_26()
{
  return tc_v1_release();
}

uint64_t specialized MLDataValueConvertible.featureValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v5[3] = MEMORY[0x24BEE0D00];
  v5[4] = &protocol witness table for String;
  v5[0] = a1;
  v5[1] = a2;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x24BEE0D00]);
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CMLFeatureValue.__allocating_init(_:)();
  v3 = v2;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v3;
}

uint64_t specialized _UntypedColumn.init<A>(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v4 = v3;
  type metadata accessor for CMLColumn();
  v8 = specialized MLDataValueConvertible.featureValue.getter(a1, a2);
  v9 = CMLColumn.__allocating_init(repeating:count:)(v8, a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = v9;
  return v4;
}

uint64_t (*MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify())()
{
  swift_beginAccess();
  return MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify;
}

void MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_15_30();
  OUTLINED_FUNCTION_19_31();
  v0 = OUTLINED_FUNCTION_94_2();
  __swift_storeEnumTagSinglePayload(v0, v1, 1, v2);
  OUTLINED_FUNCTION_50_17();
}

void sub_21AEF776C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (a1)
  {
    v5 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
    OUTLINED_FUNCTION_49_14();
    v6 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v2 + v5) = v6;
    v7 = v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v1, v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    v12 = xmmword_21AFED080;
    specialized handling<A, B>(_:_:)((uint64_t)&v12);
    if (v3)
    {
      OUTLINED_FUNCTION_118_4(v1);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_118_4(v7);
      OUTLINED_FUNCTION_93_1(v9, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      swift_release();
      type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
      swift_deallocPartialClassInstance();
      return;
    }
    v10 = v8;
    if (v8)
    {
      OUTLINED_FUNCTION_115_5();
      v11 = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(v11 + 16) = v10;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      *(_QWORD *)(v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v11;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_20_0();
  type metadata accessor for MLStyleTransfer.DataSource(v3);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_15_30();
  OUTLINED_FUNCTION_61_4(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, 1);
  OUTLINED_FUNCTION_50_17();
}

void sub_21AEF7960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1)
  {
    v10 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
    OUTLINED_FUNCTION_49_14();
    v11 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v8 - 160) = v10;
    *(_QWORD *)(v2 + v10) = v11;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(*(_QWORD *)(v8 - 112), v3, type metadata accessor for MLStyleTransfer.DataSource);
    OUTLINED_FUNCTION_92_4(*(_QWORD *)(v8 - 120), (uint64_t)v4);
    outlined init with take of MLStyleTransfer.PersistentParameters(v3, v6, type metadata accessor for MLStyleTransfer.DataSource);
    *(_BYTE *)(v6 + v5[5]) = *v4;
    OUTLINED_FUNCTION_61_11(*(_QWORD *)&v4[v7[8]]);
    *(_QWORD *)(v6 + v5[8]) = *(_QWORD *)&v4[v7[9]];
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&v4[v7[5]], v6 + v5[6], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v12 = v4[v7[10]];
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v4, type metadata accessor for MLStyleTransfer.ModelParameters);
    *(_BYTE *)(v6 + v5[9]) = v12;
    outlined init with take of MLStyleTransfer.PersistentParameters(v6, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    OUTLINED_FUNCTION_61_4(v1, 0);
    v13 = *(_QWORD *)(v8 - 144);
    OUTLINED_FUNCTION_44_7();
    outlined assign with take of MLStyleTransfer.PersistentParameters?(v1, v13);
    swift_endAccess();
    v14 = v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
    v15 = *(_QWORD *)(v8 - 136);
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v15, v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    v17 = *(_QWORD *)(v2 + 16);
    v18 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v8 - 152) = v2;
    if ((v18 & 0x1000000000000000) != 0 || !(v18 & 0x2000000000000000 | v17 & 0x1000000000000000))
    {
      OUTLINED_FUNCTION_113_0();
      v33 = *(_QWORD *)(v8 - 128);
      _StringGuts._slowWithCString<A>(_:)();
      if (v33)
        goto LABEL_10;
      OUTLINED_FUNCTION_106_0();
      v29 = *(_QWORD *)(v8 - 72);
LABEL_14:
      OUTLINED_FUNCTION_115_5();
      v30 = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(v30 + 16) = v29;
      OUTLINED_FUNCTION_84_6(v30, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      OUTLINED_FUNCTION_58_0(v31, type metadata accessor for MLStyleTransfer.ModelParameters);
      OUTLINED_FUNCTION_77_5(v32, type metadata accessor for MLStyleTransfer.DataSource);
      *(_QWORD *)(*(_QWORD *)(v8 - 152) + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v30;
      return;
    }
    MEMORY[0x24BDAC7A8](v16);
    if ((v18 & 0x2000000000000000) == 0)
    {
      if ((v17 & 0x1000000000000000) != 0)
      {
        v19 = (v18 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v20 = v17 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v19 = _StringObject.sharedUTF8.getter();
        v20 = v34;
      }
      OUTLINED_FUNCTION_113_0();
      v21 = v20;
      v22 = *(_QWORD *)(v8 - 128);
      v23 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v19, v21, (uint64_t (*)(void))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
      if (v22)
        goto LABEL_10;
      v29 = v23;
      OUTLINED_FUNCTION_106_0();
      goto LABEL_14;
    }
    *(_QWORD *)(v8 - 104) = v17;
    *(_QWORD *)(v8 - 96) = v18 & 0xFFFFFFFFFFFFFFLL;
    OUTLINED_FUNCTION_113_0();
    v24 = *(_QWORD *)(v8 - 128);
    specialized handling<A, B>(_:_:)(v8 - 104);
    if (v24)
    {
LABEL_10:
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_92(v15);
      OUTLINED_FUNCTION_97_6(v26, type metadata accessor for MLStyleTransfer.ModelParameters);
      OUTLINED_FUNCTION_77_5(v27, type metadata accessor for MLStyleTransfer.DataSource);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_92(v14);
      OUTLINED_FUNCTION_78_5(v28, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      swift_release();
      type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
      swift_deallocPartialClassInstance();
      return;
    }
    v29 = v25;
    if (v25)
    {
      OUTLINED_FUNCTION_106_0();
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD);
  char v62;
  NSString *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  unsigned __int8 v71;
  NSURL *v72;
  uint64_t v73;
  void *v74;
  unsigned int v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned __int8 v83;
  NSURL *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  unsigned int v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int *v96;
  void (*v97)(void);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(_QWORD);
  uint64_t v115;
  id v116;
  double v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(void);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void (*v128)(uint64_t);
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  double v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(void);
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  id v222;
  void (*v223)(_QWORD, _QWORD);
  uint64_t v224;
  id v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  OUTLINED_FUNCTION_8_1();
  v235 = v3;
  v236 = v4;
  v217 = v1;
  v232 = *MEMORY[0x24BDAC8D0];
  v198 = type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v199 = v6;
  OUTLINED_FUNCTION_102_3();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = OUTLINED_FUNCTION_25_24(v8, v189);
  v218 = type metadata accessor for MLStyleTransfer.ModelParameters(v9);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v215 = v15;
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_211();
  v225 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_65_5();
  v219 = v23;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_211();
  v223 = v25;
  v197 = OUTLINED_FUNCTION_45_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v189 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = OUTLINED_FUNCTION_78();
  v224 = *(_QWORD *)(v29 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_65_5();
  v229 = v34;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_65_5();
  v220 = v36;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_65_5();
  v226 = v38;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_65_5();
  v228 = v40;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_211();
  v227 = (void *)v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v189 - v46;
  v48 = OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v189 - v51;
  v53 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v54 = v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  v203 = v54;
  OUTLINED_FUNCTION_101_8(v54);
  v55 = OUTLINED_FUNCTION_94_2();
  v221 = (int *)v48;
  v57 = OUTLINED_FUNCTION_128(v55, v56, v48);
  if (v62)
  {
    OUTLINED_FUNCTION_93_1(v57, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_104_6();
    OUTLINED_FUNCTION_18_0(v58, v59);

LABEL_22:
    OUTLINED_FUNCTION_7();
    return;
  }
  v222 = v53;
  v210 = v52;
  outlined init with take of MLStyleTransfer.PersistentParameters((uint64_t)v47, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
  v60 = v0;
  v195 = v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v61 = v223;
  outlined init with take of MLStyleTransfer.PersistentParameters?((uint64_t)v28, (uint64_t)v223, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_128((uint64_t)v61, 1, v29);
  v196 = v2;
  if (v62)
  {
    v63 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v66 = v227;
    URL.init(fileURLWithPath:isDirectory:)();
    v64 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_78_5(v64, &demangling cache variable for type metadata for URL?);
    v67 = v228;
    v68 = v222;
    v65 = v224;
  }
  else
  {
    v65 = v224;
    v66 = v227;
    (*(void (**)(void *, _QWORD))(v224 + 32))(v227, v61);
    v67 = v228;
    v68 = v222;
  }
  URL.appendingPathComponent(_:isDirectory:)();
  v69 = URL.path.getter();
  v70 = (void *)MEMORY[0x22075A8AC](v69);
  OUTLINED_FUNCTION_30();
  v71 = objc_msgSend(v68, sel_fileExistsAtPath_, v70);

  if ((v71 & 1) == 0)
  {
    URL._bridgeToObjectiveC()(v72);
    v74 = (void *)v73;
    v230 = 0;
    v75 = OUTLINED_FUNCTION_54_13(v73, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_);

    if (!v75)
    {
      v116 = v230;
      OUTLINED_FUNCTION_106_6();

      swift_willThrow(v117);
      OUTLINED_FUNCTION_41_19(v67);
      OUTLINED_FUNCTION_41_19((uint64_t)v66);
LABEL_19:
      v114 = (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters;
      v145 = &v233;
LABEL_20:
      v115 = *(v145 - 32);
      goto LABEL_21;
    }
    v76 = v230;
  }
  v189 = v60;
  v77 = v220;
  URL.appendingPathComponent(_:)();
  v78 = v68;
  v79 = v226;
  OUTLINED_FUNCTION_44_20();
  v223 = *(void (**)(_QWORD, _QWORD))(v65 + 8);
  v223(v77, v29);
  v80 = v229;
  URL.appendingPathComponent(_:isDirectory:)();
  v81 = URL.path.getter();
  v82 = (void *)MEMORY[0x22075A8AC](v81);
  OUTLINED_FUNCTION_30();
  v83 = objc_msgSend(v78, sel_fileExistsAtPath_, v82);

  v85 = v221;
  v86 = v219;
  v87 = (uint64_t)v225;
  if ((v83 & 1) != 0)
    goto LABEL_13;
  URL._bridgeToObjectiveC()(v84);
  v89 = (void *)v88;
  v230 = 0;
  v90 = v222;
  v91 = OUTLINED_FUNCTION_54_13(v88, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_);

  if (!v91)
  {
    v143 = v230;
    OUTLINED_FUNCTION_106_6();

    swift_willThrow(v144);
    v223(v80, v29);
    OUTLINED_FUNCTION_88_5(v226);
    OUTLINED_FUNCTION_88_5(v228);
    OUTLINED_FUNCTION_88_5((uint64_t)v227);
    goto LABEL_19;
  }
  v92 = v230;
  v79 = v226;
LABEL_13:
  v93 = (uint64_t)v210;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)v210, v87, type metadata accessor for MLStyleTransfer.DataSource);
  v94 = v85[6];
  v193 = v85[5];
  v95 = *(_BYTE *)(v93 + v193);
  v96 = (int *)v218;
  v97 = v215;
  v98 = (uint64_t)v215 + *(int *)(v218 + 20);
  v194 = v93 + v94;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v93 + v94, v98, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v99 = v85[8];
  v192 = v85[7];
  v191 = v99;
  OUTLINED_FUNCTION_56_15();
  *(_QWORD *)((char *)v97 + v100) = v101;
  *(_BYTE *)v97 = v95;
  OUTLINED_FUNCTION_55_15();
  *(_QWORD *)((char *)v97 + v102) = v103;
  *(_QWORD *)((char *)v97 + v96[8]) = v104;
  *(_QWORD *)((char *)v97 + v96[9]) = v105;
  v190 = v85[9];
  *((_BYTE *)v97 + v106) = *(_BYTE *)(v93 + v190);
  OUTLINED_FUNCTION_84_6(v107, type metadata accessor for MLStyleTransfer.ModelParameters);
  v108 = *(void (**)(void))(v65 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v86, v79, v29);
  OUTLINED_FUNCTION_57_12(v86);
  v109 = (uint64_t)v216;
  v215 = v108;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v108)(v216, v229, v29);
  OUTLINED_FUNCTION_57_12(v109);
  v110 = v214;
  v111 = (uint64_t)v225;
  v112 = v217;
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (v112)
  {
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_60_14(v109);
    OUTLINED_FUNCTION_60_14(v86);
    OUTLINED_FUNCTION_84_6(v113, type metadata accessor for MLStyleTransfer.DataSource);
    v223(v229, v29);
    OUTLINED_FUNCTION_41_19(v79);
    OUTLINED_FUNCTION_41_19(v228);
    OUTLINED_FUNCTION_41_19((uint64_t)v227);
    v114 = (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters;
    v115 = v93;
LABEL_21:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v115, v114);
    goto LABEL_22;
  }
  v217 = 0;
  OUTLINED_FUNCTION_60_14(v109);
  OUTLINED_FUNCTION_60_14(v86);
  OUTLINED_FUNCTION_92(v111);
  v225 = v230;
  LODWORD(v219) = v231;
  v224 = *(_QWORD *)(v224 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v224)(v212, v110, v29);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v119 = v96;
  v120 = v213 + *(int *)(v118 + 48);
  v121 = v213 + *(int *)(v118 + 64);
  v122 = v215;
  v215();
  ((void (*)(uint64_t, uint64_t, uint64_t))v122)(v120, v229, v29);
  v123 = OUTLINED_FUNCTION_87_5();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v123, v124, type metadata accessor for MLStyleTransfer.DataSource);
  v125 = v120 + *(int *)(v118 + 48);
  v126 = (uint64_t *)(v120 + *(int *)(v118 + 64));
  v127 = *v126;
  LOBYTE(v118) = *((_BYTE *)v126 + 8);
  v128 = (void (*)(uint64_t))v223;
  v223(v125, v29);
  v129 = OUTLINED_FUNCTION_22_18();
  v128(v129);
  *(_QWORD *)v121 = v127;
  *(_BYTE *)(v121 + 8) = v118;
  LOBYTE(v118) = *(_BYTE *)(v93 + v193);
  v130 = v196;
  v131 = v194;
  v216 = &v196[v119[5]];
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v194, (uint64_t)v216, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v132 = *(_QWORD *)(v93 + v192);
  v133 = *(_QWORD *)(v93 + v191);
  *(_QWORD *)&v130[v119[6]] = 1;
  v134 = v119[10];
  *v130 = v118;
  *(_QWORD *)&v130[v119[7]] = 500;
  *(_QWORD *)&v130[v119[8]] = v132;
  *(_QWORD *)&v130[v119[9]] = v133;
  v135 = *(_BYTE *)(v93 + v190);
  v130[v134] = v135;
  v136 = v208;
  v137 = (uint64_t)&v208[v119[5]];
  v138 = v131;
  v139 = v29;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v138, v137, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  *(_QWORD *)&v136[v119[6]] = 1;
  v140 = v119[10];
  *v136 = v118;
  *(_QWORD *)&v136[v119[7]] = 500;
  *(_QWORD *)&v136[v119[8]] = v132;
  *(_QWORD *)&v136[v119[9]] = v133;
  v136[v140] = v135;
  v141 = v209;
  outlined init with take of MLStyleTransfer.PersistentParameters(v137, v209, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LODWORD(v137) = __swift_getEnumTagSinglePayload(v141, 1, v29);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v141, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if ((_DWORD)v137 == 1)
  {
    v142 = (uint64_t)v196;
    goto LABEL_26;
  }
  v146 = v220;
  OUTLINED_FUNCTION_250();
  v147 = v228;
  URL.appendingPathComponent(_:)();
  v148 = v200;
  OUTLINED_FUNCTION_44_20();
  v223(v146, v139);
  v149 = (uint64_t)v210;
  LOBYTE(v146) = v210[v193];
  v150 = v202;
  v151 = (uint64_t)&v202[v119[5]];
  OUTLINED_FUNCTION_99_6(v194, v152, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v153 = *(_QWORD *)(v149 + v192);
  v154 = *(_QWORD *)(v149 + v191);
  *(_QWORD *)&v150[v119[6]] = 1;
  v155 = v119[10];
  *v150 = v146;
  *(_QWORD *)&v150[v119[7]] = 500;
  *(_QWORD *)&v150[v119[8]] = v153;
  *(_QWORD *)&v150[v119[9]] = v154;
  v150[v155] = *(_BYTE *)(v149 + v190);
  v156 = v201;
  v157 = OUTLINED_FUNCTION_22_18();
  ((void (*)(uint64_t))v215)(v157);
  OUTLINED_FUNCTION_22_25(v156);
  v158 = v217;
  MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)();
  if (v158)
  {
    outlined consume of Result<_DataTable, Error>(v225, v219);
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_93_1(v160, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_221_0(v148);
    OUTLINED_FUNCTION_69_3(type metadata accessor for MLStyleTransfer.DataSource, (uint64_t)&v234);
    OUTLINED_FUNCTION_221_0(v212);
    OUTLINED_FUNCTION_221_0(v229);
    OUTLINED_FUNCTION_221_0(v226);
    OUTLINED_FUNCTION_221_0(v147);
    OUTLINED_FUNCTION_221_0((uint64_t)v227);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v149, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v151, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v114 = type metadata accessor for MLStyleTransfer.ModelParameters;
    v145 = &v228;
    goto LABEL_20;
  }
  v217 = 0;
  OUTLINED_FUNCTION_93_1(v159, &demangling cache variable for type metadata for URL?);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v151, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v161 = (uint64_t)v216;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v216, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  ((void (*)(uint64_t, uint64_t, uint64_t))v224)(v161, v148, v139);
  OUTLINED_FUNCTION_22_25(v161);
  v142 = (uint64_t)v196;
LABEL_26:
  v162 = v211;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v213, v211, type metadata accessor for MLStyleTransfer.DataSource);
  v163 = v207;
  OUTLINED_FUNCTION_90_3(v142);
  v164 = v142;
  v165 = v204;
  OUTLINED_FUNCTION_91_6(v162);
  v166 = v221;
  *(_BYTE *)(v165 + v221[5]) = *v163;
  v167 = (int *)v218;
  OUTLINED_FUNCTION_61_11(*(_QWORD *)&v163[*(int *)(v218 + 32)]);
  *(_QWORD *)(v165 + v166[8]) = *(_QWORD *)&v163[v167[9]];
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)&v163[v167[5]], v165 + v166[6], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LOBYTE(v167) = v163[v167[10]];
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v163, type metadata accessor for MLStyleTransfer.ModelParameters);
  *(_BYTE *)(v165 + v166[9]) = (_BYTE)v167;
  v168 = v205;
  outlined init with take of MLStyleTransfer.PersistentParameters(v165, v205, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
  OUTLINED_FUNCTION_61_4(v168, 0);
  v169 = v168;
  v170 = v206;
  outlined init with take of MLStyleTransfer.PersistentParameters?(v169, v206, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  v171 = v203;
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLStyleTransfer.PersistentParameters?(v170, v171);
  swift_endAccess();
  v172 = v225;
  v230 = v225;
  v173 = v219;
  v231 = v219;
  v174 = v212;
  v175 = v217;
  static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)();
  v177 = v229;
  if (v175)
  {
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_77_5(v178, type metadata accessor for MLStyleTransfer.DataSource);
    OUTLINED_FUNCTION_100_5(v174);
    OUTLINED_FUNCTION_48_2(v177);
    OUTLINED_FUNCTION_48_2(v226);
    OUTLINED_FUNCTION_48_2(v228);
    OUTLINED_FUNCTION_48_2((uint64_t)v227);
    OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters, (uint64_t)&v233);
    outlined consume of Result<_DataTable, Error>(v172, v173);
    v114 = type metadata accessor for MLStyleTransfer.ModelParameters;
    v115 = v164;
    goto LABEL_21;
  }
  v179 = v176;
  CMLParameters.featureValue(for:)(0x2Fu);
  specialized handling<A, B>(_:_:)(*(_QWORD *)(v180 + 16));
  v181 = v164;
  v183 = v182;
  v184 = v212;
  if (v182)
  {
    OUTLINED_FUNCTION_4_2();
    type metadata accessor for CMLDictionary();
    *(_QWORD *)(swift_initStackObject() + 16) = v183;
    v185 = (uint64_t)v199;
    *v199 = *(_QWORD *)(v195 + *(int *)(v197 + 20));
    swift_storeEnumTagMultiPayload();
    CMLDictionary.add(_:)(v185);
    OUTLINED_FUNCTION_97_6(v186, (uint64_t (*)(_QWORD))type metadata accessor for _Model.Parameters);
    OUTLINED_FUNCTION_16_17();
    v187 = OUTLINED_FUNCTION_98_5();
    CMLFeatureValue.__allocating_init(_:)(v187);
    CMLParameters.add(key:featureValue:)(0x2Fu, v188);
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_3_1();
    CMLModel.callFunction(name:arguments:)(0, v179);
    OUTLINED_FUNCTION_217();
    swift_release();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v225, v173);
    OUTLINED_FUNCTION_13_7();
    OUTLINED_FUNCTION_34_24();
    OUTLINED_FUNCTION_69_3(type metadata accessor for MLStyleTransfer.DataSource, (uint64_t)&v234);
    OUTLINED_FUNCTION_67_14(v184);
    OUTLINED_FUNCTION_0_11(v229);
    OUTLINED_FUNCTION_0_11(v226);
    OUTLINED_FUNCTION_0_11(v228);
    OUTLINED_FUNCTION_0_11((uint64_t)v227);
    OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters, (uint64_t)&v233);
    v114 = type metadata accessor for MLStyleTransfer.ModelParameters;
    v115 = v181;
    goto LABEL_21;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t EnumTagSinglePayload;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80[13];
  uint64_t v81;
  uint64_t (*v82)();
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;

  OUTLINED_FUNCTION_8_1();
  v84 = v2;
  v5 = v1;
  v87 = v6;
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_32_21(v8, v80[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v90 = v10;
  v86 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v92 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v82 = (uint64_t (*)())((char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_45_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_33_23(v16, v80[0]);
  v17 = OUTLINED_FUNCTION_78();
  v88 = *(_QWORD *)(v17 - 8);
  v89 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_65_5();
  v85 = v23;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v80 - v28;
  v30 = (int *)OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)v80 - v33;
  v35 = (int *)OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)v80 - v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v41);
  v42 = OUTLINED_FUNCTION_60_10();
  type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(v42);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_161();
  v44 = v5;
  v45 = v5 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  v80[11] = v45;
  OUTLINED_FUNCTION_89_6(v45);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, (uint64_t)v35);
  v83 = v35;
  if ((_DWORD)EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_69_9(EnumTagSinglePayload, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    v47 = v87;
    v48 = v92;
    v49 = (uint64_t)v90;
  }
  else
  {
    v80[0] = (uint64_t)v29;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v3, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    OUTLINED_FUNCTION_69_9(v50, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    v51 = v44;
    v52 = v39[v35[5]];
    v53 = (uint64_t)&v34[v30[5]];
    OUTLINED_FUNCTION_90_3((uint64_t)&v39[v35[6]]);
    v54 = *(_QWORD *)&v39[v35[7]];
    v55 = *(_QWORD *)&v39[v35[8]];
    *(_QWORD *)&v34[v30[6]] = 1;
    v56 = v30[10];
    *v34 = v52;
    v57 = v89;
    *(_QWORD *)&v34[v30[7]] = 500;
    *(_QWORD *)&v34[v30[8]] = v54;
    *(_QWORD *)&v34[v30[9]] = v55;
    v34[v56] = v39[v35[9]];
    v58 = v51;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    outlined init with take of MLStyleTransfer.PersistentParameters(v53, v4, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v59 = __swift_getEnumTagSinglePayload(v4, 1, v57);
    v48 = v92;
    outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v47 = v87;
    v60 = v88;
    v49 = (uint64_t)v90;
    if (v59 != 1)
    {
      v61 = v81;
      outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v58 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, v81, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v62 = v61;
      v63 = v82;
      outlined init with take of MLStyleTransfer.PersistentParameters?(v62, (uint64_t)v82, &demangling cache variable for type metadata for URL?);
      v64 = OUTLINED_FUNCTION_94_2();
      v66 = OUTLINED_FUNCTION_128(v64, v65, v57);
      if (v67)
      {
        OUTLINED_FUNCTION_93_1(v66, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        OUTLINED_FUNCTION_85_6(v80[0], (uint64_t)v63, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 32));
        v68 = v80[8];
        URL.appendingPathComponent(_:isDirectory:)();
        v69 = v80[9];
        OUTLINED_FUNCTION_250();
        URL.appendingPathComponent(_:)();
        OUTLINED_FUNCTION_73_10(v68);
        v70 = v80[10];
        URL.appendingPathExtension(_:)();
        OUTLINED_FUNCTION_73_10(v69);
        v82 = MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify();
        v72 = v71;
        v73 = v60;
        v74 = (uint64_t)v83;
        v75 = __swift_getEnumTagSinglePayload(v71, 1, (uint64_t)v83);
        if (!(_DWORD)v75)
        {
          v76 = v72 + *(int *)(v74 + 24);
          OUTLINED_FUNCTION_97_6(v75, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
          OUTLINED_FUNCTION_85_6(v76, v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16));
          OUTLINED_FUNCTION_22_25(v76);
        }
        ((void (*)(uint64_t *, _QWORD))v82)(&v91, 0);
        OUTLINED_FUNCTION_73_10(v70);
        OUTLINED_FUNCTION_73_10(v80[0]);
        v48 = v92;
        v49 = (uint64_t)v90;
      }
    }
  }
  specialized BidirectionalCollection.last.getter(v47, v49);
  v77 = OUTLINED_FUNCTION_128(v49, 1, v86);
  if (!v67)
  {
    v90 = v30;
    outlined init with take of MLStyleTransfer.PersistentParameters(v49, v48, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_78_5(v77, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_18_0(v78, 0xD00000000000001DLL);
  OUTLINED_FUNCTION_7();
}

void CMLModel.resume(style:content:device:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v6 = v5;
  OUTLINED_FUNCTION_97_0();
  type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_20_0();
  v9 = MEMORY[0x22075BB9C](v8);
  if (v9)
  {
    v10 = v9;
    OUTLINED_FUNCTION_49_14();
    *(_QWORD *)(swift_initStackObject() + 16) = v10;
    OUTLINED_FUNCTION_47_19(0x47u, v0);
    if (v1)
    {
      OUTLINED_FUNCTION_217();
LABEL_10:
      OUTLINED_FUNCTION_7();
      return;
    }
    OUTLINED_FUNCTION_47_19(0x48u, v6);
    if (MEMORY[0x22075BAE8](0))
    {
      OUTLINED_FUNCTION_97_0();
      type metadata accessor for CMLDictionary();
      *(_QWORD *)(swift_initStackObject() + 16) = v0;
      v11 = 7696483;
      if ((v4 & 1) == 0)
        v11 = 1869903201;
      v12 = 0xE300000000000000;
      if ((v4 & 1) == 0)
        v12 = 0xE400000000000000;
      *v2 = v11;
      v2[1] = v12;
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v2);
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for _Model.Parameters);
      OUTLINED_FUNCTION_16_17();
      v13 = OUTLINED_FUNCTION_98_5();
      CMLFeatureValue.__allocating_init(_:)(v13);
      CMLParameters.add(key:featureValue:)(0x2Fu, v14);
      swift_release();
      OUTLINED_FUNCTION_59_14(3u);
      swift_release();
      OUTLINED_FUNCTION_53_18();
      tc_v1_release();
      swift_setDeallocating();
      tc_v1_release();
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int_optional __swiftcall MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  Swift::Int_optional result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AEF9BD8()
{
  return 0;
}

void MLStyleTransfer.TrainingSessionDelegate.saveImage(from:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const __CFData *isa;
  CGDataProvider *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  CGImageRef v18;
  CGImage *v19;
  NSURL *v20;
  const __CFURL *v21;
  const __CFURL *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  CGImageDestination *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_97_0();
  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_53_0();
  v4 = CMLMultiArray.data()();
  if (!v0)
  {
    v5 = (double *)v4;
    v29 = v3;
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 786432, 0);
    v6 = *v5;
    if ((~*(_QWORD *)v5 & 0x7FF0000000000000) != 0)
    {
      v7 = v30;
      v8 = 1;
      while (v6 > -1.0)
      {
        if (v6 >= 256.0)
          goto LABEL_21;
        v31 = v7;
        v10 = *(_QWORD *)(v7 + 16);
        v9 = *(_QWORD *)(v7 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          v7 = v31;
        }
        *(_QWORD *)(v7 + 16) = v10 + 1;
        *(_BYTE *)(v7 + v10 + 32) = (int)v6;
        if (v8 == 786432)
        {
          v11 = specialized Data.init<A>(_:)(v7);
          v13 = v12;
          isa = Data._bridgeToObjectiveC()().super.isa;
          v15 = CGDataProviderCreateWithCFData(isa);

          if (!v15)
            goto LABEL_16;
          v16 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
          if (!v16)
            goto LABEL_22;
          v17 = v16;
          v18 = CGImageCreate(0x200uLL, 0x200uLL, 8uLL, 0x18uLL, 0x600uLL, v16, 0, v15, 0, 0, kCGRenderingIntentDefault);

          if (v18)
          {
            v19 = v18;
            URL._bridgeToObjectiveC()(v20);
            v22 = v21;
            static UTType.png.getter();
            v23 = UTType.identifier.getter();
            v25 = v24;
            (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v1, v2);
            v26 = (__CFString *)MEMORY[0x22075A8AC](v23, v25);
            swift_bridgeObjectRelease();
            v27 = CGImageDestinationCreateWithURL(v22, v26, 1uLL, 0);

            if (!v27)
              goto LABEL_23;
            CGImageDestinationAddImage(v27, v19, 0);
            CGImageDestinationFinalize(v27);

          }
          else
          {
LABEL_16:
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            OUTLINED_FUNCTION_49_0();
            OUTLINED_FUNCTION_18_0(v28, 0xD000000000000029);
          }
          outlined consume of Data._Representation(v11, v13);
          return;
        }
        v6 = v5[v8++];
        if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = *v2 + 32;
  v4 = v3 + *(_QWORD *)(*v2 + 16);
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  swift_bridgeObjectRelease();
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v5;
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.train(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t EnumTagSinglePayload;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  char v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  Swift::Bool v75;
  Swift::Int v76;
  uint64_t v77[10];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result;

  OUTLINED_FUNCTION_8_1();
  v93 = v4;
  v94 = v5;
  OUTLINED_FUNCTION_97_0();
  v6 = type metadata accessor for UUID();
  v77[9] = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_32_21(v8, v77[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_25_24(v10, v77[0]);
  v11 = type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v77[5] = v13;
  v14 = OUTLINED_FUNCTION_78();
  v79 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v77 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v77 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v23 = OUTLINED_FUNCTION_60_10();
  v86 = type metadata accessor for MLStyleTransfer.ModelParameters(v23);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  v84 = (char *)v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_33_23(v27, v77[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_64();
  v90 = v29;
  OUTLINED_FUNCTION_102_3();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_208();
  v85 = v31;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)v77 - v34;
  v36 = *(char **)(v1
                 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters
                 + *(int *)(v11 + 20));
  if (__OFADD__(v1, v36))
  {
    __break(1u);
    goto LABEL_25;
  }
  v37 = *(int *)(v11 + 28);
  v77[4] = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters + v37);
  if (__OFSUB__(v38, v1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v77[3] = v6;
  v89 = &v36[v1];
  if ((uint64_t)v36 >= v38 - v1)
    v39 = (char *)(v38 - v1);
  else
    v39 = v36;
  if (((unint64_t)v39 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    JUMPOUT(0x21AEFA668);
  }
  v87 = v38;
  v77[1] = (uint64_t)v18;
  v77[2] = (uint64_t)v21;
  v81 = v35;
  v78 = v3;
  v80 = v14;
  v88 = v39;
  if (v39)
  {
    v21 = (char *)OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
    v40 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
    do
    {
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_77_9(1u, v40);
      if (v2)
        goto LABEL_12;
      OUTLINED_FUNCTION_4_2();
      swift_release();
    }
    while (--v39);
  }
  v41 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
  v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_77_9(2u, v42);
  if (v42)
  {
LABEL_12:
    OUTLINED_FUNCTION_4_2();
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_13_7();
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  v92 = Dictionary.init(dictionaryLiteral:)();
  v45 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  v46 = v90;
  OUTLINED_FUNCTION_89_6(v45);
  v47 = v91;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v46, 1, v91);
  if ((_DWORD)EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_69_9(EnumTagSinglePayload, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    v21 = v88;
    v50 = v89;
  }
  else
  {
    v77[0] = v41;
    v51 = v83;
    OUTLINED_FUNCTION_99_6(v46, v49, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    OUTLINED_FUNCTION_69_9(v52, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    v53 = *(int *)(v47 + 24);
    v54 = (int *)v47;
    v55 = *(_BYTE *)(v51 + *(int *)(v47 + 20));
    v56 = (int *)v86;
    v57 = v84;
    v58 = (uint64_t)&v84[*(int *)(v86 + 20)];
    OUTLINED_FUNCTION_92_4(v51 + v53, v58);
    v59 = *(_QWORD *)(v51 + v54[7]);
    v60 = *(_QWORD *)(v51 + v54[8]);
    *(_QWORD *)&v57[v56[6]] = 1;
    v61 = v56[10];
    *v57 = v55;
    *(_QWORD *)&v57[v56[7]] = 500;
    *(_QWORD *)&v57[v56[8]] = v59;
    *(_QWORD *)&v57[v56[9]] = v60;
    v57[v61] = *(_BYTE *)(v51 + v54[9]);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v51, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    v62 = v82;
    outlined init with take of MLStyleTransfer.PersistentParameters(v58, v82, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v63 = (uint64_t)v81;
    outlined init with take of MLStyleTransfer.PersistentParameters(v62, (uint64_t)v81, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v64 = v85;
    OUTLINED_FUNCTION_92_4(v63, v85);
    v65 = OUTLINED_FUNCTION_94_2();
    v66 = v80;
    OUTLINED_FUNCTION_128(v65, v67, v80);
    if (!v68)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v78, v64, v66);
      OUTLINED_FUNCTION_3_1();
      CMLModel.predict(validationURL:)();
    }
    outlined destroy of MLHandPoseClassifier.ModelParameters(v63, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v64, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v21 = v88;
    v50 = v89;
  }
  OUTLINED_FUNCTION_51_0();
  CMLModel.contentLoss.getter();
  v70 = v69;
  OUTLINED_FUNCTION_81();
  if ((v70 & 1) == 0)
  {
    v71 = OUTLINED_FUNCTION_112_4();
    specialized Dictionary.subscript.setter(v71, 1);
  }
  OUTLINED_FUNCTION_51_0();
  CMLModel.styleLoss.getter();
  v73 = v72;
  OUTLINED_FUNCTION_81();
  if ((v73 & 1) == 0)
  {
    v74 = OUTLINED_FUNCTION_112_4();
    specialized Dictionary.subscript.setter(v74, 2);
  }
  v44 = (uint64_t)v50 >= v87;
  v43 = (void *)v92;
LABEL_23:
  v75 = v44;
  v76 = (Swift::Int)v21;
  result.metrics._rawValue = v43;
  result._0 = v76;
  result.finished = v75;
  return result;
}

void CMLModel.predict(validationURL:)()
{
  OUTLINED_FUNCTION_50_17();
}

id *sub_21AEFAA04(id *result)
{
  uint64_t v1;
  uint64_t v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  char v15;

  if (result)
  {
    v3 = result;
    OUTLINED_FUNCTION_49_14();
    *(_QWORD *)(swift_initStackObject() + 16) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    v4 = OUTLINED_FUNCTION_78();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_21AFE7DA0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(v7 + v6, v1, v4);
    static MLStyleTransfer.generateTrainingTable(urls:)();
    if (v2)
    {
      OUTLINED_FUNCTION_217();
      OUTLINED_FUNCTION_53_18();
      v8 = (id *)v7;
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    else
    {
      OUTLINED_FUNCTION_53_18();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      v12 = v14;
      v13 = v15;
      outlined copy of Result<_DataTable, Error>(v14, v15);
      v8 = (id *)&v12;
      OUTLINED_FUNCTION_17_24((uint64_t)&v14);
      OUTLINED_FUNCTION_1_14();
      v9 = v14;
      if ((v15 & 1) != 0)
      {
        outlined consume of Result<_DataTable, Error>(v14, 1);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_49_0();
        OUTLINED_FUNCTION_18_0(v10, 0xD000000000000021);
      }
      else
      {
        v11 = v14[2];
        swift_retain();
        OUTLINED_FUNCTION_111_5();
        OUTLINED_FUNCTION_47_19(4u, v11);
        if (!v9)
        {
          v8 = (id *)OUTLINED_FUNCTION_59_14(0xAu);
          OUTLINED_FUNCTION_99();
          OUTLINED_FUNCTION_1_14();
          swift_setDeallocating();
          tc_v1_release();
          return v8;
        }
        OUTLINED_FUNCTION_99();
      }
      OUTLINED_FUNCTION_1_14();
      OUTLINED_FUNCTION_217();
    }
    return v8;
  }
  __break(1u);
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Bool v5;
  Swift::tuple_Int_finished_Bool result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  OUTLINED_FUNCTION_51_0();
  CMLModel.callFunction(name:arguments:)(4u, v3);
  OUTLINED_FUNCTION_81();
  if (!v2)
    OUTLINED_FUNCTION_4_2();
  v4 = 1;
  v5 = 1;
  result._0 = v4;
  result.finished = v5;
  return result;
}

void MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  OUTLINED_FUNCTION_91_0();
  __asm { BR              X10 }
}

uint64_t sub_21AEFAC70()
{
  char v0;

  v0 = OUTLINED_FUNCTION_35_8();
  swift_bridgeObjectRelease();
  if ((v0 & 1) != 0)
    OUTLINED_FUNCTION_50_17();
  return 0;
}

void MLStyleTransfer.TrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_53_0();
  v7 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_101_8(v7);
  v8 = OUTLINED_FUNCTION_94_2();
  v10 = OUTLINED_FUNCTION_128(v8, v9, v5);
  if (v11)
  {
    OUTLINED_FUNCTION_93_1(v10, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000030;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    v13 = OUTLINED_FUNCTION_22_18();
    outlined init with take of MLStyleTransfer.PersistentParameters(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
    MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(a1);
    OUTLINED_FUNCTION_118_4(v2);
  }
}

void MLStyleTransfer.TrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_8_1();
  v24 = v0;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_60_10();
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = OUTLINED_FUNCTION_19_31();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v24 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, v5, v11, v19);
  MLStyleTransfer.PersistentParameters.init(sessionDirectory:)((uint64_t)v14, (uint64_t)v21);
  if (!v1)
  {
    v22 = v24 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_89_6(v22);
    OUTLINED_FUNCTION_128(v2, 1, v25);
    if (v23)
    {
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      outlined init with take of MLStyleTransfer.PersistentParameters((uint64_t)v21, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v3, 0, 1, v25);
      outlined init with take of MLStyleTransfer.PersistentParameters?(v3, (uint64_t)v8, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLStyleTransfer.PersistentParameters?((uint64_t)v8, v22);
      swift_endAccess();
    }
    else
    {
      OUTLINED_FUNCTION_91_6(v2);
      MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)();
      OUTLINED_FUNCTION_92((uint64_t)v17);
      OUTLINED_FUNCTION_92((uint64_t)v21);
    }
  }
  OUTLINED_FUNCTION_7();
}

void MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;

  OUTLINED_FUNCTION_8_1();
  v115 = v0;
  v2 = v1;
  v4 = v3;
  v5 = (int *)OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v116 = v7;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v114 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v114 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v114 - v15;
  v17 = (int *)OUTLINED_FUNCTION_19_31();
  v18 = v17[6];
  v118 = v17[5];
  v19 = *(_BYTE *)(v4 + v118);
  v20 = (uint64_t)&v16[v5[5]];
  v127 = v4 + v18;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v4 + v18, v20, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v21 = v17[7];
  v125 = v17[8];
  v126 = v21;
  OUTLINED_FUNCTION_56_15();
  *(_QWORD *)&v16[v22] = v23;
  *v16 = v19;
  OUTLINED_FUNCTION_55_15();
  *(_QWORD *)&v16[v24] = v25;
  *(_QWORD *)&v16[v5[8]] = v26;
  *(_QWORD *)&v16[v5[9]] = v27;
  v117 = v17[9];
  v16[v28] = *(_BYTE *)(v4 + v117);
  OUTLINED_FUNCTION_92((uint64_t)v16);
  v29 = *(_BYTE *)(v2 + v17[5]);
  OUTLINED_FUNCTION_58_12();
  v119 = v31;
  v120 = v30;
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v30, v32, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v33 = v17[7];
  v121 = v17[8];
  v122 = v33;
  OUTLINED_FUNCTION_56_15();
  *(_QWORD *)&v13[v34] = v35;
  *v13 = v29;
  OUTLINED_FUNCTION_55_15();
  *(_QWORD *)&v13[v36] = v37;
  *(_QWORD *)&v13[v5[8]] = v38;
  *(_QWORD *)&v13[v5[9]] = v39;
  v123 = v17[9];
  v124 = v2;
  v13[v40] = *(_BYTE *)(v2 + v123);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v13, type metadata accessor for MLStyleTransfer.ModelParameters);
  specialized == infix<A>(_:_:)(v19, v29);
  v41 = v118;
  v42 = *(unsigned __int8 *)(v4 + v118);
  v43 = v5[5];
  if ((v44 & 1) == 0)
  {
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v127, (uint64_t)&v10[v43], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_56_15();
    *(_QWORD *)&v10[v84] = v85;
    *v10 = v42;
    OUTLINED_FUNCTION_55_15();
    *(_QWORD *)&v10[v86] = v87;
    *(_QWORD *)&v10[v5[8]] = v88;
    *(_QWORD *)&v10[v5[9]] = v89;
    v10[v90] = *(_BYTE *)(v4 + v117);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v10, type metadata accessor for MLStyleTransfer.ModelParameters);
    v91 = 0xD000000000000046;
    if (v42)
      v92 = 0xD00000000000004FLL;
    else
      v92 = 0xD000000000000046;
    v127 = v92;
    v93 = 0x800000021AFF2460;
    if (v42)
      v94 = 0x800000021AFF2410;
    else
      v94 = 0x800000021AFF2460;
    v95 = v124;
    v96 = *(unsigned __int8 *)(v124 + v119);
    v97 = v116;
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v120, (uint64_t)&v116[v5[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_56_15();
    *(_QWORD *)&v97[v98] = v99;
    *v97 = v96;
    OUTLINED_FUNCTION_55_15();
    *(_QWORD *)&v97[v100] = v101;
    *(_QWORD *)&v97[v5[8]] = v102;
    *(_QWORD *)&v97[v5[9]] = v103;
    v97[v104] = *(_BYTE *)(v95 + v123);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v97, type metadata accessor for MLStyleTransfer.ModelParameters);
    if (v96)
    {
      v91 = 0xD00000000000004FLL;
      v93 = 0x800000021AFF2410;
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)&v83 = 0x687469726F676C41;
    *(_OWORD *)v82 = xmmword_21AFEA200;
    *(_QWORD *)(v82 + 16) = v127;
    *(_QWORD *)(v82 + 24) = v94;
    *(_QWORD *)(v82 + 32) = v91;
    *(_QWORD *)(v82 + 40) = v93;
    goto LABEL_16;
  }
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v127, (uint64_t)&v16[v43], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v116 = *(_BYTE **)(v4 + v126);
  OUTLINED_FUNCTION_81_10();
  *v16 = v42;
  *(_QWORD *)&v16[v5[7]] = 500;
  *(_QWORD *)&v16[v5[8]] = v45;
  *(_QWORD *)&v16[v5[9]] = v46;
  v47 = v117;
  v16[v48] = *(_BYTE *)(v4 + v117);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLStyleTransfer.ModelParameters);
  v49 = v124;
  v50 = *(_BYTE *)(v124 + v119);
  OUTLINED_FUNCTION_58_12();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v51, v52, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v53 = *(_BYTE **)(v49 + v122);
  OUTLINED_FUNCTION_80_9();
  *v13 = v50;
  *(_QWORD *)&v13[v5[7]] = 500;
  *(_QWORD *)&v13[v5[8]] = v53;
  *(_QWORD *)&v13[v5[9]] = v54;
  v55 = OUTLINED_FUNCTION_113_6();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v55, type metadata accessor for MLStyleTransfer.ModelParameters);
  LOBYTE(v49) = *(_BYTE *)(v4 + v41);
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v127, (uint64_t)&v16[v5[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v56 = *(_QWORD *)(v4 + v126);
  v57 = *(_QWORD *)(v4 + v125);
  *(_QWORD *)&v16[v5[6]] = 1;
  v58 = v5[10];
  *v16 = v49;
  *(_QWORD *)&v16[v5[7]] = 500;
  *(_QWORD *)&v16[v5[8]] = v56;
  *(_QWORD *)&v16[v5[9]] = v57;
  v16[v58] = *(_BYTE *)(v4 + v47);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLStyleTransfer.ModelParameters);
  if (v116 != v53)
  {
    v74 = lazy protocol witness table accessor for type Int and conformance Int();
    v71 = OUTLINED_FUNCTION_75_13();
    v73 = v105;
    v106 = v124;
    v75 = *(unsigned __int8 *)(v124 + v119);
    OUTLINED_FUNCTION_58_12();
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v107, v108, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v109 = *(_QWORD *)(v106 + v122);
    OUTLINED_FUNCTION_14_29();
    *(_QWORD *)&v13[v110] = v109;
    *(_QWORD *)&v13[v5[9]] = v111;
    v13[v112] = *(_BYTE *)(v106 + v123);
    OUTLINED_FUNCTION_58_0(v113, type metadata accessor for MLStyleTransfer.ModelParameters);
    OUTLINED_FUNCTION_75_13();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    v83 = xmmword_21AFED090;
    goto LABEL_15;
  }
  v59 = v124;
  v60 = *(_BYTE *)(v124 + v119);
  OUTLINED_FUNCTION_58_12();
  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v61, v62, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v63 = *(_QWORD *)(v59 + v121);
  OUTLINED_FUNCTION_80_9();
  *v13 = v60;
  *(_QWORD *)&v13[v5[7]] = 500;
  *(_QWORD *)&v13[v5[8]] = v64;
  *(_QWORD *)&v13[v5[9]] = v63;
  v13[v65] = *(_BYTE *)(v59 + v123);
  OUTLINED_FUNCTION_58_0(v66, type metadata accessor for MLStyleTransfer.ModelParameters);
  if (v57 != v63)
  {
    v67 = *(_BYTE *)(v4 + v118);
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v127, (uint64_t)&v16[v5[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v68 = *(_QWORD *)(v4 + v125);
    OUTLINED_FUNCTION_81_10();
    *v16 = v67;
    *(_QWORD *)&v16[v5[7]] = 500;
    *(_QWORD *)&v16[v5[8]] = v69;
    *(_QWORD *)&v16[v5[9]] = v68;
    v16[v70] = *(_BYTE *)(v4 + v117);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLStyleTransfer.ModelParameters);
    lazy protocol witness table accessor for type Int and conformance Int();
    v71 = OUTLINED_FUNCTION_76_7();
    v73 = v72;
    v74 = v124;
    v75 = *(unsigned __int8 *)(v124 + v119);
    OUTLINED_FUNCTION_58_12();
    outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(v76, v77, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    v78 = *(_QWORD *)(v74 + v121);
    OUTLINED_FUNCTION_14_29();
    *(_QWORD *)&v13[v80] = v79;
    *(_QWORD *)&v13[v5[9]] = v78;
    v81 = OUTLINED_FUNCTION_113_6();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v81, type metadata accessor for MLStyleTransfer.ModelParameters);
    OUTLINED_FUNCTION_76_7();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    v83 = xmmword_21AFED0A0;
LABEL_15:
    *(_OWORD *)v82 = v83;
    *(_QWORD *)(v82 + 16) = v71;
    *(_QWORD *)(v82 + 24) = v73;
    *(_QWORD *)(v82 + 32) = v74;
    *(_QWORD *)(v82 + 40) = v75;
LABEL_16:
    *(_BYTE *)(v82 + 48) = 3;
    swift_willThrow(*(double *)&v83);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.__deallocating_deinit()
{
  MLStyleTransfer.TrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MLStyleTransfer.TrainingSessionDelegate()
{
  return type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
}

uint64_t type metadata accessor for MLStyleTransfer.TrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate;
  if (!type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLStyleTransfer.TrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLStyleTransfer.PersistentParameters?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for MLStyleTransfer.PersistentParameters?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
  {
    type metadata accessor for MLStyleTransfer.PersistentParameters();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance MLStyleTransfer.TrainingSessionDelegate()
{
  MLStyleTransfer.TrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::OpaquePointer a1)
{
  MLStyleTransfer.TrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance MLStyleTransfer.TrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  Swift::Int *v1;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 finished;
  Swift::Int v6;
  void *rawValue;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9;

  v9 = MLStyleTransfer.TrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    v9._0 = v1[1];
    v9.metrics._rawValue = v1;
    finished = 0;
  }
  else
  {
    v6 = v9._0;
    rawValue = v9.metrics._rawValue;
    v9._0 = v1[1];
    finished = v9.finished;
    v9.metrics._rawValue = v1;
    *(_QWORD *)&v9.finished = v6;
    v3 = (uint64_t)rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9._0, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, v3, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(a1);
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v2 = 1;
    v4 = 1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v2, v4);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance MLStyleTransfer.TrainingSessionDelegate()
{
  char v0;

  MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  MLStyleTransfer.TrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance MLStyleTransfer.TrainingSessionDelegate()
{
  MLStyleTransfer.TrainingSessionDelegate.restore(from:phase:)();
}

uint64_t outlined init with copy of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined init with take of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_29_23(v3);
  OUTLINED_FUNCTION_22();
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x22075B938](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t closure #1 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = MEMORY[0x2207587E8]();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = MEMORY[0x220758800]();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_166(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  OUTLINED_FUNCTION_22();
}

void outlined init with take of MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_29_23(v3);
  OUTLINED_FUNCTION_22();
}

void OUTLINED_FUNCTION_14_29()
{
  char v0;
  uint64_t v1;
  _BYTE *v2;

  *(_QWORD *)&v2[*(int *)(v1 + 24)] = 1;
  *v2 = v0;
  *(_QWORD *)&v2[*(int *)(v1 + 28)] = 500;
}

void OUTLINED_FUNCTION_15_30()
{
  uint64_t v0;

  strcpy((char *)(v0 + 16), "style_transfer");
  *(_BYTE *)(v0 + 31) = -18;
}

void OUTLINED_FUNCTION_17_24(uint64_t a1@<X8>)
{
  MLDataTable.subscript.getter(0x55746E65746E6F63, (void *)0xEB00000000734C52, a1);
}

uint64_t OUTLINED_FUNCTION_19_31()
{
  return type metadata accessor for MLStyleTransfer.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_22_25(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_25_24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 336) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_29_23(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void OUTLINED_FUNCTION_32_21(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 320) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_33_23(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_34_24()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_37_15()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_41_19(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_44_20()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t OUTLINED_FUNCTION_45_19()
{
  return type metadata accessor for MLTrainingSessionParameters();
}

void OUTLINED_FUNCTION_47_19(unsigned __int8 a1, uint64_t a2)
{
  CMLParameters.add(key:column:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_49_14()
{
  return type metadata accessor for CMLParameters();
}

void OUTLINED_FUNCTION_50_17()
{
  JUMPOUT(0x22075BB9CLL);
}

uint64_t OUTLINED_FUNCTION_53_18()
{
  return swift_setDeallocating();
}

id OUTLINED_FUNCTION_54_13(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2, 0, 0);
}

uint64_t OUTLINED_FUNCTION_57_12(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

_QWORD *OUTLINED_FUNCTION_59_14(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLModel.callFunction(name:arguments:)(a1, v1);
}

void OUTLINED_FUNCTION_60_14(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of URL?(a1, v1);
}

void OUTLINED_FUNCTION_61_11(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(v1 + 28)) = 4 * (a1 / 4);
}

uint64_t OUTLINED_FUNCTION_62_17(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_67_14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 224))(a1, v1);
}

void OUTLINED_FUNCTION_69_9(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_73_10(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_75_13()
{
  return BinaryInteger.description.getter();
}

uint64_t OUTLINED_FUNCTION_76_7()
{
  return BinaryInteger.description.getter();
}

_QWORD *OUTLINED_FUNCTION_77_9(unsigned __int8 a1, uint64_t a2)
{
  return CMLModel.callFunction(name:arguments:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_78_8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

void OUTLINED_FUNCTION_80_9()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(v0 + 24)) = 1;
}

void OUTLINED_FUNCTION_81_10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(v0 + 24)) = 1;
}

void OUTLINED_FUNCTION_84_6(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_85_6@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_87_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_88_5(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_89_6(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of MLStyleTransfer.PersistentParameters?(a1, v1);
}

void OUTLINED_FUNCTION_90_3(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(a1, v2, v1);
}

void OUTLINED_FUNCTION_91_6(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of MLStyleTransfer.PersistentParameters(a1, v2, v1);
}

void OUTLINED_FUNCTION_92_4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_95_6()
{
  return tc_v1_release();
}

void OUTLINED_FUNCTION_97_6(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_98_5()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_99_6(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLStyleTransfer.ModelParameters.ValidationData(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_100_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 224))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_101_8(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of MLStyleTransfer.PersistentParameters?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_102_3()
{
  return type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_106_6()
{
  return _convertNSErrorToError(_:)();
}

void OUTLINED_FUNCTION_111_5()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_112_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 144) = v0;
  return v2 - 144;
}

uint64_t OUTLINED_FUNCTION_113_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + v0) = *(_BYTE *)(v1 + *(_QWORD *)(v3 - 120));
  return v2;
}

uint64_t OUTLINED_FUNCTION_115_5()
{
  return type metadata accessor for CMLModel();
}

void OUTLINED_FUNCTION_118_4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

unint64_t specialized _setUpCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t result;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
    v2 = OUTLINED_FUNCTION_63_13();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B08];
  }
  v3 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(63 - v4) >> 6;
  OUTLINED_FUNCTION_23_3();
  result = OUTLINED_FUNCTION_3_1();
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v6 &= v6 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    OUTLINED_FUNCTION_16_0();
    result = specialized _NativeSet._unsafeInsertNew(_:)(v14, v15, v2);
    if (v6)
      goto LABEL_8;
LABEL_9:
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v7)
      goto LABEL_27;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9 + 2;
      if (v9 + 2 >= v7)
        goto LABEL_27;
      v11 = *(_QWORD *)(v3 + 8 * v12);
      if (!v11)
      {
        v12 = v9 + 3;
        if (v9 + 3 >= v7)
          goto LABEL_27;
        v11 = *(_QWORD *)(v3 + 8 * v12);
        if (!v11)
        {
          v12 = v9 + 4;
          if (v9 + 4 >= v7)
            goto LABEL_27;
          v11 = *(_QWORD *)(v3 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v11 - 1) & v11;
    v9 = v12;
  }
  v13 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_27:
    swift_release();
    OUTLINED_FUNCTION_69_10();
    return v2;
  }
  v11 = *(_QWORD *)(v3 + 8 * v13);
  if (v11)
  {
    v12 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v7)
      goto LABEL_27;
    v11 = *(_QWORD *)(v3 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized _setUpCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  char v29;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
    v2 = OUTLINED_FUNCTION_63_13();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B08];
  }
  v27 = a1 + 56;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(63 - v3) >> 6;
  v7 = v2 + 56;
  OUTLINED_FUNCTION_23_3();
  swift_retain();
  v8 = 0;
  if (!v5)
    goto LABEL_9;
LABEL_8:
  v5 &= v5 - 1;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    OUTLINED_FUNCTION_16_0();
    Hasher.init(_seed:)();
    if (v29 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v28);
    }
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v7 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v7 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
    *(_QWORD *)(v7 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v2 + 48) + 16 * v21;
    *(_QWORD *)v26 = v28;
    *(_BYTE *)(v26 + 8) = v29;
    ++*(_QWORD *)(v2 + 16);
    if (v5)
      goto LABEL_8;
LABEL_9:
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_41;
    if (v9 >= v6)
      goto LABEL_39;
    v10 = *(_QWORD *)(v27 + 8 * v9);
    v11 = v8 + 1;
    if (!v10)
    {
      if (v8 + 2 >= v6)
        goto LABEL_39;
      OUTLINED_FUNCTION_84_7();
      if (!v10)
      {
        if (v12 + 2 >= v6)
          goto LABEL_39;
        OUTLINED_FUNCTION_84_7();
        if (!v10)
        {
          if (v13 + 3 >= v6)
            goto LABEL_39;
          OUTLINED_FUNCTION_84_7();
          if (!v10)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v10 - 1) & v10;
    v8 = v11;
  }
  v15 = v14 + 4;
  if (v15 >= v6)
  {
LABEL_39:
    swift_release();
    OUTLINED_FUNCTION_69_10();
    return;
  }
  v10 = *(_QWORD *)(v27 + 8 * v15);
  if (v10)
  {
    v11 = v15;
    goto LABEL_24;
  }
  while (!__OFADD__(v15, 1))
  {
    if (v15 + 1 >= v6)
      goto LABEL_39;
    OUTLINED_FUNCTION_84_7();
    v15 = v16 + 1;
    if (v10)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
}

id MLRandomForestClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_6_41() + 20));
}

uint64_t type metadata accessor for MLRandomForestClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLRandomForestClassifier;
  if (!type metadata singleton initialization cache for MLRandomForestClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLRandomForestClassifier.model : MLRandomForestClassifier(id *a1)
{
  MLRandomForestClassifier.model.setter((uint64_t)*a1);
}

void MLRandomForestClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_6_41() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLRandomForestClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_6_41() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLRandomForestClassifier.targetColumn.getter()
{
  OUTLINED_FUNCTION_6_41();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_3_9();
}

void MLRandomForestClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_6_41() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLRandomForestClassifier.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_6_41();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.featureColumns.getter()
{
  OUTLINED_FUNCTION_6_41();
  return swift_bridgeObjectRetain();
}

void MLRandomForestClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_6_41() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLRandomForestClassifier.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_6_41();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_6_41() + 32);
  return outlined init with copy of MLRandomForestClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLRandomForestClassifier.ModelParameters(a2, a1);
  return a2;
}

void MLRandomForestClassifier.trainingMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_6_41();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 36), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLRandomForestClassifier.validationMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_6_41();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 40), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void static MLRandomForestClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

#error "21AEFC924: call analysis failed (funcsize=61)"

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(const void **)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v6 + *(int *)(v4 + 20)) = *(_QWORD *)(v2 + 88);
  OUTLINED_FUNCTION_66_14(v5, a2, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  memcpy((void *)(v6 + *(int *)(v4 + 32)), v3, 0x58uLL);
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  v1 = *(_QWORD *)(v0 + 16) + *(int *)(v0 + 96);
  v2 = outlined destroy of MLRandomForestClassifier.ModelParameters(*(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_203(v2, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics);
  v3 = OUTLINED_FUNCTION_3_9();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v89;
  void *v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int v109;
  Swift::String v110;
  int *v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t);
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t);
  _QWORD *v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  _OWORD v203[5];
  _BYTE v204[16];
  uint64_t v205;

  OUTLINED_FUNCTION_8_1();
  v193 = v0;
  v4 = v3;
  v192 = (char *)v5;
  v199 = v6;
  v190 = (_QWORD *)v7;
  v9 = v8;
  v11 = v10;
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_211();
  v15 = OUTLINED_FUNCTION_28_3(v14);
  type metadata accessor for MLClassifierMetrics(v15);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v18);
  v19 = type metadata accessor for AnyTreeClassifierModel();
  v175 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v177 = (uint64_t)&v158 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = v20;
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_211();
  v179 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_64();
  v186 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v26);
  v182 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v30);
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v32);
  v205 = type metadata accessor for DataFrame();
  v195 = *(_QWORD *)(v205 - 8);
  MEMORY[0x24BDAC7A8](v205);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v36);
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_53_0();
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v158 - v45;
  v197 = OUTLINED_FUNCTION_72_10();
  v196 = *(_QWORD *)(v197 - 8);
  MEMORY[0x24BDAC7A8](v197);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_55_16();
  v48 = type metadata accessor for MLRandomForestClassifier();
  v194 = (uint64_t)v11 + *(int *)(v48 + 36);
  MLClassifierMetrics.init()(v48, v49, v50, v51, v52, v53, v54, v55, v158, (uint64_t)v159, v160, v161, v162, v163, v164, v165, v166, v167, v168,
    v169);
  v174 = (int *)v48;
  v56 = *(int *)(v48 + 40);
  v178 = v11;
  v57 = (_QWORD *)((char *)v11 + v56);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v58, 0xD0000000000000C0);
  *v57 = v59;
  v60 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v191 = v57;
  v168 = v60;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLRandomForestClassifier.ModelParameters(v4, (uint64_t)v203);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.parallelTreeCount.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)v203);
  v198 = v4;
  _sypSgWOcTm_0(v4, (uint64_t)&v201, &demangling cache variable for type metadata for Any?);
  if (v202)
  {
    v61 = (uint64_t)&v46[*(int *)(v38 + 48)];
    outlined init with take of Any(&v201, v203);
    swift_dynamicCast();
    v62 = (void (*)(uint64_t, uint64_t))v1;
    v63 = v193;
    MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v63)
    {
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_7_38();
      OUTLINED_FUNCTION_74_10(*(uint64_t (**)(uint64_t, _QWORD))(v195 + 8));
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_34_3(v2, *(uint64_t (**)(uint64_t, _QWORD))(v196 + 8));
    }
    else
    {
      v193 = v61;
      v163 = v38;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v46, (uint64_t)v190, v199, (uint64_t)v192);
      v65 = v195;
      v161 = v64;
      v162 = 0;
      v160 = v9;
      OUTLINED_FUNCTION_12_0();
      v66 = v163;
      v67 = v188;
      v68 = v188 + *(int *)(v163 + 48);
      v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
      v192 = v46;
      v159 = v69;
      v69(v188, (uint64_t)v46, v205);
      v70 = v193;
      v71 = OUTLINED_FUNCTION_3_9();
      _sypSgWOcTm_0(v71, v72, v73);
      if (__swift_getEnumTagSinglePayload(v68, 1, v205) == 1)
      {
        outlined destroy of URL?(v68, &demangling cache variable for type metadata for DataFrame?);
        v74 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v74(v67, v205);
      }
      else
      {
        v86 = v180;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v180, v68, v205);
        v87 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v87(v67, v205);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
        v89 = (uint64_t)v190;
        v90 = v199;
        *(_QWORD *)(inited + 32) = v190;
        *(_QWORD *)(inited + 40) = v90;
        OUTLINED_FUNCTION_23_3();
        v91._countAndFlagsBits = 0x73616C4365657254;
        v91._object = (void *)0xEE00726569666973;
        DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v91);
        v92 = v198;
        OUTLINED_FUNCTION_67_15();
        if (v93)
        {
          swift_setDeallocating();
          v62 = (void (*)(uint64_t, uint64_t))inited;
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_50_9();
          outlined destroy of MLRandomForestClassifier.ModelParameters(v92);
          v87(v160, v205);
          v94 = OUTLINED_FUNCTION_130_0();
          v95 = ((uint64_t (*)(uint64_t))v87)(v94);
          OUTLINED_FUNCTION_14_30(v95, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v2, v197);
          goto LABEL_5;
        }
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
        v102 = swift_allocObject();
        *(_OWORD *)(v102 + 16) = xmmword_21AFE7F70;
        v103 = MEMORY[0x24BEE1768];
        *(_QWORD *)(v102 + 32) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v102 + 40) = v103;
        v104._countAndFlagsBits = v89;
        v104._object = v90;
        v105._countAndFlagsBits = 0x73616C4365657254;
        v105._object = (void *)0xEE00726569666973;
        DataFrame.validateColumnTypes(_:_:context:)(v104, (Swift::OpaquePointer)v102, v105);
        v62 = (void (*)(uint64_t, uint64_t))v197;
        OUTLINED_FUNCTION_67_15();
        if (v106)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_50_9();
          OUTLINED_FUNCTION_101();
          OUTLINED_FUNCTION_7_38();
          OUTLINED_FUNCTION_31_24(v160);
          v107 = OUTLINED_FUNCTION_31_24(v86);
          OUTLINED_FUNCTION_14_30(v107, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          (*(void (**)(uint64_t, _QWORD))(v196 + 8))(v2, v62);
          goto LABEL_5;
        }
        v124 = OUTLINED_FUNCTION_130_0();
        v74 = v87;
        ((void (*)(uint64_t))v87)(v124);
        OUTLINED_FUNCTION_101();
        v66 = v163;
        v70 = v193;
      }
      v75 = v184;
      v76 = v184 + *(int *)(v66 + 48);
      v77 = (uint64_t)v192;
      v78 = v159;
      v159(v184, (uint64_t)v192, v205);
      v188 = v76;
      _sypSgWOcTm_0(v70, v76, &demangling cache variable for type metadata for DataFrame?);
      v79 = v70;
      v80 = v199;
      MEMORY[0x220758A1C](v190, v199);
      v74(v75, v205);
      v81 = *(int *)(v66 + 48);
      v82 = v185;
      v83 = v185 + v81;
      v78(v185, v77, v205);
      _sypSgWOcTm_0(v79, v83, &demangling cache variable for type metadata for DataFrame?);
      v84 = v186;
      outlined init with take of DataFrame?(v83, v186);
      v62 = v74;
      if (__swift_getEnumTagSinglePayload(v84, 1, v205) == 1)
      {
        v74(v82, v205);
        outlined destroy of URL?(v84, &demangling cache variable for type metadata for DataFrame?);
        v85 = v183;
        OUTLINED_FUNCTION_61_12(v183, 1);
      }
      else
      {
        v85 = v183;
        MEMORY[0x220758A1C](v190, v80);
        v62(v84, v205);
        OUTLINED_FUNCTION_61_12(v85, 0);
        v62(v82, v205);
      }
      v96 = v196;
      v97 = v187;
      v98 = v181;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v181, v2, v197);
      swift_bridgeObjectRetain();
      v99 = v161;
      swift_bridgeObjectRetain();
      v100 = v162;
      AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v85, (uint64_t)v190, v80, v99, v98, v97);
      if (!v100)
      {
        v189 = v62;
        OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)v204);
        AnyTreeClassifier.fitted(to:validateOn:eventHandler:)((uint64_t)v192, v193, 0, 0, v179);
        v162 = 0;
        if ((AnalyticsReporter.init()() & 1) == 0)
        {
          v108 = v173 + *(int *)(v163 + 48);
          OUTLINED_FUNCTION_52_11(v173, (uint64_t)v192);
          _sypSgWOcTm_0(v193, v108, &demangling cache variable for type metadata for DataFrame?);
          v109 = DataFrame.shape.getter();
          OUTLINED_FUNCTION_130_0();
          OUTLINED_FUNCTION_30_24();
          v110._countAndFlagsBits = 0xD000000000000015;
          v110._object = (void *)0x800000021AFF21D0;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestClassifier, v110, v109);
        }
        v111 = v174;
        v112 = v178;
        v113 = (_QWORD *)((char *)v178 + v174[6]);
        v114 = (uint64_t)v190;
        v115 = (uint64_t)v199;
        v190 = v113;
        *v113 = v114;
        v113[1] = v115;
        v116 = v198;
        v199 = (char *)v112 + v111[8];
        outlined init with copy of MLRandomForestClassifier.ModelParameters(v198, (uint64_t)v199);
        v188 = v111[7];
        *(_QWORD *)((char *)v112 + v188) = v161;
        v117 = v179;
        v118 = v177;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0((uint64_t)v179, v177, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        v119 = (*(unsigned __int8 *)(v175 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80);
        v62 = (void (*)(uint64_t, uint64_t))swift_allocObject();
        outlined init with take of TreeRegressorModel(v118, (uint64_t)v62 + v119, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        v120 = v162;
        specialized blockAwait<A>(_:)();
        if (v120)
        {
          v162 = v120;
          swift_release();
          outlined destroy of MLRandomForestClassifier.ModelParameters(v116);
          v122 = OUTLINED_FUNCTION_30_24();
          OUTLINED_FUNCTION_84_6(v122, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
          outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v187, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_14_30(v123, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_3_43();
          OUTLINED_FUNCTION_82_8();
        }
        else
        {
          v125 = v121;
          swift_release();
          v126 = v111[5];
          *(_QWORD *)((char *)v112 + v126) = v125;
          OUTLINED_FUNCTION_97((uint64_t)v117, v127, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
          v128 = v172;
          v129 = (uint64_t)v192;
          OUTLINED_FUNCTION_18();
          AnyTreeClassifierModel.applied(to:eventHandler:)(v130);
          OUTLINED_FUNCTION_67_15();
          v186 = v126;
          v134 = *v112;
          v135 = v112[1];
          MEMORY[0x220758A1C](*v112, v135);
          v136 = v171;
          MEMORY[0x220758A1C](v134, v135);
          v137 = v170;
          AnyClassificationMetrics.init(_:_:)();
          v189(v128, v205);
          OUTLINED_FUNCTION_85_7(v137, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)&v200);
          OUTLINED_FUNCTION_130_1();
          outlined assign with take of MLClassifierMetrics(v136, v194);
          v138 = v169;
          v139 = v169 + *(int *)(v163 + 48);
          OUTLINED_FUNCTION_52_11(v169, v129);
          _sypSgWOcTm_0(v193, v139, &demangling cache variable for type metadata for DataFrame?);
          if (__swift_getEnumTagSinglePayload(v139, 1, v205) == 1)
          {
            OUTLINED_FUNCTION_7_38();
            v140 = OUTLINED_FUNCTION_31_24(v160);
            OUTLINED_FUNCTION_68_13(v140, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_84_6(v141, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
            outlined destroy of URL?(v129, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            OUTLINED_FUNCTION_3_43();
            outlined destroy of URL?(v139, &demangling cache variable for type metadata for DataFrame?);
            OUTLINED_FUNCTION_31_24(v138);
            goto LABEL_7;
          }
          v142 = v167;
          v143 = OUTLINED_FUNCTION_3_9();
          v144(v143);
          OUTLINED_FUNCTION_31_24(v138);
          OUTLINED_FUNCTION_18();
          v145 = v178;
          v146 = v162;
          AnyTreeClassifierModel.applied(to:eventHandler:)(v147);
          v148 = v160;
          OUTLINED_FUNCTION_67_15();
          if (!v146)
          {
            v150 = *v145;
            v151 = v145[1];
            MEMORY[0x220758A1C](v150, v151);
            v152 = v151;
            v153 = v167;
            MEMORY[0x220758A1C](v150, v152);
            v154 = v165;
            AnyClassificationMetrics.init(_:_:)();
            OUTLINED_FUNCTION_83_9(v166);
            OUTLINED_FUNCTION_7_38();
            OUTLINED_FUNCTION_83_9(v160);
            v155 = OUTLINED_FUNCTION_83_9(v153);
            OUTLINED_FUNCTION_68_13(v155, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_84_6(v156, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
            OUTLINED_FUNCTION_14_30(v157, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            OUTLINED_FUNCTION_3_43();
            OUTLINED_FUNCTION_85_7(v154, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)&v194);
            OUTLINED_FUNCTION_130_1();
            outlined assign with take of MLClassifierMetrics(v154, (uint64_t)v191);
            goto LABEL_7;
          }
          OUTLINED_FUNCTION_7_38();
          OUTLINED_FUNCTION_31_24(v148);
          OUTLINED_FUNCTION_31_24(v142);
          v149 = v186;
          v62 = (void (*)(uint64_t, uint64_t))type metadata accessor for AnyTreeClassifierModel;
          OUTLINED_FUNCTION_82_5((uint64_t)v179);
          OUTLINED_FUNCTION_84_6(v131, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_14_30(v132, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_3_43();
          OUTLINED_FUNCTION_82_5((uint64_t)v145);

          OUTLINED_FUNCTION_82_8();
        }
        v133 = (uint64_t)v199;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLRandomForestClassifier.ModelParameters(v133);
LABEL_6:
        outlined destroy of MLHandPoseClassifier.ModelParameters(v194, type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v62, type metadata accessor for MLClassifierMetrics);
LABEL_7:
        OUTLINED_FUNCTION_7();
        return;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_7_38();
      v101 = ((uint64_t (*)(uint64_t, uint64_t))v62)(v160, v205);
      OUTLINED_FUNCTION_14_30(v101, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      OUTLINED_FUNCTION_23_2(v2, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
      OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)v204);
    }
LABEL_5:
    OUTLINED_FUNCTION_82_8();
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t outlined destroy of MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

uint64_t closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_161();
  v8 = *((_BYTE *)a1 + 8);
  v9 = *a1;
  v10 = v8;
  DataFrame.init(_:)((uint64_t)&v9);
  outlined init with copy of MLRandomForestClassifier.ModelParameters(a5, (uint64_t)&v9);
  MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
  outlined destroy of MLRandomForestClassifier.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLRandomForestClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  v3 = v2;
  v35 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  v34 = v5;
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v36 = v7;
  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_36_6();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v40 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for AnyTreeClassifierModel();
  v42 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v39 = (uint64_t)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v41 = v15;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_16();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  v43 = v18;
  v19 = type metadata accessor for MLRandomForestClassifier();
  v44 = v3 + *(int *)(v19 + 36);
  MLClassifierMetrics.init()(v19, v20, v21, v22, v23, v24, v25, v26, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
    v43);
  v33 = v19;
  v27 = *(int *)(v19 + 40);
  v37 = v3;
  v28 = (_QWORD *)(v3 + v27);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v29, 0xD0000000000000C0);
  *v28 = v30;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v31 = (char *)sub_21AEFE07C
      + 4 * byte_21AFED110[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AEFE07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v27;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_12_0();
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)(v4 - 176) = v2;
    specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
    v7 = v6;
    BoostedTreeConfiguration.init()();
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v7, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
    lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
    v8 = *(void **)(v4 - 128);
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
    if (v8)
    {
      v9 = specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
      BoostedTreeConfiguration.init()();
      v10 = *(_QWORD *)(v4 - 160);
      AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v9, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
      v11 = *(_QWORD *)(v4 - 168);
      UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v10, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);

      v3 = v11;
    }
    v13 = *(_QWORD *)(v4 - 136);
    outlined init with take of TreeRegressorModel(v3, v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v14 = *(_QWORD *)(v4 - 152);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 144) + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject();
    outlined init with take of TreeRegressorModel(v14, v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    specialized blockAwait<A>(_:)();
    v19 = v18;
    swift_release();
    v20 = *(int **)(v4 - 216);
    v21 = *(_QWORD *)(v4 - 184);
    *(_QWORD *)(v21 + v20[5]) = v19;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v23 = *(_QWORD *)(v4 - 200);
    v22 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_WORD *)(v22 + 16) = 256;
    OUTLINED_FUNCTION_130_1();
    v24 = v21 + v20[8];
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = xmmword_21AFE84D0;
    *(_OWORD *)(v24 + 48) = xmmword_21AFE84E0;
    *(_QWORD *)(v24 + 64) = 42;
    *(int64x2_t *)(v24 + 72) = vdupq_n_s64(0x3FE999999999999AuLL);
    v25 = *(_QWORD *)(v4 - 208);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v22, v25, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v4 - 88) = v23;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v4 - 112));
    outlined init with take of TreeRegressorModel(v25, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?(v4 - 112, v24);
    OUTLINED_FUNCTION_82_5(v22);
    v27 = (_QWORD *)(v21 + v20[6]);
    *v27 = 0;
    v27[1] = 0xE000000000000000;
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    *(_QWORD *)(v21 + v20[7]) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD00000000000004ELL;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF5FB0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 0;
    swift_willThrow(0.0);
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_82_5(*(_QWORD *)(v4 - 120));
    OUTLINED_FUNCTION_82_5(v2);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in MLRandomForestClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

#error "21AEFE568: call analysis failed (funcsize=56)"

#error "21AEFE63C: call analysis failed (funcsize=43)"

void static MLRandomForestClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_3_1();
  specialized MLJob.init(_:)();
}

#error "21AEFE6BC: call analysis failed (funcsize=16)"

void static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _UNKNOWN **v66;
  __int128 v67;
  uint64_t v68;

  OUTLINED_FUNCTION_8_1();
  a19 = v22;
  a20 = v23;
  v62 = v24;
  v63 = v25;
  v27 = v26;
  v61 = v28;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_211();
  v60 = v31;
  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_5();
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_208();
  v59 = v36;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)v54 - v38;
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_55_16();
  v58 = v27;
  _sypSgWOcTm_0(v27, (uint64_t)&v67, &demangling cache variable for type metadata for Any?);
  if (v68)
  {
    v41 = v21 + *(int *)(v34 + 48);
    outlined init with take of Any(&v67, &v64);
    swift_dynamicCast();
    MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v42, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    if (!v20)
    {
      v43 = v39;
      v44 = (uint64_t)&v39[*(int *)(v34 + 48)];
      v54[1] = v43;
      v45 = OUTLINED_FUNCTION_93();
      v55 = *(_QWORD *)(v45 - 8);
      v46 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
      v46(v43, v21, v45);
      v56 = v44;
      _sypSgWOcTm_0(v41, v44, &demangling cache variable for type metadata for DataFrame?);
      v47 = v59;
      v48 = v59 + *(int *)(v34 + 48);
      v54[0] = v48;
      v54[2] = v45;
      v46((char *)v59, v21, v45);
      _sypSgWOcTm_0(v41, v48, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLRandomForestClassifier.ModelParameters(v58, (uint64_t)&v64);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_23_3();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.parallelTreeCount.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)&v64);
      v49 = v63;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v63, v60, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v50 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v51 = TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      OUTLINED_FUNCTION_34_3(v47, *(uint64_t (**)(uint64_t, _QWORD))(v55 + 8));
      OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)&a17);
      v65 = v50;
      v66 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(_QWORD *)&v64 = v51;
      v52 = v57;
      OUTLINED_FUNCTION_97(v49, v53, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v64, v52, 1);
      outlined destroy of URL?(v21, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLRandomForestClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v5, 1);
  }
}

void closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    OUTLINED_FUNCTION_16_0();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    OUTLINED_FUNCTION_3_1();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[36] = a1;
  v2[37] = a2;
  v2[38] = type metadata accessor for AnyClassificationMetrics();
  v2[39] = OUTLINED_FUNCTION_4_36();
  v2[40] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  v2[41] = OUTLINED_FUNCTION_4_36();
  v2[42] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_71_10();
  v2[43] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[44] = OUTLINED_FUNCTION_4_6();
  v2[45] = OUTLINED_FUNCTION_6_41();
  v2[46] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[47] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[48] = v3;
  v2[49] = *(_QWORD *)(v3 - 8);
  v2[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[51] = OUTLINED_FUNCTION_4_6();
  v2[52] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[53] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLRandomForestClassifier.init(delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0[51];
  v2 = v0[52];
  v3 = v0[37] + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = (int *)v0[52];
    v6 = v0[53];
    v8 = v0[50];
    v9 = v0[48];
    v10 = v0[49];
    v11 = v0[47];
    v12 = v0[44];
    v13 = v0[37];
    OUTLINED_FUNCTION_66_14(v0[51], v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v6 + v7[8], v9);
    _sypSgWOcTm_0(v6 + v7[5], v11, &demangling cache variable for type metadata for DataFrame?);
    MLRandomForestClassifier.ModelParameters.init(configuration:validation:)(v8, v11, (uint64_t)(v0 + 2));
    v14 = (uint64_t *)(v6 + v7[6]);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(v6 + v7[7]);
    v18 = v13 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v18, v12, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
    v19 = OUTLINED_FUNCTION_63_8();
    result = __swift_getEnumTagSinglePayload(v12, 1, v19);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLRandomForestClassifier.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 13));
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_23_3();
      v20 = (_QWORD *)OUTLINED_FUNCTION_25();
      v0[54] = v20;
      *v20 = v0;
      v20[1] = MLRandomForestClassifier.init(delegate:);
      return MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(v0[46], v0[44], v16, v15, v17, (uint64_t)(v0 + 13));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 440) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier);
  v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 344);
    v9 = *(_QWORD *)(v0 + 328);
    v11 = *(_QWORD *)(v0 + 296);
    v10 = *(_QWORD *)(v0 + 304);
    v12 = *(_QWORD *)(v0 + 288);
    v13 = outlined destroy of MLRandomForestClassifier.ModelParameters(v0 + 16);
    OUTLINED_FUNCTION_203(v13, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    outlined init with take of TreeRegressorModel(v8, v7, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    OUTLINED_FUNCTION_83_4();
    swift_storeEnumTagMultiPayload();
    outlined assign with take of MLClassifierMetrics(v7, v12 + *(int *)(v6 + 36));
    v14 = v11 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_130_0();
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v14, v9, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
    {
      outlined destroy of URL?(*(_QWORD *)(v0 + 328), &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 360);
      v16 = *(_QWORD *)(v0 + 320);
      v17 = *(_QWORD *)(v0 + 312);
      v18 = *(_QWORD *)(v0 + 288);
      OUTLINED_FUNCTION_65_15(*(_QWORD *)(v0 + 328));
      outlined init with take of TreeRegressorModel(v16, v17, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v18 + *(int *)(v15 + 40), type metadata accessor for MLClassifierMetrics);
      OUTLINED_FUNCTION_65_15(v17);
      OUTLINED_FUNCTION_3_9();
      swift_storeEnumTagMultiPayload();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = outlined destroy of MLRandomForestClassifier.ModelParameters(v0 + 16);
  OUTLINED_FUNCTION_203(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLRandomForestClassifier.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLRandomForestClassifier();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLRandomForestClassifier.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLRandomForestClassifier.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLRandomForestClassifier.evaluation(on:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_6_41();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11)
    goto LABEL_5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v13 = (_QWORD *)(v2 + *(int *)(v8 + 24));
  v14 = v13[1];
  *(_QWORD *)(inited + 32) = *v13;
  *(_QWORD *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x6C6562614CLL;
  v15._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    OUTLINED_FUNCTION_83_4();
    goto LABEL_6;
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, (uint64_t)v7);
  OUTLINED_FUNCTION_66_14((uint64_t)v7, v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
  OUTLINED_FUNCTION_83_4();
LABEL_6:
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLRandomForestClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLRandomForestClassifier.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLRandomForestClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  NSString *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[10];

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v33 = v5;
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v7 = type metadata accessor for Model();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_46_2();
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v27 = v4[1];
  v31 = v4[2];
  v32 = *v4;
  v29 = v4[4];
  v30 = v4[3];
  v10 = v4[6];
  v28 = v4[5];
  v11 = v4[7];
  v12 = v4[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v33, 0xD000000000000016, 0x800000021AFF6000, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v2);
  if (!v1)
  {
    v26 = v11;
    OUTLINED_FUNCTION_97(v0, v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    if (v27)
    {
      v14 = v32;
      v15 = v32;
      v16 = v27;
      v17 = v31;
      v18 = v30;
      v19 = v29;
      v20 = v28;
      v21 = v10;
      v22 = v26;
    }
    else
    {
      v23 = NSFullUserName();
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v24;

      v19 = 0;
      v20 = 0;
      v12 = 0;
      v17 = 0xD000000000000033;
      v18 = 0x800000021AFF2260;
      v22 = 0xE100000000000000;
      v21 = 49;
      v14 = v32;
    }
    v34[0] = v15;
    v34[1] = v16;
    v34[2] = v17;
    v34[3] = v18;
    v34[4] = v19;
    v34[5] = v20;
    v34[6] = v21;
    v34[7] = v22;
    v34[8] = v12;
    outlined copy of MLModelMetadata?(v14, v27);
    specialized CoreMLExportable.export(metadata:)(v34);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    v25 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v25, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    Model.write(to:)();
    OUTLINED_FUNCTION_3_43();
    OUTLINED_FUNCTION_23_2(v2, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLRandomForestClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_36_6();
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLRandomForestClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  OUTLINED_FUNCTION_7();
}

unint64_t MLRandomForestClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_54_0();
  v3 = OUTLINED_FUNCTION_6_41();
  v4 = MLRandomForestClassifier.ModelParameters.description.getter();
  v6 = v5;
  v7 = MLClassifierMetrics.description.getter();
  v9 = v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v0 + *(int *)(v3 + 40), v1, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics.Contents);
  v10 = MLClassifierMetrics.description.getter();
  v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x800000021AFF1480;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._countAndFlagsBits = v10;
    v16._object = v12;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000020;
    v17._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000023;
}

void MLRandomForestClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLRandomForestClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_63_8();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v2 + *(int *)(v1 + 24);
  v4 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v2);
}

void sub_21AF00010(id *a1@<X8>)
{
  *a1 = MLRandomForestClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLRandomForestClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void **v38;
  void **v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void *v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  void *v59;
  id v60;
  uint64_t *v61;
  uint64_t v62;
  char *v64;
  char *v65;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = type metadata accessor for AnyTreeClassifierModel();
    v14 = *(int *)(v13 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = *(int *)(v13 + 28);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    *(_QWORD *)v19 = v21;
    v22 = a3[5];
    v23 = a3[6];
    v24 = *(void **)((char *)a2 + v22);
    v19[8] = (char)v20;
    *(_QWORD *)((char *)a1 + v22) = v24;
    v25 = (_QWORD *)((char *)a1 + v23);
    v26 = *(_QWORD *)((char *)a2 + v23);
    v27 = *(_QWORD *)((char *)a2 + v23 + 8);
    v28 = a3[7];
    v29 = a3[8];
    v30 = *(_QWORD *)((char *)a2 + v28);
    *v25 = v26;
    v25[1] = v27;
    *(_QWORD *)((char *)a1 + v28) = v30;
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    v33 = *(_QWORD *)((char *)a2 + v29 + 24);
    swift_bridgeObjectRetain();
    v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((_QWORD *)v31 + 3) = v33;
      (**(void (***)(char *, char *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      v35 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v35;
    }
    v36 = *((_OWORD *)v32 + 3);
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_OWORD *)v31 + 3) = v36;
    *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
    *((_QWORD *)v31 + 10) = *((_QWORD *)v32 + 10);
    v37 = a3[9];
    v38 = (void **)((char *)a1 + v37);
    v39 = (void **)((char *)a2 + v37);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v45 = *v39;
      v46 = v45;
      *v38 = v45;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v38 = *v39;
      v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v42 = *(int *)(v41 + 20);
      v64 = (char *)v39 + v42;
      v65 = (char *)v38 + v42;
      v43 = type metadata accessor for DataFrame();
      v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
      v44(v65, v64, v43);
      v44((char *)v38 + *(int *)(v41 + 24), (char *)v39 + *(int *)(v41 + 24), v43);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v38, v39, v48);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v49 = a3[10];
    v50 = (void **)((char *)a1 + v49);
    v51 = (void **)((char *)a2 + v49);
    v52 = swift_getEnumCaseMultiPayload();
    if (v52 == 2)
    {
      v59 = *v51;
      v60 = v59;
      *v50 = v59;
    }
    else if (v52 == 1)
    {
      *v50 = *v51;
      v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v54 = *(int *)(v53 + 20);
      v55 = (char *)v50 + v54;
      v56 = (char *)v51 + v54;
      v57 = type metadata accessor for DataFrame();
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
      v58(v55, v56, v57);
      v58((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v57);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v62 = __swift_instantiateConcreteTypeFromMangledName(v61);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v50, v51, v62);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLRandomForestClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  void (*v23)(id *, uint64_t);
  void (*v24)(char *, uint64_t);

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for AnyTreeClassifierModel() + 24);
  v5 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  v7 = (id *)(a1 + a2[9]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v10 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v11 = (char *)v7 + *(int *)(v10 + 20);
      v12 = type metadata accessor for DataFrame();
      v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13((char *)v7 + *(int *)(v10 + 24), v12);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v7, v14);
      break;
  }
  v15 = (id *)(a1 + a2[10]);
  v16 = swift_getEnumCaseMultiPayload();
  switch(v16)
  {
    case 2:

      return;
    case 1:
      v18 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v19 = (char *)v15 + *(int *)(v18 + 20);
      v20 = type metadata accessor for DataFrame();
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v24(v19, v20);
      v21 = (id *)((char *)v15 + *(int *)(v18 + 24));
      v22 = v20;
      v23 = (void (*)(id *, uint64_t))v24;
LABEL_24:
      v23(v21, v22);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v22 = __swift_instantiateConcreteTypeFromMangledName(v17);
      v23 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v21 = v15;
      goto LABEL_24;
  }
}

_QWORD *initializeWithCopy for MLRandomForestClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void **v36;
  void **v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  void *v43;
  id v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  void **v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  void *v57;
  id v58;
  uint64_t *v59;
  uint64_t v60;
  char *v62;
  char *v63;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[5];
  v21 = a3[6];
  v22 = *(void **)((char *)a2 + v20);
  v17[8] = (char)v18;
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = *(_QWORD *)((char *)a2 + v21);
  v25 = *(_QWORD *)((char *)a2 + v21 + 8);
  v26 = a3[7];
  v27 = a3[8];
  v28 = *(_QWORD *)((char *)a2 + v26);
  *v23 = v24;
  v23[1] = v25;
  *(_QWORD *)((char *)a1 + v26) = v28;
  v29 = (char *)a1 + v27;
  v30 = (char *)a2 + v27;
  v31 = *(_QWORD *)((char *)a2 + v27 + 24);
  swift_bridgeObjectRetain();
  v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((_QWORD *)v29 + 3) = v31;
    (**(void (***)(char *, char *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
  }
  v34 = *((_OWORD *)v30 + 3);
  *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  *((_OWORD *)v29 + 3) = v34;
  *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
  *((_QWORD *)v29 + 10) = *((_QWORD *)v30 + 10);
  v35 = a3[9];
  v36 = (void **)((char *)a1 + v35);
  v37 = (void **)((char *)a2 + v35);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v43 = *v37;
    v44 = v43;
    *v36 = v43;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v36 = *v37;
    v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v40 = *(int *)(v39 + 20);
    v62 = (char *)v37 + v40;
    v63 = (char *)v36 + v40;
    v41 = type metadata accessor for DataFrame();
    v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
    v42(v63, v62, v41);
    v42((char *)v36 + *(int *)(v39 + 24), (char *)v37 + *(int *)(v39 + 24), v41);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v36, v37, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v47 = a3[10];
  v48 = (void **)((char *)a1 + v47);
  v49 = (void **)((char *)a2 + v47);
  v50 = swift_getEnumCaseMultiPayload();
  if (v50 == 2)
  {
    v57 = *v49;
    v58 = v57;
    *v48 = v57;
  }
  else if (v50 == 1)
  {
    *v48 = *v49;
    v51 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v52 = *(int *)(v51 + 20);
    v53 = (char *)v48 + v52;
    v54 = (char *)v49 + v52;
    v55 = type metadata accessor for DataFrame();
    v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    v56(v53, v54, v55);
    v56((char *)v48 + *(int *)(v51 + 24), (char *)v49 + *(int *)(v51 + 24), v55);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v48, v49, v60);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLRandomForestClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  void **v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void *v40;
  id v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void *v54;
  id v55;
  uint64_t *v56;
  uint64_t v57;
  char *v59;
  char *v60;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[5];
  v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  v23 = v21;

  v24 = a3[6];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = (uint64_t)a1 + v27;
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a2 + v27 + 24);
  if (*(_QWORD *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(_QWORD *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  *(_QWORD *)(v28 + 32) = v29[4];
  *(_QWORD *)(v28 + 40) = v29[5];
  *(_QWORD *)(v28 + 48) = v29[6];
  *(_QWORD *)(v28 + 56) = v29[7];
  *(_QWORD *)(v28 + 64) = v29[8];
  *(_QWORD *)(v28 + 72) = v29[9];
  *(_QWORD *)(v28 + 80) = v29[10];
  if (a1 != a2)
  {
    v32 = a3[9];
    v33 = (void **)((char *)a1 + v32);
    v34 = (void **)((char *)a2 + v32);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v32, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v40 = *v34;
      v41 = v40;
      *v33 = v40;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v33 = *v34;
      v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v37 = *(int *)(v36 + 20);
      v59 = (char *)v34 + v37;
      v60 = (char *)v33 + v37;
      v38 = type metadata accessor for DataFrame();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
      v39(v60, v59, v38);
      v39((char *)v33 + *(int *)(v36 + 24), (char *)v34 + *(int *)(v36 + 24), v38);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v33, v34, v43);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v44 = a3[10];
    v45 = (void **)((char *)a1 + v44);
    v46 = (void **)((char *)a2 + v44);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v44, type metadata accessor for MLClassifierMetrics.Contents);
    v47 = swift_getEnumCaseMultiPayload();
    if (v47 == 2)
    {
      v54 = *v46;
      v55 = v54;
      *v45 = v54;
    }
    else if (v47 == 1)
    {
      *v45 = *v46;
      v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v49 = *(int *)(v48 + 20);
      v50 = (char *)v45 + v49;
      v51 = (char *)v46 + v49;
      v52 = type metadata accessor for DataFrame();
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      v53(v50, v51, v52);
      v53((char *)v45 + *(int *)(v48 + 24), (char *)v46 + *(int *)(v48 + 24), v52);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v56 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v56 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v57 = __swift_instantiateConcreteTypeFromMangledName(v56);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v45, v46, v57);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLRandomForestClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = type metadata accessor for AnyTreeClassifierModel();
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(v7 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  memcpy((void *)(a1 + v16), (const void *)(a2 + v16), 0x58uLL);
  v17 = a3[9];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v25 = *(int *)(v24 + 20);
    v42 = &v18[v25];
    v26 = &v19[v25];
    v27 = type metadata accessor for DataFrame();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v42, v26, v27);
    v28(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v27);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_10:
  v29 = a3[10];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = swift_getEnumCaseMultiPayload();
  if (v32 == 1)
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v36 = *(int *)(v35 + 20);
    v37 = &v30[v36];
    v38 = &v31[v36];
    v39 = type metadata accessor for DataFrame();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
    v40(v37, v38, v39);
    v40(&v30[*(int *)(v35 + 24)], &v31[*(int *)(v35 + 24)], v39);
  }
  else
  {
    if (v32)
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for MLRandomForestClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v55;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = type metadata accessor for AnyTreeClassifierModel();
  v10 = *(int *)(v9 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(v9 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  v18 = a3[5];
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[6];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  if (*(_QWORD *)((char *)a1 + v25 + 24))
    __swift_destroy_boxed_opaque_existential_0(v26);
  v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  v29 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v29;
  *(_QWORD *)(v26 + 64) = *((_QWORD *)v27 + 8);
  *(_OWORD *)(v26 + 72) = *(_OWORD *)(v27 + 72);
  if (a1 == a2)
    return a1;
  v30 = a3[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v30, type metadata accessor for MLClassifierMetrics.Contents);
  v33 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v38 = *(int *)(v37 + 20);
    v55 = &v31[v38];
    v39 = &v32[v38];
    v40 = type metadata accessor for DataFrame();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
    v41(v55, v39, v40);
    v41(&v31[*(int *)(v37 + 24)], &v32[*(int *)(v37 + 24)], v40);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v31, v32, v36);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  v42 = a3[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v42, type metadata accessor for MLClassifierMetrics.Contents);
  v45 = swift_getEnumCaseMultiPayload();
  if (v45 == 1)
  {
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v49 = *(int *)(v48 + 20);
    v50 = &v43[v49];
    v51 = &v44[v49];
    v52 = type metadata accessor for DataFrame();
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
    v53(v50, v51, v52);
    v53(&v43[*(int *)(v48 + 24)], &v44[*(int *)(v48 + 24)], v52);
  }
  else
  {
    if (v45)
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v43, v44, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF0165C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = OUTLINED_FUNCTION_71_10();
    v8 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLRandomForestClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF016FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      OUTLINED_FUNCTION_125();
      return;
    }
    v9 = OUTLINED_FUNCTION_71_10();
    v10 = a1 + *(int *)(a4 + 36);
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata completion function for MLRandomForestClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21AF01838()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_3_43()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 288) + 8))(v0, *(_QWORD *)(v1 - 280));
}

uint64_t OUTLINED_FUNCTION_6_41()
{
  return type metadata accessor for MLRandomForestClassifier();
}

uint64_t OUTLINED_FUNCTION_7_38()
{
  uint64_t v0;

  return outlined destroy of MLRandomForestClassifier.ModelParameters(*(_QWORD *)(v0 - 272));
}

void OUTLINED_FUNCTION_14_30(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 320), a2);
}

void OUTLINED_FUNCTION_15_31(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  outlined destroy of URL?(*(_QWORD *)(a2 - 256), a1);
}

uint64_t OUTLINED_FUNCTION_30_24()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 344))();
}

uint64_t OUTLINED_FUNCTION_31_24(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_52_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 600))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_61_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 400));
}

uint64_t OUTLINED_FUNCTION_63_13()
{
  return static _SetStorage.allocate(capacity:)();
}

void OUTLINED_FUNCTION_65_15(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of TreeRegressorModel(a1, v1, v2);
}

void OUTLINED_FUNCTION_66_14(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with take of TreeRegressorModel(a1, v3, a3);
}

void OUTLINED_FUNCTION_67_15()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 576) = v0;
}

void OUTLINED_FUNCTION_68_13(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 424), a2);
}

uint64_t OUTLINED_FUNCTION_69_10()
{
  return outlined consume of [String : [Int]].Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_71_10()
{
  return type metadata accessor for MLClassifierMetrics(0);
}

uint64_t OUTLINED_FUNCTION_72_10()
{
  return type metadata accessor for BoostedTreeConfiguration();
}

uint64_t OUTLINED_FUNCTION_74_10@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 72));
}

uint64_t OUTLINED_FUNCTION_83_9(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_85_7(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  outlined init with take of TreeRegressorModel(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t MethodName.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AF01A44 + 4 * byte_21AFED210[a1]))(0x6172745F74696E69, 0xED0000676E696E69);
}

unint64_t sub_21AF01A44()
{
  return 0xD000000000000010;
}

void MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  char v23[8];
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;

  v5 = v1;
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_50();
  v14 = v12 - v13;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_60_10();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_0();
  URL.appendingPathComponent(_:)();
  v41 = 1;
  v23[0] = 1;
  v24 = 44;
  v25 = 0xE100000000000000;
  v26 = 0;
  v27 = 0xE000000000000000;
  v28 = 92;
  v29 = 0xE100000000000000;
  v30 = 1;
  v31 = 34;
  v32 = 0xE100000000000000;
  v33 = 1;
  v34 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  v35 = 10;
  v37 = 0;
  v38 = 0;
  v36 = 0xE100000000000000;
  v39 = 1;
  v40 = 0;
  MLDataTable.init(contentsOf:options:)(v4, v23, (uint64_t)&v21);
  if (!v2)
  {
    v17 = specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(v21, v22);
    v20 = v5;
    v18 = v5 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
    swift_beginAccess();
    outlined init with copy of MLTrainingSessionParameters(v18, v10, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    specialized static SGD.createOptimizer(for:checkpointDictionary:)(v10, (uint64_t)v17);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v10, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(a1, v3, (uint64_t)v17);
    OUTLINED_FUNCTION_90_4();
    outlined init with take of (key: URL, value: CIImage)?(v3, v14, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    v19 = v20 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
    OUTLINED_FUNCTION_4_28();
    outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(v14, v19);
    swift_endAccess();
  }
  OUTLINED_FUNCTION_7();
}

void specialized SGD.updateOptimizerState(for:shape:using:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v48 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Tensor();
  v44 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v42 = (uint64_t)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)&v38 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v38 - v19;
  outlined init with copy of URL?(a2, (uint64_t)&v38 - v19, &demangling cache variable for type metadata for TensorShape?);
  v21 = type metadata accessor for TensorShape();
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21) != 1)
  {
    v45 = a4;
    v46 = a5;
    v47 = a3;
    v40 = v11;
    v26 = TensorShape.dimensions.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    goto LABEL_13;
  }
  v38 = v21;
  v39 = v12;
  outlined destroy of URL?((uint64_t)v20, &demangling cache variable for type metadata for TensorShape?);
  v49 = 0;
  v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = a4;
  v50 = a5;
  v22._countAndFlagsBits = 0xD000000000000019;
  v22._object = (void *)0x800000021AFF51F0;
  String.append(_:)(v22);
  v23 = specialized Dictionary.subscript.getter(v49, v50, a3);
  swift_bridgeObjectRelease();
  if (!v23)
    return;
  v45 = a4;
  v46 = a5;
  v47 = a3;
  v40 = v11;
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
    v21 = v38;
    v12 = v39;
LABEL_13:
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v30 = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v49 = v45;
    v50 = v30;
    v31._object = (void *)0x800000021AFF51D0;
    v31._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v31);
    v32 = specialized Dictionary.subscript.getter(v49, v50, v47);
    swift_bridgeObjectRelease();
    if (v32)
    {
      v33 = (uint64_t)v41;
      MEMORY[0x220758C74](v26);
      __swift_storeEnumTagSinglePayload(v33, 0, 1, v21);
      v34 = v42;
      Array<A>.floatTensor(shape:)(v33, v32, v42);
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v33, &demangling cache variable for type metadata for TensorShape?);
      v36 = v43;
      v35 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v43, v34, v12);
      v37 = (uint64_t)v40;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v40, v36, v12);
      __swift_storeEnumTagSinglePayload(v37, 0, 1, v12);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
      OptimizerStateDictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v12);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return;
  }
  v49 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
  v25 = 0;
  v26 = v49;
  while (1)
  {
    v27 = *(double *)(v23 + 8 * v25 + 32);
    if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
      break;
    if (v27 <= -9.22337204e18)
      goto LABEL_19;
    if (v27 >= 9.22337204e18)
      goto LABEL_20;
    v49 = v26;
    v29 = *(_QWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v26 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v26 = v49;
    }
    ++v25;
    *(_QWORD *)(v26 + 16) = v29 + 1;
    *(_QWORD *)(v26 + 8 * v29 + 32) = (uint64_t)v27;
    if (v24 == v25)
    {
      swift_bridgeObjectRelease();
      v21 = v38;
      v12 = v39;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t specialized static SGD.createOptimizer(for:checkpointDictionary:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_DWORD *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = specialized Dictionary.subscript.getter(0x676E696E7261656CLL, 0xEC00000065746152, a2);
  if (!v9)
    goto LABEL_15;
  v10 = v9;
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000037;
    v20 = "learningRate key not found in the checkpoint dictionary";
LABEL_20:
    *(_QWORD *)(v19 + 8) = (unint64_t)(v20 - 32) | 0x8000000000000000;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_BYTE *)(v19 + 48) = 2;
    return swift_willThrow(0.0);
  }
  v11 = specialized Dictionary.subscript.getter(0x6D75746E656D6F6DLL, 0xE800000000000000, a2);
  if (!v11)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000033;
    v20 = "momentum key not found in the checkpoint dictionary";
    goto LABEL_20;
  }
  v12 = v11;
  if (*(_QWORD *)(v11 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  result = specialized Dictionary.subscript.getter(0xD000000000000014, 0x800000021AFF52A0, a2);
  if (!result)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v19 = 0xD00000000000003FLL;
    v20 = "usesNesterovMomentum key not found in the checkpoint dictionary";
    goto LABEL_20;
  }
  v14 = result;
  if (*(_QWORD *)(result + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  result = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v15 = *(double *)(v14 + 32);
  result = swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15 > -9.22337204e18)
  {
    if (v15 < 9.22337204e18)
    {
      v16 = type metadata accessor for GradientClippingMode();
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v16);
      *v5 = 981668463;
      v17 = *MEMORY[0x24BE6BA18];
      v18 = type metadata accessor for RegularizationKind();
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v5, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
      type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      return SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)();
    }
    goto LABEL_26;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void one-time initialization function for adjustLearningRateSteps()
{
  static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps = (uint64_t)&outlined read-only object #0 of one-time initialization function for adjustLearningRateSteps;
}

_QWORD *MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  OUTLINED_FUNCTION_20_3();
  v28 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v15 = (_DWORD *)(v14 - v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_49();
  v19 = v18 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  v21 = OUTLINED_FUNCTION_23_24();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(v21);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_55_0();
  v0[2] = v11;
  v0[3] = v7;
  v0[4] = v5;
  swift_bridgeObjectRetain();
  MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(v9, v28, v2);
  v23 = (uint64_t)v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, (uint64_t)v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of MLTrainingSessionParameters(v23, v2, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v24 = type metadata accessor for GradientClippingMode();
  __swift_storeEnumTagSinglePayload(v19, 1, 1, v24);
  *v15 = 981668463;
  v25 = *MEMORY[0x24BE6BA18];
  v26 = type metadata accessor for RegularizationKind();
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v15, v25, v26);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v26);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  outlined init with take of (key: URL, value: CIImage)?(v1, (uint64_t)v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  return v0;
}

uint64_t MLHandActionClassifier.GraphCNNModel.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)@<X0>(char a1@<W1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_95_1();
  v8 = OUTLINED_FUNCTION_46_15();
  *(_BYTE *)(a3 + *(int *)(v8 + 36)) = a1;
  *(_QWORD *)(a3 + *(int *)(v8 + 40)) = a2;
  OUTLINED_FUNCTION_91_7();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  OUTLINED_FUNCTION_69_11();
  OUTLINED_FUNCTION_92_5();
  OUTLINED_FUNCTION_41_20();
  OUTLINED_FUNCTION_35_17();
  OUTLINED_FUNCTION_60_14(v3);
  Dense.init(unitCount:weightInitializer:biasInitializer:)();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  OUTLINED_FUNCTION_69_11();
  OUTLINED_FUNCTION_45_20();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30_25();
  OUTLINED_FUNCTION_93_6();
  OUTLINED_FUNCTION_30_25();
  OUTLINED_FUNCTION_30_25();
  OUTLINED_FUNCTION_85_8();
  static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)();
  OUTLINED_FUNCTION_85_8();
  OUTLINED_FUNCTION_30_25();
  GlobalAveragePool2D.init()();
  OUTLINED_FUNCTION_41_20();
  OUTLINED_FUNCTION_35_17();
  OUTLINED_FUNCTION_60_14(v3);
  static ParameterInitializer.zeros.getter();
  type metadata accessor for MLHandActionClassifier.Torso(0);
  return Dense.init(unitCount:weightInitializer:biasInitializer:)();
}

id specialized static _ModelCheckpoint<>.getCheckpointDictionary(from:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  id v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  void *v30;
  id v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;

  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v6 = (id)Dictionary.init(dictionaryLiteral:)();
  v35 = a1;
  v36 = a2 & 1;
  v37 = 0;
  outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
  v32 = a1;
  LOBYTE(v33) = a2 & 1;
  if (!MLDataTable.size.getter())
  {
LABEL_16:
    v24 = a2 & 1;
    v25 = a1;
    goto LABEL_27;
  }
  v7 = 0;
  while (1)
  {
    MLDataTable.Rows.subscript.getter(v7, &v32);
    v8 = v33;
    outlined copy of Result<_DataTable, Error>(a1, a2 & 1);
    v9 = specialized RandomAccessCollection<>.index(after:)(v7);
    outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
    v37 = v9;
    if (!v8[2])
      goto LABEL_18;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(1937335659, 0xE400000000000000);
    if ((v11 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_18:
      swift_bridgeObjectRelease();
LABEL_20:
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v26 = 0xD000000000000055;
      *(_QWORD *)(v26 + 8) = 0x800000021AFF64B0;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_OWORD *)(v26 + 32) = 0u;
      *(_BYTE *)(v26 + 48) = 2;
      swift_willThrow(0.0);
      goto LABEL_26;
    }
    v12 = *(_QWORD *)(v8[7] + 8 * v10);
    swift_retain_n();
    CMLSequence.value(at:)(v12);
    if (v3)
    {
      swift_release();
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x21AF035E4);
    }
    swift_release();
    MLDataValue.init(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    v14 = v32;
    v13 = v33;
    v15 = v34;
    if (v34 != 2)
    {
      swift_bridgeObjectRelease();
      outlined consume of MLDataValue(v14, v13, v15);
      goto LABEL_20;
    }
    if (!v8[2])
    {
      outlined copy of MLDataValue(v32, v33, 2);
LABEL_23:
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of MLDataValue(v14, v13, 2);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x7365756C6176, 0xE600000000000000);
    if ((v17 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_23;
    }
    v30 = v14;
    v18 = *(_QWORD *)(v8[7] + 8 * v16);
    swift_retain_n();
    CMLSequence.value(at:)(v18);
    v3 = 0;
    swift_release();
    MLDataValue.init(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    v19 = v32;
    v31 = v33;
    v20 = v34;
    if (v34 != 3)
      break;
    v29 = v13;
    swift_retain();
    v21 = CMLSequence.size.getter();
    if (CMLSequence.size.getter() < 0)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      JUMPOUT(0x21AF03508);
    }
    v22 = CMLSequence.size.getter();
    if (v21 < 0 || v22 < v21)
      goto LABEL_29;
    if (v21)
    {
      v32 = (id)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      swift_retain();
      CMLSequence.value(at:)(0);
      outlined consume of MLDataValue(v19, v31, 3);
      v23 = (char *)&loc_21AF02F24 + *((int *)qword_21AF03600 + CMLFeatureValue.type.getter());
      __asm { BR              X9 }
    }
    swift_isUniquelyReferenced_nonNull_native();
    v32 = v6;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v6 = v32;
    swift_bridgeObjectRelease();
    outlined consume of MLDataValue(v30, v29, 2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of MLDataValue(v30, v29, 2);
    outlined consume of MLDataValue(v19, v31, 3);
    outlined consume of MLDataValue(v19, v31, 3);
    v7 = v37;
    a1 = v35;
    a2 = v36;
    v32 = v35;
    LOBYTE(v33) = v36;
    if (v7 == MLDataTable.size.getter())
      goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  outlined consume of MLDataValue(v19, v31, v20);
  v14 = v30;
LABEL_25:
  outlined consume of MLDataValue(v14, v13, 2);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v27 = 0xD00000000000005BLL;
  *(_QWORD *)(v27 + 8) = 0x800000021AFF6510;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 2;
  swift_willThrow(0.0);
  outlined consume of MLDataValue(v14, v13, 2);
LABEL_26:
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v25 = v35;
  v24 = v36;
LABEL_27:
  outlined consume of Result<_DataTable, Error>(v25, v24);
  return v6;
}

void specialized _ModelCheckpoint<>.updateGraph<A>(from:optimizer:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _OWORD v87[3];
  uint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;

  v5 = v4;
  v78 = a3;
  v79 = a2;
  v63 = type metadata accessor for LSTM();
  v58 = *(_QWORD *)(v63 - 8);
  v6 = MEMORY[0x24BDAC7A8](v63);
  v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v57 - v8;
  v68 = type metadata accessor for Dense();
  v61 = *(_QWORD *)(v68 - 8);
  v9 = MEMORY[0x24BDAC7A8](v68);
  v60 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - v11;
  v71 = type metadata accessor for Conv2D();
  v13 = *(_QWORD *)(v71 - 8);
  v14 = MEMORY[0x24BDAC7A8](v71);
  v66 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v70 = (char *)&v57 - v16;
  v82 = type metadata accessor for BatchNorm();
  v69 = *(_QWORD *)(v82 - 8);
  v17 = MEMORY[0x24BDAC7A8](v82);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v57 - v20;
  v22 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v3 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  outlined init with copy of MLTrainingSessionParameters(v25, (uint64_t)v24, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v80 = v3;
  v26 = specialized _ModelCheckpoint<>.trainableSublayers(model:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v24, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v27 = 0;
  v28 = *(_QWORD *)(v26 + 16);
  v75 = v26;
  v74 = v26 + 32;
  v73 = &v86;
  v72 = (uint64_t)v87 + 8;
  v81 = (__int128 *)&v89;
  v64 = v19;
  v76 = v21;
  v67 = v12;
  v65 = v13;
  v77 = v28;
  while (1)
  {
    if (v27 == v28)
    {
      v29 = v28;
      memset(v87, 0, sizeof(v87));
      goto LABEL_6;
    }
    if (v27 >= *(_QWORD *)(v75 + 16))
      break;
    v29 = v27 + 1;
    v30 = (__int128 *)v73;
    outlined init with copy of TrainingSessionDelegate(v74 + 40 * v27, (uint64_t)v73);
    *(_QWORD *)&v87[0] = v27;
    outlined init with take of BinaryFloatingPoint(v30, v72);
LABEL_6:
    outlined init with take of (key: URL, value: CIImage)?((uint64_t)v87, (uint64_t)&v88, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v90)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v91 = v29;
    v31 = v88;
    outlined init with take of BinaryFloatingPoint(v81, (uint64_t)v87);
    v85 = 0x5F726579616CLL;
    v86 = 0xE600000000000000;
    v83 = v31;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v34 = v85;
    v33 = (void *)v86;
    outlined init with copy of TrainingSessionDelegate((uint64_t)v87, (uint64_t)&v85);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    v35 = v82;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v36 = v21;
      v37 = v69;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v19, v36, v35);
      specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)((uint64_t)v19, v79, v34, v33, v78);
      if (v5)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v35);
LABEL_27:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
        swift_bridgeObjectRelease();
LABEL_28:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v85);
        return;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v35);
      goto LABEL_20;
    }
    v38 = v70;
    v39 = v71;
    if ((swift_dynamicCast() & 1) == 0)
    {
      v41 = v67;
      v42 = v68;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v43 = v61;
        v44 = v5;
        v45 = v78;
        v46 = (uint64_t)v60;
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v41, v42);
        specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v46, v79, v34, (uint64_t)v33, v45, (uint64_t (*)(uint64_t))MEMORY[0x24BE6BCD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))static Dense.loadLayer(from:layerName:), (void (*)(uint64_t))MEMORY[0x24BE6BCB0], (void (*)(void))MEMORY[0x24BE6BCA8], (void (*)(uint64_t))MEMORY[0x24BE6BC90], (void (*)(uint64_t))MEMORY[0x24BE6BC98]);
        v5 = v44;
        if (v44)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v42);
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v42);
      }
      else
      {
        v47 = v5;
        v48 = (uint64_t)v59;
        v49 = v62;
        v50 = v63;
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v83 = 0;
          v84 = 0xE000000000000000;
          _StringGuts.grow(_:)(64);
          v52._countAndFlagsBits = 0xD000000000000020;
          v52._object = (void *)0x800000021AFF62C0;
          String.append(_:)(v52);
          _print_unlocked<A, B>(_:_:)();
          v53._object = (void *)0x800000021AFF62F0;
          v53._countAndFlagsBits = 0xD00000000000001ELL;
          String.append(_:)(v53);
          v54 = v83;
          v55 = v84;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError();
          *(_QWORD *)v56 = v54;
          *(_QWORD *)(v56 + 8) = v55;
          *(_OWORD *)(v56 + 16) = 0u;
          *(_OWORD *)(v56 + 32) = 0u;
          *(_BYTE *)(v56 + 48) = 2;
          swift_willThrow(0.0);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
          goto LABEL_28;
        }
        v51 = v58;
        (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v48, v49, v50);
        specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(v48, v79, v34, v33, v78);
        if (v47)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
        v5 = 0;
      }
      v13 = v65;
      v19 = v64;
LABEL_20:
      v21 = v76;
      goto LABEL_21;
    }
    v40 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v66, v38, v39);
    specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(v40, v79, v34, (uint64_t)v33, v78, (uint64_t (*)(uint64_t))MEMORY[0x24BE6BE58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))static Conv2D.loadLayer(from:layerName:), (void (*)(uint64_t))MEMORY[0x24BE6BE38], (void (*)(void))MEMORY[0x24BE6BE30], (void (*)(uint64_t))MEMORY[0x24BE6BE10], (void (*)(uint64_t))MEMORY[0x24BE6BE18]);
    if (v5)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v40, v39);
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v40, v39);
LABEL_21:
    v28 = v77;
    v27 = v91;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v85);
  }
  __break(1u);
}

uint64_t MLHandActionClassifier.GraphCNN.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  return v0;
}

uint64_t MLHandActionClassifier.GraphCNN.__deallocating_deinit()
{
  MLHandActionClassifier.GraphCNN.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNN(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNN);
}

void type metadata completion function for MLHandActionClassifier.GraphCNN()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLHandActionClassifier.GraphCNNModel(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.GraphCNNModel);
}

void type metadata accessor for SGD<MLHandActionClassifier.GraphCNNModel>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
  {
    type metadata accessor for MLHandActionClassifier.GraphCNNModel(255);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    v0 = type metadata accessor for SGD();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.GraphCNNModel(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v84;
  _QWORD *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  _QWORD *v88;
  void (*v89)(char *, uint64_t, uint64_t);
  int *v90;
  uint64_t v91;
  uint64_t v92;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v82 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v79 = (_QWORD *)(v82 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for BatchNorm();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = v8;
    v10 = a3[5];
    v11 = a2;
    v12 = &a1[v10];
    v13 = &v11[v10];
    v14 = v11;
    v15 = type metadata accessor for Dense();
    v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v87 = v15;
    v86(v12, v13, v15);
    v9(&a1[a3[6]], &v14[a3[6]], v7);
    v16 = (void (*)(char *, uint64_t, uint64_t))v9;
    v17 = a3[7];
    v18 = &a1[v17];
    v19 = &v14[v17];
    v20 = v14;
    v85 = v14;
    v21 = type metadata accessor for Dropout();
    v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v23 = v18;
    v24 = v21;
    v92 = v21;
    v22(v23, (uint64_t)v19);
    v25 = (void (*)(char *, uint64_t, uint64_t))v22;
    v89 = (void (*)(char *, uint64_t, uint64_t))v22;
    v26 = a3[8];
    v27 = &a1[v26];
    v28 = &v20[v26];
    v29 = type metadata accessor for Conv2D();
    v88 = a1;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    v30(v27, (uint64_t)v28, v29);
    v31 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    v32 = v31[5];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v35 = *((_OWORD *)v34 + 1);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *((_OWORD *)v33 + 1) = v35;
    *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
    v33[48] = v34[48];
    v30(&v27[v31[6]], (uint64_t)&v28[v31[6]], v29);
    v16(&v27[v31[7]], (uint64_t)&v28[v31[7]], v7);
    v25(&v27[v31[8]], (uint64_t)&v28[v31[8]], v24);
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v30(&v27[*(int *)(v91 + 36)], (uint64_t)&v28[*(int *)(v91 + 36)], v29);
    v16(&v27[*(int *)(v91 + 40)], (uint64_t)&v28[*(int *)(v91 + 40)], v7);
    v90 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    v36 = v90[5];
    v84 = a3;
    v37 = &v27[v36];
    v38 = &v28[v36];
    v30(&v27[v36], (uint64_t)&v28[v36], v29);
    v39 = v31[5];
    v40 = &v37[v39];
    v41 = (uint64_t)&v38[v39];
    v42 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *((_OWORD *)v40 + 2) = *(_OWORD *)(v41 + 32);
    v40[48] = *(_BYTE *)(v41 + 48);
    v30(&v37[v31[6]], (uint64_t)&v38[v31[6]], v29);
    v16(&v37[v31[7]], (uint64_t)&v38[v31[7]], v7);
    v89(&v37[v31[8]], (uint64_t)&v38[v31[8]], v92);
    v30(&v37[*(int *)(v91 + 36)], (uint64_t)&v38[*(int *)(v91 + 36)], v29);
    v16(&v37[*(int *)(v91 + 40)], (uint64_t)&v38[*(int *)(v91 + 40)], v7);
    v43 = v90[6];
    v44 = &v27[v43];
    v45 = &v28[v43];
    v30(&v27[v43], (uint64_t)&v28[v43], v29);
    v46 = v31[5];
    v47 = &v44[v46];
    v48 = (uint64_t)&v45[v46];
    v49 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v49;
    *((_OWORD *)v47 + 2) = *(_OWORD *)(v48 + 32);
    v47[48] = *(_BYTE *)(v48 + 48);
    v30(&v44[v31[6]], (uint64_t)&v45[v31[6]], v29);
    v16(&v44[v31[7]], (uint64_t)&v45[v31[7]], v7);
    v89(&v44[v31[8]], (uint64_t)&v45[v31[8]], v92);
    v30(&v44[*(int *)(v91 + 36)], (uint64_t)&v45[*(int *)(v91 + 36)], v29);
    v16(&v44[*(int *)(v91 + 40)], (uint64_t)&v45[*(int *)(v91 + 40)], v7);
    v50 = v90[7];
    v51 = &v27[v50];
    v52 = &v28[v50];
    v30(&v27[v50], (uint64_t)&v28[v50], v29);
    v53 = v31[5];
    v54 = &v51[v53];
    v55 = (uint64_t)&v52[v53];
    v56 = *(_OWORD *)(v55 + 16);
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((_OWORD *)v54 + 2) = *(_OWORD *)(v55 + 32);
    v54[48] = *(_BYTE *)(v55 + 48);
    v30(&v51[v31[6]], (uint64_t)&v52[v31[6]], v29);
    v16(&v51[v31[7]], (uint64_t)&v52[v31[7]], v7);
    v89(&v51[v31[8]], (uint64_t)&v52[v31[8]], v92);
    v30(&v51[*(int *)(v91 + 36)], (uint64_t)&v52[*(int *)(v91 + 36)], v29);
    v16(&v51[*(int *)(v91 + 40)], (uint64_t)&v52[*(int *)(v91 + 40)], v7);
    v57 = v90[8];
    v58 = &v27[v57];
    v59 = &v28[v57];
    v30(&v27[v57], (uint64_t)&v28[v57], v29);
    v60 = v31[5];
    v61 = &v58[v60];
    v62 = (uint64_t)&v59[v60];
    v63 = *(_OWORD *)(v62 + 16);
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *((_OWORD *)v61 + 1) = v63;
    *((_OWORD *)v61 + 2) = *(_OWORD *)(v62 + 32);
    v61[48] = *(_BYTE *)(v62 + 48);
    v30(&v58[v31[6]], (uint64_t)&v59[v31[6]], v29);
    v16(&v58[v31[7]], (uint64_t)&v59[v31[7]], v7);
    v89(&v58[v31[8]], (uint64_t)&v59[v31[8]], v92);
    v64 = v90[9];
    v65 = &v27[v64];
    v66 = &v28[v64];
    v30(&v27[v64], (uint64_t)&v28[v64], v29);
    v67 = v31[5];
    v68 = &v65[v67];
    v69 = (uint64_t)&v66[v67];
    v70 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *((_OWORD *)v68 + 1) = v70;
    *((_OWORD *)v68 + 2) = *(_OWORD *)(v69 + 32);
    v68[48] = *(_BYTE *)(v69 + 48);
    v30(&v65[v31[6]], (uint64_t)&v66[v31[6]], v29);
    v16(&v65[v31[7]], (uint64_t)&v66[v31[7]], v7);
    v89(&v65[v31[8]], (uint64_t)&v66[v31[8]], v92);
    v71 = v91;
    v30(&v65[*(int *)(v91 + 36)], (uint64_t)&v66[*(int *)(v91 + 36)], v29);
    v16(&v65[*(int *)(v71 + 40)], (uint64_t)&v66[*(int *)(v71 + 40)], v7);
    v72 = v90[10];
    v73 = &v27[v72];
    v74 = &v28[v72];
    v30(&v27[v72], (uint64_t)&v28[v72], v29);
    v75 = v31[5];
    v76 = &v73[v75];
    v77 = (uint64_t)&v74[v75];
    v78 = *(_OWORD *)(v77 + 16);
    *(_OWORD *)v76 = *(_OWORD *)v77;
    *((_OWORD *)v76 + 1) = v78;
    *((_OWORD *)v76 + 2) = *(_OWORD *)(v77 + 32);
    v76[48] = *(_BYTE *)(v77 + 48);
    v30(&v73[v31[6]], (uint64_t)&v74[v31[6]], v29);
    v16(&v73[v31[7]], (uint64_t)&v74[v31[7]], v7);
    v89(&v73[v31[8]], (uint64_t)&v74[v31[8]], v92);
    v30(&v73[*(int *)(v71 + 36)], (uint64_t)&v74[*(int *)(v71 + 36)], v29);
    v79 = v88;
    v16(&v73[*(int *)(v71 + 40)], (uint64_t)&v74[*(int *)(v71 + 40)], v7);
    v80 = type metadata accessor for MLHandActionClassifier.Torso(0);
    v86(&v27[*(int *)(v80 + 24)], &v28[*(int *)(v80 + 24)], v87);
    v81 = v84[10];
    *((_BYTE *)v88 + v84[9]) = *((_BYTE *)v85 + v84[9]);
    *(_QWORD *)((char *)v88 + v81) = *(_QWORD *)((char *)v85 + v81);
  }
  return v79;
}

uint64_t type metadata accessor for MLHandActionClassifier.InvertedResidual(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.InvertedResidual);
}

uint64_t type metadata accessor for MLHandActionClassifier.SingleStreamBlock(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.SingleStreamBlock);
}

uint64_t type metadata accessor for MLHandActionClassifier.Torso(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.Torso);
}

uint64_t destroy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int *v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t);

  v4 = type metadata accessor for BatchNorm();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v25 = type metadata accessor for Dense();
  v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
  v27(v6, v25);
  v5(a1 + a2[6], v4);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Dropout();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v9;
  v28 = v9;
  v11 = a1 + a2[8];
  v12 = type metadata accessor for Conv2D();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v13(v11 + v14[6], v12);
  v5(v11 + v14[7], v4);
  v10(v11 + v14[8], v8);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v13(v11 + *(int *)(v15 + 36), v12);
  v5(v11 + *(int *)(v15 + 40), v4);
  v16 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v17 = v11 + v16[5];
  v13(v17, v12);
  v13(v17 + v14[6], v12);
  v5(v17 + v14[7], v4);
  v28(v17 + v14[8], v8);
  v13(v17 + *(int *)(v15 + 36), v12);
  v5(v17 + *(int *)(v15 + 40), v4);
  v26 = v16;
  v18 = v11 + v16[6];
  v13(v18, v12);
  v13(v18 + v14[6], v12);
  v5(v18 + v14[7], v4);
  v28(v18 + v14[8], v8);
  v13(v18 + *(int *)(v15 + 36), v12);
  v5(v18 + *(int *)(v15 + 40), v4);
  v19 = v11 + v16[7];
  v13(v19, v12);
  v13(v19 + v14[6], v12);
  v5(v19 + v14[7], v4);
  v28(v19 + v14[8], v8);
  v13(v19 + *(int *)(v15 + 36), v12);
  v5(v19 + *(int *)(v15 + 40), v4);
  v20 = v11 + v16[8];
  v13(v20, v12);
  v13(v20 + v14[6], v12);
  v5(v20 + v14[7], v4);
  v28(v20 + v14[8], v8);
  v21 = v11 + v16[9];
  v13(v21, v12);
  v13(v21 + v14[6], v12);
  v5(v21 + v14[7], v4);
  v28(v21 + v14[8], v8);
  v13(v21 + *(int *)(v15 + 36), v12);
  v5(v21 + *(int *)(v15 + 40), v4);
  v22 = v11 + v16[10];
  v13(v11 + v26[10], v12);
  v13(v22 + v14[6], v12);
  v5(v22 + v14[7], v4);
  v28(v22 + v14[8], v8);
  v13(v22 + *(int *)(v15 + 36), v12);
  v5(v22 + *(int *)(v15 + 40), v4);
  v23 = v11 + *(int *)(type metadata accessor for MLHandActionClassifier.Torso(0) + 24);
  return ((uint64_t (*)(uint64_t, uint64_t))v27)(v23, v25);
}

uint64_t initializeWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  int *v80;
  uint64_t v81;
  uint64_t v82;

  v6 = type metadata accessor for BatchNorm();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = v7;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Dense();
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v77 = v12;
  v76(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v13 = a3[7];
  v74 = a2;
  v14 = a1 + v13;
  v75 = a1;
  v15 = a2 + v13;
  v16 = type metadata accessor for Dropout();
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v79(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Conv2D();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v22 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v23 = v22[5];
  v24 = v18 + v23;
  v25 = v19 + v23;
  v26 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  v21(v18 + v22[6], v19 + v22[6], v20);
  v8(v18 + v22[7], v19 + v22[7], v6);
  v79(v18 + v22[8], v19 + v22[8], v16);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v21(v18 + *(int *)(v78 + 36), v19 + *(int *)(v78 + 36), v20);
  v81 = v18;
  v82 = v19;
  v8(v18 + *(int *)(v78 + 40), v19 + *(int *)(v78 + 40), v6);
  v80 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v27 = v80[5];
  v28 = v18 + v27;
  v29 = v19 + v27;
  v21(v28, v29, v20);
  v30 = v22[5];
  v31 = v28 + v30;
  v32 = v29 + v30;
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_BYTE *)(v31 + 48) = *(_BYTE *)(v32 + 48);
  v21(v28 + v22[6], v29 + v22[6], v20);
  v8(v28 + v22[7], v29 + v22[7], v6);
  v79(v28 + v22[8], v29 + v22[8], v16);
  v34 = v78;
  v21(v28 + *(int *)(v78 + 36), v29 + *(int *)(v78 + 36), v20);
  v8(v28 + *(int *)(v34 + 40), v29 + *(int *)(v34 + 40), v6);
  v35 = v80[6];
  v36 = v81 + v35;
  v37 = v82 + v35;
  v21(v81 + v35, v82 + v35, v20);
  v38 = v22[5];
  v39 = v36 + v38;
  v40 = v37 + v38;
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_BYTE *)(v39 + 48) = *(_BYTE *)(v40 + 48);
  v21(v36 + v22[6], v37 + v22[6], v20);
  v8(v36 + v22[7], v37 + v22[7], v6);
  v79(v36 + v22[8], v37 + v22[8], v16);
  v21(v36 + *(int *)(v34 + 36), v37 + *(int *)(v34 + 36), v20);
  v8(v36 + *(int *)(v34 + 40), v37 + *(int *)(v34 + 40), v6);
  v42 = v80[7];
  v43 = v81 + v42;
  v44 = v82 + v42;
  v21(v81 + v42, v82 + v42, v20);
  v45 = v22[5];
  v46 = v43 + v45;
  v47 = v44 + v45;
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v47 + 32);
  *(_BYTE *)(v46 + 48) = *(_BYTE *)(v47 + 48);
  v21(v43 + v22[6], v44 + v22[6], v20);
  v8(v43 + v22[7], v44 + v22[7], v6);
  v79(v43 + v22[8], v44 + v22[8], v16);
  v21(v43 + *(int *)(v34 + 36), v44 + *(int *)(v34 + 36), v20);
  v8(v43 + *(int *)(v34 + 40), v44 + *(int *)(v34 + 40), v6);
  v49 = v80[8];
  v50 = v81 + v49;
  v51 = v82 + v49;
  v21(v81 + v49, v82 + v49, v20);
  v52 = v22[5];
  v53 = v50 + v52;
  v54 = v51 + v52;
  v55 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v55;
  *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
  *(_BYTE *)(v53 + 48) = *(_BYTE *)(v54 + 48);
  v21(v50 + v22[6], v51 + v22[6], v20);
  v8(v50 + v22[7], v51 + v22[7], v6);
  v79(v50 + v22[8], v51 + v22[8], v16);
  v56 = v80[9];
  v57 = v81 + v56;
  v58 = v82 + v56;
  v21(v81 + v56, v82 + v56, v20);
  v59 = v22[5];
  v60 = v57 + v59;
  v61 = v58 + v59;
  v62 = *(_OWORD *)(v61 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *(_OWORD *)(v60 + 16) = v62;
  *(_OWORD *)(v60 + 32) = *(_OWORD *)(v61 + 32);
  *(_BYTE *)(v60 + 48) = *(_BYTE *)(v61 + 48);
  v21(v57 + v22[6], v58 + v22[6], v20);
  v8(v57 + v22[7], v58 + v22[7], v6);
  v79(v57 + v22[8], v58 + v22[8], v16);
  v63 = v78;
  v21(v57 + *(int *)(v78 + 36), v58 + *(int *)(v78 + 36), v20);
  v8(v57 + *(int *)(v63 + 40), v58 + *(int *)(v63 + 40), v6);
  v64 = v80[10];
  v65 = v81 + v64;
  v66 = v82 + v64;
  v21(v81 + v64, v82 + v64, v20);
  v67 = v22[5];
  v68 = v65 + v67;
  v69 = v66 + v67;
  v70 = *(_OWORD *)(v69 + 16);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_OWORD *)(v68 + 16) = v70;
  *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
  *(_BYTE *)(v68 + 48) = *(_BYTE *)(v69 + 48);
  v21(v65 + v22[6], v66 + v22[6], v20);
  v8(v65 + v22[7], v66 + v22[7], v6);
  v79(v65 + v22[8], v66 + v22[8], v16);
  v21(v65 + *(int *)(v63 + 36), v66 + *(int *)(v63 + 36), v20);
  v8(v65 + *(int *)(v63 + 40), v66 + *(int *)(v63 + 40), v6);
  v71 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v76(v81 + *(int *)(v71 + 24), v82 + *(int *)(v71 + 24), v77);
  v72 = a3[10];
  result = v75;
  *(_BYTE *)(v75 + a3[9]) = *(_BYTE *)(v74 + a3[9]);
  *(_QWORD *)(v75 + v72) = *(_QWORD *)(v74 + v72);
  return result;
}

uint64_t assignWithCopy for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;

  v6 = type metadata accessor for BatchNorm();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v72 = v6;
  v7(a1, a2, v6);
  v8 = v7;
  v73 = v7;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a1;
  v12 = a2 + v9;
  v13 = type metadata accessor for Dense();
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v71 = v13;
  v70(v10, v12, v13);
  v8(v11 + a3[6], a2 + a3[6], v6);
  v14 = a3[7];
  v15 = v11 + v14;
  v16 = a2 + v14;
  v69 = a2;
  v17 = type metadata accessor for Dropout();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v19 = v15;
  v20 = v17;
  v74 = v17;
  v18(v19, v16);
  v21 = a3[8];
  v22 = v11 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Conv2D();
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v22, v23, v24);
  v26 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v27 = v26[5];
  v28 = v22 + v27;
  v29 = v23 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  *(_QWORD *)(v28 + 40) = *(_QWORD *)(v29 + 40);
  *(_BYTE *)(v28 + 48) = *(_BYTE *)(v29 + 48);
  v25(v22 + v26[6], v23 + v26[6], v24);
  v73(v22 + v26[7], v23 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v22 + v26[8], v23 + v26[8], v20);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v25(v22 + *(int *)(v76 + 36), v23 + *(int *)(v76 + 36), v24);
  v75 = v23;
  v73(v22 + *(int *)(v76 + 40), v23 + *(int *)(v76 + 40), v72);
  v77 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v30 = v77[5];
  v31 = v22 + v30;
  v32 = v23 + v30;
  v25(v22 + v30, v23 + v30, v24);
  v33 = v26[5];
  v34 = v31 + v33;
  v35 = v32 + v33;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  *(_BYTE *)(v34 + 48) = *(_BYTE *)(v35 + 48);
  v25(v31 + v26[6], v32 + v26[6], v24);
  v73(v31 + v26[7], v32 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v31 + v26[8], v32 + v26[8], v74);
  v25(v31 + *(int *)(v76 + 36), v32 + *(int *)(v76 + 36), v24);
  v73(v31 + *(int *)(v76 + 40), v32 + *(int *)(v76 + 40), v72);
  v36 = v77[6];
  v37 = v22 + v36;
  v38 = v23 + v36;
  v25(v22 + v36, v23 + v36, v24);
  v39 = v26[5];
  v40 = v37 + v39;
  v41 = v38 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
  *(_QWORD *)(v40 + 24) = *(_QWORD *)(v41 + 24);
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  *(_QWORD *)(v40 + 40) = *(_QWORD *)(v41 + 40);
  *(_BYTE *)(v40 + 48) = *(_BYTE *)(v41 + 48);
  v25(v37 + v26[6], v38 + v26[6], v24);
  v73(v37 + v26[7], v38 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v37 + v26[8], v38 + v26[8], v74);
  v25(v37 + *(int *)(v76 + 36), v38 + *(int *)(v76 + 36), v24);
  v73(v37 + *(int *)(v76 + 40), v38 + *(int *)(v76 + 40), v72);
  v42 = v77[7];
  v43 = v22 + v42;
  v44 = v23 + v42;
  v25(v22 + v42, v23 + v42, v24);
  v45 = v26[5];
  v46 = v43 + v45;
  v47 = v44 + v45;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
  *(_QWORD *)(v46 + 24) = *(_QWORD *)(v47 + 24);
  *(_QWORD *)(v46 + 32) = *(_QWORD *)(v47 + 32);
  *(_QWORD *)(v46 + 40) = *(_QWORD *)(v47 + 40);
  *(_BYTE *)(v46 + 48) = *(_BYTE *)(v47 + 48);
  v25(v43 + v26[6], v44 + v26[6], v24);
  v73(v43 + v26[7], v44 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v43 + v26[8], v44 + v26[8], v74);
  v25(v43 + *(int *)(v76 + 36), v44 + *(int *)(v76 + 36), v24);
  v73(v43 + *(int *)(v76 + 40), v44 + *(int *)(v76 + 40), v72);
  v48 = v77[8];
  v49 = v22 + v48;
  v50 = v23 + v48;
  v25(v22 + v48, v23 + v48, v24);
  v51 = v26[5];
  v52 = v49 + v51;
  v53 = v50 + v51;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  *(_QWORD *)(v52 + 24) = *(_QWORD *)(v53 + 24);
  *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
  *(_QWORD *)(v52 + 40) = *(_QWORD *)(v53 + 40);
  *(_BYTE *)(v52 + 48) = *(_BYTE *)(v53 + 48);
  v25(v49 + v26[6], v50 + v26[6], v24);
  v73(v49 + v26[7], v50 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v49 + v26[8], v50 + v26[8], v74);
  v54 = v77[9];
  v55 = v22 + v54;
  v56 = v23 + v54;
  v25(v22 + v54, v23 + v54, v24);
  v57 = v26[5];
  v58 = v55 + v57;
  v59 = v56 + v57;
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *(_QWORD *)(v58 + 8) = *(_QWORD *)(v59 + 8);
  *(_QWORD *)(v58 + 16) = *(_QWORD *)(v59 + 16);
  *(_QWORD *)(v58 + 24) = *(_QWORD *)(v59 + 24);
  *(_QWORD *)(v58 + 32) = *(_QWORD *)(v59 + 32);
  *(_QWORD *)(v58 + 40) = *(_QWORD *)(v59 + 40);
  *(_BYTE *)(v58 + 48) = *(_BYTE *)(v59 + 48);
  v25(v55 + v26[6], v56 + v26[6], v24);
  v73(v55 + v26[7], v56 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v55 + v26[8], v56 + v26[8], v74);
  v60 = v76;
  v25(v55 + *(int *)(v76 + 36), v56 + *(int *)(v76 + 36), v24);
  v73(v55 + *(int *)(v60 + 40), v56 + *(int *)(v60 + 40), v72);
  v61 = v77[10];
  v62 = v22 + v61;
  v63 = v75 + v61;
  v25(v22 + v61, v75 + v61, v24);
  v64 = v26[5];
  v65 = v62 + v64;
  v66 = v63 + v64;
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v65 + 24) = *(_QWORD *)(v66 + 24);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
  *(_QWORD *)(v65 + 40) = *(_QWORD *)(v66 + 40);
  *(_BYTE *)(v65 + 48) = *(_BYTE *)(v66 + 48);
  v25(v62 + v26[6], v63 + v26[6], v24);
  v73(v62 + v26[7], v63 + v26[7], v72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v62 + v26[8], v63 + v26[8], v74);
  v25(v62 + *(int *)(v60 + 36), v63 + *(int *)(v60 + 36), v24);
  v73(v62 + *(int *)(v60 + 40), v63 + *(int *)(v60 + 40), v72);
  v67 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v70(v22 + *(int *)(v67 + 24), v75 + *(int *)(v67 + 24), v71);
  result = v11;
  *(_BYTE *)(v11 + a3[9]) = *(_BYTE *)(v69 + a3[9]);
  *(_QWORD *)(v11 + a3[10]) = *(_QWORD *)(v69 + a3[10]);
  return result;
}

uint64_t initializeWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  int *v80;
  uint64_t v81;
  uint64_t v82;

  v6 = type metadata accessor for BatchNorm();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = v7;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Dense();
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v77 = v12;
  v76(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v13 = a3[7];
  v74 = a2;
  v14 = a1 + v13;
  v75 = a1;
  v15 = a2 + v13;
  v16 = type metadata accessor for Dropout();
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v79(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Conv2D();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v22 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v23 = v22[5];
  v24 = v18 + v23;
  v25 = v19 + v23;
  v26 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  v21(v18 + v22[6], v19 + v22[6], v20);
  v8(v18 + v22[7], v19 + v22[7], v6);
  v79(v18 + v22[8], v19 + v22[8], v16);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v21(v18 + *(int *)(v78 + 36), v19 + *(int *)(v78 + 36), v20);
  v81 = v18;
  v82 = v19;
  v8(v18 + *(int *)(v78 + 40), v19 + *(int *)(v78 + 40), v6);
  v80 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v27 = v80[5];
  v28 = v18 + v27;
  v29 = v19 + v27;
  v21(v28, v29, v20);
  v30 = v22[5];
  v31 = v28 + v30;
  v32 = v29 + v30;
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_BYTE *)(v31 + 48) = *(_BYTE *)(v32 + 48);
  v21(v28 + v22[6], v29 + v22[6], v20);
  v8(v28 + v22[7], v29 + v22[7], v6);
  v79(v28 + v22[8], v29 + v22[8], v16);
  v34 = v78;
  v21(v28 + *(int *)(v78 + 36), v29 + *(int *)(v78 + 36), v20);
  v8(v28 + *(int *)(v34 + 40), v29 + *(int *)(v34 + 40), v6);
  v35 = v80[6];
  v36 = v81 + v35;
  v37 = v82 + v35;
  v21(v81 + v35, v82 + v35, v20);
  v38 = v22[5];
  v39 = v36 + v38;
  v40 = v37 + v38;
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_BYTE *)(v39 + 48) = *(_BYTE *)(v40 + 48);
  v21(v36 + v22[6], v37 + v22[6], v20);
  v8(v36 + v22[7], v37 + v22[7], v6);
  v79(v36 + v22[8], v37 + v22[8], v16);
  v21(v36 + *(int *)(v34 + 36), v37 + *(int *)(v34 + 36), v20);
  v8(v36 + *(int *)(v34 + 40), v37 + *(int *)(v34 + 40), v6);
  v42 = v80[7];
  v43 = v81 + v42;
  v44 = v82 + v42;
  v21(v81 + v42, v82 + v42, v20);
  v45 = v22[5];
  v46 = v43 + v45;
  v47 = v44 + v45;
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v47 + 32);
  *(_BYTE *)(v46 + 48) = *(_BYTE *)(v47 + 48);
  v21(v43 + v22[6], v44 + v22[6], v20);
  v8(v43 + v22[7], v44 + v22[7], v6);
  v79(v43 + v22[8], v44 + v22[8], v16);
  v21(v43 + *(int *)(v34 + 36), v44 + *(int *)(v34 + 36), v20);
  v8(v43 + *(int *)(v34 + 40), v44 + *(int *)(v34 + 40), v6);
  v49 = v80[8];
  v50 = v81 + v49;
  v51 = v82 + v49;
  v21(v81 + v49, v82 + v49, v20);
  v52 = v22[5];
  v53 = v50 + v52;
  v54 = v51 + v52;
  v55 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v55;
  *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
  *(_BYTE *)(v53 + 48) = *(_BYTE *)(v54 + 48);
  v21(v50 + v22[6], v51 + v22[6], v20);
  v8(v50 + v22[7], v51 + v22[7], v6);
  v79(v50 + v22[8], v51 + v22[8], v16);
  v56 = v80[9];
  v57 = v81 + v56;
  v58 = v82 + v56;
  v21(v81 + v56, v82 + v56, v20);
  v59 = v22[5];
  v60 = v57 + v59;
  v61 = v58 + v59;
  v62 = *(_OWORD *)(v61 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *(_OWORD *)(v60 + 16) = v62;
  *(_OWORD *)(v60 + 32) = *(_OWORD *)(v61 + 32);
  *(_BYTE *)(v60 + 48) = *(_BYTE *)(v61 + 48);
  v21(v57 + v22[6], v58 + v22[6], v20);
  v8(v57 + v22[7], v58 + v22[7], v6);
  v79(v57 + v22[8], v58 + v22[8], v16);
  v63 = v78;
  v21(v57 + *(int *)(v78 + 36), v58 + *(int *)(v78 + 36), v20);
  v8(v57 + *(int *)(v63 + 40), v58 + *(int *)(v63 + 40), v6);
  v64 = v80[10];
  v65 = v81 + v64;
  v66 = v82 + v64;
  v21(v81 + v64, v82 + v64, v20);
  v67 = v22[5];
  v68 = v65 + v67;
  v69 = v66 + v67;
  v70 = *(_OWORD *)(v69 + 16);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_OWORD *)(v68 + 16) = v70;
  *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
  *(_BYTE *)(v68 + 48) = *(_BYTE *)(v69 + 48);
  v21(v65 + v22[6], v66 + v22[6], v20);
  v8(v65 + v22[7], v66 + v22[7], v6);
  v79(v65 + v22[8], v66 + v22[8], v16);
  v21(v65 + *(int *)(v63 + 36), v66 + *(int *)(v63 + 36), v20);
  v8(v65 + *(int *)(v63 + 40), v66 + *(int *)(v63 + 40), v6);
  v71 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v76(v81 + *(int *)(v71 + 24), v82 + *(int *)(v71 + 24), v77);
  v72 = a3[10];
  result = v75;
  *(_BYTE *)(v75 + a3[9]) = *(_BYTE *)(v74 + a3[9]);
  *(_QWORD *)(v75 + v72) = *(_QWORD *)(v74 + v72);
  return result;
}

uint64_t assignWithTake for MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  int *v80;
  uint64_t v81;
  uint64_t v82;

  v6 = type metadata accessor for BatchNorm();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = v7;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Dense();
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v77 = v12;
  v76(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v13 = a3[7];
  v74 = a2;
  v14 = a1 + v13;
  v75 = a1;
  v15 = a2 + v13;
  v16 = type metadata accessor for Dropout();
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v79(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Conv2D();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40);
  v21(v18, v19, v20);
  v22 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v23 = v22[5];
  v24 = v18 + v23;
  v25 = v19 + v23;
  v26 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  v21(v18 + v22[6], v19 + v22[6], v20);
  v8(v18 + v22[7], v19 + v22[7], v6);
  v79(v18 + v22[8], v19 + v22[8], v16);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v21(v18 + *(int *)(v78 + 36), v19 + *(int *)(v78 + 36), v20);
  v81 = v18;
  v82 = v19;
  v8(v18 + *(int *)(v78 + 40), v19 + *(int *)(v78 + 40), v6);
  v80 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v27 = v80[5];
  v28 = v18 + v27;
  v29 = v19 + v27;
  v21(v28, v29, v20);
  v30 = v22[5];
  v31 = v28 + v30;
  v32 = v29 + v30;
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_BYTE *)(v31 + 48) = *(_BYTE *)(v32 + 48);
  v21(v28 + v22[6], v29 + v22[6], v20);
  v8(v28 + v22[7], v29 + v22[7], v6);
  v79(v28 + v22[8], v29 + v22[8], v16);
  v34 = v78;
  v21(v28 + *(int *)(v78 + 36), v29 + *(int *)(v78 + 36), v20);
  v8(v28 + *(int *)(v34 + 40), v29 + *(int *)(v34 + 40), v6);
  v35 = v80[6];
  v36 = v81 + v35;
  v37 = v82 + v35;
  v21(v81 + v35, v82 + v35, v20);
  v38 = v22[5];
  v39 = v36 + v38;
  v40 = v37 + v38;
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_BYTE *)(v39 + 48) = *(_BYTE *)(v40 + 48);
  v21(v36 + v22[6], v37 + v22[6], v20);
  v8(v36 + v22[7], v37 + v22[7], v6);
  v79(v36 + v22[8], v37 + v22[8], v16);
  v21(v36 + *(int *)(v34 + 36), v37 + *(int *)(v34 + 36), v20);
  v8(v36 + *(int *)(v34 + 40), v37 + *(int *)(v34 + 40), v6);
  v42 = v80[7];
  v43 = v81 + v42;
  v44 = v82 + v42;
  v21(v81 + v42, v82 + v42, v20);
  v45 = v22[5];
  v46 = v43 + v45;
  v47 = v44 + v45;
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v47 + 32);
  *(_BYTE *)(v46 + 48) = *(_BYTE *)(v47 + 48);
  v21(v43 + v22[6], v44 + v22[6], v20);
  v8(v43 + v22[7], v44 + v22[7], v6);
  v79(v43 + v22[8], v44 + v22[8], v16);
  v21(v43 + *(int *)(v34 + 36), v44 + *(int *)(v34 + 36), v20);
  v8(v43 + *(int *)(v34 + 40), v44 + *(int *)(v34 + 40), v6);
  v49 = v80[8];
  v50 = v81 + v49;
  v51 = v82 + v49;
  v21(v81 + v49, v82 + v49, v20);
  v52 = v22[5];
  v53 = v50 + v52;
  v54 = v51 + v52;
  v55 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v55;
  *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
  *(_BYTE *)(v53 + 48) = *(_BYTE *)(v54 + 48);
  v21(v50 + v22[6], v51 + v22[6], v20);
  v8(v50 + v22[7], v51 + v22[7], v6);
  v79(v50 + v22[8], v51 + v22[8], v16);
  v56 = v80[9];
  v57 = v81 + v56;
  v58 = v82 + v56;
  v21(v81 + v56, v82 + v56, v20);
  v59 = v22[5];
  v60 = v57 + v59;
  v61 = v58 + v59;
  v62 = *(_OWORD *)(v61 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *(_OWORD *)(v60 + 16) = v62;
  *(_OWORD *)(v60 + 32) = *(_OWORD *)(v61 + 32);
  *(_BYTE *)(v60 + 48) = *(_BYTE *)(v61 + 48);
  v21(v57 + v22[6], v58 + v22[6], v20);
  v8(v57 + v22[7], v58 + v22[7], v6);
  v79(v57 + v22[8], v58 + v22[8], v16);
  v63 = v78;
  v21(v57 + *(int *)(v78 + 36), v58 + *(int *)(v78 + 36), v20);
  v8(v57 + *(int *)(v63 + 40), v58 + *(int *)(v63 + 40), v6);
  v64 = v80[10];
  v65 = v81 + v64;
  v66 = v82 + v64;
  v21(v81 + v64, v82 + v64, v20);
  v67 = v22[5];
  v68 = v65 + v67;
  v69 = v66 + v67;
  v70 = *(_OWORD *)(v69 + 16);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_OWORD *)(v68 + 16) = v70;
  *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
  *(_BYTE *)(v68 + 48) = *(_BYTE *)(v69 + 48);
  v21(v65 + v22[6], v66 + v22[6], v20);
  v8(v65 + v22[7], v66 + v22[7], v6);
  v79(v65 + v22[8], v66 + v22[8], v16);
  v21(v65 + *(int *)(v63 + 36), v66 + *(int *)(v63 + 36), v20);
  v8(v65 + *(int *)(v63 + 40), v66 + *(int *)(v63 + 40), v6);
  v71 = type metadata accessor for MLHandActionClassifier.Torso(0);
  v76(v81 + *(int *)(v71 + 24), v82 + *(int *)(v71 + 24), v77);
  v72 = a3[10];
  result = v75;
  *(_BYTE *)(v75 + a3[9]) = *(_BYTE *)(v74 + a3[9]);
  *(_QWORD *)(v75 + v72) = *(_QWORD *)(v74 + v72);
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AF064D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;

  OUTLINED_FUNCTION_29_24();
  OUTLINED_FUNCTION_14_8();
  if (v8)
  {
    v6 = OUTLINED_FUNCTION_95_7();
LABEL_14:
    OUTLINED_FUNCTION_51_3(v6, a2, v7);
    return;
  }
  OUTLINED_FUNCTION_36_23();
  OUTLINED_FUNCTION_14_8();
  if (v8)
  {
    v7 = v9;
    v10 = a3[5];
LABEL_13:
    v6 = a1 + v10;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_44_21();
  OUTLINED_FUNCTION_14_8();
  if (v11)
  {
    v7 = v12;
    v10 = a3[7];
    goto LABEL_13;
  }
  type metadata accessor for MLHandActionClassifier.Torso(0);
  OUTLINED_FUNCTION_14_8();
  if (v13)
  {
    v7 = v14;
    v10 = a3[8];
    goto LABEL_13;
  }
  v15 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v15 >= 2)
    OUTLINED_FUNCTION_80_10(v15);
  OUTLINED_FUNCTION_125();
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.GraphCNNModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF06590()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_17_25();
  type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_13_11();
  if (v3)
  {
    OUTLINED_FUNCTION_68_14();
  }
  else
  {
    OUTLINED_FUNCTION_36_23();
    OUTLINED_FUNCTION_13_11();
    if (!v3)
    {
      OUTLINED_FUNCTION_44_21();
      OUTLINED_FUNCTION_13_11();
      if (!v4)
      {
        type metadata accessor for MLHandActionClassifier.Torso(0);
        OUTLINED_FUNCTION_13_11();
        if (!v5)
        {
          *(_BYTE *)(v1 + *(int *)(v2 + 36)) = v0 + 1;
          OUTLINED_FUNCTION_125();
          return;
        }
      }
    }
  }
  OUTLINED_FUNCTION_89_7();
  OUTLINED_FUNCTION_16_6(v6, v7, v8, v9);
}

uint64_t type metadata completion function for MLHandActionClassifier.GraphCNNModel()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for BatchNorm();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Dense();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Dropout();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for MLHandActionClassifier.Torso(319);
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.Torso(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *);
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v87;
  char *v88;
  char *v89;
  int *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v84 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v79 = (char *)(v84 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Conv2D();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
    v10[48] = v11[48];
    v7(&a1[v8[6]], &a2[v8[6]], v6);
    v13 = v8[7];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = type metadata accessor for BatchNorm();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = v17;
    v19 = v8[8];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = type metadata accessor for Dropout();
    v23 = *(void (**)(char *, char *))(*(_QWORD *)(v22 - 8) + 16);
    v24 = v20;
    v25 = v22;
    v92 = v22;
    v23(v24, v21);
    v26 = (void (*)(char *, char *, uint64_t))v23;
    v91 = (void (*)(char *, char *, uint64_t))v23;
    v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v7(&a1[*(int *)(v87 + 36)], &a2[*(int *)(v87 + 36)], v6);
    v18(&a1[*(int *)(v87 + 40)], &a2[*(int *)(v87 + 40)], v16);
    v89 = a2;
    v90 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
    v27 = v90[5];
    v28 = &a1[v27];
    v29 = &a2[v27];
    v7(&a1[v27], v29, v6);
    v30 = v8[5];
    v31 = &v28[v30];
    v32 = &v29[v30];
    v33 = *((_OWORD *)v32 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v33;
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    v31[48] = v32[48];
    v7(&v28[v8[6]], &v29[v8[6]], v6);
    v18(&v28[v8[7]], &v29[v8[7]], v16);
    v26(&v28[v8[8]], &v29[v8[8]], v25);
    v7(&v28[*(int *)(v87 + 36)], &v29[*(int *)(v87 + 36)], v6);
    v18(&v28[*(int *)(v87 + 40)], &v29[*(int *)(v87 + 40)], v16);
    v34 = v18;
    v35 = v90[6];
    v36 = &a1[v35];
    v37 = &v89[v35];
    v38 = v6;
    v39 = v6;
    v40 = v7;
    v7(&a1[v35], &v89[v35], v39);
    v41 = v8[5];
    v42 = &v36[v41];
    v43 = &v37[v41];
    v44 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v44;
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    v42[48] = v43[48];
    v7(&v36[v8[6]], &v37[v8[6]], v38);
    v34(&v36[v8[7]], &v37[v8[7]], v16);
    v91(&v36[v8[8]], &v37[v8[8]], v92);
    v45 = a1;
    v88 = a1;
    v46 = v87;
    v40(&v36[*(int *)(v87 + 36)], &v37[*(int *)(v87 + 36)], v38);
    v34(&v36[*(int *)(v46 + 40)], &v37[*(int *)(v46 + 40)], v16);
    v47 = v90[7];
    v48 = &v45[v47];
    v49 = &v89[v47];
    v40(&v45[v47], &v89[v47], v38);
    v50 = v8[5];
    v51 = &v48[v50];
    v52 = &v49[v50];
    v53 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v53;
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    v51[48] = v52[48];
    v40(&v48[v8[6]], &v49[v8[6]], v38);
    v34(&v48[v8[7]], &v49[v8[7]], v16);
    v91(&v48[v8[8]], &v49[v8[8]], v92);
    v40(&v48[*(int *)(v46 + 36)], &v49[*(int *)(v46 + 36)], v38);
    v34(&v48[*(int *)(v46 + 40)], &v49[*(int *)(v46 + 40)], v16);
    v54 = v90[8];
    v55 = &v88[v54];
    v56 = &v89[v54];
    v40(&v88[v54], &v89[v54], v38);
    v57 = v8[5];
    v58 = &v55[v57];
    v59 = &v56[v57];
    v60 = *((_OWORD *)v59 + 1);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *((_OWORD *)v58 + 1) = v60;
    *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
    v58[48] = v59[48];
    v40(&v55[v8[6]], &v56[v8[6]], v38);
    v34(&v55[v8[7]], &v56[v8[7]], v16);
    v91(&v55[v8[8]], &v56[v8[8]], v92);
    v61 = v90[9];
    v62 = &v88[v61];
    v63 = &v89[v61];
    v40(&v88[v61], &v89[v61], v38);
    v64 = v8[5];
    v65 = &v62[v64];
    v66 = &v63[v64];
    v67 = *((_OWORD *)v66 + 1);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    *((_OWORD *)v65 + 1) = v67;
    *((_OWORD *)v65 + 2) = *((_OWORD *)v66 + 2);
    v65[48] = v66[48];
    v68 = v38;
    v40(&v62[v8[6]], &v63[v8[6]], v38);
    v69 = v34;
    v34(&v62[v8[7]], &v63[v8[7]], v16);
    v91(&v62[v8[8]], &v63[v8[8]], v92);
    v70 = v87;
    v40(&v62[*(int *)(v87 + 36)], &v63[*(int *)(v87 + 36)], v68);
    v69(&v62[*(int *)(v70 + 40)], &v63[*(int *)(v70 + 40)], v16);
    v71 = v90[10];
    v72 = &v88[v71];
    v73 = &v89[v71];
    v40(&v88[v71], &v89[v71], v68);
    v74 = v8[5];
    v75 = &v72[v74];
    v76 = &v73[v74];
    v77 = *((_OWORD *)v76 + 1);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v77;
    *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
    v75[48] = v76[48];
    v40(&v72[v8[6]], &v73[v8[6]], v68);
    v69(&v72[v8[7]], &v73[v8[7]], v16);
    v91(&v72[v8[8]], &v73[v8[8]], v92);
    v78 = v68;
    v79 = v88;
    v40(&v72[*(int *)(v70 + 36)], &v73[*(int *)(v70 + 36)], v78);
    v69(&v72[*(int *)(v70 + 40)], &v73[*(int *)(v70 + 40)], v16);
    v80 = *(int *)(a3 + 24);
    v81 = &v88[v80];
    v82 = &v89[v80];
    v83 = type metadata accessor for Dense();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
  }
  return v79;
}

uint64_t destroy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t);
  int *v23;
  uint64_t v24;

  v3 = type metadata accessor for Conv2D();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  v5 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v4(a1 + v5[6], v3);
  v6 = a1 + v5[7];
  v7 = type metadata accessor for BatchNorm();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + v5[8];
  v24 = type metadata accessor for Dropout();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
  v10(v9, v24);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v4(a1 + *(int *)(v11 + 36), v3);
  v8(a1 + *(int *)(v11 + 40), v7);
  v23 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v12 = a1 + v23[5];
  v4(v12, v3);
  v4(v12 + v5[6], v3);
  v8(v12 + v5[7], v7);
  v21 = v10;
  v10(v12 + v5[8], v24);
  v4(v12 + *(int *)(v11 + 36), v3);
  v8(v12 + *(int *)(v11 + 40), v7);
  v13 = a1 + v23[6];
  v4(v13, v3);
  v4(v13 + v5[6], v3);
  v8(v13 + v5[7], v7);
  v10(v13 + v5[8], v24);
  v4(v13 + *(int *)(v11 + 36), v3);
  v8(v13 + *(int *)(v11 + 40), v7);
  v14 = a1 + v23[7];
  v4(v14, v3);
  v4(v14 + v5[6], v3);
  v8(v14 + v5[7], v7);
  v10(v14 + v5[8], v24);
  v4(v14 + *(int *)(v11 + 36), v3);
  v8(v14 + *(int *)(v11 + 40), v7);
  v15 = a1 + v23[8];
  v4(v15, v3);
  v4(v15 + v5[6], v3);
  v8(v15 + v5[7], v7);
  v10(v15 + v5[8], v24);
  v16 = a1 + v23[9];
  v4(v16, v3);
  v4(v16 + v5[6], v3);
  v8(v16 + v5[7], v7);
  v10(v16 + v5[8], v24);
  v4(v16 + *(int *)(v11 + 36), v3);
  v8(v16 + *(int *)(v11 + 40), v7);
  v17 = a1 + v23[10];
  v4(v17, v3);
  v4(v17 + v5[6], v3);
  v8(v17 + v5[7], v7);
  v21(v17 + v5[8], v24);
  v4(v17 + *(int *)(v11 + 36), v3);
  v8(v17 + *(int *)(v11 + 40), v7);
  v18 = a1 + *(int *)(a2 + 24);
  v19 = type metadata accessor for Dense();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
}

uint64_t initializeWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for BatchNorm();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v17 = v16;
  v18 = v7[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Dropout();
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v75 = v21;
  v74(v19, v20, v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(a1 + *(int *)(v22 + 36), a2 + *(int *)(v22 + 36), v5);
  v71 = a2;
  v17(a1 + *(int *)(v22 + 40), a2 + *(int *)(v22 + 40), v15);
  v72 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v23 = v72[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v6(a1 + v23, v25, v5);
  v26 = v7[5];
  v27 = v24 + v26;
  v28 = v25 + v26;
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(_BYTE *)(v27 + 48) = *(_BYTE *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v17(v24 + v7[7], v25 + v7[7], v15);
  v74(v24 + v7[8], v25 + v7[8], v75);
  v73 = v22;
  v6(v24 + *(int *)(v22 + 36), v25 + *(int *)(v22 + 36), v5);
  v17(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v15);
  v30 = v72[6];
  v31 = a1 + v30;
  v32 = v71 + v30;
  v6(a1 + v30, v71 + v30, v5);
  v33 = v7[5];
  v34 = v31 + v33;
  v35 = v32 + v33;
  v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_BYTE *)(v34 + 48) = *(_BYTE *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v17(v31 + v7[7], v32 + v7[7], v15);
  v74(v31 + v7[8], v32 + v7[8], v75);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v17(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v15);
  v37 = v72[7];
  v38 = a1 + v37;
  v39 = v71 + v37;
  v6(a1 + v37, v71 + v37, v5);
  v40 = v7[5];
  v41 = v38 + v40;
  v42 = v39 + v40;
  v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(_BYTE *)(v41 + 48) = *(_BYTE *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v17(v38 + v7[7], v39 + v7[7], v15);
  v74(v38 + v7[8], v39 + v7[8], v75);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v17(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v15);
  v44 = v72[8];
  v45 = a1 + v44;
  v46 = v71 + v44;
  v6(a1 + v44, v71 + v44, v5);
  v47 = v7[5];
  v48 = v45 + v47;
  v49 = v46 + v47;
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_BYTE *)(v48 + 48) = *(_BYTE *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v17(v45 + v7[7], v46 + v7[7], v15);
  v74(v45 + v7[8], v46 + v7[8], v75);
  v51 = v72[9];
  v52 = a1 + v51;
  v53 = v71 + v51;
  v6(a1 + v51, v71 + v51, v5);
  v54 = v7[5];
  v55 = v52 + v54;
  v56 = v53 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v17(v52 + v7[7], v53 + v7[7], v15);
  v74(v52 + v7[8], v53 + v7[8], v75);
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v17(v52 + *(int *)(v22 + 40), v53 + *(int *)(v22 + 40), v15);
  v58 = v72[10];
  v59 = a1 + v58;
  v60 = v71 + v58;
  v6(a1 + v58, v71 + v58, v5);
  v61 = v7[5];
  v62 = v59 + v61;
  v63 = v60 + v61;
  v64 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_OWORD *)(v62 + 16) = v64;
  *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
  *(_BYTE *)(v62 + 48) = *(_BYTE *)(v63 + 48);
  v6(v59 + v7[6], v60 + v7[6], v5);
  v17(v59 + v7[7], v60 + v7[7], v15);
  v74(v59 + v7[8], v60 + v7[8], v75);
  v6(v59 + *(int *)(v22 + 36), v60 + *(int *)(v22 + 36), v5);
  v17(v59 + *(int *)(v22 + 40), v60 + *(int *)(v22 + 40), v15);
  v65 = *(int *)(a3 + 24);
  v66 = a1 + v65;
  v67 = v71 + v65;
  v68 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for BatchNorm();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v16 = v15;
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v66 = type metadata accessor for Dropout();
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24);
  v67(v18, v19, v66);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(a1 + *(int *)(v20 + 36), a2 + *(int *)(v20 + 36), v5);
  v63 = a2;
  v16(a1 + *(int *)(v20 + 40), a2 + *(int *)(v20 + 40), v14);
  v65 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v21 = v65[5];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v6(a1 + v21, a2 + v21, v5);
  v24 = v7[5];
  v25 = v22 + v24;
  v26 = v23 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(v26 + 40);
  *(_BYTE *)(v25 + 48) = *(_BYTE *)(v26 + 48);
  v6(v22 + v7[6], v23 + v7[6], v5);
  v16(v22 + v7[7], v23 + v7[7], v14);
  v67(v22 + v7[8], v23 + v7[8], v66);
  v64 = v20;
  v6(v22 + *(int *)(v20 + 36), v23 + *(int *)(v20 + 36), v5);
  v16(v22 + *(int *)(v20 + 40), v23 + *(int *)(v20 + 40), v14);
  v27 = v65[6];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v6(a1 + v27, a2 + v27, v5);
  v30 = v7[5];
  v31 = v28 + v30;
  v32 = v29 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
  *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
  *(_QWORD *)(v31 + 40) = *(_QWORD *)(v32 + 40);
  *(_BYTE *)(v31 + 48) = *(_BYTE *)(v32 + 48);
  v6(v28 + v7[6], v29 + v7[6], v5);
  v16(v28 + v7[7], v29 + v7[7], v14);
  v67(v28 + v7[8], v29 + v7[8], v66);
  v6(v28 + *(int *)(v20 + 36), v29 + *(int *)(v20 + 36), v5);
  v16(v28 + *(int *)(v20 + 40), v29 + *(int *)(v20 + 40), v14);
  v33 = v65[7];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v6(a1 + v33, a2 + v33, v5);
  v36 = v7[5];
  v37 = v34 + v36;
  v38 = v35 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v38 + 16);
  *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
  *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
  *(_QWORD *)(v37 + 40) = *(_QWORD *)(v38 + 40);
  *(_BYTE *)(v37 + 48) = *(_BYTE *)(v38 + 48);
  v6(v34 + v7[6], v35 + v7[6], v5);
  v16(v34 + v7[7], v35 + v7[7], v14);
  v67(v34 + v7[8], v35 + v7[8], v66);
  v6(v34 + *(int *)(v64 + 36), v35 + *(int *)(v64 + 36), v5);
  v16(v34 + *(int *)(v64 + 40), v35 + *(int *)(v64 + 40), v14);
  v39 = v65[8];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v6(a1 + v39, a2 + v39, v5);
  v42 = v7[5];
  v43 = v40 + v42;
  v44 = v41 + v42;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_QWORD *)(v43 + 8) = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
  *(_QWORD *)(v43 + 24) = *(_QWORD *)(v44 + 24);
  *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
  *(_QWORD *)(v43 + 40) = *(_QWORD *)(v44 + 40);
  *(_BYTE *)(v43 + 48) = *(_BYTE *)(v44 + 48);
  v6(v40 + v7[6], v41 + v7[6], v5);
  v16(v40 + v7[7], v41 + v7[7], v14);
  v67(v40 + v7[8], v41 + v7[8], v66);
  v45 = v65[9];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v6(a1 + v45, a2 + v45, v5);
  v48 = v7[5];
  v49 = v46 + v48;
  v50 = v47 + v48;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
  *(_QWORD *)(v49 + 16) = *(_QWORD *)(v50 + 16);
  *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
  *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
  *(_QWORD *)(v49 + 40) = *(_QWORD *)(v50 + 40);
  *(_BYTE *)(v49 + 48) = *(_BYTE *)(v50 + 48);
  v6(v46 + v7[6], v47 + v7[6], v5);
  v16(v46 + v7[7], v47 + v7[7], v14);
  v67(v46 + v7[8], v47 + v7[8], v66);
  v6(v46 + *(int *)(v64 + 36), v47 + *(int *)(v64 + 36), v5);
  v16(v46 + *(int *)(v20 + 40), v47 + *(int *)(v20 + 40), v14);
  v51 = v65[10];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v6(a1 + v51, v63 + v51, v5);
  v54 = v7[5];
  v55 = v52 + v54;
  v56 = v53 + v54;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v55 + 16) = *(_QWORD *)(v56 + 16);
  *(_QWORD *)(v55 + 24) = *(_QWORD *)(v56 + 24);
  *(_QWORD *)(v55 + 32) = *(_QWORD *)(v56 + 32);
  *(_QWORD *)(v55 + 40) = *(_QWORD *)(v56 + 40);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v16(v52 + v7[7], v53 + v7[7], v14);
  v67(v52 + v7[8], v53 + v7[8], v66);
  v6(v52 + *(int *)(v20 + 36), v53 + *(int *)(v20 + 36), v5);
  v16(v52 + *(int *)(v20 + 40), v53 + *(int *)(v20 + 40), v14);
  v57 = *(int *)(a3 + 24);
  v58 = a1 + v57;
  v59 = v63 + v57;
  v60 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 24))(v58, v59, v60);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for BatchNorm();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v17 = v16;
  v18 = v7[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Dropout();
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v75 = v21;
  v74(v19, v20, v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(a1 + *(int *)(v22 + 36), a2 + *(int *)(v22 + 36), v5);
  v71 = a2;
  v17(a1 + *(int *)(v22 + 40), a2 + *(int *)(v22 + 40), v15);
  v72 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v23 = v72[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v6(a1 + v23, v25, v5);
  v26 = v7[5];
  v27 = v24 + v26;
  v28 = v25 + v26;
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(_BYTE *)(v27 + 48) = *(_BYTE *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v17(v24 + v7[7], v25 + v7[7], v15);
  v74(v24 + v7[8], v25 + v7[8], v75);
  v73 = v22;
  v6(v24 + *(int *)(v22 + 36), v25 + *(int *)(v22 + 36), v5);
  v17(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v15);
  v30 = v72[6];
  v31 = a1 + v30;
  v32 = v71 + v30;
  v6(a1 + v30, v71 + v30, v5);
  v33 = v7[5];
  v34 = v31 + v33;
  v35 = v32 + v33;
  v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_BYTE *)(v34 + 48) = *(_BYTE *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v17(v31 + v7[7], v32 + v7[7], v15);
  v74(v31 + v7[8], v32 + v7[8], v75);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v17(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v15);
  v37 = v72[7];
  v38 = a1 + v37;
  v39 = v71 + v37;
  v6(a1 + v37, v71 + v37, v5);
  v40 = v7[5];
  v41 = v38 + v40;
  v42 = v39 + v40;
  v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(_BYTE *)(v41 + 48) = *(_BYTE *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v17(v38 + v7[7], v39 + v7[7], v15);
  v74(v38 + v7[8], v39 + v7[8], v75);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v17(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v15);
  v44 = v72[8];
  v45 = a1 + v44;
  v46 = v71 + v44;
  v6(a1 + v44, v71 + v44, v5);
  v47 = v7[5];
  v48 = v45 + v47;
  v49 = v46 + v47;
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_BYTE *)(v48 + 48) = *(_BYTE *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v17(v45 + v7[7], v46 + v7[7], v15);
  v74(v45 + v7[8], v46 + v7[8], v75);
  v51 = v72[9];
  v52 = a1 + v51;
  v53 = v71 + v51;
  v6(a1 + v51, v71 + v51, v5);
  v54 = v7[5];
  v55 = v52 + v54;
  v56 = v53 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v17(v52 + v7[7], v53 + v7[7], v15);
  v74(v52 + v7[8], v53 + v7[8], v75);
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v17(v52 + *(int *)(v22 + 40), v53 + *(int *)(v22 + 40), v15);
  v58 = v72[10];
  v59 = a1 + v58;
  v60 = v71 + v58;
  v6(a1 + v58, v71 + v58, v5);
  v61 = v7[5];
  v62 = v59 + v61;
  v63 = v60 + v61;
  v64 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_OWORD *)(v62 + 16) = v64;
  *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
  *(_BYTE *)(v62 + 48) = *(_BYTE *)(v63 + 48);
  v6(v59 + v7[6], v60 + v7[6], v5);
  v17(v59 + v7[7], v60 + v7[7], v15);
  v74(v59 + v7[8], v60 + v7[8], v75);
  v6(v59 + *(int *)(v22 + 36), v60 + *(int *)(v22 + 36), v5);
  v17(v59 + *(int *)(v22 + 40), v60 + *(int *)(v22 + 40), v15);
  v65 = *(int *)(a3 + 24);
  v66 = a1 + v65;
  v67 = v71 + v65;
  v68 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.Torso(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for BatchNorm();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v17 = v16;
  v18 = v7[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Dropout();
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40);
  v75 = v21;
  v74(v19, v20, v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(a1 + *(int *)(v22 + 36), a2 + *(int *)(v22 + 36), v5);
  v71 = a2;
  v17(a1 + *(int *)(v22 + 40), a2 + *(int *)(v22 + 40), v15);
  v72 = (int *)type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
  v23 = v72[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v6(a1 + v23, v25, v5);
  v26 = v7[5];
  v27 = v24 + v26;
  v28 = v25 + v26;
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(_BYTE *)(v27 + 48) = *(_BYTE *)(v28 + 48);
  v6(v24 + v7[6], v25 + v7[6], v5);
  v17(v24 + v7[7], v25 + v7[7], v15);
  v74(v24 + v7[8], v25 + v7[8], v75);
  v73 = v22;
  v6(v24 + *(int *)(v22 + 36), v25 + *(int *)(v22 + 36), v5);
  v17(v24 + *(int *)(v22 + 40), v25 + *(int *)(v22 + 40), v15);
  v30 = v72[6];
  v31 = a1 + v30;
  v32 = v71 + v30;
  v6(a1 + v30, v71 + v30, v5);
  v33 = v7[5];
  v34 = v31 + v33;
  v35 = v32 + v33;
  v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_BYTE *)(v34 + 48) = *(_BYTE *)(v35 + 48);
  v6(v31 + v7[6], v32 + v7[6], v5);
  v17(v31 + v7[7], v32 + v7[7], v15);
  v74(v31 + v7[8], v32 + v7[8], v75);
  v6(v31 + *(int *)(v73 + 36), v32 + *(int *)(v73 + 36), v5);
  v17(v31 + *(int *)(v73 + 40), v32 + *(int *)(v73 + 40), v15);
  v37 = v72[7];
  v38 = a1 + v37;
  v39 = v71 + v37;
  v6(a1 + v37, v71 + v37, v5);
  v40 = v7[5];
  v41 = v38 + v40;
  v42 = v39 + v40;
  v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(_BYTE *)(v41 + 48) = *(_BYTE *)(v42 + 48);
  v6(v38 + v7[6], v39 + v7[6], v5);
  v17(v38 + v7[7], v39 + v7[7], v15);
  v74(v38 + v7[8], v39 + v7[8], v75);
  v6(v38 + *(int *)(v73 + 36), v39 + *(int *)(v73 + 36), v5);
  v17(v38 + *(int *)(v73 + 40), v39 + *(int *)(v73 + 40), v15);
  v44 = v72[8];
  v45 = a1 + v44;
  v46 = v71 + v44;
  v6(a1 + v44, v71 + v44, v5);
  v47 = v7[5];
  v48 = v45 + v47;
  v49 = v46 + v47;
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_BYTE *)(v48 + 48) = *(_BYTE *)(v49 + 48);
  v6(v45 + v7[6], v46 + v7[6], v5);
  v17(v45 + v7[7], v46 + v7[7], v15);
  v74(v45 + v7[8], v46 + v7[8], v75);
  v51 = v72[9];
  v52 = a1 + v51;
  v53 = v71 + v51;
  v6(a1 + v51, v71 + v51, v5);
  v54 = v7[5];
  v55 = v52 + v54;
  v56 = v53 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v6(v52 + v7[6], v53 + v7[6], v5);
  v17(v52 + v7[7], v53 + v7[7], v15);
  v74(v52 + v7[8], v53 + v7[8], v75);
  v6(v52 + *(int *)(v73 + 36), v53 + *(int *)(v73 + 36), v5);
  v17(v52 + *(int *)(v22 + 40), v53 + *(int *)(v22 + 40), v15);
  v58 = v72[10];
  v59 = a1 + v58;
  v60 = v71 + v58;
  v6(a1 + v58, v71 + v58, v5);
  v61 = v7[5];
  v62 = v59 + v61;
  v63 = v60 + v61;
  v64 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_OWORD *)(v62 + 16) = v64;
  *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
  *(_BYTE *)(v62 + 48) = *(_BYTE *)(v63 + 48);
  v6(v59 + v7[6], v60 + v7[6], v5);
  v17(v59 + v7[7], v60 + v7[7], v15);
  v74(v59 + v7[8], v60 + v7[8], v75);
  v6(v59 + *(int *)(v22 + 36), v60 + *(int *)(v22 + 36), v5);
  v17(v59 + *(int *)(v22 + 40), v60 + *(int *)(v22 + 40), v15);
  v65 = *(int *)(a3 + 24);
  v66 = a1 + v65;
  v67 = v71 + v65;
  v68 = type metadata accessor for Dense();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.Torso()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF087F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = OUTLINED_FUNCTION_37_16();
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(v3);
  OUTLINED_FUNCTION_14_8();
  if (v4)
  {
    v6 = OUTLINED_FUNCTION_95_7();
  }
  else
  {
    v5 = OUTLINED_FUNCTION_36_23();
    v6 = v1 + *(int *)(v2 + 24);
  }
  return OUTLINED_FUNCTION_51_3(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.Torso()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF08840()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = OUTLINED_FUNCTION_17_25();
  type metadata accessor for MLHandActionClassifier.SingleStreamBlock(v0);
  OUTLINED_FUNCTION_13_11();
  if (v1)
    OUTLINED_FUNCTION_68_14();
  else
    OUTLINED_FUNCTION_36_23();
  OUTLINED_FUNCTION_89_7();
  return OUTLINED_FUNCTION_16_6(v2, v3, v4, v5);
}

uint64_t type metadata completion function for MLHandActionClassifier.Torso()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLHandActionClassifier.SingleStreamBlock(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Dense();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.SingleStreamBlock(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v76;
  int *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v74 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v66 = (char *)(v74 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Conv2D();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
    v10 = a2;
    v11 = (int *)v9;
    v12 = *(int *)(v9 + 20);
    v13 = &a1[v12];
    v14 = &v10[v12];
    v15 = v10;
    v16 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v16;
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    v13[48] = v14[48];
    v8(&a1[*(int *)(v9 + 24)], &v10[*(int *)(v9 + 24)], v7);
    v17 = v11[7];
    v18 = &a1[v17];
    v19 = &v15[v17];
    v76 = type metadata accessor for BatchNorm();
    v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
    v20(v18, (uint64_t)v19, v76);
    v21 = (void (*)(char *, char *, uint64_t))v20;
    v22 = v11[8];
    v23 = &a1[v22];
    v24 = &v15[v22];
    v80 = v15;
    v25 = type metadata accessor for Dropout();
    v81 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v82 = v25;
    v81(v23, (uint64_t)v24, v25);
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v8(&a1[*(int *)(v79 + 36)], &v15[*(int *)(v79 + 36)], v7);
    v21(&a1[*(int *)(v79 + 40)], &v15[*(int *)(v79 + 40)], v76);
    v26 = a3[5];
    v27 = &a1[v26];
    v77 = a3;
    v28 = &v15[v26];
    v8(&a1[v26], &v15[v26], v7);
    v29 = v11[5];
    v30 = &v27[v29];
    v31 = &v28[v29];
    v32 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v32;
    *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
    v30[48] = v31[48];
    v8(&v27[v11[6]], &v28[v11[6]], v7);
    v21(&v27[v11[7]], &v28[v11[7]], v76);
    v81(&v27[v11[8]], (uint64_t)&v28[v11[8]], v82);
    v8(&v27[*(int *)(v79 + 36)], &v28[*(int *)(v79 + 36)], v7);
    v21(&v27[*(int *)(v79 + 40)], &v28[*(int *)(v79 + 40)], v76);
    v33 = v77[6];
    v34 = &a1[v33];
    v35 = &v15[v33];
    v8(&a1[v33], &v15[v33], v7);
    v36 = v8;
    v37 = v11[5];
    v38 = &v34[v37];
    v39 = &v35[v37];
    v40 = *((_OWORD *)v39 + 1);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v40;
    *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
    v38[48] = v39[48];
    v8(&v34[v11[6]], &v35[v11[6]], v7);
    v21(&v34[v11[7]], &v35[v11[7]], v76);
    v81(&v34[v11[8]], (uint64_t)&v35[v11[8]], v82);
    v8(&v34[*(int *)(v79 + 36)], &v35[*(int *)(v79 + 36)], v7);
    v21(&v34[*(int *)(v79 + 40)], &v35[*(int *)(v79 + 40)], v76);
    v41 = v77[7];
    v42 = &a1[v41];
    v43 = &v80[v41];
    v44 = v7;
    v36(&a1[v41], &v80[v41], v7);
    v45 = v11[5];
    v46 = &v42[v45];
    v47 = &v43[v45];
    v48 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v48;
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    v46[48] = v47[48];
    v36(&v42[v11[6]], &v43[v11[6]], v7);
    v21(&v42[v11[7]], &v43[v11[7]], v76);
    v78 = a1;
    v81(&v42[v11[8]], (uint64_t)&v43[v11[8]], v82);
    v36(&v42[*(int *)(v79 + 36)], &v43[*(int *)(v79 + 36)], v7);
    v21(&v42[*(int *)(v79 + 40)], &v43[*(int *)(v79 + 40)], v76);
    v49 = v77[8];
    v50 = &a1[v49];
    v51 = &v80[v49];
    v36(&a1[v49], &v80[v49], v7);
    v52 = v11[5];
    v53 = &v50[v52];
    v54 = &v51[v52];
    v55 = *((_OWORD *)v54 + 1);
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *((_OWORD *)v53 + 1) = v55;
    *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
    v53[48] = v54[48];
    v36(&v50[v11[6]], &v51[v11[6]], v7);
    v21(&v50[v11[7]], &v51[v11[7]], v76);
    v81(&v50[v11[8]], (uint64_t)&v51[v11[8]], v82);
    v56 = v77[9];
    v57 = &a1[v56];
    v58 = &v80[v56];
    v59 = v36;
    v36(&v78[v56], &v80[v56], v7);
    v60 = v11[5];
    v61 = &v57[v60];
    v62 = &v58[v60];
    v63 = *((_OWORD *)v62 + 1);
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *((_OWORD *)v61 + 1) = v63;
    *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
    v61[48] = v62[48];
    v36(&v57[v11[6]], &v58[v11[6]], v7);
    v64 = (void (*)(char *, uint64_t, uint64_t))v21;
    v21(&v57[v11[7]], &v58[v11[7]], v76);
    v81(&v57[v11[8]], (uint64_t)&v58[v11[8]], v82);
    v65 = v79;
    v36(&v57[*(int *)(v79 + 36)], &v58[*(int *)(v79 + 36)], v44);
    v66 = v78;
    v64(&v57[*(int *)(v79 + 40)], (uint64_t)&v58[*(int *)(v79 + 40)], v76);
    v67 = v77[10];
    v68 = &v78[v67];
    v69 = &v80[v67];
    v59(&v78[v67], &v80[v67], v44);
    v70 = v11[5];
    v71 = &v68[v70];
    v72 = &v69[v70];
    v73 = *((_OWORD *)v72 + 1);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v73;
    *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
    v71[48] = v72[48];
    v59(&v68[v11[6]], &v69[v11[6]], v44);
    v64(&v68[v11[7]], (uint64_t)&v69[v11[7]], v76);
    v81(&v68[v11[8]], (uint64_t)&v69[v11[8]], v82);
    v59(&v68[*(int *)(v65 + 36)], &v69[*(int *)(v65 + 36)], v44);
    v64(&v68[*(int *)(v65 + 40)], (uint64_t)&v69[*(int *)(v65 + 40)], v76);
  }
  return v66;
}

uint64_t destroy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t);

  v4 = type metadata accessor for Conv2D();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v5(a1 + v6[6], v4);
  v7 = a1 + v6[7];
  v8 = type metadata accessor for BatchNorm();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v20(v7, v8);
  v9 = a1 + v6[8];
  v10 = type metadata accessor for Dropout();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v5(a1 + *(int *)(v12 + 36), v4);
  v20(a1 + *(int *)(v12 + 40), v8);
  v13 = a1 + a2[5];
  v5(v13, v4);
  v5(v13 + v6[6], v4);
  v20(v13 + v6[7], v8);
  v11(v13 + v6[8], v10);
  v5(v13 + *(int *)(v12 + 36), v4);
  v20(v13 + *(int *)(v12 + 40), v8);
  v14 = a1 + a2[6];
  v5(v14, v4);
  v5(v14 + v6[6], v4);
  v20(v14 + v6[7], v8);
  v11(v14 + v6[8], v10);
  v5(v14 + *(int *)(v12 + 36), v4);
  v20(v14 + *(int *)(v12 + 40), v8);
  v15 = a1 + a2[7];
  v5(v15, v4);
  v5(v15 + v6[6], v4);
  v20(v15 + v6[7], v8);
  v11(v15 + v6[8], v10);
  v5(v15 + *(int *)(v12 + 36), v4);
  v20(v15 + *(int *)(v12 + 40), v8);
  v16 = a1 + a2[8];
  v5(v16, v4);
  v5(v16 + v6[6], v4);
  v20(v16 + v6[7], v8);
  v11(v16 + v6[8], v10);
  v17 = a1 + a2[9];
  v5(v17, v4);
  v5(v17 + v6[6], v4);
  v20(v17 + v6[7], v8);
  v11(v17 + v6[8], v10);
  v5(v17 + *(int *)(v12 + 36), v4);
  v20(v17 + *(int *)(v12 + 40), v8);
  v18 = a1 + a2[10];
  v5(v18, v4);
  v5(v18 + v6[6], v4);
  v20(v18 + v6[7], v8);
  v11(v18 + v6[8], v10);
  v5(v18 + *(int *)(v12 + 36), v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v20)(v18 + *(int *)(v12 + 40), v8);
}

uint64_t initializeWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v73)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a1;
  v15 = a2 + v12;
  v16 = type metadata accessor for BatchNorm();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v13, v15, v16);
  v18 = v17;
  v19 = v7[8];
  v20 = v14 + v19;
  v21 = a2 + v19;
  v71 = type metadata accessor for Dropout();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
  v73(v20, v21, v71);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v14 + *(int *)(v70 + 36), a2 + *(int *)(v70 + 36), v5);
  v18(v14 + *(int *)(v70 + 40), a2 + *(int *)(v70 + 40), v16);
  v22 = v18;
  v23 = a3[5];
  v24 = v14 + v23;
  v25 = v14;
  v69 = v14;
  v26 = a2 + v23;
  v6(v24, a2 + v23, v5);
  v27 = v7[5];
  v28 = v24 + v27;
  v29 = v26 + v27;
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
  *(_BYTE *)(v28 + 48) = *(_BYTE *)(v29 + 48);
  v6(v24 + v7[6], v26 + v7[6], v5);
  v22(v24 + v7[7], v26 + v7[7], v16);
  v73(v24 + v7[8], v26 + v7[8], v71);
  v6(v24 + *(int *)(v70 + 36), v26 + *(int *)(v70 + 36), v5);
  v22(v24 + *(int *)(v70 + 40), v26 + *(int *)(v70 + 40), v16);
  v31 = a3[6];
  v32 = v25 + v31;
  v33 = a2 + v31;
  v6(v25 + v31, a2 + v31, v5);
  v34 = v7[5];
  v35 = v32 + v34;
  v36 = v33 + v34;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_BYTE *)(v35 + 48) = *(_BYTE *)(v36 + 48);
  v6(v32 + v7[6], v33 + v7[6], v5);
  v22(v32 + v7[7], v33 + v7[7], v16);
  v73(v32 + v7[8], v33 + v7[8], v71);
  v6(v32 + *(int *)(v70 + 36), v33 + *(int *)(v70 + 36), v5);
  v22(v32 + *(int *)(v70 + 40), v33 + *(int *)(v70 + 40), v16);
  v38 = a3[7];
  v39 = v69 + v38;
  v40 = a2 + v38;
  v6(v69 + v38, a2 + v38, v5);
  v41 = v7[5];
  v42 = v39 + v41;
  v43 = v40 + v41;
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_BYTE *)(v42 + 48) = *(_BYTE *)(v43 + 48);
  v6(v39 + v7[6], v40 + v7[6], v5);
  v22(v39 + v7[7], v40 + v7[7], v16);
  v73(v39 + v7[8], v40 + v7[8], v71);
  v6(v39 + *(int *)(v70 + 36), v40 + *(int *)(v70 + 36), v5);
  v22(v39 + *(int *)(v70 + 40), v40 + *(int *)(v70 + 40), v16);
  v68 = v22;
  v45 = a3[8];
  v46 = v69 + v45;
  v47 = a2 + v45;
  v6(v69 + v45, a2 + v45, v5);
  v48 = v7[5];
  v49 = v46 + v48;
  v50 = v47 + v48;
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(v50 + 32);
  *(_BYTE *)(v49 + 48) = *(_BYTE *)(v50 + 48);
  v6(v46 + v7[6], v47 + v7[6], v5);
  v22(v46 + v7[7], v47 + v7[7], v16);
  v73(v46 + v7[8], v47 + v7[8], v71);
  v52 = a3[9];
  v53 = v69 + v52;
  v54 = a2 + v52;
  v6(v69 + v52, a2 + v52, v5);
  v55 = v7[5];
  v56 = v53 + v55;
  v57 = v54 + v55;
  v58 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v58;
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
  *(_BYTE *)(v56 + 48) = *(_BYTE *)(v57 + 48);
  v6(v53 + v7[6], v54 + v7[6], v5);
  v22(v53 + v7[7], v54 + v7[7], v16);
  v73(v53 + v7[8], v54 + v7[8], v71);
  v59 = v70;
  v6(v53 + *(int *)(v70 + 36), v54 + *(int *)(v70 + 36), v5);
  v68(v53 + *(int *)(v59 + 40), v54 + *(int *)(v59 + 40), v16);
  v60 = a3[10];
  v61 = v69 + v60;
  v62 = a2 + v60;
  v6(v69 + v60, v62, v5);
  v63 = v7[5];
  v64 = v61 + v63;
  v65 = v62 + v63;
  v66 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v66;
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_BYTE *)(v64 + 48) = *(_BYTE *)(v65 + 48);
  v6(v61 + v7[6], v62 + v7[6], v5);
  v68(v61 + v7[7], v62 + v7[7], v16);
  v73(v61 + v7[8], v62 + v7[8], v71);
  v6(v61 + *(int *)(v59 + 36), v62 + *(int *)(v59 + 36), v5);
  v68(v61 + *(int *)(v59 + 40), v62 + *(int *)(v59 + 40), v16);
  return v69;
}

uint64_t assignWithCopy for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a1;
  v60 = a1;
  v14 = a2 + v11;
  v15 = type metadata accessor for BatchNorm();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v17 = v15;
  v16(v12, v14);
  v18 = (void (*)(uint64_t, uint64_t, uint64_t))v16;
  v19 = v7[8];
  v20 = v13 + v19;
  v21 = a2 + v19;
  v61 = type metadata accessor for Dropout();
  v62 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 24);
  v62(v20, v21);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v13 + *(int *)(v63 + 36), a2 + *(int *)(v63 + 36), v5);
  v18(v13 + *(int *)(v63 + 40), a2 + *(int *)(v63 + 40), v17);
  v22 = a3[5];
  v23 = v13 + v22;
  v24 = a2 + v22;
  v6(v23, a2 + v22, v5);
  v25 = v7[5];
  v26 = v23 + v25;
  v27 = v24 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  *(_QWORD *)(v26 + 40) = *(_QWORD *)(v27 + 40);
  *(_BYTE *)(v26 + 48) = *(_BYTE *)(v27 + 48);
  v6(v23 + v7[6], v24 + v7[6], v5);
  v18(v23 + v7[7], v24 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v23 + v7[8], v24 + v7[8], v61);
  v6(v23 + *(int *)(v63 + 36), v24 + *(int *)(v63 + 36), v5);
  v18(v23 + *(int *)(v63 + 40), v24 + *(int *)(v63 + 40), v17);
  v28 = a3[6];
  v29 = v60 + v28;
  v30 = a2 + v28;
  v6(v60 + v28, a2 + v28, v5);
  v31 = v7[5];
  v32 = v29 + v31;
  v33 = v30 + v31;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v32 + 24) = *(_QWORD *)(v33 + 24);
  *(_QWORD *)(v32 + 32) = *(_QWORD *)(v33 + 32);
  *(_QWORD *)(v32 + 40) = *(_QWORD *)(v33 + 40);
  *(_BYTE *)(v32 + 48) = *(_BYTE *)(v33 + 48);
  v6(v29 + v7[6], v30 + v7[6], v5);
  v18(v29 + v7[7], v30 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v29 + v7[8], v30 + v7[8], v61);
  v6(v29 + *(int *)(v63 + 36), v30 + *(int *)(v63 + 36), v5);
  v18(v29 + *(int *)(v63 + 40), v30 + *(int *)(v63 + 40), v17);
  v34 = a3[7];
  v35 = v60 + v34;
  v36 = a2 + v34;
  v6(v60 + v34, a2 + v34, v5);
  v37 = v7[5];
  v38 = v35 + v37;
  v39 = v36 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_QWORD *)(v38 + 8) = *(_QWORD *)(v39 + 8);
  *(_QWORD *)(v38 + 16) = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(v38 + 24) = *(_QWORD *)(v39 + 24);
  *(_QWORD *)(v38 + 32) = *(_QWORD *)(v39 + 32);
  *(_QWORD *)(v38 + 40) = *(_QWORD *)(v39 + 40);
  *(_BYTE *)(v38 + 48) = *(_BYTE *)(v39 + 48);
  v6(v35 + v7[6], v36 + v7[6], v5);
  v18(v35 + v7[7], v36 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v35 + v7[8], v36 + v7[8], v61);
  v6(v35 + *(int *)(v63 + 36), v36 + *(int *)(v63 + 36), v5);
  v18(v35 + *(int *)(v63 + 40), v36 + *(int *)(v63 + 40), v17);
  v40 = a3[8];
  v41 = v60 + v40;
  v42 = a2 + v40;
  v6(v60 + v40, a2 + v40, v5);
  v43 = v7[5];
  v44 = v41 + v43;
  v45 = v42 + v43;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
  *(_QWORD *)(v44 + 16) = *(_QWORD *)(v45 + 16);
  *(_QWORD *)(v44 + 24) = *(_QWORD *)(v45 + 24);
  *(_QWORD *)(v44 + 32) = *(_QWORD *)(v45 + 32);
  *(_QWORD *)(v44 + 40) = *(_QWORD *)(v45 + 40);
  *(_BYTE *)(v44 + 48) = *(_BYTE *)(v45 + 48);
  v6(v41 + v7[6], v42 + v7[6], v5);
  v18(v41 + v7[7], v42 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v41 + v7[8], v42 + v7[8], v61);
  v46 = a3[9];
  v47 = v60 + v46;
  v48 = a2 + v46;
  v6(v60 + v46, a2 + v46, v5);
  v49 = v7[5];
  v50 = v47 + v49;
  v51 = v48 + v49;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
  *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);
  *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
  *(_QWORD *)(v50 + 40) = *(_QWORD *)(v51 + 40);
  *(_BYTE *)(v50 + 48) = *(_BYTE *)(v51 + 48);
  v6(v47 + v7[6], v48 + v7[6], v5);
  v18(v47 + v7[7], v48 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v47 + v7[8], v48 + v7[8], v61);
  v52 = v63;
  v6(v47 + *(int *)(v63 + 36), v48 + *(int *)(v63 + 36), v5);
  v18(v47 + *(int *)(v52 + 40), v48 + *(int *)(v52 + 40), v17);
  v53 = a3[10];
  v54 = v60 + v53;
  v55 = a2 + v53;
  v6(v60 + v53, v55, v5);
  v56 = v7[5];
  v57 = v54 + v56;
  v58 = v55 + v56;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_QWORD *)(v57 + 8) = *(_QWORD *)(v58 + 8);
  *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
  *(_QWORD *)(v57 + 24) = *(_QWORD *)(v58 + 24);
  *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
  *(_QWORD *)(v57 + 40) = *(_QWORD *)(v58 + 40);
  *(_BYTE *)(v57 + 48) = *(_BYTE *)(v58 + 48);
  v6(v54 + v7[6], v55 + v7[6], v5);
  v18(v54 + v7[7], v55 + v7[7], v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v54 + v7[8], v55 + v7[8], v61);
  v6(v54 + *(int *)(v52 + 36), v55 + *(int *)(v52 + 36), v5);
  v18(v54 + *(int *)(v52 + 40), v55 + *(int *)(v52 + 40), v17);
  return v60;
}

uint64_t initializeWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v73)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a1;
  v15 = a2 + v12;
  v16 = type metadata accessor for BatchNorm();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v13, v15, v16);
  v18 = v17;
  v19 = v7[8];
  v20 = v14 + v19;
  v21 = a2 + v19;
  v71 = type metadata accessor for Dropout();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 32);
  v73(v20, v21, v71);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v14 + *(int *)(v70 + 36), a2 + *(int *)(v70 + 36), v5);
  v18(v14 + *(int *)(v70 + 40), a2 + *(int *)(v70 + 40), v16);
  v22 = v18;
  v23 = a3[5];
  v24 = v14 + v23;
  v25 = v14;
  v69 = v14;
  v26 = a2 + v23;
  v6(v24, a2 + v23, v5);
  v27 = v7[5];
  v28 = v24 + v27;
  v29 = v26 + v27;
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
  *(_BYTE *)(v28 + 48) = *(_BYTE *)(v29 + 48);
  v6(v24 + v7[6], v26 + v7[6], v5);
  v22(v24 + v7[7], v26 + v7[7], v16);
  v73(v24 + v7[8], v26 + v7[8], v71);
  v6(v24 + *(int *)(v70 + 36), v26 + *(int *)(v70 + 36), v5);
  v22(v24 + *(int *)(v70 + 40), v26 + *(int *)(v70 + 40), v16);
  v31 = a3[6];
  v32 = v25 + v31;
  v33 = a2 + v31;
  v6(v25 + v31, a2 + v31, v5);
  v34 = v7[5];
  v35 = v32 + v34;
  v36 = v33 + v34;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_BYTE *)(v35 + 48) = *(_BYTE *)(v36 + 48);
  v6(v32 + v7[6], v33 + v7[6], v5);
  v22(v32 + v7[7], v33 + v7[7], v16);
  v73(v32 + v7[8], v33 + v7[8], v71);
  v6(v32 + *(int *)(v70 + 36), v33 + *(int *)(v70 + 36), v5);
  v22(v32 + *(int *)(v70 + 40), v33 + *(int *)(v70 + 40), v16);
  v38 = a3[7];
  v39 = v69 + v38;
  v40 = a2 + v38;
  v6(v69 + v38, a2 + v38, v5);
  v41 = v7[5];
  v42 = v39 + v41;
  v43 = v40 + v41;
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_BYTE *)(v42 + 48) = *(_BYTE *)(v43 + 48);
  v6(v39 + v7[6], v40 + v7[6], v5);
  v22(v39 + v7[7], v40 + v7[7], v16);
  v73(v39 + v7[8], v40 + v7[8], v71);
  v6(v39 + *(int *)(v70 + 36), v40 + *(int *)(v70 + 36), v5);
  v22(v39 + *(int *)(v70 + 40), v40 + *(int *)(v70 + 40), v16);
  v68 = v22;
  v45 = a3[8];
  v46 = v69 + v45;
  v47 = a2 + v45;
  v6(v69 + v45, a2 + v45, v5);
  v48 = v7[5];
  v49 = v46 + v48;
  v50 = v47 + v48;
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(v50 + 32);
  *(_BYTE *)(v49 + 48) = *(_BYTE *)(v50 + 48);
  v6(v46 + v7[6], v47 + v7[6], v5);
  v22(v46 + v7[7], v47 + v7[7], v16);
  v73(v46 + v7[8], v47 + v7[8], v71);
  v52 = a3[9];
  v53 = v69 + v52;
  v54 = a2 + v52;
  v6(v69 + v52, a2 + v52, v5);
  v55 = v7[5];
  v56 = v53 + v55;
  v57 = v54 + v55;
  v58 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v58;
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
  *(_BYTE *)(v56 + 48) = *(_BYTE *)(v57 + 48);
  v6(v53 + v7[6], v54 + v7[6], v5);
  v22(v53 + v7[7], v54 + v7[7], v16);
  v73(v53 + v7[8], v54 + v7[8], v71);
  v59 = v70;
  v6(v53 + *(int *)(v70 + 36), v54 + *(int *)(v70 + 36), v5);
  v68(v53 + *(int *)(v59 + 40), v54 + *(int *)(v59 + 40), v16);
  v60 = a3[10];
  v61 = v69 + v60;
  v62 = a2 + v60;
  v6(v69 + v60, v62, v5);
  v63 = v7[5];
  v64 = v61 + v63;
  v65 = v62 + v63;
  v66 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v66;
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_BYTE *)(v64 + 48) = *(_BYTE *)(v65 + 48);
  v6(v61 + v7[6], v62 + v7[6], v5);
  v68(v61 + v7[7], v62 + v7[7], v16);
  v73(v61 + v7[8], v62 + v7[8], v71);
  v6(v61 + *(int *)(v59 + 36), v62 + *(int *)(v59 + 36), v5);
  v68(v61 + *(int *)(v59 + 40), v62 + *(int *)(v59 + 40), v16);
  return v69;
}

uint64_t assignWithTake for MLHandActionClassifier.SingleStreamBlock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v73)(uint64_t, uint64_t, uint64_t);

  v5 = type metadata accessor for Conv2D();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v6(a1 + v7[6], a2 + v7[6], v5);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a1;
  v15 = a2 + v12;
  v16 = type metadata accessor for BatchNorm();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v13, v15, v16);
  v18 = v17;
  v19 = v7[8];
  v20 = v14 + v19;
  v21 = a2 + v19;
  v71 = type metadata accessor for Dropout();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
  v73(v20, v21, v71);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v6(v14 + *(int *)(v70 + 36), a2 + *(int *)(v70 + 36), v5);
  v18(v14 + *(int *)(v70 + 40), a2 + *(int *)(v70 + 40), v16);
  v22 = v18;
  v23 = a3[5];
  v24 = v14 + v23;
  v25 = v14;
  v69 = v14;
  v26 = a2 + v23;
  v6(v24, a2 + v23, v5);
  v27 = v7[5];
  v28 = v24 + v27;
  v29 = v26 + v27;
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
  *(_BYTE *)(v28 + 48) = *(_BYTE *)(v29 + 48);
  v6(v24 + v7[6], v26 + v7[6], v5);
  v22(v24 + v7[7], v26 + v7[7], v16);
  v73(v24 + v7[8], v26 + v7[8], v71);
  v6(v24 + *(int *)(v70 + 36), v26 + *(int *)(v70 + 36), v5);
  v22(v24 + *(int *)(v70 + 40), v26 + *(int *)(v70 + 40), v16);
  v31 = a3[6];
  v32 = v25 + v31;
  v33 = a2 + v31;
  v6(v25 + v31, a2 + v31, v5);
  v34 = v7[5];
  v35 = v32 + v34;
  v36 = v33 + v34;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_BYTE *)(v35 + 48) = *(_BYTE *)(v36 + 48);
  v6(v32 + v7[6], v33 + v7[6], v5);
  v22(v32 + v7[7], v33 + v7[7], v16);
  v73(v32 + v7[8], v33 + v7[8], v71);
  v6(v32 + *(int *)(v70 + 36), v33 + *(int *)(v70 + 36), v5);
  v22(v32 + *(int *)(v70 + 40), v33 + *(int *)(v70 + 40), v16);
  v38 = a3[7];
  v39 = v69 + v38;
  v40 = a2 + v38;
  v6(v69 + v38, a2 + v38, v5);
  v41 = v7[5];
  v42 = v39 + v41;
  v43 = v40 + v41;
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_BYTE *)(v42 + 48) = *(_BYTE *)(v43 + 48);
  v6(v39 + v7[6], v40 + v7[6], v5);
  v22(v39 + v7[7], v40 + v7[7], v16);
  v73(v39 + v7[8], v40 + v7[8], v71);
  v6(v39 + *(int *)(v70 + 36), v40 + *(int *)(v70 + 36), v5);
  v22(v39 + *(int *)(v70 + 40), v40 + *(int *)(v70 + 40), v16);
  v68 = v22;
  v45 = a3[8];
  v46 = v69 + v45;
  v47 = a2 + v45;
  v6(v69 + v45, a2 + v45, v5);
  v48 = v7[5];
  v49 = v46 + v48;
  v50 = v47 + v48;
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(v50 + 32);
  *(_BYTE *)(v49 + 48) = *(_BYTE *)(v50 + 48);
  v6(v46 + v7[6], v47 + v7[6], v5);
  v22(v46 + v7[7], v47 + v7[7], v16);
  v73(v46 + v7[8], v47 + v7[8], v71);
  v52 = a3[9];
  v53 = v69 + v52;
  v54 = a2 + v52;
  v6(v69 + v52, a2 + v52, v5);
  v55 = v7[5];
  v56 = v53 + v55;
  v57 = v54 + v55;
  v58 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v58;
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
  *(_BYTE *)(v56 + 48) = *(_BYTE *)(v57 + 48);
  v6(v53 + v7[6], v54 + v7[6], v5);
  v22(v53 + v7[7], v54 + v7[7], v16);
  v73(v53 + v7[8], v54 + v7[8], v71);
  v59 = v70;
  v6(v53 + *(int *)(v70 + 36), v54 + *(int *)(v70 + 36), v5);
  v68(v53 + *(int *)(v59 + 40), v54 + *(int *)(v59 + 40), v16);
  v60 = a3[10];
  v61 = v69 + v60;
  v62 = a2 + v60;
  v6(v69 + v60, v62, v5);
  v63 = v7[5];
  v64 = v61 + v63;
  v65 = v62 + v63;
  v66 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v66;
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_BYTE *)(v64 + 48) = *(_BYTE *)(v65 + 48);
  v6(v61 + v7[6], v62 + v7[6], v5);
  v68(v61 + v7[7], v62 + v7[7], v16);
  v73(v61 + v7[8], v62 + v7[8], v71);
  v6(v61 + *(int *)(v59 + 36), v62 + *(int *)(v59 + 36), v5);
  v68(v61 + *(int *)(v59 + 40), v62 + *(int *)(v59 + 40), v16);
  return v69;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF0A930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_14_8();
  if (v6)
  {
    v8 = OUTLINED_FUNCTION_95_7();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
    v8 = a1 + *(int *)(a3 + 32);
  }
  return OUTLINED_FUNCTION_51_3(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.SingleStreamBlock()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF0A998()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_13_11();
  if (v0)
    OUTLINED_FUNCTION_68_14();
  else
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_89_7();
  return OUTLINED_FUNCTION_16_6(v1, v2, v3, v4);
}

void type metadata completion function for MLHandActionClassifier.SingleStreamBlock()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLHandActionClassifier.InvertedResidual(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>)
  {
    v2 = type metadata accessor for MLHandActionClassifier.InvertedResidual(255);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
    v5 = type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  }
}

uint64_t type metadata accessor for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHandActionClassifier.DownsampledResidualLayer);
}

uint64_t type metadata completion function for MLHandActionClassifier.ResidualLayer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_18;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return __swift_getEnumTagSinglePayload(a1, v6, v4);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return (v6 + v12 + 1);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21AF0AD64 + 4 * byte_21AFED240[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for MLHandActionClassifier.ResidualLayer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v8 <= 3)
    {
      v14 = ((v11 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v15 = v13 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for MLHandActionClassifier.ResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHandActionClassifier.ResidualLayer);
}

uint64_t type metadata completion function for MLHandActionClassifier.DownsampledResidualLayer()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Conv2D();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for BatchNorm();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.DownsampledResidualLayer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v26 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v27 = type metadata accessor for Conv2D();
  v6 = *(_QWORD *)(v27 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v5 + v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for BatchNorm();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12;
  v14 = ((v9 + v12 + (v8 & ~(unint64_t)v7)) & ~(unint64_t)v12)
      + *(_QWORD *)(v11 + 64);
  v15 = v7 | v12 | *(_DWORD *)(v4 + 80);
  v16 = (v7 | v12 | *(_BYTE *)(v4 + 80));
  v17 = v15 & 0x100000;
  if (v16 <= 7 && v14 <= 0x18 && v17 == 0)
  {
    v21 = ~(unint64_t)v7;
    v25 = v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v26);
    v22 = ((unint64_t)a1 + v8) & v21;
    v23 = ((unint64_t)a2 + v8) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v22, v23, v27);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v22 + v9 + v13) & ~v13, (v23 + v9 + v13) & ~v13, v25);
  }
  else
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for Conv2D();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for BatchNorm();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))((v7 + v8 + *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80), v9);
}

uint64_t initializeWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Conv2D();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = type metadata accessor for BatchNorm();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), v14);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Conv2D();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = type metadata accessor for BatchNorm();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), v14);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Conv2D();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = type metadata accessor for BatchNorm();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), v14);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Conv2D();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = type metadata accessor for BatchNorm();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for Conv2D();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = type metadata accessor for BatchNorm();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = *(_DWORD *)(v13 + 84);
  if (!a2)
    return 0;
  v16 = v12;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = *(_QWORD *)(v6 + 64) + v17;
  v19 = *(_QWORD *)(v9 + 64);
  v20 = *(unsigned __int8 *)(v13 + 80);
  if (a2 <= v15)
    goto LABEL_26;
  v21 = ((v19 + v20 + (v18 & ~v17)) & ~v20) + *(_QWORD *)(v13 + 64);
  v22 = 8 * v21;
  if (v21 <= 3)
  {
    v24 = ((a2 - v15 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v24 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v24 < 2)
    {
LABEL_26:
      if (v15)
      {
        if ((_DWORD)v7 == v15)
          return __swift_getEnumTagSinglePayload(a1, v7, v5);
        v27 = (v18 + a1) & ~v17;
        if ((_DWORD)v10 == v15)
        {
          v14 = v10;
          v16 = v8;
        }
        else
        {
          v27 = (v27 + v19 + v20) & ~v20;
        }
        return __swift_getEnumTagSinglePayload(v27, v14, v16);
      }
      return 0;
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_26;
LABEL_17:
  v25 = (v23 - 1) << v22;
  if (v21 > 3)
    v25 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v26 = v21;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  return v15 + v25 + 1;
}

void storeEnumTagSinglePayload for MLHandActionClassifier.DownsampledResidualLayer(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Conv2D() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(type metadata accessor for BatchNorm() - 8);
  if (*(_DWORD *)(v11 + 84) <= v10)
    v12 = v10;
  else
    v12 = *(_DWORD *)(v11 + 84);
  v13 = ((*(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v11 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(_QWORD *)(v11 + 64);
  v14 = 8 * v13;
  if (a3 <= v12)
  {
    v15 = 0;
  }
  else if (v13 <= 3)
  {
    v17 = ((a3 - v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v12 < a2)
  {
    v16 = ~v12 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v18 = v16 & ~(-1 << v14);
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.InvertedResidual(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Conv2D();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v13 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
    v11[48] = v12[48];
    v8((uint64_t *)((char *)a1 + v10), (uint64_t *)((char *)a2 + v10), v7);
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BatchNorm();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[8];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Dropout();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.InvertedResidual(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Conv2D();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[6], v4);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Dropout();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Conv2D();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Conv2D();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Conv2D();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for MLHandActionClassifier.InvertedResidual(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Conv2D();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
  v7(a1 + v9, a2 + v9, v6);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for BatchNorm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Dropout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AF0BE88()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_37_16();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_14_8();
  if (v3)
  {
    v4 = OUTLINED_FUNCTION_95_7();
LABEL_13:
    OUTLINED_FUNCTION_51_3(v4, v0, v5);
    return;
  }
  if ((_DWORD)v0 != 254)
  {
    OUTLINED_FUNCTION_29_24();
    OUTLINED_FUNCTION_14_8();
    if (v3)
    {
      v5 = v7;
      v8 = v2[7];
    }
    else
    {
      v5 = OUTLINED_FUNCTION_44_21();
      v8 = v2[8];
    }
    v4 = v1 + v8;
    goto LABEL_13;
  }
  v6 = *(unsigned __int8 *)(v1 + v2[5] + 48);
  if (v6 >= 2)
    OUTLINED_FUNCTION_80_10(v6);
  OUTLINED_FUNCTION_125();
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.InvertedResidual()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF0BF20()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_17_25();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_13_11();
  if (v4)
  {
    OUTLINED_FUNCTION_68_14();
  }
  else
  {
    if (v3 == 254)
    {
      *(_BYTE *)(v1 + *(int *)(v2 + 20) + 48) = v0 + 1;
      OUTLINED_FUNCTION_125();
      return;
    }
    OUTLINED_FUNCTION_29_24();
    OUTLINED_FUNCTION_13_11();
    if (!v4)
      OUTLINED_FUNCTION_44_21();
  }
  OUTLINED_FUNCTION_89_7();
  OUTLINED_FUNCTION_16_6(v5, v6, v7, v8);
}

uint64_t type metadata completion function for MLHandActionClassifier.InvertedResidual()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Conv2D();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BatchNorm();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Dropout();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void MLHandActionClassifier.GraphCNN.callAsFunction(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_46_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_5();
  v3 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.callAsFunction(_:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

void MLHandActionClassifier.GraphCNNModel.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_20_3();
  v3 = v2;
  v5 = v4;
  v19 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_61_13();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_10_27();
  OUTLINED_FUNCTION_59_15();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v22 = v10;
  OUTLINED_FUNCTION_29_3();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - v13;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 16);
  v20(v5, v3, v8, v12);
  v18 = OUTLINED_FUNCTION_46_15();
  v21 = *(int *)(v18 + 36);
  if (*(_BYTE *)(v0 + v21) == 1)
  {
    Tensor.expandingShape(at:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v5, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v14, v8);
  }
  Tensor.transposed(permutation:)();
  OUTLINED_FUNCTION_24_32();
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v14, v8);
  Tensor.shape.getter();
  v17[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v15 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v15 + 16) = xmmword_21AFE7D90;
  v16 = TensorShape.subscript.getter();
  *(_QWORD *)(v15 + 40) = OUTLINED_FUNCTION_97_7(v16);
  *(_OWORD *)(v15 + 48) = xmmword_21AFED850;
  OUTLINED_FUNCTION_57_13();
}

void sub_21AF0C2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  Tensor.reshaped(to:)();
  *(_QWORD *)(v3 - 128) = v2;
  v4 = *(void (**)(uint64_t))(v0 + 8);
  *(_QWORD *)(v3 - 152) = v4;
  v4(v1);
  OUTLINED_FUNCTION_24_32();
  OUTLINED_FUNCTION_26_28();
  MLHandActionClassifier.GraphCNNModel.poseMotion(_:)();
}

void sub_21AF0C2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_24_32();
  OUTLINED_FUNCTION_26_28();
  *(_QWORD *)(v5 - 160) = v4;
  type metadata accessor for MLHandActionClassifier.Torso(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_24_32();
  OUTLINED_FUNCTION_26_28();
  v6 = *(_QWORD *)(v5 - 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 112))(v6, v0, v2);
  v7 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v7 + 16) = xmmword_21AFE7F70;
  Tensor.shape.getter();
  v8 = TensorShape.subscript.getter();
  v9 = v1;
  v10 = v1;
  v11 = *(void (**)(uint64_t, uint64_t))(v5 - 152);
  v11(v3, v10);
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = -1;
  MEMORY[0x220758C74](v7);
  Tensor.reshaped(to:)();
  v11(v3, v9);
  OUTLINED_FUNCTION_74_11(v6);
  OUTLINED_FUNCTION_74_11(v0);
  OUTLINED_FUNCTION_60_15();
  if (*(_BYTE *)(*(_QWORD *)(v5 - 88) + *(_QWORD *)(v5 - 104)) == 1)
  {
    softmax(_:alongAxis:)();
    OUTLINED_FUNCTION_72_11();
    OUTLINED_FUNCTION_74_11(v0);
    OUTLINED_FUNCTION_60_15();
  }
  else
  {
    OUTLINED_FUNCTION_72_11();
  }
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.GraphCNNModel.poseMotion(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD, _QWORD);
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  void (*v34)(uint64_t, char *, uint64_t);
  void (*v35)(_QWORD, _QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD);
  void (*v41)(char *, uint64_t);
  uint64_t v42;

  OUTLINED_FUNCTION_20_3();
  v33[3] = v3;
  v4 = type metadata accessor for TensorShape();
  v41 = *(void (**)(char *, uint64_t))(v4 - 8);
  v42 = v4;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v37 = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v33 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v33 - v11;
  v13 = OUTLINED_FUNCTION_10_27();
  OUTLINED_FUNCTION_59_15();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v36 = v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_65_5();
  v33[0] = v17;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_61_13();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v33 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v33 - v23;
  Tensor.transposed(permutation:)();
  v33[1] = OUTLINED_FUNCTION_29_24();
  v39 = v0;
  Layer.callAsFunction(_:)();
  v25 = (void (*)(_QWORD, _QWORD))v1[1];
  OUTLINED_FUNCTION_8_41();
  v26 = (void (*)(_QWORD, _QWORD, _QWORD))v1[4];
  OUTLINED_FUNCTION_56_16();
  Tensor.transposed(permutation:)();
  OUTLINED_FUNCTION_8_41();
  OUTLINED_FUNCTION_56_16();
  Tensor.squeezingShape(at:)();
  v40 = v25;
  v25(v24, v13);
  v35 = v26;
  v26(v24, v21, v13);
  v34 = (void (*)(uint64_t, char *, uint64_t))v1[2];
  v34(v2, v24, v13);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v27 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v27 + 16) = xmmword_21AFE7F70;
  Tensor.shape.getter();
  v28 = OUTLINED_FUNCTION_66_15();
  v29 = v42;
  v30 = (void (*)(char *, uint64_t))*((_QWORD *)v41 + 1);
  v30(v12, v42);
  OUTLINED_FUNCTION_94_4();
  v31 = TensorShape.subscript.getter();
  v33[2] = v9;
  v41 = v30;
  v30(v9, v29);
  if ((unsigned __int128)(v28 * (__int128)v31) >> 64 == (v28 * v31) >> 63)
  {
    *(_QWORD *)(v27 + 32) = v28 * v31;
    OUTLINED_FUNCTION_40_19();
    v32 = OUTLINED_FUNCTION_66_15();
    v41(v12, v29);
    *(_QWORD *)(v27 + 40) = v32;
    OUTLINED_FUNCTION_57_13();
  }
  __break(1u);
  JUMPOUT(0x21AF0C91CLL);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNNModel()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNNModel()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  return Layer.placed(on:)();
}

void MLHandActionClassifier.Torso.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = OUTLINED_FUNCTION_10_27();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v6 - v4;
  OUTLINED_FUNCTION_93_6();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
  Layer.callAsFunction(_:)();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_99_7();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v5, v0, v1);
  type metadata accessor for MLHandActionClassifier.Torso(0);
  OUTLINED_FUNCTION_36_23();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_99_7();
  OUTLINED_FUNCTION_8_0();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.Torso()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.Torso()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
  return Layer.placed(on:)();
}

void static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_20_3();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_27_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_14_5();
  if (v9 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_91_7();
    OUTLINED_FUNCTION_92_5();
    OUTLINED_FUNCTION_47_20();
    OUTLINED_FUNCTION_52_12();
    OUTLINED_FUNCTION_60_14(v1);
    OUTLINED_FUNCTION_15_32();
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_10_33(v0 + *(int *)(v13 + 20));
    OUTLINED_FUNCTION_52_12();
    OUTLINED_FUNCTION_60_14(v1);
    OUTLINED_FUNCTION_20_26();
    static ParameterInitializer.zeros.getter();
    static ParameterInitializer.ones.getter();
    BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
    OUTLINED_FUNCTION_45_20();
    specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)(v0, v7, v5, v3, v11);
    OUTLINED_FUNCTION_9_5();
  }
}

void static MLHandActionClassifier.SingleStreamBlock.makeInvertedResidual(inplanes:planes:stride:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_20_3();
  v3 = v2;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_27_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_95_1();
  if (v3 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_91_7();
    OUTLINED_FUNCTION_92_5();
    OUTLINED_FUNCTION_47_20();
    OUTLINED_FUNCTION_52_12();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    OUTLINED_FUNCTION_15_32();
    OUTLINED_FUNCTION_11_33();
    OUTLINED_FUNCTION_10_33(v0 + *(int *)(v7 + 20));
    OUTLINED_FUNCTION_52_12();
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for ComputeDevice?);
    OUTLINED_FUNCTION_20_26();
    static ParameterInitializer.zeros.getter();
    static ParameterInitializer.ones.getter();
    BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
    OUTLINED_FUNCTION_45_20();
    outlined init with take of MLHandPoseClassifier.ModelParameters(v0, v5, type metadata accessor for MLHandActionClassifier.InvertedResidual);
    OUTLINED_FUNCTION_9_5();
  }
}

void MLHandActionClassifier.SingleStreamBlock.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  OUTLINED_FUNCTION_20_3();
  v46 = v2;
  v50 = v3;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v51 = v5;
  v45 = *(_QWORD *)(OUTLINED_FUNCTION_10_27() - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  v9 = v7 - v8;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_61_13();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_65_5();
  v42 = v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_65_5();
  v43 = v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_65_5();
  v47 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  v48 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_50();
  v22 = v20 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v40 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v40 - v27;
  v41 = (char *)&v40 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v40 - v30;
  v44 = (char *)&v40 - v30;
  v32 = (int *)OUTLINED_FUNCTION_93_6();
  OUTLINED_FUNCTION_107_3(v0 + v32[10], (uint64_t)v31);
  OUTLINED_FUNCTION_107_3(v0 + v32[9], (uint64_t)v28);
  outlined init with copy of URL?(v0 + v32[8], v51, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_107_3(v0 + v32[7], (uint64_t)v25);
  OUTLINED_FUNCTION_107_3(v0 + v32[6], v22);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.DownsampledResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  OUTLINED_FUNCTION_49_15();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_49_15();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v9);
  v33 = v42;
  OUTLINED_FUNCTION_49_15();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v1);
  outlined destroy of URL?(v22, &demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v34 = v43;
  OUTLINED_FUNCTION_49_15();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v33);
  OUTLINED_FUNCTION_73_11((uint64_t)v25);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual> and conformance MLHandActionClassifier.ResidualLayer<A>, &demangling cache variable for type metadata for MLHandActionClassifier.ResidualLayer<MLHandActionClassifier.InvertedResidual>);
  v35 = v47;
  v36 = v51;
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v34);
  OUTLINED_FUNCTION_60_14(v36);
  v37 = v48;
  OUTLINED_FUNCTION_49_15();
  v38 = (uint64_t)v41;
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v35);
  OUTLINED_FUNCTION_73_11(v38);
  OUTLINED_FUNCTION_49_15();
  v39 = (uint64_t)v44;
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_32_22(v37);
  OUTLINED_FUNCTION_73_11(v39);
  OUTLINED_FUNCTION_9_5();
}

uint64_t specialized MLHandActionClassifier.DownsampledResidualLayer.init(_:filterCount:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[2] = a3;
  v17[3] = a4;
  v17[1] = a2;
  v7 = type metadata accessor for BatchNorm();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTrainingSessionParameters(a1, a5, type metadata accessor for MLHandActionClassifier.InvertedResidual);
  type metadata accessor for ParameterInitializer();
  v14 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v14);
  static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
  outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for ComputeDevice?);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DownsampledResidualLayer<MLHandActionClassifier.InvertedResidual>);
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
  static ParameterInitializer.zeros.getter();
  static ParameterInitializer.ones.getter();
  BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, type metadata accessor for MLHandActionClassifier.InvertedResidual);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a5 + *(int *)(v15 + 40), v10, v7);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.SingleStreamBlock()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.SingleStreamBlock()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
  return Layer.placed(on:)();
}

void MLHandActionClassifier.InvertedResidual.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_10_27();
  OUTLINED_FUNCTION_59_15();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_60_10();
  type metadata accessor for Conv2D();
  Layer.callAsFunction(_:)();
  type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_22_26();
  OUTLINED_FUNCTION_21_28();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_22_26();
  OUTLINED_FUNCTION_21_28();
  OUTLINED_FUNCTION_29_24();
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_22_26();
  OUTLINED_FUNCTION_21_28();
  OUTLINED_FUNCTION_44_21();
  OUTLINED_FUNCTION_70_14();
  OUTLINED_FUNCTION_22_26();
  OUTLINED_FUNCTION_9_5();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.InvertedResidual()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.InvertedResidual()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
  return Layer.placed(on:)();
}

void MLHandActionClassifier.ResidualLayer.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_10_27();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_14_5();
  Layer.callAsFunction(_:)();
  static Tensor.+= infix(_:_:)();
  relu(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  OUTLINED_FUNCTION_8_0();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.ResidualLayer<A>()
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.ResidualLayer<A>()
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.ResidualLayer<A>);
  return Layer.placed(on:)();
}

void MLHandActionClassifier.DownsampledResidualLayer.forward(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;

  OUTLINED_FUNCTION_20_3();
  a19 = v21;
  a20 = v22;
  v23 = OUTLINED_FUNCTION_10_27();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&a9 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&a9 - v28;
  Layer.callAsFunction(_:)();
  type metadata accessor for Conv2D();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_29_24();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_75_14(v20);
  static Tensor.+= infix(_:_:)();
  OUTLINED_FUNCTION_75_14((uint64_t)v26);
  relu(_:)();
  OUTLINED_FUNCTION_75_14((uint64_t)v29);
  OUTLINED_FUNCTION_9_5();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.DownsampledResidualLayer<A>);
  return Layer.placed(on:)();
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.DownsampledResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.ResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.ResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.ResidualLayer<A>()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.SingleStreamBlock()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.SingleStreamBlock()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.SingleStreamBlock()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.SingleStreamBlock and conformance MLHandActionClassifier.SingleStreamBlock, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.SingleStreamBlock);
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.InvertedResidual()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.InvertedResidual()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.InvertedResidual()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.InvertedResidual and conformance MLHandActionClassifier.InvertedResidual, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.InvertedResidual);
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.Torso()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.Torso()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.Torso()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.Torso and conformance MLHandActionClassifier.Torso, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.Torso);
}

void base witness table accessor for _BaseLayer in MLHandActionClassifier.GraphCNNModel()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

void base witness table accessor for _ComputeDevicePlaceable in MLHandActionClassifier.GraphCNNModel()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

void base witness table accessor for _Differentiable in MLHandActionClassifier.GraphCNNModel()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
}

uint64_t specialized _ModelCheckpoint<>.trainableSublayers(model:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;

  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.sublayers(recursively:)();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v13)
  {
    v0 = MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with take of BinaryFloatingPoint(&v12, (uint64_t)v11);
      outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _LayerDictionaryRepresentable);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)&v7);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v11, v11[3]);
        v1 = *(_QWORD *)(Layer.parameters(recursively:)() + 16);
        swift_bridgeObjectRelease();
        if (v1)
        {
          outlined init with copy of TrainingSessionDelegate((uint64_t)v11, (uint64_t)&v7);
        }
        else
        {
          v9 = 0;
          v7 = 0u;
          v8 = 0u;
        }
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
      if (*((_QWORD *)&v8 + 1))
      {
        outlined init with take of BinaryFloatingPoint(&v7, (uint64_t)v10);
        outlined init with take of BinaryFloatingPoint(v10, (uint64_t)&v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v0 = v3;
        }
        v2 = *(_QWORD *)(v0 + 16);
        if (v2 >= *(_QWORD *)(v0 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v0 = v4;
        }
        *(_QWORD *)(v0 + 16) = v2 + 1;
        outlined init with take of BinaryFloatingPoint(&v7, v0 + 40 * v2 + 32);
      }
      else
      {
        outlined destroy of URL?((uint64_t)&v7, &demangling cache variable for type metadata for Layer?);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v13);
  }
  else
  {
    v0 = MEMORY[0x24BEE4AF8];
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;

  v142 = a1;
  v148 = a4;
  v145 = a3;
  v136 = a2;
  v7 = type metadata accessor for LayerState();
  v129 = *(_QWORD *)(v7 - 8);
  v130 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v126 = (char *)v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v128 = (char *)v116 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v132 = (char *)v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v135 = (char *)v116 - v14;
  v138 = type metadata accessor for Tensor();
  *(_QWORD *)&v133 = *(_QWORD *)(v138 - 8);
  v15 = MEMORY[0x24BDAC7A8](v138);
  v131 = (char *)v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v134 = (uint64_t)v116 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v137 = (char *)v116 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x24BDAC7A8](v20);
  v139 = (char *)v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Parameter();
  v140 = *(void (**)(char *, uint64_t))(v22 - 8);
  v141 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v116 - v26;
  v28 = type metadata accessor for BatchNorm();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter();
  v33 = v32;
  v34 = v143;
  static BatchNorm.loadLayer(from:layerName:)(v145, (unint64_t)v148, (uint64_t)v31);
  if (v34)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v121 = v5;
  v120 = v25;
  v123 = v33;
  v122 = a5;
  v143 = 0;
  v125 = v29;
  v127 = v31;
  v124 = v28;
  BatchNorm.$offset.getter();
  v36 = Parameter.id.getter();
  v37 = (void (*)(char *, uint64_t))*((_QWORD *)v140 + 1);
  v37(v27, v141);
  v38 = specialized Dictionary.subscript.getter(v36, v144);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v146 = 0;
    v147 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v146 = 0xD000000000000019;
    v147 = 0x800000021AFF6310;
    v57._countAndFlagsBits = v145;
    v57._object = v148;
    String.append(_:)(v57);
    v58._countAndFlagsBits = 0xD000000000000014;
    v58._object = (void *)0x800000021AFF6330;
    String.append(_:)(v58);
    v59 = v146;
    v60 = v147;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v61 = v59;
    *(_QWORD *)(v61 + 8) = v60;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_OWORD *)(v61 + 32) = 0u;
    *(_BYTE *)(v61 + 48) = 2;
    swift_willThrow(0.0);
    return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v124);
  }
  v39 = v38;
  v140 = v37;
  v40 = v137;
  BatchNorm.offset.getter();
  v41 = v121 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v42 = (uint64_t)v139;
  v119 = v43;
  v121 = v41;
  Layer.updateValue<A>(_:for:)();
  v44 = *(void (**)(char *, uint64_t))(v133 + 8);
  v45 = v40;
  v46 = v138;
  v44(v45, v138);
  outlined destroy of URL?(v42, &demangling cache variable for type metadata for Tensor?);
  swift_endAccess();
  v47 = v134;
  BatchNorm.offset.getter();
  v48 = (uint64_t)v135;
  Tensor.shape.getter();
  v44((char *)v47, v46);
  v134 = type metadata accessor for TensorShape();
  __swift_storeEnumTagSinglePayload(v48, 0, 1, v134);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v50 = swift_allocObject();
  v133 = xmmword_21AFE7DA0;
  *(_OWORD *)(v50 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE0D00];
  v51 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v50 + 64) = v51;
  v52 = v148;
  *(_QWORD *)(v50 + 32) = v145;
  *(_QWORD *)(v50 + 40) = v52;
  swift_bridgeObjectRetain();
  v53 = String.init(format:_:)();
  v54 = v143;
  specialized SGD.updateOptimizerState(for:shape:using:name:)(v39, v48, v122, v53, v55);
  if (!v54)
  {
    v116[0] = v51;
    v116[1] = v49;
    v117 = v44;
    v118 = v39;
    v143 = 0;
    outlined destroy of URL?(v48, &demangling cache variable for type metadata for TensorShape?);
    swift_bridgeObjectRelease();
    v62 = v120;
    BatchNorm.$scale.getter();
    v63 = Parameter.id.getter();
    v140(v62, v141);
    v64 = specialized Dictionary.subscript.getter(v63, v144);
    swift_bridgeObjectRelease();
    if (v64)
    {
      v144 = v64;
      v65 = v137;
      v66 = v127;
      BatchNorm.scale.getter();
      swift_beginAccess();
      v67 = (uint64_t)v139;
      Layer.updateValue<A>(_:for:)();
      v68 = v65;
      v69 = v138;
      v70 = v117;
      v117(v68, v138);
      outlined destroy of URL?(v67, &demangling cache variable for type metadata for Tensor?);
      swift_endAccess();
      v71 = v131;
      BatchNorm.scale.getter();
      v72 = (uint64_t)v132;
      Tensor.shape.getter();
      v73 = v69;
      v74 = v144;
      v70(v71, v73);
      __swift_storeEnumTagSinglePayload(v72, 0, 1, v134);
      v75 = swift_allocObject();
      *(_OWORD *)(v75 + 16) = v133;
      v76 = v116[0];
      *(_QWORD *)(v75 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v75 + 64) = v76;
      v77 = v145;
      *(_QWORD *)(v75 + 32) = v145;
      *(_QWORD *)(v75 + 40) = v148;
      swift_bridgeObjectRetain();
      v78 = String.init(format:_:)();
      v79 = v143;
      specialized SGD.updateOptimizerState(for:shape:using:name:)(v74, v72, v122, v78, v80);
      v81 = v124;
      if (v79)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of URL?(v72, &demangling cache variable for type metadata for TensorShape?);
        return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v66, v81);
      }
      v143 = 0;
      outlined destroy of URL?(v72, &demangling cache variable for type metadata for TensorShape?);
      swift_bridgeObjectRelease();
      v87 = v128;
      BatchNorm.$runningMean.getter();
      v88 = LayerState.id.getter();
      v89 = v130;
      v90 = *(void (**)(char *, uint64_t))(v129 + 8);
      v90(v87, v130);
      v91 = v88;
      v92 = v123;
      v93 = specialized Dictionary.subscript.getter(v91, v123);
      if (v93)
      {
        v94 = v93;
        v95 = v137;
        BatchNorm.runningMean.getter();
        swift_beginAccess();
        v96 = (uint64_t)v139;
        v141 = v94;
        Layer.updateValue<A>(_:for:)();
        v97 = v138;
        v117(v95, v138);
        outlined destroy of URL?(v96, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess();
        v98 = v126;
        BatchNorm.$runningVariance.getter();
        v99 = v92;
        v100 = LayerState.id.getter();
        v90(v98, v89);
        v101 = specialized Dictionary.subscript.getter(v100, v99);
        swift_bridgeObjectRelease();
        if (v101)
        {
          v102 = v127;
          BatchNorm.runningVariance.getter();
          swift_beginAccess();
          v103 = (uint64_t)v139;
          Layer.updateValue<A>(_:for:)();
          v117(v95, v97);
          outlined destroy of URL?(v103, &demangling cache variable for type metadata for Tensor?);
          swift_endAccess();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v102, v124);
        }
        v146 = 0;
        v147 = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v110._object = (void *)0x800000021AFF6310;
        v110._countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v110);
        v111._countAndFlagsBits = v145;
        v111._object = v148;
        String.append(_:)(v111);
        v112._countAndFlagsBits = 0xD00000000000001DLL;
        v112._object = (void *)0x800000021AFF6390;
        String.append(_:)(v112);
        v113 = v146;
        v114 = v147;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v115 = v113;
        *(_QWORD *)(v115 + 8) = v114;
        *(_OWORD *)(v115 + 16) = 0u;
        *(_OWORD *)(v115 + 32) = 0u;
        *(_BYTE *)(v115 + 48) = 2;
        swift_willThrow(0.0);
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v146 = 0;
        v147 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v104._object = (void *)0x800000021AFF6310;
        v104._countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v104);
        v105._countAndFlagsBits = v77;
        v105._object = v148;
        String.append(_:)(v105);
        v106._object = (void *)0x800000021AFF6370;
        v106._countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v106);
        v107 = v146;
        v108 = v147;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v109 = v107;
        *(_QWORD *)(v109 + 8) = v108;
        *(_OWORD *)(v109 + 16) = 0u;
        *(_OWORD *)(v109 + 32) = 0u;
        *(_BYTE *)(v109 + 48) = 2;
        swift_willThrow(0.0);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v146 = 0;
      v147 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      v146 = 0xD000000000000019;
      v147 = 0x800000021AFF6310;
      v82._countAndFlagsBits = v145;
      v82._object = v148;
      String.append(_:)(v82);
      v83._countAndFlagsBits = 0xD000000000000013;
      v83._object = (void *)0x800000021AFF6350;
      String.append(_:)(v83);
      v84 = v146;
      v85 = v147;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v86 = v84;
      *(_QWORD *)(v86 + 8) = v85;
      *(_OWORD *)(v86 + 16) = 0u;
      *(_OWORD *)(v86 + 32) = 0u;
      *(_BYTE *)(v86 + 48) = 2;
      swift_willThrow(0.0);
    }
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v124);
  }
  v56 = v125;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v48, &demangling cache variable for type metadata for TensorShape?);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v127, v124);
}

void specialized _ModelCheckpoint<>.restoreLayer<A>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void (*a8)(uint64_t), void (*a9)(void), void (*a10)(uint64_t), void (*a11)(uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int EnumTagSinglePayload;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;

  v114 = a8;
  v118 = a7;
  v121 = a3;
  v110 = a2;
  v116 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v103 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v102 = v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_211();
  v108 = v21;
  v22 = type metadata accessor for Tensor();
  v111 = *(_QWORD *)(v22 - 8);
  v112 = v22;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_208();
  v104 = v24;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_65_5();
  *(_QWORD *)&v107 = v26;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_211();
  v106 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_208();
  v105 = v30;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_211();
  v109 = v32;
  v115 = type metadata accessor for Parameter();
  v113 = *(char **)(v115 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v33);
  v34 = OUTLINED_FUNCTION_23_24();
  v35 = a6(v34);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v93 - v37;
  v39 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v117;
  v41 = v118(a5, v121, a4);
  v118 = v40;
  if (!v40)
  {
    v98 = v11;
    v99 = a5;
    v100 = a4;
    v101 = v36;
    v117 = v35;
    v114(v41);
    v42 = Parameter.id.getter();
    v43 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v113 + 1);
    v43(v12, v115);
    v44 = specialized Dictionary.subscript.getter(v42, v39);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      v119 = 0;
      v120 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v65 = OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_16_30(v65, v66);
      v67 = OUTLINED_FUNCTION_58_13();
LABEL_15:
      v69(v67, v68);
      goto LABEL_3;
    }
    v45 = v44;
    v97 = v43;
    v114 = (void (*)(uint64_t))v39;
    v46 = v106;
    v47 = v38;
    a9();
    v48 = v98 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
    OUTLINED_FUNCTION_4_28();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    v96 = v49;
    v98 = v48;
    Layer.updateValue<A>(_:for:)();
    v50 = *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8);
    v51 = v46;
    v52 = v112;
    v53 = v50(v51, v112);
    OUTLINED_FUNCTION_93_1(v53, &demangling cache variable for type metadata for Tensor?);
    v54 = swift_endAccess();
    v55 = v107;
    v113 = v47;
    ((void (*)(uint64_t))a9)(v54);
    v56 = v108;
    Tensor.shape.getter();
    v50(v55, v52);
    v57 = type metadata accessor for TensorShape();
    __swift_storeEnumTagSinglePayload(v56, 0, 1, v57);
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v59 = OUTLINED_FUNCTION_0_22();
    v107 = xmmword_21AFE7DA0;
    *(_OWORD *)(v59 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE0D00];
    v60 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v59 + 64) = v60;
    v61 = v100;
    *(_QWORD *)(v59 + 32) = v121;
    *(_QWORD *)(v59 + 40) = v61;
    swift_bridgeObjectRetain();
    v62 = String.init(format:_:)();
    OUTLINED_FUNCTION_79_7(v45, v56, v99, v62, v63);
    v118 = 0;
    v93 = v58;
    v94 = v57;
    v95 = (void (*)(uint64_t, uint64_t))v50;
    v106 = v45;
    OUTLINED_FUNCTION_93_1(v64, &demangling cache variable for type metadata for TensorShape?);
    v70 = swift_bridgeObjectRelease();
    v71 = v105;
    v72 = (uint64_t)v113;
    a10(v70);
    v73 = v112;
    if (__swift_getEnumTagSinglePayload(v71, 1, v112) == 1)
    {
      v74 = OUTLINED_FUNCTION_58_13();
      v75(v74);
      OUTLINED_FUNCTION_76_8();
      v76 = OUTLINED_FUNCTION_81_11();
      OUTLINED_FUNCTION_84_8(v76, &demangling cache variable for type metadata for Tensor?);
      goto LABEL_3;
    }
    v77 = v104;
    v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v104, v71, v73);
    v79 = v103;
    a11(v78);
    v80 = v115;
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v79, 1, v115);
    v82 = v117;
    if (EnumTagSinglePayload == 1)
    {
      v83 = OUTLINED_FUNCTION_76_8();
      OUTLINED_FUNCTION_84_8(v83, &demangling cache variable for type metadata for Parameter?);
    }
    else
    {
      v84 = Parameter.id.getter();
      v97(v79, v80);
      v85 = specialized Dictionary.subscript.getter(v84, v114);
      swift_bridgeObjectRelease();
      if (v85)
      {
        OUTLINED_FUNCTION_4_28();
        v86 = Layer.updateValue<A>(_:for:)();
        OUTLINED_FUNCTION_84_8(v86, &demangling cache variable for type metadata for Tensor?);
        swift_endAccess();
        v87 = v102;
        Tensor.shape.getter();
        __swift_storeEnumTagSinglePayload(v87, 0, 1, v94);
        v88 = OUTLINED_FUNCTION_0_22();
        *(_OWORD *)(v88 + 16) = v107;
        *(_QWORD *)(v88 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v88 + 64) = v60;
        *(_QWORD *)(v88 + 32) = v121;
        *(_QWORD *)(v88 + 40) = v100;
        swift_bridgeObjectRetain();
        v89 = String.init(format:_:)();
        OUTLINED_FUNCTION_79_7(v85, v87, v99, v89, v90);
        swift_release();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_81_11();
        outlined destroy of URL?(v87, &demangling cache variable for type metadata for TensorShape?);
LABEL_14:
        v95(v77, v112);
        v69 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v67 = v72;
        v68 = v82;
        goto LABEL_15;
      }
    }
    v119 = 0;
    v120 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v91 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_16_30(v91, v92);
    OUTLINED_FUNCTION_81_11();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
LABEL_3:
  OUTLINED_FUNCTION_7();
}

uint64_t specialized _ModelCheckpoint<>.restoreGenericLayer<A, B>(_:optimizer:layerName:checkpointDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v7 = v6;
  v8 = v5;
  v87 = a5;
  v89._object = a4;
  v76 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x24BDAC7A8](v77);
  v94 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Parameter();
  v80 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v75 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v83 = (uint64_t)&v68 - v20;
  v21 = type metadata accessor for Tensor();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LSTM();
  v81 = a1;
  v25 = Layer.namedParameterKeyPaths(recursively:)();
  v74 = *(_QWORD *)(v25 + 16);
  if (!v74)
    return swift_bridgeObjectRelease();
  v89._countAndFlagsBits = a3;
  v68 = v25;
  v26 = v25 + 32;
  v82 = v8 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  v27 = 0;
  v88 = v21;
  v71 = v8;
  v78 = v22;
  v73 = v24;
  v72 = v13;
  v70 = v26;
  while (1)
  {
    v79 = v27;
    v28 = (uint64_t *)(v26 + 24 * v27);
    v30 = *v28;
    v29 = (void *)v28[1];
    v31 = v28[2];
    swift_bridgeObjectRetain();
    swift_retain();
    v32 = v83;
    Dictionary<>.tensor(forKey:prefix:)(v30, v29, v89._countAndFlagsBits, (uint64_t)v89._object, v87, v83);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    v86 = v29;
    v33 = v88;
    if (__swift_getEnumTagSinglePayload(v32, 1, v88) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v32, &demangling cache variable for type metadata for Tensor?);
      v92 = 0;
      v93 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v61._object = (void *)0x800000021AFF5250;
      v61._countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v61);
      String.append(_:)(v89);
      v62._countAndFlagsBits = 0x74656D6172617020;
      v62._object = (void *)0xEB00000000207265;
      String.append(_:)(v62);
      v63._countAndFlagsBits = v30;
      v63._object = v86;
      String.append(_:)(v63);
      v64 = v92;
      v65 = v93;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v66 = v64;
      *(_QWORD *)(v66 + 8) = v65;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 32) = 0u;
      *(_BYTE *)(v66 + 48) = 0;
      swift_bridgeObjectRelease();
      swift_willThrow(v67);
      return swift_release();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v24, v32, v33);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    v34 = Parameter.id.getter();
    v90 = *(void (**)(char *, uint64_t))(v80 + 8);
    v90(v16, v91);
    v35 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
    v36 = *(_QWORD *)(v35 + 16);
    v84 = v30;
    v85 = v31;
    if (!v36)
      break;
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
    if ((v38 & 1) == 0)
      break;
    v39 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v37);
    swift_retain();
    swift_bridgeObjectRelease();
    countAndFlagsBits = v89._countAndFlagsBits;
    object = v89._object;
LABEL_19:
    swift_beginAccess();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    v49 = (uint64_t)v75;
    Layer.updateValue<A>(_:for:)();
    outlined destroy of URL?(v49, &demangling cache variable for type metadata for Tensor?);
    swift_endAccess();
    v50 = type metadata accessor for TensorShape();
    v51 = (uint64_t)v72;
    __swift_storeEnumTagSinglePayload((uint64_t)v72, 1, 1, v50);
    v92 = countAndFlagsBits;
    v93 = (unint64_t)object;
    swift_bridgeObjectRetain();
    v52._countAndFlagsBits = 46;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v53._countAndFlagsBits = v84;
    v53._object = v86;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    specialized SGD.updateOptimizerState(for:shape:using:name:)(v39, v51, v87, v92, v93);
    v22 = v78;
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of URL?(v51, &demangling cache variable for type metadata for TensorShape?);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v88);
      return swift_bridgeObjectRelease();
    }
    v27 = v79 + 1;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v51, &demangling cache variable for type metadata for TensorShape?);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v88);
    v26 = v70;
    if (v27 == v74)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  outlined init with copy of MLTrainingSessionParameters(v82, v94, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v42 = Layer.parameterKeyPaths(recursively:)();
  v43 = v42;
  v69 = 0;
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain();
    v44 = _CocoaArrayWrapper.endIndex.getter();
    if (v44)
      goto LABEL_10;
LABEL_23:
    swift_bridgeObjectRelease_n();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v94, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    swift_bridgeObjectRelease();
    v92 = 0;
    v93 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v54._object = (void *)0x800000021AFF5250;
    v54._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v54);
    String.append(_:)(v89);
    v55._countAndFlagsBits = 0x74656D6172617020;
    v55._object = (void *)0xEB00000000207265;
    String.append(_:)(v55);
    v56._countAndFlagsBits = v84;
    v56._object = v86;
    String.append(_:)(v56);
    v57 = v92;
    v58 = v93;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v59 = v57;
    *(_QWORD *)(v59 + 8) = v58;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_BYTE *)(v59 + 48) = 0;
    swift_bridgeObjectRelease();
    swift_willThrow(v60);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v73, v88);
  }
  v44 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v44)
    goto LABEL_23;
LABEL_10:
  v45 = 4;
  while (1)
  {
    if ((v43 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x22075AF48](v45 - 4, v43);
      v39 = result;
    }
    else
    {
      v39 = *(_QWORD *)(v43 + 8 * v45);
      result = swift_retain();
    }
    v47 = v45 - 3;
    if (__OFADD__(v45 - 4, 1))
      break;
    swift_getAtKeyPath();
    v48 = Parameter.id.getter();
    v90(v16, v91);
    if (v48 == v34)
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v94, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      v7 = v69;
      countAndFlagsBits = v89._countAndFlagsBits;
      object = v89._object;
      v24 = v73;
      goto LABEL_19;
    }
    swift_release();
    ++v45;
    if (v47 == v44)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t outlined assign with take of SGD<MLHandActionClassifier.GraphCNNModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_8_41()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_10_33@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v4 = *(_OWORD *)(v3 - 120);
  *(_OWORD *)a1 = *(_OWORD *)(v3 - 136);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 - 104);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v3 - 88);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  return 0;
}

uint64_t OUTLINED_FUNCTION_11_33()
{
  return AveragePool2D.init(kernelSize:stride:padding:countIncludesPadding:)();
}

uint64_t OUTLINED_FUNCTION_15_32()
{
  return Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
}

uint64_t OUTLINED_FUNCTION_16_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 2;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_17_25()
{
  return 0;
}

void OUTLINED_FUNCTION_19_32(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;

  *(_QWORD *)(v2 - 112) = v1;
  *(_QWORD *)(v2 - 104) = (a1 - 32) | 0x8000000000000000;
  v3._countAndFlagsBits = *(_QWORD *)(v2 - 72);
  v3._object = *(void **)(v2 - 280);
  String.append(_:)(v3);
}

uint64_t OUTLINED_FUNCTION_20_26()
{
  return Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
}

uint64_t OUTLINED_FUNCTION_21_28()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t OUTLINED_FUNCTION_22_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_23_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_24_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_26_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_27_32()
{
  return type metadata accessor for MLHandActionClassifier.InvertedResidual(0);
}

uint64_t OUTLINED_FUNCTION_29_24()
{
  return type metadata accessor for BatchNorm();
}

void OUTLINED_FUNCTION_30_25()
{
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)();
}

uint64_t OUTLINED_FUNCTION_32_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_35_17()
{
  return static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_36_23()
{
  return type metadata accessor for Dense();
}

uint64_t OUTLINED_FUNCTION_37_16()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_40_19()
{
  return Tensor.shape.getter();
}

uint64_t OUTLINED_FUNCTION_41_20()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_44_21()
{
  return type metadata accessor for Dropout();
}

uint64_t OUTLINED_FUNCTION_45_20()
{
  return Dropout.init(probability:seed:)();
}

uint64_t OUTLINED_FUNCTION_46_15()
{
  return type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
}

uint64_t OUTLINED_FUNCTION_47_20()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_51_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_52_12()
{
  return static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_56_16()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v2, v3, v1);
}

void OUTLINED_FUNCTION_57_13()
{
  JUMPOUT(0x220758C74);
}

uint64_t OUTLINED_FUNCTION_58_13()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_60_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v0, v3, v1);
}

uint64_t OUTLINED_FUNCTION_66_15()
{
  return TensorShape.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_68_14()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_69_11()
{
  return BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)();
}

uint64_t OUTLINED_FUNCTION_70_14()
{
  return Layer.callAsFunction(_:)();
}

uint64_t OUTLINED_FUNCTION_72_11()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 128), v1);
}

void OUTLINED_FUNCTION_73_11(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_74_11(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_75_14(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_76_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_77_10()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void OUTLINED_FUNCTION_79_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  specialized SGD.updateOptimizerState(for:shape:using:name:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_80_10@<X0>(int a1@<W8>)
{
  return ((a1 + 2147483646) & 0x7FFFFFFFu) + 1;
}

uint64_t OUTLINED_FUNCTION_81_11()
{
  return swift_release();
}

void OUTLINED_FUNCTION_84_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

void OUTLINED_FUNCTION_85_8()
{
  static MLHandActionClassifier.SingleStreamBlock.makeDownSampledInvertedResidual(inplanes:planes:stride:)();
}

uint64_t OUTLINED_FUNCTION_90_4()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_91_7()
{
  return type metadata accessor for ParameterInitializer();
}

uint64_t OUTLINED_FUNCTION_92_5()
{
  return type metadata accessor for ComputeDevice();
}

uint64_t OUTLINED_FUNCTION_93_6()
{
  return type metadata accessor for MLHandActionClassifier.SingleStreamBlock(0);
}

uint64_t OUTLINED_FUNCTION_94_4()
{
  return Tensor.shape.getter();
}

uint64_t OUTLINED_FUNCTION_95_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_97_7(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return TensorShape.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_99_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

unint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.description.getter()
{
  Swift::String v0;
  unint64_t v2;

  v2 = MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
  swift_bridgeObjectRetain();
  v0._object = (void *)0x800000021AFF3920;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static MLSoundClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v2 = *(_BYTE *)(a2 + 8);
    else
      v2 = 0;
    if ((v2 & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v4 = *(_BYTE *)(a2 + 8);
    else
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return 1;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
}

uint64_t static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (*(double *)(a1 + 40) == *(double *)(a2 + 40))
    {
      if (*(double *)(a1 + 48) == *(double *)(a2 + 48))
      {
        if (*(double *)(a1 + 56) == *(double *)(a2 + 56))
        {
          if (*(double *)(a1 + 64) == *(double *)(a2 + 64))
          {
            v6 = *(unsigned __int8 *)(a1 + 72);
            v7 = 1702195828;
            v8 = *(unsigned __int8 *)(a2 + 72);
            if (*(_BYTE *)(a1 + 72))
              v9 = 1702195828;
            else
              v9 = 0x65736C6166;
            if (*(_BYTE *)(a1 + 72))
              v10 = 0xE400000000000000;
            else
              v10 = 0xE500000000000000;
            if (*(_BYTE *)(a2 + 72))
            {
              v11 = 0xE400000000000000;
            }
            else
            {
              v7 = 0x65736C6166;
              v11 = 0xE500000000000000;
            }
            if (v6 == v8)
              v12 = 0;
            else
              v12 = 0x2065727574616546;
            if (v6 == v8)
              v13 = 0;
            else
              v13 = 0xEF676E696C616373;
            if (v6 == v8)
              v3 = 0;
            else
              v3 = v9;
            if (v6 == v8)
              v4 = 0;
            else
              v4 = v10;
            if (v6 == v8)
              result = 0;
            else
              result = v7;
            if (v6 == v8)
              v15 = 0;
            else
              v15 = v11;
          }
          else
          {
            Double.description.getter();
            result = OUTLINED_FUNCTION_0_49();
            v13 = 0x800000021AFF65D0;
            v12 = 0xD000000000000015;
          }
        }
        else
        {
          Double.description.getter();
          result = OUTLINED_FUNCTION_0_49();
          v13 = 0xE900000000000065;
          v12 = 0x7A69732070657453;
        }
      }
      else
      {
        v13 = 0xEA00000000007974;
        Double.description.getter();
        result = OUTLINED_FUNCTION_0_49();
        v12 = 0x6C616E657020324CLL;
      }
    }
    else
    {
      v13 = 0xEA00000000007974;
      v12 = 0x6C616E657020314CLL;
      Double.description.getter();
      result = OUTLINED_FUNCTION_0_49();
    }
  }
  else
  {
    v3 = OUTLINED_FUNCTION_123_0();
    v4 = v16;
    result = OUTLINED_FUNCTION_123_0();
    v13 = 0xEF736E6F69746172;
    v12 = 0x657469202E78614DLL;
  }
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v3;
  a3[3] = v4;
  a3[4] = result;
  a3[5] = v15;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_49()
{
  return Double.description.getter();
}

Class static MLTextClassifier.buildOptions(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  char v24;
  void *v25;
  id v26;
  uint64_t v27;
  char v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  id v36;
  void **v37;
  char *v38;
  Class isa;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for URL();
  v41[2] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v41[0] = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v41[1] = (char *)v41 - v5;
  v6 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (uint64_t)v41 - v10;
  v11 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = Dictionary.init(dictionaryLiteral:)();
  v14 = type metadata accessor for MLTextClassifier.ModelParameters();
  v15 = a1 + *(int *)(v14 + 36);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
  {
    if (!*MEMORY[0x24BDDFD78])
    {
      __break(1u);
      JUMPOUT(0x21AF10890);
    }
    v16 = *(_QWORD *)v15;
    *(_QWORD *)&v44 = (id)*MEMORY[0x24BDDFD78];
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    AnyHashable.init<A>(_:)();
    *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1768];
    *(_QWORD *)&v44 = v16;
    OUTLINED_FUNCTION_1_43();
  }
  v17 = *(void **)(a1 + *(int *)(v14 + 20));
  if (v17)
  {
    *(_QWORD *)&v44 = *MEMORY[0x24BDDFC30];
    v18 = (void *)v44;
    OUTLINED_FUNCTION_5_37();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
    v19 = v17;
    v20 = v18;
    AnyHashable.init<A>(_:)();
    type metadata accessor for NLLanguage(0);
    *((_QWORD *)&v45 + 1) = v21;
    *(_QWORD *)&v44 = v19;
    OUTLINED_FUNCTION_1_43();
  }
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v31 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                        + 48)];
      v32 = *(_QWORD *)v31;
      v33 = v31[8];
      v34 = v42;
      outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v13, v42);
      *(_QWORD *)&v44 = *MEMORY[0x24BDDFC38];
      v35 = (void *)v44;
      OUTLINED_FUNCTION_5_37();
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
      v36 = v35;
      OUTLINED_FUNCTION_0_50();
      if ((v33 & 1) != 0)
      {
        v44 = 0u;
        v45 = 0u;
      }
      else
      {
        *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1768];
        *(_QWORD *)&v44 = v32;
      }
      OUTLINED_FUNCTION_1_43();
      OUTLINED_FUNCTION_3_44((void *)*MEMORY[0x24BDDFC50]);
      OUTLINED_FUNCTION_0_50();
      *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1328];
      LOBYTE(v44) = 1;
      OUTLINED_FUNCTION_4_46();
      outlined init with copy of MLTextClassifier.ModelAlgorithmType(v34, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
      v38 = (char *)&loc_21AF1059C
          + *((int *)qword_21AF10890 + __swift_getEnumTagSinglePayload((uint64_t)v8, 4, v2));
      __asm { BR              X10 }
    }
    v23 = *(_QWORD *)v13;
    v24 = v13[8];
    *(_QWORD *)&v44 = *MEMORY[0x24BDDFC38];
    v25 = (void *)v44;
    OUTLINED_FUNCTION_5_37();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
    v26 = v25;
    OUTLINED_FUNCTION_2_44();
    if ((v24 & 1) != 0)
    {
      v44 = 0u;
      v45 = 0u;
    }
    else
    {
      *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1768];
      *(_QWORD *)&v44 = v23;
    }
    OUTLINED_FUNCTION_1_43();
    v37 = (void **)MEMORY[0x24BDDFC40];
  }
  else
  {
    v27 = *(_QWORD *)v13;
    v28 = v13[8];
    *(_QWORD *)&v44 = *MEMORY[0x24BDDFC38];
    v29 = (void *)v44;
    OUTLINED_FUNCTION_5_37();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for NLModelConfigurationOptionsKey, (uint64_t)&protocol conformance descriptor for NLModelConfigurationOptionsKey);
    v30 = v29;
    OUTLINED_FUNCTION_2_44();
    if ((v28 & 1) != 0)
    {
      v44 = 0u;
      v45 = 0u;
    }
    else
    {
      *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1768];
      *(_QWORD *)&v44 = v27;
    }
    OUTLINED_FUNCTION_1_43();
    v37 = (void **)MEMORY[0x24BDDFC48];
  }
  OUTLINED_FUNCTION_3_44(*v37);
  OUTLINED_FUNCTION_2_44();
  *((_QWORD *)&v45 + 1) = MEMORY[0x24BEE1328];
  LOBYTE(v44) = 1;
  OUTLINED_FUNCTION_4_46();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

void implicit closure #1 in closure #1 in closure #3 in static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2)
{
  id v2;

  if (a1)
    v2 = *(id *)(a1 + 8 * a2);
  OUTLINED_FUNCTION_22();
}

uint64_t outlined init with take of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined init with copy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_22();
}

uint64_t outlined destroy of MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_50()
{
  return AnyHashable.init<A>(_:)();
}

void OUTLINED_FUNCTION_1_43()
{
  uint64_t v0;

  specialized Dictionary.subscript.setter(v0 - 160, v0 - 128);
}

uint64_t OUTLINED_FUNCTION_2_44()
{
  return AnyHashable.init<A>(_:)();
}

id OUTLINED_FUNCTION_3_44@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return a1;
}

void OUTLINED_FUNCTION_4_46()
{
  uint64_t v0;

  specialized Dictionary.subscript.setter(v0 - 160, v0 - 128);
}

void OUTLINED_FUNCTION_5_37()
{
  type metadata accessor for NLModelConfigurationOptionsKey(0);
}

id OUTLINED_FUNCTION_6_42(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 160) = v1;
  return v1;
}

uint64_t *OUTLINED_FUNCTION_7_39()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v1 - 160));
}

uint64_t OUTLINED_FUNCTION_9_37@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void AnyTreeClassifierModel.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t (*v70)(uint64_t, uint64_t, _QWORD);
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD v87[2];
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(_QWORD, _QWORD);
  uint64_t v112;
  uint64_t v113;
  Swift::Int v114;
  uint64_t v115;
  uint64_t v116;

  v101 = a1;
  v96 = type metadata accessor for FeatureType();
  v95 = *(_QWORD *)(v96 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v97 = v3;
  v93 = type metadata accessor for TreeEnsembleClassifierConfiguration.ClassLabels();
  v92 = *(_QWORD *)(v93 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v5);
  v109 = type metadata accessor for ModelKind();
  v102 = *(uint64_t (***)(uint64_t, uint64_t))(v109 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v100 = v7;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_28_3((uint64_t)v87 - v9);
  v10 = type metadata accessor for TreeEnsembleClassifierConfiguration();
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v99 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v14);
  v15 = type metadata accessor for Model();
  v103 = *(_QWORD *)(v15 - 8);
  v104 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  v98 = v17;
  MEMORY[0x24BDAC7A8](v18);
  v106 = (char *)v87 - v19;
  v20 = type metadata accessor for URL.DirectoryHint();
  v110 = *(_QWORD *)(v20 - 8);
  v111 = (void (*)(_QWORD, _QWORD))v20;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL();
  v112 = *(_QWORD *)(v28 - 8);
  v113 = v28;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_208();
  v105 = v30;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (uint64_t (**)(uint64_t, uint64_t))((char *)v87 - v32);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)v87 - v35;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)v87 - v38;
  v40 = v1[2];
  if (!v40)
    goto LABEL_13;
  v41 = v114;
  v42 = specialized FeatureVectorizer.Transformer.exportEncoders()(v1[2], v1[3], v1[4]);
  if (!v41)
  {
    v87[1] = v40;
    v114 = v42;
    v88 = v39;
    v89 = v1;
    v43 = (void *)objc_opt_self();
    v44 = objc_msgSend(v43, sel_defaultManager);
    NSFileManager.createTemporaryModelDirectory()();
    if (v45)
    {
      OUTLINED_FUNCTION_12_36();

    }
    else
    {

      v46 = objc_msgSend(v43, sel_defaultManager);
      NSFileManager.temporaryModelDirectory.getter();

      UUID.init()();
      v47 = UUID.uuidString.getter();
      v49 = v48;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      v115 = v47;
      v116 = v49;
      v51 = v110;
      v50 = v111;
      (*(void (**)(char *, _QWORD, void (*)(_QWORD, _QWORD)))(v110 + 104))(v23, *MEMORY[0x24BDCD7A0], v111);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, _QWORD))(v51 + 8))(v23, v50);
      swift_bridgeObjectRelease();
      v52 = v112;
      v53 = *(void (**)(char *, uint64_t))(v112 + 8);
      OUTLINED_FUNCTION_11_34((uint64_t)v33);
      v54 = (uint64_t)v88;
      URL.appendingPathExtension(_:)();
      OUTLINED_FUNCTION_11_34((uint64_t)v36);
      v55 = type metadata accessor for AnyTreeClassifierModel();
      BaseTreeClassifierModel.export(to:)();
      OUTLINED_FUNCTION_216((uint64_t)v105, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
      v56 = (uint64_t)v106;
      Model.init(contentsOf:)();
      v112 = 0;
      v57 = v90;
      specialized BidirectionalCollection.last.getter(v114, v90);
      v58 = v104;
      if (__swift_getEnumTagSinglePayload(v57, 1, v104) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      Model.outputs.getter();
      v111 = *(void (**)(_QWORD, _QWORD))(v103 + 8);
      v111(v57, v58);
      Model.inputs.setter();
      v59 = v89;
      v61 = (uint64_t (*)(uint64_t, uint64_t))*v89;
      v60 = v89[1];
      OUTLINED_FUNCTION_195();
      Model.predictedFeatureName.setter();
      v105 = v61;
      v115 = (uint64_t)v61;
      v116 = v60;
      OUTLINED_FUNCTION_195();
      OUTLINED_FUNCTION_0_51();
      Model.predictedProbabilitiesName.setter();
      Dictionary.init(dictionaryLiteral:)();
      Model.metadata.setter();
      v62 = v91;
      Model.kind.getter();
      v33 = v102;
      v63 = v102[11](v62, v109);
      v64 = *MEMORY[0x24BE63290];
      LODWORD(v110) = v63;
      v65 = v108;
      if (v63 != v64)
      {
        while (1)
        {
          OUTLINED_FUNCTION_13_39(v33[1]);
LABEL_13:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      OUTLINED_FUNCTION_13_39(v33[12]);
      v66 = v62;
      v67 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v99, v66, v65);
      v68 = (char *)v59 + *(int *)(v55 + 28);
      v69 = v68[8];
      *v94 = *(_QWORD *)v68;
      v70 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v92 + 104);
      if ((v69 & 1) != 0)
      {
        OUTLINED_FUNCTION_9_38(*MEMORY[0x24BE62CE8], v70);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_14_31();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        OUTLINED_FUNCTION_16_31();
        *(_OWORD *)(OUTLINED_FUNCTION_1_44() + 16) = xmmword_21AFE7F70;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_10_34();
        v71 = FeatureType.StringParameters.init(optional:)();
        OUTLINED_FUNCTION_6_43(v71, *MEMORY[0x24BE62578]);
        v72 = v105;
        OUTLINED_FUNCTION_2_45();
        v115 = (uint64_t)v72;
        v116 = v60;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_0_51();
        OUTLINED_FUNCTION_10_34();
        static FeatureType.dictionaryWithStringKeys(optional:)();
      }
      else
      {
        OUTLINED_FUNCTION_9_38(*MEMORY[0x24BE62CE0], v70);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_14_31();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        OUTLINED_FUNCTION_16_31();
        *(_OWORD *)(OUTLINED_FUNCTION_1_44() + 16) = xmmword_21AFE7F70;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_10_34();
        v73 = FeatureType.IntParameters.init(optional:)();
        OUTLINED_FUNCTION_6_43(v73, *MEMORY[0x24BE62560]);
        v74 = v105;
        OUTLINED_FUNCTION_2_45();
        v115 = (uint64_t)v74;
        v116 = v60;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_0_51();
        OUTLINED_FUNCTION_10_34();
        static FeatureType.dictionaryWithIntKeys(optional:)();
      }
      OUTLINED_FUNCTION_2_45();
      Model.outputs.setter();
      v75 = v100;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v100, v67, v108);
      v105 = v102[13];
      ((void (*)(uint64_t, _QWORD, uint64_t))v105)(v75, v110, v109);
      Model.kind.setter();
      v76 = v98;
      Model.init()();
      Model.specificationVersion.setter();
      v77 = swift_bridgeObjectRetain();
      v78 = v112;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v77);
      v112 = v78;
      swift_bridgeObjectRelease();
      Model.inputs.setter();
      Model.outputs.getter();
      Model.outputs.setter();
      v79 = (void (*)(_QWORD, _QWORD, _QWORD))*v89;
      v80 = v89[1];
      OUTLINED_FUNCTION_195();
      Model.predictedFeatureName.setter();
      v115 = (uint64_t)v79;
      v116 = v80;
      OUTLINED_FUNCTION_195();
      OUTLINED_FUNCTION_0_51();
      Model.predictedProbabilitiesName.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
      v81 = v67;
      v82 = v103;
      v83 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_21AFE7DA0;
      v85 = v104;
      OUTLINED_FUNCTION_216(v84 + v83, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 16));
      v115 = v114;
      specialized Array.append<A>(contentsOf:)(v84);
      PipelineClassifierConfiguration.init(models:names:)();
      ((void (*)(uint64_t, _QWORD, uint64_t))v105)(v75, *MEMORY[0x24BE63268], v109);
      Model.kind.setter();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v81, v108);
      v111(v56, v85);
      OUTLINED_FUNCTION_216(v101, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 32));
      v86 = v88;
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      v53(v86, v113);
    }
  }
}

void OUTLINED_FUNCTION_0_51()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C696261626F7250;
  v0._object = (void *)0xEB00000000797469;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_44()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_45()
{
  return FeatureDescription.init(name:type:description:)();
}

uint64_t OUTLINED_FUNCTION_6_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 264) + 104))(v2, a2, *(_QWORD *)(v3 - 256));
}

uint64_t OUTLINED_FUNCTION_9_38@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, *(_QWORD *)(v3 - 280));
}

uint64_t OUTLINED_FUNCTION_10_34()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_11_34(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_12_36()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_39@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_14_31()
{
  return TreeEnsembleClassifierConfiguration.classLabels.setter();
}

uint64_t OUTLINED_FUNCTION_16_31()
{
  return type metadata accessor for FeatureDescription();
}

id MLBoostedTreeRegressor.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_5_38() + 20));
}

uint64_t type metadata accessor for MLBoostedTreeRegressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLBoostedTreeRegressor;
  if (!type metadata singleton initialization cache for MLBoostedTreeRegressor)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLBoostedTreeRegressor.model : MLBoostedTreeRegressor(id *a1)
{
  MLBoostedTreeRegressor.model.setter((uint64_t)*a1);
}

void MLBoostedTreeRegressor.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_5_38() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLBoostedTreeRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_5_38() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLBoostedTreeRegressor.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_5_38() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLBoostedTreeRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_5_38() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLBoostedTreeRegressor.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_5_38();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.featureColumns.getter()
{
  OUTLINED_FUNCTION_5_38();
  return swift_bridgeObjectRetain();
}

void MLBoostedTreeRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_5_38() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLBoostedTreeRegressor.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_5_38();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_5_38() + 32);
  return outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLBoostedTreeRegressor.ModelParameters(a2, a1);
  return a2;
}

id MLBoostedTreeRegressor.trainingMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_5_38();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 36));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

id MLBoostedTreeRegressor.validationMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_5_38();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 40));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

void static MLBoostedTreeRegressor._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v14)(void);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = (int *)OUTLINED_FUNCTION_5_38();
  *(_QWORD *)(v0 + 64) = v5;
  v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  v7 = v4 + v6;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v5[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v8 = swift_allocError();
  OUTLINED_FUNCTION_25_2(v8, v9, 0xD0000000000000C0);
  v10 = v5[7];
  *(_DWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v4 + v10) = v1;
  v11 = (_QWORD *)(v4 + v5[6]);
  *v11 = v3;
  v11[1] = v2;
  v14 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:);
  return OUTLINED_FUNCTION_39_2(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(int *)(v0 + 96);
  v3 = v1 + *(int *)(v0 + 100);
  v4 = outlined destroy of MLBoostedTreeRegressor.ModelParameters(*(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_48_0(v4, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

void MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::OpaquePointer v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::Int v117;
  Swift::String v118;
  int *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(_QWORD, _QWORD);
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  char v194;
  uint64_t v195;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  v187 = v23;
  v189 = (void (*)(_QWORD, _QWORD))v25;
  v190 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v186 = OUTLINED_FUNCTION_93();
  v188 = *(_QWORD *)(v186 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v33);
  v34 = type metadata accessor for TreeRegressorModel();
  v169 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_101_0();
  v171 = v35;
  v170 = v36;
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v38);
  v176 = type metadata accessor for BaseTreeRegressor();
  v175 = *(_QWORD *)(v176 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v40);
  v173 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v42);
  v179 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_64();
  v182 = v44;
  v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_211();
  v183 = v48;
  v181 = OUTLINED_FUNCTION_62_8();
  v49 = *(_QWORD *)(v181 - 8);
  MEMORY[0x24BDAC7A8](v181);
  OUTLINED_FUNCTION_50();
  v52 = v50 - v51;
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v158 - v54;
  MEMORY[0x24BDAC7A8](v56);
  v58 = (char *)&v158 - v57;
  v59 = type metadata accessor for MLBoostedTreeRegressor();
  v60 = v31 + *(int *)(v59 + 36);
  *(_QWORD *)v60 = 0;
  *(_QWORD *)(v60 + 8) = 0;
  v185 = v60;
  *(_BYTE *)(v60 + 16) = 0;
  v61 = *(int *)(v59 + 40);
  v172 = v31;
  v62 = v31 + v61;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v63, 0xD0000000000000C0);
  *(_QWORD *)v62 = v64;
  *(_QWORD *)(v62 + 8) = 0;
  v184 = v62;
  *(_BYTE *)(v62 + 16) = 1;
  v65 = v29;
  v66._countAndFlagsBits = v29;
  v66._object = v27;
  v67._countAndFlagsBits = 0x6C6562614CLL;
  v67._object = (void *)0xE500000000000000;
  v68 = v190;
  DataFrame.validateColumnIsNumeric(_:context:)(v66, v67);
  a10 = v69;
  if (v69)
  {
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_25();
    OUTLINED_FUNCTION_10_35(v68, *(uint64_t (**)(uint64_t, _QWORD))(v188 + 8));
    v70 = v184;
    goto LABEL_14;
  }
  v160 = v55;
  v161 = v52;
  v163 = v49;
  v159 = (int *)v59;
  v162 = v65;
  v165 = v27;
  v164 = v58;
  if (v189)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_77_0();
    v71 = v190;
    DataFrame.validateContainsColumns(_:context:)(v72, v73);
    OUTLINED_FUNCTION_74_12();
    v75 = *(_QWORD *)(v74 - 256);
    v76 = v185;
    a10 = v77;
    if (v77)
    {
      OUTLINED_FUNCTION_61_14();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_73_12();
      v78 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
      v79 = v71;
      v80 = &a17;
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    v83 = v165;
    v82 = v75;
  }
  else
  {
    OUTLINED_FUNCTION_74_12();
    v82 = *(_QWORD *)(v81 - 256);
    v76 = v185;
    v83 = v165;
  }
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v49, (uint64_t)&v193);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v193);
  _sypSgWOcTm_0(v49, (uint64_t)&v191, &demangling cache variable for type metadata for Any?);
  v84 = v162;
  if (v192)
  {
    OUTLINED_FUNCTION_56_17();
    v86 = v82 + v85;
    outlined init with take of Any(&v191, &v193);
    swift_dynamicCast();
    v87 = v190;
    v88 = a10;
    MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    a10 = v88;
    if (!v88)
    {
      v182 = v86;
      OUTLINED_FUNCTION_203(v89, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
      v92 = a10;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v82, v84, v83, (uint64_t)v189);
      v185 = v93;
      v94 = v181;
      v95 = v188;
      a10 = v92;
      if (!v92)
      {
        OUTLINED_FUNCTION_104();
        v96 = (uint64_t)v160;
        OUTLINED_FUNCTION_70_15((uint64_t)v160, v68);
        v97 = v177;
        *v177 = v84;
        v97[1] = (uint64_t)v83;
        v98 = v185;
        v97[2] = v185;
        v97[3] = v98;
        OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
        OUTLINED_FUNCTION_70_15(v161, v96);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v99 = v174;
        OUTLINED_FUNCTION_62_18();
        v100 = v82;
        v101 = v68;
        v102 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
        v103 = v181;
        v102(v96, v181);
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 32))((char *)v97 + *(int *)(v173 + 28), v99, v176);
        v104 = v182;
        v105 = a10;
        TreeRegressor.fitted(to:validateOn:eventHandler:)(v100, v182, 0, 0, v106, v107, v108, v109, v158, (uint64_t)v159, (uint64_t)v160, v161, v162, v163, (uint64_t)v164, (uint64_t)v165, v166, v167, v168,
          v169);
        a10 = v105;
        if (!v105)
        {
          v189 = v102;
          if ((AnalyticsReporter.init()() & 1) == 0)
          {
            OUTLINED_FUNCTION_56_17();
            v112 = v168;
            v114 = v168 + v113;
            v115 = v188;
            v116 = v186;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 16))(v168, v183, v186);
            _sypSgWOcTm_0(v104, v114, &demangling cache variable for type metadata for DataFrame?);
            v117 = DataFrame.shape.getter();
            (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v112, v116);
            v118._countAndFlagsBits = 0xD000000000000015;
            v118._object = (void *)0x800000021AFF21D0;
            AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeRegressor, v118, v117);
          }
          v119 = v159;
          v120 = v172;
          v121 = (_QWORD *)(v172 + v159[6]);
          v122 = (uint64_t)v165;
          v176 = (uint64_t)v121;
          *v121 = v162;
          v121[1] = v122;
          v123 = v187;
          v179 = v120 + v119[8];
          outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v187, v179);
          v175 = v119[7];
          *(_QWORD *)(v120 + v175) = v185;
          v124 = v178;
          v125 = v171;
          _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v178, v171, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          v126 = (*(unsigned __int8 *)(v169 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
          v127 = swift_allocObject();
          outlined init with take of TreeRegressorModel(v125, v127 + v126, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          v128 = a10;
          specialized blockAwait<A>(_:)();
          a10 = v128;
          if (v128)
          {
            swift_release();
            outlined destroy of MLBoostedTreeRegressor.ModelParameters(v123);
            v130 = OUTLINED_FUNCTION_10_35(v190, *(uint64_t (**)(uint64_t, _QWORD))(v188 + 8));
            OUTLINED_FUNCTION_84_6(v130, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
            OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor, (uint64_t)&v195);
            OUTLINED_FUNCTION_19_3(v131, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            OUTLINED_FUNCTION_1_45();
          }
          else
          {
            v132 = v129;
            swift_release();
            v133 = v119[5];
            *(_QWORD *)(v120 + v133) = v132;
            _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v124, v120, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
            v134 = v183;
            v135 = a10;
            TreeRegressorModel.computeMetrics(on:)(v183, &v193);
            a10 = v135;
            if (v135)
            {
              OUTLINED_FUNCTION_25_25();
              v136 = OUTLINED_FUNCTION_10_35(v190, *(uint64_t (**)(uint64_t, _QWORD))(v188 + 8));
              OUTLINED_FUNCTION_84_6(v136, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
              OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor, (uint64_t)&v195);
              OUTLINED_FUNCTION_44_22(v137, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
              OUTLINED_FUNCTION_1_45();
            }
            else
            {
              v139 = v193;
              v140 = v194;
              OUTLINED_FUNCTION_94_0();
              *(_OWORD *)v76 = v139;
              *(_BYTE *)(v76 + 16) = v140;
              OUTLINED_FUNCTION_56_17();
              v141 = v167;
              v143 = v167 + v142;
              v144 = v188;
              v145 = v186;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 16))(v167, v134, v186);
              _sypSgWOcTm_0(v182, v143, &demangling cache variable for type metadata for DataFrame?);
              if (__swift_getEnumTagSinglePayload(v143, 1, v145) == 1)
              {
                OUTLINED_FUNCTION_25_25();
                v146 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
                v146(v190, v145);
                OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel, (uint64_t)&a9);
                OUTLINED_FUNCTION_63_6(v147, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
                OUTLINED_FUNCTION_44_22(v148, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
                OUTLINED_FUNCTION_1_45();
                outlined destroy of URL?(v143, &demangling cache variable for type metadata for DataFrame?);
                v146(v141, v145);
                goto LABEL_15;
              }
              v149 = v166;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 32))(v166, v143, v145);
              OUTLINED_FUNCTION_36_24(v141);
              v150 = a10;
              TreeRegressorModel.computeMetrics(on:)(v149, &v193);
              a10 = v150;
              if (!v150)
              {
                outlined destroy of MLBoostedTreeRegressor.ModelParameters(v187);
                OUTLINED_FUNCTION_36_24(v190);
                OUTLINED_FUNCTION_36_24(v149);
                OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel, (uint64_t)&a9);
                OUTLINED_FUNCTION_63_6(v153, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
                OUTLINED_FUNCTION_19_3(v154, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
                OUTLINED_FUNCTION_1_45();
                v155 = v193;
                v156 = v194;
                v157 = v184;
                outlined consume of Result<_RegressorMetrics, Error>(*(id *)v184, *(_QWORD *)(v184 + 8), *(_BYTE *)(v184 + 16));
                *(_OWORD *)v157 = v155;
                *(_BYTE *)(v157 + 16) = v156;
                goto LABEL_15;
              }
              outlined destroy of MLBoostedTreeRegressor.ModelParameters(v187);
              OUTLINED_FUNCTION_36_24(v190);
              OUTLINED_FUNCTION_36_24(v149);
              OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel, (uint64_t)&a9);
              OUTLINED_FUNCTION_63_6(v151, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
              OUTLINED_FUNCTION_19_3(v152, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
              OUTLINED_FUNCTION_1_45();
              v120 = v172;
            }
            outlined destroy of MLHandPoseClassifier.ModelParameters(v120, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);

          }
          v70 = v184;
          v138 = v179;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of MLBoostedTreeRegressor.ModelParameters(v138);
LABEL_14:
          OUTLINED_FUNCTION_94_0();
          outlined consume of Result<_RegressorMetrics, Error>(*(id *)v70, *(_QWORD *)(v70 + 8), *(_BYTE *)(v70 + 16));
LABEL_15:
          OUTLINED_FUNCTION_7();
          return;
        }
        OUTLINED_FUNCTION_61_14();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_25();
        v110 = OUTLINED_FUNCTION_10_35(v190, *(uint64_t (**)(uint64_t, _QWORD))(v188 + 8));
        OUTLINED_FUNCTION_203(v110, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
        OUTLINED_FUNCTION_44_22(v111, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        v102(v101, v103);
LABEL_13:
        v70 = v184;
        goto LABEL_14;
      }
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_73_12();
      OUTLINED_FUNCTION_10_35(v190, *(uint64_t (**)(uint64_t, _QWORD))(v95 + 8));
      outlined destroy of URL?(v82, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      v79 = OUTLINED_FUNCTION_63_14();
      v91 = v94;
LABEL_12:
      v78(v79, v91);
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_73_12();
    v90 = OUTLINED_FUNCTION_10_35(v87, *(uint64_t (**)(uint64_t, _QWORD))(v188 + 8));
    OUTLINED_FUNCTION_203(v90, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
    v79 = OUTLINED_FUNCTION_63_14();
    v80 = &a12;
LABEL_11:
    v91 = *(v80 - 32);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  v12 = *(_BYTE *)(a1 + 8);
  v16 = *(_QWORD *)a1;
  LOBYTE(v17) = v12;
  DataFrame.init(_:)((uint64_t)&v16);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters(a5, (uint64_t)&v16);
  MLBoostedTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v5, a2, a3, a4, (uint64_t)&v16, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
    v27);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLBoostedTreeRegressor.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  v3 = v2;
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_211();
  v6 = type metadata accessor for TreeRegressorModel();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_101_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5();
  v12 = v3 + *(int *)(type metadata accessor for MLBoostedTreeRegressor() + 36);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 0;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v13 = OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_25_2(v13, v14, 0xD0000000000000C0);
  v15 = (char *)sub_21AF128A0
      + 4 * byte_21AFED930[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AF128A0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    v15 = OUTLINED_FUNCTION_44_2(v14, 0xD000000000000041);
    swift_willThrow(v15);
    v22 = type metadata accessor for MLCheckpoint;
    v23 = *(_QWORD *)(v5 - 72);
    goto LABEL_6;
  }
  BoostedTreeConfiguration.init()();
  *(_QWORD *)v0 = 0;
  *((_QWORD *)v0 + 1) = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 2) = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 3) = v7;
  OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
  v9 = *(_QWORD *)(v5 - 168);
  v8 = *(_QWORD *)(v5 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  v10 = *(_QWORD *)(v5 - 152);
  OUTLINED_FUNCTION_62_18();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v5 - 144) + 32))(&v0[*(int *)(v1 + 28)], v10, *(_QWORD *)(v5 - 136));
  lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  v11 = *(_QWORD *)(v5 - 128);
  v12 = *(_QWORD *)(v5 - 120);
  v13 = *(_QWORD *)(v5 - 72);
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v11)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v22 = type metadata accessor for TreeRegressor;
    v23 = (uint64_t)v0;
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v23, (uint64_t (*)(_QWORD))v22);
    OUTLINED_FUNCTION_94_0();
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v5 - 176);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v12, v16, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 192) + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject();
  outlined init with take of TreeRegressorModel(v16, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  specialized blockAwait<A>(_:)();
  v21 = v20;
  swift_release();
  v24 = *(int **)(v5 - 232);
  v25 = *(_QWORD *)(v5 - 200);
  *(_QWORD *)(v25 + v24[5]) = v21;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(*(_QWORD *)(v5 - 120), v25, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v26 = *(_QWORD *)(v5 - 216);
  v27 = *(_QWORD *)(v5 - 208);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_WORD *)(v27 + 16) = 256;
  swift_storeEnumTagMultiPayload();
  v28 = v25 + v24[8];
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = xmmword_21AFE84D0;
  *(_OWORD *)(v28 + 48) = xmmword_21AFE84E0;
  *(_QWORD *)(v28 + 64) = 42;
  *(_QWORD *)(v28 + 72) = 0x3FD3333333333333;
  *(_QWORD *)(v28 + 80) = 0;
  *(_BYTE *)(v28 + 88) = 1;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v28 + 96) = _Q0;
  v34 = *(_QWORD *)(v5 - 224);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v27, v34, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
  *(_QWORD *)(v5 - 88) = v26;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v5 - 112));
  outlined init with take of TreeRegressorModel(v34, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?(v5 - 112, v28);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v27, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
  v36 = (_QWORD *)(v25 + v24[6]);
  *v36 = 0;
  v36[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_84_6(v37, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 120), (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  OUTLINED_FUNCTION_203(v38, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
  *(_QWORD *)(v25 + v24[7]) = MEMORY[0x24BEE4AF8];
LABEL_7:
  OUTLINED_FUNCTION_7();
}

void static MLBoostedTreeRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v5);
  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLBoostedTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _UNKNOWN **v46;
  __int128 v47;
  uint64_t v48;

  OUTLINED_FUNCTION_8_1();
  v42 = v1;
  v43 = v2;
  v4 = v3;
  v41 = v5;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v40 = v8;
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v34 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v34 - v17;
  v38 = v4;
  _sypSgWOcTm_0(v4, (uint64_t)&v47, &demangling cache variable for type metadata for Any?);
  if (v48)
  {
    v19 = (uint64_t)&v18[*(int *)(v11 + 48)];
    outlined init with take of Any(&v47, &v44);
    swift_dynamicCast();
    MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v20, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData);
    if (!v0)
    {
      v21 = v15;
      v22 = (uint64_t)&v15[*(int *)(v11 + 48)];
      v34[2] = v21;
      v23 = OUTLINED_FUNCTION_93();
      v35 = *(_QWORD *)(v23 - 8);
      v24 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      v24(v21, v18, v23);
      v36 = v22;
      _sypSgWOcTm_0(v19, v22, &demangling cache variable for type metadata for DataFrame?);
      v25 = v39;
      v26 = v39 + *(int *)(v11 + 48);
      v34[1] = v26;
      v34[3] = v23;
      v24((char *)v39, v18, v23);
      _sypSgWOcTm_0(v19, v26, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLBoostedTreeRegressor.ModelParameters(v38, (uint64_t)&v44);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters((uint64_t)&v44);
      v27 = v43;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v43, v40, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v28 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v29 = TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      v30 = OUTLINED_FUNCTION_34_3(v25, *(uint64_t (**)(uint64_t, _QWORD))(v35 + 8));
      OUTLINED_FUNCTION_19_3(v30, &demangling cache variable for type metadata for DataFrame?);
      v45 = v28;
      v46 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
      *(_QWORD *)&v44 = v29;
      v31 = v37;
      OUTLINED_FUNCTION_97(v27, v32, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v44, v31, 4);
      OUTLINED_FUNCTION_44_22(v33, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLBoostedTreeRegressor.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeRegressor>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLBoostedTreeRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  v6 = v4 - v5;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15[-1] - v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v15[-1] - v8, v10);
  v11 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v12 = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    v15[3] = v11;
    v15[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v15[0] = v12;
    OUTLINED_FUNCTION_97(a1, v13, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v15, v6, 4);
  }
}

void closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLBoostedTreeRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[36] = a1;
  v2[37] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[38] = OUTLINED_FUNCTION_4_6();
  v2[39] = OUTLINED_FUNCTION_5_38();
  v2[40] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[41] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[42] = v3;
  v2[43] = *(_QWORD *)(v3 - 8);
  v2[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[45] = OUTLINED_FUNCTION_4_6();
  v2[46] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[47] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLBoostedTreeRegressor.init(delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[45];
  v2 = v0[46];
  v3 = v0[37] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (int *)v0[46];
    v5 = v0[47];
    v7 = v0[44];
    v8 = v0[42];
    v9 = v0[43];
    v10 = v0[41];
    v12 = v0[37];
    v11 = v0[38];
    outlined init with take of TreeRegressorModel(v0[45], v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
    _sypSgWOcTm_0(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
    MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
    v13 = (uint64_t *)(v5 + v6[6]);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_QWORD *)(v5 + v6[7]);
    v17 = v12 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v17, v11, &demangling cache variable for type metadata for TreeRegressorModel?);
    v18 = OUTLINED_FUNCTION_42_2();
    result = __swift_getEnumTagSinglePayload(v11, 1, v18);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLBoostedTreeRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = (_QWORD *)swift_task_alloc();
      v0[48] = v19;
      *v19 = v0;
      v19[1] = MLBoostedTreeRegressor.init(delegate:);
      return MLBoostedTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(v0[40], v0[38], v15, v14, v16, (uint64_t)(v0 + 16));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0 + 16);
  OUTLINED_FUNCTION_48_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_39_2(*(uint64_t (**)(void))(v0 + 8));
}

void MLBoostedTreeRegressor.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 296);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor);
  v2 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v3 == 255)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 296);
    v7 = v3 & 1;
    v9 = *(id *)v2;
    v8 = *(_QWORD *)(v2 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v2, v8, v3 & 1);
    v10 = outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0 + 16);
    OUTLINED_FUNCTION_48_0(v10, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    v11 = v6 + *(int *)(v4 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    *(_QWORD *)v11 = v9;
    *(_QWORD *)(v11 + 8) = v8;
    *(_BYTE *)(v11 + 16) = v7;
    v13 = *(void **)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    v14 = *(unsigned __int8 *)(v5
                             + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v13, v12, *(_BYTE *)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v14 != 255)
    {
      v15 = *(_QWORD *)(v0 + 288) + *(int *)(*(_QWORD *)(v0 + 312) + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      *(_QWORD *)v15 = v13;
      *(_QWORD *)(v15 + 8) = v12;
      *(_BYTE *)(v15 + 16) = v14 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
  }
}

void MLBoostedTreeRegressor.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLBoostedTreeRegressor();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    TreeRegressorModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLBoostedTreeRegressor.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLBoostedTreeRegressor.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLBoostedTreeRegressor.evaluation(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  Swift::OpaquePointer v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;

  v5 = OUTLINED_FUNCTION_5_38();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (v8)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v10 = (_QWORD *)(v2 + *(int *)(v5 + 24));
  v11 = v10[1];
  *(_QWORD *)(inited + 32) = *v10;
  *(_QWORD *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 0x6C6562614CLL;
  v12._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v12);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v8)
  {
LABEL_4:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(a1, (_QWORD *)a2);
  }
}

uint64_t MLBoostedTreeRegressor.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLBoostedTreeRegressor.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLBoostedTreeRegressor.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[10];

  OUTLINED_FUNCTION_8_1();
  v30 = v0;
  v5 = v4;
  v36 = v6;
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_46_2();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v29 = v5[1];
  v34 = v5[2];
  v35 = *v5;
  v32 = v5[4];
  v33 = v5[3];
  v12 = v5[6];
  v31 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v36, 0xD000000000000014, 0x800000021AFF6690, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v28 = v13;
    v37 = v2;
    OUTLINED_FUNCTION_97(v30, v15, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    if (v29)
    {
      v16 = v35;
      v17 = v35;
      v18 = v29;
      v19 = v34;
      v20 = v33;
      v21 = v32;
      v22 = v31;
      v23 = v12;
      v24 = v28;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v19 = 0xD000000000000033;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v23 = 49;
      v16 = v35;
    }
    v38[0] = v17;
    v38[1] = v18;
    v38[2] = v19;
    v38[3] = v20;
    v38[4] = v21;
    v38[5] = v22;
    v38[6] = v23;
    v38[7] = v24;
    v38[8] = v14;
    outlined copy of MLModelMetadata?(v16, v29);
    specialized CoreMLExportable.export(metadata:)(v38);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    Model.write(to:)();
    OUTLINED_FUNCTION_34_3(v37, *(uint64_t (**)(uint64_t, _QWORD))(v9 + 8));
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLBoostedTreeRegressor.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v19 = v2;
  v4 = v3;
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_161();
  v12 = *v4;
  v17 = v4[1];
  v18 = v12;
  v13 = v4[2];
  v15 = v4[3];
  v16 = v13;
  v14 = *((_QWORD *)v4 + 8);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v0, *MEMORY[0x24BDCD7A0], v5);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  MLBoostedTreeRegressor.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  OUTLINED_FUNCTION_7();
}

unint64_t MLBoostedTreeRegressor.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  char v8;
  unint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v1 = OUTLINED_FUNCTION_5_38();
  v2 = MLBoostedTreeRegressor.ModelParameters.description.getter();
  v4 = v3;
  v5 = MLRegressorMetrics.description.getter();
  v7 = v6;
  v8 = *(_BYTE *)(v0 + *(int *)(v1 + 40) + 16);
  v9 = MLRegressorMetrics.description.getter();
  v11 = v10;
  v12._countAndFlagsBits = v2;
  v12._object = v4;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v5;
  v13._object = v7;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD00000000000001ELL;
  v14._object = (void *)0x800000021AFF1480;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v15._countAndFlagsBits = v9;
    v15._object = v11;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD000000000000020;
    v16._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

void MLBoostedTreeRegressor.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLBoostedTreeRegressor.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t partial apply for closure #1 in MLBoostedTreeRegressor.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(v2);
}

id sub_21AF144A0@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = MLBoostedTreeRegressor.model.getter();
  *a1 = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLBoostedTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  id v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[5];
    v18 = a3[6];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = (_QWORD *)((char *)a1 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    v24 = a3[7];
    v25 = a3[8];
    v26 = *(_QWORD *)((char *)a2 + v24);
    *v20 = v22;
    v20[1] = v23;
    *(_QWORD *)((char *)a1 + v24) = v26;
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    v29 = *(_QWORD *)((char *)a2 + v25 + 24);
    v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((_QWORD *)v27 + 3) = v29;
      (**(void (***)(char *, char *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      v31 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    v32 = *((_OWORD *)v28 + 3);
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    *((_OWORD *)v27 + 3) = v32;
    *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
    *((_QWORD *)v27 + 10) = *((_QWORD *)v28 + 10);
    v27[88] = v28[88];
    *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
    v33 = a3[9];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(id *)v35;
    v37 = *((_QWORD *)v35 + 1);
    v38 = v35[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v35, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = a3[10];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *(id *)v41;
    v43 = *((_QWORD *)v41 + 1);
    LOBYTE(v36) = v41[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v41, v43, (char)v36);
    *(_QWORD *)v40 = v42;
    *((_QWORD *)v40 + 1) = v43;
    v40[16] = (char)v36;
  }
  return a1;
}

_QWORD *initializeWithCopy for MLBoostedTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  id v40;
  uint64_t v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[5];
  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  v22 = a3[7];
  v23 = a3[8];
  v24 = *(_QWORD *)((char *)a2 + v22);
  *v18 = v20;
  v18[1] = v21;
  *(_QWORD *)((char *)a1 + v22) = v24;
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  v27 = *(_QWORD *)((char *)a2 + v23 + 24);
  v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((_QWORD *)v25 + 3) = v27;
    (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    v29 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  v30 = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = v30;
  *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
  *((_QWORD *)v25 + 10) = *((_QWORD *)v26 + 10);
  v25[88] = v26[88];
  *((_OWORD *)v25 + 6) = *((_OWORD *)v26 + 6);
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(id *)v33;
  v35 = *((_QWORD *)v33 + 1);
  v36 = v33[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v33, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(id *)v39;
  v41 = *((_QWORD *)v39 + 1);
  LOBYTE(v34) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v34);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = (char)v34;
  return a1;
}

_QWORD *assignWithCopy for MLBoostedTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[5];
  v16 = *(void **)((char *)a2 + v15);
  v17 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  v18 = v16;

  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (uint64_t)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22 + 24);
  if (!*(_QWORD *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(_QWORD *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
  *(_QWORD *)(v23 + 40) = *((_QWORD *)v24 + 5);
  *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
  *(_QWORD *)(v23 + 56) = *((_QWORD *)v24 + 7);
  *(_QWORD *)(v23 + 64) = *((_QWORD *)v24 + 8);
  *(_QWORD *)(v23 + 72) = *((_QWORD *)v24 + 9);
  v27 = *((_QWORD *)v24 + 10);
  *(_BYTE *)(v23 + 88) = v24[88];
  *(_QWORD *)(v23 + 80) = v27;
  *(_QWORD *)(v23 + 96) = *((_QWORD *)v24 + 12);
  *(_QWORD *)(v23 + 104) = *((_QWORD *)v24 + 13);
  v28 = a3[9];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = *(id *)v30;
  v32 = *((_QWORD *)v30 + 1);
  v33 = v30[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v30, v32, v33);
  v34 = *(void **)v29;
  v35 = *((_QWORD *)v29 + 1);
  v36 = v29[16];
  *(_QWORD *)v29 = v31;
  *((_QWORD *)v29 + 1) = v32;
  v29[16] = v33;
  outlined consume of Result<_RegressorMetrics, Error>(v34, v35, v36);
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(id *)v39;
  v41 = *((_QWORD *)v39 + 1);
  LOBYTE(v31) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v31);
  v42 = *(void **)v38;
  v43 = *((_QWORD *)v38 + 1);
  v44 = v38[16];
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = (char)v31;
  outlined consume of Result<_RegressorMetrics, Error>(v42, v43, v44);
  return a1;
}

_QWORD *assignWithTake for MLBoostedTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  void *v35;
  uint64_t v36;
  char v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[5];
  v14 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);

  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  if (*(_QWORD *)((char *)a1 + v20 + 24))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  v23 = *(_OWORD *)((char *)a2 + v20 + 48);
  *((_OWORD *)v21 + 2) = *(_OWORD *)((char *)a2 + v20 + 32);
  *((_OWORD *)v21 + 3) = v23;
  *((_QWORD *)v21 + 8) = *(_QWORD *)((char *)a2 + v20 + 64);
  *((_QWORD *)v21 + 9) = *(_QWORD *)((char *)a2 + v20 + 72);
  *((_QWORD *)v21 + 10) = *(_QWORD *)((char *)a2 + v20 + 80);
  v21[88] = *((_BYTE *)a2 + v20 + 88);
  *((_OWORD *)v21 + 6) = *(_OWORD *)((char *)a2 + v20 + 96);
  v24 = a3[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v26[16];
  v28 = *(void **)v25;
  v29 = *((_QWORD *)v25 + 1);
  v30 = v25[16];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v27;
  outlined consume of Result<_RegressorMetrics, Error>(v28, v29, v30);
  v31 = a3[10];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = v33[16];
  v35 = *(void **)v32;
  v36 = *((_QWORD *)v32 + 1);
  v37 = v32[16];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v32[16] = v34;
  outlined consume of Result<_RegressorMetrics, Error>(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF14CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF14D58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLBoostedTreeRegressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21AF14E64()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLBoostedTreeRegressor.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_1_45()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 248))(*(_QWORD *)(v0 - 448), *(_QWORD *)(v0 - 312));
}

uint64_t OUTLINED_FUNCTION_5_38()
{
  return type metadata accessor for MLBoostedTreeRegressor();
}

uint64_t OUTLINED_FUNCTION_10_35@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 272));
}

uint64_t OUTLINED_FUNCTION_25_25()
{
  uint64_t v0;

  return outlined destroy of MLBoostedTreeRegressor.ModelParameters(*(_QWORD *)(v0 - 264));
}

uint64_t OUTLINED_FUNCTION_36_24(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_44_22(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_61_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_62_18()
{
  return BaseTreeRegressor.init(configuration:)();
}

uint64_t OUTLINED_FUNCTION_63_14()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_70_15(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD);
  uint64_t v3;

  return v2(a1, a2, *(_QWORD *)(v3 - 312));
}

uint64_t OUTLINED_FUNCTION_73_12()
{
  uint64_t v0;

  return outlined destroy of MLBoostedTreeRegressor.ModelParameters(v0);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_42_7(v3);
  DataFrame.init()();
  v4 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_42_7(v4);
  v5 = OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_42_7(v5);
  v6 = OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_42_7(v6);
  v7 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_57_0(v7);
  OUTLINED_FUNCTION_57_0(v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics);
  outlined init with take of MLLogisticRegressionClassifier.Model(a1, v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

_QWORD *LogisticRegressionClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:modelParameters:sessionParameters:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void *v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  _BYTE v96[96];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  OUTLINED_FUNCTION_8_1();
  v98 = v2;
  v99 = v3;
  v91 = v1;
  v4 = v0;
  v89 = v5;
  v93 = v6;
  v90 = v7;
  v94 = v8;
  v95 = v9;
  v11 = v10;
  v97 = v12;
  v88 = *v0;
  v13 = OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v83 = v19;
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_68_3((uint64_t)&v79 - v21);
  v22 = OUTLINED_FUNCTION_93();
  v92 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_50();
  inited = v23 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v79 - v27;
  v29 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  v85 = (int *)v13;
  __swift_storeEnumTagSinglePayload((uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, 1, 1, v13);
  DataFrame.init()();
  OUTLINED_FUNCTION_48_16((uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData);
  v30 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  v31 = OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_37_0(v30, v32, v33, v31);
  v34 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
  v35 = OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_37_0(v34, v36, v37, v35);
  v38 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_75_8(v38);
  OUTLINED_FUNCTION_75_8((uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics);
  v39 = v11;
  v40 = v11;
  v41 = v95;
  v42 = v90;
  v43 = v91;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v97, v40, v95, (uint64_t)v90);
  if (!v43)
  {
    v81 = v44;
    v91 = 0;
    v79 = inited;
    v80 = v29;
    v82 = v39;
    swift_bridgeObjectRelease();
    v49 = v87;
    OUTLINED_FUNCTION_67_16(v94, v50, &demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_128(v49, 1, v22);
    if (v51)
    {
      outlined destroy of URL?(v49, &demangling cache variable for type metadata for DataFrame?);
      v52 = v92;
      v53 = v93;
    }
    else
    {
      v42 = (_QWORD *)v92;
      v67 = (uint64_t)v28;
      OUTLINED_FUNCTION_9_37((uint64_t)v28, v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 32));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
      v29 = v82;
      v41 = (_QWORD *)v22;
      v68 = v95;
      *(_QWORD *)(inited + 32) = v82;
      *(_QWORD *)(inited + 40) = v68;
      swift_bridgeObjectRetain();
      v69._object = (void *)0x800000021AFF3970;
      v69._countAndFlagsBits = 0xD00000000000001CLL;
      v90 = (_QWORD *)0x800000021AFF3970;
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v69);
      if (v70)
      {
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        OUTLINED_FUNCTION_10_3();
        v71 = OUTLINED_FUNCTION_72_12();
        OUTLINED_FUNCTION_26_29(v71, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        v72 = OUTLINED_FUNCTION_54_14();
        OUTLINED_FUNCTION_78_9(v72, &demangling cache variable for type metadata for DataFrame?);
        v47 = (void (*)(uint64_t, uint64_t))v42[1];
        OUTLINED_FUNCTION_34_25(v97);
        OUTLINED_FUNCTION_34_25(v67);
        v22 = (uint64_t)v41;
        goto LABEL_3;
      }
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      inited = swift_allocObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
      v73 = MEMORY[0x24BEE1768];
      *(_QWORD *)(inited + 32) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(inited + 40) = v73;
      v74._countAndFlagsBits = v29;
      v74._object = v68;
      v75._countAndFlagsBits = 0xD00000000000001CLL;
      v75._object = v90;
      DataFrame.validateColumnTypes(_:_:context:)(v74, (Swift::OpaquePointer)inited, v75);
      v29 = (uint64_t)v28;
      v91 = v76;
      if (v76)
      {
        OUTLINED_FUNCTION_10_3();
        OUTLINED_FUNCTION_72_12();
        v77 = OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_26_29(v77, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        v78 = OUTLINED_FUNCTION_54_14();
        OUTLINED_FUNCTION_78_9(v78, &demangling cache variable for type metadata for DataFrame?);
        v47 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
        v22 = (uint64_t)v41;
        OUTLINED_FUNCTION_34_25(v97);
        OUTLINED_FUNCTION_34_25(v67);
        OUTLINED_FUNCTION_52_13();
        goto LABEL_4;
      }
      v52 = v92;
      v22 = (uint64_t)v41;
      (*(void (**)(char *, _QWORD *))(v92 + 8))(v28, v41);
      OUTLINED_FUNCTION_12_0();
      v53 = v93;
    }
    v54 = v85;
    v55 = v84;
    v56 = v83;
    v57 = v79;
    OUTLINED_FUNCTION_9_37(v79, v97, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
    v58 = v94;
    OUTLINED_FUNCTION_67_16(v94, v59, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v53, (uint64_t)v96);
    v60 = v56;
    v61 = v55 + v54[5];
    OUTLINED_FUNCTION_48_16(v61);
    OUTLINED_FUNCTION_9_37(v55, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32));
    outlined assign with take of MLClassifierMetrics?(v60, v61, &demangling cache variable for type metadata for DataFrame?);
    v62 = (uint64_t *)(v55 + v54[6]);
    v63 = (uint64_t)v95;
    *v62 = v82;
    v62[1] = v63;
    *(_QWORD *)(v55 + v54[7]) = v81;
    memcpy((void *)(v55 + v54[8]), v96, 0x49uLL);
    v64 = v86;
    outlined init with take of MLLogisticRegressionClassifier.Model(v55, v86, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    OUTLINED_FUNCTION_54_14();
    outlined destroy of URL?(v58, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v97, v22);
    OUTLINED_FUNCTION_12_37(v64);
    v65 = v80;
    OUTLINED_FUNCTION_4_28();
    outlined assign with take of MLClassifierMetrics?(v64, v65, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    swift_endAccess();
    outlined init with take of MLLogisticRegressionClassifier.Model(v89, (uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    return v4;
  }
  swift_bridgeObjectRelease();
  v45 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_29(v45, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v46 = OUTLINED_FUNCTION_54_14();
  OUTLINED_FUNCTION_78_9(v46, &demangling cache variable for type metadata for DataFrame?);
  v47 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v47(v97, v22);
LABEL_3:
  OUTLINED_FUNCTION_52_13();
LABEL_4:
  outlined destroy of URL?((uint64_t)v4 + *(_QWORD *)(v48 + 408), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v47((uint64_t)v4 + *(_QWORD *)(inited + 416), v22);
  outlined destroy of URL?((uint64_t)v4 + *(_QWORD *)(v29 + 424), &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?((uint64_t)v4 + v41[54], &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  outlined destroy of URL?((uint64_t)v4 + v42[55], &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  outlined destroy of URL?((uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of URL?((uint64_t)v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_deallocPartialClassInstance();
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LogisticRegressionClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;

  OUTLINED_FUNCTION_8_1();
  v52 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v53 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v58 = v8;
  v57 = OUTLINED_FUNCTION_56_6();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_31_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v54 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v59 = (char *)&v50 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_161();
  v19 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v19, (uint64_t)v16, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v20 = OUTLINED_FUNCTION_128((uint64_t)v16, 1, (uint64_t)v17);
  if (v22)
  {
    outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_62_19(v20, v21, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    v23 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
    OUTLINED_FUNCTION_4_28();
    v24 = OUTLINED_FUNCTION_93();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v23, v2, v24);
    OUTLINED_FUNCTION_8_42();
    v25 = v2 + v17[5];
    v55 = v0;
    v26 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_4_28();
    outlined assign with copy of DataFrame?(v25, v26);
    OUTLINED_FUNCTION_8_42();
    v27 = (uint64_t *)(v2 + v17[6]);
    v29 = *v27;
    v28 = v27[1];
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_195();
    v56 = v3;
    MEMORY[0x220758A1C](v29, v28);
    OUTLINED_FUNCTION_8_42();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_44_7();
    if (__swift_getEnumTagSinglePayload(v26, 1, v24))
    {
      OUTLINED_FUNCTION_8_42();
      v30 = 1;
      v31 = v1;
      v32 = v58;
      v33 = (uint64_t)v59;
    }
    else
    {
      OUTLINED_FUNCTION_195();
      v32 = v58;
      MEMORY[0x220758A1C](v29, v28);
      OUTLINED_FUNCTION_8_42();
      OUTLINED_FUNCTION_101();
      v30 = 0;
      v31 = v1;
      v33 = (uint64_t)v59;
    }
    __swift_storeEnumTagSinglePayload(v32, v30, 1, v57);
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters((uint64_t *)(v2 + v17[8]), (uint64_t)&v60);
    OUTLINED_FUNCTION_195();
    swift_bridgeObjectRetain();
    MLLogisticRegressionClassifier.Classifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:parameters:)();
    if (v31)
    {
      OUTLINED_FUNCTION_63_6(v34, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
LABEL_9:
      OUTLINED_FUNCTION_7();
      return;
    }
    v35 = OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_12_37(v33);
    v36 = v55 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_4_28();
    outlined assign with take of MLClassifierMetrics?(v33, v36, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    OUTLINED_FUNCTION_8_42();
    v37 = v36;
    v38 = v54;
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v37, v54, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    v39 = OUTLINED_FUNCTION_94_2();
    OUTLINED_FUNCTION_128(v39, v40, v35);
    if (!v22)
    {
      v41 = *(_QWORD *)v38;
      v42 = *(_QWORD *)(v38 + 8);
      v43 = *(_QWORD *)(v38 + 104);
      v61 = *(_BYTE *)(v38 + 112);
      swift_bridgeObjectRetain();
      v44 = v50;
      BaseLogisticRegressionClassifier.makeTransformer(classCount:)();
      v45 = v53;
      *(_QWORD *)v53 = v41;
      *((_QWORD *)v45 + 1) = v42;
      v46 = OUTLINED_FUNCTION_35_6();
      *((_QWORD *)v45 + 3) = 0;
      *((_QWORD *)v45 + 4) = 0;
      *((_QWORD *)v45 + 2) = 0;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(&v45[*(int *)(v46 + 24)], v44, v52);
      v47 = &v45[*(int *)(v46 + 28)];
      *(_QWORD *)v47 = v43;
      v47[8] = v61;
      v48 = OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_63_6(v48, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v38, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
      OUTLINED_FUNCTION_12_37((uint64_t)v45);
      v49 = v55 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_4_28();
      outlined assign with take of MLClassifierMetrics?((uint64_t)v45, v49, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
      OUTLINED_FUNCTION_8_42();
      goto LABEL_9;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LogisticRegressionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_8_1();
  v29 = v2;
  v36 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v30 = v9;
  MEMORY[0x24BDAC7A8](v10);
  v34 = (char *)&v28 - v11;
  v12 = OUTLINED_FUNCTION_56_6();
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v31 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_64();
  v35 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_161();
  v21 = OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_31_4();
  v23 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v23, v3, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128(v3, 1, v21);
  if (v24)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    __break(1u);
    JUMPOUT(0x21AF161F0);
  }
  outlined init with take of MLLogisticRegressionClassifier.Model(v3, v4, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  specialized BidirectionalCollection.last.getter(v36, (uint64_t)v16);
  OUTLINED_FUNCTION_128((uint64_t)v16, 1, v17);
  if (!v24)
  {
    outlined init with take of MLLogisticRegressionClassifier.Model((uint64_t)v16, v35, (void (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  v26 = OUTLINED_FUNCTION_18_0(v25, 0xD00000000000001DLL);
  OUTLINED_FUNCTION_63_6(v26, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    v4 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters;
    v3 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    v3 = 0;
  }
  v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for MetricsKey();
  v2[16] = v3;
  v2[17] = *(_QWORD *)(v3 - 8);
  v2[18] = OUTLINED_FUNCTION_0();
  v4 = OUTLINED_FUNCTION_93();
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 - 8);
  v2[21] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  v2[22] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v2[23] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

void LogisticRegressionClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  _QWORD *v28;
  double v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  double v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 184);
  OUTLINED_FUNCTION_29_0();
  v2 = OUTLINED_FUNCTION_3_9();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v2, v3, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v4 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  v5 = OUTLINED_FUNCTION_208_0(v4);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  if (v5 == 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120)
     + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters;
  v8 = type metadata accessor for MLTrainingSessionParameters();
  v9 = *(_QWORD *)(v7 + *(int *)(v8 + 20));
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = *(_QWORD *)(v7 + *(int *)(v8 + 28));
  if (__OFSUB__(v11, v6))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 >= v11 - v6)
    v12 = v11 - v6;
  else
    v12 = *(_QWORD *)(v7 + *(int *)(v8 + 20));
  type metadata accessor for EventCollector();
  swift_allocObject();
  EventCollector.init()();
  if (v12 < 0)
    goto LABEL_21;
  v38 = v11;
  v39 = v10;
  v40 = v12;
  if (!v12)
  {
LABEL_13:
    v24 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 144);
    static MetricsKey.trainingAccuracy.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v26 = v25;
    v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    OUTLINED_FUNCTION_38_6(v23);
    v28 = (_QWORD *)MEMORY[0x24BEE4B00];
    if ((v26 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v29 = OUTLINED_FUNCTION_59_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v30, v29);
      OUTLINED_FUNCTION_56_18();
    }
    v31 = *(_QWORD *)(v0 + 144);
    v32 = *(_QWORD *)(v0 + 128);
    static MetricsKey.trainingLoss.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v34 = v33;
    v27(v31, v32);
    if ((v34 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v35 = OUTLINED_FUNCTION_59_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v36, v35);
      OUTLINED_FUNCTION_56_18();
    }
    v37 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v28);
    swift_release();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_31();
    swift_task_dealloc();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, uint64_t, BOOL))(v0 + 8))(v40, v37, v39 >= v38);
    return;
  }
  v13 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = v14 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  v16 = v14 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model;
  v41 = v14 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_29_0();
  v17 = v12;
  while (1)
  {
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v41, *(_QWORD *)(v0 + 176), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
    v18 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
    if (OUTLINED_FUNCTION_208_0(v18) == 1)
      break;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v13 + 16))(*(_QWORD *)(v0 + 168), v15, *(_QWORD *)(v0 + 152));
    OUTLINED_FUNCTION_44_7();
    v19 = type metadata accessor for MLLogisticRegressionClassifier.Model();
    if (__swift_getEnumTagSinglePayload(v16, 1, v19) == 1)
      goto LABEL_23;
    swift_retain();
    MLLogisticRegressionClassifier.Classifier.update(_:with:eventHandler:)();
    v20 = *(_QWORD *)(v0 + 176);
    swift_endAccess();
    swift_release();
    v21 = OUTLINED_FUNCTION_61_15();
    v22(v21);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v20, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
    if (!--v17)
      goto LABEL_13;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[26] = v0;
  type metadata accessor for AnyClassificationMetrics();
  v1[27] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[28] = OUTLINED_FUNCTION_0();
  type metadata accessor for AnyColumn();
  v1[29] = OUTLINED_FUNCTION_25();
  v1[30] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v1[31] = OUTLINED_FUNCTION_0();
  v2 = OUTLINED_FUNCTION_93();
  v1[32] = v2;
  v1[33] = *(_QWORD *)(v2 - 8);
  v1[34] = OUTLINED_FUNCTION_25();
  v1[35] = OUTLINED_FUNCTION_25();
  v1[36] = OUTLINED_FUNCTION_25();
  v1[37] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  v1[38] = OUTLINED_FUNCTION_0();
  v1[39] = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v1[40] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t EnumTagSinglePayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  OUTLINED_FUNCTION_29_0();
  v3 = OUTLINED_FUNCTION_61_15();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v3, v4, v5);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of URL?(*(_QWORD *)(v0 + 304), &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
LABEL_5:
    v50 = 0;
LABEL_6:
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    swift_task_dealloc();
    OUTLINED_FUNCTION_40();
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v50, 1);
  }
  v6 = *(_QWORD *)(v0 + 208);
  outlined init with take of MLLogisticRegressionClassifier.Model(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 320), (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  v7 = v6 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_29_0();
  v8 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if ((_DWORD)EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_203(EnumTagSinglePayload, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 264);
  v15 = (uint64_t *)(v7 + *(int *)(v8 + 24));
  v17 = *v15;
  v16 = v15[1];
  v18 = *(_QWORD *)(v0 + 208)
      + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_29_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v18, v14);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_47_21(v11);
  if (!v8)
  {
    v49 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 248);
    v48 = *(_QWORD *)(v0 + 224);
    v24 = *(_QWORD *)(v0 + 208);
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 264) + 8);
    ((void (*)(_QWORD))v51)(*(_QWORD *)(v0 + 288));
    MEMORY[0x220758A1C](v17, v16);
    OUTLINED_FUNCTION_44_7();
    v46 = v17;
    MEMORY[0x220758A1C](v17, v16);
    swift_endAccess();
    AnyClassificationMetrics.init(_:_:)();
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for MLClassifierMetrics(0);
    OUTLINED_FUNCTION_159_0(v23, 0);
    v25 = v24 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
    OUTLINED_FUNCTION_44_7();
    outlined assign with take of MLClassifierMetrics?(v23, v25, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_endAccess();
    v26 = v24 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_29_0();
    outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v26, v48, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v48, 1, v49) == 1)
    {
      v27 = *(_QWORD *)(v0 + 296);
      v29 = *(_QWORD *)(v0 + 248);
      v28 = *(_QWORD *)(v0 + 256);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      OUTLINED_FUNCTION_123();
      v32 = v51(v27, v28);
      OUTLINED_FUNCTION_203(v32, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
      outlined destroy of URL?(v30, &demangling cache variable for type metadata for DataFrame?);
      v50 = 1;
      OUTLINED_FUNCTION_159_0(v29, 1);
      v33 = v31 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics;
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLClassifierMetrics?(v29, v33, &demangling cache variable for type metadata for MLClassifierMetrics?);
    }
    else
    {
      v35 = *(_QWORD *)(v0 + 272);
      v34 = *(_QWORD *)(v0 + 280);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 32))(v34, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 256));
      OUTLINED_FUNCTION_47_21(v35);
      if (v34)
      {
        v19 = (uint64_t *)(v0 + 296);
        v36 = *(_QWORD *)(v0 + 280);
        v37 = *(_QWORD *)(v0 + 256);
        OUTLINED_FUNCTION_123();
        v51(v36, v37);
        v21 = v51;
        goto LABEL_9;
      }
      v44 = *(_QWORD *)(v0 + 296);
      v45 = *(_QWORD *)(v0 + 320);
      v38 = *(_QWORD *)(v0 + 272);
      v47 = *(_QWORD *)(v0 + 248);
      v42 = *(_QWORD *)(v0 + 280);
      v43 = *(_QWORD *)(v0 + 216);
      MEMORY[0x220758A1C](v46, v16);
      MEMORY[0x220758A1C](v46, v16);
      OUTLINED_FUNCTION_123();
      AnyClassificationMetrics.init(_:_:)();
      OUTLINED_FUNCTION_38_6(v38);
      OUTLINED_FUNCTION_38_6(v42);
      OUTLINED_FUNCTION_38_6(v44);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v45, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
      outlined init with take of MLLogisticRegressionClassifier.Model(v43, v47, (void (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
      swift_storeEnumTagMultiPayload();
      v50 = 1;
      OUTLINED_FUNCTION_159_0(v47, 0);
      OUTLINED_FUNCTION_3_9();
      OUTLINED_FUNCTION_44_7();
      v39 = OUTLINED_FUNCTION_61_15();
      outlined assign with take of MLClassifierMetrics?(v39, v40, v41);
    }
    swift_endAccess();
    goto LABEL_6;
  }
  v19 = (uint64_t *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 264);
  OUTLINED_FUNCTION_123();
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
LABEL_9:
  v22 = v21(*v19, *(_QWORD *)(v0 + 256));
  OUTLINED_FUNCTION_203(v22, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  swift_task_dealloc();
  OUTLINED_FUNCTION_40();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_91_0();
  __asm { BR              X10 }
}

uint64_t sub_21AF16E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_10_3();
  if ((v3 & 1) == 0)
  {
    v13 = 0;
    return v13 & 1;
  }
  v4 = v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_67_16(v4, v5, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  v6 = OUTLINED_FUNCTION_12_25();
  OUTLINED_FUNCTION_128(v2, 1, v6);
  if (v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_70_16(v8, v9, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_35_6();
  v10 = OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_128(v10, v11, v12);
  if (v7)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x21AF16FD0);
  }
  lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
  v13 = 1;
  SupervisedTabularEstimator.write(_:to:overwrite:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
  return v13 & 1;
}

void LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_91_1();
  v6 = OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  v8 = v1 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v8, v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v9 = OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_128(v9, v10, v6);
  if (v11)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000030;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    outlined init with take of MLLogisticRegressionClassifier.Model(v2, v3, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  }
}

void LogisticRegressionClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OUTLINED_FUNCTION_18_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - v18;
  v20 = OUTLINED_FUNCTION_3_9();
  v21(v20);
  MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)(v11, (uint64_t)v19);
  if (!v1)
  {
    v22 = v31 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
    v23 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_70_16(v23, v24, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
    v25 = OUTLINED_FUNCTION_94_2();
    OUTLINED_FUNCTION_128(v25, v26, v12);
    if (v27)
    {
      outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      OUTLINED_FUNCTION_62_19(v28, v29, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v5, 0, 1, v12);
      OUTLINED_FUNCTION_4_28();
      outlined assign with take of MLClassifierMetrics?(v5, v22, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLLogisticRegressionClassifier.Model((uint64_t)v8, v16, (void (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v19, v16);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24[6];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (int *)OUTLINED_FUNCTION_18_26();
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = swift_bridgeObjectRetain();
    v12 = specialized Set.init<A>(_:)(v11);
    v9 = *(_QWORD *)(a2 + v4[7]);
    v13 = OUTLINED_FUNCTION_31_2();
    v14 = specialized Set.init<A>(_:)(v13);
    specialized static Set.== infix(_:_:)(v12, v14);
    v16 = v15;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    if ((v16 & 1) != 0)
    {
      static MLLogisticRegressionClassifier.ModelParameters.firstIncompatibility(_:_:)(a1 + v4[8], a2 + v4[8], v24);
      result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v24, (uint64_t)&v25);
      v18 = v26;
      if (!v26)
        return result;
      v19 = v25;
      v6 = v27;
      v7 = v28;
      v9 = v29;
      a2 = v30;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = v19;
    }
    else
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v6 = OUTLINED_FUNCTION_36_8();
      v7 = v22;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_36_8();
      a2 = v23;
      OUTLINED_FUNCTION_12_0();
      String.init<A>(_:)();
      OUTLINED_FUNCTION_238();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = 0xD000000000000011;
      v18 = 0x800000021AFF4520;
    }
  }
  else
  {
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_31_2();
    String.init<A>(_:)();
    OUTLINED_FUNCTION_238();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v20 = 0x6320746567726154;
    v18 = 0xED00006E6D756C6FLL;
  }
  *(_QWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v6;
  *(_QWORD *)(v20 + 24) = v7;
  *(_QWORD *)(v20 + 32) = v9;
  *(_QWORD *)(v20 + 40) = a2;
  *(_BYTE *)(v20 + 48) = 3;
  return swift_willThrow(v21);
}

void LogisticRegressionClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  v1 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_11_1(v1);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_22();
}

uint64_t LogisticRegressionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  LogisticRegressionClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for LogisticRegressionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LogisticRegressionClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for LogisticRegressionClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, (void (*)(uint64_t))MEMORY[0x24BDF5DF0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Classifier?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLogisticRegressionClassifier.Model?, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Model);
            if (v5 <= 0x3F)
            {
              type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, (void (*)(uint64_t))type metadata accessor for MLClassifierMetrics);
              if (v6 <= 0x3F)
                swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  LogisticRegressionClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  LogisticRegressionClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LogisticRegressionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = OUTLINED_FUNCTION_52_0();
  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  if (!v0)
    v2 = OUTLINED_FUNCTION_61_15();
  return v3(v2);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LogisticRegressionClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  char v0;

  LogisticRegressionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(uint64_t a1)
{
  LogisticRegressionClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  LogisticRegressionClassifierTrainingSessionDelegate.restore(from:phase:)();
}

void outlined init with copy of MLLogisticRegressionClassifier.Classifier?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_165(a1, a2, a3);
  OUTLINED_FUNCTION_55_2();
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_22();
}

uint64_t outlined assign with take of MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  assignWithTake for MLLogisticRegressionClassifier.ModelParameters(a2, a1);
  return a2;
}

void outlined init with take of MLLogisticRegressionClassifier.Model(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;

  a3(0);
  OUTLINED_FUNCTION_55_2();
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32));
  OUTLINED_FUNCTION_22();
}

void outlined assign with take of MLClassifierMetrics?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_165(a1, a2, a3);
  OUTLINED_FUNCTION_55_2();
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40));
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_8_42()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_12_37(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_18_26()
{
  return type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_25_26()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_26_29(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 272), a2);
}

uint64_t OUTLINED_FUNCTION_34_25(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_47_21(uint64_t a1@<X8>)
{
  MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(a1);
}

uint64_t OUTLINED_FUNCTION_48_16(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_54_14()
{
  uint64_t v0;

  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters(*(_QWORD *)(v0 - 240));
}

uint64_t OUTLINED_FUNCTION_56_18()
{
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_59_16()
{
  double v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_61_15()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_62_19(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of MLLogisticRegressionClassifier.Model(v3, v4, a3);
}

void OUTLINED_FUNCTION_67_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(a1, v3, a3);
}

void OUTLINED_FUNCTION_70_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of MLLogisticRegressionClassifier.Classifier?(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_72_12()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_78_9(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 232), a2);
}

BOOL static MLDataValue.ValueType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MLDataValue.sequenceValue.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 16) == 3)
    v3 = swift_retain();
  else
    v3 = 0;
  *a1 = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t MLDataValue.doubleValue.getter()
{
  _BYTE *v0;

  if (v0[16] == 1)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MLDataValue.intValue.getter()
{
  _BYTE *v0;

  if (v0[16])
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t MLDataValue.stringValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if (*((_BYTE *)v0 + 16) != 2)
    return 0;
  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void MLDataValue.multiArrayValue.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;

  if (*(_BYTE *)(v1 + 16) == 5)
  {
    v3 = *(void **)v1;
    v4 = v3;
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  OUTLINED_FUNCTION_22();
}

void MLDataValue.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void MLDataValue.init(_:)()
{
  char *v0;

  v0 = (char *)&loc_21AF17D04 + dword_21AF17EF4[CMLFeatureValue.type.getter()];
  __asm { BR              X10 }
}

uint64_t sub_21AF17D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(v1 + 16));
  v3 = v2;
  result = OUTLINED_FUNCTION_4_2();
  *(_QWORD *)v0 = v3;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

void MLDataValue.featureValue.getter()
{
  __asm { BR              X10 }
}

#error "21AF17F4C: call analysis failed (funcsize=26)"

uint64_t MLDataValue.ValueType.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_21_29
                                                            + 4 * byte_21AFEDA94[*v0]))(7630409, 0xE300000000000000);
}

uint64_t sub_21AF180B0()
{
  return 0x676E697373694DLL;
}

void MLDataValue.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_21AF1811C()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x756C615661746144;
}

uint64_t MLDataValue.init(fromAny:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD __dst[9];
  uint64_t __src[9];
  __int128 v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  _QWORD v102[2];
  unsigned __int8 v103;
  uint64_t v104;
  _BYTE v105[40];
  uint64_t v106;

  v3 = a1;
  outlined init with copy of Any(a1, (uint64_t)v105);
  if (OUTLINED_FUNCTION_0_52())
  {
    __swift_destroy_boxed_opaque_existential_0(v3);
    v6 = *((_QWORD *)&v96 + 1);
    v5 = v96;
    v7 = v97;
LABEL_50:
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v105);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  if (OUTLINED_FUNCTION_0_52())
  {
    outlined init with take of BinaryFloatingPoint(&v96, (uint64_t)__src);
    __swift_project_boxed_opaque_existential_1(__src, __src[3]);
    v8 = OUTLINED_FUNCTION_84_5();
    v9(v8);
    OUTLINED_FUNCTION_46_16();
    v5 = __dst[0];
    v6 = __dst[1];
    v7 = __dst[2];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)__src);
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_52())
  {
    __swift_destroy_boxed_opaque_existential_0(v3);
    v6 = *((_QWORD *)&v96 + 1);
    v5 = v96;
    v7 = 2;
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_52())
  {
    __swift_destroy_boxed_opaque_existential_0(v3);
    v6 = 0;
    v7 = 0;
    v5 = v96;
    goto LABEL_50;
  }
  if (OUTLINED_FUNCTION_0_52())
  {
    __swift_destroy_boxed_opaque_existential_0(v3);
    v6 = 0;
    v5 = v96;
    v7 = 1;
    goto LABEL_50;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if (swift_dynamicCast())
  {
    v10 = *(_QWORD *)(v83 + 16);
    if (!v10)
    {
      OUTLINED_FUNCTION_123();
      v15 = MEMORY[0x24BEE4AF8];
LABEL_43:
      specialized MLDataValue.SequenceType.init<A>(_:)(v15, (uint64_t *)&v96);
      __swift_destroy_boxed_opaque_existential_0(v3);
      v6 = 0;
      v5 = v96;
      v7 = 3;
      goto LABEL_50;
    }
    v51 = v3;
    v99 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v11 = v83 + 32;
    while (1)
    {
      outlined init with copy of Any(v11, (uint64_t)&v96);
      outlined init with copy of Any((uint64_t)&v96, (uint64_t)__src);
      OUTLINED_FUNCTION_53_19();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v96);
      if (v2)
        break;
      v12 = __dst[0];
      v13 = __dst[1];
      v14 = __dst[2];
      v15 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = v99;
      }
      v16 = *(_QWORD *)(v15 + 16);
      if (v16 >= *(_QWORD *)(v15 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = v99;
      }
      *(_QWORD *)(v15 + 16) = v16 + 1;
      v17 = v15 + 24 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v13;
      *(_BYTE *)(v17 + 48) = v14;
      v11 += 32;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        v3 = v51;
        goto LABEL_43;
      }
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_0(v51);
LABEL_46:
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v105);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  if (!swift_dynamicCast())
  {
    *(_QWORD *)&v96 = 0;
    *((_QWORD *)&v96 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v46._countAndFlagsBits = 0x20666F2065707954;
    v46._object = (void *)0xEF272065756C6176;
    String.append(_:)(v46);
    _print_unlocked<A, B>(_:_:)();
    v47._object = (void *)0x800000021AFF67D0;
    v47._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v47);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v48 = 0;
    *(_QWORD *)(v48 + 8) = 0xE000000000000000;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_BYTE *)(v48 + 48) = 1;
    swift_willThrow(0.0);
    OUTLINED_FUNCTION_46_16();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v105);
  }
  v18 = v106;
  v19 = *(_QWORD *)(v106 + 16);
  if (!v19)
  {
    OUTLINED_FUNCTION_123();
    v42 = MEMORY[0x24BEE4AF8];
LABEL_49:
    v5 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v42);
    __swift_destroy_boxed_opaque_existential_0(v3);
    v6 = 0;
    v7 = 4;
    goto LABEL_50;
  }
  v52 = v3;
  v104 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  result = specialized Dictionary.startIndex.getter(v18);
  if ((result & 0x8000000000000000) == 0)
  {
    v22 = result;
    if (result < 1 << *(_BYTE *)(v18 + 32))
    {
      v81 = v18 + 64;
      v62 = &__src[5];
      v64 = &v98;
      v56 = v18;
      v58 = v102;
      v54 = &v86;
      v60 = &__dst[5];
      while ((*(_QWORD *)(v81 + 8 * (v22 >> 6)) & (1 << v22)) != 0)
      {
        v78 = v21;
        if (*(_DWORD *)(v18 + 36) != (_DWORD)v21)
          goto LABEL_52;
        outlined init with copy of AnyHashable(*(_QWORD *)(v18 + 48) + 40 * v22, (uint64_t)&v96);
        outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v22, (uint64_t)v64);
        outlined init with copy of AnyHashable((uint64_t)&v96, (uint64_t)__src);
        outlined init with copy of Any((uint64_t)v64, (uint64_t)v62);
        memcpy(__dst, __src, sizeof(__dst));
        v23 = outlined destroy of (key: AnyHashable, value: Any)((uint64_t)&v96);
        OUTLINED_FUNCTION_49_16(v23, v24, v25, v26, v27, v28, v29, v30, v49, v52, (uint64_t)v54, v56, (uint64_t)v58, (uint64_t)v60, (uint64_t)v62, (uint64_t)v64, v66, v68, v70,
          v72,
          v74,
          v76,
          v78,
          v81,
          v83,
          *((uint64_t *)&v83 + 1),
          v84,
          *((uint64_t *)&v84 + 1),
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          __dst[0]);
        OUTLINED_FUNCTION_52_14();
        v93 = MEMORY[0x24BEE23D0];
        v31 = swift_allocObject();
        v90 = v31;
        v32 = v84;
        *(_OWORD *)(v31 + 16) = v83;
        *(_OWORD *)(v31 + 32) = v32;
        *(_QWORD *)(v31 + 48) = v85;
        OUTLINED_FUNCTION_53_19();
        if (v2)
        {
          OUTLINED_FUNCTION_46_16();
          outlined destroy of (key: AnyHashable, value: Any)((uint64_t)__dst);
          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v53);
          goto LABEL_46;
        }
        v33 = OUTLINED_FUNCTION_46_16();
        OUTLINED_FUNCTION_49_16(v33, v34, v35, v36, v37, v38, v39, v40, v50, v53, v55, v57, v59, v61, v63, v65, v67, v69, v71,
          v73,
          v75,
          v77,
          v79,
          v82,
          v83,
          *((uint64_t *)&v83 + 1),
          v84,
          *((uint64_t *)&v84 + 1),
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          __dst[0]);
        OUTLINED_FUNCTION_52_14();
        OUTLINED_FUNCTION_53_19();
        v66 = v19;
        outlined destroy of AnyHashable((uint64_t)&v83);
        outlined destroy of (key: AnyHashable, value: Any)((uint64_t)__dst);
        v41 = v99;
        v76 = v100;
        HIDWORD(v74) = v101;
        v70 = v102[1];
        v72 = v102[0];
        HIDWORD(v68) = v103;
        v42 = v104;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1);
          v42 = v104;
        }
        v44 = *(_QWORD *)(v42 + 16);
        v43 = *(_QWORD *)(v42 + 24);
        if (v44 >= v43 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1);
          v42 = v104;
        }
        *(_QWORD *)(v42 + 16) = v44 + 1;
        v45 = v42 + 48 * v44;
        *(_QWORD *)(v45 + 32) = v41;
        *(_QWORD *)(v45 + 40) = v76;
        *(_BYTE *)(v45 + 48) = BYTE4(v74);
        *(_QWORD *)(v45 + 56) = v72;
        *(_QWORD *)(v45 + 64) = v70;
        *(_BYTE *)(v45 + 72) = BYTE4(v68);
        v18 = v56;
        if ((uint64_t)v22 >= -(-1 << *(_BYTE *)(v56 + 32)))
          goto LABEL_53;
        if ((*(_QWORD *)(v81 + 8 * (v22 >> 6)) & (1 << v22)) == 0)
          goto LABEL_54;
        if (*(_DWORD *)(v56 + 36) != v80)
          goto LABEL_55;
        result = _HashTable.occupiedBucket(after:)();
        v19 = v66 - 1;
        if (v66 == 1)
        {
          OUTLINED_FUNCTION_123();
          v3 = v52;
          goto LABEL_49;
        }
        v22 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v21 = *(unsigned int *)(v56 + 36);
          if (result < 1 << *(_BYTE *)(v56 + 32))
            continue;
        }
        goto LABEL_56;
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
    }
  }
LABEL_56:
  __break(1u);
  return result;
}

void MLDataValue.dictionaryValue.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 16) == 4)
    v3 = swift_bridgeObjectRetain();
  else
    v3 = 0;
  *a1 = v3;
  OUTLINED_FUNCTION_22();
}

void MLDataValue.isValid.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_21AF18B2C()
{
  void *v0;
  char v1;
  void *v2;

  swift_bridgeObjectRetain();
  outlined consume of MLDataValue(v0, v2, v1);
  OUTLINED_FUNCTION_30_26();
  return 1;
}

void MLDataValue.ValueType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  OUTLINED_FUNCTION_22();
}

Swift::Int MLDataValue.ValueType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return OUTLINED_FUNCTION_3_4();
}

uint64_t MLDataValue.ValueType.debugDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_21_29_0
                                                            + 4 * byte_21AFEDAA2[*v0]))(7630409, 0xE300000000000000);
}

uint64_t sub_21AF18C2C()
{
  return 0x676E697373694DLL;
}

void MLDataValue.debugDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_21AF18C9C()
{
  lazy protocol witness table accessor for type Int and conformance Int();
  return BinaryInteger.description.getter();
}

void static MLDataValue.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_21AF18E4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  char v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  void *v28;
  id v29;

  if (v24)
  {
    outlined copy of MLDataValue(v22, v23, v24);
    v28 = (void *)OUTLINED_FUNCTION_4_5();
    outlined consume of MLDataValue(v28, v29, v21);
    outlined consume of MLDataValue(v22, v23, v24);
    return 0;
  }
  else
  {
    v25 = (void *)OUTLINED_FUNCTION_4_5();
    OUTLINED_FUNCTION_28_27(v25, v26);
    OUTLINED_FUNCTION_28_27(v22, v23);
    return v20 == v22;
  }
}

void MLDataValue.hash(into:)()
{
  __asm { BR              X11 }
}

void sub_21AF190EC(int a1, Swift::UInt a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  Hasher._combine(_:)(a2);
}

void sub_21AF1913C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MLDataValue.hashValue.getter()
{
  OUTLINED_FUNCTION_33_24();
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_50_18();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_48_17();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MLDataValue()
{
  OUTLINED_FUNCTION_33_24();
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_50_18();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_48_17();
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  void *v25;
  id v26;
  char v27;
  uint64_t v29;
  uint64_t v30;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v29 = a1 + 64;
    OUTLINED_FUNCTION_6_44();
    v30 = v4;
    if (v6)
    {
      OUTLINED_FUNCTION_56_19();
      v9 = v7 | (v8 << 6);
LABEL_19:
      v14 = *(_QWORD *)(v3 + 56) + 24 * v9;
      v16 = *(void **)v14;
      v15 = *(void **)(v14 + 8);
      v17 = *(_BYTE *)(v14 + 16);
      v18 = (void *)OUTLINED_FUNCTION_42_17();
      outlined copy of MLDataValue(v18, v19, v20);
      outlined copy of MLDataValue(v16, v15, v17);
      v21 = OUTLINED_FUNCTION_42_17();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      v24 = v23;
      v25 = (void *)OUTLINED_FUNCTION_42_17();
      outlined consume of MLDataValue(v25, v26, v27);
      if ((v24 & 1) != 0)
        __asm { BR              X8 }
      OUTLINED_FUNCTION_40_20();
      return 0;
    }
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 < v4)
    {
      v11 = *(_QWORD *)(v29 + 8 * v10);
      v12 = v5 + 1;
      if (v11)
        goto LABEL_18;
      v12 = v5 + 2;
      if (v5 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (v11)
        goto LABEL_18;
      v12 = v5 + 3;
      if (v5 + 3 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (v11)
      {
LABEL_18:
        v9 = __clz(__rbit64(v11)) + (v12 << 6);
        goto LABEL_19;
      }
      v13 = v5 + 4;
      if (v5 + 4 < v30)
      {
        v11 = *(_QWORD *)(v29 + 8 * v13);
        if (v11)
        {
          v12 = v5 + 4;
          goto LABEL_18;
        }
        while (1)
        {
          v12 = v13 + 1;
          if (__OFADD__(v13, 1))
            break;
          if (v12 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          ++v13;
          if (v11)
            goto LABEL_18;
        }
LABEL_25:
        __break(1u);
        JUMPOUT(0x21AF196FCLL);
      }
    }
    return 1;
  }
  return 0;
}

void specialized static Dictionary<>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v4 = type metadata accessor for URL();
  v50 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v41 - v7;
  if (a1 == a2 || a1[2] != a2[2])
    return;
  v9 = a1 + 8;
  OUTLINED_FUNCTION_6_44();
  v43 = a2;
  v44 = v11;
  v41 = a1 + 8;
  v42 = a1;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  OUTLINED_FUNCTION_56_19();
  v45 = v13;
  v46 = v14;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    v25 = (uint64_t *)(a1[6] + 16 * i);
    v26 = *v25;
    v27 = v25[1];
    v28 = *(_QWORD *)(a1[7] + 8 * i);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_50_10();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0
      || (v32 = *(_QWORD *)(a2[7] + 8 * v29), v33 = *(_QWORD *)(v32 + 16), v33 != *(_QWORD *)(v28 + 16)))
    {
LABEL_39:
      swift_bridgeObjectRelease();
      return;
    }
    if (v33 && v32 != v28)
    {
      v48 = *(_QWORD *)(v32 + 16);
      v34 = v50;
      v35 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      swift_bridgeObjectRetain();
      v36 = 0;
      v47 = *(_QWORD *)(v34 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      while (1)
      {
        v37(v8, v32 + v35, v4);
        if (v36 >= *(_QWORD *)(v28 + 16))
          break;
        v38 = v49;
        v37(v49, v28 + v35, v4);
        lazy protocol witness table accessor for type URL and conformance URL();
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v40 = *(void (**)(char *, uint64_t))(v50 + 8);
        v40(v38, v4);
        v40(v8, v4);
        if ((v39 & 1) == 0)
        {
          OUTLINED_FUNCTION_10_3();
          goto LABEL_39;
        }
        ++v36;
        v35 += v47;
        if (v48 == v36)
        {
          OUTLINED_FUNCTION_10_3();
          swift_bridgeObjectRelease();
          a1 = v42;
          a2 = v43;
          v9 = v41;
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    OUTLINED_FUNCTION_10_3();
LABEL_35:
    v10 = v46;
    if (v45)
      goto LABEL_4;
LABEL_5:
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_42;
    if (v17 >= v44)
      return;
    v18 = v9[v17];
    v19 = v10 + 1;
    if (!v18)
    {
      OUTLINED_FUNCTION_62_20();
      if (v20 == v21)
        return;
      v18 = v9[v19];
      if (!v18)
      {
        OUTLINED_FUNCTION_62_20();
        if (v20 == v21)
          return;
        v18 = v9[v19];
        if (!v18)
        {
          OUTLINED_FUNCTION_62_20();
          if (v20 == v21)
            return;
          v18 = v9[v19];
          if (!v18)
            break;
        }
      }
    }
LABEL_24:
    v45 = (v18 - 1) & v18;
    v46 = v19;
  }
  v23 = v22 + 4;
  if (v23 >= v44)
    return;
  v18 = v9[v23];
  if (v18)
  {
    v19 = v23;
    goto LABEL_24;
  }
  while (!__OFADD__(v23, 1))
  {
    OUTLINED_FUNCTION_62_20();
    if (v20 == v21)
      return;
    v18 = v9[v19];
    v23 = v24 + 1;
    if (v18)
      goto LABEL_24;
  }
LABEL_43:
  __break(1u);
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  int64_t v35;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v35 = (unint64_t)(v6 + 63) >> 6;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
    v26 = v25;
    OUTLINED_FUNCTION_12_0();
    if ((v26 & 1) == 0 || (v27 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v24), v28 = v27[2], v28 != v23[2]))
    {
LABEL_56:
      swift_bridgeObjectRelease();
      return;
    }
    if (v28)
      v29 = v27 == v23;
    else
      v29 = 1;
    if (!v29)
    {
      v30 = v27[4] == v23[4] && v27[5] == v23[5];
      if (!v30 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
        goto LABEL_56;
      if (v28 != 1)
      {
        v31 = v27[6] == v23[6] && v27[7] == v23[7];
        if (!v31 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
          goto LABEL_56;
        if (v28 != 2)
        {
          v32 = 0;
          v33 = 2;
          while (v33 < v28)
          {
            v34 = v27[v32 + 8] == v23[v32 + 8] && v27[v32 + 9] == v23[v32 + 9];
            if (!v34 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
              goto LABEL_56;
            ++v33;
            v32 += 2;
            if (v28 == v33)
              goto LABEL_53;
          }
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_6;
LABEL_7:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_59;
    if (v11 >= v35)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      OUTLINED_FUNCTION_55_17();
      if (v14 == v15)
        return;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v13 + 2;
        OUTLINED_FUNCTION_55_17();
        if (v14 == v15)
          return;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v16 + 3;
          OUTLINED_FUNCTION_55_17();
          if (v14 == v15)
            return;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_26:
    v8 = (v12 - 1) & v12;
  }
  v18 = v17 + 4;
  if (v18 >= v35)
    return;
  v12 = *(_QWORD *)(v5 + 8 * v18);
  if (v12)
  {
    v4 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v4 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    OUTLINED_FUNCTION_55_17();
    if (v14 == v15)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    v18 = v19 + 1;
    if (v12)
      goto LABEL_26;
  }
LABEL_60:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MLDataValue.ValueType and conformance MLDataValue.ValueType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType;
  if (!lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.ValueType, &type metadata for MLDataValue.ValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.ValueType and conformance MLDataValue.ValueType);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MLDataValue(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataValue(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MLDataValue(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MLDataValue(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MLDataValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataValue(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MLDataValue(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for MLDataValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for MLDataValue()
{
  OUTLINED_FUNCTION_25_17();
}

void type metadata accessor for MLDataValue.SequenceType()
{
  OUTLINED_FUNCTION_25_17();
}

void type metadata accessor for MLDataValue.DictionaryType()
{
  OUTLINED_FUNCTION_25_17();
}

void type metadata accessor for MLDataValue.MultiArrayType()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t storeEnumTagSinglePayload for MLDataValue.ValueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21AF19F38 + 4 * byte_21AFEDABC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21AF19F6C + 4 * byte_21AFEDAB7[v4]))();
}

uint64_t sub_21AF19F6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF19F74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF19F7CLL);
  return result;
}

uint64_t sub_21AF19F88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF19F90);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21AF19F94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF19F9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for MLDataValue.ValueType()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21AF19FF4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_0_52()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_1_46()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 3);
}

void OUTLINED_FUNCTION_2_46()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 5);
}

void OUTLINED_FUNCTION_3_45(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_4_47()
{
  return 0x616E6F6974636944;
}

uint64_t OUTLINED_FUNCTION_7_40()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_8_43()
{
  return 0x72724169746C754DLL;
}

uint64_t OUTLINED_FUNCTION_9_39(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  outlined copy of MLDataValue(v12, v13, 3);
  return swift_retain_n();
}

id OUTLINED_FUNCTION_10_36()
{
  void *v0;
  void *v1;

  return outlined copy of MLDataValue(v0, v1, 4);
}

id OUTLINED_FUNCTION_11_35()
{
  void *v0;
  void *v1;

  return outlined copy of MLDataValue(v0, v1, 5);
}

uint64_t OUTLINED_FUNCTION_12_38()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_13_40()
{
  return 0x65636E6575716553;
}

id OUTLINED_FUNCTION_14_32()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v1, v0, 3);
  return outlined copy of MLDataValue(v2, v3, 3);
}

id OUTLINED_FUNCTION_15_33()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v1, v0, 4);
  return outlined copy of MLDataValue(v2, v3, 4);
}

id OUTLINED_FUNCTION_16_32()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v1, v0, 5);
  return outlined copy of MLDataValue(v2, v3, 5);
}

id OUTLINED_FUNCTION_18_27()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v2, v3, 3);
  return outlined copy of MLDataValue(v0, v1, 3);
}

uint64_t OUTLINED_FUNCTION_21_29()
{
  return 0x656C62756F44;
}

uint64_t OUTLINED_FUNCTION_22_27()
{
  return 0x676E69727453;
}

uint64_t OUTLINED_FUNCTION_25_27()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_27_33()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 4);
}

void OUTLINED_FUNCTION_28_27(void *a1, void *a2)
{
  outlined consume of MLDataValue(a1, a2, 0);
}

void OUTLINED_FUNCTION_30_26()
{
  outlined consume of MLDataValue(0, 0, 6);
}

__n128 OUTLINED_FUNCTION_33_24()
{
  __n128 *v0;
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v0[1].n128_u8[0];
  result = *v0;
  *(__n128 *)(v1 - 48) = *v0;
  *(_BYTE *)(v1 - 32) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_35_18()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_37_17()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_38_19()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_39_16()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 4);
}

void OUTLINED_FUNCTION_40_20()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue(v1, v0, v2);
}

void OUTLINED_FUNCTION_41_21()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 5);
}

uint64_t OUTLINED_FUNCTION_42_17()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_43_18()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 3);
}

void OUTLINED_FUNCTION_44_23()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 4);
}

void OUTLINED_FUNCTION_45_21()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 5);
}

uint64_t OUTLINED_FUNCTION_46_16()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

uint64_t OUTLINED_FUNCTION_47_22()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_49_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  return outlined init with copy of AnyHashable((uint64_t)&a38, (uint64_t)&a25);
}

void OUTLINED_FUNCTION_50_18()
{
  MLDataValue.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_52_14()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of Any(v0, v1);
}

uint64_t OUTLINED_FUNCTION_53_19()
{
  return MLDataValue.init(fromAny:)();
}

uint64_t MLDataValue.DictionaryType.description.getter()
{
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  return Dictionary.description.getter();
}

uint64_t MLDataValue.DictionaryType.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MLDataValue.DictionaryType.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = specialized Dictionary.startIndex.getter(a1);
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v5 & 1;
  v6 = *(unsigned int *)(a1 + 36);
  *(_QWORD *)(a2 + 32) = 1 << *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = v6;
  *(_BYTE *)(a2 + 48) = 0;
  return swift_bridgeObjectRetain();
}

void specialized Collection<>.indices.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v5 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v5);
  v7 = v6;
  OUTLINED_FUNCTION_3_1();
  v8 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v8);
  v10 = v9;
  OUTLINED_FUNCTION_4_2();
  if (v10 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v11 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v11);
    v13 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if ((v7 & 0x8000000000000000) == 0 && v13 >= v7)
    {
      a4[4] = v7;
      OUTLINED_FUNCTION_164();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (a2 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2)
        return result;
    }
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    v7 = a2;
    v8 = result;
    v9 = a6;
    v10 = a3 & 1;
    if (a4)
    {
      result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
      v12 = 0;
      v13 = a5 + 64;
      v14 = v7;
      v15 = a5 + 96;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_31;
        if ((v8 & 0x8000000000000000) != 0 || (v16 = 1 << *(_BYTE *)(a5 + 32), (uint64_t)v8 >= v16))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v17 = v8 >> 6;
        v18 = *(_QWORD *)(v13 + 8 * (v8 >> 6));
        if (((v18 >> v8) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(a5 + 36) != (_DWORD)v7)
          goto LABEL_29;
        v19 = v18 & (-2 << (v8 & 0x3F));
        if (v19)
        {
          v8 = __clz(__rbit64(v19)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v20 = v17 + 1;
          if (v17 + 1 >= (unint64_t)(v16 + 63) >> 6)
            goto LABEL_22;
          v21 = *(_QWORD *)(v13 + 8 * v20);
          if (!v21)
          {
            v22 = (unint64_t)(v16 + 63) >> 6;
            v20 = v17 + 2;
            if (v17 + 2 >= v22)
              goto LABEL_22;
            v21 = *(_QWORD *)(v13 + 8 * v20);
            if (!v21)
            {
              v20 = v17 + 3;
              if (v17 + 3 >= v22)
                goto LABEL_22;
              v21 = *(_QWORD *)(v13 + 8 * v20);
              if (!v21)
              {
                while (v17 + 4 < v22)
                {
                  v21 = *(_QWORD *)(v15 + 8 * v17++);
                  if (v21)
                  {
                    v23 = v8;
                    v24 = v15;
                    result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v23, v7, 0);
                    v15 = v24;
                    v20 = v17 + 3;
                    goto LABEL_13;
                  }
                }
                v25 = v8;
                v26 = v15;
                result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v25, v7, 0);
                v15 = v26;
LABEL_22:
                v8 = v16;
                goto LABEL_23;
              }
            }
          }
LABEL_13:
          v8 = __clz(__rbit64(v21)) + (v20 << 6);
        }
LABEL_23:
        v10 = 0;
        ++v12;
        v7 = v14;
        if (v12 >= a4)
        {
          v7 = v14;
          v9 = a6;
          goto LABEL_26;
        }
      }
    }
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_26:
    *(_QWORD *)v9 = v8;
    *(_QWORD *)(v9 + 8) = v7;
    *(_BYTE *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v30;

  if (a4 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
    v14 = a2;
    v15 = result;
    v16 = a3 & 1;
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (a4)
    {
      v17 = 0;
      v30 = a7 & 1;
      v18 = (a3 | a7) & 1;
      v19 = a8 + 64;
      v20 = a5;
      while (1)
      {
        if ((v18 & 1) != 0)
          goto LABEL_35;
        if ((_DWORD)v14 != a6)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        if (v15 == v20)
        {
          result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v20, v14, 0);
          *(_QWORD *)a9 = 0;
          *(_QWORD *)(a9 + 8) = 0;
          *(_BYTE *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_31;
        v21 = 1 << *(_BYTE *)(a8 + 32);
        if ((uint64_t)v15 >= v21)
          goto LABEL_31;
        v22 = v15 >> 6;
        v23 = *(_QWORD *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0)
          goto LABEL_32;
        if (*(_DWORD *)(a8 + 36) != a6)
          goto LABEL_33;
        v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
          v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = v22 + 1;
          if (v22 + 1 < (unint64_t)(v21 + 63) >> 6)
          {
            v26 = *(_QWORD *)(v19 + 8 * v25);
            if (v26)
              goto LABEL_15;
            v27 = (unint64_t)(v21 + 63) >> 6;
            v25 = v22 + 2;
            if (v22 + 2 >= v27)
            {
LABEL_24:
              result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
              v15 = v21;
            }
            else
            {
              v26 = *(_QWORD *)(v19 + 8 * v25);
              if (!v26)
              {
                v25 = v22 + 3;
                if (v22 + 3 >= v27)
                  goto LABEL_24;
                v26 = *(_QWORD *)(v19 + 8 * v25);
                if (!v26)
                {
                  while (v22 + 4 < v27)
                  {
                    v26 = *(_QWORD *)(a8 + 96 + 8 * v22++);
                    if (v26)
                    {
                      v25 = v22 + 3;
                      goto LABEL_15;
                    }
                  }
                  goto LABEL_24;
                }
              }
LABEL_15:
              result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
              v15 = __clz(__rbit64(v26)) | (v25 << 6);
            }
            v20 = a5;
            goto LABEL_26;
          }
          result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v15, v14, 0);
          v15 = v21;
        }
LABEL_26:
        ++v17;
        v14 = a6;
        v18 = v30;
        if (v17 == a4)
        {
          v16 = 0;
          v14 = a6;
          break;
        }
      }
    }
    *(_QWORD *)a9 = v15;
    *(_QWORD *)(a9 + 8) = v14;
    *(_BYTE *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
  {
    while (1)
    {
      if (a3 == result)
        return 0;
      if (result == 0x7FFFFFFFFFFFFFFFLL)
        break;
      ++result;
      if (!--a2)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_36;
  v8 = result;
  if (a4 < result)
    goto LABEL_34;
  if (a5 != (_DWORD)a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v12 = a7 + 64;
    v21 = a7 + 96;
    v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (v13 = 1 << *(_BYTE *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v14 = v8 >> 6;
      v15 = *(_QWORD *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(a7 + 36) != a5)
        goto LABEL_33;
      v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v17 = v14 + 1;
        if (v14 + 1 >= (unint64_t)(v13 + 63) >> 6)
          goto LABEL_26;
        v18 = *(_QWORD *)(v12 + 8 * v17);
        if (!v18)
        {
          v19 = (unint64_t)(v13 + 63) >> 6;
          v17 = v14 + 2;
          if (v14 + 2 >= v19)
            goto LABEL_26;
          v18 = *(_QWORD *)(v12 + 8 * v17);
          if (!v18)
          {
            v17 = v14 + 3;
            if (v14 + 3 >= v19)
              goto LABEL_26;
            v18 = *(_QWORD *)(v12 + 8 * v17);
            if (!v18)
            {
              while (v14 + 4 < v19)
              {
                v18 = *(_QWORD *)(v21 + 8 * v14++);
                if (v18)
                {
                  v17 = v14 + 3;
                  goto LABEL_17;
                }
              }
LABEL_26:
              result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
              v8 = v13;
              goto LABEL_27;
            }
          }
        }
LABEL_17:
        result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v8, a2, 0);
        v8 = __clz(__rbit64(v18)) | (v17 << 6);
      }
LABEL_27:
      if (v8 == a4)
        return v10;
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
    }
  }
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(a4, a2, 0);
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (a2 < result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 == result)
    return 0;
  v2 = result;
  v3 = a2 - result;
  if (a2 > result)
  {
    result = 0;
    v4 = ~v2 + a2;
    while (v4 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == ++result)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

void MLDataValue.DictionaryType.init(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[9];

  specialized handling<A, B>(_:_:)(*(_QWORD *)(a1 + 16));
  v4 = v3;
  if (v3)
  {
    OUTLINED_FUNCTION_21_30();
    v5 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v5 + 16) = v4;
    v16[0] = v5;
    swift_retain();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v16, v6, v7, v8, v9, v10, v11, v12, v15, v16[0], (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:), 0, (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:), 0, (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:), 0, v16[7], v16[8]);
    v14 = v13;
    swift_release();
    OUTLINED_FUNCTION_4_2();
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
}

{
  void *v4;
  int v5;

  v4 = *(void **)a1;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 4)
  {
    outlined consume of MLDataValue(v4, *(id *)(a1 + 8), v5);
    v4 = 0;
  }
  *a2 = v4;
  OUTLINED_FUNCTION_22();
}

uint64_t MLDataValue.DictionaryType.featureValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *v0;
  v3 = MEMORY[0x22075BAE8](0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x21AF1B0C0);
  }
  v4 = v3;
  OUTLINED_FUNCTION_21_30();
  *(_QWORD *)(swift_initStackObject() + 16) = v4;
  v5 = specialized Dictionary.startIndex.getter(v2);
  v7 = v6;
  LOBYTE(v4) = v8;
  OUTLINED_FUNCTION_52_1();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v1 = 0;
    if (*(_DWORD *)(v2 + 36) != (_DWORD)v7)
    {
      __break(1u);
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_39_17();
    if (v5 != v9)
    {
      if ((v5 & 0x8000000000000000) == 0 && v5 < v9)
      {
        if (((*(_QWORD *)(v2 + 64 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v10 = *(_QWORD *)(v2 + 48) + 24 * v5;
          v12 = *(void **)v10;
          v11 = *(void **)(v10 + 8);
          v13 = *(unsigned __int8 *)(v10 + 16);
          v14 = *(_QWORD *)(v2 + 56) + 24 * v5;
          v16 = *(void **)v14;
          v15 = *(void **)(v14 + 8);
          v17 = (void *)OUTLINED_FUNCTION_12_39(*(void **)v10, v11, *(_BYTE *)(v10 + 16));
          v20 = (void *)OUTLINED_FUNCTION_12_39(v17, v18, v19);
          outlined consume of MLDataValue(v20, v21, v22);
          OUTLINED_FUNCTION_36_25(v16, v15);
          OUTLINED_FUNCTION_52_1();
          specialized _NativeDictionary.index(after:)(v5, v7, 0, v2);
          swift_bridgeObjectRelease();
          outlined copy of MLDataValue(v12, v11, v13);
          OUTLINED_FUNCTION_33_25(v16);
          OUTLINED_FUNCTION_36_25(v16, v15);
          __asm { BR              X8 }
        }
LABEL_14:
        __break(1u);
        JUMPOUT(0x21AF1B0ACLL);
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v5, v7, 0);
  OUTLINED_FUNCTION_16_17();
  v23 = swift_retain();
  CMLFeatureValue.__allocating_init(_:)(v23);
  if (v1)
  {
    OUTLINED_FUNCTION_6_22();
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x21AF1B0E0);
  }
  v25 = v24;
  swift_setDeallocating();
  tc_v1_release();
  return v25;
}

void MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_40_21(v3, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  v8 = Dictionary.init<A>(uniqueKeysWithValues:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *a3 = v8;
  OUTLINED_FUNCTION_164();
}

uint64_t MLDataValue.DictionaryType.debugDescription.getter()
{
  lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue();
  return Dictionary.debugDescription.getter();
}

uint64_t static MLDataValue.DictionaryType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

void MLDataValue.DictionaryType.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4B00];
}

BOOL MLDataValue.DictionaryType.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

void MLDataValue.DictionaryType.subscript.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  char v21;

  v3 = *v1;
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = (void *)OUTLINED_FUNCTION_7_41();
    outlined copy of MLDataValue(v4, v5, v6);
    v7 = OUTLINED_FUNCTION_7_41();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v3 + 56) + 24 * v10;
      v13 = *(void **)v12;
      v14 = *(void **)(v12 + 8);
      *(_QWORD *)a1 = *(_QWORD *)v12;
      *(_QWORD *)(a1 + 8) = v14;
      v15 = *(_BYTE *)(v12 + 16);
      *(_BYTE *)(a1 + 16) = v15;
      outlined copy of MLDataValue(v13, v14, v15);
      v16 = (void *)OUTLINED_FUNCTION_7_41();
      outlined consume of MLDataValue(v16, v17, v18);
      return;
    }
    v19 = (void *)OUTLINED_FUNCTION_7_41();
    outlined consume of MLDataValue(v19, v20, v21);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  OUTLINED_FUNCTION_164();
}

BOOL static MLDataValue.DictionaryType.Index.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static MLDataValue.DictionaryType.Index.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Comparable.> infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

void MLDataValue.DictionaryType.startIndex.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = specialized Dictionary.startIndex.getter(*v1);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 128;
  for (i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void MLDataValue.DictionaryType.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

void MLDataValue.DictionaryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized Dictionary.subscript.getter(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16));
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;

  if ((a5 & 1) != 0)
    goto LABEL_10;
  if (a3 < 0 || (OUTLINED_FUNCTION_39_17(), v10 <= (uint64_t)v7))
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(v9 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v7) & 1) != 0)
  {
    if (*(_DWORD *)(v9 + 36) == v8)
    {
      v11 = 3 * v7;
      v12 = *(_QWORD *)(v9 + 56);
      v13 = *(_QWORD *)(v9 + 48) + 24 * v7;
      v14 = *(void **)v13;
      v15 = *(void **)(v13 + 8);
      *(_QWORD *)v5 = *(_QWORD *)v13;
      *(_QWORD *)(v5 + 8) = v15;
      v16 = *(_BYTE *)(v13 + 16);
      *(_BYTE *)(v5 + 16) = v16;
      v17 = v12 + 8 * v11;
      v18 = *(void **)v17;
      v19 = *(void **)(v17 + 8);
      *(_QWORD *)v6 = *(_QWORD *)v17;
      *(_QWORD *)(v6 + 8) = v19;
      v20 = *(_BYTE *)(v17 + 16);
      *(_BYTE *)(v6 + 16) = v20;
      outlined copy of MLDataValue(v14, v15, v16);
      outlined copy of MLDataValue(v18, v19, v20);
      return;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
}

void specialized Dictionary.subscript.getter(uint64_t a1, unint64_t a2)
{
  specialized Dictionary.subscript.getter(a1, a2);
}

{
  specialized Dictionary.subscript.getter(a1, a2);
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0x8000000000000000) != 0 || (OUTLINED_FUNCTION_39_17(), v8 <= v7))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(v5 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(v5 + 36) == v4)
  {
    v9 = v3;
    v10 = *(_QWORD *)(v5 + 56);
    v11 = v6(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a2, v11);
    swift_bridgeObjectRetain();
    return;
  }
LABEL_8:
  __break(1u);
}

void MLDataValue.DictionaryType.index(after:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a2 = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  OUTLINED_FUNCTION_22();
}

void (*protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType(_QWORD *a1, uint64_t a2))()
{
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char v13;

  v4 = (char *)malloc(0x80uLL);
  *a1 = v4;
  MLDataValue.DictionaryType.subscript.getter((uint64_t)v4, (uint64_t)(v4 + 24), a2);
  v5 = *(void **)v4;
  *((_QWORD *)v4 + 6) = *(_QWORD *)v4;
  v6 = v4 + 48;
  v7 = (void *)*((_QWORD *)v4 + 1);
  *((_QWORD *)v4 + 12) = v5;
  *((_QWORD *)v4 + 13) = v7;
  v8 = v4[16];
  v4[41] = v8;
  *((_QWORD *)v4 + 7) = v7;
  v4[64] = v8;
  v9 = *((_QWORD *)v4 + 3);
  v10 = *((_QWORD *)v4 + 4);
  *((_QWORD *)v4 + 14) = v9;
  *((_QWORD *)v4 + 15) = v10;
  LOBYTE(v4) = v4[40];
  *(v6 - 6) = (char)v4;
  *((_QWORD *)v6 + 3) = v9;
  *((_QWORD *)v6 + 4) = v10;
  v6[40] = (char)v4;
  outlined copy of MLDataValue(v5, v7, v8);
  v11 = (void *)OUTLINED_FUNCTION_9_40();
  outlined copy of MLDataValue(v11, v12, v13);
  return protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType;
}

void protocol witness for Collection.subscript.read in conformance MLDataValue.DictionaryType()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;

  OUTLINED_FUNCTION_20_3();
  v1 = *v0;
  v3 = *(void **)(*v0 + 112);
  v2 = *(void **)(*v0 + 120);
  v5 = *(void **)(*v0 + 96);
  v4 = *(void **)(*v0 + 104);
  v6 = *(void **)(*v0 + 72);
  v7 = *(void **)(*v0 + 80);
  v8 = *(_BYTE *)(*v0 + 88);
  v9 = *(_BYTE *)(*v0 + 41);
  outlined consume of MLDataValue(*(void **)(*v0 + 48), *(id *)(v1 + 56), *(_BYTE *)(v1 + 64));
  outlined consume of MLDataValue(v6, v7, v8);
  outlined consume of MLDataValue(v5, v4, v9);
  OUTLINED_FUNCTION_36_25(v3, v2);
  free((void *)v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataValue.DictionaryType@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];

  v3 = a1[1];
  v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter((uint64_t)&v5, *v2, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Collection<>.indices.getter(*v1, a1);
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataValue.DictionaryType(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return specialized Collection.index(_:offsetBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *v3, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataValue.DictionaryType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return specialized Collection.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), *v4, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized Collection.distance(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *v2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v11;
  _OWORD v12[2];

  v6 = *a1;
  v7 = a1[1];
  v8 = *((unsigned __int8 *)a1 + 16);
  v9 = a2[1];
  v11 = *a2;
  v12[0] = v9;
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)a2 + 25);
  return a5(v6, v7, v8, &v11, *v5);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.DictionaryType(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(&v5, &v7);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataValue.DictionaryType(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;

  v2 = OUTLINED_FUNCTION_9_40();
  v6 = specialized _NativeDictionary.index(after:)(v2, v3, v4, v5);
  v8 = v7;
  v10 = v9;
  v11 = OUTLINED_FUNCTION_9_40();
  result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v12, v13);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance MLDataValue.DictionaryType(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *v1;
  v4 = specialized Dictionary.startIndex.getter(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataValue.DictionaryType()
{
  uint64_t *v0;

  return specialized Array.count.getter(*v0);
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataValue.DictionaryType()
{
  uint64_t *v0;

  specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataValue.DictionaryType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t CMLDictionary.subscript.getter(uint64_t a1)
{
  return CMLDictionary.keyAndValue(at:)(a1);
}

void protocol witness for BidirectionalCollection.index(before:) in conformance CMLDictionary(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = v3;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t v2;

  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = v2;
}

void protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CMLDictionary(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = v4;
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance CMLDictionary(uint64_t *a1, uint64_t *a2)
{
  specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

void protocol witness for Collection.endIndex.getter in conformance CMLDictionary(_QWORD *a1@<X8>)
{
  *a1 = CMLDictionary.endIndex.getter();
  OUTLINED_FUNCTION_22();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CMLDictionary(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3;

  *a1 = CMLDictionary.subscript.getter(*a2);
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance CMLDictionary;
}

uint64_t protocol witness for Collection.subscript.read in conformance CMLDictionary()
{
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance CMLDictionary@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = specialized Collection<>.subscript.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance CMLDictionary@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance CMLDictionary()
{
  return specialized Collection.isEmpty.getter();
}

void protocol witness for Collection.count.getter in conformance CMLDictionary()
{
  specialized Collection.count.getter();
  OUTLINED_FUNCTION_22();
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CMLDictionary(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;

  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLDictionary(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_45_8(a1);
  specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3, v4);
  OUTLINED_FUNCTION_22();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_45_8(a1);
  specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3, v4);
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLDictionary(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1], a5);
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.index(after:) in conformance CMLDictionary(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = v3;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.formIndex(after:) in conformance CMLDictionary(uint64_t *a1)
{
  uint64_t v2;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Sequence.underestimatedCount.getter in conformance CMLDictionary()
{
  specialized Collection.underestimatedCount.getter();
}

void protocol witness for Sequence._copyToContiguousArray() in conformance CMLDictionary()
{
  specialized Collection._copyToContiguousArray()();
}

void protocol witness for Sequence._copyContents(initializing:) in conformance CMLDictionary()
{
  specialized Sequence._copyContents(initializing:)();
  OUTLINED_FUNCTION_22();
}

uint64_t MLDataValue.DictionaryType.dataValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
  return swift_bridgeObjectRetain();
}

void closure #1 in MLDataValue.DictionaryType.init(from:)(uint64_t a1@<X8>)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t countAndFlagsBits;
  char v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v2 = CMLFeatureValue.stringValue()();
  if (v3)
  {
    OUTLINED_FUNCTION_40_0();
    countAndFlagsBits = 0;
    v5 = 0;
    v6 = (int64x2_t)xmmword_21AFEDCC0;
    v7 = 0uLL;
  }
  else
  {
    countAndFlagsBits = v2._countAndFlagsBits;
    swift_retain();
    MLDataValue.init(_:)();
    v7 = v8;
    v5 = v9;
    v6 = vdupq_n_s64(2uLL);
    v6.i64[0] = (uint64_t)v2._object;
  }
  *(_QWORD *)a1 = countAndFlagsBits;
  *(int64x2_t *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 40) = v5;
}

void Dictionary<>.init(from:)(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (*(_BYTE *)(a1 + 16) == 4)
    Dictionary<>.init(from:)();
  else
    outlined consume of MLDataValue(v2, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void Dictionary<>.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  id v40;
  char v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  char v86;
  char v87;
  uint64_t v88;

  OUTLINED_FUNCTION_20_3();
  v72 = v2;
  v73 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v61 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(v61 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v69 = v12;
  MEMORY[0x24BDAC7A8](v13);
  v79 = (char *)&v60 - v14;
  v68 = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v67 = v16;
  v63 = type metadata accessor for Optional();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v81 = (uint64_t)&v60 - v17;
  v78 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v66 = v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v60 - v21;
  v23 = *v10;
  v80 = v8;
  v70 = v4;
  v88 = Dictionary.init()();
  v24 = specialized Dictionary.startIndex.getter(v23);
  if ((v26 & 1) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    OUTLINED_FUNCTION_106_0();
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v0, v4, 0);
LABEL_15:
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    v0 = v24;
    v4 = v25;
    v74 = v23 + 64;
    v65 = v23;
    v71 = v6;
    v64 = v22;
    while (*(_DWORD *)(v23 + 36) == (_DWORD)v4)
    {
      OUTLINED_FUNCTION_39_17();
      if (v0 == v27)
        goto LABEL_12;
      if (v0 < 0 || v0 >= v27)
        goto LABEL_17;
      if (((*(_QWORD *)(v74 + (((unint64_t)v0 >> 3) & 0xFFFFFFFFFFFFF8)) >> v0) & 1) == 0)
        goto LABEL_18;
      v28 = *(_QWORD *)(v23 + 48) + 24 * v0;
      v30 = *(void **)v28;
      v29 = *(void **)(v28 + 8);
      v31 = *(_BYTE *)(v28 + 16);
      v32 = *(_QWORD *)(v23 + 56) + 24 * v0;
      v33 = *(void **)v32;
      v34 = *(void **)(v32 + 8);
      v35 = *(unsigned __int8 *)(v32 + 16);
      v36 = (void *)OUTLINED_FUNCTION_13_41(*(void **)v28, v29, v31);
      v39 = (void *)OUTLINED_FUNCTION_13_41(v36, v37, v38);
      outlined consume of MLDataValue(v39, v40, v41);
      OUTLINED_FUNCTION_20_27();
      swift_bridgeObjectRetain();
      v76 = specialized _NativeDictionary.index(after:)(v0, v4, 0, v23);
      v77 = v42;
      v44 = v43;
      OUTLINED_FUNCTION_106_0();
      v45 = v80;
      v75 = v44;
      v46 = v44 & 1;
      v87 = v46;
      outlined copy of MLDataValue(v30, v29, v31);
      outlined copy of MLDataValue(v33, v34, v35);
      v82 = v33;
      v83 = v34;
      OUTLINED_FUNCTION_20_27();
      v84 = v30;
      v85 = v29;
      v86 = v31;
      v47 = v81;
      (*(void (**)(void **, uint64_t))(v73 + 16))(&v84, v45);
      if (__swift_getEnumTagSinglePayload(v47, 1, v45) == 1)
      {
        OUTLINED_FUNCTION_14_33();
        OUTLINED_FUNCTION_106_0();
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v76, v77, v46);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v81, v63);
        goto LABEL_15;
      }
      v48 = v78;
      OUTLINED_FUNCTION_40_21((uint64_t)v22, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32));
      outlined copy of MLDataValue(v30, v29, v31);
      v50 = v82;
      v49 = v83;
      outlined copy of MLDataValue(v82, v83, v35);
      outlined consume of MLDataValue(v30, v29, v31);
      v84 = v50;
      v85 = v49;
      v86 = v35;
      v51 = v71;
      v52 = (uint64_t)v79;
      (*(void (**)(void **, uint64_t))(v72 + 16))(&v84, v71);
      if (__swift_getEnumTagSinglePayload(v52, 1, v51) == 1)
      {
        OUTLINED_FUNCTION_14_33();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v80);
        OUTLINED_FUNCTION_106_0();
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v76, v77, v75 & 1);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v79, v61);
        goto LABEL_15;
      }
      v53 = v22;
      v54 = v68;
      v55 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v67, v79, v51);
      v56 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
      v75 = v35;
      v57 = v80;
      v56(v66, v53, v80);
      v58 = v69;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v69, v55, v51);
      __swift_storeEnumTagSinglePayload(v58, 0, 1, v51);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      outlined consume of MLDataValue(v30, v29, v31);
      outlined consume of MLDataValue(v82, v83, v75);
      v4 = v77;
      v59 = v55;
      v23 = v65;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v59, v51);
      v22 = v64;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v64, v57);
      v0 = v76;
      if ((v87 & 1) != 0)
        goto LABEL_11;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_0;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  OUTLINED_FUNCTION_20_3();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - v12;
  v14 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_53_0();
  v16 = 0;
  specialized handling<A, B>(_:_:)(*(_QWORD *)(v6 + 16));
  v46 = v6;
  v51 = v0;
  v52 = v14;
  if (!v17)
  {
    __break(1u);
LABEL_20:
    swift_unexpectedError();
    __break(1u);
    return;
  }
  v18 = v17;
  OUTLINED_FUNCTION_21_30();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v18;
  v61 = Dictionary.init()();
  OUTLINED_FUNCTION_3_1();
  if (CMLDictionary.size.getter())
  {
    v44 = v8;
    v45 = v7;
    v20 = 0;
    v47 = v4;
    v49 = v10;
    v50 = inited;
    v48 = v13;
    while (1)
    {
      v21 = v2;
      v22 = CMLDictionary.keyAndValue(at:)(v20);
      v53 = v16;
      if (v16)
        goto LABEL_20;
      v23 = v22;
      OUTLINED_FUNCTION_3_1();
      specialized RandomAccessCollection<>.index(after:)(v20);
      v54 = v24;
      OUTLINED_FUNCTION_4_2();
      v25 = dynamic_cast_existential_1_unconditional(MEMORY[0x24BEE0D00]);
      v27 = v26;
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      v29 = type metadata accessor for Optional();
      v30 = *(_QWORD *)(v29 - 8);
      MEMORY[0x24BDAC7A8](v29);
      v32 = (char *)&v44 - v31;
      v33 = swift_retain();
      v55 = v23;
      v28(v33, v25, v27);
      if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v25) == 1)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
        v58 = 0;
        v56 = 0u;
        v57 = 0u;
      }
      else
      {
        *((_QWORD *)&v57 + 1) = v25;
        v58 = v27;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v56);
        OUTLINED_FUNCTION_40_21((uint64_t)boxed_opaque_existential_0, (uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32));
      }
      v2 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible?);
      v35 = swift_dynamicCast();
      v37 = (uint64_t)v48;
      v36 = (uint64_t)v49;
      v39 = v51;
      v38 = v52;
      if ((v35 & 1) == 0 || (v40 = v60) == 0)
      {
        OUTLINED_FUNCTION_29_25();
        OUTLINED_FUNCTION_184();
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_10_37();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      v41 = v59;
      v42 = v47;
      static MLDataValueConvertible.makeInstance(featureValue:)(v47, v2, (uint64_t)v48);
      if (__swift_getEnumTagSinglePayload(v37, 1, v42) == 1)
      {
        OUTLINED_FUNCTION_29_25();
        OUTLINED_FUNCTION_79();
        OUTLINED_FUNCTION_37_15();
        OUTLINED_FUNCTION_10_37();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v37, v45);
        goto LABEL_2;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v39, v37, v42);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v39, v42);
      OUTLINED_FUNCTION_110_1(v36, 0);
      *(_QWORD *)&v56 = v41;
      *((_QWORD *)&v56 + 1) = v40;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_37_15();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v42);
      v43 = CMLDictionary.size.getter();
      v20 = v54;
      v16 = v53;
      if (v54 == v43)
      {
        OUTLINED_FUNCTION_10_37();
        OUTLINED_FUNCTION_4_2();
        goto LABEL_16;
      }
    }
  }
  swift_release();
  OUTLINED_FUNCTION_4_2();
LABEL_16:
  OUTLINED_FUNCTION_4_2();
LABEL_2:
  OUTLINED_FUNCTION_9_5();
}

void Dictionary<>.dataValue.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)&v19 = a1;
  v13 = type metadata accessor for Dictionary();
  v14 = MEMORY[0x22075B938](MEMORY[0x24BEE04D8], v13);
  MEMORY[0x22075AA08](&v18, v13, v14);
  v15 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = a6;
  v16 = type metadata accessor for LazySequence();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue));
  MEMORY[0x22075B938](MEMORY[0x24BEE25B0], v16);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v17 = type metadata accessor for LazyMapSequence();
  MEMORY[0x22075B938](MEMORY[0x24BEE2B40], v17);
  MLDataValue.DictionaryType.init<A>(uniqueKeysWithValues:)((uint64_t)&v19, v17, &v18);
  *(_QWORD *)a7 = v18;
  *(_QWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 16) = 4;
}

uint64_t closure #1 in Dictionary<>.dataValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a3, a6);
}

void Dictionary<>.featureValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;

  OUTLINED_FUNCTION_20_3();
  v44 = v0;
  v2 = v1;
  v49 = *(_QWORD *)(v3 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v43 = v5;
  v48 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v39 - v14;
  v16 = MEMORY[0x22075BAE8](0, v13);
  if (!v16)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_6_22();
    while (1)
    {
      swift_unexpectedError();
      __break(1u);
      OUTLINED_FUNCTION_6_22();
    }
  }
  v17 = v16;
  OUTLINED_FUNCTION_21_30();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v17;
  v18 = *(_QWORD *)(v2 + 64);
  v40 = v2 + 64;
  v19 = 1 << *(_BYTE *)(v2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v41 = (unint64_t)(v19 + 63) >> 6;
  v42 = v2;
  v39 = v41 - 1;
  swift_bridgeObjectRetain();
  v22 = 0;
  v23 = v43;
  if (!v21)
    goto LABEL_7;
LABEL_5:
  v24 = __clz(__rbit64(v21));
  v25 = (v21 - 1) & v21;
  v26 = v24 | (v22 << 6);
  v27 = v48;
  v28 = v49;
LABEL_6:
  v29 = *(_QWORD *)(v42 + 56);
  v30 = (_QWORD *)(*(_QWORD *)(v42 + 48) + 16 * v26);
  v31 = v30[1];
  *(_QWORD *)v11 = *v30;
  *((_QWORD *)v11 + 1) = v31;
  (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v29 + *(_QWORD *)(v28 + 72) * v26, v27);
  OUTLINED_FUNCTION_110_1((uint64_t)v11, 0);
  OUTLINED_FUNCTION_52_1();
  v23 = v43;
  while (1)
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v15, v11, v47);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, TupleTypeMetadata2) == 1)
      break;
    v51 = v25;
    v52 = v22;
    v50 = 0;
    v34 = *(_QWORD *)v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v23, &v15[*(int *)(TupleTypeMetadata2 + 48)], v27);
    MLDataValueConvertible.featureValue.getter();
    v35 = v34;
    v36 = v50;
    CMLDictionary.add(key:value:)(v35);
    if (v36)
      goto LABEL_32;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v23, v27);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_184();
    v21 = v51;
    v22 = v52;
    if (v51)
      goto LABEL_5;
LABEL_7:
    v32 = v22 + 1;
    v27 = v48;
    v28 = v49;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v32 < v41)
    {
      v33 = *(_QWORD *)(v40 + 8 * v32);
      if (v33)
        goto LABEL_10;
      v22 += 2;
      if (v32 + 1 >= v41)
      {
        v22 = v32;
      }
      else
      {
        v33 = *(_QWORD *)(v40 + 8 * v22);
        if (v33)
        {
          ++v32;
LABEL_10:
          v25 = (v33 - 1) & v33;
          v26 = __clz(__rbit64(v33)) + (v32 << 6);
          v22 = v32;
          goto LABEL_6;
        }
        v37 = v32 + 2;
        if (v32 + 2 < v41)
        {
          v33 = *(_QWORD *)(v40 + 8 * v37);
          if (v33)
          {
            v32 += 2;
            goto LABEL_10;
          }
          while (1)
          {
            v32 = v37 + 1;
            if (__OFADD__(v37, 1))
              goto LABEL_30;
            if (v32 >= v41)
              break;
            v33 = *(_QWORD *)(v40 + 8 * v32);
            ++v37;
            if (v33)
              goto LABEL_10;
          }
          v22 = v39;
        }
      }
    }
    OUTLINED_FUNCTION_110_1((uint64_t)v11, 1);
    v25 = 0;
  }
  OUTLINED_FUNCTION_37_15();
  OUTLINED_FUNCTION_16_17();
  v38 = swift_retain();
  CMLFeatureValue.__allocating_init(_:)(v38);
  swift_setDeallocating();
  tc_v1_release();
  OUTLINED_FUNCTION_9_5();
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
      return _HashTable.occupiedBucket(after:)();
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_21AF1CE60()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Dictionary<>.dataValue.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in Dictionary<>.dataValue.getter(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.DictionaryType.Index, &type metadata for MLDataValue.DictionaryType.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.DictionaryType.Index, &type metadata for MLDataValue.DictionaryType.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType.Index and conformance MLDataValue.DictionaryType.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType;
  if (!lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.DictionaryType, &type metadata for MLDataValue.DictionaryType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.DictionaryType and conformance MLDataValue.DictionaryType);
  }
  return result;
}

void associated type witness table accessor for Collection.Indices : Collection in MLDataValue.DictionaryType()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type DefaultIndices<MLDataValue.DictionaryType> and conformance DefaultIndices<A>);
}

void associated type witness table accessor for Collection.SubSequence : Collection in MLDataValue.DictionaryType()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataValue.DictionaryType> and conformance Slice<A>);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataValue.DictionaryType()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataValue.DictionaryType> and conformance IndexingIterator<A>);
}

uint64_t destroy for MLDataValue.DictionaryType.Index(uint64_t a1)
{
  return outlined consume of [MLDataValue : MLDataValue].Index._Variant(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  v6 = OUTLINED_FUNCTION_9_40();
  outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataValue.DictionaryType.Index(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MLDataValue.DictionaryType.Index()
{
  return &type metadata for MLDataValue.DictionaryType.Index;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in CMLDictionary()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<CMLDictionary> and conformance IndexingIterator<A>);
}

void base witness table accessor for Sequence in CMLDictionary()
{
  lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.Indices : Collection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void associated type witness table accessor for Collection.SubSequence : Collection in CMLDictionary()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance Slice<A>);
}

void base witness table accessor for Collection in CMLDictionary()
{
  lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>);
}

void base witness table accessor for BidirectionalCollection in CMLDictionary()
{
  lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary((uint64_t)&lazy protocol witness table cache variable for type CMLDictionary and conformance CMLDictionary);
}

unint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = OUTLINED_FUNCTION_41_10(a1);
  if (!result)
  {
    v4 = v3;
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x22075B938](v4, v5, v7);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CMLDictionary()
{
  return lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLDictionary> and conformance <> Slice<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<CMLDictionary> and conformance <> Slice<A>(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = OUTLINED_FUNCTION_41_10(a1);
  if (!result)
  {
    v5 = v4;
    v6 = v3;
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<CMLDictionary>);
    lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(v6);
    v9 = v8;
    result = MEMORY[0x22075B938](v5, v7, &v9);
    atomic_store(result, v1);
  }
  return result;
}

void lazy protocol witness table accessor for type CMLDictionary and conformance CMLDictionary(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    type metadata accessor for CMLDictionary();
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t dynamic_cast_existential_1_unconditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
    return a1;
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_6_45()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_7_41()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_8_44()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_9_40()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_10_37()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_12_39(void *a1, void *a2, char a3)
{
  void *v3;
  uint64_t v4;
  void *v5;
  char v6;

  outlined copy of MLDataValue(a1, a2, a3);
  outlined copy of MLDataValue(v5, v3, v6);
  return v4;
}

uint64_t OUTLINED_FUNCTION_13_41(void *a1, void *a2, char a3)
{
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;

  outlined copy of MLDataValue(a1, a2, a3);
  outlined copy of MLDataValue(v4, v5, v3);
  return v6;
}

void OUTLINED_FUNCTION_14_33()
{
  char v0;
  char v1;
  void *v2;
  void *v3;
  uint64_t v4;

  outlined consume of MLDataValue(v3, v2, v1);
  outlined consume of MLDataValue(*(void **)(v4 - 144), *(id *)(v4 - 136), v0);
}

void OUTLINED_FUNCTION_20_27()
{
  char v0;
  void *v1;
  void *v2;

  outlined consume of MLDataValue(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_21_30()
{
  return type metadata accessor for CMLDictionary();
}

uint64_t OUTLINED_FUNCTION_29_25()
{
  return swift_release_n();
}

id OUTLINED_FUNCTION_33_25(void *a1)
{
  void *v1;
  char v2;

  return outlined copy of MLDataValue(a1, v1, v2);
}

void OUTLINED_FUNCTION_36_25(void *a1, void *a2)
{
  char v2;

  outlined consume of MLDataValue(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_40_21@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double *v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v10 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = (double *)(a1 + 32);
    while (1)
    {
      v6 = round(*v5 * (double)*(uint64_t *)(a2 + 16));
      if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
        break;
      if (v6 <= -9.22337204e18)
        goto LABEL_12;
      if (v6 >= 9.22337204e18)
        goto LABEL_13;
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      if (v8 >= v7 >> 1)
      {
        v9 = OUTLINED_FUNCTION_179(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v8 + 1, 1);
      }
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = (uint64_t)v6;
      ++v5;
      if (!--v3)
        goto LABEL_9;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v13;
  char *v14;
  void *v15;
  char v16;
  __int128 v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v22;
  id v27[2];
  char v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = a3 & 1;
  if (v9)
  {
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v13 = v31;
    v14 = (char *)(a1 + 48);
    while (1)
    {
      v15 = (void *)*((_QWORD *)v14 - 1);
      v16 = *v14;
      v27[0] = *((id *)v14 - 2);
      v27[1] = v15;
      v28 = v16;
      outlined copy of MLDataValue(v27[0], v15, v16);
      closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)((uint64_t)v27, a2, v10, a4, a5, a6, a7, (uint64_t)&v29);
      if (v8)
        break;
      v8 = 0;
      OUTLINED_FUNCTION_25_28();
      v17 = v29;
      v18 = v30;
      v31 = v13;
      v19 = *(_QWORD *)(v13 + 16);
      if (v19 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        v22 = v29;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v17 = v22;
        v13 = v31;
      }
      v14 += 24;
      *(_QWORD *)(v13 + 16) = v19 + 1;
      v20 = v13 + 24 * v19;
      *(_OWORD *)(v20 + 32) = v17;
      *(_BYTE *)(v20 + 48) = v18;
      if (!--v9)
      {
        OUTLINED_FUNCTION_24_27(a2);
        goto LABEL_10;
      }
    }
    OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_24_27(a2);
    OUTLINED_FUNCTION_82_2();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_24_27(a2);
    v13 = MEMORY[0x24BEE4AF8];
LABEL_10:
    OUTLINED_FUNCTION_82_2();
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  Swift::Int v51;
  unint64_t v52;
  char v53;
  Swift::Bool v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;

  v75 = a4;
  v76 = a5;
  v74 = a2;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v84 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_bridgeObjectRetain();
  v92 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v11);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v92);
  v77 = v5;
  if (v5)
  {
LABEL_51:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v12 = (uint64_t)v92;
  v70 = v92[2];
  if (v70)
  {
    v73 = a3;
    v71 = a1;
    v13 = 0;
    v14 = MEMORY[0x24BEE4AF8];
    v72 = v92 + 4;
    v15 = v84;
    v79 = v8;
    v69 = (uint64_t)v92;
    while (1)
    {
      v78 = v13;
      if (v13 >= *(_QWORD *)(v12 + 16))
        break;
      v16 = &v72[2 * v13];
      v17 = *v16;
      v18 = v16[1];
      swift_bridgeObjectRetain_n();
      v86 = v17;
      v19 = specialized Dictionary.subscript.getter(v17, v18, v73);
      OUTLINED_FUNCTION_106_0();
      if (!v19)
        goto LABEL_49;
      v90 = v19;
      v20 = OUTLINED_FUNCTION_36_26();
      v21 = v71;
      v22 = v77;
      randomSplit<A>(indices:proportions:generator:)((uint64_t)v20, v71);
      v82 = v23;
      v77 = v22;
      if (v22)
        goto LABEL_43;
      OUTLINED_FUNCTION_4_2();
      v81 = *(_QWORD *)(v21 + 16);
      if (v81)
      {
        v24 = 0;
        v80 = v82 + 32;
        v85 = v18;
        while (1)
        {
          v25 = *(_QWORD *)(v14 + 16);
          v87 = v24;
          if (v25 <= v24)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
            v26 = Dictionary.init(dictionaryLiteral:)();
            if ((OUTLINED_FUNCTION_55_18() & 1) == 0)
            {
              OUTLINED_FUNCTION_35_19();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v14 = v65;
            }
            v28 = *(_QWORD *)(v14 + 16);
            v27 = *(_QWORD *)(v14 + 24);
            v24 = v87;
            if (v28 >= v27 >> 1)
            {
              OUTLINED_FUNCTION_179(v27);
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v24 = v87;
              v14 = v66;
            }
            *(_QWORD *)(v14 + 16) = v28 + 1;
            *(_QWORD *)(v14 + 8 * v28 + 32) = v26;
            v15 = v84;
          }
          if (v24 >= *(_QWORD *)(v82 + 16))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          v29 = *(_QWORD *)(v80 + 8 * v24);
          v30 = *(_QWORD *)(v29 + 16);
          if (v30)
            break;
          v91 = MEMORY[0x24BEE4AF8];
LABEL_25:
          swift_bridgeObjectRetain();
          if ((OUTLINED_FUNCTION_55_18() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew()();
            v14 = v64;
          }
          if (v87 >= *(_QWORD *)(v14 + 16))
            goto LABEL_45;
          v39 = v9;
          v40 = v18;
          v41 = v14;
          v42 = v14 + 32;
          v43 = v87;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v92 = *(_QWORD **)(v42 + 8 * v43);
          v45 = (uint64_t)v92;
          v46 = v42;
          *(_QWORD *)(v42 + 8 * v43) = 0x8000000000000000;
          v47 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v40);
          v49 = *(_QWORD *)(v45 + 16);
          v50 = (v48 & 1) == 0;
          v51 = v49 + v50;
          if (__OFADD__(v49, v50))
            goto LABEL_46;
          v52 = v47;
          v53 = v48;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          v54 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v51);
          v14 = v41;
          v18 = v85;
          if (v54)
          {
            v55 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
            if ((v53 & 1) != (v56 & 1))
              goto LABEL_50;
            v52 = v55;
          }
          v57 = v92;
          if ((v53 & 1) != 0)
          {
            v58 = v92[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v58 + 8 * v52) = v91;
          }
          else
          {
            v92[(v52 >> 6) + 8] |= 1 << v52;
            v59 = (_QWORD *)(v57[6] + 16 * v52);
            *v59 = v86;
            v59[1] = v18;
            *(_QWORD *)(v57[7] + 8 * v52) = v91;
            v60 = v57[2];
            v61 = __OFADD__(v60, 1);
            v62 = v60 + 1;
            if (v61)
              goto LABEL_47;
            v57[2] = v62;
            swift_bridgeObjectRetain();
          }
          v63 = v87 + 1;
          *(_QWORD *)(v46 + 8 * v87) = v57;
          OUTLINED_FUNCTION_106_0();
          OUTLINED_FUNCTION_123();
          v24 = v63;
          v9 = v39;
          v15 = v84;
          if (v63 == v81)
            goto LABEL_37;
        }
        v83 = v14;
        v92 = (_QWORD *)MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v31 = v79;
        v14 = 0;
        v91 = (uint64_t)v92;
        v32 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v88 = v90 + v32;
        v89 = v32;
        while (1)
        {
          v33 = *(_QWORD *)(v29 + 8 * v14 + 32);
          if ((v33 & 0x8000000000000000) != 0)
            break;
          if (v33 >= *(_QWORD *)(v90 + 16))
            goto LABEL_42;
          v34 = v29;
          v35 = *(_QWORD *)(v9 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v15, v88 + v35 * v33, v31);
          v36 = v91;
          v92 = (_QWORD *)v91;
          v38 = *(_QWORD *)(v91 + 16);
          v37 = *(_QWORD *)(v91 + 24);
          if (v38 >= v37 >> 1)
          {
            OUTLINED_FUNCTION_179(v37);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v31 = v79;
            v36 = (uint64_t)v92;
          }
          ++v14;
          *(_QWORD *)(v36 + 16) = v38 + 1;
          v91 = v36;
          (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v36 + v89 + v38 * v35, v15, v31);
          v29 = v34;
          if (v30 == v14)
          {
            swift_bridgeObjectRelease();
            v14 = v83;
            v18 = v85;
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        OUTLINED_FUNCTION_104();
        swift_release();
        OUTLINED_FUNCTION_106_0();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_4_2();
        return v14;
      }
LABEL_37:
      v67 = v78 + 1;
      OUTLINED_FUNCTION_106_0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v67;
      v12 = v69;
      if (v67 == v70)
      {
        swift_release();
        return v14;
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_51;
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

void randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v5;
  char v6;
  uint64_t v7;
  const char *v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v7 = 0xD000000000000024;
    v8 = "At least one proportion is required.";
    goto LABEL_16;
  }
  v5 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if ((v6 & 1) != 0)
    goto LABEL_45;
  if (v5 < 0.0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v7 = 0xD00000000000002ALL;
    v8 = "Only non-negative proportions are allowed.";
LABEL_16:
    *(_QWORD *)(v7 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_BYTE *)(v7 + 48) = 0;
    swift_willThrow(0.0);
    return;
  }
  v9 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if ((v10 & 1) == 0)
  {
    if (v9 <= 0.0)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v7 = 0xD00000000000002DLL;
      v8 = "At least one non-zero proportion is required.";
      goto LABEL_16;
    }
    v57 = a1;
    v53 = *(_QWORD *)(a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v56 = Sequence.shuffled<A>(using:)();
    v11 = 0;
    v12 = a2 + 32;
    v13 = 0.0;
    do
    {
      v14 = *(double *)(v12 + 8 * v11++);
      v13 = v13 + v14;
    }
    while (v2 != v11);
    v59 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v15 = 0;
    v16 = *(_QWORD *)(v59 + 16);
    do
    {
      v17 = *(double *)(v12 + 8 * v15);
      v18 = *(_QWORD *)(v59 + 24);
      v19 = v16 + 1;
      if (v16 >= v18 >> 1)
      {
        v20 = OUTLINED_FUNCTION_179(v18);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20, v16 + 1, 1);
      }
      ++v15;
      *(_QWORD *)(v59 + 16) = v19;
      *(double *)(v59 + 8 * v16++ + 32) = v17 / v13;
    }
    while (v2 != v15);
    v54 = v2;
    OUTLINED_FUNCTION_3_1();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v22 = v21;
    v23 = 0;
    v24 = *(_QWORD *)(v21 + 16);
    v25 = 8 * v24;
    do
    {
      if (v24 + v23)
        v26 = *(double *)(v22 + v25 + 8 * v23 + 24);
      else
        v26 = 0.0;
      v27 = *(double *)(v59 + 32 + 8 * v23);
      if ((unint64_t)(v24 + v23) >= *(_QWORD *)(v22 + 24) >> 1)
      {
        OUTLINED_FUNCTION_48_18();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v22 = v28;
      }
      *(_QWORD *)(v22 + 16) = v24 + v23 + 1;
      *(double *)(v22 + v25 + 8 * v23++ + 32) = v27 + v26;
    }
    while (v19 != v23);
    swift_release_n();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(v22, v57);
    v30 = v29;
    OUTLINED_FUNCTION_80();
    v31 = 0;
    v32 = 0;
    v55 = v30;
    v33 = v30 + 32;
    v34 = v57 + 32;
    v58 = MEMORY[0x24BEE4AF8];
    while (v32 < *(_QWORD *)(v55 + 16))
    {
      if (v31 < *(_QWORD *)(v33 + 8 * v32))
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v36 = v56 + 32;
        v35 = v53;
        v38 = v37;
        v39 = v56;
        v40 = v31;
        while ((v31 & 0x8000000000000000) == 0)
        {
          if (v40 >= *(_QWORD *)(v39 + 16))
            goto LABEL_42;
          v41 = *(_QWORD *)(v36 + 8 * v40);
          if (v41 >= v35)
            goto LABEL_43;
          v42 = *(_QWORD *)(v34 + 8 * v41);
          v43 = *(_QWORD *)(v38 + 16);
          if (v43 >= *(_QWORD *)(v38 + 24) >> 1)
          {
            v44 = OUTLINED_FUNCTION_48_18();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44, v45, v46, v47);
            v36 = v56 + 32;
            v35 = v53;
            v38 = v48;
            v39 = v56;
          }
          *(_QWORD *)(v38 + 16) = v43 + 1;
          *(_QWORD *)(v38 + 8 * v43 + 32) = v42;
          if ((int64_t)++v40 >= *(_QWORD *)(v33 + 8 * v32))
            goto LABEL_35;
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
      v40 = v31;
      v38 = MEMORY[0x24BEE4AF8];
LABEL_35:
      v49 = v58;
      if ((OUTLINED_FUNCTION_55_18() & 1) == 0)
      {
        OUTLINED_FUNCTION_35_19();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v49 = v51;
      }
      v50 = *(_QWORD *)(v49 + 16);
      if (v50 >= *(_QWORD *)(v49 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v49 = v52;
      }
      ++v32;
      *(_QWORD *)(v49 + 16) = v50 + 1;
      v58 = v49;
      *(_QWORD *)(v49 + 8 * v50 + 32) = v38;
      v31 = v40;
      if (v32 == v54)
      {
        OUTLINED_FUNCTION_82_2();
        OUTLINED_FUNCTION_123();
        return;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
}

void stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  void *v11;
  char v12;
  uint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v72;
  char v73;
  id v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v103;
  uint64_t v105;
  uint64_t v107;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  id v122;
  char v123;
  id v124;
  char v125;

  v11 = *(void **)a3;
  v12 = *(_BYTE *)(a3 + 8);
  if ((v12 & 1) != 0)
    OUTLINED_FUNCTION_18_28(*(void **)a3);
  outlined copy of Result<_DataTable, Error>(*(id *)a3, 0);
  _DataTable.columnNames.getter(&v124);
  outlined consume of Result<_DataTable, Error>(v11, 0);
  v115 = (void *)a4;
  v116 = a5;
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_28_28();
  v14 = OUTLINED_FUNCTION_23_30(closure #1 in Sequence<>.contains(_:)specialized partial apply);
  OUTLINED_FUNCTION_4_2();
  if ((v14 & 1) != 0)
  {
    v109 = v8;
    OUTLINED_FUNCTION_4_48();
    MLDataTable.subscript.getter(a4, a5, (uint64_t)&v124);
    OUTLINED_FUNCTION_90_2(v11);
    v15 = v124;
    v122 = v124;
    v123 = v125;
    MLUntypedColumn.dropDuplicates()(&v115);
    OUTLINED_FUNCTION_24_27(v15);
    v124 = v115;
    v125 = (char)v116;
    Array<A>.init(_:)((uint64_t)&v124, v16, v17, v18, v19, v20, v21, v22, v78, a8, v81, v83, v86, v88, v90, v92, v94, v97, v98,
      v99,
      (uint64_t)a5,
      a2,
      a6,
      a7);
    v24 = v23;
    v115 = v11;
    LOBYTE(v116) = v12;
    v25 = MLDataTable.size.getter();
    if (v25 < 0)
      goto LABEL_59;
    v26 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v25);
    v124 = v11;
    v125 = v12;
    OUTLINED_FUNCTION_4_48();
    v27 = MLDataTable.size.getter();
    v28 = specialized Array.init(repeating:count:)(0, v27);
    v89 = *(_QWORD *)(v24 + 16);
    if (v89)
    {
      v29 = 0;
      v93 = v24 + 32;
      v30 = a1;
      v91 = v24;
      v82 = v11;
      v111 = v26;
      while (1)
      {
        if (v29 >= *(_QWORD *)(v24 + 16))
          goto LABEL_58;
        v95 = v29;
        v31 = v93 + 24 * v29;
        v32 = *(void **)v31;
        v33 = *(void **)(v31 + 8);
        v34 = *(unsigned __int8 *)(v31 + 16);
        OUTLINED_FUNCTION_4_48();
        outlined copy of MLDataValue(v32, v33, v34);
        MLDataTable.subscript.getter(a4, v101, (uint64_t)&v120);
        OUTLINED_FUNCTION_90_2(v11);
        v35 = v120;
        v118 = v120;
        v119 = v121;
        v115 = v32;
        v116 = v33;
        HIDWORD(v100) = v34;
        v117 = v34;
        static MLUntypedColumn.== infix(_:_:)();
        OUTLINED_FUNCTION_90_2(v35);
        v115 = v122;
        LOBYTE(v116) = v123;
        Array<A>.init(_:)((uint64_t)&v115, v36, v37, v38, v39, v40, v41, v42, v79, v80, (uint64_t)v82, v84, v87, v89, v91, v93, v95, (uint64_t)v32, (uint64_t)v33,
          v100,
          (uint64_t)v101,
          v103,
          v105,
          v107);
        v44 = v43;
        v45 = *(_QWORD *)(v43 + 16);
        if (v45)
        {
          v46 = v111;
          v47 = v111[2];
          OUTLINED_FUNCTION_3_1();
          v48 = 0;
          v87 = v44;
          v49 = (_BYTE *)(v44 + 48);
          v50 = MEMORY[0x24BEE4AF8];
          v112 = v47;
          v113 = v45;
          while (v47 != v48)
          {
            if (v48 >= v46[2])
            {
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
              JUMPOUT(0x21AF1EDBCLL);
            }
            if (*v49)
              v51 = 0;
            else
              v51 = *((_QWORD *)v49 - 2) == 1;
            if (v51)
            {
              v52 = *((_QWORD *)v49 - 1);
              v53 = v46[v48 + 4];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v115 = (void *)v50;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v46 = v111;
                v50 = (uint64_t)v115;
              }
              v56 = *(_QWORD *)(v50 + 16);
              v55 = *(_QWORD *)(v50 + 24);
              if (v56 >= v55 >> 1)
              {
                OUTLINED_FUNCTION_179(v55);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v46 = v111;
                v50 = (uint64_t)v115;
              }
              *(_QWORD *)(v50 + 16) = v56 + 1;
              v57 = v50 + 32 * v56;
              *(_QWORD *)(v57 + 32) = 1;
              *(_QWORD *)(v57 + 40) = v52;
              *(_BYTE *)(v57 + 48) = 0;
              *(_QWORD *)(v57 + 56) = v53;
              v47 = v112;
              v45 = v113;
            }
            ++v48;
            v49 += 24;
            if (v45 == v48)
              break;
          }
          OUTLINED_FUNCTION_4_2();
          v30 = a1;
          v24 = v91;
        }
        else
        {
          v50 = MEMORY[0x24BEE4AF8];
        }
        swift_bridgeObjectRelease();
        ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(v50);
        OUTLINED_FUNCTION_79();
        v59 = OUTLINED_FUNCTION_36_26();
        randomSplit<A>(indices:proportions:generator:)((uint64_t)v59, v30);
        if (v109)
          break;
        v61 = v60;
        OUTLINED_FUNCTION_79();
        v114 = *(_QWORD *)(v30 + 16);
        if (v114)
        {
          v62 = 0;
          v63 = v61 + 32;
          while (1)
          {
            if (v62 >= *(_QWORD *)(v61 + 16))
              goto LABEL_57;
            v64 = *(_QWORD *)(*(_QWORD *)(v63 + 8 * v62) + 16);
            if (v64)
              break;
LABEL_41:
            if (++v62 == v114)
            {
              OUTLINED_FUNCTION_30();
              OUTLINED_FUNCTION_80();
              v30 = a1;
              v24 = v91;
              goto LABEL_44;
            }
          }
          v65 = 0;
          while (1)
          {
            v66 = *(_QWORD *)(v63 + 8 * v62);
            if (v65 >= *(_QWORD *)(v66 + 16))
              break;
            v67 = *(_QWORD *)(v66 + 8 * v65 + 32);
            if ((v67 & 0x8000000000000000) != 0)
              goto LABEL_51;
            if (v67 >= *(_QWORD *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                                  + 16))
              goto LABEL_52;
            v68 = *(_QWORD *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                            + 32
                            + 8 * v67);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v68 & 0x8000000000000000) != 0)
                goto LABEL_53;
            }
            else
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              v28 = v69;
              if ((v68 & 0x8000000000000000) != 0)
                goto LABEL_53;
            }
            if (v68 >= *(_QWORD *)(v28 + 16))
              goto LABEL_54;
            ++v65;
            *(_QWORD *)(v28 + 8 * v68 + 32) = v62;
            if (v64 == v65)
              goto LABEL_41;
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          break;
        }
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_80();
LABEL_44:
        v29 = v96 + 1;
        OUTLINED_FUNCTION_10_38();
        v11 = v82;
        if (v96 + 1 == v89)
          goto LABEL_45;
      }
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_10_38();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_104();
      swift_release();
      outlined consume of Result<_DataTable, Error>(v82, v85);
    }
    else
    {
LABEL_45:
      swift_release();
      v70 = OUTLINED_FUNCTION_104();
      v115 = (void *)v28;
      MEMORY[0x24BDAC7A8](v70);
      OUTLINED_FUNCTION_28_28();
      ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
      v73 = v72 & 1;
      swift_bridgeObjectRelease();
      MLDataTable.willMutate()();
      v115 = ML14_UntypedColumnC_s5Error_pTgm5;
      LOBYTE(v116) = v73;
      outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v73);
      OUTLINED_FUNCTION_11_36();
      OUTLINED_FUNCTION_39_18();
      v74 = v124;
      v75 = v125;
      if ((v125 & 1) == 0)
      {
        outlined copy of Result<_DataTable, Error>(v124, 0);
        _DataTable.columnNamesDidChange()();
        OUTLINED_FUNCTION_102(v74);
      }
      OUTLINED_FUNCTION_39_18();
      *(_QWORD *)v80 = v74;
      *(_BYTE *)(v80 + 8) = v75;
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v76 = OUTLINED_FUNCTION_49_0();
    *v77 = 0xD000000000000022;
    v77[1] = 0x800000021AFF68F0;
    OUTLINED_FUNCTION_5_8(v76, (uint64_t)v77);
  }
  OUTLINED_FUNCTION_7();
}

void stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char *a5@<X4>, void *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  void *v12;
  int v13;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  char v22;
  char *v23;
  id v24;
  char v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  void *v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  void *v82;
  uint64_t v83;
  uint64_t inited;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  id v108;
  id v109;
  char v110;
  _QWORD *v111;
  uint64_t v112;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v114;
  char v115;
  id v116;
  char v117;
  double v118;
  Swift::String v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unsigned int v180;
  _QWORD *v181;
  void *v182;
  char *v183;
  unsigned __int8 v184;
  id v185;
  char v186[8];
  id v187;
  char v188;
  id v189;
  char v190;

  v12 = *(void **)a3;
  v13 = *(unsigned __int8 *)(a3 + 8);
  if ((v13 & 1) != 0)
    OUTLINED_FUNCTION_18_28(v12);
  OUTLINED_FUNCTION_31_25();
  outlined consume of Result<_DataTable, Error>(v12, 0);
  v182 = a4;
  v183 = a5;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_7_42();
  v16 = a5;
  v17 = OUTLINED_FUNCTION_23_30(partial apply for specialized closure #1 in Sequence<>.contains(_:));
  v18 = v9;
  OUTLINED_FUNCTION_4_2();
  if ((v17 & 1) == 0)
  {
    OUTLINED_FUNCTION_6_46();
    v20 = a4;
LABEL_24:
    v76 = v16;
    String.append(_:)(*(Swift::String *)&v20);
    v77._countAndFlagsBits = 46;
    v77._object = (void *)0xE100000000000000;
    String.append(_:)(v77);
    OUTLINED_FUNCTION_30_27();
    v79 = *(_QWORD *)(v78 - 256);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v80 = OUTLINED_FUNCTION_49_0();
    *v81 = v18;
    v81[1] = v79;
    OUTLINED_FUNCTION_5_8(v80, (uint64_t)v81);
    goto LABEL_29;
  }
  v150 = (uint64_t)a4;
  v19 = v16;
  if ((v13 & 1) != 0)
    OUTLINED_FUNCTION_18_28(v12);
  OUTLINED_FUNCTION_31_25();
  outlined consume of Result<_DataTable, Error>(v12, 0);
  v182 = a6;
  v16 = a7;
  v183 = a7;
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_7_42();
  v22 = OUTLINED_FUNCTION_23_30(closure #1 in Sequence<>.contains(_:)specialized partial apply);
  v18 = v9;
  OUTLINED_FUNCTION_4_2();
  if ((v22 & 1) == 0)
  {
    OUTLINED_FUNCTION_6_46();
    v20 = a6;
    goto LABEL_24;
  }
  v189 = v12;
  v190 = v13;
  v182 = v12;
  LOBYTE(v183) = v13;
  OUTLINED_FUNCTION_44_24(v12);
  v23 = v19;
  MLDataTable.subscript.getter(v150, v19, (uint64_t)&v187);
  v24 = v187;
  v25 = v188;
  v185 = v187;
  v186[0] = v188;
  MLUntypedColumn.dropDuplicates()(&v182);
  v26 = v24;
  v27 = v23;
  v28 = v150;
  outlined consume of Result<_DataTable, Error>(v26, v25);
  OUTLINED_FUNCTION_8_45(v29, v30, v31, v32, v33, v34, v35, v36, v125, v128, v132, v135, v139, v142, v145, v147, v150, a9, a1,
    a2,
    a8,
    (uint64_t)a7,
    v171,
    v175);
  v38 = v37;
  OUTLINED_FUNCTION_44_24(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(v38, v12, v13, v28, v27, (uint64_t)a6, v16);
  v39 = *(_QWORD *)(v38 + 16);
  v40 = swift_bridgeObjectRetain();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v40, 0, v39, v41, v42, v43, v44, v45, v126, v129, v133, v136, v9, ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n, v38, (uint64_t)a6, v151, v155);
  v47 = v46;
  v48 = v12;
  v49 = (_QWORD *)specialized Array.init(repeating:count:)(MEMORY[0x24BEE4AF8], v39);
  v187 = v48;
  v188 = v13;
  OUTLINED_FUNCTION_44_24(v48);
  MLDataTable.subscript.getter(v28, v27, (uint64_t)&v182);
  HIDWORD(v130) = v13;
  outlined consume of Result<_DataTable, Error>(v48, v13);
  OUTLINED_FUNCTION_8_45(v50, v51, v52, v53, v54, v55, v56, v57, (uint64_t)v48, v130, v134, v137, v140, v144, v146, v148, v152, v156, v159,
    v162,
    v165,
    v169,
    v172,
    v176);
  v173 = *(char **)(v58 + 16);
  if (v173)
  {
    v177 = v47;
    v138 = v27;
    v27 = 0;
    v59 = (unsigned __int8 *)(v58 + 48);
    while (1)
    {
      v60 = *((_QWORD *)v59 - 2);
      v61 = *((_QWORD *)v59 - 1);
      v62 = *v59;
      v63 = *(_QWORD *)(v177 + 16);
      OUTLINED_FUNCTION_33_26();
      if (!v63)
        goto LABEL_68;
      OUTLINED_FUNCTION_33_26();
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v61, v62);
      if ((v65 & 1) == 0)
        goto LABEL_67;
      v66 = *(_QWORD *)(*(_QWORD *)(v177 + 56) + 8 * v64);
      OUTLINED_FUNCTION_12_40();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v66 & 0x8000000000000000) != 0)
          goto LABEL_63;
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v49 = v72;
        if ((v66 & 0x8000000000000000) != 0)
          goto LABEL_63;
      }
      if (v66 >= v49[2])
        break;
      v67 = v49 + 4;
      v68 = v49[v66 + 4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49[v66 + 4] = v68;
      v181 = v49;
      v179 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_47_23(0, *(_QWORD *)(v68 + 16) + 1);
        v68 = v73;
        v67[v66] = v73;
      }
      v71 = *(_QWORD *)(v68 + 16);
      v70 = *(_QWORD *)(v68 + 24);
      if (v71 >= v70 >> 1)
      {
        v74 = OUTLINED_FUNCTION_179(v70);
        OUTLINED_FUNCTION_47_23(v74, v71 + 1);
        v68 = v75;
        v67[v66] = v75;
      }
      v59 += 24;
      *(_QWORD *)(v68 + 16) = v71 + 1;
      *(_QWORD *)(v68 + 8 * v71 + 32) = v27;
      OUTLINED_FUNCTION_12_40();
      ++v27;
      v49 = v181;
      if (v173 == v179 + 1)
      {
        OUTLINED_FUNCTION_50_9();
        v82 = v138;
        v83 = v153;
        goto LABEL_26;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    OUTLINED_FUNCTION_12_40();
LABEL_68:
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    __break(1u);
LABEL_73:
    JUMPOUT(0x21AF1F8F0);
  }
  OUTLINED_FUNCTION_104();
  v82 = v27;
  v83 = v28;
LABEL_26:
  OUTLINED_FUNCTION_123();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = 0x73656369646E69;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v182 = v49;
  MEMORY[0x24BDAC7A8](inited);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 48) = 0x73656369646E69;
  *(_BYTE *)(inited + 56) = v27 & 1;
  *(_QWORD *)(inited + 64) = v149;
  *(_QWORD *)(inited + 72) = v170;
  OUTLINED_FUNCTION_54_15((uint64_t)&v185);
  MEMORY[0x24BDAC7A8](v85);
  OUTLINED_FUNCTION_42_18();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0);
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 80) = 0x73656369646E69;
  *(_BYTE *)(inited + 88) = v27 & 1;
  *(_QWORD *)(inited + 96) = v83;
  *(_QWORD *)(inited + 104) = v82;
  OUTLINED_FUNCTION_54_15((uint64_t)v186);
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_42_18();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 112) = 0x73656369646E69;
  *(_BYTE *)(inited + 120) = v27 & 1;
  v87 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v87, (uint64_t)&v182);
  if (v141)
  {
    OUTLINED_FUNCTION_80();
    outlined consume of Result<_DataTable, Error>(v189, v190);
    goto LABEL_29;
  }
  OUTLINED_FUNCTION_30_27();
  v89 = *(_BYTE *)(v88 - 256);
  v187 = (id)inited;
  v188 = v89;
  MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(v160, v149, v170, v163, v166, v90, (uint64_t)&v182);
  v167 = v89;
  OUTLINED_FUNCTION_30_27();
  v180 = *(unsigned __int8 *)(v91 - 256);
  v187 = v127;
  v188 = v131;
  outlined copy of Result<_DataTable, Error>(v127, v131);
  MLDataTable.subscript.getter(v153, v82, (uint64_t)&v182);
  outlined consume of Result<_DataTable, Error>(v127, v131);
  OUTLINED_FUNCTION_29_26();
  if ((*(_BYTE *)(v92 - 256) & 1) != 0)
  {
    v93 = -1;
  }
  else
  {
    OUTLINED_FUNCTION_43_19();
    v93 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102((void *)v131);
  }
  OUTLINED_FUNCTION_20_28();
  v94 = (_QWORD *)specialized Array.init(repeating:count:)(0, v93);
  v187 = (id)inited;
  v95 = v180;
  v188 = v180;
  outlined copy of Result<_DataTable, Error>((id)inited, v180);
  v96 = OUTLINED_FUNCTION_27_34();
  MLDataTable.subscript.getter(v96, v97, v98);
  outlined consume of Result<_DataTable, Error>((id)inited, v180);
  OUTLINED_FUNCTION_29_26();
  if (*(_BYTE *)(v99 - 256) == 1)
  {
    OUTLINED_FUNCTION_122_3((void *)v180);
    goto LABEL_72;
  }
  OUTLINED_FUNCTION_43_19();
  v100 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_102((void *)v180);
  OUTLINED_FUNCTION_102((void *)v180);
  if (v100 < 0)
  {
LABEL_72:
    __break(1u);
    OUTLINED_FUNCTION_0_53();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_73;
  }
  if (v100)
  {
    v101 = 0;
    v174 = v100;
    while (1)
    {
      if (v101 == v100)
        goto LABEL_65;
      if ((v180 & 1) != 0)
      {
        outlined copy of Result<_DataTable, Error>((id)inited, 1);
        swift_willThrow(v118);
        v182 = 0;
        v183 = (char *)0xE000000000000000;
        _StringGuts.grow(_:)(34);
        OUTLINED_FUNCTION_50_9();
        v182 = (void *)0xD00000000000001FLL;
        v183 = (char *)0x800000021AFF4650;
        v119._countAndFlagsBits = OUTLINED_FUNCTION_27_34();
        String.append(_:)(v119);
        v120._countAndFlagsBits = 34;
        v120._object = (void *)0xE100000000000000;
        String.append(_:)(v120);
        OUTLINED_FUNCTION_29_26();
        v122 = *(_QWORD *)(v121 - 256);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v123 = (void *)OUTLINED_FUNCTION_49_0();
        *(_QWORD *)v124 = v95;
        *(_QWORD *)(v124 + 8) = v122;
        *(_OWORD *)(v124 + 16) = 0u;
        *(_OWORD *)(v124 + 32) = 0u;
        *(_BYTE *)(v124 + 48) = 1;
        OUTLINED_FUNCTION_24_33();
        OUTLINED_FUNCTION_122_3(v123);
LABEL_70:
        __break(1u);
        JUMPOUT(0x21AF1F9C0);
      }
      v102 = *(_QWORD *)(inited + 16);
      OUTLINED_FUNCTION_35_10();
      OUTLINED_FUNCTION_3_1();
      v95 = (unint64_t)specialized String.withCString<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.column(name:), v102, 0x73656369646E69, 0xE700000000000000);
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_102((void *)inited);
      type metadata accessor for _UntypedColumn();
      v103 = (_QWORD *)swift_allocObject();
      v103[2] = v95;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(v101, (uint64_t)&v182);
      OUTLINED_FUNCTION_102(v103);
      OUTLINED_FUNCTION_102(v103);
      if (v184 != 3)
        goto LABEL_70;
      v178 = v101;
      OUTLINED_FUNCTION_16_15();
      if (OUTLINED_FUNCTION_49_17())
        break;
LABEL_56:
      v101 = v178 + 1;
      OUTLINED_FUNCTION_0_53();
      OUTLINED_FUNCTION_0_53();
      v100 = v174;
      if (v178 + 1 == v174)
        goto LABEL_57;
    }
    v104 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_16_15();
      CMLSequence.value(at:)(v104);
      OUTLINED_FUNCTION_0_53();
      MLDataValue.init(_:)();
      v105 = (unint64_t)v182;
      v106 = v184;
      OUTLINED_FUNCTION_16_15();
      v107 = OUTLINED_FUNCTION_49_17();
      OUTLINED_FUNCTION_0_53();
      if (v104 >= v107)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      if (v106)
        goto LABEL_66;
      OUTLINED_FUNCTION_35_10();
      specialized MLDataTable.subscript.getter(inited, v180, (uint64_t)&v187);
      OUTLINED_FUNCTION_102((void *)inited);
      v108 = v187;
      if ((v188 & 1) != 0)
        break;
      outlined copy of Result<_DataTable, Error>(v187, 0);
      _UntypedColumn.valueAtIndex(index:)(v178, (uint64_t)&v182);
      OUTLINED_FUNCTION_102(v108);
      v95 = (unint64_t)v182;
      if (v184)
      {
        outlined consume of MLDataValue(v182, v183, v184);
        v109 = v108;
        v110 = 0;
LABEL_48:
        outlined consume of Result<_DataTable, Error>(v109, v110);
        v95 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_54;
        goto LABEL_49;
      }
      OUTLINED_FUNCTION_102(v108);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
LABEL_54:
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v94 = v111;
        if ((v105 & 0x8000000000000000) != 0)
          goto LABEL_61;
        goto LABEL_50;
      }
LABEL_49:
      if ((v105 & 0x8000000000000000) != 0)
        goto LABEL_61;
LABEL_50:
      if (v105 >= v94[2])
        goto LABEL_62;
      ++v104;
      v94[v105 + 4] = v95;
      if (v104 == OUTLINED_FUNCTION_49_17())
        goto LABEL_56;
    }
    v109 = v187;
    v110 = 1;
    goto LABEL_48;
  }
LABEL_57:
  v112 = OUTLINED_FUNCTION_80();
  v182 = v94;
  MEMORY[0x24BDAC7A8](v112);
  OUTLINED_FUNCTION_7_42();
  ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0);
  v115 = v114 & 1;
  OUTLINED_FUNCTION_50_9();
  MLDataTable.willMutate()();
  v182 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v183) = v115;
  outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v115);
  OUTLINED_FUNCTION_11_36();
  OUTLINED_FUNCTION_20_28();
  v116 = v189;
  v117 = v190;
  if ((v190 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v189, 0);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_102(v116);
  }
  outlined consume of Result<_DataTable, Error>((id)inited, v167);
  OUTLINED_FUNCTION_24_33();
  OUTLINED_FUNCTION_20_28();
  *(_QWORD *)v157 = v116;
  *(_BYTE *)(v157 + 8) = v117;
LABEL_29:
  OUTLINED_FUNCTION_7();
}

void closure #1 in stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  __int128 v20;
  char v21;
  __int128 v24;
  char v25;
  id v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 16);
  v14 = a3 & 1;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  MLDataTable.subscript.getter(a4, a5, (uint64_t)&v28);
  outlined consume of Result<_DataTable, Error>(a2, v14);
  v15 = v28;
  LOBYTE(a5) = v29;
  *((_QWORD *)&v24 + 1) = v12;
  v25 = v13;
  static MLUntypedColumn.== infix(_:_:)();
  outlined consume of Result<_DataTable, Error>(v15, (char)a5);
  v16 = v30;
  LOBYTE(a4) = v31;
  v26 = v30;
  v27 = v31;
  outlined copy of Result<_DataTable, Error>(a2, v14);
  MLDataTable.subscript.getter((uint64_t)&v26, (uint64_t)&v28);
  outlined consume of Result<_DataTable, Error>(v16, a4);
  outlined consume of Result<_DataTable, Error>(a2, v14);
  v17 = v28;
  v18 = v29;
  *(_QWORD *)&v24 = v28;
  BYTE8(v24) = v29;
  MLDataTable.subscript.getter(a6, a7, (uint64_t)&v26);
  outlined consume of Result<_DataTable, Error>(v17, v18);
  v19 = v26;
  if ((v27 & 1) != 0)
  {
    outlined consume of Result<_DataTable, Error>(v26, 1);
    v20 = 0uLL;
    v21 = 6;
  }
  else
  {
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v24);
    outlined consume of Result<_DataTable, Error>(v19, 0);
    outlined consume of Result<_DataTable, Error>(v19, 0);
    v20 = v24;
    v21 = v25;
  }
  *(_OWORD *)a8 = v20;
  *(_BYTE *)(a8 + 16) = v21;
}

void MersenneTwisterGenerator.twist()()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v1 = (uint64_t *)(v0 + 120);
  OUTLINED_FUNCTION_44_7();
  v2 = 0;
  for (i = 156; ; ++i)
  {
    v4 = *v1;
    v5 = *(_QWORD *)(*v1 + 16);
    if (v2 >= v5)
      break;
    v6 = v2 + 1;
    if (v2 == 623)
      v7 = 0;
    else
      v7 = v2 + 1;
    if (v7 >= v5)
      goto LABEL_17;
    v8 = *(_QWORD *)(v4 + 32 + 8 * v7) % 0x270uLL;
    if ((v8 & 1) != 0)
      v9 = ((v8 | ((unint64_t)*(unsigned int *)(v4 + 8 * v2 + 36) << 32)) >> 1) ^ 0xB5026F5AA96619E9;
    else
      v9 = (v8 | ((unint64_t)*(unsigned int *)(v4 + 8 * v2 + 36) << 32)) >> 1;
    if (v2 + 156 - 624 * (i / 0x270) >= v5)
      goto LABEL_18;
    v10 = *(_QWORD *)(v4 + 1280 - 4992 * (i / 0x270) + 8 * v2);
    OUTLINED_FUNCTION_44_7();
    v11 = *v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v1 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v11 = v13;
      *v1 = v13;
    }
    if (v2 >= *(_QWORD *)(v11 + 16))
      goto LABEL_19;
    *(_QWORD *)(v11 + 8 * v2 + 32) = v10 ^ v9;
    swift_endAccess();
    *(_QWORD *)(v0 + 128) = 0;
    ++v2;
    if (v6 == 624)
      return;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

void MersenneTwisterGenerator.init(seed:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_OWORD *)(v1 + 16) = xmmword_21AFEE190;
  *(_OWORD *)(v1 + 32) = xmmword_21AFEE1A0;
  *(_OWORD *)(v1 + 48) = xmmword_21AFEE1B0;
  *(_OWORD *)(v1 + 64) = xmmword_21AFEE1C0;
  *(_OWORD *)(v1 + 80) = xmmword_21AFEE1D0;
  *(_OWORD *)(v1 + 96) = xmmword_21AFEE1E0;
  *(_QWORD *)(v1 + 112) = 0x5851F42D4C957F2DLL;
  *(_QWORD *)(v1 + 128) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  v3 = swift_allocObject();
  v4 = 0;
  *(_OWORD *)(v3 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v3 + 32) = a1;
  while (1)
  {
    v5 = v4 + 1;
    if (v4 >= v4 + 1)
      break;
    v6 = *(_QWORD *)(v3 + 8 * v4 + 32) ^ (*(_QWORD *)(v3 + 8 * v4 + 32) >> 30);
    v7 = 0x5851F42D00000000 * v6
       + 0x4C957F2D00000000 * HIDWORD(v6)
       + 1284865837 * (*(_DWORD *)(v3 + 8 * v4 + 32) ^ (*(_QWORD *)(v3 + 8 * v4 + 32) >> 30));
    v8 = v7 + v5;
    if (__CFADD__(v7, v5))
      goto LABEL_9;
    v9 = *(_QWORD *)(v3 + 24);
    if (v5 >= v9 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v4 + 2, 1, v3);
      v3 = v10;
    }
    *(_QWORD *)(v3 + 16) = v4 + 2;
    *(_QWORD *)(v3 + 8 * v4++ + 40) = v8;
    if (v4 == 623)
    {
      *(_QWORD *)(v1 + 120) = v3;
      return;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

Swift::UInt64 __swiftcall MersenneTwisterGenerator.next()()
{
  uint64_t v0;
  unint64_t v1;
  Swift::UInt64 result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 == 624)
  {
    MersenneTwisterGenerator.twist()();
    v1 = *(_QWORD *)(v0 + 128);
  }
  result = OUTLINED_FUNCTION_44_7();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(v0 + 120);
  if (v1 >= *(_QWORD *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(v0 + 128);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (!v5)
  {
    v7 = (*(_QWORD *)(v3 + 8 * v1 + 32) >> 29) & 0x5555555555555555 ^ *(_QWORD *)(v3 + 8 * v1 + 32);
    v8 = (((v7 << 17) & 0x71D67FFFEDA60000 ^ v7) << 37) & 0xFFF7EEE000000000 ^ (v7 << 17) & 0x71D67FFFEDA60000 ^ v7;
    result = v8 ^ (v8 >> 43);
    *(_QWORD *)(v0 + 128) = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MersenneTwisterGenerator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Int __swiftcall timestampSeed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  Swift::Int result;
  double v7;
  uint64_t v8;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  v5 = v4;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v5 * 1000.0;
  if ((~COERCE__INT64(v5 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 9.22337204e18)
    return (uint64_t)v7;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MersenneTwisterGenerator()
{
  return objc_opt_self();
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)()
{
  uint64_t v0;

  type metadata accessor for _UntypedColumn();
  swift_allocObject();
  v0 = swift_bridgeObjectRetain();
  return specialized _UntypedColumn.init<A>(_:)(v0);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v4;
  *(_QWORD *)(v5 + 16) = result + 1;
  v6 = v5 + 24 * result;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a3;
  *(_BYTE *)(v6 + 48) = a4;
  return result;
}

__n128 specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = v5 + 48 * a1;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a2;
  *(_BYTE *)(v6 + 48) = v3;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(v6 + 72) = v4;
  return result;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2, specialized closure #1 in MLUntypedColumn.init<A>(_:), a3);
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = a3(*a1);
  if (v4)
    *a2 = v4;
  else
    *a4 = result;
  return result;
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, (uint64_t (*)(_QWORD))specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

uint64_t closure #1 in Sequence<>.contains(_:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1) & 1;
}

void OUTLINED_FUNCTION_0_53()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

uint64_t OUTLINED_FUNCTION_2_47()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_4_48()
{
  char v0;
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = v1;
  *(_BYTE *)(v2 - 168) = v0;
  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

void OUTLINED_FUNCTION_6_46()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 288) = 0x2064696C61766E49;
  *(_QWORD *)(v0 - 280) = 0xE800000000000000;
}

void OUTLINED_FUNCTION_8_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  char v25;

  v25 = *(_BYTE *)(v24 - 280);
  *(_QWORD *)(v24 - 120) = *(_QWORD *)(v24 - 288);
  *(_BYTE *)(v24 - 112) = v25;
  Array<A>.init(_:)(v24 - 120, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void OUTLINED_FUNCTION_10_38()
{
  uint64_t v0;

  outlined consume of MLDataValue(*(void **)(v0 - 280), *(id *)(v0 - 272), *(_DWORD *)(v0 - 260));
}

void OUTLINED_FUNCTION_11_36()
{
  MLDataTable.addImpl(newColumn:named:)();
}

void OUTLINED_FUNCTION_12_40()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue(v0, v1, v2);
}

void OUTLINED_FUNCTION_13_42(uint64_t a1)
{
  uint64_t v1;
  char v2;
  void *v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_BYTE *)(a1 + 24) = v2;
  outlined consume of Result<_DataTable, Error>(v3, 1);
}

void OUTLINED_FUNCTION_18_28(void *a1)
{
  outlined copy of Result<_DataTable, Error>(a1, 1);
  JUMPOUT(0x22075BB18);
}

void OUTLINED_FUNCTION_20_28()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_22_28()
{
  return type metadata accessor for CMLSequence();
}

uint64_t OUTLINED_FUNCTION_23_30(uint64_t (*a1)(uint64_t *))
{
  return specialized Sequence.contains(where:)(a1);
}

void OUTLINED_FUNCTION_24_33()
{
  void *v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(v0, *(_DWORD *)(v1 - 304));
}

void OUTLINED_FUNCTION_25_28()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_27_34()
{
  return 0x73656369646E69;
}

uint64_t OUTLINED_FUNCTION_31_25()
{
  void *v0;
  uint64_t v1;

  outlined copy of Result<_DataTable, Error>(v0, 0);
  return _DataTable.columnNames.getter((_QWORD *)(v1 - 104));
}

id OUTLINED_FUNCTION_33_26()
{
  void *v0;
  void *v1;
  char v2;

  return outlined copy of MLDataValue(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_35_19()
{
  return 0;
}

_QWORD *OUTLINED_FUNCTION_36_26()
{
  uint64_t v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(v0 + 16));
}

void OUTLINED_FUNCTION_39_18()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_43_19()
{
  return swift_retain();
}

id OUTLINED_FUNCTION_44_24(void *a1)
{
  char v1;

  return outlined copy of Result<_DataTable, Error>(a1, v1);
}

void OUTLINED_FUNCTION_47_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

BOOL OUTLINED_FUNCTION_48_18()
{
  char v0;
  char v1;

  return (!v1 & v0) != 0;
}

uint64_t OUTLINED_FUNCTION_49_17()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_51_20(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  return _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(a1);
}

void OUTLINED_FUNCTION_54_15(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = *(_QWORD *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_55_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *v4;
      v4 += 4;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(uint64_t a1@<X0>, void *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v75;
  char v76;
  id v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  id v122;
  char v123;
  id v124;
  char v125;

  if ((a3 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(a2, 0);
    _DataTable.columnNames.getter(&v124);
    outlined consume of Result<_DataTable, Error>(a2, 0);
LABEL_5:
    v115 = (void *)a4;
    v116 = a5;
    ((void (*)(void))MEMORY[0x24BDAC7A8])();
    OUTLINED_FUNCTION_28_28();
    v15 = specialized Sequence.contains(where:)(partial apply for specialized closure #1 in Sequence<>.contains(_:));
    v16 = v6;
    OUTLINED_FUNCTION_4_2();
    if ((v15 & 1) != 0)
    {
      v115 = a2;
      LOBYTE(v116) = a3 & 1;
      OUTLINED_FUNCTION_7_43(a2);
      v99 = a4;
      v101 = (uint64_t)a5;
      MLDataTable.subscript.getter(a4, a5, (uint64_t)&v124);
      outlined consume of Result<_DataTable, Error>(a2, a3 & 1);
      v17 = v124;
      v18 = v125;
      v122 = v124;
      v123 = v125;
      MLUntypedColumn.dropDuplicates()(&v115);
      outlined consume of Result<_DataTable, Error>(v17, v18);
      v124 = v115;
      v125 = (char)v116;
      Array<A>.init(_:)((uint64_t)&v124, v19, v20, v21, v22, v23, v24, v25, v80, v82, v84, v86, v88, v90, v92, v95, v96, v97, v99,
        v101,
        v103,
        v105,
        v107,
        a1);
      v27 = v26;
      v115 = a2;
      LOBYTE(v116) = a3 & 1;
      v28 = MLDataTable.size.getter();
      if (v28 < 0)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      HIDWORD(v104) = a3;
      v83 = a6;
      v29 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v28);
      v124 = a2;
      v125 = a3 & 1;
      v115 = a2;
      LOBYTE(v116) = a3 & 1;
      v106 = a2;
      OUTLINED_FUNCTION_7_43(a2);
      v30 = MLDataTable.size.getter();
      v31 = specialized Array.init(repeating:count:)(0, v30);
      v89 = *(_QWORD *)(v27 + 16);
      if (v89)
      {
        v32 = 0;
        v91 = v27 + 32;
        v85 = v27;
        v111 = v29;
        while (v32 < *(_QWORD *)(v27 + 16))
        {
          v93 = v32;
          v33 = v91 + 24 * v32;
          v35 = *(void **)v33;
          v34 = *(void **)(v33 + 8);
          v36 = *(unsigned __int8 *)(v33 + 16);
          v115 = v106;
          LOBYTE(v116) = BYTE4(v104) & 1;
          OUTLINED_FUNCTION_7_43(v106);
          outlined copy of MLDataValue(v35, v34, v36);
          MLDataTable.subscript.getter(v100, v102, (uint64_t)&v120);
          outlined consume of Result<_DataTable, Error>(v106, BYTE4(v104) & 1);
          v37 = v120;
          v38 = v121;
          v118 = v120;
          v119 = v121;
          v115 = v35;
          v116 = v34;
          HIDWORD(v98) = v36;
          v117 = v36;
          static MLUntypedColumn.== infix(_:_:)();
          outlined consume of Result<_DataTable, Error>(v37, v38);
          v115 = v122;
          LOBYTE(v116) = v123;
          Array<A>.init(_:)((uint64_t)&v115, v39, v40, v41, v42, v43, v44, v45, v81, v83, v85, v87, v89, v91, v93, (uint64_t)v35, (uint64_t)v34, v98, v100,
            (uint64_t)v102,
            v104,
            (uint64_t)v106,
            v108,
            v110);
          v47 = v46;
          v48 = *(_QWORD *)(v46 + 16);
          if (v48)
          {
            v108 = v16;
            v49 = v111;
            v50 = v111[2];
            swift_retain();
            v51 = 0;
            v87 = v47;
            v52 = (_BYTE *)(v47 + 48);
            v53 = MEMORY[0x24BEE4AF8];
            v112 = v50;
            v113 = v48;
            while (1)
            {
              if (v50 == v51)
              {
LABEL_25:
                OUTLINED_FUNCTION_4_2();
                v16 = v108;
                goto LABEL_27;
              }
              if (v51 >= v49[2])
                break;
              if (*v52)
                v54 = 0;
              else
                v54 = *((_QWORD *)v52 - 2) == 1;
              if (v54)
              {
                v55 = *((_QWORD *)v52 - 1);
                v56 = v49[v51 + 4];
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v115 = (void *)v53;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v49 = v111;
                  v53 = (uint64_t)v115;
                }
                v58 = *(_QWORD *)(v53 + 16);
                if (v58 >= *(_QWORD *)(v53 + 24) >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v49 = v111;
                  v53 = (uint64_t)v115;
                }
                *(_QWORD *)(v53 + 16) = v58 + 1;
                v59 = v53 + 32 * v58;
                *(_QWORD *)(v59 + 32) = 1;
                *(_QWORD *)(v59 + 40) = v55;
                *(_BYTE *)(v59 + 48) = 0;
                *(_QWORD *)(v59 + 56) = v56;
                v50 = v112;
                v48 = v113;
              }
              ++v51;
              v52 += 24;
              if (v48 == v51)
                goto LABEL_25;
            }
            __break(1u);
            goto LABEL_59;
          }
          v53 = MEMORY[0x24BEE4AF8];
LABEL_27:
          swift_bridgeObjectRelease();
          v60 = v16;
          ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n(v53);
          OUTLINED_FUNCTION_217();
          v62 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n+ 16));
          specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v62, v110);
          if (v16)
          {
LABEL_57:
            OUTLINED_FUNCTION_30();
            OUTLINED_FUNCTION_217();
            OUTLINED_FUNCTION_10_38();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of Result<_DataTable, Error>(v106, BYTE4(v104) & 1);
            goto LABEL_51;
          }
          v64 = v63;
          OUTLINED_FUNCTION_217();
          v114 = *(_QWORD *)(v110 + 16);
          if (v114)
          {
            v108 = 0;
            v65 = 0;
            v66 = v64 + 32;
            while (v65 < *(_QWORD *)(v64 + 16))
            {
              v67 = *(_QWORD *)(*(_QWORD *)(v66 + 8 * v65) + 16);
              if (v67)
              {
                v68 = 0;
                while (1)
                {
                  v69 = *(_QWORD *)(v66 + 8 * v65);
                  if (v68 >= *(_QWORD *)(v69 + 16))
                    break;
                  v70 = *(_QWORD *)(v69 + 8 * v68 + 32);
                  if ((v70 & 0x8000000000000000) != 0)
                    goto LABEL_53;
                  if (v70 >= *(_QWORD *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                                        + 16))
                    goto LABEL_54;
                  v71 = *(_QWORD *)(ML11MLDataValueO_SitG_Sis5NeverOTg503_s8d4ML11fg20OS2iIgnyd_AC_SitSis5h126OIegnrzr_TR03_s8a68ML24stratifiedSplitGenerator11proportions9generator9dataTable2onAA06c31I0VSaySdG_xzAHSStKSGRzlFSiAA0K5D11O_N16XEfU0_Tf3nnnpf_nTf1cn_n
                                  + 32
                                  + 8 * v70);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    if ((v71 & 0x8000000000000000) != 0)
                      goto LABEL_55;
                  }
                  else
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                    v31 = v72;
                    if ((v71 & 0x8000000000000000) != 0)
                      goto LABEL_55;
                  }
                  if (v71 >= *(_QWORD *)(v31 + 16))
                    goto LABEL_56;
                  ++v68;
                  *(_QWORD *)(v31 + 8 * v71 + 32) = v65;
                  if (v67 == v68)
                    goto LABEL_43;
                }
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
LABEL_43:
              if (++v65 == v114)
              {
                OUTLINED_FUNCTION_30();
                swift_bridgeObjectRelease();
                v16 = v60;
                goto LABEL_46;
              }
            }
LABEL_59:
            __break(1u);
            break;
          }
          OUTLINED_FUNCTION_30();
          swift_bridgeObjectRelease();
LABEL_46:
          v27 = v85;
          v32 = v94 + 1;
          OUTLINED_FUNCTION_10_38();
          if (v94 + 1 == v89)
            goto LABEL_47;
        }
        __break(1u);
        goto LABEL_61;
      }
LABEL_47:
      swift_release();
      v73 = swift_bridgeObjectRelease();
      v115 = (void *)v31;
      MEMORY[0x24BDAC7A8](v73);
      OUTLINED_FUNCTION_28_28();
      ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
      v76 = v75 & 1;
      swift_bridgeObjectRelease();
      MLDataTable.willMutate()();
      v115 = ML14_UntypedColumnC_s5Error_pTgm5;
      LOBYTE(v116) = v76;
      outlined copy of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v76);
      MLDataTable.addImpl(newColumn:named:)();
      OUTLINED_FUNCTION_39_18();
      v77 = v124;
      v78 = v125;
      if ((v125 & 1) == 0)
      {
        outlined copy of Result<_DataTable, Error>(v124, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v77, 0);
      }
      OUTLINED_FUNCTION_39_18();
      *(_QWORD *)v83 = v77;
      *(_BYTE *)(v83 + 8) = v78;
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v79 = 0xD000000000000022;
      *(_QWORD *)(v79 + 8) = 0x800000021AFF68F0;
      *(_OWORD *)(v79 + 16) = 0u;
      *(_OWORD *)(v79 + 32) = 0u;
      *(_BYTE *)(v79 + 48) = 0;
      swift_willThrow(0.0);
    }
LABEL_51:
    OUTLINED_FUNCTION_7();
    return;
  }
  outlined copy of Result<_DataTable, Error>(a2, 1);
  v12 = MEMORY[0x22075BB18](0);
  if (v12)
  {
    v13 = v12;
    type metadata accessor for CMLSequence();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    *(_BYTE *)(v14 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(a2, 1);
    goto LABEL_5;
  }
LABEL_62:
  __break(1u);
}

uint64_t MLTextClassifier.DataSource.labeledTexts()()
{
  uint64_t v0;

  return static _TextUtilities.getTextLabeledDictionary(from:)(v0);
}

void MLTextClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:textColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;

  v9 = v7;
  v17 = static _TextUtilities.getTextLabeledDictionary(from:)(v9);
  if (!v8)
  {
    specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v17, a5, a6, a3, (uint64_t)a4, (uint64_t)&v21);
    swift_bridgeObjectRelease();
    if (a2 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      v18 = v21;
      v19 = v22;
      type metadata accessor for MersenneTwisterGenerator();
      swift_allocObject();
      MersenneTwisterGenerator.init(seed:)(a2);
      v21 = v20;
      specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, v18, v19, a3, a4, a7);
      OUTLINED_FUNCTION_4_2();
      outlined consume of Result<_DataTable, Error>(v18, v19);
    }
  }
}

void specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v7 = v6;
  v37 = a5;
  v35 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  v10 = v35;
  v11 = *(_QWORD *)(v35 + 16);
  if (v11)
  {
    v30 = v6;
    v31 = a6;
    v35 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_5_39();
    v12 = v35;
    v32 = v10;
    v13 = (uint64_t *)(v10 + 40);
    v14 = v11;
    do
    {
      v16 = *(v13 - 1);
      v15 = *v13;
      v35 = v12;
      v18 = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 24);
      OUTLINED_FUNCTION_11_37();
      if (v18 >= v17 >> 1)
      {
        OUTLINED_FUNCTION_2_48();
        v12 = v35;
      }
      v13 += 4;
      *(_QWORD *)(v12 + 16) = a3;
      v19 = v12 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v16;
      *(_QWORD *)(v19 + 40) = v15;
      --v14;
    }
    while (v14);
    v35 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_5_39();
    v20 = v35;
    v21 = (uint64_t *)(v32 + 56);
    do
    {
      v22 = *(v21 - 1);
      v10 = *v21;
      v35 = v20;
      v24 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      OUTLINED_FUNCTION_11_37();
      if (v24 >= v23 >> 1)
      {
        OUTLINED_FUNCTION_2_48();
        v20 = v35;
      }
      *(_QWORD *)(v20 + 16) = a3;
      v25 = v20 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v22;
      *(_QWORD *)(v25 + 40) = v10;
      v21 += 4;
      --v11;
    }
    while (v11);
    swift_release();
    v7 = v30;
    a6 = v31;
  }
  else
  {
    OUTLINED_FUNCTION_217();
    v20 = MEMORY[0x24BEE4AF8];
    v12 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v35 = v12;
  MEMORY[0x24BDAC7A8](inited);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_3_46();
  *(_QWORD *)(inited + 48) = v10;
  *(_BYTE *)(inited + 56) = a3 & 1;
  v27 = v37;
  *(_QWORD *)(inited + 64) = a4;
  *(_QWORD *)(inited + 72) = v27;
  v35 = v20;
  MEMORY[0x24BDAC7A8](v27);
  swift_bridgeObjectRetain();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_3_46();
  *(_QWORD *)(inited + 80) = v10;
  *(_BYTE *)(inited + 88) = a3 & 1;
  v28 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v28, (uint64_t)&v35);
  if (!v7)
  {
    v29 = v36;
    *(_QWORD *)a6 = v35;
    *(_BYTE *)(a6 + 8) = v29;
  }
  OUTLINED_FUNCTION_7();
}

uint64_t type metadata accessor for MLTextClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLTextClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

void OUTLINED_FUNCTION_2_48()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3_46()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_5_39()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

id OUTLINED_FUNCTION_7_43(void *a1)
{
  char v1;

  return outlined copy of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_37()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinearRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_42_7(v3);
  DataFrame.init()();
  v4 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_42_7(v4);
  v5 = OUTLINED_FUNCTION_27_35();
  OUTLINED_FUNCTION_42_7(v5);
  v6 = OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_42_7(v6);
  OUTLINED_FUNCTION_57_14(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
  v7 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = v8;
  outlined init with take of MLClassifierMetrics.Precomputed(a1, v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t LinearRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[96];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_8_1();
  v53 = v4;
  v54 = v5;
  v47 = v6;
  v48 = v8;
  v49 = v7;
  v10 = v9;
  v52 = v11;
  v13 = v12;
  v46 = v14;
  v15 = (int *)OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v41 = v18;
  v19 = OUTLINED_FUNCTION_93();
  v50 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_64();
  v43 = v21;
  v42 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  __swift_storeEnumTagSinglePayload(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, 1, 1, (uint64_t)v15);
  DataFrame.init()();
  OUTLINED_FUNCTION_61_4(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, 1);
  v22 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  v23 = OUTLINED_FUNCTION_27_35();
  OUTLINED_FUNCTION_37_0(v22, v24, v25, v23);
  v26 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
  v27 = OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_37_0(v26, v28, v29, v27);
  OUTLINED_FUNCTION_57_14(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
  v30 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_BYTE *)(v30 + 16) = v31;
  v32 = v13;
  v44 = v10;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v13, v10, v49, v46);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v48, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v47);
    OUTLINED_FUNCTION_60_14(v52);
    v34 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v34(v32, v19);
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    v34(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData, v19);
    OUTLINED_FUNCTION_60_14(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData);
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
    OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v45 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v3, v13, v19);
    outlined init with copy of URL?(v52, v41, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLLinearRegressor.ModelParameters(v47, (uint64_t)v51);
    v35 = v2 + v15[5];
    OUTLINED_FUNCTION_61_4(v35, 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v2, v3, v19);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v41, v35, &demangling cache variable for type metadata for DataFrame?);
    v36 = (uint64_t *)(v2 + v15[6]);
    *v36 = v44;
    v36[1] = (uint64_t)v49;
    *(_QWORD *)(v2 + v15[7]) = v45;
    memcpy((void *)(v2 + v15[8]), v51, 0x49uLL);
    outlined init with take of MLClassifierMetrics.Precomputed(v2, v43, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    outlined destroy of MLLinearRegressor.ModelParameters(v47);
    outlined destroy of URL?(v52, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v13, v19);
    OUTLINED_FUNCTION_173_0();
    __swift_storeEnumTagSinglePayload(v37, v38, v39, (uint64_t)v15);
    OUTLINED_FUNCTION_4_28();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v43, v42, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    swift_endAccess();
    outlined init with take of MLClassifierMetrics.Precomputed(v48, v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  }
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LinearRegressorTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[104];

  OUTLINED_FUNCTION_8_1();
  v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = (uint64_t *)(v6 - v7);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v36[-v10 - 8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = (int *)OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_54_0();
  v17 = v3 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v17, (uint64_t)v14, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v14, 1, (uint64_t)v15);
  if (v18)
  {
    outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    __break(1u);
  }
  else
  {
    outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v14, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    v19 = v3 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
    OUTLINED_FUNCTION_1_47();
    v20 = OUTLINED_FUNCTION_93();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v19, v2, v20);
    OUTLINED_FUNCTION_16_33();
    v21 = v2 + v15[5];
    v22 = v3 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_4_28();
    outlined assign with copy of DataFrame?(v21, v22);
    OUTLINED_FUNCTION_16_33();
    v23 = (uint64_t *)(v2 + v15[6]);
    v24 = *v23;
    v25 = v23[1];
    v26 = *(_QWORD *)(v2 + v15[7]);
    outlined init with copy of MLLinearRegressor.ModelParameters(v2 + v15[8], (uint64_t)v36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)(v24, v25, v26, (uint64_t)v36, v11);
    v27 = OUTLINED_FUNCTION_27_35();
    OUTLINED_FUNCTION_61_4((uint64_t)v11, 0);
    v28 = v3 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
    OUTLINED_FUNCTION_1_47();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v11, v28, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    OUTLINED_FUNCTION_16_33();
    v29 = OUTLINED_FUNCTION_54_16();
    outlined init with copy of URL?(v29, v30, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    OUTLINED_FUNCTION_128((uint64_t)v8, 1, v27);
    if (!v18)
    {
      v32 = *v8;
      v31 = v8[1];
      OUTLINED_FUNCTION_28_29();
      swift_bridgeObjectRetain();
      BaseLinearRegressor.makeTransformer()();
      *v1 = v32;
      v1[1] = v31;
      v1[3] = 0;
      v1[4] = 0;
      v1[2] = 0;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
      OUTLINED_FUNCTION_77_5(v33, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor);
      OUTLINED_FUNCTION_61_4((uint64_t)v1, 0);
      v34 = v3 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_1_47();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v1, v34, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
      OUTLINED_FUNCTION_16_33();
      OUTLINED_FUNCTION_7();
      return;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LinearRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_8_1();
  v30[0] = v2;
  v32 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v30[1] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_50();
  v30[3] = v8 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v30[2] = (char *)v30 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_53_0();
  v13 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  v31 = v1;
  v22 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v22, (uint64_t)v19, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v19, 1, v20);
  if (v23)
  {
    outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    __break(1u);
    JUMPOUT(0x21AF21D80);
  }
  v24 = OUTLINED_FUNCTION_54_16();
  outlined init with take of MLClassifierMetrics.Precomputed(v24, v25, v26);
  specialized BidirectionalCollection.last.getter(v32, v3);
  OUTLINED_FUNCTION_128(v3, 1, v13);
  if (!v23)
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v3, v16, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  v28 = OUTLINED_FUNCTION_18_0(v27, 0xD00000000000001DLL);
  OUTLINED_FUNCTION_77_5(v28, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall LinearRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    v4 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters;
    v3 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    v3 = 0;
  }
  v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t LinearRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for MetricsKey();
  v2[16] = v3;
  v2[17] = *(_QWORD *)(v3 - 8);
  v2[18] = OUTLINED_FUNCTION_0();
  v4 = OUTLINED_FUNCTION_93();
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 - 8);
  v2[21] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  v2[22] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  v2[23] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

void LinearRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  double v32;
  char v33;
  char v34;
  char v35;
  double v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 184);
  OUTLINED_FUNCTION_29_0();
  v2 = OUTLINED_FUNCTION_3_9();
  outlined init with copy of URL?(v2, v3, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  v4 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  v5 = OUTLINED_FUNCTION_208_0(v4);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  if (v5 == 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters;
  v8 = type metadata accessor for MLTrainingSessionParameters();
  v9 = *(_QWORD *)(v7 + *(int *)(v8 + 20));
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = *(_QWORD *)(v7 + *(int *)(v8 + 28));
  if (__OFSUB__(v11, v6))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 >= v11 - v6)
    v12 = v11 - v6;
  else
    v12 = *(_QWORD *)(v7 + *(int *)(v8 + 20));
  type metadata accessor for EventCollector();
  swift_allocObject();
  v13 = EventCollector.init()();
  if (v12 < 0)
    goto LABEL_21;
  v14 = v13;
  v39 = v11;
  v40 = v10;
  v41 = v12;
  if (!v12)
  {
LABEL_13:
    v27 = *(_QWORD *)(v0 + 136);
    v26 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 128);
    static MetricsKey.trainingMaximumError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    v31 = (_QWORD *)MEMORY[0x24BEE4B00];
    if ((v30 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v32 = OUTLINED_FUNCTION_59_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, v33, v32);
      OUTLINED_FUNCTION_56_18();
    }
    static MetricsKey.trainingError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v35 = v34;
    OUTLINED_FUNCTION_61_16();
    if ((v35 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v36 = OUTLINED_FUNCTION_59_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v37, v36);
      OUTLINED_FUNCTION_56_18();
    }
    v38 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v31);
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, uint64_t, BOOL))(v0 + 8))(v41, v38, v40 >= v39);
    return;
  }
  v15 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 120);
  v17 = v16 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
  v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model);
  v42 = v16 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_29_0();
  v19 = v12;
  while (1)
  {
    outlined init with copy of URL?(v42, *(_QWORD *)(v0 + 176), &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
    v20 = type metadata accessor for MLLinearRegressor.Regressor();
    if (OUTLINED_FUNCTION_208_0(v20) == 1)
      break;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v15 + 16))(*(_QWORD *)(v0 + 168), v17, *(_QWORD *)(v0 + 152));
    swift_beginAccess();
    v21 = type metadata accessor for MLLinearRegressor.Model();
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v21) == 1)
      goto LABEL_23;
    v22 = *(_QWORD *)(v0 + 168);
    swift_retain();
    MLLinearRegressor.Regressor.update(_:with:eventHandler:)(v18, v22, (uint64_t)partial apply for closure #1 in LogisticRegressionClassifierTrainingSessionDelegate.train(from:), v14);
    v24 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 152);
    swift_endAccess();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, v25);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v23, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor);
    if (!--v19)
      goto LABEL_13;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

uint64_t LinearRegressorTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[25] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[26] = OUTLINED_FUNCTION_0();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v2;
  v1[28] = *(_QWORD *)(v2 - 8);
  v1[29] = OUTLINED_FUNCTION_0();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v3;
  v1[31] = *(_QWORD *)(v3 - 8);
  v1[32] = OUTLINED_FUNCTION_25();
  v1[33] = OUTLINED_FUNCTION_25();
  v1[34] = OUTLINED_FUNCTION_25();
  v1[35] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  v1[36] = OUTLINED_FUNCTION_25();
  v1[37] = OUTLINED_FUNCTION_25();
  v4 = OUTLINED_FUNCTION_93();
  v1[38] = v4;
  v1[39] = *(_QWORD *)(v4 - 8);
  v1[40] = OUTLINED_FUNCTION_25();
  v1[41] = OUTLINED_FUNCTION_25();
  v1[42] = OUTLINED_FUNCTION_25();
  v1[43] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumTagSinglePayload;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned __int8 v36;
  char *v37;
  unsigned __int8 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  v2 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v2);
  v4 = 0;
  if (EnumTagSinglePayload)
    goto LABEL_2;
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_101_4(v7, v8, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  v58 = type metadata accessor for MLLinearRegressor.Model();
  result = __swift_getEnumTagSinglePayload(v6, 1, v58);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingData;
    OUTLINED_FUNCTION_29_0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_18();
    MLLinearRegressor.Model.applied(to:eventHandler:)(v13);
    v14 = *(_QWORD *)(v0 + 296);
    v15 = *(_QWORD *)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 216);
    v48 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD *)(v0 + 208);
    v54 = *(_QWORD *)(v0 + 304);
    v50 = *(_QWORD *)(v0 + 200);
    v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 312) + 8);
    ((void (*)(_QWORD))v57)(*(_QWORD *)(v0 + 336));
    outlined destroy of MLHandPoseClassifier.ModelParameters(v14, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
    DataFrame.subscript.getter();
    *(_QWORD *)(v0 + 160) = 0;
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, MEMORY[0x24BDF5F90]);
    OUTLINED_FUNCTION_65_16();
    v17 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v17(v15, v16);
    swift_beginAccess();
    DataFrame.subscript.getter();
    swift_endAccess();
    *(_QWORD *)(v0 + 136) = 0;
    OUTLINED_FUNCTION_65_16();
    v17(v15, v16);
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, MEMORY[0x24BDF5E58]);
    OUTLINED_FUNCTION_21_31();
    maximumAbsoluteError<A, B, C>(_:_:)();
    v18 = *(_QWORD *)(v0 + 144);
    OUTLINED_FUNCTION_21_31();
    rootMeanSquaredError<A, B, C>(_:_:)();
    v19 = *(_QWORD *)(v0 + 152);
    v20 = v50 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
    v21 = *(void **)(v50 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
    v22 = *(_QWORD *)(v50 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 8);
    *(_QWORD *)v20 = v18;
    *(_QWORD *)(v20 + 8) = v19;
    v23 = *(_BYTE *)(v20 + 16);
    *(_BYTE *)(v20 + 16) = 0;
    outlined consume of MLRegressorMetrics?(v21, v22, v23);
    v24 = v50 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_101_4(v24, v25, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v52, 1, v54) == 1)
    {
      v26 = *(_QWORD *)(v0 + 344);
      v27 = *(_QWORD *)(v0 + 304);
      v28 = *(_QWORD *)(v0 + 272);
      v29 = *(_QWORD *)(v0 + 240);
      v30 = *(_QWORD *)(v0 + 248);
      v32 = *(_QWORD *)(v0 + 200);
      v31 = *(_QWORD *)(v0 + 208);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      OUTLINED_FUNCTION_61_16();
      v57(v26, v27);
      outlined destroy of URL?(v31, &demangling cache variable for type metadata for DataFrame?);
      v33 = v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
      v34 = *(void **)(v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
      v35 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 8) = 0;
      v38 = *(_BYTE *)(v33 + 16);
      v37 = (char *)(v33 + 16);
      v36 = v38;
      v39 = -1;
LABEL_8:
      *v37 = v39;
      outlined consume of MLRegressorMetrics?(v34, v35, v36);
      v4 = 1;
LABEL_2:
      v60 = v4;
      swift_task_dealloc();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_19();
      swift_task_dealloc();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      swift_task_dealloc();
      OUTLINED_FUNCTION_40();
      swift_task_dealloc();
      OUTLINED_FUNCTION_31();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v60, 1);
    }
    v40 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 32))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 304));
    OUTLINED_FUNCTION_101_4(v7, v41, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    result = __swift_getEnumTagSinglePayload(v40, 1, v58);
    if ((_DWORD)result != 1)
    {
      OUTLINED_FUNCTION_18();
      MLLinearRegressor.Model.applied(to:eventHandler:)(v42);
      v59 = *(_QWORD *)(v0 + 344);
      v56 = *(_QWORD *)(v0 + 328);
      v49 = *(_QWORD *)(v0 + 320);
      v55 = *(_QWORD *)(v0 + 280);
      v51 = *(_QWORD *)(v0 + 304);
      v53 = *(_QWORD *)(v0 + 272);
      v46 = *(_QWORD *)(v0 + 264);
      v47 = *(_QWORD *)(v0 + 256);
      v61 = *(_QWORD *)(v0 + 200);
      outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
      DataFrame.subscript.getter();
      *(_QWORD *)(v0 + 168) = 0;
      OUTLINED_FUNCTION_51_21();
      OUTLINED_FUNCTION_42_19();
      DataFrame.subscript.getter();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 176) = 0;
      OUTLINED_FUNCTION_51_21();
      OUTLINED_FUNCTION_42_19();
      maximumAbsoluteError<A, B, C>(_:_:)();
      v43 = *(_QWORD *)(v0 + 184);
      rootMeanSquaredError<A, B, C>(_:_:)();
      OUTLINED_FUNCTION_30_28(v47);
      OUTLINED_FUNCTION_30_28(v46);
      v57(v49, v51);
      v57(v56, v51);
      OUTLINED_FUNCTION_30_28(v53);
      OUTLINED_FUNCTION_30_28(v55);
      v57(v59, v51);
      v39 = 0;
      v44 = *(_QWORD *)(v0 + 192);
      v45 = v61 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics;
      v34 = *(void **)(v61 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
      v35 = *(_QWORD *)(v61 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
      *(_QWORD *)v45 = v43;
      *(_QWORD *)(v45 + 8) = v44;
      v37 = (char *)(v45 + 16);
      v36 = *(_BYTE *)(v45 + 16);
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

void LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_91_0();
  __asm { BR              X10 }
}

uint64_t sub_21AF22B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = OUTLINED_FUNCTION_35_8();
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
  {
    v10 = 0;
    return v10 & 1;
  }
  v4 = v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v4, v2, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  v5 = OUTLINED_FUNCTION_27_35();
  OUTLINED_FUNCTION_128(v2, 1, v5);
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_50_19(v7, v8, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  v9 = OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_128(v1, 1, v9);
  if (v6)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x21AF22D00);
  }
  lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
  v10 = 1;
  SupervisedTabularEstimator.write(_:to:overwrite:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor);
  return v10 & 1;
}

void LinearRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_91_1();
  v6 = OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  v8 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v8, v2, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_128(v2, 1, v6);
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v10 = 0xD000000000000030;
    *(_QWORD *)(v10 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_BYTE *)(v10 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    outlined init with take of MLClassifierMetrics.Precomputed(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    MLLinearRegressor.PersistentParameters.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
  }
}

void LinearRegressorTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_8_1();
  v30 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - v7;
  v9 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OUTLINED_FUNCTION_20_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = OUTLINED_FUNCTION_3_9();
  v21(v20);
  MLLinearRegressor.PersistentParameters.init(sessionDirectory:)(v11, (uint64_t)v19);
  if (!v1)
  {
    v22 = v30 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
    v23 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_50_19(v23, v24, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
    OUTLINED_FUNCTION_128((uint64_t)v8, 1, v12);
    if (v25)
    {
      OUTLINED_FUNCTION_60_14((uint64_t)v8);
      outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v19, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
      OUTLINED_FUNCTION_173_0();
      __swift_storeEnumTagSinglePayload(v26, v27, v28, v12);
      OUTLINED_FUNCTION_4_28();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v5, v22, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLClassifierMetrics.Precomputed((uint64_t)v8, v16, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
      LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v19, v16);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t LinearRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24[6];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (int *)OUTLINED_FUNCTION_20_29();
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = OUTLINED_FUNCTION_189();
    v12 = specialized Set.init<A>(_:)(v11);
    v9 = *(_QWORD *)(a2 + v4[7]);
    v13 = OUTLINED_FUNCTION_31_2();
    v14 = specialized Set.init<A>(_:)(v13);
    specialized static Set.== infix(_:_:)(v12, v14);
    v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      static MLLinearRegressor.ModelParameters.firstIncompatibility(_:_:)(a1 + v4[8], a2 + v4[8], v24);
      result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v24, (uint64_t)&v25);
      v18 = v26;
      if (!v26)
        return result;
      v19 = v25;
      v6 = v27;
      v7 = v28;
      v9 = v29;
      a2 = v30;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = v19;
    }
    else
    {
      OUTLINED_FUNCTION_189();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
      v6 = OUTLINED_FUNCTION_36_8();
      v7 = v22;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_36_8();
      a2 = v23;
      swift_bridgeObjectRelease();
      String.init<A>(_:)();
      OUTLINED_FUNCTION_238();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = 0xD000000000000011;
      v18 = 0x800000021AFF4520;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_31_2();
    String.init<A>(_:)();
    OUTLINED_FUNCTION_238();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v20 = 0x6320746567726154;
    v18 = 0xED00006E6D756C6FLL;
  }
  *(_QWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v6;
  *(_QWORD *)(v20 + 24) = v7;
  *(_QWORD *)(v20 + 32) = v9;
  *(_QWORD *)(v20 + 40) = a2;
  *(_BYTE *)(v20 + 48) = 3;
  return swift_willThrow(v21);
}

void LinearRegressorTrainingSessionDelegate.deinit()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  v1 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_11_1(v1);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for MLLinearRegressor.Regressor?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics);
  OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t LinearRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  LinearRegressorTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for LinearRegressorTrainingSessionDelegate()
{
  return type metadata accessor for LinearRegressorTrainingSessionDelegate();
}

uint64_t type metadata accessor for LinearRegressorTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for LinearRegressorTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for LinearRegressorTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, (void (*)(uint64_t))MEMORY[0x24BDF5DF0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Regressor?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Regressor);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLLinearRegressor.Model?, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Model);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance LinearRegressorTrainingSessionDelegate()
{
  LinearRegressorTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance LinearRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  LinearRegressorTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance LinearRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)LinearRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance LinearRegressorTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return LinearRegressorTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance LinearRegressorTrainingSessionDelegate()
{
  char v0;

  LinearRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance LinearRegressorTrainingSessionDelegate(uint64_t a1)
{
  LinearRegressorTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance LinearRegressorTrainingSessionDelegate()
{
  LinearRegressorTrainingSessionDelegate.restore(from:phase:)();
}

unint64_t lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    v1 = type metadata accessor for MLLinearRegressor.Regressor();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLinearRegressor.Regressor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor)
  {
    v1 = type metadata accessor for MLLinearRegressor.Regressor();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLinearRegressor.Regressor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor);
  }
  return result;
}

void outlined consume of MLRegressorMetrics?(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    outlined consume of Result<_RegressorMetrics, Error>(a1, a2, a3 & 1);
}

uint64_t outlined init with copy of MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLLinearRegressor.ModelParameters(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_47()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_16_33()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_20_29()
{
  return type metadata accessor for MLLinearRegressor.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_21_31()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_27_35()
{
  return type metadata accessor for MLLinearRegressor.Regressor();
}

uint64_t OUTLINED_FUNCTION_28_29()
{
  return type metadata accessor for MLLinearRegressor.Model();
}

uint64_t OUTLINED_FUNCTION_30_28(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_33_27(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined consume of MLRegressorMetrics?(*(void **)(v1 + a1), *(_QWORD *)(v1 + a1 + 8), *(_BYTE *)(v1 + a1 + 16));
}

uint64_t OUTLINED_FUNCTION_42_19()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void OUTLINED_FUNCTION_50_19(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of URL?(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_51_21()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t OUTLINED_FUNCTION_54_16()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_57_14(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + a1;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = -1;
}

uint64_t OUTLINED_FUNCTION_61_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_65_16()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t CMLParameters.Key.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AF23844 + 4 * word_21AFEE300[a1]))(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL);
}

unint64_t sub_21AF23844()
{
  return 0xD000000000000011;
}

uint64_t sub_21AF23F70()
{
  return 0x767275635F636F72;
}

void MLTextClassifier.FeatureExtractorType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  outlined init with copy of MLTextClassifier.FeatureExtractorType(v0, v4 - v3);
  v6 = (char *)sub_21AF24050 + 4 * byte_21AFEE3A0[__swift_getEnumTagSinglePayload(v5, 4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_21AF24050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v1);
  *(_QWORD *)(v5 - 64) = 0;
  *(_QWORD *)(v5 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 64) = v0 + 5;
  *(_QWORD *)(v5 - 56) = 0x800000021AFF6C10;
  v6._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 39;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v5 - 64);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  return v8;
}

uint64_t type metadata accessor for MLTextClassifier.FeatureExtractorType()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType;
  if (!type metadata singleton initialization cache for MLTextClassifier.FeatureExtractorType)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void MLTextClassifier.FeatureExtractorType.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  MLTextClassifier.FeatureExtractorType.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
}

void NLModelEmbeddingType.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v2 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  outlined init with copy of MLTextClassifier.FeatureExtractorType(a1, v4 - v3);
  v6 = OUTLINED_FUNCTION_78();
  v7 = (char *)sub_21AF24264 + 4 * byte_21AFEE3A5[__swift_getEnumTagSinglePayload(v5, 4, v6)];
  __asm { BR              X10 }
}

id sub_21AF24264()
{
  uint64_t v0;
  id v1;

  v1 = (id)*MEMORY[0x24BDDFC68];
  outlined destroy of MLTextClassifier.FeatureExtractorType(v0);
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.FeatureExtractorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(a1, 4, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithCopy for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 4, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  return a1;
}

void *initializeWithTake for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithTake for MLTextClassifier.FeatureExtractorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 4, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF246E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int EnumTagSinglePayload;

  v4 = OUTLINED_FUNCTION_78();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 5)
    return EnumTagSinglePayload - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier.FeatureExtractorType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF24734(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 4);
  else
    v5 = 0;
  v6 = OUTLINED_FUNCTION_78();
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return __swift_getEnumTagSinglePayload(a1, 4, v2);
}

uint64_t destructiveInjectEnumTag for MLTextClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return __swift_storeEnumTagSinglePayload(a1, a2, 4, v4);
}

uint64_t type metadata completion function for MLTextClassifier.FeatureExtractorType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void MLTextClassifier.ModelAlgorithmType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_6_47();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_49(v3, v7);
  v4 = OUTLINED_FUNCTION_9_41();
  if (v4)
  {
    if (v4 == 1)
    {
      OUTLINED_FUNCTION_7_44();
    }
    else
    {
      OUTLINED_FUNCTION_8_46();
      MLTextClassifier.FeatureExtractorType.description.getter();
      OUTLINED_FUNCTION_5_40(v5, v6);
      OUTLINED_FUNCTION_1_48();
      swift_bridgeObjectRelease();
      outlined destroy of MLImageClassifier.CustomFeatureExtractor(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    OUTLINED_FUNCTION_4_49();
  }
  OUTLINED_FUNCTION_125();
}

uint64_t type metadata accessor for MLTextClassifier.ModelAlgorithmType()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelAlgorithmType)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void MLTextClassifier.ModelAlgorithmType.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_6_47();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_49(v3, v7);
  v4 = OUTLINED_FUNCTION_9_41();
  if (v4)
  {
    if (v4 == 1)
    {
      OUTLINED_FUNCTION_7_44();
    }
    else
    {
      OUTLINED_FUNCTION_8_46();
      MLTextClassifier.FeatureExtractorType.description.getter();
      OUTLINED_FUNCTION_5_40(v5, v6);
      OUTLINED_FUNCTION_1_48();
      swift_bridgeObjectRelease();
      outlined destroy of MLImageClassifier.CustomFeatureExtractor(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    OUTLINED_FUNCTION_4_49();
  }
  OUTLINED_FUNCTION_125();
}

uint64_t MLTextClassifier.ModelAlgorithmType.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = v1;
  OUTLINED_FUNCTION_6_47();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTextClassifier.ModelAlgorithmType(v2, (uint64_t)v9);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v11 = 0x800000021AFF6C70;
      v12 = 0xD00000000000001ELL;
    }
    else
    {
      outlined init with take of MLTextClassifier.FeatureExtractorType((uint64_t)v9, (uint64_t)v6);
      MLTextClassifier.FeatureExtractorType.description.getter();
      v15 = v13;
      v16 = v14;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_48();
      swift_bridgeObjectRelease();
      v12 = v15;
      v11 = v16;
      result = outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    }
  }
  else
  {
    v11 = 0xED00006C65646F4DLL;
    v12 = 0x20746E452078614DLL;
  }
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v12;
  a1[1] = v11;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelAlgorithmType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
    v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for URL();
    result = __swift_getEnumTagSinglePayload(a1, 4, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

char *initializeWithCopy for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
    {
      v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
    }
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
      {
        v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
      }
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = v10[8];
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[8] = v11;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
    {
      v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
    }
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelAlgorithmType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v6))
      {
        v7 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v6);
      }
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[8] = v10[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLTextClassifier.ModelAlgorithmType()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  const char *v3;
  const char *v4;
  char *v5;

  v3 = "\t";
  v4 = "\t";
  result = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_1_48()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C65646F4D20;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_2_49@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLTextClassifier.ModelAlgorithmType(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_3_47()
{
  return type metadata accessor for MLTextClassifier.ModelAlgorithmType();
}

uint64_t OUTLINED_FUNCTION_5_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 48) = a1;
  *(_QWORD *)(v2 - 40) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_47()
{
  return type metadata accessor for MLTextClassifier.FeatureExtractorType();
}

uint64_t OUTLINED_FUNCTION_8_46()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of MLTextClassifier.FeatureExtractorType(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_41()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t static MLImageClassifier.__Defaults.validation.getter@<X0>(uint64_t a1@<X8>)
{
  return static MLImageClassifier.__Defaults.validation.getter(&one-time initialization token for validation, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (uint64_t)static MLImageClassifier.__Defaults.validation, a1);
}

uint64_t static MLImageClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

uint64_t static MLImageClassifier.__Defaults.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  return static MLImageClassifier.__Defaults.validation.getter(&one-time initialization token for algorithm, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (uint64_t)static MLImageClassifier.__Defaults.algorithm, a1);
}

uint64_t static MLImageClassifier.__Defaults.validation.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return outlined init with copy of _TablePrinter(v8, a4, a2);
}

uint64_t static MLImageClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

void static MLImageClassifier.__Defaults.augmentationOptions.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t one-time initialization function for algorithm()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.algorithm);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.algorithm);
  *(_QWORD *)v1 = 1;
  *(_BYTE *)(v1 + 8) = 0;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static MLImageClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLImageClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLImageClassifier.__Defaults()
{
  return &type metadata for MLImageClassifier.__Defaults;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyClassificationMetrics(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
    else
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnyClassificationMetrics(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  else
    v2 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t initializeWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  else
    v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  else
    v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AnyClassificationMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v4 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyClassificationMetrics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF25824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AnyClassificationMetrics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF25868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AnyClassificationMetrics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnyClassificationMetrics;
  if (!type metadata singleton initialization cache for AnyClassificationMetrics)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AnyClassificationMetrics()
{
  unint64_t v0;

  type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void AnyClassificationMetrics.init(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  OUTLINED_FUNCTION_20_3();
  v1 = v0;
  v3 = v2;
  v36 = v4;
  v28 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>)
                  - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_3_0();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v23 - v9;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  v32 = *(_QWORD *)(v34 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v31 = v11;
  v23 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>)
                  - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3_0();
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v25 = *(_QWORD *)(v27 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v24 = v16;
  AnyColumn.wrappedElementType.getter();
  v35 = v1;
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype() && swift_dynamicCastMetatype())
  {
    v17 = MEMORY[0x24BEE0D00];
    AnyColumn.assumingType<A>(_:)();
    v37 = 0;
    v38 = 0xE000000000000000;
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
    OUTLINED_FUNCTION_18_29();
    OUTLINED_FUNCTION_22_29();
    OUTLINED_FUNCTION_20_30();
    v37 = 0;
    v38 = 0xE000000000000000;
    OUTLINED_FUNCTION_18_29();
    OUTLINED_FUNCTION_22_29();
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, MEMORY[0x24BDF5E58]);
    v18 = v24;
    OUTLINED_FUNCTION_19_33();
    v19 = type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_11_38(v19);
    v3(v3, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v36, v18, v27);
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_9_5();
    return;
  }
  if (swift_dynamicCastMetatype() && swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    v37 = 0;
    v20 = lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5F90]);
    OUTLINED_FUNCTION_16_34();
    OUTLINED_FUNCTION_23_31();
    OUTLINED_FUNCTION_20_30();
    v37 = 0;
    OUTLINED_FUNCTION_16_34();
    OUTLINED_FUNCTION_23_31();
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, MEMORY[0x24BDF5E58]);
    v21 = v31;
    OUTLINED_FUNCTION_19_33();
    v22 = type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_11_38(v22);
    v3(v3, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v36, v21, v34);
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyClassificationMetrics.stringLabels.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  OUTLINED_FUNCTION_20_3();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v6 = v5 - v4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_91_1();
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v0, v1);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v0, v1, v7);
    ClassificationMetrics.labels.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v7);
LABEL_15:
    OUTLINED_FUNCTION_9_5();
    return;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
  v10 = ClassificationMetrics.labels.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
LABEL_14:
    specialized Set.init<A>(_:)(v12);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    goto LABEL_15;
  }
  v26 = v6;
  v27 = v3;
  v28 = v2;
  v30 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v12 = v30;
  v13 = specialized _NativeSet.startIndex.getter(v10);
  v15 = v14;
  v17 = v16 & 1;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(v10 + 32))
  {
    if (((*(_QWORD *)(v10 + 56 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_17;
    if (*(_DWORD *)(v10 + 36) != (_DWORD)v15)
      goto LABEL_18;
    v29 = v17;
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v20 = v19;
    v21 = *(_QWORD *)(v30 + 16);
    if (v21 >= *(_QWORD *)(v30 + 24) >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    *(_QWORD *)(v30 + 16) = v21 + 1;
    v22 = v30 + 16 * v21;
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v20;
    v23 = specialized _NativeSet.index(after:)(v13, v15, v29 & 1, v10);
    v13 = v23;
    v15 = v24;
    v17 = v25 & 1;
    if (!--v11)
    {
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v23, v24, v17);
      swift_bridgeObjectRelease();
      v3 = v27;
      v2 = v28;
      v6 = v26;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

#error "21AF260F4: call analysis failed (funcsize=50)"

#error "21AF261C8: call analysis failed (funcsize=48)"

double AnyClassificationMetrics.accuracy.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  double v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_10_39();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_7_45();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_1_49(v3, v10);
  if (OUTLINED_FUNCTION_14_34() == 1)
  {
    OUTLINED_FUNCTION_8_47();
    ClassificationMetrics.accuracy.getter();
    v5 = v4;
    v6 = OUTLINED_FUNCTION_17_26();
  }
  else
  {
    OUTLINED_FUNCTION_6_48();
    ClassificationMetrics.accuracy.getter();
    v5 = v8;
    v6 = OUTLINED_FUNCTION_15_34();
  }
  v7(v6);
  return v5;
}

uint64_t outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void AnyClassificationMetrics.makeConfusionMatrix()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_20_3();
  a19 = v23;
  a20 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  OUTLINED_FUNCTION_7_45();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_5();
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_49();
  v33 = v32 - v31;
  outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v20, v32 - v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v33, v21);
    ClassificationMetrics.makeConfusionMatrix<>()();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v29, v33, v26);
    ClassificationMetrics.makeConfusionMatrix<>()();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
  OUTLINED_FUNCTION_9_5();
}

uint64_t OUTLINED_FUNCTION_1_49@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_6_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_8_47()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_11_38(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_34()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_15_34()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_16_34()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t OUTLINED_FUNCTION_17_26()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_18_29()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t OUTLINED_FUNCTION_19_33()
{
  return ClassificationMetrics.init<A, B>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_20_30()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_22_29()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_23_31()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void specialized handling<A, B>(_:_:)(uint64_t a1)
{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA68]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA60]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA90]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAC28]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA50]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA38]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA40]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB80]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAC08]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB90]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBACF8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAD28]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAD18]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBABE8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBABC0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBABB0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBABB8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBABE0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB70]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAD38]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAD30]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAD00]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA98]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAAE8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB18]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB10]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAC90]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAC88]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB08]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAB00]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA70]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAA28]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBACB0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAC80]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAAF0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B>(_:_:)(a1, MEMORY[0x24BEBAAE0]);
  OUTLINED_FUNCTION_44_6();
}

void specialized handling<A, B>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __n128 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_49_18(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BB48]();
  if (v27)
  {
    if (OUTLINED_FUNCTION_44_25())
    {
      String.init(cString:)();
      OUTLINED_FUNCTION_45_22();
      if (one-time initialization token for table != -1)
        swift_once();
      OUTLINED_FUNCTION_13_43();
      OUTLINED_FUNCTION_6_49();
      OUTLINED_FUNCTION_11_39();
      v25 = (uint64_t)&v25;
      v26 = v0;
      if (one-time initialization token for column != -1)
        swift_once();
      v2 = OUTLINED_FUNCTION_3_48();
      v4 = v3;
      OUTLINED_FUNCTION_10_3();
      v25 = v2;
      v26 = v4;
      if (one-time initialization token for tableMap != -1)
        swift_once();
      OUTLINED_FUNCTION_3_48();
      OUTLINED_FUNCTION_11_39();
      v25 = v2;
      v26 = v0;
      if (one-time initialization token for columnMap != -1)
        swift_once();
      v5 = OUTLINED_FUNCTION_3_48();
      v7 = v6;
      OUTLINED_FUNCTION_10_3();
      v25 = v5;
      v26 = v7;
      if (one-time initialization token for drop != -1)
        swift_once();
      OUTLINED_FUNCTION_3_48();
      OUTLINED_FUNCTION_11_39();
      v25 = v5;
      v26 = v0;
      if (one-time initialization token for sequence != -1)
        swift_once();
      v8 = OUTLINED_FUNCTION_3_48();
      v10 = v9;
      OUTLINED_FUNCTION_10_3();
      v25 = v8;
      v26 = v10;
      if (one-time initialization token for double != -1)
        swift_once();
      OUTLINED_FUNCTION_3_48();
      OUTLINED_FUNCTION_11_39();
      v25 = v8;
      v26 = v0;
      if (one-time initialization token for integer != -1)
        swift_once();
      v11 = OUTLINED_FUNCTION_3_48();
      v13 = v12;
      OUTLINED_FUNCTION_10_3();
      v25 = v11;
      v26 = v13;
      if (one-time initialization token for error != -1)
        swift_once();
      OUTLINED_FUNCTION_4_50();
      OUTLINED_FUNCTION_11_39();
      v25 = v11;
      v26 = v0;
      if (one-time initialization token for archive != -1)
        swift_once();
      v14 = OUTLINED_FUNCTION_4_50();
      v16 = v15;
      OUTLINED_FUNCTION_10_3();
      v25 = v14;
      v26 = v16;
      if (one-time initialization token for limit != -1)
        swift_once();
      OUTLINED_FUNCTION_4_50();
      OUTLINED_FUNCTION_11_39();
      v25 = v14;
      v26 = v0;
      if (one-time initialization token for supportedStackTypes != -1)
        swift_once();
      OUTLINED_FUNCTION_4_50();
      OUTLINED_FUNCTION_5_41();
      v25 = v14;
      v26 = v1;
      if (one-time initialization token for sortTypes != -1)
        swift_once();
      v17 = OUTLINED_FUNCTION_4_50();
      v19 = v18;
      OUTLINED_FUNCTION_80();
      v20 = (void *)OUTLINED_FUNCTION_25_29();
      OUTLINED_FUNCTION_31_2();
      static OS_os_log.default.getter();
      OUTLINED_FUNCTION_26_30();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v21 = (__n128 *)OUTLINED_FUNCTION_0_22();
      v22 = OUTLINED_FUNCTION_35_20(v21, (__n128)xmmword_21AFE7DA0);
      OUTLINED_FUNCTION_51_22(v22);
      OUTLINED_FUNCTION_24_34();

      OUTLINED_FUNCTION_80();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v23 = OUTLINED_FUNCTION_49_0();
      *v24 = v17;
      v24[1] = v19;
      OUTLINED_FUNCTION_5_8(v23, (uint64_t)v24);
      OUTLINED_FUNCTION_17_12();
    }
    else
    {
      __break(1u);
    }
  }
}

#error "21AF27390: call analysis failed (funcsize=220)"

void specialized handling<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_49_18(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BB3C]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v38 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __n128 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  OUTLINED_FUNCTION_49_18(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BBCC]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_3_48();
    v36 = v35;
    OUTLINED_FUNCTION_10_3();
    a17 = v34;
    a18 = v36;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v34;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_3_48();
    v39 = v38;
    OUTLINED_FUNCTION_10_3();
    a17 = v37;
    a18 = v39;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v37;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v40 = OUTLINED_FUNCTION_3_48();
    v42 = v41;
    OUTLINED_FUNCTION_10_3();
    a17 = v40;
    a18 = v42;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v40;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v43 = OUTLINED_FUNCTION_3_48();
    v45 = v44;
    OUTLINED_FUNCTION_10_3();
    a17 = v43;
    a18 = v45;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v43;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v46 = OUTLINED_FUNCTION_4_50();
    v48 = v47;
    OUTLINED_FUNCTION_10_3();
    a17 = v46;
    a18 = v48;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v46;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = v46;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v49 = OUTLINED_FUNCTION_4_50();
    v51 = v50;
    OUTLINED_FUNCTION_80();
    v52 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_31_2();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v53 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v54 = OUTLINED_FUNCTION_35_20(v53, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_51_22(v54);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v55 = OUTLINED_FUNCTION_49_0();
    *v56 = v49;
    v56[1] = v51;
    OUTLINED_FUNCTION_5_8(v55, (uint64_t)v56);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

void specialized handling<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_48_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BB30](&a19);
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v38 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

void specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2)
{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAA10]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAC58]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBABA0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB78]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB98]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBABF0]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAA00]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB58]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB68]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBABC8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAC18]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBACA8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAAA8]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAC50]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB40]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAB48]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAC30]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBAC70]);
  OUTLINED_FUNCTION_44_6();
}

{
  specialized handling<A, B, C>(_:_:_:)(a1, a2, MEMORY[0x24BEBACF0]);
  OUTLINED_FUNCTION_44_6();
}

#error "21AF28774: call analysis failed (funcsize=219)"

void specialized handling<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_46_17(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BB00]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_46_17(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BBC0]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_48_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BBD8]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  OUTLINED_FUNCTION_46_17(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC38]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_3_48();
    v36 = v35;
    OUTLINED_FUNCTION_10_3();
    a17 = v34;
    a18 = v36;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v34;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_3_48();
    v39 = v38;
    OUTLINED_FUNCTION_10_3();
    a17 = v37;
    a18 = v39;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v37;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v40 = OUTLINED_FUNCTION_3_48();
    v42 = v41;
    OUTLINED_FUNCTION_10_3();
    a17 = v40;
    a18 = v42;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v40;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v43 = OUTLINED_FUNCTION_3_48();
    v45 = v44;
    OUTLINED_FUNCTION_10_3();
    a17 = v43;
    a18 = v45;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v43;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v46 = (void *)OUTLINED_FUNCTION_4_50();
    v48 = v47;
    OUTLINED_FUNCTION_10_3();
    a17 = (uint64_t)v46;
    a18 = v48;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)v46;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)v46;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v49 = OUTLINED_FUNCTION_4_50();
    v51 = v50;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v52 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v53 = OUTLINED_FUNCTION_35_20(v52, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_41_22(v53);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v54 = OUTLINED_FUNCTION_49_0();
    *v55 = v49;
    v55[1] = v51;
    OUTLINED_FUNCTION_5_8(v54, (uint64_t)v55);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

#error "21AF29F0C: call analysis failed (funcsize=217)"

void specialized handling<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_48_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BADC]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_52_15(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BBE4]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  v34();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_3_48();
    v37 = v36;
    OUTLINED_FUNCTION_10_3();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v35;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v38 = OUTLINED_FUNCTION_3_48();
    v40 = v39;
    OUTLINED_FUNCTION_10_3();
    a17 = v38;
    a18 = v40;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v38;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v41 = OUTLINED_FUNCTION_3_48();
    v43 = v42;
    OUTLINED_FUNCTION_10_3();
    a17 = v41;
    a18 = v43;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v41;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v44 = OUTLINED_FUNCTION_3_48();
    v46 = v45;
    OUTLINED_FUNCTION_10_3();
    a17 = v44;
    a18 = v46;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v44;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v47 = (void *)OUTLINED_FUNCTION_4_50();
    v49 = v48;
    OUTLINED_FUNCTION_10_3();
    a17 = (uint64_t)v47;
    a18 = v49;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)v47;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)v47;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v50 = OUTLINED_FUNCTION_4_50();
    v52 = v51;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v53 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v54 = OUTLINED_FUNCTION_35_20(v53, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_41_22(v54);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v55 = OUTLINED_FUNCTION_49_0();
    *v56 = v50;
    v56[1] = v52;
    OUTLINED_FUNCTION_5_8(v55, (uint64_t)v56);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_52_15(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC5C]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_46_17(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC44]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  v35();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v36 = (void *)OUTLINED_FUNCTION_1_50();
    v38 = v37;
    OUTLINED_FUNCTION_80();
    a17 = v36;
    a18 = v38;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

#error "21AF2AC2C: call analysis failed (funcsize=19)"

#error "21AF2AC78: call analysis failed (funcsize=19)"

#error "21AF2ACC4: call analysis failed (funcsize=19)"

#error "21AF2AD10: call analysis failed (funcsize=19)"

#error "21AF2AD5C: call analysis failed (funcsize=19)"

#error "21AF2ADA8: call analysis failed (funcsize=19)"

#error "21AF2ADF4: call analysis failed (funcsize=19)"

#error "21AF2AE40: call analysis failed (funcsize=19)"

#error "21AF2AE8C: call analysis failed (funcsize=19)"

#error "21AF2AED8: call analysis failed (funcsize=19)"

#error "21AF2B788: call analysis failed (funcsize=19)"

#error "21AF2BBE8: call analysis failed (funcsize=19)"

#error "21AF2BC34: call analysis failed (funcsize=19)"

void specialized handling<A, B, C, D, E>(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __n128 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  OUTLINED_FUNCTION_39_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BAF4]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_3_48();
    v36 = v35;
    OUTLINED_FUNCTION_10_3();
    a17 = v34;
    a18 = v36;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v34;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_3_48();
    v39 = v38;
    OUTLINED_FUNCTION_10_3();
    a17 = v37;
    a18 = v39;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v37;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v40 = OUTLINED_FUNCTION_3_48();
    v42 = v41;
    OUTLINED_FUNCTION_10_3();
    a17 = v40;
    a18 = v42;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v40;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v43 = OUTLINED_FUNCTION_3_48();
    v45 = v44;
    OUTLINED_FUNCTION_10_3();
    a17 = v43;
    a18 = v45;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v43;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v46 = OUTLINED_FUNCTION_4_50();
    v48 = v47;
    OUTLINED_FUNCTION_10_3();
    a17 = v46;
    a18 = v48;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v46;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = v46;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v49 = OUTLINED_FUNCTION_4_50();
    v51 = v50;
    OUTLINED_FUNCTION_80();
    v52 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_31_2();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v53 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v54 = OUTLINED_FUNCTION_35_20(v53, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_51_22(v54);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v55 = OUTLINED_FUNCTION_49_0();
    *v56 = v49;
    v56[1] = v51;
    OUTLINED_FUNCTION_5_8(v55, (uint64_t)v56);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_39_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BB90]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v38 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_39_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC14]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v38 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __n128 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  v35();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v36 = OUTLINED_FUNCTION_1_50();
    v38 = v37;
    OUTLINED_FUNCTION_80();
    a17 = v36;
    a18 = v38;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v39 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v40 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v41 = OUTLINED_FUNCTION_21_32(v40, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v41);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v42 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v42, v43);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_39_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC50]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = (uint64_t)&a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)&a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    v38 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_199();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v39 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v40 = OUTLINED_FUNCTION_21_32(v39, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_38_20(v40);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v41 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v41, v42);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  __n128 *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  v34();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_3_48();
    v37 = v36;
    OUTLINED_FUNCTION_10_3();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v35;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v38 = OUTLINED_FUNCTION_3_48();
    v40 = v39;
    OUTLINED_FUNCTION_10_3();
    a17 = v38;
    a18 = v40;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v38;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v41 = OUTLINED_FUNCTION_3_48();
    v43 = v42;
    OUTLINED_FUNCTION_10_3();
    a17 = v41;
    a18 = v43;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v41;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v44 = OUTLINED_FUNCTION_3_48();
    v46 = v45;
    OUTLINED_FUNCTION_10_3();
    a17 = v44;
    a18 = v46;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v44;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v47 = OUTLINED_FUNCTION_4_50();
    v49 = v48;
    OUTLINED_FUNCTION_10_3();
    a17 = v47;
    a18 = v49;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v47;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = v47;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v50 = OUTLINED_FUNCTION_4_50();
    v52 = v51;
    OUTLINED_FUNCTION_80();
    v53 = (void *)OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_31_2();
    static OS_os_log.default.getter();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v54 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v55 = OUTLINED_FUNCTION_35_20(v54, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_51_22(v55);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v56 = OUTLINED_FUNCTION_49_0();
    *v57 = v50;
    v57[1] = v52;
    OUTLINED_FUNCTION_5_8(v56, (uint64_t)v57);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

#error "21AF2CD24: call analysis failed (funcsize=19)"

#error "21AF2CD70: call analysis failed (funcsize=19)"

#error "21AF2CDBC: call analysis failed (funcsize=19)"

#error "21AF2D650: call analysis failed (funcsize=19)"

#error "21AF2D69C: call analysis failed (funcsize=19)"

#error "21AF2D6E8: call analysis failed (funcsize=19)"

#error "21AF2D734: call analysis failed (funcsize=19)"

void specialized handling<A, B, C, D, E, F, G>(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_48_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BBB4]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  OUTLINED_FUNCTION_48_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC68]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

void specialized handling<A, B, C, D, E, F>(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;

  OUTLINED_FUNCTION_40_22();
  a29 = v32;
  a30 = v33;
  OUTLINED_FUNCTION_39_19(*MEMORY[0x24BDAC8D0]);
  MEMORY[0x22075BC2C]();
  if (!a19)
  {
LABEL_30:
    OUTLINED_FUNCTION_27_36();
    return;
  }
  if (OUTLINED_FUNCTION_44_25())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_45_22();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_6_49();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)&a17;
    a18 = v30;
    if (one-time initialization token for column != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_3_48();
    v36 = v35;
    OUTLINED_FUNCTION_10_3();
    a17 = v34;
    a18 = v36;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v34;
    a18 = v30;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_3_48();
    v39 = v38;
    OUTLINED_FUNCTION_10_3();
    a17 = v37;
    a18 = v39;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v37;
    a18 = v30;
    if (one-time initialization token for sequence != -1)
      swift_once();
    v40 = OUTLINED_FUNCTION_3_48();
    v42 = v41;
    OUTLINED_FUNCTION_10_3();
    a17 = v40;
    a18 = v42;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_3_48();
    OUTLINED_FUNCTION_11_39();
    a17 = v40;
    a18 = v30;
    if (one-time initialization token for integer != -1)
      swift_once();
    v43 = OUTLINED_FUNCTION_3_48();
    v45 = v44;
    OUTLINED_FUNCTION_10_3();
    a17 = v43;
    a18 = v45;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = v43;
    a18 = v30;
    if (one-time initialization token for archive != -1)
      swift_once();
    v46 = (void *)OUTLINED_FUNCTION_4_50();
    v48 = v47;
    OUTLINED_FUNCTION_10_3();
    a17 = (uint64_t)v46;
    a18 = v48;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_11_39();
    a17 = (uint64_t)v46;
    a18 = v30;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_4_50();
    OUTLINED_FUNCTION_5_41();
    a17 = (uint64_t)v46;
    a18 = v31;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    v49 = OUTLINED_FUNCTION_4_50();
    v51 = v50;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v52 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v53 = OUTLINED_FUNCTION_35_20(v52, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_41_22(v53);
    OUTLINED_FUNCTION_24_34();

    OUTLINED_FUNCTION_80();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v54 = OUTLINED_FUNCTION_49_0();
    *v55 = v49;
    v55[1] = v51;
    OUTLINED_FUNCTION_5_8(v54, (uint64_t)v55);
    OUTLINED_FUNCTION_17_12();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  MEMORY[0x22075BBFC]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_22_30();
  a29 = v33;
  a30 = v34;
  a20 = *MEMORY[0x24BDAC8D0];
  a19 = 0;
  MEMORY[0x22075BC20]();
  OUTLINED_FUNCTION_31_26();
  if (!v30)
  {
LABEL_30:
    OUTLINED_FUNCTION_33_28();
    OUTLINED_FUNCTION_14_35();
    return;
  }
  if (OUTLINED_FUNCTION_29_27())
  {
    String.init(cString:)();
    OUTLINED_FUNCTION_32_23();
    if (one-time initialization token for table != -1)
      swift_once();
    OUTLINED_FUNCTION_13_43();
    OUTLINED_FUNCTION_2_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for column != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for tableMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for columnMap != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for drop != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for sequence != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for double != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for integer != -1)
      swift_once();
    OUTLINED_FUNCTION_0_54();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for error != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for archive != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_7_46();
    a17 = &a17;
    a18 = v31;
    if (one-time initialization token for limit != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_5_41();
    a17 = &a17;
    a18 = v32;
    if (one-time initialization token for supportedStackTypes != -1)
      swift_once();
    v35 = (void *)OUTLINED_FUNCTION_1_50();
    v37 = v36;
    OUTLINED_FUNCTION_80();
    a17 = v35;
    a18 = v37;
    if (one-time initialization token for sortTypes != -1)
      swift_once();
    OUTLINED_FUNCTION_1_50();
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_25_29();
    OUTLINED_FUNCTION_34_26();
    OUTLINED_FUNCTION_26_30();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
    v39 = OUTLINED_FUNCTION_21_32(v38, (__n128)xmmword_21AFE7DA0);
    OUTLINED_FUNCTION_23_32(v39);
    OUTLINED_FUNCTION_15_35();

    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v40 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_10_40(v40, v41);
    OUTLINED_FUNCTION_95_6();
    goto LABEL_30;
  }
  __break(1u);
}

void one-time initialization function for table()
{
  static ErrorString.table = 0x656D61724653;
  unk_255122C80 = 0xE600000000000000;
  qword_255122C88 = 0x6C62615461746144;
  unk_255122C90 = 0xE900000000000065;
}

void one-time initialization function for column()
{
  static ErrorString.column = 0x796172724153;
  unk_255122CA0 = 0xE600000000000000;
  qword_255122CA8 = 0x756C6F4361746144;
  unk_255122CB0 = 0xEA00000000006E6DLL;
}

void one-time initialization function for tableMap()
{
  static ErrorString.tableMap = 0x6D617266735F6374;
  unk_255122CC0 = 0xEF796C7070615F65;
  qword_255122CC8 = 7364973;
  unk_255122CD0 = 0xE300000000000000;
}

void one-time initialization function for columnMap()
{
  static ErrorString.columnMap = 0x61727261735F6374;
  unk_255122CE0 = 0xEF796C7070615F79;
  qword_255122CE8 = 7364973;
  unk_255122CF0 = 0xE300000000000000;
}

void one-time initialization function for drop()
{
  static ErrorString.drop = 0x616E706F7264;
  unk_255122D00 = 0xE600000000000000;
  qword_255122D08 = 0x7373694D706F7264;
  unk_255122D10 = 0xEB00000000676E69;
}

void one-time initialization function for sequence()
{
  static ErrorString.sequence = 1953720684;
  unk_255122D20 = 0xE400000000000000;
  strcpy((char *)&qword_255122D28, "SequenceType");
  unk_255122D35 = 0;
  unk_255122D36 = -5120;
}

void one-time initialization function for double()
{
  static ErrorString.double = 0x74616F6C66;
  unk_255122D40 = 0xE500000000000000;
  qword_255122D48 = 0x656C62756F44;
  unk_255122D50 = 0xE600000000000000;
}

void one-time initialization function for integer()
{
  static ErrorString.integer = 0x656765746E692061;
  unk_255122D60 = 0xE900000000000072;
  qword_255122D68 = 0x746E49206E61;
  unk_255122D70 = 0xE600000000000000;
}

void one-time initialization function for error()
{
  static ErrorString.error = 0x203A726F727245;
  unk_255122D80 = 0xE700000000000000;
  qword_255122D88 = 0;
  unk_255122D90 = 0xE000000000000000;
}

void one-time initialization function for archive()
{
  strcpy((char *)&static ErrorString.archive, "a Turi archive");
  unk_255122DA7 = -18;
  qword_255122DA8 = 0xD000000000000023;
  unk_255122DB0 = 0x800000021AFF6DD0;
}

void one-time initialization function for limit()
{
  static ErrorString.limit = 0xD000000000000016;
  unk_255122DC0 = 0x800000021AFF6D90;
  qword_255122DC8 = 0xD000000000000017;
  unk_255122DD0 = 0x800000021AFF6DB0;
}

void one-time initialization function for supportedStackTypes()
{
  static ErrorString.supportedStackTypes = 0xD000000000000020;
  unk_255122DE0 = 0x800000021AFF6D60;
  strcpy((char *)&qword_255122DE8, "type Sequence.");
  unk_255122DF7 = -18;
}

void one-time initialization function for sortTypes()
{
  static ErrorString.sortTypes = 0xD000000000000034;
  unk_255122E00 = 0x800000021AFF6D00;
  qword_255122E08 = 0xD00000000000001FLL;
  unk_255122E10 = 0x800000021AFF6D40;
}

uint64_t OUTLINED_FUNCTION_0_54()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_1_50()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_2_50()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_3_48()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_4_50()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_5_41()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_49()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_7_46()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_11_39()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_13_43()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_15_35()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OUTLINED_FUNCTION_16_35()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_21_32(__n128 *a1, __n128 a2)
{
  unint64_t v2;

  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_23_32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a1;
  v3[4] = v2;
  v3[5] = v1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_34()
{
  return os_log(_:dso:log:type:_:)();
}

unint64_t OUTLINED_FUNCTION_25_29()
{
  return type metadata accessor for OS_os_log();
}

uint64_t OUTLINED_FUNCTION_26_30()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_29_27()
{
  return tc_v1_error_message();
}

uint64_t OUTLINED_FUNCTION_33_28()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_34_26()
{
  return static OS_os_log.default.getter();
}

unint64_t OUTLINED_FUNCTION_35_20(__n128 *a1, __n128 a2)
{
  unint64_t v2;

  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_36_27@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *)@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 72) = v14;
  a14 = 0;
  return a3(a1, a2, &a14);
}

uint64_t OUTLINED_FUNCTION_38_20(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[8] = result;
  v3[4] = v2;
  v3[5] = v1;
  return result;
}

void OUTLINED_FUNCTION_39_19(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_41_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a1;
  v3[4] = v2;
  v3[5] = v1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_44_25()
{
  return tc_v1_error_message();
}

void OUTLINED_FUNCTION_46_17(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_47_24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t *)@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 72) = v13;
  a13 = 0;
  return a2(a1, &a13);
}

void OUTLINED_FUNCTION_48_19(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

void OUTLINED_FUNCTION_49_18(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

uint64_t OUTLINED_FUNCTION_51_22(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[8] = result;
  v3[4] = v2;
  v3[5] = v1;
  return result;
}

void OUTLINED_FUNCTION_52_15(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

uint64_t type metadata accessor for FeatureVectorizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer);
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer.Transformer);
}

uint64_t closure #1 in FeatureVectorizer.fitted(to:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v7 = type metadata accessor for AnyColumn();
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x220758A1C](*a1, a1[1]);
  result = ColumnDescriptor.init(_:)();
  if (v3)
  {
    *a2 = v3;
  }
  else
  {
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = v11;
  }
  return result;
}

uint64_t FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000021AFF6E00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000021AFF6E20)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000016;
  else
    return 0xD000000000000011;
}

uint64_t FeatureVectorizer.Transformer.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  char v17;
  uint64_t v18;

  v15[1] = a4;
  v15[0] = a3;
  v8 = type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(255, a5, a6, a4);
  MEMORY[0x22075B938](&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = a2;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
  lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor, MEMORY[0x24BEE12A0]);
  v13 = v15[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t FeatureVectorizer.Transformer.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(255, a2, a3, a4);
  v7 = MEMORY[0x22075B938](&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, v6);
  v8 = type metadata accessor for KeyedDecodingContainer();
  MEMORY[0x24BDAC7A8](v8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4)
  {
    OUTLINED_FUNCTION_30_6();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
    lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v10;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_0_55();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_30_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
  }
  return v7;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Metadata.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  char *v0;

  return Metadata.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  char *v1;

  Metadata.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Metadata.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  char *v0;

  return FeatureVectorizer.Transformer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FeatureVectorizer.Transformer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys()
{
  return Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FeatureVectorizer<A>.Transformer.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Metadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FeatureVectorizer<A>.Transformer.CodingKeys(uint64_t a1)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for FeatureVectorizer<A>.Transformer.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FeatureVectorizer<A>.Transformer@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = FeatureVectorizer.Transformer.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FeatureVectorizer<A>.Transformer(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return FeatureVectorizer.Transformer.encode(to:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t type metadata accessor for FeatureVectorizer.Transformer.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureVectorizer.Transformer.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor, &type metadata for ColumnDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor, &type metadata for ColumnDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor and conformance ColumnDescriptor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ColumnDescriptor]);
    v8 = a2();
    result = MEMORY[0x22075B938](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata instantiation function for FeatureVectorizer.Transformer.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for FeatureVectorizer.Transformer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AF2FF14 + 4 * byte_21AFEE555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AF2FF48 + 4 * asc_21AFEE550[v4]))();
}

uint64_t sub_21AF2FF48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF2FF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF2FF58);
  return result;
}

uint64_t sub_21AF2FF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF2FF6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AF2FF70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF2FF78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for CustomDebugStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for CustomStringConvertible in FeatureVectorizer<A>.Transformer.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

uint64_t OUTLINED_FUNCTION_0_55()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void CMLDictionary.add(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for _Model.Parameters();
  MEMORY[0x24BDAC7A8](v5);
  outlined init with copy of _Model.Parameters(a1, (uint64_t)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (char *)&loc_21AF300E0 + *((int *)qword_21AF30DD0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

#error "21AF300F0: call analysis failed (funcsize=35)"

uint64_t type metadata accessor for _Model.Parameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _Model.Parameters;
  if (!type metadata singleton initialization cache for _Model.Parameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of _Model.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _Model.Parameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for _Model.Parameters(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 5u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
        v7 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        v9 = *a2;
        *(_QWORD *)a1 = *a2;
        v10 = v9;
        goto LABEL_11;
      case 6u:
        v11 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v11;
        swift_bridgeObjectRetain();
        v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                     + 48);
        v13 = &a1[v12];
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
          __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
        }
        goto LABEL_11;
      case 0x10u:
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for _Model.Parameters(id *a1)
{
  uint64_t v2;
  uint64_t v3;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 5u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      swift_bridgeObjectRelease();
      break;
    case 4u:

      break;
    case 6u:
      swift_bridgeObjectRelease();
      v2 = (uint64_t)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      v3 = type metadata accessor for URL();
      if (!__swift_getEnumTagSinglePayload(v2, 1, v3))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for _Model.Parameters(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 5u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      v7 = (void *)*a2;
      *a1 = *a2;
      v8 = v7;
      goto LABEL_9;
    case 6u:
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                   + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      goto LABEL_9;
    case 0x10u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for _Model.Parameters(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of _Model.Parameters((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 5u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 4u:
        v6 = (void *)*a2;
        *a1 = *a2;
        v7 = v6;
        goto LABEL_10;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                    + 48);
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
        {
          v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
        }
        goto LABEL_10;
      case 0x10u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of _Model.Parameters(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _Model.Parameters();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for _Model.Parameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 6)
  {
    *a1 = *a2;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for _Model.Parameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of _Model.Parameters((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      *a1 = *a2;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, custom: URL?))
                  + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
        __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for _Model.Parameters()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD v2[28];

  v0 = MEMORY[0x24BEE0178] + 64;
  v2[4] = MEMORY[0x24BEE0178] + 64;
  v2[5] = MEMORY[0x24BEE0178] + 64;
  v2[6] = &unk_21AFEE790;
  v2[7] = &unk_21AFEE7A8;
  v2[8] = &unk_21AFEE7C0;
  v2[9] = &unk_21AFEE790;
  type metadata accessor for URL?();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[10] = v2;
    v2[11] = v0;
    v2[12] = v0;
    v2[13] = &unk_21AFEE790;
    v2[14] = &unk_21AFEE790;
    v2[15] = &unk_21AFEE790;
    v2[16] = &unk_21AFEE790;
    v2[17] = &unk_21AFEE7D8;
    v2[18] = &unk_21AFEE790;
    v2[19] = &unk_21AFEE790;
    v2[20] = MEMORY[0x24BEE0158] + 64;
    v2[21] = v0;
    v2[22] = v0;
    v2[23] = v0;
    v2[24] = v0;
    v2[25] = v0;
    v2[26] = v0;
    v2[27] = v0;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t OUTLINED_FUNCTION_1_51()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_3_49(uint64_t a1)
{
  return CMLDictionary.add(key:value:)(a1);
}

uint64_t OUTLINED_FUNCTION_5_42(uint64_t a1)
{
  return CMLDictionary.add(key:value:)(a1);
}

uint64_t OUTLINED_FUNCTION_6_50()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_7_47()
{
  CMLFeatureValue.__allocating_init(_:)();
}

uint64_t OUTLINED_FUNCTION_8_48(uint64_t a1)
{
  return CMLDictionary.add(key:value:)(a1);
}

uint64_t OUTLINED_FUNCTION_9_42()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_40(uint64_t a1)
{
  return CMLDictionary.add(key:value:)(a1);
}

void OUTLINED_FUNCTION_12_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t *v30;

  specialized handling<A, B>(_:_:)(*v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

unint64_t OUTLINED_FUNCTION_14_36()
{
  return 0xD000000000000014;
}

uint64_t OUTLINED_FUNCTION_16_36()
{
  return swift_initStackObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v8 = (char *)&loc_21AF31AE8 + 4 * byte_21AFEE7F0[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
      case 1:
        v3 = type metadata accessor for URL();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
        break;
      case 2:
        return swift_bridgeObjectRelease();
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      case 4:
        v4 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      default:
        return result;
    }
  }
  return result;
}

_QWORD *initializeWithCopy for MLSoundClassifier.ModelParameters.ValidationData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v7 = (char *)&loc_21AF31E38 + 4 * byte_21AFEE7FA[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithCopy for MLSoundClassifier.ModelParameters.ValidationData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v7 = (char *)&loc_21AF32080 + 4 * byte_21AFEE7FF[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLSoundClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

char *initializeWithTake for MLSoundClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for MLSoundClassifier.DataSource();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v8 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      v10 = v9[20];
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v13;
      v11[32] = v12[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_9;
      }
      v14 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for MLSoundClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for MLSoundClassifier.DataSource();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        v10 = v9[20];
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        v11[32] = v12[32];
      }
      else
      {
        if (EnumCaseMultiPayload > 1)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          goto LABEL_10;
        }
        v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      }
      swift_storeEnumTagMultiPayload();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for MLSoundClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLSoundClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.ValidationData.splitFeatures(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional result;

  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_46_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_51(v3, v5);
  v4 = (char *)sub_21AF326AC + 4 * byte_21AFEE804[OUTLINED_FUNCTION_14_34()];
  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AF326AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized Collection.randomSplit<A, B>(strategy:)(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 17) << 8), v0);
  return v2;
}

uint64_t outlined init with take of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.ValidationData.splitFiles(trainingData:)(Swift::OpaquePointer trainingData)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::tuple_training_OpaquePointer_validation_OpaquePointer_optional result;

  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_46_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v1, v6 - v5);
  v7 = (char *)sub_21AF328D0 + 4 * byte_21AFEE808[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AF328D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized Collection.randomSplit<A, B>(strategy:)(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 17) << 8), v0);
  return v2;
}

void MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_46_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_2_51(v2, v4);
  v3 = (char *)sub_21AF32AEC + 4 * byte_21AFEE80C[OUTLINED_FUNCTION_14_34()];
  __asm { BR              X10 }
}

uint64_t sub_21AF32AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with take of MLSoundClassifier.DataSource(v2, v1);
  MLSoundClassifier.DataSource.validate(modelParameters:)(v0);
  return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
}

uint64_t OUTLINED_FUNCTION_2_51@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_9_43(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v2, a2);
}

uint64_t Dictionary<>.updateValue(tensor:forKey:prefix:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;

  v10 = type metadata accessor for TensorShape();
  v28 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Dictionary<>.getTensorNames(forKey:prefix:)(a2, a3, a4, a5);
  v15 = v14;
  v27[3] = v16;
  v27[4] = v17;
  Tensor.shape.getter();
  lazy protocol witness table accessor for type TensorShape and conformance TensorShape();
  v18 = dispatch thunk of Collection.count.getter();
  if (!v18)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    swift_bridgeObjectRelease();
    Tensor.scalars<A>(as:)();
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return swift_bridgeObjectRelease();
  }
  v19 = v18;
  v30 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0);
  v20 = v30;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v19 & 0x8000000000000000) == 0)
  {
    v27[0] = v13;
    v27[1] = v15;
    v27[2] = a1;
    do
    {
      v22 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v24 = *v23;
      v22(v29, 0);
      v30 = v20;
      v26 = *(_QWORD *)(v20 + 16);
      v25 = *(_QWORD *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v20 = v30;
      }
      *(_QWORD *)(v20 + 16) = v26 + 1;
      *(double *)(v20 + 8 * v26 + 32) = (double)v24;
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
    }
    while (v19);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t Dictionary<>.getTensorNames(forKey:prefix:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  if (a4)
  {
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = a1;
    v7._object = a2;
    String.append(_:)(v7);
    a1 = a3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 0x65706168732ELL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  return a1;
}

void Dictionary<>.tensor(forKey:prefix:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v38;
  _QWORD *v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Dictionary<>.getTensorNames(forKey:prefix:)(a1, a2, a3, a4);
  v18 = v17;
  v21 = specialized Dictionary.subscript.getter(v19, v20, a5);
  swift_bridgeObjectRelease();
  if (v21 && (v22 = specialized Dictionary.subscript.getter(v16, v18, a5), swift_bridgeObjectRelease(), v22))
  {
    v23 = *(_QWORD *)(v21 + 16);
    if (!v23 || ((v24 = *(double *)(v21 + 32), v25 = round(v24), v24 >= 1.0) ? (v26 = v25 == v24) : (v26 = 0), !v26))
    {
LABEL_8:
      swift_bridgeObjectRelease();
      v27 = specialized _arrayForceCast<A, B>(_:)(v21);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      static MLCreateError.invalidTensorDimensions(value:)(v27, v28);
      swift_bridgeObjectRelease();
LABEL_9:
      swift_willThrow(v29);
      return;
    }
    if (v23 == 1)
    {
LABEL_21:
      v53 = a6;
      v54 = v22;
      v55 = v6;
      v56 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      v38 = 0;
      v39 = v56;
      do
      {
        v40 = *(double *)(v21 + 8 * v38 + 32);
        if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v40 <= -9.22337204e18)
          goto LABEL_38;
        if (v40 >= 9.22337204e18)
          goto LABEL_39;
        v56 = v39;
        v42 = v39[2];
        v41 = v39[3];
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          v39 = v56;
        }
        ++v38;
        v39[2] = v42 + 1;
        v39[v42 + 4] = (uint64_t)v40;
      }
      while (v23 != v38);
      swift_bridgeObjectRelease();
      v43 = v39[2];
      v44 = v54;
      if (v43)
      {
        v45 = v39 + 4;
        v46 = 1;
        v47 = v53;
        while (1)
        {
          v48 = *v45++;
          v49 = v46 * v48;
          if ((unsigned __int128)(v46 * (__int128)v48) >> 64 != (v46 * v48) >> 63)
            goto LABEL_40;
          v46 = v49;
          if (!--v43)
            goto LABEL_34;
        }
      }
      v49 = 1;
      v47 = v53;
LABEL_34:
      if (*(_QWORD *)(v54 + 16) == v49)
      {
        MEMORY[0x220758C74](v39);
        v50 = type metadata accessor for TensorShape();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v50);
        Array<A>.floatTensor(shape:)((uint64_t)v15, v44, v47);
        swift_bridgeObjectRelease();
        outlined destroy of TensorShape?((uint64_t)v15);
        v30 = type metadata accessor for Tensor();
        v31 = v47;
        v32 = 0;
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      swift_release();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      v29 = static MLCreateError.invalidTensorSize(expected:actual:)(v51);
      goto LABEL_9;
    }
    v33 = 5;
    while (1)
    {
      v34 = v33 - 3;
      if (__OFADD__(v33 - 4, 1))
        break;
      v35 = *(double *)(v21 + 8 * v33);
      v36 = round(v35);
      if (v35 < 1.0 || v36 != v35)
        goto LABEL_8;
      ++v33;
      if (v34 == v23)
        goto LABEL_21;
    }
LABEL_41:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = type metadata accessor for Tensor();
    v31 = a6;
    v32 = 1;
LABEL_11:
    __swift_storeEnumTagSinglePayload(v31, v32, 1, v30);
  }
}

double static MLCreateError.invalidTensorDimensions(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  Swift::String v5;
  double result;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
  v5._countAndFlagsBits = MEMORY[0x22075AAA4](a1, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = 0xD00000000000001BLL;
  *(_QWORD *)(a2 + 8) = 0x800000021AFF7050;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

double static MLCreateError.invalidTensorSize(expected:actual:)@<D0>(uint64_t a1@<X8>)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  double result;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = OUTLINED_FUNCTION_0_56();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6C6175746361202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  v4._countAndFlagsBits = OUTLINED_FUNCTION_0_56();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 0xD00000000000001ELL;
  *(_QWORD *)(a1 + 8) = 0x800000021AFF7030;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type TensorShape and conformance TensorShape()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TensorShape and conformance TensorShape;
  if (!lazy protocol witness table cache variable for type TensorShape and conformance TensorShape)
  {
    v1 = type metadata accessor for TensorShape();
    result = MEMORY[0x22075B938](MEMORY[0x24BE6B910], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape);
  }
  return result;
}

uint64_t outlined destroy of TensorShape?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_56()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  _QWORD *v20;

  v7 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  specialized Collection<>.firstIndex(of:)(a2, (uint64_t)a3, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(53);
    v17._countAndFlagsBits = 0x6320746567726154;
    v17._object = (void *)0xEF27206E6D756C6FLL;
    String.append(_:)(v17);
    v18._countAndFlagsBits = a2;
    v18._object = a3;
    String.append(_:)(v18);
    v19._object = (void *)0x800000021AFF7070;
    v19._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v19);
    v16 = 0xE000000000000000;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v15 = 0;
    goto LABEL_8;
  }
  v11 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = v20;
  }
  v12 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2];
  if (v11 >= v12)
  {
    __break(1u);
    return;
  }
  v13 = v12 - 1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2 * v11 + 6], v12 - 1 - v11, (char *)&MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2 * v11 + 4]);
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2] = v13;
  swift_bridgeObjectRelease();
  v14 = static _FeatureUtilities.selectFeatures(from:select:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n, a4);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v15 = 0xD000000000000038;
    v16 = 0x800000021AFF70A0;
LABEL_8:
    *(_QWORD *)(v15 + 8) = v16;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_BYTE *)(v15 + 48) = 1;
    swift_willThrow(0.0);
  }
}

uint64_t static _FeatureUtilities.selectFeatures(from:select:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!a2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v4 = a1[2];
  v28 = a2 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v7 = (uint64_t *)(v28 + 16 * v5);
    v8 = *v7;
    v9 = (void *)v7[1];
    if (v4)
    {
      v10 = a1[4] == v8 && a1[5] == (_QWORD)v9;
      if (v10 || (OUTLINED_FUNCTION_0_57() & 1) != 0)
      {
LABEL_10:
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_2_52();
          v6 = v26;
        }
        v11 = *(_QWORD *)(v6 + 16);
        if (v11 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          OUTLINED_FUNCTION_2_52();
          v6 = v27;
        }
        *(_QWORD *)(v6 + 16) = v11 + 1;
        v12 = v6 + 16 * v11;
        *(_QWORD *)(v12 + 32) = v8;
        *(_QWORD *)(v12 + 40) = v9;
        goto LABEL_17;
      }
      if (v4 != 1)
      {
        if (a1[6] == v8 && a1[7] == (_QWORD)v9)
          goto LABEL_10;
        result = OUTLINED_FUNCTION_0_57();
        if ((result & 1) != 0)
          goto LABEL_10;
        if (v4 != 2)
          break;
      }
    }
LABEL_16:
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(66);
    v13._countAndFlagsBits = 0x27206E6D756C6F43;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = v8;
    v14._object = v9;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000021AFF70E0;
    String.append(_:)(v15);
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    type metadata accessor for OS_os_log();
    v18 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v19 + 56) = v17;
    *(_QWORD *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_17:
    if (++v5 == v3)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  v22 = a1 + 9;
  v23 = 2;
  while (1)
  {
    v24 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (*(v22 - 1) == v8 && *v22 == (_QWORD)v9)
      goto LABEL_10;
    result = OUTLINED_FUNCTION_0_57();
    if ((result & 1) != 0)
      goto LABEL_10;
    v22 += 2;
    ++v23;
    if (v24 == v4)
      goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_57()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_2_52()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static MLStyleTransfer.__Defaults.maxIterations.getter()
{
  return 500;
}

uint64_t static MLStyleTransfer.__Defaults.textelDensity.getter()
{
  return 256;
}

uint64_t static MLStyleTransfer.__Defaults.styleStrength.getter()
{
  return 5;
}

uint64_t static MLStyleTransfer.__Constants.textelDensityRange.getter()
{
  return 64;
}

uint64_t static MLStyleTransfer.__Constants.styleStrengthRange.getter()
{
  return 1;
}

uint64_t static MLStyleTransfer.__Constants.inferenceHeight.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceWidth.getter()
{
  return 512;
}

uint64_t static MLStyleTransfer.__Constants.inferenceChannels.getter()
{
  return 3;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Constants()
{
  return &type metadata for MLStyleTransfer.__Constants;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.__Defaults()
{
  return &type metadata for MLStyleTransfer.__Defaults;
}

id specialized EventCollector.getLast<A>(metric:type:)()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = *(id *)(v0 + 16);
  v2 = specialized NSLocking.withLock<A>(_:)((void (*)(uint64_t *__return_ptr, id))partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:));

  return v2;
}

uint64_t specialized NSLocking.withLock<A>(_:)(void (*a1)(uint64_t *__return_ptr, id))
{
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  a1(&v5, objc_msgSend(v1, sel_lock));
  OUTLINED_FUNCTION_68_15(0x1F2626000);
  if (!v2)
    v3 = v5;
  return v3 & 1;
}

id specialized NSLocking.withLock<A>(_:)(void (*a1)(uint64_t *__return_ptr, id))
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  a1(&v4, objc_msgSend(v1, sel_lock));
  if (v2)
    return objc_msgSend(v1, sel_unlock);
  objc_msgSend(v1, sel_unlock);
  return (id)v4;
}

id specialized NSLocking.withLock<A>(_:)(void (*a1)(id))
{
  void *v1;

  a1(objc_msgSend(v1, sel_lock));
  return objc_msgSend(v1, sel_unlock);
}

uint64_t specialized closure #1 in EventCollector.getLast<A>(metric:type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE v15[16];
  _OWORD *v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Event?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 24);
  v18 = a2;
  *(_QWORD *)&v20[0] = v7;
  swift_bridgeObjectRetain();
  v8 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:), (uint64_t)v17, v7);
  v16 = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_18CreateMLComponents5EventVTg5((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), v8, v9 & 1, v6);
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for Event();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v10) == 1)
  {
    outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for Event?);
    memset(v20, 0, sizeof(v20));
  }
  else
  {
    v11 = Event.metrics.getter();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
    specialized Dictionary.subscript.getter(v11, v20);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  v12 = swift_dynamicCast();
  v13 = v19;
  if (!v12)
    return 0;
  return v13;
}

uint64_t TreeRegressorTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_42_7(v3);
  DataFrame.init()();
  v4 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_42_7(v4);
  v5 = OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_42_7(v5);
  v6 = OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_42_7(v6);
  OUTLINED_FUNCTION_57_14(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  v7 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = v8;
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t *TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;

  OUTLINED_FUNCTION_8_1();
  v79 = v2;
  v80 = v3;
  v71 = v1;
  v72 = v4;
  v76 = v6;
  v77 = v5;
  v70 = (char *)v7;
  v78 = v8;
  v10 = v9;
  v12 = v11;
  v68 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v67 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v65 = v16;
  v17 = OUTLINED_FUNCTION_72_10();
  v74 = *(_QWORD *)(v17 - 8);
  v75 = v17;
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v69 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  v61 = v20;
  v21 = OUTLINED_FUNCTION_93();
  v73 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (int *)OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_50();
  v28 = v26 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v64 = (uint64_t)&v58 - v30;
  v62 = (char *)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_154((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, 1);
  DataFrame.init()();
  __swift_storeEnumTagSinglePayload((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, 1, 1, v21);
  v31 = (uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  v63 = OUTLINED_FUNCTION_124_0();
  __swift_storeEnumTagSinglePayload(v31, 1, 1, v63);
  v32 = OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_42_7(v32);
  OUTLINED_FUNCTION_57_14(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  v33 = (char *)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v33[16] = v34;
  v66 = v10;
  v35 = v71;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v12, v10, v78, (uint64_t)v70);
  v71 = v35;
  if (v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v72, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_49_19();
    OUTLINED_FUNCTION_60_14(v77);
    v37 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v37(v12, v21);
    outlined destroy of URL?((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    v37((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData, v21);
    OUTLINED_FUNCTION_60_14((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData);
    outlined destroy of URL?((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
    outlined destroy of URL?((uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
    OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
    OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v68 = v36;
    swift_bridgeObjectRelease();
    v38 = v73;
    v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
    v60 = v12;
    OUTLINED_FUNCTION_85_6((uint64_t)v23, v12, v39);
    v40 = v61;
    outlined init with copy of URL?(v77, v61, &demangling cache variable for type metadata for DataFrame?);
    v41 = v75;
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
    v70 = v23;
    v43 = v74;
    v42(v69, v76, v75);
    v44 = v28 + v24[5];
    v59 = v21;
    __swift_storeEnumTagSinglePayload(v44, 1, 1, v21);
    OUTLINED_FUNCTION_85_6(v28, (uint64_t)v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
    v45 = (uint64_t)v78;
    OUTLINED_FUNCTION_31_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v40, v44, &demangling cache variable for type metadata for DataFrame?);
    v46 = (uint64_t *)(v28 + v24[6]);
    v47 = v66;
    *v46 = v66;
    v46[1] = v45;
    v48 = v69;
    *(_QWORD *)(v28 + v24[7]) = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v28 + v24[8], v48, v41);
    v49 = v64;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v28, v64, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    v50 = v65;
    outlined init with copy of MLTrainingSessionParameters(v49, v65, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    OUTLINED_FUNCTION_154(v50, 0);
    v51 = (uint64_t)v62;
    OUTLINED_FUNCTION_4_28();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v50, v51, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    swift_endAccess();
    v52 = v72;
    outlined init with copy of MLTrainingSessionParameters(v72, (uint64_t)v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    v53 = *(_QWORD *)(v49 + v24[7]);
    OUTLINED_FUNCTION_23_3();
    BoostedTreeConfiguration.init()();
    v54 = v67;
    TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v47, (uint64_t)v78, v53, v48, v67);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v52, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_49_19();
    outlined destroy of URL?(v77, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v60, v59);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v49, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v63);
    v55 = OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_60_16(v55, v56, &demangling cache variable for type metadata for TreeRegressor?);
    swift_endAccess();
  }
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeRegressorTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  v43 = OUTLINED_FUNCTION_72_10();
  v46 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_208();
  v45 = v5;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)v41 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v42 = (uint64_t *)v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v41 - v11;
  OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v14 = (int *)OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_161();
  v16 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_54_17(v16);
  v17 = OUTLINED_FUNCTION_128(v1, 1, (uint64_t)v14);
  if (v18)
  {
    OUTLINED_FUNCTION_93_1(v17, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    goto LABEL_6;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  v19 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_4_28();
  v20 = OUTLINED_FUNCTION_93();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v19, v3, v20);
  OUTLINED_FUNCTION_7_21();
  v21 = v3 + v14[5];
  v22 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  OUTLINED_FUNCTION_4_28();
  outlined assign with copy of DataFrame?(v21, v22);
  OUTLINED_FUNCTION_7_21();
  v23 = (uint64_t *)(v3 + v14[6]);
  v24 = *v23;
  v25 = v23[1];
  v26 = *(_QWORD *)(v3 + v14[7]);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_189();
  v27 = (uint64_t)v44;
  BoostedTreeConfiguration.init()();
  TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)(v24, v25, v26, v27, v12);
  v28 = OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_35_21((uint64_t)v12);
  v41[0] = v0;
  v29 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_4_28();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v12, v29, &demangling cache variable for type metadata for TreeRegressor?);
  v30 = v3 + v14[8];
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v32 = v43;
  v31(v45, v30, v43);
  OUTLINED_FUNCTION_128(v29, 1, v28);
  if (v18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v33 = v45;
  v34 = OUTLINED_FUNCTION_65_17();
  ((void (*)(uint64_t))v31)(v34);
  BaseTreeRegressor.configuration.setter();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v33, v32);
  OUTLINED_FUNCTION_7_21();
  v35 = v42;
  outlined init with copy of URL?(v29, (uint64_t)v42, &demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_128((uint64_t)v35, 1, v28);
  if (!v18)
  {
    v37 = *v35;
    v36 = v35[1];
    OUTLINED_FUNCTION_42_2();
    OUTLINED_FUNCTION_23_3();
    BaseTreeRegressor.makeTransformer()();
    *v2 = v37;
    v2[1] = v36;
    v2[3] = 0;
    v2[4] = 0;
    v2[2] = 0;
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    OUTLINED_FUNCTION_77_5(v38, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
    OUTLINED_FUNCTION_35_21((uint64_t)v2);
    v39 = OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_60_16(v39, v40, &demangling cache variable for type metadata for TreeRegressorModel?);
    OUTLINED_FUNCTION_7_21();
    OUTLINED_FUNCTION_7();
    return;
  }
LABEL_7:
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeRegressorTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_8_1();
  v30[0] = v2;
  v32 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v30[1] = v7;
  OUTLINED_FUNCTION_72_10();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v30[2] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v30[4] = v11;
  MEMORY[0x24BDAC7A8](v12);
  v30[3] = (char *)v30 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_64();
  v20 = v19;
  OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_161();
  v22 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_14_5();
  v31 = v1;
  v24 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v24, v4, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_128(v4, 1, v22);
  if (v25)
  {
    outlined destroy of URL?(v4, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    JUMPOUT(0x21AF34B7CLL);
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v4, v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  specialized BidirectionalCollection.last.getter(v32, (uint64_t)v16);
  v26 = OUTLINED_FUNCTION_128((uint64_t)v16, 1, v17);
  if (!v25)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v16, v20, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_93_1(v26, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  v28 = OUTLINED_FUNCTION_18_0(v27, 0xD00000000000001DLL);
  OUTLINED_FUNCTION_77_5(v28, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall TreeRegressorTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    v4 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters;
    v3 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    v3 = 0;
  }
  v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t TreeRegressorTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[19] = a1;
  v2[20] = v1;
  v3 = type metadata accessor for MetricsKey();
  v2[21] = v3;
  v2[22] = *(_QWORD *)(v3 - 8);
  v2[23] = OUTLINED_FUNCTION_0();
  v4 = type metadata accessor for AnyColumn();
  v2[24] = v4;
  v2[25] = *(_QWORD *)(v4 - 8);
  v2[26] = OUTLINED_FUNCTION_0();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v2[27] = v5;
  v2[28] = *(_QWORD *)(v5 - 8);
  v2[29] = OUTLINED_FUNCTION_0();
  v6 = OUTLINED_FUNCTION_93();
  v2[30] = v6;
  v2[31] = *(_QWORD *)(v6 - 8);
  v2[32] = OUTLINED_FUNCTION_25();
  v2[33] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  v2[34] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[35] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[36] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

void TreeRegressorTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumTagSinglePayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v32;
  uint64_t ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  void (*v55)(uint64_t, uint64_t);
  _QWORD *v56;
  double v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  double v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  type metadata accessor for TreeRegressorModel();
  v3 = OUTLINED_FUNCTION_84_3();
  v79 = v4;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, v5, v4);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (EnumTagSinglePayload == 1)
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)(v0 + 280);
  OUTLINED_FUNCTION_29_0();
  v8 = OUTLINED_FUNCTION_3_9();
  outlined init with copy of URL?(v8, v9, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  type metadata accessor for PersistentParametersForTreeBasedMethods();
  v10 = OUTLINED_FUNCTION_84_3();
  v13 = __swift_getEnumTagSinglePayload(v10, v11, v12);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (v13 == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters;
  v16 = type metadata accessor for MLTrainingSessionParameters();
  v17 = *(_QWORD *)(v15 + *(int *)(v16 + 20));
  v18 = v14 + v17;
  if (__OFADD__(v14, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = *(_QWORD *)(v15 + *(int *)(v16 + 28));
  if (__OFSUB__(v19, v14))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v17 >= v19 - v14)
    v20 = v19 - v14;
  else
    v20 = *(_QWORD *)(v15 + *(int *)(v16 + 20));
  type metadata accessor for EventCollector();
  swift_allocObject();
  EventCollector.init()();
  if (v20 < 0)
    goto LABEL_27;
  v66 = v19;
  v67 = v18;
  v68 = v20;
  if (!v20)
  {
LABEL_18:
    v51 = *(_QWORD *)(v0 + 176);
    v50 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 168);
    static MetricsKey.trainingMaximumError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v54 = v53;
    v55 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    v55(v50, v52);
    v56 = (_QWORD *)MEMORY[0x24BEE4B00];
    if ((v54 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v57 = OUTLINED_FUNCTION_78_10();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(8, v58, v57);
      OUTLINED_FUNCTION_74_13();
    }
    v59 = *(_QWORD *)(v0 + 184);
    v60 = *(_QWORD *)(v0 + 168);
    static MetricsKey.trainingError.getter();
    specialized EventCollector.getLast<A>(metric:type:)();
    v62 = v61;
    v55(v59, v60);
    if ((v62 & 1) == 0)
    {
      OUTLINED_FUNCTION_108_2();
      v63 = OUTLINED_FUNCTION_78_10();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(7, v64, v63);
      OUTLINED_FUNCTION_74_13();
    }
    v78 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v56);
    swift_release();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    (*(void (**)(uint64_t, uint64_t, BOOL))(v0 + 8))(v68, v78, v67 >= v66);
    return;
  }
  v75 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 248);
  v70 = *(_QWORD *)(v0 + 224);
  v71 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  v73 = v22 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor;
  OUTLINED_FUNCTION_29_0();
  v72 = v23;
  OUTLINED_FUNCTION_29_0();
  v69 = 0x800000021AFF21B0;
  v24 = v20;
  v74 = (uint64_t *)v2;
  v77 = v21;
  while (1)
  {
    outlined init with copy of URL?(v73, *(_QWORD *)(v0 + 272), &demangling cache variable for type metadata for TreeRegressor?);
    v25 = type metadata accessor for TreeRegressor();
    v26 = OUTLINED_FUNCTION_84_3();
    if (__swift_getEnumTagSinglePayload(v26, v27, v25) == 1)
      break;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v21 + 16))(*(_QWORD *)(v0 + 264), v72, *(_QWORD *)(v0 + 240));
    swift_beginAccess();
    if (__swift_getEnumTagSinglePayload(v2, 1, v79) == 1)
      goto LABEL_29;
    v76 = v24;
    if (*(_QWORD *)(v2 + 16))
    {
      swift_retain();
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 264);
      v29 = *(_QWORD *)(v75 + 16);
      v30 = swift_task_alloc();
      *(_QWORD *)(v30 + 16) = v28;
      swift_retain();
      swift_bridgeObjectRetain();
      ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), v30, v29);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_40();
      outlined consume of FeatureVectorizer<Float>.Transformer?(v74[2]);
      v74[2] = ML16ColumnDescriptorVsAE_pTg5;
      v74[3] = 0xD000000000000013;
      v74[4] = v69;
    }
    v32 = OUTLINED_FUNCTION_23_3();
    ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v32);
    OUTLINED_FUNCTION_123();
    *(_QWORD *)(v0 + 144) = ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12C8]);
    DataFrame.selecting<A>(columnNames:)();
    swift_bridgeObjectRelease();
    specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)();
    v34 = *(_QWORD **)(v0 + 272);
    v35 = *(_QWORD *)(v0 + 208);
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v37(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    MEMORY[0x220758A1C](*v34, *(_QWORD *)(v75 + 8));
    AnyColumn.convertedToFloats()();
    v39 = v38;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v35, v36);
    if (!v39)
      goto LABEL_30;
    v2 = (uint64_t)v74;
    BaseTreeRegressor.update(_:features:annotations:eventHandler:)();
    v41 = *(_QWORD *)(v0 + 264);
    v40 = *(_QWORD *)(v0 + 272);
    v42 = *(_QWORD *)(v0 + 240);
    OUTLINED_FUNCTION_31_27(*(_QWORD *)(v0 + 232), v43, v44, v45, v46, v47, v48, v49, v65, v66, v67, v68, v69, v70);
    swift_release();
    swift_endAccess();
    swift_release();
    v37(v41, v42);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v40, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
    --v24;
    v21 = v77;
    if (v76 == 1)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t TreeRegressorTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[25] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[26] = OUTLINED_FUNCTION_0();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v1[27] = v2;
  v1[28] = *(_QWORD *)(v2 - 8);
  v1[29] = OUTLINED_FUNCTION_0();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v1[30] = v3;
  v1[31] = *(_QWORD *)(v3 - 8);
  v1[32] = OUTLINED_FUNCTION_25();
  v1[33] = OUTLINED_FUNCTION_25();
  v1[34] = OUTLINED_FUNCTION_25();
  v1[35] = OUTLINED_FUNCTION_25();
  v4 = OUTLINED_FUNCTION_93();
  v1[36] = v4;
  v1[37] = *(_QWORD *)(v4 - 8);
  v1[38] = OUTLINED_FUNCTION_25();
  v1[39] = OUTLINED_FUNCTION_25();
  v1[40] = OUTLINED_FUNCTION_25();
  v1[41] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v1[42] = OUTLINED_FUNCTION_0();
  v1[43] = type metadata accessor for TreeRegressorModel();
  v1[44] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t EnumTagSinglePayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for TreeRegressorModel?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of URL?(*(_QWORD *)(v0 + 336), &demangling cache variable for type metadata for TreeRegressorModel?);
LABEL_5:
    v83 = 0;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v0 + 200);
  outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 352), (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v5 = v4 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_29_0();
  v6 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v6);
  if ((_DWORD)EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_203(EnumTagSinglePayload, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v5 + *(int *)(v6 + 24));
  v13 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_29_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v13, v10);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_18();
  TreeRegressorModel.applied(to:eventHandler:)(v14);
  v81 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 216);
  v65 = *(_QWORD *)(v0 + 224);
  v79 = *(_QWORD *)(v0 + 208);
  v76 = *(_QWORD *)(v0 + 200);
  v84 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 8);
  ((void (*)(_QWORD))v84)(*(_QWORD *)(v0 + 320));
  DataFrame.subscript.getter();
  *(_QWORD *)(v0 + 160) = 0;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, MEMORY[0x24BDF5F90]);
  v18 = v17;
  OUTLINED_FUNCTION_55_19();
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8);
  v19(v15, v16);
  swift_beginAccess();
  DataFrame.subscript.getter();
  swift_endAccess();
  *(_QWORD *)(v0 + 136) = 0;
  OUTLINED_FUNCTION_55_19();
  v19(v15, v16);
  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, MEMORY[0x24BDF5E58]);
  OUTLINED_FUNCTION_28_30();
  maximumAbsoluteError<A, B, C>(_:_:)();
  OUTLINED_FUNCTION_28_30();
  rootMeanSquaredError<A, B, C>(_:_:)();
  v20 = (void *)OUTLINED_FUNCTION_59_17(*(_QWORD *)(v0 + 152));
  outlined consume of MLRegressorMetrics?(v20, v21, v22);
  v23 = v76 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v23, v79, &demangling cache variable for type metadata for DataFrame?);
  v24 = OUTLINED_FUNCTION_84_3();
  if (__swift_getEnumTagSinglePayload(v24, v25, v81) == 1)
  {
    v26 = *(_QWORD *)(v0 + 328);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 248);
    v31 = *(_QWORD *)(v0 + 208);
    v85 = *(_QWORD *)(v0 + 200);
    OUTLINED_FUNCTION_123();
    v32 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v32(v28, v29);
    v33 = OUTLINED_FUNCTION_65_17();
    ((void (*)(uint64_t))v32)(v33);
    v34 = v84(v26, v27);
    OUTLINED_FUNCTION_203(v34, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    outlined destroy of URL?(v31, &demangling cache variable for type metadata for DataFrame?);
    v35 = v85 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics;
    v36 = *(void **)(v85 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    v37 = *(_QWORD *)(v85 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    v38 = *(_BYTE *)(v35 + 16);
    *(_BYTE *)(v35 + 16) = -1;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 288));
    OUTLINED_FUNCTION_18();
    TreeRegressorModel.applied(to:eventHandler:)(v39);
    v82 = *(_QWORD *)(v0 + 352);
    v80 = *(_QWORD *)(v0 + 328);
    v86 = *(_QWORD *)(v0 + 312);
    v68 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 280);
    v75 = *(_QWORD *)(v0 + 288);
    v77 = *(_QWORD *)(v0 + 272);
    v57 = *(_QWORD *)(v0 + 264);
    v61 = *(_QWORD *)(v0 + 256);
    v72 = *(_QWORD *)(v0 + 248);
    DataFrame.subscript.getter();
    *(_QWORD *)(v0 + 168) = 0;
    v40 = OUTLINED_FUNCTION_79_8();
    OUTLINED_FUNCTION_50_21(v40, v41, v42, v43, v44, v45, v46, v47, v57, v0 + 168, v61, v0 + 176, v0 + 184, v0 + 192, v12, v68, v18, v72, v19);
    DataFrame.subscript.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 176) = 0;
    v48 = v62;
    v49 = OUTLINED_FUNCTION_79_8();
    OUTLINED_FUNCTION_50_21(v49, v50, v51, v52, v53, v54, v55, v56, v58, v60, v62, v63, v64, v66, v67, v69, v71, v73, v74);
    OUTLINED_FUNCTION_30_29();
    maximumAbsoluteError<A, B, C>(_:_:)();
    OUTLINED_FUNCTION_30_29();
    rootMeanSquaredError<A, B, C>(_:_:)();
    OUTLINED_FUNCTION_221_0(v48);
    OUTLINED_FUNCTION_221_0(v59);
    v84(v70, v75);
    v84(v86, v75);
    OUTLINED_FUNCTION_221_0(v77);
    OUTLINED_FUNCTION_221_0(v78);
    v84(v80, v75);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v82, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    v36 = (void *)OUTLINED_FUNCTION_59_17(*(_QWORD *)(v0 + 192));
  }
  outlined consume of MLRegressorMetrics?(v36, v37, v38);
  v83 = 1;
LABEL_6:
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v83, 1);
}

uint64_t TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v17[16];
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_8_1();
  v18 = v2;
  v19 = v3;
  v5 = v4;
  v17[7] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_53_0();
  v13 = *v5;
  v14 = v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v14, (uint64_t)v10, &demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_128((uint64_t)v10, 1, v11);
  if (!v15)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v10, v1, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X9 }
  }
  outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for TreeRegressorModel?);
  return 0;
}

void TreeRegressorTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  v8 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_54_17(v8);
  v9 = OUTLINED_FUNCTION_128(v2, 1, v6);
  if (v10)
  {
    OUTLINED_FUNCTION_93_1(v9, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v11 = 0xD000000000000031;
    *(_QWORD *)(v11 + 8) = 0x800000021AFF4540;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_BYTE *)(v11 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  }
}

void TreeRegressorTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_8_1();
  v28 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - v7;
  v9 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - v18;
  v20 = OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_85_6(v20, v21, v22);
  PersistentParametersForTreeBasedMethods.init(sessionDirectory:)(v11, (uint64_t)v19);
  if (!v1)
  {
    v23 = v28 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v23, (uint64_t)v8, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    OUTLINED_FUNCTION_128((uint64_t)v8, 1, v12);
    if (v24)
    {
      OUTLINED_FUNCTION_60_14((uint64_t)v8);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v19, v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      __swift_storeEnumTagSinglePayload(v5, 0, 1, v12);
      OUTLINED_FUNCTION_4_28();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v5, v23, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      OUTLINED_FUNCTION_7_21();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v8, v16, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      v25 = OUTLINED_FUNCTION_65_17();
      TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(v25, v26);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t TreeRegressorTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24[6];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (int *)OUTLINED_FUNCTION_33_12();
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = OUTLINED_FUNCTION_189();
    v12 = specialized Set.init<A>(_:)(v11);
    v9 = *(_QWORD *)(a2 + v4[7]);
    v13 = OUTLINED_FUNCTION_31_2();
    v14 = specialized Set.init<A>(_:)(v13);
    specialized static Set.== infix(_:_:)(v12, v14);
    v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      static BoostedTreeConfiguration.firstIncompatibility(_:_:)(a1 + v4[8], v24);
      result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v24, (uint64_t)&v25);
      v18 = v26;
      if (!v26)
        return result;
      v19 = v25;
      v6 = v27;
      v7 = v28;
      v9 = v29;
      a2 = v30;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = v19;
    }
    else
    {
      OUTLINED_FUNCTION_189();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
      v6 = OUTLINED_FUNCTION_36_8();
      v7 = v22;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_36_8();
      a2 = v23;
      swift_bridgeObjectRelease();
      String.init<A>(_:)();
      OUTLINED_FUNCTION_238();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = 0xD000000000000011;
      v18 = 0x800000021AFF4520;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_31_2();
    String.init<A>(_:)();
    OUTLINED_FUNCTION_238();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v20 = 0x6320746567726154;
    v18 = 0xED00006E6D756C6FLL;
  }
  *(_QWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v6;
  *(_QWORD *)(v20 + 24) = v7;
  *(_QWORD *)(v20 + 32) = v9;
  *(_QWORD *)(v20 + 40) = a2;
  *(_BYTE *)(v20 + 48) = 3;
  return swift_willThrow(v21);
}

void TreeRegressorTrainingSessionDelegate.deinit()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v1 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_11_1(v1);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_regressor, &demangling cache variable for type metadata for TreeRegressor?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model, &demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics);
  OUTLINED_FUNCTION_33_27(OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t TreeRegressorTrainingSessionDelegate.__deallocating_deinit()
{
  TreeRegressorTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TreeRegressorTrainingSessionDelegate()
{
  return type metadata accessor for TreeRegressorTrainingSessionDelegate();
}

uint64_t type metadata accessor for TreeRegressorTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for TreeRegressorTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TreeRegressorTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for PersistentParametersForTreeBasedMethods?, (void (*)(uint64_t))type metadata accessor for PersistentParametersForTreeBasedMethods);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, (void (*)(uint64_t))MEMORY[0x24BDF5DF0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for TreeRegressor?, (void (*)(uint64_t))type metadata accessor for TreeRegressor);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for TreeRegressorModel?, (void (*)(uint64_t))type metadata accessor for TreeRegressorModel);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance TreeRegressorTrainingSessionDelegate()
{
  TreeRegressorTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance TreeRegressorTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  TreeRegressorTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance TreeRegressorTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)TreeRegressorTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance TreeRegressorTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeRegressorTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance TreeRegressorTrainingSessionDelegate()
{
  return TreeRegressorTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)() & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance TreeRegressorTrainingSessionDelegate(uint64_t a1)
{
  TreeRegressorTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance TreeRegressorTrainingSessionDelegate()
{
  TreeRegressorTrainingSessionDelegate.restore(from:phase:)();
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v7 = *(_QWORD *)(type metadata accessor for Event() - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 72);
    --v4;
    v10 = a3 + ((v8 + 32) & ~v8) + v9 * v4;
    v11 = -v9;
    while (1)
    {
      v12 = a1(v10);
      if (v3 || (v12 & 1) != 0)
        break;
      --v4;
      v10 += v11;
      if (v4 == -1)
        return 0;
    }
  }
  return v4;
}

void specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    v6 = type metadata accessor for MLCheckpoint();
    outlined init with copy of MLTrainingSessionParameters(a2+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    return;
  }
  __break(1u);
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    if (*(_QWORD *)(a2 + 16) > result)
    {
      v6 = type metadata accessor for Event();
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a2+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, v6);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in EventCollector.getLast<A>(metric:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  result = specialized closure #1 in EventCollector.getLast<A>(metric:type:)(a1, a2);
  if (!v3)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v6 & 1;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in EventCollector.getLast<A>(metric:type:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in EventCollector.getLast<A>(metric:type:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

BOOL partial apply for closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)()
{
  return closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)();
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return specialized closure #1 in BidirectionalCollection.last(where:)(*a1, *a2, a3);
}

unint64_t partial apply for specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in BidirectionalCollection.last(where:)(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_31_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a14 + 8))(a1, *(_QWORD *)(v14 + 216));
}

uint64_t OUTLINED_FUNCTION_35_21(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_49_19()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 144) + 8))(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 136));
}

uint64_t OUTLINED_FUNCTION_50_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;

  return a19(v20, v19);
}

void OUTLINED_FUNCTION_54_17(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of URL?(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_55_19()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t OUTLINED_FUNCTION_59_17@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  result = *v1;
  *v1 = v2;
  v1[1] = a1;
  *((_BYTE *)v1 + 16) = 0;
  return result;
}

void OUTLINED_FUNCTION_60_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_64_13()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_65_17()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_68_15@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, (SEL)(a1 + 1041));
}

uint64_t OUTLINED_FUNCTION_74_13()
{
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_78_10()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  *(_QWORD *)(v1 - 96) = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_79_8()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t static BlobsFile.round(_:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result == 0x8000000000000001 && a2 == -1)
    goto LABEL_14;
  v3 = (result - 1) / a2;
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
    goto LABEL_12;
  result = a2 * v5;
  if ((unsigned __int128)(a2 * (__int128)v5) >> 64 != (a2 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

double BlobsFile.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[64];
  uint64_t v10;
  _BYTE v11[56];
  uint64_t v12;

  *(_QWORD *)v11 = 0x200000000;
  memset(&v11[8], 0, 48);
  v12 = 0;
  v8 = xmmword_21AFEE8E0;
  *(_OWORD *)v9 = *(_OWORD *)v11;
  *(_OWORD *)&v9[16] = *(_OWORD *)&v11[16];
  *(_OWORD *)&v9[32] = *(_OWORD *)&v11[32];
  *(_OWORD *)&v9[48] = 0uLL;
  v10 = MEMORY[0x24BEE4AF8];
  specialized Data.append<A>(contentsOf:)();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v8);
  v2 = *(_QWORD *)&v9[56];
  v3 = v10;
  result = *(double *)v9;
  v5 = *(_OWORD *)&v9[8];
  v6 = *(_OWORD *)&v9[24];
  v7 = *(_OWORD *)&v9[40];
  *(_OWORD *)a1 = v8;
  *(double *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 80) = v3;
  return result;
}

Swift::Void __swiftcall BlobsFile.appendBlob(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[48];
  _DWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2 >> 61)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = static BlobsFile.round(_:to:)(4 * v2, 64);
  v5 = Data.count.getter();
  if (__OFADD__(v5, 64))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (((v5 + 64) & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)&v15 = 0x2DEADBEEFLL;
      *((_QWORD *)&v15 + 1) = v4;
      *(_QWORD *)v16 = v5 + 64;
      memset(&v16[8], 0, 40);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = *(_QWORD *)(v1 + 80);
      *(_QWORD *)(v7 + 16) = v6 + 1;
      v8 = (_OWORD *)(v7 + (v6 << 6));
      v9 = *(_OWORD *)v16;
      v8[2] = v15;
      v8[3] = v9;
      v10 = *(_OWORD *)&v16[32];
      v8[4] = *(_OWORD *)&v16[16];
      v8[5] = v10;
      *(_QWORD *)(v1 + 80) = v7;
      LODWORD(v8) = *(_DWORD *)(v1 + 16);
      v11 = __CFADD__((_DWORD)v8, 1);
      v12 = (_DWORD)v8 + 1;
      if (!v11)
      {
        *(_DWORD *)(v1 + 16) = v12;
        v13 = *(_DWORD *)(v1 + 20);
        v14 = *(_QWORD *)(v1 + 72);
        v17[0] = v12;
        v17[1] = v13;
        v18 = *(_OWORD *)(v1 + 24);
        v19 = *(_OWORD *)(v1 + 40);
        v20 = *(_OWORD *)(v1 + 56);
        v21 = v14;
        static BlobsFile.writeHeader(_:to:)((uint64_t)v17, v1);
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(&v15);
        specialized Array.withUnsafeBytes<A>(_:)((uint64_t)a1._rawValue, v1, (uint64_t)&v15, v4);
        return;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t BlobsFile.floatBlob(at:)(unint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  double v3;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 80) + 16) <= a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x21AF36FDCLL);
  }
  if (BlobMetadata.dataType.getter() == 1)
    __asm { BR              X11 }
  lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
  swift_allocError();
  *v2 = 2;
  swift_willThrow(v3);
  return v1;
}

void static BlobsFile.writeHeader(_:to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_21AF3704C()
{
  uint64_t v0;
  uint64_t v1;

  if (BYTE6(v0) <= 0x3FuLL)
    specialized Data.append<A>(contentsOf:)();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v1);
}

uint64_t specialized Data.append<A>(contentsOf:)()
{
  _QWORD *v1;
  __int128 v3[2];
  uint64_t v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of ContiguousBytes?((uint64_t)v3);
    __asm { BR              X12 }
  }
  outlined init with take of BinaryFloatingPoint(v3, (uint64_t)v5);
  v1 = __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MEMORY[0x24BDAC7A8](v1);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
}

void _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSaySfGTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_SaySfG_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n035_s8CreateML9BlobsFileV9floatBlob2atrS16GSi_tKFAFSWXEfU_0V2ML12BlobMetadataVTf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = a1;
  v7 = a2;
  v8 = BYTE2(a2);
  v9 = BYTE3(a2);
  v10 = BYTE4(a2);
  v11 = BYTE5(a2);
  v5 = *(_QWORD *)(a4 + 8);
  v4 = *(_QWORD *)(a4 + 16);
  if (((v5 | v4) & 0x8000000000000000) != 0)
    __break(1u);
  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v6 + v4, v5 >> 2);
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF8CreateML12BlobMetadataV_s5NeverOytTg503_s8F42ML9BlobsFileV10appendBlobyySaySfGFySWXEfU_AD0mN0VTf1nnc_n(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  v5[3] = MEMORY[0x24BEE0F88];
  v5[4] = MEMORY[0x24BDCFB90];
  v5[0] = v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x24BEE0F88]);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
}

uint64_t closure #2 in BlobsFile.appendBlob(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  _QWORD v11[5];

  v11[3] = MEMORY[0x24BEE0F88];
  v11[4] = MEMORY[0x24BDCFB90];
  v11[0] = a1;
  v11[1] = a2;
  __swift_project_boxed_opaque_existential_1(v11, MEMORY[0x24BEE0F88]);
  Data._Representation.append(contentsOf:)();
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  if (a1)
  {
    v10 = a2 - a1;
    if ((unint64_t)(a2 - a1) >= *(_QWORD *)(a4 + 8))
      return result;
  }
  else
  {
    if (!*(_QWORD *)(a4 + 8))
      return result;
    v10 = 0;
  }
  result = a5 - v10;
  if (__OFSUB__(a5, v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  return specialized Data.append<A>(contentsOf:)();
}

uint64_t specialized Array.withUnsafeBytes<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = *(_QWORD *)(result + 16);
  if (!(v4 >> 61))
    return closure #2 in BlobsFile.appendBlob(_:)(result + 32, result + 32 + 4 * v4, a2, a3, a4);
  __break(1u);
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = __DataStorage._bytes.getter();
  if (v6)
  {
    v7 = v6;
    v8 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v8))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v9 = v7 + a1 - v8;
  }
  else
  {
    v9 = 0;
  }
  __DataStorage._length.getter();
  if (!v9)
  {
    v11 = 0;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v11 = v9 + v10;
LABEL_9:
    v12 = *(_QWORD *)(a4 + 8);
    if ((v12 & 0x8000000000000000) == 0)
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v11, v12 >> 2);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_21AF377EC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  v2 = *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48);
  *v0 = *(_QWORD *)v1;
  v0[1] = v2;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

_QWORD *sub_21AF379E4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n((uint64_t)&v7, v3, v2, BYTE6(a1));
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  result = __DataStorage._bytes.getter();
  if (result)
  {
    v7 = result;
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(a1, result))
    {
      v8 = (_OWORD *)(v7 + a1 - result);
      result = __DataStorage._length.getter();
      v9 = a4[1];
      *v8 = *a4;
      v8[1] = v9;
      v10 = a4[3];
      v8[2] = a4[2];
      v8[3] = v10;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

_QWORD *_ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVys8RepeatedVyAEGG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxs9KXEfU_s16hi4Vys8j4Vys5G11VGG_Sit_TG5SwxsAC_pRi_zRi0_zlyAK_SitIsgyrzo_SiTf1nc_n(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a1, a1 + a4);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  if (!result)
    return a5;
  if (!__OFSUB__(a2 - result, a3))
  {
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v6, (_BYTE *)(result + a3), a2 - result - a3, a5, a6);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;

  result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, a3, a4, *(_QWORD *)a5, *(_BYTE *)(a5 + 8));
  if (!v6)
  {
    *(_QWORD *)a6 = result;
    *(_BYTE *)(a6 + 8) = v9;
    *(_QWORD *)(a6 + 16) = v10;
    *(_QWORD *)(a6 + 24) = v11;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t outlined release of Data(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t getEnumTagSinglePayload for BlobsFileError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BlobsFileError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21AF37FC8 + 4 * byte_21AFEE905[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21AF37FFC + 4 * byte_21AFEE900[v4]))();
}

uint64_t sub_21AF37FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF38004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF3800CLL);
  return result;
}

uint64_t sub_21AF38018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF38020);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21AF38024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF3802C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BlobsFileError()
{
  return &type metadata for BlobsFileError;
}

uint64_t destroy for BlobsFile(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BlobsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BlobsFile(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlobsFile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlobsFile()
{
  return &type metadata for BlobsFile;
}

char *initializeBufferWithCopyOfBuffer for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    v10 = *(int *)(v9 + 64);
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    v14 = &a1[v13];
    v15 = &a2[v13];
    if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v13], 1, v7))
    {
      v16 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v8(v14, v15, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v7);
    }
    v18 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
    *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for URL();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(a1 + *(int *)(v5 + 48), v4);
  v6 = a1 + *(int *)(a2 + 24);
  result = __swift_getEnumTagSinglePayload(v6, 1, v4);
  if (!(_DWORD)result)
    return v8(v6, v4);
  return result;
}

char *initializeWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
  v9 = *(int *)(v8 + 64);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    v15 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithCopy for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int EnumTagSinglePayload;
  int v18;
  uint64_t v19;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v6);
  v10 = *(int *)(v9 + 64);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)v12;
  v11[8] = v12[8];
  *(_QWORD *)v11 = v13;
  a1[a3[5]] = a2[a3[5]];
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v14], 1, v6);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v18)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *initializeWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
  v9 = *(int *)(v8 + 64);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    v15 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithTake for MLStyleTransfer.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int EnumTagSinglePayload;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v6);
  v10 = *(int *)(v9 + 64);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v13], 1, v6);
  v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v17)
    {
      v8(v14, v15, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v15, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v6);
LABEL_7:
  v19 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF38A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_14_37() - 8) + 84) == (_DWORD)v3)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v7 = v4;
    return __swift_getEnumTagSinglePayload(v7, v3, v6);
  }
  if ((_DWORD)v3 != 254)
  {
    v6 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    v7 = v4 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v7, v3, v6);
  }
  v8 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 20));
  if (v8 >= 2)
    return v8 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF38AEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = OUTLINED_FUNCTION_14_37();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v10 = v5;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
      return result;
    }
    v9 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    v10 = v5 + *(int *)(a4 + 24);
  }
  return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
}

uint64_t type metadata accessor for MLStyleTransfer.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters;
  if (!type metadata singleton initialization cache for MLStyleTransfer.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.PersistentParameters()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[10];

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v3[4] = v3;
    v3[5] = &unk_21AFEEA00;
    result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      v3[6] = *(_QWORD *)(result - 8) + 64;
      v3[7] = MEMORY[0x24BEE0178] + 64;
      v3[8] = MEMORY[0x24BEE0178] + 64;
      v3[9] = &unk_21AFEEA00;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  int *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  void *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void *v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  char *v72;
  void *v73;
  Class isa;
  id v75;
  id v76;
  void *v77;
  double v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  void *v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;

  v94 = a1;
  v103 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  MEMORY[0x24BDAC7A8](v2);
  v90 = (uint64_t)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v91 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v85 = (char *)&v80 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v80 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v80 - v13;
  v92 = (char *)&v80 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v80 - v16;
  v18 = type metadata accessor for MLStyleTransfer.DataSource(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE0D00];
  v99 = Dictionary.init(dictionaryLiteral:)();
  v89 = v1;
  outlined init with copy of _TablePrinter(v1, (uint64_t)v20, type metadata accessor for MLStyleTransfer.DataSource);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v23 = &v20[*(int *)(v22 + 48)];
  v24 = &v20[*(int *)(v22 + 64)];
  v83 = *(void **)v24;
  HIDWORD(v87) = v24[8];
  v25 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v26 = v20;
  v27 = v4;
  v25(v17, v26, v4);
  v84 = (void (*)(char *, uint64_t, uint64_t))v25;
  v25(v14, v23, v4);
  v88 = v17;
  v28 = URL.path.getter();
  v97 = OUTLINED_FUNCTION_26_31(v28, v29);
  v98 = v30;
  v95 = 0;
  v96 = 0xE000000000000000;
  v79 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_13_44();
  OUTLINED_FUNCTION_5_43();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_30();
  OUTLINED_FUNCTION_123();
  v31 = (void *)OUTLINED_FUNCTION_17_27();
  v33 = v32;
  v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v11, v4);
  v102 = v21;
  v100 = v31;
  v101 = v33;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0x6D695F656C797473, 0xEB00000000656761);
  v35 = URL.path.getter();
  v37 = OUTLINED_FUNCTION_26_31(v35, v36);
  OUTLINED_FUNCTION_24_35(v37, v38);
  v82 = (char *)v79;
  v83 = (void *)v79;
  OUTLINED_FUNCTION_13_44();
  v81 = v79;
  OUTLINED_FUNCTION_5_43();
  OUTLINED_FUNCTION_123();
  v39 = v4;
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v40 = (void *)OUTLINED_FUNCTION_17_27();
  v42 = v41;
  v82 = v11;
  v93 = v34;
  v34(v11, v4);
  v102 = v21;
  v100 = v40;
  v101 = v42;
  OUTLINED_FUNCTION_25_30((uint64_t)&v100, v43, 0x800000021AFF7240);
  if (HIDWORD(v87) != 1)
  {
    v102 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE1E88];
    v100 = v83;
    OUTLINED_FUNCTION_25_30((uint64_t)&v100, v44, 0x800000021AFF72A0);
  }
  v45 = v93;
  v93(v92, v4);
  v45(v88, v4);
  v46 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  v47 = v89;
  v48 = *(_BYTE *)(v89 + v46[5]) == 0;
  v49 = 7237219;
  if (*(_BYTE *)(v89 + v46[5]))
    v49 = 0x6574694C6E6E63;
  v50 = 0xE700000000000000;
  v51 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE0D00];
  v102 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE0D00];
  if (v48)
    v50 = 0xE300000000000000;
  v100 = (id)v49;
  v101 = v50;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0x687469726F676C61, 0xE90000000000006DLL);
  v52 = *(void **)(v47 + v46[7]);
  v53 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE1768];
  v102 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE1768];
  v100 = v52;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0x645F6C6574786574, 0xEE00797469736E65);
  v54 = *(void **)(v47 + v46[8]);
  v102 = v53;
  v100 = v54;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0x74735F656C797473, 0xEE006874676E6572);
  v55 = *(_BYTE *)(v47 + v46[9]) == 0;
  v56 = 1869903201;
  if (*(_BYTE *)(v47 + v46[9]))
    v56 = 7696483;
  v57 = 0xE400000000000000;
  v102 = v51;
  if (!v55)
    v57 = 0xE300000000000000;
  v100 = (id)v56;
  v101 = v57;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0x656369766564, 0xE600000000000000);
  v58 = v90;
  outlined init with copy of _TablePrinter(v47 + v46[6], v90, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if (__swift_getEnumTagSinglePayload(v58, 1, v27) == 1)
  {
    outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(v58);
  }
  else
  {
    v59 = (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BEE0D00];
    v60 = v85;
    v84(v85, v58, v27);
    v100 = (id)URL.path.getter();
    v101 = v61;
    v62 = URL.path.getter();
    OUTLINED_FUNCTION_24_35(v62, v63);
    v86 = v81;
    v87 = v81;
    OUTLINED_FUNCTION_13_44();
    v84 = v59;
    v85 = v64;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    OUTLINED_FUNCTION_123();
    swift_bridgeObjectRelease();
    v65 = v82;
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    v66 = (void *)URL.path.getter();
    v68 = v67;
    v69 = v65;
    v70 = v93;
    v93(v69, v27);
    v102 = v59;
    v100 = v66;
    v101 = v68;
    specialized Dictionary.subscript.setter((uint64_t)&v100, 0x69746164696C6176, 0xEA00000000006E6FLL);
    v71 = v60;
    v39 = v27;
    v70(v71, v27);
  }
  v72 = v91;
  v73 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v100 = 0;
  v75 = objc_msgSend(v73, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v100);

  v76 = v100;
  if (v75)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:)();
    Data.write(to:options:)();
    v93(v72, v39);
    OUTLINED_FUNCTION_22_31();
  }
  else
  {
    v77 = v76;
    _convertNSErrorToError(_:)();

    swift_willThrow(v78);
  }
  OUTLINED_FUNCTION_7();
}

void MLStyleTransfer.PersistentParameters.init(sessionDirectory:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Class isa;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t countAndFlagsBits;
  void (*v32)(uint64_t, uint64_t);
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  CreateML::_MLDevice_optional v50;
  uint64_t v51;
  _OWORD *v52;
  void *object;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  id v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  id v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  __int128 v96;
  uint64_t v97;
  _BYTE v98[32];
  uint64_t v99;

  v93 = a2;
  v99 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v82 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v82 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v82 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v82 - v17;
  URL.appendingPathComponent(_:)();
  v19 = v94;
  v20 = Data.init(contentsOf:options:)();
  v94 = v19;
  if (v19)
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v22(a1, v3);
    v22((uint64_t)v18, v3);
LABEL_19:
    OUTLINED_FUNCTION_7();
    return;
  }
  v86 = v9;
  v87 = v12;
  v85 = v6;
  v88 = v15;
  v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24 = v20;
  v25 = v21;
  v23(v18, v3);
  v26 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v96 = 0;
  v28 = objc_msgSend(v26, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v96);

  v29 = (id)v96;
  if (!v28)
  {
    v38 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow(v39);
    OUTLINED_FUNCTION_22_31();
    v23((char *)a1, v3);
    goto LABEL_19;
  }
  v84 = v4;
  v90 = v25;
  v91 = v3;
  v89 = v24;
  v92 = (void (*)(uint64_t, uint64_t))v23;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v98, (uint64_t)&v96);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v30 = a1;
  if ((OUTLINED_FUNCTION_0_59() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v37 = 0xD000000000000037;
    goto LABEL_12;
  }
  countAndFlagsBits = v95._countAndFlagsBits;
  OUTLINED_FUNCTION_87_3(0x687469726F676C61, 0xE90000000000006DLL, &v96);
  v32 = v92;
  if (!v97)
  {
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_6_51();
LABEL_15:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v41 = 0xD000000000000044;
LABEL_16:
    OUTLINED_FUNCTION_18_0(v40, v41);
    OUTLINED_FUNCTION_8_49();
    v42 = v30;
    v43 = v91;
LABEL_17:
    v32(v42, v43);
    goto LABEL_18;
  }
  if ((OUTLINED_FUNCTION_0_59() & 1) == 0)
  {
    OUTLINED_FUNCTION_123();
    goto LABEL_15;
  }
  v33 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.PersistentParameters.init(sessionDirectory:), v95);
  OUTLINED_FUNCTION_10_3();
  if (v33)
  {
    v34 = (uint64_t)v88;
    v35 = v93;
    if (v33 != 1)
    {
      OUTLINED_FUNCTION_123();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      v37 = 0xD000000000000049;
LABEL_12:
      OUTLINED_FUNCTION_18_0(v36, v37);
      OUTLINED_FUNCTION_8_49();
      v92(v30, v91);
LABEL_18:
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
      goto LABEL_19;
    }
  }
  else
  {
    v34 = (uint64_t)v88;
    v35 = v93;
  }
  v44 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  *(_BYTE *)(v35 + v44[5]) = v33;
  OUTLINED_FUNCTION_87_3(0x645F6C6574786574, 0xEE00797469736E65, &v96);
  if (v97)
  {
    v45 = OUTLINED_FUNCTION_0_59();
    v32 = v92;
    if (v45)
      v46 = v95._countAndFlagsBits;
    else
      v46 = 256;
  }
  else
  {
    OUTLINED_FUNCTION_6_51();
    v46 = 256;
    v32 = v92;
  }
  *(_QWORD *)(v35 + v44[7]) = v46;
  v47 = OUTLINED_FUNCTION_23_33();
  OUTLINED_FUNCTION_87_3(v47 & 0xFFFFFFFFFFFFLL | 0x7473000000000000, 0xEE006874676E6572, v48);
  if (v97)
  {
    if (OUTLINED_FUNCTION_0_59())
    {
      v49 = v95._countAndFlagsBits;
      goto LABEL_31;
    }
  }
  else
  {
    OUTLINED_FUNCTION_6_51();
  }
  v49 = 5;
LABEL_31:
  *(_QWORD *)(v35 + v44[8]) = v49;
  OUTLINED_FUNCTION_87_3(0x656369766564, 0xE600000000000000, &v96);
  if (v97)
  {
    if ((OUTLINED_FUNCTION_0_59() & 1) != 0)
    {
      v50.value = _MLDevice.init(rawValue:)(v95).value & 1;
      goto LABEL_36;
    }
  }
  else
  {
    OUTLINED_FUNCTION_6_51();
  }
  v50.value = CreateML__MLDevice_auto;
LABEL_36:
  *(CreateML::_MLDevice_optional *)(v35 + v44[9]) = v50;
  v51 = OUTLINED_FUNCTION_23_33();
  OUTLINED_FUNCTION_87_3(v51 & 0xFFFFFFFFFFFFLL | 0x6D69000000000000, 0xEB00000000656761, v52);
  if (!v97)
  {
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_6_51();
LABEL_42:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v41 = 0xD000000000000039;
    goto LABEL_16;
  }
  if ((OUTLINED_FUNCTION_0_59() & 1) == 0)
  {
    OUTLINED_FUNCTION_123();
    goto LABEL_42;
  }
  v82[1] = v44;
  v54 = v95._countAndFlagsBits;
  object = v95._object;
  v83 = (id)objc_opt_self();
  v55 = objc_msgSend(v83, sel_defaultManager);
  v56 = (void *)MEMORY[0x22075A8AC](v54, object);
  LODWORD(v88) = OUTLINED_FUNCTION_10_42((uint64_t)v56, sel_fileExistsAtPath_);

  if ((_DWORD)v88)
  {
    OUTLINED_FUNCTION_7_48();
    OUTLINED_FUNCTION_12_0();
    v32 = v92;
  }
  else
  {
    v88 = (char *)countAndFlagsBits;
    v57 = v87;
    OUTLINED_FUNCTION_7_48();
    OUTLINED_FUNCTION_12_0();
    URL.path.getter();
    OUTLINED_FUNCTION_21_33();
    OUTLINED_FUNCTION_10_3();
    v32 = v92;
    v92((uint64_t)v57, v91);
  }
  OUTLINED_FUNCTION_87_3(0xD000000000000011, 0x800000021AFF7240, &v96);
  if (!v97)
  {
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_6_51();
LABEL_50:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v64, 0xD00000000000003FLL);
    OUTLINED_FUNCTION_8_49();
    v65 = v91;
    OUTLINED_FUNCTION_24_3(v30);
    v42 = v34;
    v43 = v65;
    goto LABEL_17;
  }
  v58 = OUTLINED_FUNCTION_0_59();
  if ((v58 & 1) == 0)
  {
    OUTLINED_FUNCTION_123();
    goto LABEL_50;
  }
  v60 = v95._countAndFlagsBits;
  v59 = (uint64_t)v95._object;
  v61 = OUTLINED_FUNCTION_27_37(v58, sel_defaultManager);
  v62 = (void *)MEMORY[0x22075A8AC](v60, v59);
  v63 = OUTLINED_FUNCTION_10_42((uint64_t)v62, sel_fileExistsAtPath_);

  if (v63)
  {
    OUTLINED_FUNCTION_7_48();
    OUTLINED_FUNCTION_12_0();
  }
  else
  {
    v66 = v87;
    OUTLINED_FUNCTION_7_48();
    OUTLINED_FUNCTION_12_0();
    URL.path.getter();
    OUTLINED_FUNCTION_21_33();
    OUTLINED_FUNCTION_10_3();
    v92((uint64_t)v66, v91);
  }
  OUTLINED_FUNCTION_87_3(0xD000000000000011, 0x800000021AFF72A0, &v96);
  if (!v97)
  {
    OUTLINED_FUNCTION_6_51();
    goto LABEL_57;
  }
  if ((OUTLINED_FUNCTION_0_59() & 1) == 0)
  {
LABEL_57:
    v67 = 0;
    v68 = 1;
LABEL_58:
    OUTLINED_FUNCTION_87_3(0x69746164696C6176, 0xEA00000000006E6FLL, &v96);
    OUTLINED_FUNCTION_123();
    LODWORD(v88) = v68;
    if (v97)
    {
      v69 = OUTLINED_FUNCTION_0_59();
      if ((v69 & 1) != 0)
      {
        v82[0] = v67;
        v59 = v95._countAndFlagsBits;
        v70 = v95._object;
        v71 = OUTLINED_FUNCTION_27_37(v69, sel_defaultManager);
        v72 = (void *)MEMORY[0x22075A8AC](v59, v70);
        v73 = OUTLINED_FUNCTION_10_42((uint64_t)v72, sel_fileExistsAtPath_);

        if (v73)
        {
          v74 = (uint64_t)v85;
          OUTLINED_FUNCTION_18_30();
          OUTLINED_FUNCTION_8_49();
          OUTLINED_FUNCTION_123();
          v92(v30, v91);
        }
        else
        {
          v76 = (uint64_t)v87;
          OUTLINED_FUNCTION_18_30();
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_17_27();
          v74 = (uint64_t)v85;
          OUTLINED_FUNCTION_21_33();
          OUTLINED_FUNCTION_10_3();
          OUTLINED_FUNCTION_8_49();
          OUTLINED_FUNCTION_24_3(v30);
          OUTLINED_FUNCTION_24_3(v76);
        }
        v67 = v82[0];
        OUTLINED_FUNCTION_16_37();
        v78 = v59 + v77;
        OUTLINED_FUNCTION_20_31(v59 + v77, v74);
        OUTLINED_FUNCTION_154(v78, 0);
        goto LABEL_67;
      }
      OUTLINED_FUNCTION_8_49();
    }
    else
    {
      OUTLINED_FUNCTION_8_49();
      OUTLINED_FUNCTION_6_51();
    }
    OUTLINED_FUNCTION_24_3(v30);
    OUTLINED_FUNCTION_16_37();
    OUTLINED_FUNCTION_154(v59 + v75, 1);
LABEL_67:
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v80 = v59 + *(int *)(v79 + 48);
    v81 = v59 + *(int *)(v79 + 64);
    OUTLINED_FUNCTION_20_31(v59, v34);
    OUTLINED_FUNCTION_20_31(v80, (uint64_t)v86);
    *(_QWORD *)v81 = v67;
    *(_BYTE *)(v81 + 8) = (_BYTE)v88;
    goto LABEL_19;
  }
  v67 = v95._countAndFlagsBits;
  if ((v95._countAndFlagsBits & 0x8000000000000000) == 0)
  {
    v68 = 0;
    goto LABEL_58;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_59()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_5_43()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_6_51()
{
  uint64_t v0;

  return outlined destroy of Any?(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_7_48()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t OUTLINED_FUNCTION_8_49()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 216));
}

id OUTLINED_FUNCTION_10_42(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_13_44()
{
  uint64_t v0;

  return v0 - 152;
}

uint64_t OUTLINED_FUNCTION_14_37()
{
  return type metadata accessor for MLStyleTransfer.DataSource(0);
}

uint64_t OUTLINED_FUNCTION_16_37()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 128);
}

uint64_t OUTLINED_FUNCTION_17_27()
{
  return URL.path.getter();
}

uint64_t OUTLINED_FUNCTION_18_30()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t OUTLINED_FUNCTION_20_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_21_33()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_22_31()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_23_33()
{
  return 0x5F656C797473;
}

uint64_t OUTLINED_FUNCTION_24_35(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = result;
  *(_QWORD *)(v2 - 144) = a2;
  *(_QWORD *)(v2 - 168) = 0;
  *(_QWORD *)(v2 - 160) = 0xE000000000000000;
  return result;
}

void OUTLINED_FUNCTION_25_30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized Dictionary.subscript.setter(a1, 0xD000000000000011, a3);
}

uint64_t OUTLINED_FUNCTION_26_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = a1;
  *(_QWORD *)(v2 - 120) = a2;
  return URL.path.getter();
}

id OUTLINED_FUNCTION_27_37(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 - 272), a2);
}

double MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
    return 0.975;
  return result;
}

void MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
  *(_BYTE *)(v1 + 16) = 0;
}

double MLSoundClassifier.FeatureExtractionParameters.overlapFactor.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MLSoundClassifier.FeatureExtractionParameters.overlapFactor.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MLSoundClassifier.FeatureExtractionParameters.overlapFactor.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void key path getter for MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize : MLSoundClassifier.FeatureExtractionParameters(double *a1@<X8>)
{
  *a1 = MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.getter();
}

_QWORD *(*MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;
  double v2;

  *(_QWORD *)(a1 + 8) = v1;
  v2 = *(double *)(v1 + 8);
  if (*(_BYTE *)(v1 + 16))
    v2 = 0.975;
  *(double *)a1 = v2;
  return MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify;
}

_QWORD *MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 8) = *result;
  *(_BYTE *)(v1 + 16) = 0;
  return result;
}

void MLSoundClassifier.FeatureExtractionParameters.featureExtractor.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.featureExtractor.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*MLSoundClassifier.FeatureExtractionParameters.featureExtractor.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t *MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  char v4;

  v3 = *result;
  v4 = *((_BYTE *)result + 8);
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.init(overlapFactor:featureExtractor:featureExtractionTimeWindowSize:)@<X0>(uint64_t result@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6;
  uint64_t v9;
  char v10;
  unint64_t v11;
  os_log_type_t v12;
  unint64_t v13;
  os_log_type_t v14;

  v6 = *(_QWORD *)&a2;
  v9 = *(_QWORD *)result;
  v10 = *(_BYTE *)(result + 8);
  if ((a3 & 1) == 0)
  {
    if (a2 < 0.5)
    {
      OUTLINED_FUNCTION_7_15();
      v11 = OUTLINED_FUNCTION_15_12();
      OUTLINED_FUNCTION_0_9(v11, (uint64_t)"The input featureExtractionTimeWindowSize is smaller than the minimum supported value ");
      OUTLINED_FUNCTION_0_60();
      OUTLINED_FUNCTION_6_17((uint64_t)". Clamping it to ");
      OUTLINED_FUNCTION_0_60();
      OUTLINED_FUNCTION_9_15();
      v12 = static os_log_type_t.default.getter();
      OUTLINED_FUNCTION_18_3(v12);
      v6 = 0x3FE0000000000000;
LABEL_6:
      result = swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    if (a2 > 15.0)
    {
      OUTLINED_FUNCTION_7_15();
      v13 = OUTLINED_FUNCTION_15_12();
      OUTLINED_FUNCTION_0_9(v13, (uint64_t)"The input featureExtractionTimeWindowSize is greater than the maximum supported value ");
      OUTLINED_FUNCTION_0_60();
      OUTLINED_FUNCTION_6_17((uint64_t)". Clamping it to ");
      OUTLINED_FUNCTION_0_60();
      OUTLINED_FUNCTION_9_15();
      v14 = static os_log_type_t.default.getter();
      OUTLINED_FUNCTION_18_3(v14);
      v6 = 0x402E000000000000;
      goto LABEL_6;
    }
  }
LABEL_7:
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = v6;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  *(_QWORD *)(a4 + 24) = v9;
  *(_BYTE *)(a4 + 32) = v10;
  return result;
}

void sub_21AF3A140(double *a1)
{
  MLSoundClassifier.FeatureExtractionParameters.featureExtractionTimeWindowSize.setter(*a1);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.FeatureExtractionParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.FeatureExtractionParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.FeatureExtractionParameters()
{
  return &type metadata for MLSoundClassifier.FeatureExtractionParameters;
}

uint64_t OUTLINED_FUNCTION_0_60()
{
  return Double.write<A>(to:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.prediction(from:)(Swift::String from)
{
  void **v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v2 = *v1;
  v3 = (void *)MEMORY[0x22075A8AC](from._countAndFlagsBits, from._object);
  v4 = objc_msgSend(v2, sel_predictedLabelForString_, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  v8 = v5;
  v9 = (void *)v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

void MLTextClassifier.predictions(from:)()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_5_44();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_0_61(v3, v17);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v18 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_11_41();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = *v0;
    v6 = (uint64_t *)(v1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      v9 = (void *)MEMORY[0x22075A8AC](v7, v8);
      v10 = objc_msgSend(v5, sel_predictedLabelForString_, v9);

      if (v10)
      {
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v13 = v12;
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        v11 = 0;
        v13 = 0xE000000000000000;
      }
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
      {
        OUTLINED_FUNCTION_1_52(v14);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v6 += 2;
      *(_QWORD *)(v18 + 16) = v15 + 1;
      v16 = v18 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v13;
      --v4;
    }
    while (v4);
  }
  OUTLINED_FUNCTION_13_45();
  OUTLINED_FUNCTION_7();
}

{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v22;
  char v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  OUTLINED_FUNCTION_10_43();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  v5 = *(void **)v3;
  LOBYTE(v3) = *(_BYTE *)(v3 + 8);
  outlined copy of Result<_DataTable, Error>(v5, v3);
  v6 = specialized Array<A>.init(_:)(v5, v3);
  OUTLINED_FUNCTION_12_42();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v26 = v1;
    v27 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_11_41();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v24 = v6;
    v25 = v0;
    v8 = *v0;
    v9 = (uint64_t *)(v6 + 40);
    do
    {
      v11 = *(v9 - 1);
      v10 = *v9;
      swift_bridgeObjectRetain();
      v12 = (void *)MEMORY[0x22075A8AC](v11, v10);
      v13 = objc_msgSend(v8, sel_predictedLabelForString_, v12, v24, v25);

      if (v13)
      {
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v16 = v15;
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        v14 = 0;
        v16 = 0xE000000000000000;
      }
      v18 = *(_QWORD *)(v27 + 16);
      v17 = *(_QWORD *)(v27 + 24);
      if (v18 >= v17 >> 1)
      {
        OUTLINED_FUNCTION_1_52(v17);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v9 += 2;
      *(_QWORD *)(v27 + 16) = v18 + 1;
      v19 = v27 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v16;
      --v7;
    }
    while (v7);
    v1 = v26;
  }
  OUTLINED_FUNCTION_9_44();
  v20 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_8_50();
  ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  v23 = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = ML14_UntypedColumnC_s5Error_pTgm5;
  *(_BYTE *)(v1 + 8) = v23 & 1;
  OUTLINED_FUNCTION_7();
}

uint64_t MLTextClassifier.predictionWithConfidence(from:)()
{
  return MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)();
}

uint64_t MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  Swift::Int v41;
  unint64_t v42;
  char v43;
  Swift::Bool v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = NLModel.predictedLabelHypotheses(for:maximumCount:)();
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v2 < v5)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000037;
    *(_QWORD *)(v6 + 8) = 0x800000021AFF72C0;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_BYTE *)(v6 + 48) = 0;
    swift_willThrow(0.0);
    return (uint64_t)v4;
  }
  if (v5 == v2)
    return (uint64_t)v4;
  specialized _NativeDictionary.makeIterator()(&v55, v3);
  v7 = v58;
  v8 = v59;
  v9 = (unint64_t)(v57 + 64) >> 6;
  v10 = 0.0;
  if (!v59)
    goto LABEL_6;
LABEL_5:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v12 = v11 | (v7 << 6);
  while (1)
  {
    v10 = v10 + *(double *)(*(_QWORD *)(v55 + 56) + 8 * v12);
    if (v8)
      goto LABEL_5;
LABEL_6:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v13 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v56 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v56 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v9)
          goto LABEL_26;
        v14 = *(_QWORD *)(v56 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v9)
            goto LABEL_26;
          v14 = *(_QWORD *)(v56 + 8 * v15);
          if (!v14)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v9)
              goto LABEL_26;
            v14 = *(_QWORD *)(v56 + 8 * v15);
            if (!v14)
            {
              v15 = v7 + 6;
              if (v7 + 6 >= v9)
              {
LABEL_26:
                swift_bridgeObjectRetain_n();
                swift_release();
                v17 = v4[2];
                swift_bridgeObjectRelease();
                v18 = (1.0 - v10) / (double)(uint64_t)(v2 - v17);
                v19 = v1 + 56;
                v20 = 1 << *(_BYTE *)(v1 + 32);
                v21 = -1;
                if (v20 < 64)
                  v21 = ~(-1 << v20);
                v22 = v21 & *(_QWORD *)(v1 + 56);
                v23 = (unint64_t)(v20 + 63) >> 6;
                swift_bridgeObjectRetain();
                v24 = 0;
                v52 = v1 + 56;
                v53 = v1;
                v54 = v23;
                while (1)
                {
                  if (v22)
                  {
                    v25 = __clz(__rbit64(v22));
                    v22 &= v22 - 1;
                    v26 = v25 | (v24 << 6);
                  }
                  else
                  {
                    v27 = v24 + 1;
                    if (__OFADD__(v24, 1))
                      goto LABEL_60;
                    if (v27 >= v23)
                    {
LABEL_57:
                      swift_release();
                      return (uint64_t)v4;
                    }
                    v28 = *(_QWORD *)(v19 + 8 * v27);
                    ++v24;
                    if (!v28)
                    {
                      v24 = v27 + 1;
                      if (v27 + 1 >= v23)
                        goto LABEL_57;
                      v28 = *(_QWORD *)(v19 + 8 * v24);
                      if (!v28)
                      {
                        v24 = v27 + 2;
                        if (v27 + 2 >= v23)
                          goto LABEL_57;
                        v28 = *(_QWORD *)(v19 + 8 * v24);
                        if (!v28)
                        {
                          v29 = v27 + 3;
                          if (v29 >= v23)
                            goto LABEL_57;
                          v28 = *(_QWORD *)(v19 + 8 * v29);
                          if (!v28)
                          {
                            while (1)
                            {
                              v24 = v29 + 1;
                              if (__OFADD__(v29, 1))
                                goto LABEL_61;
                              if (v24 >= v23)
                                goto LABEL_57;
                              v28 = *(_QWORD *)(v19 + 8 * v24);
                              ++v29;
                              if (v28)
                                goto LABEL_44;
                            }
                          }
                          v24 = v29;
                        }
                      }
                    }
LABEL_44:
                    v22 = (v28 - 1) & v28;
                    v26 = __clz(__rbit64(v28)) + (v24 << 6);
                  }
                  v30 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v26);
                  v32 = *v30;
                  v31 = v30[1];
                  v33 = v4[2];
                  swift_bridgeObjectRetain();
                  if (v33
                    && (swift_bridgeObjectRetain(),
                        specialized __RawDictionaryStorage.find<A>(_:)(v32, v31),
                        v35 = v34,
                        swift_bridgeObjectRelease(),
                        (v35 & 1) != 0))
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
                    v39 = v4[2];
                    v40 = (v38 & 1) == 0;
                    v41 = v39 + v40;
                    if (__OFADD__(v39, v40))
                      goto LABEL_62;
                    v42 = v37;
                    v43 = v38;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
                    v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41);
                    v23 = v54;
                    if (v44)
                    {
                      v45 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
                      if ((v43 & 1) != (v46 & 1))
                        goto LABEL_64;
                      v42 = v45;
                    }
                    if ((v43 & 1) != 0)
                    {
                      *(double *)(v4[7] + 8 * v42) = v18;
                    }
                    else
                    {
                      v4[(v42 >> 6) + 8] |= 1 << v42;
                      v47 = (uint64_t *)(v4[6] + 16 * v42);
                      *v47 = v32;
                      v47[1] = v31;
                      *(double *)(v4[7] + 8 * v42) = v18;
                      v48 = v4[2];
                      v49 = __OFADD__(v48, 1);
                      v50 = v48 + 1;
                      if (v49)
                        goto LABEL_63;
                      v4[2] = v50;
                      swift_bridgeObjectRetain();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v19 = v52;
                    v1 = v53;
                  }
                }
              }
              v14 = *(_QWORD *)(v56 + 8 * v15);
              if (!v14)
              {
                v16 = v7 + 7;
                do
                {
                  if (v16 >= v9)
                    goto LABEL_26;
                  v14 = *(_QWORD *)(v56 + 8 * v16++);
                }
                while (!v14);
                v15 = v16 - 1;
              }
            }
          }
        }
      }
    }
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v7 = v15;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "21AF3A898: call analysis failed (funcsize=65)"

void MLTextClassifier.predictionsWithConfidence(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  OUTLINED_FUNCTION_10_43();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  v5 = *(void **)v3;
  LOBYTE(v3) = *(_BYTE *)(v3 + 8);
  outlined copy of Result<_DataTable, Error>(v5, v3);
  v6 = specialized Array<A>.init(_:)(v5, v3);
  OUTLINED_FUNCTION_12_42();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v19 = v1;
    v20 = MEMORY[0x24BEE4AF8];
    v8 = OUTLINED_FUNCTION_11_41();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v7, 0);
    v9 = v6 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v10 = MLTextClassifier.predictionWithAllLabelsAndConfidences(text:)();
      if (v0)
        break;
      v11 = v10;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v20 + 16);
      v12 = *(_QWORD *)(v20 + 24);
      if (v13 >= v12 >> 1)
      {
        v14 = OUTLINED_FUNCTION_1_52(v12);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v13 + 1, 1);
      }
      v9 += 16;
      *(_QWORD *)(v20 + 16) = v13 + 1;
      *(_QWORD *)(v20 + 8 * v13 + 32) = v11;
      if (!--v7)
      {
        v1 = v19;
        goto LABEL_9;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_44();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_9_44();
    v15 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v15);
    OUTLINED_FUNCTION_8_50();
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v18 = v17;
    swift_bridgeObjectRelease();
    *(_QWORD *)v1 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(v1 + 8) = v18 & 1;
  }
  OUTLINED_FUNCTION_7();
}

uint64_t outlined init with copy of MLTextClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLTextClassifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_61@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLTextClassifier(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

BOOL OUTLINED_FUNCTION_1_52@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_5_44()
{
  return type metadata accessor for MLTextClassifier();
}

uint64_t OUTLINED_FUNCTION_9_44()
{
  uint64_t v0;

  return outlined destroy of MLTextClassifier(v0);
}

uint64_t OUTLINED_FUNCTION_10_43()
{
  return type metadata accessor for MLTextClassifier();
}

uint64_t OUTLINED_FUNCTION_11_41()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_12_42()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of MLTextClassifier(v0, v1);
}

uint64_t OUTLINED_FUNCTION_13_45()
{
  uint64_t v0;

  return outlined destroy of MLTextClassifier(v0);
}

uint64_t MLFewShotSoundClassifier.performValidationStep(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  int32x2_t v24;
  uint64_t result;
  void (*v26)(uint64_t, uint64_t);
  _QWORD v27[5];
  int v28;
  int32x2_t v29;
  uint64_t v30;

  v27[0] = a1;
  v27[1] = a2;
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_50();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_212_0();
  v14 = type metadata accessor for Tensor();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_50();
  v18 = v16 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v27 - v20;
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v14);
  v22 = *(_DWORD *)(v3 + 24);
  v23 = type metadata accessor for MLFewShotSoundClassifier();
  v24 = *(int32x2_t *)(v3 + 28);
  outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(v3 + *(int *)(v23 + 40), (uint64_t)v8);
  v27[4] = a3;
  v28 = v22;
  v29 = vrev64_s32(v24);
  v30 = v4;
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  valueWithGradient<A>(at:of:)();
  outlined destroy of MLFewShotSoundClassifier.TemporalClassifier.Output((uint64_t)v8, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  outlined init with copy of Tensor?(v4, v12);
  result = __swift_getEnumTagSinglePayload(v12, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v12, v14);
    outlined destroy of Any?(v4, &demangling cache variable for type metadata for Tensor?);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, char *, uint64_t))(v15 + 16))(v27[0], v21, v14);
    softmax(_:alongAxis:)();
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(v18, v14);
    return ((uint64_t (*)(char *, uint64_t))v26)(v21, v14);
  }
  return result;
}

void closure #1 in MLFewShotSoundClassifier.performStep(on:)(void (*a1)(unint64_t, char *, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(unint64_t, char *, uint64_t);
  char *v69;
  int *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(unint64_t, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v99 = a2;
  v97 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v98 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v116 = v8;
  v111 = type metadata accessor for TensorShape();
  v101 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  OUTLINED_FUNCTION_64();
  v110 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v109 = v11;
  v12 = type metadata accessor for Tensor();
  v119 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_50();
  v95[1] = v13 - v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_65_5();
  v100 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_65_5();
  v102 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_65_5();
  v113 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_65_5();
  v112 = v22;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_65_5();
  v114 = v24;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_65_5();
  v115 = v26;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_65_5();
  v122 = v28;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_65_5();
  v125 = v30;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_65_5();
  v126 = v32;
  OUTLINED_FUNCTION_29_3();
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)v95 - v35;
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_65_5();
  v123 = v37;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_65_5();
  v120 = v39;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_65_5();
  v117 = v41;
  OUTLINED_FUNCTION_29_3();
  v43 = MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v95 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v46 = OUTLINED_FUNCTION_212_0();
  v47 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(v46);
  v108 = (int *)v47;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)v95 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = v49;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  v118 = a1;
  DataSample.features.getter();
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_0_62(v3);
  v51 = &v49[*(int *)(v47 + 28)];
  v107 = v50;
  DataSample.labels.getter();
  v52 = *MEMORY[0x24BE6B9C8];
  v53 = type metadata accessor for LossReduction();
  v54 = v109;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v109, v52, v53);
  __swift_storeEnumTagSinglePayload(v54, 0, 1, v53);
  v96 = v3;
  softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
  outlined destroy of Any?(v54, &demangling cache variable for type metadata for LossReduction?);
  v121 = v45;
  OUTLINED_FUNCTION_0_62((uint64_t)v45);
  v55 = v117;
  DataSample.labels.getter();
  v56 = v120;
  v95[2] = v51;
  softmax(_:alongAxis:)();
  v57 = v56;
  v58 = v55;
  static Tensor.* infix(_:_:)();
  v59 = v123;
  Tensor.sum(alongAxes:)();
  OUTLINED_FUNCTION_0_62((uint64_t)v36);
  v60 = v122;
  Tensor.init(floatLiteral:)();
  v61 = v125;
  OUTLINED_FUNCTION_14_38();
  OUTLINED_FUNCTION_0_62(v60);
  v62 = v126;
  static Tensor.* infix(_:_:)();
  OUTLINED_FUNCTION_0_62(v61);
  Tensor.max(alongAxes:)();
  OUTLINED_FUNCTION_0_62(v62);
  OUTLINED_FUNCTION_25_31();
  v124 = v36;
  OUTLINED_FUNCTION_0_62((uint64_t)v36);
  OUTLINED_FUNCTION_0_62(v59);
  OUTLINED_FUNCTION_0_62(v57);
  OUTLINED_FUNCTION_0_62(v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>);
  v63 = *(_QWORD *)(v119 + 72);
  v64 = v119;
  v65 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
  v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_21AFE7D90;
  v67 = v66 + v65;
  DataSample.features.getter();
  v68 = *(void (**)(unint64_t, char *, uint64_t))(v64 + 16);
  v69 = v104;
  v68(v67 + v63, v104, v12);
  v70 = v108;
  v68(v67 + 2 * v63, &v69[v108[5]], v12);
  v103 = v63;
  v71 = &v69[v70[6]];
  v118 = v68;
  v68(v67 + 3 * v63, v71, v12);
  v72 = gradient(at:of:)();
  swift_bridgeObjectRelease();
  v119 = v72;
  if (*(_QWORD *)(v72 + 16))
  {
    v95[0] = 3 * v63;
    v106 = v119 + v65;
    OUTLINED_FUNCTION_6_52(v120, v119 + v65);
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v73 = swift_allocObject();
    v105 = xmmword_21AFE7F70;
    *(_OWORD *)(v73 + 16) = xmmword_21AFE7F70;
    v74 = v110;
    Tensor.shape.getter();
    v75 = TensorShape.subscript.getter();
    v76 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    v77 = v111;
    v76(v74, v111);
    *(_QWORD *)(v73 + 32) = v75;
    *(_QWORD *)(v73 + 40) = -1;
    MEMORY[0x220758C74](v73);
    v78 = v123;
    Tensor.reshaped(to:)();
    v108 = (int *)v76;
    v79 = ((uint64_t (*)(uint64_t, uint64_t))v76)(v74, v77);
    MEMORY[0x24BDAC7A8](v79);
    v95[-2] = v78;
    withoutGradient<A>(_:)();
    OUTLINED_FUNCTION_30_30();
    v80 = MEMORY[0x24BEE14E8];
    v81 = MEMORY[0x24BE6C230];
    v82 = v125;
    OUTLINED_FUNCTION_18_31();
    static Tensor./ infix(_:_:)();
    OUTLINED_FUNCTION_0_62(v82);
    v127 = v80;
    v128 = v81;
    OUTLINED_FUNCTION_28_31();
    v83 = type metadata accessor for ComputeDevice();
    v84 = v116;
    __swift_storeEnumTagSinglePayload(v116, 1, 1, v83);
    OUTLINED_FUNCTION_31_28();
    v127 = v80;
    v128 = v81;
    OUTLINED_FUNCTION_21_34();
    OUTLINED_FUNCTION_7_49();
    *(_QWORD *)(v85 - 256) = v83;
    OUTLINED_FUNCTION_17_28(v86, v87, v88, v83);
    v89 = v122;
    OUTLINED_FUNCTION_31_28();
    OUTLINED_FUNCTION_27_38();
    v90 = v126;
    OUTLINED_FUNCTION_23_34();
    v91 = v114;
    relu(_:)();
    OUTLINED_FUNCTION_0_62(v84);
    v92 = v115;
    OUTLINED_FUNCTION_26_32();
    OUTLINED_FUNCTION_0_62(v91);
    v93 = v113;
    static Tensor.- infix(_:_:)();
    relu(_:)();
    OUTLINED_FUNCTION_0_62(v93);
    OUTLINED_FUNCTION_14_38();
    OUTLINED_FUNCTION_0_62(v84);
    Tensor.mean()();
    OUTLINED_FUNCTION_0_62(v91);
    OUTLINED_FUNCTION_0_62(v92);
    OUTLINED_FUNCTION_0_62(v89);
    OUTLINED_FUNCTION_0_62(v82);
    OUTLINED_FUNCTION_0_62(v90);
    OUTLINED_FUNCTION_0_62((uint64_t)v124);
    OUTLINED_FUNCTION_0_62(v123);
    OUTLINED_FUNCTION_0_62(v120);
    if (*(_QWORD *)(v119 + 16) >= 2uLL)
    {
      OUTLINED_FUNCTION_6_52(v123, v106 + v103);
      v94 = (__n128 *)OUTLINED_FUNCTION_4_51();
      OUTLINED_FUNCTION_10_44(v94);
      Tensor.shape.getter();
      OUTLINED_FUNCTION_19_34();
      OUTLINED_FUNCTION_2_53(v89);
      OUTLINED_FUNCTION_13_46();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x21AF3C13CLL);
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t);
  _QWORD v9[2];

  v0 = type metadata accessor for Tensor();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v9 - v5;
  Tensor.squared()();
  Tensor.sum(alongAxes:)();
  v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v4, v0);
  sqrt(_:)();
  return ((uint64_t (*)(char *, uint64_t))v7)(v6, v0);
}

uint64_t partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)()
{
  return closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

uint64_t outlined assign with take of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  OUTLINED_FUNCTION_11_1(v3);
  return a1;
}

uint64_t closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)partial apply()
{
  return partial apply for closure #1 in static MLFewShotSoundClassifier.localLoss(probabilities:gradients:gamma:alpha:epsilon:)();
}

uint64_t OUTLINED_FUNCTION_0_62(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_2_53(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 320))(a1, *(_QWORD *)(v1 - 296));
}

uint64_t OUTLINED_FUNCTION_4_51()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 240))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_9_45()
{
  return Tensor.init(coercing:scalarType:on:)();
}

__n128 OUTLINED_FUNCTION_10_44(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 352);
  a1[1] = result;
  return result;
}

void OUTLINED_FUNCTION_13_46()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = -1;
  JUMPOUT(0x220758C74);
}

uint64_t OUTLINED_FUNCTION_14_38()
{
  return static Tensor.- infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_16_38()
{
  return withoutGradient<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_17_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
  return v4 - 168;
}

uint64_t OUTLINED_FUNCTION_18_31()
{
  return static Tensor.+ infix<A>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_19_34()
{
  return TensorShape.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_20_32()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_21_34()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 - 168) = v1;
  return Tensor.scalarType.getter();
}

uint64_t OUTLINED_FUNCTION_22_32()
{
  return relu(_:)();
}

uint64_t OUTLINED_FUNCTION_23_34()
{
  return static Tensor.- infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_25_31()
{
  return static Tensor.- infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_26_32()
{
  return static Tensor.+ infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_28_31()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 - 168) = v1;
  return Tensor.scalarType.getter();
}

uint64_t OUTLINED_FUNCTION_29_28()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_30_30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_QWORD *)(v1 - 384) = v0;
  *(_DWORD *)(v1 - 168) = v2;
}

uint64_t OUTLINED_FUNCTION_31_28()
{
  return Tensor.init(coercing:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_32_24()
{
  return Tensor.init(coercing:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_33_29()
{
  return Tensor.init(coercing:scalarType:on:)();
}

void one-time initialization function for tmpPath()
{
  NSString *v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v0 = NSTemporaryDirectory();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  tmpPath._countAndFlagsBits = v1;
  tmpPath._object = v3;
}

uint64_t static BoostedTreeConfiguration.firstIncompatibility(_:_:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  double v2;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  const char *v14;

  v5 = BoostedTreeConfiguration.maximumIterations.getter();
  if (v5 != BoostedTreeConfiguration.maximumIterations.getter())
  {
    BoostedTreeConfiguration.maximumIterations.getter();
    OUTLINED_FUNCTION_0_63();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.maximumIterations.getter();
    result = OUTLINED_FUNCTION_0_63();
    v11 = 0xEF736E6F69746172;
    v10 = 0x657469202E78614DLL;
    goto LABEL_16;
  }
  v5 = BoostedTreeConfiguration.maximumDepth.getter();
  if (v5 != BoostedTreeConfiguration.maximumDepth.getter())
  {
    BoostedTreeConfiguration.maximumDepth.getter();
    OUTLINED_FUNCTION_0_63();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.maximumDepth.getter();
    result = OUTLINED_FUNCTION_0_63();
    v11 = 0xEA00000000006874;
    v10 = 0x706564202E78614DLL;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.minimumLossReduction.getter();
  OUTLINED_FUNCTION_2_54();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  if (v2 != v6)
  {
    BoostedTreeConfiguration.minimumLossReduction.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.minimumLossReduction.getter();
    result = Double.description.getter();
    v10 = 0xD000000000000013;
    v14 = "Min. loss reduction";
LABEL_13:
    v11 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.minimumChildWeight.getter();
  OUTLINED_FUNCTION_2_54();
  BoostedTreeConfiguration.minimumChildWeight.getter();
  if (v2 != v7)
  {
    v10 = 0xD000000000000011;
    BoostedTreeConfiguration.minimumChildWeight.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.minimumChildWeight.getter();
    result = Double.description.getter();
    v14 = "Min. child weight";
    goto LABEL_13;
  }
  v5 = BoostedTreeConfiguration.randomSeed.getter();
  if (v5 != BoostedTreeConfiguration.randomSeed.getter())
  {
    BoostedTreeConfiguration.randomSeed.getter();
    OUTLINED_FUNCTION_0_63();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.randomSeed.getter();
    result = OUTLINED_FUNCTION_0_63();
    v11 = 0xEB00000000646565;
    v10 = 0x73206D6F646E6152;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.rowSubsample.getter();
  OUTLINED_FUNCTION_2_54();
  BoostedTreeConfiguration.rowSubsample.getter();
  if (v2 != v8)
  {
    BoostedTreeConfiguration.rowSubsample.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.rowSubsample.getter();
    result = Double.description.getter();
    v11 = 0xEE00656C706D6173;
    v10 = 0x2062757320776F52;
    goto LABEL_16;
  }
  BoostedTreeConfiguration.columnSubsample.getter();
  OUTLINED_FUNCTION_2_54();
  BoostedTreeConfiguration.columnSubsample.getter();
  if (v2 != v9)
  {
    v10 = 0xD000000000000011;
    BoostedTreeConfiguration.columnSubsample.getter();
    Double.description.getter();
    OUTLINED_FUNCTION_1_53();
    BoostedTreeConfiguration.columnSubsample.getter();
    result = Double.description.getter();
    v14 = "Column sub sample";
    goto LABEL_13;
  }
  v10 = 0;
  v11 = 0;
  a1 = 0;
  v5 = 0;
  result = 0;
  v13 = 0;
LABEL_16:
  *a2 = v10;
  a2[1] = v11;
  a2[2] = a1;
  a2[3] = v5;
  a2[4] = result;
  a2[5] = v13;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_63()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

unint64_t MLImageClassifier.ModelParameters.ClassifierType.description.getter()
{
  return 0xD000000000000012;
}

uint64_t static MLImageClassifier.ModelParameters.ClassifierType.== infix(_:_:)()
{
  return 1;
}

void MLImageClassifier.ModelParameters.ClassifierType.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  return MLImageClassifier.ModelParameters.ClassifierType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  MLImageClassifier.ModelParameters.ClassifierType.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.ModelParameters.ClassifierType, &type metadata for MLImageClassifier.ModelParameters.ClassifierType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ModelParameters.ClassifierType and conformance MLImageClassifier.ModelParameters.ClassifierType);
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLImageClassifier.ModelParameters.ClassifierType()
{
  MLImageClassifier.ModelParameters.ClassifierType.description.getter();
  return 0xD000000000000012;
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters.ClassifierType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21AF3C92C + 4 * asc_21AFEEA4C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21AF3C94C + 4 * byte_21AFEEA51[v4]))();
}

_BYTE *sub_21AF3C92C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21AF3C94C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AF3C954(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AF3C95C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AF3C964(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AF3C96C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters.ClassifierType()
{
  return &type metadata for MLImageClassifier.ModelParameters.ClassifierType;
}

void MLDataTable.randomSplitBySequence(strategy:by:on:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t *v7;
  double v12;
  char v13;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  char v23;
  char v26;
  uint64_t v27;
  void *v28;
  char v29;
  id v30;
  char v31;

  v12 = *(double *)a3;
  v26 = *(_BYTE *)(a3 + 16);
  v13 = *(_BYTE *)(a3 + 17);
  v14 = *v7;
  v15 = *((_BYTE *)v7 + 8);
  v27 = *(_QWORD *)(a3 + 8);
  OUTLINED_FUNCTION_14_39();
  MLDataTable.subscript.getter((uint64_t)a4, a5, (uint64_t)&v28);
  OUTLINED_FUNCTION_17_15();
  v16 = v28;
  v17 = v29;
  MLUntypedColumn.dropDuplicates()(&v30);
  outlined consume of Result<_DataTable, Error>(v16, v17);
  v18 = v30;
  if ((v31 & 1) != 0)
  {
    outlined consume of Result<_DataTable, Error>(v30, 1);
    if ((v13 & 1) != 0)
      goto LABEL_11;
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_139();
  v19 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_102(v18);
  OUTLINED_FUNCTION_102(v18);
  if ((v13 & 1) == 0)
  {
LABEL_7:
    if ((v26 & 1) != 0)
      v20 = 1;
    else
      v20 = v27;
    if (v12 == 0.0)
      goto LABEL_11;
    goto LABEL_12;
  }
  if (v19 < 50)
  {
LABEL_11:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = -1;
    *(_QWORD *)a2 = v14;
    *(_BYTE *)(a2 + 8) = v15;
    OUTLINED_FUNCTION_14_39();
    return;
  }
  v12 = dbl_21AFE9520[(unint64_t)v19 < 0xC8];
  v20 = 1;
LABEL_12:
  MLDataTable.randomSplitBySequence(proportion:by:on:seed:)((uint64_t)&v30, (uint64_t)&v28, a4, a5, a6, a7, v20, v12);
  v21 = v31;
  v22 = v28;
  v23 = v29;
  *(_QWORD *)a1 = v30;
  *(_BYTE *)(a1 + 8) = v21;
  *(_QWORD *)a2 = v22;
  *(_BYTE *)(a2 + 8) = v23;
}

void specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  id v72;
  uint64_t v73;
  uint64_t inited;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  void *v95;
  void *v96;
  char v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v102;
  char v103;
  void *v104;
  char v105;
  double v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  char v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  _QWORD *v163;
  void *v164;
  id v165;
  unsigned __int8 v166;
  void *v167;
  BOOL v168[8];
  void *v169;
  BOOL v170;
  void *v171;
  char v172;

  if ((a4 & 1) != 0)
    OUTLINED_FUNCTION_24_36();
  OUTLINED_FUNCTION_23_35();
  outlined consume of Result<_DataTable, Error>(a3, 0);
  v164 = a5;
  v165 = a6;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_7_42();
  v16 = OUTLINED_FUNCTION_30_31(partial apply for specialized closure #1 in Sequence<>.contains(_:));
  OUTLINED_FUNCTION_4_2();
  if ((v16 & 1) == 0)
  {
    OUTLINED_FUNCTION_6_46();
    v17 = a5;
    v18 = a6;
LABEL_24:
    String.append(_:)(*(Swift::String *)&v17);
    v71._countAndFlagsBits = 46;
    v71._object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    v72 = v165;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v73 = v164;
    *(_QWORD *)(v73 + 8) = v72;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_BYTE *)(v73 + 48) = 0;
    swift_willThrow(0.0);
    return;
  }
  if ((a4 & 1) != 0)
    OUTLINED_FUNCTION_24_36();
  OUTLINED_FUNCTION_23_35();
  outlined consume of Result<_DataTable, Error>(a3, 0);
  v164 = a7;
  v165 = a8;
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_7_42();
  v20 = OUTLINED_FUNCTION_30_31(closure #1 in Sequence<>.contains(_:)specialized partial apply);
  OUTLINED_FUNCTION_4_2();
  if ((v20 & 1) == 0)
  {
    OUTLINED_FUNCTION_6_46();
    v17 = a7;
    v18 = a8;
    goto LABEL_24;
  }
  v171 = a3;
  v172 = 0;
  v164 = a3;
  LOBYTE(v165) = 0;
  OUTLINED_FUNCTION_17_29();
  OUTLINED_FUNCTION_40_23((uint64_t)a5, (uint64_t)&v169);
  v21 = v169;
  v22 = v170;
  v167 = v169;
  v168[0] = v170;
  MLUntypedColumn.dropDuplicates()(&v164);
  v23 = v22;
  v24 = a8;
  outlined consume of Result<_DataTable, Error>(v21, v23);
  HIDWORD(v136) = a4 & 1;
  OUTLINED_FUNCTION_8_45(v25, v26, v27, v28, v29, v30, v31, v32, v109, v112, v115, v118, v122, v125, v128, v131, v133, v136, a1,
    a2,
    a9,
    (uint64_t)a8,
    v153,
    v157);
  v34 = v33;
  OUTLINED_FUNCTION_17_29();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n(v34, a3, 0, (uint64_t)a5, a6, (uint64_t)a7, v24);
  v35 = *(_QWORD *)(v34 + 16);
  v36 = swift_bridgeObjectRetain();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v36, 0, v35, v37, v38, v39, v40, v41, v110, v113, v116, v119, v9, (uint64_t)a7, ML11MLDataValueOG_AHs5NeverOTg503_s8d81ML34stratifiedSplitBySequenceGenerator11proportions9generator9dataTable2by2onAA06f30K0VSaySdG_xzAIS2StKSGRzlFAA0N5G8OALXEfU_AF0F5TableVS2STf1cn_n, v34, v134, v137);
  v43 = v42;
  v163 = (_QWORD *)specialized Array.init(repeating:count:)(MEMORY[0x24BEE4AF8], v35);
  v169 = a3;
  v170 = 0;
  OUTLINED_FUNCTION_17_29();
  OUTLINED_FUNCTION_40_23((uint64_t)a5, (uint64_t)&v164);
  outlined consume of Result<_DataTable, Error>(a3, 0);
  OUTLINED_FUNCTION_8_45(v44, v45, v46, v47, v48, v49, v50, v51, v111, (uint64_t)a3, v117, v120, v123, v126, v130, v132, (uint64_t)a5, v138, v141,
    v144,
    v147,
    v150,
    v154,
    v158);
  v159 = *(_QWORD *)(v52 + 16);
  if (v159)
  {
    v121 = a6;
    v53 = 0;
    v54 = (unsigned __int8 *)(v52 + 48);
    v155 = v43;
    while (1)
    {
      v55 = *((_QWORD *)v54 - 2);
      v56 = *((_QWORD *)v54 - 1);
      v57 = *v54;
      v58 = *(_QWORD *)(v43 + 16);
      OUTLINED_FUNCTION_19_35();
      if (!v58)
        goto LABEL_66;
      OUTLINED_FUNCTION_19_35();
      v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v56, v57);
      if ((v60 & 1) == 0)
        goto LABEL_65;
      v61 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v59);
      OUTLINED_FUNCTION_9_46();
      v62 = v163;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v61 & 0x8000000000000000) != 0)
          goto LABEL_61;
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v62 = v68;
        if ((v61 & 0x8000000000000000) != 0)
          goto LABEL_61;
      }
      if (v61 >= v62[2])
        break;
      v163 = v62;
      v63 = v62 + 4;
      v64 = v63[v61];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v63[v61] = v64;
      v161 = v53;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_47_23(0, *(_QWORD *)(v64 + 16) + 1);
        v64 = v69;
        v63[v61] = v69;
      }
      v67 = *(_QWORD *)(v64 + 16);
      v66 = *(_QWORD *)(v64 + 24);
      if (v67 >= v66 >> 1)
      {
        OUTLINED_FUNCTION_47_23(v66 > 1, v67 + 1);
        v64 = v70;
        v63[v61] = v70;
      }
      v54 += 24;
      *(_QWORD *)(v64 + 16) = v67 + 1;
      *(_QWORD *)(v64 + 8 * v67 + 32) = v161;
      OUTLINED_FUNCTION_9_46();
      v53 = v161 + 1;
      v43 = v155;
      if (v159 == v161 + 1)
      {
        swift_bridgeObjectRelease();
        a6 = v121;
        v24 = v151;
        goto LABEL_26;
      }
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    OUTLINED_FUNCTION_9_46();
LABEL_66:
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    __break(1u);
LABEL_71:
    JUMPOUT(0x21AF3D6ACLL);
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = 0x73656369646E69;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v164 = v163;
  MEMORY[0x24BDAC7A8](inited);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))_s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0);
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 48) = 0x73656369646E69;
  *(_BYTE *)(inited + 56) = v43 & 1;
  *(_QWORD *)(inited + 64) = v127;
  *(_QWORD *)(inited + 72) = v24;
  OUTLINED_FUNCTION_54_15((uint64_t)v168);
  MEMORY[0x24BDAC7A8](v75);
  OUTLINED_FUNCTION_42_18();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 80) = 0x73656369646E69;
  *(_BYTE *)(inited + 88) = v43 & 1;
  *(_QWORD *)(inited + 96) = v135;
  *(_QWORD *)(inited + 104) = a6;
  OUTLINED_FUNCTION_54_15((uint64_t)&v169);
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_42_18();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_20((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  OUTLINED_FUNCTION_2_47();
  *(_QWORD *)(inited + 112) = 0x73656369646E69;
  *(_BYTE *)(inited + 120) = v43 & 1;
  v77 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v77, (uint64_t)&v164);
  if (v124)
  {
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v171, v172);
    return;
  }
  v78 = v164;
  v79 = (char)v165;
  specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v142, v164, v165, v127, v24, (uint64_t)&v164);
  v145 = v79;
  v152 = v78;
  v80 = v164;
  v162 = (char)v165;
  v169 = v114;
  v170 = v139 != 0;
  OUTLINED_FUNCTION_35_22();
  OUTLINED_FUNCTION_40_23(v135, (uint64_t)&v164);
  OUTLINED_FUNCTION_20_28();
  v81 = v164;
  if ((v165 & 1) != 0)
  {
    v82 = -1;
  }
  else
  {
    OUTLINED_FUNCTION_43_19();
    v82 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v81);
  }
  v83 = v148;
  OUTLINED_FUNCTION_20_28();
  v84 = (_QWORD *)specialized Array.init(repeating:count:)(0, v82);
  v169 = v80;
  v170 = v162;
  outlined copy of Result<_DataTable, Error>(v80, v162);
  MLDataTable.subscript.getter(0x73656369646E69, (void *)0xE700000000000000, (uint64_t)&v164);
  outlined consume of Result<_DataTable, Error>(v80, v162);
  v85 = v164;
  if (v165 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v164, 1);
    goto LABEL_70;
  }
  OUTLINED_FUNCTION_43_19();
  v86 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_102(v85);
  OUTLINED_FUNCTION_102(v85);
  if (v86 < 0)
  {
LABEL_70:
    __break(1u);
    OUTLINED_FUNCTION_0_64();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_71;
  }
  if (v86)
  {
    v87 = 0;
    v156 = v86;
    while (1)
    {
      if (v87 == v86)
        goto LABEL_63;
      if ((v162 & 1) != 0)
      {
        outlined copy of Result<_DataTable, Error>(v80, 1);
        swift_willThrow(v106);
        v164 = 0;
        v165 = (id)0xE000000000000000;
        _StringGuts.grow(_:)(34);
        OUTLINED_FUNCTION_50_9();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v107 = (void *)OUTLINED_FUNCTION_49_0();
        *(_QWORD *)v108 = 0xD000000000000027;
        *(_QWORD *)(v108 + 8) = 0x800000021AFF73D0;
        *(_OWORD *)(v108 + 16) = 0u;
        *(_OWORD *)(v108 + 32) = 0u;
        *(_BYTE *)(v108 + 48) = 1;
        OUTLINED_FUNCTION_24_33();
        outlined consume of Result<_DataTable, Error>(v107, 1);
LABEL_68:
        __break(1u);
        JUMPOUT(0x21AF3D754);
      }
      v88 = v80[2];
      OUTLINED_FUNCTION_12_3(v80);
      swift_retain();
      v89 = specialized String.withCString<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.column(name:), v88, 0x73656369646E69, 0xE700000000000000);
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_102(v80);
      type metadata accessor for _UntypedColumn();
      v90 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      v90[2] = v89;
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(v87, (uint64_t)&v164);
      OUTLINED_FUNCTION_102(v90);
      OUTLINED_FUNCTION_102(v90);
      if (v166 != 3)
        goto LABEL_68;
      v160 = v87;
      OUTLINED_FUNCTION_139();
      if (OUTLINED_FUNCTION_108())
        break;
LABEL_54:
      v87 = v160 + 1;
      OUTLINED_FUNCTION_0_64();
      OUTLINED_FUNCTION_0_64();
      v86 = v156;
      v83 = v148;
      if (v160 + 1 == v156)
        goto LABEL_55;
    }
    v91 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_139();
      CMLSequence.value(at:)(v91);
      OUTLINED_FUNCTION_0_64();
      MLDataValue.init(_:)();
      v92 = (unint64_t)v164;
      v93 = v166;
      OUTLINED_FUNCTION_139();
      v94 = OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_0_64();
      if (v91 >= v94)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      if (v93)
        goto LABEL_64;
      OUTLINED_FUNCTION_12_3(v80);
      specialized MLDataTable.subscript.getter((char)v80, v162, (uint64_t)&v169);
      OUTLINED_FUNCTION_102(v80);
      v95 = v169;
      if (v170)
        break;
      OUTLINED_FUNCTION_12_3(v169);
      _UntypedColumn.valueAtIndex(index:)(v160, (uint64_t)&v164);
      OUTLINED_FUNCTION_102(v95);
      v98 = v164;
      if (v166)
      {
        outlined consume of MLDataValue(v164, v165, v166);
        v96 = v95;
        v97 = 0;
LABEL_46:
        outlined consume of Result<_DataTable, Error>(v96, v97);
        v98 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_52;
        goto LABEL_47;
      }
      OUTLINED_FUNCTION_102(v95);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
LABEL_52:
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v84 = v99;
        if ((v92 & 0x8000000000000000) != 0)
          goto LABEL_59;
        goto LABEL_48;
      }
LABEL_47:
      if ((v92 & 0x8000000000000000) != 0)
        goto LABEL_59;
LABEL_48:
      if (v92 >= v84[2])
        goto LABEL_60;
      ++v91;
      v84[v92 + 4] = v98;
      if (v91 == OUTLINED_FUNCTION_108())
        goto LABEL_54;
    }
    v96 = v169;
    v97 = 1;
    goto LABEL_46;
  }
LABEL_55:
  v100 = OUTLINED_FUNCTION_50_9();
  v164 = v84;
  MEMORY[0x24BDAC7A8](v100);
  OUTLINED_FUNCTION_7_42();
  ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  v103 = v102 & 1;
  OUTLINED_FUNCTION_50_9();
  MLDataTable.willMutate()();
  v164 = ML14_UntypedColumnC_s5Error_pTgm5;
  LOBYTE(v165) = v103;
  OUTLINED_FUNCTION_35_22();
  MLDataTable.addImpl(newColumn:named:)();
  OUTLINED_FUNCTION_20_28();
  v104 = v171;
  v105 = v172;
  if ((v172 & 1) == 0)
  {
    OUTLINED_FUNCTION_12_3(v171);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_102(v104);
  }
  outlined consume of Result<_DataTable, Error>(v152, v145);
  OUTLINED_FUNCTION_24_33();
  OUTLINED_FUNCTION_20_28();
  *(_QWORD *)v83 = v104;
  *(_BYTE *)(v83 + 8) = v105;
}

void MLDataTable.stratifiedSplit<A>(proportions:on:generator:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  char v8;
  uint64_t v9;
  char v10;

  v8 = *((_BYTE *)v7 + 8);
  v9 = *v7;
  v10 = v8;
  stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, a4, (uint64_t)&v9, a2, a3, a5, a6, a7);
}

uint64_t MLDataTable.stratifiedSplit(proportions:on:seed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v11;
  int v12;
  uint64_t result;

  if (a4 < 0)
  {
    OUTLINED_FUNCTION_4_16();
    result = OUTLINED_FUNCTION_2_20();
    __break(1u);
  }
  else
  {
    v11 = *(void **)v5;
    v12 = *(unsigned __int8 *)(v5 + 8);
    type metadata accessor for MersenneTwisterGenerator();
    OUTLINED_FUNCTION_9_1();
    MersenneTwisterGenerator.init(seed:)(a4);
    specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(a1, v11, v12, a2, a3, a5);
    return OUTLINED_FUNCTION_4_2();
  }
  return result;
}

void MLDataTable.randomSplit(by:seed:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  void *v7;
  id v8;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v7 = *(void **)v4;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v8 = v7;
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 1;
    v11 = v7;
  }
  else
  {
    swift_retain();
    v12 = CMLTable.split(fraction:seed:)(a3, a4);
    v14 = v13;
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_9_1();
    v15 = _DataTable.init(impl:)(v12);
    OUTLINED_FUNCTION_9_1();
    v16 = _DataTable.init(impl:)(v14);
    OUTLINED_FUNCTION_102(v7);
    *(_QWORD *)a1 = v15;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a2 = v16;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void MLDataTable.randomSplitBySequence(proportion:by:on:seed:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, double a8)
{
  uint64_t v8;
  void *v16;
  char v17;
  uint64_t inited;
  uint64_t v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _UNKNOWN **v75;
  id v76;
  char v77;
  id v78;
  char v79;
  void *v80;
  char v81;

  v16 = *(void **)v8;
  v17 = *(_BYTE *)(v8 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  *(double *)(inited + 32) = a8;
  *(double *)(inited + 40) = 1.0 - a8;
  if (a7 < 0)
  {
    OUTLINED_FUNCTION_4_16();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v19 = inited;
    type metadata accessor for MersenneTwisterGenerator();
    OUTLINED_FUNCTION_9_1();
    MersenneTwisterGenerator.init(seed:)(a7);
    v80 = v20;
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v19, (uint64_t)&v80, v16, v17, a3, a4, a5, a6, (uint64_t)&v72);
    swift_release();
    swift_setDeallocating();
    v21 = (id)v72;
    v22 = v73;
    v23 = outlined copy of Result<_DataTable, Error>((id)v72, v73);
    OUTLINED_FUNCTION_5_45((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v63, v65, v67, v69);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    v31 = v78;
    v32 = v79;
    v76 = v78;
    v33 = MEMORY[0x24BEE1768];
    v77 = v79;
    v74 = MEMORY[0x24BEE1768];
    v75 = &protocol witness table for Int;
    v72 = 0;
    OUTLINED_FUNCTION_25_32();
    outlined consume of Result<_DataTable, Error>(v31, v32);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v72);
    v34 = v80;
    v35 = v81;
    v78 = v21;
    v79 = v22;
    v76 = v80;
    v77 = v81;
    v36 = outlined copy of Result<_DataTable, Error>(v21, v22);
    OUTLINED_FUNCTION_20_33((uint64_t)v36, v37, v38, v39, v40);
    outlined consume of Result<_DataTable, Error>(v34, v35);
    OUTLINED_FUNCTION_13_47();
    v41 = (id)v72;
    v42 = v73;
    v72 = (uint64_t)v21;
    v73 = v22;
    v43 = outlined copy of Result<_DataTable, Error>(v21, v22);
    OUTLINED_FUNCTION_5_45((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v64, v66, v68, v70);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    v51 = v78;
    v52 = v79;
    v75 = &protocol witness table for Int;
    v76 = v78;
    v77 = v79;
    v74 = v33;
    v72 = 1;
    OUTLINED_FUNCTION_25_32();
    outlined consume of Result<_DataTable, Error>(v51, v52);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v72);
    v53 = v80;
    LOBYTE(v33) = v81;
    v78 = v21;
    v79 = v22;
    v76 = v80;
    v77 = v81;
    v54 = outlined copy of Result<_DataTable, Error>(v21, v22);
    OUTLINED_FUNCTION_20_33((uint64_t)v54, v55, v56, v57, v58);
    outlined consume of Result<_DataTable, Error>(v53, v33);
    OUTLINED_FUNCTION_13_47();
    v59 = v72;
    v60 = v73;
    v72 = (uint64_t)v41;
    v73 = v42;
    outlined copy of Result<_DataTable, Error>(v41, v42);
    MLDataTable.size.getter();
    v61 = specialized RandomAccessCollection<>.distance(from:to:)();
    outlined consume of Result<_DataTable, Error>(v41, v42);
    v72 = v59;
    v73 = v60;
    OUTLINED_FUNCTION_14_39();
    MLDataTable.size.getter();
    v62 = specialized RandomAccessCollection<>.distance(from:to:)();
    OUTLINED_FUNCTION_13_47();
    OUTLINED_FUNCTION_17_15();
    if (v61 >= v62)
    {
      *(_QWORD *)a1 = v59;
      *(_BYTE *)(a1 + 8) = v60;
      *(_QWORD *)a2 = v41;
      *(_BYTE *)(a2 + 8) = v42;
    }
    else
    {
      *(_QWORD *)a1 = v41;
      *(_BYTE *)(a1 + 8) = v42;
      *(_QWORD *)a2 = v59;
      *(_BYTE *)(a2 + 8) = v60;
    }
  }
}

uint64_t MLDataTable.stratifiedSplitBySequence(proportions:by:on:seed:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;

  if (a6 < 0)
  {
    OUTLINED_FUNCTION_4_16();
    result = OUTLINED_FUNCTION_2_20();
    __break(1u);
  }
  else
  {
    v14 = *(void **)v7;
    v15 = *(_BYTE *)(v7 + 8);
    type metadata accessor for MersenneTwisterGenerator();
    OUTLINED_FUNCTION_9_1();
    MersenneTwisterGenerator.init(seed:)(a6);
    v19 = v16;
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(a1, (uint64_t)&v19, v14, v15, a2, a3, a4, a5, a7);
    return OUTLINED_FUNCTION_4_2();
  }
  return result;
}

void MLDataTable.stratifiedSplitBySequence<A>(proportions:by:on:generator:)(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v8;
  char v9;
  uint64_t v10;
  char v11;

  v9 = *((_BYTE *)v8 + 8);
  v10 = *v8;
  v11 = v9;
  stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(a1, a6, (uint64_t)&v10, a2, a3, a4, a5, a7, a8);
}

uint64_t _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySaySiGG_TG5TA_0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, a2);
}

void OUTLINED_FUNCTION_0_64()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_5_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  MLDataTable.subscript.getter(0x6F69746974726170, (void *)0xE90000000000006ELL, (uint64_t)va);
}

void OUTLINED_FUNCTION_9_46()
{
  void *v0;
  char v1;
  void *v2;

  outlined consume of MLDataValue(v0, v2, v1);
}

void OUTLINED_FUNCTION_13_47()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

id OUTLINED_FUNCTION_14_39()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

id OUTLINED_FUNCTION_17_29()
{
  char v0;
  void *v1;

  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

id OUTLINED_FUNCTION_19_35()
{
  void *v0;
  char v1;
  void *v2;

  return outlined copy of MLDataValue(v0, v2, v1);
}

void OUTLINED_FUNCTION_20_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MLDataTable.subscript.getter((uint64_t)va1, (uint64_t)va);
}

void OUTLINED_FUNCTION_22_33(uint64_t a1)
{
  char v1;
  void *v2;

  *(_BYTE *)(a1 + 24) = v1;
  outlined consume of Result<_DataTable, Error>(v2, 1);
}

uint64_t OUTLINED_FUNCTION_23_35()
{
  void *v0;
  uint64_t v1;

  outlined copy of Result<_DataTable, Error>(v0, 0);
  return _DataTable.columnNames.getter((_QWORD *)(v1 - 104));
}

void OUTLINED_FUNCTION_24_36()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  JUMPOUT(0x22075BB18);
}

void OUTLINED_FUNCTION_25_32()
{
  static MLUntypedColumn.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_30_31(uint64_t (*a1)(uint64_t *))
{
  return specialized Sequence.contains(where:)(a1);
}

id OUTLINED_FUNCTION_35_22()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_40_23(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  MLDataTable.subscript.getter(a1, v2, a2);
}

uint64_t MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[15];

  v68 = a1;
  v54 = type metadata accessor for Model();
  v53 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v61 = v5;
  v6 = type metadata accessor for URL();
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  OUTLINED_FUNCTION_3();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v58 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v57 = (char *)&v44 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v60 = (char *)&v44 - v12;
  v55 = type metadata accessor for Package();
  v56 = *(_QWORD *)(v55 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v59 = v14;
  v15 = type metadata accessor for MLPackageWritingOptions();
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_49();
  v17 = type metadata accessor for ScalarType();
  v66 = *(_QWORD *)(v17 - 8);
  v67 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_49();
  v21 = v20 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_49();
  v25 = v24 - v23;
  type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_49();
  v52 = *a2;
  v51 = a2[1];
  v50 = a2[2];
  v49 = a2[3];
  v48 = a2[4];
  v47 = a2[5];
  v46 = a2[6];
  v45 = a2[7];
  v44 = a2[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
  v27 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor))
                                       - 8)
                           + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_21AFE7DA0;
  v30 = (_QWORD *)(v29 + v28);
  *v30 = 0x7365736F70;
  v30[1] = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_21AFE7F40;
  v32 = v2;
  v33 = v2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  *(_QWORD *)(v31 + 32) = *(_QWORD *)(v33
                                    + *(int *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) + 40));
  *(int8x16_t *)(v31 + 40) = vextq_s8(*(int8x16_t *)(v32 + 24), *(int8x16_t *)(v32 + 24), 8uLL);
  MEMORY[0x220758C74](v31);
  v34 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload(v25, 1, 1, v34);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 104))(v21, *MEMORY[0x24BE6B8B8], v67);
  Tensor.init(zeros:scalarType:on:)();
  type metadata accessor for Tensor();
  Dictionary.init(dictionaryLiteral:)();
  v69[0] = v32;
  v35 = swift_retain();
  MEMORY[0x220758D58](v35);
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  v36 = v68;
  v37 = v69[14];
  Layer<>.writeMLPackage(withInput:output:to:options:)();
  if (v37)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_55();
    return swift_release();
  }
  else
  {
    v39 = v58;
    v40 = v56;
    v41 = v61;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_55();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v60, v36, v63);
    v42 = v59;
    Package.init(url:)();
    Package.rootModelURL.getter();
    Model.init(contentsOf:)();
    MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)();
    Package.setRootModel(_:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v39, v63);
    v69[0] = v52;
    v69[1] = v51;
    v69[2] = v50;
    v69[3] = v49;
    v69[4] = v48;
    v69[5] = v47;
    v69[6] = v46;
    v69[7] = v45;
    v69[8] = v44;
    MLHandActionClassifier.GraphCNN.addMetadata(_:_:)(v42, v69);
    v43 = v55;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v41, v54);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v42, v43);
  }
}

uint64_t MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;

  v4 = type metadata accessor for TensorShape();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v51 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Tensor();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v51 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v51 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v51 - v23;
  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v25 = swift_bridgeObjectRetain();
    specialized Collection.first.getter(v25, v12);
    swift_bridgeObjectRelease();
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor));
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v26) == 1)
    {
      outlined destroy of (key: String, value: Tensor)?((uint64_t)v12);
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = (char *)v12 + *(int *)(v26 + 48);
      v55 = v14;
      v28 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v28(v21, v27, v13);
      v28(v24, v21, v13);
      Tensor.shape.getter();
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v29 = swift_allocObject();
      v53 = xmmword_21AFE7F40;
      *(_OWORD *)(v29 + 16) = xmmword_21AFE7F40;
      v30 = a2;
      v31 = a2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
      swift_beginAccess();
      v52 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
      *(_QWORD *)(v29 + 32) = *(_QWORD *)(v31 + *(int *)(v52 + 40));
      *(int8x16_t *)(v29 + 40) = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
      MEMORY[0x220758C74](v29);
      v32 = TensorShape.dimensions.getter();
      v33 = (_QWORD *)TensorShape.dimensions.getter();
      v34 = specialized static Array<A>.== infix(_:_:)(v32, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = v57;
      v36 = *(void (**)(char *, uint64_t))(v56 + 8);
      v36(v6, v57);
      v36(v9, v35);
      if ((v34 & 1) != 0)
      {
        Tensor.expandingShape(at:)();
        v37 = v58;
        MLHandActionClassifier.GraphCNN.callAsFunction(_:)();
        v38 = v55;
        v39 = *(void (**)(char *, uint64_t))(v55 + 8);
        v39(v16, v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Tensor)>);
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Tensor));
        v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80);
        v42 = (v41 + 32) & ~v41;
        v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_21AFE7DA0;
        v44 = (_QWORD *)(v43 + v42);
        v45 = v43 + v42 + *(int *)(v40 + 48);
        *v44 = 0xD000000000000010;
        v44[1] = 0x800000021AFF7470;
        (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v45, v37, v13);
        v46 = Dictionary.init(dictionaryLiteral:)();
        v39(v37, v13);
        v39(v24, v13);
        return v46;
      }
      v59 = 0;
      v60 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v59 = 0xD00000000000001ALL;
      v60 = 0x800000021AFF74B0;
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v53;
      *(_QWORD *)(v48 + 32) = *(_QWORD *)(v31 + *(int *)(v52 + 40));
      *(int8x16_t *)(v48 + 40) = vextq_s8(*(int8x16_t *)(v30 + 24), *(int8x16_t *)(v30 + 24), 8uLL);
      v49._countAndFlagsBits = MEMORY[0x22075AAA4]();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = MLHandActionClassifier.GraphCNN.MLPackageRepresentation.forward(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation();
  return Layer.placed(on:)();
}

uint64_t MLHandActionClassifier.GraphCNN.convertIntoClassifier(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v0 = type metadata accessor for ModelKind();
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  v1 = MEMORY[0x24BDAC7A8](v0);
  v33 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v27 - v3;
  v5 = type metadata accessor for MLProgram();
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeatureType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model.predictedFeatureName.setter();
  Model.predictedProbabilitiesName.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  type metadata accessor for FeatureDescription();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21AFE7F70;
  FeatureType.StringParameters.init(optional:)();
  v11 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v12 = v27;
  v11(v10, *MEMORY[0x24BE62578], v7);
  FeatureDescription.init(name:type:description:)();
  v13 = v28;
  static FeatureType.dictionaryWithStringKeys(optional:)();
  v29 = (void *)0x800000021AFF1650;
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  Model.kind.getter();
  v14 = v12;
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v4, v13);
  if ((_DWORD)v15 == *MEMORY[0x24BE632E0])
  {
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 96))(v4, v13);
    v17 = v4;
    v18 = v30;
    v19 = v31;
    v20 = v32;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v30, v17, v32);
    v21 = swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 0xD000000000000010;
    v22._object = (void *)0x800000021AFF7470;
    v23._countAndFlagsBits = 0xD000000000000012;
    v23._object = v29;
    v24._countAndFlagsBits = 0x6C6562616CLL;
    v24._object = (void *)0xE500000000000000;
    MLProgram.addClassifierSpecification(classLabels:probabilityTensorName:outputProbabilityName:outputLabelName:)((Swift::OpaquePointer)v21, v22, v23, v24);
    swift_bridgeObjectRelease();
    v25 = v33;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v33, v18, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v25, v16, v13);
    Model.kind.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v18, v20);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v13);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.addMetadata(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  _QWORD v18[4];
  uint64_t v19;
  _BYTE v20[32];
  uint64_t v21;

  v18[3] = a1;
  v21 = type metadata accessor for Package.ModelMetadata();
  v19 = *(_QWORD *)(v21 - 8);
  v3 = MEMORY[0x24BDAC7A8](v21);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v18 - v6;
  v8 = a2[1];
  v9 = a2[5];
  v10 = a2[6];
  v18[1] = a2[4];
  v18[2] = v10;
  v11 = a2[8];
  Package.ModelMetadata.init()();
  if (v8)
  {
    swift_bridgeObjectRetain();
    Package.ModelMetadata.author.setter();
    swift_bridgeObjectRetain();
    Package.ModelMetadata.description.setter();
    swift_bridgeObjectRetain();
    Package.ModelMetadata.version.setter();
    if (v9)
    {
      swift_bridgeObjectRetain();
      Package.ModelMetadata.license.setter();
    }
    if (v11)
    {
      swift_bridgeObjectRetain();
      Package.ModelMetadata.creatorDefined.setter();
    }
  }
  else
  {
    v12 = NSFullUserName();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Package.ModelMetadata.author.setter();
  }
  getOSVersion()();
  v13 = (void (*)(_BYTE *, _QWORD))Package.ModelMetadata.creatorDefined.modify();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  v13(v20, 0);
  v14 = v19;
  v15 = v21;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v5, v7, v21);
  Package.writeMetadata(_:)();
  v16 = *(void (**)(char *, uint64_t))(v14 + 8);
  v16(v5, v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v7, v15);
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_24DE241A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_24DE241A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_24DE241A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation, &unk_24DE241A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNN.MLPackageRepresentation and conformance MLHandActionClassifier.GraphCNN.MLPackageRepresentation);
  }
  return result;
}

void *type metadata accessor for MLHandActionClassifier.GraphCNN.MLPackageRepresentation()
{
  return &unk_24DE241A0;
}

uint64_t outlined destroy of (key: String, value: Tensor)?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Tensor)?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2[2])
    return 0;
  if (!v2 || (_QWORD *)result == a2)
    return 1;
  if (*(_QWORD *)(result + 32) != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  if (*(_QWORD *)(result + 40) != a2[5])
    return 0;
  if (v2 == 2)
    return 1;
  v3 = 3 - v2;
  v4 = (uint64_t *)(result + 48);
  v5 = a2 + 6;
  while (v3 != 1)
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v5++;
    result = v6 == v8;
    if (v6 != v8 || v3++ == 0)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_55()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 224) + 8))(v0, *(_QWORD *)(v1 - 216));
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sypSgWOcTm_0(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

id MLDecisionTreeClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_8_51() + 20));
}

uint64_t type metadata accessor for MLDecisionTreeClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLDecisionTreeClassifier;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLDecisionTreeClassifier.model : MLDecisionTreeClassifier(id *a1)
{
  MLDecisionTreeClassifier.model.setter((uint64_t)*a1);
}

void MLDecisionTreeClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_51() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLDecisionTreeClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_8_51() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLDecisionTreeClassifier.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_8_51() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLDecisionTreeClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_8_51() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDecisionTreeClassifier.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_51();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.featureColumns.getter()
{
  OUTLINED_FUNCTION_8_51();
  return swift_bridgeObjectRetain();
}

void MLDecisionTreeClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_51() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDecisionTreeClassifier.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_51();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)(v1 + *(int *)(OUTLINED_FUNCTION_8_51() + 32));
  return outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for MLDecisionTreeClassifier.ModelParameters(a2, a1);
  return a2;
}

void MLDecisionTreeClassifier.trainingMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8_51();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 36), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLDecisionTreeClassifier.validationMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8_51();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 40), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void static MLDecisionTreeClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

#error "21AF3F884: call analysis failed (funcsize=61)"

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD **)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v4 + *(int *)(v1 + 20)) = *(_QWORD *)(v0 + 88);
  outlined init with take of TreeRegressorModel(v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  v5 = (_OWORD *)(v4 + *(int *)(v1 + 32));
  v7 = v2[2];
  v6 = v2[3];
  v8 = v2[1];
  *v5 = *v2;
  v5[1] = v8;
  v5[2] = v7;
  v5[3] = v6;
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = v2 + *(int *)(v0 + 100);
  v4 = v2 + *(int *)(v0 + 96);
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(*(_QWORD *)(v0 + 56));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, type metadata accessor for MLClassifierMetrics);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t inited;
  void *v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::String v109;
  int *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t);
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  __int128 v199;
  uint64_t v200;
  _OWORD v201[4];
  uint64_t v202;

  OUTLINED_FUNCTION_8_1();
  v191 = v0;
  v4 = v3;
  v190 = v5;
  v198 = v6;
  v188 = (_QWORD *)v7;
  v197 = v8;
  v10 = v9;
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_211();
  v14 = OUTLINED_FUNCTION_28_3(v13);
  type metadata accessor for MLClassifierMetrics(v14);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v17);
  v18 = type metadata accessor for AnyTreeClassifierModel();
  v173 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v175 = (uint64_t)&v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = v19;
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_211();
  v177 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  v184 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v25);
  v180 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v29);
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v31);
  v202 = type metadata accessor for DataFrame();
  v193 = *(_QWORD *)(v202 - 8);
  MEMORY[0x24BDAC7A8](v202);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v35);
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_91_1();
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v43);
  v45 = (char *)&v157 - v44;
  v195 = type metadata accessor for BoostedTreeConfiguration();
  v196 = *(_QWORD *)(v195 - 8);
  MEMORY[0x24BDAC7A8](v195);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_55_16();
  v47 = type metadata accessor for MLDecisionTreeClassifier();
  v192 = (uint64_t)v10 + *(int *)(v47 + 36);
  MLClassifierMetrics.init()(v47, v48, v49, v50, v51, v52, v53, v54, v157, (uint64_t)v158, v159, v160, v161, v162, v163, v164, v165, v166, v167,
    v168);
  v172 = (int *)v47;
  v55 = *(int *)(v47 + 40);
  v176 = v10;
  v56 = (uint64_t *)((char *)v10 + v55);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v57, 0xD0000000000000C0);
  *v56 = v58;
  v59 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v189 = v56;
  v168 = v59;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v4, (uint64_t)v201);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)v201);
  v194 = v4;
  _sypSgWOcTm_0((uint64_t)(v4 + 1), (uint64_t)&v199, &demangling cache variable for type metadata for Any?);
  if (v200)
  {
    v60 = (uint64_t)&v45[*(int *)(v37 + 48)];
    outlined init with take of Any(&v199, v201);
    OUTLINED_FUNCTION_85_9();
    v61 = v1;
    v62 = v191;
    MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v62)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_46();
      v64 = OUTLINED_FUNCTION_33_30();
      OUTLINED_FUNCTION_97_6(v64, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
LABEL_5:
      OUTLINED_FUNCTION_4_52();
      OUTLINED_FUNCTION_59_18();
      goto LABEL_6;
    }
    v65 = (uint64_t)v45;
    v191 = v60;
    v160 = v37;
    OUTLINED_FUNCTION_97_6(v63, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v45, (uint64_t)v188, v198, v190);
    v159 = v66;
    swift_bridgeObjectRelease();
    v67 = v160;
    v68 = v186;
    v69 = v186 + *(int *)(v160 + 48);
    v70 = v193;
    v158 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v193 + 16);
    v71 = v158(v186, v45, v202);
    OUTLINED_FUNCTION_66_16(v71, v72, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v69, 1, v202) == 1)
    {
      v190 = 0;
      outlined destroy of URL?(v69, &demangling cache variable for type metadata for DataFrame?);
      v73 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
      v73(v68, v202);
    }
    else
    {
      v85 = v178;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v178, v69, v202);
      v86 = *(void (**)(_QWORD, _QWORD))(v70 + 8);
      OUTLINED_FUNCTION_41_19(v68);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
      v88 = v198;
      *(_QWORD *)(inited + 32) = v188;
      *(_QWORD *)(inited + 40) = v88;
      swift_bridgeObjectRetain();
      v89._countAndFlagsBits = 0x73616C4365657254;
      v89._object = (void *)0xEE00726569666973;
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v89);
      if (v90)
      {
        swift_setDeallocating();
        v61 = (_QWORD *)inited;
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_46_18();
        OUTLINED_FUNCTION_5_46();
        OUTLINED_FUNCTION_41_19(v197);
        v91 = OUTLINED_FUNCTION_41_19(v85);
        OUTLINED_FUNCTION_50_22(v91, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        goto LABEL_5;
      }
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      v101 = swift_allocObject();
      *(_OWORD *)(v101 + 16) = xmmword_21AFE7F70;
      v102 = MEMORY[0x24BEE1768];
      *(_QWORD *)(v101 + 32) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v101 + 40) = v102;
      v103._countAndFlagsBits = (uint64_t)v188;
      v103._object = v88;
      v104._countAndFlagsBits = 0x73616C4365657254;
      v104._object = (void *)0xEE00726569666973;
      DataFrame.validateColumnTypes(_:_:context:)(v103, (Swift::OpaquePointer)v101, v104);
      v61 = (_QWORD *)v196;
      OUTLINED_FUNCTION_82_9();
      if (v105)
      {
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_46_18();
        OUTLINED_FUNCTION_101();
        OUTLINED_FUNCTION_5_46();
        OUTLINED_FUNCTION_41_19(v197);
        v106 = OUTLINED_FUNCTION_41_19(v85);
        OUTLINED_FUNCTION_50_22(v106, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        ((void (*)(uint64_t, uint64_t))v61[1])(v2, v195);
        OUTLINED_FUNCTION_59_18();
        goto LABEL_6;
      }
      v123 = v85;
      v73 = v86;
      v86(v123, v202);
      OUTLINED_FUNCTION_101();
      v67 = v160;
    }
    v74 = v182;
    v75 = v182 + *(int *)(v67 + 48);
    v76 = (void (*)(uint64_t, uint64_t, uint64_t))v158;
    v158(v182, (char *)v65, v202);
    v77 = v191;
    v178 = v75;
    _sypSgWOcTm_0(v191, v75, &demangling cache variable for type metadata for DataFrame?);
    v78 = v198;
    MEMORY[0x220758A1C](v188, v198);
    v73(v74, v202);
    v79 = v183;
    v80 = v183 + *(int *)(v67 + 48);
    v186 = v65;
    v76(v183, v65, v202);
    _sypSgWOcTm_0(v77, v80, &demangling cache variable for type metadata for DataFrame?);
    v81 = v184;
    outlined init with take of DataFrame?(v80, v184);
    v82 = (uint64_t (*)(uint64_t, uint64_t))v73;
    if (__swift_getEnumTagSinglePayload(v81, 1, v202) == 1)
    {
      v83 = OUTLINED_FUNCTION_48_2(v79);
      OUTLINED_FUNCTION_50_22(v83, &demangling cache variable for type metadata for DataFrame?);
      v84 = v181;
      OUTLINED_FUNCTION_57_15(v181, 1);
    }
    else
    {
      v84 = v181;
      MEMORY[0x220758A1C](v188, v78);
      OUTLINED_FUNCTION_48_2(v81);
      OUTLINED_FUNCTION_57_15(v84, 0);
      OUTLINED_FUNCTION_48_2(v79);
    }
    v92 = v179;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v179, v2, v195);
    swift_bridgeObjectRetain();
    v93 = v159;
    swift_bridgeObjectRetain();
    v61 = v185;
    v94 = v190;
    AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v84, (uint64_t)v188, v78, v93, v92, v185);
    if (v94)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_46();
      v96 = v82(v197, v202);
      OUTLINED_FUNCTION_39_20(v96, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      v97 = OUTLINED_FUNCTION_77_11();
      v99 = v98(v97);
      OUTLINED_FUNCTION_72_13(v99, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_59_18();
    }
    else
    {
      v187 = (void (*)(uint64_t, uint64_t))v82;
      OUTLINED_FUNCTION_72_13(v95, &demangling cache variable for type metadata for DataFrame?);
      v100 = v191;
      AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v186, v191, 0, 0, v177);
      OUTLINED_FUNCTION_82_9();
      if ((AnalyticsReporter.init()() & 1) == 0)
      {
        v107 = v171 + *(int *)(v160 + 48);
        OUTLINED_FUNCTION_73_13();
        _sypSgWOcTm_0(v100, v107, &demangling cache variable for type metadata for DataFrame?);
        v108 = DataFrame.shape.getter();
        OUTLINED_FUNCTION_27_39();
        v109._countAndFlagsBits = 0xD000000000000015;
        v109._object = (void *)0x800000021AFF21D0;
        AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeClassifier, v109, v108);
      }
      v110 = v172;
      v111 = v176;
      v112 = (uint64_t *)((char *)v176 + v172[6]);
      v113 = (uint64_t)v188;
      v114 = (uint64_t)v198;
      v188 = v112;
      *v112 = v113;
      v112[1] = v114;
      v115 = v194;
      v198 = (char *)v111 + v110[8];
      outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v194, (uint64_t)v198);
      v184 = v110[7];
      *(uint64_t *)((char *)v111 + v184) = v159;
      v116 = v177;
      v117 = v175;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0((uint64_t)v177, v175, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
      v118 = (*(unsigned __int8 *)(v173 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80);
      v61 = (_QWORD *)swift_allocObject();
      outlined init with take of TreeRegressorModel(v117, (uint64_t)v61 + v118, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
      v119 = v190;
      specialized blockAwait<A>(_:)();
      if (v119)
      {
        v190 = v119;
        swift_release();
        outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)v115);
        v121 = OUTLINED_FUNCTION_27_39();
        OUTLINED_FUNCTION_84_6(v121, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v185, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
        OUTLINED_FUNCTION_39_20(v122, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_4_52();
        OUTLINED_FUNCTION_59_18();
      }
      else
      {
        v124 = v120;
        swift_release();
        v125 = v110[5];
        *(uint64_t *)((char *)v111 + v125) = v124;
        OUTLINED_FUNCTION_97((uint64_t)v116, v126, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        v127 = v170;
        OUTLINED_FUNCTION_18();
        AnyTreeClassifierModel.applied(to:eventHandler:)(v128);
        OUTLINED_FUNCTION_82_9();
        v132 = *v111;
        v133 = v111[1];
        v134 = v169;
        MEMORY[0x220758A1C](v132, v133);
        MEMORY[0x220758A1C](v132, v133);
        v135 = v167;
        AnyClassificationMetrics.init(_:_:)();
        v187(v127, v202);
        OUTLINED_FUNCTION_85_7(v135, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)&v197);
        OUTLINED_FUNCTION_44_26();
        outlined assign with take of MLClassifierMetrics(v134, v192);
        v136 = v165;
        v137 = v165 + *(int *)(v160 + 48);
        v138 = OUTLINED_FUNCTION_73_13();
        OUTLINED_FUNCTION_66_16(v138, v139, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v137, 1, v202) == 1)
        {
          OUTLINED_FUNCTION_5_46();
          v140 = OUTLINED_FUNCTION_11_34(v197);
          OUTLINED_FUNCTION_81_12(v140, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
          OUTLINED_FUNCTION_84_6(v141, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_50_22(v142, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_4_52();
          outlined destroy of URL?(v137, &demangling cache variable for type metadata for DataFrame?);
          OUTLINED_FUNCTION_11_34(v136);
          goto LABEL_7;
        }
        v143 = v164;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 32))(v164, v137, v202);
        OUTLINED_FUNCTION_11_34(v136);
        v144 = v163;
        OUTLINED_FUNCTION_18();
        v145 = v176;
        v146 = v190;
        AnyTreeClassifierModel.applied(to:eventHandler:)(v147);
        v148 = (uint64_t)v145;
        OUTLINED_FUNCTION_82_9();
        if (!v146)
        {
          v150 = *v145;
          v151 = v145[1];
          MEMORY[0x220758A1C](*v145, v151);
          v152 = v164;
          MEMORY[0x220758A1C](v150, v151);
          v153 = v162;
          AnyClassificationMetrics.init(_:_:)();
          OUTLINED_FUNCTION_27_12(v144);
          OUTLINED_FUNCTION_5_46();
          OUTLINED_FUNCTION_27_12(v197);
          v154 = OUTLINED_FUNCTION_27_12(v152);
          OUTLINED_FUNCTION_81_12(v154, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
          OUTLINED_FUNCTION_84_6(v155, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_39_20(v156, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_4_52();
          OUTLINED_FUNCTION_85_7(v153, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)&v192);
          OUTLINED_FUNCTION_44_26();
          outlined assign with take of MLClassifierMetrics(v153, (uint64_t)v189);
          goto LABEL_7;
        }
        outlined destroy of MLDecisionTreeClassifier.ModelParameters(v149);
        OUTLINED_FUNCTION_27_12(v197);
        OUTLINED_FUNCTION_27_12(v143);
        v61 = type metadata accessor for AnyTreeClassifierModel;
        OUTLINED_FUNCTION_82_5((uint64_t)v177);
        OUTLINED_FUNCTION_84_6(v129, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
        OUTLINED_FUNCTION_50_22(v130, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_4_52();
        OUTLINED_FUNCTION_82_5(v148);

        OUTLINED_FUNCTION_59_18();
      }
      v131 = (uint64_t)v198;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLDecisionTreeClassifier.ModelParameters(v131);
    }
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v192, type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v61, type metadata accessor for MLClassifierMetrics);
LABEL_7:
    OUTLINED_FUNCTION_7();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  destroy for MLLogisticRegressionClassifier.ModelParameters(a1);
  return a1;
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_161();
  v8 = *((_BYTE *)a1 + 8);
  v9 = *a1;
  v10 = v8;
  DataFrame.init(_:)((uint64_t)&v9);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters(a5, (uint64_t)&v9);
  MLDecisionTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)a5);
  OUTLINED_FUNCTION_127();
}

void MLDecisionTreeClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  v3 = v2;
  v35 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  v34 = v5;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v36 = v7;
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_36_6();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v40 = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for AnyTreeClassifierModel();
  v42 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v39 = (uint64_t)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v41 = v15;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_16();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  v43 = v18;
  v19 = type metadata accessor for MLDecisionTreeClassifier();
  v44 = v3 + *(int *)(v19 + 36);
  MLClassifierMetrics.init()(v19, v20, v21, v22, v23, v24, v25, v26, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
    v43);
  v33 = v19;
  v27 = *(int *)(v19 + 40);
  v37 = v3;
  v28 = (_QWORD *)(v3 + v27);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v29, 0xD0000000000000C0);
  *v28 = v30;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v31 = (char *)sub_21AF40E34
      + 4 * byte_21AFEEBF0[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AF40E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v27;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)(v4 - 176) = v2;
    specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
    v7 = v6;
    BoostedTreeConfiguration.init()();
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v7, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
    lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
    v8 = *(void **)(v4 - 128);
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
    if (v8)
    {
      v9 = specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
      BoostedTreeConfiguration.init()();
      v10 = *(_QWORD *)(v4 - 160);
      AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v9, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
      v11 = *(_QWORD *)(v4 - 168);
      UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v10, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);

      v3 = v11;
    }
    v13 = *(_QWORD *)(v4 - 136);
    outlined init with take of TreeRegressorModel(v3, v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v14 = *(_QWORD *)(v4 - 152);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 144) + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject();
    outlined init with take of TreeRegressorModel(v14, v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    specialized blockAwait<A>(_:)();
    v19 = v18;
    swift_release();
    v20 = *(int **)(v4 - 216);
    v21 = *(_QWORD *)(v4 - 184);
    *(_QWORD *)(v21 + v20[5]) = v19;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v23 = *(_QWORD *)(v4 - 200);
    v22 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_WORD *)(v22 + 16) = 256;
    swift_storeEnumTagMultiPayload();
    v24 = v21 + v20[8];
    *(_OWORD *)(v24 + 24) = 0u;
    *(_QWORD *)v24 = 6;
    *(_OWORD *)(v24 + 40) = xmmword_21AFE84E0;
    *(_QWORD *)(v24 + 56) = 42;
    *(_OWORD *)(v24 + 8) = 0u;
    v25 = *(_QWORD *)(v4 - 208);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v22, v25, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v4 - 88) = v23;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v4 - 112));
    outlined init with take of TreeRegressorModel(v25, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?(v4 - 112, v24 + 8);
    OUTLINED_FUNCTION_82_5(v22);
    v27 = (_QWORD *)(v21 + v20[6]);
    *v27 = 0;
    v27[1] = 0xE000000000000000;
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    *(_QWORD *)(v21 + v20[7]) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD00000000000004ELL;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF74D0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 0;
    swift_willThrow(0.0);
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_82_5(*(_QWORD *)(v4 - 120));
    OUTLINED_FUNCTION_82_5(v2);
  }
  OUTLINED_FUNCTION_7();
}

void static MLDecisionTreeClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_1();
  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  v4 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v4);
  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLDecisionTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _UNKNOWN **v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_8_1();
  v39 = v2;
  v40 = v3;
  v5 = v4;
  v37 = v6;
  v38 = v7;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v34 = v9;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_211();
  v36 = v11;
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v46 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v31 - v18;
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_55_16();
  v35 = v5;
  _sypSgWOcTm_0((uint64_t)(v5 + 1), (uint64_t)&v44, &demangling cache variable for type metadata for Any?);
  if (v45)
  {
    v21 = v1 + *(int *)(v14 + 48);
    outlined init with take of Any(&v44, &v41);
    OUTLINED_FUNCTION_85_9();
    MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v22, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    if (!v0)
    {
      v23 = (uint64_t)&v19[*(int *)(v14 + 48)];
      v24 = OUTLINED_FUNCTION_93();
      v32 = *(_QWORD *)(v24 - 8);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
      v25(v19, v1, v24);
      v33 = v23;
      _sypSgWOcTm_0(v21, v23, &demangling cache variable for type metadata for DataFrame?);
      v31[0] = v46 + *(int *)(v14 + 48);
      v26 = v31[0];
      v31[1] = v24;
      ((void (*)(uint64_t, uint64_t))v25)(v46, v1);
      _sypSgWOcTm_0(v21, v26, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLDecisionTreeClassifier.ModelParameters(v35, (uint64_t)&v41);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      outlined destroy of MLDecisionTreeClassifier.ModelParameters((uint64_t)&v41);
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v40, v36, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v27 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v28 = TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      OUTLINED_FUNCTION_69_2(v46, *(uint64_t (**)(uint64_t, _QWORD))(v32 + 8));
      outlined destroy of URL?(v33, &demangling cache variable for type metadata for DataFrame?);
      v42 = v27;
      v43 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(_QWORD *)&v41 = v28;
      v29 = v34;
      OUTLINED_FUNCTION_97(v40, v30, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v41, v29, 3);
      outlined destroy of URL?(v1, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLDecisionTreeClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeClassifier>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLDecisionTreeClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v5, 3);
  }
}

void closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLDecisionTreeClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[35] = a1;
  v2[36] = a2;
  v2[37] = type metadata accessor for AnyClassificationMetrics();
  v2[38] = OUTLINED_FUNCTION_4_36();
  v2[39] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  v2[40] = OUTLINED_FUNCTION_4_36();
  v2[41] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_71_10();
  v2[42] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[43] = OUTLINED_FUNCTION_4_6();
  v2[44] = OUTLINED_FUNCTION_8_51();
  v2[45] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
  v2[46] = OUTLINED_FUNCTION_4_6();
  v2[47] = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  v2[48] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[49] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[50] = v3;
  v2[51] = *(_QWORD *)(v3 - 8);
  v2[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[53] = OUTLINED_FUNCTION_4_6();
  v2[54] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[55] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLDecisionTreeClassifier.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 288) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v33 = (uint64_t *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 440);
    v7 = *(_QWORD *)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 408);
    v10 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 376);
    outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 424), v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v5 + *(int *)(v6 + 32), v9);
    _sypSgWOcTm_0(v5 + *(int *)(v6 + 20), v10, &demangling cache variable for type metadata for DataFrame?);
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
    *(_QWORD *)(v0 + 80) = BoostedTreeConfiguration.maximumDepth.getter();
    BoostedTreeConfiguration.minimumLossReduction.getter();
    *(_QWORD *)(v0 + 120) = v13;
    BoostedTreeConfiguration.minimumChildWeight.getter();
    *(_QWORD *)(v0 + 128) = v14;
    *(_QWORD *)(v0 + 136) = BoostedTreeConfiguration.randomSeed.getter();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLDecisionTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(v10, v12);
    if (__swift_getEnumTagSinglePayload(v12, 1, v11) == 1)
    {
      v15 = *(_QWORD *)(v0 + 368);
      swift_storeEnumTagMultiPayload();
      outlined destroy of URL?(v15, &demangling cache variable for type metadata for MLDecisionTreeClassifier.ModelParameters.ValidationData?);
    }
    else
    {
      outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384), (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    }
    v17 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 440);
    v18 = *(_QWORD *)(v0 + 408);
    v20 = *(_QWORD *)(v0 + 392);
    v19 = *(_QWORD *)(v0 + 400);
    v21 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 344);
    v31 = *(_QWORD *)(v0 + 416);
    v32 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 376);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v33);
    outlined init with take of TreeRegressorModel(v21, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)v33, v0 + 88);
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v19);
    v24 = (uint64_t *)(v16 + *(int *)(v17 + 24));
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(v16 + *(int *)(v17 + 28));
    v28 = v32 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v28, v22, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
    v29 = OUTLINED_FUNCTION_63_8();
    result = __swift_getEnumTagSinglePayload(v22, 1, v29);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLDecisionTreeClassifier.ModelParameters((uint64_t *)(v0 + 80), v0 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 448) = v30;
      *v30 = v0;
      v30[1] = MLDecisionTreeClassifier.init(delegate:);
      return MLDecisionTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344), v26, v25, v27, v0 + 16);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 280), (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier);
  v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 440);
    v7 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 320);
    v12 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters(v0 + 80);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v6, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    outlined init with take of TreeRegressorModel(v9, v8, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    OUTLINED_FUNCTION_83_4();
    OUTLINED_FUNCTION_74_14();
    outlined assign with take of MLClassifierMetrics(v8, v13 + *(int *)(v7 + 36));
    v14 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v14, v10, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
    {
      outlined destroy of URL?(*(_QWORD *)(v0 + 320), &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 352);
      v16 = *(_QWORD *)(v0 + 312);
      v17 = *(_QWORD *)(v0 + 304);
      v18 = *(_QWORD *)(v0 + 280);
      OUTLINED_FUNCTION_65_15(*(_QWORD *)(v0 + 320));
      outlined init with take of TreeRegressorModel(v16, v17, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v18 + *(int *)(v15 + 40), type metadata accessor for MLClassifierMetrics);
      OUTLINED_FUNCTION_65_15(v17);
      OUTLINED_FUNCTION_74_14();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 440);
  swift_release();
  outlined destroy of MLDecisionTreeClassifier.ModelParameters(v0 + 80);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLDecisionTreeClassifier.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLDecisionTreeClassifier();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLDecisionTreeClassifier.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLDecisionTreeClassifier.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLDecisionTreeClassifier.evaluation(on:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;

  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_8_51();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11)
    goto LABEL_5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v13 = (_QWORD *)(v2 + *(int *)(v8 + 24));
  v14 = v13[1];
  *(_QWORD *)(inited + 32) = *v13;
  *(_QWORD *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x6C6562614CLL;
  v15._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    OUTLINED_FUNCTION_83_4();
    goto LABEL_6;
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, (uint64_t)v7);
  outlined init with take of TreeRegressorModel((uint64_t)v7, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
  OUTLINED_FUNCTION_83_4();
LABEL_6:
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLDecisionTreeClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLDecisionTreeClassifier.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLDecisionTreeClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  v5 = v4;
  v37 = v6;
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_46_2();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v30 = v5[1];
  v35 = v5[2];
  v36 = *v5;
  v33 = v5[4];
  v34 = v5[3];
  v12 = v5[6];
  v32 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD000000000000016, 0x800000021AFF7520, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v29 = v13;
    v38 = v2;
    v28 = v8;
    OUTLINED_FUNCTION_97(v31, v15, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    if (v30)
    {
      v16 = v36;
      v17 = v36;
      v18 = v30;
      v19 = v35;
      v20 = v34;
      v21 = v33;
      v22 = v32;
      v23 = v12;
      v24 = v29;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v19 = 0xD000000000000033;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v23 = 49;
      v16 = v36;
    }
    v39[0] = v17;
    v39[1] = v18;
    v39[2] = v19;
    v39[3] = v20;
    v39[4] = v21;
    v39[5] = v22;
    v39[6] = v23;
    v39[7] = v24;
    v39[8] = v14;
    outlined copy of MLModelMetadata?(v16, v30);
    specialized CoreMLExportable.export(metadata:)(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v28);
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLDecisionTreeClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_36_6();
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLDecisionTreeClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  OUTLINED_FUNCTION_7();
}

unint64_t MLDecisionTreeClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_54_0();
  v3 = OUTLINED_FUNCTION_8_51();
  v4 = MLDecisionTreeClassifier.ModelParameters.description.getter();
  v6 = v5;
  v7 = MLClassifierMetrics.description.getter();
  v9 = v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v0 + *(int *)(v3 + 40), v1, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics.Contents);
  v10 = MLClassifierMetrics.description.getter();
  v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x800000021AFF1480;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._countAndFlagsBits = v10;
    v16._object = v12;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000020;
    v17._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000023;
}

void MLDecisionTreeClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLDecisionTreeClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t partial apply for closure #1 in MLDecisionTreeClassifier.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v2);
}

void sub_21AF42D90(id *a1@<X8>)
{
  *a1 = MLDecisionTreeClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLDecisionTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  void **v38;
  void **v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void *v47;
  id v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  void **v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  void *v61;
  id v62;
  uint64_t *v63;
  uint64_t v64;
  char *v66;
  int *v67;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = type metadata accessor for AnyTreeClassifierModel();
    v14 = *(int *)(v13 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = *(int *)(v13 + 28);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    *(_QWORD *)v19 = v21;
    v19[8] = (char)v20;
    v22 = a3[5];
    v23 = a3[6];
    v24 = *(void **)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v24;
    v25 = (_QWORD *)((char *)a1 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = a3[8];
    v67 = a3;
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
    v31 = (_OWORD *)((char *)a1 + v28 + 8);
    v32 = (_OWORD *)((char *)a2 + v28 + 8);
    v33 = *(_QWORD *)((char *)a2 + v28 + 32);
    swift_bridgeObjectRetain();
    v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((_QWORD *)v29 + 4) = v33;
      (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      v35 = v32[1];
      *v31 = *v32;
      v31[1] = v35;
    }
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
    *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
    v36 = a3;
    v37 = a3[9];
    v38 = (void **)((char *)a1 + v37);
    v39 = (void **)((char *)a2 + v37);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v47 = *v39;
      v48 = v47;
      *v38 = v47;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v38 = *v39;
      v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v42 = *(int *)(v41 + 20);
      v66 = (char *)v38 + v42;
      v43 = (char *)v39 + v42;
      v44 = type metadata accessor for DataFrame();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v46 = v43;
      v36 = v67;
      v45(v66, v46, v44);
      v45((char *)v38 + *(int *)(v41 + 24), (char *)v39 + *(int *)(v41 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v38, v39, v50);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v51 = v36[10];
    v52 = (void **)((char *)a1 + v51);
    v53 = (void **)((char *)a2 + v51);
    v54 = swift_getEnumCaseMultiPayload();
    if (v54 == 2)
    {
      v61 = *v53;
      v62 = v61;
      *v52 = v61;
    }
    else if (v54 == 1)
    {
      *v52 = *v53;
      v55 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v56 = *(int *)(v55 + 20);
      v57 = (char *)v52 + v56;
      v58 = (char *)v53 + v56;
      v59 = type metadata accessor for DataFrame();
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v57, v58, v59);
      v60((char *)v52 + *(int *)(v55 + 24), (char *)v53 + *(int *)(v55 + 24), v59);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v64 = __swift_instantiateConcreteTypeFromMangledName(v63);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v52, v53, v64);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLDecisionTreeClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  void (*v23)(id *, uint64_t);
  void (*v24)(char *, uint64_t);

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for AnyTreeClassifierModel() + 24);
  v5 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(_QWORD *)(v6 + 32))
    __swift_destroy_boxed_opaque_existential_0(v6 + 8);
  v7 = (id *)(a1 + a2[9]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v10 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v11 = (char *)v7 + *(int *)(v10 + 20);
      v12 = type metadata accessor for DataFrame();
      v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13((char *)v7 + *(int *)(v10 + 24), v12);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v7, v14);
      break;
  }
  v15 = (id *)(a1 + a2[10]);
  v16 = swift_getEnumCaseMultiPayload();
  switch(v16)
  {
    case 2:

      return;
    case 1:
      v18 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v19 = (char *)v15 + *(int *)(v18 + 20);
      v20 = type metadata accessor for DataFrame();
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v24(v19, v20);
      v21 = (id *)((char *)v15 + *(int *)(v18 + 24));
      v22 = v20;
      v23 = (void (*)(id *, uint64_t))v24;
LABEL_24:
      v23(v21, v22);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v22 = __swift_instantiateConcreteTypeFromMangledName(v17);
      v23 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v21 = v15;
      goto LABEL_24;
  }
}

_QWORD *initializeWithCopy for MLDecisionTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void *v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  void *v59;
  id v60;
  uint64_t *v61;
  uint64_t v62;
  char *v64;
  int *v65;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  v20 = a3[5];
  v21 = a3[6];
  v22 = *(void **)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a3[8];
  v65 = a3;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  v29 = (_OWORD *)((char *)a1 + v26 + 8);
  v30 = (_OWORD *)((char *)a2 + v26 + 8);
  v31 = *(_QWORD *)((char *)a2 + v26 + 32);
  swift_bridgeObjectRetain();
  v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((_QWORD *)v27 + 4) = v31;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    v33 = v30[1];
    *v29 = *v30;
    v29[1] = v33;
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
  *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
  v34 = a3;
  v35 = a3[9];
  v36 = (void **)((char *)a1 + v35);
  v37 = (void **)((char *)a2 + v35);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v45 = *v37;
    v46 = v45;
    *v36 = v45;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v36 = *v37;
    v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v40 = *(int *)(v39 + 20);
    v64 = (char *)v36 + v40;
    v41 = (char *)v37 + v40;
    v42 = type metadata accessor for DataFrame();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    v44 = v41;
    v34 = v65;
    v43(v64, v44, v42);
    v43((char *)v36 + *(int *)(v39 + 24), (char *)v37 + *(int *)(v39 + 24), v42);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v36, v37, v48);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v49 = v34[10];
  v50 = (void **)((char *)a1 + v49);
  v51 = (void **)((char *)a2 + v49);
  v52 = swift_getEnumCaseMultiPayload();
  if (v52 == 2)
  {
    v59 = *v51;
    v60 = v59;
    *v50 = v59;
  }
  else if (v52 == 1)
  {
    *v50 = *v51;
    v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v54 = *(int *)(v53 + 20);
    v55 = (char *)v50 + v54;
    v56 = (char *)v51 + v54;
    v57 = type metadata accessor for DataFrame();
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    v58(v55, v56, v57);
    v58((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v57);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v62 = __swift_instantiateConcreteTypeFromMangledName(v61);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v50, v51, v62);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLDecisionTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  void *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  void **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  void *v56;
  id v57;
  uint64_t *v58;
  uint64_t v59;
  char *v61;
  char *v62;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[5];
  v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  v23 = v21;

  v24 = a3[6];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  v30 = (uint64_t)a1 + v27 + 8;
  v31 = (uint64_t)a2 + v27 + 8;
  v32 = *(_QWORD *)((char *)a2 + v27 + 32);
  if (*(_QWORD *)((char *)a1 + v27 + 32))
  {
    if (v32)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v30, (uint64_t *)v31);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v30);
  }
  else if (v32)
  {
    v28[4] = v32;
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v30, v31);
    goto LABEL_15;
  }
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
LABEL_15:
  v28[5] = v29[5];
  v28[6] = v29[6];
  v28[7] = v29[7];
  if (a1 != a2)
  {
    v34 = a3[9];
    v35 = (void **)((char *)a1 + v34);
    v36 = (void **)((char *)a2 + v34);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v34, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v42 = *v36;
      v43 = v42;
      *v35 = v42;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v35 = *v36;
      v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v39 = *(int *)(v38 + 20);
      v61 = (char *)v36 + v39;
      v62 = (char *)v35 + v39;
      v40 = type metadata accessor for DataFrame();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(v62, v61, v40);
      v41((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v35, v36, v45);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v46 = a3[10];
    v47 = (void **)((char *)a1 + v46);
    v48 = (void **)((char *)a2 + v46);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v46, type metadata accessor for MLClassifierMetrics.Contents);
    v49 = swift_getEnumCaseMultiPayload();
    if (v49 == 2)
    {
      v56 = *v48;
      v57 = v56;
      *v47 = v56;
    }
    else if (v49 == 1)
    {
      *v47 = *v48;
      v50 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v51 = *(int *)(v50 + 20);
      v52 = (char *)v47 + v51;
      v53 = (char *)v48 + v51;
      v54 = type metadata accessor for DataFrame();
      v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
      v55(v52, v53, v54);
      v55((char *)v47 + *(int *)(v50 + 24), (char *)v48 + *(int *)(v50 + 24), v54);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v59 = __swift_instantiateConcreteTypeFromMangledName(v58);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v47, v48, v59);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v47;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = type metadata accessor for AnyTreeClassifierModel();
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(v7 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v17 = (_OWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v18[2];
  v21 = v18[3];
  v22 = a3[9];
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v17[2] = v20;
  v17[3] = v21;
  v25 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v29 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v30 = *(int *)(v29 + 20);
    v47 = &v23[v30];
    v31 = &v24[v30];
    v32 = type metadata accessor for DataFrame();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
    v33(v47, v31, v32);
    v33(&v23[*(int *)(v29 + 24)], &v24[*(int *)(v29 + 24)], v32);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v23, v24, v28);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_10:
  v34 = a3[10];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = swift_getEnumCaseMultiPayload();
  if (v37 == 1)
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v41 = *(int *)(v40 + 20);
    v42 = &v35[v41];
    v43 = &v36[v41];
    v44 = type metadata accessor for DataFrame();
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
    v45(v42, v43, v44);
    v45(&v35[*(int *)(v40 + 24)], &v36[*(int *)(v40 + 24)], v44);
  }
  else
  {
    if (v37)
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v35, v36, v39);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for MLDecisionTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v56;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = type metadata accessor for AnyTreeClassifierModel();
  v10 = *(int *)(v9 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(v9 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  v18 = a3[5];
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[6];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = (_OWORD *)((char *)a2 + v25 + 8);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v29 = (_OWORD *)((char *)a1 + v25 + 8);
  if (*(_QWORD *)((char *)a1 + v25 + 32))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  v30 = v28[1];
  *v29 = *v28;
  v29[1] = v30;
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
  *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
  if (a1 == a2)
    return a1;
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v31, type metadata accessor for MLClassifierMetrics.Contents);
  v34 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v39 = *(int *)(v38 + 20);
    v56 = &v32[v39];
    v40 = &v33[v39];
    v41 = type metadata accessor for DataFrame();
    v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
    v42(v56, v40, v41);
    v42(&v32[*(int *)(v38 + 24)], &v33[*(int *)(v38 + 24)], v41);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v32, v33, v37);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  v43 = a3[10];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v43, type metadata accessor for MLClassifierMetrics.Contents);
  v46 = swift_getEnumCaseMultiPayload();
  if (v46 == 1)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v50 = *(int *)(v49 + 20);
    v51 = &v44[v50];
    v52 = &v45[v50];
    v53 = type metadata accessor for DataFrame();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32);
    v54(v51, v52, v53);
    v54(&v44[*(int *)(v49 + 24)], &v45[*(int *)(v49 + 24)], v53);
  }
  else
  {
    if (v46)
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v44, v45, v48);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF4440C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = OUTLINED_FUNCTION_71_10();
    v8 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF444AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      OUTLINED_FUNCTION_125();
      return;
    }
    v9 = OUTLINED_FUNCTION_71_10();
    v10 = a1 + *(int *)(a4 + 36);
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata completion function for MLDecisionTreeClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21AF445E8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_4_52()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 256) + 8))(v0, *(_QWORD *)(v1 - 264));
}

uint64_t OUTLINED_FUNCTION_5_46()
{
  uint64_t v0;

  return outlined destroy of MLDecisionTreeClassifier.ModelParameters(*(_QWORD *)(v0 - 272));
}

uint64_t OUTLINED_FUNCTION_8_51()
{
  return type metadata accessor for MLDecisionTreeClassifier();
}

uint64_t OUTLINED_FUNCTION_27_39()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 328))();
}

uint64_t OUTLINED_FUNCTION_33_30()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 280) + 8))(v0, *(_QWORD *)(v1 - 72));
}

void OUTLINED_FUNCTION_39_20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 336), a2);
}

uint64_t OUTLINED_FUNCTION_44_26()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_46_18()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_50_22(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_57_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 384));
}

void OUTLINED_FUNCTION_66_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  _sypSgWOcTm_0(*(_QWORD *)(v4 - 296), v3, a3);
}

void OUTLINED_FUNCTION_72_13(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 400), a2);
}

uint64_t OUTLINED_FUNCTION_73_13()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 568))();
}

uint64_t OUTLINED_FUNCTION_74_14()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_77_11()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_81_12(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 408), a2);
}

void OUTLINED_FUNCTION_82_9()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 304) = v0;
}

uint64_t OUTLINED_FUNCTION_85_9()
{
  return swift_dynamicCast();
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t *, _QWORD);
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t *, _QWORD);
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  void (*v71)(uint64_t *, _QWORD);
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t *, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  _BYTE *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE v100[16];
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v111 = *(_QWORD *)(v2 - 8);
  v112 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v124 = &v100[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  v105 = &v100[-v5];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v108 = &v100[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v7);
  v110 = &v100[-v10];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v109 = &v100[-v12];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v103 = &v100[-v14];
  v15 = MEMORY[0x24BDAC7A8](v13);
  v104 = &v100[-v16];
  MEMORY[0x24BDAC7A8](v15);
  v117 = &v100[-v17];
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
  v18 = MEMORY[0x24BDAC7A8](v113);
  v107 = &v100[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v102 = &v100[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v101 = &v100[-v22];
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v119 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v118 = &v100[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v122 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = &v100[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  MEMORY[0x24BDAC7A8](v115);
  v28 = &v100[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
  MEMORY[0x24BDAC7A8](v123);
  v30 = &v100[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, MEMORY[0x24BDF5F98]);
  v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F98]);
  v120 = v32;
  v33 = v125;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v34 < v31)
    v31 = v34;
  v128 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of URL?(a1, (uint64_t)v28, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v122 + 32))(v26, v28, v24);
  v116 = v26;
  v121 = (_BYTE *)v24;
  dispatch thunk of Sequence.makeIterator()();
  v35 = &v28[*(int *)(v115 + 52)];
  v36 = v31;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 32))(v118, v35, v33);
  v37 = v123;
  v38 = &v30[*(int *)(v123 + 52)];
  dispatch thunk of Sequence.makeIterator()();
  v120 = *(int *)(v37 + 56);
  v30[v120] = 0;
  if (v36 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v26, &demangling cache variable for type metadata for MLShapedArray<Float>?);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  else
  {
    v114 = v30;
    v115 = (uint64_t)v38;
    v39 = (uint64_t)v117;
    if (v36)
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>);
      v41 = MEMORY[0x24BDF5FA0];
      v106 = (uint64_t *)&v30[*(int *)(v40 + 36)];
      v26 = v121;
      do
      {
        if (!v36)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if ((v30[v120] & 1) != 0)
          goto LABEL_41;
        v123 = v36;
        v42 = *v106;
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, v41);
        dispatch thunk of Collection.endIndex.getter();
        if (v42 == v126)
          goto LABEL_44;
        v43 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        v44 = v110;
        outlined init with copy of URL?(v45, (uint64_t)v110, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v43(&v126, 0);
        v46 = v122;
        v47 = v116;
        (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v122 + 16))(v116, v30, v26);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(_BYTE *, _BYTE *))(v46 + 8))(v47, v26);
        v26 = v109;
        outlined init with take of (key: URL, value: CIImage)?((uint64_t)v44, (uint64_t)v109, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
        v49 = v115;
        v50 = *(_QWORD *)(v115 + *(int *)(v48 + 36));
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, v41);
        dispatch thunk of Collection.endIndex.getter();
        if (v50 == v126)
          goto LABEL_43;
        v51 = v125;
        v52 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        v54 = *v53;
        v55 = v53[1];
        swift_bridgeObjectRetain();
        v52(&v126, 0);
        v56 = v49;
        v57 = v118;
        v58 = v119;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v119 + 16))(v118, v56, v51);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v57, v51);
        v59 = v107;
        v60 = &v107[*(int *)(v113 + 48)];
        outlined init with take of (key: URL, value: CIImage)?((uint64_t)v26, (uint64_t)v107, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        *v60 = v54;
        v60[1] = v55;
        v61 = v108;
        outlined init with copy of URL?((uint64_t)v59, (uint64_t)v108, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v61, 1, v62) == 1)
          goto LABEL_45;
        if (v55)
          v63 = v54;
        else
          v63 = 0;
        v64 = 0xE000000000000000;
        if (v55)
          v64 = v55;
        v126 = v63;
        v127 = v64;
        swift_bridgeObjectRetain();
        AnnotatedFeature.init(feature:annotation:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v59, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
        v65 = v128;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = (uint64_t)v117;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v65 = v128;
        }
        v26 = v121;
        v67 = *(_QWORD *)(v65 + 16);
        if (v67 >= *(_QWORD *)(v65 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v65 = v128;
        }
        *(_QWORD *)(v65 + 16) = v67 + 1;
        (*(void (**)(unint64_t, _BYTE *, uint64_t))(v111 + 32))(v65+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(_QWORD *)(v111 + 72) * v67, v124, v112);
        v36 = v123 - 1;
        v30 = v114;
        v41 = MEMORY[0x24BDF5FA0];
      }
      while (v123 != 1);
      if ((v114[v120] & 1) != 0)
        goto LABEL_39;
    }
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, MEMORY[0x24BDF5FA0]);
    v123 = v68;
    while (1)
    {
      v69 = *(_QWORD *)&v30[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>)
                                   + 36)];
      v70 = v121;
      dispatch thunk of Collection.endIndex.getter();
      if (v69 == v126)
        break;
      v71 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v72 = v104;
      outlined init with copy of URL?(v73, (uint64_t)v104, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      v71(&v126, 0);
      v74 = v30;
      v75 = v122;
      v76 = v116;
      (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v122 + 16))(v116, v74, v70);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(_BYTE *, _BYTE *))(v75 + 8))(v76, v70);
      outlined init with take of (key: URL, value: CIImage)?((uint64_t)v72, v39, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      v78 = v115;
      v79 = *(_QWORD *)(v115 + *(int *)(v77 + 36));
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5FA0]);
      dispatch thunk of Collection.endIndex.getter();
      if (v79 == v126)
      {
        outlined destroy of FeatureMatrixBuilder<Float>(v39, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v30 = v114;
        break;
      }
      v80 = v125;
      v81 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v124 = *(_BYTE **)v82;
      v83 = v39;
      v84 = *(_QWORD *)(v82 + 8);
      swift_bridgeObjectRetain();
      v81(&v126, 0);
      v85 = v118;
      v86 = v119;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v119 + 16))(v118, v78, v80);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v85, v80);
      v87 = v113;
      v88 = v102;
      v89 = &v102[*(int *)(v113 + 48)];
      outlined init with take of (key: URL, value: CIImage)?(v83, (uint64_t)v102, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      *v89 = v124;
      v89[1] = v84;
      v90 = v101;
      outlined init with take of (key: URL, value: CIImage)?((uint64_t)v88, (uint64_t)v101, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      v91 = (uint64_t *)&v90[*(int *)(v87 + 48)];
      v93 = *v91;
      v92 = v91[1];
      v94 = v103;
      outlined init with copy of URL?((uint64_t)v90, (uint64_t)v103, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
      if (__swift_getEnumTagSinglePayload((uint64_t)v94, 1, v95) == 1)
        goto LABEL_46;
      if (v92)
        v96 = v93;
      else
        v96 = 0;
      v97 = 0xE000000000000000;
      if (v92)
        v97 = v92;
      v126 = v96;
      v127 = v97;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v90, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      v98 = v128;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v98 = v128;
      }
      v39 = (uint64_t)v117;
      v99 = *(_QWORD *)(v98 + 16);
      if (v99 >= *(_QWORD *)(v98 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v98 = v128;
      }
      *(_QWORD *)(v98 + 16) = v99 + 1;
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v111 + 32))(v98+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(_QWORD *)(v111 + 72) * v99, v105, v112);
      v30 = v114;
      if ((v114[v120] & 1) != 0)
        goto LABEL_39;
    }
    v30[v120] = 1;
LABEL_39:
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v30, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;

  result = specialized _NativeDictionary.startIndex.getter();
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  else
    return specialized Dictionary.Keys.subscript.getter(result, v3, 0, a1);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection.first.getter(a1, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block), specialized Dictionary.startIndex.getter, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t))specialized Dictionary.subscript.getter, (uint64_t (*)(_QWORD))MEMORY[0x24BE62F58], a2);
}

{
  return specialized Collection.first.getter(a1, &demangling cache variable for type metadata for (key: String, value: Tensor), specialized Dictionary.startIndex.getter, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t))specialized Dictionary.subscript.getter, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048], a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for FeatureDescription();
  v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v6);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  if (*(_QWORD *)(a1 + 16))
  {
    outlined init with copy of Any(a1 + 32, (uint64_t)a2);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void specialized Collection.first.getter()
{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int]>, &lazy protocol witness table cache variable for type Column<[Int]> and conformance Column<A>);
}

{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int32]>, &lazy protocol witness table cache variable for type Column<[Int32]> and conformance Column<A>);
}

{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[UInt8]>, &lazy protocol witness table cache variable for type Column<[UInt8]> and conformance Column<A>);
}

{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Float16]>, &lazy protocol witness table cache variable for type Column<[Float16]> and conformance Column<A>);
}

{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Float]>, &lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>);
}

{
  specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Double]>, &lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>);
}

{
  char v0;
  id *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>, MEMORY[0x24BDF5FA0]);
  OUTLINED_FUNCTION_19_36();
  OUTLINED_FUNCTION_26_33();
  OUTLINED_FUNCTION_25_33();
  if (!v0)
  {
    OUTLINED_FUNCTION_16_39();
    OUTLINED_FUNCTION_15_36((uint64_t)*v1);
  }
  OUTLINED_FUNCTION_24_37();
}

void specialized Collection.first.getter(uint64_t *a1, unint64_t *a2)
{
  char v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(a2, a1, MEMORY[0x24BDF5FA0]);
  OUTLINED_FUNCTION_19_36();
  OUTLINED_FUNCTION_26_33();
  OUTLINED_FUNCTION_25_33();
  if (!v4)
  {
    OUTLINED_FUNCTION_16_39();
    v5 = OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_15_36(v5);
  }
  OUTLINED_FUNCTION_24_37();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Int32>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Float16>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Float>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Double>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Double>?, a1);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(a2, a1, MEMORY[0x24BDF5FA0]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  OUTLINED_FUNCTION_25_33();
  if (v8)
  {
    v11 = 1;
  }
  else
  {
    dispatch thunk of Collection.subscript.read();
    outlined init with copy of URL?(v9, a4, a3);
    OUTLINED_FUNCTION_15_36(v10);
    v11 = 0;
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return __swift_storeEnumTagSinglePayload(a4, v11, 1, v12);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(char *, uint64_t, uint64_t, _QWORD, uint64_t)@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_53_0();
  result = a3(a1);
  if ((v17 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != (_DWORD)v16)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return __swift_storeEnumTagSinglePayload((uint64_t)a6, 1, 1, v13);
  v18 = (char *)v6 + *(int *)(v13 + 48);
  v19 = a4(v18, result, v16, 0, a1);
  *v6 = v19;
  v6[1] = v20;
  *a6 = v19;
  a6[1] = v20;
  v21 = (char *)a6 + *(int *)(v13 + 48);
  v22 = a5(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v18, v22);
  OUTLINED_FUNCTION_199();
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v6, a2);
  return __swift_storeEnumTagSinglePayload((uint64_t)a6, 0, 1, v13);
}

uint64_t specialized DataFrame.containsColumn<A>(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  unint64_t value;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::Int_optional v13;

  v4 = type metadata accessor for AnyColumn();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  v13 = DataFrame.indexOfColumn(_:)(v8);
  if (v13.is_nil)
    return 0;
  value = v13.value;
  result = DataFrame.columns.getter();
  if ((value & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (value < *(_QWORD *)(result + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, result+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * value, v4);
    swift_bridgeObjectRelease();
    v11 = AnyColumn.wrappedElementType.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v11 == MEMORY[0x24BEE0D00];
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.DataSource.annotatedFeatures()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  Swift::Bool v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  Swift::OpaquePointer_optional result;

  OUTLINED_FUNCTION_8_1();
  v4 = v0;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v29 = v8;
  OUTLINED_FUNCTION_56_6();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_53_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v15 = v14 - v13;
  v34 = OUTLINED_FUNCTION_93();
  v16 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_49();
  v19 = v18 - v17;
  outlined init with copy of MLSoundClassifier.DataSource(v4, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v27 = v2;
    v24 = *(_BYTE *)(v15 + 8);
    v23 = *(_QWORD *)(v15 + 16);
    v22 = *(_QWORD *)(v15 + 24);
    v35 = *(_QWORD *)v15;
    v36 = v24;
    DataFrame.init(_:)((uint64_t)&v35);
  }
  else
  {
    if (EnumCaseMultiPayload != 4)
    {
      outlined destroy of MLSoundClassifier.DataSource(v15);
      goto LABEL_10;
    }
    v27 = v2;
    v21 = (uint64_t *)(v15
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters))
                             + 48));
    v23 = *v21;
    v22 = v21[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v19, v15, v34);
  }
  MEMORY[0x220758A1C](v23, v22);
  OUTLINED_FUNCTION_101();
  static MLSoundClassifier.convertFeatures(_:)();
  OUTLINED_FUNCTION_88_2();
  if (v1)
  {
    OUTLINED_FUNCTION_80();
  }
  else
  {
    DataFrame.subscript.getter();
    OUTLINED_FUNCTION_80();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v27, v3, v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v27 + *(int *)(v28 + 52), v29, v31);
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n(v27);
    outlined destroy of FeatureMatrixBuilder<Float>(v27, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    OUTLINED_FUNCTION_59_19(v32);
  }
  OUTLINED_FUNCTION_34_27();
LABEL_10:
  OUTLINED_FUNCTION_7();
  result.value._rawValue = v25;
  result.is_nil = v26;
  return result;
}

void static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  char *v32;
  Swift::String v33;
  void *object;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  OUTLINED_FUNCTION_8_1();
  v38 = v0;
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  v42 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v8 = v7;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v37 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v37 - v12;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  v40 = *(_QWORD *)(v46 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v15 = v14;
  v16 = OUTLINED_FUNCTION_56_6();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  v43 = v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v37 - v20;
  v44 = v4;
  v45 = v2;
  MEMORY[0x220758A1C](v4, v2);
  AnyColumn.wrappedElementType.getter();
  v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  v22(v21, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if (swift_dynamicCastMetatype())
  {
    v37 = v15;
    v23 = v44;
    v24 = v45;
    DataFrame.subscript.getter();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    v26 = v38;
    v25 = v39;
    Column.map<A>(_:)();
    v38 = v26;
    v27 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v8, v25, v5);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>, MEMORY[0x24BDF5F98]);
    swift_bridgeObjectRetain_n();
    v28 = v41;
    Column.init<A>(name:contents:)();
    v29 = v43;
    Column.eraseToAnyColumn()();
    v30 = *(void (**)(char *, uint64_t))(v27 + 8);
    v30(v28, v5);
    MEMORY[0x220758A28](v29, v23, v24);
    v30(v25, v5);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v37, v46);
  }
  else
  {
    v47[0] = 0;
    v47[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    OUTLINED_FUNCTION_27_2();
    v31._countAndFlagsBits = 0xD000000000000062;
    String.append(_:)(v31);
    v32 = v43;
    MEMORY[0x220758A1C](v44, v45);
    AnyColumn.wrappedElementType.getter();
    v22(v32, v16);
    v33._countAndFlagsBits = _typeName(_:qualified:)();
    object = v33._object;
    String.append(_:)(v33);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_51_6();
    OUTLINED_FUNCTION_35_23();
    v35 = OUTLINED_FUNCTION_49_0();
    *v36 = object;
    v36[1] = v47;
    OUTLINED_FUNCTION_5_8(v35, (uint64_t)v36);
  }
  OUTLINED_FUNCTION_7();
}

void specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v27 = type metadata accessor for URL();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_64();
  v85 = v29;
  v30 = swift_bridgeObjectRetain();
  a10 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v30);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&a10);
  if (v20)
  {
LABEL_48:
    swift_release();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_12_0();
    v31 = (uint64_t)a10;
    v77 = a10[2];
    if (v77)
    {
      v80 = v24;
      v78 = v26;
      v32 = 0;
      v33 = MEMORY[0x24BEE4AF8];
      v79 = a10 + 4;
      v34 = v85;
      v76 = (uint64_t)a10;
      while (1)
      {
        v81 = v32;
        if (v32 >= *(_QWORD *)(v31 + 16))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_48;
        }
        v35 = &v79[2 * v32];
        v37 = *v35;
        v36 = v35[1];
        swift_bridgeObjectRetain_n();
        v86 = v37;
        v38 = specialized Dictionary.subscript.getter(v37, v36, v80);
        v88 = v36;
        OUTLINED_FUNCTION_30();
        if (!v38)
          goto LABEL_46;
        v90 = v38;
        v39 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(v38 + 16));
        specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v39, v78);
        v83 = v40;
        swift_release();
        v82 = *(_QWORD *)(v78 + 16);
        if (v82)
          break;
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v76;
        v32 = v81 + 1;
        if (v81 + 1 == v77)
          goto LABEL_37;
      }
      v41 = 0;
      while (1)
      {
        if (*(_QWORD *)(v33 + 16) <= v41)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
          v42 = Dictionary.init(dictionaryLiteral:)();
          if ((OUTLINED_FUNCTION_143() & 1) == 0)
          {
            OUTLINED_FUNCTION_45_23();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v33 = v74;
          }
          v43 = v33;
          v44 = *(_QWORD *)(v33 + 16);
          v45 = v43;
          if (v44 >= *(_QWORD *)(v43 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v45 = v75;
          }
          *(_QWORD *)(v45 + 16) = v44 + 1;
          v46 = v45 + 8 * v44;
          v33 = v45;
          *(_QWORD *)(v46 + 32) = v42;
          v34 = v85;
        }
        if (v41 >= *(_QWORD *)(v83 + 16))
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        v87 = v41;
        v47 = *(_QWORD *)(v83 + 32 + 8 * v41);
        v48 = *(_QWORD *)(v47 + 16);
        if (v48)
          break;
        v91 = MEMORY[0x24BEE4AF8];
LABEL_24:
        swift_bridgeObjectRetain();
        if ((OUTLINED_FUNCTION_143() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          v33 = v73;
        }
        if (v87 >= *(_QWORD *)(v33 + 16))
          goto LABEL_42;
        v57 = v28;
        v58 = v33;
        v59 = v33 + 32;
        swift_isUniquelyReferenced_nonNull_native();
        a10 = *(_QWORD **)(v59 + 8 * v87);
        v60 = (uint64_t)a10;
        *(_QWORD *)(v59 + 8 * v87) = 0x8000000000000000;
        v61 = OUTLINED_FUNCTION_55_20();
        if (__OFADD__(*(_QWORD *)(v60 + 16), (v62 & 1) == 0))
          goto LABEL_43;
        v63 = v61;
        v64 = v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
        if (OUTLINED_FUNCTION_51_23())
        {
          v65 = OUTLINED_FUNCTION_55_20();
          if ((v64 & 1) != (v66 & 1))
            goto LABEL_47;
          v63 = v65;
        }
        v67 = a10;
        if ((v64 & 1) != 0)
        {
          v68 = a10[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v68 + 8 * v63) = v91;
        }
        else
        {
          a10[(v63 >> 6) + 8] |= 1 << v63;
          v69 = (_QWORD *)(v67[6] + 16 * v63);
          *v69 = v86;
          v69[1] = v88;
          *(_QWORD *)(v67[7] + 8 * v63) = v91;
          v70 = v67[2];
          v71 = __OFADD__(v70, 1);
          v72 = v70 + 1;
          if (v71)
            goto LABEL_44;
          v67[2] = v72;
          swift_bridgeObjectRetain();
        }
        *(_QWORD *)(v59 + 8 * v87) = v67;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_123();
        v41 = v87 + 1;
        v28 = v57;
        v34 = v85;
        v33 = v58;
        if (v87 + 1 == v82)
          goto LABEL_36;
      }
      v84 = v33;
      a10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_50_10();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v49 = 0;
      v91 = (uint64_t)a10;
      v50 = v90;
      v89 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      while (1)
      {
        v51 = *(_QWORD *)(v47 + 8 * v49 + 32);
        if ((v51 & 0x8000000000000000) != 0)
          break;
        if (v51 >= *(_QWORD *)(v50 + 16))
          goto LABEL_40;
        v52 = *(_QWORD *)(v28 + 72);
        OUTLINED_FUNCTION_40_21(v34, v90 + v89 + v52 * v51, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
        v53 = v91;
        a10 = (_QWORD *)v91;
        v54 = v28;
        v56 = *(_QWORD *)(v91 + 16);
        v55 = *(_QWORD *)(v91 + 24);
        if (v56 >= v55 >> 1)
        {
          OUTLINED_FUNCTION_38_21(v55);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v53 = (uint64_t)a10;
        }
        ++v49;
        *(_QWORD *)(v53 + 16) = v56 + 1;
        v91 = v53;
        OUTLINED_FUNCTION_40_21(v53 + v89 + v56 * v52, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32));
        v28 = v54;
        v50 = v90;
        if (v48 == v49)
        {
          OUTLINED_FUNCTION_10_3();
          v33 = v84;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      OUTLINED_FUNCTION_101();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
LABEL_37:
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
}

void specialized randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v5;
  char v6;
  uint64_t v7;
  const char *v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v7 = 0xD000000000000024;
    v8 = "At least one proportion is required.";
    goto LABEL_16;
  }
  v5 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if ((v6 & 1) != 0)
    goto LABEL_46;
  if (v5 < 0.0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v7 = 0xD00000000000002ALL;
    v8 = "Only non-negative proportions are allowed.";
LABEL_16:
    *(_QWORD *)(v7 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_BYTE *)(v7 + 48) = 0;
    swift_willThrow();
    return;
  }
  v9 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if ((v10 & 1) == 0)
  {
    if (v9 <= 0.0)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v7 = 0xD00000000000002DLL;
      v8 = "At least one non-zero proportion is required.";
      goto LABEL_16;
    }
    v52 = a1;
    specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(a1 + 16));
    specialized MutableCollection<>.shuffle<A>(using:)();
    v11 = 0;
    v12 = a2 + 32;
    v13 = 0.0;
    do
    {
      v14 = *(double *)(v12 + 8 * v11++);
      v13 = v13 + v14;
    }
    while (v2 != v11);
    v55 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v15 = 0;
    v16 = *(_QWORD *)(v55 + 16);
    do
    {
      v17 = *(double *)(v12 + 8 * v15);
      v18 = *(_QWORD *)(v55 + 24);
      v19 = v16 + 1;
      if (v16 >= v18 >> 1)
      {
        v20 = OUTLINED_FUNCTION_38_21(v18);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20, v21, v22);
      }
      ++v15;
      *(_QWORD *)(v55 + 16) = v19;
      *(double *)(v55 + 8 * v16++ + 32) = v17 / v13;
    }
    while (v2 != v15);
    v53 = v2;
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v24 = v23;
    v25 = 0;
    v26 = *(_QWORD *)(v23 + 16);
    v27 = 8 * v26;
    do
    {
      if (v26 + v25)
        v28 = *(double *)(v24 + v27 + 8 * v25 + 24);
      else
        v28 = 0.0;
      v29 = *(double *)(v55 + 32 + 8 * v25);
      if ((unint64_t)(v26 + v25) >= *(_QWORD *)(v24 + 24) >> 1)
      {
        OUTLINED_FUNCTION_60_17();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v24 = v30;
      }
      *(_QWORD *)(v24 + 16) = v26 + v25 + 1;
      *(double *)(v24 + v27 + 8 * v25++ + 32) = v29 + v28;
    }
    while (v19 != v25);
    swift_release_n();
    OUTLINED_FUNCTION_23_3();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(v24, v52);
    v32 = v31;
    swift_bridgeObjectRelease();
    v33 = 0;
    v34 = 0;
    v54 = v32;
    v35 = v32 + 32;
    v36 = MEMORY[0x24BEE4AF8];
    while (v34 < *(_QWORD *)(v54 + 16))
    {
      if (v33 < *(_QWORD *)(v35 + 8 * v34))
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        OUTLINED_FUNCTION_46_19();
        v40 = v33;
        while ((v33 & 0x8000000000000000) == 0)
        {
          if (v40 >= *(_QWORD *)(v38 + 16))
            goto LABEL_43;
          v41 = *(_QWORD *)(v39 + 8 * v40);
          if (v41 >= v37)
            goto LABEL_44;
          v42 = *(_QWORD *)(v52 + 32 + 8 * v41);
          v43 = *(_QWORD *)(v24 + 16);
          if (v43 >= *(_QWORD *)(v24 + 24) >> 1)
          {
            v44 = OUTLINED_FUNCTION_60_17();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44, v45, v46, v47);
            OUTLINED_FUNCTION_46_19();
          }
          *(_QWORD *)(v24 + 16) = v43 + 1;
          *(_QWORD *)(v24 + 8 * v43 + 32) = v42;
          if ((int64_t)++v40 >= *(_QWORD *)(v35 + 8 * v34))
            goto LABEL_35;
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        break;
      }
      v40 = v33;
      v24 = MEMORY[0x24BEE4AF8];
LABEL_35:
      v48 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v36 = v48;
      }
      else
      {
        OUTLINED_FUNCTION_45_23();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v36 = v50;
      }
      v49 = *(_QWORD *)(v36 + 16);
      if (v49 >= *(_QWORD *)(v36 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v36 = v51;
      }
      ++v34;
      *(_QWORD *)(v36 + 16) = v49 + 1;
      *(_QWORD *)(v36 + 8 * v49 + 32) = v24;
      v33 = v40;
      if (v34 == v53)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
}

void MLSoundClassifier.DataSource.labeledSounds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  OUTLINED_FUNCTION_8_1();
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  outlined init with copy of MLSoundClassifier.DataSource(v0, v1);
  v7 = (char *)&loc_21AF46A14 + *((int *)qword_21AF47178 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AF46A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t i;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t j;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  Swift::String v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Swift::String v76;
  Swift::String v77;
  void *object;
  uint64_t v79;
  uint64_t v80;

  OUTLINED_FUNCTION_40_21(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
  static UTType.audio.getter();
  v4 = *(_QWORD *)(v3 - 144);
  static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
  *(_QWORD *)(v3 - 144) = v4;
  if (v4)
  {
    OUTLINED_FUNCTION_14_40();
    OUTLINED_FUNCTION_19_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    goto LABEL_63;
  }
  v6 = v5;
  OUTLINED_FUNCTION_14_40();
  OUTLINED_FUNCTION_19_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  *(_QWORD *)(v3 - 128) = v6 + 64;
  OUTLINED_FUNCTION_20_34();
  v10 = v9 & v8;
  *(_QWORD *)(v3 - 120) = (unint64_t)(v11 + 63) >> 6;
  v12 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (!v10)
    goto LABEL_5;
LABEL_4:
  *(_QWORD *)(v3 - 72) = (v10 - 1) & v10;
  *(_QWORD *)(v3 - 112) = v7;
  for (i = __clz(__rbit64(v10)) | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    v18 = v6;
    v19 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * i);
    v21 = *v19;
    v20 = v19[1];
    OUTLINED_FUNCTION_199();
    v22 = OUTLINED_FUNCTION_23_3();
    v23 = static _AudioUtilities.validateAudioURLs(from:)(v22);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_143();
    *(_QWORD *)(v3 - 96) = v12;
    v24 = OUTLINED_FUNCTION_120_4();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
    if (__OFADD__(v12[2], (v27 & 1) == 0))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v28 = v26;
    v29 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
    if (OUTLINED_FUNCTION_51_23())
    {
      v30 = OUTLINED_FUNCTION_120_4();
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
      if ((v29 & 1) != (v33 & 1))
        goto LABEL_70;
      v28 = v32;
    }
    v12 = *(_QWORD **)(v3 - 96);
    if ((v29 & 1) != 0)
    {
      v34 = v12[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v34 + 8 * v28) = v23;
    }
    else
    {
      v12[(v28 >> 6) + 8] |= 1 << v28;
      v35 = (_QWORD *)(v12[6] + 16 * v28);
      *v35 = v21;
      v35[1] = v20;
      *(_QWORD *)(v12[7] + 8 * v28) = v23;
      v36 = v12[2];
      v14 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v14)
        goto LABEL_65;
      v12[2] = v37;
      OUTLINED_FUNCTION_199();
    }
    OUTLINED_FUNCTION_104();
    swift_bridgeObjectRelease();
    v6 = v18;
    v7 = *(_QWORD *)(v3 - 112);
    v10 = *(_QWORD *)(v3 - 72);
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v7, 1);
    v15 = v7 + 1;
    if (v14)
      goto LABEL_67;
    if (v15 >= *(_QWORD *)(v3 - 120))
      break;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 - 128) + 8 * v15);
    if (v16)
      goto LABEL_15;
    v17 = v15 + 1;
    if (v15 + 1 >= *(_QWORD *)(v3 - 120))
      break;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 - 128) + 8 * v17);
    if (!v16)
    {
      v17 = v15 + 2;
      if (v15 + 2 >= *(_QWORD *)(v3 - 120))
        break;
      v16 = *(_QWORD *)(*(_QWORD *)(v3 - 128) + 8 * v17);
      if (!v16)
      {
        v17 = v15 + 3;
        if (v15 + 3 >= *(_QWORD *)(v3 - 120))
          break;
        v16 = *(_QWORD *)(*(_QWORD *)(v3 - 128) + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            v15 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_68;
            if (v15 >= *(_QWORD *)(v3 - 120))
              goto LABEL_30;
            v16 = *(_QWORD *)(*(_QWORD *)(v3 - 128) + 8 * v15);
            ++v17;
            if (v16)
              goto LABEL_15;
          }
        }
      }
    }
    v15 = v17;
LABEL_15:
    *(_QWORD *)(v3 - 72) = (v16 - 1) & v16;
    *(_QWORD *)(v3 - 112) = v15;
  }
LABEL_30:
  swift_release();
  v38 = swift_bridgeObjectRetain();
  v39 = *(_QWORD *)(v3 - 144);
  v40 = specialized _NativeDictionary.filter(_:)(v38);
  *(_QWORD *)(v3 - 144) = v39;
  OUTLINED_FUNCTION_101();
  *(_QWORD *)(v3 - 136) = v40 + 8;
  OUTLINED_FUNCTION_20_34();
  v43 = v42 & v41;
  *(_QWORD *)(v3 - 128) = (unint64_t)(v44 + 63) >> 6;
  *(_QWORD *)(v3 - 72) = v40;
  swift_retain();
  v45 = 0;
  *(_QWORD *)(v3 - 120) = 0x800000021AFF4990;
  *(_OWORD *)(v3 - 112) = xmmword_21AFE7DA0;
  v46 = MEMORY[0x24BEE0D00];
  if (!v43)
    goto LABEL_32;
LABEL_31:
  OUTLINED_FUNCTION_62_14();
  for (j = v47 | (v45 << 6); ; j = __clz(__rbit64(v50)) + (v45 << 6))
  {
    v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 - 72) + 48) + 16 * j);
    v59 = *v58;
    v60 = (void *)v58[1];
    *(_QWORD *)(v3 - 96) = 0;
    *(_QWORD *)(v3 - 88) = 0xE000000000000000;
    OUTLINED_FUNCTION_50_10();
    _StringGuts.grow(_:)(29);
    OUTLINED_FUNCTION_39_21();
    v61 = *(_QWORD *)(v3 - 120);
    *(_QWORD *)(v3 - 96) = 0xD000000000000019;
    *(_QWORD *)(v3 - 88) = v61;
    v62._countAndFlagsBits = v59;
    v62._object = v60;
    String.append(_:)(v62);
    OUTLINED_FUNCTION_10_3();
    v63._countAndFlagsBits = 11815;
    v63._object = (void *)0xE200000000000000;
    String.append(_:)(v63);
    v64 = *(_QWORD *)(v3 - 96);
    v65 = *(_QWORD *)(v3 - 88);
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v66 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v66 + 16) = *(_OWORD *)(v3 - 112);
    *(_QWORD *)(v66 + 56) = v46;
    *(_QWORD *)(v66 + 32) = v64;
    *(_QWORD *)(v66 + 40) = v65;
    OUTLINED_FUNCTION_199();
    print(_:separator:terminator:)();
    OUTLINED_FUNCTION_30();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v67 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v68 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v68 + 16) = *(_OWORD *)(v3 - 112);
    *(_QWORD *)(v68 + 56) = v46;
    *(_QWORD *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v68 + 32) = v64;
    *(_QWORD *)(v68 + 40) = v65;
    OUTLINED_FUNCTION_199();
    os_log(_:dso:log:type:_:)();
    OUTLINED_FUNCTION_104();

    OUTLINED_FUNCTION_80();
    if (v43)
      goto LABEL_31;
LABEL_32:
    v49 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_66;
    if (v49 >= *(_QWORD *)(v3 - 128))
      break;
    v50 = *(_QWORD *)(*(_QWORD *)(v3 - 136) + 8 * v49);
    ++v45;
    if (!v50)
    {
      v45 = v49 + 1;
      OUTLINED_FUNCTION_23_36();
      if (v51 == v14)
        break;
      OUTLINED_FUNCTION_22_34();
      if (!v50)
      {
        v45 = v52 + 2;
        OUTLINED_FUNCTION_23_36();
        if (v51 == v14)
          break;
        OUTLINED_FUNCTION_22_34();
        if (!v50)
        {
          v45 = v53 + 3;
          OUTLINED_FUNCTION_23_36();
          if (v51 == v14)
            break;
          OUTLINED_FUNCTION_22_34();
          if (!v50)
          {
            v45 = v54 + 4;
            OUTLINED_FUNCTION_23_36();
            if (v51 == v14)
              break;
            OUTLINED_FUNCTION_22_34();
            if (!v50)
            {
              v56 = v55 + 5;
              if (v56 >= *(_QWORD *)(v3 - 128))
                break;
              v50 = *(_QWORD *)(*(_QWORD *)(v3 - 136) + 8 * v56);
              if (!v50)
              {
                while (1)
                {
                  v45 = v56 + 1;
                  if (__OFADD__(v56, 1))
                    break;
                  OUTLINED_FUNCTION_23_36();
                  if (v51 == v14)
                    goto LABEL_57;
                  OUTLINED_FUNCTION_22_34();
                  v56 = v57 + 1;
                  if (v50)
                    goto LABEL_54;
                }
LABEL_69:
                __break(1u);
LABEL_70:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x21AF47178);
              }
              v45 = v56;
            }
          }
        }
      }
    }
LABEL_54:
    v43 = (v50 - 1) & v50;
  }
LABEL_57:
  v69 = *(_QWORD *)(v3 - 72);
  OUTLINED_FUNCTION_136();
  if (*(_QWORD *)(v69 + 16))
  {
    OUTLINED_FUNCTION_101();
    v70 = 0xE000000000000000;
    *(_QWORD *)(v3 - 96) = 0;
    *(_QWORD *)(v3 - 88) = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v71 = *(_QWORD *)(v3 - 88);
    *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 96);
    *(_QWORD *)(v3 - 88) = v71;
    OUTLINED_FUNCTION_27_2();
    v72._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v72);
    v73 = specialized Collection.first.getter(v69);
    if (v74)
      v70 = v74;
    else
      v73 = 0;
    v75 = v70;
    String.append(_:)(*(Swift::String *)&v73);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_27_2();
    String.append(_:)(v76);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
    v77._countAndFlagsBits = Dictionary.Keys.description.getter();
    object = v77._object;
    String.append(_:)(v77);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_51_6();
    OUTLINED_FUNCTION_35_23();
    v79 = OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v80 = object;
    *(_QWORD *)(v80 + 8) = v3 - 96;
    *(_OWORD *)(v80 + 16) = 0u;
    *(_OWORD *)(v80 + 32) = 0u;
    *(_BYTE *)(v80 + 48) = 0;
    *(_QWORD *)(v3 - 144) = v79;
    swift_willThrow(0.0);
    OUTLINED_FUNCTION_136();
  }
  else
  {
    OUTLINED_FUNCTION_136();
  }
LABEL_63:
  OUTLINED_FUNCTION_7();
}

void MLSoundClassifier.DataSource.validate(modelParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  v4 = OUTLINED_FUNCTION_93();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - v10;
  OUTLINED_FUNCTION_21_26();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v15 = v14 - v13;
  outlined init with copy of MLSoundClassifier.DataSource(v1, v14 - v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v28 = a1;
    v19 = *(void **)v15;
    v20 = *(unsigned __int8 *)(v15 + 8);
    v21 = *(void **)(v15 + 48);
    v26 = *(_QWORD *)(v15 + 56);
    LODWORD(v25) = *(unsigned __int8 *)(v15 + 64);
    v24 = *(_QWORD *)(v15 + 72);
    v23 = *(unsigned __int8 *)(v15 + 80);
    v29 = v19;
    LOBYTE(v30) = v20;
    LODWORD(v27) = v20;
    outlined copy of Result<_DataTable, Error>(v19, v20);
    DataFrame.init(_:)((uint64_t)&v29);
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)();
    if (v2)
    {
      OUTLINED_FUNCTION_19_2(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      OUTLINED_FUNCTION_48_20();
      OUTLINED_FUNCTION_12_0();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_19_2(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    OUTLINED_FUNCTION_12_0();
    swift_bridgeObjectRelease();
    v29 = v21;
    v30 = v26;
    v31 = v25;
    v32 = v24;
    v33 = v23;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v29, v28);
    OUTLINED_FUNCTION_48_20();
  }
  else if (EnumCaseMultiPayload == 4)
  {
    v28 = a1;
    v17 = v15
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters))
                 + 80);
    v18 = *(void **)v17;
    v27 = *(_QWORD *)(v17 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v17 + 16);
    v25 = *(_QWORD *)(v17 + 24);
    LODWORD(v24) = *(unsigned __int8 *)(v17 + 32);
    OUTLINED_FUNCTION_40_21((uint64_t)v11, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)();
    if (v2)
    {
      OUTLINED_FUNCTION_19_2((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      OUTLINED_FUNCTION_104();
LABEL_7:
      swift_bridgeObjectRelease();
      return;
    }
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_104();
    v29 = v18;
    v30 = v27;
    v31 = v26;
    v32 = v25;
    v33 = v24;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v29, v28);
    OUTLINED_FUNCTION_19_2((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  }
  else
  {
    outlined destroy of MLSoundClassifier.DataSource(v15);
  }
}

void MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  void *v30;
  void *v31;
  uint64_t v32;
  Swift::Int_optional v33;
  Swift::Int_optional v34;

  OUTLINED_FUNCTION_8_1();
  v30 = v0;
  v2 = v1;
  v31 = v3;
  v32 = v4;
  v6 = v5;
  v7 = type metadata accessor for AnyColumn();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  v12 = type metadata accessor for DataFrame.Rows();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_54_0();
  DataFrame.rows.getter();
  v13 = specialized Collection.isEmpty.getter();
  v14 = OUTLINED_FUNCTION_120_4();
  v15(v14);
  if (!v13)
  {
    v19._countAndFlagsBits = v32;
    v19._object = v31;
    v33 = DataFrame.indexOfColumn(_:)(v19);
    if (v33.is_nil)
    {
      OUTLINED_FUNCTION_11_43();
      OUTLINED_FUNCTION_39_21();
      v27._countAndFlagsBits = v32;
      v27._object = v31;
      String.append(_:)(v27);
      OUTLINED_FUNCTION_51_6();
      OUTLINED_FUNCTION_35_23();
      v16 = OUTLINED_FUNCTION_49_0();
      *v17 = v2;
      v17[1] = v6;
      goto LABEL_9;
    }
    DataFrame.subscript.getter();
    v20 = AnyColumn.wrappedElementType.getter();
    if (static MLSoundClassifier.DataSource.isNumericArray(_:)(v20))
    {
      v21._countAndFlagsBits = v2;
      v21._object = v30;
      v34 = DataFrame.indexOfColumn(_:)(v21);
      if (v34.is_nil)
      {
        OUTLINED_FUNCTION_11_43();
        OUTLINED_FUNCTION_39_21();
        v29._countAndFlagsBits = v2;
        v29._object = v30;
        String.append(_:)(v29);
        OUTLINED_FUNCTION_51_6();
        OUTLINED_FUNCTION_35_23();
        v22 = OUTLINED_FUNCTION_49_0();
        *v23 = v30;
        v23[1] = v6;
        goto LABEL_13;
      }
      if ((specialized DataFrame.containsColumn<A>(_:_:)(v2, v30) & 1) != 0)
      {
LABEL_14:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
        goto LABEL_15;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_21_35();
      v25 = v24 + 11;
      v26 = "Provided feature table label column is not of string type.";
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_21_35();
      v25 = v28 + 17;
      v26 = "Provided feature table feature column is not of multiarray type.";
    }
    *v23 = v25;
    v23[1] = (unint64_t)(v26 - 32) | 0x8000000000000000;
LABEL_13:
    OUTLINED_FUNCTION_5_8(v22, (uint64_t)v23);
    goto LABEL_14;
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_21_35();
  *v17 = v18 - 15;
  v17[1] = 0x800000021AFF7770;
LABEL_9:
  OUTLINED_FUNCTION_5_8(v16, (uint64_t)v17);
LABEL_15:
  OUTLINED_FUNCTION_7();
}

BOOL static MLSoundClassifier.DataSource.isNumericArray(_:)(uint64_t a1)
{
  return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>) == a1
      || __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>) == a1
      || type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]) == a1;
}

uint64_t MLSoundClassifier.DataSource.stratifiedSplit(proportions:seed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD var28[7];

  MLSoundClassifier.DataSource.labeledSounds()();
  if (v3)
    return v2;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v7 = v6;
    type metadata accessor for MersenneTwisterGenerator();
    OUTLINED_FUNCTION_9_1();
    MersenneTwisterGenerator.init(seed:)(a2);
    specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(a1, (uint64_t)var28, v7, v9, v10, v11, v12, v13, v16, v17, v18, v19, v20, v8, var28[1], var28[2], var28[3], var28[4], var28[5],
      var28[6]);
    v2 = v14;
    OUTLINED_FUNCTION_101();
    swift_release();
    return v2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MLSoundClassifier.DataSource.stratifiedSplit<A>(proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MLSoundClassifier.DataSource.labeledSounds()();
  if (!v4)
  {
    v8 = v7;
    v9 = OUTLINED_FUNCTION_120_4();
    a4 = stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(v9, v10, v8, a3, a4);
    OUTLINED_FUNCTION_30();
  }
  return a4;
}

void closure #1 in static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];

  v4 = *a1;
  if (!*a1)
  {
    v9 = 0;
LABEL_13:
    *a2 = v9;
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_21AFE8580;
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v5 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v6);
  v14[0] = v5;
  specialized Array._endMutation()();
  v7 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v8 = @nonobjc MLMultiArray.init(shape:dataType:)(v5, 65600);
  if (!v2)
  {
    v9 = v8;
    v10 = UnsafeMutableBufferPointer.init(_:)();
    if (v6)
    {
      v11 = (_QWORD *)v10;
      v12 = v4 + 32;
      while (1)
      {
        outlined init with copy of URL?(v12, (uint64_t)v14, &demangling cache variable for type metadata for Any?);
        if (!v14[3])
          break;
        if (!swift_dynamicCast())
          goto LABEL_9;
        v13 = v14[5];
LABEL_10:
        *v11++ = v13;
        v12 += 32;
        if (!--v6)
          goto LABEL_13;
      }
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v14, &demangling cache variable for type metadata for Any?);
LABEL_9:
      v13 = 0;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  swift_unexpectedError();
  __break(1u);
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t type metadata accessor for MLSoundClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLSoundClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t *v2;
  char v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  _QWORD v10[2];

  v2 = (uint64_t *)isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v5 = (_QWORD *)((char *)v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    v6 = specialized closure #1 in _NativeDictionary.filter(_:)(v5, v4, (uint64_t)v2);
    if (v1)
      swift_willThrow(v7);
    else
      return v6;
  }
  else
  {
    v8 = (uint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    v2 = specialized closure #1 in _NativeDictionary.filter(_:)(v8, v4, (uint64_t)v2);
    MEMORY[0x22075BA10](v8, -1, -1);
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLSoundClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21AF47D4C + 4 * byte_21AFEECF0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 2:
      goto LABEL_5;
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      v4 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for MLSoundClassifier.DataSource()
{
  char *v0;

  v0 = (char *)sub_21AF48010 + 4 * byte_21AFEECFA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF48010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for MLSoundClassifier.DataSource(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource(result);
    v2 = (char *)&loc_21AF481E4 + 4 * byte_21AFEECFF[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t outlined destroy of MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for MLSoundClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    v9 = v8[20];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    v10[32] = v11[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v13 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      v9 = v8[20];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      v10[32] = v11[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for MLSoundClassifier.DataSource()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v5 = v4;
    v6 = MEMORY[0x24BEE0158] + 64;
    v7 = "Q";
    result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout();
      v8 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 16))
    {
      *(uint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v32;
  uint64_t v33;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      OUTLINED_FUNCTION_62_14();
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_50_10();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
      break;
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v26 = 0;
  v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    v28 = v24 == v27;
    if (v24 == v27)
      v24 = 0;
    v26 |= v28;
    v29 = *(_QWORD *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.Keys.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

void OUTLINED_FUNCTION_11_43()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
}

uint64_t OUTLINED_FUNCTION_13_48()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 72) + 8))(v0, *(_QWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_14_40()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 72) + 8))(v0, *(_QWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_15_36(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_16_39()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_19_36()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t OUTLINED_FUNCTION_26_33()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_34_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 104));
}

unint64_t OUTLINED_FUNCTION_35_23()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

BOOL OUTLINED_FUNCTION_38_21@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_39_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_45_23()
{
  return 0;
}

void OUTLINED_FUNCTION_48_20()
{
  void *v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(v0, *(_DWORD *)(v1 - 136));
}

BOOL OUTLINED_FUNCTION_51_23()
{
  Swift::Bool v0;
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

unint64_t OUTLINED_FUNCTION_55_20()
{
  uint64_t v0;

  return specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 - 144), *(_QWORD *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_59_19@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

BOOL OUTLINED_FUNCTION_60_17()
{
  char v0;
  char v1;

  return (!v1 & v0) != 0;
}

uint64_t OUTLINED_FUNCTION_62_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v17;
    v6 = a1 + 56;
    do
    {
      v7 = *(_QWORD *)(v6 - 24);
      v8 = *(_QWORD *)(v6 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = (void *)MEMORY[0x22075A8AC](v7, v8);
      v10 = objc_msgSend(a2, sel_predictedLabelForString_, v9);

      if (v10)
      {
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = 0;
        v13 = 0xE000000000000000;
      }
      v14 = *(_QWORD *)(v17 + 16);
      if (v14 >= *(_QWORD *)(v17 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v17 + 16) = v14 + 1;
      v15 = v17 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v13;
      v6 += 32;
      --v3;
    }
    while (v3);

  }
  else
  {

    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50128_s8CreateML16MLTextClassifierV12trainingData10textColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcU73S0G0_SS0I0t_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAM_SSANtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD);
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  void (*v59)(_QWORD *, _QWORD);
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[4];
  uint64_t v86;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v80 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  MEMORY[0x24BDAC7A8](v83);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  MEMORY[0x24BDAC7A8](v84);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  v9 = dispatch thunk of Sequence.underestimatedCount.getter();
  v10 = a1;
  v11 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v11 >= v9)
    v12 = v9;
  else
    v12 = v11;
  v86 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  _sypSgWOcTm_0(v10, (uint64_t)v6, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  v13 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
  v13(v4, v6, v2);
  v14 = v4;
  dispatch thunk of Sequence.makeIterator()();
  v15 = v2;
  v16 = v12;
  v13(v4, &v6[*(int *)(v83 + 52)], v15);
  v17 = (uint64_t)v8;
  v18 = v84;
  v78 = &v8[*(int *)(v84 + 52)];
  dispatch thunk of Sequence.makeIterator()();
  v79 = *(int *)(v18 + 56);
  v8[v79] = 0;
  if (v12 < 0)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v76 = v8;
    v77 = v14;
    v75 = v15;
    if (v12)
    {
      v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                   + 36);
      v20 = &v8[v19];
      v21 = v78;
      v22 = &v78[v19];
      v73 = &v78[v19];
      v74 = &v8[v19];
      do
      {
        if (!v16)
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if ((*(_BYTE *)(v17 + v79) & 1) != 0)
          goto LABEL_50;
        v23 = *(_QWORD *)v20;
        lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
        dispatch thunk of Collection.endIndex.getter();
        if (v23 == v85[0])
          goto LABEL_51;
        v83 = v16;
        v24 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        v26 = v25[1];
        v82 = *v25;
        v84 = v26;
        swift_bridgeObjectRetain();
        v24(v85, 0);
        v27 = v80;
        v28 = v22;
        v29 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
        v30 = v77;
        v29(v77, v17, v15);
        dispatch thunk of Collection.formIndex(after:)();
        v31 = *(void (**)(char *, uint64_t))(v27 + 8);
        v31(v30, v15);
        v32 = *(_QWORD *)v28;
        dispatch thunk of Collection.endIndex.getter();
        if (v32 == v85[0])
          goto LABEL_53;
        v33 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        v35 = v34[1];
        v81 = *v34;
        swift_bridgeObjectRetain();
        v33(v85, 0);
        v29(v30, (uint64_t)v21, v15);
        dispatch thunk of Collection.formIndex(after:)();
        v31(v30, v15);
        if (v84)
          v36 = v82;
        else
          v36 = 0;
        if (v84)
          v37 = v84;
        else
          v37 = 0xE000000000000000;
        if (v35)
          v38 = v81;
        else
          v38 = 0;
        if (v35)
          v39 = v35;
        else
          v39 = 0xE000000000000000;
        v40 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v40 = v86;
        }
        v41 = v83;
        v42 = *(_QWORD *)(v40 + 16);
        if (v42 >= *(_QWORD *)(v40 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v40 = v86;
        }
        *(_QWORD *)(v40 + 16) = v42 + 1;
        v43 = (_QWORD *)(v40 + 32 * v42);
        v43[4] = v36;
        v43[5] = v37;
        v43[6] = v38;
        v43[7] = v39;
        v16 = v41 - 1;
        v15 = v75;
        v17 = (uint64_t)v76;
        v21 = v78;
        v22 = v73;
        v20 = v74;
      }
      while (v16);
      if ((v76[v79] & 1) != 0)
        goto LABEL_48;
    }
    lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    v45 = v44;
    while (1)
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      v47 = *(_QWORD *)(v17 + *(int *)(v46 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v47 == v85[0])
        break;
      v48 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v50 = v49[1];
      v83 = *v49;
      v84 = v50;
      swift_bridgeObjectRetain();
      v48(v85, 0);
      v51 = v80;
      v52 = v17;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
      v54 = v45;
      v55 = v77;
      v53(v77, v52, v15);
      dispatch thunk of Collection.formIndex(after:)();
      v56 = *(void (**)(char *, uint64_t))(v51 + 8);
      v56(v55, v15);
      v57 = v78;
      v58 = *(_QWORD *)&v78[*(int *)(v46 + 36)];
      dispatch thunk of Collection.endIndex.getter();
      if (v58 == v85[0])
      {
        swift_bridgeObjectRelease();
        v17 = (uint64_t)v76;
        break;
      }
      v59 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v61 = *v60;
      v62 = v60[1];
      swift_bridgeObjectRetain();
      v59(v85, 0);
      v53(v55, (uint64_t)v57, v15);
      v63 = v54;
      dispatch thunk of Collection.formIndex(after:)();
      v56(v55, v15);
      v64 = v84;
      if (v84)
        v65 = v83;
      else
        v65 = 0;
      if (!v84)
        v64 = 0xE000000000000000;
      v84 = v64;
      if (v62)
      {
        v66 = v62;
      }
      else
      {
        v61 = 0;
        v66 = 0xE000000000000000;
      }
      v67 = v86;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v67 = v86;
      }
      v68 = *(_QWORD *)(v67 + 16);
      v45 = v63;
      if (v68 >= *(_QWORD *)(v67 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v67 = v86;
      }
      *(_QWORD *)(v67 + 16) = v68 + 1;
      v69 = (_QWORD *)(v67 + 32 * v68);
      v70 = v84;
      v69[4] = v65;
      v69[5] = v70;
      v69[6] = v61;
      v69[7] = v66;
      v15 = v75;
      v17 = (uint64_t)v76;
      if ((v76[v79] & 1) != 0)
        goto LABEL_48;
    }
    *(_BYTE *)(v17 + v79) = 1;
LABEL_48:
    outlined destroy of URL?(v17, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
    return v86;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v7;
  uint64_t v8;

  v2 = Set.init(minimumCapacity:)();
  v8 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 40;
    do
    {
      OUTLINED_FUNCTION_195();
      OUTLINED_FUNCTION_90_5(&v7);
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    OUTLINED_FUNCTION_123();
    return v8;
  }
  else
  {
    v5 = v2;
    OUTLINED_FUNCTION_123();
  }
  return v5;
}

void specialized Set.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::Int *v5;
  Swift::Int v6;
  Swift::Int v7;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>);
  OUTLINED_FUNCTION_12_43();
  v2 = Set.init(minimumCapacity:)();
  OUTLINED_FUNCTION_4_53(v2);
  OUTLINED_FUNCTION_57_16();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>);
  OUTLINED_FUNCTION_0_65();
  OUTLINED_FUNCTION_54_18();
  while (!v4)
  {
    OUTLINED_FUNCTION_3_50();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_72_14();
    OUTLINED_FUNCTION_6_53();
    OUTLINED_FUNCTION_5_47();
    OUTLINED_FUNCTION_11_44();
    v5 = (Swift::Int *)OUTLINED_FUNCTION_71_11();
    specialized Set._Variant.insert(_:)(v5, v6, v7);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_65();
    OUTLINED_FUNCTION_53_20();
  }
  OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  OUTLINED_FUNCTION_46_20();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>);
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_77_12(&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  v2 = OUTLINED_FUNCTION_25_34();
  OUTLINED_FUNCTION_4_53(v2);
  OUTLINED_FUNCTION_57_16();
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  OUTLINED_FUNCTION_0_65();
  OUTLINED_FUNCTION_54_18();
  while (!v4)
  {
    v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_3_50();
    OUTLINED_FUNCTION_34_28(v5);
    OUTLINED_FUNCTION_6_53();
    OUTLINED_FUNCTION_5_47();
    OUTLINED_FUNCTION_11_44();
    OUTLINED_FUNCTION_40_24();
    OUTLINED_FUNCTION_0_65();
    OUTLINED_FUNCTION_53_20();
  }
  OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  OUTLINED_FUNCTION_46_20();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);
  _QWORD v18[2];

  OUTLINED_FUNCTION_20_3();
  v2 = v1;
  v3 = type metadata accessor for URL();
  v4 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_14_5();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, v4);
  v13 = Set.init(minimumCapacity:)();
  v18[0] = v2;
  v18[1] = v13;
  v14 = *(_QWORD *)(v2 + 16);
  if (v14)
  {
    v15 = v18[0] + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v16 = *(_QWORD *)(v5 + 72);
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v17(v0, v15, v3);
      OUTLINED_FUNCTION_84_9(v0, 0);
      if (__swift_getEnumTagSinglePayload(v0, 1, v3) == 1)
        break;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v0, v3);
      specialized Set._Variant.insert(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v3);
      v15 += v16;
      if (!--v14)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    OUTLINED_FUNCTION_84_9(v0, 1);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t *, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8[5];

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>);
  OUTLINED_FUNCTION_12_43();
  v2 = Set.init(minimumCapacity:)();
  OUTLINED_FUNCTION_4_53(v2);
  OUTLINED_FUNCTION_57_16();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>);
  OUTLINED_FUNCTION_0_65();
  OUTLINED_FUNCTION_54_18();
  while (!v4)
  {
    v5 = (void (*)(uint64_t *, _QWORD))OUTLINED_FUNCTION_3_50();
    v7 = *v6;
    v5(v8, 0);
    OUTLINED_FUNCTION_6_53();
    OUTLINED_FUNCTION_5_47();
    OUTLINED_FUNCTION_11_44();
    specialized Set._Variant.insert(_:)(v8, v7);
    OUTLINED_FUNCTION_0_65();
    OUTLINED_FUNCTION_53_20();
  }
  OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  OUTLINED_FUNCTION_46_20();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::Int *v5;
  Swift::Int v6;
  Swift::Int v7;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_77_12(&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  v2 = OUTLINED_FUNCTION_25_34();
  OUTLINED_FUNCTION_4_53(v2);
  OUTLINED_FUNCTION_57_16();
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0_65();
  OUTLINED_FUNCTION_54_18();
  while (!v4)
  {
    OUTLINED_FUNCTION_3_50();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_72_14();
    OUTLINED_FUNCTION_6_53();
    OUTLINED_FUNCTION_5_47();
    OUTLINED_FUNCTION_11_44();
    v5 = (Swift::Int *)OUTLINED_FUNCTION_71_11();
    specialized Set._Variant.insert(_:)(v5, v6, v7);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_65();
    OUTLINED_FUNCTION_53_20();
  }
  OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  OUTLINED_FUNCTION_46_20();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  OUTLINED_FUNCTION_20_35(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>);
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_18_32();
  OUTLINED_FUNCTION_77_12(&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  v2 = OUTLINED_FUNCTION_25_34();
  OUTLINED_FUNCTION_4_53(v2);
  OUTLINED_FUNCTION_57_16();
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0_65();
  OUTLINED_FUNCTION_54_18();
  while (!v4)
  {
    v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_3_50();
    OUTLINED_FUNCTION_34_28(v5);
    OUTLINED_FUNCTION_6_53();
    OUTLINED_FUNCTION_5_47();
    OUTLINED_FUNCTION_11_44();
    OUTLINED_FUNCTION_40_24();
    OUTLINED_FUNCTION_0_65();
    OUTLINED_FUNCTION_53_20();
  }
  OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  OUTLINED_FUNCTION_46_20();
  OUTLINED_FUNCTION_9_5();
}

_QWORD *specialized Set.init<A>(_:)(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  Swift::Int v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;

  v12 = Set.init(minimumCapacity:)();
  result = specialized _NativeDictionary.makeIterator()(v13, a1);
  v3 = v13[1];
  v4 = v13[3];
  v5 = v14;
  v6 = (unint64_t)(v13[2] + 64) >> 6;
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_90_5(&v11);
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (_QWORD *)v12;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t TrainedModelWithData;
  Class v7;
  Class v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  double v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class v37;
  uint64_t aBlock;
  uint64_t v39;
  void *v40;
  void *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v7 = static MLTextClassifier.buildOptions(_:)(a3);
  if (!v3)
  {
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x24BEE0D00];
    v37 = v7;
    if (v9)
    {
      v36 = a2;
      aBlock = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NSDictionary);
      v12 = (uint64_t *)(a1 + 56);
      do
      {
        v14 = *(v12 - 3);
        v13 = *(v12 - 2);
        v15 = *(v12 - 1);
        v16 = *v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_21AFE7F70;
        *(_QWORD *)(v17 + 32) = 0x6C6562614CLL;
        *(_QWORD *)(v17 + 40) = 0xE500000000000000;
        *(_QWORD *)(v17 + 56) = v11;
        *(_QWORD *)(v17 + 64) = v15;
        *(_QWORD *)(v17 + 72) = v16;
        *(_QWORD *)(v17 + 88) = v11;
        *(_QWORD *)(v17 + 96) = 0x676E69727453;
        *(_QWORD *)(v17 + 104) = 0xE600000000000000;
        *(_QWORD *)(v17 + 152) = v11;
        *(_QWORD *)(v17 + 120) = v11;
        *(_QWORD *)(v17 + 128) = v14;
        *(_QWORD *)(v17 + 136) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        NSDictionary.init(dictionaryLiteral:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v12 += 4;
        --v9;
      }
      while (v9);
      v10 = aBlock;
      v8 = v37;
      a2 = v36;
    }
    v45 = v10;
    v18 = *(_QWORD *)(a2 + 16);
    v19 = MEMORY[0x24BEE4AF8];
    if (v18)
    {
      v35 = v10;
      aBlock = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NSDictionary);
      v20 = v18;
      v21 = (uint64_t *)(a2 + 56);
      do
      {
        v22 = *(v21 - 3);
        v23 = *(v21 - 2);
        v24 = *(v21 - 1);
        v25 = *v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_21AFE7F70;
        *(_QWORD *)(v26 + 32) = 0x6C6562614CLL;
        *(_QWORD *)(v26 + 40) = 0xE500000000000000;
        *(_QWORD *)(v26 + 56) = v11;
        *(_QWORD *)(v26 + 64) = v24;
        *(_QWORD *)(v26 + 72) = v25;
        *(_QWORD *)(v26 + 88) = v11;
        *(_QWORD *)(v26 + 96) = 0x676E69727453;
        *(_QWORD *)(v26 + 104) = 0xE600000000000000;
        *(_QWORD *)(v26 + 152) = v11;
        *(_QWORD *)(v26 + 120) = v11;
        *(_QWORD *)(v26 + 128) = v22;
        *(_QWORD *)(v26 + 136) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        NSDictionary.init(dictionaryLiteral:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v21 += 4;
        --v20;
      }
      while (v20);
      v19 = aBlock;
      v8 = v37;
      v10 = v35;
    }
    v46 = 0;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || v10 < 0
      || (v10 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
    v44 = v19;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || v19 < 0
      || (v19 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v19);
    }
    v42 = implicit closure #1 in closure #1 in closure #3 in static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:);
    v43 = 0;
    v27 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v39 = 1107296256;
    v40 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?);
    v41 = &block_descriptor_7;
    v28 = _Block_copy(&aBlock);
    v42 = (void (*)(uint64_t, uint64_t))MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    v43 = 0;
    aBlock = v27;
    v39 = 1107296256;
    v40 = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ();
    v41 = &block_descriptor_3;
    v29 = _Block_copy(&aBlock);
    TrainedModelWithData = NLPClassifierModelCreateTrainedModelWithData();
    _Block_release(v29);
    _Block_release(v28);
    specialized Array._endMutation()();
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    v30 = v46;
    if (v46)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      swift_allocError();
      *v32 = v30;
    }
    else
    {
      if (TrainedModelWithData)
      {

        swift_bridgeObjectRelease();
        return TrainedModelWithData;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v34 = 0xD00000000000002DLL;
      *(_QWORD *)(v34 + 8) = 0x800000021AFF78C0;
      v31 = 0.0;
      *(_OWORD *)(v34 + 16) = 0u;
      *(_OWORD *)(v34 + 32) = 0u;
      *(_BYTE *)(v34 + 48) = 0;
    }
    swift_willThrow(v31);

    swift_bridgeObjectRelease();
  }
  return TrainedModelWithData;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v6 = v5(a2, a3);
  swift_release();
  return v6;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(void *, uint64_t);
  id v6;

  v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  v5(a2, a3);
  swift_release();

}

id MLTextClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void key path setter for MLTextClassifier.model : MLTextClassifier(id *a1)
{
  MLTextClassifier.model.setter((uint64_t)*a1);
}

void MLTextClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_22();
}

void (*MLTextClassifier.model.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  return MLTextClassifier.model.modify;
}

void MLTextClassifier.model.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *(_QWORD *)(v2 + 16) = v5;
  }
  else
  {

    *(_QWORD *)(v2 + 16) = v3;
  }
}

void MLTextClassifier.modelParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_45_24();
  OUTLINED_FUNCTION_68_16(v0 + *(int *)(v1 + 28), v2, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for MLTextClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier;
  if (!type metadata singleton initialization cache for MLTextClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void MLTextClassifier.trainingMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_45_24();
  OUTLINED_FUNCTION_68_16(v0 + *(int *)(v1 + 32), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.validationMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_45_24();
  OUTLINED_FUNCTION_68_16(v0 + *(int *)(v1 + 36), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

#error "21AF4A7E0: call analysis failed (funcsize=49)"

void MLTextClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  OUTLINED_FUNCTION_66_17();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_49();
  v28 = v27 - v26;
  v29 = type metadata accessor for DataFrame();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_50();
  v33 = v31 - v32;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&a9 - v35;
  OUTLINED_FUNCTION_30_32();
  v42 = specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(v37, v38, v39, v40, v41);
  if (v20)
  {
    OUTLINED_FUNCTION_48_0(v42, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
    OUTLINED_FUNCTION_10_3();
  }
  else
  {
    OUTLINED_FUNCTION_10_3();
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v33, v36, v29);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v24, v28, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
    OUTLINED_FUNCTION_30_32();
    MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)();
    OUTLINED_FUNCTION_48_0(v43, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
  }
  OUTLINED_FUNCTION_7();
}

void MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(__n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t EnumCaseMultiPayload;
  uint64_t v84;
  uint64_t v85;
  uint64_t ML16MLTextClassifierV12trainingData10textColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcU73S0G0_SS0I0t_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAM_SSANtSSTf3nnnpk_nTf1cn_n;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;

  OUTLINED_FUNCTION_8_1();
  v147 = v0;
  v3 = v2;
  v149 = v4;
  v143 = v6;
  v144 = v5;
  v151 = v7;
  v9 = v8;
  v11 = v10;
  v131 = type metadata accessor for DataFrame.Rows();
  v133 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v12);
  v136 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v14);
  type metadata accessor for MLTextClassifier.FeatureExtractorType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_50();
  v134 = v16 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v138 = (uint64_t)&v125 - v19;
  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v21);
  v140 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  v142 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  v141 = v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_49();
  v30 = v29 - v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  v32 = OUTLINED_FUNCTION_23_37();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_50();
  v35 = v33 - v34;
  v37 = MEMORY[0x24BDAC7A8](v36);
  v148 = v38;
  v39 = *(void (**)(__n128))(v38 + 16);
  v153 = (uint64_t)&v125 - v40;
  v145 = v9;
  v150 = v41;
  v39(v37);
  v42 = type metadata accessor for MLTextClassifier();
  v43 = v11;
  v44 = v11 + *(int *)(v42 + 28);
  v146 = v3;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v3, v44, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.ModelParameters.validateRevision()();
  v152 = v44;
  if (v45)
    goto LABEL_5;
  v129 = v27;
  v130 = v1;
  v147 = v30;
  v128 = v35;
  v127 = v42;
  v46 = OUTLINED_FUNCTION_66_17();
  v47 = v44 + *(int *)(v46 + 36);
  if ((*(_BYTE *)(v47 + 8) & 1) == 0 && *(uint64_t *)v47 <= 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v51 = 0xD000000000000036;
    *(_QWORD *)(v51 + 8) = 0x800000021AFF7800;
    *(_OWORD *)(v51 + 16) = 0u;
    *(_OWORD *)(v51 + 32) = 0u;
    *(_BYTE *)(v51 + 48) = 0;
    OUTLINED_FUNCTION_92_6(0.0);
    goto LABEL_5;
  }
  MLTextClassifier.ModelParameters.validateCustomEmbeddingURL()();
  if (v48)
  {
LABEL_5:
    OUTLINED_FUNCTION_23_15();
    OUTLINED_FUNCTION_106_0();
    v49 = *(uint64_t (**)(uint64_t, uint64_t))(v148 + 8);
    OUTLINED_FUNCTION_24_38(v145);
    v50 = v49(v153, v44);
    OUTLINED_FUNCTION_43_20(v50, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v152, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_7:
    OUTLINED_FUNCTION_7();
    return;
  }
  OUTLINED_FUNCTION_79_9();
  static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)();
  v126 = 0;
  v52 = v147;
  DataFrame.subscript.getter();
  *(_QWORD *)&v156 = 0;
  *((_QWORD *)&v156 + 1) = 0xE000000000000000;
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  v125 = v53;
  OptionalColumnProtocol.filled(with:)();
  v129 = *(_QWORD *)(v129 + 8);
  ((void (*)(uint64_t, uint64_t))v129)(v52, v26);
  specialized Set.init<A>(_:)();
  *(_QWORD *)(v43 + 8) = v54;
  _sypSgWOcTm_0(v152 + *(int *)(v46 + 24), (uint64_t)&v154, &demangling cache variable for type metadata for Any?);
  if (v155)
  {
    outlined init with take of Any(&v154, &v156);
    swift_dynamicCast();
    v55 = v141;
    v56 = v153;
    OUTLINED_FUNCTION_79_9();
    v57 = v126;
    MLTextClassifier.ModelParameters.ValidationData.createValidationData(trainingData:textColumn:labelColumn:)(v58, v59, v60, v61, v62, v63);
    OUTLINED_FUNCTION_55_21();
    if (v57)
    {
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_106_0();
      v65 = OUTLINED_FUNCTION_62_22();
      v66 = v150;
      v67 = ((uint64_t (*)(uint64_t, uint64_t))v46)(v65, v150);
      OUTLINED_FUNCTION_203(v67, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      v68 = v56;
      v69 = v66;
LABEL_13:
      v70 = ((uint64_t (*)(uint64_t, uint64_t))v46)(v68, v69);
      OUTLINED_FUNCTION_43_20(v70, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    v140 = v46;
    OUTLINED_FUNCTION_203(v64, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    if (__swift_getEnumTagSinglePayload(v55, 1, v150) == 1)
    {
      outlined destroy of URL?(v55, &demangling cache variable for type metadata for DataFrame?);
      v142 = MEMORY[0x24BEE4AF8];
      v147 = v43;
      v71 = v135;
    }
    else
    {
      v72 = v128;
      (*(void (**)(void))(v148 + 32))();
      v73 = v147;
      DataFrame.subscript.getter();
      *(_QWORD *)&v156 = 0;
      *((_QWORD *)&v156 + 1) = 0xE000000000000000;
      OptionalColumnProtocol.filled(with:)();
      ((void (*)(uint64_t, uint64_t))v129)(v73, v26);
      specialized Set.init<A>(_:)();
      v75 = v74;
      v76 = *(_QWORD *)(v43 + 8);
      v77 = swift_bridgeObjectRetain();
      v78 = specialized Set.isSubset(of:)(v77, v75);
      OUTLINED_FUNCTION_30();
      swift_bridgeObjectRelease();
      if ((v78 & 1) == 0)
      {
        OUTLINED_FUNCTION_23_15();
        OUTLINED_FUNCTION_10_3();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_49_0();
        v105 = OUTLINED_FUNCTION_29_29(v104, 0xD00000000000003ELL);
        v126 = v106;
        OUTLINED_FUNCTION_92_6(v105);
        v46 = *(_QWORD *)(v148 + 8);
        OUTLINED_FUNCTION_24_38(v145);
        ((void (*)(uint64_t, uint64_t))v46)(v72, v76);
        v68 = v153;
        v69 = v76;
        goto LABEL_13;
      }
      v79 = v135;
      DataFrame.subscript.getter();
      v71 = v79;
      OUTLINED_FUNCTION_39_22();
      v142 = OUTLINED_FUNCTION_74_15(v79);
      OUTLINED_FUNCTION_55_21();
      outlined destroy of URL?(v79, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v72, v150);
      v147 = v43;
    }
    OUTLINED_FUNCTION_39_22();
    OUTLINED_FUNCTION_39_22();
    v80 = OUTLINED_FUNCTION_74_15(v71);
    outlined destroy of URL?(v71, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_10_3();
    v81 = v152;
    v82 = v137;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v152, v137, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v84 = v82;
      v85 = v138;
      outlined init with take of MLTextClassifier.FeatureExtractorType(v84, v138);
      v151 = v80;
      ML16MLTextClassifierV12trainingData10textColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcU73S0G0_SS0I0t_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAM_SSANtSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50128_s8CreateML16MLTextClassifierV12trainingData10textColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcU73S0G0_SS0I0t_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAM_SSANtSSTf3nnnpk_nTf1cn_n(v80);
      v87 = *(void **)(v81 + *(int *)(v140 + 20));
      if (v87)
      {
        v126 = 0;
        v88 = v87;
        v89 = v134;
        v90 = v147;
      }
      else
      {
        type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NLLanguageRecognizer);
        static NLLanguageRecognizer.dominantLanguage(for:)(ML16MLTextClassifierV12trainingData10textColumn05labelH010parametersAC07TabularF00F5FrameV_S2SAC15ModelParametersVtKcfcU73S0G0_SS0I0t_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAM_SSANtSSTf3nnnpk_nTf1cn_n);
        OUTLINED_FUNCTION_55_21();
        v89 = v134;
        v90 = v147;
        v88 = v116;
        v85 = v138;
      }
      OUTLINED_FUNCTION_60_0();
      _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v85, v89, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
      NLModelEmbeddingType.init(_:)(v89);
      v92 = v91;
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 0x6D6F74737543 && v93 == 0xE600000000000000)
      {
        v96 = swift_bridgeObjectRelease();
        v98 = v142;
        v99 = v151;
      }
      else
      {
        v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v96 = OUTLINED_FUNCTION_30();
        v97 = v148;
        v98 = v142;
        v99 = v151;
        if ((v95 & 1) == 0)
        {
          v100 = type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NLEmbedding);
          v101 = v126;
          static NLEmbedding.requestIfNotPresent(embeddingType:language:)((uint64_t)v92, (uint64_t)v88);
          OUTLINED_FUNCTION_55_21();
          if (v101)
          {
            OUTLINED_FUNCTION_104();

            OUTLINED_FUNCTION_60_0();
            v46 = *(_QWORD *)(v97 + 8);
            v102 = OUTLINED_FUNCTION_24_38(v145);
            OUTLINED_FUNCTION_42_20(v102, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
            v68 = v153;
            v69 = v100;
            goto LABEL_13;
          }
        }
      }
      OUTLINED_FUNCTION_42_20(v96, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);

      v103 = v153;
    }
    else
    {
      v126 = 0;
      OUTLINED_FUNCTION_203(EnumCaseMultiPayload, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
      v103 = v153;
      v98 = v142;
      v99 = v80;
      v90 = v147;
    }
    swift_bridgeObjectRetain();
    v107 = v126;
    v108 = specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(v99, v98, v152);
    if (v107)
    {
      v126 = v107;
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_41_19(v145);
      OUTLINED_FUNCTION_104();
      v109 = OUTLINED_FUNCTION_41_19(v103);
      OUTLINED_FUNCTION_43_20(v109, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
      OUTLINED_FUNCTION_60_0();
    }
    else
    {
      v110 = (void *)v108;
      OUTLINED_FUNCTION_104();
      *(_QWORD *)v90 = v110;
      v111 = v110;
      NLModel.asCoreML()();
      OUTLINED_FUNCTION_55_21();
      if (!v113)
      {
        *(_QWORD *)(v90 + 16) = v112;
        v115 = v127;
        specialized static MLTextClassifier.evaluation<A>(on:using:)(v99, v111);
        OUTLINED_FUNCTION_60_0();
        if (*(_QWORD *)(v98 + 16))
        {
          specialized static MLTextClassifier.evaluation<A>(on:using:)(v98, v111);
          OUTLINED_FUNCTION_104();

        }
        else
        {

          OUTLINED_FUNCTION_104();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_29_29(v117, 0xD00000000000001CLL);
          *(_QWORD *)(v90 + *(int *)(v115 + 36)) = v118;
          type metadata accessor for MLClassifierMetrics.Contents(0);
          swift_storeEnumTagMultiPayload();
        }
        v119 = v131;
        v120 = v133;
        v121 = v132;
        v122 = v153;
        DataFrame.rows.getter();
        v123 = DataFrame.Rows.count.getter();
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v121, v119);
        static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(v123);
        OUTLINED_FUNCTION_41_19(v145);
        v124 = OUTLINED_FUNCTION_41_19(v122);
        OUTLINED_FUNCTION_203(v124, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
        goto LABEL_7;
      }

      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_41_19(v145);
      v114 = OUTLINED_FUNCTION_41_19(v153);
      OUTLINED_FUNCTION_43_20(v114, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);

    }
    goto LABEL_14;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  OUTLINED_FUNCTION_66_17();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_23_37();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v7 = *((_BYTE *)v4 + 8);
  v8 = *v4;
  v9 = v7;
  DataFrame.init(_:)((uint64_t)&v8);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v2, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters);
  OUTLINED_FUNCTION_7();
}

void static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::String v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  Swift::String v17;
  os_log_type_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  Swift::Int_optional v34;
  Swift::Int_optional v35;

  OUTLINED_FUNCTION_8_1();
  v33 = v0;
  v30 = v1;
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for AnyColumn();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  v10 = (char *)(v8 - v9);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v29 - v12;
  v14._countAndFlagsBits = v5;
  v14._object = v3;
  v34 = DataFrame.indexOfColumn(_:)(v14);
  if (v34.is_nil)
  {
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    OUTLINED_FUNCTION_81_13();
    OUTLINED_FUNCTION_15_4(v21 - 18, (uint64_t)"Text column name '");
    v22 = v5;
    v23 = v3;
LABEL_10:
    String.append(_:)(*(Swift::String *)&v22);
    v26._object = (void *)0x800000021AFF7910;
    v26._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v26);
    v19 = v31;
    v24 = (void *)v32;
    v18 = static os_log_type_t.error.getter();
    goto LABEL_11;
  }
  DataFrame.subscript.getter();
  AnyColumn.wrappedElementType.getter();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v13, v6);
  if (!swift_dynamicCastMetatype())
  {
    v18 = static os_log_type_t.error.getter();
    v19 = 0xD00000000000002DLL;
    v20 = "Text column does not contain string elements.";
    goto LABEL_8;
  }
  v16 = v30;
  v17._countAndFlagsBits = v30;
  v17._object = v33;
  v35 = DataFrame.indexOfColumn(_:)(v17);
  if (v35.is_nil)
  {
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    OUTLINED_FUNCTION_81_13();
    OUTLINED_FUNCTION_15_4(v25 - 17, (uint64_t)"Label column name '");
    v22 = v16;
    v23 = v33;
    goto LABEL_10;
  }
  DataFrame.subscript.getter();
  AnyColumn.wrappedElementType.getter();
  v15(v10, v6);
  if (!swift_dynamicCastMetatype())
  {
    v18 = static os_log_type_t.error.getter();
    v19 = 0xD00000000000002ELL;
    v20 = "Label column does not contain string elements.";
LABEL_8:
    v24 = (void *)((unint64_t)(v20 - 32) | 0x8000000000000000);
LABEL_11:
    v27._countAndFlagsBits = v19;
    v27._object = v24;
    log(_:type:)(v27, v18);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v24;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_BYTE *)(v28 + 48) = 1;
    OUTLINED_FUNCTION_92_6(0.0);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v3 = a2;
  v4 = a1;
  v31 = a2 + 56;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v30 = (unint64_t)(63 - v5) >> 6;
  v32 = a1 + 56;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v12)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (i << 6);
      v12 = i;
      goto LABEL_23;
    }
    v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v30)
      goto LABEL_40;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v12 = i + 1;
    if (!v14)
    {
      v12 = i + 2;
      if (i + 2 >= v30)
        goto LABEL_40;
      v14 = *(_QWORD *)(v31 + 8 * v12);
      if (!v14)
      {
        v12 = i + 3;
        if (i + 3 >= v30)
          goto LABEL_40;
        v14 = *(_QWORD *)(v31 + 8 * v12);
        if (!v14)
          break;
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_23:
    if (!*(_QWORD *)(v4 + 16))
    {
      v2 = 0;
      goto LABEL_41;
    }
    v16 = v3;
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v19 = *v17;
    v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v20 = Hasher._finalize()();
    v21 = v4;
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v20 & ~v22;
    if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_38;
    v24 = *(_QWORD *)(v21 + 48);
    v25 = (_QWORD *)(v24 + 16 * v23);
    v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v27 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v27;
        if (((*(_QWORD *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          break;
        v28 = (_QWORD *)(v24 + 16 * v23);
        v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_37;
      }
LABEL_38:
      swift_bridgeObjectRelease();
      v2 = 0;
LABEL_41:
      outlined consume of [String : [Int]].Iterator._Variant();
      return v2;
    }
LABEL_37:
    result = swift_bridgeObjectRelease();
    v3 = v16;
    v4 = v21;
  }
  v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_40:
    v2 = 1;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(v31 + 8 * v15);
  if (v14)
  {
    v12 = i + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v30)
      goto LABEL_40;
    v14 = *(_QWORD *)(v31 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized static MLTextClassifier.evaluation<A>(on:using:)(uint64_t a1, void *a2)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n(a1, a2);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  ClassificationMetrics.init<A, B>(_:_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_59_20();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return OUTLINED_FUNCTION_59_20();
}

id static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(uint64_t a1)
{
  id result;
  Swift::String v3;

  result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    v3._object = (void *)0x800000021AFF2810;
    v3._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_textClassifier, v3, (float)a1);
  }
  return result;
}

uint64_t sub_21AF4BC94()
{
  return swift_bridgeObjectRelease();
}

uint64_t unpackLabeledTexts(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;

  v42 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v43 = (unint64_t)(v1 + 63) >> 6;
  v4 = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4AF8];
  v44 = v4;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (i = v8 | (v5 << 6); ; i = __clz(__rbit64(v11)) + (v5 << 6))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * i);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
      v16 = *v15;
      v17 = v15[1];
      OUTLINED_FUNCTION_50_10();
      OUTLINED_FUNCTION_31_2();
      v18 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v19 = v18;
      v18[2] = v14;
      v18[4] = v16;
      v18[5] = v17;
      if (v14 != 1)
      {
        v18[6] = v16;
        v18[7] = v17;
        v20 = v14 - 2;
        if (v20)
        {
          v21 = v18 + 9;
          do
          {
            *(v21 - 1) = v16;
            *v21 = v17;
            OUTLINED_FUNCTION_50_10();
            v21 += 2;
            --v20;
          }
          while (v20);
        }
        OUTLINED_FUNCTION_50_10();
      }
    }
    else
    {
      OUTLINED_FUNCTION_31_2();
      v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v22 = v19[2];
    v23 = v6[2];
    if (__OFADD__(v23, v22))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v23 + v22 > v6[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v6 = v24;
    }
    if (v19[2])
    {
      v25 = v6[2];
      if ((v6[3] >> 1) - v25 < v22)
        goto LABEL_63;
      v26 = (unint64_t)&v6[2 * v25 + 4];
      if ((unint64_t)(v19 + 4) < v26 + 16 * v22 && v26 < (unint64_t)&v19[2 * v22 + 4])
        goto LABEL_69;
      swift_arrayInitWithCopy();
      if (v22)
      {
        v28 = v6[2];
        v29 = __OFADD__(v28, v22);
        v30 = v28 + v22;
        if (v29)
          goto LABEL_65;
        v6[2] = v30;
      }
    }
    else if (v22)
    {
      goto LABEL_60;
    }
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v13 + 16);
    v32 = *(_QWORD *)(v7 + 16);
    if (__OFADD__(v32, v31))
      goto LABEL_61;
    if (!swift_isUniquelyReferenced_nonNull_native() || v32 + v31 > *(_QWORD *)(v7 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v7 = v33;
    }
    if (*(_QWORD *)(v13 + 16))
    {
      v34 = *(_QWORD *)(v7 + 16);
      if ((*(_QWORD *)(v7 + 24) >> 1) - v34 < v31)
        goto LABEL_64;
      v35 = v7 + 16 * v34 + 32;
      if (v13 + 32 < v35 + 16 * v31 && v35 < v13 + 32 + 16 * v31)
        goto LABEL_69;
      swift_arrayInitWithCopy();
      if (v31)
      {
        v37 = *(_QWORD *)(v7 + 16);
        v29 = __OFADD__(v37, v31);
        v38 = v37 + v31;
        if (v29)
          goto LABEL_66;
        *(_QWORD *)(v7 + 16) = v38;
      }
    }
    else if (v31)
    {
      goto LABEL_62;
    }
    OUTLINED_FUNCTION_12_0();
    v4 = v44;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_67;
    if (v10 >= v43)
      goto LABEL_58;
    v11 = *(_QWORD *)(v42 + 8 * v10);
    ++v5;
    if (!v11)
    {
      v5 = v10 + 1;
      if (v10 + 1 >= v43)
        goto LABEL_58;
      v11 = *(_QWORD *)(v42 + 8 * v5);
      if (!v11)
      {
        v5 = v10 + 2;
        if (v10 + 2 >= v43)
          goto LABEL_58;
        v11 = *(_QWORD *)(v42 + 8 * v5);
        if (!v11)
          break;
      }
    }
LABEL_18:
    v3 = (v11 - 1) & v11;
  }
  v12 = v10 + 3;
  if (v12 >= v43)
  {
LABEL_58:
    swift_release();
    v39 = specialized _copySequenceToContiguousArray<A>(_:)(v7, v6);
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_123();
    v40 = specialized _arrayForceCast<A, B>(_:)(v39);
    swift_release();
    return v40;
  }
  v11 = *(_QWORD *)(v42 + 8 * v12);
  if (v11)
  {
    v5 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v5 >= v43)
      goto LABEL_58;
    v11 = *(_QWORD *)(v42 + 8 * v5);
    ++v12;
    if (v11)
      goto LABEL_18;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v32 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  v8 = *(_QWORD *)(v32 + 16);
  if (v8)
  {
    v28 = a3;
    v29 = a4;
    v30 = a5;
    OUTLINED_FUNCTION_36_28();
    v9 = v32;
    v10 = (uint64_t *)(v32 + 40);
    v11 = v8;
    do
    {
      v13 = *(v10 - 1);
      v12 = *v10;
      v15 = *(_QWORD *)(v32 + 16);
      v14 = *(_QWORD *)(v32 + 24);
      OUTLINED_FUNCTION_195();
      if (v15 >= v14 >> 1)
        OUTLINED_FUNCTION_33_31();
      v10 += 4;
      *(_QWORD *)(v32 + 16) = v15 + 1;
      v16 = v32 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v12;
      --v11;
    }
    while (v11);
    OUTLINED_FUNCTION_36_28();
    v17 = v32;
    v18 = (uint64_t *)(v32 + 56);
    a4 = v29;
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      v22 = *(_QWORD *)(v32 + 16);
      v21 = *(_QWORD *)(v32 + 24);
      OUTLINED_FUNCTION_195();
      if (v22 >= v21 >> 1)
        OUTLINED_FUNCTION_33_31();
      *(_QWORD *)(v32 + 16) = v22 + 1;
      v23 = v32 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v20;
      v18 += 4;
      --v8;
    }
    while (v8);
    swift_release();
    a5 = v30;
    a3 = v28;
  }
  else
  {
    swift_release();
    v17 = MEMORY[0x24BEE4AF8];
    v9 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Any?])>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v24 + 32) = a2;
  *(_QWORD *)(v24 + 40) = a3;
  OUTLINED_FUNCTION_195();
  v25 = specialized _arrayForceCast<A, B>(_:)(v9);
  OUTLINED_FUNCTION_106_0();
  *(_QWORD *)(v24 + 48) = v25;
  *(_QWORD *)(v24 + 56) = a4;
  *(_QWORD *)(v24 + 64) = a5;
  OUTLINED_FUNCTION_189();
  v26 = specialized _arrayForceCast<A, B>(_:)(v17);
  OUTLINED_FUNCTION_30();
  *(_QWORD *)(v24 + 72) = v26;
  return DataFrame.init(dictionaryLiteral:)();
}

unint64_t MLTextClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v19;

  OUTLINED_FUNCTION_20_3();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  v5 = type metadata accessor for MLTextClassifier();
  v6 = MLTextClassifier.ModelParameters.description.getter();
  v8 = v7;
  v9 = MLClassifierMetrics.description.getter();
  v11 = v10;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v0 + *(int *)(v5 + 36), v4, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v5) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics.Contents);
  v12 = MLClassifierMetrics.description.getter();
  v14 = v13;
  v15._countAndFlagsBits = v6;
  v15._object = v8;
  String.append(_:)(v15);
  OUTLINED_FUNCTION_70_9(0xD00000000000001ELL);
  v16._countAndFlagsBits = v9;
  v16._object = v11;
  String.append(_:)(v16);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (v5 <= 1)
  {
    OUTLINED_FUNCTION_70_9(0xD000000000000020);
    v17._countAndFlagsBits = v12;
    v17._object = v14;
    String.append(_:)(v17);
    String.append(_:)(v19);
    OUTLINED_FUNCTION_15_0();
  }
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  return 0xD00000000000001BLL;
}

void MLTextClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._countAndFlagsBits = MLTextClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

void sub_21AF4C558(id *a1@<X8>)
{
  *a1 = MLTextClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void **v41;
  void **v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  void *v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  void **v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  void *v62;
  id v63;
  uint64_t *v64;
  uint64_t v65;
  char *v67;
  char *v68;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    v9 = a3[7];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    v13 = v4;
    swift_bridgeObjectRetain();
    v14 = v8;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v15 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 4, v15))
      {
        v16 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 4, v15);
      }
      v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v20 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
    v21 = v20[5];
    v22 = *(void **)&v11[v21];
    *(_QWORD *)&v10[v21] = v22;
    v23 = v20[6];
    v24 = &v10[v23];
    v25 = &v11[v23];
    v26 = *(_QWORD *)&v11[v23 + 24];
    v27 = v22;
    if (v26)
    {
      *((_QWORD *)v24 + 3) = v26;
      (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
    }
    else
    {
      v28 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v28;
    }
    v29 = v20[7];
    v30 = &v10[v29];
    v31 = &v11[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v20[8];
    v34 = &v10[v33];
    v35 = &v11[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v20[9];
    v38 = &v10[v37];
    v39 = &v11[v37];
    v38[8] = v39[8];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v40 = a3[8];
    v41 = (void **)&v7[v40];
    v42 = (void **)((char *)a2 + v40);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v48 = *v42;
      v49 = v48;
      *v41 = v48;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v41 = *v42;
      v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v45 = *(int *)(v44 + 20);
      v67 = (char *)v42 + v45;
      v68 = (char *)v41 + v45;
      v46 = type metadata accessor for DataFrame();
      v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
      v47(v68, v67, v46);
      v47((char *)v41 + *(int *)(v44 + 24), (char *)v42 + *(int *)(v44 + 24), v46);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v50 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v50 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v41, v42, v51);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v52 = a3[9];
    v53 = (void **)&v7[v52];
    v54 = (void **)((char *)a2 + v52);
    v55 = swift_getEnumCaseMultiPayload();
    if (v55 == 2)
    {
      v62 = *v54;
      v63 = v62;
      *v53 = v62;
    }
    else if (v55 == 1)
    {
      *v53 = *v54;
      v56 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v57 = *(int *)(v56 + 20);
      v58 = (char *)v53 + v57;
      v59 = (char *)v54 + v57;
      v60 = type metadata accessor for DataFrame();
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      v61(v58, v59, v60);
      v61((char *)v53 + *(int *)(v56 + 24), (char *)v54 + *(int *)(v56 + 24), v60);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v64 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v64 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v65 = __swift_instantiateConcreteTypeFromMangledName(v64);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v53, v54, v65);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

void destroy for MLTextClassifier(id *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  int EnumCaseMultiPayload;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  id *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  void (*v24)(id *, uint64_t);
  void (*v25)(char *, uint64_t);

  swift_bridgeObjectRelease();
  v4 = (uint64_t)a1 + a2[7];
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v5 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v4, 4, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  v6 = type metadata accessor for MLTextClassifier.ModelParameters();

  v7 = v4 + *(int *)(v6 + 24);
  if (*(_QWORD *)(v7 + 24))
    __swift_destroy_boxed_opaque_existential_0(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = (id *)((char *)a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v11 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v12 = (char *)v8 + *(int *)(v11 + 20);
      v13 = type metadata accessor for DataFrame();
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v14(v12, v13);
      v14((char *)v8 + *(int *)(v11 + 24), v13);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v10 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v10 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v15 = __swift_instantiateConcreteTypeFromMangledName(v10);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v8, v15);
      break;
  }
  v16 = (id *)((char *)a1 + a2[9]);
  v17 = swift_getEnumCaseMultiPayload();
  switch(v17)
  {
    case 2:

      return;
    case 1:
      v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v20 = (char *)v16 + *(int *)(v19 + 20);
      v21 = type metadata accessor for DataFrame();
      v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v25(v20, v21);
      v22 = (id *)((char *)v16 + *(int *)(v19 + 24));
      v23 = v21;
      v24 = (void (*)(id *, uint64_t))v25;
LABEL_25:
      v24(v22, v23);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v18 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v18 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v23 = __swift_instantiateConcreteTypeFromMangledName(v18);
      v24 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v22 = v16;
      goto LABEL_25;
  }
}

_QWORD *initializeWithCopy for MLTextClassifier(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  id *v41;
  id *v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  id v51;
  id v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void **v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  void *v65;
  id v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  _QWORD *v71;

  v3 = a3;
  v5 = a1;
  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(void **)(a2 + 16);
  a1[2] = v8;
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  v13 = v6;
  swift_bridgeObjectRetain();
  v14 = v8;
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v15 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 4, v15))
    {
      v16 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 4, v15);
    }
    v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    v18 = &v10[v17];
    v19 = &v11[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v20 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  v21 = v20[5];
  v22 = *(void **)&v11[v21];
  *(_QWORD *)&v10[v21] = v22;
  v23 = v20[6];
  v24 = &v10[v23];
  v25 = &v11[v23];
  v26 = *(_QWORD *)&v11[v23 + 24];
  v27 = v22;
  if (v26)
  {
    *((_QWORD *)v24 + 3) = v26;
    (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
  }
  else
  {
    v28 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v28;
  }
  v29 = v20[7];
  v30 = &v10[v29];
  v31 = &v11[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = v20[8];
  v34 = &v10[v33];
  v35 = &v11[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v37 = v20[9];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v38[8] = v39[8];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *(int *)(v3 + 32);
  v41 = (id *)((char *)v5 + v40);
  v42 = (id *)(a2 + v40);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v51 = *v42;
    v52 = *v42;
    *v41 = v51;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v41 = *v42;
    v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v45 = *(int *)(v44 + 20);
    v46 = (char *)v41 + v45;
    v71 = v5;
    v47 = (char *)v42 + v45;
    v48 = type metadata accessor for DataFrame();
    v70 = v3;
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    v50 = v47;
    v5 = v71;
    v49(v46, v50, v48);
    v49((char *)v41 + *(int *)(v44 + 24), (char *)v42 + *(int *)(v44 + 24), v48);
    v3 = v70;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v53 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v53 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v54 = __swift_instantiateConcreteTypeFromMangledName(v53);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v41, v42, v54);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v55 = *(int *)(v3 + 36);
  v56 = (void **)((char *)v5 + v55);
  v57 = (void **)(a2 + v55);
  v58 = swift_getEnumCaseMultiPayload();
  if (v58 == 2)
  {
    v65 = *v57;
    v66 = v65;
    *v56 = v65;
  }
  else if (v58 == 1)
  {
    *v56 = *v57;
    v59 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v60 = *(int *)(v59 + 20);
    v61 = (char *)v56 + v60;
    v62 = (char *)v57 + v60;
    v63 = type metadata accessor for DataFrame();
    v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
    v64(v61, v62, v63);
    v64((char *)v56 + *(int *)(v59 + 24), (char *)v57 + *(int *)(v59 + 24), v63);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v67 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v67 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v68 = __swift_instantiateConcreteTypeFromMangledName(v67);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v56, v57, v68);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

uint64_t assignWithCopy for MLTextClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  int *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  id *v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  id v52;
  id v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  void **v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  void *v66;
  id v67;
  uint64_t *v68;
  uint64_t v69;
  char *v71;
  int *v72;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(void **)(a2 + 16);
  v10 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  v11 = v9;

  v12 = a3[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    v15 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v16 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 4, v16))
      {
        v17 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 4, v16);
      }
      v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v19 = &v13[v18];
      v20 = &v14[v18];
      v21 = v20[8];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v21;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v22 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  v23 = v22[5];
  v24 = *(void **)&v13[v23];
  v25 = *(void **)&v14[v23];
  *(_QWORD *)&v13[v23] = v25;
  v26 = v25;

  v27 = v22[6];
  v28 = (uint64_t)&v13[v27];
  v29 = (uint64_t *)&v14[v27];
  v30 = *(_QWORD *)&v14[v27 + 24];
  if (*(_QWORD *)&v13[v27 + 24])
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(_QWORD *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  v32 = v22[7];
  v33 = &v13[v32];
  v34 = &v14[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v22[8];
  v36 = &v13[v35];
  v37 = &v14[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = v22[9];
  v39 = &v13[v38];
  v40 = &v14[v38];
  v41 = *(_QWORD *)v40;
  v39[8] = v40[8];
  *(_QWORD *)v39 = v41;
  if (a1 != a2)
  {
    v42 = a3[8];
    v43 = (id *)(a1 + v42);
    v44 = (id *)(a2 + v42);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v42, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v52 = *v44;
      v53 = *v44;
      *v43 = v52;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v43 = *v44;
      v46 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v47 = *(int *)(v46 + 20);
      v71 = (char *)v43 + v47;
      v72 = a3;
      v48 = (char *)v44 + v47;
      v49 = type metadata accessor for DataFrame();
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v51 = v48;
      a3 = v72;
      v50(v71, v51, v49);
      v50((char *)v43 + *(int *)(v46 + 24), (char *)v44 + *(int *)(v46 + 24), v49);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v43, v44, v55);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v56 = a3[9];
    v57 = (void **)(a1 + v56);
    v58 = (void **)(a2 + v56);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v56, type metadata accessor for MLClassifierMetrics.Contents);
    v59 = swift_getEnumCaseMultiPayload();
    if (v59 == 2)
    {
      v66 = *v58;
      v67 = v66;
      *v57 = v66;
    }
    else if (v59 == 1)
    {
      *v57 = *v58;
      v60 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v61 = *(int *)(v60 + 20);
      v62 = (char *)v57 + v61;
      v63 = (char *)v58 + v61;
      v64 = type metadata accessor for DataFrame();
      v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
      v65(v62, v63, v64);
      v65((char *)v57 + *(int *)(v60 + 24), (char *)v58 + *(int *)(v60 + 24), v64);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v57, v58, v69);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v49;

  v3 = a3;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v10 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 4, v10))
    {
      v11 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 4, v10);
    }
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    v13 = &v7[v12];
    v14 = &v8[v12];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v15 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  *(_QWORD *)&v7[v15[5]] = *(_QWORD *)&v8[v15[5]];
  v16 = v15[6];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *(_OWORD *)&v7[v15[7]] = *(_OWORD *)&v8[v15[7]];
  *(_OWORD *)&v7[v15[8]] = *(_OWORD *)&v8[v15[8]];
  v20 = v15[9];
  v21 = &v7[v20];
  v22 = &v8[v20];
  v21[8] = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *(int *)(v3 + 32);
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v31 = *(int *)(v30 + 20);
    v32 = &v24[v31];
    v33 = &v25[v31];
    v34 = type metadata accessor for DataFrame();
    v49 = v3;
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
    v35(v32, v33, v34);
    v35(&v24[*(int *)(v30 + 24)], &v25[*(int *)(v30 + 24)], v34);
    v3 = v49;
LABEL_14:
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v24, v25, v29);
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_16:
  v36 = *(int *)(v3 + 36);
  v37 = (char *)(a1 + v36);
  v38 = (char *)(a2 + v36);
  v39 = swift_getEnumCaseMultiPayload();
  if (v39 == 1)
  {
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v43 = *(int *)(v42 + 20);
    v44 = &v37[v43];
    v45 = &v38[v43];
    v46 = type metadata accessor for DataFrame();
    v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
    v47(v44, v45, v46);
    v47(&v37[*(int *)(v42 + 24)], &v38[*(int *)(v42 + 24)], v46);
  }
  else
  {
    if (v39)
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v40 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v40 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithTake for MLTextClassifier(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int EnumCaseMultiPayload;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  int *v63;

  v6 = *a1;
  *a1 = *a2;

  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v7 = a1[2];
  a1[2] = a2[2];

  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    v11 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v12 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 4, v12))
      {
        v13 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 4, v12);
      }
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v15 = &v9[v14];
      v16 = &v10[v14];
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v15[8] = v16[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v17 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  v18 = v17[5];
  v19 = *(void **)&v9[v18];
  *(_QWORD *)&v9[v18] = *(_QWORD *)&v10[v18];

  v20 = v17[6];
  v21 = &v9[v20];
  v22 = &v10[v20];
  if (*(_QWORD *)&v9[v20 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  v24 = v17[7];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v29 = v17[8];
  v30 = &v9[v29];
  v31 = &v10[v29];
  v33 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v17[9];
  v35 = &v9[v34];
  v36 = &v10[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  if (a1 == a2)
    return a1;
  v37 = a3[8];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v37, type metadata accessor for MLClassifierMetrics.Contents);
  v40 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v45 = *(int *)(v44 + 20);
    v46 = &v38[v45];
    v47 = &v39[v45];
    v48 = type metadata accessor for DataFrame();
    v63 = a3;
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
    v49(v46, v47, v48);
    v49(&v38[*(int *)(v44 + 24)], &v39[*(int *)(v44 + 24)], v48);
    a3 = v63;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      goto LABEL_20;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v38, v39, v43);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  v50 = a3[9];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v50, type metadata accessor for MLClassifierMetrics.Contents);
  v53 = swift_getEnumCaseMultiPayload();
  if (v53 == 1)
  {
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v56 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v57 = *(int *)(v56 + 20);
    v58 = &v51[v57];
    v59 = &v52[v57];
    v60 = type metadata accessor for DataFrame();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32);
    v61(v58, v59, v60);
    v61(&v51[*(int *)(v56 + 24)], &v52[*(int *)(v56 + 24)], v60);
  }
  else
  {
    if (v53)
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v54 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v54 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v55 = __swift_instantiateConcreteTypeFromMangledName(v54);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v51, v52, v55);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF4DE4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MLTextClassifier.ModelParameters();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 28);
    }
    else
    {
      v9 = type metadata accessor for MLClassifierMetrics(0);
      v10 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF4DEF0(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
  else
  {
    v8 = type metadata accessor for MLTextClassifier.ModelParameters();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 28);
    }
    else
    {
      v9 = type metadata accessor for MLClassifierMetrics(0);
      v10 = *(int *)(a4 + 32);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v10, a2, a2, v9);
  }
}

uint64_t type metadata completion function for MLTextClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLTextClassifier.ModelParameters();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  Swift::Int *v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  BOOL v20;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *v3;
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_50_10();
  String.hash(into:)();
  v8 = OUTLINED_FUNCTION_3_4();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  OUTLINED_FUNCTION_63_5();
  if ((v11 & 1) == 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_10_3();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_83_10();
    OUTLINED_FUNCTION_195();
    v22 = specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    OUTLINED_FUNCTION_60_18(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
    *a1 = a2;
    a1[1] = a3;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v7 + 48);
  v13 = (_QWORD *)(v12 + 16 * v10);
  v14 = *v13 == a2 && v13[1] == a3;
  if (!v14 && (OUTLINED_FUNCTION_74_5() & 1) == 0)
  {
    v17 = ~v9;
    do
    {
      v10 = (v10 + 1) & v17;
      OUTLINED_FUNCTION_63_5();
      if ((v18 & 1) == 0)
        goto LABEL_16;
      v19 = (_QWORD *)(v12 + 16 * v10);
      v20 = *v19 == a2 && v19[1] == a3;
    }
    while (!v20 && (OUTLINED_FUNCTION_74_5() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_3();
  v15 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v16 = v15[1];
  *a1 = *v15;
  a1[1] = v16;
  swift_bridgeObjectRetain();
LABEL_17:
  OUTLINED_FUNCTION_22_35();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = a3 & 1;
  v9 = *v4;
  Hasher.init(_seed:)();
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    do
    {
      v14 = *(_QWORD *)(v9 + 48) + 16 * v12;
      if ((*(_BYTE *)(v14 + 8) & 1) != 0)
      {
        if (v8)
          goto LABEL_13;
      }
      else if (!v8 && *(_QWORD *)v14 == a2)
      {
LABEL_13:
        result = 0;
        v17 = *(_QWORD *)(*v4 + 48) + 16 * v12;
        a2 = *(_QWORD *)v17;
        LOBYTE(v8) = *(_BYTE *)(v17 + 8);
        goto LABEL_14;
      }
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v4;
  *v4 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, v12, isUniquelyReferenced_nonNull_native);
  *v4 = v18;
  swift_bridgeObjectRelease();
  result = 1;
LABEL_14:
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v8;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  char v20;
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_20_3();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD **)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_5();
  v9 = *v2;
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, v10);
  OUTLINED_FUNCTION_189();
  v28 = v4;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  v14 = v9;
  v15 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v25 = v2;
    v26 = v6;
    v27 = ~v12;
    v16 = v8[9];
    v17 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
    while (1)
    {
      v18 = v14;
      v19 = v17;
      v17(v1, *(_QWORD *)(v14 + 48) + v16 * v13, v7);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21 = (void (*)(uint64_t, uint64_t))v8[1];
      v21(v1, v7);
      if ((v20 & 1) != 0)
        break;
      v13 = (v13 + 1) & v27;
      v14 = v18;
      v17 = v19;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v2 = v25;
        v6 = v26;
        v22 = v8;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v21(v28, v7);
    v19(v26, *(_QWORD *)(*v25 + 48) + v16 * v13, v7);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
    v22 = v8;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17(v1, v28, v7);
    v29 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v1, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v29;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v22[4])(v6, v28, v7);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

void specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v2;
  v7 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_31_2();
  String.hash(into:)();
  v8 = OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_10_3();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  OUTLINED_FUNCTION_89_8();
  if ((v11 & 1) != 0)
  {
    OUTLINED_FUNCTION_85_10();
    if (v3 == OUTLINED_FUNCTION_58_14() && v8 == v12)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      OUTLINED_FUNCTION_26_34();
      OUTLINED_FUNCTION_76_9();
      OUTLINED_FUNCTION_10_3();
      if ((v3 & 1) == 0)
      {
        v14 = ~v9;
        do
        {
          v10 = (v10 + 1) & v14;
          OUTLINED_FUNCTION_89_8();
          if ((v15 & 1) == 0)
            goto LABEL_15;
          OUTLINED_FUNCTION_85_10();
          if (v3 == OUTLINED_FUNCTION_58_14() && v8 == v16)
            goto LABEL_16;
          OUTLINED_FUNCTION_26_34();
          OUTLINED_FUNCTION_76_9();
          OUTLINED_FUNCTION_10_3();
        }
        while ((v3 & 1) == 0);
      }
    }

    OUTLINED_FUNCTION_12_0();
    v28 = *(void **)(*(_QWORD *)(*v4 + 48) + 8 * v10);
    *a1 = v28;
    v29 = v28;
    goto LABEL_18;
  }
LABEL_15:
  OUTLINED_FUNCTION_12_0();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_83_10();
  v19 = a2;
  v20 = specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v19, v10, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_60_18(v20, v21, v22, v23, v24, v25, v26, v27, v30, v31);
  *a1 = v19;
LABEL_18:
  OUTLINED_FUNCTION_22_35();
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int *v18;
  Swift::Int v19;
  uint64_t v20;

  v7 = *v3;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    if (v14)
      break;
    if (!a3)
      goto LABEL_18;
LABEL_15:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_16;
  }
  if (!a3)
    goto LABEL_15;
  v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_15;
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  v18 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v19 = v18[1];
  *a1 = *v18;
  a1[1] = v19;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v31 = v0;
    v32 = v2 + 56;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v16)) + (v11 << 6))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v19 = *v18;
      v20 = v18[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
      *(_QWORD *)(v9 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v24);
      *v29 = v19;
      v29[1] = v20;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        break;
      v15 = (_QWORD *)(v2 + 56);
      v16 = *(_QWORD *)(v32 + 8 * v14);
      ++v11;
      if (!v16)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_30;
        v16 = *(_QWORD *)(v32 + 8 * v11);
        if (!v16)
        {
          v17 = v14 + 2;
          if (v17 >= v8)
          {
LABEL_30:
            swift_release();
            v1 = v31;
            goto LABEL_32;
          }
          v16 = *(_QWORD *)(v32 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= v8)
                goto LABEL_30;
              v16 = *(_QWORD *)(v32 + 8 * v11);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          v11 = v17;
        }
      }
LABEL_18:
      v7 = (v16 - 1) & v16;
    }
    swift_release();
    v1 = v31;
    v15 = (_QWORD *)(v2 + 56);
LABEL_32:
    v30 = 1 << *(_BYTE *)(v2 + 32);
    if (v30 > 63)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, v15);
    else
      *v15 = -1 << v30;
    *(_QWORD *)(v2 + 16) = 0;
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 56);
    v30 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v6;
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    if ((v8 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
    {
      v17 = *(_QWORD *)(v2 + 48) + 16 * i;
      v18 = *(_QWORD *)v17;
      v19 = *(unsigned __int8 *)(v17 + 8);
      Hasher.init(_seed:)();
      if (v19 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v18);
      }
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = *(_QWORD *)(v4 + 48) + 16 * v23;
      *(_QWORD *)v28 = v18;
      *(_BYTE *)(v28 + 8) = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_41;
      if (v14 >= v10)
        goto LABEL_35;
      v15 = v30[v14];
      ++v5;
      if (!v15)
      {
        v5 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_35;
        v15 = v30[v5];
        if (!v15)
        {
          v5 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_35;
          v15 = v30[v5];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_35:
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              v1 = v0;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v5 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_42;
                if (v5 >= v10)
                  goto LABEL_35;
                v15 = v30[v5];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v5 = v16;
          }
        }
      }
LABEL_20:
      v9 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    if (!v11)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = v5;
      v21 = *(_QWORD *)(v5 + 48);
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v23(v4, v21 + v22 * i, v2);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(*(_QWORD *)(v7 + 48) + v27 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v20;
      if (v11)
        goto LABEL_6;
LABEL_7:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v34)
        goto LABEL_32;
      v18 = v35[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v34)
          goto LABEL_32;
        v18 = v35[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v34)
            goto LABEL_32;
          v18 = v35[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v34)
            {
LABEL_32:
              swift_release();
              v1 = v33;
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v35);
              else
                *v35 = -1 << v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v14 >= v34)
                  goto LABEL_32;
                v18 = v35[v14];
                ++v19;
                if (v18)
                  goto LABEL_20;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_20:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v7 = (uint64_t *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 56);
    v8 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v8;
    v28 = v1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    if ((v9 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v15 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v15 >= v11)
        goto LABEL_32;
      v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        v5 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_32;
        v16 = v7[v5];
        if (!v16)
        {
          v5 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_32;
          v16 = v7[v5];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, (_QWORD *)(v2 + 56));
              else
                *v7 = v27;
              v1 = v28;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v5 >= v11)
                  goto LABEL_32;
                v16 = v7[v5];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v5 = v17;
          }
        }
      }
LABEL_20:
      v10 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      v17 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v18 = -1 << *(_BYTE *)(v4 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v8 + 8 * (v19 >> 6))) == 0)
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v18) >> 6;
        while (++v20 != v23 || (v22 & 1) == 0)
        {
          v24 = v20 == v23;
          if (v20 == v23)
            v20 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v8 + 8 * v20);
          if (v25 != -1)
          {
            v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v8 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v16;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_38;
      if (v13 >= v28)
        goto LABEL_32;
      v14 = v29[v13];
      ++v10;
      if (!v14)
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v28)
          goto LABEL_32;
        v14 = v29[v10];
        if (!v14)
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v28)
            goto LABEL_32;
          v14 = v29[v10];
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v28)
            {
LABEL_32:
              swift_release();
              v1 = v27;
              v26 = 1 << *(_BYTE *)(v2 + 32);
              if (v26 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v26 + 63) >> 6, v29);
              else
                *v29 = -1 << v26;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v14 = v29[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_39;
                if (v10 >= v28)
                  goto LABEL_32;
                v14 = v29[v10];
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v10 = v15;
          }
        }
      }
LABEL_20:
      v7 = (v14 - 1) & v14;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 1 << *(_BYTE *)(v2 + 32);
    v5 = (_QWORD *)(v2 + 56);
    v6 = -1;
    if (v4 < 64)
      v6 = ~(-1 << v4);
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    result = swift_retain();
    v10 = 0;
    if (!v7)
      goto LABEL_6;
LABEL_5:
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      result = specialized _NativeSet._unsafeInsertNew(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i), *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i + 8), v3);
      if (v7)
        goto LABEL_5;
LABEL_6:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if (v13 >= v8)
        goto LABEL_22;
      v14 = v5[v13];
      ++v10;
      if (!v14)
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v8)
          goto LABEL_22;
        v14 = v5[v10];
        if (!v14)
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v8)
            goto LABEL_22;
          v14 = v5[v10];
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v8)
            {
LABEL_22:
              swift_release();
              v16 = 1 << *(_BYTE *)(v2 + 32);
              if (v16 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v2 + 56));
              else
                *v5 = -1 << v16;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v14 = v5[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_28;
                if (v10 >= v8)
                  goto LABEL_22;
                v14 = v5[v10];
                ++v15;
                if (v14)
                  goto LABEL_19;
              }
            }
            v10 = v15;
          }
        }
      }
LABEL_19:
      v7 = (v14 - 1) & v14;
    }
  }
  result = swift_release();
  *v1 = v3;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  _QWORD *v7;

  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  OUTLINED_FUNCTION_3_4();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v7 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * result);
  *v7 = a1;
  v7[1] = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  Swift::Int *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v10 > v9)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_23;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v11 = *v4;
    Hasher.init(_seed:)();
    if (a2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v11 + 32);
    a3 = result & ~v12;
    v13 = v11 + 56;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = ~v12;
      v15 = *(_QWORD *)(v11 + 48);
      do
      {
        v16 = (_QWORD *)(v15 + 16 * a3);
        v17 = v16[1];
        if (v17)
        {
          if (a2)
          {
            if (*v16 == v8 && v17 == a2)
              goto LABEL_26;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_26;
          }
        }
        else if (!a2)
        {
          goto LABEL_26;
        }
        a3 = (a3 + 1) & v14;
      }
      while (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_23:
  v19 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (Swift::Int *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = v8;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v19 + 16) = v23;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_19;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v10 = *v4;
    Hasher.init(_seed:)();
    if ((a2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7);
    }
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v11;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = ~v11;
      do
      {
        v13 = *(_QWORD *)(v10 + 48) + 16 * a3;
        if ((*(_BYTE *)(v13 + 8) & 1) != 0)
        {
          if ((a2 & 1) != 0)
            goto LABEL_22;
        }
        else if ((a2 & 1) == 0 && *(_QWORD *)v13 == v7)
        {
          goto LABEL_22;
        }
        a3 = (a3 + 1) & v12;
      }
      while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_19:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v15 = *(_QWORD *)(v14 + 48) + 16 * a3;
  *(_QWORD *)v15 = v7;
  *(_BYTE *)(v15 + 8) = a2 & 1;
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
LABEL_22:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v18;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
LABEL_22:
      v25 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * a2) = v6;
      v26 = *(_QWORD *)(v25 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (!v27)
      {
        *(_QWORD *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v10 = Hasher._finalize()();
  result = swift_bridgeObjectRelease();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
        goto LABEL_25;
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for NSURLResourceKey(0);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    v19 = *(_QWORD *)(v2 + 48) + 16 * i;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = *(_BYTE *)(v19 + 8);
    v21 = *(_QWORD *)(v4 + 48) + 16 * i;
    *(_QWORD *)v21 = v20;
    *(_BYTE *)(v21 + 8) = v19;
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & v15;
  v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v24, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v24, v5, v2);
    if (v17)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * i) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v20;
    result = v20;
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = v2 + 56;
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v29 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain_n();
    v11 = 0;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_27:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v8)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_33;
      if (v14 >= v29)
        goto LABEL_29;
      v15 = *(_QWORD *)(v6 + 8 * v14);
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v29)
          goto LABEL_29;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
        {
          v16 = v14 + 2;
          if (v16 >= v29)
          {
LABEL_29:
            result = swift_release_n();
            v1 = v0;
            goto LABEL_31;
          }
          v15 = *(_QWORD *)(v6 + 8 * v16);
          v11 = v16;
          if (!v15)
            break;
        }
      }
LABEL_17:
      v8 = (v15 - 1) & v15;
    }
    while (1)
    {
      v11 = v16 + 1;
      if (__OFADD__(v16, 1))
        break;
      if (v11 >= v29)
        goto LABEL_29;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      ++v16;
      if (v15)
        goto LABEL_17;
    }
LABEL_34:
    __break(1u);
  }
  else
  {
    result = swift_release();
LABEL_31:
    *v1 = v4;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(_QWORD *)(v2 + 48) + 16 * i;
    v17 = *(_QWORD *)v16;
    v18 = *(unsigned __int8 *)(v16 + 8);
    Hasher.init(_seed:)();
    if (v18 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v17);
    }
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v27 = *(_QWORD *)(v4 + 48) + 16 * v22;
    *(_QWORD *)v27 = v17;
    *(_BYTE *)(v27 + 8) = v18;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_39;
    if (v13 >= v28)
      goto LABEL_35;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v28)
        goto LABEL_35;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v28)
          goto LABEL_35;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v28)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v28)
      goto LABEL_35;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  if (!v12)
    goto LABEL_7;
LABEL_6:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v21 * i, v2);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v13 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v25 * v21, v5, v2);
    ++*(_QWORD *)(v8 + 16);
    if (v12)
      goto LABEL_6;
LABEL_7:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_36;
    if (v18 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_32;
      v19 = *(_QWORD *)(v32 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_32;
        v19 = *(_QWORD *)(v32 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v32 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = static Hasher._hash(seed:_:)();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v0;
  v28 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  if (!v7)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    v17 = v16;
    String.hash(into:)();
    v18 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v8 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v8 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v7)
      goto LABEL_6;
LABEL_7:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_36;
    if (v13 >= v29)
      goto LABEL_32;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v29)
        goto LABEL_32;
      v14 = *(_QWORD *)(v28 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v29)
          goto LABEL_32;
        v14 = *(_QWORD *)(v28 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v28 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v29)
      goto LABEL_32;
    v14 = *(_QWORD *)(v28 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = swift_release();
    *v1 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = v2 + 56;
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  result = swift_retain();
  v10 = 0;
  if (!v7)
    goto LABEL_6;
LABEL_5:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    result = specialized _NativeSet._unsafeInsertNew(_:)(v17, v18, v3);
    if (v7)
      goto LABEL_5;
LABEL_6:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_22;
      v14 = *(_QWORD *)(v5 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_22;
        v14 = *(_QWORD *)(v5 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v7 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v5 = OUTLINED_FUNCTION_45_5(0, a2);
    v6 = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE4AB0], v5, &v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v2 = *(_QWORD *)(result + 16);
  v3 = a2[2];
  if (v3 >= v2)
    v4 = *(_QWORD *)(result + 16);
  else
    v4 = a2[2];
  if (v4)
  {
    v6 = (_QWORD *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    v7 = (_QWORD *)swift_allocObject();
    v8 = (uint64_t)(_swift_stdlib_malloc_size(v7) - 32) / 32;
    v7[2] = v4;
    v7[3] = 2 * v8;
    result = v6[5];
    v9 = a2[4];
    v10 = a2[5];
    v7[4] = v6[4];
    v7[5] = result;
    v11 = v8 & 0x7FFFFFFFFFFFFFFFLL;
    v7[6] = v9;
    v7[7] = v10;
    if (v4 != 1)
    {
      v25 = v11;
      v26 = v3;
      v13 = v7 + 8;
      v14 = a2 + 7;
      v15 = v6 + 7;
      v16 = 1;
      while (v16 < v2)
      {
        ++v16;
        v18 = *(v15 - 1);
        v17 = *v15;
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        v19 = *(v14 - 1);
        v20 = *v14;
        *v13 = v18;
        v13[1] = v17;
        v13[2] = v19;
        v13[3] = v20;
        v14 += 2;
        v15 += 2;
        v13 += 4;
        if (v4 == v16)
        {
          v12 = v25 - v16;
          v3 = v26;
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_20;
    }
    v12 = v11 - 1;
LABEL_13:
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v2 <= v3)
      goto LABEL_15;
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
    if (!v2)
      goto LABEL_15;
  }
  if (v2 <= v3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  v21 = v7[3];
  if (v21 < 2)
    return (uint64_t)v7;
  v22 = v21 >> 1;
  v23 = __OFSUB__(v22, v12);
  v24 = v22 - v12;
  if (!v23)
  {
    v7[2] = v24;
    return (uint64_t)v7;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void lazy protocol witness table accessor for type Column<String> and conformance Column<A>(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    OUTLINED_FUNCTION_45_5(0, a2);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_0_65()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_3_50()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_4_53(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t OUTLINED_FUNCTION_5_47()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_6_53()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_11_44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_12_43()
{
  return dispatch thunk of Sequence.underestimatedCount.getter();
}

uint64_t OUTLINED_FUNCTION_18_32()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_20_35(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_23_37()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_24_38(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(a1, *(_QWORD *)(v2 - 200));
}

uint64_t OUTLINED_FUNCTION_25_34()
{
  return Set.init(minimumCapacity:)();
}

uint64_t OUTLINED_FUNCTION_26_34()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

double OUTLINED_FUNCTION_29_29@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 2;
  return result;
}

void OUTLINED_FUNCTION_33_31()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_34_28(uint64_t (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;

  return a1(v1 - 120, 0);
}

void OUTLINED_FUNCTION_36_28()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_39_22()
{
  return DataFrame.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_40_24()
{
  Swift::UInt v0;
  char v1;
  uint64_t v2;

  return specialized Set._Variant.insert(_:)(v2 - 120, v0, v1);
}

void OUTLINED_FUNCTION_42_20(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 296), a2);
}

void OUTLINED_FUNCTION_43_20(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 232), a2);
}

uint64_t OUTLINED_FUNCTION_45_24()
{
  return type metadata accessor for MLTextClassifier();
}

uint64_t OUTLINED_FUNCTION_46_20()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_55_21()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 392) = v0;
}

uint64_t OUTLINED_FUNCTION_58_14()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_59_20()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_60_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = a10;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_62_22()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 240);
}

uint64_t OUTLINED_FUNCTION_66_17()
{
  return type metadata accessor for MLTextClassifier.ModelParameters();
}

void OUTLINED_FUNCTION_67_17()
{
  JUMPOUT(0x22075BA28);
}

void OUTLINED_FUNCTION_68_16(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_71_11()
{
  uint64_t v0;

  return v0 - 120;
}

uint64_t OUTLINED_FUNCTION_72_14()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 120, 0);
}

uint64_t OUTLINED_FUNCTION_74_15(uint64_t a1)
{
  return _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(a1);
}

uint64_t OUTLINED_FUNCTION_76_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_77_12(unint64_t *a1)
{
  uint64_t *v1;

  return lazy protocol witness table accessor for type String? and conformance <A> A?(a1, v1);
}

void OUTLINED_FUNCTION_81_13()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 96) = *(_QWORD *)(v0 - 96);
  *(_QWORD *)(v0 - 88) = v1;
}

void OUTLINED_FUNCTION_83_10()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_84_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_85_10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_90_5(Swift::Int *a1)
{
  Swift::Int v1;
  Swift::Int v2;

  specialized Set._Variant.insert(_:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_92_6(double a1)
{
  return swift_willThrow(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A87LL2on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    OUTLINED_FUNCTION_212();
    v8 = a1 + v7;
    v10 = *(_QWORD *)(v9 + 72);
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      OUTLINED_FUNCTION_4_2();
      v4 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v15;
      v8 += v10;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_128(a1, 1, v6);
  if (v7)
  {
    outlined destroy of URL?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    v8 = OUTLINED_FUNCTION_215_1();
    v9(v8);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v10 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  return swift_task_create();
}

_QWORD *specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;

  result = specialized _NativeDictionary.makeIterator()(&v21, a1);
  v3 = v22;
  if (!v25)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      goto LABEL_44;
    v6 = (unint64_t)(v23 + 64) >> 6;
    if (v18 < v6)
    {
      v19 = *(_QWORD *)(v22 + 8 * v18);
      v7 = v24 + 1;
      if (v19)
      {
LABEL_28:
        v26 = v1;
        v4 = (v19 - 1) & v19;
        v5 = __clz(__rbit64(v19)) + (v7 << 6);
        goto LABEL_3;
      }
      v7 = v24 + 2;
      if (v24 + 2 < v6)
      {
        v19 = *(_QWORD *)(v22 + 8 * v7);
        if (v19)
          goto LABEL_28;
        v7 = v24 + 3;
        if (v24 + 3 < v6)
        {
          v19 = *(_QWORD *)(v22 + 8 * v7);
          if (v19)
            goto LABEL_28;
          v7 = v24 + 4;
          if (v24 + 4 < v6)
          {
            v19 = *(_QWORD *)(v22 + 8 * v7);
            if (v19)
              goto LABEL_28;
            v7 = v24 + 5;
            if (v24 + 5 < v6)
            {
              v19 = *(_QWORD *)(v22 + 8 * v7);
              if (!v19)
              {
                v20 = v24 + 6;
                do
                {
                  if (v20 >= v6)
                    goto LABEL_41;
                  v19 = *(_QWORD *)(v22 + 8 * v20++);
                }
                while (!v19);
                v7 = v20 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    outlined release of _NativeDictionary<NLLanguage, Int>.Iterator((uint64_t)&v21);
    return 0;
  }
  v26 = v1;
  v4 = (v25 - 1) & v25;
  v5 = __clz(__rbit64(v25)) | (v24 << 6);
  v6 = (unint64_t)(v23 + 64) >> 6;
  v7 = v24;
LABEL_3:
  v8 = v21;
  v9 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v5);
  v10 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  result = (_QWORD *)swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      v11 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_22;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v13 >= v6)
      goto LABEL_24;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_24;
      v14 = *(_QWORD *)(v3 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_24;
        v14 = *(_QWORD *)(v3 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_24;
          v14 = *(_QWORD *)(v3 + 8 * v15);
          if (!v14)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v6)
              goto LABEL_24;
            v14 = *(_QWORD *)(v3 + 8 * v15);
            if (!v14)
            {
              v16 = v7 + 6;
              while (v16 < v6)
              {
                v14 = *(_QWORD *)(v3 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return (_QWORD *)v9;
            }
          }
        }
      }
    }
LABEL_21:
    v4 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v7 = v15;
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v10 < v17)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v12);
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v10 = v17;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void static MLSoundClassifier.createTablePrinter(hasValidation:)(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                                      - 8)
                          + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21AFE7DA0;
  v9 = (_QWORD *)(v8 + v7);
  *v9 = 0xD000000000000011;
  v9[1] = 0x800000021AFF7A90;
  static MetricsKey.trainingAccuracy.getter();
  v10 = type metadata accessor for MetricsKey();
  v11 = Dictionary.init(dictionaryLiteral:)();
  if ((a1 & 1) != 0)
  {
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v10);
    specialized Dictionary.subscript.setter(v2, 0xD000000000000013, 0x800000021AFF7AB0);
  }
  v12 = OUTLINED_FUNCTION_267();
  *(_QWORD *)(a2 + *(int *)(v12 + 24)) = v11;
  OUTLINED_FUNCTION_27_1(v12, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(_QWORD *)(a2 + *(int *)(v12 + 20)) = OS_os_log.init(subsystem:category:)();
  Date.init()();
  OUTLINED_FUNCTION_8_0();
}

void static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  const char *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v18[24];
  uint64_t v19;

  v4 = *(double *)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = OUTLINED_FUNCTION_0_26();
  if (v4 != *(double *)(a2 + *(int *)(v7 + 24)))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD00000000000004DLL;
    v13 = "Mismatching feature extraction parameters and model parameters: overlapFactor";
LABEL_24:
    *(_QWORD *)(v12 + 8) = (unint64_t)(v13 - 32) | 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 0;
    swift_willThrow(0.0);
    return;
  }
  v8 = v7;
  if (*(_BYTE *)(a1 + 16))
    v9 = 0.975;
  else
    v9 = *(double *)(a1 + 8);
  if (v9 != MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD00000000000005FLL;
    v13 = "Mismatching feature extraction parameters and model parameters: featureExtractionTimeWindowSize";
    goto LABEL_24;
  }
  outlined init with copy of URL?(a2 + *(int *)(v8 + 28), (uint64_t)v18, &demangling cache variable for type metadata for Any?);
  if (v19)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10 = v16;
      v11 = v17;
      goto LABEL_13;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for Any?);
  }
  v10 = 1;
  v11 = 1;
LABEL_13:
  if ((v6 & 1) != 0)
  {
    if (v5 == v10)
      v14 = v11;
    else
      v14 = 0;
    if ((v14 & 1) != 0)
      return;
    goto LABEL_23;
  }
  if (v5 == v10)
    v15 = v11;
  else
    v15 = 1;
  if ((v15 & 1) != 0)
  {
LABEL_23:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000051;
    v13 = "Mismatching feature extraction parameters and model parameters: feature extractor";
    goto LABEL_24;
  }
}

void static MLSoundClassifier.convertFeatures(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_8_1();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_128_3(v4, v29);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double?]>);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_62_11(v7, v30);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float?]>);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v38 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v41 = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  v44 = *(_QWORD *)(v14 - 8);
  v45 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v46 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_53_0();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_55_0();
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (!OUTLINED_FUNCTION_107_5())
  {
    v31 = v19;
    v22 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    if (OUTLINED_FUNCTION_107_5())
    {
      OUTLINED_FUNCTION_105_3();
      Column.mapNonNil<A>(_:)();
      v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v24 = v1;
    }
    else
    {
      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      if (OUTLINED_FUNCTION_107_5())
      {
        OUTLINED_FUNCTION_105_3();
        OUTLINED_FUNCTION_160_0();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v0, v18);
        goto LABEL_11;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      if (OUTLINED_FUNCTION_18_5())
      {
        OUTLINED_FUNCTION_15_37();
        OUTLINED_FUNCTION_160_0();
        v24 = OUTLINED_FUNCTION_22_18();
        goto LABEL_10;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      if (OUTLINED_FUNCTION_18_5())
      {
        OUTLINED_FUNCTION_15_37();
        OUTLINED_FUNCTION_152_1();
        v20 = v45;
        OUTLINED_FUNCTION_23_38();
        v26 = v44;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
        if (OUTLINED_FUNCTION_18_5())
        {
          v22 = v41;
          OUTLINED_FUNCTION_15_37();
          OUTLINED_FUNCTION_152_1();
          v20 = v43;
          OUTLINED_FUNCTION_23_38();
          v26 = v42;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]);
          if (OUTLINED_FUNCTION_18_5())
          {
            v22 = v38;
            OUTLINED_FUNCTION_15_37();
            OUTLINED_FUNCTION_152_1();
            v20 = v40;
            OUTLINED_FUNCTION_23_38();
            v26 = v39;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]);
            if (OUTLINED_FUNCTION_18_5())
            {
              v22 = v35;
              OUTLINED_FUNCTION_15_37();
              OUTLINED_FUNCTION_152_1();
              v20 = v37;
              OUTLINED_FUNCTION_23_38();
              v26 = v36;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
              if (!OUTLINED_FUNCTION_18_5())
              {
                lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                OUTLINED_FUNCTION_49_0();
                v28 = OUTLINED_FUNCTION_44_2(v27, 0xD000000000000040);
                OUTLINED_FUNCTION_92_6(v28);
                goto LABEL_11;
              }
              v22 = v32;
              OUTLINED_FUNCTION_15_37();
              OUTLINED_FUNCTION_152_1();
              v20 = v34;
              OUTLINED_FUNCTION_23_38();
              v26 = v33;
            }
          }
        }
      }
      v23 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v24 = v22;
    }
    v25 = v20;
LABEL_10:
    v23(v24, v25);
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_105_3();
LABEL_11:
  OUTLINED_FUNCTION_7();
}

void static MLSoundClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

id MLSoundClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_30_33() + 24));
}

uint64_t type metadata accessor for MLSoundClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier;
  if (!type metadata singleton initialization cache for MLSoundClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLSoundClassifier.model : MLSoundClassifier(id *a1)
{
  MLSoundClassifier.model.setter((uint64_t)*a1);
}

void MLSoundClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_30_33() + 24);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLSoundClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_30_33() + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

void MLSoundClassifier.modelParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 28), v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_22();
}

void MLSoundClassifier.trainingMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 32), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLSoundClassifier.validationMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 36), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

#error "21AF53BFC: call analysis failed (funcsize=222)"

uint64_t closure #1 in MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in MLSoundClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_115_6();
  OUTLINED_FUNCTION_52_1();
  v1 = (_QWORD *)swift_task_alloc();
  v2 = OUTLINED_FUNCTION_114_4(v1);
  return OUTLINED_FUNCTION_94_5(v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_86_8();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  type metadata accessor for MLClassifierMetrics(0);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  type metadata accessor for MLSoundClassifier.Model();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v6 = type metadata accessor for TrainingTablePrinter(0);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[16] = v7;
  v4[17] = *(_QWORD *)(v7 + 64);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[24] = swift_task_alloc();
  v8 = *(_QWORD *)(type metadata accessor for MLSoundClassifier.Classifier() - 8);
  v4[25] = v8;
  v4[26] = *(_QWORD *)(v8 + 64);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;

  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v27;
  uint64_t v28;
  int EnumTagSinglePayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);

  OUTLINED_FUNCTION_37_0(*(_QWORD *)(v3 + 24), a2, a3, *(_QWORD *)(v3 + 120));
  v5 = OUTLINED_FUNCTION_30_33();
  *(_QWORD *)(v3 + 232) = v5;
  *(_DWORD *)(v3 + 304) = *(_DWORD *)(v5 + 32);
  MLClassifierMetrics.init()(v5, v6, v7, v8, v9, v10, v11, v12, v71, v72, v73, v74, v75, v76, v78, v80, v81, v82, v84,
    v85);
  *(_DWORD *)(v3 + 308) = *(_DWORD *)(v5 + 36);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v13 = OUTLINED_FUNCTION_49_0();
  *(_QWORD *)(v3 + 240) = OUTLINED_FUNCTION_68_17(v13, v14, 0xD0000000000000C0);
  OUTLINED_FUNCTION_203_1();
  MLSoundClassifier.ModelParameters.validate()();
  *(_QWORD *)(v3 + 248) = v15;
  if (!v15)
  {
    v19 = *(_QWORD *)(v3 + 224);
    v20 = *(_QWORD *)(v3 + 184);
    v21 = *(_QWORD *)(v3 + 192);
    v86 = *(_QWORD *)(v3 + 120);
    v22 = v5;
    v23 = *(_QWORD *)(v3 + 48);
    v25 = *(_QWORD *)(v3 + 24);
    v24 = *(_QWORD *)(v3 + 32);
    v83 = v22;
    outlined init with copy of MLTrainingSessionParameters(v23, v25 + *(int *)(v22 + 28), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm(v24, v3 + 16, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    *(_QWORD *)(v3 + 256) = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm);
    outlined init with copy of MLTrainingSessionParameters(v23, v21, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    v27 = swift_bridgeObjectRetain();
    MLSoundClassifier.Classifier.init(labels:parameters:)(v27, v21, v19);
    type metadata accessor for EventCollector();
    OUTLINED_FUNCTION_9_1();
    v28 = EventCollector.init()();
    *(_QWORD *)(v3 + 264) = v28;
    outlined init with copy of URL?(v25, v20, &demangling cache variable for type metadata for TrainingTablePrinter?);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v20, 1, v86);
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for TrainingTablePrinter?);
    if (EnumTagSinglePayload == 1)
    {
      v31 = *(_QWORD *)(v3 + 168);
      v32 = *(_QWORD *)(v3 + 176);
      v33 = *(_QWORD *)(v3 + 120);
      v34 = *(_QWORD *)(v3 + 24);
      static MLSoundClassifier.createTablePrinter(hasValidation:)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 16) != 0, v32);
      __swift_storeEnumTagSinglePayload(v32, 0, 1, v33);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v32, v34, &demangling cache variable for type metadata for TrainingTablePrinter?);
      outlined init with copy of URL?(v34, v31, &demangling cache variable for type metadata for TrainingTablePrinter?);
      result = OUTLINED_FUNCTION_128(v31, 1, v33);
      if (v35)
      {
        __break(1u);
        return result;
      }
      TrainingTablePrinter.beginTable()();
      OUTLINED_FUNCTION_203(v36, type metadata accessor for TrainingTablePrinter);
    }
    v37 = *(_QWORD *)(v3 + 160);
    v38 = *(_QWORD *)(v3 + 120);
    OUTLINED_FUNCTION_101_4(*(_QWORD *)(v3 + 24), v30, &demangling cache variable for type metadata for TrainingTablePrinter?);
    OUTLINED_FUNCTION_128(v37, 1, v38);
    if (v35)
    {
      outlined destroy of URL?(*(_QWORD *)(v3 + 160), &demangling cache variable for type metadata for TrainingTablePrinter?);
      return _assertionFailure(_:_:file:line:flags:)();
    }
    v39 = *(_QWORD *)(v3 + 224);
    v41 = *(_QWORD *)(v3 + 200);
    v40 = *(_QWORD *)(v3 + 208);
    v42 = *(_QWORD *)(v3 + 152);
    v43 = *(_QWORD *)(v3 + 144);
    v44 = *(_QWORD *)(v3 + 40);
    outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v3 + 160), v42, type metadata accessor for TrainingTablePrinter);
    v45 = *(_QWORD *)(v44 + 16);
    *(_QWORD *)(v3 + 272) = v45;
    OUTLINED_FUNCTION_131(v39, v46, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
    outlined init with copy of MLTrainingSessionParameters(v42, v43, type metadata accessor for TrainingTablePrinter);
    v47 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v48 = (v40 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
    v87 = *(_QWORD *)(v3 + 216);
    v50 = *(_QWORD *)(v3 + 144);
    v51 = *(_QWORD *)(v3 + 128);
    if (v45)
    {
      v52 = (uint64_t *)(v3 + 104);
      v53 = *(_QWORD *)(v3 + 32);
      v77 = *(_QWORD *)(v3 + 144);
      v79 = *(_QWORD *)(v3 + 40);
      v54 = v28;
      v55 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
      v56 = (v55 + *(unsigned __int8 *)(v51 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v57 = swift_allocObject();
      outlined init with take of MLHandPoseClassifier.ModelParameters(v87, v57 + v47, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
      *(_QWORD *)(v57 + v48) = v53;
      *(_QWORD *)(v57 + v49) = v79;
      *(_QWORD *)(v57 + v55) = v54;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v77, v57 + v56, type metadata accessor for TrainingTablePrinter);
      OUTLINED_FUNCTION_113_0();
      swift_retain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_170_0();
      if (v49)
      {
        v58 = *(_QWORD *)(v3 + 152);
        v4 = *(_QWORD *)(v3 + 40);
        v59 = *(_QWORD *)(v3 + 48);
        OUTLINED_FUNCTION_4_2();
        swift_release();
        swift_bridgeObjectRelease();
        outlined destroy of MLHandPoseClassifier.ModelParameters(v59, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_80();
        v60 = v58;
LABEL_18:
        outlined destroy of MLHandPoseClassifier.ModelParameters(v60, type metadata accessor for TrainingTablePrinter);
        OUTLINED_FUNCTION_48_0(v65, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
        goto LABEL_3;
      }
    }
    else
    {
      v52 = (uint64_t *)(v3 + 112);
      v61 = *(_QWORD *)(v3 + 32);
      v62 = (v49 + *(unsigned __int8 *)(v51 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v63 = swift_allocObject();
      outlined init with take of MLHandPoseClassifier.ModelParameters(v87, v63 + v47, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
      *(_QWORD *)(v63 + v48) = v61;
      *(_QWORD *)(v63 + v49) = v28;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v50, v63 + v62, type metadata accessor for TrainingTablePrinter);
      swift_bridgeObjectRetain();
      swift_retain();
      OUTLINED_FUNCTION_170_0();
      if (v49)
      {
        v64 = *(_QWORD *)(v3 + 152);
        v4 = *(_QWORD *)(v3 + 48);
        OUTLINED_FUNCTION_4_2();
        swift_release();
        swift_bridgeObjectRelease();
        outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
        OUTLINED_FUNCTION_80();
        swift_bridgeObjectRelease();
        v60 = v64;
        goto LABEL_18;
      }
    }
    v66 = *v52;
    v67 = *(_QWORD *)(v3 + 24);
    OUTLINED_FUNCTION_4_2();
    outlined init with take of MLHandPoseClassifier.ModelParameters(v66, v67 + *(int *)(v83 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v68 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v68 + 16) = xmmword_21AFE7DA0;
    v69 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v68 + 64) = v69;
    *(_QWORD *)(v68 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    OUTLINED_FUNCTION_15_0();
    v88 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                            + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
    v70 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v3 + 280) = v70;
    *v70 = v3;
    v70[1] = specialized MLSoundClassifier.init<A, B>(training:validation:parameters:);
    return OUTLINED_FUNCTION_62_23(v88);
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v3 + 48), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_123();
LABEL_3:
  outlined destroy of URL?(*(_QWORD *)(v3 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (!*(_QWORD *)(v3 + 248))
  {
    v16 = OUTLINED_FUNCTION_109_7();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  }
  v17 = OUTLINED_FUNCTION_19_37();
  OUTLINED_FUNCTION_108_5(v17);
  OUTLINED_FUNCTION_108_5(v4);
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  OUTLINED_FUNCTION_148_0();
  OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_239();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_237();
  return OUTLINED_FUNCTION_62_23(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_16();
  if (v1)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 296) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t (*v21)(void);

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 232) + 24)) = *(_QWORD *)(v0 + 296);
  specialized MLSoundClassifier.evaluate<A>(on:)(v2);
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    swift_release();
    OUTLINED_FUNCTION_104();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_bridgeObjectRelease();
    v5 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_48_0(v5, type metadata accessor for TrainingTablePrinter);
    OUTLINED_FUNCTION_203(v6, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
    outlined destroy of URL?(*(_QWORD *)(v0 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
    v7 = OUTLINED_FUNCTION_194_1();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);

    if (!*(_QWORD *)(v0 + 248))
    {
      v8 = OUTLINED_FUNCTION_109_7();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    }
    v9 = OUTLINED_FUNCTION_19_37();
    OUTLINED_FUNCTION_108_5(v9);
    OUTLINED_FUNCTION_108_5(v4);
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_68_5();
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_34_17();
    OUTLINED_FUNCTION_148_0();
    OUTLINED_FUNCTION_190_0();
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_237();
    return OUTLINED_FUNCTION_62_23(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 24) + *(int *)(v0 + 304);
    v14 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32);
    v14(v12, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    OUTLINED_FUNCTION_130_1();
    OUTLINED_FUNCTION_130_1();
    outlined assign with take of MLClassifierMetrics(v12, v13);
    if (v11)
    {
      specialized MLSoundClassifier.evaluate<A>(on:)(*(_QWORD *)(v0 + 40));
      v14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      OUTLINED_FUNCTION_130_1();
      OUTLINED_FUNCTION_130_1();
      v15 = OUTLINED_FUNCTION_165_0();
      outlined assign with take of MLClassifierMetrics(v15, v16);
    }
    v17 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease();
    v20 = OUTLINED_FUNCTION_165_0();
    static MLSoundClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(v20);
    swift_release();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v19, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v18, type metadata accessor for TrainingTablePrinter);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_120_2();
    OUTLINED_FUNCTION_68_5();
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_34_17();
    OUTLINED_FUNCTION_148_0();
    OUTLINED_FUNCTION_190_0();
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_237();
    swift_task_dealloc();
    v21 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_62_23(v21);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_12_0();
  v2 = OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_48_0(v2, type metadata accessor for TrainingTablePrinter);
  OUTLINED_FUNCTION_203(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  outlined destroy of URL?(*(_QWORD *)(v0 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
  v4 = OUTLINED_FUNCTION_194_1();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  if (!*(_QWORD *)(v0 + 248))
  {
    v5 = OUTLINED_FUNCTION_109_7();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  }
  v6 = *(_QWORD *)(v0 + 24);
  v7 = v6 + *(int *)(v0 + 308);
  OUTLINED_FUNCTION_108_5(v6 + *(int *)(v0 + 304));
  OUTLINED_FUNCTION_108_5(v7);
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_148_0();
  OUTLINED_FUNCTION_34_17();
  OUTLINED_FUNCTION_190_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(v0 + 136), v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?(v1 + *(int *)(v2 + 28), v0 + 64, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)(v0 + 88))
  {
    outlined destroy of URL?(v0 + 64, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v7 = 1;
    v8 = 1;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_BYTE *)(v0 + 104);
LABEL_6:
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 160), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  *(_QWORD *)(v0 + 16) = v5;
  *(double *)(v0 + 24) = v6;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = v7;
  *(_BYTE *)(v0 + 56) = v8;
  type metadata accessor for MLSoundClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_9_1();
  v9 = OUTLINED_FUNCTION_52_1();
  specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v9, (_OWORD *)(v0 + 16));
  v10 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_9_1();
  v11 = swift_bridgeObjectRetain();
  specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v11, (_OWORD *)(v0 + 16));
  v12 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);
  OUTLINED_FUNCTION_217();
  outlined init with copy of MLTrainingSessionParameters(v14, v13, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)
                                                                   + async function pointer to specialized MLSoundClassifier.init<A, B>(training:validation:parameters:));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v15;
  *v15 = v0;
  v15[1] = specialized MLSoundClassifier.init<A, B>(training:validation:parameters:);
  return v17(*(_QWORD *)(v0 + 112), v10, v12, *(_QWORD *)(v0 + 152));
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 136), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 136), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in MLSoundClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_115_6();
  OUTLINED_FUNCTION_52_1();
  v1 = (_QWORD *)swift_task_alloc();
  v2 = OUTLINED_FUNCTION_114_4(v1);
  return OUTLINED_FUNCTION_94_5(v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_86_8();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t partial apply for closure #2 in MLSoundClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_144_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_57_17(v1);
  return closure #2 in MLSoundClassifier.init(trainingData:parameters:)(v2, v3, v4, v5);
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = OUTLINED_FUNCTION_0_26();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_46_14();
  v3 = OUTLINED_FUNCTION_206();
  if (v3 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v3 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_206())
    {
      case 0u:
      case 1u:
        v4 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_45_0(v4);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        OUTLINED_FUNCTION_193();
        goto LABEL_5;
      case 4u:
        v7 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_45_0(v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  v5 = v0 + ((v2 + 32) & ~v2) + *(int *)(v1 + 28);
  if (*(_QWORD *)(v5 + 24))
    __swift_destroy_boxed_opaque_existential_0(v5);
  return OUTLINED_FUNCTION_84_10();
}

uint64_t partial apply for closure #1 in MLSoundClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_144_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_57_17(v1);
  return closure #1 in MLSoundClassifier.init(trainingData:parameters:)(v2, v3, v4, v5);
}

void MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_96_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_55_0();
  *v3 = a1;
  OUTLINED_FUNCTION_79_4();
  outlined init with copy of MLTrainingSessionParameters(a2, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  MLSoundClassifier.init(trainingData:parameters:)(v3, v2);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = *(_QWORD *)(type metadata accessor for TrainingTablePrinter(0) - 8);
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 + 64);
  v6[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t), uint64_t);

  OUTLINED_FUNCTION_225_0(v0[7]);
  OUTLINED_FUNCTION_165_1();
  v1 = swift_allocObject();
  v0[11] = v1;
  OUTLINED_FUNCTION_130_3(v1);
  OUTLINED_FUNCTION_116_5();
  v2 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:);
  return v4(v0[2], v0[4], v0[5], partial apply for closure #1 in closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:), v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_217();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_70();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v2 + 8));
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = *(_QWORD *)(type metadata accessor for TrainingTablePrinter(0) - 8);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 + 64);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t (*)(uint64_t), uint64_t);

  OUTLINED_FUNCTION_225_0(v0[6]);
  OUTLINED_FUNCTION_165_1();
  v1 = swift_allocObject();
  v0[10] = v1;
  OUTLINED_FUNCTION_130_3(v1);
  OUTLINED_FUNCTION_116_5();
  v2 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[11] = v2;
  *v2 = v0;
  v2[1] = specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:);
  return v4(v0[2], v0[4], partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:), v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_217();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_70();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v2 + 8));
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized MLSoundClassifier.evaluate<A>(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  _BYTE v19[8];

  v3 = v1;
  v5 = type metadata accessor for MLSoundClassifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v8, v11 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier);
  *(_QWORD *)(v11 + v10) = a1;
  swift_bridgeObjectRetain();
  specialized blockAwait<A>(_:)();
  v13 = v12;
  result = swift_release();
  if (!v2)
  {
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm(v13, (uint64_t)v19, &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
    swift_bridgeObjectRelease();
    v18 = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm;
    v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm(a1, (uint64_t)v17, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    return ClassificationMetrics.init<A, B>(_:_:)();
  }
  return result;
}

id static MLSoundClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(Swift::Int a1)
{
  id result;
  Swift::String v3;

  result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    v3._object = (void *)0x800000021AFF2810;
    v3._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_soundClassifier, v3, a1);
  }
  return result;
}

void MLSoundClassifier.init(checkpoint:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[4];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = type metadata accessor for MLSoundClassifier.Model();
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v39 = v5;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (uint64_t)v37 - v7;
  v42 = type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_62_11(v9, v37[0]);
  v41 = OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_128_3(v12, v37[0]);
  type metadata accessor for MLSoundClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v47 = v14;
  v50 = OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v50);
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  v46 = (char *)v37 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v49 = (char *)v37 - v19;
  type metadata accessor for TrainingTablePrinter(0);
  v20 = OUTLINED_FUNCTION_111_6();
  __swift_storeEnumTagSinglePayload(v20, v21, v22, v23);
  v24 = OUTLINED_FUNCTION_30_33();
  v52 = a2 + *(int *)(v24 + 32);
  MLClassifierMetrics.init()(v24, v25, v26, v27, v28, v29, v30, v31, v37[0], v37[1], v37[2], v37[3], v38, v39, v40, v41, v42, v43, v44,
    v45);
  v48 = v24;
  v32 = *(int *)(v24 + 36);
  v53 = a2;
  v33 = (_QWORD *)(a2 + v32);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v34, 0xD0000000000000C0);
  *v33 = v35;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  v51 = v33;
  OUTLINED_FUNCTION_79_4();
  v36 = *(int *)(type metadata accessor for MLCheckpoint() + 20);
  v54 = a1;
  __asm { BR              X10 }
}

void sub_21AF55E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v16 = 0xD00000000000003BLL;
    *(_QWORD *)(v16 + 8) = 0x800000021AFF79C0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_BYTE *)(v16 + 48) = 0;
    v17 = OUTLINED_FUNCTION_92_6(0.0);
    OUTLINED_FUNCTION_183_1(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    goto LABEL_5;
  }
  *(_QWORD *)(v6 - 264) = v5;
  *(_QWORD *)(v6 - 272) = v1;
  v8 = *(_QWORD *)(v6 - 168);
  v9 = *(_QWORD *)(v6 - 128);
  URL.deletingLastPathComponent()();
  URL.appendingPathComponent(_:)();
  v10 = *(_QWORD *)(v6 - 192);
  URL.appendingPathExtension(_:)();
  v11 = *(_QWORD *)(v4 + 8);
  v12 = *(_QWORD *)(v6 - 160);
  OUTLINED_FUNCTION_227(v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v8, v12);
  v13 = *(_QWORD *)(v6 - 184);
  v14 = *(_QWORD *)(v6 - 200);
  MLSoundClassifier.PersistentParameters.init(sessionDirectory:)(v2, v13);
  if (v14)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v9, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_227(v10);
    OUTLINED_FUNCTION_227(v8);
LABEL_5:
    v18 = *(_QWORD *)(v6 - 144);
    v19 = *(_QWORD *)(v6 - 152);
    outlined destroy of URL?(*(_QWORD *)(v6 - 136), &demangling cache variable for type metadata for TrainingTablePrinter?);
    OUTLINED_FUNCTION_92(v18);
    OUTLINED_FUNCTION_92(v19);
    return;
  }
  *(_QWORD *)(v6 - 200) = v11;
  *(_QWORD *)(v6 - 280) = *(_QWORD *)(v6 - 136) + *(int *)(*(_QWORD *)(v6 - 176) + 28);
  v20 = *(int **)(v6 - 264);
  v21 = *(_QWORD *)(v6 - 240);
  OUTLINED_FUNCTION_131(v13 + v20[5], v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v22 = *(_QWORD *)(v13 + v20[8]);
  v23 = *(_QWORD *)(v13 + v20[6]);
  v24 = v13 + v20[9];
  v25 = *(_QWORD *)v24;
  *(_DWORD *)(v6 - 264) = *(unsigned __int8 *)(v24 + 8);
  v26 = *(int **)(v6 - 232);
  v27 = (_OWORD *)(v0 + v26[7]);
  *v27 = 0u;
  v27[1] = 0u;
  v28 = v0 + v26[8];
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  *(_QWORD *)(v0 + v26[9]) = 32;
  outlined init with copy of MLTrainingSessionParameters(v21, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(v0 + v26[5]) = v22;
  *(_QWORD *)(v0 + v26[6]) = v23;
  *(_QWORD *)(v6 - 96) = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  *(_QWORD *)(v6 - 120) = v25;
  *(_BYTE *)(v6 - 112) = *(_DWORD *)(v6 - 264);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v6 - 120, (uint64_t)v27, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v21, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v29 = *(_QWORD *)(v6 - 280);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v0, v29, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(v29, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  MLSoundClassifier.Classifier.init(labels:parameters:)(MEMORY[0x24BEE4B08], v0, *(_QWORD *)(v6 - 216));
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
  v30 = *(_QWORD *)(v6 - 208);
  UpdatableSupervisedEstimator.readWithOptimizer(from:)();
  v31 = *(_QWORD *)(v6 - 272);
  outlined init with copy of MLTrainingSessionParameters(v30, v31, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  v32 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 256) + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v31, v34 + v33, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  specialized blockAwait<A>(_:)();
  v35 = *(void (**)(uint64_t, uint64_t))(v6 - 200);
  v37 = v36;
  v38 = OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_183_1(v38, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  OUTLINED_FUNCTION_65_2(v39, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v6 - 184), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
  v40 = *(_QWORD *)(v6 - 160);
  v35(v10, v40);
  v35(*(_QWORD *)(v6 - 168), v40);
  v41 = *(_QWORD *)(v6 - 176);
  v42 = *(_QWORD *)(v6 - 136);
  *(_QWORD *)(v42 + *(int *)(v41 + 24)) = v37;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v30, v42 + *(int *)(v41 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
}

uint64_t closure #1 in MLSoundClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLSoundClassifier.init(checkpoint:);
  return v4();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  OUTLINED_FUNCTION_85_11(&v7);
  if (v1)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 32) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t closure #1 in MLSoundClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return v1();
}

void static MLSoundClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  MLSoundClassifier.DataSource.labeledSounds()();
  if (!v3)
  {
    static MLSoundClassifier.train(trainingData:parameters:sessionParameters:)(v6, a2, a3);
    OUTLINED_FUNCTION_30();
  }
  OUTLINED_FUNCTION_235_0();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;

  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_54_0();
  *v4 = a1;
  OUTLINED_FUNCTION_79_4();
  swift_bridgeObjectRetain();
  static MLSoundClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)((uint64_t)v4, a2, a3);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLSoundClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLSoundClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  _UNKNOWN **v30;
  uint64_t v31;

  v31 = a3;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v25 - v10;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_55_0();
  v13 = (int *)OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_96_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_161();
  MLSoundClassifier.ModelParameters.validate()();
  if (!v16)
  {
    MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)();
    v17 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
    outlined init with copy of MLTrainingSessionParameters(a1, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
    outlined init with copy of MLTrainingSessionParameters(a2, v4, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v18 = *(_QWORD *)(a2 + v13[5]);
    v19 = *(double *)(a2 + v13[6]);
    outlined init with copy of URL?(a2 + v13[7], (uint64_t)&v27, &demangling cache variable for type metadata for Any?);
    if (v29)
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v20 = v25[1];
        v21 = v26;
LABEL_7:
        v27 = (_QWORD *)v20;
        v28 = v21;
        MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)(v4, v18, (uint64_t *)&v27, v3, v19, v17);
        outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        v22 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
        OUTLINED_FUNCTION_15_1();
        v23 = SoundClassifierTrainingSessionDelegate.init(trainingData:featureExtractionOnly:modelParameters:sessionParameters:)(v5, 0, v3, (uint64_t)v11);
        v29 = v22;
        v30 = &protocol witness table for SoundClassifierTrainingSessionDelegate;
        v27 = v23;
        OUTLINED_FUNCTION_131(v31, v24, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>);
        OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_157_1((uint64_t)&v27);
        return;
      }
    }
    else
    {
      outlined destroy of URL?((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
    }
    v20 = 1;
    v21 = 1;
    goto LABEL_7;
  }
}

void static MLSoundClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLSoundClassifier>);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_3_1();
  specialized MLJob.init(_:)();
}

uint64_t static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  char v10;
  _OWORD v11[2];
  char v12;

  v4 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v4;
  v12 = *(_BYTE *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  v10 = *(_BYTE *)(a2 + 32);
  result = static MLSoundClassifier.makeFeatureExtractionSession(trainingData:parameters:sessionParameters:)(a1, (uint64_t)v9, a3);
  if (!v3)
  {
    v7 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLSoundClassifier.DataSource>);
    v8 = OUTLINED_FUNCTION_15_1();
    return specialized MLJob.init(_:)(v8, v7, (uint64_t)v11);
  }
  return result;
}

uint64_t static MLSoundClassifier.makeFeatureExtractionSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint64_t v42;

  v36 = a3;
  v37 = a1;
  v4 = type metadata accessor for MLTrainingSessionParameters();
  MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - v7;
  v9 = type metadata accessor for MLSoundClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MLSoundClassifier.ModelParameters();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v35 - v19;
  v21 = *(double *)a2;
  v22 = *(double *)(a2 + 8);
  v23 = *(unsigned __int8 *)(a2 + 16);
  v24 = *(_QWORD *)(a2 + 24);
  LOBYTE(a2) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_WORD *)v14 + 8) = 256;
  swift_storeEnumTagMultiPayload();
  v38 = (_QWORD *)v24;
  v39 = a2;
  v25 = v23 == 0;
  v26 = v36;
  if (v25)
    v27 = v22;
  else
    v27 = 0.975;
  MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)((uint64_t)v14, 25, (uint64_t *)&v38, (uint64_t)v20, v21, v27);
  outlined init with copy of MLTrainingSessionParameters(v37, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v28 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
  swift_allocObject();
  v29 = v42;
  v30 = SoundClassifierTrainingSessionDelegate.init(trainingData:featureExtractionOnly:modelParameters:sessionParameters:)((uint64_t)v11, 1, (uint64_t)v17, (uint64_t)v8);
  if (v29)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  }
  else
  {
    v40 = v28;
    v41 = &protocol witness table for SoundClassifierTrainingSessionDelegate;
    v38 = v30;
    v31 = v26;
    v32 = v35;
    outlined init with copy of MLTrainingSessionParameters(v31, v35, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>);
    swift_allocObject();
    swift_retain();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v38, v32, 19);
    v26 = v33;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_release();
  }
  return v26;
}

void closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *);
  void (*v5)(_QWORD *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  id v24;
  _QWORD v25[2];
  void (*v26)(_QWORD *);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_20_3();
  v29 = v0;
  v30 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (_QWORD *)((char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((v11 & 1) != 0)
  {
    *v16 = v13;
    OUTLINED_FUNCTION_22_18();
    swift_storeEnumTagMultiPayload();
    v24 = v13;
    v5(v16);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(v9 + direct field offset for MLTrainingSession.delegate, (uint64_t)&v28);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for SoundClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    v27 = v25;
    v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    v18 = (_QWORD *)((char *)v16 + v17[12]);
    v19 = v17[16];
    v25[1] = v3;
    v26 = v5;
    v20 = (_QWORD *)((char *)v16 + v19);
    v21 = (char *)v16 + v17[20];
    OUTLINED_FUNCTION_29_0();
    v22 = OUTLINED_FUNCTION_113_0();
    static SoundClassifierTrainingSessionDelegate.createDataFrame(from:)(v22, (uint64_t)v16);
    swift_bridgeObjectRelease();
    *v18 = 0x7365727574616566;
    v18[1] = 0xE800000000000000;
    *v20 = 0x62614C7373616C63;
    v20[1] = 0xEA00000000006C65;
    v23 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v7;
    *((_OWORD *)v21 + 1) = v23;
    v21[32] = *(_BYTE *)(v7 + 32);
    OUTLINED_FUNCTION_21_26();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_22_18();
    OUTLINED_FUNCTION_130_1();
    v26(v16);
    swift_release();
  }
  outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>);
}

void static MLSoundClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12[-1] - v5;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v12[-1] - v5, v7);
  v8 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v9 = SoundClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v6);
  if (!v1)
  {
    v12[3] = v8;
    v12[4] = &protocol witness table for SoundClassifierTrainingSessionDelegate;
    v12[0] = v9;
    OUTLINED_FUNCTION_131(a1, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_157_1((uint64_t)v12);
  }
}

void closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_95_1();
  if ((a2 & 1) != 0)
  {
    *v6 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v6);
    outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for SoundClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    v14 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_37_0(v5, v15, v16, v14);
    v17 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v19;
    v17[5] = a4;
    v17[6] = a5;
    OUTLINED_FUNCTION_3_1();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_85_11(&v1);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLSoundClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[18] = a1;
  v2[19] = a2;
  v2[20] = OUTLINED_FUNCTION_71_10();
  v2[21] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v2[22] = OUTLINED_FUNCTION_25();
  v2[23] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  v2[24] = OUTLINED_FUNCTION_4_6();
  v2[25] = OUTLINED_FUNCTION_30_33();
  v2[26] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_46_14();
  v2[27] = OUTLINED_FUNCTION_4_6();
  v2[28] = OUTLINED_FUNCTION_0_26();
  v2[29] = OUTLINED_FUNCTION_25();
  v2[30] = OUTLINED_FUNCTION_25();
  v2[31] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v2[32] = OUTLINED_FUNCTION_4_6();
  v2[33] = type metadata accessor for MLSoundClassifier.PersistentParameters();
  v2[34] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLSoundClassifier.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  result = OUTLINED_FUNCTION_128(v1, 1, v2);
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v7 = *(int **)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(int **)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 192);
    v40 = *(_QWORD *)(v0 + 248);
    v41 = *(_QWORD *)(v0 + 152);
    outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 256), v6, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    outlined init with copy of MLTrainingSessionParameters(v6 + v7[5], v9, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v12 = *(_QWORD *)(v6 + v7[8]);
    v13 = *(_QWORD *)(v6 + v7[6]);
    v14 = v6 + v7[9];
    v15 = *(_QWORD *)v14;
    v16 = *(_BYTE *)(v14 + 8);
    v17 = (_OWORD *)(v8 + v10[7]);
    *v17 = 0u;
    v17[1] = 0u;
    v18 = v8 + v10[8];
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 8) = 1;
    *(_QWORD *)(v8 + v10[9]) = 32;
    outlined init with copy of MLTrainingSessionParameters(v9, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v8 + v10[5]) = v12;
    *(_QWORD *)(v8 + v10[6]) = v13;
    *(_QWORD *)(v0 + 16) = v15;
    *(_QWORD *)(v0 + 40) = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    *(_BYTE *)(v0 + 24) = v16;
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 16, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v9, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v8, v40, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    v19 = v41 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_101_4(v19, v20, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
    v21 = OUTLINED_FUNCTION_105_1();
    result = OUTLINED_FUNCTION_128(v11, 1, v21);
    if (!v5)
    {
      v23 = *(int **)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 208);
      v24 = *(_QWORD *)(v0 + 192);
      outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
      v25 = OUTLINED_FUNCTION_267();
      v28 = OUTLINED_FUNCTION_37_0(v22, v26, v27, v25);
      *(_DWORD *)(v0 + 304) = v23[8];
      MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, v40, v41, v43, v44, v45, v46, v47, v48, v49, v50, v51,
        v52);
      *(_DWORD *)(v0 + 308) = v23[9];
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v36 = OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_68_17(v36, v37, 0xD0000000000000C0);
      OUTLINED_FUNCTION_203_1();
      v38 = v23[5];
      *(_DWORD *)(v0 + 312) = v38;
      outlined init with copy of MLTrainingSessionParameters(v24, v22 + v38, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
      v39 = (_QWORD *)OUTLINED_FUNCTION_73_14();
      *(_QWORD *)(v0 + 280) = v39;
      *v39 = v0;
      v39[1] = MLSoundClassifier.init(delegate:);
      return v42();
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_74_16();
  if (!v1)
    *(_QWORD *)(v2 + 296) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = v2 + *(int *)(v0 + 308);
  v5 = v2 + *(int *)(v0 + 304);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for TrainingTablePrinter?);
  v6 = OUTLINED_FUNCTION_165_0();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v6, v7);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v5, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_4_2();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  OUTLINED_FUNCTION_48_0(v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  OUTLINED_FUNCTION_148_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLSoundClassifier.init(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_50_6();
  v13 = v12[37];
  v14 = v12[29];
  v16 = v12[25];
  v15 = v12[26];
  v17 = v12[23];
  v18 = v12[20];
  v19 = v12[18];
  outlined destroy of MLHandPoseClassifier.ModelParameters(v12[24], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  *(_QWORD *)(v15 + *(int *)(v16 + 24)) = v13;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v14, v15 + *(int *)(v16 + 28), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v15, v19, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier);
  v20 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_196_1(v20, v21, &demangling cache variable for type metadata for MLClassifierMetrics?);
  result = OUTLINED_FUNCTION_128(v17, 1, v18);
  if (v23)
  {
    __break(1u);
  }
  else
  {
    v24 = v12[25];
    v26 = v12[22];
    v25 = v12[23];
    v27 = v12[20];
    v28 = v12[18];
    outlined destroy of MLHandPoseClassifier.ModelParameters(v12[31], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_48_0(v29, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    outlined assign with take of MLClassifierMetrics(v25, v28 + *(int *)(v24 + 32));
    v30 = OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_196_1(v30, v31, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_release();
    OUTLINED_FUNCTION_128(v26, 1, v27);
    if (v23)
    {
      outlined destroy of URL?(v12[22], &demangling cache variable for type metadata for MLClassifierMetrics?);
    }
    else
    {
      v32 = v12[25];
      v33 = v12[21];
      v34 = v12[18];
      outlined init with take of MLHandPoseClassifier.ModelParameters(v12[22], v33, type metadata accessor for MLClassifierMetrics);
      outlined assign with take of MLClassifierMetrics(v33, v34 + *(int *)(v32 + 36));
    }
    v43 = v12[21];
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_101_9();
    return v35(v35, v36, v37, v38, v39, v40, v41, v42, v43, a10, a11, a12);
  }
  return result;
}

void MLSoundClassifier.evaluation(on:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLSoundClassifier.DataSource.labeledSounds()();
  MLSoundClassifier.evaluate(on:)(v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_83_4();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLSoundClassifier.evaluate(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = v1;
  v5 = type metadata accessor for MLSoundClassifier.ModelParameters();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MLSoundClassifier();
  outlined init with copy of MLTrainingSessionParameters(v3 + *(int *)(v8 + 28), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  specialized Sequence.flatMap<A>(_:)(a1);
  specialized Set.init<A>(_:)();
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)&v7[*(int *)(v5 + 24)];
  v12 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?((uint64_t)&v7[*(int *)(v5 + 28)], (uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  if (v20)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v13 = v16;
      v14 = v17;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  }
  v13 = 1;
  v14 = 1;
LABEL_6:
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  type metadata accessor for MLSoundClassifier.FeatureExtractor();
  *(_QWORD *)&v18 = v11;
  *((double *)&v18 + 1) = v12;
  v19 = 0;
  v20 = v10;
  v21 = v13;
  v22 = v14;
  result = static MLSoundClassifier.FeatureExtractor.extractFeatures(from:options:)(a1, &v18);
  if (!v2)
  {
    specialized MLSoundClassifier.evaluate<A>(on:)(result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MLSoundClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  MLSoundClassifier.evaluate(on:)(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a2, v2, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_83_4();
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  type metadata accessor for MLSoundClassifier();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:)
                                                         + async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = specialized closure #1 in MLSoundClassifier.evaluate<A>(on:);
  return v6(a2, 0, 0);
}

uint64_t specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_52_0();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  OUTLINED_FUNCTION_85_11(&v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
}

void MLSoundClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[10];

  OUTLINED_FUNCTION_8_1();
  v46 = v0;
  v5 = v4;
  v52 = v6;
  type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v45 = v8;
  v9 = type metadata accessor for Model();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_46_2();
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  v44 = v5[1];
  v50 = v5[2];
  v51 = *v5;
  v48 = v5[4];
  v49 = v5[3];
  v13 = v5[6];
  v47 = v5[5];
  v14 = v5[7];
  v15 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v52, 0x616C43646E756F53, 0xEF72656966697373, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v41 = v15;
    v42 = v14;
    v43 = v13;
    v53 = v2;
    v38 = v9;
    v16 = OUTLINED_FUNCTION_30_33();
    v17 = v45;
    OUTLINED_FUNCTION_131(v46 + *(int *)(v16 + 20), v18, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    if (v44)
    {
      v19 = v51;
      v20 = v51;
      v21 = v44;
      v22 = v50;
      v23 = v49;
      v24 = v48;
      v25 = v47;
      v26 = v43;
      v27 = v42;
    }
    else
    {
      v28 = NSFullUserName();
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v29;

      v24 = 0;
      v25 = 0;
      v15 = 0;
      v23 = 0x800000021AFF2260;
      v27 = 0xE100000000000000;
      v22 = 0xD000000000000033;
      v26 = 49;
      v19 = v51;
    }
    v54[0] = v20;
    v54[1] = v21;
    v54[2] = v22;
    v54[3] = v23;
    v54[4] = v24;
    v54[5] = v25;
    v54[6] = v26;
    v54[7] = v27;
    v54[8] = v15;
    outlined copy of MLModelMetadata?(v19, v44);
    specialized CoreMLExportable.export(metadata:)((uint64_t)v54, v30, v31, v32, v33, v34, v35, v36, v10, v38, v11, 0, v41, v42, v43, v44, v45, v46, v47,
      v48);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_106_0();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v53, v39);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, v40);
  }
  OUTLINED_FUNCTION_7();
}

void MLSoundClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_8_1();
  v2 = type metadata accessor for URL.DirectoryHint();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_161();
  v7 = OUTLINED_FUNCTION_111_6();
  __swift_storeEnumTagSinglePayload(v7, v8, v9, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v0, *MEMORY[0x24BDCD7A0], v2);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLSoundClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  OUTLINED_FUNCTION_7();
}

void MLSoundClassifier.predictions(from:)(uint64_t a1)
{
  double v2;

  OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_0_26();
  v2 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(a1, v2, v2);
  OUTLINED_FUNCTION_235_0();
}

uint64_t MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(_QWORD *@<X8>);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  dispatch_semaphore_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  NSObject *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  char v80;
  uint64_t v81;
  _BOOL8 v82;
  Swift::Int v83;
  unint64_t v84;
  char v85;
  Swift::Bool v86;
  unint64_t v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[3];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;

  v129 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v125 = v9;
  v131 = OUTLINED_FUNCTION_78();
  v128 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v124 = v10;
  v123 = (char *)v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_30_33();
  v122 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v122 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v121 = (uint64_t)v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v130 = v14;
  v15 = OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_0();
  v17 = *(int *)(v11 + 28);
  v126 = v3;
  v18 = v3 + v17;
  outlined init with copy of MLTrainingSessionParameters(v3 + v17, v5, v19);
  v133 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(v5 + *(int *)(v15 + 24));
  v21 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?(v5 + *(int *)(v15 + 28), (uint64_t)&v142, &demangling cache variable for type metadata for Any?);
  if (v144)
  {
    if ((OUTLINED_FUNCTION_169_0() & 1) != 0)
    {
      v22 = v136;
      v23 = BYTE8(v136);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v142, &demangling cache variable for type metadata for Any?);
  }
  v22 = 1;
  v23 = 1;
LABEL_6:
  v24 = type metadata accessor for MLSoundClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_65_2(v24, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  *(_QWORD *)&v142 = v20;
  *((double *)&v142 + 1) = v21;
  v25 = v133;
  v143 = 0;
  v144 = v133;
  v145 = v22;
  v146 = v23;
  v26 = v129;
  v27 = v24;
  v28 = static MLSoundClassifier.FeatureExtractor.extractFeatures(from:options:)(v129, &v142);
  if (!v4)
  {
    v29 = v28;
    outlined init with copy of URL?(v18 + *(int *)(v15 + 28), (uint64_t)&v142, &demangling cache variable for type metadata for Any?);
    if (v144)
    {
      OUTLINED_FUNCTION_169_0();
      OUTLINED_FUNCTION_191_0();
      if ((v30 & 1) != 0 && (BYTE8(v136) & 1) == 0 && a3 != 0.975)
      {
        OUTLINED_FUNCTION_101();
        *(_QWORD *)&v142 = 0;
        *((_QWORD *)&v142 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(86);
        v31._countAndFlagsBits = 0xD00000000000004BLL;
        v31._object = (void *)0x800000021AFF7A40;
        String.append(_:)(v31);
        Double.write<A>(to:)();
        v32._countAndFlagsBits = 0x73646E6F63657320;
        v32._object = (void *)0xE90000000000002ELL;
        String.append(_:)(v32);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v33 = OUTLINED_FUNCTION_49_0();
        v35 = OUTLINED_FUNCTION_209_1(v33, v34);
        *(_BYTE *)(v36 + 48) = 1;
LABEL_18:
        OUTLINED_FUNCTION_92_6(v35);
        return v25;
      }
    }
    else
    {
      outlined destroy of URL?((uint64_t)&v142, &demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_191_0();
    }
    if (a3 < 0.5 || a3 > 15.0)
    {
      OUTLINED_FUNCTION_101();
      *(_QWORD *)&v142 = 0;
      *((_QWORD *)&v142 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v38._object = (void *)0x800000021AFF7A00;
      v38._countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v38);
      OUTLINED_FUNCTION_197_0();
      v39._countAndFlagsBits = 544175136;
      v39._object = (void *)0xE400000000000000;
      String.append(_:)(v39);
      OUTLINED_FUNCTION_197_0();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v40 = OUTLINED_FUNCTION_49_0();
      v35 = OUTLINED_FUNCTION_209_1(v40, v41);
      *(_BYTE *)(v42 + 48) = 0;
      goto LABEL_18;
    }
    v127 = 0;
    v117 = v29;
    if (v25)
    {
      v44 = *(unsigned __int8 *)(v128 + 80);
      v112 = ~v44;
      v116 = v26 + ((v44 + 32) & ~v44);
      v115 = *(_QWORD *)(v128 + 72);
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16);
      v111 = v12 + 7;
      v113 = v44;
      v110 = v44 + 8;
      OUTLINED_FUNCTION_113_0();
      v45 = 0;
      v46 = 0;
      v25 = MEMORY[0x24BEE4AF8];
      v109[2] = MEMORY[0x24BEE4AE0] + 8;
      v109[1] = MEMORY[0x24BEE4AD8] + 8;
      while (1)
      {
        v118 = v46;
        v114(v27, v116 + v115 * v46, v18);
        OUTLINED_FUNCTION_159_0(v27, 0);
        if (__swift_getEnumTagSinglePayload(v27, 1, v18) == 1)
          break;
        v132 = v25;
        v47 = v121;
        outlined init with copy of MLTrainingSessionParameters(v126, v121, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier);
        v48 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 32);
        v49 = v123;
        v48(v123, v27, v18);
        v50 = (*(unsigned __int8 *)(v122 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
        v51 = (v111 + v50) & 0xFFFFFFFFFFFFFFF8;
        v52 = (v110 + v51) & v112;
        v53 = v18;
        v54 = swift_allocObject();
        outlined init with take of MLHandPoseClassifier.ModelParameters(v47, v54 + v50, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier);
        *(_QWORD *)(v54 + v51) = v117;
        v48((char *)(v54 + v52), (uint64_t)v49, v53);
        type metadata accessor for ResultBox();
        v55 = OUTLINED_FUNCTION_9_1();
        *(_OWORD *)(v55 + 16) = 0u;
        v120 = v55 + 16;
        *(_OWORD *)(v55 + 32) = 0u;
        *(_BYTE *)(v55 + 48) = -1;
        OUTLINED_FUNCTION_52_1();
        v56 = dispatch_semaphore_create(0);
        v57 = type metadata accessor for TaskPriority();
        v58 = v125;
        __swift_storeEnumTagSinglePayload(v125, 1, 1, v57);
        v59 = (_QWORD *)OUTLINED_FUNCTION_9_1();
        v59[2] = 0;
        v59[3] = 0;
        v59[4] = v55;
        v59[5] = &async function pointer to partial apply for closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:);
        v59[6] = v54;
        v59[7] = v56;
        LODWORD(v53) = __swift_getEnumTagSinglePayload(v58, 1, v57);
        swift_retain();
        v119 = v54;
        swift_retain();
        v60 = v56;
        if ((_DWORD)v53 == 1)
        {
          outlined destroy of URL?(v58, &demangling cache variable for type metadata for TaskPriority?);
          v61 = 0;
        }
        else
        {
          v62 = TaskPriority.rawValue.getter();
          v63 = OUTLINED_FUNCTION_215_1();
          v64(v63);
          v61 = v62;
        }
        v25 = v61;
        if (v59[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          v65 = dispatch thunk of Actor.unownedExecutor.getter();
          v67 = v66;
          swift_unknownObjectRelease();
        }
        else
        {
          v65 = 0;
          v67 = 0;
        }
        v68 = OUTLINED_FUNCTION_9_1();
        *(_QWORD *)(v68 + 16) = &async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:);
        *(_QWORD *)(v68 + 24) = v59;
        if (v67 | v65)
        {
          v137 = 0;
          v138 = 0;
          v139 = v65;
          v140 = v67;
        }
        v69 = v120;
        swift_task_create();
        swift_release();
        OS_dispatch_semaphore.wait()();
        swift_beginAccess();
        outlined init with copy of URL?(v69, (uint64_t)&v142, &demangling cache variable for type metadata for Result<Any, Error>?);
        if (v145 == 255)
          goto LABEL_61;
        if ((v145 & 1) != 0)
        {
          v135 = v142;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          swift_willThrowTypedImpl();
          OUTLINED_FUNCTION_10_3();
          OUTLINED_FUNCTION_50_9();
          OUTLINED_FUNCTION_50_9();
          OUTLINED_FUNCTION_236();
          swift_release();

          OUTLINED_FUNCTION_11_17((uint64_t)v45);
          return v25;
        }
        outlined init with take of Any(&v142, &v136);
        swift_release();

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
        swift_dynamicCast();
        v70 = v141;
        OUTLINED_FUNCTION_236();
        v71 = v127;
        MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm(v70, (uint64_t)v134, &demangling cache variable for type metadata for ClassificationDistribution<String>);
        v127 = v71;
        swift_bridgeObjectRelease();
        v73 = *(_QWORD *)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm
                        + 16);
        v120 = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm;
        if (v73)
        {
          v74 = (uint64_t *)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d127ML17MLSoundClassifierV8evaluate33_0936EF001B4864F81C630288B6304A872on0A12MLComponents21ClassificationMetricsVySSGx_tKSlRzAG16fg4Vy04h4B013jk9VySfGSSG7B62RtzlFSSAQcfu0_32c7cfd4b680d8003eade90301c2a1b770AQSSTf3nnnpk_nTf1cn_nTm
                          + 40);
          v75 = (_QWORD *)MEMORY[0x24BEE4B00];
          while (1)
          {
            v77 = *(v74 - 1);
            v76 = *v74;
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_11_17((uint64_t)v45);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v142 = v75;
            v79 = OUTLINED_FUNCTION_231_0();
            v81 = v75[2];
            v82 = (v80 & 1) == 0;
            v83 = v81 + v82;
            if (__OFADD__(v81, v82))
              break;
            v84 = v79;
            v85 = v80;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
            v86 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v83);
            v75 = (_QWORD *)v142;
            if (v86)
            {
              v87 = OUTLINED_FUNCTION_231_0();
              if ((v85 & 1) != (v88 & 1))
                goto LABEL_63;
              v84 = v87;
            }
            swift_bridgeObjectRelease();
            if ((v85 & 1) == 0)
            {
              v75[(v84 >> 6) + 8] |= 1 << v84;
              v89 = (_QWORD *)(v75[6] + 16 * v84);
              *v89 = v77;
              v89[1] = v76;
              *(_QWORD *)(v75[7] + 8 * v84) = 0;
              v90 = v75[2];
              v91 = v90 + 1;
              v92 = __OFADD__(v90, 1);
              OUTLINED_FUNCTION_52_1();
              if (v92)
                goto LABEL_60;
              v75[2] = v91;
            }
            swift_bridgeObjectRetain();
            v93 = v75[7];
            OUTLINED_FUNCTION_30();
            v94 = *(_QWORD *)(v93 + 8 * v84);
            v95 = __OFADD__(v94, 1);
            v96 = v94 + 1;
            if (v95)
              goto LABEL_59;
            v74 += 2;
            *(_QWORD *)(v93 + 8 * v84) = v96;
            OUTLINED_FUNCTION_104();
            v45 = specialized OptionSet<>.init();
            if (!--v73)
              goto LABEL_47;
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
LABEL_47:
        OUTLINED_FUNCTION_50_9();
        v97 = OUTLINED_FUNCTION_52_1();
        v98 = v127;
        v99 = specialized Sequence.max(by:)(v97);
        v101 = v100;
        v127 = v98;
        OUTLINED_FUNCTION_30();
        if (!v101)
          goto LABEL_62;
        OUTLINED_FUNCTION_30();
        v25 = v132;
        v102 = swift_isUniquelyReferenced_nonNull_native();
        v18 = v131;
        v103 = v133;
        if ((v102 & 1) == 0)
        {
          OUTLINED_FUNCTION_24_16();
          v25 = v107;
        }
        v104 = *(_QWORD *)(v25 + 16);
        v105 = v118;
        if (v104 >= *(_QWORD *)(v25 + 24) >> 1)
        {
          OUTLINED_FUNCTION_24_16();
          v105 = v118;
          v25 = v108;
        }
        v46 = v105 + 1;
        *(_QWORD *)(v25 + 16) = v104 + 1;
        v106 = v25 + 16 * v104;
        *(_QWORD *)(v106 + 32) = v99;
        *(_QWORD *)(v106 + 40) = v101;
        v27 = v130;
        if (v46 == v103)
          goto LABEL_55;
      }
    }
    else
    {
      OUTLINED_FUNCTION_113_0();
      v45 = 0;
      v25 = MEMORY[0x24BEE4AF8];
LABEL_55:
      OUTLINED_FUNCTION_159_0(v27, 1);
    }
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_11_17((uint64_t)v45);
  }
  return v25;
}

uint64_t closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.Model();
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void);

  v1 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = OUTLINED_FUNCTION_30_33();
  outlined init with copy of MLTrainingSessionParameters(v4 + *(int *)(v5 + 20), v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  specialized Dictionary.subscript.getter(v1, v3);
  v0[7] = v6;
  if (v6)
  {
    v7 = (_QWORD *)OUTLINED_FUNCTION_73_14();
    v0[8] = v7;
    *v7 = v0;
    v7[1] = closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:);
    OUTLINED_FUNCTION_18();
    v8();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  v5 = *(_QWORD *)(v4 + 48);
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  outlined destroy of MLHandPoseClassifier.ModelParameters(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

uint64_t closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 80);
  swift_task_dealloc();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_90(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = type metadata accessor for MLSoundClassifier.Model();
  v4[7] = swift_task_alloc();
  v5 = type metadata accessor for Event();
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v4[11] = v6;
  v4[12] = *(_QWORD *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v4[14] = v7;
  v4[15] = *(_QWORD *)(v7 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v4[18] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  v4[19] = v8;
  v4[20] = *(_QWORD *)(v8 - 8);
  v4[21] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v4[22] = v9;
  v4[23] = *(_QWORD *)(v9 - 8);
  v4[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  v4[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;

  OUTLINED_FUNCTION_50_6();
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16);
  *(_QWORD *)(v12 + 208) = v13;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (!v13)
  {
    v21 = *(_QWORD *)(v12 + 176);
    swift_bridgeObjectRetain();
    v22 = OUTLINED_FUNCTION_111_6();
    __swift_storeEnumTagSinglePayload(v22, v23, v24, v21);
    goto LABEL_5;
  }
  v16 = *(_QWORD *)(v12 + 176);
  v15 = *(_QWORD *)(v12 + 184);
  *(_DWORD *)(v12 + 280) = *(_DWORD *)(v15 + 80);
  *(_QWORD *)(v12 + 216) = *(_QWORD *)(v15 + 72);
  v17 = *(void (**)(uint64_t))(v15 + 16);
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 240) = v14;
  *(_QWORD *)(v12 + 224) = v17;
  v18 = *(_QWORD *)(v12 + 200);
  swift_bridgeObjectRetain();
  v19 = OUTLINED_FUNCTION_165_0();
  v17(v19);
  __swift_storeEnumTagSinglePayload(v18, 0, 1, v16);
  OUTLINED_FUNCTION_128(v18, 1, v16);
  if (v20)
  {
LABEL_5:
    OUTLINED_FUNCTION_4_54();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_101_9();
    return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  OUTLINED_FUNCTION_26(*(_QWORD *)(v12 + 184));
  static Task<>.checkCancellation()();
  v34 = OUTLINED_FUNCTION_113_7();
  OUTLINED_FUNCTION_101_4(v34, v35, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v36 = OUTLINED_FUNCTION_60();
  if (v36 == 1)
  {
    OUTLINED_FUNCTION_26(*(_QWORD *)(v12 + 96));
    v37 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v12 + 264) = v37;
    OUTLINED_FUNCTION_42_21(v37);
    OUTLINED_FUNCTION_101_9();
    return FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(*(_QWORD *)(v12 + 120));
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v12 + 248) = v38;
    OUTLINED_FUNCTION_43_21(v38);
    OUTLINED_FUNCTION_101_9();
    return LogisticRegressionClassifierModel.applied(to:eventHandler:)();
  }
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 272) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v3 + 120));
  OUTLINED_FUNCTION_154_1();
  if (v7)
  {
    OUTLINED_FUNCTION_180_1();
    v0 = v18;
  }
  OUTLINED_FUNCTION_40_25();
  if (v4)
  {
    v8 = OUTLINED_FUNCTION_110_5();
    outlined init with copy of MLTrainingSessionParameters(v8, v6, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_111_1();
    v2 = OUTLINED_FUNCTION_54_4();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (void (*)(uint64_t))MEMORY[0x24BDC5810]);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_30_10();
    v5(v4);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v5);
    OUTLINED_FUNCTION_25_14(v19);
  }
  OUTLINED_FUNCTION_91_8();
  if (v2 == v1)
  {
    OUTLINED_FUNCTION_37_0(*(_QWORD *)(v3 + 200), v9, v10, *(_QWORD *)(v3 + 176));
LABEL_9:
    OUTLINED_FUNCTION_4_54();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_18_11(v0, *(uint64_t (**)(void))(v3 + 8));
  }
  OUTLINED_FUNCTION_28_32();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  OUTLINED_FUNCTION_128(v1, 1, v2);
  if (v11)
    goto LABEL_9;
  OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 184));
  static Task<>.checkCancellation()();
  if (v20)
  {
    OUTLINED_FUNCTION_95_8();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_4_54();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_13(v13);
  }
  else
  {
    v14 = OUTLINED_FUNCTION_113_7();
    OUTLINED_FUNCTION_101_4(v14, v15, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_60() == 1)
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 96));
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v3 + 264) = v16;
      OUTLINED_FUNCTION_42_21(v16);
      return OUTLINED_FUNCTION_19_15();
    }
    else
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 120));
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v3 + 248) = v17;
      OUTLINED_FUNCTION_43_21(v17);
      return OUTLINED_FUNCTION_20_11();
    }
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 120));
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_189_1();
  OUTLINED_FUNCTION_4_54();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  return OUTLINED_FUNCTION_12_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v3 + 96));
  OUTLINED_FUNCTION_154_1();
  if (v7)
  {
    OUTLINED_FUNCTION_180_1();
    v0 = v18;
  }
  OUTLINED_FUNCTION_40_25();
  if (v4)
  {
    v8 = OUTLINED_FUNCTION_110_5();
    outlined init with copy of MLTrainingSessionParameters(v8, v6, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_111_1();
    v2 = OUTLINED_FUNCTION_54_4();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (void (*)(uint64_t))MEMORY[0x24BDC5810]);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_30_10();
    v5(v4);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v5);
    OUTLINED_FUNCTION_25_14(v19);
  }
  OUTLINED_FUNCTION_91_8();
  if (v2 == v1)
  {
    OUTLINED_FUNCTION_37_0(*(_QWORD *)(v3 + 200), v9, v10, *(_QWORD *)(v3 + 176));
LABEL_9:
    OUTLINED_FUNCTION_4_54();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_18_11(v0, *(uint64_t (**)(void))(v3 + 8));
  }
  OUTLINED_FUNCTION_28_32();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  OUTLINED_FUNCTION_128(v1, 1, v2);
  if (v11)
    goto LABEL_9;
  OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 184));
  static Task<>.checkCancellation()();
  if (v20)
  {
    OUTLINED_FUNCTION_95_8();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_4_54();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_13(v13);
  }
  else
  {
    v14 = OUTLINED_FUNCTION_113_7();
    OUTLINED_FUNCTION_101_4(v14, v15, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_60() == 1)
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 96));
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v3 + 264) = v16;
      OUTLINED_FUNCTION_42_21(v16);
      return OUTLINED_FUNCTION_19_15();
    }
    else
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v3 + 120));
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v3 + 248) = v17;
      OUTLINED_FUNCTION_43_21(v17);
      return OUTLINED_FUNCTION_20_11();
    }
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_189_1();
  OUTLINED_FUNCTION_4_54();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  return OUTLINED_FUNCTION_12_16(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t MLSoundClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_20_3();
  v23 = v1;
  v24 = v2;
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OUTLINED_FUNCTION_30_33();
  v7 = MLSoundClassifier.ModelParameters.description.getter();
  v9 = v8;
  v10 = MLClassifierMetrics.description.getter();
  v12 = v11;
  outlined init with copy of MLTrainingSessionParameters(v0 + *(int *)(v6 + 36), (uint64_t)v5, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v6) = OUTLINED_FUNCTION_145_2();
  OUTLINED_FUNCTION_108_5((uint64_t)v5);
  v13 = MLClassifierMetrics.description.getter();
  v15 = v14;
  v21 = 0xD00000000000001CLL;
  v22 = 0x800000021AFF4BF0;
  v16._countAndFlagsBits = v7;
  v16._object = v9;
  String.append(_:)(v16);
  OUTLINED_FUNCTION_70_9(0xD00000000000001ELL);
  v17._countAndFlagsBits = v10;
  v17._object = v12;
  String.append(_:)(v17);
  String.append(_:)(v20);
  OUTLINED_FUNCTION_104();
  if (v6 <= 1)
  {
    OUTLINED_FUNCTION_70_9(0xD000000000000020);
    v18._countAndFlagsBits = v13;
    v18._object = v15;
    String.append(_:)(v18);
    String.append(_:)(v20);
    OUTLINED_FUNCTION_15_0();
  }
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  return v21;
}

void MLSoundClassifier.playgroundDescription.getter(uint64_t a1@<X0>, NSAttributedString *a2@<X8>)
{
  uint64_t v3;
  Swift::String v4;
  NSAttributedString v5;

  v3 = OUTLINED_FUNCTION_27_1(a1, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v4._countAndFlagsBits = MLSoundClassifier.debugDescription.getter();
  v5.super.isa = NSAttributedString.__allocating_init(string:)(v4).super.isa;
  a2[3].super.isa = (Class)v3;
  a2->super.isa = v5.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t closure #1 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
  MLShapedArrayProtocol.init<A>(converting:)();
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v8);
}

uint64_t closure #2 in static MLSoundClassifier.convertFeatures(_:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  v5 = v3;
  MLShapedArrayProtocol.init(converting:)();
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

uint64_t closure #3 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v5);
}

uint64_t closure #4 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v14;
    v6 = (double *)(v3 + 32);
    v7 = *(_QWORD *)(v14 + 16);
    v8 = v4;
    do
    {
      v9 = *v6;
      v15 = v5;
      if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v15;
      }
      v10 = v9;
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(float *)(v5 + 4 * v7 + 32) = v10;
      ++v6;
      ++v7;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v11 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v12);
}

uint64_t closure #5 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v3 + 32;
    do
    {
      outlined init with copy of Any(v6, (uint64_t)v12);
      v7 = static MLSoundClassifier.convertToFloat(_:)((uint64_t)v12);
      outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
      v5 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v13;
      }
      v8 = *(_QWORD *)(v5 + 16);
      if (v8 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v13;
      }
      *(_QWORD *)(v5 + 16) = v8 + 1;
      *(float *)(v5 + 4 * v8 + 32) = v7;
      v6 += 32;
      --v4;
    }
    while (v4);
  }
  v12[0] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v10);
}

float static MLSoundClassifier.convertToFloat(_:)(uint64_t a1)
{
  float v1;
  uint64_t v2;
  float v3;
  unint64_t v4;
  id v6;
  uint64_t v7;
  _BYTE v8[32];
  _BYTE v9[24];
  uint64_t v10;

  outlined init with copy of URL?(a1, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  if (!v10)
    goto LABEL_16;
  outlined init with copy of URL?((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  if (!OUTLINED_FUNCTION_38_22())
  {
    if (OUTLINED_FUNCTION_38_22())
    {
      v1 = *(double *)&v6;
      goto LABEL_14;
    }
    v2 = OUTLINED_FUNCTION_38_22();
    if ((_DWORD)v2)
    {
      v1 = (float)(uint64_t)v6;
      goto LABEL_14;
    }
    OUTLINED_FUNCTION_27_1(v2, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if (OUTLINED_FUNCTION_38_22())
    {
      objc_msgSend(v6, sel_floatValue);
      v1 = v3;

      goto LABEL_14;
    }
    if (swift_dynamicCast())
    {
      v4 = specialized Float.init<A>(_:)((uint64_t)v6, v7);
      if ((v4 & 0x100000000) != 0)
        v1 = NAN;
      else
        v1 = *(float *)&v4;
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
LABEL_16:
    v1 = NAN;
    goto LABEL_17;
  }
  v1 = *(float *)&v6;
LABEL_14:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
LABEL_17:
  outlined destroy of URL?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  return v1;
}

uint64_t closure #6 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v13;
    v6 = *(_QWORD *)(v13 + 16);
    v7 = (float *)(v3 + 36);
    v8 = v4;
    do
    {
      if (*(_BYTE *)v7)
        v9 = NAN;
      else
        v9 = *(v7 - 1);
      v14 = v5;
      if (v6 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v14;
      }
      *(_QWORD *)(v5 + 16) = v6 + 1;
      *(float *)(v5 + 4 * v6 + 32) = v9;
      v7 += 2;
      ++v6;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v10 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v11);
}

uint64_t closure #7 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  int v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v15;
    v6 = *(_QWORD *)(v15 + 16);
    v7 = (double *)(v3 + 40);
    v8 = v4;
    do
    {
      v9 = *(v7 - 1);
      v10 = *(unsigned __int8 *)v7;
      v16 = v5;
      if (v6 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v16;
      }
      v11 = v9;
      if (v10)
        v11 = NAN;
      *(_QWORD *)(v5 + 16) = v6 + 1;
      *(float *)(v5 + 4 * v6 + 32) = v11;
      v7 += 2;
      ++v6;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v12 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v13);
}

uint64_t closure #8 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  id v16;
  uint64_t v17;
  _BYTE v18[32];
  _BYTE v19[24];
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;

  v2 = a2;
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v3 + 32;
    v14 = v4;
    while (1)
    {
      outlined init with copy of URL?(v6, (uint64_t)v21, &demangling cache variable for type metadata for Any?);
      outlined init with copy of URL?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Any?);
      if (!v20)
        goto LABEL_18;
      outlined init with copy of URL?((uint64_t)v19, (uint64_t)v18, &demangling cache variable for type metadata for Any?);
      if (swift_dynamicCast())
      {
        v7 = *(float *)&v16;
      }
      else if ((swift_dynamicCast() & 1) != 0)
      {
        v7 = *(double *)&v16;
      }
      else if (swift_dynamicCast())
      {
        v7 = (float)(uint64_t)v16;
      }
      else
      {
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          objc_msgSend(v16, sel_floatValue);
          v7 = v8;

        }
        else
        {
          if (!swift_dynamicCast())
          {
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
LABEL_18:
            v7 = NAN;
            goto LABEL_19;
          }
          v9 = specialized Float.init<A>(_:)((uint64_t)v16, v17);
          if ((v9 & 0x100000000) != 0)
            v7 = NAN;
          else
            v7 = *(float *)&v9;
        }
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
LABEL_19:
      outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for Any?);
      outlined destroy of URL?((uint64_t)v21, &demangling cache variable for type metadata for Any?);
      v5 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v22;
      }
      v10 = *(_QWORD *)(v5 + 16);
      if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v22;
      }
      *(_QWORD *)(v5 + 16) = v10 + 1;
      *(float *)(v5 + 4 * v10 + 32) = v7;
      v6 += 32;
      if (!--v4)
      {
        v2 = a2;
        v4 = v14;
        break;
      }
    }
  }
  v21[0] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v11 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(v2, 0, 1, v12);
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_Sb_TG5TA_0);
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

uint64_t sub_21AF5A8C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_105_1() - 8) + 80);
  OUTLINED_FUNCTION_46_14();
  v2 = OUTLINED_FUNCTION_206();
  if (v2 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v2 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_206())
    {
      case 0u:
      case 1u:
        v3 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_45_0(v3);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        OUTLINED_FUNCTION_193();
        goto LABEL_5;
      case 4u:
        v8 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_45_0(v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(OUTLINED_FUNCTION_0_26() + 28);
  if (*(_QWORD *)(v4 + 24))
    __swift_destroy_boxed_opaque_existential_0(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v5 = OUTLINED_FUNCTION_114();
  v6 = OUTLINED_FUNCTION_17_18(v5, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_11_1(v6);
  return OUTLINED_FUNCTION_84_10();
}

uint64_t partial apply for closure #1 in MLSoundClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_186_1();
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_30_0(v3);
  *v4 = v1;
  v4[1] = partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return closure #1 in MLSoundClassifier.init(checkpoint:)(a1);
}

uint64_t specialized closure #1 in blockAwait<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return swift_task_switch();
}

{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_3_42();
}

uint64_t specialized closure #1 in blockAwait<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_61_17();
  v0 = type metadata accessor for MLHandPoseClassifier();
  OUTLINED_FUNCTION_52_16(v0);
  v1 = OUTLINED_FUNCTION_11_45();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_20_36(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  OUTLINED_FUNCTION_1_54();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_138_2();
  v1 = OUTLINED_FUNCTION_27_1(v0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
  v2 = OUTLINED_FUNCTION_12_44(v1);
  v3 = (_QWORD *)OUTLINED_FUNCTION_48_21(v2);
  v4 = OUTLINED_FUNCTION_14_42(v3);
  return OUTLINED_FUNCTION_2_56(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = OUTLINED_FUNCTION_61_17();
  v1 = type metadata accessor for MLStyleTransfer(v0);
  OUTLINED_FUNCTION_52_16(v1);
  v2 = OUTLINED_FUNCTION_11_45();
  v3 = (_QWORD *)OUTLINED_FUNCTION_48_21(v2);
  v4 = OUTLINED_FUNCTION_20_36(v3);
  return OUTLINED_FUNCTION_2_56(v4, v5);
}

{
  OUTLINED_FUNCTION_1_54();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  *(_BYTE *)(v0 + 48) = 0;
  v2 = v1 + 16;
  OUTLINED_FUNCTION_4_28();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 16, v2, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess();
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 144);
  __swift_deallocate_boxed_opaque_existential_0(v0 + 16);
  *(_QWORD *)(v0 + 56) = v1;
  *(_BYTE *)(v0 + 88) = 1;
  OUTLINED_FUNCTION_4_28();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 56, v2 + 16, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess();
  OS_dispatch_semaphore.signal()();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_138_2();
  v0 = type metadata accessor for _Model();
  v1 = OUTLINED_FUNCTION_12_44(v0);
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_61_17();
  v0 = type metadata accessor for MLImageClassifier();
  OUTLINED_FUNCTION_52_16(v0);
  v1 = OUTLINED_FUNCTION_11_45();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_20_36(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_138_2();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
  v1 = OUTLINED_FUNCTION_12_44(v0);
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_138_2();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(predicted: String, label: String)]);
  v1 = OUTLINED_FUNCTION_12_44(v0);
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_61_17();
  v0 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_52_16(v0);
  v1 = OUTLINED_FUNCTION_11_45();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_20_36(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v0 = OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_52_16(v0);
  v1 = OUTLINED_FUNCTION_11_45();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_20_36(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_138_2();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedPrediction<ClassificationDistribution<String>, String>]);
  v1 = OUTLINED_FUNCTION_12_44(v0);
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_61_17();
  v0 = type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_52_16(v0);
  v1 = OUTLINED_FUNCTION_11_45();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_20_36(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_138_2();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  v1 = OUTLINED_FUNCTION_12_44(v0);
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  *(_QWORD *)(v0 + 40) = &type metadata for MLRegressorMetrics;
  v1 = OUTLINED_FUNCTION_73_14();
  v2 = (_QWORD *)OUTLINED_FUNCTION_48_21(v1);
  v3 = OUTLINED_FUNCTION_14_42(v2);
  return OUTLINED_FUNCTION_2_56(v3, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_52_0();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_90(v0);
}

uint64_t sub_21AF5B0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  id *v37;
  int EnumCaseMultiPayload;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;

  v1 = v0;
  v2 = OUTLINED_FUNCTION_30_33();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = OUTLINED_FUNCTION_78();
  v67 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  v69 = *(_QWORD *)(v7 - 8);
  v8 = v1 + v5;
  v9 = OUTLINED_FUNCTION_267();
  if (!__swift_getEnumTagSinglePayload(v1 + v5, 1, v9))
  {
    v10 = OUTLINED_FUNCTION_134_1();
    OUTLINED_FUNCTION_0_39(v10);

    swift_bridgeObjectRelease();
  }
  v70 = (int *)v2;
  v11 = v8 + *(int *)(v2 + 20);
  OUTLINED_FUNCTION_46_14();
  v12 = OUTLINED_FUNCTION_145_2();
  if (v12 == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (v12 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    v13 = OUTLINED_FUNCTION_132_1();
    switch((int)v13)
    {
      case 0:
      case 1:
        OUTLINED_FUNCTION_131_3(v13, v14, v15, v16, v17, v18, v19, v20, v63, v65, v67, v68, v69);
        break;
      case 2:
        goto LABEL_7;
      case 3:
        OUTLINED_FUNCTION_204_1();
        goto LABEL_7;
      case 4:
        v61 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_51_9(v61);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_7;
      default:
        break;
    }
  }
  v21 = OUTLINED_FUNCTION_0_26();
  v22 = v11 + *(int *)(v21 + 28);
  if (*(_QWORD *)(v22 + 24))
    __swift_destroy_boxed_opaque_existential_0(v22);
  OUTLINED_FUNCTION_105_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v23 = OUTLINED_FUNCTION_132_1();
  v24 = OUTLINED_FUNCTION_17_18(v23, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_51_9(v24);

  v25 = v8 + v70[7];
  v26 = OUTLINED_FUNCTION_145_2();
  if (v26 == 2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
  else if (v26 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    v27 = OUTLINED_FUNCTION_132_1();
    switch((int)v27)
    {
      case 0:
      case 1:
        OUTLINED_FUNCTION_131_3(v27, v28, v29, v30, v31, v32, v33, v34, v63, v65, v67, v68, v69);
        break;
      case 2:
        goto LABEL_14;
      case 3:
        OUTLINED_FUNCTION_204_1();
        goto LABEL_14;
      case 4:
        v62 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_51_9(v62);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_14;
      default:
        break;
    }
  }
  v35 = v25 + *(int *)(v21 + 28);
  if (*(_QWORD *)(v35 + 24))
    __swift_destroy_boxed_opaque_existential_0(v35);
  v36 = v70;
  v37 = (id *)(v8 + v70[8]);
  OUTLINED_FUNCTION_83_4();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v40 = OUTLINED_FUNCTION_10_26();
      v41 = (v4 + 16) & ~v4;
      v42 = v7;
      v43 = (char *)v37 + *(int *)(v40 + 20);
      v64 = v6;
      v66 = v1;
      v44 = OUTLINED_FUNCTION_93();
      v45 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8);
      v46 = v43;
      v7 = v42;
      v5 = v41;
      v45(v46, v44);
      v47 = *(int *)(v40 + 24);
      v36 = v70;
      v48 = v44;
      v1 = v66;
      v45((char *)v37 + v47, v48);
      v6 = v64;
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_99_8() == 1)
        v39 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v39 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v49 = __swift_instantiateConcreteTypeFromMangledName(v39);
      OUTLINED_FUNCTION_42_3(v49);
      break;
  }
  v50 = (id *)(v8 + v36[9]);
  OUTLINED_FUNCTION_165_0();
  v51 = swift_getEnumCaseMultiPayload();
  if (v51 == 2)
  {

LABEL_33:
    v52 = v67;
    goto LABEL_36;
  }
  if (v51 == 1)
  {
    v54 = OUTLINED_FUNCTION_10_26();
    v55 = (char *)v50 + *(int *)(v54 + 20);
    v56 = OUTLINED_FUNCTION_93();
    v57 = v6;
    v58 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8);
    v58(v55, v56);
    v58((char *)v50 + *(int *)(v54 + 24), v56);
    v6 = v57;
    goto LABEL_33;
  }
  v52 = v67;
  if (!v51)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (OUTLINED_FUNCTION_206() == 1)
      v53 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v53 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v59 = __swift_instantiateConcreteTypeFromMangledName(v53);
    OUTLINED_FUNCTION_45_0(v59);
  }
LABEL_36:
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v69 + 8))(v1 + ((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + v52 + 8) & ~v52), v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_30_33();
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_186_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_57_17(v1);
  return closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(v2, v3, v4, v5);
}

uint64_t sub_21AF5B5B4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in blockAwait<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = swift_task_alloc();
  v11 = (_QWORD *)OUTLINED_FUNCTION_30_0(v10);
  *v11 = v2;
  v11[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return specialized closure #1 in blockAwait<A>(_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_21AF5B678()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = OUTLINED_FUNCTION_195_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_41_23(v1);
  return OUTLINED_FUNCTION_31_29(v2, v3, v4, v5);
}

void sub_21AF5B6E0(id *a1@<X8>)
{
  *a1 = MLSoundClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLSoundClassifier(_QWORD *a1, char *a2, int *a3)
{
  char *v3;
  int v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  char *v37;
  id v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  id *v50;
  id *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  id v61;
  id v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  void **v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void *v75;
  id v76;
  uint64_t *v77;
  uint64_t v78;
  char *v80;

  v3 = a2;
  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v8 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a3;
    v6 = type metadata accessor for TrainingTablePrinter(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v6))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for Date();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v3, v9);
      v10 = *(int *)(v6 + 20);
      v11 = *(void **)&v3[v10];
      *(_QWORD *)((char *)a1 + v10) = v11;
      *(_QWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_QWORD *)&v3[*(int *)(v6 + 24)];
      v12 = v11;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
    }
    v13 = v5[5];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = &v3[v13];
    v16 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *v14 = *(_QWORD *)v15;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v18 = (char *)&loc_21AF5B874 + 4 * byte_21AFEEE49[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v19 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
    *(_QWORD *)((char *)v14 + v19[5]) = *(_QWORD *)&v15[v19[5]];
    *(_QWORD *)((char *)v14 + v19[6]) = *(_QWORD *)&v15[v19[6]];
    v20 = v19[7];
    v21 = (char *)v14 + v20;
    v22 = &v15[v20];
    v23 = *(_QWORD *)&v15[v20 + 24];
    if (v23)
    {
      *((_QWORD *)v21 + 3) = v23;
      (**(void (***)(void))(v23 - 8))();
    }
    else
    {
      v24 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v24;
    }
    v25 = v19[8];
    v26 = (char *)v14 + v25;
    v27 = &v15[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    *(_QWORD *)((char *)v14 + v19[9]) = *(_QWORD *)&v15[v19[9]];
    v28 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
    v29 = (char *)v14 + v28;
    v30 = &v15[v28];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v31 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v31 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v32 = __swift_instantiateConcreteTypeFromMangledName(v31);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    swift_storeEnumTagMultiPayload();
    v33 = v5[6];
    v34 = v5[7];
    v35 = *(void **)&v3[v33];
    *(_QWORD *)((char *)a1 + v33) = v35;
    v36 = (_QWORD *)((char *)a1 + v34);
    v37 = &v3[v34];
    v38 = v35;
    v39 = swift_getEnumCaseMultiPayload();
    if (v39 == 2)
    {
      *v36 = *(_QWORD *)v37;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v39 == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v40 = (char *)&loc_21AF5BB80 + 4 * byte_21AFEEE4E[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    *(_QWORD *)((char *)v36 + v19[5]) = *(_QWORD *)&v37[v19[5]];
    *(_QWORD *)((char *)v36 + v19[6]) = *(_QWORD *)&v37[v19[6]];
    v41 = v19[7];
    v42 = (char *)v36 + v41;
    v43 = &v37[v41];
    v44 = *(_QWORD *)&v37[v41 + 24];
    if (v44)
    {
      *((_QWORD *)v42 + 3) = v44;
      (**(void (***)(void))(v44 - 8))();
    }
    else
    {
      v45 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v45;
    }
    v46 = v19[8];
    v47 = (char *)v36 + v46;
    v48 = &v37[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    *(_QWORD *)((char *)v36 + v19[9]) = *(_QWORD *)&v37[v19[9]];
    v49 = v5[8];
    v50 = (id *)((char *)a1 + v49);
    v51 = (id *)&v3[v49];
    type metadata accessor for MLClassifierMetrics.Contents(0);
    v52 = swift_getEnumCaseMultiPayload();
    if (v52 == 2)
    {
      v61 = *v51;
      v62 = *v51;
      *v50 = v61;
    }
    else if (v52 == 1)
    {
      *v50 = *v51;
      v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v54 = *(int *)(v53 + 20);
      v55 = (char *)v50 + v54;
      v56 = v5;
      v57 = (char *)v51 + v54;
      v58 = type metadata accessor for DataFrame();
      v80 = v3;
      v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      v60 = v57;
      v5 = v56;
      v59(v55, v60, v58);
      v59((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v58);
      v3 = v80;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v64 = __swift_instantiateConcreteTypeFromMangledName(v63);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v50, v51, v64);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v65 = v5[9];
    v66 = (void **)((char *)a1 + v65);
    v67 = (void **)&v3[v65];
    v68 = swift_getEnumCaseMultiPayload();
    if (v68 == 2)
    {
      v75 = *v67;
      v76 = v75;
      *v66 = v75;
    }
    else if (v68 == 1)
    {
      *v66 = *v67;
      v69 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v70 = *(int *)(v69 + 20);
      v71 = (char *)v66 + v70;
      v72 = (char *)v67 + v70;
      v73 = type metadata accessor for DataFrame();
      v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16);
      v74(v71, v72, v73);
      v74((char *)v66 + *(int *)(v69 + 24), (char *)v67 + *(int *)(v69 + 24), v73);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v77 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v77 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v78 = __swift_instantiateConcreteTypeFromMangledName(v77);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v66, v67, v78);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLSoundClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  id *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  void (*v34)(id *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);

  v4 = type metadata accessor for TrainingTablePrinter(0);
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4))
  {
    v5 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);

    swift_bridgeObjectRelease();
  }
  v6 = a1 + a2[5];
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v8 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
        break;
      case 2u:
        goto LABEL_7;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v6, *(_BYTE *)(v6 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 4u:
        v35 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v6, v35);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      default:
        break;
    }
  }
  v9 = type metadata accessor for MLSoundClassifier.ModelParameters();
  v10 = v6 + *(int *)(v9 + 28);
  if (*(_QWORD *)(v10 + 24))
    __swift_destroy_boxed_opaque_existential_0(v10);
  v11 = v6 + *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v12 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v12 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v13 = __swift_instantiateConcreteTypeFromMangledName(v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);

  v14 = a1 + a2[7];
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 2)
  {
LABEL_17:
    swift_bridgeObjectRelease();
  }
  else if (v15 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v16 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
        break;
      case 2u:
        goto LABEL_17;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v14, *(_BYTE *)(v14 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_17;
      case 4u:
        v36 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v14, v36);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_17;
      default:
        break;
    }
  }
  v17 = v14 + *(int *)(v9 + 28);
  if (*(_QWORD *)(v17 + 24))
    __swift_destroy_boxed_opaque_existential_0(v17);
  v18 = (id *)(a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  v19 = swift_getEnumCaseMultiPayload();
  switch(v19)
  {
    case 2:

      break;
    case 1:
      v21 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v22 = (char *)v18 + *(int *)(v21 + 20);
      v23 = type metadata accessor for DataFrame();
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v24(v22, v23);
      v24((char *)v18 + *(int *)(v21 + 24), v23);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v25 = __swift_instantiateConcreteTypeFromMangledName(v20);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v18, v25);
      break;
  }
  v26 = (id *)(a1 + a2[9]);
  v27 = swift_getEnumCaseMultiPayload();
  switch(v27)
  {
    case 2:

      return;
    case 1:
      v29 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v30 = (char *)v26 + *(int *)(v29 + 20);
      v31 = type metadata accessor for DataFrame();
      v37 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8);
      v37(v30, v31);
      v32 = (id *)((char *)v26 + *(int *)(v29 + 24));
      v33 = v31;
      v34 = (void (*)(id *, uint64_t))v37;
LABEL_39:
      v34(v32, v33);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v33 = __swift_instantiateConcreteTypeFromMangledName(v28);
      v34 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
      v32 = v26;
      goto LABEL_39;
  }
}

char *initializeWithCopy for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  id v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  id *v49;
  id *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  id v60;
  id v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  void **v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  void *v74;
  id v75;
  uint64_t *v76;
  uint64_t v77;
  int *v79;
  char *v80;

  v6 = type metadata accessor for TrainingTablePrinter(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(v6 + 20);
    v10 = *(void **)&a2[v9];
    *(_QWORD *)&a1[v9] = v10;
    *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
    v11 = v10;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v17 = (char *)&loc_21AF5C5C8 + 4 * byte_21AFEEE5D[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v18 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&v13[v18[5]] = *(_QWORD *)&v14[v18[5]];
  *(_QWORD *)&v13[v18[6]] = *(_QWORD *)&v14[v18[6]];
  v19 = v18[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = *(_QWORD *)&v14[v19 + 24];
  if (v22)
  {
    *((_QWORD *)v20 + 3) = v22;
    (**(void (***)(void))(v22 - 8))();
  }
  else
  {
    v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v23;
  }
  v24 = v18[8];
  v25 = &v13[v24];
  v26 = &v14[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)&v13[v18[9]] = *(_QWORD *)&v14[v18[9]];
  v27 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  v28 = &v13[v27];
  v29 = &v14[v27];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v30 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v30 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
  swift_storeEnumTagMultiPayload();
  v32 = a3[6];
  v33 = a3[7];
  v34 = *(void **)&a2[v32];
  *(_QWORD *)&a1[v32] = v34;
  v35 = &a1[v33];
  v36 = &a2[v33];
  v37 = v34;
  v38 = swift_getEnumCaseMultiPayload();
  if (v38 == 2)
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (v38 == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v39 = (char *)&loc_21AF5C8D0 + 4 * byte_21AFEEE62[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  *(_QWORD *)&v35[v18[5]] = *(_QWORD *)&v36[v18[5]];
  *(_QWORD *)&v35[v18[6]] = *(_QWORD *)&v36[v18[6]];
  v40 = v18[7];
  v41 = &v35[v40];
  v42 = &v36[v40];
  v43 = *(_QWORD *)&v36[v40 + 24];
  if (v43)
  {
    *((_QWORD *)v41 + 3) = v43;
    (**(void (***)(void))(v43 - 8))();
  }
  else
  {
    v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
  }
  v45 = v18[8];
  v46 = &v35[v45];
  v47 = &v36[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  *(_QWORD *)&v35[v18[9]] = *(_QWORD *)&v36[v18[9]];
  v48 = a3[8];
  v49 = (id *)&a1[v48];
  v50 = (id *)&a2[v48];
  type metadata accessor for MLClassifierMetrics.Contents(0);
  v51 = swift_getEnumCaseMultiPayload();
  if (v51 == 2)
  {
    v60 = *v50;
    v61 = *v50;
    *v49 = v60;
  }
  else if (v51 == 1)
  {
    *v49 = *v50;
    v52 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v53 = *(int *)(v52 + 20);
    v54 = (char *)v49 + v53;
    v80 = a2;
    v55 = a1;
    v56 = (char *)v50 + v53;
    v57 = type metadata accessor for DataFrame();
    v79 = a3;
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    v59 = v56;
    a1 = v55;
    a2 = v80;
    v58(v54, v59, v57);
    v58((char *)v49 + *(int *)(v52 + 24), (char *)v50 + *(int *)(v52 + 24), v57);
    a3 = v79;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v62 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v62 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v63 = __swift_instantiateConcreteTypeFromMangledName(v62);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v49, v50, v63);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v64 = a3[9];
  v65 = (void **)&a1[v64];
  v66 = (void **)&a2[v64];
  v67 = swift_getEnumCaseMultiPayload();
  if (v67 == 2)
  {
    v74 = *v66;
    v75 = v74;
    *v65 = v74;
  }
  else if (v67 == 1)
  {
    *v65 = *v66;
    v68 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v69 = *(int *)(v68 + 20);
    v70 = (char *)v65 + v69;
    v71 = (char *)v66 + v69;
    v72 = type metadata accessor for DataFrame();
    v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16);
    v73(v70, v71, v72);
    v73((char *)v65 + *(int *)(v68 + 24), (char *)v66 + *(int *)(v68 + 24), v72);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v76 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v76 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v77 = __swift_instantiateConcreteTypeFromMangledName(v76);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v65, v66, v77);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id *v61;
  id *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  id v70;
  id v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  void **v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  void *v84;
  id v85;
  uint64_t *v86;
  uint64_t v87;
  char *v89;
  int *v90;

  v6 = type metadata accessor for TrainingTablePrinter(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = *(int *)(v6 + 20);
      v11 = *(void **)&a2[v10];
      *(_QWORD *)&a1[v10] = v11;
      *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
      v12 = v11;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1, type metadata accessor for TrainingTablePrinter);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v20 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(a1, a2, v20);
  v21 = *(int *)(v6 + 20);
  v22 = *(void **)&a2[v21];
  v23 = *(void **)&a1[v21];
  *(_QWORD *)&a1[v21] = v22;
  v24 = v22;

  *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v14 = a3[5];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v14], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v17 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v19 = (char *)&loc_21AF5CE8C + 4 * byte_21AFEEE67[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v25 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&v15[v25[5]] = *(_QWORD *)&v16[v25[5]];
  *(_QWORD *)&v15[v25[6]] = *(_QWORD *)&v16[v25[6]];
  v26 = v25[7];
  v27 = (uint64_t)&v15[v26];
  v28 = (uint64_t *)&v16[v26];
  v29 = *(_QWORD *)&v16[v26 + 24];
  if (*(_QWORD *)&v15[v26 + 24])
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v27, v28);
      goto LABEL_21;
    }
    __swift_destroy_boxed_opaque_existential_0(v27);
  }
  else if (v29)
  {
    *(_QWORD *)(v27 + 24) = v29;
    (**(void (***)(uint64_t, char *))(v29 - 8))(v27, (char *)v28);
    goto LABEL_21;
  }
  v30 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v30;
LABEL_21:
  v31 = v25[8];
  v32 = &v15[v31];
  v33 = &v16[v31];
  v34 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v15[v25[9]] = *(_QWORD *)&v16[v25[9]];
  v35 = type metadata accessor for MLSoundClassifier.Model();
  if (a1 != a2)
  {
    v36 = *(int *)(v35 + 20);
    v37 = &v16[v36];
    v38 = (uint64_t)&v15[v36];
    outlined destroy of URL?(v38, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v39 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v39 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  v41 = a3[6];
  v42 = *(void **)&a2[v41];
  v43 = *(void **)&a1[v41];
  *(_QWORD *)&a1[v41] = v42;
  v44 = v42;

  v45 = a3[7];
  v46 = &a1[v45];
  v47 = &a2[v45];
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v45], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v48 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    v49 = swift_getEnumCaseMultiPayload();
    if (v49 == 2)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v49 == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v50 = (char *)&loc_21AF5D280 + 4 * byte_21AFEEE6C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
  }
  *(_QWORD *)&v46[v25[5]] = *(_QWORD *)&v47[v25[5]];
  *(_QWORD *)&v46[v25[6]] = *(_QWORD *)&v47[v25[6]];
  v51 = v25[7];
  v52 = (uint64_t)&v46[v51];
  v53 = (uint64_t *)&v47[v51];
  v54 = *(_QWORD *)&v47[v51 + 24];
  if (*(_QWORD *)&v46[v51 + 24])
  {
    if (v54)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v52, v53);
      goto LABEL_39;
    }
    __swift_destroy_boxed_opaque_existential_0(v52);
  }
  else if (v54)
  {
    *(_QWORD *)(v52 + 24) = v54;
    (**(void (***)(uint64_t, char *))(v54 - 8))(v52, (char *)v53);
    goto LABEL_39;
  }
  v55 = *((_OWORD *)v53 + 1);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v55;
LABEL_39:
  v56 = v25[8];
  v57 = &v46[v56];
  v58 = &v47[v56];
  v59 = *(_QWORD *)v58;
  v57[8] = v58[8];
  *(_QWORD *)v57 = v59;
  *(_QWORD *)&v46[v25[9]] = *(_QWORD *)&v47[v25[9]];
  if (a1 != a2)
  {
    v60 = a3[8];
    v61 = (id *)&a1[v60];
    v62 = (id *)&a2[v60];
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v60], type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    v63 = swift_getEnumCaseMultiPayload();
    if (v63 == 2)
    {
      v70 = *v62;
      v71 = *v62;
      *v61 = v70;
    }
    else if (v63 == 1)
    {
      *v61 = *v62;
      v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v65 = *(int *)(v64 + 20);
      v89 = (char *)v61 + v65;
      v90 = a3;
      v66 = (char *)v62 + v65;
      v67 = type metadata accessor for DataFrame();
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
      v69 = v66;
      a3 = v90;
      v68(v89, v69, v67);
      v68((char *)v61 + *(int *)(v64 + 24), (char *)v62 + *(int *)(v64 + 24), v67);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v72 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v72 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v73 = __swift_instantiateConcreteTypeFromMangledName(v72);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v61, v62, v73);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v74 = a3[9];
    v75 = (void **)&a1[v74];
    v76 = (void **)&a2[v74];
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v74], type metadata accessor for MLClassifierMetrics.Contents);
    v77 = swift_getEnumCaseMultiPayload();
    if (v77 == 2)
    {
      v84 = *v76;
      v85 = v84;
      *v75 = v84;
    }
    else if (v77 == 1)
    {
      *v75 = *v76;
      v78 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v79 = *(int *)(v78 + 20);
      v80 = (char *)v75 + v79;
      v81 = (char *)v76 + v79;
      v82 = type metadata accessor for DataFrame();
      v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16);
      v83(v80, v81, v82);
      v83((char *)v75 + *(int *)(v78 + 24), (char *)v76 + *(int *)(v78 + 24), v82);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v86 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v86 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v87 = __swift_instantiateConcreteTypeFromMangledName(v86);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v75, v76, v87);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  int *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v82;

  v6 = type metadata accessor for TrainingTablePrinter(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_13;
  }
  v13 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v15 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v10[v16[12]] = *(_OWORD *)&v11[v16[12]];
    *(_OWORD *)&v10[v16[16]] = *(_OWORD *)&v11[v16[16]];
    v17 = v16[20];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    v18[32] = v19[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      goto LABEL_12;
    }
    v21 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v10, v11, v21);
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  swift_storeEnumTagMultiPayload();
LABEL_13:
  v22 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&v10[v22[5]] = *(_QWORD *)&v11[v22[5]];
  *(_QWORD *)&v10[v22[6]] = *(_QWORD *)&v11[v22[6]];
  v23 = v22[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  v27 = v22[8];
  v28 = &v10[v27];
  v29 = &v11[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  *(_QWORD *)&v10[v22[9]] = *(_QWORD *)&v11[v22[9]];
  v30 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  v31 = &v10[v30];
  v32 = &v11[v30];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v33 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v33 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
  swift_storeEnumTagMultiPayload();
  v35 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v36 = &a1[v35];
  v37 = &a2[v35];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_25;
  }
  v38 = type metadata accessor for MLSoundClassifier.DataSource();
  v39 = swift_getEnumCaseMultiPayload();
  if (v39 == 4)
  {
    v40 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v36, v37, v40);
    v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v36[v41[12]] = *(_OWORD *)&v37[v41[12]];
    *(_OWORD *)&v36[v41[16]] = *(_OWORD *)&v37[v41[16]];
    v42 = v41[20];
    v43 = &v36[v42];
    v44 = &v37[v42];
    v45 = *((_OWORD *)v44 + 1);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *((_OWORD *)v43 + 1) = v45;
    v43[32] = v44[32];
  }
  else
  {
    if (v39 > 1)
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_24;
    }
    v46 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v36, v37, v46);
  }
  swift_storeEnumTagMultiPayload();
LABEL_24:
  swift_storeEnumTagMultiPayload();
LABEL_25:
  *(_QWORD *)&v36[v22[5]] = *(_QWORD *)&v37[v22[5]];
  *(_QWORD *)&v36[v22[6]] = *(_QWORD *)&v37[v22[6]];
  v47 = v22[7];
  v48 = &v36[v47];
  v49 = &v37[v47];
  v50 = *((_OWORD *)v49 + 1);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *((_OWORD *)v48 + 1) = v50;
  v51 = v22[8];
  v52 = &v36[v51];
  v53 = &v37[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
  *(_QWORD *)&v36[v22[9]] = *(_QWORD *)&v37[v22[9]];
  v54 = a3[8];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v58 = swift_getEnumCaseMultiPayload();
  if (v58 == 1)
  {
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v61 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v62 = *(int *)(v61 + 20);
    v63 = &v55[v62];
    v64 = &v56[v62];
    v65 = type metadata accessor for DataFrame();
    v82 = a2;
    v66 = a1;
    v67 = a3;
    v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32);
    v68(v63, v64, v65);
    v68(&v55[*(int *)(v61 + 24)], &v56[*(int *)(v61 + 24)], v65);
    a3 = v67;
    a1 = v66;
    a2 = v82;
LABEL_32:
    swift_storeEnumTagMultiPayload();
    goto LABEL_34;
  }
  if (!v58)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v55, v56, v60);
    swift_storeEnumTagMultiPayload();
    goto LABEL_32;
  }
  memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
LABEL_34:
  v69 = a3[9];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = swift_getEnumCaseMultiPayload();
  if (v72 == 1)
  {
    *(_QWORD *)v70 = *(_QWORD *)v71;
    v75 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v76 = *(int *)(v75 + 20);
    v77 = &v70[v76];
    v78 = &v71[v76];
    v79 = type metadata accessor for DataFrame();
    v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32);
    v80(v77, v78, v79);
    v80(&v70[*(int *)(v75 + 24)], &v71[*(int *)(v75 + 24)], v79);
  }
  else
  {
    if (v72)
    {
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v73 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v73 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v74 = __swift_instantiateConcreteTypeFromMangledName(v73);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v70, v71, v74);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  int *v89;

  v6 = type metadata accessor for TrainingTablePrinter(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1, type metadata accessor for TrainingTablePrinter);
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  v17 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a1, a2, v17);
  v18 = *(int *)(v6 + 20);
  v19 = *(void **)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];

  *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
  swift_bridgeObjectRelease();
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (a1 == a2)
    goto LABEL_18;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v11], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  v14 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_18;
  }
  v15 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v20 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v12, v13, v20);
    v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v12[v21[12]] = *(_OWORD *)&v13[v21[12]];
    *(_OWORD *)&v12[v21[16]] = *(_OWORD *)&v13[v21[16]];
    v22 = v21[20];
    v23 = &v12[v22];
    v24 = &v13[v22];
    v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    v23[32] = v24[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_17;
    }
    v26 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v12, v13, v26);
  }
  swift_storeEnumTagMultiPayload();
LABEL_17:
  swift_storeEnumTagMultiPayload();
LABEL_18:
  v27 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&v12[v27[5]] = *(_QWORD *)&v13[v27[5]];
  *(_QWORD *)&v12[v27[6]] = *(_QWORD *)&v13[v27[6]];
  v28 = v27[7];
  v29 = &v12[v28];
  v30 = &v13[v28];
  if (*(_QWORD *)&v12[v28 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  v32 = v27[8];
  v33 = &v12[v32];
  v34 = &v13[v32];
  v33[8] = v34[8];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_QWORD *)&v12[v27[9]] = *(_QWORD *)&v13[v27[9]];
  v35 = type metadata accessor for MLSoundClassifier.Model();
  if (a1 != a2)
  {
    v36 = *(int *)(v35 + 20);
    v37 = &v13[v36];
    v38 = (uint64_t)&v12[v36];
    outlined destroy of URL?(v38, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v39 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v39 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  v41 = a3[6];
  v42 = *(void **)&a1[v41];
  *(_QWORD *)&a1[v41] = *(_QWORD *)&a2[v41];

  v43 = a3[7];
  v44 = &a1[v43];
  v45 = &a2[v43];
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v43], (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v46 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      goto LABEL_35;
    }
    v47 = type metadata accessor for MLSoundClassifier.DataSource();
    v48 = swift_getEnumCaseMultiPayload();
    if (v48 == 4)
    {
      v49 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v44, v45, v49);
      v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v44[v50[12]] = *(_OWORD *)&v45[v50[12]];
      *(_OWORD *)&v44[v50[16]] = *(_OWORD *)&v45[v50[16]];
      v51 = v50[20];
      v52 = &v44[v51];
      v53 = &v45[v51];
      v54 = *((_OWORD *)v53 + 1);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v54;
      v52[32] = v53[32];
    }
    else
    {
      if (v48 > 1)
      {
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        goto LABEL_34;
      }
      v55 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v44, v45, v55);
    }
    swift_storeEnumTagMultiPayload();
LABEL_34:
    swift_storeEnumTagMultiPayload();
  }
LABEL_35:
  *(_QWORD *)&v44[v27[5]] = *(_QWORD *)&v45[v27[5]];
  *(_QWORD *)&v44[v27[6]] = *(_QWORD *)&v45[v27[6]];
  v56 = v27[7];
  v57 = &v44[v56];
  v58 = &v45[v56];
  if (*(_QWORD *)&v44[v56 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  v59 = *((_OWORD *)v58 + 1);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *((_OWORD *)v57 + 1) = v59;
  v60 = v27[8];
  v61 = &v44[v60];
  v62 = &v45[v60];
  v61[8] = v62[8];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_QWORD *)&v44[v27[9]] = *(_QWORD *)&v45[v27[9]];
  if (a1 == a2)
    return a1;
  v63 = a3[8];
  v64 = &a1[v63];
  v65 = &a2[v63];
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v63], type metadata accessor for MLClassifierMetrics.Contents);
  v66 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v67 = swift_getEnumCaseMultiPayload();
  if (v67 == 1)
  {
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v71 = *(int *)(v70 + 20);
    v72 = &v64[v71];
    v73 = &v65[v71];
    v74 = type metadata accessor for DataFrame();
    v89 = a3;
    v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32);
    v75(v72, v73, v74);
    v75(&v64[*(int *)(v70 + 24)], &v65[*(int *)(v70 + 24)], v74);
    a3 = v89;
  }
  else
  {
    if (v67)
    {
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      goto LABEL_47;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v64, v65, v69);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_47:
  v76 = a3[9];
  v77 = &a1[v76];
  v78 = &a2[v76];
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)&a1[v76], type metadata accessor for MLClassifierMetrics.Contents);
  v79 = swift_getEnumCaseMultiPayload();
  if (v79 == 1)
  {
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v82 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v83 = *(int *)(v82 + 20);
    v84 = &v77[v83];
    v85 = &v78[v83];
    v86 = type metadata accessor for DataFrame();
    v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32);
    v87(v84, v85, v86);
    v87(&v77[*(int *)(v82 + 24)], &v78[*(int *)(v82 + 24)], v86);
  }
  else
  {
    if (v79)
    {
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v80 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v80 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v81 = __swift_instantiateConcreteTypeFromMangledName(v80);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v77, v78, v81);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF5E694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_14_8();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_14_8();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_14:
    v8 = a1 + v11;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_14_8();
    if (v9)
    {
      v7 = v14;
      v11 = a3[7];
    }
    else
    {
      v7 = OUTLINED_FUNCTION_71_10();
      v11 = a3[8];
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + a3[6]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF5E764(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_13_11();
  if (v11)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_13_11();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        OUTLINED_FUNCTION_125();
        return;
      }
      OUTLINED_FUNCTION_0_26();
      OUTLINED_FUNCTION_13_11();
      if (v11)
      {
        v9 = v14;
        v13 = a4[7];
      }
      else
      {
        v9 = OUTLINED_FUNCTION_71_10();
        v13 = a4[8];
      }
    }
    v10 = a1 + v13;
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

void type metadata completion function for MLSoundClassifier()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for TrainingTablePrinter?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.Model();
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLSoundClassifier.ModelParameters();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLClassifierMetrics.Contents(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for TrainingTablePrinter?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TrainingTablePrinter?)
  {
    type metadata accessor for TrainingTablePrinter(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrainingTablePrinter?);
  }
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x22075BA10);
  return result;
}

uint64_t sub_21AF5E96C()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_BYTE *closure #1 in closure #1 in Float.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void specialized closure #1 in _StringGuts.withCString<A>(_:)(void (*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  a1(&v4);
  if (!v2)
    *a2 = v4;
  OUTLINED_FUNCTION_23_7();
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *a3;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, a2, v10, a4, a5);
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v11 = *a3;
  v12 = *a4;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, a2, v11, v12, a5, a6);
}

uint64_t specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = *a3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = specialized closure #1 in MLSoundClassifier.evaluate<A>(on:);
  return specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)(a2, v5);
}

uint64_t sub_21AF5EC18()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  id *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v1 = (int *)OUTLINED_FUNCTION_30_33();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = OUTLINED_FUNCTION_267();
  if (!__swift_getEnumTagSinglePayload(v3, 1, v4))
  {
    v5 = OUTLINED_FUNCTION_134_1();
    OUTLINED_FUNCTION_45_0(v5);

    swift_bridgeObjectRelease();
  }
  v6 = v3 + v1[5];
  OUTLINED_FUNCTION_46_14();
  v7 = OUTLINED_FUNCTION_171_1();
  if (v7 == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (v7 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_99_8())
    {
      case 0u:
      case 1u:
        v8 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_42_3(v8);
        break;
      case 2u:
        goto LABEL_7;
      case 3u:
        OUTLINED_FUNCTION_207_1();
        goto LABEL_7;
      case 4u:
        v34 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_42_3(v34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_7;
      default:
        break;
    }
  }
  v9 = OUTLINED_FUNCTION_0_26();
  v10 = v6 + *(int *)(v9 + 28);
  if (*(_QWORD *)(v10 + 24))
    __swift_destroy_boxed_opaque_existential_0(v10);
  OUTLINED_FUNCTION_105_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v11 = OUTLINED_FUNCTION_99_8();
  v12 = OUTLINED_FUNCTION_17_18(v11, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_42_3(v12);

  v13 = v3 + v1[7];
  v14 = OUTLINED_FUNCTION_171_1();
  if (v14 == 2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
  else if (v14 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_99_8())
    {
      case 0u:
      case 1u:
        v15 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_42_3(v15);
        break;
      case 2u:
        goto LABEL_14;
      case 3u:
        OUTLINED_FUNCTION_207_1();
        goto LABEL_14;
      case 4u:
        v35 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_42_3(v35);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_14;
      default:
        break;
    }
  }
  v16 = v13 + *(int *)(v9 + 28);
  if (*(_QWORD *)(v16 + 24))
    __swift_destroy_boxed_opaque_existential_0(v16);
  v17 = (id *)(v3 + v1[8]);
  OUTLINED_FUNCTION_83_4();
  v18 = OUTLINED_FUNCTION_171_1();
  switch(v18)
  {
    case 2:

      break;
    case 1:
      v20 = OUTLINED_FUNCTION_10_26();
      v21 = (char *)v17 + *(int *)(v20 + 20);
      v22 = OUTLINED_FUNCTION_93();
      v23 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v23(v21, v22);
      v23((char *)v17 + *(int *)(v20 + 24), v22);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v19 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v19 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v24 = __swift_instantiateConcreteTypeFromMangledName(v19);
      OUTLINED_FUNCTION_71_2(v24);
      break;
  }
  v25 = (id *)(v3 + v1[9]);
  v26 = OUTLINED_FUNCTION_171_1();
  switch(v26)
  {
    case 2:

      break;
    case 1:
      v28 = OUTLINED_FUNCTION_10_26();
      v29 = OUTLINED_FUNCTION_93();
      v30 = *(void (**)(uint64_t))(*(_QWORD *)(v29 - 8) + 8);
      v31 = OUTLINED_FUNCTION_22_18();
      v30(v31);
      ((void (*)(char *, uint64_t))v30)((char *)v25 + *(int *)(v28 + 24), v29);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_114() == 1)
        v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v32 = __swift_instantiateConcreteTypeFromMangledName(v27);
      OUTLINED_FUNCTION_11_1(v32);
      break;
  }
  OUTLINED_FUNCTION_141_1();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_30_33();
  v0 = OUTLINED_FUNCTION_195_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_41_23(v1);
  return OUTLINED_FUNCTION_31_29(v2, v3, v4, v5);
}

uint64_t sub_21AF5F08C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = swift_task_alloc();
  v2 = (_QWORD *)OUTLINED_FUNCTION_30_0(v1);
  *v2 = v0;
  v2[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  v3 = OUTLINED_FUNCTION_112_5();
  return closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_21AF5F124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_199_0();
  v3 = v2 & ~v1;
  OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_46_14();
  v4 = OUTLINED_FUNCTION_23();
  if (v4 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v4 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_23())
    {
      case 0u:
      case 1u:
        v5 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_0_39(v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        OUTLINED_FUNCTION_218_1();
        goto LABEL_5;
      case 4u:
        v11 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_0_39(v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  v6 = v0 + v3 + *(int *)(OUTLINED_FUNCTION_0_26() + 28);
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v7 = OUTLINED_FUNCTION_206();
  v8 = OUTLINED_FUNCTION_17_18(v7, &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_45_0(v8);
  OUTLINED_FUNCTION_206_1();
  OUTLINED_FUNCTION_141_1();
  swift_bridgeObjectRelease();
  swift_release();
  v9 = OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_71_2(v9);
  OUTLINED_FUNCTION_137_2();
  OUTLINED_FUNCTION_146_2();
  return OUTLINED_FUNCTION_70_17();
}

uint64_t partial apply for specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_81_14();
  OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_186_1();
  OUTLINED_FUNCTION_205_0();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)OUTLINED_FUNCTION_30_0(v1);
  *v2 = v0;
  v2[1] = partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  v3 = OUTLINED_FUNCTION_112_5();
  return v4(v3);
}

uint64_t sub_21AF5F33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_199_0();
  v3 = v2 & ~v1;
  OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_46_14();
  v4 = OUTLINED_FUNCTION_23();
  if (v4 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v4 == 1)
  {
    OUTLINED_FUNCTION_21_26();
    switch(OUTLINED_FUNCTION_23())
    {
      case 0u:
      case 1u:
        v5 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_0_39(v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        OUTLINED_FUNCTION_218_1();
        goto LABEL_5;
      case 4u:
        v11 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_0_39(v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_34_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  v6 = v0 + v3 + *(int *)(OUTLINED_FUNCTION_0_26() + 28);
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v7 = OUTLINED_FUNCTION_206();
  v8 = OUTLINED_FUNCTION_17_18(v7, &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_45_0(v8);
  OUTLINED_FUNCTION_206_1();
  OUTLINED_FUNCTION_141_1();
  swift_release();
  v9 = OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_71_2(v9);
  OUTLINED_FUNCTION_137_2();
  OUTLINED_FUNCTION_146_2();
  return OUTLINED_FUNCTION_70_17();
}

uint64_t partial apply for specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_81_14();
  OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_186_1();
  OUTLINED_FUNCTION_205_0();
  v7 = *(_QWORD *)(v1 + v5);
  v9 = v1 + v8;
  v10 = swift_task_alloc();
  v11 = (_QWORD *)OUTLINED_FUNCTION_30_0(v10);
  *v11 = v3;
  v11[1] = partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)
                                                                                + async function pointer to specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)))(a1, v2, v4, v7, v9);
}

uint64_t partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #1 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t objectdestroy_79Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_267();
  swift_release();
  v0 = OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_71_2(v0);
  OUTLINED_FUNCTION_137_2();
  OUTLINED_FUNCTION_146_2();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #2 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_186_1();
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t partial apply for closure #8 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #8 in static MLSoundClassifier.convertFeatures(_:)(a1, a2);
}

uint64_t partial apply for closure #5 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #5 in static MLSoundClassifier.convertFeatures(_:)(a1, a2);
}

_BYTE *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Float.init<A>(_:)(a1, a2);
}

void _ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_Sb_TG5TA_0(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  if (!v2)
    *a1 = v4;
  OUTLINED_FUNCTION_23_7();
}

uint64_t OUTLINED_FUNCTION_1_54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 184) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_56(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_4_54()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11_45()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_12_44(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_14_42(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_15_37()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_37()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) + *(int *)(v0 + 304);
}

uint64_t OUTLINED_FUNCTION_20_36(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_23_38()
{
  return Column.mapNonNil<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_28_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, unint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v1 + 224);
  v3 = *(_QWORD *)(v1 + 232) + 1;
  *(_QWORD *)(v1 + 232) = v3;
  *(_QWORD *)(v1 + 240) = v0;
  return v2(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 16)+ ((*(unsigned __int8 *)(v1 + 280) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 280))+ *(_QWORD *)(v1 + 216) * v3, *(_QWORD *)(v1 + 176));
}

uint64_t OUTLINED_FUNCTION_30_33()
{
  return type metadata accessor for MLSoundClassifier();
}

uint64_t OUTLINED_FUNCTION_31_29(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_38_22()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_40_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v3[20];
  v4 = v3[21];
  v6 = v3[19];
  *(_QWORD *)(v0 + 16) = v1;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v0+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v2, v4, v6);
}

uint64_t OUTLINED_FUNCTION_41_23(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_42_21(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 168);
}

uint64_t OUTLINED_FUNCTION_43_21(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 168);
}

uint64_t OUTLINED_FUNCTION_48_21(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = result;
  return result;
}

uint64_t *OUTLINED_FUNCTION_52_16(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  return __swift_allocate_boxed_opaque_existential_0(v1);
}

uint64_t OUTLINED_FUNCTION_57_17(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_61_17()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_62_23(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_68_17@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  *v4 = a1;
  return type metadata accessor for MLClassifierMetrics.Contents(0);
}

uint64_t OUTLINED_FUNCTION_70_17()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_73_14()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_74_16()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 288) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_84_10()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_85_11@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_86_8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_91_8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[23] + 8))(v0[24], v0[22]);
}

uint64_t OUTLINED_FUNCTION_94_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_95_8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[23] + 8))(v0[24], v0[22]);
}

uint64_t OUTLINED_FUNCTION_96_8()
{
  return type metadata accessor for MLSoundClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_99_8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_105_3()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_107_5()
{
  return swift_dynamicCastMetatype();
}

void OUTLINED_FUNCTION_108_5(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

uint64_t OUTLINED_FUNCTION_109_7()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 232) + 28);
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_111_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_112_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_113_7()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 48) + 20);
}

uint64_t OUTLINED_FUNCTION_114_4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_115_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_116_5()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_128_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_130_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, a1 + v4, v3);
}

uint64_t OUTLINED_FUNCTION_131_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a13 + 8))(v13, v14);
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_134_1()
{
  return type metadata accessor for Date();
}

void OUTLINED_FUNCTION_137_2()
{
  uint64_t v0;
  uint64_t v1;

}

uint64_t OUTLINED_FUNCTION_145_2()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_146_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_157_1(uint64_t a1)
{
  uint64_t v1;

  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, v1, 19);
}

uint64_t OUTLINED_FUNCTION_160_0()
{
  return Column.mapNonNil<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_169_0()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_170_0()
{
  specialized blockAwait<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_171_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_180_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_183_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 128), a2);
}

uint64_t OUTLINED_FUNCTION_189_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_190_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_194_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 232) + 20);
}

uint64_t OUTLINED_FUNCTION_195_1()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_196_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of URL?(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_197_0()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_203_1()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_204_1()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_207_1()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_209_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_215_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_216_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 72), a2);
}

uint64_t OUTLINED_FUNCTION_218_1()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_219_1()
{
  return swift_release();
}

void OUTLINED_FUNCTION_225_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with copy of MLTrainingSessionParameters(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_227(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

unint64_t OUTLINED_FUNCTION_231_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_236()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_237()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_238_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_239()
{
  return swift_task_dealloc();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLSoundClassifier.Classifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v9 = (char *)&loc_21AF5FEDC + 4 * byte_21AFEF010[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v11 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
    *(uint64_t *)((char *)a1 + v11[5]) = *(uint64_t *)((char *)a2 + v11[5]);
    *(uint64_t *)((char *)a1 + v11[6]) = *(uint64_t *)((char *)a2 + v11[6]);
    v12 = v11[7];
    v13 = (char *)a1 + v12;
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 24);
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      (**(void (***)(void))(v15 - 8))();
    }
    else
    {
      v16 = v14[1];
      *(_OWORD *)v13 = *v14;
      *((_OWORD *)v13 + 1) = v16;
    }
    v17 = v11[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    *(uint64_t *)((char *)a1 + v11[9]) = *(uint64_t *)((char *)a2 + v11[9]);
    v20 = *(int *)(a3 + 20);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    else
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        break;
    }
  }
  v6 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  v7 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v8 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v8 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

_QWORD *initializeWithCopy for MLSoundClassifier.Classifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v8 = (char *)&loc_21AF603D0 + 4 * byte_21AFEF01A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)((char *)a1 + v9[5]) = *(_QWORD *)((char *)a2 + v9[5]);
  *(_QWORD *)((char *)a1 + v9[6]) = *(_QWORD *)((char *)a2 + v9[6]);
  v10 = v9[7];
  v11 = (char *)a1 + v10;
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (v13)
  {
    *((_QWORD *)v11 + 3) = v13;
    (**(void (***)(void))(v13 - 8))();
  }
  else
  {
    v14 = v12[1];
    *(_OWORD *)v11 = *v12;
    *((_OWORD *)v11 + 1) = v14;
  }
  v15 = v9[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v21 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v21 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v22 = __swift_instantiateConcreteTypeFromMangledName(v21);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLSoundClassifier.Classifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v8 = (char *)&loc_21AF60718 + 4 * byte_21AFEF01F[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)((char *)a1 + v9[5]) = *(_QWORD *)((char *)a2 + v9[5]);
  *(_QWORD *)((char *)a1 + v9[6]) = *(_QWORD *)((char *)a2 + v9[6]);
  v10 = v9[7];
  v11 = (uint64_t)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (*(_QWORD *)((char *)a1 + v10 + 24))
  {
    if (v13)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v11, v12);
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_0(v11);
  }
  else if (v13)
  {
    *(_QWORD *)(v11 + 24) = v13;
    (**(void (***)(uint64_t, char *))(v13 - 8))(v11, (char *)v12);
    goto LABEL_14;
  }
  v14 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v14;
LABEL_14:
  v15 = v9[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 20);
    v20 = (char *)a2 + v19;
    v21 = (char *)a1 + v19;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)a1 + v19, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    else
      v22 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v20, v23);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLSoundClassifier.Classifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    goto LABEL_10;
  }
  v7 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v9 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
    *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
    v11 = v10[20];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&a1[v16[5]] = *(_QWORD *)&a2[v16[5]];
  *(_QWORD *)&a1[v16[6]] = *(_QWORD *)&a2[v16[6]];
  v17 = v16[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = v16[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)&a1[v16[9]] = *(_QWORD *)&a2[v16[9]];
  v24 = *(int *)(a3 + 20);
  v25 = &a1[v24];
  v26 = &a2[v24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v27 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.Classifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    v7 = type metadata accessor for MLSoundClassifier.DataSource();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      v11 = v10[20];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_10;
      }
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&a1[v16[5]] = *(_QWORD *)&a2[v16[5]];
  *(_QWORD *)&a1[v16[6]] = *(_QWORD *)&a2[v16[6]];
  v17 = v16[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (*(_QWORD *)&a1[v17 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = v16[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)&a1[v16[9]] = *(_QWORD *)&a2[v16[9]];
  if (a1 != a2)
  {
    v24 = *(int *)(a3 + 20);
    v25 = &a2[v24];
    v26 = &a1[v24];
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&a1[v24], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    else
      v27 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.Classifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF60F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_0_26();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.Classifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF60FB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_0_26();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata accessor for MLSoundClassifier.Classifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLSoundClassifier.Classifier)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLSoundClassifier.Classifier()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void associated type witness table accessor for SupervisedEstimator.Transformer : Transformer in MLSoundClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Model);
}

void MLSoundClassifier.Classifier.init(labels:parameters:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;

  v16[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v18 = *(_QWORD *)(v5 - 8);
  v19 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v17 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v16 - v11;
  v20 = a3;
  outlined init with copy of MLSoundClassifier.ModelParameters(a2, a3);
  v13 = OUTLINED_FUNCTION_0_26();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a2 + *(int *)(v13 + 28), (uint64_t)v21, &demangling cache variable for type metadata for Any?);
  if (v22)
    swift_dynamicCast();
  else
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v21, &demangling cache variable for type metadata for Any?);
  lazy protocol witness table accessor for type Float and conformance Float();
  LogisticRegressionClassifier.Configuration.init()();
  LogisticRegressionClassifier.Configuration.maximumIterations.setter();
  OUTLINED_FUNCTION_21_36(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  v14 = v17;
  LogisticRegressionClassifier.init(labels:configuration:)();
  outlined destroy of MLHandActionClassifier.DataSource(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = OUTLINED_FUNCTION_131_1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v20 + *(int *)(v15 + 20), v14, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_9_5();
}

void MLSoundClassifier.Classifier.makeTransformer()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_14_43(v4, v23);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v26 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v25 = *(_QWORD *)(v27 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v24 = v11;
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = OUTLINED_FUNCTION_131_1();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1 + *(int *)(v19 + 20), v18, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_84_4() == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v9, v18, v5);
    OUTLINED_FUNCTION_41_24();
    FullyConnectedNetworkClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v9, v5);
    v20 = OUTLINED_FUNCTION_105_1();
    v21 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a1 + *(int *)(v20 + 20), v28, v30);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v1, v18, v13);
    OUTLINED_FUNCTION_41_24();
    LogisticRegressionClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v13);
    v22 = OUTLINED_FUNCTION_105_1();
    v21 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a1 + *(int *)(v22 + 20), v24, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLSoundClassifier.ModelParameters(v18, v21);
  OUTLINED_FUNCTION_9_5();
}

uint64_t MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_57(a1, a2, a3, a4, a5, a6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[12] = v8;
  v6[13] = *(_QWORD *)(v8 - 8);
  v6[14] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[15] = v9;
  v6[16] = *(_QWORD *)(v9 - 8);
  v6[17] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[18] = v10;
  v6[19] = *(_QWORD *)(v10 - 8);
  v6[20] = OUTLINED_FUNCTION_0();
  v6[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[22] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = v0[8];
  v2 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_63(v1 + *(int *)(v2 + 20), v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_84_4() == 1)
  {
    OUTLINED_FUNCTION_26(v0[13]);
    v4 = (_QWORD *)swift_task_alloc();
    v0[25] = v4;
    *v4 = v0;
    v4[1] = MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_59();
    return FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[19]);
    v6 = (_QWORD *)swift_task_alloc();
    v0[23] = v6;
    *v6 = v0;
    v6[1] = MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_59();
    return LogisticRegressionClassifier.fitted<A>(to:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_20_37();
  v1 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_114_2(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 80);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 104));
  OUTLINED_FUNCTION_20_37();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_21_36(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 104));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9[10] = v15;
  v9[11] = v8;
  v9[8] = a7;
  v9[9] = a8;
  v9[6] = a5;
  v9[7] = a6;
  v9[4] = a3;
  v9[5] = a4;
  v9[2] = a1;
  v9[3] = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v9[12] = v10;
  v9[13] = *(_QWORD *)(v10 - 8);
  v9[14] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v9[15] = v11;
  v9[16] = *(_QWORD *)(v11 - 8);
  v9[17] = OUTLINED_FUNCTION_0();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v9[18] = v12;
  v9[19] = *(_QWORD *)(v12 - 8);
  v9[20] = OUTLINED_FUNCTION_0();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v9[21] = v13;
  v9[22] = *(_QWORD *)(v13 - 8);
  v9[23] = OUTLINED_FUNCTION_0();
  v9[24] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v9[25] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = v0[11];
  v2 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_63(v1 + *(int *)(v2 + 20), v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_84_4() == 1)
  {
    OUTLINED_FUNCTION_26(v0[16]);
    v4 = (_QWORD *)swift_task_alloc();
    v0[28] = v4;
    *v4 = v0;
    v4[1] = MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_32();
    return FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[22]);
    v6 = (_QWORD *)swift_task_alloc();
    v0[26] = v6;
    *v6 = v0;
    v6[1] = MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_32();
    return LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 176));
  OUTLINED_FUNCTION_20_37();
  v1 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_114_2(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 104);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_20_37();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_21_36(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 176));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

void MLSoundClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_43(v8, v42);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v48 = *(_QWORD *)(v50 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_14(v10, v42);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v43 = *(_QWORD *)(v45 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_38_23(v12, v42);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v44 = *(_QWORD *)(v46 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  v23 = v2 + *(int *)(OUTLINED_FUNCTION_26_35() + 20);
  v24 = a1 + *(int *)(OUTLINED_FUNCTION_105_1() + 20);
  v25 = v4 + *(int *)(v21 + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v23, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v24, v25, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    OUTLINED_FUNCTION_57_18(EnumCaseMultiPayload, v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_99_8() == 1)
    {
      v28 = v47;
      v29 = v48;
      v30 = v50;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v47, v3, v50);
      v31 = v51;
      v32 = v49;
      v33 = v25;
      v34 = v52;
      OUTLINED_FUNCTION_44_13(v49, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
      SupervisedEstimator<>.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
LABEL_6:
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
      OUTLINED_FUNCTION_7();
      return;
    }
    OUTLINED_FUNCTION_53_21();
    v20 = v3;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)v20, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_99_8() != 1)
    {
      v35 = v44;
      v36 = (uint64_t)v20;
      v37 = v46;
      OUTLINED_FUNCTION_9_37(v16, v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32));
      v39 = v42;
      v38 = v43;
      v40 = v25;
      v41 = v45;
      OUTLINED_FUNCTION_44_13(v42, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
      LogisticRegressionClassifier.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v41);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v16, v37);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v46);
  OUTLINED_FUNCTION_21();
  __break(1u);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

void protocol witness for SupervisedEstimator.encode(_:to:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  MLSoundClassifier.Classifier.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedEstimator.decode(from:) in conformance MLSoundClassifier.Classifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MLSoundClassifier.Classifier.decode(from:)(a1, MEMORY[0x24BDC5ED0], MEMORY[0x24BDC5F90], a2);
}

void base witness table accessor for SupervisedEstimator in MLSoundClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
}

uint64_t MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_57(a1, a2, a3, a4, a5, a6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = OUTLINED_FUNCTION_16();
  v6[12] = OUTLINED_FUNCTION_25();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = OUTLINED_FUNCTION_16();
  v6[19] = OUTLINED_FUNCTION_25();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[20] = v10;
  v6[21] = *(_QWORD *)(v10 - 8);
  v6[22] = OUTLINED_FUNCTION_0();
  v6[23] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[24] = OUTLINED_FUNCTION_16();
  v6[25] = OUTLINED_FUNCTION_25();
  v6[26] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  v6[27] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v2 + *(int *)(OUTLINED_FUNCTION_131_1() + 20);
  v5 = *(int *)(OUTLINED_FUNCTION_105_1() + 20);
  *(_DWORD *)(v0 + 288) = v5;
  v6 = v3 + v5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_63(v6, v7, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *(_QWORD *)(v0 + 216);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = (_QWORD *)(v0 + 192);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, *(_QWORD *)(v0 + 192), &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    *(_QWORD *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *(_QWORD *)(v0 + 80);
      OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 112));
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      *(_QWORD *)(v0 + 264) = v12;
      OUTLINED_FUNCTION_46(v12);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 272) = v13;
      *v13 = v0;
      v13[1] = MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:);
      OUTLINED_FUNCTION_43(*(_QWORD *)(v0 + 96));
      return FullyConnectedNetworkClassifier.update<A>(_:with:eventHandler:)();
    }
    v15 = 104;
    v16 = 112;
    goto LABEL_7;
  }
  v10 = (_QWORD *)(v0 + 200);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, *(_QWORD *)(v0 + 200), &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  *(_QWORD *)(v0 + 224) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = 160;
    v16 = 168;
LABEL_7:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + v16) + 8))(*v10, *(_QWORD *)(v0 + v15));
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v17 = *(_QWORD *)(v0 + 136);
  OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 168));
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  *(_QWORD *)(v0 + 232) = v18;
  OUTLINED_FUNCTION_46(v18);
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v19;
  *v19 = v0;
  v19[1] = MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:);
  OUTLINED_FUNCTION_43(*(_QWORD *)(v0 + 152));
  return LogisticRegressionClassifier.update<A>(_:with:eventHandler:)();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 248) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(void);

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[29];
  v3 = v0[22];
  v4 = v0[19];
  v5 = v0[18];
  v6 = v0[27];
  v7 = v0[16];
  OUTLINED_FUNCTION_52_17();
  v8(v3);
  v9 = v2(v5, v4, v7);
  OUTLINED_FUNCTION_55(v9, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v2(v1, v5, v7);
  OUTLINED_FUNCTION_130_1();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v10);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 280) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(void);

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[33];
  v3 = v0[15];
  v4 = v0[12];
  v5 = v0[11];
  v6 = v0[9];
  v7 = v0[27];
  OUTLINED_FUNCTION_52_17();
  v8(v3);
  v9 = v2(v5, v4, v6);
  OUTLINED_FUNCTION_55(v9, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v2(v1, v5, v6);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v7, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v10);
}

void MLSoundClassifier.Classifier.encodeWithOptimizer(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_43(v8, v37);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v43 = *(_QWORD *)(v45 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_14(v10, v37);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v38 = *(_QWORD *)(v40 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_38_23(v12, v37);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v39 = *(_QWORD *)(v41 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v37 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  v20 = v2 + *(int *)(OUTLINED_FUNCTION_26_35() + 20);
  v21 = a1 + *(int *)(OUTLINED_FUNCTION_105_1() + 20);
  v22 = v4 + *(int *)(v18 + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, v22, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    OUTLINED_FUNCTION_57_18(EnumCaseMultiPayload, v24, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_60_19() == 1)
    {
      v25 = v42;
      v26 = v43;
      v27 = v45;
      OUTLINED_FUNCTION_9_37(v42, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
      v29 = v46;
      v28 = v47;
      v30 = v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v44, v22, v47);
      FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
LABEL_6:
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
      OUTLINED_FUNCTION_7();
      return;
    }
    OUTLINED_FUNCTION_53_21();
    v17 = (char *)v3;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)v17, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_60_19() != 1)
    {
      v31 = v39;
      v32 = (uint64_t)v17;
      v33 = v41;
      OUTLINED_FUNCTION_44_13(v2, v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32));
      v34 = v37;
      v35 = v38;
      v36 = v40;
      OUTLINED_FUNCTION_9_37(v37, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
      LogisticRegressionClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v2, v33);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v41);
  OUTLINED_FUNCTION_21();
  __break(1u);
}

void MLSoundClassifier.Classifier.decode(from:)(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;

  v58 = a2;
  v59 = a3;
  v60 = a1;
  v50 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v57 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_14(v10, v43);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v53 = v13;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v44 = v15;
  MEMORY[0x24BDAC7A8](v16);
  v47 = (char *)&v43 - v17;
  type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v52 = (char *)v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v43 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_49();
  v30 = v29 - v28;
  v31 = type metadata accessor for MLSoundClassifier.Classifier();
  v32 = v4;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + *(int *)(v31 + 20), v30, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v26, v30, v23);
    outlined init with copy of MLSoundClassifier.ModelParameters(v4, (uint64_t)v22);
    v38 = v53;
    v39 = v61;
    v58(v60, v23);
    if (v39)
    {
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v40 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v47, v38, v46);
    goto LABEL_9;
  }
  v33 = v54;
  v34 = v55;
  v35 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v54, v30, v56);
  v22 = v52;
  outlined init with copy of MLSoundClassifier.ModelParameters(v32, (uint64_t)v52);
  v36 = v57;
  v37 = v61;
  v59(v60, v35);
  if (!v37)
  {
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    v40 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v44, v36, v49);
LABEL_9:
    swift_storeEnumTagMultiPayload();
    v41 = v50;
    outlined init with take of MLSoundClassifier.ModelParameters((uint64_t)v22, v50);
    v42 = OUTLINED_FUNCTION_105_1();
    outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v40, v41 + *(int *)(v42 + 20));
    goto LABEL_10;
  }
  outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
LABEL_10:
  OUTLINED_FUNCTION_7();
}

uint64_t protocol witness for UpdatableSupervisedEstimator.update<A>(_:with:eventHandler:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for UpdatableSupervisedEstimator.encodeWithOptimizer(_:to:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  MLSoundClassifier.Classifier.encodeWithOptimizer(_:to:)(a1, a2);
}

void protocol witness for UpdatableSupervisedEstimator.decodeWithOptimizer(from:) in conformance MLSoundClassifier.Classifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MLSoundClassifier.Classifier.decode(from:)(a1, MEMORY[0x24BDC5EC0], MEMORY[0x24BDC5F80], a2);
}

uint64_t outlined init with copy of MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.ModelParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.ModelParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_14_43(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_20_37()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of MLSoundClassifier.ModelParameters(v0, v1);
}

uint64_t OUTLINED_FUNCTION_21_36@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_26_35()
{
  return type metadata accessor for MLSoundClassifier.Classifier();
}

void OUTLINED_FUNCTION_38_23(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_41_24()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of MLSoundClassifier.ModelParameters(v0, *(_QWORD *)(v1 - 96));
}

void OUTLINED_FUNCTION_53_21()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 160) = *(_QWORD *)(v0 - 128);
  *(_QWORD *)(v0 - 144) = *(_QWORD *)(v0 - 112);
}

void OUTLINED_FUNCTION_57_18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_60_19()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MLHandActionClassifier.VideoAugmentationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static MLHandActionClassifier.VideoAugmentationOptions.horizontallyFlip.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandActionClassifier.VideoAugmentationOptions.rotate.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandActionClassifier.VideoAugmentationOptions.translate.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandActionClassifier.VideoAugmentationOptions.scale.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandActionClassifier.VideoAugmentationOptions.interpolateFrames.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandActionClassifier.VideoAugmentationOptions.dropFrames.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.VideoAugmentationOptions, &type metadata for MLHandActionClassifier.VideoAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.VideoAugmentationOptions, &type metadata for MLHandActionClassifier.VideoAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.VideoAugmentationOptions, &type metadata for MLHandActionClassifier.VideoAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.VideoAugmentationOptions, &type metadata for MLHandActionClassifier.VideoAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  lazy protocol witness table accessor for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet.union(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet.intersection(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet.symmetricDifference(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(uint64_t a1, _QWORD *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(_QWORD *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)(*a1, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MLHandActionClassifier.VideoAugmentationOptions.rawValue.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.VideoAugmentationOptions()
{
  return &type metadata for MLHandActionClassifier.VideoAugmentationOptions;
}

void MLHandActionClassifier.DataSource.videosWithAnnotations()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_8_1();
  v20 = v1;
  v18 = OUTLINED_FUNCTION_93();
  v19 = *(_QWORD *)(v18 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v3);
  v16[5] = (char *)v16 - v4;
  v17 = OUTLINED_FUNCTION_76_10();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  v22 = OUTLINED_FUNCTION_78();
  v21 = *(_QWORD *)(v22 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_35_24();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLHandActionClassifier.DataSource(v0, v14 - v13);
  v15 = (char *)&loc_21AF635E4 + *((int *)qword_21AF640B8 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AF635F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  void *v34;
  unsigned __int8 v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v4 = v0 + v3[12];
  v5 = (uint64_t *)(v0 + v3[16]);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v2 - 344) = v7;
  *(_QWORD *)(v2 - 328) = v6;
  v8 = (_QWORD *)(v0 + v3[20]);
  v9 = v8[1];
  *(_QWORD *)(v2 - 360) = *v8;
  v10 = (uint64_t *)(v0 + v3[24]);
  v12 = *v10;
  v11 = v10[1];
  *(_QWORD *)(v2 - 376) = v12;
  *(_QWORD *)(v2 - 336) = v11;
  v13 = (_QWORD *)(v0 + v3[28]);
  v14 = v13[1];
  *(_QWORD *)(v2 - 392) = *v13;
  v15 = *(_QWORD *)(v2 - 312);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v17 = *(_QWORD *)(v2 - 352);
  v18 = *(_QWORD *)(v2 - 304);
  v16(v17, v0, v18);
  v19 = *(_QWORD *)(v2 - 368);
  v16(v19, v4, v18);
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v19, v18);
  *(_BYTE *)(v2 - 128) = 1;
  *(_BYTE *)(v2 - 288) = 1;
  *(_DWORD *)(v2 - 287) = *(_DWORD *)(v2 - 111);
  *(_DWORD *)(v2 - 284) = *(_DWORD *)(v2 - 108);
  *(_QWORD *)(v2 - 280) = 44;
  *(_QWORD *)(v2 - 272) = 0xE100000000000000;
  *(_QWORD *)(v2 - 264) = 0;
  *(_QWORD *)(v2 - 256) = 0xE000000000000000;
  *(_QWORD *)(v2 - 248) = 92;
  *(_QWORD *)(v2 - 240) = 0xE100000000000000;
  *(_BYTE *)(v2 - 232) = 1;
  *(_DWORD *)(v2 - 231) = *(_DWORD *)(v2 - 118);
  *(_DWORD *)(v2 - 228) = *(_DWORD *)(v2 - 115);
  *(_QWORD *)(v2 - 224) = 34;
  *(_QWORD *)(v2 - 216) = 0xE100000000000000;
  *(_BYTE *)(v2 - 208) = 1;
  *(_DWORD *)(v2 - 207) = *(_DWORD *)(v2 - 125);
  *(_DWORD *)(v2 - 204) = *(_DWORD *)(v2 - 122);
  *(_QWORD *)(v2 - 200) = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  *(_QWORD *)(v2 - 192) = 10;
  *(_QWORD *)(v2 - 184) = 0xE100000000000000;
  *(_QWORD *)(v2 - 176) = 0;
  *(_QWORD *)(v2 - 168) = 0;
  *(_BYTE *)(v2 - 160) = *(_BYTE *)(v2 - 128);
  *(_DWORD *)(v2 - 159) = *(_DWORD *)(v2 - 135);
  *(_DWORD *)(v2 - 156) = *(_DWORD *)(v2 - 132);
  *(_QWORD *)(v2 - 152) = 0;
  v21 = *(_QWORD *)(v2 - 72);
  MLDataTable.init(contentsOf:options:)(v1, (const void *)(v2 - 288), v2 - 144);
  if (v21)
  {
    OUTLINED_FUNCTION_7_28(v19);
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_7_28(v17);
  }
  else
  {
    *(_QWORD *)(v2 - 400) = v9;
    v22 = *(_QWORD *)(v2 - 336);
    v23 = v14;
    *(_QWORD *)(v2 - 72) = 0;
    v24 = *(_QWORD *)(v2 - 144);
    v25 = *(_BYTE *)(v2 - 136);
    *(_QWORD *)(v2 - 104) = v24;
    *(_BYTE *)(v2 - 96) = v25;
    *(_QWORD *)(v2 - 144) = v24;
    *(_BYTE *)(v2 - 136) = v25;
    v26 = *(_QWORD *)(v2 - 344);
    v27 = *(void **)(v2 - 328);
    MLDataTable.subscript.getter(v26, v27, v2 - 288);
    v28 = *(void **)(v2 - 288);
    v29 = (void *)*(unsigned __int8 *)(v2 - 280);
    if ((v29 & 1) != 0
      || (OUTLINED_FUNCTION_68_10(),
          _UntypedColumn.type.getter((_BYTE *)(v2 - 144)),
          OUTLINED_FUNCTION_80_11(),
          *(_BYTE *)(v2 - 144) != 2))
    {
      outlined consume of Result<_DataTable, Error>(v28, (char)v29);
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_10_3();
      *(_QWORD *)(v2 - 288) = 0;
      *(_QWORD *)(v2 - 280) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      OUTLINED_FUNCTION_50_9();
      *(_QWORD *)(v2 - 288) = 0x206E6D756C6F43;
      *(_QWORD *)(v2 - 280) = 0xE700000000000000;
      v37._countAndFlagsBits = OUTLINED_FUNCTION_50_23();
      String.append(_:)(v37);
      OUTLINED_FUNCTION_106_0();
      v38._object = (void *)0x800000021AFF50A0;
      v38._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v38);
      OUTLINED_FUNCTION_103_6();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v39 = v29;
      *(_QWORD *)(v39 + 8) = v2 - 288;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_BYTE *)(v39 + 48) = 0;
      swift_willThrow(0.0);
      OUTLINED_FUNCTION_7_28(v20);
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 352));
      OUTLINED_FUNCTION_110_3();
    }
    else
    {
      OUTLINED_FUNCTION_68_10();
      v30 = (unint64_t)v28;
      _UntypedColumn.valueAtIndex(index:)(0, v2 - 288);
      OUTLINED_FUNCTION_103_6();
      v31 = *(unsigned __int8 *)(v2 - 272);
      if (v31 != 2)
      {
        outlined consume of MLDataValue(v29, v28, v31);
        v29 = 0;
        v30 = 0xE000000000000000;
      }
      OUTLINED_FUNCTION_80_11();
      *(_QWORD *)(v2 - 288) = v29;
      *(_QWORD *)(v2 - 280) = v30;
      String.init<A>(_:)();
      URL.init(fileURLWithPath:)();
      OUTLINED_FUNCTION_123();
      v32 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v33 = URL.path.getter();
      v34 = (void *)MEMORY[0x22075A8AC](v33);
      OUTLINED_FUNCTION_30();
      v35 = objc_msgSend(v32, sel_fileExistsAtPath_, v34);

      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v2 - 368);
      }
      else
      {
        OUTLINED_FUNCTION_68_10();
        v40 = specialized Array<A>.init(_:)(v28, 0);
        MEMORY[0x24BDAC7A8](v40);
        v51 = *(_QWORD *)(v2 - 352);
        v41 = *(_QWORD *)(v2 - 72);
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:), (uint64_t)&v50, v40);
        v43 = v42;
        *(_QWORD *)(v2 - 72) = v41;
        v44 = OUTLINED_FUNCTION_123();
        *(_QWORD *)(v2 - 288) = v43;
        MEMORY[0x24BDAC7A8](v44);
        v51 = v2 - 288;
        ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        v47 = v46 & 1;
        OUTLINED_FUNCTION_50_9();
        OUTLINED_FUNCTION_113_0();
        MLDataTable.willMutate()();
        *(_QWORD *)(v2 - 288) = ML14_UntypedColumnC_s5Error_pTgm5;
        *(_BYTE *)(v2 - 280) = v47;
        MLDataTable.setColumnImpl(newColumn:named:)(v2 - 288);
        OUTLINED_FUNCTION_106_0();
        OUTLINED_FUNCTION_109_5(ML14_UntypedColumnC_s5Error_pTgm5);
        v36 = *(_QWORD *)(v2 - 368);
        if ((*(_BYTE *)(v2 - 96) & 1) == 0)
        {
          v48 = *(void **)(v2 - 104);
          outlined copy of Result<_DataTable, Error>(v48, 0);
          _DataTable.columnNamesDidChange()();
          outlined consume of Result<_DataTable, Error>(v48, 0);
        }
      }
      v51 = v23;
      v49 = *(_QWORD *)(v2 - 72);
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v2 - 104, v26, (uint64_t)v27, *(_QWORD *)(v2 - 360), *(_QWORD *)(v2 - 400), *(_QWORD *)(v2 - 376), v22, *(_QWORD *)(v2 - 392), v23);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_22_36();
      OUTLINED_FUNCTION_41_19(v36);
      OUTLINED_FUNCTION_41_19(*(_QWORD *)(v2 - 352));
      if (v49)
        OUTLINED_FUNCTION_110_3();
      else
        OUTLINED_FUNCTION_64_14();
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t type metadata accessor for MLHandActionClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandActionClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLHandActionClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a2;
  v36 = a3;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v34 = *(_QWORD *)(v39 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  v9 = v7 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v33 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v40 = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12C8]);
  v37 = v12;
  OUTLINED_FUNCTION_71_6();
  OUTLINED_FUNCTION_39_23();
  v40 = v13;
  v38 = v9;
  OUTLINED_FUNCTION_39_23();
  swift_bridgeObjectRetain_n();
  v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_10_3();
  v40 = v14;
  specialized MutableCollection<>.sort(by:)(&v40);
  OUTLINED_FUNCTION_10_3();
  v36 = *(_QWORD *)(v40 + 16);
  if (v36)
  {
    v33[0] = v40;
    v33[1] = a4;
    v15 = 0;
    v35 = v40 + 32;
    do
    {
      v16 = (uint64_t *)(v35 + 16 * v15);
      v18 = *v16;
      v17 = v16[1];
      v19 = *(_QWORD *)(a1 + 16);
      OUTLINED_FUNCTION_84();
      if (v19)
      {
        OUTLINED_FUNCTION_84();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
        v21 = MEMORY[0x24BEE4AF8];
        if ((v22 & 1) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v20);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v21 = MEMORY[0x24BEE4AF8];
      }
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
      {
        v24 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v25 = (uint64_t)v24;
        v24[2] = v23;
        v24[4] = v18;
        v24[5] = v17;
        if (v23 != 1)
        {
          v24[6] = v18;
          v24[7] = v17;
          v26 = v23 - 2;
          if (v26)
          {
            v27 = v24 + 9;
            do
            {
              *(v27 - 1) = v18;
              *v27 = v17;
              OUTLINED_FUNCTION_84();
              v27 += 2;
              --v26;
            }
            while (v26);
          }
          OUTLINED_FUNCTION_84();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v25 = MEMORY[0x24BEE4AF8];
      }
      ++v15;
      v40 = v25;
      Column.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      v40 = v21;
      Column.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
    }
    while (v15 != v36);
  }
  OUTLINED_FUNCTION_10_3();
  swift_release();
  DataFrame.init()();
  v28 = v37;
  DataFrame.append<A>(column:)();
  v29 = v38;
  DataFrame.append<A>(column:)();
  v30 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v31 = v39;
  v30(v29, v39);
  return ((uint64_t (*)(char *, uint64_t))v30)(v28, v31);
}

void MLHandActionClassifier.DataSource.extractKeypoints(targetFrameRate:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int EnumTagSinglePayload;
  char *v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  Swift::String v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  char v110;

  v3 = v1;
  v105 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Data>);
  v97 = *(_QWORD *)(v4 - 8);
  v98 = v4;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v99 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v101 = *(_QWORD *)(v7 - 8);
  v102 = v7;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v103 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v100 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v104 = (uint64_t)&v86 - v13;
  v14 = OUTLINED_FUNCTION_56_6();
  v106 = *(_QWORD *)(v14 - 8);
  v107 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_50();
  v18 = v16 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v86 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v86 - v23;
  v25 = OUTLINED_FUNCTION_93();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_64();
  v28 = v27;
  OUTLINED_FUNCTION_35_24();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_49();
  v32 = v31 - v30;
  outlined init with copy of MLHandActionClassifier.DataSource(v3, v31 - v30);
  OUTLINED_FUNCTION_67_18();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v87 = v21;
    v88 = v18;
    v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v43 = (uint64_t *)(v32 + v42[12]);
    v45 = *v43;
    v44 = v43[1];
    v92 = v45;
    v93 = v44;
    v46 = (uint64_t *)(v32 + v42[16]);
    v48 = *v46;
    v47 = v46[1];
    v91 = v48;
    v95 = v26;
    v96 = v47;
    v49 = (uint64_t *)(v32 + v42[20]);
    v50 = v106;
    v51 = v24;
    v52 = *v49;
    v53 = (void *)v49[1];
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    v55 = v28;
    v94 = v25;
    v89 = v54;
    v54(v28, v32, v25);
    v56 = OUTLINED_FUNCTION_50_23();
    MEMORY[0x220758A1C](v56);
    v57 = AnyColumn.wrappedElementType.getter();
    v58 = v50;
    v59 = *(void (**)(char *, uint64_t))(v50 + 8);
    v60 = v107;
    OUTLINED_FUNCTION_62_24();
    if (v57 == MEMORY[0x24BEE0D00])
    {
      v86 = v51;
      v66 = v60;
      v65 = v103;
      v90 = v52;
      v99 = v53;
      v100 = v55;
      OUTLINED_FUNCTION_45_25();
      v67 = v104;
      v68 = v108;
      Column<A>.parseAsJSONArrays()(v104);
      if (v68)
      {

        OUTLINED_FUNCTION_53_22();
        OUTLINED_FUNCTION_154(v67, 1);
      }
      else
      {
        v108 = 0;
        OUTLINED_FUNCTION_53_22();
        OUTLINED_FUNCTION_154(v67, 0);
        if (__swift_getEnumTagSinglePayload(v67, 1, v66) != 1)
        {
          v76 = v87;
          (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v87, v67, v66);
          v77 = OUTLINED_FUNCTION_65_18();
          v78(v77, v76, v66);
          v53 = v99;
          OUTLINED_FUNCTION_113_0();
          v79 = OUTLINED_FUNCTION_46_21();
          v55 = v100;
          MEMORY[0x220758A28](v79);
          v59(v76, v66);
          v63 = v94;
          v64 = v93;
          goto LABEL_23;
        }
      }
      v63 = v94;
      v53 = v99;
      v55 = v100;
      v64 = v93;
      v65 = v90;
      outlined destroy of AnyColumn?(v67);
    }
    else
    {
      v61 = OUTLINED_FUNCTION_50_23();
      MEMORY[0x220758A1C](v61);
      v62 = AnyColumn.wrappedElementType.getter();
      OUTLINED_FUNCTION_62_24();
      if (v62 == MEMORY[0x24BDCDDE8])
      {
        v86 = v51;
        v90 = v52;
        OUTLINED_FUNCTION_45_25();
        v69 = v100;
        v70 = v108;
        Column<A>.parseAsJSONArrays()(v100);
        if (v70)
        {

          OUTLINED_FUNCTION_51_24();
          __swift_storeEnumTagSinglePayload(v69, 1, 1, v107);
          v64 = v93;
          v63 = v94;
        }
        else
        {
          OUTLINED_FUNCTION_51_24();
          OUTLINED_FUNCTION_173_0();
          v71 = v107;
          OUTLINED_FUNCTION_69_12(v72, v73, v74);
          v65 = v71;
          EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v69, 1, v71);
          v64 = v93;
          if (EnumTagSinglePayload != 1)
          {
            OUTLINED_FUNCTION_216(v88, v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
            v80 = OUTLINED_FUNCTION_65_18();
            v81 = v88;
            OUTLINED_FUNCTION_216(v80, v88, v82);
            OUTLINED_FUNCTION_113_0();
            v83 = OUTLINED_FUNCTION_46_21();
            MEMORY[0x220758A28](v83);
            v59((char *)v81, v65);
            v63 = v94;
            goto LABEL_23;
          }
          v63 = v94;
        }
        outlined destroy of AnyColumn?(v69);
        v65 = v90;
      }
      else
      {
        v63 = v94;
        v64 = v93;
        v65 = v52;
      }
    }
LABEL_23:
    v84._countAndFlagsBits = v65;
    v84._object = v53;
    DataFrame.flattenNestedArrays(in:shape:)(v84, (Swift::OpaquePointer)&outlined read-only object #0 of MLHandActionClassifier.DataSource.extractKeypoints(targetFrameRate:));
    if (v85)
    {
      OUTLINED_FUNCTION_47_25();
    }
    else
    {
      static _VideoUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(v55, v92, v64, v65, (uint64_t)v53, v91, v96);
      v89(v105, v55, v63);
    }
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (EnumCaseMultiPayload == 3)
  {
    v34 = *(_BYTE *)(v32 + 8);
    v36 = *(_QWORD *)(v32 + 16);
    v35 = *(_QWORD *)(v32 + 24);
    v38 = *(_QWORD *)(v32 + 32);
    v37 = *(_QWORD *)(v32 + 40);
    v40 = *(_QWORD *)(v32 + 48);
    v39 = *(void **)(v32 + 56);
    v109 = *(_QWORD *)v32;
    v110 = v34;
    v41 = v108;
    static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v109, v40, v39);
    if (!v41)
    {
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v109, v36, v35, v40, (uint64_t)v39, v38, v37);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_20_38();
      goto LABEL_28;
    }
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_101();
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  type metadata accessor for MLHandActionClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_37_18(v3, &v109);
  if (!v2)
    OUTLINED_FUNCTION_20_38();
  outlined destroy of MLHandActionClassifier.DataSource(v32);
LABEL_28:
  OUTLINED_FUNCTION_117_0();
}

void MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  int *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD v86[2];
  void *v87;
  char v88;

  v82 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v78 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v79 = v9;
  v10 = OUTLINED_FUNCTION_56_6();
  v11 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  v84 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v67 - v14;
  v16 = OUTLINED_FUNCTION_93();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_50();
  v20 = v18 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v67 - v22;
  OUTLINED_FUNCTION_35_24();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_16_40(v25, v67);
  v26 = OUTLINED_FUNCTION_71_12();
  if (v26 == 5)
  {
    v69 = v3;
    v73 = v20;
    v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v36 = (uint64_t *)(v4 + v35[12]);
    v38 = *v36;
    v37 = v36[1];
    v39 = (uint64_t *)(v4 + v35[16]);
    v41 = *v39;
    v40 = v39[1];
    v70 = v41;
    v74 = v37;
    v75 = v40;
    v42 = (uint64_t *)(v4 + v35[20]);
    v44 = *v42;
    v43 = (void *)v42[1];
    v76 = v17;
    v77 = v16;
    v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
    v46 = v43;
    OUTLINED_FUNCTION_9_37((uint64_t)v23, v4, v45);
    MEMORY[0x220758A1C](v44, v46);
    v47 = AnyColumn.wrappedElementType.getter();
    v48 = v83;
    OUTLINED_FUNCTION_68_18();
    v71 = v38;
    v72 = v44;
    if (v47 != MEMORY[0x24BEE0D00])
    {
      v49 = v85;
LABEL_8:
      v50 = v76;
      v52 = v74;
      v51 = v75;
      v53 = v73;
LABEL_16:
      OUTLINED_FUNCTION_216(v53, (uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)v86);
      if (!v49)
      {
        OUTLINED_FUNCTION_81_15();
        v59 = v72;
        static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v87, v72, v46);
        static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v87, v71, v52, v59, (uint64_t)v46, v70, v51);
        OUTLINED_FUNCTION_17_30();
        OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_10_3();
        OUTLINED_FUNCTION_60_0();
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_17_30();
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_80();
      goto LABEL_21;
    }
    v68 = v15;
    DataFrame.subscript.getter();
    v54 = v79;
    v55 = v85;
    Column<A>.parseAsJSONArrays()(v79);
    v49 = v55;
    if (v55)
    {

      OUTLINED_FUNCTION_57_19();
      OUTLINED_FUNCTION_69_12(v54, 1, 1);
      v49 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_57_19();
      OUTLINED_FUNCTION_173_0();
      OUTLINED_FUNCTION_69_12(v56, v57, v58);
      if (__swift_getEnumTagSinglePayload(v54, 1, v48) != 1)
      {
        v60 = v84;
        v61 = v69;
        v62 = OUTLINED_FUNCTION_71_6();
        OUTLINED_FUNCTION_9_37(v62, v63, v64);
        v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
        v66 = (uint64_t)v68;
        OUTLINED_FUNCTION_9_37((uint64_t)v68, v61, v65);
        swift_bridgeObjectRetain();
        MEMORY[0x220758A28](v66, v72, v46);
        OUTLINED_FUNCTION_68_18();
        goto LABEL_8;
      }
    }
    v50 = v76;
    v52 = v74;
    v51 = v75;
    v53 = v73;
    outlined destroy of AnyColumn?(v54);
    goto LABEL_16;
  }
  if (v26 == 3)
  {
    v27 = *(void **)v4;
    v28 = *(_BYTE *)(v4 + 8);
    v30 = *(_QWORD *)(v4 + 16);
    v29 = *(_QWORD *)(v4 + 24);
    v31 = *(_QWORD *)(v4 + 40);
    v84 = *(_QWORD *)(v4 + 32);
    v33 = *(_QWORD *)(v4 + 48);
    v32 = *(void **)(v4 + 56);
    v87 = v27;
    v88 = v28;
    outlined copy of Result<_DataTable, Error>(v27, v28);
    v34 = v85;
    static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v87, v33, v32);
    if (!v34)
    {
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v87, v30, v29, v33, (uint64_t)v32, v84, v31);
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_12_0();
      outlined consume of Result<_DataTable, Error>(v27, v28);
LABEL_20:
      OUTLINED_FUNCTION_64_14();
      goto LABEL_21;
    }
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_12_0();
    outlined consume of Result<_DataTable, Error>(v27, v28);
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    OUTLINED_FUNCTION_37_18(v1, v86);
    if (!v2)
    {
      OUTLINED_FUNCTION_81_15();
      OUTLINED_FUNCTION_70_18();
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_70_18();
  }
LABEL_21:
  OUTLINED_FUNCTION_117_0();
}

void MLHandActionClassifier.DataSource.labeledMedia()()
{
  uint64_t v0;

  static _VideoUtilities.videoURLsPerClass(from:)(v0);
}

void MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_8_1();
  v21 = v1;
  v22 = OUTLINED_FUNCTION_93();
  v19 = *(_QWORD *)(v22 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_208();
  v17[4] = v3;
  MEMORY[0x24BDAC7A8](v4);
  v17[3] = (char *)v17 - v5;
  v6 = OUTLINED_FUNCTION_76_10();
  v17[5] = *(_QWORD *)(v6 - 8);
  v17[6] = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v8);
  v18 = OUTLINED_FUNCTION_78();
  v20 = *(_QWORD *)(v18 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_35_24();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLHandActionClassifier.DataSource(v0, v15 - v14);
  v16 = (char *)sub_21AF65070 + 4 * byte_21AFEF2F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF65070()
{
  uint64_t v0;
  void (*v1)(char *, char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(void (*)(char *, char *, uint64_t), uint64_t);

  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  *(_QWORD *)(v3 - 152) = v0 + v4[12];
  v5 = (uint64_t *)(v0 + v4[16]);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v3 - 104) = v7;
  *(_QWORD *)(v3 - 160) = v6;
  v8 = (_QWORD *)(v0 + v4[20]);
  v9 = v8[1];
  *(_QWORD *)(v3 - 128) = *v8;
  v10 = (_QWORD *)(v0 + v4[24]);
  v11 = v10[1];
  *(_QWORD *)(v3 - 144) = *v10;
  v12 = (uint64_t *)(v0 + v4[28]);
  v14 = *v12;
  v13 = (void *)v12[1];
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 32);
  v16 = *(_QWORD *)(v3 - 136);
  v15(v2, v0, v16);
  v15((uint64_t)v1, *(_QWORD *)(v3 - 152), v16);
  MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v2, v1, *(_QWORD *)(v3 - 104), *(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 128), v9, *(_QWORD *)(v3 - 144), v11, *(_QWORD *)(v3 - 112), v14, v13);
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_106_0();
  OUTLINED_FUNCTION_12_0();
  v17 = *(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(*(_QWORD *)(v3 - 120) + 8);
  v17(v1, v16);
  v17((void (*)(char *, char *, uint64_t))v2, v16);
  OUTLINED_FUNCTION_7();
}

uint64_t MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(unint64_t, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(unint64_t, uint64_t, uint64_t);
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  unint64_t v133;

  v131 = a2;
  v109 = a1;
  v97 = a9;
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v106 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v116 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for CSVType();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v103 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CSVReadingOptions();
  MEMORY[0x24BDAC7A8](v20);
  v102 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CSVType?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for JSONReadingOptions();
  MEMORY[0x24BDAC7A8](v25);
  v115 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for URL();
  v118 = *(_QWORD *)(v27 - 8);
  v119 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v101 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v114 = (char *)&v97 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JSONType?);
  MEMORY[0x24BDAC7A8](v31);
  v112 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DataFrame();
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v100 = (char *)&v97 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v113 = (char *)&v97 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v129 = (char *)&v97 - v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v38 = swift_allocObject();
  v117 = xmmword_21AFE7F70;
  *(_OWORD *)(v38 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v38 + 32) = a3;
  *(_QWORD *)(v38 + 40) = a4;
  v127 = a5;
  *(_QWORD *)(v38 + 48) = a5;
  *(_QWORD *)(v38 + 56) = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a8)
  {
    swift_bridgeObjectRetain();
    v39 = 3;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v38 = (uint64_t)v40;
    v40[2] = 3;
    v40[8] = a7;
    v40[9] = a8;
  }
  else
  {
    v39 = 2;
  }
  v122 = a7;
  v130 = a10;
  if (a11)
  {
    v41 = v38;
    v42 = *(_QWORD *)(v38 + 24);
    swift_bridgeObjectRetain();
    if (v39 >= v42 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v41 = v96;
    }
    *(_QWORD *)(v41 + 16) = v39 + 1;
    v124 = v41;
    v43 = v41 + 16 * v39;
    *(_QWORD *)(v43 + 32) = v130;
    *(_QWORD *)(v43 + 40) = a11;
  }
  else
  {
    v124 = v38;
  }
  v125 = a11;
  v126 = a4;
  v123 = a8;
  v45 = URL.pathExtension.getter() == 1852797802 && v44 == 0xE400000000000000;
  v128 = a6;
  v121 = a3;
  if (v45)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>);
    v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
    v70 = *(_QWORD *)(v69 - 8);
    v71 = *(_QWORD *)(v70 + 72);
    v72 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = v117;
    v74 = (_QWORD *)(v73 + v72);
    v75 = v73 + v72 + *(int *)(v69 + 48);
    *v74 = a3;
    v74[1] = v126;
    v76 = *MEMORY[0x24BDF6000];
    v77 = type metadata accessor for JSONType();
    v78 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 104);
    v78(v75, v76, v77);
    v79 = (_QWORD *)((char *)v74 + v71);
    v80 = (char *)v74 + v71 + *(int *)(v69 + 48);
    v81 = v128;
    *v79 = v127;
    v79[1] = v81;
    v78((unint64_t)v80, v76, v77);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v132 = Dictionary.init(dictionaryLiteral:)();
    v82 = (unsigned int *)MEMORY[0x24BDF5FF8];
    v62 = v123;
    v83 = (uint64_t)v112;
    if (v123)
    {
      v78((unint64_t)v112, *MEMORY[0x24BDF5FF8], v77);
      __swift_storeEnumTagSinglePayload(v83, 0, 1, v77);
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter(v83, v122, v62);
    }
    v84 = (uint64_t)v125;
    v68 = v116;
    v85 = v113;
    if (v125)
    {
      v78(v83, *v82, v77);
      __swift_storeEnumTagSinglePayload(v83, 0, 1, v77);
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter(v83, v130, v84);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v118 + 16))(v114, v131, v119);
    swift_bridgeObjectRetain();
    JSONReadingOptions.init()();
    v86 = v120;
    DataFrame.init(contentsOfJSONFile:columns:types:options:)();
    v67 = v121;
    if (!v86)
    {
      v131 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
      v131(v129, v85, v111);
      goto LABEL_28;
    }
    return swift_bridgeObjectRelease();
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
    goto LABEL_21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(_QWORD *)(v48 + 72);
  v50 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = v117;
  v52 = (_QWORD *)(v51 + v50);
  v53 = v51 + v50 + *(int *)(v47 + 48);
  *v52 = a3;
  v52[1] = v126;
  v54 = *MEMORY[0x24BDF5FC0];
  v55 = *(void (**)(unint64_t, uint64_t, uint64_t))(v98 + 104);
  v56 = v99;
  v55(v53, v54, v99);
  v57 = (_QWORD *)((char *)v52 + v49);
  v58 = v56;
  v59 = (char *)v57 + *(int *)(v47 + 48);
  v60 = v128;
  *v57 = v127;
  v57[1] = v60;
  v55((unint64_t)v59, v54, v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v132 = Dictionary.init(dictionaryLiteral:)();
  v61 = *MEMORY[0x24BDF5FB8];
  v62 = v123;
  if (v123)
  {
    v55((unint64_t)v24, *MEMORY[0x24BDF5FB8], v58);
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v58);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v122, v62);
  }
  v63 = (uint64_t)v125;
  if (v125)
  {
    v55((unint64_t)v24, v61, v58);
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v58);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v130, v63);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v118 + 16))(v101, v131, v119);
  v131 = (void (*)(char *, char *, uint64_t))v132;
  swift_bridgeObjectRetain();
  default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  v119 = v64;
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  v55((unint64_t)v103, v61, v58);
  CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  v65 = v100;
  v66 = v120;
  DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
  v67 = v121;
  if (v66)
    return swift_bridgeObjectRelease();
  v131 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
  v131(v129, v65, v111);
  v68 = v116;
LABEL_28:
  v88 = v106;
  v89 = v126;
  DataFrame.subscript.getter();
  v132 = 0;
  v133 = 0xE000000000000000;
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
  v90 = v108;
  OptionalColumnProtocol.filled(with:)();
  v91 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v88, v90);
  MEMORY[0x24BDAC7A8](v91);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DataFrame.subscript.setter();
  v92 = v129;
  static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((int)v129, v67, v89, v127, v128, v122, v62, v130, v125);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v68, v105);
  v93 = v92;
  v94 = v97;
  v95 = v111;
  v131((char *)v97, v93, v111);
  return __swift_storeEnumTagSinglePayload(v94, 0, 1, v95);
}

uint64_t closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t *v27;

  v26 = a2;
  v27 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v25 - v17;
  v25[1] = *a1;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v10, *MEMORY[0x24BDCD798], v7, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, v26, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v11);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  URL.absoluteURL.getter();
  v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v18, v11);
  v20 = URL.path.getter();
  v22 = v21;
  result = ((uint64_t (*)(char *, uint64_t))v19)(v14, v11);
  v24 = v27;
  *v27 = v20;
  v24[1] = v22;
  return result;
}

void MLHandActionClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned __int8 v28;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  OUTLINED_FUNCTION_35_24();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_16_40(v11, v24);
  v12 = OUTLINED_FUNCTION_71_12();
  if (v12 == 5)
  {
    v25 = v9;
    v26 = (void *)v5;
    v15 = v1
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String))
                 + 48);
    v13 = *(void **)v15;
    v14 = *(void **)(v15 + 8);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_34_0();
    v16 = OUTLINED_FUNCTION_93();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v1, v16);
  }
  else
  {
    if (v12 != 3)
    {
      MLHandActionClassifier.DataSource.videosWithAnnotations()();
      if (!v0)
      {
        if (v7 < 0)
          goto LABEL_14;
        type metadata accessor for MersenneTwisterGenerator();
        OUTLINED_FUNCTION_73_15();
        OUTLINED_FUNCTION_60_20();
        OUTLINED_FUNCTION_59_21(v17);
        specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v9, v27, v28, v5, v3, v18);
        swift_release();
        OUTLINED_FUNCTION_109_5(v27);
      }
      OUTLINED_FUNCTION_70_18();
      goto LABEL_13;
    }
    v25 = v9;
    v26 = (void *)v5;
    v13 = *(void **)(v1 + 16);
    v14 = *(void **)(v1 + 24);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_20_28();
  }
  MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v27);
  if (v0)
  {
    OUTLINED_FUNCTION_60_0();
LABEL_13:
    OUTLINED_FUNCTION_7();
    return;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v19 = v27;
    v20 = v28;
    type metadata accessor for MersenneTwisterGenerator();
    OUTLINED_FUNCTION_73_15();
    OUTLINED_FUNCTION_60_20();
    OUTLINED_FUNCTION_59_21(v21);
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v25, v22, v19, v20, v13, v14, v26, v3, v23);
    OUTLINED_FUNCTION_60_0();
    swift_release();
    OUTLINED_FUNCTION_20_28();
    goto LABEL_13;
  }
LABEL_14:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  OUTLINED_FUNCTION_8_1();
  v64 = v1;
  v65 = v2;
  v47 = v0;
  v4 = v3;
  v59 = OUTLINED_FUNCTION_78();
  v62 = *(_QWORD *)(v59 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v47 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.copy(original:)();
  v13 = (_QWORD *)result;
  v14 = 0;
  v52 = v4;
  v17 = *(_QWORD *)(v4 + 64);
  v16 = v4 + 64;
  v15 = v17;
  v18 = 1 << *(_BYTE *)(v16 - 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v15;
  v49 = v16;
  v50 = (unint64_t)(v18 + 63) >> 6;
  v51 = result + 64;
  v48 = (_QWORD *)result;
  if ((v19 & v15) == 0)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v21 | (v14 << 6); ; i = __clz(__rbit64(v24)) + (v14 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v52 + 48) + 16 * i);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * i);
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v54 = *v26;
      v56 = i;
      v57 = v20;
      v58 = v14;
      v63 = MEMORY[0x24BEE4AF8];
      v55 = v27;
      v31 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v32 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      v53 = v31;
      v33 = v31 + v32;
      v34 = *(_QWORD *)(v62 + 72);
      v60 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      v61 = v34;
      do
      {
        v35 = v59;
        v60(v11, v33, v59);
        URL.absoluteURL.getter();
        v36 = URL.path.getter();
        v38 = v37;
        v39 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v39(v8, v35);
        v39((uint64_t)v11, v35);
        v40 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v40 = v63;
        }
        v41 = *(_QWORD *)(v40 + 16);
        if (v41 >= *(_QWORD *)(v40 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v40 = v63;
        }
        *(_QWORD *)(v40 + 16) = v41 + 1;
        v42 = v40 + 16 * v41;
        *(_QWORD *)(v42 + 32) = v36;
        *(_QWORD *)(v42 + 40) = v38;
        v33 += v61;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      v13 = v48;
      v20 = v57;
      v14 = v58;
      result = v55;
      i = v56;
      v28 = v54;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v40 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v51 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v43 = (_QWORD *)(v13[6] + 16 * i);
    *v43 = v28;
    v43[1] = result;
    *(_QWORD *)(v13[7] + 8 * i) = v40;
    v44 = v13[2];
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (v45)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v13[2] = v46;
    if (v20)
      goto LABEL_4;
LABEL_5:
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_33;
    if (v23 >= v50)
      return (uint64_t)v13;
    v24 = *(_QWORD *)(v49 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v50)
        return (uint64_t)v13;
      v24 = *(_QWORD *)(v49 + 8 * v14);
      if (!v24)
      {
        v14 = v23 + 2;
        if (v23 + 2 >= v50)
          return (uint64_t)v13;
        v24 = *(_QWORD *)(v49 + 8 * v14);
        if (!v24)
          break;
      }
    }
LABEL_18:
    v20 = (v24 - 1) & v24;
  }
  v25 = v23 + 3;
  if (v25 >= v50)
    return (uint64_t)v13;
  v24 = *(_QWORD *)(v49 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v50)
      return (uint64_t)v13;
    v24 = *(_QWORD *)(v49 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  OUTLINED_FUNCTION_8_1();
  v62 = v1;
  v63 = v2;
  v45 = v0;
  v4 = v3;
  v57 = OUTLINED_FUNCTION_78();
  v60 = *(_QWORD *)(v57 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.copy(original:)();
  v13 = (_QWORD *)result;
  v14 = 0;
  v50 = v4;
  v17 = *(_QWORD *)(v4 + 64);
  v16 = v4 + 64;
  v15 = v17;
  v18 = 1 << *(_BYTE *)(v16 - 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v15;
  v47 = v16;
  v48 = (unint64_t)(v18 + 63) >> 6;
  v49 = result + 64;
  v46 = (_QWORD *)result;
  if ((v19 & v15) == 0)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v21 | (v14 << 6); ; i = __clz(__rbit64(v24)) + (v14 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * i);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * i);
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v52 = *v26;
      v54 = i;
      v55 = v20;
      v56 = v14;
      v61 = MEMORY[0x24BEE4AF8];
      v53 = v27;
      v31 = v29;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_195();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v32 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v51 = v31;
      v33 = v31 + v32;
      v34 = *(_QWORD *)(v60 + 72);
      v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
      v59 = v34;
      do
      {
        OUTLINED_FUNCTION_133_0((uint64_t)v11, v33, v58);
        URL.absoluteURL.getter();
        v35 = URL.path.getter();
        v37 = v36;
        OUTLINED_FUNCTION_88_5(v8);
        OUTLINED_FUNCTION_88_5((uint64_t)v11);
        v38 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v38 = v61;
        }
        v39 = *(_QWORD *)(v38 + 16);
        if (v39 >= *(_QWORD *)(v38 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v38 = v61;
        }
        *(_QWORD *)(v38 + 16) = v39 + 1;
        v40 = v38 + 16 * v39;
        *(_QWORD *)(v40 + 32) = v35;
        *(_QWORD *)(v40 + 40) = v37;
        v33 += v59;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      v13 = v46;
      v20 = v55;
      v14 = v56;
      result = v53;
      i = v54;
      v28 = v52;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v38 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v49 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v41 = (_QWORD *)(v13[6] + 16 * i);
    *v41 = v28;
    v41[1] = result;
    *(_QWORD *)(v13[7] + 8 * i) = v38;
    v42 = v13[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v13[2] = v44;
    if (v20)
      goto LABEL_4;
LABEL_5:
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_33;
    if (v23 >= v48)
      return (uint64_t)v13;
    v24 = *(_QWORD *)(v47 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v48)
        return (uint64_t)v13;
      v24 = *(_QWORD *)(v47 + 8 * v14);
      if (!v24)
      {
        v14 = v23 + 2;
        if (v23 + 2 >= v48)
          return (uint64_t)v13;
        v24 = *(_QWORD *)(v47 + 8 * v14);
        if (!v24)
          break;
      }
    }
LABEL_18:
    v20 = (v24 - 1) & v24;
  }
  v25 = v23 + 3;
  if (v25 >= v48)
    return (uint64_t)v13;
  v24 = *(_QWORD *)(v47 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v48)
      return (uint64_t)v13;
    v24 = *(_QWORD *)(v47 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t outlined destroy of AnyColumn?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandActionClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21AF669A0 + 4 * byte_21AFEF2FB[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLHandActionClassifier.DataSource(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v4 = type metadata accessor for URL();
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v5(a1, v4);
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v5(a1 + *(int *)(v6 + 48), v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1:
    case 2:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5:
      v7 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6:
      v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for MLHandActionClassifier.DataSource()
{
  char *v0;

  v0 = (char *)sub_21AF66F48 + 4 * byte_21AFEF309[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF66F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = type metadata accessor for URL();
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16);
  v3(v0, v1, v2);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v3(v0 + v4[12], v1 + v4[12], v2);
  v5 = v4[16];
  v6 = (_QWORD *)(v0 + v5);
  v7 = (_QWORD *)(v1 + v5);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  v9 = v4[20];
  v10 = (_QWORD *)(v0 + v9);
  v11 = (_QWORD *)(v1 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = v4[24];
  v14 = (_QWORD *)(v0 + v13);
  v15 = (_QWORD *)(v1 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v4[28];
  v18 = (_QWORD *)(v0 + v17);
  v19 = (_QWORD *)(v1 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for MLHandActionClassifier.DataSource(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource(result);
    v2 = (char *)&loc_21AF672D8 + 4 * byte_21AFEF310[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for MLHandActionClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for URL();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(&a1[v8[12]], &a2[v8[12]], v6);
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
      *(_OWORD *)&a1[v8[24]] = *(_OWORD *)&a2[v8[24]];
      *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
      goto LABEL_7;
    case 1u:
    case 2u:
      v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_7;
    case 5u:
      v10 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      goto LABEL_7;
    case 6u:
      v12 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
      *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
      *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
      *(_OWORD *)&a1[v13[24]] = *(_OWORD *)&a2[v13[24]];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for MLHandActionClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for URL();
        v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(&a1[v8[12]], &a2[v8[12]], v6);
        *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
        *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
        *(_OWORD *)&a1[v8[24]] = *(_OWORD *)&a2[v8[24]];
        *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
        goto LABEL_8;
      case 1u:
      case 2u:
        v9 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        goto LABEL_8;
      case 5u:
        v10 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
        *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        goto LABEL_8;
      case 6u:
        v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
        *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        *(_OWORD *)&a1[v13[24]] = *(_OWORD *)&a2[v13[24]];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandActionClassifier.DataSource()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  char *v19;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    v7 = (void *)v6;
    v8 = &unk_21AFEF330;
    v9 = &unk_21AFEF330;
    v10 = &unk_21AFEF348;
    v11 = &unk_21AFEF348;
    swift_getTupleTypeLayout();
    v13 = &v12;
    v14 = v6;
    v15 = v6;
    v16 = &unk_21AFEF360;
    v17 = &unk_21AFEF378;
    result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      v3 = *(_QWORD *)(result - 8) + 64;
      swift_getTupleTypeLayout();
      v18 = &v5;
      v6 = v3;
      v7 = &unk_21AFEF330;
      v8 = &unk_21AFEF330;
      v9 = &unk_21AFEF348;
      v10 = &unk_21AFEF348;
      swift_getTupleTypeLayout();
      v19 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_1_55(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v9 - 288, 0x7461506F65646976, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000, 0, 0, 0, a9);
}

uint64_t OUTLINED_FUNCTION_6_54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)(a1, 0x7461506F65646976, 0xE900000000000068, a2);
}

uint64_t OUTLINED_FUNCTION_13_49()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_16_40@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLHandActionClassifier.DataSource(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_17_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_19_38@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 344));
}

uint64_t OUTLINED_FUNCTION_20_38()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 - 96);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 104);
  *(_BYTE *)(v0 - 112) = v1;
  return DataFrame.init(_:)(v0 - 120);
}

uint64_t OUTLINED_FUNCTION_22_36()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  outlined consume of Result<_DataTable, Error>(v2, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v3 - 304));
}

uint64_t OUTLINED_FUNCTION_24_39@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(*(_QWORD *)(v2 - 360), v1);
}

uint64_t OUTLINED_FUNCTION_25_35()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_31_30()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 128) + 8))(v0, *(_QWORD *)(v1 - 104));
}

uint64_t OUTLINED_FUNCTION_35_24()
{
  return type metadata accessor for MLHandActionClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_37_18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v2;

  return static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)(a1, 0, a2, v2);
}

uint64_t OUTLINED_FUNCTION_39_23()
{
  return Column.init<A>(name:contents:)();
}

uint64_t OUTLINED_FUNCTION_45_25()
{
  return DataFrame.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_46_21()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_47_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_48_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_49_20()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_50_23()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_51_24()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v0, *(_QWORD *)(v1 - 208));
}

uint64_t OUTLINED_FUNCTION_53_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 184) + 8))(v0, *(_QWORD *)(v1 - 176));
}

uint64_t OUTLINED_FUNCTION_56_20()
{
  return static _VideoUtilities.generateVideoTable(_:)();
}

uint64_t OUTLINED_FUNCTION_57_19()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v0, *(_QWORD *)(v1 - 160));
}

uint64_t OUTLINED_FUNCTION_59_21(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = result;
  return result;
}

void OUTLINED_FUNCTION_60_20()
{
  uint64_t v0;

  MersenneTwisterGenerator.init(seed:)(v0);
}

uint64_t OUTLINED_FUNCTION_61_18()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_62_24()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

void OUTLINED_FUNCTION_63_15()
{
  MLDataTable.init()();
}

void OUTLINED_FUNCTION_64_14()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 - 96);
  *(_QWORD *)v0 = *(_QWORD *)(v1 - 104);
  *(_BYTE *)(v0 + 8) = v2;
}

uint64_t OUTLINED_FUNCTION_65_18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 304);
}

uint64_t OUTLINED_FUNCTION_67_18()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_68_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_69_12(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_70_18()
{
  uint64_t v0;

  return outlined destroy of MLHandActionClassifier.DataSource(v0);
}

uint64_t OUTLINED_FUNCTION_71_12()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_73_15()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_76_10()
{
  return type metadata accessor for UTType();
}

void OUTLINED_FUNCTION_80_11()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_81_15()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 - 112);
  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 120);
  *(_BYTE *)(v0 - 96) = v1;
}

uint64_t MLPhase.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AF67F8C + 4 * byte_21AFEF3AC[*v0]))(0x696C616974696E69, 0xEB0000000064657ALL);
}

uint64_t sub_21AF67F8C()
{
  return 0x6974636172747865;
}

uint64_t sub_21AF67FD0()
{
  return 0x636E657265666E69;
}

CreateML::MLPhase_optional __swiftcall MLPhase.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  CreateML::MLPhase_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLPhase.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance MLPhase()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance MLPhase()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLPhase(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MLPhase()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

CreateML::MLPhase_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLPhase(Swift::String *a1)
{
  return MLPhase.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLPhase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLPhase.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLPhase()
{
  lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLPhase()
{
  lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
  return RawRepresentable<>.encode(to:)();
}

uint64_t getEnumTagSinglePayload for MLPhase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21AF68258 + 4 * byte_21AFEF3B6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21AF6828C + 4 * byte_21AFEF3B1[v4]))();
}

uint64_t sub_21AF6828C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF68294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF6829CLL);
  return result;
}

uint64_t sub_21AF682A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF682B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21AF682B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF682BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLPhase()
{
  return &type metadata for MLPhase;
}

uint64_t Column<A>.parseAsJSONArrays()@<X0>(uint64_t a1@<X8>)
{
  return Column<A>.parseAsJSONArrays()(&demangling cache variable for type metadata for Column<String>, a1);
}

{
  return Column<A>.parseAsJSONArrays()(&demangling cache variable for type metadata for Column<Data>, a1);
}

void AnyColumn.convertedToFloats()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_70_5(v1, v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_44(v3, v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_22_23(v5, v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  v9 = OUTLINED_FUNCTION_23_39(v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_9_47();
  if (swift_dynamicCastMetatype())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_1_0();
    MEMORY[0x24BDAC7A8](v10);
    OUTLINED_FUNCTION_29_30();
    OUTLINED_FUNCTION_0_66(v11, partial apply for closure #1 in AnyColumn.convertedToFloats(), v12, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_16_41();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v15);
    OUTLINED_FUNCTION_27_40();
    OUTLINED_FUNCTION_0_66(v16, partial apply for closure #2 in AnyColumn.convertedToFloats(), v17, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_18_33();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v18);
    OUTLINED_FUNCTION_3_51();
    OUTLINED_FUNCTION_0_66(v19, (uint64_t (*)(_QWORD *, uint64_t *))partial apply for closure #3 in AnyColumn.convertedToFloats(), v20, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_19_39();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    v21 = AnyColumn.count.getter();
    MEMORY[0x24BDAC7A8](v21);
    OUTLINED_FUNCTION_28_33();
    OUTLINED_FUNCTION_0_66(v22, (uint64_t (*)(_QWORD *, uint64_t *))partial apply for closure #4 in AnyColumn.convertedToFloats(), v23, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_17_31();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_1_0();
    MEMORY[0x24BDAC7A8](v24);
    OUTLINED_FUNCTION_30_34();
    OUTLINED_FUNCTION_0_66(v25, partial apply for closure #5 in AnyColumn.convertedToFloats(), v26, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_15_38();
  }
  else
  {
    if (!OUTLINED_FUNCTION_2_57())
      goto LABEL_14;
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v27);
    OUTLINED_FUNCTION_3_51();
    OUTLINED_FUNCTION_0_66(v28, partial apply for closure #6 in AnyColumn.convertedToFloats(), v29, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_20_39();
  }
  v14(v13);
LABEL_14:
  OUTLINED_FUNCTION_9_5();
}

void AnyColumn.convertedToDoubles()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_70_5(v1, v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_44(v3, v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_22_23(v5, v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_14_41();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  v9 = OUTLINED_FUNCTION_23_39(v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_9_47();
  if (swift_dynamicCastMetatype())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_1_0();
    MEMORY[0x24BDAC7A8](v10);
    OUTLINED_FUNCTION_29_30();
    OUTLINED_FUNCTION_0_66(v11, partial apply for closure #1 in AnyColumn.convertedToDoubles(), v12, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_16_41();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v15);
    OUTLINED_FUNCTION_27_40();
    OUTLINED_FUNCTION_0_66(v16, partial apply for closure #2 in AnyColumn.convertedToDoubles(), v17, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_18_33();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v18);
    OUTLINED_FUNCTION_3_51();
    OUTLINED_FUNCTION_0_66(v19, (uint64_t (*)(_QWORD *, uint64_t *))partial apply for closure #3 in AnyColumn.convertedToDoubles(), v20, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_19_39();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    v21 = AnyColumn.count.getter();
    MEMORY[0x24BDAC7A8](v21);
    OUTLINED_FUNCTION_28_33();
    OUTLINED_FUNCTION_0_66(v22, (uint64_t (*)(_QWORD *, uint64_t *))partial apply for closure #4 in AnyColumn.convertedToDoubles(), v23, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_17_31();
  }
  else if (OUTLINED_FUNCTION_2_57())
  {
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_1_0();
    MEMORY[0x24BDAC7A8](v24);
    OUTLINED_FUNCTION_30_34();
    OUTLINED_FUNCTION_0_66(v25, partial apply for closure #5 in AnyColumn.convertedToDoubles(), v26, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_15_38();
  }
  else
  {
    if (!OUTLINED_FUNCTION_2_57())
      goto LABEL_14;
    OUTLINED_FUNCTION_1_56();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_10_45();
    MEMORY[0x24BDAC7A8](v27);
    OUTLINED_FUNCTION_3_51();
    OUTLINED_FUNCTION_0_66(v28, partial apply for closure #6 in AnyColumn.convertedToDoubles(), v29, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    v13 = OUTLINED_FUNCTION_20_39();
  }
  v14(v13);
LABEL_14:
  OUTLINED_FUNCTION_9_5();
}

uint64_t AnyColumn.convertedToStrings()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(__int128 *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[32];
  _OWORD v32[2];
  _BYTE v33[32];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v3 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_91_1();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype())
    return AnyColumn.assumingType<A>(_:)();
  v28 = v2;
  v27 = v7;
  v13 = v29;
  if (OUTLINED_FUNCTION_27_10())
  {
    AnyColumn.assumingType<A>(_:)();
    OUTLINED_FUNCTION_26_36();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  }
  if (OUTLINED_FUNCTION_27_10())
  {
    OUTLINED_FUNCTION_32_25();
    OUTLINED_FUNCTION_26_36();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v1, v6);
  }
  if (OUTLINED_FUNCTION_27_10())
  {
    OUTLINED_FUNCTION_32_25();
    OUTLINED_FUNCTION_26_36();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v13);
  }
  v14 = AnyColumn.name.getter();
  v16 = v15;
  type metadata accessor for AnyColumn();
  lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
  v17 = dispatch thunk of Collection.count.getter();
  v18 = MEMORY[0x24BEE4AF8];
  if (!v17)
    goto LABEL_20;
  v19 = v17;
  v27 = v16;
  v28 = v14;
  v36 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v19 & 0x8000000000000000) == 0)
  {
    v29 = MEMORY[0x24BEE4AD8] + 8;
    do
    {
      v20 = (void (*)(__int128 *, _QWORD))dispatch thunk of Collection.subscript.read();
      outlined init with copy of Any?(v21, (uint64_t)v33);
      v20(&v34, 0);
      outlined init with copy of Any?((uint64_t)v33, (uint64_t)&v34);
      if (v35)
      {
        outlined init with take of Any(&v34, v32);
        outlined init with copy of Any((uint64_t)v32, (uint64_t)v31);
        v22 = String.init<A>(describing:)();
        v24 = v23;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      }
      else
      {
        v22 = 0;
        v24 = 0;
      }
      outlined destroy of Any?((uint64_t)v33);
      v18 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v18 = v36;
      }
      v25 = *(_QWORD *)(v18 + 16);
      if (v25 >= *(_QWORD *)(v18 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v18 = v36;
      }
      *(_QWORD *)(v18 + 16) = v25 + 1;
      v26 = v18 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v22;
      *(_QWORD *)(v26 + 40) = v24;
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
    }
    while (v19);
LABEL_20:
    *(_QWORD *)&v34 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type [String?] and conformance [A], &demangling cache variable for type metadata for [String?], MEMORY[0x24BEE12C8]);
    return Column.init<A>(name:contents:)();
  }
  __break(1u);
  return result;
}

uint64_t Column<A>.parseAsJSONArrays()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  v18 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_3();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v17 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - v12;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  result = Column.map<A>(_:)();
  if (!v2)
  {
    Column.name.getter();
    v15 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v8, v13, v4);
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<[Any]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Any]>, MEMORY[0x24BDF5F98]);
    Column.init<A>(name:contents:)();
    Column.eraseToAnyColumn()();
    v16 = *(void (**)(char *, uint64_t))(v15 + 8);
    v16(v11, v4);
    return ((uint64_t (*)(char *, uint64_t))v16)(v13, v4);
  }
  return result;
}

uint64_t implicit closure #1 in AnyColumn.convertedToStrings()()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned String)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = implicit closure #1 in AnyColumn.convertedToStrings()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToStrings()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Float.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToStrings()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Double.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = (double)v10;
        if (v11)
          v9 = NAN;
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = (double)v10;
        if (v11)
          v9 = NAN;
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

void closure #3 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char v13;

  OUTLINED_FUNCTION_8_52(a1, a2, a3, a4);
  v7 = Column.count.getter();
  *v4 = v7;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v7;
    if (v7)
    {
      v9 = 0;
      v10 = *v5;
      do
      {
        OUTLINED_FUNCTION_11_46();
        v11 = (double)v12;
        if (v13)
          v11 = NAN;
        *(double *)(v10 + 8 * v9) = v11;
        v9 = v6;
      }
      while (v8 != v6);
    }
    OUTLINED_FUNCTION_7_50();
  }
}

uint64_t closure #5 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = v10;
        if (v11)
          v9 = NAN;
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #6 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = v10;
        if (v11)
          v9 = NAN;
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = (float)v10;
        if (v11)
          v9 = NAN;
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = (float)v10;
        if (v11)
          v9 = NAN;
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

void closure #3 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char v13;

  OUTLINED_FUNCTION_8_52(a1, a2, a3, a4);
  v7 = Column.count.getter();
  *v4 = v7;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v7;
    if (v7)
    {
      v9 = 0;
      v10 = *v5;
      do
      {
        OUTLINED_FUNCTION_11_46();
        v11 = (float)v12;
        if (v13)
          v11 = NAN;
        *(float *)(v10 + 4 * v9) = v11;
        v9 = v6;
      }
      while (v8 != v6);
    }
    OUTLINED_FUNCTION_7_50();
  }
}

uint64_t closure #5 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = v10;
        if (v11)
          v9 = NAN;
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #6 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = v6 + 1;
        result = Column.subscript.getter();
        v9 = v10;
        if (v11)
          v9 = NAN;
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t partial apply for closure #6 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #6 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t closure #1 in Column<A>.parseAsJSONArrays()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  Class isa;
  id v14;
  id v15;
  id v16;
  double v17;
  id v19[5];

  v19[4] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for String.Encoding();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  static String.Encoding.utf8.getter();
  v9 = String.data(using:allowLossyConversion:)();
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 == 15)
    goto LABEL_5;
  v12 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v19[0] = 0;
  v14 = objc_msgSend(v12, sel_JSONObjectWithData_options_error_, isa, 0, v19);

  if (!v14)
  {
    v16 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v17);
    return outlined consume of Data?(v9, v11);
  }
  v15 = v19[0];
  _bridgeAnyObjectToAny(_:)();
  outlined consume of Data?(v9, v11);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
LABEL_5:
    *a2 = 0;
  return result;
}

uint64_t closure #1 in Column<A>.parseAsJSONArrays()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;
  id v7;
  id v8;
  id v9;
  double v10;
  id v11[5];

  v11[4] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  if (v3 >> 60 == 15)
  {
LABEL_4:
    *a2 = 0;
    return result;
  }
  v4 = *(_QWORD *)result;
  v5 = (void *)objc_opt_self();
  outlined copy of Data._Representation(v4, v3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  v7 = objc_msgSend(v5, sel_JSONObjectWithData_options_error_, isa, 0, v11);

  if (v7)
  {
    v8 = v11[0];
    _bridgeAnyObjectToAny(_:)();
    outlined consume of Data?(v4, v3);
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
      return result;
    goto LABEL_4;
  }
  v9 = v11[0];
  _convertNSErrorToError(_:)();

  swift_willThrow(v10);
  return outlined consume of Data?(v4, v3);
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t *), uint64_t a3)
{
  return specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(a1, a2, a3, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t *), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;

  v7 = a4();
  v9 = v8;
  v11[1] = a1;
  v12 = 0;
  v11[0] = v8;
  result = a2(v11, &v12);
  if (v4)
  {
    if (v12 > a1)
    {
      __break(1u);
    }
    else
    {
      if (!v11[0])
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v9 == v11[0])
      {
        *(_QWORD *)(v7 + 16) = v12;
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  if (v12 > a1)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v11[0])
  {
    if (v9 == v11[0])
    {
      *(_QWORD *)(v7 + 16) = v12;
      return v7;
    }
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #5 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #5 in AnyColumn.convertedToFloats()(a1, a2);
}

void partial apply for closure #4 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in AnyColumn.convertedToFloats()(a1, a2, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for Column<Int>);
}

void partial apply for closure #3 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in AnyColumn.convertedToFloats()(a1, a2, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for Column<Int64>);
}

uint64_t partial apply for closure #2 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #2 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t partial apply for closure #1 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t partial apply for closure #6 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #6 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t partial apply for closure #5 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #5 in AnyColumn.convertedToDoubles()(a1, a2);
}

void partial apply for closure #4 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in AnyColumn.convertedToDoubles()(a1, a2, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for Column<Int>);
}

void partial apply for closure #3 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in AnyColumn.convertedToDoubles()(a1, a2, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for Column<Int64>);
}

uint64_t partial apply for closure #2 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #2 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t partial apply for closure #1 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_66(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t *), uint64_t a3, uint64_t (*a4)(void))
{
  return specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_1_56()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_2_57()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_8_52(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return __swift_instantiateConcreteTypeFromMangledName(a4);
}

uint64_t OUTLINED_FUNCTION_9_47()
{
  return AnyColumn.wrappedElementType.getter();
}

uint64_t OUTLINED_FUNCTION_11_46()
{
  return Column.subscript.getter();
}

void OUTLINED_FUNCTION_14_44(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_15_38()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_16_41()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_17_31()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_18_33()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_19_39()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_20_39()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_39(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_36()
{
  return Column.mapNonNil<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_32_25()
{
  return AnyColumn.assumingType<A>(_:)();
}

void **assignWithCopy for MLLinearRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLinearRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLLinearRegressor.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLLinearRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLLinearRegressor.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLLinearRegressor.ModelParameters.ValidationData.asTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AF6A178 + dword_21AF6A27C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF6A188()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AF6A3F8 + 4 * byte_21AFEF4D0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF6A3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

float MLFewShotSoundClassifier.ModelParameters.learningRate.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

uint64_t MLFewShotSoundClassifier.ModelParameters.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

float MLFewShotSoundClassifier.ModelParameters.lossParameters.getter@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(float *)(a1 + 8) = result;
  return result;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float static MLFewShotSoundClassifier.__Defaults.gamma.getter()
{
  return 10000.0;
}

float static MLFewShotSoundClassifier.__Defaults.epsilon.getter()
{
  return 0.0000001;
}

float static MLFewShotSoundClassifier.__Defaults.alpha.getter()
{
  return 2.0;
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.init(gamma:epsilon:alpha:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.ModelParameters.learningRate.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

float (*MLFewShotSoundClassifier.ModelParameters.learningRate.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return MLFewShotSoundClassifier.ModelParameters.learningRate.modify;
}

float MLFewShotSoundClassifier.ModelParameters.learningRate.modify(float *a1)
{
  float result;

  result = a1[2];
  *(float *)(*(_QWORD *)a1 + 8) = result;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.batchSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

_QWORD *(*MLFewShotSoundClassifier.ModelParameters.batchSize.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  return MLFewShotSoundClassifier.ModelParameters.batchSize.modify;
}

_QWORD *MLFewShotSoundClassifier.ModelParameters.batchSize.modify(_QWORD *result)
{
  *(_QWORD *)(result[1] + 16) = *result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.lossParamters.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  return MLFewShotSoundClassifier.ModelParameters.lossParamters.modify;
}

float key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters@<S0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  int v3;
  float result;
  uint64_t v5;
  int v6;

  a1(&v5);
  v3 = v6;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v3;
  OUTLINED_FUNCTION_23_7();
  return result;
}

void key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *))
{
  int v5;
  uint64_t v6;
  int v7;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1;
  v7 = v5;
  a5(&v6);
  OUTLINED_FUNCTION_23_7();
}

float MLFewShotSoundClassifier.ModelParameters.lossParameters.setter(uint64_t a1)
{
  uint64_t v1;
  float result;

  result = *(float *)(a1 + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)a1;
  *(float *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.lossParameters.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  return MLFewShotSoundClassifier.ModelParameters.lossParamters.modify;
}

float MLFewShotSoundClassifier.ModelParameters.lossParamters.modify(float *a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)a1;
  result = a1[4];
  *(_QWORD *)(v1 + 24) = *((_QWORD *)a1 + 1);
  *(float *)(v1 + 32) = result;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.hallucinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_67() + 32);
  v4 = OUTLINED_FUNCTION_78();
  return OUTLINED_FUNCTION_24_1(a1, v3, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 16));
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ModelParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLFewShotSoundClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier.ModelParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.hallucinator.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_67() + 32);
  v4 = OUTLINED_FUNCTION_78();
  return OUTLINED_FUNCTION_24_1(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.hallucinator.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_67();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.pretrainedModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_67() + 36);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t MLFewShotSoundClassifier.ModelParameters.pretrainedModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_67() + 36);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.pretrainedModel.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_67();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t static MLFewShotSoundClassifier.__Defaults.batchSize.getter()
{
  return 128;
}

float static MLFewShotSoundClassifier.__Defaults.learningRate.getter()
{
  return 0.01;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.init(maxIterations:batchSize:learningRate:lossParameters:hallucinator:pretrainedModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v14 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a6 + 8) = 1008981770;
  *(_QWORD *)(a6 + 16) = 128;
  *(_QWORD *)(a6 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a6 + 32) = 0x40000000;
  v15 = OUTLINED_FUNCTION_0_67();
  v16 = a6 + *(int *)(v15 + 36);
  v17 = OUTLINED_FUNCTION_78();
  v18 = *a3;
  __swift_storeEnumTagSinglePayload(v16, 1, 1, v17);
  *(_QWORD *)a6 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a6 + *(int *)(v15 + 32), a4, v17);
  result = outlined assign with take of URL?(a5, v16);
  *(_QWORD *)(a6 + 16) = a2;
  *(float *)(a6 + 8) = a7;
  *(_QWORD *)(a6 + 24) = v18;
  *(_DWORD *)(a6 + 32) = v14;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.init(maxIterations:hallucinator:pretrainedModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  *(_DWORD *)(a4 + 8) = 1008981770;
  *(_QWORD *)(a4 + 16) = 128;
  *(_QWORD *)(a4 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a4 + 32) = 0x40000000;
  v8 = OUTLINED_FUNCTION_0_67();
  v9 = a4 + *(int *)(v8 + 36);
  v10 = OUTLINED_FUNCTION_78();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  *(_QWORD *)a4 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a4 + *(int *)(v8 + 32), a2, v10);
  result = outlined assign with take of URL?(a3, v9);
  *(_DWORD *)(a4 + 8) = 1008981770;
  *(_QWORD *)(a4 + 16) = 128;
  *(_QWORD *)(a4 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a4 + 32) = 0x40000000;
  return result;
}

uint64_t static MLFewShotSoundClassifier.__Defaults.maxIterations.getter()
{
  return 25;
}

void sub_21AF6AB64(float *a1@<X8>)
{
  *a1 = MLFewShotSoundClassifier.ModelParameters.learningRate.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AF6AB88(float *a1)
{
  MLFewShotSoundClassifier.ModelParameters.learningRate.setter(*a1);
  OUTLINED_FUNCTION_22();
}

void sub_21AF6ABA8(uint64_t *a1@<X8>)
{
  *a1 = MLFewShotSoundClassifier.ModelParameters.batchSize.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AF6ABCC(uint64_t *a1)
{
  MLFewShotSoundClassifier.ModelParameters.batchSize.setter(*a1);
  OUTLINED_FUNCTION_22();
}

float sub_21AF6ABEC@<S0>(uint64_t a1@<X8>)
{
  return key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters((void (*)(uint64_t *__return_ptr))MLFewShotSoundClassifier.ModelParameters.lossParamters.getter, a1);
}

void sub_21AF6AC08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(a1, a2, a3, a4, (void (*)(uint64_t *))MLFewShotSoundClassifier.ModelParameters.lossParamters.setter);
}

float sub_21AF6AC24@<S0>(uint64_t a1@<X8>)
{
  return key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters((void (*)(uint64_t *__return_ptr))MLFewShotSoundClassifier.ModelParameters.lossParameters.getter, a1);
}

void sub_21AF6AC40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(a1, a2, a3, a4, (void (*)(uint64_t *))MLFewShotSoundClassifier.ModelParameters.lossParameters.setter);
}

_QWORD *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(int *)(a3 + 32);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v11 = type metadata accessor for URL();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 36);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v11))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v14, (uint64_t)v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for URL();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v8(v4, v5);
  v6 = a1 + *(int *)(a2 + 36);
  result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!(_DWORD)result)
    return v8(v6, v5);
  return result;
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  int EnumTagSinglePayload;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  LODWORD(v7) = __swift_getEnumTagSinglePayload(a1 + v12, 1, v9);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9);
  if (!(_DWORD)v7)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  int EnumTagSinglePayload;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  LODWORD(v7) = __swift_getEnumTagSinglePayload(a1 + v12, 1, v9);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9);
  if (!(_DWORD)v7)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF6B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_78();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = *(int *)(a3 + 32);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v8 = *(int *)(a3 + 36);
  }
  return __swift_getEnumTagSinglePayload(a1 + v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF6B318(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_78();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = *(int *)(a4 + 32);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v10 = *(int *)(a4 + 36);
  }
  return __swift_storeEnumTagSinglePayload(a1 + v10, a2, a2, v9);
}

void type metadata completion function for MLFewShotSoundClassifier.ModelParameters()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters.LossParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters.LossParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.ModelParameters.LossParameters()
{
  return &type metadata for MLFewShotSoundClassifier.ModelParameters.LossParameters;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.__Defaults()
{
  return &type metadata for MLFewShotSoundClassifier.__Defaults;
}

uint64_t OUTLINED_FUNCTION_0_67()
{
  return type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
}

uint64_t Array<A>.floatTensor(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v27 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  v9 = type metadata accessor for ScalarType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  v18 = type metadata accessor for TensorShape();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_49();
  v22 = v21 - v20;
  outlined init with copy of TensorShape?(a1, v17);
  if (__swift_getEnumTagSinglePayload(v17, 1, v18) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a2 + 16);
    MEMORY[0x220758C74](v23);
    outlined destroy of TensorShape?(v17);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v17, v18);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BE6B8B8], v9);
  v24 = type metadata accessor for ComputeDevice();
  v25 = __swift_storeEnumTagSinglePayload(v8, 1, 1, v24);
  MEMORY[0x24BDAC7A8](v25);
  *(&v27 - 2) = a2;
  return Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)();
}

uint64_t outlined init with copy of TensorShape?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in Array<A>.floatTensor(shape:)(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3 >> 60)
    __break(1u);
  else
    closure #1 in closure #1 in Array<A>.floatTensor(shape:)((const double *)(a3 + 32), a3 + 32 + 8 * v3, a1, a2);
}

void closure #1 in closure #1 in Array<A>.floatTensor(shape:)(const double *a1, uint64_t a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  vDSP_Length v5;

  if (a3)
  {
    v4 = (a4 - (uint64_t)a3) / 4;
    if (a1)
      goto LABEL_3;
LABEL_10:
    if ((v4 & 0x8000000000000000) == 0)
      __break(1u);
    goto LABEL_12;
  }
  v4 = 0;
  if (!a1)
    goto LABEL_10;
LABEL_3:
  if (v4 >= (a2 - (uint64_t)a1) / 8)
    v5 = (a2 - (uint64_t)a1) / 8;
  else
    v5 = v4;
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3)
  {
    vDSP_vdpsp(a1, 1, a3, 1, v5);
    return;
  }
LABEL_13:
  __break(1u);
}

void partial apply for closure #1 in Array<A>.floatTensor(shape:)(float *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in Array<A>.floatTensor(shape:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t static BundleUtilities.getMLModelURL(at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for bundle != -1)
    swift_once();
  v13 = outlined bridged method (mbgbnn) of @objc NSBundle.url(forResource:withExtension:)(a1, (uint64_t)a2, 0x6C65646F6D6C6DLL, 0xE700000000000000, (void *)static BundleUtilities.bundle);
  if (v13)
  {
    v14 = v13;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v15(v12, v9, v6);
    OUTLINED_FUNCTION_0_68((uint64_t)v12, 0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v6) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a3, v12, v6);
  }
  else
  {
    OUTLINED_FUNCTION_0_68((uint64_t)v12, 1);
  }
  outlined destroy of URL?((uint64_t)v12);
  v21 = 0xD000000000000015;
  v22 = 0x800000021AFF7CF0;
  v17._countAndFlagsBits = a1;
  v17._object = a2;
  String.append(_:)(v17);
  v18 = v21;
  v19 = v22;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v20 = v18;
  *(_QWORD *)(v20 + 8) = v19;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_BYTE *)(v20 + 48) = 0;
  return swift_willThrow(0.0);
}

